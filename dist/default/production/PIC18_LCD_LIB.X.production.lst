

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Thu Mar 30 23:16:20 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    70                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    76                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    77                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    78  0000                     
    79                           ; Version 1.40
    80                           ; Generated 01/12/2016 GMT
    81                           ; 
    82                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC18F4620 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     
   114                           	psect	idataCOMRAM
   115  0038EC                     __pidataCOMRAM:
   116                           	opt stack 0
   117                           
   118                           ;initializer for _V_LIM_9V
   119  0038EC  77                 	db	119
   120  0038ED  EE                 	db	238
   121  0038EE  3F                 	db	63
   122                           
   123                           ;initializer for _V_LIM_AA
   124  0038EF  C1                 	db	193
   125  0038F0  4A                 	db	74
   126  0038F1  3E                 	db	62
   127                           
   128                           ;initializer for _V_LIM_C
   129  0038F2  A7                 	db	167
   130  0038F3  A9                 	db	169
   131  0038F4  3F                 	db	63
   132                           
   133                           ;initializer for _angle
   134  0038F5  005A               	dw	90
   135                           
   136                           ;initializer for _padAngle_OPEN
   137  0038F7  00B4               	dw	180
   138                           
   139                           ;initializer for _redirectAngle_9V
   140  0038F9  0076               	dw	118
   141                           
   142                           ;initializer for _AA_float
   143  0038FB  0002               	dw	2
   144  0038FD  0005               	dw	5
   145                           
   146                           ;initializer for _padPin1
   147  0038FF  0002               	dw	2
   148  003901  0006               	dw	6
   149                           
   150                           	psect	idataBANK0
   151  00391C                     __pidataBANK0:
   152                           	opt stack 0
   153                           
   154                           ;initializer for _padAngle_CLOSE
   155  00391C  001E               	dw	30
   156                           
   157                           ;initializer for _redirectAngle_C
   158  00391E  00A6               	dw	166
   159                           
   160                           ;initializer for _redirectAngle_OTHER
   161  003920  0099               	dw	153
   162                           
   163                           	psect	idataBANK1
   164  0038B0                     __pidataBANK1:
   165                           	opt stack 0
   166                           
   167                           ;initializer for _padAngle_NEUTRAL
   168  0038B0  004C               	dw	76
   169                           
   170                           ;initializer for _redirectAngle_AA
   171  0038B2  008A               	dw	138
   172                           
   173                           ;initializer for _stoppingTime
   174  0038B4  2710               	dw	10000
   175                           
   176                           ;initializer for _conveyorServo
   177  0038B6  0002               	dw	2
   178  0038B8  0002               	dw	2
   179                           
   180                           ;initializer for _cylinderDir
   181  0038BA  0003               	dw	3
   182  0038BC  0001               	dw	1
   183                           
   184                           ;initializer for _cylinderMotor
   185  0038BE  0002               	dw	2
   186  0038C0  0000               	dw	0
   187                           
   188                           ;initializer for _padPin2
   189  0038C2  0002               	dw	2
   190  0038C4  0007               	dw	7
   191                           
   192                           ;initializer for _padServo
   193  0038C6  0002               	dw	2
   194  0038C8  0001               	dw	1
   195                           
   196                           ;initializer for _redirectingServo
   197  0038CA  0003               	dw	3
   198  0038CC  0000               	dw	0
   199                           
   200                           	psect	mediumconst
   201  00FE1C                     __pmediumconst:
   202                           	opt stack 0
   203  00FE1C  00                 	db	0
   204  00FE1D                     _dpowers:
   205                           	opt stack 0
   206  00FE1D  0001               	dw	1
   207  00FE1F  0000               	dw	0
   208  00FE21  000A               	dw	10
   209  00FE23  0000               	dw	0
   210  00FE25  0064               	dw	100
   211  00FE27  0000               	dw	0
   212  00FE29  03E8               	dw	1000
   213  00FE2B  0000               	dw	0
   214  00FE2D  2710               	dw	10000
   215  00FE2F  0000               	dw	0
   216  00FE31  86A0               	dw	34464
   217  00FE33  0001               	dw	1
   218  00FE35  4240               	dw	16960
   219  00FE37  000F               	dw	15
   220  00FE39  9680               	dw	38528
   221  00FE3B  0098               	dw	152
   222  00FE3D  E100               	dw	57600
   223  00FE3F  05F5               	dw	1525
   224  00FE41  CA00               	dw	51712
   225  00FE43  3B9A               	dw	15258
   226  00FE45                     __end_of_dpowers:
   227                           	opt stack 0
   228  00FE45                     __npowers_:
   229                           	opt stack 0
   230  00FE45  00                 	db	0
   231  00FE46  80                 	db	128
   232  00FE47  3F                 	db	63
   233  00FE48  CD                 	db	205
   234  00FE49  CC                 	db	204
   235  00FE4A  3D                 	db	61
   236  00FE4B  D7                 	db	215
   237  00FE4C  23                 	db	35
   238  00FE4D  3C                 	db	60
   239  00FE4E  12                 	db	18
   240  00FE4F  83                 	db	131
   241  00FE50  3A                 	db	58
   242  00FE51  B7                 	db	183
   243  00FE52  D1                 	db	209
   244  00FE53  38                 	db	56
   245  00FE54  C6                 	db	198
   246  00FE55  27                 	db	39
   247  00FE56  37                 	db	55
   248  00FE57  38                 	db	56
   249  00FE58  86                 	db	134
   250  00FE59  35                 	db	53
   251  00FE5A  C0                 	db	192
   252  00FE5B  D6                 	db	214
   253  00FE5C  33                 	db	51
   254  00FE5D  CC                 	db	204
   255  00FE5E  2B                 	db	43
   256  00FE5F  32                 	db	50
   257  00FE60  70                 	db	112
   258  00FE61  89                 	db	137
   259  00FE62  30                 	db	48
   260  00FE63  E7                 	db	231
   261  00FE64  DB                 	db	219
   262  00FE65  2E                 	db	46
   263  00FE66  E5                 	db	229
   264  00FE67  3C                 	db	60
   265  00FE68  1E                 	db	30
   266  00FE69  42                 	db	66
   267  00FE6A  A2                 	db	162
   268  00FE6B  0D                 	db	13
   269  00FE6C                     __end_of__npowers_:
   270                           	opt stack 0
   271  00FE6C                     __powers_:
   272                           	opt stack 0
   273  00FE6C  00                 	db	0
   274  00FE6D  80                 	db	128
   275  00FE6E  3F                 	db	63
   276  00FE6F  00                 	db	0
   277  00FE70  20                 	db	32
   278  00FE71  41                 	db	65
   279  00FE72  00                 	db	0
   280  00FE73  C8                 	db	200
   281  00FE74  42                 	db	66
   282  00FE75  00                 	db	0
   283  00FE76  7A                 	db	122
   284  00FE77  44                 	db	68
   285  00FE78  40                 	db	64
   286  00FE79  1C                 	db	28
   287  00FE7A  46                 	db	70
   288  00FE7B  50                 	db	80
   289  00FE7C  C3                 	db	195
   290  00FE7D  47                 	db	71
   291  00FE7E  24                 	db	36
   292  00FE7F  74                 	db	116
   293  00FE80  49                 	db	73
   294  00FE81  97                 	db	151
   295  00FE82  18                 	db	24
   296  00FE83  4B                 	db	75
   297  00FE84  BC                 	db	188
   298  00FE85  BE                 	db	190
   299  00FE86  4C                 	db	76
   300  00FE87  6B                 	db	107
   301  00FE88  6E                 	db	110
   302  00FE89  4E                 	db	78
   303  00FE8A  03                 	db	3
   304  00FE8B  15                 	db	21
   305  00FE8C  50                 	db	80
   306  00FE8D  79                 	db	121
   307  00FE8E  AD                 	db	173
   308  00FE8F  60                 	db	96
   309  00FE90  F3                 	db	243
   310  00FE91  49                 	db	73
   311  00FE92  71                 	db	113
   312  00FE93                     __end_of__powers_:
   313                           	opt stack 0
   314  00FE93                     _hexpowers:
   315                           	opt stack 0
   316  00FE93  0001               	dw	1
   317  00FE95  0000               	dw	0
   318  00FE97  0010               	dw	16
   319  00FE99  0000               	dw	0
   320  00FE9B  0100               	dw	256
   321  00FE9D  0000               	dw	0
   322  00FE9F  1000               	dw	4096
   323  00FEA1  0000               	dw	0
   324  00FEA3  0000               	dw	0
   325  00FEA5  0001               	dw	1
   326  00FEA7  0000               	dw	0
   327  00FEA9  0010               	dw	16
   328  00FEAB  0000               	dw	0
   329  00FEAD  0100               	dw	256
   330  00FEAF  0000               	dw	0
   331  00FEB1  1000               	dw	4096
   332  00FEB3                     __end_of_hexpowers:
   333                           	opt stack 0
   334  00FEB3                     _keys:
   335                           	opt stack 0
   336  00FEB3  31                 	db	49
   337  00FEB4  32                 	db	50
   338  00FEB5  33                 	db	51
   339  00FEB6  41                 	db	65
   340  00FEB7  34                 	db	52
   341  00FEB8  35                 	db	53
   342  00FEB9  36                 	db	54
   343  00FEBA  42                 	db	66
   344  00FEBB  37                 	db	55
   345  00FEBC  38                 	db	56
   346  00FEBD  39                 	db	57
   347  00FEBE  43                 	db	67
   348  00FEBF  2A                 	db	42
   349  00FEC0  30                 	db	48
   350  00FEC1  23                 	db	35
   351  00FEC2  44                 	db	68
   352  00FEC3  00                 	db	0
   353  00FEC4                     __end_of_keys:
   354                           	opt stack 0
   355  00FEC4                     _happynewyear:
   356                           	opt stack 0
   357  00FEC4  00                 	db	0
   358  00FEC5  59                 	db	89
   359  00FEC6  03                 	db	3
   360  00FEC7  01                 	db	1
   361  00FEC8  13                 	db	19
   362  00FEC9  04                 	db	4
   363  00FECA  17                 	db	23
   364  00FECB                     __end_of_happynewyear:
   365                           	opt stack 0
   366  0000                     _ADCON0	set	4034
   367  0000                     _ADCON1	set	4033
   368  0000                     _ADCON2	set	4032
   369  0000                     _ADRESH	set	4036
   370  0000                     _ADRESL	set	4035
   371  0000                     _EEADR	set	4009
   372  0000                     _EEADRH	set	4010
   373  0000                     _EECON1	set	4006
   374  0000                     _EECON2	set	4007
   375  0000                     _EEDATA	set	4008
   376  0000                     _INTCONbits	set	4082
   377  0000                     _LATA	set	3977
   378  0000                     _LATB	set	3978
   379  0000                     _LATC	set	3979
   380  0000                     _LATD	set	3980
   381  0000                     _LATDbits	set	3980
   382  0000                     _LATE	set	3981
   383  0000                     _PORTA	set	3968
   384  0000                     _PORTB	set	3969
   385  0000                     _PORTBbits	set	3969
   386  0000                     _PORTC	set	3970
   387  0000                     _PORTD	set	3971
   388  0000                     _SSPADD	set	4040
   389  0000                     _SSPBUF	set	4041
   390  0000                     _SSPCON1	set	4038
   391  0000                     _SSPCON2	set	4037
   392  0000                     _SSPSTAT	set	4039
   393  0000                     _T0CON	set	4053
   394  0000                     _T1CON	set	4045
   395  0000                     _T3CON	set	4017
   396  0000                     _TMR0H	set	4055
   397  0000                     _TMR0L	set	4054
   398  0000                     _TMR1H	set	4047
   399  0000                     _TMR1L	set	4046
   400  0000                     _TMR3H	set	4019
   401  0000                     _TMR3L	set	4018
   402  0000                     _TRISA	set	3986
   403  0000                     _TRISB	set	3987
   404  0000                     _TRISC	set	3988
   405  0000                     _TRISD	set	3989
   406  0000                     _TRISE	set	3990
   407  0000                     _ACKDT	set	32301
   408  0000                     _ACKEN	set	32300
   409  0000                     _EEIF	set	32012
   410  0000                     _INT0IE	set	32660
   411  0000                     _INT0IF	set	32657
   412  0000                     _INT1IE	set	32643
   413  0000                     _INT1IF	set	32640
   414  0000                     _PEIE	set	32662
   415  0000                     _PEN	set	32298
   416  0000                     _RCEN	set	32299
   417  0000                     _RSEN	set	32297
   418  0000                     _SEN	set	32296
   419  0000                     _TMR0IE	set	32661
   420  0000                     _TMR0IF	set	32658
   421  0000                     _TMR1IE	set	31976
   422  0000                     _TMR1IF	set	31984
   423  0000                     _TMR3IE	set	32001
   424  0000                     _TRISC3	set	31907
   425  0000                     _TRISC4	set	31908
   426  00FECB                     STR_13:
   427  00FECB  25                 	db	37
   428  00FECC  63                 	db	99	;'c'
   429  00FECD  29                 	db	41
   430  00FECE  20                 	db	32
   431  00FECF  74                 	db	116	;'t'
   432  00FED0  69                 	db	105	;'i'
   433  00FED1  6D                 	db	109	;'m'
   434  00FED2  65                 	db	101	;'e'
   435  00FED3  20                 	db	32
   436  00FED4  20                 	db	32
   437  00FED5  3C                 	db	60	;'<'
   438  00FED6  41                 	db	65	;'A'
   439  00FED7  20                 	db	32
   440  00FED8  20                 	db	32
   441  00FED9  20                 	db	32
   442  00FEDA  20                 	db	32
   443  00FEDB  20                 	db	32
   444  00FEDC  0A                 	db	10
   445  00FEDD  00                 	db	0
   446  00FEDE                     STR_9:
   447  00FEDE  73                 	db	115	;'s'
   448  00FEDF  74                 	db	116	;'t'
   449  00FEE0  61                 	db	97	;'a'
   450  00FEE1  72                 	db	114	;'r'
   451  00FEE2  74                 	db	116	;'t'
   452  00FEE3  20                 	db	32
   453  00FEE4  20                 	db	32
   454  00FEE5  20                 	db	32
   455  00FEE6  3C                 	db	60	;'<'
   456  00FEE7  42                 	db	66	;'B'
   457  00FEE8  20                 	db	32
   458  00FEE9  20                 	db	32
   459  00FEEA  20                 	db	32
   460  00FEEB  20                 	db	32
   461  00FEEC  20                 	db	32
   462  00FEED  20                 	db	32
   463  00FEEE  0A                 	db	10
   464  00FEEF  00                 	db	0
   465  00FEF0                     STR_7:
   466  00FEF0  20                 	db	32
   467  00FEF1  20                 	db	32
   468  00FEF2  68                 	db	104	;'h'
   469  00FEF3  68                 	db	104	;'h'
   470  00FEF4  3A                 	db	58	;':'
   471  00FEF5  6D                 	db	109	;'m'
   472  00FEF6  6D                 	db	109	;'m'
   473  00FEF7  3A                 	db	58	;':'
   474  00FEF8  73                 	db	115	;'s'
   475  00FEF9  73                 	db	115	;'s'
   476  00FEFA  20                 	db	32
   477  00FEFB  20                 	db	32
   478  00FEFC  20                 	db	32
   479  00FEFD  20                 	db	32
   480  00FEFE  20                 	db	32
   481  00FEFF  20                 	db	32
   482  00FF00  0A                 	db	10
   483  00FF01  00                 	db	0
   484  00FF02                     STR_11:
   485  00FF02  73                 	db	115	;'s'
   486  00FF03  65                 	db	101	;'e'
   487  00FF04  6C                 	db	108	;'l'
   488  00FF05  65                 	db	101	;'e'
   489  00FF06  63                 	db	99	;'c'
   490  00FF07  74                 	db	116	;'t'
   491  00FF08  20                 	db	32
   492  00FF09  72                 	db	114	;'r'
   493  00FF0A  75                 	db	117	;'u'
   494  00FF0B  6E                 	db	110	;'n'
   495  00FF0C  3A                 	db	58	;':'
   496  00FF0D  20                 	db	32
   497  00FF0E  20                 	db	32
   498  00FF0F  20                 	db	32
   499  00FF10  20                 	db	32
   500  00FF11  20                 	db	32
   501  00FF12  0A                 	db	10
   502  00FF13  00                 	db	0
   503  00FF14                     STR_15:
   504  00FF14  74                 	db	116	;'t'
   505  00FF15  69                 	db	105	;'i'
   506  00FF16  6D                 	db	109	;'m'
   507  00FF17  65                 	db	101	;'e'
   508  00FF18  3A                 	db	58	;':'
   509  00FF19  20                 	db	32
   510  00FF1A  6E                 	db	110	;'n'
   511  00FF1B  6E                 	db	110	;'n'
   512  00FF1C  6E                 	db	110	;'n'
   513  00FF1D  20                 	db	32
   514  00FF1E  73                 	db	115	;'s'
   515  00FF1F  65                 	db	101	;'e'
   516  00FF20  63                 	db	99	;'c'
   517  00FF21  20                 	db	32
   518  00FF22  20                 	db	32
   519  00FF23  20                 	db	32
   520  00FF24  0A                 	db	10
   521  00FF25  00                 	db	0
   522  00FF26                     STR_17:
   523  00FF26  5B                 	db	91	;'['
   524  00FF27  41                 	db	65	;'A'
   525  00FF28  41                 	db	65	;'A'
   526  00FF29  2C                 	db	44
   527  00FF2A  39                 	db	57	;'9'
   528  00FF2B  56                 	db	86	;'V'
   529  00FF2C  2C                 	db	44
   530  00FF2D  43                 	db	67	;'C'
   531  00FF2E  2C                 	db	44
   532  00FF2F  6F                 	db	111	;'o'
   533  00FF30  74                 	db	116	;'t'
   534  00FF31  68                 	db	104	;'h'
   535  00FF32  65                 	db	101	;'e'
   536  00FF33  72                 	db	114	;'r'
   537  00FF34  5D                 	db	93	;']'
   538  00FF35  20                 	db	32
   539  00FF36  0A                 	db	10
   540  00FF37  00                 	db	0
   541  00FF38                     STR_19:
   542  00FF38  30                 	db	48	;'0'
   543  00FF39  31                 	db	49	;'1'
   544  00FF3A  32                 	db	50	;'2'
   545  00FF3B  33                 	db	51	;'3'
   546  00FF3C  34                 	db	52	;'4'
   547  00FF3D  35                 	db	53	;'5'
   548  00FF3E  36                 	db	54	;'6'
   549  00FF3F  37                 	db	55	;'7'
   550  00FF40  38                 	db	56	;'8'
   551  00FF41  39                 	db	57	;'9'
   552  00FF42  61                 	db	97	;'a'
   553  00FF43  62                 	db	98	;'b'
   554  00FF44  63                 	db	99	;'c'
   555  00FF45  64                 	db	100	;'d'
   556  00FF46  65                 	db	101	;'e'
   557  00FF47  66                 	db	102	;'f'
   558  00FF48  00                 	db	0
   559  00FF49                     STR_16:
   560  00FF49  20                 	db	32
   561  00FF4A  20                 	db	32
   562  00FF4B  20                 	db	32
   563  00FF4C  20                 	db	32
   564  00FF4D  20                 	db	32
   565  00FF4E  20                 	db	32
   566  00FF4F  20                 	db	32
   567  00FF50  20                 	db	32
   568  00FF51  20                 	db	32
   569  00FF52  20                 	db	32
   570  00FF53  20                 	db	32
   571  00FF54  20                 	db	32
   572  00FF55  20                 	db	32
   573  00FF56  20                 	db	32
   574  00FF57  2A                 	db	42
   575  00FF58  3E                 	db	62	;'>'
   576  00FF59  00                 	db	0
   577  00FF5A                     STR_12:
   578  00FF5A  5B                 	db	91	;'['
   579  00FF5B  31                 	db	49	;'1'
   580  00FF5C  2C                 	db	44
   581  00FF5D  32                 	db	50	;'2'
   582  00FF5E  2C                 	db	44
   583  00FF5F  33                 	db	51	;'3'
   584  00FF60  2C                 	db	44
   585  00FF61  34                 	db	52	;'4'
   586  00FF62  5D                 	db	93	;']'
   587  00FF63  20                 	db	32
   588  00FF64  20                 	db	32
   589  00FF65  20                 	db	32
   590  00FF66  20                 	db	32
   591  00FF67  20                 	db	32
   592  00FF68  2A                 	db	42
   593  00FF69  3E                 	db	62	;'>'
   594  00FF6A  00                 	db	0
   595  00FF6B                     STR_10:
   596  00FF6B  68                 	db	104	;'h'
   597  00FF6C  69                 	db	105	;'i'
   598  00FF6D  73                 	db	115	;'s'
   599  00FF6E  74                 	db	116	;'t'
   600  00FF6F  6F                 	db	111	;'o'
   601  00FF70  72                 	db	114	;'r'
   602  00FF71  79                 	db	121	;'y'
   603  00FF72  20                 	db	32
   604  00FF73  3C                 	db	60	;'<'
   605  00FF74  43                 	db	67	;'C'
   606  00FF75  20                 	db	32
   607  00FF76  20                 	db	32
   608  00FF77  20                 	db	32
   609  00FF78  20                 	db	32
   610  00FF79  2A                 	db	42
   611  00FF7A  3E                 	db	62	;'>'
   612  00FF7B  00                 	db	0
   613  00FF7C                     STR_14:
   614  00FF7C  20                 	db	32
   615  00FF7D  20                 	db	32
   616  00FF7E  20                 	db	32
   617  00FF7F  73                 	db	115	;'s'
   618  00FF80  74                 	db	116	;'t'
   619  00FF81  61                 	db	97	;'a'
   620  00FF82  74                 	db	116	;'t'
   621  00FF83  73                 	db	115	;'s'
   622  00FF84  20                 	db	32
   623  00FF85  3C                 	db	60	;'<'
   624  00FF86  42                 	db	66	;'B'
   625  00FF87  20                 	db	32
   626  00FF88  20                 	db	32
   627  00FF89  20                 	db	32
   628  00FF8A  2A                 	db	42
   629  00FF8B  3E                 	db	62	;'>'
   630  00FF8C  00                 	db	0
   631  00FF8D                     STR_18:
   632  00FF8D  5B                 	db	91	;'['
   633  00FF8E  6E                 	db	110	;'n'
   634  00FF8F  6E                 	db	110	;'n'
   635  00FF90  2C                 	db	44
   636  00FF91  6E                 	db	110	;'n'
   637  00FF92  2C                 	db	44
   638  00FF93  6E                 	db	110	;'n'
   639  00FF94  2C                 	db	44
   640  00FF95  6E                 	db	110	;'n'
   641  00FF96  6E                 	db	110	;'n'
   642  00FF97  5D                 	db	93	;']'
   643  00FF98  20                 	db	32
   644  00FF99  20                 	db	32
   645  00FF9A  20                 	db	32
   646  00FF9B  2A                 	db	42
   647  00FF9C  3E                 	db	62	;'>'
   648  00FF9D  00                 	db	0
   649  00FF9E                     STR_8:
   650  00FF9E  20                 	db	32
   651  00FF9F  20                 	db	32
   652  00FFA0  6D                 	db	109	;'m'
   653  00FFA1  6D                 	db	109	;'m'
   654  00FFA2  3A                 	db	58	;':'
   655  00FFA3  64                 	db	100	;'d'
   656  00FFA4  64                 	db	100	;'d'
   657  00FFA5  3A                 	db	58	;':'
   658  00FFA6  79                 	db	121	;'y'
   659  00FFA7  79                 	db	121	;'y'
   660  00FFA8  20                 	db	32
   661  00FFA9  20                 	db	32
   662  00FFAA  20                 	db	32
   663  00FFAB  20                 	db	32
   664  00FFAC  41                 	db	65	;'A'
   665  00FFAD  3E                 	db	62	;'>'
   666  00FFAE  00                 	db	0
   667  00FFAF                     STR_3:
   668  00FFAF  5B                 	db	91	;'['
   669  00FFB0  41                 	db	65	;'A'
   670  00FFB1  41                 	db	65	;'A'
   671  00FFB2  2C                 	db	44
   672  00FFB3  43                 	db	67	;'C'
   673  00FFB4  2C                 	db	44
   674  00FFB5  39                 	db	57	;'9'
   675  00FFB6  56                 	db	86	;'V'
   676  00FFB7  2C                 	db	44
   677  00FFB8  4F                 	db	79	;'O'
   678  00FFB9  54                 	db	84	;'T'
   679  00FFBA  48                 	db	72	;'H'
   680  00FFBB  45                 	db	69	;'E'
   681  00FFBC  52                 	db	82	;'R'
   682  00FFBD  5D                 	db	93	;']'
   683  00FFBE  0A                 	db	10
   684  00FFBF  00                 	db	0
   685  00FFC0                     STR_2:
   686  00FFC0  74                 	db	116	;'t'
   687  00FFC1  69                 	db	105	;'i'
   688  00FFC2  6D                 	db	109	;'m'
   689  00FFC3  65                 	db	101	;'e'
   690  00FFC4  20                 	db	32
   691  00FFC5  25                 	db	37
   692  00FFC6  30                 	db	48	;'0'
   693  00FFC7  32                 	db	50	;'2'
   694  00FFC8  6C                 	db	108	;'l'
   695  00FFC9  64                 	db	100	;'d'
   696  00FFCA  3A                 	db	58	;':'
   697  00FFCB  25                 	db	37
   698  00FFCC  30                 	db	48	;'0'
   699  00FFCD  32                 	db	50	;'2'
   700  00FFCE  6C                 	db	108	;'l'
   701  00FFCF  64                 	db	100	;'d'
   702  00FFD0  00                 	db	0
   703  00FFD1                     STR_5:
   704  00FFD1  4E                 	db	78	;'N'
   705  00FFD2  3A                 	db	58	;':'
   706  00FFD3  20                 	db	32
   707  00FFD4  25                 	db	37
   708  00FFD5  64                 	db	100	;'d'
   709  00FFD6  2C                 	db	44
   710  00FFD7  0A                 	db	10
   711  00FFD8  56                 	db	86	;'V'
   712  00FFD9  3A                 	db	58	;':'
   713  00FFDA  20                 	db	32
   714  00FFDB  25                 	db	37
   715  00FFDC  2E                 	db	46
   716  00FFDD  33                 	db	51	;'3'
   717  00FFDE  66                 	db	102	;'f'
   718  00FFDF  00                 	db	0
   719  00FFE0                     STR_4:
   720  00FFE0  5B                 	db	91	;'['
   721  00FFE1  25                 	db	37
   722  00FFE2  64                 	db	100	;'d'
   723  00FFE3  2C                 	db	44
   724  00FFE4  25                 	db	37
   725  00FFE5  64                 	db	100	;'d'
   726  00FFE6  2C                 	db	44
   727  00FFE7  25                 	db	37
   728  00FFE8  64                 	db	100	;'d'
   729  00FFE9  2C                 	db	44
   730  00FFEA  25                 	db	37
   731  00FFEB  64                 	db	100	;'d'
   732  00FFEC  5D                 	db	93	;']'
   733  00FFED  00                 	db	0
   734  00FFEE  74                 	db	116	;'t'
   735  00FFEF  31                 	db	49	;'1'
   736  00FFF0  3A                 	db	58	;':'
   737  00FFF1  20                 	db	32
   738  00FFF2  25                 	db	37
   739  00FFF3  78                 	db	120	;'x'
   740  00FFF4  20                 	db	32
   741  00FFF5  00                 	db	0
   742  00FFF6                     STR_1:
   743  00FFF6  72                 	db	114	;'r'
   744  00FFF7  75                 	db	117	;'u'
   745  00FFF8  6E                 	db	110	;'n'
   746  00FFF9  6E                 	db	110	;'n'
   747  00FFFA  69                 	db	105	;'i'
   748  00FFFB  6E                 	db	110	;'n'
   749  00FFFC  67                 	db	103	;'g'
   750  00FFFD  00                 	db	0
   751                           
   752                           ; #config settings
   753  00FFFE  00                 	db	0	; dummy byte at the end
   754  0000                     
   755                           	psect	cinit
   756  0030D6                     __pcinit:
   757                           	opt stack 0
   758  0030D6                     start_initialization:
   759                           	opt stack 0
   760  0030D6                     __initialization:
   761                           	opt stack 0
   762                           
   763                           ; Initialize objects allocated to BANK1 (30 bytes)
   764                           ; load TBLPTR registers with __pidataBANK1
   765  0030D6  0EB0               	movlw	low __pidataBANK1
   766  0030D8  6EF6               	movwf	tblptrl,c
   767  0030DA  0E38               	movlw	high __pidataBANK1
   768  0030DC  6EF7               	movwf	tblptrh,c
   769  0030DE  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   770  0030E0  6EF8               	movwf	tblptru,c
   771  0030E2  EE01  F058         	lfsr	0,__pdataBANK1
   772  0030E6  EE10 F01E          	lfsr	1,30
   773  0030EA                     copy_data0:
   774  0030EA  0009               	tblrd		*+
   775  0030EC  CFF5 FFEE          	movff	tablat,postinc0
   776  0030F0  50E5               	movf	postdec1,w,c
   777  0030F2  50E1               	movf	fsr1l,w,c
   778  0030F4  E1FA               	bnz	copy_data0
   779                           
   780                           ; Initialize objects allocated to BANK0 (6 bytes)
   781                           ; load TBLPTR registers with __pidataBANK0
   782  0030F6  0E1C               	movlw	low __pidataBANK0
   783  0030F8  6EF6               	movwf	tblptrl,c
   784  0030FA  0E39               	movlw	high __pidataBANK0
   785  0030FC  6EF7               	movwf	tblptrh,c
   786  0030FE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   787  003100  6EF8               	movwf	tblptru,c
   788  003102  EE00  F0ED         	lfsr	0,__pdataBANK0
   789  003106  EE10 F006          	lfsr	1,6
   790  00310A                     copy_data1:
   791  00310A  0009               	tblrd		*+
   792  00310C  CFF5 FFEE          	movff	tablat,postinc0
   793  003110  50E5               	movf	postdec1,w,c
   794  003112  50E1               	movf	fsr1l,w,c
   795  003114  E1FA               	bnz	copy_data1
   796                           
   797                           ; Initialize objects allocated to COMRAM (23 bytes)
   798                           ; load TBLPTR registers with __pidataCOMRAM
   799  003116  0EEC               	movlw	low __pidataCOMRAM
   800  003118  6EF6               	movwf	tblptrl,c
   801  00311A  0E38               	movlw	high __pidataCOMRAM
   802  00311C  6EF7               	movwf	tblptrh,c
   803  00311E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   804  003120  6EF8               	movwf	tblptru,c
   805  003122  EE00  F03B         	lfsr	0,__pdataCOMRAM
   806  003126  EE10 F017          	lfsr	1,23
   807  00312A                     copy_data2:
   808  00312A  0009               	tblrd		*+
   809  00312C  CFF5 FFEE          	movff	tablat,postinc0
   810  003130  50E5               	movf	postdec1,w,c
   811  003132  50E1               	movf	fsr1l,w,c
   812  003134  E1FA               	bnz	copy_data2
   813                           
   814                           ; Clear objects allocated to BANK1 (32 bytes)
   815  003136  EE01  F038         	lfsr	0,__pbssBANK1
   816  00313A  0E20               	movlw	32
   817  00313C                     clear_0:
   818  00313C  6AEE               	clrf	postinc0,c
   819  00313E  06E8               	decf	wreg,f,c
   820  003140  E1FD               	bnz	clear_0
   821                           
   822                           ; Clear objects allocated to BANK0 (2 bytes)
   823  003142  0100               	movlb	0
   824  003144  6BF4               	clrf	(__pbssBANK0+1)& (0+255),b
   825  003146  6BF3               	clrf	__pbssBANK0& (0+255),b
   826                           
   827                           ; Clear objects allocated to COMRAM (11 bytes)
   828  003148  EE00  F052         	lfsr	0,__pbssCOMRAM
   829  00314C  0E0B               	movlw	11
   830  00314E                     clear_1:
   831  00314E  6AEE               	clrf	postinc0,c
   832  003150  06E8               	decf	wreg,f,c
   833  003152  E1FD               	bnz	clear_1
   834  003154                     end_of_initialization:
   835                           	opt stack 0
   836  003154                     __end_of__initialization:
   837                           	opt stack 0
   838  003154  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   839  003156  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   840  003158  0E00               	movlw	low (__Lmediumconst shr (0+16))
   841  00315A  6EF8               	movwf	tblptru,c
   842  00315C  0100               	movlb	0
   843  00315E  EF84  F00B         	goto	_main	;jump to C main() function
   844                           tblptru	equ	0xFF8
   845                           tblptrh	equ	0xFF7
   846                           tblptrl	equ	0xFF6
   847                           tablat	equ	0xFF5
   848                           postinc0	equ	0xFEE
   849                           wreg	equ	0xFE8
   850                           postdec1	equ	0xFE5
   851                           fsr1l	equ	0xFE1
   852                           
   853                           	psect	bssCOMRAM
   854  000052                     __pbssCOMRAM:
   855                           	opt stack 0
   856  000052                     _padPin3:
   857                           	opt stack 0
   858  000052                     	ds	4
   859  000056                     _count:
   860                           	opt stack 0
   861  000056                     	ds	2
   862  000058                     _curr:
   863                           	opt stack 0
   864  000058                     	ds	2
   865  00005A                     _prevTime:
   866                           	opt stack 0
   867  00005A                     	ds	2
   868  00005C                     _lastKey:
   869                           	opt stack 0
   870  00005C                     	ds	1
   871                           tblptru	equ	0xFF8
   872                           tblptrh	equ	0xFF7
   873                           tblptrl	equ	0xFF6
   874                           tablat	equ	0xFF5
   875                           postinc0	equ	0xFEE
   876                           wreg	equ	0xFE8
   877                           postdec1	equ	0xFE5
   878                           fsr1l	equ	0xFE1
   879                           
   880                           	psect	dataCOMRAM
   881  00003B                     __pdataCOMRAM:
   882                           	opt stack 0
   883  00003B                     _V_LIM_9V:
   884                           	opt stack 0
   885  00003B                     	ds	3
   886  00003E                     _V_LIM_AA:
   887                           	opt stack 0
   888  00003E                     	ds	3
   889  000041                     _V_LIM_C:
   890                           	opt stack 0
   891  000041                     	ds	3
   892  000044                     _angle:
   893                           	opt stack 0
   894  000044                     	ds	2
   895  000046                     _padAngle_OPEN:
   896                           	opt stack 0
   897  000046                     	ds	2
   898  000048                     _redirectAngle_9V:
   899                           	opt stack 0
   900  000048                     	ds	2
   901  00004A                     _AA_float:
   902                           	opt stack 0
   903  00004A                     	ds	4
   904  00004E                     _padPin1:
   905                           	opt stack 0
   906  00004E                     	ds	4
   907                           tblptru	equ	0xFF8
   908                           tblptrh	equ	0xFF7
   909                           tblptrl	equ	0xFF6
   910                           tablat	equ	0xFF5
   911                           postinc0	equ	0xFEE
   912                           wreg	equ	0xFE8
   913                           postdec1	equ	0xFE5
   914                           fsr1l	equ	0xFE1
   915                           
   916                           	psect	bssBANK0
   917  0000F3                     __pbssBANK0:
   918                           	opt stack 0
   919  0000F3                     _n:
   920                           	opt stack 0
   921  0000F3                     	ds	2
   922                           tblptru	equ	0xFF8
   923                           tblptrh	equ	0xFF7
   924                           tblptrl	equ	0xFF6
   925                           tablat	equ	0xFF5
   926                           postinc0	equ	0xFEE
   927                           wreg	equ	0xFE8
   928                           postdec1	equ	0xFE5
   929                           fsr1l	equ	0xFE1
   930                           
   931                           	psect	dataBANK0
   932  0000ED                     __pdataBANK0:
   933                           	opt stack 0
   934  0000ED                     _padAngle_CLOSE:
   935                           	opt stack 0
   936  0000ED                     	ds	2
   937  0000EF                     _redirectAngle_C:
   938                           	opt stack 0
   939  0000EF                     	ds	2
   940  0000F1                     _redirectAngle_OTHER:
   941                           	opt stack 0
   942  0000F1                     	ds	2
   943                           tblptru	equ	0xFF8
   944                           tblptrh	equ	0xFF7
   945                           tblptrl	equ	0xFF6
   946                           tablat	equ	0xFF5
   947                           postinc0	equ	0xFEE
   948                           wreg	equ	0xFE8
   949                           postdec1	equ	0xFE5
   950                           fsr1l	equ	0xFE1
   951                           
   952                           	psect	bssBANK1
   953  000138                     __pbssBANK1:
   954                           	opt stack 0
   955  000138                     _pulse:
   956                           	opt stack 0
   957  000138                     	ds	8
   958  000140                     _servos:
   959                           	opt stack 0
   960  000140                     	ds	8
   961  000148                     _time:
   962                           	opt stack 0
   963  000148                     	ds	4
   964  00014C                     _batteryDetected:
   965                           	opt stack 0
   966  00014C                     	ds	2
   967  00014E                     _n_9V:
   968                           	opt stack 0
   969  00014E                     	ds	2
   970  000150                     _n_AA:
   971                           	opt stack 0
   972  000150                     	ds	2
   973  000152                     _n_C:
   974                           	opt stack 0
   975  000152                     	ds	2
   976  000154                     _n_OTHER:
   977                           	opt stack 0
   978  000154                     	ds	2
   979  000156                     _terminate:
   980                           	opt stack 0
   981  000156                     	ds	2
   982                           tblptru	equ	0xFF8
   983                           tblptrh	equ	0xFF7
   984                           tblptrl	equ	0xFF6
   985                           tablat	equ	0xFF5
   986                           postinc0	equ	0xFEE
   987                           wreg	equ	0xFE8
   988                           postdec1	equ	0xFE5
   989                           fsr1l	equ	0xFE1
   990                           
   991                           	psect	dataBANK1
   992  000158                     __pdataBANK1:
   993                           	opt stack 0
   994  000158                     _padAngle_NEUTRAL:
   995                           	opt stack 0
   996  000158                     	ds	2
   997  00015A                     _redirectAngle_AA:
   998                           	opt stack 0
   999  00015A                     	ds	2
  1000  00015C                     _stoppingTime:
  1001                           	opt stack 0
  1002  00015C                     	ds	2
  1003  00015E                     _conveyorServo:
  1004                           	opt stack 0
  1005  00015E                     	ds	4
  1006  000162                     _cylinderDir:
  1007                           	opt stack 0
  1008  000162                     	ds	4
  1009  000166                     _cylinderMotor:
  1010                           	opt stack 0
  1011  000166                     	ds	4
  1012  00016A                     _padPin2:
  1013                           	opt stack 0
  1014  00016A                     	ds	4
  1015  00016E                     _padServo:
  1016                           	opt stack 0
  1017  00016E                     	ds	4
  1018  000172                     _redirectingServo:
  1019                           	opt stack 0
  1020  000172                     	ds	4
  1021                           tblptru	equ	0xFF8
  1022                           tblptrh	equ	0xFF7
  1023                           tblptrl	equ	0xFF6
  1024                           tablat	equ	0xFF5
  1025                           postinc0	equ	0xFEE
  1026                           wreg	equ	0xFE8
  1027                           postdec1	equ	0xFE5
  1028                           fsr1l	equ	0xFE1
  1029                           
  1030                           	psect	cstackBANK1
  1031  000100                     __pcstackBANK1:
  1032                           	opt stack 0
  1033  000100                     _sortBattery$1351:
  1034                           	opt stack 0
  1035                           
  1036                           ; 2 bytes @ 0x0
  1037  000100                     	ds	2
  1038  000102                     sortBattery@V_float:
  1039                           	opt stack 0
  1040                           
  1041                           ; 3 bytes @ 0x2
  1042  000102                     	ds	3
  1043  000105                     sortBattery@pos_v_counter:
  1044                           	opt stack 0
  1045                           
  1046                           ; 2 bytes @ 0x5
  1047  000105                     	ds	2
  1048  000107                     sortBattery@signal:
  1049                           	opt stack 0
  1050                           
  1051                           ; 2 bytes @ 0x7
  1052  000107                     	ds	2
  1053  000109                     sortBattery@Vcc:
  1054                           	opt stack 0
  1055                           
  1056                           ; 3 bytes @ 0x9
  1057  000109                     	ds	3
  1058  00010C                     sortBattery@resolution:
  1059                           	opt stack 0
  1060                           
  1061                           ; 3 bytes @ 0xC
  1062  00010C                     	ds	3
  1063  00010F                     sortBattery@V_max:
  1064                           	opt stack 0
  1065                           
  1066                           ; 3 bytes @ 0xF
  1067  00010F                     	ds	3
  1068  000112                     sortBattery@i_222:
  1069                           	opt stack 0
  1070                           
  1071                           ; 2 bytes @ 0x12
  1072  000112                     	ds	2
  1073  000114                     sortBattery@targetAngle:
  1074                           	opt stack 0
  1075                           
  1076                           ; 2 bytes @ 0x14
  1077  000114                     	ds	2
  1078  000116                     sortBattery@V:
  1079                           	opt stack 0
  1080                           
  1081                           ; 3 bytes @ 0x16
  1082  000116                     	ds	3
  1083  000119                     sortBattery@i:
  1084                           	opt stack 0
  1085                           
  1086                           ; 3 bytes @ 0x19
  1087  000119                     	ds	3
  1088  00011C                     sortBattery@V_220:
  1089                           	opt stack 0
  1090                           
  1091                           ; 3 bytes @ 0x1C
  1092  00011C                     	ds	3
  1093  00011F                     ??_main:
  1094                           
  1095                           ; 1 bytes @ 0x1F
  1096  00011F                     	ds	13
  1097  00012C                     main@cylinderForward:
  1098                           	opt stack 0
  1099                           
  1100                           ; 2 bytes @ 0x2C
  1101  00012C                     	ds	2
  1102  00012E                     main@cylinderBackward:
  1103                           	opt stack 0
  1104                           
  1105                           ; 2 bytes @ 0x2E
  1106  00012E                     	ds	2
  1107  000130                     main@lastBatteryTime:
  1108                           	opt stack 0
  1109                           
  1110                           ; 2 bytes @ 0x30
  1111  000130                     	ds	2
  1112  000132                     main@cylinderStart:
  1113                           	opt stack 0
  1114                           
  1115                           ; 2 bytes @ 0x32
  1116  000132                     	ds	2
  1117  000134                     main@cylinderDur:
  1118                           	opt stack 0
  1119                           
  1120                           ; 2 bytes @ 0x34
  1121  000134                     	ds	2
  1122  000136                     main@prev:
  1123                           	opt stack 0
  1124                           
  1125                           ; 2 bytes @ 0x36
  1126  000136                     	ds	2
  1127                           tblptru	equ	0xFF8
  1128                           tblptrh	equ	0xFF7
  1129                           tblptrl	equ	0xFF6
  1130                           tablat	equ	0xFF5
  1131                           postinc0	equ	0xFEE
  1132                           wreg	equ	0xFE8
  1133                           postdec1	equ	0xFE5
  1134                           fsr1l	equ	0xFE1
  1135                           
  1136                           	psect	cstackBANK0
  1137  000080                     __pcstackBANK0:
  1138                           	opt stack 0
  1139  000080                     ??___ftdiv:
  1140                           
  1141                           ; 1 bytes @ 0x0
  1142  000080                     	ds	3
  1143  000083                     ___ftdiv@cntr:
  1144                           	opt stack 0
  1145                           
  1146                           ; 1 bytes @ 0x3
  1147  000083                     	ds	1
  1148  000084                     ___ftdiv@f3:
  1149                           	opt stack 0
  1150                           
  1151                           ; 3 bytes @ 0x4
  1152  000084                     	ds	3
  1153  000087                     ___ftdiv@exp:
  1154                           	opt stack 0
  1155                           
  1156                           ; 1 bytes @ 0x7
  1157  000087                     	ds	1
  1158  000088                     ___ftdiv@sign:
  1159                           	opt stack 0
  1160                           
  1161                           ; 1 bytes @ 0x8
  1162  000088                     	ds	1
  1163  000089                     ?___ftmul:
  1164                           	opt stack 0
  1165  000089                     ___ftmul@f1:
  1166                           	opt stack 0
  1167                           
  1168                           ; 3 bytes @ 0x9
  1169  000089                     	ds	3
  1170  00008C                     ___ftmul@f2:
  1171                           	opt stack 0
  1172                           
  1173                           ; 3 bytes @ 0xC
  1174  00008C                     	ds	3
  1175  00008F                     ??___ftmul:
  1176                           
  1177                           ; 1 bytes @ 0xF
  1178  00008F                     	ds	3
  1179  000092                     ___ftmul@exp:
  1180                           	opt stack 0
  1181                           
  1182                           ; 1 bytes @ 0x12
  1183  000092                     	ds	1
  1184  000093                     ___ftmul@f3_as_product:
  1185                           	opt stack 0
  1186                           
  1187                           ; 3 bytes @ 0x13
  1188  000093                     	ds	3
  1189  000096                     ___ftmul@cntr:
  1190                           	opt stack 0
  1191                           
  1192                           ; 1 bytes @ 0x16
  1193  000096                     	ds	1
  1194  000097                     ___ftmul@sign:
  1195                           	opt stack 0
  1196                           
  1197                           ; 1 bytes @ 0x17
  1198  000097                     	ds	1
  1199  000098                     ?_fround:
  1200                           	opt stack 0
  1201  000098                     ?_scale:
  1202                           	opt stack 0
  1203                           
  1204                           ; 3 bytes @ 0x18
  1205  000098                     	ds	3
  1206  00009B                     _fround$1354:
  1207                           	opt stack 0
  1208  00009B                     _scale$1355:
  1209                           	opt stack 0
  1210                           
  1211                           ; 3 bytes @ 0x1B
  1212  00009B                     	ds	3
  1213  00009E                     scale@scl:
  1214                           	opt stack 0
  1215  00009E                     _fround$1353:
  1216                           	opt stack 0
  1217                           
  1218                           ; 3 bytes @ 0x1E
  1219  00009E                     	ds	3
  1220  0000A1                     fround@prec:
  1221                           	opt stack 0
  1222                           
  1223                           ; 1 bytes @ 0x21
  1224  0000A1                     	ds	1
  1225  0000A2                     ?___ftadd:
  1226                           	opt stack 0
  1227  0000A2                     ___ftadd@f1:
  1228                           	opt stack 0
  1229                           
  1230                           ; 3 bytes @ 0x22
  1231  0000A2                     	ds	3
  1232  0000A5                     ___ftadd@f2:
  1233                           	opt stack 0
  1234                           
  1235                           ; 3 bytes @ 0x25
  1236  0000A5                     	ds	3
  1237  0000A8                     ??___ftadd:
  1238                           
  1239                           ; 1 bytes @ 0x28
  1240  0000A8                     	ds	3
  1241  0000AB                     ___ftadd@sign:
  1242                           	opt stack 0
  1243                           
  1244                           ; 1 bytes @ 0x2B
  1245  0000AB                     	ds	1
  1246  0000AC                     ___ftadd@exp2:
  1247                           	opt stack 0
  1248                           
  1249                           ; 1 bytes @ 0x2C
  1250  0000AC                     	ds	1
  1251  0000AD                     ___ftadd@exp1:
  1252                           	opt stack 0
  1253                           
  1254                           ; 1 bytes @ 0x2D
  1255  0000AD                     	ds	1
  1256  0000AE                     ?___ftsub:
  1257                           	opt stack 0
  1258  0000AE                     ?___fttol:
  1259                           	opt stack 0
  1260  0000AE                     ___ftsub@f1:
  1261                           	opt stack 0
  1262  0000AE                     ___fttol@f1:
  1263                           	opt stack 0
  1264                           
  1265                           ; 3 bytes @ 0x2E
  1266  0000AE                     	ds	3
  1267  0000B1                     ___ftsub@f2:
  1268                           	opt stack 0
  1269                           
  1270                           ; 3 bytes @ 0x31
  1271  0000B1                     	ds	1
  1272  0000B2                     ??___fttol:
  1273                           
  1274                           ; 1 bytes @ 0x32
  1275  0000B2                     	ds	5
  1276  0000B7                     ___fttol@sign1:
  1277                           	opt stack 0
  1278                           
  1279                           ; 1 bytes @ 0x37
  1280  0000B7                     	ds	1
  1281  0000B8                     ___fttol@lval:
  1282                           	opt stack 0
  1283                           
  1284                           ; 4 bytes @ 0x38
  1285  0000B8                     	ds	4
  1286  0000BC                     ___fttol@exp1:
  1287                           	opt stack 0
  1288                           
  1289                           ; 1 bytes @ 0x3C
  1290  0000BC                     	ds	1
  1291  0000BD                     ?_printf:
  1292                           	opt stack 0
  1293  0000BD                     ?_angleToPulse:
  1294                           	opt stack 0
  1295  0000BD                     angleToPulse@angle:
  1296                           	opt stack 0
  1297  0000BD                     printf@f:
  1298                           	opt stack 0
  1299                           
  1300                           ; 2 bytes @ 0x3D
  1301  0000BD                     	ds	4
  1302  0000C1                     ??_angleToPulse:
  1303                           
  1304                           ; 1 bytes @ 0x41
  1305  0000C1                     	ds	4
  1306  0000C5                     angleToPulse@offset:
  1307                           	opt stack 0
  1308                           
  1309                           ; 4 bytes @ 0x45
  1310  0000C5                     	ds	2
  1311  0000C7                     ??_printf:
  1312                           
  1313                           ; 1 bytes @ 0x47
  1314  0000C7                     	ds	2
  1315  0000C9                     angleToPulse@a180:
  1316                           	opt stack 0
  1317                           
  1318                           ; 4 bytes @ 0x49
  1319  0000C9                     	ds	4
  1320  0000CD                     _angleToPulse$1352:
  1321                           	opt stack 0
  1322  0000CD                     _printf$1356:
  1323                           	opt stack 0
  1324                           
  1325                           ; 3 bytes @ 0x4D
  1326  0000CD                     	ds	3
  1327  0000D0                     printf@idx:
  1328                           	opt stack 0
  1329  0000D0                     angleToPulse@a000:
  1330                           	opt stack 0
  1331                           
  1332                           ; 4 bytes @ 0x50
  1333  0000D0                     	ds	1
  1334  0000D1                     printf@cp:
  1335                           	opt stack 0
  1336                           
  1337                           ; 2 bytes @ 0x51
  1338  0000D1                     	ds	2
  1339  0000D3                     printf@len:
  1340                           	opt stack 0
  1341                           
  1342                           ; 2 bytes @ 0x53
  1343  0000D3                     	ds	1
  1344  0000D4                     setAngle@motor:
  1345                           	opt stack 0
  1346                           
  1347                           ; 2 bytes @ 0x54
  1348  0000D4                     	ds	1
  1349  0000D5                     printf@ap:
  1350                           	opt stack 0
  1351                           
  1352                           ; 2 bytes @ 0x55
  1353  0000D5                     	ds	1
  1354  0000D6                     setAngle@angle:
  1355                           	opt stack 0
  1356                           
  1357                           ; 2 bytes @ 0x56
  1358  0000D6                     	ds	1
  1359  0000D7                     printf@tmpval:
  1360                           	opt stack 0
  1361                           
  1362                           ; 4 bytes @ 0x57
  1363  0000D7                     	ds	1
  1364  0000D8                     ??_setAngle:
  1365                           
  1366                           ; 1 bytes @ 0x58
  1367  0000D8                     	ds	2
  1368  0000DA                     setAngle@period:
  1369                           	opt stack 0
  1370                           
  1371                           ; 2 bytes @ 0x5A
  1372  0000DA                     	ds	1
  1373  0000DB                     printf@exp:
  1374                           	opt stack 0
  1375                           
  1376                           ; 2 bytes @ 0x5B
  1377  0000DB                     	ds	1
  1378  0000DC                     setAngle@i:
  1379                           	opt stack 0
  1380                           
  1381                           ; 2 bytes @ 0x5C
  1382  0000DC                     	ds	1
  1383  0000DD                     printf@fval:
  1384                           	opt stack 0
  1385                           
  1386                           ; 3 bytes @ 0x5D
  1387  0000DD                     	ds	1
  1388  0000DE                     initServo@motor:
  1389                           	opt stack 0
  1390                           
  1391                           ; 2 bytes @ 0x5E
  1392  0000DE                     	ds	2
  1393  0000E0                     initServo@angle:
  1394                           	opt stack 0
  1395  0000E0                     printf@val:
  1396                           	opt stack 0
  1397                           
  1398                           ; 4 bytes @ 0x60
  1399  0000E0                     	ds	2
  1400  0000E2                     ??_initServo:
  1401                           
  1402                           ; 1 bytes @ 0x62
  1403  0000E2                     	ds	2
  1404  0000E4                     printf@width:
  1405                           	opt stack 0
  1406                           
  1407                           ; 2 bytes @ 0x64
  1408  0000E4                     	ds	2
  1409  0000E6                     initServo@i:
  1410                           	opt stack 0
  1411  0000E6                     printf@flag:
  1412                           	opt stack 0
  1413                           
  1414                           ; 2 bytes @ 0x66
  1415  0000E6                     	ds	2
  1416  0000E8                     printf@prec:
  1417                           	opt stack 0
  1418                           
  1419                           ; 2 bytes @ 0x68
  1420  0000E8                     	ds	2
  1421  0000EA                     printf@c:
  1422                           	opt stack 0
  1423                           
  1424                           ; 1 bytes @ 0x6A
  1425  0000EA                     	ds	1
  1426  0000EB                     ??_sortBattery:
  1427  0000EB                     runMenu@key:
  1428                           	opt stack 0
  1429                           
  1430                           ; 1 bytes @ 0x6B
  1431  0000EB                     	ds	1
  1432  0000EC                     showInterface@key:
  1433                           	opt stack 0
  1434                           
  1435                           ; 1 bytes @ 0x6C
  1436  0000EC                     	ds	1
  1437                           tblptru	equ	0xFF8
  1438                           tblptrh	equ	0xFF7
  1439                           tblptrl	equ	0xFF6
  1440                           tablat	equ	0xFF5
  1441                           postinc0	equ	0xFEE
  1442                           wreg	equ	0xFE8
  1443                           postdec1	equ	0xFE5
  1444                           fsr1l	equ	0xFE1
  1445                           
  1446                           	psect	cstackCOMRAM
  1447  000001                     __pcstackCOMRAM:
  1448                           	opt stack 0
  1449  000001                     ?i2___awmod:
  1450                           	opt stack 0
  1451  000001                     i2___awmod@dividend:
  1452                           	opt stack 0
  1453                           
  1454                           ; 2 bytes @ 0x0
  1455  000001                     	ds	2
  1456  000003                     i2___awmod@divisor:
  1457                           	opt stack 0
  1458                           
  1459                           ; 2 bytes @ 0x2
  1460  000003                     	ds	2
  1461  000005                     i2___awmod@counter:
  1462                           	opt stack 0
  1463                           
  1464                           ; 1 bytes @ 0x4
  1465  000005                     	ds	1
  1466  000006                     i2___awmod@sign:
  1467                           	opt stack 0
  1468                           
  1469                           ; 1 bytes @ 0x5
  1470  000006                     	ds	1
  1471  000007                     i2digitalWrite@pin:
  1472                           	opt stack 0
  1473  000007                     i2startTimer@timer:
  1474                           	opt stack 0
  1475                           
  1476                           ; 2 bytes @ 0x6
  1477  000007                     	ds	2
  1478  000009                     i2digitalWrite@val:
  1479                           	opt stack 0
  1480  000009                     i2startTimer@val:
  1481                           	opt stack 0
  1482                           
  1483                           ; 4 bytes @ 0x8
  1484  000009                     	ds	2
  1485  00000B                     ??i2_digitalWrite:
  1486                           
  1487                           ; 1 bytes @ 0xA
  1488  00000B                     	ds	2
  1489  00000D                     ??i2_startTimer:
  1490                           
  1491                           ; 1 bytes @ 0xC
  1492  00000D                     	ds	1
  1493  00000E                     i2digitalWrite@p:
  1494                           	opt stack 0
  1495                           
  1496                           ; 2 bytes @ 0xD
  1497  00000E                     	ds	2
  1498  000010                     ??_servoInterruptService:
  1499                           
  1500                           ; 1 bytes @ 0xF
  1501  000010                     	ds	4
  1502  000014                     ??_service:
  1503                           
  1504                           ; 1 bytes @ 0x13
  1505  000014                     	ds	14
  1506  000022                     service@key:
  1507                           	opt stack 0
  1508                           
  1509                           ; 1 bytes @ 0x21
  1510  000022                     	ds	1
  1511  000023                     ??_isdigit:
  1512  000023                     ?_digitalRead:
  1513                           	opt stack 0
  1514  000023                     ?___awmod:
  1515                           	opt stack 0
  1516  000023                     ?___ftpack:
  1517                           	opt stack 0
  1518  000023                     ?___ftneg:
  1519                           	opt stack 0
  1520  000023                     ?_analogRead:
  1521                           	opt stack 0
  1522  000023                     ?__tdiv_to_l_:
  1523                           	opt stack 0
  1524  000023                     ?__div_to_l_:
  1525                           	opt stack 0
  1526  000023                     ?___aldiv:
  1527                           	opt stack 0
  1528  000023                     ?___lldiv:
  1529                           	opt stack 0
  1530  000023                     lcdNibble@temp:
  1531                           	opt stack 0
  1532  000023                     readKeypad@key:
  1533                           	opt stack 0
  1534  000023                     digitalRead@pin:
  1535                           	opt stack 0
  1536  000023                     digitalWrite@pin:
  1537                           	opt stack 0
  1538  000023                     analogRead@channel:
  1539                           	opt stack 0
  1540  000023                     initTimer@timer:
  1541                           	opt stack 0
  1542  000023                     startTimer@timer:
  1543                           	opt stack 0
  1544  000023                     ___awmod@dividend:
  1545                           	opt stack 0
  1546  000023                     __div_to_l_@f1:
  1547                           	opt stack 0
  1548  000023                     ___ftpack@arg:
  1549                           	opt stack 0
  1550  000023                     __tdiv_to_l_@f1:
  1551                           	opt stack 0
  1552  000023                     ___ftneg@f1:
  1553                           	opt stack 0
  1554  000023                     ___aldiv@dividend:
  1555                           	opt stack 0
  1556  000023                     ___lldiv@dividend:
  1557                           	opt stack 0
  1558                           
  1559                           ; 4 bytes @ 0x22
  1560  000023                     	ds	1
  1561  000024                     lcdNibble@data:
  1562                           	opt stack 0
  1563  000024                     _isdigit$978:
  1564                           	opt stack 0
  1565                           
  1566                           ; 1 bytes @ 0x23
  1567  000024                     	ds	1
  1568  000025                     ??_initTimer:
  1569  000025                     ??_digitalRead:
  1570  000025                     ??_lcdInst:
  1571  000025                     isdigit@c:
  1572                           	opt stack 0
  1573  000025                     digitalWrite@val:
  1574                           	opt stack 0
  1575  000025                     ___awmod@divisor:
  1576                           	opt stack 0
  1577  000025                     startTimer@val:
  1578                           	opt stack 0
  1579                           
  1580                           ; 4 bytes @ 0x24
  1581  000025                     	ds	1
  1582  000026                     lcdInst@data:
  1583                           	opt stack 0
  1584  000026                     ___ftpack@exp:
  1585                           	opt stack 0
  1586  000026                     __div_to_l_@f2:
  1587                           	opt stack 0
  1588  000026                     __tdiv_to_l_@f2:
  1589                           	opt stack 0
  1590                           
  1591                           ; 3 bytes @ 0x25
  1592  000026                     	ds	1
  1593  000027                     ??_initLCD:
  1594  000027                     ??_digitalWrite:
  1595  000027                     ??_analogRead:
  1596  000027                     putch@data:
  1597                           	opt stack 0
  1598  000027                     ___awmod@counter:
  1599                           	opt stack 0
  1600  000027                     ___ftpack@sign:
  1601                           	opt stack 0
  1602  000027                     ___aldiv@divisor:
  1603                           	opt stack 0
  1604  000027                     ___lldiv@divisor:
  1605                           	opt stack 0
  1606                           
  1607                           ; 4 bytes @ 0x26
  1608  000027                     	ds	1
  1609  000028                     ??___ftpack:
  1610  000028                     ___awmod@sign:
  1611                           	opt stack 0
  1612                           
  1613                           ; 1 bytes @ 0x27
  1614  000028                     	ds	1
  1615  000029                     ??_startTimer:
  1616  000029                     ??__tdiv_to_l_:
  1617  000029                     ?___awdiv:
  1618                           	opt stack 0
  1619  000029                     ___awdiv@dividend:
  1620                           	opt stack 0
  1621  000029                     __div_to_l_@quot:
  1622                           	opt stack 0
  1623                           
  1624                           ; 4 bytes @ 0x28
  1625  000029                     	ds	1
  1626  00002A                     digitalWrite@p:
  1627                           	opt stack 0
  1628                           
  1629                           ; 2 bytes @ 0x29
  1630  00002A                     	ds	1
  1631  00002B                     ?___altoft:
  1632                           	opt stack 0
  1633  00002B                     ?___awtoft:
  1634                           	opt stack 0
  1635  00002B                     ?___lltoft:
  1636                           	opt stack 0
  1637  00002B                     ___aldiv@counter:
  1638                           	opt stack 0
  1639  00002B                     ___awdiv@divisor:
  1640                           	opt stack 0
  1641  00002B                     ___awtoft@c:
  1642                           	opt stack 0
  1643  00002B                     ___altoft@c:
  1644                           	opt stack 0
  1645  00002B                     ___lldiv@quotient:
  1646                           	opt stack 0
  1647  00002B                     ___lltoft@c:
  1648                           	opt stack 0
  1649                           
  1650                           ; 4 bytes @ 0x2A
  1651  00002B                     	ds	1
  1652  00002C                     ___aldiv@sign:
  1653                           	opt stack 0
  1654  00002C                     __tdiv_to_l_@quot:
  1655                           	opt stack 0
  1656                           
  1657                           ; 4 bytes @ 0x2B
  1658  00002C                     	ds	1
  1659  00002D                     ___awdiv@counter:
  1660                           	opt stack 0
  1661  00002D                     __div_to_l_@cntr:
  1662                           	opt stack 0
  1663  00002D                     ___aldiv@quotient:
  1664                           	opt stack 0
  1665                           
  1666                           ; 4 bytes @ 0x2C
  1667  00002D                     	ds	1
  1668  00002E                     ___awdiv@sign:
  1669                           	opt stack 0
  1670  00002E                     ___awtoft@sign:
  1671                           	opt stack 0
  1672  00002E                     __div_to_l_@exp1:
  1673                           	opt stack 0
  1674                           
  1675                           ; 1 bytes @ 0x2D
  1676  00002E                     	ds	1
  1677  00002F                     ??___altoft:
  1678  00002F                     ??___lltoft:
  1679  00002F                     ___lldiv@counter:
  1680                           	opt stack 0
  1681  00002F                     ___awdiv@quotient:
  1682                           	opt stack 0
  1683  00002F                     ___ftge@ff1:
  1684                           	opt stack 0
  1685                           
  1686                           ; 3 bytes @ 0x2E
  1687  00002F                     	ds	1
  1688  000030                     ?___llmod:
  1689                           	opt stack 0
  1690  000030                     __tdiv_to_l_@cntr:
  1691                           	opt stack 0
  1692  000030                     ___llmod@dividend:
  1693                           	opt stack 0
  1694                           
  1695                           ; 4 bytes @ 0x2F
  1696  000030                     	ds	1
  1697  000031                     ?___wmul:
  1698                           	opt stack 0
  1699  000031                     ?___almod:
  1700                           	opt stack 0
  1701  000031                     __tdiv_to_l_@exp1:
  1702                           	opt stack 0
  1703  000031                     ___wmul@multiplier:
  1704                           	opt stack 0
  1705  000031                     ___almod@dividend:
  1706                           	opt stack 0
  1707                           
  1708                           ; 4 bytes @ 0x30
  1709  000031                     	ds	1
  1710  000032                     ___ftge@ff2:
  1711                           	opt stack 0
  1712                           
  1713                           ; 3 bytes @ 0x31
  1714  000032                     	ds	1
  1715  000033                     ___altoft@exp:
  1716                           	opt stack 0
  1717  000033                     ___lltoft@exp:
  1718                           	opt stack 0
  1719  000033                     ___wmul@multiplicand:
  1720                           	opt stack 0
  1721                           
  1722                           ; 2 bytes @ 0x32
  1723  000033                     	ds	1
  1724  000034                     ___altoft@sign:
  1725                           	opt stack 0
  1726  000034                     ___llmod@divisor:
  1727                           	opt stack 0
  1728                           
  1729                           ; 4 bytes @ 0x33
  1730  000034                     	ds	1
  1731  000035                     ??___ftge:
  1732  000035                     ?___ftdiv:
  1733                           	opt stack 0
  1734  000035                     ___wmul@product:
  1735                           	opt stack 0
  1736  000035                     ___ftdiv@f1:
  1737                           	opt stack 0
  1738  000035                     ___almod@divisor:
  1739                           	opt stack 0
  1740                           
  1741                           ; 4 bytes @ 0x34
  1742  000035                     	ds	3
  1743  000038                     ___llmod@counter:
  1744                           	opt stack 0
  1745  000038                     ___ftdiv@f2:
  1746                           	opt stack 0
  1747                           
  1748                           ; 3 bytes @ 0x37
  1749  000038                     	ds	1
  1750  000039                     ___almod@counter:
  1751                           	opt stack 0
  1752                           
  1753                           ; 1 bytes @ 0x38
  1754  000039                     	ds	1
  1755  00003A                     ___almod@sign:
  1756                           	opt stack 0
  1757                           
  1758                           ; 1 bytes @ 0x39
  1759  00003A                     	ds	1
  1760  00003B                     tblptru	equ	0xFF8
  1761                           tblptrh	equ	0xFF7
  1762                           tblptrl	equ	0xFF6
  1763                           tablat	equ	0xFF5
  1764                           postinc0	equ	0xFEE
  1765                           wreg	equ	0xFE8
  1766                           postdec1	equ	0xFE5
  1767                           fsr1l	equ	0xFE1
  1768                           
  1769                           ; 1 bytes @ 0x3A
  1770 ;;
  1771 ;;Main: autosize = 0, tempsize = 13, incstack = 0, save=0
  1772 ;;
  1773 ;; *************** function _main *****************
  1774 ;; Defined at:
  1775 ;;		line 113 in file "main.c"
  1776 ;; Parameters:    Size  Location     Type
  1777 ;;		None
  1778 ;; Auto vars:     Size  Location     Type
  1779 ;;  prev            2   54[BANK1 ] int 
  1780 ;;  cylinderDur     2   52[BANK1 ] int 
  1781 ;;  cylinderStar    2   50[BANK1 ] int 
  1782 ;;  lastBatteryT    2   48[BANK1 ] int 
  1783 ;;  cylinderBack    2   46[BANK1 ] int 
  1784 ;;  cylinderForw    2   44[BANK1 ] int 
  1785 ;; Return value:  Size  Location     Type
  1786 ;;                  1    wreg      void 
  1787 ;; Registers used:
  1788 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1789 ;; Tracked objects:
  1790 ;;		On entry : 0/0
  1791 ;;		On exit  : 0/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1795 ;;      Locals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1796 ;;      Temps:          0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1797 ;;      Totals:         0       0      25       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1798 ;;Total ram usage:       25 bytes
  1799 ;; Hardware stack levels required when called:   10
  1800 ;; This function calls:
  1801 ;;		___aldiv
  1802 ;;		___almod
  1803 ;;		_digitalRead
  1804 ;;		_digitalWrite
  1805 ;;		_initLCD
  1806 ;;		_initServo
  1807 ;;		_initTimer
  1808 ;;		_lcdClear
  1809 ;;		_lcdHome
  1810 ;;		_pinSetup
  1811 ;;		_printf
  1812 ;;		_readKeypad
  1813 ;;		_showInterface
  1814 ;;		_sortBattery
  1815 ;;		_startTimer
  1816 ;; This function is called by:
  1817 ;;		Startup code after reset
  1818 ;; This function uses a non-reentrant model
  1819 ;;
  1820                           
  1821                           	psect	text0
  1822  001708                     __ptext0:
  1823                           	opt stack 0
  1824  001708                     _main:
  1825                           	opt stack 21
  1826                           
  1827                           ;main.c: 117: pinSetup();
  1828                           
  1829                           ;incstack = 0
  1830  001708  EC2E  F01B         	call	_pinSetup	;wreg free
  1831                           
  1832                           ;main.c: 118: initLCD();
  1833  00170C  EC0B  F01B         	call	_initLCD	;wreg free
  1834  001710                     l6978:
  1835                           
  1836                           ;main.c: 121: showInterface();
  1837  001710  EC03  F014         	call	_showInterface	;wreg free
  1838                           
  1839                           ;main.c: 126: time = 0;
  1840  001714  0E00               	movlw	0
  1841  001716  0101               	movlb	1	; () banked
  1842  001718  6F48               	movwf	_time& (0+255),b
  1843  00171A  0E00               	movlw	0
  1844  00171C  6F49               	movwf	(_time+1)& (0+255),b
  1845  00171E  0E00               	movlw	0
  1846  001720  6F4A               	movwf	(_time+2)& (0+255),b
  1847  001722  0E00               	movlw	0
  1848  001724  6F4B               	movwf	(_time+3)& (0+255),b
  1849                           
  1850                           ; BSR set to: 1
  1851                           ;main.c: 127: initTimer(1);
  1852  001726  0E00               	movlw	0
  1853  001728  6E24               	movwf	initTimer@timer+1,c
  1854  00172A  0E01               	movlw	1
  1855  00172C  6E23               	movwf	initTimer@timer,c
  1856  00172E  ECE6  F01A         	call	_initTimer	;wreg free
  1857                           
  1858                           ;main.c: 128: startTimer(1,0);
  1859  001732  0E00               	movlw	0
  1860  001734  6E24               	movwf	startTimer@timer+1,c
  1861  001736  0E01               	movlw	1
  1862  001738  6E23               	movwf	startTimer@timer,c
  1863  00173A  0E00               	movlw	0
  1864  00173C  6E25               	movwf	startTimer@val,c
  1865  00173E  0E00               	movlw	0
  1866  001740  6E26               	movwf	startTimer@val+1,c
  1867  001742  0E00               	movlw	0
  1868  001744  6E27               	movwf	startTimer@val+2,c
  1869  001746  0E00               	movlw	0
  1870  001748  6E28               	movwf	startTimer@val+3,c
  1871  00174A  EC9A  F01A         	call	_startTimer	;wreg free
  1872                           
  1873                           ;main.c: 131: digitalWrite(cylinderMotor, 1);
  1874  00174E  0E66               	movlw	low _cylinderMotor
  1875  001750  6E23               	movwf	digitalWrite@pin,c
  1876  001752  0E01               	movlw	high _cylinderMotor
  1877  001754  6E24               	movwf	digitalWrite@pin+1,c
  1878  001756  0E00               	movlw	0
  1879  001758  6E26               	movwf	digitalWrite@val+1,c
  1880  00175A  0E01               	movlw	1
  1881  00175C  6E25               	movwf	digitalWrite@val,c
  1882  00175E  ECAE  F016         	call	_digitalWrite	;wreg free
  1883                           
  1884                           ;main.c: 132: initServo(conveyorServo, 130);
  1885  001762  0E5E               	movlw	low _conveyorServo
  1886  001764  0100               	movlb	0	; () banked
  1887  001766  6FDE               	movwf	initServo@motor& (0+255),b
  1888  001768  0E01               	movlw	high _conveyorServo
  1889  00176A  0100               	movlb	0	; () banked
  1890  00176C  6FDF               	movwf	(initServo@motor+1)& (0+255),b
  1891  00176E  0E00               	movlw	0
  1892  001770  0100               	movlb	0	; () banked
  1893  001772  6FE1               	movwf	(initServo@angle+1)& (0+255),b
  1894  001774  0E82               	movlw	130
  1895  001776  6FE0               	movwf	initServo@angle& (0+255),b
  1896  001778  EC6D  F015         	call	_initServo	;wreg free
  1897                           
  1898                           ;main.c: 133: initServo(padServo, padAngle_NEUTRAL);
  1899  00177C  0E6E               	movlw	low _padServo
  1900  00177E  0100               	movlb	0	; () banked
  1901  001780  6FDE               	movwf	initServo@motor& (0+255),b
  1902  001782  0E01               	movlw	high _padServo
  1903  001784  0100               	movlb	0	; () banked
  1904  001786  6FDF               	movwf	(initServo@motor+1)& (0+255),b
  1905  001788  C158  F0E0         	movff	_padAngle_NEUTRAL,initServo@angle
  1906  00178C  C159  F0E1         	movff	_padAngle_NEUTRAL+1,initServo@angle+1
  1907  001790  EC6D  F015         	call	_initServo	;wreg free
  1908                           
  1909                           ;main.c: 134: initServo(redirectingServo, redirectAngle_AA);
  1910  001794  0E72               	movlw	low _redirectingServo
  1911  001796  0100               	movlb	0	; () banked
  1912  001798  6FDE               	movwf	initServo@motor& (0+255),b
  1913  00179A  0E01               	movlw	high _redirectingServo
  1914  00179C  0100               	movlb	0	; () banked
  1915  00179E  6FDF               	movwf	(initServo@motor+1)& (0+255),b
  1916  0017A0  C15A  F0E0         	movff	_redirectAngle_AA,initServo@angle
  1917  0017A4  C15B  F0E1         	movff	_redirectAngle_AA+1,initServo@angle+1
  1918  0017A8  EC6D  F015         	call	_initServo	;wreg free
  1919  0017AC                     l6994:
  1920                           
  1921                           ;main.c: 138: lcdClear();
  1922  0017AC  EC86  F01C         	call	_lcdClear	;wreg free
  1923                           
  1924                           ;main.c: 139: printf("running");
  1925  0017B0  0EF6               	movlw	low STR_1
  1926  0017B2  0100               	movlb	0	; () banked
  1927  0017B4  6FBD               	movwf	printf@f& (0+255),b
  1928  0017B6  0EFF               	movlw	high STR_1
  1929  0017B8  0100               	movlb	0	; () banked
  1930  0017BA  6FBE               	movwf	(printf@f+1)& (0+255),b
  1931  0017BC  EC09  F000         	call	_printf	;wreg free
  1932                           
  1933                           ;main.c: 141: int lastBatteryTime = time;
  1934  0017C0  C148  F130         	movff	_time,main@lastBatteryTime
  1935  0017C4  C149  F131         	movff	_time+1,main@lastBatteryTime+1
  1936                           
  1937                           ;main.c: 143: int cylinderStart = time;
  1938  0017C8  C148  F132         	movff	_time,main@cylinderStart
  1939  0017CC  C149  F133         	movff	_time+1,main@cylinderStart+1
  1940                           
  1941                           ;main.c: 144: int cylinderDur = 0;
  1942  0017D0  0E00               	movlw	0
  1943  0017D2  0101               	movlb	1	; () banked
  1944  0017D4  6F35               	movwf	(main@cylinderDur+1)& (0+255),b
  1945  0017D6  0E00               	movlw	0
  1946  0017D8  6F34               	movwf	main@cylinderDur& (0+255),b
  1947                           
  1948                           ;main.c: 145: int cylinderForward = 10;
  1949  0017DA  0E00               	movlw	0
  1950  0017DC  0101               	movlb	1	; () banked
  1951  0017DE  6F2D               	movwf	(main@cylinderForward+1)& (0+255),b
  1952  0017E0  0E0A               	movlw	10
  1953  0017E2  6F2C               	movwf	main@cylinderForward& (0+255),b
  1954                           
  1955                           ;main.c: 146: int cylinderBackward = 10;
  1956  0017E4  0E00               	movlw	0
  1957  0017E6  0101               	movlb	1	; () banked
  1958  0017E8  6F2F               	movwf	(main@cylinderBackward+1)& (0+255),b
  1959  0017EA  0E0A               	movlw	10
  1960  0017EC  6F2E               	movwf	main@cylinderBackward& (0+255),b
  1961                           
  1962                           ;main.c: 148: while(!batteryDetected && !terminate){
  1963  0017EE  D121               	goto	l7020
  1964  0017F0                     l7002:
  1965                           
  1966                           ; BSR set to: 1
  1967                           ;main.c: 150: lcdHome();
  1968  0017F0  EC8A  F01C         	call	_lcdHome	;wreg free
  1969                           
  1970                           ;main.c: 151: printf("time %02ld:%02ld",time/600,(time/10)%60);
  1971  0017F4  0EC0               	movlw	low STR_2
  1972  0017F6  0100               	movlb	0	; () banked
  1973  0017F8  6FBD               	movwf	printf@f& (0+255),b
  1974  0017FA  0EFF               	movlw	high STR_2
  1975  0017FC  0100               	movlb	0	; () banked
  1976  0017FE  6FBE               	movwf	(printf@f+1)& (0+255),b
  1977  001800  C148  F023         	movff	_time,___aldiv@dividend
  1978  001804  C149  F024         	movff	_time+1,___aldiv@dividend+1
  1979  001808  C14A  F025         	movff	_time+2,___aldiv@dividend+2
  1980  00180C  C14B  F026         	movff	_time+3,___aldiv@dividend+3
  1981  001810  0E58               	movlw	88
  1982  001812  6E27               	movwf	___aldiv@divisor,c
  1983  001814  0E02               	movlw	2
  1984  001816  6E28               	movwf	___aldiv@divisor+1,c
  1985  001818  0E00               	movlw	0
  1986  00181A  6E29               	movwf	___aldiv@divisor+2,c
  1987  00181C  0E00               	movlw	0
  1988  00181E  6E2A               	movwf	___aldiv@divisor+3,c
  1989  001820  EC48  F016         	call	___aldiv	;wreg free
  1990  001824  C023  F0BF         	movff	?___aldiv,?_printf+2
  1991  001828  C024  F0C0         	movff	?___aldiv+1,?_printf+3
  1992  00182C  C025  F0C1         	movff	?___aldiv+2,?_printf+4
  1993  001830  C026  F0C2         	movff	?___aldiv+3,?_printf+5
  1994  001834  0E0A               	movlw	10
  1995  001836  6E27               	movwf	___aldiv@divisor,c
  1996  001838  0E00               	movlw	0
  1997  00183A  6E28               	movwf	___aldiv@divisor+1,c
  1998  00183C  0E00               	movlw	0
  1999  00183E  6E29               	movwf	___aldiv@divisor+2,c
  2000  001840  0E00               	movlw	0
  2001  001842  6E2A               	movwf	___aldiv@divisor+3,c
  2002  001844  C148  F023         	movff	_time,___aldiv@dividend
  2003  001848  C149  F024         	movff	_time+1,___aldiv@dividend+1
  2004  00184C  C14A  F025         	movff	_time+2,___aldiv@dividend+2
  2005  001850  C14B  F026         	movff	_time+3,___aldiv@dividend+3
  2006  001854  EC48  F016         	call	___aldiv	;wreg free
  2007  001858  C023  F031         	movff	?___aldiv,___almod@dividend
  2008  00185C  C024  F032         	movff	?___aldiv+1,___almod@dividend+1
  2009  001860  C025  F033         	movff	?___aldiv+2,___almod@dividend+2
  2010  001864  C026  F034         	movff	?___aldiv+3,___almod@dividend+3
  2011  001868  0E3C               	movlw	60
  2012  00186A  6E35               	movwf	___almod@divisor,c
  2013  00186C  0E00               	movlw	0
  2014  00186E  6E36               	movwf	___almod@divisor+1,c
  2015  001870  0E00               	movlw	0
  2016  001872  6E37               	movwf	___almod@divisor+2,c
  2017  001874  0E00               	movlw	0
  2018  001876  6E38               	movwf	___almod@divisor+3,c
  2019  001878  ECCD  F017         	call	___almod	;wreg free
  2020  00187C  C031  F0C3         	movff	?___almod,?_printf+6
  2021  001880  C032  F0C4         	movff	?___almod+1,?_printf+7
  2022  001884  C033  F0C5         	movff	?___almod+2,?_printf+8
  2023  001888  C034  F0C6         	movff	?___almod+3,?_printf+9
  2024  00188C  EC09  F000         	call	_printf	;wreg free
  2025                           
  2026                           ;main.c: 152: _delay((unsigned long)((77)*(10000000/4000.0)));
  2027  001890  0EFA               	movlw	250
  2028  001892  0101               	movlb	1	; () banked
  2029  001894  6F1F               	movwf	??_main& (0+255),b
  2030  001896  0EFF               	movlw	255
  2031  001898                     u7627:
  2032  001898  2EE8               	decfsz	wreg,f,c
  2033  00189A  D7FE               	bra	u7627
  2034  00189C  2F1F               	decfsz	??_main& (0+255),f,b
  2035  00189E  D7FC               	bra	u7627
  2036                           
  2037                           ;main.c: 155: if(time - cylinderStart >= cylinderDur)
  2038  0018A0  C134  F11F         	movff	main@cylinderDur,??_main
  2039  0018A4  C135  F120         	movff	main@cylinderDur+1,??_main+1
  2040  0018A8  0E00               	movlw	0
  2041  0018AA  0101               	movlb	1	; () banked
  2042  0018AC  BF20               	btfsc	(??_main+1)& (0+255),7,b
  2043  0018AE  0EFF               	movlw	255
  2044  0018B0  6F21               	movwf	(??_main+2)& (0+255),b
  2045  0018B2  6F22               	movwf	(??_main+3)& (0+255),b
  2046  0018B4  C132  F123         	movff	main@cylinderStart,??_main+4
  2047  0018B8  C133  F124         	movff	main@cylinderStart+1,??_main+5
  2048  0018BC  0E00               	movlw	0
  2049  0018BE  0101               	movlb	1	; () banked
  2050  0018C0  BF24               	btfsc	(??_main+5)& (0+255),7,b
  2051  0018C2  0EFF               	movlw	255
  2052  0018C4  6F25               	movwf	(??_main+6)& (0+255),b
  2053  0018C6  6F26               	movwf	(??_main+7)& (0+255),b
  2054  0018C8  0101               	movlb	1	; () banked
  2055  0018CA  1F23               	comf	(??_main+4)& (0+255),f,b
  2056  0018CC  1F24               	comf	(??_main+5)& (0+255),f,b
  2057  0018CE  1F25               	comf	(??_main+6)& (0+255),f,b
  2058  0018D0  1F26               	comf	(??_main+7)& (0+255),f,b
  2059  0018D2  2B23               	incf	(??_main+4)& (0+255),f,b
  2060  0018D4  0E00               	movlw	0
  2061  0018D6  2324               	addwfc	(??_main+5)& (0+255),f,b
  2062  0018D8  2325               	addwfc	(??_main+6)& (0+255),f,b
  2063  0018DA  2326               	addwfc	(??_main+7)& (0+255),f,b
  2064  0018DC  0101               	movlb	1	; () banked
  2065  0018DE  5148               	movf	_time& (0+255),w,b
  2066  0018E0  0101               	movlb	1	; () banked
  2067  0018E2  2523               	addwf	(??_main+4)& (0+255),w,b
  2068  0018E4  0101               	movlb	1	; () banked
  2069  0018E6  6F27               	movwf	(??_main+8)& (0+255),b
  2070  0018E8  0101               	movlb	1	; () banked
  2071  0018EA  5149               	movf	(_time+1)& (0+255),w,b
  2072  0018EC  0101               	movlb	1	; () banked
  2073  0018EE  2124               	addwfc	(??_main+5)& (0+255),w,b
  2074  0018F0  0101               	movlb	1	; () banked
  2075  0018F2  6F28               	movwf	(??_main+9)& (0+255),b
  2076  0018F4  0101               	movlb	1	; () banked
  2077  0018F6  514A               	movf	(_time+2)& (0+255),w,b
  2078  0018F8  0101               	movlb	1	; () banked
  2079  0018FA  2125               	addwfc	(??_main+6)& (0+255),w,b
  2080  0018FC  0101               	movlb	1	; () banked
  2081  0018FE  6F29               	movwf	(??_main+10)& (0+255),b
  2082  001900  0101               	movlb	1	; () banked
  2083  001902  514B               	movf	(_time+3)& (0+255),w,b
  2084  001904  0101               	movlb	1	; () banked
  2085  001906  2126               	addwfc	(??_main+7)& (0+255),w,b
  2086  001908  0101               	movlb	1	; () banked
  2087  00190A  6F2A               	movwf	(??_main+11)& (0+255),b
  2088  00190C  0101               	movlb	1	; () banked
  2089  00190E  511F               	movf	??_main& (0+255),w,b
  2090  001910  0101               	movlb	1	; () banked
  2091  001912  5D27               	subwf	(??_main+8)& (0+255),w,b
  2092  001914  0101               	movlb	1	; () banked
  2093  001916  5120               	movf	(??_main+1)& (0+255),w,b
  2094  001918  0101               	movlb	1	; () banked
  2095  00191A  5928               	subwfb	(??_main+9)& (0+255),w,b
  2096  00191C  0101               	movlb	1	; () banked
  2097  00191E  5121               	movf	(??_main+2)& (0+255),w,b
  2098  001920  0101               	movlb	1	; () banked
  2099  001922  5929               	subwfb	(??_main+10)& (0+255),w,b
  2100  001924  0101               	movlb	1	; () banked
  2101  001926  512A               	movf	(??_main+11)& (0+255),w,b
  2102  001928  0A80               	xorlw	128
  2103  00192A  0101               	movlb	1	; () banked
  2104  00192C  6F2B               	movwf	(??_main+12)& (0+255),b
  2105  00192E  0101               	movlb	1	; () banked
  2106  001930  5122               	movf	(??_main+3)& (0+255),w,b
  2107  001932  0A80               	xorlw	128
  2108  001934  0101               	movlb	1	; () banked
  2109  001936  592B               	subwfb	(??_main+12)& (0+255),w,b
  2110  001938  A0D8               	btfss	status,0,c
  2111  00193A  D02E               	goto	l7016
  2112                           
  2113                           ; BSR set to: 1
  2114                           ;main.c: 156: {
  2115                           ;main.c: 157: int prev = digitalRead(cylinderDir);
  2116  00193C  0E62               	movlw	low _cylinderDir
  2117  00193E  6E23               	movwf	digitalRead@pin,c
  2118  001940  0E01               	movlw	high _cylinderDir
  2119  001942  6E24               	movwf	digitalRead@pin+1,c
  2120  001944  EC85  F014         	call	_digitalRead	;wreg free
  2121  001948  C023  F136         	movff	?_digitalRead,main@prev
  2122  00194C  C024  F137         	movff	?_digitalRead+1,main@prev+1
  2123                           
  2124                           ;main.c: 158: digitalWrite(cylinderDir, !prev);
  2125  001950  0E62               	movlw	low _cylinderDir
  2126  001952  6E23               	movwf	digitalWrite@pin,c
  2127  001954  0E01               	movlw	high _cylinderDir
  2128  001956  6E24               	movwf	digitalWrite@pin+1,c
  2129  001958  0101               	movlb	1	; () banked
  2130  00195A  5136               	movf	main@prev& (0+255),w,b
  2131  00195C  0101               	movlb	1	; () banked
  2132  00195E  1137               	iorwf	(main@prev+1)& (0+255),w,b
  2133  001960  A4D8               	btfss	status,2,c
  2134  001962  D002               	goto	u7530
  2135  001964  0E01               	movlw	1
  2136  001966  D001               	goto	u7540
  2137  001968                     u7530:
  2138  001968  0E00               	movlw	0
  2139  00196A                     u7540:
  2140  00196A  6E25               	movwf	digitalWrite@val,c
  2141  00196C  6A26               	clrf	digitalWrite@val+1,c
  2142  00196E  ECAE  F016         	call	_digitalWrite	;wreg free
  2143                           
  2144                           ;main.c: 159: if(prev)cylinderDur = cylinderBackward;
  2145  001972  0101               	movlb	1	; () banked
  2146  001974  5136               	movf	main@prev& (0+255),w,b
  2147  001976  0101               	movlb	1	; () banked
  2148  001978  1137               	iorwf	(main@prev+1)& (0+255),w,b
  2149  00197A  B4D8               	btfsc	status,2,c
  2150  00197C  D005               	goto	l142
  2151                           
  2152                           ; BSR set to: 1
  2153  00197E  C12E  F134         	movff	main@cylinderBackward,main@cylinderDur
  2154  001982  C12F  F135         	movff	main@cylinderBackward+1,main@cylinderDur+1
  2155  001986  D004               	goto	l143
  2156  001988                     l142:
  2157                           
  2158                           ; BSR set to: 1
  2159                           ;main.c: 160: else cylinderDur = cylinderForward;
  2160  001988  C12C  F134         	movff	main@cylinderForward,main@cylinderDur
  2161  00198C  C12D  F135         	movff	main@cylinderForward+1,main@cylinderDur+1
  2162  001990                     l143:
  2163                           
  2164                           ; BSR set to: 1
  2165                           ;main.c: 161: cylinderStart = time;
  2166  001990  C148  F132         	movff	_time,main@cylinderStart
  2167  001994  C149  F133         	movff	_time+1,main@cylinderStart+1
  2168  001998                     l7016:
  2169                           
  2170                           ; BSR set to: 1
  2171                           ;main.c: 162: }
  2172                           ;main.c: 164: if(time - lastBatteryTime > stoppingTime)
  2173  001998  C130  F11F         	movff	main@lastBatteryTime,??_main
  2174  00199C  C131  F120         	movff	main@lastBatteryTime+1,??_main+1
  2175  0019A0  0E00               	movlw	0
  2176  0019A2  0101               	movlb	1	; () banked
  2177  0019A4  BF20               	btfsc	(??_main+1)& (0+255),7,b
  2178  0019A6  0EFF               	movlw	255
  2179  0019A8  6F21               	movwf	(??_main+2)& (0+255),b
  2180  0019AA  6F22               	movwf	(??_main+3)& (0+255),b
  2181  0019AC  0101               	movlb	1	; () banked
  2182  0019AE  1F1F               	comf	??_main& (0+255),f,b
  2183  0019B0  1F20               	comf	(??_main+1)& (0+255),f,b
  2184  0019B2  1F21               	comf	(??_main+2)& (0+255),f,b
  2185  0019B4  1F22               	comf	(??_main+3)& (0+255),f,b
  2186  0019B6  2B1F               	incf	??_main& (0+255),f,b
  2187  0019B8  0E00               	movlw	0
  2188  0019BA  2320               	addwfc	(??_main+1)& (0+255),f,b
  2189  0019BC  2321               	addwfc	(??_main+2)& (0+255),f,b
  2190  0019BE  2322               	addwfc	(??_main+3)& (0+255),f,b
  2191  0019C0  0101               	movlb	1	; () banked
  2192  0019C2  5148               	movf	_time& (0+255),w,b
  2193  0019C4  0101               	movlb	1	; () banked
  2194  0019C6  251F               	addwf	??_main& (0+255),w,b
  2195  0019C8  0101               	movlb	1	; () banked
  2196  0019CA  6F23               	movwf	(??_main+4)& (0+255),b
  2197  0019CC  0101               	movlb	1	; () banked
  2198  0019CE  5149               	movf	(_time+1)& (0+255),w,b
  2199  0019D0  0101               	movlb	1	; () banked
  2200  0019D2  2120               	addwfc	(??_main+1)& (0+255),w,b
  2201  0019D4  0101               	movlb	1	; () banked
  2202  0019D6  6F24               	movwf	(??_main+5)& (0+255),b
  2203  0019D8  0101               	movlb	1	; () banked
  2204  0019DA  514A               	movf	(_time+2)& (0+255),w,b
  2205  0019DC  0101               	movlb	1	; () banked
  2206  0019DE  2121               	addwfc	(??_main+2)& (0+255),w,b
  2207  0019E0  0101               	movlb	1	; () banked
  2208  0019E2  6F25               	movwf	(??_main+6)& (0+255),b
  2209  0019E4  0101               	movlb	1	; () banked
  2210  0019E6  514B               	movf	(_time+3)& (0+255),w,b
  2211  0019E8  0101               	movlb	1	; () banked
  2212  0019EA  2122               	addwfc	(??_main+3)& (0+255),w,b
  2213  0019EC  0101               	movlb	1	; () banked
  2214  0019EE  6F26               	movwf	(??_main+7)& (0+255),b
  2215  0019F0  0E00               	movlw	0
  2216  0019F2  0101               	movlb	1	; () banked
  2217  0019F4  BF5D               	btfsc	(_stoppingTime+1)& (0+255),7,b
  2218  0019F6  0EFF               	movlw	255
  2219  0019F8  0101               	movlb	1	; () banked
  2220  0019FA  6F28               	movwf	(??_main+9)& (0+255),b
  2221  0019FC  0A80               	xorlw	128
  2222  0019FE  6F27               	movwf	(??_main+8)& (0+255),b
  2223  001A00  0101               	movlb	1	; () banked
  2224  001A02  5123               	movf	(??_main+4)& (0+255),w,b
  2225  001A04  0101               	movlb	1	; () banked
  2226  001A06  5D5C               	subwf	_stoppingTime& (0+255),w,b
  2227  001A08  0101               	movlb	1	; () banked
  2228  001A0A  5124               	movf	(??_main+5)& (0+255),w,b
  2229  001A0C  0101               	movlb	1	; () banked
  2230  001A0E  595D               	subwfb	(_stoppingTime+1)& (0+255),w,b
  2231  001A10  0101               	movlb	1	; () banked
  2232  001A12  5125               	movf	(??_main+6)& (0+255),w,b
  2233  001A14  0101               	movlb	1	; () banked
  2234  001A16  5928               	subwfb	(??_main+9)& (0+255),w,b
  2235  001A18  0101               	movlb	1	; () banked
  2236  001A1A  5126               	movf	(??_main+7)& (0+255),w,b
  2237  001A1C  0A80               	xorlw	128
  2238  001A1E  0101               	movlb	1	; () banked
  2239  001A20  5927               	subwfb	(??_main+8)& (0+255),w,b
  2240  001A22  B0D8               	btfsc	status,0,c
  2241  001A24  D006               	goto	l7020
  2242                           
  2243                           ; BSR set to: 1
  2244                           ;main.c: 165: {
  2245                           ;main.c: 166: terminate = 1;
  2246  001A26  0E00               	movlw	0
  2247  001A28  0101               	movlb	1	; () banked
  2248  001A2A  6F57               	movwf	(_terminate+1)& (0+255),b
  2249  001A2C  0E01               	movlw	1
  2250  001A2E  6F56               	movwf	_terminate& (0+255),b
  2251                           
  2252                           ;main.c: 167: break;
  2253  001A30  D00C               	goto	l7024
  2254  001A32                     l7020:
  2255                           
  2256                           ; BSR set to: 1
  2257  001A32  0101               	movlb	1	; () banked
  2258  001A34  514C               	movf	_batteryDetected& (0+255),w,b
  2259  001A36  0101               	movlb	1	; () banked
  2260  001A38  114D               	iorwf	(_batteryDetected+1)& (0+255),w,b
  2261  001A3A  A4D8               	btfss	status,2,c
  2262  001A3C  D006               	goto	l7024
  2263                           
  2264                           ; BSR set to: 1
  2265  001A3E  0101               	movlb	1	; () banked
  2266  001A40  5156               	movf	_terminate& (0+255),w,b
  2267  001A42  0101               	movlb	1	; () banked
  2268  001A44  1157               	iorwf	(_terminate+1)& (0+255),w,b
  2269  001A46  B4D8               	btfsc	status,2,c
  2270  001A48  D6D3               	goto	l7002
  2271  001A4A                     l7024:
  2272                           
  2273                           ; BSR set to: 1
  2274                           ;main.c: 168: }
  2275                           ;main.c: 169: }
  2276                           ;main.c: 171: if(terminate)break;
  2277  001A4A  0101               	movlb	1	; () banked
  2278  001A4C  5156               	movf	_terminate& (0+255),w,b
  2279  001A4E  0101               	movlb	1	; () banked
  2280  001A50  1157               	iorwf	(_terminate+1)& (0+255),w,b
  2281  001A52  A4D8               	btfss	status,2,c
  2282  001A54  D00C               	goto	l7034
  2283                           
  2284                           ; BSR set to: 1
  2285                           ;main.c: 173: sortBattery();
  2286                           
  2287                           ; BSR set to: 1
  2288                           
  2289                           ; BSR set to: 1
  2290  001A56  EC05  F007         	call	_sortBattery	;wreg free
  2291                           
  2292                           ;main.c: 176: lastBatteryTime = time;
  2293  001A5A  C148  F130         	movff	_time,main@lastBatteryTime
  2294  001A5E  C149  F131         	movff	_time+1,main@lastBatteryTime+1
  2295                           
  2296                           ;main.c: 177: batteryDetected = 0;
  2297  001A62  0E00               	movlw	0
  2298  001A64  0101               	movlb	1	; () banked
  2299  001A66  6F4D               	movwf	(_batteryDetected+1)& (0+255),b
  2300  001A68  0E00               	movlw	0
  2301  001A6A  6F4C               	movwf	_batteryDetected& (0+255),b
  2302                           
  2303                           ; BSR set to: 1
  2304  001A6C  D69F               	goto	l6994
  2305  001A6E                     l7034:
  2306                           
  2307                           ; BSR set to: 1
  2308                           ;main.c: 178: }
  2309                           ;main.c: 181: digitalWrite(cylinderMotor, 0);
  2310  001A6E  0E66               	movlw	low _cylinderMotor
  2311  001A70  6E23               	movwf	digitalWrite@pin,c
  2312  001A72  0E01               	movlw	high _cylinderMotor
  2313  001A74  6E24               	movwf	digitalWrite@pin+1,c
  2314  001A76  0E00               	movlw	0
  2315  001A78  6E26               	movwf	digitalWrite@val+1,c
  2316  001A7A  0E00               	movlw	0
  2317  001A7C  6E25               	movwf	digitalWrite@val,c
  2318  001A7E  ECAE  F016         	call	_digitalWrite	;wreg free
  2319                           
  2320                           ;main.c: 184: lcdClear();
  2321  001A82  EC86  F01C         	call	_lcdClear	;wreg free
  2322                           
  2323                           ;main.c: 185: printf("[AA,C,9V,OTHER]\n");
  2324  001A86  0EAF               	movlw	low STR_3
  2325  001A88  0100               	movlb	0	; () banked
  2326  001A8A  6FBD               	movwf	printf@f& (0+255),b
  2327  001A8C  0EFF               	movlw	high STR_3
  2328  001A8E  0100               	movlb	0	; () banked
  2329  001A90  6FBE               	movwf	(printf@f+1)& (0+255),b
  2330  001A92  EC09  F000         	call	_printf	;wreg free
  2331                           
  2332                           ;main.c: 186: printf("[%d,%d,%d,%d]",n_AA,n_C,n_9V,n_OTHER);
  2333  001A96  0EE0               	movlw	low STR_4
  2334  001A98  0100               	movlb	0	; () banked
  2335  001A9A  6FBD               	movwf	printf@f& (0+255),b
  2336  001A9C  0EFF               	movlw	high STR_4
  2337  001A9E  0100               	movlb	0	; () banked
  2338  001AA0  6FBE               	movwf	(printf@f+1)& (0+255),b
  2339  001AA2  C150  F0BF         	movff	_n_AA,?_printf+2
  2340  001AA6  C151  F0C0         	movff	_n_AA+1,?_printf+3
  2341  001AAA  C152  F0C1         	movff	_n_C,?_printf+4
  2342  001AAE  C153  F0C2         	movff	_n_C+1,?_printf+5
  2343  001AB2  C14E  F0C3         	movff	_n_9V,?_printf+6
  2344  001AB6  C14F  F0C4         	movff	_n_9V+1,?_printf+7
  2345  001ABA  C154  F0C5         	movff	_n_OTHER,?_printf+8
  2346  001ABE  C155  F0C6         	movff	_n_OTHER+1,?_printf+9
  2347  001AC2  EC09  F000         	call	_printf	;wreg free
  2348                           
  2349                           ;main.c: 187: readKeypad();
  2350  001AC6  ECD8  F01B         	call	_readKeypad	;wreg free
  2351  001ACA  D622               	goto	l6978
  2352  001ACC                     l153:
  2353  001ACC  D7FF               	goto	l153
  2354  001ACE                     __end_of_main:
  2355                           	opt stack 0
  2356                           tblptru	equ	0xFF8
  2357                           tblptrh	equ	0xFF7
  2358                           tblptrl	equ	0xFF6
  2359                           tablat	equ	0xFF5
  2360                           postinc0	equ	0xFEE
  2361                           wreg	equ	0xFE8
  2362                           postdec1	equ	0xFE5
  2363                           fsr1l	equ	0xFE1
  2364                           status	equ	0xFD8
  2365                           
  2366 ;; *************** function _sortBattery *****************
  2367 ;; Defined at:
  2368 ;;		line 195 in file "main.c"
  2369 ;; Parameters:    Size  Location     Type
  2370 ;;		None
  2371 ;; Auto vars:     Size  Location     Type
  2372 ;;  V               3   22[BANK1 ] float 
  2373 ;;  i               2   18[BANK1 ] int 
  2374 ;;  i               3   25[BANK1 ] float 
  2375 ;;  V               3   28[BANK1 ] float 
  2376 ;;  V_max           3   15[BANK1 ] float 
  2377 ;;  resolution      3   12[BANK1 ] float 
  2378 ;;  Vcc             3    9[BANK1 ] float 
  2379 ;;  V_float         3    2[BANK1 ] float 
  2380 ;;  targetAngle     2   20[BANK1 ] int 
  2381 ;;  signal          2    7[BANK1 ] int 
  2382 ;;  pos_v_counte    2    5[BANK1 ] int 
  2383 ;; Return value:  Size  Location     Type
  2384 ;;                  1    wreg      void 
  2385 ;; Registers used:
  2386 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2387 ;; Tracked objects:
  2388 ;;		On entry : 0/0
  2389 ;;		On exit  : 0/0
  2390 ;;		Unchanged: 0/0
  2391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2393 ;;      Locals:         0       0      31       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2394 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2395 ;;      Totals:         0       2      31       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2396 ;;Total ram usage:       33 bytes
  2397 ;; Hardware stack levels used:    1
  2398 ;; Hardware stack levels required when called:    8
  2399 ;; This function calls:
  2400 ;;		___altoft
  2401 ;;		___awtoft
  2402 ;;		___ftdiv
  2403 ;;		___ftge
  2404 ;;		___ftmul
  2405 ;;		___ftsub
  2406 ;;		___fttol
  2407 ;;		_analogRead
  2408 ;;		_digitalRead
  2409 ;;		_digitalWrite
  2410 ;;		_lcdClear
  2411 ;;		_printf
  2412 ;;		_readKeypad
  2413 ;;		_setAngle
  2414 ;; This function is called by:
  2415 ;;		_main
  2416 ;; This function uses a non-reentrant model
  2417 ;;
  2418                           
  2419                           	psect	text1
  2420  000E0A                     __ptext1:
  2421                           	opt stack 0
  2422  000E0A                     _sortBattery:
  2423                           	opt stack 22
  2424                           
  2425                           ;main.c: 198: setAngle(conveyorServo, 90);
  2426                           
  2427                           ;incstack = 0
  2428  000E0A  0E5E               	movlw	low _conveyorServo
  2429  000E0C  0100               	movlb	0	; () banked
  2430  000E0E  6FD4               	movwf	setAngle@motor& (0+255),b
  2431  000E10  0E01               	movlw	high _conveyorServo
  2432  000E12  0100               	movlb	0	; () banked
  2433  000E14  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2434  000E16  0E00               	movlw	0
  2435  000E18  0100               	movlb	0	; () banked
  2436  000E1A  6FD7               	movwf	(setAngle@angle+1)& (0+255),b
  2437  000E1C  0E5A               	movlw	90
  2438  000E1E  6FD6               	movwf	setAngle@angle& (0+255),b
  2439  000E20  ECDE  F015         	call	_setAngle	;wreg free
  2440                           
  2441                           ;main.c: 199: digitalWrite(cylinderMotor, 0);
  2442  000E24  0E66               	movlw	low _cylinderMotor
  2443  000E26  6E23               	movwf	digitalWrite@pin,c
  2444  000E28  0E01               	movlw	high _cylinderMotor
  2445  000E2A  6E24               	movwf	digitalWrite@pin+1,c
  2446  000E2C  0E00               	movlw	0
  2447  000E2E  6E26               	movwf	digitalWrite@val+1,c
  2448  000E30  0E00               	movlw	0
  2449  000E32  6E25               	movwf	digitalWrite@val,c
  2450  000E34  ECAE  F016         	call	_digitalWrite	;wreg free
  2451                           
  2452                           ;main.c: 202: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2453  000E38  0E0D               	movlw	13
  2454  000E3A  0100               	movlb	0	; () banked
  2455  000E3C  6FEC               	movwf	(??_sortBattery+1)& (0+255),b
  2456  000E3E  0EAF               	movlw	175
  2457  000E40  0100               	movlb	0	; () banked
  2458  000E42  6FEB               	movwf	??_sortBattery& (0+255),b
  2459  000E44  0EB6               	movlw	182
  2460  000E46                     u7637:
  2461  000E46  2EE8               	decfsz	wreg,f,c
  2462  000E48  D7FE               	bra	u7637
  2463  000E4A  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  2464  000E4C  D7FC               	bra	u7637
  2465  000E4E  2FEC               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2466  000E50  D7FA               	bra	u7637
  2467  000E52  F000               	nop	
  2468                           
  2469                           ;main.c: 204: float Vcc = 5.00;
  2470  000E54  0E00               	movlw	0
  2471  000E56  0101               	movlb	1	; () banked
  2472  000E58  6F09               	movwf	sortBattery@Vcc& (0+255),b
  2473  000E5A  0EA0               	movlw	160
  2474  000E5C  0101               	movlb	1	; () banked
  2475  000E5E  6F0A               	movwf	(sortBattery@Vcc+1)& (0+255),b
  2476  000E60  0E40               	movlw	64
  2477  000E62  0101               	movlb	1	; () banked
  2478  000E64  6F0B               	movwf	(sortBattery@Vcc+2)& (0+255),b
  2479                           
  2480                           ; BSR set to: 1
  2481                           ;main.c: 205: float resolution = (1<<10) - 1;
  2482  000E66  0EC0               	movlw	192
  2483  000E68  0101               	movlb	1	; () banked
  2484  000E6A  6F0C               	movwf	sortBattery@resolution& (0+255),b
  2485  000E6C  0E7F               	movlw	127
  2486  000E6E  0101               	movlb	1	; () banked
  2487  000E70  6F0D               	movwf	(sortBattery@resolution+1)& (0+255),b
  2488  000E72  0E44               	movlw	68
  2489  000E74  0101               	movlb	1	; () banked
  2490  000E76  6F0E               	movwf	(sortBattery@resolution+2)& (0+255),b
  2491                           
  2492                           ; BSR set to: 1
  2493                           ;main.c: 206: float V_max = 0;
  2494  000E78  0E00               	movlw	0
  2495  000E7A  0101               	movlb	1	; () banked
  2496  000E7C  6F0F               	movwf	sortBattery@V_max& (0+255),b
  2497  000E7E  0E00               	movlw	0
  2498  000E80  0101               	movlb	1	; () banked
  2499  000E82  6F10               	movwf	(sortBattery@V_max+1)& (0+255),b
  2500  000E84  0E00               	movlw	0
  2501  000E86  0101               	movlb	1	; () banked
  2502  000E88  6F11               	movwf	(sortBattery@V_max+2)& (0+255),b
  2503                           
  2504                           ; BSR set to: 1
  2505                           ;main.c: 207: float V_float = 0;
  2506  000E8A  0E00               	movlw	0
  2507  000E8C  0101               	movlb	1	; () banked
  2508  000E8E  6F02               	movwf	sortBattery@V_float& (0+255),b
  2509  000E90  0E00               	movlw	0
  2510  000E92  0101               	movlb	1	; () banked
  2511  000E94  6F03               	movwf	(sortBattery@V_float+1)& (0+255),b
  2512  000E96  0E00               	movlw	0
  2513  000E98  0101               	movlb	1	; () banked
  2514  000E9A  6F04               	movwf	(sortBattery@V_float+2)& (0+255),b
  2515                           
  2516                           ; BSR set to: 1
  2517                           ;main.c: 208: int pos_v_counter = 1;
  2518  000E9C  0E00               	movlw	0
  2519  000E9E  0101               	movlb	1	; () banked
  2520  000EA0  6F06               	movwf	(sortBattery@pos_v_counter+1)& (0+255),b
  2521  000EA2  0E01               	movlw	1
  2522  000EA4  6F05               	movwf	sortBattery@pos_v_counter& (0+255),b
  2523                           
  2524                           ; BSR set to: 1
  2525                           ;main.c: 209: int signal = 0;
  2526  000EA6  0E00               	movlw	0
  2527  000EA8  0101               	movlb	1	; () banked
  2528  000EAA  6F08               	movwf	(sortBattery@signal+1)& (0+255),b
  2529  000EAC  0E00               	movlw	0
  2530  000EAE  6F07               	movwf	sortBattery@signal& (0+255),b
  2531                           
  2532                           ; BSR set to: 1
  2533                           ;main.c: 213: for(float i = (float)padAngle_NEUTRAL; i > padAngle_CLOSE; i -= 0.1) {
  2534  000EB0  C158  F02B         	movff	_padAngle_NEUTRAL,___awtoft@c
  2535  000EB4  C159  F02C         	movff	_padAngle_NEUTRAL+1,___awtoft@c+1
  2536  000EB8  EC6A  F01B         	call	___awtoft	;wreg free
  2537  000EBC  C02B  F119         	movff	?___awtoft,sortBattery@i
  2538  000EC0  C02C  F11A         	movff	?___awtoft+1,sortBattery@i+1
  2539  000EC4  C02D  F11B         	movff	?___awtoft+2,sortBattery@i+2
  2540  000EC8  D0F6               	goto	l6896
  2541  000ECA                     l6870:
  2542                           
  2543                           ;main.c: 214: setAngle(padServo, i);
  2544  000ECA  C119  F0AE         	movff	sortBattery@i,___fttol@f1
  2545  000ECE  C11A  F0AF         	movff	sortBattery@i+1,___fttol@f1+1
  2546  000ED2  C11B  F0B0         	movff	sortBattery@i+2,___fttol@f1+2
  2547  000ED6  EC26  F011         	call	___fttol	;wreg free
  2548  000EDA  C0AE  F100         	movff	?___fttol,_sortBattery$1351
  2549  000EDE  C0AF  F101         	movff	?___fttol+1,_sortBattery$1351+1
  2550                           
  2551                           ;main.c: 214: setAngle(padServo, i);
  2552  000EE2  0E6E               	movlw	low _padServo
  2553  000EE4  0100               	movlb	0	; () banked
  2554  000EE6  6FD4               	movwf	setAngle@motor& (0+255),b
  2555  000EE8  0E01               	movlw	high _padServo
  2556  000EEA  0100               	movlb	0	; () banked
  2557  000EEC  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2558  000EEE  C100  F0D6         	movff	_sortBattery$1351,setAngle@angle
  2559  000EF2  C101  F0D7         	movff	_sortBattery$1351+1,setAngle@angle+1
  2560  000EF6  ECDE  F015         	call	_setAngle	;wreg free
  2561                           
  2562                           ;main.c: 215: _delay((unsigned long)((100)*(10000000/4000000.0)));
  2563  000EFA  0E53               	movlw	83
  2564  000EFC                     u7647:
  2565  000EFC  2EE8               	decfsz	wreg,f,c
  2566  000EFE  D7FE               	bra	u7647
  2567  000F00  F000               	nop	
  2568                           
  2569                           ;main.c: 216: digitalWrite(AA_float, 1);
  2570  000F02  0E4A               	movlw	low _AA_float
  2571  000F04  6E23               	movwf	digitalWrite@pin,c
  2572  000F06  0E00               	movlw	high _AA_float
  2573  000F08  6E24               	movwf	digitalWrite@pin+1,c
  2574  000F0A  0E00               	movlw	0
  2575  000F0C  6E26               	movwf	digitalWrite@val+1,c
  2576  000F0E  0E01               	movlw	1
  2577  000F10  6E25               	movwf	digitalWrite@val,c
  2578  000F12  ECAE  F016         	call	_digitalWrite	;wreg free
  2579                           
  2580                           ;main.c: 217: float V = analogRead(padPin3[1]) / resolution * Vcc;
  2581  000F16  C10C  F038         	movff	sortBattery@resolution,___ftdiv@f2
  2582  000F1A  C10D  F039         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2583  000F1E  C10E  F03A         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2584  000F22  C054  F023         	movff	_padPin3+2,analogRead@channel
  2585  000F26  C055  F024         	movff	_padPin3+3,analogRead@channel+1
  2586  000F2A  EC4E  F01B         	call	_analogRead	;wreg free
  2587  000F2E  C023  F02B         	movff	?_analogRead,___altoft@c
  2588  000F32  C024  F02C         	movff	?_analogRead+1,___altoft@c+1
  2589  000F36  C025  F02D         	movff	?_analogRead+2,___altoft@c+2
  2590  000F3A  C026  F02E         	movff	?_analogRead+3,___altoft@c+3
  2591  000F3E  EC34  F019         	call	___altoft	;wreg free
  2592  000F42  C02B  F035         	movff	?___altoft,___ftdiv@f1
  2593  000F46  C02C  F036         	movff	?___altoft+1,___ftdiv@f1+1
  2594  000F4A  C02D  F037         	movff	?___altoft+2,___ftdiv@f1+2
  2595  000F4E  ECF5  F012         	call	___ftdiv	;wreg free
  2596  000F52  C035  F089         	movff	?___ftdiv,___ftmul@f1
  2597  000F56  C036  F08A         	movff	?___ftdiv+1,___ftmul@f1+1
  2598  000F5A  C037  F08B         	movff	?___ftdiv+2,___ftmul@f1+2
  2599  000F5E  C109  F08C         	movff	sortBattery@Vcc,___ftmul@f2
  2600  000F62  C10A  F08D         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2601  000F66  C10B  F08E         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2602  000F6A  ECCB  F00F         	call	___ftmul	;wreg free
  2603  000F6E  C089  F116         	movff	?___ftmul,sortBattery@V
  2604  000F72  C08A  F117         	movff	?___ftmul+1,sortBattery@V+1
  2605  000F76  C08B  F118         	movff	?___ftmul+2,sortBattery@V+2
  2606                           
  2607                           ;main.c: 219: if(V > 0.1)pos_v_counter++;
  2608  000F7A  0ECD               	movlw	205
  2609  000F7C  6E2F               	movwf	___ftge@ff1,c
  2610  000F7E  0ECC               	movlw	204
  2611  000F80  6E30               	movwf	___ftge@ff1+1,c
  2612  000F82  0E3D               	movlw	61
  2613  000F84  6E31               	movwf	___ftge@ff1+2,c
  2614  000F86  C116  F032         	movff	sortBattery@V,___ftge@ff2
  2615  000F8A  C117  F033         	movff	sortBattery@V+1,___ftge@ff2+1
  2616  000F8E  C118  F034         	movff	sortBattery@V+2,___ftge@ff2+2
  2617  000F92  EC23  F018         	call	___ftge	;wreg free
  2618  000F96  B0D8               	btfsc	status,0,c
  2619  000F98  D003               	goto	l6884
  2620  000F9A  0101               	movlb	1	; () banked
  2621  000F9C  4B05               	infsnz	sortBattery@pos_v_counter& (0+255),f,b
  2622  000F9E  2B06               	incf	(sortBattery@pos_v_counter+1)& (0+255),f,b
  2623  000FA0                     l6884:
  2624                           
  2625                           ;main.c: 221: if(V > V_max) {
  2626  000FA0  C10F  F02F         	movff	sortBattery@V_max,___ftge@ff1
  2627  000FA4  C110  F030         	movff	sortBattery@V_max+1,___ftge@ff1+1
  2628  000FA8  C111  F031         	movff	sortBattery@V_max+2,___ftge@ff1+2
  2629  000FAC  C116  F032         	movff	sortBattery@V,___ftge@ff2
  2630  000FB0  C117  F033         	movff	sortBattery@V+1,___ftge@ff2+1
  2631  000FB4  C118  F034         	movff	sortBattery@V+2,___ftge@ff2+2
  2632  000FB8  EC23  F018         	call	___ftge	;wreg free
  2633  000FBC  B0D8               	btfsc	status,0,c
  2634  000FBE  D064               	goto	l6894
  2635                           
  2636                           ;main.c: 222: signal = digitalRead(padPin1)<<1;
  2637  000FC0  0E4E               	movlw	low _padPin1
  2638  000FC2  6E23               	movwf	digitalRead@pin,c
  2639  000FC4  0E00               	movlw	high _padPin1
  2640  000FC6  6E24               	movwf	digitalRead@pin+1,c
  2641  000FC8  EC85  F014         	call	_digitalRead	;wreg free
  2642  000FCC  90D8               	bcf	status,0,c
  2643  000FCE  3423               	rlcf	?_digitalRead,w,c
  2644  000FD0  0101               	movlb	1	; () banked
  2645  000FD2  6F07               	movwf	sortBattery@signal& (0+255),b
  2646  000FD4  3424               	rlcf	?_digitalRead+1,w,c
  2647  000FD6  0101               	movlb	1	; () banked
  2648  000FD8  6F08               	movwf	(sortBattery@signal+1)& (0+255),b
  2649                           
  2650                           ;main.c: 223: signal |= digitalRead(padPin2)<<0;
  2651  000FDA  0E6A               	movlw	low _padPin2
  2652  000FDC  6E23               	movwf	digitalRead@pin,c
  2653  000FDE  0E01               	movlw	high _padPin2
  2654  000FE0  6E24               	movwf	digitalRead@pin+1,c
  2655  000FE2  EC85  F014         	call	_digitalRead	;wreg free
  2656  000FE6  5023               	movf	?_digitalRead,w,c
  2657  000FE8  0101               	movlb	1	; () banked
  2658  000FEA  1307               	iorwf	sortBattery@signal& (0+255),f,b
  2659  000FEC  5024               	movf	?_digitalRead+1,w,c
  2660  000FEE  0101               	movlb	1	; () banked
  2661  000FF0  1308               	iorwf	(sortBattery@signal+1)& (0+255),f,b
  2662                           
  2663                           ; BSR set to: 1
  2664                           ;main.c: 225: V_max = V;
  2665  000FF2  C116  F10F         	movff	sortBattery@V,sortBattery@V_max
  2666  000FF6  C117  F110         	movff	sortBattery@V+1,sortBattery@V_max+1
  2667  000FFA  C118  F111         	movff	sortBattery@V+2,sortBattery@V_max+2
  2668                           
  2669                           ;main.c: 228: digitalWrite(AA_float, 0);
  2670  000FFE  0E4A               	movlw	low _AA_float
  2671  001000  6E23               	movwf	digitalWrite@pin,c
  2672  001002  0E00               	movlw	high _AA_float
  2673  001004  6E24               	movwf	digitalWrite@pin+1,c
  2674  001006  0E00               	movlw	0
  2675  001008  6E26               	movwf	digitalWrite@val+1,c
  2676  00100A  0E00               	movlw	0
  2677  00100C  6E25               	movwf	digitalWrite@val,c
  2678  00100E  ECAE  F016         	call	_digitalWrite	;wreg free
  2679                           
  2680                           ;main.c: 229: _delay((unsigned long)((1)*(10000000/4000.0)));
  2681  001012  0E04               	movlw	4
  2682  001014  0100               	movlb	0	; () banked
  2683  001016  6FEB               	movwf	??_sortBattery& (0+255),b
  2684  001018  0E3D               	movlw	61
  2685  00101A                     u7657:
  2686  00101A  2EE8               	decfsz	wreg,f,c
  2687  00101C  D7FE               	bra	u7657
  2688  00101E  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  2689  001020  D7FC               	bra	u7657
  2690  001022  D000               	nop2	
  2691                           
  2692                           ;main.c: 230: V_float = analogRead(padPin3[1]) / resolution * Vcc;
  2693  001024  C10C  F038         	movff	sortBattery@resolution,___ftdiv@f2
  2694  001028  C10D  F039         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2695  00102C  C10E  F03A         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2696  001030  C054  F023         	movff	_padPin3+2,analogRead@channel
  2697  001034  C055  F024         	movff	_padPin3+3,analogRead@channel+1
  2698  001038  EC4E  F01B         	call	_analogRead	;wreg free
  2699  00103C  C023  F02B         	movff	?_analogRead,___altoft@c
  2700  001040  C024  F02C         	movff	?_analogRead+1,___altoft@c+1
  2701  001044  C025  F02D         	movff	?_analogRead+2,___altoft@c+2
  2702  001048  C026  F02E         	movff	?_analogRead+3,___altoft@c+3
  2703  00104C  EC34  F019         	call	___altoft	;wreg free
  2704  001050  C02B  F035         	movff	?___altoft,___ftdiv@f1
  2705  001054  C02C  F036         	movff	?___altoft+1,___ftdiv@f1+1
  2706  001058  C02D  F037         	movff	?___altoft+2,___ftdiv@f1+2
  2707  00105C  ECF5  F012         	call	___ftdiv	;wreg free
  2708  001060  C035  F089         	movff	?___ftdiv,___ftmul@f1
  2709  001064  C036  F08A         	movff	?___ftdiv+1,___ftmul@f1+1
  2710  001068  C037  F08B         	movff	?___ftdiv+2,___ftmul@f1+2
  2711  00106C  C109  F08C         	movff	sortBattery@Vcc,___ftmul@f2
  2712  001070  C10A  F08D         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2713  001074  C10B  F08E         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2714  001078  ECCB  F00F         	call	___ftmul	;wreg free
  2715  00107C  C089  F102         	movff	?___ftmul,sortBattery@V_float
  2716  001080  C08A  F103         	movff	?___ftmul+1,sortBattery@V_float+1
  2717  001084  C08B  F104         	movff	?___ftmul+2,sortBattery@V_float+2
  2718  001088                     l6894:
  2719  001088  C119  F0AE         	movff	sortBattery@i,___ftsub@f1
  2720  00108C  C11A  F0AF         	movff	sortBattery@i+1,___ftsub@f1+1
  2721  001090  C11B  F0B0         	movff	sortBattery@i+2,___ftsub@f1+2
  2722  001094  0ECD               	movlw	205
  2723  001096  0100               	movlb	0	; () banked
  2724  001098  6FB1               	movwf	___ftsub@f2& (0+255),b
  2725  00109A  0ECC               	movlw	204
  2726  00109C  0100               	movlb	0	; () banked
  2727  00109E  6FB2               	movwf	(___ftsub@f2+1)& (0+255),b
  2728  0010A0  0E3D               	movlw	61
  2729  0010A2  0100               	movlb	0	; () banked
  2730  0010A4  6FB3               	movwf	(___ftsub@f2+2)& (0+255),b
  2731  0010A6  EC74  F01A         	call	___ftsub	;wreg free
  2732  0010AA  C0AE  F119         	movff	?___ftsub,sortBattery@i
  2733  0010AE  C0AF  F11A         	movff	?___ftsub+1,sortBattery@i+1
  2734  0010B2  C0B0  F11B         	movff	?___ftsub+2,sortBattery@i+2
  2735  0010B6                     l6896:
  2736  0010B6  C0ED  F02B         	movff	_padAngle_CLOSE,___awtoft@c
  2737  0010BA  C0EE  F02C         	movff	_padAngle_CLOSE+1,___awtoft@c+1
  2738  0010BE  EC6A  F01B         	call	___awtoft	;wreg free
  2739  0010C2  C02B  F02F         	movff	?___awtoft,___ftge@ff1
  2740  0010C6  C02C  F030         	movff	?___awtoft+1,___ftge@ff1+1
  2741  0010CA  C02D  F031         	movff	?___awtoft+2,___ftge@ff1+2
  2742  0010CE  C119  F032         	movff	sortBattery@i,___ftge@ff2
  2743  0010D2  C11A  F033         	movff	sortBattery@i+1,___ftge@ff2+1
  2744  0010D6  C11B  F034         	movff	sortBattery@i+2,___ftge@ff2+2
  2745  0010DA  EC23  F018         	call	___ftge	;wreg free
  2746  0010DE  A0D8               	btfss	status,0,c
  2747  0010E0  D6F4               	goto	l6870
  2748                           
  2749                           ;main.c: 232: }
  2750                           ;main.c: 233: }
  2751                           ;main.c: 235: int targetAngle;
  2752                           ;main.c: 236: float V = V_max;
  2753  0010E2  C10F  F11C         	movff	sortBattery@V_max,sortBattery@V_220
  2754  0010E6  C110  F11D         	movff	sortBattery@V_max+1,sortBattery@V_220+1
  2755  0010EA  C111  F11E         	movff	sortBattery@V_max+2,sortBattery@V_220+2
  2756                           
  2757                           ;main.c: 238: lcdClear();
  2758  0010EE  EC86  F01C         	call	_lcdClear	;wreg free
  2759                           
  2760                           ;main.c: 239: printf("N: %d,\nV: %.3f",pos_v_counter, V);
  2761  0010F2  0ED1               	movlw	low STR_5
  2762  0010F4  0100               	movlb	0	; () banked
  2763  0010F6  6FBD               	movwf	printf@f& (0+255),b
  2764  0010F8  0EFF               	movlw	high STR_5
  2765  0010FA  0100               	movlb	0	; () banked
  2766  0010FC  6FBE               	movwf	(printf@f+1)& (0+255),b
  2767  0010FE  C105  F0BF         	movff	sortBattery@pos_v_counter,?_printf+2
  2768  001102  C106  F0C0         	movff	sortBattery@pos_v_counter+1,?_printf+3
  2769  001106  C11C  F0C1         	movff	sortBattery@V_220,?_printf+4
  2770  00110A  C11D  F0C2         	movff	sortBattery@V_220+1,?_printf+5
  2771  00110E  C11E  F0C3         	movff	sortBattery@V_220+2,?_printf+6
  2772  001112  EC09  F000         	call	_printf	;wreg free
  2773                           
  2774                           ;main.c: 241: readKeypad();
  2775  001116  ECD8  F01B         	call	_readKeypad	;wreg free
  2776                           
  2777                           ;main.c: 245: switch(signal){
  2778  00111A  D060               	goto	l6932
  2779  00111C                     l6904:
  2780                           
  2781                           ;main.c: 247: if(V_float < 0.1){
  2782  00111C  C102  F02F         	movff	sortBattery@V_float,___ftge@ff1
  2783  001120  C103  F030         	movff	sortBattery@V_float+1,___ftge@ff1+1
  2784  001124  C104  F031         	movff	sortBattery@V_float+2,___ftge@ff1+2
  2785  001128  0ECD               	movlw	205
  2786  00112A  6E32               	movwf	___ftge@ff2,c
  2787  00112C  0ECC               	movlw	204
  2788  00112E  6E33               	movwf	___ftge@ff2+1,c
  2789  001130  0E3D               	movlw	61
  2790  001132  6E34               	movwf	___ftge@ff2+2,c
  2791  001134  EC23  F018         	call	___ftge	;wreg free
  2792  001138  B0D8               	btfsc	status,0,c
  2793  00113A  D018               	goto	l6914
  2794                           
  2795                           ;main.c: 248: if(V > V_LIM_AA){ targetAngle = redirectAngle_AA; n_AA+=1;}
  2796  00113C  C03E  F02F         	movff	_V_LIM_AA,___ftge@ff1
  2797  001140  C03F  F030         	movff	_V_LIM_AA+1,___ftge@ff1+1
  2798  001144  C040  F031         	movff	_V_LIM_AA+2,___ftge@ff1+2
  2799  001148  C11C  F032         	movff	sortBattery@V_220,___ftge@ff2
  2800  00114C  C11D  F033         	movff	sortBattery@V_220+1,___ftge@ff2+1
  2801  001150  C11E  F034         	movff	sortBattery@V_220+2,___ftge@ff2+2
  2802  001154  EC23  F018         	call	___ftge	;wreg free
  2803  001158  B0D8               	btfsc	status,0,c
  2804  00115A  D038               	goto	l174
  2805  00115C  C15A  F114         	movff	_redirectAngle_AA,sortBattery@targetAngle
  2806  001160  C15B  F115         	movff	_redirectAngle_AA+1,sortBattery@targetAngle+1
  2807  001164  0101               	movlb	1	; () banked
  2808  001166  4B50               	infsnz	_n_AA& (0+255),f,b
  2809  001168  2B51               	incf	(_n_AA+1)& (0+255),f,b
  2810  00116A  D04C               	goto	l6934
  2811  00116C                     l6914:
  2812                           
  2813                           ;main.c: 254: if(V > V_LIM_9V) {targetAngle = redirectAngle_9V; n_9V+=1;}
  2814  00116C  C03B  F02F         	movff	_V_LIM_9V,___ftge@ff1
  2815  001170  C03C  F030         	movff	_V_LIM_9V+1,___ftge@ff1+1
  2816  001174  C03D  F031         	movff	_V_LIM_9V+2,___ftge@ff1+2
  2817  001178  C11C  F032         	movff	sortBattery@V_220,___ftge@ff2
  2818  00117C  C11D  F033         	movff	sortBattery@V_220+1,___ftge@ff2+1
  2819  001180  C11E  F034         	movff	sortBattery@V_220+2,___ftge@ff2+2
  2820  001184  EC23  F018         	call	___ftge	;wreg free
  2821  001188  B0D8               	btfsc	status,0,c
  2822  00118A  D020               	goto	l174
  2823  00118C  C048  F114         	movff	_redirectAngle_9V,sortBattery@targetAngle
  2824  001190  C049  F115         	movff	_redirectAngle_9V+1,sortBattery@targetAngle+1
  2825  001194  0101               	movlb	1	; () banked
  2826  001196  4B4E               	infsnz	_n_9V& (0+255),f,b
  2827  001198  2B4F               	incf	(_n_9V+1)& (0+255),f,b
  2828  00119A  D034               	goto	l6934
  2829  00119C                     l6922:
  2830                           
  2831                           ;main.c: 258: if(V > V_LIM_C) {targetAngle = redirectAngle_C; n_C+=1;}
  2832  00119C  C041  F02F         	movff	_V_LIM_C,___ftge@ff1
  2833  0011A0  C042  F030         	movff	_V_LIM_C+1,___ftge@ff1+1
  2834  0011A4  C043  F031         	movff	_V_LIM_C+2,___ftge@ff1+2
  2835  0011A8  C11C  F032         	movff	sortBattery@V_220,___ftge@ff2
  2836  0011AC  C11D  F033         	movff	sortBattery@V_220+1,___ftge@ff2+1
  2837  0011B0  C11E  F034         	movff	sortBattery@V_220+2,___ftge@ff2+2
  2838  0011B4  EC23  F018         	call	___ftge	;wreg free
  2839  0011B8  B0D8               	btfsc	status,0,c
  2840  0011BA  D008               	goto	l174
  2841  0011BC  C0EF  F114         	movff	_redirectAngle_C,sortBattery@targetAngle
  2842  0011C0  C0F0  F115         	movff	_redirectAngle_C+1,sortBattery@targetAngle+1
  2843  0011C4  0101               	movlb	1	; () banked
  2844  0011C6  4B52               	infsnz	_n_C& (0+255),f,b
  2845  0011C8  2B53               	incf	(_n_C+1)& (0+255),f,b
  2846  0011CA  D01C               	goto	l6934
  2847  0011CC                     l174:
  2848                           
  2849                           ;main.c: 259: else {targetAngle = redirectAngle_OTHER; n_OTHER+=1;}
  2850  0011CC  C0F1  F114         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  2851  0011D0  C0F2  F115         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  2852  0011D4  0101               	movlb	1	; () banked
  2853  0011D6  4B54               	infsnz	_n_OTHER& (0+255),f,b
  2854  0011D8  2B55               	incf	(_n_OTHER+1)& (0+255),f,b
  2855                           
  2856                           ; BSR set to: 1
  2857                           ;main.c: 261: }
  2858                           
  2859                           ; BSR set to: 1
  2860                           ;main.c: 260: break;
  2861  0011DA  D014               	goto	l6934
  2862  0011DC                     l6932:
  2863  0011DC  C107  F0EB         	movff	sortBattery@signal,??_sortBattery
  2864  0011E0  C108  F0EC         	movff	sortBattery@signal+1,??_sortBattery+1
  2865                           
  2866                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2867                           ; Switch size 1, requested type "space"
  2868                           ; Number of cases is 1, Range of values is 0 to 0
  2869                           ; switch strategies available:
  2870                           ; Name         Instructions Cycles
  2871                           ; simple_byte            4     3 (average)
  2872                           ;	Chosen strategy is simple_byte
  2873  0011E4  0100               	movlb	0	; () banked
  2874  0011E6  51EC               	movf	(??_sortBattery+1)& (0+255),w,b
  2875  0011E8  0A00               	xorlw	0	; case 0
  2876  0011EA  A4D8               	btfss	status,2,c
  2877  0011EC  D00B               	goto	l6934
  2878                           
  2879                           ; BSR set to: 0
  2880                           ; Switch size 1, requested type "space"
  2881                           ; Number of cases is 3, Range of values is 0 to 2
  2882                           ; switch strategies available:
  2883                           ; Name         Instructions Cycles
  2884                           ; simple_byte           10     6 (average)
  2885                           ;	Chosen strategy is simple_byte
  2886  0011EE  0100               	movlb	0	; () banked
  2887  0011F0  51EB               	movf	??_sortBattery& (0+255),w,b
  2888  0011F2  0A00               	xorlw	0	; case 0
  2889  0011F4  B4D8               	btfsc	status,2,c
  2890  0011F6  D792               	goto	l6904
  2891  0011F8  0A01               	xorlw	1	; case 1
  2892  0011FA  B4D8               	btfsc	status,2,c
  2893  0011FC  D7CF               	goto	l6922
  2894  0011FE  0A03               	xorlw	3	; case 2
  2895  001200  B4D8               	btfsc	status,2,c
  2896  001202  D7B4               	goto	l6914
  2897  001204                     l6934:
  2898                           
  2899                           ;main.c: 263: setAngle(redirectingServo, targetAngle);
  2900  001204  0E72               	movlw	low _redirectingServo
  2901  001206  0100               	movlb	0	; () banked
  2902  001208  6FD4               	movwf	setAngle@motor& (0+255),b
  2903  00120A  0E01               	movlw	high _redirectingServo
  2904  00120C  0100               	movlb	0	; () banked
  2905  00120E  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2906  001210  C114  F0D6         	movff	sortBattery@targetAngle,setAngle@angle
  2907  001214  C115  F0D7         	movff	sortBattery@targetAngle+1,setAngle@angle+1
  2908  001218  ECDE  F015         	call	_setAngle	;wreg free
  2909                           
  2910                           ;main.c: 264: _delay((unsigned long)((500)*(10000000/4000.0)));
  2911  00121C  0E07               	movlw	7
  2912  00121E  0100               	movlb	0	; () banked
  2913  001220  6FEC               	movwf	(??_sortBattery+1)& (0+255),b
  2914  001222  0E58               	movlw	88
  2915  001224  0100               	movlb	0	; () banked
  2916  001226  6FEB               	movwf	??_sortBattery& (0+255),b
  2917  001228  0E59               	movlw	89
  2918  00122A                     u7667:
  2919  00122A  2EE8               	decfsz	wreg,f,c
  2920  00122C  D7FE               	bra	u7667
  2921  00122E  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  2922  001230  D7FC               	bra	u7667
  2923  001232  2FEC               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2924  001234  D7FA               	bra	u7667
  2925  001236  D000               	nop2	
  2926                           
  2927                           ;main.c: 268: for(int i = padAngle_CLOSE; i < padAngle_OPEN; i++) {
  2928  001238  C0ED  F112         	movff	_padAngle_CLOSE,sortBattery@i_222
  2929  00123C  C0EE  F113         	movff	_padAngle_CLOSE+1,sortBattery@i_222+1
  2930  001240  D018               	goto	l6946
  2931  001242                     l6940:
  2932                           
  2933                           ;main.c: 269: setAngle(padServo, i);
  2934  001242  0E6E               	movlw	low _padServo
  2935  001244  0100               	movlb	0	; () banked
  2936  001246  6FD4               	movwf	setAngle@motor& (0+255),b
  2937  001248  0E01               	movlw	high _padServo
  2938  00124A  0100               	movlb	0	; () banked
  2939  00124C  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2940  00124E  C112  F0D6         	movff	sortBattery@i_222,setAngle@angle
  2941  001252  C113  F0D7         	movff	sortBattery@i_222+1,setAngle@angle+1
  2942  001256  ECDE  F015         	call	_setAngle	;wreg free
  2943                           
  2944                           ;main.c: 270: _delay((unsigned long)((3)*(10000000/4000.0)));
  2945  00125A  0E0A               	movlw	10
  2946  00125C  0100               	movlb	0	; () banked
  2947  00125E  6FEB               	movwf	??_sortBattery& (0+255),b
  2948  001260  0EBC               	movlw	188
  2949  001262                     u7677:
  2950  001262  2EE8               	decfsz	wreg,f,c
  2951  001264  D7FE               	bra	u7677
  2952  001266  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  2953  001268  D7FC               	bra	u7677
  2954  00126A  F000               	nop	
  2955  00126C  0101               	movlb	1	; () banked
  2956  00126E  4B12               	infsnz	sortBattery@i_222& (0+255),f,b
  2957  001270  2B13               	incf	(sortBattery@i_222+1)& (0+255),f,b
  2958  001272                     l6946:
  2959  001272  5046               	movf	_padAngle_OPEN,w,c
  2960  001274  0101               	movlb	1	; () banked
  2961  001276  5D12               	subwf	sortBattery@i_222& (0+255),w,b
  2962  001278  0101               	movlb	1	; () banked
  2963  00127A  5113               	movf	(sortBattery@i_222+1)& (0+255),w,b
  2964  00127C  0A80               	xorlw	128
  2965  00127E  0100               	movlb	0	; () banked
  2966  001280  6FEB               	movwf	??_sortBattery& (0+255),b
  2967  001282  5047               	movf	_padAngle_OPEN+1,w,c
  2968  001284  0A80               	xorlw	128
  2969  001286  0100               	movlb	0	; () banked
  2970  001288  59EB               	subwfb	??_sortBattery& (0+255),w,b
  2971  00128A  A0D8               	btfss	status,0,c
  2972  00128C  D7DA               	goto	l6940
  2973                           
  2974                           ; BSR set to: 0
  2975                           ;main.c: 271: }
  2976                           ;main.c: 273: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2977                           
  2978                           ; BSR set to: 0
  2979  00128E  0E0D               	movlw	13
  2980  001290  0100               	movlb	0	; () banked
  2981  001292  6FEC               	movwf	(??_sortBattery+1)& (0+255),b
  2982  001294  0EAF               	movlw	175
  2983  001296  0100               	movlb	0	; () banked
  2984  001298  6FEB               	movwf	??_sortBattery& (0+255),b
  2985  00129A  0EB6               	movlw	182
  2986  00129C                     u7687:
  2987  00129C  2EE8               	decfsz	wreg,f,c
  2988  00129E  D7FE               	bra	u7687
  2989  0012A0  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  2990  0012A2  D7FC               	bra	u7687
  2991  0012A4  2FEC               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2992  0012A6  D7FA               	bra	u7687
  2993  0012A8  F000               	nop	
  2994                           
  2995                           ;main.c: 277: setAngle(padServo, padAngle_NEUTRAL);
  2996  0012AA  0E6E               	movlw	low _padServo
  2997  0012AC  0100               	movlb	0	; () banked
  2998  0012AE  6FD4               	movwf	setAngle@motor& (0+255),b
  2999  0012B0  0E01               	movlw	high _padServo
  3000  0012B2  0100               	movlb	0	; () banked
  3001  0012B4  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  3002  0012B6  C158  F0D6         	movff	_padAngle_NEUTRAL,setAngle@angle
  3003  0012BA  C159  F0D7         	movff	_padAngle_NEUTRAL+1,setAngle@angle+1
  3004  0012BE  ECDE  F015         	call	_setAngle	;wreg free
  3005                           
  3006                           ;main.c: 281: setAngle(conveyorServo, 130);
  3007  0012C2  0E5E               	movlw	low _conveyorServo
  3008  0012C4  0100               	movlb	0	; () banked
  3009  0012C6  6FD4               	movwf	setAngle@motor& (0+255),b
  3010  0012C8  0E01               	movlw	high _conveyorServo
  3011  0012CA  0100               	movlb	0	; () banked
  3012  0012CC  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  3013  0012CE  0E00               	movlw	0
  3014  0012D0  0100               	movlb	0	; () banked
  3015  0012D2  6FD7               	movwf	(setAngle@angle+1)& (0+255),b
  3016  0012D4  0E82               	movlw	130
  3017  0012D6  6FD6               	movwf	setAngle@angle& (0+255),b
  3018  0012D8  ECDE  F015         	call	_setAngle	;wreg free
  3019                           
  3020                           ;main.c: 282: digitalWrite(cylinderMotor, 1);
  3021  0012DC  0E66               	movlw	low _cylinderMotor
  3022  0012DE  6E23               	movwf	digitalWrite@pin,c
  3023  0012E0  0E01               	movlw	high _cylinderMotor
  3024  0012E2  6E24               	movwf	digitalWrite@pin+1,c
  3025  0012E4  0E00               	movlw	0
  3026  0012E6  6E26               	movwf	digitalWrite@val+1,c
  3027  0012E8  0E01               	movlw	1
  3028  0012EA  6E25               	movwf	digitalWrite@val,c
  3029  0012EC  ECAE  F016         	call	_digitalWrite	;wreg free
  3030  0012F0  0012               	return		;funcret
  3031  0012F2                     __end_of_sortBattery:
  3032                           	opt stack 0
  3033                           tblptru	equ	0xFF8
  3034                           tblptrh	equ	0xFF7
  3035                           tblptrl	equ	0xFF6
  3036                           tablat	equ	0xFF5
  3037                           postinc0	equ	0xFEE
  3038                           wreg	equ	0xFE8
  3039                           postdec1	equ	0xFE5
  3040                           fsr1l	equ	0xFE1
  3041                           status	equ	0xFD8
  3042                           
  3043 ;; *************** function _digitalWrite *****************
  3044 ;; Defined at:
  3045 ;;		line 53 in file "iopin.c"
  3046 ;; Parameters:    Size  Location     Type
  3047 ;;  pin             2   34[COMRAM] PTR int 
  3048 ;;		 -> AA_float(4), cylinderDir(4), redirectingServo(4), conveyorServo(4), 
  3049 ;;		 -> cylinderMotor(4), padServo(4), 
  3050 ;;  val             2   36[COMRAM] int 
  3051 ;; Auto vars:     Size  Location     Type
  3052 ;;  p               2   41[COMRAM] int 
  3053 ;; Return value:  Size  Location     Type
  3054 ;;                  1    wreg      void 
  3055 ;; Registers used:
  3056 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3057 ;; Tracked objects:
  3058 ;;		On entry : 0/0
  3059 ;;		On exit  : 0/0
  3060 ;;		Unchanged: 0/0
  3061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3062 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3063 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3064 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3065 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3066 ;;Total ram usage:        9 bytes
  3067 ;; Hardware stack levels used:    1
  3068 ;; Hardware stack levels required when called:    3
  3069 ;; This function calls:
  3070 ;;		Nothing
  3071 ;; This function is called by:
  3072 ;;		_main
  3073 ;;		_sortBattery
  3074 ;; This function uses a non-reentrant model
  3075 ;;
  3076                           
  3077                           	psect	text2
  3078  002D5C                     __ptext2:
  3079                           	opt stack 0
  3080  002D5C                     _digitalWrite:
  3081                           	opt stack 26
  3082                           
  3083                           ;iopin.c: 54: if(pin){
  3084                           
  3085                           ;incstack = 0
  3086  002D5C  5023               	movf	digitalWrite@pin,w,c
  3087  002D5E  1024               	iorwf	digitalWrite@pin+1,w,c
  3088  002D60  B4D8               	btfsc	status,2,c
  3089  002D62  0012               	return	
  3090                           
  3091                           ;iopin.c: 55: int p = 1 << pin[1];
  3092  002D64  EE20 F002          	lfsr	2,2
  3093  002D68  5023               	movf	digitalWrite@pin,w,c
  3094  002D6A  26D9               	addwf	fsr2l,f,c
  3095  002D6C  5024               	movf	digitalWrite@pin+1,w,c
  3096  002D6E  22DA               	addwfc	fsr2h,f,c
  3097  002D70  50DF               	movf	indf2,w,c
  3098  002D72  6E27               	movwf	??_digitalWrite& (0+255),c
  3099  002D74  0E01               	movlw	1
  3100  002D76  6E28               	movwf	(??_digitalWrite+1)& (0+255),c
  3101  002D78  0E00               	movlw	0
  3102  002D7A  6E29               	movwf	(??_digitalWrite+2)& (0+255),c
  3103  002D7C  2A27               	incf	??_digitalWrite,f,c
  3104  002D7E  D003               	goto	u7084
  3105  002D80                     u7085:
  3106  002D80  90D8               	bcf	status,0,c
  3107  002D82  3628               	rlcf	??_digitalWrite+1,f,c
  3108  002D84  3629               	rlcf	??_digitalWrite+2,f,c
  3109  002D86                     u7084:
  3110  002D86  2E27               	decfsz	??_digitalWrite,f,c
  3111  002D88  D7FB               	goto	u7085
  3112  002D8A  C028  F02A         	movff	??_digitalWrite+1,digitalWrite@p
  3113  002D8E  C029  F02B         	movff	??_digitalWrite+2,digitalWrite@p+1
  3114                           
  3115                           ;iopin.c: 56: if(val == 0){
  3116  002D92  5025               	movf	digitalWrite@val,w,c
  3117  002D94  1026               	iorwf	digitalWrite@val+1,w,c
  3118  002D96  A4D8               	btfss	status,2,c
  3119  002D98  D02B               	goto	l6656
  3120                           
  3121                           ;iopin.c: 57: p ^= 0xff;
  3122  002D9A  0EFF               	movlw	255
  3123  002D9C  1A2A               	xorwf	digitalWrite@p,f,c
  3124                           
  3125                           ;iopin.c: 58: }
  3126                           ;iopin.c: 60: switch(pin[0]){
  3127  002D9E  D028               	goto	l6656
  3128  002DA0                     l6632:
  3129  002DA0  0425               	decf	digitalWrite@val,w,c
  3130  002DA2  1026               	iorwf	digitalWrite@val+1,w,c
  3131  002DA4  A4D8               	btfss	status,2,c
  3132  002DA6  D003               	goto	l6636
  3133  002DA8  502A               	movf	digitalWrite@p,w,c
  3134  002DAA  1289               	iorwf	3977,f,c	;volatile
  3135  002DAC  0012               	return	
  3136  002DAE                     l6636:
  3137                           
  3138                           ;iopin.c: 62: else LATA &= p;
  3139  002DAE  502A               	movf	digitalWrite@p,w,c
  3140  002DB0  1689               	andwf	3977,f,c	;volatile
  3141                           
  3142                           ;iopin.c: 63: break;
  3143  002DB2  0012               	return	
  3144  002DB4                     l6638:
  3145  002DB4  0425               	decf	digitalWrite@val,w,c
  3146  002DB6  1026               	iorwf	digitalWrite@val+1,w,c
  3147  002DB8  A4D8               	btfss	status,2,c
  3148  002DBA  D003               	goto	l6642
  3149  002DBC  502A               	movf	digitalWrite@p,w,c
  3150  002DBE  128A               	iorwf	3978,f,c	;volatile
  3151  002DC0  0012               	return	
  3152  002DC2                     l6642:
  3153                           
  3154                           ;iopin.c: 65: else LATB &= p;
  3155  002DC2  502A               	movf	digitalWrite@p,w,c
  3156  002DC4  168A               	andwf	3978,f,c	;volatile
  3157                           
  3158                           ;iopin.c: 66: break;
  3159  002DC6  0012               	return	
  3160  002DC8                     l6644:
  3161  002DC8  0425               	decf	digitalWrite@val,w,c
  3162  002DCA  1026               	iorwf	digitalWrite@val+1,w,c
  3163  002DCC  A4D8               	btfss	status,2,c
  3164  002DCE  D003               	goto	l6648
  3165  002DD0  502A               	movf	digitalWrite@p,w,c
  3166  002DD2  128B               	iorwf	3979,f,c	;volatile
  3167  002DD4  0012               	return	
  3168  002DD6                     l6648:
  3169                           
  3170                           ;iopin.c: 68: else LATC &= p;
  3171  002DD6  502A               	movf	digitalWrite@p,w,c
  3172  002DD8  168B               	andwf	3979,f,c	;volatile
  3173                           
  3174                           ;iopin.c: 69: break;
  3175  002DDA  0012               	return	
  3176  002DDC                     l6650:
  3177  002DDC  0425               	decf	digitalWrite@val,w,c
  3178  002DDE  1026               	iorwf	digitalWrite@val+1,w,c
  3179  002DE0  A4D8               	btfss	status,2,c
  3180  002DE2  D003               	goto	l6654
  3181  002DE4  502A               	movf	digitalWrite@p,w,c
  3182  002DE6  128C               	iorwf	3980,f,c	;volatile
  3183  002DE8  0012               	return	
  3184  002DEA                     l6654:
  3185                           
  3186                           ;iopin.c: 71: else LATD &= p;
  3187  002DEA  502A               	movf	digitalWrite@p,w,c
  3188  002DEC  168C               	andwf	3980,f,c	;volatile
  3189                           
  3190                           ;iopin.c: 72: }
  3191  002DEE  0012               	return	
  3192  002DF0                     l6656:
  3193  002DF0  C023  FFD9         	movff	digitalWrite@pin,fsr2l
  3194  002DF4  C024  FFDA         	movff	digitalWrite@pin+1,fsr2h
  3195  002DF8  CFDE F027          	movff	postinc2,??_digitalWrite
  3196  002DFC  CFDD F028          	movff	postdec2,??_digitalWrite+1
  3197                           
  3198                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3199                           ; Switch size 1, requested type "space"
  3200                           ; Number of cases is 1, Range of values is 0 to 0
  3201                           ; switch strategies available:
  3202                           ; Name         Instructions Cycles
  3203                           ; simple_byte            4     3 (average)
  3204                           ;	Chosen strategy is simple_byte
  3205  002E00  5028               	movf	??_digitalWrite+1,w,c
  3206  002E02  0A00               	xorlw	0	; case 0
  3207  002E04  A4D8               	btfss	status,2,c
  3208  002E06  0012               	return	
  3209                           
  3210                           ; Switch size 1, requested type "space"
  3211                           ; Number of cases is 4, Range of values is 0 to 3
  3212                           ; switch strategies available:
  3213                           ; Name         Instructions Cycles
  3214                           ; simple_byte           13     7 (average)
  3215                           ;	Chosen strategy is simple_byte
  3216  002E08  5027               	movf	??_digitalWrite,w,c
  3217  002E0A  0A00               	xorlw	0	; case 0
  3218  002E0C  B4D8               	btfsc	status,2,c
  3219  002E0E  D7C8               	goto	l6632
  3220  002E10  0A01               	xorlw	1	; case 1
  3221  002E12  B4D8               	btfsc	status,2,c
  3222  002E14  D7CF               	goto	l6638
  3223  002E16  0A03               	xorlw	3	; case 2
  3224  002E18  B4D8               	btfsc	status,2,c
  3225  002E1A  D7D6               	goto	l6644
  3226  002E1C  0A01               	xorlw	1	; case 3
  3227  002E1E  A4D8               	btfss	status,2,c
  3228  002E20  0012               	return	
  3229  002E22  D7DC               	goto	l6650
  3230  002E24                     __end_of_digitalWrite:
  3231                           	opt stack 0
  3232                           tblptru	equ	0xFF8
  3233                           tblptrh	equ	0xFF7
  3234                           tblptrl	equ	0xFF6
  3235                           tablat	equ	0xFF5
  3236                           postinc0	equ	0xFEE
  3237                           wreg	equ	0xFE8
  3238                           postdec1	equ	0xFE5
  3239                           fsr1l	equ	0xFE1
  3240                           indf2	equ	0xFDF
  3241                           postinc2	equ	0xFDE
  3242                           postdec2	equ	0xFDD
  3243                           fsr2h	equ	0xFDA
  3244                           fsr2l	equ	0xFD9
  3245                           status	equ	0xFD8
  3246                           
  3247 ;; *************** function _digitalRead *****************
  3248 ;; Defined at:
  3249 ;;		line 43 in file "iopin.c"
  3250 ;; Parameters:    Size  Location     Type
  3251 ;;  pin             2   34[COMRAM] PTR int 
  3252 ;;		 -> padPin2(4), padPin1(4), cylinderDir(4), 
  3253 ;; Auto vars:     Size  Location     Type
  3254 ;;		None
  3255 ;; Return value:  Size  Location     Type
  3256 ;;                  2   34[COMRAM] int 
  3257 ;; Registers used:
  3258 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3259 ;; Tracked objects:
  3260 ;;		On entry : 0/0
  3261 ;;		On exit  : 0/0
  3262 ;;		Unchanged: 0/0
  3263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3264 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3266 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3267 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3268 ;;Total ram usage:        4 bytes
  3269 ;; Hardware stack levels used:    1
  3270 ;; Hardware stack levels required when called:    3
  3271 ;; This function calls:
  3272 ;;		Nothing
  3273 ;; This function is called by:
  3274 ;;		_main
  3275 ;;		_sortBattery
  3276 ;; This function uses a non-reentrant model
  3277 ;;
  3278                           
  3279                           	psect	text3
  3280  00290A                     __ptext3:
  3281                           	opt stack 0
  3282  00290A                     _digitalRead:
  3283                           	opt stack 26
  3284                           
  3285                           ;iopin.c: 44: switch(pin[0]){
  3286                           
  3287                           ;incstack = 0
  3288  00290A  D058               	goto	l6682
  3289  00290C                     l6664:
  3290  00290C  EE20 F002          	lfsr	2,2
  3291  002910  5023               	movf	digitalRead@pin,w,c
  3292  002912  26D9               	addwf	fsr2l,f,c
  3293  002914  5024               	movf	digitalRead@pin+1,w,c
  3294  002916  22DA               	addwfc	fsr2h,f,c
  3295  002918  50DF               	movf	indf2,w,c
  3296  00291A  6E25               	movwf	??_digitalRead& (0+255),c
  3297  00291C  CF80 F026          	movff	3968,??_digitalRead+1	;volatile
  3298  002920  2A25               	incf	??_digitalRead,f,c
  3299  002922  D002               	goto	u7144
  3300  002924                     u7145:
  3301  002924  90D8               	bcf	status,0,c
  3302  002926  3226               	rrcf	??_digitalRead+1,f,c
  3303  002928                     u7144:
  3304  002928  2E25               	decfsz	??_digitalRead,f,c
  3305  00292A  D7FC               	goto	u7145
  3306  00292C  0E01               	movlw	1
  3307  00292E  1626               	andwf	??_digitalRead+1,f,c
  3308  002930  5026               	movf	??_digitalRead+1,w,c
  3309  002932  6E23               	movwf	?_digitalRead,c
  3310  002934  6A24               	clrf	?_digitalRead+1,c
  3311  002936  0012               	return	
  3312  002938                     l6668:
  3313  002938  EE20 F002          	lfsr	2,2
  3314  00293C  5023               	movf	digitalRead@pin,w,c
  3315  00293E  26D9               	addwf	fsr2l,f,c
  3316  002940  5024               	movf	digitalRead@pin+1,w,c
  3317  002942  22DA               	addwfc	fsr2h,f,c
  3318  002944  50DF               	movf	indf2,w,c
  3319  002946  6E25               	movwf	??_digitalRead& (0+255),c
  3320  002948  CF81 F026          	movff	3969,??_digitalRead+1	;volatile
  3321  00294C  2A25               	incf	??_digitalRead,f,c
  3322  00294E  D002               	goto	u7154
  3323  002950                     u7155:
  3324  002950  90D8               	bcf	status,0,c
  3325  002952  3226               	rrcf	??_digitalRead+1,f,c
  3326  002954                     u7154:
  3327  002954  2E25               	decfsz	??_digitalRead,f,c
  3328  002956  D7FC               	goto	u7155
  3329  002958  0E01               	movlw	1
  3330  00295A  1626               	andwf	??_digitalRead+1,f,c
  3331  00295C  5026               	movf	??_digitalRead+1,w,c
  3332  00295E  6E23               	movwf	?_digitalRead,c
  3333  002960  6A24               	clrf	?_digitalRead+1,c
  3334  002962  0012               	return	
  3335  002964                     l6672:
  3336  002964  EE20 F002          	lfsr	2,2
  3337  002968  5023               	movf	digitalRead@pin,w,c
  3338  00296A  26D9               	addwf	fsr2l,f,c
  3339  00296C  5024               	movf	digitalRead@pin+1,w,c
  3340  00296E  22DA               	addwfc	fsr2h,f,c
  3341  002970  50DF               	movf	indf2,w,c
  3342  002972  6E25               	movwf	??_digitalRead& (0+255),c
  3343  002974  CF82 F026          	movff	3970,??_digitalRead+1	;volatile
  3344  002978  2A25               	incf	??_digitalRead,f,c
  3345  00297A  D002               	goto	u7164
  3346  00297C                     u7165:
  3347  00297C  90D8               	bcf	status,0,c
  3348  00297E  3226               	rrcf	??_digitalRead+1,f,c
  3349  002980                     u7164:
  3350  002980  2E25               	decfsz	??_digitalRead,f,c
  3351  002982  D7FC               	goto	u7165
  3352  002984  0E01               	movlw	1
  3353  002986  1626               	andwf	??_digitalRead+1,f,c
  3354  002988  5026               	movf	??_digitalRead+1,w,c
  3355  00298A  6E23               	movwf	?_digitalRead,c
  3356  00298C  6A24               	clrf	?_digitalRead+1,c
  3357  00298E  0012               	return	
  3358  002990                     l6676:
  3359  002990  EE20 F002          	lfsr	2,2
  3360  002994  5023               	movf	digitalRead@pin,w,c
  3361  002996  26D9               	addwf	fsr2l,f,c
  3362  002998  5024               	movf	digitalRead@pin+1,w,c
  3363  00299A  22DA               	addwfc	fsr2h,f,c
  3364  00299C  50DF               	movf	indf2,w,c
  3365  00299E  6E25               	movwf	??_digitalRead& (0+255),c
  3366  0029A0  CF83 F026          	movff	3971,??_digitalRead+1	;volatile
  3367  0029A4  2A25               	incf	??_digitalRead,f,c
  3368  0029A6  D002               	goto	u7174
  3369  0029A8                     u7175:
  3370  0029A8  90D8               	bcf	status,0,c
  3371  0029AA  3226               	rrcf	??_digitalRead+1,f,c
  3372  0029AC                     u7174:
  3373  0029AC  2E25               	decfsz	??_digitalRead,f,c
  3374  0029AE  D7FC               	goto	u7175
  3375  0029B0  0E01               	movlw	1
  3376  0029B2  1626               	andwf	??_digitalRead+1,f,c
  3377  0029B4  5026               	movf	??_digitalRead+1,w,c
  3378  0029B6  6E23               	movwf	?_digitalRead,c
  3379  0029B8  6A24               	clrf	?_digitalRead+1,c
  3380  0029BA  0012               	return	
  3381  0029BC                     l6682:
  3382  0029BC  C023  FFD9         	movff	digitalRead@pin,fsr2l
  3383  0029C0  C024  FFDA         	movff	digitalRead@pin+1,fsr2h
  3384  0029C4  CFDE F025          	movff	postinc2,??_digitalRead
  3385  0029C8  CFDD F026          	movff	postdec2,??_digitalRead+1
  3386                           
  3387                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3388                           ; Switch size 1, requested type "space"
  3389                           ; Number of cases is 1, Range of values is 0 to 0
  3390                           ; switch strategies available:
  3391                           ; Name         Instructions Cycles
  3392                           ; simple_byte            4     3 (average)
  3393                           ;	Chosen strategy is simple_byte
  3394  0029CC  5026               	movf	??_digitalRead+1,w,c
  3395  0029CE  0A00               	xorlw	0	; case 0
  3396  0029D0  A4D8               	btfss	status,2,c
  3397  0029D2  D00D               	goto	l325
  3398                           
  3399                           ; Switch size 1, requested type "space"
  3400                           ; Number of cases is 4, Range of values is 0 to 3
  3401                           ; switch strategies available:
  3402                           ; Name         Instructions Cycles
  3403                           ; simple_byte           13     7 (average)
  3404                           ;	Chosen strategy is simple_byte
  3405  0029D4  5025               	movf	??_digitalRead,w,c
  3406  0029D6  0A00               	xorlw	0	; case 0
  3407  0029D8  B4D8               	btfsc	status,2,c
  3408  0029DA  D798               	goto	l6664
  3409  0029DC  0A01               	xorlw	1	; case 1
  3410  0029DE  B4D8               	btfsc	status,2,c
  3411  0029E0  D7AB               	goto	l6668
  3412  0029E2  0A03               	xorlw	3	; case 2
  3413  0029E4  B4D8               	btfsc	status,2,c
  3414  0029E6  D7BE               	goto	l6672
  3415  0029E8  0A01               	xorlw	1	; case 3
  3416  0029EA  B4D8               	btfsc	status,2,c
  3417  0029EC  D7D1               	goto	l6676
  3418  0029EE                     l325:
  3419                           
  3420                           ;iopin.c: 50: return -1;
  3421  0029EE  6823               	setf	?_digitalRead,c
  3422  0029F0  6824               	setf	?_digitalRead+1,c
  3423  0029F2  0012               	return		;funcret
  3424  0029F4                     __end_of_digitalRead:
  3425                           	opt stack 0
  3426                           tblptru	equ	0xFF8
  3427                           tblptrh	equ	0xFF7
  3428                           tblptrl	equ	0xFF6
  3429                           tablat	equ	0xFF5
  3430                           postinc0	equ	0xFEE
  3431                           wreg	equ	0xFE8
  3432                           postdec1	equ	0xFE5
  3433                           fsr1l	equ	0xFE1
  3434                           indf2	equ	0xFDF
  3435                           postinc2	equ	0xFDE
  3436                           postdec2	equ	0xFDD
  3437                           fsr2h	equ	0xFDA
  3438                           fsr2l	equ	0xFD9
  3439                           status	equ	0xFD8
  3440                           
  3441 ;; *************** function _analogRead *****************
  3442 ;; Defined at:
  3443 ;;		line 90 in file "iopin.c"
  3444 ;; Parameters:    Size  Location     Type
  3445 ;;  channel         2   34[COMRAM] int 
  3446 ;; Auto vars:     Size  Location     Type
  3447 ;;		None
  3448 ;; Return value:  Size  Location     Type
  3449 ;;                  4   34[COMRAM] long 
  3450 ;; Registers used:
  3451 ;;		wreg, status,2, status,0
  3452 ;; Tracked objects:
  3453 ;;		On entry : 0/0
  3454 ;;		On exit  : 0/0
  3455 ;;		Unchanged: 0/0
  3456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3457 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3459 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3460 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3461 ;;Total ram usage:        6 bytes
  3462 ;; Hardware stack levels used:    1
  3463 ;; Hardware stack levels required when called:    3
  3464 ;; This function calls:
  3465 ;;		Nothing
  3466 ;; This function is called by:
  3467 ;;		_sortBattery
  3468 ;; This function uses a non-reentrant model
  3469 ;;
  3470                           
  3471                           	psect	text4
  3472  00369C                     __ptext4:
  3473                           	opt stack 0
  3474  00369C                     _analogRead:
  3475                           	opt stack 26
  3476                           
  3477                           ;iopin.c: 91: ADCON0 = channel<<2;
  3478                           
  3479                           ;incstack = 0
  3480  00369C  4423               	rlncf	analogRead@channel,w,c
  3481  00369E  46E8               	rlncf	wreg,f,c
  3482  0036A0  0BFC               	andlw	252
  3483  0036A2  6EC2               	movwf	4034,c	;volatile
  3484                           
  3485                           ;iopin.c: 92: ADCON0 |= 1<<0;
  3486  0036A4  80C2               	bsf	4034,0,c	;volatile
  3487                           
  3488                           ;iopin.c: 93: ADCON0 |= 1<<1;
  3489  0036A6  82C2               	bsf	4034,1,c	;volatile
  3490  0036A8                     l350:
  3491  0036A8  B2C2               	btfsc	4034,1,c	;volatile
  3492  0036AA  D7FE               	goto	l350
  3493                           
  3494                           ;iopin.c: 97: return (ADRESH<<8) + ADRESL;
  3495  0036AC  50C3               	movf	4035,w,c	;volatile
  3496  0036AE  CFC4 F027          	movff	4036,??_analogRead	;volatile
  3497  0036B2  6A28               	clrf	(??_analogRead+1)& (0+255),c
  3498  0036B4  C027  F028         	movff	??_analogRead,??_analogRead+1
  3499  0036B8  6A27               	clrf	??_analogRead,c
  3500  0036BA  2627               	addwf	??_analogRead,f,c
  3501  0036BC  0E00               	movlw	0
  3502  0036BE  2228               	addwfc	??_analogRead+1,f,c
  3503  0036C0  C027  F023         	movff	??_analogRead,?_analogRead
  3504  0036C4  C028  F024         	movff	??_analogRead+1,?_analogRead+1
  3505  0036C8  0E00               	movlw	0
  3506  0036CA  BE24               	btfsc	?_analogRead+1,7,c
  3507  0036CC  0EFF               	movlw	-1
  3508  0036CE  6E25               	movwf	?_analogRead+2,c
  3509  0036D0  6E26               	movwf	?_analogRead+3,c
  3510  0036D2  0012               	return	
  3511  0036D4                     __end_of_analogRead:
  3512                           	opt stack 0
  3513                           tblptru	equ	0xFF8
  3514                           tblptrh	equ	0xFF7
  3515                           tblptrl	equ	0xFF6
  3516                           tablat	equ	0xFF5
  3517                           postinc0	equ	0xFEE
  3518                           wreg	equ	0xFE8
  3519                           postdec1	equ	0xFE5
  3520                           fsr1l	equ	0xFE1
  3521                           indf2	equ	0xFDF
  3522                           postinc2	equ	0xFDE
  3523                           postdec2	equ	0xFDD
  3524                           fsr2h	equ	0xFDA
  3525                           fsr2l	equ	0xFD9
  3526                           status	equ	0xFD8
  3527                           
  3528 ;; *************** function _showInterface *****************
  3529 ;; Defined at:
  3530 ;;		line 16 in file "interface.c"
  3531 ;; Parameters:    Size  Location     Type
  3532 ;;		None
  3533 ;; Auto vars:     Size  Location     Type
  3534 ;;  key             1  108[BANK0 ] unsigned char 
  3535 ;; Return value:  Size  Location     Type
  3536 ;;                  1    wreg      void 
  3537 ;; Registers used:
  3538 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3539 ;; Tracked objects:
  3540 ;;		On entry : 0/0
  3541 ;;		On exit  : 0/0
  3542 ;;		Unchanged: 0/0
  3543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3545 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3547 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3548 ;;Total ram usage:        1 bytes
  3549 ;; Hardware stack levels used:    1
  3550 ;; Hardware stack levels required when called:    9
  3551 ;; This function calls:
  3552 ;;		_dateTime
  3553 ;;		_mainMenu
  3554 ;;		_readKeypad
  3555 ;;		_runMenu
  3556 ;;		_runSelect
  3557 ;;		_runStats
  3558 ;;		_runTime
  3559 ;; This function is called by:
  3560 ;;		_main
  3561 ;; This function uses a non-reentrant model
  3562 ;;
  3563                           
  3564                           	psect	text5
  3565  002806                     __ptext5:
  3566                           	opt stack 0
  3567  002806                     _showInterface:
  3568                           	opt stack 21
  3569  002806                     
  3570                           ;interface.c: 23: dateTime();
  3571  002806  ECFE  F01B         	call	_dateTime	;wreg free
  3572  00280A                     l6784:
  3573  00280A  ECD8  F01B         	call	_readKeypad	;wreg free
  3574  00280E  0A41               	xorlw	65
  3575  002810  A4D8               	btfss	status,2,c
  3576  002812  D7FB               	goto	l6784
  3577  002814                     l6786:
  3578                           
  3579                           ;interface.c: 28: mainMenu();
  3580  002814  ECEB  F01B         	call	_mainMenu	;wreg free
  3581  002818                     l6788:
  3582  002818  ECD8  F01B         	call	_readKeypad	;wreg free
  3583  00281C  0100               	movlb	0	; () banked
  3584  00281E  6FEC               	movwf	showInterface@key& (0+255),b
  3585                           
  3586                           ; BSR set to: 0
  3587                           ;interface.c: 32: while(key != 'B' && key != 'C' && key != '*');
  3588  002820  0E42               	movlw	66
  3589  002822  0100               	movlb	0	; () banked
  3590  002824  19EC               	xorwf	showInterface@key& (0+255),w,b
  3591  002826  B4D8               	btfsc	status,2,c
  3592  002828  D00A               	goto	l6796
  3593                           
  3594                           ; BSR set to: 0
  3595  00282A  0E43               	movlw	67
  3596  00282C  0100               	movlb	0	; () banked
  3597  00282E  19EC               	xorwf	showInterface@key& (0+255),w,b
  3598  002830  B4D8               	btfsc	status,2,c
  3599  002832  D005               	goto	l6796
  3600                           
  3601                           ; BSR set to: 0
  3602  002834  0E2A               	movlw	42
  3603  002836  0100               	movlb	0	; () banked
  3604  002838  19EC               	xorwf	showInterface@key& (0+255),w,b
  3605  00283A  A4D8               	btfss	status,2,c
  3606  00283C  D7ED               	goto	l6788
  3607  00283E                     l6796:
  3608                           
  3609                           ; BSR set to: 0
  3610                           ;interface.c: 34: if(key == 'C'){
  3611  00283E  0E43               	movlw	67
  3612  002840  0100               	movlb	0	; () banked
  3613  002842  19EC               	xorwf	showInterface@key& (0+255),w,b
  3614  002844  A4D8               	btfss	status,2,c
  3615  002846  D056               	goto	l6840
  3616                           
  3617                           ; BSR set to: 0
  3618                           ;interface.c: 36: runSelect();
  3619  002848  ECC5  F01B         	call	_runSelect	;wreg free
  3620  00284C                     l6800:
  3621  00284C  ECD8  F01B         	call	_readKeypad	;wreg free
  3622  002850  0100               	movlb	0	; () banked
  3623  002852  6FEC               	movwf	showInterface@key& (0+255),b
  3624                           
  3625                           ; BSR set to: 0
  3626                           ;interface.c: 42: while(key != '1' && key != '2' && key != '3' && key != '4' && key != '
      +                          *');
  3627  002854  0E31               	movlw	49
  3628  002856  0100               	movlb	0	; () banked
  3629  002858  19EC               	xorwf	showInterface@key& (0+255),w,b
  3630  00285A  B4D8               	btfsc	status,2,c
  3631  00285C  D014               	goto	l6812
  3632                           
  3633                           ; BSR set to: 0
  3634  00285E  0E32               	movlw	50
  3635  002860  0100               	movlb	0	; () banked
  3636  002862  19EC               	xorwf	showInterface@key& (0+255),w,b
  3637  002864  B4D8               	btfsc	status,2,c
  3638  002866  D00F               	goto	l6812
  3639                           
  3640                           ; BSR set to: 0
  3641  002868  0E33               	movlw	51
  3642  00286A  0100               	movlb	0	; () banked
  3643  00286C  19EC               	xorwf	showInterface@key& (0+255),w,b
  3644  00286E  B4D8               	btfsc	status,2,c
  3645  002870  D00A               	goto	l6812
  3646                           
  3647                           ; BSR set to: 0
  3648  002872  0E34               	movlw	52
  3649  002874  0100               	movlb	0	; () banked
  3650  002876  19EC               	xorwf	showInterface@key& (0+255),w,b
  3651  002878  B4D8               	btfsc	status,2,c
  3652  00287A  D005               	goto	l6812
  3653                           
  3654                           ; BSR set to: 0
  3655  00287C  0E2A               	movlw	42
  3656  00287E  0100               	movlb	0	; () banked
  3657  002880  19EC               	xorwf	showInterface@key& (0+255),w,b
  3658  002882  A4D8               	btfss	status,2,c
  3659  002884  D7E3               	goto	l6800
  3660  002886                     l6812:
  3661                           
  3662                           ; BSR set to: 0
  3663                           ;interface.c: 44: if(key == '*')continue;
  3664  002886  0E2A               	movlw	42
  3665  002888  0100               	movlb	0	; () banked
  3666  00288A  19EC               	xorwf	showInterface@key& (0+255),w,b
  3667  00288C  B4D8               	btfsc	status,2,c
  3668  00288E  D7C2               	goto	l6786
  3669  002890                     l6816:
  3670                           
  3671                           ;interface.c: 50: runMenu(key);
  3672  002890  0100               	movlb	0	; () banked
  3673  002892  51EC               	movf	showInterface@key& (0+255),w,b
  3674  002894  EC86  F01B         	call	_runMenu
  3675  002898                     l6818:
  3676  002898  ECD8  F01B         	call	_readKeypad	;wreg free
  3677  00289C  0100               	movlb	0	; () banked
  3678  00289E  6FEC               	movwf	showInterface@key& (0+255),b
  3679                           
  3680                           ; BSR set to: 0
  3681                           ;interface.c: 54: while(key != 'A' && key != 'B' && key != '*');
  3682  0028A0  0E41               	movlw	65
  3683  0028A2  0100               	movlb	0	; () banked
  3684  0028A4  19EC               	xorwf	showInterface@key& (0+255),w,b
  3685  0028A6  B4D8               	btfsc	status,2,c
  3686  0028A8  D00A               	goto	l6826
  3687                           
  3688                           ; BSR set to: 0
  3689  0028AA  0E42               	movlw	66
  3690  0028AC  0100               	movlb	0	; () banked
  3691  0028AE  19EC               	xorwf	showInterface@key& (0+255),w,b
  3692  0028B0  B4D8               	btfsc	status,2,c
  3693  0028B2  D005               	goto	l6826
  3694                           
  3695                           ; BSR set to: 0
  3696  0028B4  0E2A               	movlw	42
  3697  0028B6  0100               	movlb	0	; () banked
  3698  0028B8  19EC               	xorwf	showInterface@key& (0+255),w,b
  3699  0028BA  A4D8               	btfss	status,2,c
  3700  0028BC  D7ED               	goto	l6818
  3701  0028BE                     l6826:
  3702                           
  3703                           ; BSR set to: 0
  3704                           ;interface.c: 56: if(key == 'A'){
  3705  0028BE  0E41               	movlw	65
  3706  0028C0  0100               	movlb	0	; () banked
  3707  0028C2  19EC               	xorwf	showInterface@key& (0+255),w,b
  3708  0028C4  A4D8               	btfss	status,2,c
  3709  0028C6  D003               	goto	l6830
  3710                           
  3711                           ; BSR set to: 0
  3712                           ;interface.c: 58: runTime();
  3713  0028C8  EC9F  F01B         	call	_runTime	;wreg free
  3714                           
  3715                           ;interface.c: 60: }
  3716  0028CC  D00D               	goto	l6838
  3717  0028CE                     l6830:
  3718                           
  3719                           ;interface.c: 61: else if(key == 'B'){
  3720  0028CE  0E42               	movlw	66
  3721  0028D0  0100               	movlb	0	; () banked
  3722  0028D2  19EC               	xorwf	showInterface@key& (0+255),w,b
  3723  0028D4  A4D8               	btfss	status,2,c
  3724  0028D6  D003               	goto	l6834
  3725                           
  3726                           ; BSR set to: 0
  3727                           ;interface.c: 63: runStats();
  3728  0028D8  ECB2  F01B         	call	_runStats	;wreg free
  3729                           
  3730                           ;interface.c: 65: }
  3731  0028DC  D005               	goto	l6838
  3732  0028DE                     l6834:
  3733                           
  3734                           ;interface.c: 66: else if(key == '*')break;
  3735  0028DE  0E2A               	movlw	42
  3736  0028E0  0100               	movlb	0	; () banked
  3737  0028E2  19EC               	xorwf	showInterface@key& (0+255),w,b
  3738  0028E4  B4D8               	btfsc	status,2,c
  3739  0028E6  D796               	goto	l6786
  3740  0028E8                     l6838:
  3741  0028E8  ECD8  F01B         	call	_readKeypad	;wreg free
  3742  0028EC  0A2A               	xorlw	42
  3743  0028EE  B4D8               	btfsc	status,2,c
  3744  0028F0  D7CF               	goto	l6816
  3745  0028F2  D7FA               	goto	l6838
  3746  0028F4                     l6840:
  3747                           
  3748                           ;interface.c: 72: else if(key == 'B'){
  3749  0028F4  0E42               	movlw	66
  3750  0028F6  0100               	movlb	0	; () banked
  3751  0028F8  19EC               	xorwf	showInterface@key& (0+255),w,b
  3752  0028FA  B4D8               	btfsc	status,2,c
  3753  0028FC  0012               	return	
  3754                           
  3755                           ; BSR set to: 0
  3756                           ;interface.c: 75: else if(key == '*')
  3757                           
  3758                           ; BSR set to: 0
  3759                           
  3760                           ; BSR set to: 0
  3761                           ;interface.c: 74: }
  3762                           
  3763                           ; BSR set to: 0
  3764                           ;interface.c: 73: return;
  3765  0028FE  0E2A               	movlw	42
  3766  002900  0100               	movlb	0	; () banked
  3767  002902  19EC               	xorwf	showInterface@key& (0+255),w,b
  3768  002904  B4D8               	btfsc	status,2,c
  3769  002906  D77F               	goto	l6782
  3770  002908  D785               	goto	l6786
  3771  00290A                     __end_of_showInterface:
  3772                           	opt stack 0
  3773                           tblptru	equ	0xFF8
  3774                           tblptrh	equ	0xFF7
  3775                           tblptrl	equ	0xFF6
  3776                           tablat	equ	0xFF5
  3777                           postinc0	equ	0xFEE
  3778                           wreg	equ	0xFE8
  3779                           postdec1	equ	0xFE5
  3780                           fsr1l	equ	0xFE1
  3781                           indf2	equ	0xFDF
  3782                           postinc2	equ	0xFDE
  3783                           postdec2	equ	0xFDD
  3784                           fsr2h	equ	0xFDA
  3785                           fsr2l	equ	0xFD9
  3786                           status	equ	0xFD8
  3787                           
  3788 ;; *************** function _runTime *****************
  3789 ;; Defined at:
  3790 ;;		line 117 in file "interface.c"
  3791 ;; Parameters:    Size  Location     Type
  3792 ;;		None
  3793 ;; Auto vars:     Size  Location     Type
  3794 ;;		None
  3795 ;; Return value:  Size  Location     Type
  3796 ;;                  1    wreg      void 
  3797 ;; Registers used:
  3798 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3799 ;; Tracked objects:
  3800 ;;		On entry : 0/0
  3801 ;;		On exit  : 0/0
  3802 ;;		Unchanged: 0/0
  3803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3807 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3808 ;;Total ram usage:        0 bytes
  3809 ;; Hardware stack levels used:    1
  3810 ;; Hardware stack levels required when called:    8
  3811 ;; This function calls:
  3812 ;;		_lcdClear
  3813 ;;		_printf
  3814 ;; This function is called by:
  3815 ;;		_showInterface
  3816 ;; This function uses a non-reentrant model
  3817 ;;
  3818                           
  3819                           	psect	text6
  3820  00373E                     __ptext6:
  3821                           	opt stack 0
  3822  00373E                     _runTime:
  3823                           	opt stack 21
  3824                           
  3825                           ;interface.c: 118: lcdClear();
  3826                           
  3827                           ; BSR set to: 0
  3828                           ;incstack = 0
  3829  00373E  EC86  F01C         	call	_lcdClear	;wreg free
  3830                           
  3831                           ;interface.c: 119: printf("time: nnn sec   \n");
  3832  003742  0E14               	movlw	low STR_15
  3833  003744  0100               	movlb	0	; () banked
  3834  003746  6FBD               	movwf	printf@f& (0+255),b
  3835  003748  0EFF               	movlw	high STR_15
  3836  00374A  0100               	movlb	0	; () banked
  3837  00374C  6FBE               	movwf	(printf@f+1)& (0+255),b
  3838  00374E  EC09  F000         	call	_printf	;wreg free
  3839                           
  3840                           ;interface.c: 120: printf("              *>");
  3841  003752  0E49               	movlw	low STR_16
  3842  003754  0100               	movlb	0	; () banked
  3843  003756  6FBD               	movwf	printf@f& (0+255),b
  3844  003758  0EFF               	movlw	high STR_16
  3845  00375A  0100               	movlb	0	; () banked
  3846  00375C  6FBE               	movwf	(printf@f+1)& (0+255),b
  3847  00375E  EC09  F000         	call	_printf	;wreg free
  3848  003762  0012               	return		;funcret
  3849  003764                     __end_of_runTime:
  3850                           	opt stack 0
  3851                           tblptru	equ	0xFF8
  3852                           tblptrh	equ	0xFF7
  3853                           tblptrl	equ	0xFF6
  3854                           tablat	equ	0xFF5
  3855                           postinc0	equ	0xFEE
  3856                           wreg	equ	0xFE8
  3857                           postdec1	equ	0xFE5
  3858                           fsr1l	equ	0xFE1
  3859                           indf2	equ	0xFDF
  3860                           postinc2	equ	0xFDE
  3861                           postdec2	equ	0xFDD
  3862                           fsr2h	equ	0xFDA
  3863                           fsr2l	equ	0xFD9
  3864                           status	equ	0xFD8
  3865                           
  3866 ;; *************** function _runStats *****************
  3867 ;; Defined at:
  3868 ;;		line 123 in file "interface.c"
  3869 ;; Parameters:    Size  Location     Type
  3870 ;;		None
  3871 ;; Auto vars:     Size  Location     Type
  3872 ;;		None
  3873 ;; Return value:  Size  Location     Type
  3874 ;;                  1    wreg      void 
  3875 ;; Registers used:
  3876 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3877 ;; Tracked objects:
  3878 ;;		On entry : 0/0
  3879 ;;		On exit  : 0/0
  3880 ;;		Unchanged: 0/0
  3881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3886 ;;Total ram usage:        0 bytes
  3887 ;; Hardware stack levels used:    1
  3888 ;; Hardware stack levels required when called:    8
  3889 ;; This function calls:
  3890 ;;		_lcdClear
  3891 ;;		_printf
  3892 ;; This function is called by:
  3893 ;;		_showInterface
  3894 ;; This function uses a non-reentrant model
  3895 ;;
  3896                           
  3897                           	psect	text7
  3898  003764                     __ptext7:
  3899                           	opt stack 0
  3900  003764                     _runStats:
  3901                           	opt stack 21
  3902                           
  3903                           ;interface.c: 124: lcdClear();
  3904                           
  3905                           ;incstack = 0
  3906  003764  EC86  F01C         	call	_lcdClear	;wreg free
  3907                           
  3908                           ;interface.c: 125: printf("[AA,9V,C,other] \n");
  3909  003768  0E26               	movlw	low STR_17
  3910  00376A  0100               	movlb	0	; () banked
  3911  00376C  6FBD               	movwf	printf@f& (0+255),b
  3912  00376E  0EFF               	movlw	high STR_17
  3913  003770  0100               	movlb	0	; () banked
  3914  003772  6FBE               	movwf	(printf@f+1)& (0+255),b
  3915  003774  EC09  F000         	call	_printf	;wreg free
  3916                           
  3917                           ;interface.c: 126: printf("[nn,n,n,nn]   *>");
  3918  003778  0E8D               	movlw	low STR_18
  3919  00377A  0100               	movlb	0	; () banked
  3920  00377C  6FBD               	movwf	printf@f& (0+255),b
  3921  00377E  0EFF               	movlw	high STR_18
  3922  003780  0100               	movlb	0	; () banked
  3923  003782  6FBE               	movwf	(printf@f+1)& (0+255),b
  3924  003784  EC09  F000         	call	_printf	;wreg free
  3925  003788  0012               	return		;funcret
  3926  00378A                     __end_of_runStats:
  3927                           	opt stack 0
  3928                           tblptru	equ	0xFF8
  3929                           tblptrh	equ	0xFF7
  3930                           tblptrl	equ	0xFF6
  3931                           tablat	equ	0xFF5
  3932                           postinc0	equ	0xFEE
  3933                           wreg	equ	0xFE8
  3934                           postdec1	equ	0xFE5
  3935                           fsr1l	equ	0xFE1
  3936                           indf2	equ	0xFDF
  3937                           postinc2	equ	0xFDE
  3938                           postdec2	equ	0xFDD
  3939                           fsr2h	equ	0xFDA
  3940                           fsr2l	equ	0xFD9
  3941                           status	equ	0xFD8
  3942                           
  3943 ;; *************** function _runSelect *****************
  3944 ;; Defined at:
  3945 ;;		line 105 in file "interface.c"
  3946 ;; Parameters:    Size  Location     Type
  3947 ;;		None
  3948 ;; Auto vars:     Size  Location     Type
  3949 ;;		None
  3950 ;; Return value:  Size  Location     Type
  3951 ;;                  1    wreg      void 
  3952 ;; Registers used:
  3953 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3954 ;; Tracked objects:
  3955 ;;		On entry : 0/0
  3956 ;;		On exit  : 0/0
  3957 ;;		Unchanged: 0/0
  3958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3962 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3963 ;;Total ram usage:        0 bytes
  3964 ;; Hardware stack levels used:    1
  3965 ;; Hardware stack levels required when called:    8
  3966 ;; This function calls:
  3967 ;;		_lcdClear
  3968 ;;		_printf
  3969 ;; This function is called by:
  3970 ;;		_showInterface
  3971 ;; This function uses a non-reentrant model
  3972 ;;
  3973                           
  3974                           	psect	text8
  3975  00378A                     __ptext8:
  3976                           	opt stack 0
  3977  00378A                     _runSelect:
  3978                           	opt stack 21
  3979                           
  3980                           ;interface.c: 106: lcdClear();
  3981                           
  3982                           ;incstack = 0
  3983  00378A  EC86  F01C         	call	_lcdClear	;wreg free
  3984                           
  3985                           ;interface.c: 107: printf("select run:     \n");
  3986  00378E  0E02               	movlw	low STR_11
  3987  003790  0100               	movlb	0	; () banked
  3988  003792  6FBD               	movwf	printf@f& (0+255),b
  3989  003794  0EFF               	movlw	high STR_11
  3990  003796  0100               	movlb	0	; () banked
  3991  003798  6FBE               	movwf	(printf@f+1)& (0+255),b
  3992  00379A  EC09  F000         	call	_printf	;wreg free
  3993                           
  3994                           ;interface.c: 108: printf("[1,2,3,4]     *>");
  3995  00379E  0E5A               	movlw	low STR_12
  3996  0037A0  0100               	movlb	0	; () banked
  3997  0037A2  6FBD               	movwf	printf@f& (0+255),b
  3998  0037A4  0EFF               	movlw	high STR_12
  3999  0037A6  0100               	movlb	0	; () banked
  4000  0037A8  6FBE               	movwf	(printf@f+1)& (0+255),b
  4001  0037AA  EC09  F000         	call	_printf	;wreg free
  4002  0037AE  0012               	return		;funcret
  4003  0037B0                     __end_of_runSelect:
  4004                           	opt stack 0
  4005                           tblptru	equ	0xFF8
  4006                           tblptrh	equ	0xFF7
  4007                           tblptrl	equ	0xFF6
  4008                           tablat	equ	0xFF5
  4009                           postinc0	equ	0xFEE
  4010                           wreg	equ	0xFE8
  4011                           postdec1	equ	0xFE5
  4012                           fsr1l	equ	0xFE1
  4013                           indf2	equ	0xFDF
  4014                           postinc2	equ	0xFDE
  4015                           postdec2	equ	0xFDD
  4016                           fsr2h	equ	0xFDA
  4017                           fsr2l	equ	0xFD9
  4018                           status	equ	0xFD8
  4019                           
  4020 ;; *************** function _runMenu *****************
  4021 ;; Defined at:
  4022 ;;		line 111 in file "interface.c"
  4023 ;; Parameters:    Size  Location     Type
  4024 ;;  key             1    wreg     unsigned char 
  4025 ;; Auto vars:     Size  Location     Type
  4026 ;;  key             1  107[BANK0 ] unsigned char 
  4027 ;; Return value:  Size  Location     Type
  4028 ;;                  1    wreg      void 
  4029 ;; Registers used:
  4030 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4031 ;; Tracked objects:
  4032 ;;		On entry : 0/0
  4033 ;;		On exit  : 0/0
  4034 ;;		Unchanged: 0/0
  4035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4037 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4039 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4040 ;;Total ram usage:        1 bytes
  4041 ;; Hardware stack levels used:    1
  4042 ;; Hardware stack levels required when called:    8
  4043 ;; This function calls:
  4044 ;;		_lcdClear
  4045 ;;		_printf
  4046 ;; This function is called by:
  4047 ;;		_showInterface
  4048 ;; This function uses a non-reentrant model
  4049 ;;
  4050                           
  4051                           	psect	text9
  4052  00370C                     __ptext9:
  4053                           	opt stack 0
  4054  00370C                     _runMenu:
  4055                           	opt stack 21
  4056                           
  4057                           ;incstack = 0
  4058                           ;runMenu@key stored from wreg
  4059  00370C  0100               	movlb	0	; () banked
  4060  00370E  6FEB               	movwf	runMenu@key& (0+255),b
  4061                           
  4062                           ;interface.c: 112: lcdClear();
  4063  003710  EC86  F01C         	call	_lcdClear	;wreg free
  4064                           
  4065                           ;interface.c: 113: printf("%c) time  <A     \n",key);
  4066  003714  0ECB               	movlw	low STR_13
  4067  003716  0100               	movlb	0	; () banked
  4068  003718  6FBD               	movwf	printf@f& (0+255),b
  4069  00371A  0EFE               	movlw	high STR_13
  4070  00371C  0100               	movlb	0	; () banked
  4071  00371E  6FBE               	movwf	(printf@f+1)& (0+255),b
  4072  003720  C0EB  F0BF         	movff	runMenu@key,?_printf+2
  4073  003724  0100               	movlb	0	; () banked
  4074  003726  6BC0               	clrf	(?_printf+3)& (0+255),b
  4075  003728  EC09  F000         	call	_printf	;wreg free
  4076                           
  4077                           ;interface.c: 114: printf( "   stats <B   *>");
  4078  00372C  0E7C               	movlw	low STR_14
  4079  00372E  0100               	movlb	0	; () banked
  4080  003730  6FBD               	movwf	printf@f& (0+255),b
  4081  003732  0EFF               	movlw	high STR_14
  4082  003734  0100               	movlb	0	; () banked
  4083  003736  6FBE               	movwf	(printf@f+1)& (0+255),b
  4084  003738  EC09  F000         	call	_printf	;wreg free
  4085  00373C  0012               	return		;funcret
  4086  00373E                     __end_of_runMenu:
  4087                           	opt stack 0
  4088                           tblptru	equ	0xFF8
  4089                           tblptrh	equ	0xFF7
  4090                           tblptrl	equ	0xFF6
  4091                           tablat	equ	0xFF5
  4092                           postinc0	equ	0xFEE
  4093                           wreg	equ	0xFE8
  4094                           postdec1	equ	0xFE5
  4095                           fsr1l	equ	0xFE1
  4096                           indf2	equ	0xFDF
  4097                           postinc2	equ	0xFDE
  4098                           postdec2	equ	0xFDD
  4099                           fsr2h	equ	0xFDA
  4100                           fsr2l	equ	0xFD9
  4101                           status	equ	0xFD8
  4102                           
  4103 ;; *************** function _readKeypad *****************
  4104 ;; Defined at:
  4105 ;;		line 36 in file "keypad.c"
  4106 ;; Parameters:    Size  Location     Type
  4107 ;;		None
  4108 ;; Auto vars:     Size  Location     Type
  4109 ;;  key             1   34[COMRAM] unsigned char 
  4110 ;; Return value:  Size  Location     Type
  4111 ;;                  1    wreg      unsigned char 
  4112 ;; Registers used:
  4113 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4114 ;; Tracked objects:
  4115 ;;		On entry : 0/0
  4116 ;;		On exit  : 0/0
  4117 ;;		Unchanged: 0/0
  4118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4120 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4122 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4123 ;;Total ram usage:        1 bytes
  4124 ;; Hardware stack levels used:    1
  4125 ;; Hardware stack levels required when called:    3
  4126 ;; This function calls:
  4127 ;;		Nothing
  4128 ;; This function is called by:
  4129 ;;		_main
  4130 ;;		_sortBattery
  4131 ;;		_showInterface
  4132 ;;		_debug
  4133 ;;		_pause
  4134 ;; This function uses a non-reentrant model
  4135 ;;
  4136                           
  4137                           	psect	text10
  4138  0037B0                     __ptext10:
  4139                           	opt stack 0
  4140  0037B0                     _readKeypad:
  4141                           	opt stack 26
  4142  0037B0                     l252:
  4143  0037B0  A281               	btfss	3969,1,c	;volatile
  4144  0037B2  D7FE               	goto	l252
  4145                           
  4146                           ;keypad.c: 38: char key = (PORTB & 0xF0) >> 4;
  4147  0037B4  3881               	swapf	3969,w,c	;volatile
  4148  0037B6  0B0F               	andlw	15
  4149  0037B8  0B0F               	andlw	15
  4150  0037BA  6E23               	movwf	readKeypad@key,c
  4151  0037BC                     l255:
  4152  0037BC  B281               	btfsc	3969,1,c	;volatile
  4153  0037BE  D7FE               	goto	l255
  4154                           
  4155                           ;keypad.c: 40: return keys[key];
  4156  0037C0  5023               	movf	readKeypad@key,w,c
  4157  0037C2  0D01               	mullw	1
  4158  0037C4  0EB3               	movlw	low _keys
  4159  0037C6  24F3               	addwf	prodl,w,c
  4160  0037C8  6EF6               	movwf	tblptrl,c
  4161  0037CA  0EFE               	movlw	high _keys
  4162  0037CC  20F4               	addwfc	prodh,w,c
  4163  0037CE  6EF7               	movwf	tblptrh,c
  4164  0037D0                     	if	0	;There are less than 3 active tblptr bytes
  4165  0037D0                     	endif
  4166  0037D0  0008               	tblrd		*
  4167  0037D2  50F5               	movf	tablat,w,c
  4168  0037D4  0012               	return	
  4169  0037D6                     __end_of_readKeypad:
  4170                           	opt stack 0
  4171                           tblptru	equ	0xFF8
  4172                           tblptrh	equ	0xFF7
  4173                           tblptrl	equ	0xFF6
  4174                           tablat	equ	0xFF5
  4175                           prodh	equ	0xFF4
  4176                           prodl	equ	0xFF3
  4177                           postinc0	equ	0xFEE
  4178                           wreg	equ	0xFE8
  4179                           postdec1	equ	0xFE5
  4180                           fsr1l	equ	0xFE1
  4181                           indf2	equ	0xFDF
  4182                           postinc2	equ	0xFDE
  4183                           postdec2	equ	0xFDD
  4184                           fsr2h	equ	0xFDA
  4185                           fsr2l	equ	0xFD9
  4186                           status	equ	0xFD8
  4187                           
  4188 ;; *************** function _mainMenu *****************
  4189 ;; Defined at:
  4190 ;;		line 99 in file "interface.c"
  4191 ;; Parameters:    Size  Location     Type
  4192 ;;		None
  4193 ;; Auto vars:     Size  Location     Type
  4194 ;;		None
  4195 ;; Return value:  Size  Location     Type
  4196 ;;                  1    wreg      void 
  4197 ;; Registers used:
  4198 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4199 ;; Tracked objects:
  4200 ;;		On entry : 0/0
  4201 ;;		On exit  : 0/0
  4202 ;;		Unchanged: 0/0
  4203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4208 ;;Total ram usage:        0 bytes
  4209 ;; Hardware stack levels used:    1
  4210 ;; Hardware stack levels required when called:    8
  4211 ;; This function calls:
  4212 ;;		_lcdClear
  4213 ;;		_printf
  4214 ;; This function is called by:
  4215 ;;		_showInterface
  4216 ;; This function uses a non-reentrant model
  4217 ;;
  4218                           
  4219                           	psect	text11
  4220  0037D6                     __ptext11:
  4221                           	opt stack 0
  4222  0037D6                     _mainMenu:
  4223                           	opt stack 21
  4224                           
  4225                           ;interface.c: 100: lcdClear();
  4226                           
  4227                           ;incstack = 0
  4228  0037D6  EC86  F01C         	call	_lcdClear	;wreg free
  4229                           
  4230                           ;interface.c: 101: printf("start   <B      \n");
  4231  0037DA  0EDE               	movlw	low STR_9
  4232  0037DC  0100               	movlb	0	; () banked
  4233  0037DE  6FBD               	movwf	printf@f& (0+255),b
  4234  0037E0  0EFE               	movlw	high STR_9
  4235  0037E2  0100               	movlb	0	; () banked
  4236  0037E4  6FBE               	movwf	(printf@f+1)& (0+255),b
  4237  0037E6  EC09  F000         	call	_printf	;wreg free
  4238                           
  4239                           ;interface.c: 102: printf("history <C    *>");
  4240  0037EA  0E6B               	movlw	low STR_10
  4241  0037EC  0100               	movlb	0	; () banked
  4242  0037EE  6FBD               	movwf	printf@f& (0+255),b
  4243  0037F0  0EFF               	movlw	high STR_10
  4244  0037F2  0100               	movlb	0	; () banked
  4245  0037F4  6FBE               	movwf	(printf@f+1)& (0+255),b
  4246  0037F6  EC09  F000         	call	_printf	;wreg free
  4247  0037FA  0012               	return		;funcret
  4248  0037FC                     __end_of_mainMenu:
  4249                           	opt stack 0
  4250                           tblptru	equ	0xFF8
  4251                           tblptrh	equ	0xFF7
  4252                           tblptrl	equ	0xFF6
  4253                           tablat	equ	0xFF5
  4254                           prodh	equ	0xFF4
  4255                           prodl	equ	0xFF3
  4256                           postinc0	equ	0xFEE
  4257                           wreg	equ	0xFE8
  4258                           postdec1	equ	0xFE5
  4259                           fsr1l	equ	0xFE1
  4260                           indf2	equ	0xFDF
  4261                           postinc2	equ	0xFDE
  4262                           postdec2	equ	0xFDD
  4263                           fsr2h	equ	0xFDA
  4264                           fsr2l	equ	0xFD9
  4265                           status	equ	0xFD8
  4266                           
  4267 ;; *************** function _dateTime *****************
  4268 ;; Defined at:
  4269 ;;		line 84 in file "interface.c"
  4270 ;; Parameters:    Size  Location     Type
  4271 ;;		None
  4272 ;; Auto vars:     Size  Location     Type
  4273 ;;		None
  4274 ;; Return value:  Size  Location     Type
  4275 ;;                  1    wreg      void 
  4276 ;; Registers used:
  4277 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4278 ;; Tracked objects:
  4279 ;;		On entry : 0/0
  4280 ;;		On exit  : 0/0
  4281 ;;		Unchanged: 0/0
  4282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4286 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4287 ;;Total ram usage:        0 bytes
  4288 ;; Hardware stack levels used:    1
  4289 ;; Hardware stack levels required when called:    8
  4290 ;; This function calls:
  4291 ;;		_lcdClear
  4292 ;;		_printf
  4293 ;; This function is called by:
  4294 ;;		_showInterface
  4295 ;; This function uses a non-reentrant model
  4296 ;;
  4297                           
  4298                           	psect	text12
  4299  0037FC                     __ptext12:
  4300                           	opt stack 0
  4301  0037FC                     _dateTime:
  4302                           	opt stack 21
  4303                           
  4304                           ;interface.c: 94: lcdClear();
  4305                           
  4306                           ;incstack = 0
  4307  0037FC  EC86  F01C         	call	_lcdClear	;wreg free
  4308                           
  4309                           ;interface.c: 95: printf("  hh:mm:ss      \n");
  4310  003800  0EF0               	movlw	low STR_7
  4311  003802  0100               	movlb	0	; () banked
  4312  003804  6FBD               	movwf	printf@f& (0+255),b
  4313  003806  0EFE               	movlw	high STR_7
  4314  003808  0100               	movlb	0	; () banked
  4315  00380A  6FBE               	movwf	(printf@f+1)& (0+255),b
  4316  00380C  EC09  F000         	call	_printf	;wreg free
  4317                           
  4318                           ;interface.c: 96: printf("  mm:dd:yy    A>");
  4319  003810  0E9E               	movlw	low STR_8
  4320  003812  0100               	movlb	0	; () banked
  4321  003814  6FBD               	movwf	printf@f& (0+255),b
  4322  003816  0EFF               	movlw	high STR_8
  4323  003818  0100               	movlb	0	; () banked
  4324  00381A  6FBE               	movwf	(printf@f+1)& (0+255),b
  4325  00381C  EC09  F000         	call	_printf	;wreg free
  4326  003820  0012               	return		;funcret
  4327  003822                     __end_of_dateTime:
  4328                           	opt stack 0
  4329                           tblptru	equ	0xFF8
  4330                           tblptrh	equ	0xFF7
  4331                           tblptrl	equ	0xFF6
  4332                           tablat	equ	0xFF5
  4333                           prodh	equ	0xFF4
  4334                           prodl	equ	0xFF3
  4335                           postinc0	equ	0xFEE
  4336                           wreg	equ	0xFE8
  4337                           postdec1	equ	0xFE5
  4338                           fsr1l	equ	0xFE1
  4339                           indf2	equ	0xFDF
  4340                           postinc2	equ	0xFDE
  4341                           postdec2	equ	0xFDD
  4342                           fsr2h	equ	0xFDA
  4343                           fsr2l	equ	0xFD9
  4344                           status	equ	0xFD8
  4345                           
  4346 ;; *************** function _printf *****************
  4347 ;; Defined at:
  4348 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4349 ;; Parameters:    Size  Location     Type
  4350 ;;  f               2   61[BANK0 ] PTR const unsigned char 
  4351 ;;		 -> STR_18(17), STR_17(18), STR_16(17), STR_15(18), 
  4352 ;;		 -> STR_14(17), STR_13(19), STR_12(17), STR_11(18), 
  4353 ;;		 -> STR_10(17), STR_9(18), STR_8(17), STR_7(18), 
  4354 ;;		 -> STR_6(8), STR_5(15), STR_4(14), STR_3(17), 
  4355 ;;		 -> STR_2(17), STR_1(8), 
  4356 ;; Auto vars:     Size  Location     Type
  4357 ;;  idx             1   80[BANK0 ] unsigned char 
  4358 ;;  val             4   96[BANK0 ] unsigned long 
  4359 ;;  tmpval          4   87[BANK0 ] struct .
  4360 ;;  fval            3   93[BANK0 ] struct .
  4361 ;;  prec            2  104[BANK0 ] int 
  4362 ;;  flag            2  102[BANK0 ] unsigned short 
  4363 ;;  width           2  100[BANK0 ] int 
  4364 ;;  exp             2   91[BANK0 ] int 
  4365 ;;  ap              2   85[BANK0 ] PTR void [1]
  4366 ;;		 -> ?_printf(2), 
  4367 ;;  len             2   83[BANK0 ] unsigned int 
  4368 ;;  cp              2   81[BANK0 ] PTR const unsigned char 
  4369 ;;		 -> printf@c(1), 
  4370 ;;  c               1  106[BANK0 ] char 
  4371 ;;  d               1    0        unsigned char 
  4372 ;; Return value:  Size  Location     Type
  4373 ;;                  2   61[BANK0 ] int 
  4374 ;; Registers used:
  4375 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4376 ;; Tracked objects:
  4377 ;;		On entry : 0/0
  4378 ;;		On exit  : 0/0
  4379 ;;		Unchanged: 0/0
  4380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4381 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4382 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4383 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4384 ;;      Totals:         0      46       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4385 ;;Total ram usage:       46 bytes
  4386 ;; Hardware stack levels used:    1
  4387 ;; Hardware stack levels required when called:    7
  4388 ;; This function calls:
  4389 ;;		___awdiv
  4390 ;;		___ftadd
  4391 ;;		___ftge
  4392 ;;		___ftmul
  4393 ;;		___ftneg
  4394 ;;		___ftsub
  4395 ;;		___fttol
  4396 ;;		___lldiv
  4397 ;;		___llmod
  4398 ;;		___lltoft
  4399 ;;		___wmul
  4400 ;;		__div_to_l_
  4401 ;;		__tdiv_to_l_
  4402 ;;		_fround
  4403 ;;		_isdigit
  4404 ;;		_putch
  4405 ;;		_scale
  4406 ;; This function is called by:
  4407 ;;		_main
  4408 ;;		_sortBattery
  4409 ;;		_dateTime
  4410 ;;		_mainMenu
  4411 ;;		_runSelect
  4412 ;;		_runMenu
  4413 ;;		_runTime
  4414 ;;		_runStats
  4415 ;;		_pause
  4416 ;;		_testFrequency
  4417 ;; This function uses a non-reentrant model
  4418 ;;
  4419                           
  4420                           	psect	text13
  4421  000012                     __ptext13:
  4422                           	opt stack 0
  4423  000012                     _printf:
  4424                           	opt stack 22
  4425                           
  4426                           ;doprnt.c: 466: va_list ap;
  4427                           ;doprnt.c: 499: signed char c;
  4428                           ;doprnt.c: 501: int width;
  4429                           ;doprnt.c: 504: int prec;
  4430                           ;doprnt.c: 508: unsigned short flag;
  4431                           ;doprnt.c: 515: char d;
  4432                           ;doprnt.c: 516: double fval;
  4433                           ;doprnt.c: 517: int exp;
  4434                           ;doprnt.c: 523: union {
  4435                           ;doprnt.c: 524: unsigned long vd;
  4436                           ;doprnt.c: 525: double integ;
  4437                           ;doprnt.c: 526: } tmpval;
  4438                           ;doprnt.c: 528: unsigned long val;
  4439                           ;doprnt.c: 529: unsigned len;
  4440                           ;doprnt.c: 530: const char * cp;
  4441                           ;doprnt.c: 533: *ap = __va_start();
  4442                           
  4443                           ;incstack = 0
  4444  000012  0EBF               	movlw	low (?_printf+2)
  4445  000014  0100               	movlb	0	; () banked
  4446  000016  6FD5               	movwf	printf@ap& (0+255),b
  4447  000018  0E00               	movlw	high (?_printf+2)
  4448  00001A  0100               	movlb	0	; () banked
  4449  00001C  6FD6               	movwf	(printf@ap+1)& (0+255),b
  4450                           
  4451                           ;doprnt.c: 536: while(c = *f++) {
  4452  00001E  EFF5  F006         	goto	l6606
  4453  000022                     l6240:
  4454                           
  4455                           ; BSR set to: 0
  4456                           ;doprnt.c: 538: if(c != '%')
  4457  000022  0E25               	movlw	37
  4458  000024  0100               	movlb	0	; () banked
  4459  000026  19EA               	xorwf	printf@c& (0+255),w,b
  4460  000028  B4D8               	btfsc	status,2,c
  4461  00002A  D006               	goto	l6244
  4462                           
  4463                           ; BSR set to: 0
  4464                           ;doprnt.c: 540: {
  4465                           ;doprnt.c: 541: (putch(c) );
  4466  00002C  0100               	movlb	0	; () banked
  4467  00002E  51EA               	movf	printf@c& (0+255),w,b
  4468  000030  EC36  F01C         	call	_putch
  4469                           
  4470                           ;doprnt.c: 542: continue;
  4471  000034  EFF5  F006         	goto	l6606
  4472  000038                     l6244:
  4473                           
  4474                           ;doprnt.c: 543: }
  4475                           ;doprnt.c: 546: width = 0;
  4476  000038  0E00               	movlw	0
  4477  00003A  0100               	movlb	0	; () banked
  4478  00003C  6FE5               	movwf	(printf@width+1)& (0+255),b
  4479  00003E  0E00               	movlw	0
  4480  000040  6FE4               	movwf	printf@width& (0+255),b
  4481                           
  4482                           ;doprnt.c: 548: flag = 0;
  4483  000042  0E00               	movlw	0
  4484  000044  0100               	movlb	0	; () banked
  4485  000046  6FE7               	movwf	(printf@flag+1)& (0+255),b
  4486  000048  0E00               	movlw	0
  4487  00004A  6FE6               	movwf	printf@flag& (0+255),b
  4488                           
  4489                           ; BSR set to: 0
  4490                           ;doprnt.c: 551: switch(*f) {
  4491                           
  4492                           ;doprnt.c: 550: for(;;) {
  4493  00004C  D005               	goto	l6250
  4494  00004E                     l6246:
  4495                           
  4496                           ;doprnt.c: 580: flag |= 0x04;
  4497  00004E  0100               	movlb	0	; () banked
  4498  000050  85E6               	bsf	printf@flag& (0+255),2,b
  4499                           
  4500                           ;doprnt.c: 581: f++;
  4501  000052  0100               	movlb	0	; () banked
  4502  000054  4BBD               	infsnz	printf@f& (0+255),f,b
  4503  000056  2BBE               	incf	(printf@f+1)& (0+255),f,b
  4504  000058                     l6250:
  4505  000058  C0BD  FFF6         	movff	printf@f,tblptrl
  4506  00005C  C0BE  FFF7         	movff	printf@f+1,tblptrh
  4507  000060                     	if	0	;tblptru may be non-zero
  4508  000060                     	endif
  4509  000060                     	if	0	;tblptru may be non-zero
  4510  000060                     	endif
  4511  000060  0008               	tblrd		*
  4512  000062  50F5               	movf	tablat,w,c
  4513                           
  4514                           ; Switch size 1, requested type "space"
  4515                           ; Number of cases is 1, Range of values is 48 to 48
  4516                           ; switch strategies available:
  4517                           ; Name         Instructions Cycles
  4518                           ; simple_byte            4     3 (average)
  4519                           ;	Chosen strategy is simple_byte
  4520  000064  0A30               	xorlw	48	; case 48
  4521  000066  B4D8               	btfsc	status,2,c
  4522  000068  D7F2               	goto	l6246
  4523                           
  4524                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4525                           
  4526                           ;doprnt.c: 586: }
  4527                           
  4528                           ;doprnt.c: 585: break;
  4529  00006A  C0BD  FFF6         	movff	printf@f,tblptrl
  4530  00006E  C0BE  FFF7         	movff	printf@f+1,tblptrh
  4531  000072                     	if	0	;tblptru may be non-zero
  4532  000072                     	endif
  4533  000072                     	if	0	;tblptru may be non-zero
  4534  000072                     	endif
  4535  000072  0008               	tblrd		*
  4536  000074  50F5               	movf	tablat,w,c
  4537  000076  EC67  F01C         	call	_isdigit
  4538  00007A  A0D8               	btfss	status,0,c
  4539  00007C  D03F               	goto	l6264
  4540                           
  4541                           ;doprnt.c: 598: width = 0;
  4542  00007E  0E00               	movlw	0
  4543  000080  0100               	movlb	0	; () banked
  4544  000082  6FE5               	movwf	(printf@width+1)& (0+255),b
  4545  000084  0E00               	movlw	0
  4546  000086  6FE4               	movwf	printf@width& (0+255),b
  4547  000088                     l6256:
  4548                           
  4549                           ;doprnt.c: 600: width *= 10;
  4550  000088  C0E4  F031         	movff	printf@width,___wmul@multiplier
  4551  00008C  C0E5  F032         	movff	printf@width+1,___wmul@multiplier+1
  4552  000090  0E00               	movlw	0
  4553  000092  6E34               	movwf	___wmul@multiplicand+1,c
  4554  000094  0E0A               	movlw	10
  4555  000096  6E33               	movwf	___wmul@multiplicand,c
  4556  000098  EC11  F01C         	call	___wmul	;wreg free
  4557  00009C  C031  F0E4         	movff	?___wmul,printf@width
  4558  0000A0  C032  F0E5         	movff	?___wmul+1,printf@width+1
  4559                           
  4560                           ;doprnt.c: 601: width += *f++ - '0';
  4561  0000A4  0ED0               	movlw	208
  4562  0000A6  0100               	movlb	0	; () banked
  4563  0000A8  6FC7               	movwf	??_printf& (0+255),b
  4564  0000AA  0EFF               	movlw	255
  4565  0000AC  0100               	movlb	0	; () banked
  4566  0000AE  6FC8               	movwf	(??_printf+1)& (0+255),b
  4567  0000B0  C0BD  FFF6         	movff	printf@f,tblptrl
  4568  0000B4  C0BE  FFF7         	movff	printf@f+1,tblptrh
  4569  0000B8                     	if	0	;tblptru may be non-zero
  4570  0000B8                     	endif
  4571  0000B8                     	if	0	;tblptru may be non-zero
  4572  0000B8                     	endif
  4573  0000B8  0008               	tblrd		*
  4574  0000BA  50F5               	movf	tablat,w,c
  4575  0000BC  0100               	movlb	0	; () banked
  4576  0000BE  6FC9               	movwf	(??_printf+2)& (0+255),b
  4577  0000C0  6BCA               	clrf	(??_printf+3)& (0+255),b
  4578  0000C2  0100               	movlb	0	; () banked
  4579  0000C4  51C7               	movf	??_printf& (0+255),w,b
  4580  0000C6  0100               	movlb	0	; () banked
  4581  0000C8  27C9               	addwf	(??_printf+2)& (0+255),f,b
  4582  0000CA  0100               	movlb	0	; () banked
  4583  0000CC  51C8               	movf	(??_printf+1)& (0+255),w,b
  4584  0000CE  0100               	movlb	0	; () banked
  4585  0000D0  23CA               	addwfc	(??_printf+3)& (0+255),f,b
  4586  0000D2  0100               	movlb	0	; () banked
  4587  0000D4  51C9               	movf	(??_printf+2)& (0+255),w,b
  4588  0000D6  0100               	movlb	0	; () banked
  4589  0000D8  27E4               	addwf	printf@width& (0+255),f,b
  4590  0000DA  0100               	movlb	0	; () banked
  4591  0000DC  51CA               	movf	(??_printf+3)& (0+255),w,b
  4592  0000DE  0100               	movlb	0	; () banked
  4593  0000E0  23E5               	addwfc	(printf@width+1)& (0+255),f,b
  4594                           
  4595                           ; BSR set to: 0
  4596  0000E2  0100               	movlb	0	; () banked
  4597  0000E4  4BBD               	infsnz	printf@f& (0+255),f,b
  4598  0000E6  2BBE               	incf	(printf@f+1)& (0+255),f,b
  4599                           
  4600                           ; BSR set to: 0
  4601                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4602  0000E8  C0BD  FFF6         	movff	printf@f,tblptrl
  4603  0000EC  C0BE  FFF7         	movff	printf@f+1,tblptrh
  4604  0000F0                     	if	0	;tblptru may be non-zero
  4605  0000F0                     	endif
  4606  0000F0                     	if	0	;tblptru may be non-zero
  4607  0000F0                     	endif
  4608  0000F0  0008               	tblrd		*
  4609  0000F2  50F5               	movf	tablat,w,c
  4610  0000F4  EC67  F01C         	call	_isdigit
  4611  0000F8  B0D8               	btfsc	status,0,c
  4612  0000FA  D7C6               	goto	l6256
  4613  0000FC                     l6264:
  4614                           
  4615                           ;doprnt.c: 608: }
  4616                           ;doprnt.c: 611: if(*f == '.') {
  4617  0000FC  C0BD  FFF6         	movff	printf@f,tblptrl
  4618  000100  C0BE  FFF7         	movff	printf@f+1,tblptrh
  4619  000104                     	if	0	;tblptru may be non-zero
  4620  000104                     	endif
  4621  000104                     	if	0	;tblptru may be non-zero
  4622  000104                     	endif
  4623  000104  0008               	tblrd		*
  4624  000106  50F5               	movf	tablat,w,c
  4625  000108  0A2E               	xorlw	46
  4626  00010A  A4D8               	btfss	status,2,c
  4627  00010C  D034               	goto	l6276
  4628                           
  4629                           ;doprnt.c: 612: flag |= 0x4000;
  4630  00010E  0100               	movlb	0	; () banked
  4631  000110  8DE7               	bsf	(printf@flag+1)& (0+255),6,b
  4632                           
  4633                           ;doprnt.c: 613: f++;
  4634  000112  0100               	movlb	0	; () banked
  4635  000114  4BBD               	infsnz	printf@f& (0+255),f,b
  4636  000116  2BBE               	incf	(printf@f+1)& (0+255),f,b
  4637                           
  4638                           ; BSR set to: 0
  4639                           ;doprnt.c: 620: {
  4640                           ;doprnt.c: 621: prec = 0;
  4641  000118  0E00               	movlw	0
  4642  00011A  0100               	movlb	0	; () banked
  4643  00011C  6FE9               	movwf	(printf@prec+1)& (0+255),b
  4644  00011E  0E00               	movlw	0
  4645  000120  6FE8               	movwf	printf@prec& (0+255),b
  4646                           
  4647                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  4648  000122  D01E               	goto	l6274
  4649  000124                     l6270:
  4650                           
  4651                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  4652  000124  C0E8  F031         	movff	printf@prec,___wmul@multiplier
  4653  000128  C0E9  F032         	movff	printf@prec+1,___wmul@multiplier+1
  4654  00012C  0E00               	movlw	0
  4655  00012E  6E34               	movwf	___wmul@multiplicand+1,c
  4656  000130  0E0A               	movlw	10
  4657  000132  6E33               	movwf	___wmul@multiplicand,c
  4658  000134  EC11  F01C         	call	___wmul	;wreg free
  4659  000138  C0BD  FFF6         	movff	printf@f,tblptrl
  4660  00013C  C0BE  FFF7         	movff	printf@f+1,tblptrh
  4661  000140                     	if	0	;tblptru may be non-zero
  4662  000140                     	endif
  4663  000140                     	if	0	;tblptru may be non-zero
  4664  000140                     	endif
  4665  000140  0008               	tblrd		*
  4666  000142  50F5               	movf	tablat,w,c
  4667  000144  2631               	addwf	?___wmul,f,c
  4668  000146  0E00               	movlw	0
  4669  000148  2232               	addwfc	?___wmul+1,f,c
  4670  00014A  0ED0               	movlw	208
  4671  00014C  2431               	addwf	?___wmul,w,c
  4672  00014E  0100               	movlb	0	; () banked
  4673  000150  6FE8               	movwf	printf@prec& (0+255),b
  4674  000152  0EFF               	movlw	255
  4675  000154  2032               	addwfc	?___wmul+1,w,c
  4676  000156  0100               	movlb	0	; () banked
  4677  000158  6FE9               	movwf	(printf@prec+1)& (0+255),b
  4678                           
  4679                           ; BSR set to: 0
  4680  00015A  0100               	movlb	0	; () banked
  4681  00015C  4BBD               	infsnz	printf@f& (0+255),f,b
  4682  00015E  2BBE               	incf	(printf@f+1)& (0+255),f,b
  4683  000160                     l6274:
  4684                           
  4685                           ; BSR set to: 0
  4686  000160  C0BD  FFF6         	movff	printf@f,tblptrl
  4687  000164  C0BE  FFF7         	movff	printf@f+1,tblptrh
  4688  000168                     	if	0	;tblptru may be non-zero
  4689  000168                     	endif
  4690  000168                     	if	0	;tblptru may be non-zero
  4691  000168                     	endif
  4692  000168  0008               	tblrd		*
  4693  00016A  50F5               	movf	tablat,w,c
  4694  00016C  EC67  F01C         	call	_isdigit
  4695  000170  A0D8               	btfss	status,0,c
  4696  000172  D07D               	goto	l6318
  4697  000174  D7D7               	goto	l6270
  4698  000176                     l6276:
  4699                           
  4700                           ;doprnt.c: 626: prec = 0;
  4701  000176  0E00               	movlw	0
  4702  000178  0100               	movlb	0	; () banked
  4703  00017A  6FE9               	movwf	(printf@prec+1)& (0+255),b
  4704  00017C  0E00               	movlw	0
  4705  00017E  6FE8               	movwf	printf@prec& (0+255),b
  4706                           
  4707                           ; BSR set to: 0
  4708                           ;doprnt.c: 628: flag |= 0x1000;
  4709  000180  0100               	movlb	0	; () banked
  4710  000182  89E7               	bsf	(printf@flag+1)& (0+255),4,b
  4711                           
  4712                           ; BSR set to: 0
  4713                           ;doprnt.c: 635: switch(c = *f++) {
  4714                           
  4715                           ;doprnt.c: 630: }
  4716                           ;doprnt.c: 633: loop:
  4717                           
  4718                           ; BSR set to: 0
  4719  000184  D074               	goto	l6318
  4720  000186                     l6280:
  4721                           
  4722                           ; BSR set to: 0
  4723                           ;doprnt.c: 643: flag |= 0x10;
  4724  000186  0100               	movlb	0	; () banked
  4725  000188  89E6               	bsf	printf@flag& (0+255),4,b
  4726                           
  4727                           ;doprnt.c: 644: goto loop;
  4728  00018A  D071               	goto	l6318
  4729  00018C                     l6282:
  4730                           
  4731                           ; BSR set to: 0
  4732                           ;doprnt.c: 663: flag |= 0x400;
  4733  00018C  0100               	movlb	0	; () banked
  4734  00018E  85E7               	bsf	(printf@flag+1)& (0+255),2,b
  4735                           
  4736                           ; BSR set to: 0
  4737                           ;doprnt.c: 698: case 'i':
  4738                           ;doprnt.c: 699: break;
  4739                           
  4740                           ; BSR set to: 0
  4741                           
  4742                           ;doprnt.c: 697: case 'd':
  4743                           
  4744                           ;doprnt.c: 664: break;
  4745  000190  D090               	goto	l6320
  4746  000192                     l6284:
  4747                           
  4748                           ; BSR set to: 0
  4749                           ;doprnt.c: 721: flag |= 0x80;
  4750  000192  0100               	movlb	0	; () banked
  4751  000194  8FE6               	bsf	printf@flag& (0+255),7,b
  4752                           
  4753                           ;doprnt.c: 723: break;
  4754  000196  D08D               	goto	l6320
  4755  000198                     l6286:
  4756                           
  4757                           ; BSR set to: 0
  4758                           ;doprnt.c: 753: if(prec && prec < len)
  4759  000198  0100               	movlb	0	; () banked
  4760  00019A  51E8               	movf	printf@prec& (0+255),w,b
  4761  00019C  0100               	movlb	0	; () banked
  4762  00019E  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  4763  0001A0  B4D8               	btfsc	status,2,c
  4764  0001A2  D00E               	goto	l6292
  4765                           
  4766                           ; BSR set to: 0
  4767  0001A4  0100               	movlb	0	; () banked
  4768  0001A6  51D3               	movf	printf@len& (0+255),w,b
  4769  0001A8  0100               	movlb	0	; () banked
  4770  0001AA  5DE8               	subwf	printf@prec& (0+255),w,b
  4771  0001AC  0100               	movlb	0	; () banked
  4772  0001AE  51D4               	movf	(printf@len+1)& (0+255),w,b
  4773  0001B0  0100               	movlb	0	; () banked
  4774  0001B2  59E9               	subwfb	(printf@prec+1)& (0+255),w,b
  4775  0001B4  B0D8               	btfsc	status,0,c
  4776  0001B6  D004               	goto	l6292
  4777                           
  4778                           ; BSR set to: 0
  4779                           ;doprnt.c: 754: len = prec;
  4780  0001B8  C0E8  F0D3         	movff	printf@prec,printf@len
  4781  0001BC  C0E9  F0D4         	movff	printf@prec+1,printf@len+1
  4782  0001C0                     l6292:
  4783                           
  4784                           ; BSR set to: 0
  4785                           ;doprnt.c: 757: if(width > len)
  4786  0001C0  0100               	movlb	0	; () banked
  4787  0001C2  51E4               	movf	printf@width& (0+255),w,b
  4788  0001C4  0100               	movlb	0	; () banked
  4789  0001C6  5DD3               	subwf	printf@len& (0+255),w,b
  4790  0001C8  0100               	movlb	0	; () banked
  4791  0001CA  51E5               	movf	(printf@width+1)& (0+255),w,b
  4792  0001CC  0100               	movlb	0	; () banked
  4793  0001CE  59D4               	subwfb	(printf@len+1)& (0+255),w,b
  4794  0001D0  B0D8               	btfsc	status,0,c
  4795  0001D2  D009               	goto	l6296
  4796                           
  4797                           ; BSR set to: 0
  4798                           ;doprnt.c: 758: width -= len;
  4799  0001D4  0100               	movlb	0	; () banked
  4800  0001D6  51D3               	movf	printf@len& (0+255),w,b
  4801  0001D8  0100               	movlb	0	; () banked
  4802  0001DA  5FE4               	subwf	printf@width& (0+255),f,b
  4803  0001DC  0100               	movlb	0	; () banked
  4804  0001DE  51D4               	movf	(printf@len+1)& (0+255),w,b
  4805  0001E0  0100               	movlb	0	; () banked
  4806  0001E2  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  4807  0001E4  D009               	goto	l6300
  4808  0001E6                     l6296:
  4809                           
  4810                           ; BSR set to: 0
  4811                           ;doprnt.c: 759: else
  4812                           ;doprnt.c: 760: width = 0;
  4813  0001E6  0E00               	movlw	0
  4814  0001E8  0100               	movlb	0	; () banked
  4815  0001EA  6FE5               	movwf	(printf@width+1)& (0+255),b
  4816  0001EC  0E00               	movlw	0
  4817  0001EE  6FE4               	movwf	printf@width& (0+255),b
  4818                           
  4819                           ; BSR set to: 0
  4820                           ;doprnt.c: 764: while(width--)
  4821  0001F0  D003               	goto	l6300
  4822  0001F2                     l6298:
  4823                           
  4824                           ; BSR set to: 0
  4825                           ;doprnt.c: 765: (putch(' ') );
  4826  0001F2  0E20               	movlw	32
  4827  0001F4  EC36  F01C         	call	_putch
  4828  0001F8                     l6300:
  4829  0001F8  0100               	movlb	0	; () banked
  4830  0001FA  07E4               	decf	printf@width& (0+255),f,b
  4831  0001FC  A0D8               	btfss	status,0,c
  4832  0001FE  07E5               	decf	(printf@width+1)& (0+255),f,b
  4833  000200  0100               	movlb	0	; () banked
  4834  000202  29E4               	incf	printf@width& (0+255),w,b
  4835  000204  E1F6               	bnz	l6298
  4836  000206  0100               	movlb	0	; () banked
  4837  000208  29E5               	incf	(printf@width+1)& (0+255),w,b
  4838  00020A  B4D8               	btfsc	status,2,c
  4839  00020C  D00B               	goto	l6306
  4840  00020E  D7F1               	goto	l6298
  4841  000210                     l6302:
  4842                           
  4843                           ; BSR set to: 0
  4844                           ;doprnt.c: 768: (putch(*cp++) );
  4845  000210  C0D1  FFD9         	movff	printf@cp,fsr2l
  4846  000214  C0D2  FFDA         	movff	printf@cp+1,fsr2h
  4847  000218  50DF               	movf	indf2,w,c
  4848  00021A  EC36  F01C         	call	_putch
  4849  00021E  0100               	movlb	0	; () banked
  4850  000220  4BD1               	infsnz	printf@cp& (0+255),f,b
  4851  000222  2BD2               	incf	(printf@cp+1)& (0+255),f,b
  4852  000224                     l6306:
  4853                           
  4854                           ; BSR set to: 0
  4855  000224  0100               	movlb	0	; () banked
  4856  000226  07D3               	decf	printf@len& (0+255),f,b
  4857  000228  A0D8               	btfss	status,0,c
  4858  00022A  07D4               	decf	(printf@len+1)& (0+255),f,b
  4859  00022C  0100               	movlb	0	; () banked
  4860  00022E  29D3               	incf	printf@len& (0+255),w,b
  4861  000230  E1EF               	bnz	l6302
  4862  000232  0100               	movlb	0	; () banked
  4863  000234  29D4               	incf	(printf@len+1)& (0+255),w,b
  4864  000236  B4D8               	btfsc	status,2,c
  4865  000238  EFF5  F006         	goto	l6606
  4866  00023C  D7E9               	goto	l6302
  4867  00023E                     l6308:
  4868                           
  4869                           ; BSR set to: 0
  4870                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4871  00023E  C0D5  FFD9         	movff	printf@ap,fsr2l
  4872  000242  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  4873  000246  50DF               	movf	indf2,w,c
  4874  000248  0100               	movlb	0	; () banked
  4875  00024A  6FEA               	movwf	printf@c& (0+255),b
  4876                           
  4877                           ; BSR set to: 0
  4878  00024C  0E02               	movlw	2
  4879  00024E  0100               	movlb	0	; () banked
  4880  000250  27D5               	addwf	printf@ap& (0+255),f,b
  4881  000252  0E00               	movlw	0
  4882  000254  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  4883  000256                     l6312:
  4884                           
  4885                           ; BSR set to: 0
  4886                           ;doprnt.c: 805: cp = (char *)&c;
  4887  000256  0EEA               	movlw	low printf@c
  4888  000258  0100               	movlb	0	; () banked
  4889  00025A  6FD1               	movwf	printf@cp& (0+255),b
  4890  00025C  0E00               	movlw	high printf@c
  4891  00025E  0100               	movlb	0	; () banked
  4892  000260  6FD2               	movwf	(printf@cp+1)& (0+255),b
  4893                           
  4894                           ; BSR set to: 0
  4895                           ;doprnt.c: 806: len = 1;
  4896  000262  0E00               	movlw	0
  4897  000264  0100               	movlb	0	; () banked
  4898  000266  6FD4               	movwf	(printf@len+1)& (0+255),b
  4899  000268  0E01               	movlw	1
  4900  00026A  6FD3               	movwf	printf@len& (0+255),b
  4901                           
  4902                           ;doprnt.c: 807: goto dostring;
  4903  00026C  D795               	goto	l6286
  4904  00026E                     l6318:
  4905  00026E  C0BD  FFF6         	movff	printf@f,tblptrl
  4906  000272  C0BE  FFF7         	movff	printf@f+1,tblptrh
  4907  000276  0100               	movlb	0	; () banked
  4908  000278  4BBD               	infsnz	printf@f& (0+255),f,b
  4909  00027A  2BBE               	incf	(printf@f+1)& (0+255),f,b
  4910  00027C                     	if	0	;tblptru may be non-zero
  4911  00027C                     	endif
  4912  00027C                     	if	0	;tblptru may be non-zero
  4913  00027C                     	endif
  4914  00027C  0008               	tblrd		*
  4915  00027E  CFF5 F0EA          	movff	tablat,printf@c
  4916  000282  0100               	movlb	0	; () banked
  4917  000284  51EA               	movf	printf@c& (0+255),w,b
  4918                           
  4919                           ; Switch size 1, requested type "space"
  4920                           ; Number of cases is 7, Range of values is 0 to 120
  4921                           ; switch strategies available:
  4922                           ; Name         Instructions Cycles
  4923                           ; simple_byte           22    12 (average)
  4924                           ;	Chosen strategy is simple_byte
  4925  000286  0A00               	xorlw	0	; case 0
  4926  000288  B4D8               	btfsc	status,2,c
  4927  00028A  0012               	return	
  4928  00028C  0A63               	xorlw	99	; case 99
  4929  00028E  B4D8               	btfsc	status,2,c
  4930  000290  D7D6               	goto	l6308
  4931  000292  0A07               	xorlw	7	; case 100
  4932  000294  B4D8               	btfsc	status,2,c
  4933  000296  D00D               	goto	l6320
  4934  000298  0A02               	xorlw	2	; case 102
  4935  00029A  B4D8               	btfsc	status,2,c
  4936  00029C  D777               	goto	l6282
  4937  00029E  0A0F               	xorlw	15	; case 105
  4938  0002A0  B4D8               	btfsc	status,2,c
  4939  0002A2  D007               	goto	l6320
  4940  0002A4  0A05               	xorlw	5	; case 108
  4941  0002A6  B4D8               	btfsc	status,2,c
  4942  0002A8  D76E               	goto	l6280
  4943  0002AA  0A14               	xorlw	20	; case 120
  4944  0002AC  B4D8               	btfsc	status,2,c
  4945  0002AE  D771               	goto	l6284
  4946  0002B0  D7D2               	goto	l6312
  4947  0002B2                     l6320:
  4948                           
  4949                           ; BSR set to: 0
  4950                           ;doprnt.c: 825: if(flag & (0x700)) {
  4951  0002B2  0E07               	movlw	7
  4952  0002B4  0100               	movlb	0	; () banked
  4953  0002B6  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  4954  0002B8  B4D8               	btfsc	status,2,c
  4955  0002BA  D36D               	goto	l735
  4956                           
  4957                           ; BSR set to: 0
  4958                           ;doprnt.c: 827: if(flag & 0x1000)
  4959  0002BC  0100               	movlb	0	; () banked
  4960  0002BE  A9E7               	btfss	(printf@flag+1)& (0+255),4,b
  4961  0002C0  D005               	goto	l6326
  4962                           
  4963                           ; BSR set to: 0
  4964                           ;doprnt.c: 829: prec = 6;
  4965  0002C2  0E00               	movlw	0
  4966  0002C4  0100               	movlb	0	; () banked
  4967  0002C6  6FE9               	movwf	(printf@prec+1)& (0+255),b
  4968  0002C8  0E06               	movlw	6
  4969  0002CA  6FE8               	movwf	printf@prec& (0+255),b
  4970  0002CC                     l6326:
  4971                           
  4972                           ; BSR set to: 0
  4973                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4974  0002CC  C0D5  FFD9         	movff	printf@ap,fsr2l
  4975  0002D0  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  4976  0002D4  CFDE F0DD          	movff	postinc2,printf@fval
  4977  0002D8  CFDE F0DE          	movff	postinc2,printf@fval+1
  4978  0002DC  CFDD F0DF          	movff	postdec2,printf@fval+2
  4979                           
  4980                           ; BSR set to: 0
  4981  0002E0  0E03               	movlw	3
  4982  0002E2  0100               	movlb	0	; () banked
  4983  0002E4  27D5               	addwf	printf@ap& (0+255),f,b
  4984  0002E6  0E00               	movlw	0
  4985  0002E8  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  4986                           
  4987                           ; BSR set to: 0
  4988                           ;doprnt.c: 831: if(fval < 0.0) {
  4989  0002EA  0100               	movlb	0	; () banked
  4990  0002EC  AFDF               	btfss	(printf@fval+2)& (0+255),7,b
  4991  0002EE  D011               	goto	l6336
  4992                           
  4993                           ; BSR set to: 0
  4994                           ;doprnt.c: 832: fval = -fval;
  4995  0002F0  C0DD  F023         	movff	printf@fval,___ftneg@f1
  4996  0002F4  C0DE  F024         	movff	printf@fval+1,___ftneg@f1+1
  4997  0002F8  C0DF  F025         	movff	printf@fval+2,___ftneg@f1+2
  4998  0002FC  EC24  F01C         	call	___ftneg	;wreg free
  4999  000300  C023  F0DD         	movff	?___ftneg,printf@fval
  5000  000304  C024  F0DE         	movff	?___ftneg+1,printf@fval+1
  5001  000308  C025  F0DF         	movff	?___ftneg+2,printf@fval+2
  5002                           
  5003                           ;doprnt.c: 833: flag |= 0x03;
  5004  00030C  0E03               	movlw	3
  5005  00030E  0100               	movlb	0	; () banked
  5006  000310  13E6               	iorwf	printf@flag& (0+255),f,b
  5007  000312                     l6336:
  5008                           
  5009                           ; BSR set to: 0
  5010                           ;doprnt.c: 834: }
  5011                           ;doprnt.c: 835: exp = 0;
  5012  000312  0E00               	movlw	0
  5013  000314  0100               	movlb	0	; () banked
  5014  000316  6FDC               	movwf	(printf@exp+1)& (0+255),b
  5015  000318  0E00               	movlw	0
  5016  00031A  6FDB               	movwf	printf@exp& (0+255),b
  5017                           
  5018                           ; BSR set to: 0
  5019                           ;doprnt.c: 836: if( fval!=0) {
  5020  00031C  0100               	movlb	0	; () banked
  5021  00031E  51DD               	movf	printf@fval& (0+255),w,b
  5022  000320  0100               	movlb	0	; () banked
  5023  000322  11DE               	iorwf	(printf@fval+1)& (0+255),w,b
  5024  000324  0100               	movlb	0	; () banked
  5025  000326  11DF               	iorwf	(printf@fval+2)& (0+255),w,b
  5026  000328  B4D8               	btfsc	status,2,c
  5027  00032A  D091               	goto	l6364
  5028                           
  5029                           ; BSR set to: 0
  5030                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  5031  00032C  0E82               	movlw	130
  5032  00032E  0100               	movlb	0	; () banked
  5033  000330  6FC7               	movwf	??_printf& (0+255),b
  5034  000332  0EFF               	movlw	255
  5035  000334  0100               	movlb	0	; () banked
  5036  000336  6FC8               	movwf	(??_printf+1)& (0+255),b
  5037  000338  C0DD  F0C9         	movff	printf@fval,??_printf+2
  5038  00033C  C0DE  F0CA         	movff	printf@fval+1,??_printf+3
  5039  000340  C0DF  F0CB         	movff	printf@fval+2,??_printf+4
  5040  000344  C0E0  F0CC         	movff	printf@fval+3,??_printf+5
  5041  000348  0E10               	movlw	16
  5042  00034A  D006               	goto	u6510
  5043  00034C                     u6515:
  5044  00034C  0100               	movlb	0	; () banked
  5045  00034E  90D8               	bcf	status,0,c
  5046  000350  33CC               	rrcf	(??_printf+5)& (0+255),f,b
  5047  000352  33CB               	rrcf	(??_printf+4)& (0+255),f,b
  5048  000354  33CA               	rrcf	(??_printf+3)& (0+255),f,b
  5049  000356  33C9               	rrcf	(??_printf+2)& (0+255),f,b
  5050  000358                     u6510:
  5051  000358  2EE8               	decfsz	wreg,f,c
  5052  00035A  D7F8               	goto	u6515
  5053  00035C  0100               	movlb	0	; () banked
  5054  00035E  51C9               	movf	(??_printf+2)& (0+255),w,b
  5055  000360  0100               	movlb	0	; () banked
  5056  000362  25C7               	addwf	??_printf& (0+255),w,b
  5057  000364  0100               	movlb	0	; () banked
  5058  000366  6FDB               	movwf	printf@exp& (0+255),b
  5059  000368  0E00               	movlw	0
  5060  00036A  0100               	movlb	0	; () banked
  5061  00036C  21C8               	addwfc	(??_printf+1)& (0+255),w,b
  5062  00036E  0100               	movlb	0	; () banked
  5063  000370  6FDC               	movwf	(printf@exp+1)& (0+255),b
  5064                           
  5065                           ; BSR set to: 0
  5066                           ;doprnt.c: 838: exp--;
  5067  000372  0100               	movlb	0	; () banked
  5068  000374  07DB               	decf	printf@exp& (0+255),f,b
  5069  000376  A0D8               	btfss	status,0,c
  5070  000378  07DC               	decf	(printf@exp+1)& (0+255),f,b
  5071                           
  5072                           ; BSR set to: 0
  5073                           ;doprnt.c: 839: exp *= 3;
  5074  00037A  C0DB  F031         	movff	printf@exp,___wmul@multiplier
  5075  00037E  C0DC  F032         	movff	printf@exp+1,___wmul@multiplier+1
  5076  000382  0E00               	movlw	0
  5077  000384  6E34               	movwf	___wmul@multiplicand+1,c
  5078  000386  0E03               	movlw	3
  5079  000388  6E33               	movwf	___wmul@multiplicand,c
  5080  00038A  EC11  F01C         	call	___wmul	;wreg free
  5081  00038E  C031  F0DB         	movff	?___wmul,printf@exp
  5082  000392  C032  F0DC         	movff	?___wmul+1,printf@exp+1
  5083                           
  5084                           ;doprnt.c: 840: exp /= 10;
  5085  000396  C0DB  F029         	movff	printf@exp,___awdiv@dividend
  5086  00039A  C0DC  F02A         	movff	printf@exp+1,___awdiv@dividend+1
  5087  00039E  0E00               	movlw	0
  5088  0003A0  6E2C               	movwf	___awdiv@divisor+1,c
  5089  0003A2  0E0A               	movlw	10
  5090  0003A4  6E2B               	movwf	___awdiv@divisor,c
  5091  0003A6  ECB1  F018         	call	___awdiv	;wreg free
  5092  0003AA  C029  F0DB         	movff	?___awdiv,printf@exp
  5093  0003AE  C02A  F0DC         	movff	?___awdiv+1,printf@exp+1
  5094                           
  5095                           ;doprnt.c: 841: if(exp < 0)
  5096  0003B2  0100               	movlb	0	; () banked
  5097  0003B4  AFDC               	btfss	(printf@exp+1)& (0+255),7,b
  5098  0003B6  D004               	goto	l6352
  5099                           
  5100                           ; BSR set to: 0
  5101                           ;doprnt.c: 842: exp--;
  5102  0003B8  0100               	movlb	0	; () banked
  5103  0003BA  07DB               	decf	printf@exp& (0+255),f,b
  5104  0003BC  A0D8               	btfss	status,0,c
  5105  0003BE  07DC               	decf	(printf@exp+1)& (0+255),f,b
  5106  0003C0                     l6352:
  5107                           
  5108                           ; BSR set to: 0
  5109                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  5110  0003C0  0100               	movlb	0	; () banked
  5111  0003C2  51DB               	movf	printf@exp& (0+255),w,b
  5112  0003C4  0800               	sublw	0
  5113  0003C6  EC79  F009         	call	_scale
  5114  0003CA  C098  F0D7         	movff	?_scale,printf@tmpval
  5115  0003CE  C099  F0D8         	movff	?_scale+1,printf@tmpval+1
  5116  0003D2  C09A  F0D9         	movff	?_scale+2,printf@tmpval+2
  5117                           
  5118                           ;doprnt.c: 847: tmpval.integ *= fval;
  5119  0003D6  C0D7  F089         	movff	printf@tmpval,___ftmul@f1
  5120  0003DA  C0D8  F08A         	movff	printf@tmpval+1,___ftmul@f1+1
  5121  0003DE  C0D9  F08B         	movff	printf@tmpval+2,___ftmul@f1+2
  5122  0003E2  C0DD  F08C         	movff	printf@fval,___ftmul@f2
  5123  0003E6  C0DE  F08D         	movff	printf@fval+1,___ftmul@f2+1
  5124  0003EA  C0DF  F08E         	movff	printf@fval+2,___ftmul@f2+2
  5125  0003EE  ECCB  F00F         	call	___ftmul	;wreg free
  5126  0003F2  C089  F0D7         	movff	?___ftmul,printf@tmpval
  5127  0003F6  C08A  F0D8         	movff	?___ftmul+1,printf@tmpval+1
  5128  0003FA  C08B  F0D9         	movff	?___ftmul+2,printf@tmpval+2
  5129                           
  5130                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  5131  0003FE  C0D7  F02F         	movff	printf@tmpval,___ftge@ff1
  5132  000402  C0D8  F030         	movff	printf@tmpval+1,___ftge@ff1+1
  5133  000406  C0D9  F031         	movff	printf@tmpval+2,___ftge@ff1+2
  5134  00040A  0E00               	movlw	0
  5135  00040C  6E32               	movwf	___ftge@ff2,c
  5136  00040E  0E80               	movlw	128
  5137  000410  6E33               	movwf	___ftge@ff2+1,c
  5138  000412  0E3F               	movlw	63
  5139  000414  6E34               	movwf	___ftge@ff2+2,c
  5140  000416  EC23  F018         	call	___ftge	;wreg free
  5141  00041A  B0D8               	btfsc	status,0,c
  5142  00041C  D005               	goto	l6360
  5143                           
  5144                           ;doprnt.c: 849: exp--;
  5145  00041E  0100               	movlb	0	; () banked
  5146  000420  07DB               	decf	printf@exp& (0+255),f,b
  5147  000422  A0D8               	btfss	status,0,c
  5148  000424  07DC               	decf	(printf@exp+1)& (0+255),f,b
  5149  000426  D013               	goto	l6364
  5150  000428                     l6360:
  5151                           
  5152                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  5153  000428  C0D7  F02F         	movff	printf@tmpval,___ftge@ff1
  5154  00042C  C0D8  F030         	movff	printf@tmpval+1,___ftge@ff1+1
  5155  000430  C0D9  F031         	movff	printf@tmpval+2,___ftge@ff1+2
  5156  000434  0E00               	movlw	0
  5157  000436  6E32               	movwf	___ftge@ff2,c
  5158  000438  0E20               	movlw	32
  5159  00043A  6E33               	movwf	___ftge@ff2+1,c
  5160  00043C  0E41               	movlw	65
  5161  00043E  6E34               	movwf	___ftge@ff2+2,c
  5162  000440  EC23  F018         	call	___ftge	;wreg free
  5163  000444  A0D8               	btfss	status,0,c
  5164  000446  D003               	goto	l6364
  5165                           
  5166                           ;doprnt.c: 851: exp++;
  5167  000448  0100               	movlb	0	; () banked
  5168  00044A  4BDB               	infsnz	printf@exp& (0+255),f,b
  5169  00044C  2BDC               	incf	(printf@exp+1)& (0+255),f,b
  5170  00044E                     l6364:
  5171                           
  5172                           ;doprnt.c: 852: }
  5173                           ;doprnt.c: 1112: if(prec <= 12)
  5174  00044E  0100               	movlb	0	; () banked
  5175  000450  BFE9               	btfsc	(printf@prec+1)& (0+255),7,b
  5176  000452  D008               	goto	l6366
  5177  000454  0100               	movlb	0	; () banked
  5178  000456  51E9               	movf	(printf@prec+1)& (0+255),w,b
  5179  000458  E11D               	bnz	l6368
  5180  00045A  0E0D               	movlw	13
  5181  00045C  0100               	movlb	0	; () banked
  5182  00045E  5DE8               	subwf	printf@prec& (0+255),w,b
  5183  000460  B0D8               	btfsc	status,0,c
  5184  000462  D018               	goto	l6368
  5185  000464                     l6366:
  5186                           
  5187                           ; BSR set to: 0
  5188                           ;doprnt.c: 1113: fval += fround(prec);
  5189  000464  C0DD  F0A2         	movff	printf@fval,___ftadd@f1
  5190  000468  C0DE  F0A3         	movff	printf@fval+1,___ftadd@f1+1
  5191  00046C  C0DF  F0A4         	movff	printf@fval+2,___ftadd@f1+2
  5192  000470  0100               	movlb	0	; () banked
  5193  000472  51E8               	movf	printf@prec& (0+255),w,b
  5194  000474  EC9B  F00E         	call	_fround
  5195  000478  C098  F0A5         	movff	?_fround,___ftadd@f2
  5196  00047C  C099  F0A6         	movff	?_fround+1,___ftadd@f2+1
  5197  000480  C09A  F0A7         	movff	?_fround+2,___ftadd@f2+2
  5198  000484  EC67  F00D         	call	___ftadd	;wreg free
  5199  000488  C0A2  F0DD         	movff	?___ftadd,printf@fval
  5200  00048C  C0A3  F0DE         	movff	?___ftadd+1,printf@fval+1
  5201  000490  C0A4  F0DF         	movff	?___ftadd+2,printf@fval+2
  5202  000494                     l6368:
  5203                           
  5204                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  5205  000494  0100               	movlb	0	; () banked
  5206  000496  BFDC               	btfsc	(printf@exp+1)& (0+255),7,b
  5207  000498  D008               	goto	l6370
  5208  00049A  0100               	movlb	0	; () banked
  5209  00049C  51DC               	movf	(printf@exp+1)& (0+255),w,b
  5210  00049E  E12A               	bnz	l6376
  5211  0004A0  0E0A               	movlw	10
  5212  0004A2  0100               	movlb	0	; () banked
  5213  0004A4  5DDB               	subwf	printf@exp& (0+255),w,b
  5214  0004A6  B0D8               	btfsc	status,0,c
  5215  0004A8  D025               	goto	l6376
  5216  0004AA                     l6370:
  5217                           
  5218                           ; BSR set to: 0
  5219  0004AA  0100               	movlb	0	; () banked
  5220  0004AC  51DD               	movf	printf@fval& (0+255),w,b
  5221  0004AE  0100               	movlb	0	; () banked
  5222  0004B0  11DE               	iorwf	(printf@fval+1)& (0+255),w,b
  5223  0004B2  0100               	movlb	0	; () banked
  5224  0004B4  11DF               	iorwf	(printf@fval+2)& (0+255),w,b
  5225  0004B6  B4D8               	btfsc	status,2,c
  5226  0004B8  D05F               	goto	l6390
  5227                           
  5228                           ; BSR set to: 0
  5229  0004BA  C0DD  F0AE         	movff	printf@fval,___fttol@f1
  5230  0004BE  C0DE  F0AF         	movff	printf@fval+1,___fttol@f1+1
  5231  0004C2  C0DF  F0B0         	movff	printf@fval+2,___fttol@f1+2
  5232  0004C6  EC26  F011         	call	___fttol	;wreg free
  5233  0004CA  0100               	movlb	0	; () banked
  5234  0004CC  51AE               	movf	?___fttol& (0+255),w,b
  5235  0004CE  0100               	movlb	0	; () banked
  5236  0004D0  11AF               	iorwf	(?___fttol+1)& (0+255),w,b
  5237  0004D2  0100               	movlb	0	; () banked
  5238  0004D4  11B0               	iorwf	(?___fttol+2)& (0+255),w,b
  5239  0004D6  0100               	movlb	0	; () banked
  5240  0004D8  11B1               	iorwf	(?___fttol+3)& (0+255),w,b
  5241  0004DA  A4D8               	btfss	status,2,c
  5242  0004DC  D04D               	goto	l6390
  5243                           
  5244                           ; BSR set to: 0
  5245  0004DE  0100               	movlb	0	; () banked
  5246  0004E0  BFDC               	btfsc	(printf@exp+1)& (0+255),7,b
  5247  0004E2  D04A               	goto	l6390
  5248  0004E4  0100               	movlb	0	; () banked
  5249  0004E6  51DC               	movf	(printf@exp+1)& (0+255),w,b
  5250  0004E8  E105               	bnz	l6376
  5251  0004EA  0E02               	movlw	2
  5252  0004EC  0100               	movlb	0	; () banked
  5253  0004EE  5DDB               	subwf	printf@exp& (0+255),w,b
  5254  0004F0  A0D8               	btfss	status,0,c
  5255  0004F2  D042               	goto	l6390
  5256  0004F4                     l6376:
  5257                           
  5258                           ; BSR set to: 0
  5259                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  5260  0004F4  C0D7  F02F         	movff	printf@tmpval,___ftge@ff1
  5261  0004F8  C0D8  F030         	movff	printf@tmpval+1,___ftge@ff1+1
  5262  0004FC  C0D9  F031         	movff	printf@tmpval+2,___ftge@ff1+2
  5263  000500  0E70               	movlw	112
  5264  000502  6E32               	movwf	___ftge@ff2,c
  5265  000504  0E89               	movlw	137
  5266  000506  6E33               	movwf	___ftge@ff2+1,c
  5267  000508  0E40               	movlw	64
  5268  00050A  6E34               	movwf	___ftge@ff2+2,c
  5269  00050C  EC23  F018         	call	___ftge	;wreg free
  5270  000510  B0D8               	btfsc	status,0,c
  5271  000512  D003               	goto	l6380
  5272                           
  5273                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5274  000514  0100               	movlb	0	; () banked
  5275  000516  0EF7               	movlw	247
  5276  000518  D002               	goto	L1
  5277  00051A                     l6380:
  5278                           
  5279                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5280  00051A  0100               	movlb	0	; () banked
  5281  00051C  0EF8               	movlw	248
  5282  00051E                     L1:
  5283  00051E  27DB               	addwf	printf@exp& (0+255),f,b
  5284  000520  0EFF               	movlw	255
  5285  000522  23DC               	addwfc	(printf@exp+1)& (0+255),f,b
  5286                           
  5287                           ; BSR set to: 0
  5288                           ;doprnt.c: 1124: }
  5289                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  5290                           
  5291                           ; BSR set to: 0
  5292  000524  0100               	movlb	0	; () banked
  5293  000526  51DB               	movf	printf@exp& (0+255),w,b
  5294  000528  EC79  F009         	call	_scale
  5295  00052C  C098  F0D7         	movff	?_scale,printf@tmpval
  5296  000530  C099  F0D8         	movff	?_scale+1,printf@tmpval+1
  5297  000534  C09A  F0D9         	movff	?_scale+2,printf@tmpval+2
  5298                           
  5299                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  5300  000538  C0DD  F023         	movff	printf@fval,__tdiv_to_l_@f1
  5301  00053C  C0DE  F024         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  5302  000540  C0DF  F025         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  5303  000544  C0D7  F026         	movff	printf@tmpval,__tdiv_to_l_@f2
  5304  000548  C0D8  F027         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  5305  00054C  C0D9  F028         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  5306  000550  ECC8  F011         	call	__tdiv_to_l_	;wreg free
  5307  000554  C023  F0E0         	movff	?__tdiv_to_l_,printf@val
  5308  000558  C024  F0E1         	movff	?__tdiv_to_l_+1,printf@val+1
  5309  00055C  C025  F0E2         	movff	?__tdiv_to_l_+2,printf@val+2
  5310  000560  C026  F0E3         	movff	?__tdiv_to_l_+3,printf@val+3
  5311                           
  5312                           ;doprnt.c: 1129: fval = 0.0;
  5313  000564  0E00               	movlw	0
  5314  000566  0100               	movlb	0	; () banked
  5315  000568  6FDD               	movwf	printf@fval& (0+255),b
  5316  00056A  0E00               	movlw	0
  5317  00056C  0100               	movlb	0	; () banked
  5318  00056E  6FDE               	movwf	(printf@fval+1)& (0+255),b
  5319  000570  0E00               	movlw	0
  5320  000572  0100               	movlb	0	; () banked
  5321  000574  6FDF               	movwf	(printf@fval+2)& (0+255),b
  5322                           
  5323                           ;doprnt.c: 1130: } else {
  5324  000576  D033               	goto	l6394
  5325  000578                     l6390:
  5326                           
  5327                           ; BSR set to: 0
  5328                           ;doprnt.c: 1131: val = (unsigned long)fval;
  5329  000578  C0DD  F0AE         	movff	printf@fval,___fttol@f1
  5330  00057C  C0DE  F0AF         	movff	printf@fval+1,___fttol@f1+1
  5331  000580  C0DF  F0B0         	movff	printf@fval+2,___fttol@f1+2
  5332  000584  EC26  F011         	call	___fttol	;wreg free
  5333  000588  C0AE  F0E0         	movff	?___fttol,printf@val
  5334  00058C  C0AF  F0E1         	movff	?___fttol+1,printf@val+1
  5335  000590  C0B0  F0E2         	movff	?___fttol+2,printf@val+2
  5336  000594  C0B1  F0E3         	movff	?___fttol+3,printf@val+3
  5337                           
  5338                           ;doprnt.c: 1132: fval -= (double)val;
  5339  000598  C0DD  F0AE         	movff	printf@fval,___ftsub@f1
  5340  00059C  C0DE  F0AF         	movff	printf@fval+1,___ftsub@f1+1
  5341  0005A0  C0DF  F0B0         	movff	printf@fval+2,___ftsub@f1+2
  5342  0005A4  C0E0  F02B         	movff	printf@val,___lltoft@c
  5343  0005A8  C0E1  F02C         	movff	printf@val+1,___lltoft@c+1
  5344  0005AC  C0E2  F02D         	movff	printf@val+2,___lltoft@c+2
  5345  0005B0  C0E3  F02E         	movff	printf@val+3,___lltoft@c+3
  5346  0005B4  EC46  F01A         	call	___lltoft	;wreg free
  5347  0005B8  C02B  F0B1         	movff	?___lltoft,___ftsub@f2
  5348  0005BC  C02C  F0B2         	movff	?___lltoft+1,___ftsub@f2+1
  5349  0005C0  C02D  F0B3         	movff	?___lltoft+2,___ftsub@f2+2
  5350  0005C4  EC74  F01A         	call	___ftsub	;wreg free
  5351  0005C8  C0AE  F0DD         	movff	?___ftsub,printf@fval
  5352  0005CC  C0AF  F0DE         	movff	?___ftsub+1,printf@fval+1
  5353  0005D0  C0B0  F0DF         	movff	?___ftsub+2,printf@fval+2
  5354                           
  5355                           ;doprnt.c: 1133: exp = 0;
  5356  0005D4  0E00               	movlw	0
  5357  0005D6  0100               	movlb	0	; () banked
  5358  0005D8  6FDC               	movwf	(printf@exp+1)& (0+255),b
  5359  0005DA  0E00               	movlw	0
  5360  0005DC  6FDB               	movwf	printf@exp& (0+255),b
  5361  0005DE                     l6394:
  5362                           
  5363                           ; BSR set to: 0
  5364                           ;doprnt.c: 1134: }
  5365                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5366  0005DE  0E01               	movlw	1
  5367  0005E0  0100               	movlb	0	; () banked
  5368  0005E2  6FEA               	movwf	printf@c& (0+255),b
  5369  0005E4                     l6396:
  5370                           
  5371                           ; BSR set to: 0
  5372  0005E4  0E0A               	movlw	10
  5373  0005E6  0100               	movlb	0	; () banked
  5374  0005E8  19EA               	xorwf	printf@c& (0+255),w,b
  5375  0005EA  B4D8               	btfsc	status,2,c
  5376  0005EC  D01E               	goto	l6408
  5377                           
  5378                           ; BSR set to: 0
  5379                           ;doprnt.c: 1137: if(val < dpowers[c])
  5380                           
  5381                           ; BSR set to: 0
  5382                           
  5383                           ; BSR set to: 0
  5384  0005EE  0100               	movlb	0	; () banked
  5385  0005F0  51EA               	movf	printf@c& (0+255),w,b
  5386  0005F2  0D04               	mullw	4
  5387  0005F4  0E1D               	movlw	low _dpowers
  5388  0005F6  24F3               	addwf	prodl,w,c
  5389  0005F8  6EF6               	movwf	tblptrl,c
  5390  0005FA  0EFE               	movlw	high _dpowers
  5391  0005FC  20F4               	addwfc	prodh,w,c
  5392  0005FE  6EF7               	movwf	tblptrh,c
  5393  000600                     	if	0	;There are less than 3 active tblptr bytes
  5394  000600                     	endif
  5395  000600  0009               	tblrd		*+
  5396  000602  50F5               	movf	tablat,w,c
  5397  000604  0100               	movlb	0	; () banked
  5398  000606  5DE0               	subwf	printf@val& (0+255),w,b
  5399  000608  0009               	tblrd		*+
  5400  00060A  50F5               	movf	tablat,w,c
  5401  00060C  0100               	movlb	0	; () banked
  5402  00060E  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  5403  000610  0009               	tblrd		*+
  5404  000612  50F5               	movf	tablat,w,c
  5405  000614  0100               	movlb	0	; () banked
  5406  000616  59E2               	subwfb	(printf@val+2)& (0+255),w,b
  5407  000618  0009               	tblrd		*+
  5408  00061A  50F5               	movf	tablat,w,c
  5409  00061C  0100               	movlb	0	; () banked
  5410  00061E  59E3               	subwfb	(printf@val+3)& (0+255),w,b
  5411  000620  A0D8               	btfss	status,0,c
  5412  000622  D003               	goto	l6408
  5413                           
  5414                           ; BSR set to: 0
  5415                           
  5416                           ; BSR set to: 0
  5417                           
  5418                           ; BSR set to: 0
  5419                           ;doprnt.c: 1138: break;
  5420  000624  0100               	movlb	0	; () banked
  5421  000626  2BEA               	incf	printf@c& (0+255),f,b
  5422  000628  D7DD               	goto	l6396
  5423  00062A                     l6408:
  5424                           
  5425                           ; BSR set to: 0
  5426                           ;doprnt.c: 1142: width -= prec + c + exp;
  5427  00062A  C0EA  F0C7         	movff	printf@c,??_printf
  5428  00062E  0100               	movlb	0	; () banked
  5429  000630  6BC8               	clrf	(??_printf+1)& (0+255),b
  5430  000632  BFC7               	btfsc	??_printf& (0+255),7,b
  5431  000634  07C8               	decf	(??_printf+1)& (0+255),f,b
  5432  000636  0100               	movlb	0	; () banked
  5433  000638  51E8               	movf	printf@prec& (0+255),w,b
  5434  00063A  0100               	movlb	0	; () banked
  5435  00063C  27C7               	addwf	??_printf& (0+255),f,b
  5436  00063E  0100               	movlb	0	; () banked
  5437  000640  51E9               	movf	(printf@prec+1)& (0+255),w,b
  5438  000642  0100               	movlb	0	; () banked
  5439  000644  23C8               	addwfc	(??_printf+1)& (0+255),f,b
  5440  000646  0100               	movlb	0	; () banked
  5441  000648  51DB               	movf	printf@exp& (0+255),w,b
  5442  00064A  0100               	movlb	0	; () banked
  5443  00064C  27C7               	addwf	??_printf& (0+255),f,b
  5444  00064E  0100               	movlb	0	; () banked
  5445  000650  51DC               	movf	(printf@exp+1)& (0+255),w,b
  5446  000652  0100               	movlb	0	; () banked
  5447  000654  23C8               	addwfc	(??_printf+1)& (0+255),f,b
  5448  000656  0100               	movlb	0	; () banked
  5449  000658  51C7               	movf	??_printf& (0+255),w,b
  5450  00065A  0100               	movlb	0	; () banked
  5451  00065C  5FE4               	subwf	printf@width& (0+255),f,b
  5452  00065E  0100               	movlb	0	; () banked
  5453  000660  51C8               	movf	(??_printf+1)& (0+255),w,b
  5454  000662  0100               	movlb	0	; () banked
  5455  000664  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  5456                           
  5457                           ;doprnt.c: 1143: if(
  5458                           ;doprnt.c: 1147: prec)
  5459  000666  0100               	movlb	0	; () banked
  5460  000668  51E8               	movf	printf@prec& (0+255),w,b
  5461  00066A  0100               	movlb	0	; () banked
  5462  00066C  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  5463  00066E  B4D8               	btfsc	status,2,c
  5464  000670  D004               	goto	l6412
  5465                           
  5466                           ; BSR set to: 0
  5467                           ;doprnt.c: 1148: width--;
  5468  000672  0100               	movlb	0	; () banked
  5469  000674  07E4               	decf	printf@width& (0+255),f,b
  5470  000676  A0D8               	btfss	status,0,c
  5471  000678  07E5               	decf	(printf@width+1)& (0+255),f,b
  5472  00067A                     l6412:
  5473                           
  5474                           ; BSR set to: 0
  5475                           ;doprnt.c: 1149: if(flag & 0x03)
  5476  00067A  0E03               	movlw	3
  5477  00067C  0100               	movlb	0	; () banked
  5478  00067E  15E6               	andwf	printf@flag& (0+255),w,b
  5479  000680  0100               	movlb	0	; () banked
  5480  000682  6FC7               	movwf	??_printf& (0+255),b
  5481  000684  0E00               	movlw	0
  5482  000686  0100               	movlb	0	; () banked
  5483  000688  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  5484  00068A  0100               	movlb	0	; () banked
  5485  00068C  6FC8               	movwf	(??_printf+1)& (0+255),b
  5486  00068E  0100               	movlb	0	; () banked
  5487  000690  51C7               	movf	??_printf& (0+255),w,b
  5488  000692  0100               	movlb	0	; () banked
  5489  000694  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  5490  000696  B4D8               	btfsc	status,2,c
  5491  000698  D004               	goto	l6416
  5492                           
  5493                           ; BSR set to: 0
  5494                           ;doprnt.c: 1150: width--;
  5495  00069A  0100               	movlb	0	; () banked
  5496  00069C  07E4               	decf	printf@width& (0+255),f,b
  5497  00069E  A0D8               	btfss	status,0,c
  5498  0006A0  07E5               	decf	(printf@width+1)& (0+255),f,b
  5499  0006A2                     l6416:
  5500                           
  5501                           ; BSR set to: 0
  5502                           ;doprnt.c: 1153: if(flag & 0x04) {
  5503  0006A2  0100               	movlb	0	; () banked
  5504  0006A4  A5E6               	btfss	printf@flag& (0+255),2,b
  5505  0006A6  D02D               	goto	l6432
  5506                           
  5507                           ; BSR set to: 0
  5508                           ;doprnt.c: 1157: if(flag & 0x03)
  5509  0006A8  0E03               	movlw	3
  5510  0006AA  0100               	movlb	0	; () banked
  5511  0006AC  15E6               	andwf	printf@flag& (0+255),w,b
  5512  0006AE  0100               	movlb	0	; () banked
  5513  0006B0  6FC7               	movwf	??_printf& (0+255),b
  5514  0006B2  0E00               	movlw	0
  5515  0006B4  0100               	movlb	0	; () banked
  5516  0006B6  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  5517  0006B8  0100               	movlb	0	; () banked
  5518  0006BA  6FC8               	movwf	(??_printf+1)& (0+255),b
  5519  0006BC  0100               	movlb	0	; () banked
  5520  0006BE  51C7               	movf	??_printf& (0+255),w,b
  5521  0006C0  0100               	movlb	0	; () banked
  5522  0006C2  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  5523  0006C4  B4D8               	btfsc	status,2,c
  5524  0006C6  D00B               	goto	l6426
  5525                           
  5526                           ; BSR set to: 0
  5527                           ;doprnt.c: 1159: (putch('-') );
  5528  0006C8  0E2D               	movlw	45
  5529  0006CA  EC36  F01C         	call	_putch
  5530                           
  5531                           ;doprnt.c: 1168: while(width > 0) {
  5532  0006CE  D007               	goto	l6426
  5533  0006D0                     l6422:
  5534                           
  5535                           ;doprnt.c: 1169: (putch('0') );
  5536  0006D0  0E30               	movlw	48
  5537  0006D2  EC36  F01C         	call	_putch
  5538                           
  5539                           ;doprnt.c: 1170: width--;
  5540  0006D6  0100               	movlb	0	; () banked
  5541  0006D8  07E4               	decf	printf@width& (0+255),f,b
  5542  0006DA  A0D8               	btfss	status,0,c
  5543  0006DC  07E5               	decf	(printf@width+1)& (0+255),f,b
  5544  0006DE                     l6426:
  5545  0006DE  0100               	movlb	0	; () banked
  5546  0006E0  BFE5               	btfsc	(printf@width+1)& (0+255),7,b
  5547  0006E2  D073               	goto	l6444
  5548  0006E4  0100               	movlb	0	; () banked
  5549  0006E6  51E5               	movf	(printf@width+1)& (0+255),w,b
  5550  0006E8  E1F3               	bnz	l6422
  5551  0006EA  0100               	movlb	0	; () banked
  5552  0006EC  05E4               	decf	printf@width& (0+255),w,b
  5553  0006EE  A0D8               	btfss	status,0,c
  5554  0006F0  D06C               	goto	l6444
  5555  0006F2  D7EE               	goto	l6422
  5556  0006F4                     l6428:
  5557                           
  5558                           ; BSR set to: 0
  5559                           ;doprnt.c: 1181: (putch(' ') );
  5560  0006F4  0E20               	movlw	32
  5561  0006F6  EC36  F01C         	call	_putch
  5562                           
  5563                           ;doprnt.c: 1182: width--;
  5564  0006FA  0100               	movlb	0	; () banked
  5565  0006FC  07E4               	decf	printf@width& (0+255),f,b
  5566  0006FE  A0D8               	btfss	status,0,c
  5567  000700  07E5               	decf	(printf@width+1)& (0+255),f,b
  5568  000702                     l6432:
  5569                           
  5570                           ; BSR set to: 0
  5571  000702  0100               	movlb	0	; () banked
  5572  000704  BFE5               	btfsc	(printf@width+1)& (0+255),7,b
  5573  000706  D007               	goto	l6434
  5574  000708  0100               	movlb	0	; () banked
  5575  00070A  51E5               	movf	(printf@width+1)& (0+255),w,b
  5576  00070C  E1F3               	bnz	l6428
  5577  00070E  0100               	movlb	0	; () banked
  5578  000710  05E4               	decf	printf@width& (0+255),w,b
  5579  000712  B0D8               	btfsc	status,0,c
  5580  000714  D7EF               	goto	l6428
  5581  000716                     l6434:
  5582                           
  5583                           ; BSR set to: 0
  5584                           ;doprnt.c: 1183: }
  5585                           ;doprnt.c: 1188: if(flag & 0x03)
  5586  000716  0E03               	movlw	3
  5587  000718  0100               	movlb	0	; () banked
  5588  00071A  15E6               	andwf	printf@flag& (0+255),w,b
  5589  00071C  0100               	movlb	0	; () banked
  5590  00071E  6FC7               	movwf	??_printf& (0+255),b
  5591  000720  0E00               	movlw	0
  5592  000722  0100               	movlb	0	; () banked
  5593  000724  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  5594  000726  0100               	movlb	0	; () banked
  5595  000728  6FC8               	movwf	(??_printf+1)& (0+255),b
  5596  00072A  0100               	movlb	0	; () banked
  5597  00072C  51C7               	movf	??_printf& (0+255),w,b
  5598  00072E  0100               	movlb	0	; () banked
  5599  000730  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  5600  000732  B4D8               	btfsc	status,2,c
  5601  000734  D04A               	goto	l6444
  5602                           
  5603                           ; BSR set to: 0
  5604                           ;doprnt.c: 1190: (putch('-') );
  5605  000736  0E2D               	movlw	45
  5606  000738  EC36  F01C         	call	_putch
  5607                           
  5608                           ;doprnt.c: 1195: }
  5609                           ;doprnt.c: 1196: while(c--) {
  5610  00073C  D046               	goto	l6444
  5611  00073E                     l6438:
  5612                           
  5613                           ;doprnt.c: 1200: {
  5614                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  5615  00073E  C0E0  F023         	movff	printf@val,___lldiv@dividend
  5616  000742  C0E1  F024         	movff	printf@val+1,___lldiv@dividend+1
  5617  000746  C0E2  F025         	movff	printf@val+2,___lldiv@dividend+2
  5618  00074A  C0E3  F026         	movff	printf@val+3,___lldiv@dividend+3
  5619  00074E  0100               	movlb	0	; () banked
  5620  000750  51EA               	movf	printf@c& (0+255),w,b
  5621  000752  0D04               	mullw	4
  5622  000754  0E1D               	movlw	low _dpowers
  5623  000756  24F3               	addwf	prodl,w,c
  5624  000758  6EF6               	movwf	tblptrl,c
  5625  00075A  0EFE               	movlw	high _dpowers
  5626  00075C  20F4               	addwfc	prodh,w,c
  5627  00075E  6EF7               	movwf	tblptrh,c
  5628  000760                     	if	0	;There are less than 3 active tblptr bytes
  5629  000760                     	endif
  5630  000760  0009               	tblrd		*+
  5631  000762  CFF5 F027          	movff	tablat,___lldiv@divisor
  5632  000766  0009               	tblrd		*+
  5633  000768  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  5634  00076C  0009               	tblrd		*+
  5635  00076E  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  5636  000772  000A               	tblrd		*-
  5637  000774  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  5638  000778  ECF3  F018         	call	___lldiv	;wreg free
  5639  00077C  C023  F0D7         	movff	?___lldiv,printf@tmpval
  5640  000780  C024  F0D8         	movff	?___lldiv+1,printf@tmpval+1
  5641  000784  C025  F0D9         	movff	?___lldiv+2,printf@tmpval+2
  5642  000788  C026  F0DA         	movff	?___lldiv+3,printf@tmpval+3
  5643                           
  5644                           ;doprnt.c: 1202: tmpval.vd %= 10;
  5645  00078C  C0D7  F030         	movff	printf@tmpval,___llmod@dividend
  5646  000790  C0D8  F031         	movff	printf@tmpval+1,___llmod@dividend+1
  5647  000794  C0D9  F032         	movff	printf@tmpval+2,___llmod@dividend+2
  5648  000798  C0DA  F033         	movff	printf@tmpval+3,___llmod@dividend+3
  5649  00079C  0E0A               	movlw	10
  5650  00079E  6E34               	movwf	___llmod@divisor,c
  5651  0007A0  0E00               	movlw	0
  5652  0007A2  6E35               	movwf	___llmod@divisor+1,c
  5653  0007A4  0E00               	movlw	0
  5654  0007A6  6E36               	movwf	___llmod@divisor+2,c
  5655  0007A8  0E00               	movlw	0
  5656  0007AA  6E37               	movwf	___llmod@divisor+3,c
  5657  0007AC  ECE0  F019         	call	___llmod	;wreg free
  5658  0007B0  C030  F0D7         	movff	?___llmod,printf@tmpval
  5659  0007B4  C031  F0D8         	movff	?___llmod+1,printf@tmpval+1
  5660  0007B8  C032  F0D9         	movff	?___llmod+2,printf@tmpval+2
  5661  0007BC  C033  F0DA         	movff	?___llmod+3,printf@tmpval+3
  5662                           
  5663                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  5664  0007C0  0100               	movlb	0	; () banked
  5665  0007C2  51D7               	movf	printf@tmpval& (0+255),w,b
  5666  0007C4  0F30               	addlw	48
  5667  0007C6  EC36  F01C         	call	_putch
  5668  0007CA                     l6444:
  5669  0007CA  0100               	movlb	0	; () banked
  5670  0007CC  07EA               	decf	printf@c& (0+255),f,b
  5671  0007CE  0100               	movlb	0	; () banked
  5672  0007D0  29EA               	incf	printf@c& (0+255),w,b
  5673  0007D2  B4D8               	btfsc	status,2,c
  5674  0007D4  D008               	goto	l6450
  5675  0007D6  D7B3               	goto	l6438
  5676  0007D8                     l6446:
  5677                           
  5678                           ; BSR set to: 0
  5679                           ;doprnt.c: 1208: (putch('0') );
  5680  0007D8  0E30               	movlw	48
  5681  0007DA  EC36  F01C         	call	_putch
  5682                           
  5683                           ;doprnt.c: 1209: exp--;
  5684  0007DE  0100               	movlb	0	; () banked
  5685  0007E0  07DB               	decf	printf@exp& (0+255),f,b
  5686  0007E2  A0D8               	btfss	status,0,c
  5687  0007E4  07DC               	decf	(printf@exp+1)& (0+255),f,b
  5688  0007E6                     l6450:
  5689                           
  5690                           ; BSR set to: 0
  5691  0007E6  0100               	movlb	0	; () banked
  5692  0007E8  BFDC               	btfsc	(printf@exp+1)& (0+255),7,b
  5693  0007EA  D007               	goto	l6452
  5694  0007EC  0100               	movlb	0	; () banked
  5695  0007EE  51DC               	movf	(printf@exp+1)& (0+255),w,b
  5696  0007F0  E1F3               	bnz	l6446
  5697  0007F2  0100               	movlb	0	; () banked
  5698  0007F4  05DB               	decf	printf@exp& (0+255),w,b
  5699  0007F6  B0D8               	btfsc	status,0,c
  5700  0007F8  D7EF               	goto	l6446
  5701  0007FA                     l6452:
  5702                           
  5703                           ; BSR set to: 0
  5704                           ;doprnt.c: 1210: }
  5705                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5706  0007FA  0100               	movlb	0	; () banked
  5707  0007FC  BFE9               	btfsc	(printf@prec+1)& (0+255),7,b
  5708  0007FE  D00C               	goto	l775
  5709  000800  0100               	movlb	0	; () banked
  5710  000802  51E9               	movf	(printf@prec+1)& (0+255),w,b
  5711  000804  E105               	bnz	u6730
  5712  000806  0E09               	movlw	9
  5713  000808  0100               	movlb	0	; () banked
  5714  00080A  5DE8               	subwf	printf@prec& (0+255),w,b
  5715  00080C  A0D8               	btfss	status,0,c
  5716  00080E  D004               	goto	l775
  5717  000810                     u6730:
  5718                           
  5719                           ; BSR set to: 0
  5720                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5721  000810  0E08               	movlw	8
  5722  000812  0100               	movlb	0	; () banked
  5723  000814  6FEA               	movwf	printf@c& (0+255),b
  5724  000816  D002               	goto	l6456
  5725  000818                     l775:
  5726                           
  5727                           ; BSR set to: 0
  5728                           ;doprnt.c: 1213: else
  5729                           ;doprnt.c: 1214: c = prec;
  5730  000818  C0E8  F0EA         	movff	printf@prec,printf@c
  5731  00081C                     l6456:
  5732                           
  5733                           ; BSR set to: 0
  5734                           ;doprnt.c: 1215: prec -= c;
  5735  00081C  0100               	movlb	0	; () banked
  5736  00081E  51EA               	movf	printf@c& (0+255),w,b
  5737  000820  0100               	movlb	0	; () banked
  5738  000822  5FE8               	subwf	printf@prec& (0+255),f,b
  5739  000824  0E00               	movlw	0
  5740  000826  0100               	movlb	0	; () banked
  5741  000828  BFEA               	btfsc	printf@c& (0+255),7,b
  5742  00082A  0EFF               	movlw	255
  5743  00082C  0100               	movlb	0	; () banked
  5744  00082E  5BE9               	subwfb	(printf@prec+1)& (0+255),f,b
  5745                           
  5746                           ; BSR set to: 0
  5747                           ;doprnt.c: 1219: if(c)
  5748  000830  0100               	movlb	0	; () banked
  5749  000832  51EA               	movf	printf@c& (0+255),w,b
  5750  000834  0100               	movlb	0	; () banked
  5751  000836  B4D8               	btfsc	status,2,c
  5752  000838  D003               	goto	l6462
  5753                           
  5754                           ; BSR set to: 0
  5755                           ;doprnt.c: 1221: (putch('.') );
  5756  00083A  0E2E               	movlw	46
  5757  00083C  EC36  F01C         	call	_putch
  5758  000840                     l6462:
  5759                           
  5760                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5761  000840  0100               	movlb	0	; () banked
  5762  000842  51EA               	movf	printf@c& (0+255),w,b
  5763  000844  EC79  F009         	call	_scale
  5764  000848  C098  F0CD         	movff	?_scale,_printf$1356
  5765  00084C  C099  F0CE         	movff	?_scale+1,_printf$1356+1
  5766  000850  C09A  F0CF         	movff	?_scale+2,_printf$1356+2
  5767                           
  5768                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5769  000854  C0DD  F08C         	movff	printf@fval,___ftmul@f2
  5770  000858  C0DE  F08D         	movff	printf@fval+1,___ftmul@f2+1
  5771  00085C  C0DF  F08E         	movff	printf@fval+2,___ftmul@f2+2
  5772  000860  C0CD  F089         	movff	_printf$1356,___ftmul@f1
  5773  000864  C0CE  F08A         	movff	_printf$1356+1,___ftmul@f1+1
  5774  000868  C0CF  F08B         	movff	_printf$1356+2,___ftmul@f1+2
  5775  00086C  ECCB  F00F         	call	___ftmul	;wreg free
  5776  000870  C089  F0AE         	movff	?___ftmul,___fttol@f1
  5777  000874  C08A  F0AF         	movff	?___ftmul+1,___fttol@f1+1
  5778  000878  C08B  F0B0         	movff	?___ftmul+2,___fttol@f1+2
  5779  00087C  EC26  F011         	call	___fttol	;wreg free
  5780  000880  C0AE  F0E0         	movff	?___fttol,printf@val
  5781  000884  C0AF  F0E1         	movff	?___fttol+1,printf@val+1
  5782  000888  C0B0  F0E2         	movff	?___fttol+2,printf@val+2
  5783  00088C  C0B1  F0E3         	movff	?___fttol+3,printf@val+3
  5784                           
  5785                           ;doprnt.c: 1228: while(c--) {
  5786  000890  D06D               	goto	l6472
  5787  000892                     l6466:
  5788                           
  5789                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  5790  000892  C0E0  F023         	movff	printf@val,___lldiv@dividend
  5791  000896  C0E1  F024         	movff	printf@val+1,___lldiv@dividend+1
  5792  00089A  C0E2  F025         	movff	printf@val+2,___lldiv@dividend+2
  5793  00089E  C0E3  F026         	movff	printf@val+3,___lldiv@dividend+3
  5794  0008A2  0100               	movlb	0	; () banked
  5795  0008A4  51EA               	movf	printf@c& (0+255),w,b
  5796  0008A6  0D04               	mullw	4
  5797  0008A8  0E1D               	movlw	low _dpowers
  5798  0008AA  24F3               	addwf	prodl,w,c
  5799  0008AC  6EF6               	movwf	tblptrl,c
  5800  0008AE  0EFE               	movlw	high _dpowers
  5801  0008B0  20F4               	addwfc	prodh,w,c
  5802  0008B2  6EF7               	movwf	tblptrh,c
  5803  0008B4                     	if	0	;There are less than 3 active tblptr bytes
  5804  0008B4                     	endif
  5805  0008B4  0009               	tblrd		*+
  5806  0008B6  CFF5 F027          	movff	tablat,___lldiv@divisor
  5807  0008BA  0009               	tblrd		*+
  5808  0008BC  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  5809  0008C0  0009               	tblrd		*+
  5810  0008C2  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  5811  0008C6  000A               	tblrd		*-
  5812  0008C8  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  5813  0008CC  ECF3  F018         	call	___lldiv	;wreg free
  5814  0008D0  C023  F0D7         	movff	?___lldiv,printf@tmpval
  5815  0008D4  C024  F0D8         	movff	?___lldiv+1,printf@tmpval+1
  5816  0008D8  C025  F0D9         	movff	?___lldiv+2,printf@tmpval+2
  5817  0008DC  C026  F0DA         	movff	?___lldiv+3,printf@tmpval+3
  5818                           
  5819                           ;doprnt.c: 1230: tmpval.vd %= 10;
  5820  0008E0  C0D7  F030         	movff	printf@tmpval,___llmod@dividend
  5821  0008E4  C0D8  F031         	movff	printf@tmpval+1,___llmod@dividend+1
  5822  0008E8  C0D9  F032         	movff	printf@tmpval+2,___llmod@dividend+2
  5823  0008EC  C0DA  F033         	movff	printf@tmpval+3,___llmod@dividend+3
  5824  0008F0  0E0A               	movlw	10
  5825  0008F2  6E34               	movwf	___llmod@divisor,c
  5826  0008F4  0E00               	movlw	0
  5827  0008F6  6E35               	movwf	___llmod@divisor+1,c
  5828  0008F8  0E00               	movlw	0
  5829  0008FA  6E36               	movwf	___llmod@divisor+2,c
  5830  0008FC  0E00               	movlw	0
  5831  0008FE  6E37               	movwf	___llmod@divisor+3,c
  5832  000900  ECE0  F019         	call	___llmod	;wreg free
  5833  000904  C030  F0D7         	movff	?___llmod,printf@tmpval
  5834  000908  C031  F0D8         	movff	?___llmod+1,printf@tmpval+1
  5835  00090C  C032  F0D9         	movff	?___llmod+2,printf@tmpval+2
  5836  000910  C033  F0DA         	movff	?___llmod+3,printf@tmpval+3
  5837                           
  5838                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  5839  000914  0100               	movlb	0	; () banked
  5840  000916  51D7               	movf	printf@tmpval& (0+255),w,b
  5841  000918  0F30               	addlw	48
  5842  00091A  EC36  F01C         	call	_putch
  5843                           
  5844                           ;doprnt.c: 1232: val %= dpowers[c];
  5845  00091E  C0E0  F030         	movff	printf@val,___llmod@dividend
  5846  000922  C0E1  F031         	movff	printf@val+1,___llmod@dividend+1
  5847  000926  C0E2  F032         	movff	printf@val+2,___llmod@dividend+2
  5848  00092A  C0E3  F033         	movff	printf@val+3,___llmod@dividend+3
  5849  00092E  0100               	movlb	0	; () banked
  5850  000930  51EA               	movf	printf@c& (0+255),w,b
  5851  000932  0D04               	mullw	4
  5852  000934  0E1D               	movlw	low _dpowers
  5853  000936  24F3               	addwf	prodl,w,c
  5854  000938  6EF6               	movwf	tblptrl,c
  5855  00093A  0EFE               	movlw	high _dpowers
  5856  00093C  20F4               	addwfc	prodh,w,c
  5857  00093E  6EF7               	movwf	tblptrh,c
  5858  000940                     	if	0	;There are less than 3 active tblptr bytes
  5859  000940                     	endif
  5860  000940  0009               	tblrd		*+
  5861  000942  CFF5 F034          	movff	tablat,___llmod@divisor
  5862  000946  0009               	tblrd		*+
  5863  000948  CFF5 F035          	movff	tablat,___llmod@divisor+1
  5864  00094C  0009               	tblrd		*+
  5865  00094E  CFF5 F036          	movff	tablat,___llmod@divisor+2
  5866  000952  000A               	tblrd		*-
  5867  000954  CFF5 F037          	movff	tablat,___llmod@divisor+3
  5868  000958  ECE0  F019         	call	___llmod	;wreg free
  5869  00095C  C030  F0E0         	movff	?___llmod,printf@val
  5870  000960  C031  F0E1         	movff	?___llmod+1,printf@val+1
  5871  000964  C032  F0E2         	movff	?___llmod+2,printf@val+2
  5872  000968  C033  F0E3         	movff	?___llmod+3,printf@val+3
  5873  00096C                     l6472:
  5874  00096C  0100               	movlb	0	; () banked
  5875  00096E  07EA               	decf	printf@c& (0+255),f,b
  5876  000970  0100               	movlb	0	; () banked
  5877  000972  29EA               	incf	printf@c& (0+255),w,b
  5878  000974  B4D8               	btfsc	status,2,c
  5879  000976  D008               	goto	l6478
  5880  000978  D78C               	goto	l6466
  5881  00097A                     l6474:
  5882                           
  5883                           ; BSR set to: 0
  5884                           ;doprnt.c: 1236: (putch('0') );
  5885  00097A  0E30               	movlw	48
  5886  00097C  EC36  F01C         	call	_putch
  5887                           
  5888                           ;doprnt.c: 1237: prec--;
  5889  000980  0100               	movlb	0	; () banked
  5890  000982  07E8               	decf	printf@prec& (0+255),f,b
  5891  000984  A0D8               	btfss	status,0,c
  5892  000986  07E9               	decf	(printf@prec+1)& (0+255),f,b
  5893  000988                     l6478:
  5894                           
  5895                           ; BSR set to: 0
  5896  000988  0100               	movlb	0	; () banked
  5897  00098A  51E8               	movf	printf@prec& (0+255),w,b
  5898  00098C  0100               	movlb	0	; () banked
  5899  00098E  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  5900  000990  B4D8               	btfsc	status,2,c
  5901  000992  D22B               	goto	l6606
  5902  000994  D7F2               	goto	l6474
  5903  000996                     l735:
  5904                           
  5905                           ; BSR set to: 0
  5906                           ;doprnt.c: 1246: }
  5907                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  5908  000996  0100               	movlb	0	; () banked
  5909  000998  BFE6               	btfsc	printf@flag& (0+255),7,b
  5910  00099A  D034               	goto	l784
  5911                           
  5912                           ; BSR set to: 0
  5913                           ;doprnt.c: 1253: {
  5914                           ;doprnt.c: 1255: if(flag & 0x10)
  5915  00099C  0100               	movlb	0	; () banked
  5916  00099E  A9E6               	btfss	printf@flag& (0+255),4,b
  5917  0009A0  D00E               	goto	l6486
  5918                           
  5919                           ; BSR set to: 0
  5920                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  5921  0009A2  C0D5  FFD9         	movff	printf@ap,fsr2l
  5922  0009A6  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  5923  0009AA  CFDE F0E0          	movff	postinc2,printf@val
  5924  0009AE  CFDE F0E1          	movff	postinc2,printf@val+1
  5925  0009B2  CFDE F0E2          	movff	postinc2,printf@val+2
  5926  0009B6  CFDE F0E3          	movff	postinc2,printf@val+3
  5927                           
  5928                           ; BSR set to: 0
  5929  0009BA  0E04               	movlw	4
  5930  0009BC  D00F               	goto	L2
  5931  0009BE                     l6486:
  5932                           
  5933                           ; BSR set to: 0
  5934                           ;doprnt.c: 1257: else
  5935                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  5936  0009BE  C0D5  FFD9         	movff	printf@ap,fsr2l
  5937  0009C2  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  5938  0009C6  CFDE F0E0          	movff	postinc2,printf@val
  5939  0009CA  CFDD F0E1          	movff	postdec2,printf@val+1
  5940  0009CE  0100               	movlb	0	; () banked
  5941  0009D0  0E00               	movlw	0
  5942  0009D2  BFE1               	btfsc	(printf@val+1)& (0+255),7,b
  5943  0009D4  0EFF               	movlw	-1
  5944  0009D6  6FE2               	movwf	(printf@val+2)& (0+255),b
  5945  0009D8  6FE3               	movwf	(printf@val+3)& (0+255),b
  5946                           
  5947                           ; BSR set to: 0
  5948  0009DA  0E02               	movlw	2
  5949  0009DC                     L2:
  5950  0009DC  0100               	movlb	0	; () banked
  5951  0009DE  27D5               	addwf	printf@ap& (0+255),f,b
  5952  0009E0  0E00               	movlw	0
  5953  0009E2  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  5954                           
  5955                           ; BSR set to: 0
  5956                           ;doprnt.c: 1261: if((long)val < 0) {
  5957                           
  5958                           ; BSR set to: 0
  5959  0009E4  0100               	movlb	0	; () banked
  5960  0009E6  AFE3               	btfss	(printf@val+3)& (0+255),7,b
  5961  0009E8  D032               	goto	l6504
  5962                           
  5963                           ; BSR set to: 0
  5964                           ;doprnt.c: 1262: flag |= 0x03;
  5965  0009EA  0E03               	movlw	3
  5966  0009EC  0100               	movlb	0	; () banked
  5967  0009EE  13E6               	iorwf	printf@flag& (0+255),f,b
  5968                           
  5969                           ; BSR set to: 0
  5970                           ;doprnt.c: 1263: val = -val;
  5971  0009F0  0100               	movlb	0	; () banked
  5972  0009F2  1FE3               	comf	(printf@val+3)& (0+255),f,b
  5973  0009F4  1FE2               	comf	(printf@val+2)& (0+255),f,b
  5974  0009F6  1FE1               	comf	(printf@val+1)& (0+255),f,b
  5975  0009F8  6DE0               	negf	printf@val& (0+255),b
  5976  0009FA  0E00               	movlw	0
  5977  0009FC  23E1               	addwfc	(printf@val+1)& (0+255),f,b
  5978  0009FE  23E2               	addwfc	(printf@val+2)& (0+255),f,b
  5979  000A00  23E3               	addwfc	(printf@val+3)& (0+255),f,b
  5980                           
  5981                           ; BSR set to: 0
  5982                           ;doprnt.c: 1264: }
  5983                           ;doprnt.c: 1266: }
  5984  000A02  D025               	goto	l6504
  5985  000A04                     l784:
  5986                           
  5987                           ; BSR set to: 0
  5988                           ;doprnt.c: 1268: else
  5989                           ;doprnt.c: 1273: {
  5990                           ;doprnt.c: 1281: if(flag & 0x10)
  5991  000A04  0100               	movlb	0	; () banked
  5992  000A06  A9E6               	btfss	printf@flag& (0+255),4,b
  5993  000A08  D00E               	goto	l6500
  5994                           
  5995                           ; BSR set to: 0
  5996                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  5997  000A0A  C0D5  FFD9         	movff	printf@ap,fsr2l
  5998  000A0E  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  5999  000A12  CFDE F0E0          	movff	postinc2,printf@val
  6000  000A16  CFDE F0E1          	movff	postinc2,printf@val+1
  6001  000A1A  CFDE F0E2          	movff	postinc2,printf@val+2
  6002  000A1E  CFDE F0E3          	movff	postinc2,printf@val+3
  6003                           
  6004                           ; BSR set to: 0
  6005  000A22  0E04               	movlw	4
  6006  000A24  D010               	goto	L3
  6007  000A26                     l6500:
  6008                           
  6009                           ; BSR set to: 0
  6010                           ;doprnt.c: 1283: else
  6011                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6012  000A26  C0D5  FFD9         	movff	printf@ap,fsr2l
  6013  000A2A  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  6014  000A2E  CFDE F0C7          	movff	postinc2,??_printf
  6015  000A32  CFDD F0C8          	movff	postdec2,??_printf+1
  6016  000A36  C0C7  F0E0         	movff	??_printf,printf@val
  6017  000A3A  C0C8  F0E1         	movff	??_printf+1,printf@val+1
  6018  000A3E  0100               	movlb	0	; () banked
  6019  000A40  6BE2               	clrf	(printf@val+2)& (0+255),b
  6020  000A42  6BE3               	clrf	(printf@val+3)& (0+255),b
  6021                           
  6022                           ; BSR set to: 0
  6023  000A44  0E02               	movlw	2
  6024  000A46                     L3:
  6025  000A46  0100               	movlb	0	; () banked
  6026  000A48  27D5               	addwf	printf@ap& (0+255),f,b
  6027  000A4A  0E00               	movlw	0
  6028  000A4C  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  6029  000A4E                     l6504:
  6030                           
  6031                           ; BSR set to: 0
  6032                           ;doprnt.c: 1287: }
  6033                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  6034  000A4E  0100               	movlb	0	; () banked
  6035  000A50  51E8               	movf	printf@prec& (0+255),w,b
  6036  000A52  0100               	movlb	0	; () banked
  6037  000A54  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  6038  000A56  A4D8               	btfss	status,2,c
  6039  000A58  D05A               	goto	l6540
  6040                           
  6041                           ; BSR set to: 0
  6042  000A5A  0100               	movlb	0	; () banked
  6043  000A5C  51E0               	movf	printf@val& (0+255),w,b
  6044  000A5E  0100               	movlb	0	; () banked
  6045  000A60  11E1               	iorwf	(printf@val+1)& (0+255),w,b
  6046  000A62  0100               	movlb	0	; () banked
  6047  000A64  11E2               	iorwf	(printf@val+2)& (0+255),w,b
  6048  000A66  0100               	movlb	0	; () banked
  6049  000A68  11E3               	iorwf	(printf@val+3)& (0+255),w,b
  6050  000A6A  A4D8               	btfss	status,2,c
  6051  000A6C  D050               	goto	l6540
  6052                           
  6053                           ; BSR set to: 0
  6054                           ;doprnt.c: 1291: prec++;
  6055  000A6E  0100               	movlb	0	; () banked
  6056  000A70  4BE8               	infsnz	printf@prec& (0+255),f,b
  6057  000A72  2BE9               	incf	(printf@prec+1)& (0+255),f,b
  6058                           
  6059                           ; BSR set to: 0
  6060                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6061  000A74  D04C               	goto	l6540
  6062  000A76                     l6510:
  6063                           
  6064                           ; BSR set to: 0
  6065                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6066  000A76  0E01               	movlw	1
  6067  000A78  0100               	movlb	0	; () banked
  6068  000A7A  6FEA               	movwf	printf@c& (0+255),b
  6069  000A7C                     l6512:
  6070                           
  6071                           ; BSR set to: 0
  6072  000A7C  0E0A               	movlw	10
  6073  000A7E  0100               	movlb	0	; () banked
  6074  000A80  19EA               	xorwf	printf@c& (0+255),w,b
  6075  000A82  B4D8               	btfsc	status,2,c
  6076  000A84  D04D               	goto	l6542
  6077                           
  6078                           ; BSR set to: 0
  6079                           ;doprnt.c: 1306: if(val < dpowers[c])
  6080                           
  6081                           ; BSR set to: 0
  6082                           
  6083                           ; BSR set to: 0
  6084  000A86  0100               	movlb	0	; () banked
  6085  000A88  51EA               	movf	printf@c& (0+255),w,b
  6086  000A8A  0D04               	mullw	4
  6087  000A8C  0E1D               	movlw	low _dpowers
  6088  000A8E  24F3               	addwf	prodl,w,c
  6089  000A90  6EF6               	movwf	tblptrl,c
  6090  000A92  0EFE               	movlw	high _dpowers
  6091  000A94  20F4               	addwfc	prodh,w,c
  6092  000A96  6EF7               	movwf	tblptrh,c
  6093  000A98                     	if	0	;There are less than 3 active tblptr bytes
  6094  000A98                     	endif
  6095  000A98  0009               	tblrd		*+
  6096  000A9A  50F5               	movf	tablat,w,c
  6097  000A9C  0100               	movlb	0	; () banked
  6098  000A9E  5DE0               	subwf	printf@val& (0+255),w,b
  6099  000AA0  0009               	tblrd		*+
  6100  000AA2  50F5               	movf	tablat,w,c
  6101  000AA4  0100               	movlb	0	; () banked
  6102  000AA6  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  6103  000AA8  0009               	tblrd		*+
  6104  000AAA  50F5               	movf	tablat,w,c
  6105  000AAC  0100               	movlb	0	; () banked
  6106  000AAE  59E2               	subwfb	(printf@val+2)& (0+255),w,b
  6107  000AB0  0009               	tblrd		*+
  6108  000AB2  50F5               	movf	tablat,w,c
  6109  000AB4  0100               	movlb	0	; () banked
  6110  000AB6  59E3               	subwfb	(printf@val+3)& (0+255),w,b
  6111  000AB8  A0D8               	btfss	status,0,c
  6112  000ABA  D032               	goto	l6542
  6113                           
  6114                           ; BSR set to: 0
  6115                           
  6116                           ; BSR set to: 0
  6117                           
  6118                           ; BSR set to: 0
  6119                           ;doprnt.c: 1307: break;
  6120  000ABC  0100               	movlb	0	; () banked
  6121  000ABE  2BEA               	incf	printf@c& (0+255),f,b
  6122  000AC0  D7DD               	goto	l6512
  6123  000AC2                     l6524:
  6124                           
  6125                           ; BSR set to: 0
  6126                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6127  000AC2  0E01               	movlw	1
  6128  000AC4  0100               	movlb	0	; () banked
  6129  000AC6  6FEA               	movwf	printf@c& (0+255),b
  6130  000AC8                     l6526:
  6131                           
  6132                           ; BSR set to: 0
  6133  000AC8  0E08               	movlw	8
  6134  000ACA  0100               	movlb	0	; () banked
  6135  000ACC  19EA               	xorwf	printf@c& (0+255),w,b
  6136  000ACE  B4D8               	btfsc	status,2,c
  6137  000AD0  D027               	goto	l6542
  6138                           
  6139                           ; BSR set to: 0
  6140                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6141                           
  6142                           ; BSR set to: 0
  6143                           
  6144                           ; BSR set to: 0
  6145  000AD2  0100               	movlb	0	; () banked
  6146  000AD4  51EA               	movf	printf@c& (0+255),w,b
  6147  000AD6  0D04               	mullw	4
  6148  000AD8  0E93               	movlw	low _hexpowers
  6149  000ADA  24F3               	addwf	prodl,w,c
  6150  000ADC  6EF6               	movwf	tblptrl,c
  6151  000ADE  0EFE               	movlw	high _hexpowers
  6152  000AE0  20F4               	addwfc	prodh,w,c
  6153  000AE2  6EF7               	movwf	tblptrh,c
  6154  000AE4                     	if	0	;There are less than 3 active tblptr bytes
  6155  000AE4                     	endif
  6156  000AE4  0009               	tblrd		*+
  6157  000AE6  50F5               	movf	tablat,w,c
  6158  000AE8  0100               	movlb	0	; () banked
  6159  000AEA  5DE0               	subwf	printf@val& (0+255),w,b
  6160  000AEC  0009               	tblrd		*+
  6161  000AEE  50F5               	movf	tablat,w,c
  6162  000AF0  0100               	movlb	0	; () banked
  6163  000AF2  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  6164  000AF4  0009               	tblrd		*+
  6165  000AF6  50F5               	movf	tablat,w,c
  6166  000AF8  0100               	movlb	0	; () banked
  6167  000AFA  59E2               	subwfb	(printf@val+2)& (0+255),w,b
  6168  000AFC  0009               	tblrd		*+
  6169  000AFE  50F5               	movf	tablat,w,c
  6170  000B00  0100               	movlb	0	; () banked
  6171  000B02  59E3               	subwfb	(printf@val+3)& (0+255),w,b
  6172  000B04  A0D8               	btfss	status,0,c
  6173  000B06  D00C               	goto	l6542
  6174                           
  6175                           ; BSR set to: 0
  6176                           
  6177                           ; BSR set to: 0
  6178                           
  6179                           ; BSR set to: 0
  6180                           ;doprnt.c: 1318: break;
  6181  000B08  0100               	movlb	0	; () banked
  6182  000B0A  2BEA               	incf	printf@c& (0+255),f,b
  6183  000B0C  D7DD               	goto	l6526
  6184  000B0E                     l6540:
  6185                           
  6186                           ; BSR set to: 0
  6187  000B0E  0100               	movlb	0	; () banked
  6188  000B10  51E6               	movf	printf@flag& (0+255),w,b
  6189  000B12  0B80               	andlw	128
  6190                           
  6191                           ; Switch size 1, requested type "space"
  6192                           ; Number of cases is 2, Range of values is 0 to 128
  6193                           ; switch strategies available:
  6194                           ; Name         Instructions Cycles
  6195                           ; simple_byte            7     4 (average)
  6196                           ;	Chosen strategy is simple_byte
  6197  000B14  0A00               	xorlw	0	; case 0
  6198  000B16  B4D8               	btfsc	status,2,c
  6199  000B18  D7AE               	goto	l6510
  6200  000B1A  0A80               	xorlw	128	; case 128
  6201  000B1C  B4D8               	btfsc	status,2,c
  6202  000B1E  D7D1               	goto	l6524
  6203  000B20                     l6542:
  6204                           
  6205                           ; BSR set to: 0
  6206                           ;doprnt.c: 1339: if(c < prec)
  6207  000B20  0E80               	movlw	128
  6208  000B22  0100               	movlb	0	; () banked
  6209  000B24  BFEA               	btfsc	printf@c& (0+255),7,b
  6210  000B26  0E7F               	movlw	127
  6211  000B28  0100               	movlb	0	; () banked
  6212  000B2A  6FC7               	movwf	??_printf& (0+255),b
  6213  000B2C  0100               	movlb	0	; () banked
  6214  000B2E  51E8               	movf	printf@prec& (0+255),w,b
  6215  000B30  0100               	movlb	0	; () banked
  6216  000B32  5DEA               	subwf	printf@c& (0+255),w,b
  6217  000B34  0100               	movlb	0	; () banked
  6218  000B36  51E9               	movf	(printf@prec+1)& (0+255),w,b
  6219  000B38  0A80               	xorlw	128
  6220  000B3A  0100               	movlb	0	; () banked
  6221  000B3C  59C7               	subwfb	??_printf& (0+255),w,b
  6222  000B3E  B0D8               	btfsc	status,0,c
  6223  000B40  D003               	goto	l6546
  6224                           
  6225                           ; BSR set to: 0
  6226                           ;doprnt.c: 1340: c = prec;
  6227  000B42  C0E8  F0EA         	movff	printf@prec,printf@c
  6228  000B46  D018               	goto	l6550
  6229  000B48                     l6546:
  6230                           
  6231                           ; BSR set to: 0
  6232                           ;doprnt.c: 1341: else if(prec < c)
  6233  000B48  0100               	movlb	0	; () banked
  6234  000B4A  51E9               	movf	(printf@prec+1)& (0+255),w,b
  6235  000B4C  0A80               	xorlw	128
  6236  000B4E  0100               	movlb	0	; () banked
  6237  000B50  6FC7               	movwf	??_printf& (0+255),b
  6238  000B52  0100               	movlb	0	; () banked
  6239  000B54  51EA               	movf	printf@c& (0+255),w,b
  6240  000B56  0100               	movlb	0	; () banked
  6241  000B58  5DE8               	subwf	printf@prec& (0+255),w,b
  6242  000B5A  0E80               	movlw	128
  6243  000B5C  0100               	movlb	0	; () banked
  6244  000B5E  BFEA               	btfsc	printf@c& (0+255),7,b
  6245  000B60  0E7F               	movlw	127
  6246  000B62  0100               	movlb	0	; () banked
  6247  000B64  59C7               	subwfb	??_printf& (0+255),w,b
  6248  000B66  B0D8               	btfsc	status,0,c
  6249  000B68  D007               	goto	l6550
  6250                           
  6251                           ; BSR set to: 0
  6252                           ;doprnt.c: 1342: prec = c;
  6253  000B6A  0100               	movlb	0	; () banked
  6254  000B6C  51EA               	movf	printf@c& (0+255),w,b
  6255  000B6E  0100               	movlb	0	; () banked
  6256  000B70  6FE8               	movwf	printf@prec& (0+255),b
  6257  000B72  6BE9               	clrf	(printf@prec+1)& (0+255),b
  6258  000B74  BFE8               	btfsc	printf@prec& (0+255),7,b
  6259  000B76  07E9               	decf	(printf@prec+1)& (0+255),f,b
  6260  000B78                     l6550:
  6261                           
  6262                           ; BSR set to: 0
  6263                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6264  000B78  0100               	movlb	0	; () banked
  6265  000B7A  51E4               	movf	printf@width& (0+255),w,b
  6266  000B7C  0100               	movlb	0	; () banked
  6267  000B7E  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  6268  000B80  B4D8               	btfsc	status,2,c
  6269  000B82  D014               	goto	l6556
  6270                           
  6271                           ; BSR set to: 0
  6272  000B84  0E03               	movlw	3
  6273  000B86  0100               	movlb	0	; () banked
  6274  000B88  15E6               	andwf	printf@flag& (0+255),w,b
  6275  000B8A  0100               	movlb	0	; () banked
  6276  000B8C  6FC7               	movwf	??_printf& (0+255),b
  6277  000B8E  0E00               	movlw	0
  6278  000B90  0100               	movlb	0	; () banked
  6279  000B92  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  6280  000B94  0100               	movlb	0	; () banked
  6281  000B96  6FC8               	movwf	(??_printf+1)& (0+255),b
  6282  000B98  0100               	movlb	0	; () banked
  6283  000B9A  51C7               	movf	??_printf& (0+255),w,b
  6284  000B9C  0100               	movlb	0	; () banked
  6285  000B9E  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  6286  000BA0  B4D8               	btfsc	status,2,c
  6287  000BA2  D004               	goto	l6556
  6288                           
  6289                           ; BSR set to: 0
  6290                           ;doprnt.c: 1346: width--;
  6291  000BA4  0100               	movlb	0	; () banked
  6292  000BA6  07E4               	decf	printf@width& (0+255),f,b
  6293  000BA8  A0D8               	btfss	status,0,c
  6294  000BAA  07E5               	decf	(printf@width+1)& (0+255),f,b
  6295  000BAC                     l6556:
  6296                           
  6297                           ; BSR set to: 0
  6298                           ;doprnt.c: 1348: if(flag & 0x4000) {
  6299  000BAC  0100               	movlb	0	; () banked
  6300  000BAE  ADE7               	btfss	(printf@flag+1)& (0+255),6,b
  6301  000BB0  D01E               	goto	l6564
  6302                           
  6303                           ; BSR set to: 0
  6304                           ;doprnt.c: 1349: if(width > prec)
  6305  000BB2  0100               	movlb	0	; () banked
  6306  000BB4  51E4               	movf	printf@width& (0+255),w,b
  6307  000BB6  0100               	movlb	0	; () banked
  6308  000BB8  5DE8               	subwf	printf@prec& (0+255),w,b
  6309  000BBA  0100               	movlb	0	; () banked
  6310  000BBC  51E9               	movf	(printf@prec+1)& (0+255),w,b
  6311  000BBE  0A80               	xorlw	128
  6312  000BC0  0100               	movlb	0	; () banked
  6313  000BC2  6FC7               	movwf	??_printf& (0+255),b
  6314  000BC4  0100               	movlb	0	; () banked
  6315  000BC6  51E5               	movf	(printf@width+1)& (0+255),w,b
  6316  000BC8  0A80               	xorlw	128
  6317  000BCA  0100               	movlb	0	; () banked
  6318  000BCC  59C7               	subwfb	??_printf& (0+255),w,b
  6319  000BCE  B0D8               	btfsc	status,0,c
  6320  000BD0  D009               	goto	l6562
  6321                           
  6322                           ; BSR set to: 0
  6323                           ;doprnt.c: 1350: width -= prec;
  6324  000BD2  0100               	movlb	0	; () banked
  6325  000BD4  51E8               	movf	printf@prec& (0+255),w,b
  6326  000BD6  0100               	movlb	0	; () banked
  6327  000BD8  5FE4               	subwf	printf@width& (0+255),f,b
  6328  000BDA  0100               	movlb	0	; () banked
  6329  000BDC  51E9               	movf	(printf@prec+1)& (0+255),w,b
  6330  000BDE  0100               	movlb	0	; () banked
  6331  000BE0  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  6332  000BE2  D005               	goto	l6564
  6333  000BE4                     l6562:
  6334                           
  6335                           ; BSR set to: 0
  6336                           ;doprnt.c: 1351: else
  6337                           ;doprnt.c: 1352: width = 0;
  6338  000BE4  0E00               	movlw	0
  6339  000BE6  0100               	movlb	0	; () banked
  6340  000BE8  6FE5               	movwf	(printf@width+1)& (0+255),b
  6341  000BEA  0E00               	movlw	0
  6342  000BEC  6FE4               	movwf	printf@width& (0+255),b
  6343  000BEE                     l6564:
  6344                           
  6345                           ; BSR set to: 0
  6346                           ;doprnt.c: 1353: }
  6347                           ;doprnt.c: 1381: if(width > c)
  6348  000BEE  0E80               	movlw	128
  6349  000BF0  0100               	movlb	0	; () banked
  6350  000BF2  BFEA               	btfsc	printf@c& (0+255),7,b
  6351  000BF4  0E7F               	movlw	127
  6352  000BF6  0100               	movlb	0	; () banked
  6353  000BF8  6FC7               	movwf	??_printf& (0+255),b
  6354  000BFA  0100               	movlb	0	; () banked
  6355  000BFC  51E4               	movf	printf@width& (0+255),w,b
  6356  000BFE  0100               	movlb	0	; () banked
  6357  000C00  5DEA               	subwf	printf@c& (0+255),w,b
  6358  000C02  0100               	movlb	0	; () banked
  6359  000C04  51E5               	movf	(printf@width+1)& (0+255),w,b
  6360  000C06  0A80               	xorlw	128
  6361  000C08  0100               	movlb	0	; () banked
  6362  000C0A  59C7               	subwfb	??_printf& (0+255),w,b
  6363  000C0C  B0D8               	btfsc	status,0,c
  6364  000C0E  D00B               	goto	l6568
  6365                           
  6366                           ; BSR set to: 0
  6367                           ;doprnt.c: 1382: width -= c;
  6368  000C10  0100               	movlb	0	; () banked
  6369  000C12  51EA               	movf	printf@c& (0+255),w,b
  6370  000C14  0100               	movlb	0	; () banked
  6371  000C16  5FE4               	subwf	printf@width& (0+255),f,b
  6372  000C18  0E00               	movlw	0
  6373  000C1A  0100               	movlb	0	; () banked
  6374  000C1C  BFEA               	btfsc	printf@c& (0+255),7,b
  6375  000C1E  0EFF               	movlw	255
  6376  000C20  0100               	movlb	0	; () banked
  6377  000C22  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  6378  000C24  D005               	goto	l6570
  6379  000C26                     l6568:
  6380                           
  6381                           ; BSR set to: 0
  6382                           ;doprnt.c: 1383: else
  6383                           ;doprnt.c: 1384: width = 0;
  6384  000C26  0E00               	movlw	0
  6385  000C28  0100               	movlb	0	; () banked
  6386  000C2A  6FE5               	movwf	(printf@width+1)& (0+255),b
  6387  000C2C  0E00               	movlw	0
  6388  000C2E  6FE4               	movwf	printf@width& (0+255),b
  6389  000C30                     l6570:
  6390                           
  6391                           ; BSR set to: 0
  6392                           ;doprnt.c: 1387: if(flag & 0x04) {
  6393  000C30  0100               	movlb	0	; () banked
  6394  000C32  A5E6               	btfss	printf@flag& (0+255),2,b
  6395  000C34  D021               	goto	l6582
  6396                           
  6397                           ; BSR set to: 0
  6398                           ;doprnt.c: 1392: if(flag & 0x03)
  6399  000C36  0E03               	movlw	3
  6400  000C38  0100               	movlb	0	; () banked
  6401  000C3A  15E6               	andwf	printf@flag& (0+255),w,b
  6402  000C3C  0100               	movlb	0	; () banked
  6403  000C3E  6FC7               	movwf	??_printf& (0+255),b
  6404  000C40  0E00               	movlw	0
  6405  000C42  0100               	movlb	0	; () banked
  6406  000C44  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  6407  000C46  0100               	movlb	0	; () banked
  6408  000C48  6FC8               	movwf	(??_printf+1)& (0+255),b
  6409  000C4A  0100               	movlb	0	; () banked
  6410  000C4C  51C7               	movf	??_printf& (0+255),w,b
  6411  000C4E  0100               	movlb	0	; () banked
  6412  000C50  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  6413  000C52  B4D8               	btfsc	status,2,c
  6414  000C54  D003               	goto	l6576
  6415                           
  6416                           ; BSR set to: 0
  6417                           ;doprnt.c: 1393: (putch('-') );
  6418  000C56  0E2D               	movlw	45
  6419  000C58  EC36  F01C         	call	_putch
  6420  000C5C                     l6576:
  6421                           
  6422                           ;doprnt.c: 1415: if(width)
  6423  000C5C  0100               	movlb	0	; () banked
  6424  000C5E  51E4               	movf	printf@width& (0+255),w,b
  6425  000C60  0100               	movlb	0	; () banked
  6426  000C62  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  6427  000C64  B4D8               	btfsc	status,2,c
  6428  000C66  D0B6               	goto	l6604
  6429                           
  6430                           ; BSR set to: 0
  6431                           ;doprnt.c: 1417: (putch('0') );
  6432                           
  6433                           ; BSR set to: 0
  6434                           
  6435                           ;doprnt.c: 1416: do
  6436  000C68  0E30               	movlw	48
  6437  000C6A  EC36  F01C         	call	_putch
  6438                           
  6439                           ;doprnt.c: 1418: while(--width);
  6440  000C6E  0100               	movlb	0	; () banked
  6441  000C70  07E4               	decf	printf@width& (0+255),f,b
  6442  000C72  A0D8               	btfss	status,0,c
  6443  000C74  07E5               	decf	(printf@width+1)& (0+255),f,b
  6444  000C76  D7F2               	goto	l6576
  6445  000C78                     l6582:
  6446                           
  6447                           ; BSR set to: 0
  6448                           ;doprnt.c: 1422: {
  6449                           ;doprnt.c: 1424: if(width
  6450                           ;doprnt.c: 1428: )
  6451  000C78  0100               	movlb	0	; () banked
  6452  000C7A  51E4               	movf	printf@width& (0+255),w,b
  6453  000C7C  0100               	movlb	0	; () banked
  6454  000C7E  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  6455  000C80  B4D8               	btfsc	status,2,c
  6456  000C82  D00D               	goto	l6588
  6457  000C84                     l6584:
  6458                           
  6459                           ; BSR set to: 0
  6460                           ;doprnt.c: 1430: (putch(' ') );
  6461  000C84  0E20               	movlw	32
  6462  000C86  EC36  F01C         	call	_putch
  6463                           
  6464                           ;doprnt.c: 1431: while(--width);
  6465  000C8A  0100               	movlb	0	; () banked
  6466  000C8C  07E4               	decf	printf@width& (0+255),f,b
  6467  000C8E  A0D8               	btfss	status,0,c
  6468  000C90  07E5               	decf	(printf@width+1)& (0+255),f,b
  6469  000C92  0100               	movlb	0	; () banked
  6470  000C94  51E4               	movf	printf@width& (0+255),w,b
  6471  000C96  0100               	movlb	0	; () banked
  6472  000C98  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  6473  000C9A  A4D8               	btfss	status,2,c
  6474  000C9C  D7F3               	goto	l6584
  6475  000C9E                     l6588:
  6476                           
  6477                           ; BSR set to: 0
  6478                           ;doprnt.c: 1438: if(flag & 0x03)
  6479  000C9E  0E03               	movlw	3
  6480  000CA0  0100               	movlb	0	; () banked
  6481  000CA2  15E6               	andwf	printf@flag& (0+255),w,b
  6482  000CA4  0100               	movlb	0	; () banked
  6483  000CA6  6FC7               	movwf	??_printf& (0+255),b
  6484  000CA8  0E00               	movlw	0
  6485  000CAA  0100               	movlb	0	; () banked
  6486  000CAC  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  6487  000CAE  0100               	movlb	0	; () banked
  6488  000CB0  6FC8               	movwf	(??_printf+1)& (0+255),b
  6489  000CB2  0100               	movlb	0	; () banked
  6490  000CB4  51C7               	movf	??_printf& (0+255),w,b
  6491  000CB6  0100               	movlb	0	; () banked
  6492  000CB8  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  6493  000CBA  B4D8               	btfsc	status,2,c
  6494  000CBC  D08B               	goto	l6604
  6495                           
  6496                           ; BSR set to: 0
  6497                           ;doprnt.c: 1439: (putch('-') );
  6498  000CBE  0E2D               	movlw	45
  6499  000CC0  EC36  F01C         	call	_putch
  6500                           
  6501                           ;doprnt.c: 1469: }
  6502                           ;doprnt.c: 1474: while(prec--) {
  6503  000CC4  D087               	goto	l6604
  6504  000CC6                     l6592:
  6505                           
  6506                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6507  000CC6  C0E8  F0C7         	movff	printf@prec,??_printf
  6508  000CCA  C0E9  F0C8         	movff	printf@prec+1,??_printf+1
  6509  000CCE  0100               	movlb	0	; () banked
  6510  000CD0  90D8               	bcf	status,0,c
  6511  000CD2  37C7               	rlcf	??_printf& (0+255),f,b
  6512  000CD4  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  6513  000CD6  0100               	movlb	0	; () banked
  6514  000CD8  90D8               	bcf	status,0,c
  6515  000CDA  37C7               	rlcf	??_printf& (0+255),f,b
  6516  000CDC  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  6517  000CDE  0E1D               	movlw	low _dpowers
  6518  000CE0  0100               	movlb	0	; () banked
  6519  000CE2  25C7               	addwf	??_printf& (0+255),w,b
  6520  000CE4  6EF6               	movwf	tblptrl,c
  6521  000CE6  0EFE               	movlw	high _dpowers
  6522  000CE8  21C8               	addwfc	(??_printf+1)& (0+255),w,b
  6523  000CEA  6EF7               	movwf	tblptrh,c
  6524  000CEC                     	if	0	;There are less than 3 active tblptr bytes
  6525  000CEC                     	endif
  6526  000CEC  0009               	tblrd		*+
  6527  000CEE  CFF5 F027          	movff	tablat,___lldiv@divisor
  6528  000CF2  0009               	tblrd		*+
  6529  000CF4  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  6530  000CF8  0009               	tblrd		*+
  6531  000CFA  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  6532  000CFE  000A               	tblrd		*-
  6533  000D00  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  6534  000D04  C0E0  F023         	movff	printf@val,___lldiv@dividend
  6535  000D08  C0E1  F024         	movff	printf@val+1,___lldiv@dividend+1
  6536  000D0C  C0E2  F025         	movff	printf@val+2,___lldiv@dividend+2
  6537  000D10  C0E3  F026         	movff	printf@val+3,___lldiv@dividend+3
  6538  000D14  ECF3  F018         	call	___lldiv	;wreg free
  6539  000D18  C023  F030         	movff	?___lldiv,___llmod@dividend
  6540  000D1C  C024  F031         	movff	?___lldiv+1,___llmod@dividend+1
  6541  000D20  C025  F032         	movff	?___lldiv+2,___llmod@dividend+2
  6542  000D24  C026  F033         	movff	?___lldiv+3,___llmod@dividend+3
  6543  000D28  0E0A               	movlw	10
  6544  000D2A  6E34               	movwf	___llmod@divisor,c
  6545  000D2C  0E00               	movlw	0
  6546  000D2E  6E35               	movwf	___llmod@divisor+1,c
  6547  000D30  0E00               	movlw	0
  6548  000D32  6E36               	movwf	___llmod@divisor+2,c
  6549  000D34  0E00               	movlw	0
  6550  000D36  6E37               	movwf	___llmod@divisor+3,c
  6551  000D38  ECE0  F019         	call	___llmod	;wreg free
  6552  000D3C  5030               	movf	?___llmod,w,c
  6553  000D3E  0F30               	addlw	48
  6554  000D40  0100               	movlb	0	; () banked
  6555  000D42  6FEA               	movwf	printf@c& (0+255),b
  6556                           
  6557                           ;doprnt.c: 1491: break;
  6558  000D44  D043               	goto	l6602
  6559  000D46                     l6594:
  6560                           
  6561                           ; BSR set to: 0
  6562                           ;doprnt.c: 1499: {
  6563                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6564  000D46  C0E0  F023         	movff	printf@val,___lldiv@dividend
  6565  000D4A  C0E1  F024         	movff	printf@val+1,___lldiv@dividend+1
  6566  000D4E  C0E2  F025         	movff	printf@val+2,___lldiv@dividend+2
  6567  000D52  C0E3  F026         	movff	printf@val+3,___lldiv@dividend+3
  6568  000D56  C0E8  F0C7         	movff	printf@prec,??_printf
  6569  000D5A  C0E9  F0C8         	movff	printf@prec+1,??_printf+1
  6570  000D5E  0100               	movlb	0	; () banked
  6571  000D60  90D8               	bcf	status,0,c
  6572  000D62  37C7               	rlcf	??_printf& (0+255),f,b
  6573  000D64  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  6574  000D66  0100               	movlb	0	; () banked
  6575  000D68  90D8               	bcf	status,0,c
  6576  000D6A  37C7               	rlcf	??_printf& (0+255),f,b
  6577  000D6C  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  6578  000D6E  0E93               	movlw	low _hexpowers
  6579  000D70  0100               	movlb	0	; () banked
  6580  000D72  25C7               	addwf	??_printf& (0+255),w,b
  6581  000D74  6EF6               	movwf	tblptrl,c
  6582  000D76  0EFE               	movlw	high _hexpowers
  6583  000D78  21C8               	addwfc	(??_printf+1)& (0+255),w,b
  6584  000D7A  6EF7               	movwf	tblptrh,c
  6585  000D7C                     	if	0	;There are less than 3 active tblptr bytes
  6586  000D7C                     	endif
  6587  000D7C  0009               	tblrd		*+
  6588  000D7E  CFF5 F027          	movff	tablat,___lldiv@divisor
  6589  000D82  0009               	tblrd		*+
  6590  000D84  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  6591  000D88  0009               	tblrd		*+
  6592  000D8A  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  6593  000D8E  000A               	tblrd		*-
  6594  000D90  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  6595  000D94  ECF3  F018         	call	___lldiv	;wreg free
  6596  000D98  5023               	movf	?___lldiv,w,c
  6597  000D9A  0B0F               	andlw	15
  6598  000D9C  0100               	movlb	0	; () banked
  6599  000D9E  6FD0               	movwf	printf@idx& (0+255),b
  6600                           
  6601                           ; BSR set to: 0
  6602                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6603  000DA0  0100               	movlb	0	; () banked
  6604  000DA2  51D0               	movf	printf@idx& (0+255),w,b
  6605  000DA4  0D01               	mullw	1
  6606  000DA6  0E38               	movlw	low STR_19
  6607  000DA8  24F3               	addwf	prodl,w,c
  6608  000DAA  6EF6               	movwf	tblptrl,c
  6609  000DAC  0EFF               	movlw	high STR_19
  6610  000DAE  20F4               	addwfc	prodh,w,c
  6611  000DB0  6EF7               	movwf	tblptrh,c
  6612  000DB2                     	if	0	;There are less than 3 active tblptr bytes
  6613  000DB2                     	endif
  6614  000DB2  0008               	tblrd		*
  6615  000DB4  CFF5 F0EA          	movff	tablat,printf@c
  6616                           
  6617                           ; BSR set to: 0
  6618                           ;doprnt.c: 1523: }
  6619                           
  6620                           ;doprnt.c: 1508: }
  6621                           ;doprnt.c: 1510: break;
  6622  000DB8  D009               	goto	l6602
  6623  000DBA                     l6600:
  6624  000DBA  0100               	movlb	0	; () banked
  6625  000DBC  51E6               	movf	printf@flag& (0+255),w,b
  6626  000DBE  0B80               	andlw	128
  6627                           
  6628                           ; Switch size 1, requested type "space"
  6629                           ; Number of cases is 2, Range of values is 0 to 128
  6630                           ; switch strategies available:
  6631                           ; Name         Instructions Cycles
  6632                           ; simple_byte            7     4 (average)
  6633                           ;	Chosen strategy is simple_byte
  6634  000DC0  0A00               	xorlw	0	; case 0
  6635  000DC2  B4D8               	btfsc	status,2,c
  6636  000DC4  D780               	goto	l6592
  6637  000DC6  0A80               	xorlw	128	; case 128
  6638  000DC8  B4D8               	btfsc	status,2,c
  6639  000DCA  D7BD               	goto	l6594
  6640  000DCC                     l6602:
  6641                           
  6642                           ; BSR set to: 0
  6643                           ;doprnt.c: 1524: (putch(c) );
  6644  000DCC  0100               	movlb	0	; () banked
  6645  000DCE  51EA               	movf	printf@c& (0+255),w,b
  6646  000DD0  EC36  F01C         	call	_putch
  6647  000DD4                     l6604:
  6648  000DD4  0100               	movlb	0	; () banked
  6649  000DD6  07E8               	decf	printf@prec& (0+255),f,b
  6650  000DD8  A0D8               	btfss	status,0,c
  6651  000DDA  07E9               	decf	(printf@prec+1)& (0+255),f,b
  6652  000DDC  0100               	movlb	0	; () banked
  6653  000DDE  29E8               	incf	printf@prec& (0+255),w,b
  6654  000DE0  E1EC               	bnz	l6600
  6655  000DE2  0100               	movlb	0	; () banked
  6656  000DE4  29E9               	incf	(printf@prec+1)& (0+255),w,b
  6657  000DE6  A4D8               	btfss	status,2,c
  6658  000DE8  D7E8               	goto	l6600
  6659  000DEA                     l6606:
  6660  000DEA  C0BD  FFF6         	movff	printf@f,tblptrl
  6661  000DEE  C0BE  FFF7         	movff	printf@f+1,tblptrh
  6662  000DF2  0100               	movlb	0	; () banked
  6663  000DF4  4BBD               	infsnz	printf@f& (0+255),f,b
  6664  000DF6  2BBE               	incf	(printf@f+1)& (0+255),f,b
  6665  000DF8                     	if	0	;tblptru may be non-zero
  6666  000DF8                     	endif
  6667  000DF8                     	if	0	;tblptru may be non-zero
  6668  000DF8                     	endif
  6669  000DF8  0008               	tblrd		*
  6670  000DFA  CFF5 F0EA          	movff	tablat,printf@c
  6671  000DFE  0100               	movlb	0	; () banked
  6672  000E00  51EA               	movf	printf@c& (0+255),w,b
  6673  000E02  B4D8               	btfsc	status,2,c
  6674  000E04  0012               	return	
  6675  000E06  EF11  F000         	goto	l6240
  6676  000E0A                     __end_of_printf:
  6677                           	opt stack 0
  6678                           tblptru	equ	0xFF8
  6679                           tblptrh	equ	0xFF7
  6680                           tblptrl	equ	0xFF6
  6681                           tablat	equ	0xFF5
  6682                           prodh	equ	0xFF4
  6683                           prodl	equ	0xFF3
  6684                           postinc0	equ	0xFEE
  6685                           wreg	equ	0xFE8
  6686                           postdec1	equ	0xFE5
  6687                           fsr1l	equ	0xFE1
  6688                           indf2	equ	0xFDF
  6689                           postinc2	equ	0xFDE
  6690                           postdec2	equ	0xFDD
  6691                           fsr2h	equ	0xFDA
  6692                           fsr2l	equ	0xFD9
  6693                           status	equ	0xFD8
  6694                           
  6695 ;; *************** function _scale *****************
  6696 ;; Defined at:
  6697 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6698 ;; Parameters:    Size  Location     Type
  6699 ;;  scl             1    wreg     char 
  6700 ;; Auto vars:     Size  Location     Type
  6701 ;;  scl             1   30[BANK0 ] char 
  6702 ;; Return value:  Size  Location     Type
  6703 ;;                  3   24[BANK0 ] char 
  6704 ;; Registers used:
  6705 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6706 ;; Tracked objects:
  6707 ;;		On entry : 0/0
  6708 ;;		On exit  : 0/0
  6709 ;;		Unchanged: 0/0
  6710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6711 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6712 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6714 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6715 ;;Total ram usage:        7 bytes
  6716 ;; Hardware stack levels used:    1
  6717 ;; Hardware stack levels required when called:    5
  6718 ;; This function calls:
  6719 ;;		___awdiv
  6720 ;;		___awmod
  6721 ;;		___ftmul
  6722 ;;		___wmul
  6723 ;; This function is called by:
  6724 ;;		_printf
  6725 ;; This function uses a non-reentrant model
  6726 ;;
  6727                           
  6728                           	psect	text14
  6729  0012F2                     __ptext14:
  6730                           	opt stack 0
  6731  0012F2                     _scale:
  6732                           	opt stack 23
  6733                           
  6734                           ; BSR set to: 0
  6735                           ;incstack = 0
  6736                           ;scale@scl stored from wreg
  6737  0012F2  0100               	movlb	0	; () banked
  6738  0012F4  6F9E               	movwf	scale@scl& (0+255),b
  6739                           
  6740                           ;doprnt.c: 428: if(scl < 0) {
  6741  0012F6  0100               	movlb	0	; () banked
  6742  0012F8  AF9E               	btfss	scale@scl& (0+255),7,b
  6743  0012FA  D104               	goto	l5892
  6744                           
  6745                           ; BSR set to: 0
  6746                           ;doprnt.c: 429: scl = -scl;
  6747  0012FC  0100               	movlb	0	; () banked
  6748  0012FE  6D9E               	negf	scale@scl& (0+255),b
  6749                           
  6750                           ;doprnt.c: 430: if(scl>=110)
  6751  001300  0100               	movlb	0	; () banked
  6752  001302  519E               	movf	scale@scl& (0+255),w,b
  6753  001304  0A80               	xorlw	128
  6754  001306  0F12               	addlw	-238
  6755  001308  A0D8               	btfss	status,0,c
  6756  00130A  D094               	goto	l5882
  6757                           
  6758                           ; BSR set to: 0
  6759                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6760  00130C  0E00               	movlw	0
  6761  00130E  6E34               	movwf	___wmul@multiplicand+1,c
  6762  001310  0E03               	movlw	3
  6763  001312  6E33               	movwf	___wmul@multiplicand,c
  6764  001314  0E00               	movlw	0
  6765  001316  6E2C               	movwf	___awdiv@divisor+1,c
  6766  001318  0E0A               	movlw	10
  6767  00131A  6E2B               	movwf	___awdiv@divisor,c
  6768  00131C  0E00               	movlw	0
  6769  00131E  6E26               	movwf	___awmod@divisor+1,c
  6770  001320  0E64               	movlw	100
  6771  001322  6E25               	movwf	___awmod@divisor,c
  6772  001324  0100               	movlb	0	; () banked
  6773  001326  519E               	movf	scale@scl& (0+255),w,b
  6774  001328  6E23               	movwf	___awmod@dividend,c
  6775  00132A  6A24               	clrf	___awmod@dividend+1,c
  6776  00132C  BE23               	btfsc	___awmod@dividend,7,c
  6777  00132E  0624               	decf	___awmod@dividend+1,f,c
  6778  001330  EC70  F019         	call	___awmod	;wreg free
  6779  001334  C023  F029         	movff	?___awmod,___awdiv@dividend
  6780  001338  C024  F02A         	movff	?___awmod+1,___awdiv@dividend+1
  6781  00133C  ECB1  F018         	call	___awdiv	;wreg free
  6782  001340  0E09               	movlw	9
  6783  001342  2429               	addwf	?___awdiv,w,c
  6784  001344  6E31               	movwf	___wmul@multiplier,c
  6785  001346  0E00               	movlw	0
  6786  001348  202A               	addwfc	?___awdiv+1,w,c
  6787  00134A  6E32               	movwf	___wmul@multiplier+1,c
  6788  00134C  EC11  F01C         	call	___wmul	;wreg free
  6789  001350  0E45               	movlw	low __npowers_
  6790  001352  2431               	addwf	?___wmul,w,c
  6791  001354  6EF6               	movwf	tblptrl,c
  6792  001356  0EFE               	movlw	high __npowers_
  6793  001358  2032               	addwfc	?___wmul+1,w,c
  6794  00135A  6EF7               	movwf	tblptrh,c
  6795  00135C                     	if	0	;There are less than 3 active tblptr bytes
  6796  00135C                     	endif
  6797  00135C  0009               	tblrd		*+
  6798  00135E  CFF5 F08C          	movff	tablat,___ftmul@f2
  6799  001362  0009               	tblrd		*+
  6800  001364  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  6801  001368  000A               	tblrd		*-
  6802  00136A  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  6803  00136E  0E00               	movlw	0
  6804  001370  6E2C               	movwf	___awdiv@divisor+1,c
  6805  001372  0E64               	movlw	100
  6806  001374  6E2B               	movwf	___awdiv@divisor,c
  6807  001376  0100               	movlb	0	; () banked
  6808  001378  519E               	movf	scale@scl& (0+255),w,b
  6809  00137A  6E29               	movwf	___awdiv@dividend,c
  6810  00137C  6A2A               	clrf	___awdiv@dividend+1,c
  6811  00137E  BE29               	btfsc	___awdiv@dividend,7,c
  6812  001380  062A               	decf	___awdiv@dividend+1,f,c
  6813  001382  ECB1  F018         	call	___awdiv	;wreg free
  6814  001386  0E12               	movlw	18
  6815  001388  2429               	addwf	?___awdiv,w,c
  6816  00138A  6E31               	movwf	___wmul@multiplier,c
  6817  00138C  0E00               	movlw	0
  6818  00138E  202A               	addwfc	?___awdiv+1,w,c
  6819  001390  6E32               	movwf	___wmul@multiplier+1,c
  6820  001392  0E00               	movlw	0
  6821  001394  6E34               	movwf	___wmul@multiplicand+1,c
  6822  001396  0E03               	movlw	3
  6823  001398  6E33               	movwf	___wmul@multiplicand,c
  6824  00139A  EC11  F01C         	call	___wmul	;wreg free
  6825  00139E  0E45               	movlw	low __npowers_
  6826  0013A0  2431               	addwf	?___wmul,w,c
  6827  0013A2  6EF6               	movwf	tblptrl,c
  6828  0013A4  0EFE               	movlw	high __npowers_
  6829  0013A6  2032               	addwfc	?___wmul+1,w,c
  6830  0013A8  6EF7               	movwf	tblptrh,c
  6831  0013AA                     	if	0	;There are less than 3 active tblptr bytes
  6832  0013AA                     	endif
  6833  0013AA  0009               	tblrd		*+
  6834  0013AC  CFF5 F089          	movff	tablat,___ftmul@f1
  6835  0013B0  0009               	tblrd		*+
  6836  0013B2  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  6837  0013B6  000A               	tblrd		*-
  6838  0013B8  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  6839  0013BC  ECCB  F00F         	call	___ftmul	;wreg free
  6840  0013C0  C089  F09B         	movff	?___ftmul,_scale$1355
  6841  0013C4  C08A  F09C         	movff	?___ftmul+1,_scale$1355+1
  6842  0013C8  C08B  F09D         	movff	?___ftmul+2,_scale$1355+2
  6843                           
  6844                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6845  0013CC  C09B  F089         	movff	_scale$1355,___ftmul@f1
  6846  0013D0  C09C  F08A         	movff	_scale$1355+1,___ftmul@f1+1
  6847  0013D4  C09D  F08B         	movff	_scale$1355+2,___ftmul@f1+2
  6848  0013D8  0E00               	movlw	0
  6849  0013DA  6E34               	movwf	___wmul@multiplicand+1,c
  6850  0013DC  0E03               	movlw	3
  6851  0013DE  6E33               	movwf	___wmul@multiplicand,c
  6852  0013E0  0E00               	movlw	0
  6853  0013E2  6E26               	movwf	___awmod@divisor+1,c
  6854  0013E4  0E0A               	movlw	10
  6855  0013E6  6E25               	movwf	___awmod@divisor,c
  6856  0013E8  0100               	movlb	0	; () banked
  6857  0013EA  519E               	movf	scale@scl& (0+255),w,b
  6858  0013EC  6E23               	movwf	___awmod@dividend,c
  6859  0013EE  6A24               	clrf	___awmod@dividend+1,c
  6860  0013F0  BE23               	btfsc	___awmod@dividend,7,c
  6861  0013F2  0624               	decf	___awmod@dividend+1,f,c
  6862  0013F4  EC70  F019         	call	___awmod	;wreg free
  6863  0013F8  C023  F031         	movff	?___awmod,___wmul@multiplier
  6864  0013FC  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  6865  001400  EC11  F01C         	call	___wmul	;wreg free
  6866  001404  0E45               	movlw	low __npowers_
  6867  001406  2431               	addwf	?___wmul,w,c
  6868  001408  6EF6               	movwf	tblptrl,c
  6869  00140A  0EFE               	movlw	high __npowers_
  6870  00140C  2032               	addwfc	?___wmul+1,w,c
  6871  00140E  6EF7               	movwf	tblptrh,c
  6872  001410                     	if	0	;There are less than 3 active tblptr bytes
  6873  001410                     	endif
  6874  001410  0009               	tblrd		*+
  6875  001412  CFF5 F08C          	movff	tablat,___ftmul@f2
  6876  001416  0009               	tblrd		*+
  6877  001418  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  6878  00141C  000A               	tblrd		*-
  6879  00141E  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  6880  001422  ECCB  F00F         	call	___ftmul	;wreg free
  6881  001426  C089  F098         	movff	?___ftmul,?_scale
  6882  00142A  C08A  F099         	movff	?___ftmul+1,?_scale+1
  6883  00142E  C08B  F09A         	movff	?___ftmul+2,?_scale+2
  6884  001432  0012               	return	
  6885  001434                     l5882:
  6886                           
  6887                           ;doprnt.c: 432: else if(scl > 10)
  6888  001434  0100               	movlb	0	; () banked
  6889  001436  519E               	movf	scale@scl& (0+255),w,b
  6890  001438  0A80               	xorlw	128
  6891  00143A  0F75               	addlw	-139
  6892  00143C  A0D8               	btfss	status,0,c
  6893  00143E  D04F               	goto	l5888
  6894                           
  6895                           ; BSR set to: 0
  6896                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6897  001440  0E00               	movlw	0
  6898  001442  6E2C               	movwf	___awdiv@divisor+1,c
  6899  001444  0E0A               	movlw	10
  6900  001446  6E2B               	movwf	___awdiv@divisor,c
  6901  001448  0100               	movlb	0	; () banked
  6902  00144A  519E               	movf	scale@scl& (0+255),w,b
  6903  00144C  6E29               	movwf	___awdiv@dividend,c
  6904  00144E  6A2A               	clrf	___awdiv@dividend+1,c
  6905  001450  BE29               	btfsc	___awdiv@dividend,7,c
  6906  001452  062A               	decf	___awdiv@dividend+1,f,c
  6907  001454  ECB1  F018         	call	___awdiv	;wreg free
  6908  001458  0E09               	movlw	9
  6909  00145A  2429               	addwf	?___awdiv,w,c
  6910  00145C  6E31               	movwf	___wmul@multiplier,c
  6911  00145E  0E00               	movlw	0
  6912  001460  202A               	addwfc	?___awdiv+1,w,c
  6913  001462  6E32               	movwf	___wmul@multiplier+1,c
  6914  001464  0E00               	movlw	0
  6915  001466  6E34               	movwf	___wmul@multiplicand+1,c
  6916  001468  0E03               	movlw	3
  6917  00146A  6E33               	movwf	___wmul@multiplicand,c
  6918  00146C  EC11  F01C         	call	___wmul	;wreg free
  6919  001470  0E45               	movlw	low __npowers_
  6920  001472  2431               	addwf	?___wmul,w,c
  6921  001474  6EF6               	movwf	tblptrl,c
  6922  001476  0EFE               	movlw	high __npowers_
  6923  001478  2032               	addwfc	?___wmul+1,w,c
  6924  00147A  6EF7               	movwf	tblptrh,c
  6925  00147C                     	if	0	;There are less than 3 active tblptr bytes
  6926  00147C                     	endif
  6927  00147C  0009               	tblrd		*+
  6928  00147E  CFF5 F089          	movff	tablat,___ftmul@f1
  6929  001482  0009               	tblrd		*+
  6930  001484  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  6931  001488  000A               	tblrd		*-
  6932  00148A  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  6933  00148E  0E00               	movlw	0
  6934  001490  6E34               	movwf	___wmul@multiplicand+1,c
  6935  001492  0E03               	movlw	3
  6936  001494  6E33               	movwf	___wmul@multiplicand,c
  6937  001496  0E00               	movlw	0
  6938  001498  6E26               	movwf	___awmod@divisor+1,c
  6939  00149A  0E0A               	movlw	10
  6940  00149C  6E25               	movwf	___awmod@divisor,c
  6941  00149E  0100               	movlb	0	; () banked
  6942  0014A0  519E               	movf	scale@scl& (0+255),w,b
  6943  0014A2  6E23               	movwf	___awmod@dividend,c
  6944  0014A4  6A24               	clrf	___awmod@dividend+1,c
  6945  0014A6  BE23               	btfsc	___awmod@dividend,7,c
  6946  0014A8  0624               	decf	___awmod@dividend+1,f,c
  6947  0014AA  EC70  F019         	call	___awmod	;wreg free
  6948  0014AE  C023  F031         	movff	?___awmod,___wmul@multiplier
  6949  0014B2  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  6950  0014B6  EC11  F01C         	call	___wmul	;wreg free
  6951  0014BA  0E45               	movlw	low __npowers_
  6952  0014BC  2431               	addwf	?___wmul,w,c
  6953  0014BE  6EF6               	movwf	tblptrl,c
  6954  0014C0  0EFE               	movlw	high __npowers_
  6955  0014C2  2032               	addwfc	?___wmul+1,w,c
  6956  0014C4  6EF7               	movwf	tblptrh,c
  6957  0014C6                     	if	0	;There are less than 3 active tblptr bytes
  6958  0014C6                     	endif
  6959  0014C6  0009               	tblrd		*+
  6960  0014C8  CFF5 F08C          	movff	tablat,___ftmul@f2
  6961  0014CC  0009               	tblrd		*+
  6962  0014CE  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  6963  0014D2  000A               	tblrd		*-
  6964  0014D4  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  6965  0014D8  ECCB  F00F         	call	___ftmul	;wreg free
  6966  0014DC  D7A4               	goto	L4
  6967  0014DE                     l5888:
  6968                           
  6969                           ;doprnt.c: 434: return _npowers_[scl];
  6970  0014DE  0100               	movlb	0	; () banked
  6971  0014E0  519E               	movf	scale@scl& (0+255),w,b
  6972  0014E2  0D03               	mullw	3
  6973  0014E4  0E45               	movlw	low __npowers_
  6974  0014E6  24F3               	addwf	prodl,w,c
  6975  0014E8  6EF6               	movwf	tblptrl,c
  6976  0014EA  0EFE               	movlw	high __npowers_
  6977  0014EC  20F4               	addwfc	prodh,w,c
  6978  0014EE  6EF7               	movwf	tblptrh,c
  6979  0014F0                     	if	0	;There are less than 3 active tblptr bytes
  6980  0014F0                     	endif
  6981  0014F0  0009               	tblrd		*+
  6982  0014F2  CFF5 F098          	movff	tablat,?_scale
  6983  0014F6  0009               	tblrd		*+
  6984  0014F8  CFF5 F099          	movff	tablat,?_scale+1
  6985  0014FC  000A               	tblrd		*-
  6986  0014FE  CFF5 F09A          	movff	tablat,?_scale+2
  6987                           
  6988                           ; BSR set to: 0
  6989  001502  0012               	return	
  6990  001504                     l5892:
  6991                           
  6992                           ; BSR set to: 0
  6993                           ;doprnt.c: 435: }
  6994                           ;doprnt.c: 436: if(scl>=110)
  6995  001504  0100               	movlb	0	; () banked
  6996  001506  519E               	movf	scale@scl& (0+255),w,b
  6997  001508  0A80               	xorlw	128
  6998  00150A  0F12               	addlw	-238
  6999  00150C  A0D8               	btfss	status,0,c
  7000  00150E  D094               	goto	l5900
  7001                           
  7002                           ; BSR set to: 0
  7003                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7004  001510  0E00               	movlw	0
  7005  001512  6E34               	movwf	___wmul@multiplicand+1,c
  7006  001514  0E03               	movlw	3
  7007  001516  6E33               	movwf	___wmul@multiplicand,c
  7008  001518  0E00               	movlw	0
  7009  00151A  6E2C               	movwf	___awdiv@divisor+1,c
  7010  00151C  0E0A               	movlw	10
  7011  00151E  6E2B               	movwf	___awdiv@divisor,c
  7012  001520  0E00               	movlw	0
  7013  001522  6E26               	movwf	___awmod@divisor+1,c
  7014  001524  0E64               	movlw	100
  7015  001526  6E25               	movwf	___awmod@divisor,c
  7016  001528  0100               	movlb	0	; () banked
  7017  00152A  519E               	movf	scale@scl& (0+255),w,b
  7018  00152C  6E23               	movwf	___awmod@dividend,c
  7019  00152E  6A24               	clrf	___awmod@dividend+1,c
  7020  001530  BE23               	btfsc	___awmod@dividend,7,c
  7021  001532  0624               	decf	___awmod@dividend+1,f,c
  7022  001534  EC70  F019         	call	___awmod	;wreg free
  7023  001538  C023  F029         	movff	?___awmod,___awdiv@dividend
  7024  00153C  C024  F02A         	movff	?___awmod+1,___awdiv@dividend+1
  7025  001540  ECB1  F018         	call	___awdiv	;wreg free
  7026  001544  0E09               	movlw	9
  7027  001546  2429               	addwf	?___awdiv,w,c
  7028  001548  6E31               	movwf	___wmul@multiplier,c
  7029  00154A  0E00               	movlw	0
  7030  00154C  202A               	addwfc	?___awdiv+1,w,c
  7031  00154E  6E32               	movwf	___wmul@multiplier+1,c
  7032  001550  EC11  F01C         	call	___wmul	;wreg free
  7033  001554  0E6C               	movlw	low __powers_
  7034  001556  2431               	addwf	?___wmul,w,c
  7035  001558  6EF6               	movwf	tblptrl,c
  7036  00155A  0EFE               	movlw	high __powers_
  7037  00155C  2032               	addwfc	?___wmul+1,w,c
  7038  00155E  6EF7               	movwf	tblptrh,c
  7039  001560                     	if	0	;There are less than 3 active tblptr bytes
  7040  001560                     	endif
  7041  001560  0009               	tblrd		*+
  7042  001562  CFF5 F08C          	movff	tablat,___ftmul@f2
  7043  001566  0009               	tblrd		*+
  7044  001568  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7045  00156C  000A               	tblrd		*-
  7046  00156E  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7047  001572  0E00               	movlw	0
  7048  001574  6E2C               	movwf	___awdiv@divisor+1,c
  7049  001576  0E64               	movlw	100
  7050  001578  6E2B               	movwf	___awdiv@divisor,c
  7051  00157A  0100               	movlb	0	; () banked
  7052  00157C  519E               	movf	scale@scl& (0+255),w,b
  7053  00157E  6E29               	movwf	___awdiv@dividend,c
  7054  001580  6A2A               	clrf	___awdiv@dividend+1,c
  7055  001582  BE29               	btfsc	___awdiv@dividend,7,c
  7056  001584  062A               	decf	___awdiv@dividend+1,f,c
  7057  001586  ECB1  F018         	call	___awdiv	;wreg free
  7058  00158A  0E12               	movlw	18
  7059  00158C  2429               	addwf	?___awdiv,w,c
  7060  00158E  6E31               	movwf	___wmul@multiplier,c
  7061  001590  0E00               	movlw	0
  7062  001592  202A               	addwfc	?___awdiv+1,w,c
  7063  001594  6E32               	movwf	___wmul@multiplier+1,c
  7064  001596  0E00               	movlw	0
  7065  001598  6E34               	movwf	___wmul@multiplicand+1,c
  7066  00159A  0E03               	movlw	3
  7067  00159C  6E33               	movwf	___wmul@multiplicand,c
  7068  00159E  EC11  F01C         	call	___wmul	;wreg free
  7069  0015A2  0E6C               	movlw	low __powers_
  7070  0015A4  2431               	addwf	?___wmul,w,c
  7071  0015A6  6EF6               	movwf	tblptrl,c
  7072  0015A8  0EFE               	movlw	high __powers_
  7073  0015AA  2032               	addwfc	?___wmul+1,w,c
  7074  0015AC  6EF7               	movwf	tblptrh,c
  7075  0015AE                     	if	0	;There are less than 3 active tblptr bytes
  7076  0015AE                     	endif
  7077  0015AE  0009               	tblrd		*+
  7078  0015B0  CFF5 F089          	movff	tablat,___ftmul@f1
  7079  0015B4  0009               	tblrd		*+
  7080  0015B6  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  7081  0015BA  000A               	tblrd		*-
  7082  0015BC  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  7083  0015C0  ECCB  F00F         	call	___ftmul	;wreg free
  7084  0015C4  C089  F09B         	movff	?___ftmul,_scale$1355
  7085  0015C8  C08A  F09C         	movff	?___ftmul+1,_scale$1355+1
  7086  0015CC  C08B  F09D         	movff	?___ftmul+2,_scale$1355+2
  7087                           
  7088                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7089  0015D0  C09B  F089         	movff	_scale$1355,___ftmul@f1
  7090  0015D4  C09C  F08A         	movff	_scale$1355+1,___ftmul@f1+1
  7091  0015D8  C09D  F08B         	movff	_scale$1355+2,___ftmul@f1+2
  7092  0015DC  0E00               	movlw	0
  7093  0015DE  6E34               	movwf	___wmul@multiplicand+1,c
  7094  0015E0  0E03               	movlw	3
  7095  0015E2  6E33               	movwf	___wmul@multiplicand,c
  7096  0015E4  0E00               	movlw	0
  7097  0015E6  6E26               	movwf	___awmod@divisor+1,c
  7098  0015E8  0E0A               	movlw	10
  7099  0015EA  6E25               	movwf	___awmod@divisor,c
  7100  0015EC  0100               	movlb	0	; () banked
  7101  0015EE  519E               	movf	scale@scl& (0+255),w,b
  7102  0015F0  6E23               	movwf	___awmod@dividend,c
  7103  0015F2  6A24               	clrf	___awmod@dividend+1,c
  7104  0015F4  BE23               	btfsc	___awmod@dividend,7,c
  7105  0015F6  0624               	decf	___awmod@dividend+1,f,c
  7106  0015F8  EC70  F019         	call	___awmod	;wreg free
  7107  0015FC  C023  F031         	movff	?___awmod,___wmul@multiplier
  7108  001600  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  7109  001604  EC11  F01C         	call	___wmul	;wreg free
  7110  001608  0E6C               	movlw	low __powers_
  7111  00160A  2431               	addwf	?___wmul,w,c
  7112  00160C  6EF6               	movwf	tblptrl,c
  7113  00160E  0EFE               	movlw	high __powers_
  7114  001610  2032               	addwfc	?___wmul+1,w,c
  7115  001612  6EF7               	movwf	tblptrh,c
  7116  001614                     	if	0	;There are less than 3 active tblptr bytes
  7117  001614                     	endif
  7118  001614  0009               	tblrd		*+
  7119  001616  CFF5 F08C          	movff	tablat,___ftmul@f2
  7120  00161A  0009               	tblrd		*+
  7121  00161C  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7122  001620  000A               	tblrd		*-
  7123  001622  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7124  001626  ECCB  F00F         	call	___ftmul	;wreg free
  7125  00162A  C089  F098         	movff	?___ftmul,?_scale
  7126  00162E  C08A  F099         	movff	?___ftmul+1,?_scale+1
  7127  001632  C08B  F09A         	movff	?___ftmul+2,?_scale+2
  7128  001636  0012               	return	
  7129  001638                     l5900:
  7130                           
  7131                           ;doprnt.c: 438: else if(scl > 10)
  7132  001638  0100               	movlb	0	; () banked
  7133  00163A  519E               	movf	scale@scl& (0+255),w,b
  7134  00163C  0A80               	xorlw	128
  7135  00163E  0F75               	addlw	-139
  7136  001640  A0D8               	btfss	status,0,c
  7137  001642  D04F               	goto	l5906
  7138                           
  7139                           ; BSR set to: 0
  7140                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  7141  001644  0E00               	movlw	0
  7142  001646  6E2C               	movwf	___awdiv@divisor+1,c
  7143  001648  0E0A               	movlw	10
  7144  00164A  6E2B               	movwf	___awdiv@divisor,c
  7145  00164C  0100               	movlb	0	; () banked
  7146  00164E  519E               	movf	scale@scl& (0+255),w,b
  7147  001650  6E29               	movwf	___awdiv@dividend,c
  7148  001652  6A2A               	clrf	___awdiv@dividend+1,c
  7149  001654  BE29               	btfsc	___awdiv@dividend,7,c
  7150  001656  062A               	decf	___awdiv@dividend+1,f,c
  7151  001658  ECB1  F018         	call	___awdiv	;wreg free
  7152  00165C  0E09               	movlw	9
  7153  00165E  2429               	addwf	?___awdiv,w,c
  7154  001660  6E31               	movwf	___wmul@multiplier,c
  7155  001662  0E00               	movlw	0
  7156  001664  202A               	addwfc	?___awdiv+1,w,c
  7157  001666  6E32               	movwf	___wmul@multiplier+1,c
  7158  001668  0E00               	movlw	0
  7159  00166A  6E34               	movwf	___wmul@multiplicand+1,c
  7160  00166C  0E03               	movlw	3
  7161  00166E  6E33               	movwf	___wmul@multiplicand,c
  7162  001670  EC11  F01C         	call	___wmul	;wreg free
  7163  001674  0E6C               	movlw	low __powers_
  7164  001676  2431               	addwf	?___wmul,w,c
  7165  001678  6EF6               	movwf	tblptrl,c
  7166  00167A  0EFE               	movlw	high __powers_
  7167  00167C  2032               	addwfc	?___wmul+1,w,c
  7168  00167E  6EF7               	movwf	tblptrh,c
  7169  001680                     	if	0	;There are less than 3 active tblptr bytes
  7170  001680                     	endif
  7171  001680  0009               	tblrd		*+
  7172  001682  CFF5 F089          	movff	tablat,___ftmul@f1
  7173  001686  0009               	tblrd		*+
  7174  001688  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  7175  00168C  000A               	tblrd		*-
  7176  00168E  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  7177  001692  0E00               	movlw	0
  7178  001694  6E34               	movwf	___wmul@multiplicand+1,c
  7179  001696  0E03               	movlw	3
  7180  001698  6E33               	movwf	___wmul@multiplicand,c
  7181  00169A  0E00               	movlw	0
  7182  00169C  6E26               	movwf	___awmod@divisor+1,c
  7183  00169E  0E0A               	movlw	10
  7184  0016A0  6E25               	movwf	___awmod@divisor,c
  7185  0016A2  0100               	movlb	0	; () banked
  7186  0016A4  519E               	movf	scale@scl& (0+255),w,b
  7187  0016A6  6E23               	movwf	___awmod@dividend,c
  7188  0016A8  6A24               	clrf	___awmod@dividend+1,c
  7189  0016AA  BE23               	btfsc	___awmod@dividend,7,c
  7190  0016AC  0624               	decf	___awmod@dividend+1,f,c
  7191  0016AE  EC70  F019         	call	___awmod	;wreg free
  7192  0016B2  C023  F031         	movff	?___awmod,___wmul@multiplier
  7193  0016B6  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  7194  0016BA  EC11  F01C         	call	___wmul	;wreg free
  7195  0016BE  0E6C               	movlw	low __powers_
  7196  0016C0  2431               	addwf	?___wmul,w,c
  7197  0016C2  6EF6               	movwf	tblptrl,c
  7198  0016C4  0EFE               	movlw	high __powers_
  7199  0016C6  2032               	addwfc	?___wmul+1,w,c
  7200  0016C8  6EF7               	movwf	tblptrh,c
  7201  0016CA                     	if	0	;There are less than 3 active tblptr bytes
  7202  0016CA                     	endif
  7203  0016CA  0009               	tblrd		*+
  7204  0016CC  CFF5 F08C          	movff	tablat,___ftmul@f2
  7205  0016D0  0009               	tblrd		*+
  7206  0016D2  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7207  0016D6  000A               	tblrd		*-
  7208  0016D8  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7209  0016DC  ECCB  F00F         	call	___ftmul	;wreg free
  7210  0016E0  D7A4               	goto	L5
  7211  0016E2                     l5906:
  7212                           
  7213                           ;doprnt.c: 440: return _powers_[scl];
  7214  0016E2  0100               	movlb	0	; () banked
  7215  0016E4  519E               	movf	scale@scl& (0+255),w,b
  7216  0016E6  0D03               	mullw	3
  7217  0016E8  0E6C               	movlw	low __powers_
  7218  0016EA  24F3               	addwf	prodl,w,c
  7219  0016EC  6EF6               	movwf	tblptrl,c
  7220  0016EE  0EFE               	movlw	high __powers_
  7221  0016F0  20F4               	addwfc	prodh,w,c
  7222  0016F2  6EF7               	movwf	tblptrh,c
  7223  0016F4                     	if	0	;There are less than 3 active tblptr bytes
  7224  0016F4                     	endif
  7225  0016F4  0009               	tblrd		*+
  7226  0016F6  CFF5 F098          	movff	tablat,?_scale
  7227  0016FA  0009               	tblrd		*+
  7228  0016FC  CFF5 F099          	movff	tablat,?_scale+1
  7229  001700  000A               	tblrd		*-
  7230  001702  CFF5 F09A          	movff	tablat,?_scale+2
  7231  001706  0012               	return	
  7232  001708                     __end_of_scale:
  7233                           	opt stack 0
  7234                           tblptru	equ	0xFF8
  7235                           tblptrh	equ	0xFF7
  7236                           tblptrl	equ	0xFF6
  7237                           tablat	equ	0xFF5
  7238                           prodh	equ	0xFF4
  7239                           prodl	equ	0xFF3
  7240                           postinc0	equ	0xFEE
  7241                           wreg	equ	0xFE8
  7242                           postdec1	equ	0xFE5
  7243                           fsr1l	equ	0xFE1
  7244                           indf2	equ	0xFDF
  7245                           postinc2	equ	0xFDE
  7246                           postdec2	equ	0xFDD
  7247                           fsr2h	equ	0xFDA
  7248                           fsr2l	equ	0xFD9
  7249                           status	equ	0xFD8
  7250                           
  7251 ;; *************** function _putch *****************
  7252 ;; Defined at:
  7253 ;;		line 35 in file "lcd.c"
  7254 ;; Parameters:    Size  Location     Type
  7255 ;;  data            1    wreg     unsigned char 
  7256 ;; Auto vars:     Size  Location     Type
  7257 ;;  data            1   38[COMRAM] unsigned char 
  7258 ;; Return value:  Size  Location     Type
  7259 ;;                  1    wreg      void 
  7260 ;; Registers used:
  7261 ;;		wreg, status,2, status,0, cstack
  7262 ;; Tracked objects:
  7263 ;;		On entry : 0/0
  7264 ;;		On exit  : 0/0
  7265 ;;		Unchanged: 0/0
  7266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7268 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7270 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7271 ;;Total ram usage:        1 bytes
  7272 ;; Hardware stack levels used:    1
  7273 ;; Hardware stack levels required when called:    6
  7274 ;; This function calls:
  7275 ;;		_lcdNewline
  7276 ;;		_lcdNibble
  7277 ;; This function is called by:
  7278 ;;		_printf
  7279 ;; This function uses a non-reentrant model
  7280 ;;
  7281                           
  7282                           	psect	text15
  7283  00386C                     __ptext15:
  7284                           	opt stack 0
  7285  00386C                     _putch:
  7286                           	opt stack 22
  7287                           
  7288                           ;incstack = 0
  7289                           ;putch@data stored from wreg
  7290  00386C  6E27               	movwf	putch@data,c
  7291                           
  7292                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  7293  00386E  0E0A               	movlw	10
  7294  003870  1827               	xorwf	putch@data,w,c
  7295  003872  A4D8               	btfss	status,2,c
  7296  003874  D003               	goto	l216
  7297  003876  EC82  F01C         	call	_lcdNewline	;wreg free
  7298  00387A  0012               	return	
  7299  00387C                     l216:
  7300                           
  7301                           ;lcd.c: 37: else
  7302                           ;lcd.c: 38: {
  7303                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  7304  00387C  848C               	bsf	3980,2,c	;volatile
  7305                           
  7306                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  7307  00387E  0E74               	movlw	116
  7308  003880                     u7697:
  7309  003880  2EE8               	decfsz	wreg,f,c
  7310  003882  D7FE               	bra	u7697
  7311  003884  D000               	nop2	
  7312                           
  7313                           ;lcd.c: 41: lcdNibble(data);
  7314  003886  5027               	movf	putch@data,w,c
  7315  003888  EC13  F01A         	call	_lcdNibble
  7316  00388C  0012               	return	
  7317  00388E                     __end_of_putch:
  7318                           	opt stack 0
  7319                           tblptru	equ	0xFF8
  7320                           tblptrh	equ	0xFF7
  7321                           tblptrl	equ	0xFF6
  7322                           tablat	equ	0xFF5
  7323                           prodh	equ	0xFF4
  7324                           prodl	equ	0xFF3
  7325                           postinc0	equ	0xFEE
  7326                           wreg	equ	0xFE8
  7327                           postdec1	equ	0xFE5
  7328                           fsr1l	equ	0xFE1
  7329                           indf2	equ	0xFDF
  7330                           postinc2	equ	0xFDE
  7331                           postdec2	equ	0xFDD
  7332                           fsr2h	equ	0xFDA
  7333                           fsr2l	equ	0xFD9
  7334                           status	equ	0xFD8
  7335                           
  7336 ;; *************** function _lcdNewline *****************
  7337 ;; Defined at:
  7338 ;;		line 78 in file "lcd.c"
  7339 ;; Parameters:    Size  Location     Type
  7340 ;;		None
  7341 ;; Auto vars:     Size  Location     Type
  7342 ;;		None
  7343 ;; Return value:  Size  Location     Type
  7344 ;;                  1    wreg      void 
  7345 ;; Registers used:
  7346 ;;		wreg, status,2, status,0, cstack
  7347 ;; Tracked objects:
  7348 ;;		On entry : 0/0
  7349 ;;		On exit  : 0/0
  7350 ;;		Unchanged: 0/0
  7351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7355 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7356 ;;Total ram usage:        0 bytes
  7357 ;; Hardware stack levels used:    1
  7358 ;; Hardware stack levels required when called:    5
  7359 ;; This function calls:
  7360 ;;		_lcdInst
  7361 ;; This function is called by:
  7362 ;;		_putch
  7363 ;; This function uses a non-reentrant model
  7364 ;;
  7365                           
  7366                           	psect	text16
  7367  003904                     __ptext16:
  7368                           	opt stack 0
  7369  003904                     _lcdNewline:
  7370                           	opt stack 22
  7371                           
  7372                           ;lcd.c: 79: lcdInst(0b11000000);
  7373                           
  7374                           ;incstack = 0
  7375  003904  0EC0               	movlw	192
  7376  003906  EC47  F01C         	call	_lcdInst
  7377  00390A  0012               	return		;funcret
  7378  00390C                     __end_of_lcdNewline:
  7379                           	opt stack 0
  7380                           tblptru	equ	0xFF8
  7381                           tblptrh	equ	0xFF7
  7382                           tblptrl	equ	0xFF6
  7383                           tablat	equ	0xFF5
  7384                           prodh	equ	0xFF4
  7385                           prodl	equ	0xFF3
  7386                           postinc0	equ	0xFEE
  7387                           wreg	equ	0xFE8
  7388                           postdec1	equ	0xFE5
  7389                           fsr1l	equ	0xFE1
  7390                           indf2	equ	0xFDF
  7391                           postinc2	equ	0xFDE
  7392                           postdec2	equ	0xFDD
  7393                           fsr2h	equ	0xFDA
  7394                           fsr2l	equ	0xFD9
  7395                           status	equ	0xFD8
  7396                           
  7397 ;; *************** function _isdigit *****************
  7398 ;; Defined at:
  7399 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7400 ;; Parameters:    Size  Location     Type
  7401 ;;  c               1    wreg     unsigned char 
  7402 ;; Auto vars:     Size  Location     Type
  7403 ;;  c               1   36[COMRAM] unsigned char 
  7404 ;; Return value:  Size  Location     Type
  7405 ;;		None               void
  7406 ;; Registers used:
  7407 ;;		wreg, status,2, status,0
  7408 ;; Tracked objects:
  7409 ;;		On entry : 0/0
  7410 ;;		On exit  : 0/0
  7411 ;;		Unchanged: 0/0
  7412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7414 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7415 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7416 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7417 ;;Total ram usage:        3 bytes
  7418 ;; Hardware stack levels used:    1
  7419 ;; Hardware stack levels required when called:    3
  7420 ;; This function calls:
  7421 ;;		Nothing
  7422 ;; This function is called by:
  7423 ;;		_printf
  7424 ;; This function uses a non-reentrant model
  7425 ;;
  7426                           
  7427                           	psect	text17
  7428  0038CE                     __ptext17:
  7429                           	opt stack 0
  7430  0038CE                     _isdigit:
  7431                           	opt stack 25
  7432                           
  7433                           ;incstack = 0
  7434                           ;isdigit@c stored from wreg
  7435  0038CE  6E25               	movwf	isdigit@c,c
  7436  0038D0  0E00               	movlw	0
  7437  0038D2  6E24               	movwf	_isdigit$978,c
  7438  0038D4  0E3A               	movlw	58
  7439  0038D6  6025               	cpfslt	isdigit@c,c
  7440  0038D8  D005               	goto	l5918
  7441  0038DA  0E2F               	movlw	47
  7442  0038DC  6425               	cpfsgt	isdigit@c,c
  7443  0038DE  D002               	goto	l5918
  7444  0038E0  0E01               	movlw	1
  7445  0038E2  6E24               	movwf	_isdigit$978,c
  7446  0038E4                     l5918:
  7447  0038E4  C024  F023         	movff	_isdigit$978,??_isdigit
  7448  0038E8  3023               	rrcf	??_isdigit,w,c
  7449  0038EA  0012               	return	
  7450  0038EC                     __end_of_isdigit:
  7451                           	opt stack 0
  7452                           tblptru	equ	0xFF8
  7453                           tblptrh	equ	0xFF7
  7454                           tblptrl	equ	0xFF6
  7455                           tablat	equ	0xFF5
  7456                           prodh	equ	0xFF4
  7457                           prodl	equ	0xFF3
  7458                           postinc0	equ	0xFEE
  7459                           wreg	equ	0xFE8
  7460                           postdec1	equ	0xFE5
  7461                           fsr1l	equ	0xFE1
  7462                           indf2	equ	0xFDF
  7463                           postinc2	equ	0xFDE
  7464                           postdec2	equ	0xFDD
  7465                           fsr2h	equ	0xFDA
  7466                           fsr2l	equ	0xFD9
  7467                           status	equ	0xFD8
  7468                           
  7469 ;; *************** function _fround *****************
  7470 ;; Defined at:
  7471 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7472 ;; Parameters:    Size  Location     Type
  7473 ;;  prec            1    wreg     unsigned char 
  7474 ;; Auto vars:     Size  Location     Type
  7475 ;;  prec            1   33[BANK0 ] unsigned char 
  7476 ;; Return value:  Size  Location     Type
  7477 ;;                  3   24[BANK0 ] unsigned char 
  7478 ;; Registers used:
  7479 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7480 ;; Tracked objects:
  7481 ;;		On entry : 0/0
  7482 ;;		On exit  : 0/0
  7483 ;;		Unchanged: 0/0
  7484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7485 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7486 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7488 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7489 ;;Total ram usage:       10 bytes
  7490 ;; Hardware stack levels used:    1
  7491 ;; Hardware stack levels required when called:    5
  7492 ;; This function calls:
  7493 ;;		___awdiv
  7494 ;;		___awmod
  7495 ;;		___ftmul
  7496 ;;		___wmul
  7497 ;; This function is called by:
  7498 ;;		_printf
  7499 ;; This function uses a non-reentrant model
  7500 ;;
  7501                           
  7502                           	psect	text18
  7503  001D36                     __ptext18:
  7504                           	opt stack 0
  7505  001D36                     _fround:
  7506                           	opt stack 23
  7507                           
  7508                           ;incstack = 0
  7509                           ;fround@prec stored from wreg
  7510  001D36  0100               	movlb	0	; () banked
  7511  001D38  6FA1               	movwf	fround@prec& (0+255),b
  7512                           
  7513                           ;doprnt.c: 413: if(prec>=110)
  7514  001D3A  0E6D               	movlw	109
  7515  001D3C  0100               	movlb	0	; () banked
  7516  001D3E  65A1               	cpfsgt	fround@prec& (0+255),b
  7517  001D40  D0A2               	goto	l5860
  7518                           
  7519                           ; BSR set to: 0
  7520                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7521  001D42  0E00               	movlw	0
  7522  001D44  6E34               	movwf	___wmul@multiplicand+1,c
  7523  001D46  0E03               	movlw	3
  7524  001D48  6E33               	movwf	___wmul@multiplicand,c
  7525  001D4A  0E00               	movlw	0
  7526  001D4C  6E2C               	movwf	___awdiv@divisor+1,c
  7527  001D4E  0E0A               	movlw	10
  7528  001D50  6E2B               	movwf	___awdiv@divisor,c
  7529  001D52  0E00               	movlw	0
  7530  001D54  6E26               	movwf	___awmod@divisor+1,c
  7531  001D56  0E64               	movlw	100
  7532  001D58  6E25               	movwf	___awmod@divisor,c
  7533  001D5A  C0A1  F023         	movff	fround@prec,___awmod@dividend
  7534  001D5E  6A24               	clrf	___awmod@dividend+1,c
  7535  001D60  EC70  F019         	call	___awmod	;wreg free
  7536  001D64  C023  F029         	movff	?___awmod,___awdiv@dividend
  7537  001D68  C024  F02A         	movff	?___awmod+1,___awdiv@dividend+1
  7538  001D6C  ECB1  F018         	call	___awdiv	;wreg free
  7539  001D70  0E09               	movlw	9
  7540  001D72  2429               	addwf	?___awdiv,w,c
  7541  001D74  6E31               	movwf	___wmul@multiplier,c
  7542  001D76  0E00               	movlw	0
  7543  001D78  202A               	addwfc	?___awdiv+1,w,c
  7544  001D7A  6E32               	movwf	___wmul@multiplier+1,c
  7545  001D7C  EC11  F01C         	call	___wmul	;wreg free
  7546  001D80  0E45               	movlw	low __npowers_
  7547  001D82  2431               	addwf	?___wmul,w,c
  7548  001D84  6EF6               	movwf	tblptrl,c
  7549  001D86  0EFE               	movlw	high __npowers_
  7550  001D88  2032               	addwfc	?___wmul+1,w,c
  7551  001D8A  6EF7               	movwf	tblptrh,c
  7552  001D8C                     	if	0	;There are less than 3 active tblptr bytes
  7553  001D8C                     	endif
  7554  001D8C  0009               	tblrd		*+
  7555  001D8E  CFF5 F08C          	movff	tablat,___ftmul@f2
  7556  001D92  0009               	tblrd		*+
  7557  001D94  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7558  001D98  000A               	tblrd		*-
  7559  001D9A  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7560  001D9E  0E00               	movlw	0
  7561  001DA0  6E2C               	movwf	___awdiv@divisor+1,c
  7562  001DA2  0E64               	movlw	100
  7563  001DA4  6E2B               	movwf	___awdiv@divisor,c
  7564  001DA6  C0A1  F029         	movff	fround@prec,___awdiv@dividend
  7565  001DAA  6A2A               	clrf	___awdiv@dividend+1,c
  7566  001DAC  ECB1  F018         	call	___awdiv	;wreg free
  7567  001DB0  0E12               	movlw	18
  7568  001DB2  2429               	addwf	?___awdiv,w,c
  7569  001DB4  6E31               	movwf	___wmul@multiplier,c
  7570  001DB6  0E00               	movlw	0
  7571  001DB8  202A               	addwfc	?___awdiv+1,w,c
  7572  001DBA  6E32               	movwf	___wmul@multiplier+1,c
  7573  001DBC  0E00               	movlw	0
  7574  001DBE  6E34               	movwf	___wmul@multiplicand+1,c
  7575  001DC0  0E03               	movlw	3
  7576  001DC2  6E33               	movwf	___wmul@multiplicand,c
  7577  001DC4  EC11  F01C         	call	___wmul	;wreg free
  7578  001DC8  0E45               	movlw	low __npowers_
  7579  001DCA  2431               	addwf	?___wmul,w,c
  7580  001DCC  6EF6               	movwf	tblptrl,c
  7581  001DCE  0EFE               	movlw	high __npowers_
  7582  001DD0  2032               	addwfc	?___wmul+1,w,c
  7583  001DD2  6EF7               	movwf	tblptrh,c
  7584  001DD4                     	if	0	;There are less than 3 active tblptr bytes
  7585  001DD4                     	endif
  7586  001DD4  0009               	tblrd		*+
  7587  001DD6  CFF5 F089          	movff	tablat,___ftmul@f1
  7588  001DDA  0009               	tblrd		*+
  7589  001DDC  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  7590  001DE0  000A               	tblrd		*-
  7591  001DE2  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  7592  001DE6  ECCB  F00F         	call	___ftmul	;wreg free
  7593  001DEA  C089  F09E         	movff	?___ftmul,_fround$1353
  7594  001DEE  C08A  F09F         	movff	?___ftmul+1,_fround$1353+1
  7595  001DF2  C08B  F0A0         	movff	?___ftmul+2,_fround$1353+2
  7596                           
  7597                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7598  001DF6  0E00               	movlw	0
  7599  001DF8  6E34               	movwf	___wmul@multiplicand+1,c
  7600  001DFA  0E03               	movlw	3
  7601  001DFC  6E33               	movwf	___wmul@multiplicand,c
  7602  001DFE  0E00               	movlw	0
  7603  001E00  6E26               	movwf	___awmod@divisor+1,c
  7604  001E02  0E0A               	movlw	10
  7605  001E04  6E25               	movwf	___awmod@divisor,c
  7606  001E06  C0A1  F023         	movff	fround@prec,___awmod@dividend
  7607  001E0A  6A24               	clrf	___awmod@dividend+1,c
  7608  001E0C  EC70  F019         	call	___awmod	;wreg free
  7609  001E10  C023  F031         	movff	?___awmod,___wmul@multiplier
  7610  001E14  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  7611  001E18  EC11  F01C         	call	___wmul	;wreg free
  7612  001E1C  0E45               	movlw	low __npowers_
  7613  001E1E  2431               	addwf	?___wmul,w,c
  7614  001E20  6EF6               	movwf	tblptrl,c
  7615  001E22  0EFE               	movlw	high __npowers_
  7616  001E24  2032               	addwfc	?___wmul+1,w,c
  7617  001E26  6EF7               	movwf	tblptrh,c
  7618  001E28                     	if	0	;There are less than 3 active tblptr bytes
  7619  001E28                     	endif
  7620  001E28  0009               	tblrd		*+
  7621  001E2A  CFF5 F08C          	movff	tablat,___ftmul@f2
  7622  001E2E  0009               	tblrd		*+
  7623  001E30  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7624  001E34  000A               	tblrd		*-
  7625  001E36  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7626  001E3A  C09E  F089         	movff	_fround$1353,___ftmul@f1
  7627  001E3E  C09F  F08A         	movff	_fround$1353+1,___ftmul@f1+1
  7628  001E42  C0A0  F08B         	movff	_fround$1353+2,___ftmul@f1+2
  7629  001E46  ECCB  F00F         	call	___ftmul	;wreg free
  7630  001E4A  C089  F09B         	movff	?___ftmul,_fround$1354
  7631  001E4E  C08A  F09C         	movff	?___ftmul+1,_fround$1354+1
  7632  001E52  C08B  F09D         	movff	?___ftmul+2,_fround$1354+2
  7633                           
  7634                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7635  001E56  C09B  F089         	movff	_fround$1354,___ftmul@f1
  7636  001E5A  C09C  F08A         	movff	_fround$1354+1,___ftmul@f1+1
  7637  001E5E  C09D  F08B         	movff	_fround$1354+2,___ftmul@f1+2
  7638  001E62  0E00               	movlw	0
  7639  001E64  0100               	movlb	0	; () banked
  7640  001E66  6F8C               	movwf	___ftmul@f2& (0+255),b
  7641  001E68  0E00               	movlw	0
  7642  001E6A  0100               	movlb	0	; () banked
  7643  001E6C  6F8D               	movwf	(___ftmul@f2+1)& (0+255),b
  7644  001E6E  0E3F               	movlw	63
  7645  001E70  0100               	movlb	0	; () banked
  7646  001E72  6F8E               	movwf	(___ftmul@f2+2)& (0+255),b
  7647  001E74  ECCB  F00F         	call	___ftmul	;wreg free
  7648  001E78  C089  F098         	movff	?___ftmul,?_fround
  7649  001E7C  C08A  F099         	movff	?___ftmul+1,?_fround+1
  7650  001E80  C08B  F09A         	movff	?___ftmul+2,?_fround+2
  7651  001E84  0012               	return	
  7652  001E86                     l5860:
  7653                           
  7654                           ;doprnt.c: 415: else if(prec > 10)
  7655  001E86  0E0A               	movlw	10
  7656  001E88  0100               	movlb	0	; () banked
  7657  001E8A  65A1               	cpfsgt	fround@prec& (0+255),b
  7658  001E8C  D060               	goto	l5868
  7659                           
  7660                           ; BSR set to: 0
  7661                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7662  001E8E  0E00               	movlw	0
  7663  001E90  6E34               	movwf	___wmul@multiplicand+1,c
  7664  001E92  0E03               	movlw	3
  7665  001E94  6E33               	movwf	___wmul@multiplicand,c
  7666  001E96  0E00               	movlw	0
  7667  001E98  6E26               	movwf	___awmod@divisor+1,c
  7668  001E9A  0E0A               	movlw	10
  7669  001E9C  6E25               	movwf	___awmod@divisor,c
  7670  001E9E  C0A1  F023         	movff	fround@prec,___awmod@dividend
  7671  001EA2  6A24               	clrf	___awmod@dividend+1,c
  7672  001EA4  EC70  F019         	call	___awmod	;wreg free
  7673  001EA8  C023  F031         	movff	?___awmod,___wmul@multiplier
  7674  001EAC  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  7675  001EB0  EC11  F01C         	call	___wmul	;wreg free
  7676  001EB4  0E45               	movlw	low __npowers_
  7677  001EB6  2431               	addwf	?___wmul,w,c
  7678  001EB8  6EF6               	movwf	tblptrl,c
  7679  001EBA  0EFE               	movlw	high __npowers_
  7680  001EBC  2032               	addwfc	?___wmul+1,w,c
  7681  001EBE  6EF7               	movwf	tblptrh,c
  7682  001EC0                     	if	0	;There are less than 3 active tblptr bytes
  7683  001EC0                     	endif
  7684  001EC0  0009               	tblrd		*+
  7685  001EC2  CFF5 F08C          	movff	tablat,___ftmul@f2
  7686  001EC6  0009               	tblrd		*+
  7687  001EC8  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7688  001ECC  000A               	tblrd		*-
  7689  001ECE  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7690  001ED2  0E00               	movlw	0
  7691  001ED4  6E2C               	movwf	___awdiv@divisor+1,c
  7692  001ED6  0E0A               	movlw	10
  7693  001ED8  6E2B               	movwf	___awdiv@divisor,c
  7694  001EDA  C0A1  F029         	movff	fround@prec,___awdiv@dividend
  7695  001EDE  6A2A               	clrf	___awdiv@dividend+1,c
  7696  001EE0  ECB1  F018         	call	___awdiv	;wreg free
  7697  001EE4  0E09               	movlw	9
  7698  001EE6  2429               	addwf	?___awdiv,w,c
  7699  001EE8  6E31               	movwf	___wmul@multiplier,c
  7700  001EEA  0E00               	movlw	0
  7701  001EEC  202A               	addwfc	?___awdiv+1,w,c
  7702  001EEE  6E32               	movwf	___wmul@multiplier+1,c
  7703  001EF0  0E00               	movlw	0
  7704  001EF2  6E34               	movwf	___wmul@multiplicand+1,c
  7705  001EF4  0E03               	movlw	3
  7706  001EF6  6E33               	movwf	___wmul@multiplicand,c
  7707  001EF8  EC11  F01C         	call	___wmul	;wreg free
  7708  001EFC  0E45               	movlw	low __npowers_
  7709  001EFE  2431               	addwf	?___wmul,w,c
  7710  001F00  6EF6               	movwf	tblptrl,c
  7711  001F02  0EFE               	movlw	high __npowers_
  7712  001F04  2032               	addwfc	?___wmul+1,w,c
  7713  001F06  6EF7               	movwf	tblptrh,c
  7714  001F08                     	if	0	;There are less than 3 active tblptr bytes
  7715  001F08                     	endif
  7716  001F08  0009               	tblrd		*+
  7717  001F0A  CFF5 F089          	movff	tablat,___ftmul@f1
  7718  001F0E  0009               	tblrd		*+
  7719  001F10  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  7720  001F14  000A               	tblrd		*-
  7721  001F16  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  7722  001F1A  ECCB  F00F         	call	___ftmul	;wreg free
  7723  001F1E  C089  F09E         	movff	?___ftmul,_fround$1353
  7724  001F22  C08A  F09F         	movff	?___ftmul+1,_fround$1353+1
  7725  001F26  C08B  F0A0         	movff	?___ftmul+2,_fround$1353+2
  7726                           
  7727                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7728  001F2A  C09E  F089         	movff	_fround$1353,___ftmul@f1
  7729  001F2E  C09F  F08A         	movff	_fround$1353+1,___ftmul@f1+1
  7730  001F32  C0A0  F08B         	movff	_fround$1353+2,___ftmul@f1+2
  7731  001F36  0E00               	movlw	0
  7732  001F38  0100               	movlb	0	; () banked
  7733  001F3A  6F8C               	movwf	___ftmul@f2& (0+255),b
  7734  001F3C  0E00               	movlw	0
  7735  001F3E  0100               	movlb	0	; () banked
  7736  001F40  6F8D               	movwf	(___ftmul@f2+1)& (0+255),b
  7737  001F42  0E3F               	movlw	63
  7738  001F44  0100               	movlb	0	; () banked
  7739  001F46  6F8E               	movwf	(___ftmul@f2+2)& (0+255),b
  7740  001F48  ECCB  F00F         	call	___ftmul	;wreg free
  7741  001F4C  D795               	goto	L6
  7742  001F4E                     l5868:
  7743                           
  7744                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  7745  001F4E  0100               	movlb	0	; () banked
  7746  001F50  51A1               	movf	fround@prec& (0+255),w,b
  7747  001F52  0D03               	mullw	3
  7748  001F54  0E45               	movlw	low __npowers_
  7749  001F56  24F3               	addwf	prodl,w,c
  7750  001F58  6EF6               	movwf	tblptrl,c
  7751  001F5A  0EFE               	movlw	high __npowers_
  7752  001F5C  20F4               	addwfc	prodh,w,c
  7753  001F5E  6EF7               	movwf	tblptrh,c
  7754  001F60                     	if	0	;There are less than 3 active tblptr bytes
  7755  001F60                     	endif
  7756  001F60  0009               	tblrd		*+
  7757  001F62  CFF5 F089          	movff	tablat,___ftmul@f1
  7758  001F66  0009               	tblrd		*+
  7759  001F68  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  7760  001F6C  000A               	tblrd		*-
  7761  001F6E  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  7762  001F72  0E00               	movlw	0
  7763  001F74  0100               	movlb	0	; () banked
  7764  001F76  6F8C               	movwf	___ftmul@f2& (0+255),b
  7765  001F78  0E00               	movlw	0
  7766  001F7A  0100               	movlb	0	; () banked
  7767  001F7C  6F8D               	movwf	(___ftmul@f2+1)& (0+255),b
  7768  001F7E  0E3F               	movlw	63
  7769  001F80  0100               	movlb	0	; () banked
  7770  001F82  6F8E               	movwf	(___ftmul@f2+2)& (0+255),b
  7771  001F84  ECCB  F00F         	call	___ftmul	;wreg free
  7772  001F88  C089  F098         	movff	?___ftmul,?_fround
  7773  001F8C  C08A  F099         	movff	?___ftmul+1,?_fround+1
  7774  001F90  C08B  F09A         	movff	?___ftmul+2,?_fround+2
  7775  001F94  0012               	return	
  7776  001F96                     __end_of_fround:
  7777                           	opt stack 0
  7778                           tblptru	equ	0xFF8
  7779                           tblptrh	equ	0xFF7
  7780                           tblptrl	equ	0xFF6
  7781                           tablat	equ	0xFF5
  7782                           prodh	equ	0xFF4
  7783                           prodl	equ	0xFF3
  7784                           postinc0	equ	0xFEE
  7785                           wreg	equ	0xFE8
  7786                           postdec1	equ	0xFE5
  7787                           fsr1l	equ	0xFE1
  7788                           indf2	equ	0xFDF
  7789                           postinc2	equ	0xFDE
  7790                           postdec2	equ	0xFDD
  7791                           fsr2h	equ	0xFDA
  7792                           fsr2l	equ	0xFD9
  7793                           status	equ	0xFD8
  7794                           
  7795 ;; *************** function ___wmul *****************
  7796 ;; Defined at:
  7797 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7798 ;; Parameters:    Size  Location     Type
  7799 ;;  multiplier      2   48[COMRAM] unsigned int 
  7800 ;;  multiplicand    2   50[COMRAM] unsigned int 
  7801 ;; Auto vars:     Size  Location     Type
  7802 ;;  product         2   52[COMRAM] unsigned int 
  7803 ;; Return value:  Size  Location     Type
  7804 ;;                  2   48[COMRAM] unsigned int 
  7805 ;; Registers used:
  7806 ;;		wreg, status,2, status,0, prodl, prodh
  7807 ;; Tracked objects:
  7808 ;;		On entry : 0/0
  7809 ;;		On exit  : 0/0
  7810 ;;		Unchanged: 0/0
  7811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7812 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7813 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7815 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7816 ;;Total ram usage:        6 bytes
  7817 ;; Hardware stack levels used:    1
  7818 ;; Hardware stack levels required when called:    3
  7819 ;; This function calls:
  7820 ;;		Nothing
  7821 ;; This function is called by:
  7822 ;;		_fround
  7823 ;;		_scale
  7824 ;;		_printf
  7825 ;; This function uses a non-reentrant model
  7826 ;;
  7827                           
  7828                           	psect	text19
  7829  003822                     __ptext19:
  7830                           	opt stack 0
  7831  003822                     ___wmul:
  7832                           	opt stack 24
  7833                           
  7834                           ;incstack = 0
  7835  003822  5031               	movf	___wmul@multiplier,w,c
  7836  003824  0233               	mulwf	___wmul@multiplicand,c
  7837  003826  CFF3 F035          	movff	prodl,___wmul@product
  7838  00382A  CFF4 F036          	movff	prodh,___wmul@product+1
  7839  00382E  5031               	movf	___wmul@multiplier,w,c
  7840  003830  0234               	mulwf	___wmul@multiplicand+1,c
  7841  003832  50F3               	movf	prodl,w,c
  7842  003834  2636               	addwf	___wmul@product+1,f,c
  7843  003836  5032               	movf	___wmul@multiplier+1,w,c
  7844  003838  0233               	mulwf	___wmul@multiplicand,c
  7845  00383A  50F3               	movf	prodl,w,c
  7846  00383C  2636               	addwf	___wmul@product+1,f,c
  7847  00383E  C035  F031         	movff	___wmul@product,?___wmul
  7848  003842  C036  F032         	movff	___wmul@product+1,?___wmul+1
  7849  003846  0012               	return	
  7850  003848                     __end_of___wmul:
  7851                           	opt stack 0
  7852                           tblptru	equ	0xFF8
  7853                           tblptrh	equ	0xFF7
  7854                           tblptrl	equ	0xFF6
  7855                           tablat	equ	0xFF5
  7856                           prodh	equ	0xFF4
  7857                           prodl	equ	0xFF3
  7858                           postinc0	equ	0xFEE
  7859                           wreg	equ	0xFE8
  7860                           postdec1	equ	0xFE5
  7861                           fsr1l	equ	0xFE1
  7862                           indf2	equ	0xFDF
  7863                           postinc2	equ	0xFDE
  7864                           postdec2	equ	0xFDD
  7865                           fsr2h	equ	0xFDA
  7866                           fsr2l	equ	0xFD9
  7867                           status	equ	0xFD8
  7868                           
  7869 ;; *************** function ___awmod *****************
  7870 ;; Defined at:
  7871 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  7872 ;; Parameters:    Size  Location     Type
  7873 ;;  dividend        2   34[COMRAM] int 
  7874 ;;  divisor         2   36[COMRAM] int 
  7875 ;; Auto vars:     Size  Location     Type
  7876 ;;  sign            1   39[COMRAM] unsigned char 
  7877 ;;  counter         1   38[COMRAM] unsigned char 
  7878 ;; Return value:  Size  Location     Type
  7879 ;;                  2   34[COMRAM] int 
  7880 ;; Registers used:
  7881 ;;		wreg, status,2, status,0
  7882 ;; Tracked objects:
  7883 ;;		On entry : 0/0
  7884 ;;		On exit  : 0/0
  7885 ;;		Unchanged: 0/0
  7886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7887 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7888 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7890 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7891 ;;Total ram usage:        6 bytes
  7892 ;; Hardware stack levels used:    1
  7893 ;; Hardware stack levels required when called:    3
  7894 ;; This function calls:
  7895 ;;		Nothing
  7896 ;; This function is called by:
  7897 ;;		_fround
  7898 ;;		_scale
  7899 ;; This function uses a non-reentrant model
  7900 ;;
  7901                           
  7902                           	psect	text20
  7903  0032E0                     __ptext20:
  7904                           	opt stack 0
  7905  0032E0                     ___awmod:
  7906                           	opt stack 24
  7907                           
  7908                           ;incstack = 0
  7909  0032E0  0E00               	movlw	0
  7910  0032E2  6E28               	movwf	___awmod@sign,c
  7911  0032E4  AE24               	btfss	___awmod@dividend+1,7,c
  7912  0032E6  D006               	goto	l5814
  7913  0032E8  6C23               	negf	___awmod@dividend,c
  7914  0032EA  1E24               	comf	___awmod@dividend+1,f,c
  7915  0032EC  B0D8               	btfsc	status,0,c
  7916  0032EE  2A24               	incf	___awmod@dividend+1,f,c
  7917  0032F0  0E01               	movlw	1
  7918  0032F2  6E28               	movwf	___awmod@sign,c
  7919  0032F4                     l5814:
  7920  0032F4  AE26               	btfss	___awmod@divisor+1,7,c
  7921  0032F6  D004               	goto	l5818
  7922  0032F8  6C25               	negf	___awmod@divisor,c
  7923  0032FA  1E26               	comf	___awmod@divisor+1,f,c
  7924  0032FC  B0D8               	btfsc	status,0,c
  7925  0032FE  2A26               	incf	___awmod@divisor+1,f,c
  7926  003300                     l5818:
  7927  003300  5025               	movf	___awmod@divisor,w,c
  7928  003302  1026               	iorwf	___awmod@divisor+1,w,c
  7929  003304  B4D8               	btfsc	status,2,c
  7930  003306  D018               	goto	l5834
  7931  003308  0E01               	movlw	1
  7932  00330A  6E27               	movwf	___awmod@counter,c
  7933  00330C  D004               	goto	l5824
  7934  00330E                     l5822:
  7935  00330E  90D8               	bcf	status,0,c
  7936  003310  3625               	rlcf	___awmod@divisor,f,c
  7937  003312  3626               	rlcf	___awmod@divisor+1,f,c
  7938  003314  2A27               	incf	___awmod@counter,f,c
  7939  003316                     l5824:
  7940  003316  AE26               	btfss	___awmod@divisor+1,7,c
  7941  003318  D7FA               	goto	l5822
  7942  00331A                     l5826:
  7943  00331A  5025               	movf	___awmod@divisor,w,c
  7944  00331C  5C23               	subwf	___awmod@dividend,w,c
  7945  00331E  5026               	movf	___awmod@divisor+1,w,c
  7946  003320  5824               	subwfb	___awmod@dividend+1,w,c
  7947  003322  A0D8               	btfss	status,0,c
  7948  003324  D004               	goto	l5830
  7949  003326  5025               	movf	___awmod@divisor,w,c
  7950  003328  5E23               	subwf	___awmod@dividend,f,c
  7951  00332A  5026               	movf	___awmod@divisor+1,w,c
  7952  00332C  5A24               	subwfb	___awmod@dividend+1,f,c
  7953  00332E                     l5830:
  7954  00332E  90D8               	bcf	status,0,c
  7955  003330  3226               	rrcf	___awmod@divisor+1,f,c
  7956  003332  3225               	rrcf	___awmod@divisor,f,c
  7957  003334  2E27               	decfsz	___awmod@counter,f,c
  7958  003336  D7F1               	goto	l5826
  7959  003338                     l5834:
  7960  003338  5028               	movf	___awmod@sign,w,c
  7961  00333A  B4D8               	btfsc	status,2,c
  7962  00333C  D004               	goto	l5838
  7963  00333E  6C23               	negf	___awmod@dividend,c
  7964  003340  1E24               	comf	___awmod@dividend+1,f,c
  7965  003342  B0D8               	btfsc	status,0,c
  7966  003344  2A24               	incf	___awmod@dividend+1,f,c
  7967  003346                     l5838:
  7968  003346  C023  F023         	movff	___awmod@dividend,?___awmod
  7969  00334A  C024  F024         	movff	___awmod@dividend+1,?___awmod+1
  7970  00334E  0012               	return	
  7971  003350                     __end_of___awmod:
  7972                           	opt stack 0
  7973                           tblptru	equ	0xFF8
  7974                           tblptrh	equ	0xFF7
  7975                           tblptrl	equ	0xFF6
  7976                           tablat	equ	0xFF5
  7977                           prodh	equ	0xFF4
  7978                           prodl	equ	0xFF3
  7979                           postinc0	equ	0xFEE
  7980                           wreg	equ	0xFE8
  7981                           postdec1	equ	0xFE5
  7982                           fsr1l	equ	0xFE1
  7983                           indf2	equ	0xFDF
  7984                           postinc2	equ	0xFDE
  7985                           postdec2	equ	0xFDD
  7986                           fsr2h	equ	0xFDA
  7987                           fsr2l	equ	0xFD9
  7988                           status	equ	0xFD8
  7989                           
  7990 ;; *************** function ___awdiv *****************
  7991 ;; Defined at:
  7992 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  7993 ;; Parameters:    Size  Location     Type
  7994 ;;  dividend        2   40[COMRAM] int 
  7995 ;;  divisor         2   42[COMRAM] int 
  7996 ;; Auto vars:     Size  Location     Type
  7997 ;;  quotient        2   46[COMRAM] int 
  7998 ;;  sign            1   45[COMRAM] unsigned char 
  7999 ;;  counter         1   44[COMRAM] unsigned char 
  8000 ;; Return value:  Size  Location     Type
  8001 ;;                  2   40[COMRAM] int 
  8002 ;; Registers used:
  8003 ;;		wreg, status,2, status,0
  8004 ;; Tracked objects:
  8005 ;;		On entry : 0/0
  8006 ;;		On exit  : 0/0
  8007 ;;		Unchanged: 0/0
  8008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8009 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8010 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8012 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8013 ;;Total ram usage:        8 bytes
  8014 ;; Hardware stack levels used:    1
  8015 ;; Hardware stack levels required when called:    3
  8016 ;; This function calls:
  8017 ;;		Nothing
  8018 ;; This function is called by:
  8019 ;;		_fround
  8020 ;;		_scale
  8021 ;;		_printf
  8022 ;; This function uses a non-reentrant model
  8023 ;;
  8024                           
  8025                           	psect	text21
  8026  003162                     __ptext21:
  8027                           	opt stack 0
  8028  003162                     ___awdiv:
  8029                           	opt stack 24
  8030                           
  8031                           ;incstack = 0
  8032  003162  0E00               	movlw	0
  8033  003164  6E2E               	movwf	___awdiv@sign,c
  8034  003166  AE2C               	btfss	___awdiv@divisor+1,7,c
  8035  003168  D006               	goto	l5770
  8036  00316A  6C2B               	negf	___awdiv@divisor,c
  8037  00316C  1E2C               	comf	___awdiv@divisor+1,f,c
  8038  00316E  B0D8               	btfsc	status,0,c
  8039  003170  2A2C               	incf	___awdiv@divisor+1,f,c
  8040  003172  0E01               	movlw	1
  8041  003174  6E2E               	movwf	___awdiv@sign,c
  8042  003176                     l5770:
  8043  003176  AE2A               	btfss	___awdiv@dividend+1,7,c
  8044  003178  D006               	goto	l5776
  8045  00317A  6C29               	negf	___awdiv@dividend,c
  8046  00317C  1E2A               	comf	___awdiv@dividend+1,f,c
  8047  00317E  B0D8               	btfsc	status,0,c
  8048  003180  2A2A               	incf	___awdiv@dividend+1,f,c
  8049  003182  0E01               	movlw	1
  8050  003184  1A2E               	xorwf	___awdiv@sign,f,c
  8051  003186                     l5776:
  8052  003186  0E00               	movlw	0
  8053  003188  6E30               	movwf	___awdiv@quotient+1,c
  8054  00318A  0E00               	movlw	0
  8055  00318C  6E2F               	movwf	___awdiv@quotient,c
  8056  00318E  502B               	movf	___awdiv@divisor,w,c
  8057  003190  102C               	iorwf	___awdiv@divisor+1,w,c
  8058  003192  B4D8               	btfsc	status,2,c
  8059  003194  D01C               	goto	l5798
  8060  003196  0E01               	movlw	1
  8061  003198  6E2D               	movwf	___awdiv@counter,c
  8062  00319A  D004               	goto	l5784
  8063  00319C                     l5782:
  8064  00319C  90D8               	bcf	status,0,c
  8065  00319E  362B               	rlcf	___awdiv@divisor,f,c
  8066  0031A0  362C               	rlcf	___awdiv@divisor+1,f,c
  8067  0031A2  2A2D               	incf	___awdiv@counter,f,c
  8068  0031A4                     l5784:
  8069  0031A4  AE2C               	btfss	___awdiv@divisor+1,7,c
  8070  0031A6  D7FA               	goto	l5782
  8071  0031A8                     l5786:
  8072  0031A8  90D8               	bcf	status,0,c
  8073  0031AA  362F               	rlcf	___awdiv@quotient,f,c
  8074  0031AC  3630               	rlcf	___awdiv@quotient+1,f,c
  8075  0031AE  502B               	movf	___awdiv@divisor,w,c
  8076  0031B0  5C29               	subwf	___awdiv@dividend,w,c
  8077  0031B2  502C               	movf	___awdiv@divisor+1,w,c
  8078  0031B4  582A               	subwfb	___awdiv@dividend+1,w,c
  8079  0031B6  A0D8               	btfss	status,0,c
  8080  0031B8  D005               	goto	l5794
  8081  0031BA  502B               	movf	___awdiv@divisor,w,c
  8082  0031BC  5E29               	subwf	___awdiv@dividend,f,c
  8083  0031BE  502C               	movf	___awdiv@divisor+1,w,c
  8084  0031C0  5A2A               	subwfb	___awdiv@dividend+1,f,c
  8085  0031C2  802F               	bsf	___awdiv@quotient,0,c
  8086  0031C4                     l5794:
  8087  0031C4  90D8               	bcf	status,0,c
  8088  0031C6  322C               	rrcf	___awdiv@divisor+1,f,c
  8089  0031C8  322B               	rrcf	___awdiv@divisor,f,c
  8090  0031CA  2E2D               	decfsz	___awdiv@counter,f,c
  8091  0031CC  D7ED               	goto	l5786
  8092  0031CE                     l5798:
  8093  0031CE  502E               	movf	___awdiv@sign,w,c
  8094  0031D0  B4D8               	btfsc	status,2,c
  8095  0031D2  D004               	goto	l5802
  8096  0031D4  6C2F               	negf	___awdiv@quotient,c
  8097  0031D6  1E30               	comf	___awdiv@quotient+1,f,c
  8098  0031D8  B0D8               	btfsc	status,0,c
  8099  0031DA  2A30               	incf	___awdiv@quotient+1,f,c
  8100  0031DC                     l5802:
  8101  0031DC  C02F  F029         	movff	___awdiv@quotient,?___awdiv
  8102  0031E0  C030  F02A         	movff	___awdiv@quotient+1,?___awdiv+1
  8103  0031E4  0012               	return	
  8104  0031E6                     __end_of___awdiv:
  8105                           	opt stack 0
  8106                           tblptru	equ	0xFF8
  8107                           tblptrh	equ	0xFF7
  8108                           tblptrl	equ	0xFF6
  8109                           tablat	equ	0xFF5
  8110                           prodh	equ	0xFF4
  8111                           prodl	equ	0xFF3
  8112                           postinc0	equ	0xFEE
  8113                           wreg	equ	0xFE8
  8114                           postdec1	equ	0xFE5
  8115                           fsr1l	equ	0xFE1
  8116                           indf2	equ	0xFDF
  8117                           postinc2	equ	0xFDE
  8118                           postdec2	equ	0xFDD
  8119                           fsr2h	equ	0xFDA
  8120                           fsr2l	equ	0xFD9
  8121                           status	equ	0xFD8
  8122                           
  8123 ;; *************** function __tdiv_to_l_ *****************
  8124 ;; Defined at:
  8125 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  8126 ;; Parameters:    Size  Location     Type
  8127 ;;  f1              3   34[COMRAM] float 
  8128 ;;  f2              3   37[COMRAM] float 
  8129 ;; Auto vars:     Size  Location     Type
  8130 ;;  quot            4   43[COMRAM] unsigned long 
  8131 ;;  exp1            1   48[COMRAM] unsigned char 
  8132 ;;  cntr            1   47[COMRAM] unsigned char 
  8133 ;; Return value:  Size  Location     Type
  8134 ;;                  4   34[COMRAM] unsigned long 
  8135 ;; Registers used:
  8136 ;;		wreg, status,2, status,0
  8137 ;; Tracked objects:
  8138 ;;		On entry : 0/0
  8139 ;;		On exit  : 0/0
  8140 ;;		Unchanged: 0/0
  8141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8142 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8143 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8144 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8145 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8146 ;;Total ram usage:       15 bytes
  8147 ;; Hardware stack levels used:    1
  8148 ;; Hardware stack levels required when called:    3
  8149 ;; This function calls:
  8150 ;;		Nothing
  8151 ;; This function is called by:
  8152 ;;		_printf
  8153 ;; This function uses a non-reentrant model
  8154 ;;
  8155                           
  8156                           	psect	text22
  8157  002390                     __ptext22:
  8158                           	opt stack 0
  8159  002390                     __tdiv_to_l_:
  8160                           	opt stack 25
  8161                           
  8162                           ;incstack = 0
  8163  002390  C025  F029         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  8164  002394  6A2A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8165  002396  6A2B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8166  002398  3424               	rlcf	__tdiv_to_l_@f1+1,w,c
  8167  00239A  3629               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8168  00239C  E301               	bnc	u5931
  8169  00239E  802A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8170  0023A0                     u5931:
  8171  0023A0  5029               	movf	??__tdiv_to_l_,w,c
  8172  0023A2  6E31               	movwf	__tdiv_to_l_@exp1,c
  8173  0023A4  5031               	movf	__tdiv_to_l_@exp1,w,c
  8174  0023A6  A4D8               	btfss	status,2,c
  8175  0023A8  D009               	goto	l5928
  8176  0023AA  0E00               	movlw	0
  8177  0023AC  6E23               	movwf	?__tdiv_to_l_,c
  8178  0023AE  0E00               	movlw	0
  8179  0023B0  6E24               	movwf	?__tdiv_to_l_+1,c
  8180  0023B2  0E00               	movlw	0
  8181  0023B4  6E25               	movwf	?__tdiv_to_l_+2,c
  8182  0023B6  0E00               	movlw	0
  8183  0023B8  6E26               	movwf	?__tdiv_to_l_+3,c
  8184  0023BA  0012               	return	
  8185  0023BC                     l5928:
  8186  0023BC  C028  F029         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  8187  0023C0  6A2A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8188  0023C2  6A2B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8189  0023C4  3427               	rlcf	__tdiv_to_l_@f2+1,w,c
  8190  0023C6  3629               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8191  0023C8  E301               	bnc	u5951
  8192  0023CA  802A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8193  0023CC                     u5951:
  8194  0023CC  5029               	movf	??__tdiv_to_l_,w,c
  8195  0023CE  6E30               	movwf	__tdiv_to_l_@cntr,c
  8196  0023D0  5030               	movf	__tdiv_to_l_@cntr,w,c
  8197  0023D2  A4D8               	btfss	status,2,c
  8198  0023D4  D009               	goto	l5934
  8199  0023D6  0E00               	movlw	0
  8200  0023D8  6E23               	movwf	?__tdiv_to_l_,c
  8201  0023DA  0E00               	movlw	0
  8202  0023DC  6E24               	movwf	?__tdiv_to_l_+1,c
  8203  0023DE  0E00               	movlw	0
  8204  0023E0  6E25               	movwf	?__tdiv_to_l_+2,c
  8205  0023E2  0E00               	movlw	0
  8206  0023E4  6E26               	movwf	?__tdiv_to_l_+3,c
  8207  0023E6  0012               	return	
  8208  0023E8                     l5934:
  8209  0023E8  8E24               	bsf	__tdiv_to_l_@f1+1,7,c
  8210  0023EA  0EFF               	movlw	255
  8211  0023EC  1623               	andwf	__tdiv_to_l_@f1,f,c
  8212  0023EE  0EFF               	movlw	255
  8213  0023F0  1624               	andwf	__tdiv_to_l_@f1+1,f,c
  8214  0023F2  0E00               	movlw	0
  8215  0023F4  1625               	andwf	__tdiv_to_l_@f1+2,f,c
  8216  0023F6  8E27               	bsf	__tdiv_to_l_@f2+1,7,c
  8217  0023F8  0EFF               	movlw	255
  8218  0023FA  1626               	andwf	__tdiv_to_l_@f2,f,c
  8219  0023FC  0EFF               	movlw	255
  8220  0023FE  1627               	andwf	__tdiv_to_l_@f2+1,f,c
  8221  002400  0E00               	movlw	0
  8222  002402  1628               	andwf	__tdiv_to_l_@f2+2,f,c
  8223  002404  0E00               	movlw	0
  8224  002406  6E2C               	movwf	__tdiv_to_l_@quot,c
  8225  002408  0E00               	movlw	0
  8226  00240A  6E2D               	movwf	__tdiv_to_l_@quot+1,c
  8227  00240C  0E00               	movlw	0
  8228  00240E  6E2E               	movwf	__tdiv_to_l_@quot+2,c
  8229  002410  0E00               	movlw	0
  8230  002412  6E2F               	movwf	__tdiv_to_l_@quot+3,c
  8231  002414  0E7F               	movlw	127
  8232  002416  5E31               	subwf	__tdiv_to_l_@exp1,f,c
  8233  002418  5030               	movf	__tdiv_to_l_@cntr,w,c
  8234  00241A  0F98               	addlw	152
  8235  00241C  5E31               	subwf	__tdiv_to_l_@exp1,f,c
  8236  00241E  0E18               	movlw	24
  8237  002420  6E30               	movwf	__tdiv_to_l_@cntr,c
  8238  002422                     l1136:
  8239  002422  90D8               	bcf	status,0,c
  8240  002424  362C               	rlcf	__tdiv_to_l_@quot,f,c
  8241  002426  362D               	rlcf	__tdiv_to_l_@quot+1,f,c
  8242  002428  362E               	rlcf	__tdiv_to_l_@quot+2,f,c
  8243  00242A  362F               	rlcf	__tdiv_to_l_@quot+3,f,c
  8244  00242C  5026               	movf	__tdiv_to_l_@f2,w,c
  8245  00242E  5C23               	subwf	__tdiv_to_l_@f1,w,c
  8246  002430  5027               	movf	__tdiv_to_l_@f2+1,w,c
  8247  002432  5824               	subwfb	__tdiv_to_l_@f1+1,w,c
  8248  002434  5028               	movf	__tdiv_to_l_@f2+2,w,c
  8249  002436  5825               	subwfb	__tdiv_to_l_@f1+2,w,c
  8250  002438  A0D8               	btfss	status,0,c
  8251  00243A  D007               	goto	l1137
  8252  00243C  5026               	movf	__tdiv_to_l_@f2,w,c
  8253  00243E  5E23               	subwf	__tdiv_to_l_@f1,f,c
  8254  002440  5027               	movf	__tdiv_to_l_@f2+1,w,c
  8255  002442  5A24               	subwfb	__tdiv_to_l_@f1+1,f,c
  8256  002444  5028               	movf	__tdiv_to_l_@f2+2,w,c
  8257  002446  5A25               	subwfb	__tdiv_to_l_@f1+2,f,c
  8258  002448  802C               	bsf	__tdiv_to_l_@quot,0,c
  8259  00244A                     l1137:
  8260  00244A  90D8               	bcf	status,0,c
  8261  00244C  3623               	rlcf	__tdiv_to_l_@f1,f,c
  8262  00244E  3624               	rlcf	__tdiv_to_l_@f1+1,f,c
  8263  002450  3625               	rlcf	__tdiv_to_l_@f1+2,f,c
  8264  002452  2E30               	decfsz	__tdiv_to_l_@cntr,f,c
  8265  002454  D7E6               	goto	l1136
  8266  002456  AE31               	btfss	__tdiv_to_l_@exp1,7,c
  8267  002458  D016               	goto	l5968
  8268  00245A  5031               	movf	__tdiv_to_l_@exp1,w,c
  8269  00245C  0A80               	xorlw	128
  8270  00245E  0F97               	addlw	151
  8271  002460  B0D8               	btfsc	status,0,c
  8272  002462  D009               	goto	l5964
  8273  002464  0E00               	movlw	0
  8274  002466  6E23               	movwf	?__tdiv_to_l_,c
  8275  002468  0E00               	movlw	0
  8276  00246A  6E24               	movwf	?__tdiv_to_l_+1,c
  8277  00246C  0E00               	movlw	0
  8278  00246E  6E25               	movwf	?__tdiv_to_l_+2,c
  8279  002470  0E00               	movlw	0
  8280  002472  6E26               	movwf	?__tdiv_to_l_+3,c
  8281  002474  0012               	return	
  8282  002476                     l5964:
  8283  002476  90D8               	bcf	status,0,c
  8284  002478  322F               	rrcf	__tdiv_to_l_@quot+3,f,c
  8285  00247A  322E               	rrcf	__tdiv_to_l_@quot+2,f,c
  8286  00247C  322D               	rrcf	__tdiv_to_l_@quot+1,f,c
  8287  00247E  322C               	rrcf	__tdiv_to_l_@quot,f,c
  8288  002480  3E31               	incfsz	__tdiv_to_l_@exp1,f,c
  8289  002482  D7F9               	goto	l5964
  8290  002484  D015               	goto	l1143
  8291  002486                     l5968:
  8292  002486  0E17               	movlw	23
  8293  002488  6431               	cpfsgt	__tdiv_to_l_@exp1,c
  8294  00248A  D00F               	goto	l5976
  8295  00248C  0E00               	movlw	0
  8296  00248E  6E23               	movwf	?__tdiv_to_l_,c
  8297  002490  0E00               	movlw	0
  8298  002492  6E24               	movwf	?__tdiv_to_l_+1,c
  8299  002494  0E00               	movlw	0
  8300  002496  6E25               	movwf	?__tdiv_to_l_+2,c
  8301  002498  0E00               	movlw	0
  8302  00249A  6E26               	movwf	?__tdiv_to_l_+3,c
  8303  00249C  0012               	return	
  8304  00249E                     l5974:
  8305  00249E  90D8               	bcf	status,0,c
  8306  0024A0  362C               	rlcf	__tdiv_to_l_@quot,f,c
  8307  0024A2  362D               	rlcf	__tdiv_to_l_@quot+1,f,c
  8308  0024A4  362E               	rlcf	__tdiv_to_l_@quot+2,f,c
  8309  0024A6  362F               	rlcf	__tdiv_to_l_@quot+3,f,c
  8310  0024A8  0631               	decf	__tdiv_to_l_@exp1,f,c
  8311  0024AA                     l5976:
  8312  0024AA  5031               	movf	__tdiv_to_l_@exp1,w,c
  8313  0024AC  A4D8               	btfss	status,2,c
  8314  0024AE  D7F7               	goto	l5974
  8315  0024B0                     l1143:
  8316  0024B0  C02C  F023         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  8317  0024B4  C02D  F024         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  8318  0024B8  C02E  F025         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  8319  0024BC  C02F  F026         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  8320  0024C0  0012               	return		;funcret
  8321  0024C2                     __end_of__tdiv_to_l_:
  8322                           	opt stack 0
  8323                           tblptru	equ	0xFF8
  8324                           tblptrh	equ	0xFF7
  8325                           tblptrl	equ	0xFF6
  8326                           tablat	equ	0xFF5
  8327                           prodh	equ	0xFF4
  8328                           prodl	equ	0xFF3
  8329                           postinc0	equ	0xFEE
  8330                           wreg	equ	0xFE8
  8331                           postdec1	equ	0xFE5
  8332                           fsr1l	equ	0xFE1
  8333                           indf2	equ	0xFDF
  8334                           postinc2	equ	0xFDE
  8335                           postdec2	equ	0xFDD
  8336                           fsr2h	equ	0xFDA
  8337                           fsr2l	equ	0xFD9
  8338                           status	equ	0xFD8
  8339                           
  8340 ;; *************** function __div_to_l_ *****************
  8341 ;; Defined at:
  8342 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  8343 ;; Parameters:    Size  Location     Type
  8344 ;;  f1              3   34[COMRAM] unsigned long 
  8345 ;;  f2              3   37[COMRAM] unsigned long 
  8346 ;; Auto vars:     Size  Location     Type
  8347 ;;  quot            4   40[COMRAM] unsigned long 
  8348 ;;  exp1            1   45[COMRAM] unsigned char 
  8349 ;;  cntr            1   44[COMRAM] unsigned char 
  8350 ;; Return value:  Size  Location     Type
  8351 ;;                  4   34[COMRAM] unsigned long 
  8352 ;; Registers used:
  8353 ;;		wreg, status,2, status,0
  8354 ;; Tracked objects:
  8355 ;;		On entry : 0/0
  8356 ;;		On exit  : 0/0
  8357 ;;		Unchanged: 0/0
  8358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8359 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8360 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8362 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8363 ;;Total ram usage:       12 bytes
  8364 ;; Hardware stack levels used:    1
  8365 ;; Hardware stack levels required when called:    3
  8366 ;; This function calls:
  8367 ;;		Nothing
  8368 ;; This function is called by:
  8369 ;;		_printf
  8370 ;; This function uses a non-reentrant model
  8371 ;;
  8372                           
  8373                           	psect	text23
  8374  0024C2                     __ptext23:
  8375                           	opt stack 0
  8376  0024C2                     __div_to_l_:
  8377                           	opt stack 25
  8378                           
  8379                           ;incstack = 0
  8380  0024C2  3425               	rlcf	__div_to_l_@f1+2,w,c
  8381  0024C4  3426               	rlcf	__div_to_l_@f1+3,w,c
  8382  0024C6  6E2E               	movwf	__div_to_l_@exp1,c
  8383  0024C8  502E               	movf	__div_to_l_@exp1,w,c
  8384  0024CA  A4D8               	btfss	status,2,c
  8385  0024CC  D009               	goto	l5984
  8386  0024CE  0E00               	movlw	0
  8387  0024D0  6E23               	movwf	?__div_to_l_,c
  8388  0024D2  0E00               	movlw	0
  8389  0024D4  6E24               	movwf	?__div_to_l_+1,c
  8390  0024D6  0E00               	movlw	0
  8391  0024D8  6E25               	movwf	?__div_to_l_+2,c
  8392  0024DA  0E00               	movlw	0
  8393  0024DC  6E26               	movwf	?__div_to_l_+3,c
  8394  0024DE  0012               	return	
  8395  0024E0                     l5984:
  8396  0024E0  3428               	rlcf	__div_to_l_@f2+2,w,c
  8397  0024E2  3429               	rlcf	__div_to_l_@f2+3,w,c
  8398  0024E4  6E2D               	movwf	__div_to_l_@cntr,c
  8399  0024E6  502D               	movf	__div_to_l_@cntr,w,c
  8400  0024E8  A4D8               	btfss	status,2,c
  8401  0024EA  D009               	goto	l5990
  8402  0024EC  0E00               	movlw	0
  8403  0024EE  6E23               	movwf	?__div_to_l_,c
  8404  0024F0  0E00               	movlw	0
  8405  0024F2  6E24               	movwf	?__div_to_l_+1,c
  8406  0024F4  0E00               	movlw	0
  8407  0024F6  6E25               	movwf	?__div_to_l_+2,c
  8408  0024F8  0E00               	movlw	0
  8409  0024FA  6E26               	movwf	?__div_to_l_+3,c
  8410  0024FC  0012               	return	
  8411  0024FE                     l5990:
  8412  0024FE  8E25               	bsf	__div_to_l_@f1+2,7,c
  8413  002500  0EFF               	movlw	255
  8414  002502  1623               	andwf	__div_to_l_@f1,f,c
  8415  002504  0EFF               	movlw	255
  8416  002506  1624               	andwf	__div_to_l_@f1+1,f,c
  8417  002508  0EFF               	movlw	255
  8418  00250A  1625               	andwf	__div_to_l_@f1+2,f,c
  8419  00250C  0E00               	movlw	0
  8420  00250E  1626               	andwf	__div_to_l_@f1+3,f,c
  8421  002510  8E28               	bsf	__div_to_l_@f2+2,7,c
  8422  002512  0EFF               	movlw	255
  8423  002514  1626               	andwf	__div_to_l_@f2,f,c
  8424  002516  0EFF               	movlw	255
  8425  002518  1627               	andwf	__div_to_l_@f2+1,f,c
  8426  00251A  0EFF               	movlw	255
  8427  00251C  1628               	andwf	__div_to_l_@f2+2,f,c
  8428  00251E  0E00               	movlw	0
  8429  002520  1629               	andwf	__div_to_l_@f2+3,f,c
  8430  002522  0E00               	movlw	0
  8431  002524  6E29               	movwf	__div_to_l_@quot,c
  8432  002526  0E00               	movlw	0
  8433  002528  6E2A               	movwf	__div_to_l_@quot+1,c
  8434  00252A  0E00               	movlw	0
  8435  00252C  6E2B               	movwf	__div_to_l_@quot+2,c
  8436  00252E  0E00               	movlw	0
  8437  002530  6E2C               	movwf	__div_to_l_@quot+3,c
  8438  002532  0E7F               	movlw	127
  8439  002534  5E2E               	subwf	__div_to_l_@exp1,f,c
  8440  002536  502D               	movf	__div_to_l_@cntr,w,c
  8441  002538  0FA0               	addlw	160
  8442  00253A  5E2E               	subwf	__div_to_l_@exp1,f,c
  8443  00253C  0E20               	movlw	32
  8444  00253E  6E2D               	movwf	__div_to_l_@cntr,c
  8445  002540                     l6004:
  8446  002540  90D8               	bcf	status,0,c
  8447  002542  3629               	rlcf	__div_to_l_@quot,f,c
  8448  002544  362A               	rlcf	__div_to_l_@quot+1,f,c
  8449  002546  362B               	rlcf	__div_to_l_@quot+2,f,c
  8450  002548  362C               	rlcf	__div_to_l_@quot+3,f,c
  8451  00254A  5026               	movf	__div_to_l_@f2,w,c
  8452  00254C  5C23               	subwf	__div_to_l_@f1,w,c
  8453  00254E  5027               	movf	__div_to_l_@f2+1,w,c
  8454  002550  5824               	subwfb	__div_to_l_@f1+1,w,c
  8455  002552  5028               	movf	__div_to_l_@f2+2,w,c
  8456  002554  5825               	subwfb	__div_to_l_@f1+2,w,c
  8457  002556  5029               	movf	__div_to_l_@f2+3,w,c
  8458  002558  5826               	subwfb	__div_to_l_@f1+3,w,c
  8459  00255A  A0D8               	btfss	status,0,c
  8460  00255C  D009               	goto	l6012
  8461  00255E  5026               	movf	__div_to_l_@f2,w,c
  8462  002560  5E23               	subwf	__div_to_l_@f1,f,c
  8463  002562  5027               	movf	__div_to_l_@f2+1,w,c
  8464  002564  5A24               	subwfb	__div_to_l_@f1+1,f,c
  8465  002566  5028               	movf	__div_to_l_@f2+2,w,c
  8466  002568  5A25               	subwfb	__div_to_l_@f1+2,f,c
  8467  00256A  5029               	movf	__div_to_l_@f2+3,w,c
  8468  00256C  5A26               	subwfb	__div_to_l_@f1+3,f,c
  8469  00256E  8029               	bsf	__div_to_l_@quot,0,c
  8470  002570                     l6012:
  8471  002570  90D8               	bcf	status,0,c
  8472  002572  3623               	rlcf	__div_to_l_@f1,f,c
  8473  002574  3624               	rlcf	__div_to_l_@f1+1,f,c
  8474  002576  3625               	rlcf	__div_to_l_@f1+2,f,c
  8475  002578  3626               	rlcf	__div_to_l_@f1+3,f,c
  8476  00257A  2E2D               	decfsz	__div_to_l_@cntr,f,c
  8477  00257C  D7E1               	goto	l6004
  8478  00257E  AE2E               	btfss	__div_to_l_@exp1,7,c
  8479  002580  D016               	goto	l6028
  8480  002582  502E               	movf	__div_to_l_@exp1,w,c
  8481  002584  0A80               	xorlw	128
  8482  002586  0F9F               	addlw	159
  8483  002588  B0D8               	btfsc	status,0,c
  8484  00258A  D009               	goto	l6024
  8485  00258C  0E00               	movlw	0
  8486  00258E  6E23               	movwf	?__div_to_l_,c
  8487  002590  0E00               	movlw	0
  8488  002592  6E24               	movwf	?__div_to_l_+1,c
  8489  002594  0E00               	movlw	0
  8490  002596  6E25               	movwf	?__div_to_l_+2,c
  8491  002598  0E00               	movlw	0
  8492  00259A  6E26               	movwf	?__div_to_l_+3,c
  8493  00259C  0012               	return	
  8494  00259E                     l6024:
  8495  00259E  90D8               	bcf	status,0,c
  8496  0025A0  322C               	rrcf	__div_to_l_@quot+3,f,c
  8497  0025A2  322B               	rrcf	__div_to_l_@quot+2,f,c
  8498  0025A4  322A               	rrcf	__div_to_l_@quot+1,f,c
  8499  0025A6  3229               	rrcf	__div_to_l_@quot,f,c
  8500  0025A8  3E2E               	incfsz	__div_to_l_@exp1,f,c
  8501  0025AA  D7F9               	goto	l6024
  8502  0025AC  D015               	goto	l1039
  8503  0025AE                     l6028:
  8504  0025AE  0E1F               	movlw	31
  8505  0025B0  642E               	cpfsgt	__div_to_l_@exp1,c
  8506  0025B2  D00F               	goto	l6036
  8507  0025B4  0E00               	movlw	0
  8508  0025B6  6E23               	movwf	?__div_to_l_,c
  8509  0025B8  0E00               	movlw	0
  8510  0025BA  6E24               	movwf	?__div_to_l_+1,c
  8511  0025BC  0E00               	movlw	0
  8512  0025BE  6E25               	movwf	?__div_to_l_+2,c
  8513  0025C0  0E00               	movlw	0
  8514  0025C2  6E26               	movwf	?__div_to_l_+3,c
  8515  0025C4  0012               	return	
  8516  0025C6                     l6034:
  8517  0025C6  90D8               	bcf	status,0,c
  8518  0025C8  3629               	rlcf	__div_to_l_@quot,f,c
  8519  0025CA  362A               	rlcf	__div_to_l_@quot+1,f,c
  8520  0025CC  362B               	rlcf	__div_to_l_@quot+2,f,c
  8521  0025CE  362C               	rlcf	__div_to_l_@quot+3,f,c
  8522  0025D0  062E               	decf	__div_to_l_@exp1,f,c
  8523  0025D2                     l6036:
  8524  0025D2  502E               	movf	__div_to_l_@exp1,w,c
  8525  0025D4  A4D8               	btfss	status,2,c
  8526  0025D6  D7F7               	goto	l6034
  8527  0025D8                     l1039:
  8528  0025D8  C029  F023         	movff	__div_to_l_@quot,?__div_to_l_
  8529  0025DC  C02A  F024         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  8530  0025E0  C02B  F025         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  8531  0025E4  C02C  F026         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  8532  0025E8  0012               	return		;funcret
  8533  0025EA                     __end_of__div_to_l_:
  8534                           	opt stack 0
  8535                           tblptru	equ	0xFF8
  8536                           tblptrh	equ	0xFF7
  8537                           tblptrl	equ	0xFF6
  8538                           tablat	equ	0xFF5
  8539                           prodh	equ	0xFF4
  8540                           prodl	equ	0xFF3
  8541                           postinc0	equ	0xFEE
  8542                           wreg	equ	0xFE8
  8543                           postdec1	equ	0xFE5
  8544                           fsr1l	equ	0xFE1
  8545                           indf2	equ	0xFDF
  8546                           postinc2	equ	0xFDE
  8547                           postdec2	equ	0xFDD
  8548                           fsr2h	equ	0xFDA
  8549                           fsr2l	equ	0xFD9
  8550                           status	equ	0xFD8
  8551                           
  8552 ;; *************** function ___lltoft *****************
  8553 ;; Defined at:
  8554 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  8555 ;; Parameters:    Size  Location     Type
  8556 ;;  c               4   42[COMRAM] unsigned long 
  8557 ;; Auto vars:     Size  Location     Type
  8558 ;;  exp             1   50[COMRAM] unsigned char 
  8559 ;; Return value:  Size  Location     Type
  8560 ;;                  3   42[COMRAM] float 
  8561 ;; Registers used:
  8562 ;;		wreg, status,2, status,0, cstack
  8563 ;; Tracked objects:
  8564 ;;		On entry : 0/0
  8565 ;;		On exit  : 0/0
  8566 ;;		Unchanged: 0/0
  8567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8568 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8569 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8570 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8571 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8572 ;;Total ram usage:        9 bytes
  8573 ;; Hardware stack levels used:    1
  8574 ;; Hardware stack levels required when called:    4
  8575 ;; This function calls:
  8576 ;;		___ftpack
  8577 ;; This function is called by:
  8578 ;;		_printf
  8579 ;; This function uses a non-reentrant model
  8580 ;;
  8581                           
  8582                           	psect	text24
  8583  00348C                     __ptext24:
  8584                           	opt stack 0
  8585  00348C                     ___lltoft:
  8586                           	opt stack 24
  8587                           
  8588                           ;incstack = 0
  8589  00348C  0E8E               	movlw	142
  8590  00348E  6E33               	movwf	___lltoft@exp,c
  8591  003490  D006               	goto	l6230
  8592  003492                     l6228:
  8593  003492  90D8               	bcf	status,0,c
  8594  003494  322E               	rrcf	___lltoft@c+3,f,c
  8595  003496  322D               	rrcf	___lltoft@c+2,f,c
  8596  003498  322C               	rrcf	___lltoft@c+1,f,c
  8597  00349A  322B               	rrcf	___lltoft@c,f,c
  8598  00349C  2A33               	incf	___lltoft@exp,f,c
  8599  00349E                     l6230:
  8600  00349E  0E00               	movlw	0
  8601  0034A0  142B               	andwf	___lltoft@c,w,c
  8602  0034A2  6E2F               	movwf	??___lltoft& (0+255),c
  8603  0034A4  0E00               	movlw	0
  8604  0034A6  142C               	andwf	___lltoft@c+1,w,c
  8605  0034A8  6E30               	movwf	(??___lltoft+1)& (0+255),c
  8606  0034AA  0E00               	movlw	0
  8607  0034AC  142D               	andwf	___lltoft@c+2,w,c
  8608  0034AE  6E31               	movwf	(??___lltoft+2)& (0+255),c
  8609  0034B0  0EFF               	movlw	255
  8610  0034B2  142E               	andwf	___lltoft@c+3,w,c
  8611  0034B4  6E32               	movwf	(??___lltoft+3)& (0+255),c
  8612  0034B6  502F               	movf	??___lltoft,w,c
  8613  0034B8  1030               	iorwf	??___lltoft+1,w,c
  8614  0034BA  1031               	iorwf	??___lltoft+2,w,c
  8615  0034BC  1032               	iorwf	??___lltoft+3,w,c
  8616  0034BE  A4D8               	btfss	status,2,c
  8617  0034C0  D7E8               	goto	l6228
  8618  0034C2  C02B  F023         	movff	___lltoft@c,___ftpack@arg
  8619  0034C6  C02C  F024         	movff	___lltoft@c+1,___ftpack@arg+1
  8620  0034CA  C02D  F025         	movff	___lltoft@c+2,___ftpack@arg+2
  8621  0034CE  C033  F026         	movff	___lltoft@exp,___ftpack@exp
  8622  0034D2  0E00               	movlw	0
  8623  0034D4  6E27               	movwf	___ftpack@sign,c
  8624  0034D6  EC76  F017         	call	___ftpack	;wreg free
  8625  0034DA  C023  F02B         	movff	?___ftpack,?___lltoft
  8626  0034DE  C024  F02C         	movff	?___ftpack+1,?___lltoft+1
  8627  0034E2  C025  F02D         	movff	?___ftpack+2,?___lltoft+2
  8628  0034E6  0012               	return	
  8629  0034E8                     __end_of___lltoft:
  8630                           	opt stack 0
  8631                           tblptru	equ	0xFF8
  8632                           tblptrh	equ	0xFF7
  8633                           tblptrl	equ	0xFF6
  8634                           tablat	equ	0xFF5
  8635                           prodh	equ	0xFF4
  8636                           prodl	equ	0xFF3
  8637                           postinc0	equ	0xFEE
  8638                           wreg	equ	0xFE8
  8639                           postdec1	equ	0xFE5
  8640                           fsr1l	equ	0xFE1
  8641                           indf2	equ	0xFDF
  8642                           postinc2	equ	0xFDE
  8643                           postdec2	equ	0xFDD
  8644                           fsr2h	equ	0xFDA
  8645                           fsr2l	equ	0xFD9
  8646                           status	equ	0xFD8
  8647                           
  8648 ;; *************** function ___llmod *****************
  8649 ;; Defined at:
  8650 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  8651 ;; Parameters:    Size  Location     Type
  8652 ;;  dividend        4   47[COMRAM] unsigned long 
  8653 ;;  divisor         4   51[COMRAM] unsigned long 
  8654 ;; Auto vars:     Size  Location     Type
  8655 ;;  counter         1   55[COMRAM] unsigned char 
  8656 ;; Return value:  Size  Location     Type
  8657 ;;                  4   47[COMRAM] unsigned long 
  8658 ;; Registers used:
  8659 ;;		wreg, status,2, status,0
  8660 ;; Tracked objects:
  8661 ;;		On entry : 0/0
  8662 ;;		On exit  : 0/0
  8663 ;;		Unchanged: 0/0
  8664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8665 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8666 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8668 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8669 ;;Total ram usage:        9 bytes
  8670 ;; Hardware stack levels used:    1
  8671 ;; Hardware stack levels required when called:    3
  8672 ;; This function calls:
  8673 ;;		Nothing
  8674 ;; This function is called by:
  8675 ;;		_printf
  8676 ;; This function uses a non-reentrant model
  8677 ;;
  8678                           
  8679                           	psect	text25
  8680  0033C0                     __ptext25:
  8681                           	opt stack 0
  8682  0033C0                     ___llmod:
  8683                           	opt stack 25
  8684                           
  8685                           ;incstack = 0
  8686  0033C0  5034               	movf	___llmod@divisor,w,c
  8687  0033C2  1035               	iorwf	___llmod@divisor+1,w,c
  8688  0033C4  1036               	iorwf	___llmod@divisor+2,w,c
  8689  0033C6  1037               	iorwf	___llmod@divisor+3,w,c
  8690  0033C8  B4D8               	btfsc	status,2,c
  8691  0033CA  D024               	goto	l1228
  8692  0033CC  0E01               	movlw	1
  8693  0033CE  6E38               	movwf	___llmod@counter,c
  8694  0033D0  D006               	goto	l6216
  8695  0033D2                     l6214:
  8696  0033D2  90D8               	bcf	status,0,c
  8697  0033D4  3634               	rlcf	___llmod@divisor,f,c
  8698  0033D6  3635               	rlcf	___llmod@divisor+1,f,c
  8699  0033D8  3636               	rlcf	___llmod@divisor+2,f,c
  8700  0033DA  3637               	rlcf	___llmod@divisor+3,f,c
  8701  0033DC  2A38               	incf	___llmod@counter,f,c
  8702  0033DE                     l6216:
  8703  0033DE  AE37               	btfss	___llmod@divisor+3,7,c
  8704  0033E0  D7F8               	goto	l6214
  8705  0033E2                     l6218:
  8706  0033E2  5034               	movf	___llmod@divisor,w,c
  8707  0033E4  5C30               	subwf	___llmod@dividend,w,c
  8708  0033E6  5035               	movf	___llmod@divisor+1,w,c
  8709  0033E8  5831               	subwfb	___llmod@dividend+1,w,c
  8710  0033EA  5036               	movf	___llmod@divisor+2,w,c
  8711  0033EC  5832               	subwfb	___llmod@dividend+2,w,c
  8712  0033EE  5037               	movf	___llmod@divisor+3,w,c
  8713  0033F0  5833               	subwfb	___llmod@dividend+3,w,c
  8714  0033F2  A0D8               	btfss	status,0,c
  8715  0033F4  D008               	goto	l6222
  8716  0033F6  5034               	movf	___llmod@divisor,w,c
  8717  0033F8  5E30               	subwf	___llmod@dividend,f,c
  8718  0033FA  5035               	movf	___llmod@divisor+1,w,c
  8719  0033FC  5A31               	subwfb	___llmod@dividend+1,f,c
  8720  0033FE  5036               	movf	___llmod@divisor+2,w,c
  8721  003400  5A32               	subwfb	___llmod@dividend+2,f,c
  8722  003402  5037               	movf	___llmod@divisor+3,w,c
  8723  003404  5A33               	subwfb	___llmod@dividend+3,f,c
  8724  003406                     l6222:
  8725  003406  90D8               	bcf	status,0,c
  8726  003408  3237               	rrcf	___llmod@divisor+3,f,c
  8727  00340A  3236               	rrcf	___llmod@divisor+2,f,c
  8728  00340C  3235               	rrcf	___llmod@divisor+1,f,c
  8729  00340E  3234               	rrcf	___llmod@divisor,f,c
  8730  003410  2E38               	decfsz	___llmod@counter,f,c
  8731  003412  D7E7               	goto	l6218
  8732  003414                     l1228:
  8733  003414  C030  F030         	movff	___llmod@dividend,?___llmod
  8734  003418  C031  F031         	movff	___llmod@dividend+1,?___llmod+1
  8735  00341C  C032  F032         	movff	___llmod@dividend+2,?___llmod+2
  8736  003420  C033  F033         	movff	___llmod@dividend+3,?___llmod+3
  8737  003424  0012               	return		;funcret
  8738  003426                     __end_of___llmod:
  8739                           	opt stack 0
  8740                           tblptru	equ	0xFF8
  8741                           tblptrh	equ	0xFF7
  8742                           tblptrl	equ	0xFF6
  8743                           tablat	equ	0xFF5
  8744                           prodh	equ	0xFF4
  8745                           prodl	equ	0xFF3
  8746                           postinc0	equ	0xFEE
  8747                           wreg	equ	0xFE8
  8748                           postdec1	equ	0xFE5
  8749                           fsr1l	equ	0xFE1
  8750                           indf2	equ	0xFDF
  8751                           postinc2	equ	0xFDE
  8752                           postdec2	equ	0xFDD
  8753                           fsr2h	equ	0xFDA
  8754                           fsr2l	equ	0xFD9
  8755                           status	equ	0xFD8
  8756                           
  8757 ;; *************** function ___lldiv *****************
  8758 ;; Defined at:
  8759 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  8760 ;; Parameters:    Size  Location     Type
  8761 ;;  dividend        4   34[COMRAM] unsigned long 
  8762 ;;  divisor         4   38[COMRAM] unsigned long 
  8763 ;; Auto vars:     Size  Location     Type
  8764 ;;  quotient        4   42[COMRAM] unsigned long 
  8765 ;;  counter         1   46[COMRAM] unsigned char 
  8766 ;; Return value:  Size  Location     Type
  8767 ;;                  4   34[COMRAM] unsigned long 
  8768 ;; Registers used:
  8769 ;;		wreg, status,2, status,0
  8770 ;; Tracked objects:
  8771 ;;		On entry : 0/0
  8772 ;;		On exit  : 0/0
  8773 ;;		Unchanged: 0/0
  8774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8775 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8776 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8778 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8779 ;;Total ram usage:       13 bytes
  8780 ;; Hardware stack levels used:    1
  8781 ;; Hardware stack levels required when called:    3
  8782 ;; This function calls:
  8783 ;;		Nothing
  8784 ;; This function is called by:
  8785 ;;		_printf
  8786 ;;		_I2C_Master_Init
  8787 ;; This function uses a non-reentrant model
  8788 ;;
  8789                           
  8790                           	psect	text26
  8791  0031E6                     __ptext26:
  8792                           	opt stack 0
  8793  0031E6                     ___lldiv:
  8794                           	opt stack 25
  8795                           
  8796                           ;incstack = 0
  8797  0031E6  0E00               	movlw	0
  8798  0031E8  6E2B               	movwf	___lldiv@quotient,c
  8799  0031EA  0E00               	movlw	0
  8800  0031EC  6E2C               	movwf	___lldiv@quotient+1,c
  8801  0031EE  0E00               	movlw	0
  8802  0031F0  6E2D               	movwf	___lldiv@quotient+2,c
  8803  0031F2  0E00               	movlw	0
  8804  0031F4  6E2E               	movwf	___lldiv@quotient+3,c
  8805  0031F6  5027               	movf	___lldiv@divisor,w,c
  8806  0031F8  1028               	iorwf	___lldiv@divisor+1,w,c
  8807  0031FA  1029               	iorwf	___lldiv@divisor+2,w,c
  8808  0031FC  102A               	iorwf	___lldiv@divisor+3,w,c
  8809  0031FE  B4D8               	btfsc	status,2,c
  8810  003200  D02A               	goto	l1218
  8811  003202  0E01               	movlw	1
  8812  003204  6E2F               	movwf	___lldiv@counter,c
  8813  003206  D006               	goto	l6196
  8814  003208                     l6194:
  8815  003208  90D8               	bcf	status,0,c
  8816  00320A  3627               	rlcf	___lldiv@divisor,f,c
  8817  00320C  3628               	rlcf	___lldiv@divisor+1,f,c
  8818  00320E  3629               	rlcf	___lldiv@divisor+2,f,c
  8819  003210  362A               	rlcf	___lldiv@divisor+3,f,c
  8820  003212  2A2F               	incf	___lldiv@counter,f,c
  8821  003214                     l6196:
  8822  003214  AE2A               	btfss	___lldiv@divisor+3,7,c
  8823  003216  D7F8               	goto	l6194
  8824  003218                     l6198:
  8825  003218  90D8               	bcf	status,0,c
  8826  00321A  362B               	rlcf	___lldiv@quotient,f,c
  8827  00321C  362C               	rlcf	___lldiv@quotient+1,f,c
  8828  00321E  362D               	rlcf	___lldiv@quotient+2,f,c
  8829  003220  362E               	rlcf	___lldiv@quotient+3,f,c
  8830  003222  5027               	movf	___lldiv@divisor,w,c
  8831  003224  5C23               	subwf	___lldiv@dividend,w,c
  8832  003226  5028               	movf	___lldiv@divisor+1,w,c
  8833  003228  5824               	subwfb	___lldiv@dividend+1,w,c
  8834  00322A  5029               	movf	___lldiv@divisor+2,w,c
  8835  00322C  5825               	subwfb	___lldiv@dividend+2,w,c
  8836  00322E  502A               	movf	___lldiv@divisor+3,w,c
  8837  003230  5826               	subwfb	___lldiv@dividend+3,w,c
  8838  003232  A0D8               	btfss	status,0,c
  8839  003234  D009               	goto	l6206
  8840  003236  5027               	movf	___lldiv@divisor,w,c
  8841  003238  5E23               	subwf	___lldiv@dividend,f,c
  8842  00323A  5028               	movf	___lldiv@divisor+1,w,c
  8843  00323C  5A24               	subwfb	___lldiv@dividend+1,f,c
  8844  00323E  5029               	movf	___lldiv@divisor+2,w,c
  8845  003240  5A25               	subwfb	___lldiv@dividend+2,f,c
  8846  003242  502A               	movf	___lldiv@divisor+3,w,c
  8847  003244  5A26               	subwfb	___lldiv@dividend+3,f,c
  8848  003246  802B               	bsf	___lldiv@quotient,0,c
  8849  003248                     l6206:
  8850  003248  90D8               	bcf	status,0,c
  8851  00324A  322A               	rrcf	___lldiv@divisor+3,f,c
  8852  00324C  3229               	rrcf	___lldiv@divisor+2,f,c
  8853  00324E  3228               	rrcf	___lldiv@divisor+1,f,c
  8854  003250  3227               	rrcf	___lldiv@divisor,f,c
  8855  003252  2E2F               	decfsz	___lldiv@counter,f,c
  8856  003254  D7E1               	goto	l6198
  8857  003256                     l1218:
  8858  003256  C02B  F023         	movff	___lldiv@quotient,?___lldiv
  8859  00325A  C02C  F024         	movff	___lldiv@quotient+1,?___lldiv+1
  8860  00325E  C02D  F025         	movff	___lldiv@quotient+2,?___lldiv+2
  8861  003262  C02E  F026         	movff	___lldiv@quotient+3,?___lldiv+3
  8862  003266  0012               	return		;funcret
  8863  003268                     __end_of___lldiv:
  8864                           	opt stack 0
  8865                           tblptru	equ	0xFF8
  8866                           tblptrh	equ	0xFF7
  8867                           tblptrl	equ	0xFF6
  8868                           tablat	equ	0xFF5
  8869                           prodh	equ	0xFF4
  8870                           prodl	equ	0xFF3
  8871                           postinc0	equ	0xFEE
  8872                           wreg	equ	0xFE8
  8873                           postdec1	equ	0xFE5
  8874                           fsr1l	equ	0xFE1
  8875                           indf2	equ	0xFDF
  8876                           postinc2	equ	0xFDE
  8877                           postdec2	equ	0xFDD
  8878                           fsr2h	equ	0xFDA
  8879                           fsr2l	equ	0xFD9
  8880                           status	equ	0xFD8
  8881                           
  8882 ;; *************** function ___ftsub *****************
  8883 ;; Defined at:
  8884 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  8885 ;; Parameters:    Size  Location     Type
  8886 ;;  f1              3   46[BANK0 ] float 
  8887 ;;  f2              3   49[BANK0 ] float 
  8888 ;; Auto vars:     Size  Location     Type
  8889 ;;		None
  8890 ;; Return value:  Size  Location     Type
  8891 ;;                  3   46[BANK0 ] float 
  8892 ;; Registers used:
  8893 ;;		wreg, status,2, status,0, cstack
  8894 ;; Tracked objects:
  8895 ;;		On entry : 0/0
  8896 ;;		On exit  : 0/0
  8897 ;;		Unchanged: 0/0
  8898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8899 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8902 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8903 ;;Total ram usage:        6 bytes
  8904 ;; Hardware stack levels used:    1
  8905 ;; Hardware stack levels required when called:    5
  8906 ;; This function calls:
  8907 ;;		___ftadd
  8908 ;; This function is called by:
  8909 ;;		_sortBattery
  8910 ;;		_printf
  8911 ;; This function uses a non-reentrant model
  8912 ;;
  8913                           
  8914                           	psect	text27
  8915  0034E8                     __ptext27:
  8916                           	opt stack 0
  8917  0034E8                     ___ftsub:
  8918                           	opt stack 23
  8919                           
  8920                           ;incstack = 0
  8921  0034E8  0100               	movlb	0	; () banked
  8922  0034EA  51B1               	movf	___ftsub@f2& (0+255),w,b
  8923  0034EC  0100               	movlb	0	; () banked
  8924  0034EE  11B2               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  8925  0034F0  0100               	movlb	0	; () banked
  8926  0034F2  11B3               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  8927  0034F4  B4D8               	btfsc	status,2,c
  8928  0034F6  D009               	goto	l6104
  8929                           
  8930                           ; BSR set to: 0
  8931  0034F8  0E00               	movlw	0
  8932  0034FA  0100               	movlb	0	; () banked
  8933  0034FC  1BB1               	xorwf	___ftsub@f2& (0+255),f,b
  8934  0034FE  0E00               	movlw	0
  8935  003500  0100               	movlb	0	; () banked
  8936  003502  1BB2               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  8937  003504  0E80               	movlw	128
  8938  003506  0100               	movlb	0	; () banked
  8939  003508  1BB3               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  8940  00350A                     l6104:
  8941                           
  8942                           ; BSR set to: 0
  8943  00350A  C0AE  F0A2         	movff	___ftsub@f1,___ftadd@f1
  8944  00350E  C0AF  F0A3         	movff	___ftsub@f1+1,___ftadd@f1+1
  8945  003512  C0B0  F0A4         	movff	___ftsub@f1+2,___ftadd@f1+2
  8946  003516  C0B1  F0A5         	movff	___ftsub@f2,___ftadd@f2
  8947  00351A  C0B2  F0A6         	movff	___ftsub@f2+1,___ftadd@f2+1
  8948  00351E  C0B3  F0A7         	movff	___ftsub@f2+2,___ftadd@f2+2
  8949  003522  EC67  F00D         	call	___ftadd	;wreg free
  8950  003526  C0A2  F0AE         	movff	?___ftadd,?___ftsub
  8951  00352A  C0A3  F0AF         	movff	?___ftadd+1,?___ftsub+1
  8952  00352E  C0A4  F0B0         	movff	?___ftadd+2,?___ftsub+2
  8953  003532  0012               	return	
  8954  003534                     __end_of___ftsub:
  8955                           	opt stack 0
  8956                           tblptru	equ	0xFF8
  8957                           tblptrh	equ	0xFF7
  8958                           tblptrl	equ	0xFF6
  8959                           tablat	equ	0xFF5
  8960                           prodh	equ	0xFF4
  8961                           prodl	equ	0xFF3
  8962                           postinc0	equ	0xFEE
  8963                           wreg	equ	0xFE8
  8964                           postdec1	equ	0xFE5
  8965                           fsr1l	equ	0xFE1
  8966                           indf2	equ	0xFDF
  8967                           postinc2	equ	0xFDE
  8968                           postdec2	equ	0xFDD
  8969                           fsr2h	equ	0xFDA
  8970                           fsr2l	equ	0xFD9
  8971                           status	equ	0xFD8
  8972                           
  8973 ;; *************** function ___ftneg *****************
  8974 ;; Defined at:
  8975 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  8976 ;; Parameters:    Size  Location     Type
  8977 ;;  f1              3   34[COMRAM] float 
  8978 ;; Auto vars:     Size  Location     Type
  8979 ;;		None
  8980 ;; Return value:  Size  Location     Type
  8981 ;;                  3   34[COMRAM] float 
  8982 ;; Registers used:
  8983 ;;		wreg, status,2, status,0
  8984 ;; Tracked objects:
  8985 ;;		On entry : 0/0
  8986 ;;		On exit  : 0/0
  8987 ;;		Unchanged: 0/0
  8988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8989 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8992 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8993 ;;Total ram usage:        3 bytes
  8994 ;; Hardware stack levels used:    1
  8995 ;; Hardware stack levels required when called:    3
  8996 ;; This function calls:
  8997 ;;		Nothing
  8998 ;; This function is called by:
  8999 ;;		_printf
  9000 ;; This function uses a non-reentrant model
  9001 ;;
  9002                           
  9003                           	psect	text28
  9004  003848                     __ptext28:
  9005                           	opt stack 0
  9006  003848                     ___ftneg:
  9007                           	opt stack 25
  9008                           
  9009                           ;incstack = 0
  9010  003848  5023               	movf	___ftneg@f1,w,c
  9011  00384A  1024               	iorwf	___ftneg@f1+1,w,c
  9012  00384C  1025               	iorwf	___ftneg@f1+2,w,c
  9013  00384E  B4D8               	btfsc	status,2,c
  9014  003850  D006               	goto	l1168
  9015  003852  0E00               	movlw	0
  9016  003854  1A23               	xorwf	___ftneg@f1,f,c
  9017  003856  0E00               	movlw	0
  9018  003858  1A24               	xorwf	___ftneg@f1+1,f,c
  9019  00385A  0E80               	movlw	128
  9020  00385C  1A25               	xorwf	___ftneg@f1+2,f,c
  9021  00385E                     l1168:
  9022  00385E  C023  F023         	movff	___ftneg@f1,?___ftneg
  9023  003862  C024  F024         	movff	___ftneg@f1+1,?___ftneg+1
  9024  003866  C025  F025         	movff	___ftneg@f1+2,?___ftneg+2
  9025  00386A  0012               	return		;funcret
  9026  00386C                     __end_of___ftneg:
  9027                           	opt stack 0
  9028                           tblptru	equ	0xFF8
  9029                           tblptrh	equ	0xFF7
  9030                           tblptrl	equ	0xFF6
  9031                           tablat	equ	0xFF5
  9032                           prodh	equ	0xFF4
  9033                           prodl	equ	0xFF3
  9034                           postinc0	equ	0xFEE
  9035                           wreg	equ	0xFE8
  9036                           postdec1	equ	0xFE5
  9037                           fsr1l	equ	0xFE1
  9038                           indf2	equ	0xFDF
  9039                           postinc2	equ	0xFDE
  9040                           postdec2	equ	0xFDD
  9041                           fsr2h	equ	0xFDA
  9042                           fsr2l	equ	0xFD9
  9043                           status	equ	0xFD8
  9044                           
  9045 ;; *************** function ___ftge *****************
  9046 ;; Defined at:
  9047 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  9048 ;; Parameters:    Size  Location     Type
  9049 ;;  ff1             3   46[COMRAM] float 
  9050 ;;  ff2             3   49[COMRAM] float 
  9051 ;; Auto vars:     Size  Location     Type
  9052 ;;		None
  9053 ;; Return value:  Size  Location     Type
  9054 ;;		None               void
  9055 ;; Registers used:
  9056 ;;		wreg, status,2, status,0
  9057 ;; Tracked objects:
  9058 ;;		On entry : 0/0
  9059 ;;		On exit  : 0/0
  9060 ;;		Unchanged: 0/0
  9061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9062 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9064 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9065 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9066 ;;Total ram usage:        9 bytes
  9067 ;; Hardware stack levels used:    1
  9068 ;; Hardware stack levels required when called:    3
  9069 ;; This function calls:
  9070 ;;		Nothing
  9071 ;; This function is called by:
  9072 ;;		_sortBattery
  9073 ;;		_printf
  9074 ;; This function uses a non-reentrant model
  9075 ;;
  9076                           
  9077                           	psect	text29
  9078  003046                     __ptext29:
  9079                           	opt stack 0
  9080  003046                     ___ftge:
  9081                           	opt stack 25
  9082                           
  9083                           ;incstack = 0
  9084  003046  AE31               	btfss	___ftge@ff1+2,7,c
  9085  003048  D016               	goto	l6124
  9086  00304A  C02F  F035         	movff	___ftge@ff1,??___ftge
  9087  00304E  C030  F036         	movff	___ftge@ff1+1,??___ftge+1
  9088  003052  C031  F037         	movff	___ftge@ff1+2,??___ftge+2
  9089  003056  1E35               	comf	??___ftge,f,c
  9090  003058  1E36               	comf	??___ftge+1,f,c
  9091  00305A  1E37               	comf	??___ftge+2,f,c
  9092  00305C  2A35               	incf	??___ftge,f,c
  9093  00305E  0E00               	movlw	0
  9094  003060  2236               	addwfc	??___ftge+1,f,c
  9095  003062  2237               	addwfc	??___ftge+2,f,c
  9096  003064  0E00               	movlw	0
  9097  003066  2435               	addwf	??___ftge,w,c
  9098  003068  6E2F               	movwf	___ftge@ff1,c
  9099  00306A  0E00               	movlw	0
  9100  00306C  2036               	addwfc	??___ftge+1,w,c
  9101  00306E  6E30               	movwf	___ftge@ff1+1,c
  9102  003070  0E80               	movlw	128
  9103  003072  2037               	addwfc	??___ftge+2,w,c
  9104  003074  6E31               	movwf	___ftge@ff1+2,c
  9105  003076                     l6124:
  9106  003076  AE34               	btfss	___ftge@ff2+2,7,c
  9107  003078  D016               	goto	l6128
  9108  00307A  C032  F035         	movff	___ftge@ff2,??___ftge
  9109  00307E  C033  F036         	movff	___ftge@ff2+1,??___ftge+1
  9110  003082  C034  F037         	movff	___ftge@ff2+2,??___ftge+2
  9111  003086  1E35               	comf	??___ftge,f,c
  9112  003088  1E36               	comf	??___ftge+1,f,c
  9113  00308A  1E37               	comf	??___ftge+2,f,c
  9114  00308C  2A35               	incf	??___ftge,f,c
  9115  00308E  0E00               	movlw	0
  9116  003090  2236               	addwfc	??___ftge+1,f,c
  9117  003092  2237               	addwfc	??___ftge+2,f,c
  9118  003094  0E00               	movlw	0
  9119  003096  2435               	addwf	??___ftge,w,c
  9120  003098  6E32               	movwf	___ftge@ff2,c
  9121  00309A  0E00               	movlw	0
  9122  00309C  2036               	addwfc	??___ftge+1,w,c
  9123  00309E  6E33               	movwf	___ftge@ff2+1,c
  9124  0030A0  0E80               	movlw	128
  9125  0030A2  2037               	addwfc	??___ftge+2,w,c
  9126  0030A4  6E34               	movwf	___ftge@ff2+2,c
  9127  0030A6                     l6128:
  9128  0030A6  0E00               	movlw	0
  9129  0030A8  1A2F               	xorwf	___ftge@ff1,f,c
  9130  0030AA  0E00               	movlw	0
  9131  0030AC  1A30               	xorwf	___ftge@ff1+1,f,c
  9132  0030AE  0E80               	movlw	128
  9133  0030B0  1A31               	xorwf	___ftge@ff1+2,f,c
  9134  0030B2  0E00               	movlw	0
  9135  0030B4  1A32               	xorwf	___ftge@ff2,f,c
  9136  0030B6  0E00               	movlw	0
  9137  0030B8  1A33               	xorwf	___ftge@ff2+1,f,c
  9138  0030BA  0E80               	movlw	128
  9139  0030BC  1A34               	xorwf	___ftge@ff2+2,f,c
  9140  0030BE  5032               	movf	___ftge@ff2,w,c
  9141  0030C0  5C2F               	subwf	___ftge@ff1,w,c
  9142  0030C2  5033               	movf	___ftge@ff2+1,w,c
  9143  0030C4  5830               	subwfb	___ftge@ff1+1,w,c
  9144  0030C6  5034               	movf	___ftge@ff2+2,w,c
  9145  0030C8  5831               	subwfb	___ftge@ff1+2,w,c
  9146  0030CA  B0D8               	btfsc	status,0,c
  9147  0030CC  D002               	goto	l6134
  9148  0030CE  90D8               	bcf	status,0,c
  9149  0030D0  0012               	return	
  9150  0030D2                     l6134:
  9151  0030D2  80D8               	bsf	status,0,c
  9152  0030D4  0012               	return	
  9153  0030D6                     __end_of___ftge:
  9154                           	opt stack 0
  9155                           tblptru	equ	0xFF8
  9156                           tblptrh	equ	0xFF7
  9157                           tblptrl	equ	0xFF6
  9158                           tablat	equ	0xFF5
  9159                           prodh	equ	0xFF4
  9160                           prodl	equ	0xFF3
  9161                           postinc0	equ	0xFEE
  9162                           wreg	equ	0xFE8
  9163                           postdec1	equ	0xFE5
  9164                           fsr1l	equ	0xFE1
  9165                           indf2	equ	0xFDF
  9166                           postinc2	equ	0xFDE
  9167                           postdec2	equ	0xFDD
  9168                           fsr2h	equ	0xFDA
  9169                           fsr2l	equ	0xFD9
  9170                           status	equ	0xFD8
  9171                           
  9172 ;; *************** function _lcdClear *****************
  9173 ;; Defined at:
  9174 ;;		line 74 in file "lcd.c"
  9175 ;; Parameters:    Size  Location     Type
  9176 ;;		None
  9177 ;; Auto vars:     Size  Location     Type
  9178 ;;		None
  9179 ;; Return value:  Size  Location     Type
  9180 ;;                  1    wreg      void 
  9181 ;; Registers used:
  9182 ;;		wreg, status,2, status,0, cstack
  9183 ;; Tracked objects:
  9184 ;;		On entry : 0/0
  9185 ;;		On exit  : 0/0
  9186 ;;		Unchanged: 0/0
  9187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9192 ;;Total ram usage:        0 bytes
  9193 ;; Hardware stack levels used:    1
  9194 ;; Hardware stack levels required when called:    5
  9195 ;; This function calls:
  9196 ;;		_lcdInst
  9197 ;; This function is called by:
  9198 ;;		_main
  9199 ;;		_sortBattery
  9200 ;;		_dateTime
  9201 ;;		_mainMenu
  9202 ;;		_runSelect
  9203 ;;		_runMenu
  9204 ;;		_runTime
  9205 ;;		_runStats
  9206 ;;		_pause
  9207 ;; This function uses a non-reentrant model
  9208 ;;
  9209                           
  9210                           	psect	text30
  9211  00390C                     __ptext30:
  9212                           	opt stack 0
  9213  00390C                     _lcdClear:
  9214                           	opt stack 24
  9215                           
  9216                           ;lcd.c: 75: lcdInst(0b00000001);
  9217                           
  9218                           ;incstack = 0
  9219  00390C  0E01               	movlw	1
  9220  00390E  EC47  F01C         	call	_lcdInst
  9221  003912  0012               	return		;funcret
  9222  003914                     __end_of_lcdClear:
  9223                           	opt stack 0
  9224                           tblptru	equ	0xFF8
  9225                           tblptrh	equ	0xFF7
  9226                           tblptrl	equ	0xFF6
  9227                           tablat	equ	0xFF5
  9228                           prodh	equ	0xFF4
  9229                           prodl	equ	0xFF3
  9230                           postinc0	equ	0xFEE
  9231                           wreg	equ	0xFE8
  9232                           postdec1	equ	0xFE5
  9233                           fsr1l	equ	0xFE1
  9234                           indf2	equ	0xFDF
  9235                           postinc2	equ	0xFDE
  9236                           postdec2	equ	0xFDD
  9237                           fsr2h	equ	0xFDA
  9238                           fsr2l	equ	0xFD9
  9239                           status	equ	0xFD8
  9240                           
  9241 ;; *************** function _pinSetup *****************
  9242 ;; Defined at:
  9243 ;;		line 285 in file "main.c"
  9244 ;; Parameters:    Size  Location     Type
  9245 ;;		None
  9246 ;; Auto vars:     Size  Location     Type
  9247 ;;		None
  9248 ;; Return value:  Size  Location     Type
  9249 ;;                  1    wreg      void 
  9250 ;; Registers used:
  9251 ;;		wreg, status,2, status,0
  9252 ;; Tracked objects:
  9253 ;;		On entry : 0/0
  9254 ;;		On exit  : 0/0
  9255 ;;		Unchanged: 0/0
  9256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9261 ;;Total ram usage:        0 bytes
  9262 ;; Hardware stack levels used:    1
  9263 ;; Hardware stack levels required when called:    3
  9264 ;; This function calls:
  9265 ;;		Nothing
  9266 ;; This function is called by:
  9267 ;;		_main
  9268 ;;		_debug
  9269 ;; This function uses a non-reentrant model
  9270 ;;
  9271                           
  9272                           	psect	text31
  9273  00365C                     __ptext31:
  9274                           	opt stack 0
  9275  00365C                     _pinSetup:
  9276                           	opt stack 27
  9277                           
  9278                           ;main.c: 291: TRISA = 0xFF;
  9279                           
  9280                           ;incstack = 0
  9281  00365C  6892               	setf	3986,c	;volatile
  9282                           
  9283                           ;main.c: 292: TRISB = 0xFF;
  9284  00365E  6893               	setf	3987,c	;volatile
  9285                           
  9286                           ;main.c: 293: TRISC = 0b11000000;
  9287  003660  0EC0               	movlw	192
  9288  003662  6E94               	movwf	3988,c	;volatile
  9289                           
  9290                           ;main.c: 294: TRISD = 0x00;
  9291  003664  0E00               	movlw	0
  9292  003666  6E95               	movwf	3989,c	;volatile
  9293                           
  9294                           ;main.c: 295: TRISE = 0x00;
  9295  003668  0E00               	movlw	0
  9296  00366A  6E96               	movwf	3990,c	;volatile
  9297                           
  9298                           ;main.c: 297: LATA = 0x00;
  9299  00366C  0E00               	movlw	0
  9300  00366E  6E89               	movwf	3977,c	;volatile
  9301                           
  9302                           ;main.c: 298: LATB = 0x00;
  9303  003670  0E00               	movlw	0
  9304  003672  6E8A               	movwf	3978,c	;volatile
  9305                           
  9306                           ;main.c: 299: LATC = 0x00;
  9307  003674  0E00               	movlw	0
  9308  003676  6E8B               	movwf	3979,c	;volatile
  9309                           
  9310                           ;main.c: 300: LATD = 0x00;
  9311  003678  0E00               	movlw	0
  9312  00367A  6E8C               	movwf	3980,c	;volatile
  9313                           
  9314                           ;main.c: 301: LATE = 0x00;
  9315  00367C  0E00               	movlw	0
  9316  00367E  6E8D               	movwf	3981,c	;volatile
  9317                           
  9318                           ;main.c: 303: ADCON0 = 0x00;
  9319  003680  0E00               	movlw	0
  9320  003682  6EC2               	movwf	4034,c	;volatile
  9321                           
  9322                           ;main.c: 305: ADCON1 |= 0x0B;
  9323  003684  0E0B               	movlw	11
  9324  003686  12C1               	iorwf	4033,f,c	;volatile
  9325                           
  9326                           ;main.c: 310: ADCON2 = 0;
  9327  003688  0E00               	movlw	0
  9328  00368A  6EC0               	movwf	4032,c	;volatile
  9329                           
  9330                           ;main.c: 311: ADCON2 |= 0b010;
  9331  00368C  82C0               	bsf	4032,1,c	;volatile
  9332                           
  9333                           ;main.c: 312: ADCON2 |= 0b110<<3;
  9334  00368E  0E30               	movlw	48
  9335  003690  12C0               	iorwf	4032,f,c	;volatile
  9336                           
  9337                           ;main.c: 313: ADCON2 |= 1<<7;
  9338  003692  8EC0               	bsf	4032,7,c	;volatile
  9339                           
  9340                           ;main.c: 316: INT1IE = 1;
  9341  003694  86F0               	bsf	intcon3,3,c	;volatile
  9342                           
  9343                           ;main.c: 317: INT0IE = 1;
  9344  003696  88F2               	bsf	intcon,4,c	;volatile
  9345                           
  9346                           ;main.c: 318: (INTCONbits.GIE = 1);
  9347  003698  8EF2               	bsf	intcon,7,c	;volatile
  9348  00369A  0012               	return		;funcret
  9349  00369C                     __end_of_pinSetup:
  9350                           	opt stack 0
  9351                           tblptru	equ	0xFF8
  9352                           tblptrh	equ	0xFF7
  9353                           tblptrl	equ	0xFF6
  9354                           tablat	equ	0xFF5
  9355                           prodh	equ	0xFF4
  9356                           prodl	equ	0xFF3
  9357                           intcon	equ	0xFF2
  9358                           intcon3	equ	0xFF0
  9359                           postinc0	equ	0xFEE
  9360                           wreg	equ	0xFE8
  9361                           postdec1	equ	0xFE5
  9362                           fsr1l	equ	0xFE1
  9363                           indf2	equ	0xFDF
  9364                           postinc2	equ	0xFDE
  9365                           postdec2	equ	0xFDD
  9366                           fsr2h	equ	0xFDA
  9367                           fsr2l	equ	0xFD9
  9368                           status	equ	0xFD8
  9369                           
  9370 ;; *************** function _lcdHome *****************
  9371 ;; Defined at:
  9372 ;;		line 70 in file "lcd.c"
  9373 ;; Parameters:    Size  Location     Type
  9374 ;;		None
  9375 ;; Auto vars:     Size  Location     Type
  9376 ;;		None
  9377 ;; Return value:  Size  Location     Type
  9378 ;;                  2   22[None  ] int 
  9379 ;; Registers used:
  9380 ;;		wreg, status,2, status,0, cstack
  9381 ;; Tracked objects:
  9382 ;;		On entry : 0/0
  9383 ;;		On exit  : 0/0
  9384 ;;		Unchanged: 0/0
  9385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9390 ;;Total ram usage:        0 bytes
  9391 ;; Hardware stack levels used:    1
  9392 ;; Hardware stack levels required when called:    5
  9393 ;; This function calls:
  9394 ;;		_lcdInst
  9395 ;; This function is called by:
  9396 ;;		_main
  9397 ;; This function uses a non-reentrant model
  9398 ;;
  9399                           
  9400                           	psect	text32
  9401  003914                     __ptext32:
  9402                           	opt stack 0
  9403  003914                     _lcdHome:
  9404                           	opt stack 25
  9405                           
  9406                           ;lcd.c: 71: lcdInst(0b11000000);
  9407                           
  9408                           ;incstack = 0
  9409  003914  0EC0               	movlw	192
  9410  003916  EC47  F01C         	call	_lcdInst
  9411  00391A  0012               	return		;funcret
  9412  00391C                     __end_of_lcdHome:
  9413                           	opt stack 0
  9414                           tblptru	equ	0xFF8
  9415                           tblptrh	equ	0xFF7
  9416                           tblptrl	equ	0xFF6
  9417                           tablat	equ	0xFF5
  9418                           prodh	equ	0xFF4
  9419                           prodl	equ	0xFF3
  9420                           intcon	equ	0xFF2
  9421                           intcon3	equ	0xFF0
  9422                           postinc0	equ	0xFEE
  9423                           wreg	equ	0xFE8
  9424                           postdec1	equ	0xFE5
  9425                           fsr1l	equ	0xFE1
  9426                           indf2	equ	0xFDF
  9427                           postinc2	equ	0xFDE
  9428                           postdec2	equ	0xFDD
  9429                           fsr2h	equ	0xFDA
  9430                           fsr2l	equ	0xFD9
  9431                           status	equ	0xFD8
  9432                           
  9433 ;; *************** function _initServo *****************
  9434 ;; Defined at:
  9435 ;;		line 21 in file "servo.c"
  9436 ;; Parameters:    Size  Location     Type
  9437 ;;  motor           2   94[BANK0 ] PTR int 
  9438 ;;		 -> redirectingServo(4), conveyorServo(4), padServo(4), 
  9439 ;;  angle           2   96[BANK0 ] int 
  9440 ;; Auto vars:     Size  Location     Type
  9441 ;;  i               2  102[BANK0 ] int 
  9442 ;; Return value:  Size  Location     Type
  9443 ;;                  1    wreg      void 
  9444 ;; Registers used:
  9445 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9446 ;; Tracked objects:
  9447 ;;		On entry : 0/0
  9448 ;;		On exit  : 0/0
  9449 ;;		Unchanged: 0/0
  9450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9451 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9452 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9453 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9454 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9455 ;;Total ram usage:       10 bytes
  9456 ;; Hardware stack levels used:    1
  9457 ;; Hardware stack levels required when called:    7
  9458 ;; This function calls:
  9459 ;;		_initTimer
  9460 ;;		_setAngle
  9461 ;;		_startTimer
  9462 ;; This function is called by:
  9463 ;;		_main
  9464 ;;		_debug
  9465 ;; This function uses a non-reentrant model
  9466 ;;
  9467                           
  9468                           	psect	text33
  9469  002ADA                     __ptext33:
  9470                           	opt stack 0
  9471  002ADA                     _initServo:
  9472                           	opt stack 23
  9473                           
  9474                           ;servo.c: 24: for(int i = 0; i < n; i++){
  9475                           
  9476                           ;incstack = 0
  9477  002ADA  0E00               	movlw	0
  9478  002ADC  0100               	movlb	0	; () banked
  9479  002ADE  6FE7               	movwf	(initServo@i+1)& (0+255),b
  9480  002AE0  0E00               	movlw	0
  9481  002AE2  6FE6               	movwf	initServo@i& (0+255),b
  9482  002AE4  D017               	goto	l6756
  9483  002AE6                     l6750:
  9484                           
  9485                           ; BSR set to: 0
  9486                           ;servo.c: 25: if(servos[i] == motor)return;
  9487  002AE6  90D8               	bcf	status,0,c
  9488  002AE8  0100               	movlb	0	; () banked
  9489  002AEA  35E6               	rlcf	initServo@i& (0+255),w,b
  9490  002AEC  6ED9               	movwf	fsr2l,c
  9491  002AEE  0100               	movlb	0	; () banked
  9492  002AF0  35E7               	rlcf	(initServo@i+1)& (0+255),w,b
  9493  002AF2  6EDA               	movwf	fsr2h,c
  9494  002AF4  0E40               	movlw	low _servos
  9495  002AF6  26D9               	addwf	fsr2l,f,c
  9496  002AF8  0E01               	movlw	high _servos
  9497  002AFA  22DA               	addwfc	fsr2h,f,c
  9498  002AFC  0100               	movlb	0	; () banked
  9499  002AFE  51DE               	movf	initServo@motor& (0+255),w,b
  9500  002B00  18DE               	xorwf	postinc2,w,c
  9501  002B02  E105               	bnz	l6754
  9502  002B04  0100               	movlb	0	; () banked
  9503  002B06  51DF               	movf	(initServo@motor+1)& (0+255),w,b
  9504  002B08  18DE               	xorwf	postinc2,w,c
  9505  002B0A  B4D8               	btfsc	status,2,c
  9506  002B0C  0012               	return	
  9507  002B0E                     l6754:
  9508                           
  9509                           ; BSR set to: 0
  9510  002B0E  0100               	movlb	0	; () banked
  9511  002B10  4BE6               	infsnz	initServo@i& (0+255),f,b
  9512  002B12  2BE7               	incf	(initServo@i+1)& (0+255),f,b
  9513  002B14                     l6756:
  9514                           
  9515                           ; BSR set to: 0
  9516  002B14  0100               	movlb	0	; () banked
  9517  002B16  51F3               	movf	_n& (0+255),w,b
  9518  002B18  0100               	movlb	0	; () banked
  9519  002B1A  5DE6               	subwf	initServo@i& (0+255),w,b
  9520  002B1C  0100               	movlb	0	; () banked
  9521  002B1E  51E7               	movf	(initServo@i+1)& (0+255),w,b
  9522  002B20  0A80               	xorlw	128
  9523  002B22  0100               	movlb	0	; () banked
  9524  002B24  6FE2               	movwf	??_initServo& (0+255),b
  9525  002B26  0100               	movlb	0	; () banked
  9526  002B28  51F4               	movf	(_n+1)& (0+255),w,b
  9527  002B2A  0A80               	xorlw	128
  9528  002B2C  0100               	movlb	0	; () banked
  9529  002B2E  59E2               	subwfb	??_initServo& (0+255),w,b
  9530  002B30  A0D8               	btfss	status,0,c
  9531  002B32  D7D9               	goto	l6750
  9532                           
  9533                           ; BSR set to: 0
  9534                           ;servo.c: 26: }
  9535                           ;servo.c: 28: n++;
  9536                           
  9537                           ; BSR set to: 0
  9538  002B34  0100               	movlb	0	; () banked
  9539  002B36  4BF3               	infsnz	_n& (0+255),f,b
  9540  002B38  2BF4               	incf	(_n+1)& (0+255),f,b
  9541                           
  9542                           ; BSR set to: 0
  9543                           ;servo.c: 29: servos[n-1] = motor;
  9544  002B3A  0EFE               	movlw	254
  9545  002B3C  0100               	movlb	0	; () banked
  9546  002B3E  6FE2               	movwf	??_initServo& (0+255),b
  9547  002B40  0EFF               	movlw	255
  9548  002B42  0100               	movlb	0	; () banked
  9549  002B44  6FE3               	movwf	(??_initServo+1)& (0+255),b
  9550  002B46  C0F3  F0E4         	movff	_n,??_initServo+2
  9551  002B4A  C0F4  F0E5         	movff	_n+1,??_initServo+3
  9552  002B4E  90D8               	bcf	status,0,c
  9553  002B50  0100               	movlb	0	; () banked
  9554  002B52  37E4               	rlcf	(??_initServo+2)& (0+255),f,b
  9555  002B54  37E5               	rlcf	(??_initServo+3)& (0+255),f,b
  9556  002B56  0100               	movlb	0	; () banked
  9557  002B58  51E2               	movf	??_initServo& (0+255),w,b
  9558  002B5A  0100               	movlb	0	; () banked
  9559  002B5C  27E4               	addwf	(??_initServo+2)& (0+255),f,b
  9560  002B5E  0100               	movlb	0	; () banked
  9561  002B60  51E3               	movf	(??_initServo+1)& (0+255),w,b
  9562  002B62  0100               	movlb	0	; () banked
  9563  002B64  23E5               	addwfc	(??_initServo+3)& (0+255),f,b
  9564  002B66  0E40               	movlw	low _servos
  9565  002B68  0100               	movlb	0	; () banked
  9566  002B6A  25E4               	addwf	(??_initServo+2)& (0+255),w,b
  9567  002B6C  6ED9               	movwf	fsr2l,c
  9568  002B6E  0E01               	movlw	high _servos
  9569  002B70  0100               	movlb	0	; () banked
  9570  002B72  21E5               	addwfc	(??_initServo+3)& (0+255),w,b
  9571  002B74  6EDA               	movwf	fsr2h,c
  9572  002B76  C0DE  FFDE         	movff	initServo@motor,postinc2
  9573  002B7A  C0DF  FFDD         	movff	initServo@motor+1,postdec2
  9574                           
  9575                           ; BSR set to: 0
  9576                           ;servo.c: 30: setAngle(motor, angle);
  9577  002B7E  C0DE  F0D4         	movff	initServo@motor,setAngle@motor
  9578  002B82  C0DF  F0D5         	movff	initServo@motor+1,setAngle@motor+1
  9579  002B86  C0E0  F0D6         	movff	initServo@angle,setAngle@angle
  9580  002B8A  C0E1  F0D7         	movff	initServo@angle+1,setAngle@angle+1
  9581  002B8E  ECDE  F015         	call	_setAngle	;wreg free
  9582                           
  9583                           ;servo.c: 32: initTimer(0);
  9584  002B92  0E00               	movlw	0
  9585  002B94  6E24               	movwf	initTimer@timer+1,c
  9586  002B96  0E00               	movlw	0
  9587  002B98  6E23               	movwf	initTimer@timer,c
  9588  002B9A  ECE6  F01A         	call	_initTimer	;wreg free
  9589                           
  9590                           ;servo.c: 33: startTimer(0,0);
  9591  002B9E  0E00               	movlw	0
  9592  002BA0  6E24               	movwf	startTimer@timer+1,c
  9593  002BA2  0E00               	movlw	0
  9594  002BA4  6E23               	movwf	startTimer@timer,c
  9595  002BA6  0E00               	movlw	0
  9596  002BA8  6E25               	movwf	startTimer@val,c
  9597  002BAA  0E00               	movlw	0
  9598  002BAC  6E26               	movwf	startTimer@val+1,c
  9599  002BAE  0E00               	movlw	0
  9600  002BB0  6E27               	movwf	startTimer@val+2,c
  9601  002BB2  0E00               	movlw	0
  9602  002BB4  6E28               	movwf	startTimer@val+3,c
  9603  002BB6  EC9A  F01A         	call	_startTimer	;wreg free
  9604  002BBA  0012               	return		;funcret
  9605  002BBC                     __end_of_initServo:
  9606                           	opt stack 0
  9607                           tblptru	equ	0xFF8
  9608                           tblptrh	equ	0xFF7
  9609                           tblptrl	equ	0xFF6
  9610                           tablat	equ	0xFF5
  9611                           prodh	equ	0xFF4
  9612                           prodl	equ	0xFF3
  9613                           intcon	equ	0xFF2
  9614                           intcon3	equ	0xFF0
  9615                           postinc0	equ	0xFEE
  9616                           wreg	equ	0xFE8
  9617                           postdec1	equ	0xFE5
  9618                           fsr1l	equ	0xFE1
  9619                           indf2	equ	0xFDF
  9620                           postinc2	equ	0xFDE
  9621                           postdec2	equ	0xFDD
  9622                           fsr2h	equ	0xFDA
  9623                           fsr2l	equ	0xFD9
  9624                           status	equ	0xFD8
  9625                           
  9626 ;; *************** function _startTimer *****************
  9627 ;; Defined at:
  9628 ;;		line 76 in file "timer.c"
  9629 ;; Parameters:    Size  Location     Type
  9630 ;;  timer           2   34[COMRAM] int 
  9631 ;;  val             4   36[COMRAM] long 
  9632 ;; Auto vars:     Size  Location     Type
  9633 ;;		None
  9634 ;; Return value:  Size  Location     Type
  9635 ;;                  1    wreg      void 
  9636 ;; Registers used:
  9637 ;;		wreg, status,2, status,0
  9638 ;; Tracked objects:
  9639 ;;		On entry : 0/0
  9640 ;;		On exit  : 0/0
  9641 ;;		Unchanged: 0/0
  9642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9643 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9645 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9646 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9647 ;;Total ram usage:        8 bytes
  9648 ;; Hardware stack levels used:    1
  9649 ;; Hardware stack levels required when called:    3
  9650 ;; This function calls:
  9651 ;;		Nothing
  9652 ;; This function is called by:
  9653 ;;		_main
  9654 ;;		_initServo
  9655 ;;		_testFrequency
  9656 ;; This function uses a non-reentrant model
  9657 ;;
  9658                           
  9659                           	psect	text34
  9660  003534                     __ptext34:
  9661                           	opt stack 0
  9662  003534                     _startTimer:
  9663                           	opt stack 27
  9664                           
  9665                           ;timer.c: 77: switch(timer){
  9666                           
  9667                           ;incstack = 0
  9668  003534  D012               	goto	l4722
  9669  003536                     l431:
  9670                           
  9671                           ;timer.c: 79: TMR0H = val>>8;
  9672  003536  C026  FFD7         	movff	startTimer@val+1,4055	;volatile
  9673                           
  9674                           ;timer.c: 80: TMR0L = val;
  9675  00353A  C025  FFD6         	movff	startTimer@val,4054	;volatile
  9676                           
  9677                           ;timer.c: 81: T0CON |= 1<<7;
  9678  00353E  8ED5               	bsf	4053,7,c	;volatile
  9679                           
  9680                           ;timer.c: 82: break;
  9681  003540  0012               	return	
  9682  003542                     l433:
  9683                           
  9684                           ;timer.c: 84: TMR1H = val>>8;
  9685  003542  C026  FFCF         	movff	startTimer@val+1,4047	;volatile
  9686                           
  9687                           ;timer.c: 85: TMR1L = val;
  9688  003546  C025  FFCE         	movff	startTimer@val,4046	;volatile
  9689                           
  9690                           ;timer.c: 86: T1CON |= 1<<0;
  9691  00354A  80CD               	bsf	4045,0,c	;volatile
  9692                           
  9693                           ;timer.c: 87: break;
  9694  00354C  0012               	return	
  9695  00354E                     l434:
  9696                           
  9697                           ;timer.c: 89: TMR3H = val>>8;
  9698  00354E  C026  FFB3         	movff	startTimer@val+1,4019	;volatile
  9699                           
  9700                           ;timer.c: 90: TMR3L = val;
  9701  003552  C025  FFB2         	movff	startTimer@val,4018	;volatile
  9702                           
  9703                           ;timer.c: 91: T3CON |= 1<<0;
  9704  003556  80B1               	bsf	4017,0,c	;volatile
  9705                           
  9706                           ;timer.c: 92: }
  9707  003558  0012               	return	
  9708  00355A                     l4722:
  9709  00355A  C023  F029         	movff	startTimer@timer,??_startTimer
  9710  00355E  C024  F02A         	movff	startTimer@timer+1,??_startTimer+1
  9711                           
  9712                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9713                           ; Switch size 1, requested type "space"
  9714                           ; Number of cases is 1, Range of values is 0 to 0
  9715                           ; switch strategies available:
  9716                           ; Name         Instructions Cycles
  9717                           ; simple_byte            4     3 (average)
  9718                           ;	Chosen strategy is simple_byte
  9719  003562  502A               	movf	??_startTimer+1,w,c
  9720  003564  0A00               	xorlw	0	; case 0
  9721  003566  A4D8               	btfss	status,2,c
  9722  003568  0012               	return	
  9723                           
  9724                           ; Switch size 1, requested type "space"
  9725                           ; Number of cases is 3, Range of values is 0 to 3
  9726                           ; switch strategies available:
  9727                           ; Name         Instructions Cycles
  9728                           ; simple_byte           10     6 (average)
  9729                           ;	Chosen strategy is simple_byte
  9730  00356A  5029               	movf	??_startTimer,w,c
  9731  00356C  0A00               	xorlw	0	; case 0
  9732  00356E  B4D8               	btfsc	status,2,c
  9733  003570  D7E2               	goto	l431
  9734  003572  0A01               	xorlw	1	; case 1
  9735  003574  B4D8               	btfsc	status,2,c
  9736  003576  D7E5               	goto	l433
  9737  003578  0A02               	xorlw	2	; case 3
  9738  00357A  A4D8               	btfss	status,2,c
  9739  00357C  0012               	return	
  9740  00357E  D7E7               	goto	l434
  9741  003580                     __end_of_startTimer:
  9742                           	opt stack 0
  9743                           tblptru	equ	0xFF8
  9744                           tblptrh	equ	0xFF7
  9745                           tblptrl	equ	0xFF6
  9746                           tablat	equ	0xFF5
  9747                           prodh	equ	0xFF4
  9748                           prodl	equ	0xFF3
  9749                           intcon	equ	0xFF2
  9750                           intcon3	equ	0xFF0
  9751                           postinc0	equ	0xFEE
  9752                           wreg	equ	0xFE8
  9753                           postdec1	equ	0xFE5
  9754                           fsr1l	equ	0xFE1
  9755                           indf2	equ	0xFDF
  9756                           postinc2	equ	0xFDE
  9757                           postdec2	equ	0xFDD
  9758                           fsr2h	equ	0xFDA
  9759                           fsr2l	equ	0xFD9
  9760                           status	equ	0xFD8
  9761                           
  9762 ;; *************** function _setAngle *****************
  9763 ;; Defined at:
  9764 ;;		line 44 in file "servo.c"
  9765 ;; Parameters:    Size  Location     Type
  9766 ;;  motor           2   84[BANK0 ] PTR int 
  9767 ;;		 -> redirectingServo(4), conveyorServo(4), padServo(4), 
  9768 ;;  angle           2   86[BANK0 ] int 
  9769 ;; Auto vars:     Size  Location     Type
  9770 ;;  i               2   92[BANK0 ] int 
  9771 ;;  period          2   90[BANK0 ] unsigned int 
  9772 ;; Return value:  Size  Location     Type
  9773 ;;                  1    wreg      void 
  9774 ;; Registers used:
  9775 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9776 ;; Tracked objects:
  9777 ;;		On entry : 0/0
  9778 ;;		On exit  : 0/0
  9779 ;;		Unchanged: 0/0
  9780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9781 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9782 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9783 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9784 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9785 ;;Total ram usage:       10 bytes
  9786 ;; Hardware stack levels used:    1
  9787 ;; Hardware stack levels required when called:    6
  9788 ;; This function calls:
  9789 ;;		_angleToPulse
  9790 ;; This function is called by:
  9791 ;;		_sortBattery
  9792 ;;		_initServo
  9793 ;; This function uses a non-reentrant model
  9794 ;;
  9795                           
  9796                           	psect	text35
  9797  002BBC                     __ptext35:
  9798                           	opt stack 0
  9799  002BBC                     _setAngle:
  9800                           	opt stack 23
  9801                           
  9802                           ;servo.c: 45: unsigned int period = 50000;
  9803                           
  9804                           ;incstack = 0
  9805  002BBC  0EC3               	movlw	195
  9806  002BBE  0100               	movlb	0	; () banked
  9807  002BC0  6FDB               	movwf	(setAngle@period+1)& (0+255),b
  9808  002BC2  0E50               	movlw	80
  9809  002BC4  6FDA               	movwf	setAngle@period& (0+255),b
  9810                           
  9811                           ;servo.c: 46: for(int i = 0; i < n; i++){
  9812  002BC6  0E00               	movlw	0
  9813  002BC8  0100               	movlb	0	; () banked
  9814  002BCA  6FDD               	movwf	(setAngle@i+1)& (0+255),b
  9815  002BCC  0E00               	movlw	0
  9816  002BCE  6FDC               	movwf	setAngle@i& (0+255),b
  9817  002BD0  D03F               	goto	l6698
  9818  002BD2                     l6690:
  9819                           
  9820                           ; BSR set to: 0
  9821                           ;servo.c: 47: if(servos[i] == motor){
  9822  002BD2  90D8               	bcf	status,0,c
  9823  002BD4  0100               	movlb	0	; () banked
  9824  002BD6  35DC               	rlcf	setAngle@i& (0+255),w,b
  9825  002BD8  6ED9               	movwf	fsr2l,c
  9826  002BDA  0100               	movlb	0	; () banked
  9827  002BDC  35DD               	rlcf	(setAngle@i+1)& (0+255),w,b
  9828  002BDE  6EDA               	movwf	fsr2h,c
  9829  002BE0  0E40               	movlw	low _servos
  9830  002BE2  26D9               	addwf	fsr2l,f,c
  9831  002BE4  0E01               	movlw	high _servos
  9832  002BE6  22DA               	addwfc	fsr2h,f,c
  9833  002BE8  0100               	movlb	0	; () banked
  9834  002BEA  51D4               	movf	setAngle@motor& (0+255),w,b
  9835  002BEC  18DE               	xorwf	postinc2,w,c
  9836  002BEE  E11C               	bnz	l6694
  9837  002BF0  0100               	movlb	0	; () banked
  9838  002BF2  51D5               	movf	(setAngle@motor+1)& (0+255),w,b
  9839  002BF4  18DE               	xorwf	postinc2,w,c
  9840  002BF6  A4D8               	btfss	status,2,c
  9841  002BF8  D017               	goto	l6694
  9842                           
  9843                           ; BSR set to: 0
  9844                           ;servo.c: 48: pulse[i] = angleToPulse(angle);
  9845  002BFA  C0D6  F0BD         	movff	setAngle@angle,angleToPulse@angle
  9846  002BFE  C0D7  F0BE         	movff	setAngle@angle+1,angleToPulse@angle+1
  9847  002C02  EC7A  F010         	call	_angleToPulse	;wreg free
  9848  002C06  90D8               	bcf	status,0,c
  9849  002C08  0100               	movlb	0	; () banked
  9850  002C0A  35DC               	rlcf	setAngle@i& (0+255),w,b
  9851  002C0C  6ED9               	movwf	fsr2l,c
  9852  002C0E  0100               	movlb	0	; () banked
  9853  002C10  35DD               	rlcf	(setAngle@i+1)& (0+255),w,b
  9854  002C12  6EDA               	movwf	fsr2h,c
  9855  002C14  0E38               	movlw	low _pulse
  9856  002C16  26D9               	addwf	fsr2l,f,c
  9857  002C18  0E01               	movlw	high _pulse
  9858  002C1A  22DA               	addwfc	fsr2h,f,c
  9859  002C1C  0100               	movlb	0	; () banked
  9860  002C1E  C0BD  FFDE         	movff	?_angleToPulse,postinc2
  9861  002C22  0100               	movlb	0	; () banked
  9862  002C24  C0BE  FFDD         	movff	?_angleToPulse+1,postdec2
  9863  002C28                     l6694:
  9864                           
  9865                           ; BSR set to: 0
  9866                           ;servo.c: 49: }
  9867                           ;servo.c: 50: period-=pulse[i];
  9868  002C28  90D8               	bcf	status,0,c
  9869  002C2A  0100               	movlb	0	; () banked
  9870  002C2C  35DC               	rlcf	setAngle@i& (0+255),w,b
  9871  002C2E  6ED9               	movwf	fsr2l,c
  9872  002C30  0100               	movlb	0	; () banked
  9873  002C32  35DD               	rlcf	(setAngle@i+1)& (0+255),w,b
  9874  002C34  6EDA               	movwf	fsr2h,c
  9875  002C36  0E38               	movlw	low _pulse
  9876  002C38  26D9               	addwf	fsr2l,f,c
  9877  002C3A  0E01               	movlw	high _pulse
  9878  002C3C  22DA               	addwfc	fsr2h,f,c
  9879  002C3E  50DE               	movf	postinc2,w,c
  9880  002C40  0100               	movlb	0	; () banked
  9881  002C42  5FDA               	subwf	setAngle@period& (0+255),f,b
  9882  002C44  50DD               	movf	postdec2,w,c
  9883  002C46  0100               	movlb	0	; () banked
  9884  002C48  5BDB               	subwfb	(setAngle@period+1)& (0+255),f,b
  9885                           
  9886                           ; BSR set to: 0
  9887  002C4A  0100               	movlb	0	; () banked
  9888  002C4C  4BDC               	infsnz	setAngle@i& (0+255),f,b
  9889  002C4E  2BDD               	incf	(setAngle@i+1)& (0+255),f,b
  9890  002C50                     l6698:
  9891                           
  9892                           ; BSR set to: 0
  9893  002C50  0100               	movlb	0	; () banked
  9894  002C52  51F3               	movf	_n& (0+255),w,b
  9895  002C54  0100               	movlb	0	; () banked
  9896  002C56  5DDC               	subwf	setAngle@i& (0+255),w,b
  9897  002C58  0100               	movlb	0	; () banked
  9898  002C5A  51DD               	movf	(setAngle@i+1)& (0+255),w,b
  9899  002C5C  0A80               	xorlw	128
  9900  002C5E  0100               	movlb	0	; () banked
  9901  002C60  6FD8               	movwf	??_setAngle& (0+255),b
  9902  002C62  0100               	movlb	0	; () banked
  9903  002C64  51F4               	movf	(_n+1)& (0+255),w,b
  9904  002C66  0A80               	xorlw	128
  9905  002C68  0100               	movlb	0	; () banked
  9906  002C6A  59D8               	subwfb	??_setAngle& (0+255),w,b
  9907  002C6C  A0D8               	btfss	status,0,c
  9908  002C6E  D7B1               	goto	l6690
  9909                           
  9910                           ; BSR set to: 0
  9911                           ;servo.c: 51: }
  9912                           ;servo.c: 52: pulse[n] = period;
  9913                           
  9914                           ; BSR set to: 0
  9915  002C70  90D8               	bcf	status,0,c
  9916  002C72  0100               	movlb	0	; () banked
  9917  002C74  35F3               	rlcf	_n& (0+255),w,b
  9918  002C76  6ED9               	movwf	fsr2l,c
  9919  002C78  0100               	movlb	0	; () banked
  9920  002C7A  35F4               	rlcf	(_n+1)& (0+255),w,b
  9921  002C7C  6EDA               	movwf	fsr2h,c
  9922  002C7E  0E38               	movlw	low _pulse
  9923  002C80  26D9               	addwf	fsr2l,f,c
  9924  002C82  0E01               	movlw	high _pulse
  9925  002C84  22DA               	addwfc	fsr2h,f,c
  9926  002C86  C0DA  FFDE         	movff	setAngle@period,postinc2
  9927  002C8A  C0DB  FFDD         	movff	setAngle@period+1,postdec2
  9928                           
  9929                           ; BSR set to: 0
  9930  002C8E  0012               	return		;funcret
  9931  002C90                     __end_of_setAngle:
  9932                           	opt stack 0
  9933                           tblptru	equ	0xFF8
  9934                           tblptrh	equ	0xFF7
  9935                           tblptrl	equ	0xFF6
  9936                           tablat	equ	0xFF5
  9937                           prodh	equ	0xFF4
  9938                           prodl	equ	0xFF3
  9939                           intcon	equ	0xFF2
  9940                           intcon3	equ	0xFF0
  9941                           postinc0	equ	0xFEE
  9942                           wreg	equ	0xFE8
  9943                           postdec1	equ	0xFE5
  9944                           fsr1l	equ	0xFE1
  9945                           indf2	equ	0xFDF
  9946                           postinc2	equ	0xFDE
  9947                           postdec2	equ	0xFDD
  9948                           fsr2h	equ	0xFDA
  9949                           fsr2l	equ	0xFD9
  9950                           status	equ	0xFD8
  9951                           
  9952 ;; *************** function _angleToPulse *****************
  9953 ;; Defined at:
  9954 ;;		line 36 in file "servo.c"
  9955 ;; Parameters:    Size  Location     Type
  9956 ;;  angle           2   61[BANK0 ] int 
  9957 ;; Auto vars:     Size  Location     Type
  9958 ;;  a000            4   80[BANK0 ] long 
  9959 ;;  a180            4   73[BANK0 ] long 
  9960 ;;  offset          4   69[BANK0 ] long 
  9961 ;; Return value:  Size  Location     Type
  9962 ;;                  4   61[BANK0 ] long 
  9963 ;; Registers used:
  9964 ;;		wreg, status,2, status,0, cstack
  9965 ;; Tracked objects:
  9966 ;;		On entry : 0/0
  9967 ;;		On exit  : 0/0
  9968 ;;		Unchanged: 0/0
  9969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9970 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9971 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9972 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9973 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9974 ;;Total ram usage:       23 bytes
  9975 ;; Hardware stack levels used:    1
  9976 ;; Hardware stack levels required when called:    5
  9977 ;; This function calls:
  9978 ;;		___altoft
  9979 ;;		___awtoft
  9980 ;;		___ftadd
  9981 ;;		___ftdiv
  9982 ;;		___ftmul
  9983 ;;		___fttol
  9984 ;; This function is called by:
  9985 ;;		_setAngle
  9986 ;; This function uses a non-reentrant model
  9987 ;;
  9988                           
  9989                           	psect	text36
  9990  0020F4                     __ptext36:
  9991                           	opt stack 0
  9992  0020F4                     _angleToPulse:
  9993                           	opt stack 23
  9994                           
  9995                           ;servo.c: 37: long offset = -600;
  9996                           
  9997                           ; BSR set to: 0
  9998                           ;incstack = 0
  9999  0020F4  0EA8               	movlw	168
 10000  0020F6  0100               	movlb	0	; () banked
 10001  0020F8  6FC5               	movwf	angleToPulse@offset& (0+255),b
 10002  0020FA  0EFD               	movlw	253
 10003  0020FC  6FC6               	movwf	(angleToPulse@offset+1)& (0+255),b
 10004  0020FE  0EFF               	movlw	255
 10005  002100  6FC7               	movwf	(angleToPulse@offset+2)& (0+255),b
 10006  002102  0EFF               	movlw	255
 10007  002104  6FC8               	movwf	(angleToPulse@offset+3)& (0+255),b
 10008                           
 10009                           ;servo.c: 38: long a000 = 1250;
 10010  002106  0EE2               	movlw	226
 10011  002108  0100               	movlb	0	; () banked
 10012  00210A  6FD0               	movwf	angleToPulse@a000& (0+255),b
 10013  00210C  0E04               	movlw	4
 10014  00210E  6FD1               	movwf	(angleToPulse@a000+1)& (0+255),b
 10015  002110  0E00               	movlw	0
 10016  002112  6FD2               	movwf	(angleToPulse@a000+2)& (0+255),b
 10017  002114  0E00               	movlw	0
 10018  002116  6FD3               	movwf	(angleToPulse@a000+3)& (0+255),b
 10019                           
 10020                           ;servo.c: 39: long a180 = 6250;
 10021  002118  0E6A               	movlw	106
 10022  00211A  0100               	movlb	0	; () banked
 10023  00211C  6FC9               	movwf	angleToPulse@a180& (0+255),b
 10024  00211E  0E18               	movlw	24
 10025  002120  6FCA               	movwf	(angleToPulse@a180+1)& (0+255),b
 10026  002122  0E00               	movlw	0
 10027  002124  6FCB               	movwf	(angleToPulse@a180+2)& (0+255),b
 10028  002126  0E00               	movlw	0
 10029  002128  6FCC               	movwf	(angleToPulse@a180+3)& (0+255),b
 10030                           
 10031                           ; BSR set to: 0
 10032                           ;servo.c: 41: return a000 + angle/180.0*(a180-a000) + offset;
 10033  00212A  C0D0  F0C1         	movff	angleToPulse@a000,??_angleToPulse
 10034  00212E  C0D1  F0C2         	movff	angleToPulse@a000+1,??_angleToPulse+1
 10035  002132  C0D2  F0C3         	movff	angleToPulse@a000+2,??_angleToPulse+2
 10036  002136  C0D3  F0C4         	movff	angleToPulse@a000+3,??_angleToPulse+3
 10037  00213A  0100               	movlb	0	; () banked
 10038  00213C  1FC1               	comf	??_angleToPulse& (0+255),f,b
 10039  00213E  1FC2               	comf	(??_angleToPulse+1)& (0+255),f,b
 10040  002140  1FC3               	comf	(??_angleToPulse+2)& (0+255),f,b
 10041  002142  1FC4               	comf	(??_angleToPulse+3)& (0+255),f,b
 10042  002144  2BC1               	incf	??_angleToPulse& (0+255),f,b
 10043  002146  0E00               	movlw	0
 10044  002148  23C2               	addwfc	(??_angleToPulse+1)& (0+255),f,b
 10045  00214A  23C3               	addwfc	(??_angleToPulse+2)& (0+255),f,b
 10046  00214C  23C4               	addwfc	(??_angleToPulse+3)& (0+255),f,b
 10047  00214E  0100               	movlb	0	; () banked
 10048  002150  51C9               	movf	angleToPulse@a180& (0+255),w,b
 10049  002152  0100               	movlb	0	; () banked
 10050  002154  25C1               	addwf	??_angleToPulse& (0+255),w,b
 10051  002156  6E2B               	movwf	___altoft@c,c
 10052  002158  0100               	movlb	0	; () banked
 10053  00215A  51CA               	movf	(angleToPulse@a180+1)& (0+255),w,b
 10054  00215C  0100               	movlb	0	; () banked
 10055  00215E  21C2               	addwfc	(??_angleToPulse+1)& (0+255),w,b
 10056  002160  6E2C               	movwf	___altoft@c+1,c
 10057  002162  0100               	movlb	0	; () banked
 10058  002164  51CB               	movf	(angleToPulse@a180+2)& (0+255),w,b
 10059  002166  0100               	movlb	0	; () banked
 10060  002168  21C3               	addwfc	(??_angleToPulse+2)& (0+255),w,b
 10061  00216A  6E2D               	movwf	___altoft@c+2,c
 10062  00216C  0100               	movlb	0	; () banked
 10063  00216E  51CC               	movf	(angleToPulse@a180+3)& (0+255),w,b
 10064  002170  0100               	movlb	0	; () banked
 10065  002172  21C4               	addwfc	(??_angleToPulse+3)& (0+255),w,b
 10066  002174  6E2E               	movwf	___altoft@c+3,c
 10067  002176  EC34  F019         	call	___altoft	;wreg free
 10068  00217A  C02B  F08C         	movff	?___altoft,___ftmul@f2
 10069  00217E  C02C  F08D         	movff	?___altoft+1,___ftmul@f2+1
 10070  002182  C02D  F08E         	movff	?___altoft+2,___ftmul@f2+2
 10071  002186  0E00               	movlw	0
 10072  002188  6E38               	movwf	___ftdiv@f2,c
 10073  00218A  0E34               	movlw	52
 10074  00218C  6E39               	movwf	___ftdiv@f2+1,c
 10075  00218E  0E43               	movlw	67
 10076  002190  6E3A               	movwf	___ftdiv@f2+2,c
 10077  002192  C0BD  F02B         	movff	angleToPulse@angle,___awtoft@c
 10078  002196  C0BE  F02C         	movff	angleToPulse@angle+1,___awtoft@c+1
 10079  00219A  EC6A  F01B         	call	___awtoft	;wreg free
 10080  00219E  C02B  F035         	movff	?___awtoft,___ftdiv@f1
 10081  0021A2  C02C  F036         	movff	?___awtoft+1,___ftdiv@f1+1
 10082  0021A6  C02D  F037         	movff	?___awtoft+2,___ftdiv@f1+2
 10083  0021AA  ECF5  F012         	call	___ftdiv	;wreg free
 10084  0021AE  C035  F089         	movff	?___ftdiv,___ftmul@f1
 10085  0021B2  C036  F08A         	movff	?___ftdiv+1,___ftmul@f1+1
 10086  0021B6  C037  F08B         	movff	?___ftdiv+2,___ftmul@f1+2
 10087  0021BA  ECCB  F00F         	call	___ftmul	;wreg free
 10088  0021BE  C089  F0A5         	movff	?___ftmul,___ftadd@f2
 10089  0021C2  C08A  F0A6         	movff	?___ftmul+1,___ftadd@f2+1
 10090  0021C6  C08B  F0A7         	movff	?___ftmul+2,___ftadd@f2+2
 10091  0021CA  C0D0  F02B         	movff	angleToPulse@a000,___altoft@c
 10092  0021CE  C0D1  F02C         	movff	angleToPulse@a000+1,___altoft@c+1
 10093  0021D2  C0D2  F02D         	movff	angleToPulse@a000+2,___altoft@c+2
 10094  0021D6  C0D3  F02E         	movff	angleToPulse@a000+3,___altoft@c+3
 10095  0021DA  EC34  F019         	call	___altoft	;wreg free
 10096  0021DE  C02B  F0A2         	movff	?___altoft,___ftadd@f1
 10097  0021E2  C02C  F0A3         	movff	?___altoft+1,___ftadd@f1+1
 10098  0021E6  C02D  F0A4         	movff	?___altoft+2,___ftadd@f1+2
 10099  0021EA  EC67  F00D         	call	___ftadd	;wreg free
 10100  0021EE  C0A2  F0CD         	movff	?___ftadd,_angleToPulse$1352
 10101  0021F2  C0A3  F0CE         	movff	?___ftadd+1,_angleToPulse$1352+1
 10102  0021F6  C0A4  F0CF         	movff	?___ftadd+2,_angleToPulse$1352+2
 10103                           
 10104                           ;servo.c: 41: return a000 + angle/180.0*(a180-a000) + offset;
 10105  0021FA  C0C5  F02B         	movff	angleToPulse@offset,___altoft@c
 10106  0021FE  C0C6  F02C         	movff	angleToPulse@offset+1,___altoft@c+1
 10107  002202  C0C7  F02D         	movff	angleToPulse@offset+2,___altoft@c+2
 10108  002206  C0C8  F02E         	movff	angleToPulse@offset+3,___altoft@c+3
 10109  00220A  EC34  F019         	call	___altoft	;wreg free
 10110  00220E  C02B  F0A5         	movff	?___altoft,___ftadd@f2
 10111  002212  C02C  F0A6         	movff	?___altoft+1,___ftadd@f2+1
 10112  002216  C02D  F0A7         	movff	?___altoft+2,___ftadd@f2+2
 10113  00221A  C0CD  F0A2         	movff	_angleToPulse$1352,___ftadd@f1
 10114  00221E  C0CE  F0A3         	movff	_angleToPulse$1352+1,___ftadd@f1+1
 10115  002222  C0CF  F0A4         	movff	_angleToPulse$1352+2,___ftadd@f1+2
 10116  002226  EC67  F00D         	call	___ftadd	;wreg free
 10117  00222A  C0A2  F0AE         	movff	?___ftadd,___fttol@f1
 10118  00222E  C0A3  F0AF         	movff	?___ftadd+1,___fttol@f1+1
 10119  002232  C0A4  F0B0         	movff	?___ftadd+2,___fttol@f1+2
 10120  002236  EC26  F011         	call	___fttol	;wreg free
 10121  00223A  C0AE  F0BD         	movff	?___fttol,?_angleToPulse
 10122  00223E  C0AF  F0BE         	movff	?___fttol+1,?_angleToPulse+1
 10123  002242  C0B0  F0BF         	movff	?___fttol+2,?_angleToPulse+2
 10124  002246  C0B1  F0C0         	movff	?___fttol+3,?_angleToPulse+3
 10125  00224A  0012               	return	
 10126  00224C                     __end_of_angleToPulse:
 10127                           	opt stack 0
 10128                           tblptru	equ	0xFF8
 10129                           tblptrh	equ	0xFF7
 10130                           tblptrl	equ	0xFF6
 10131                           tablat	equ	0xFF5
 10132                           prodh	equ	0xFF4
 10133                           prodl	equ	0xFF3
 10134                           intcon	equ	0xFF2
 10135                           intcon3	equ	0xFF0
 10136                           postinc0	equ	0xFEE
 10137                           wreg	equ	0xFE8
 10138                           postdec1	equ	0xFE5
 10139                           fsr1l	equ	0xFE1
 10140                           indf2	equ	0xFDF
 10141                           postinc2	equ	0xFDE
 10142                           postdec2	equ	0xFDD
 10143                           fsr2h	equ	0xFDA
 10144                           fsr2l	equ	0xFD9
 10145                           status	equ	0xFD8
 10146                           
 10147 ;; *************** function ___fttol *****************
 10148 ;; Defined at:
 10149 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 10150 ;; Parameters:    Size  Location     Type
 10151 ;;  f1              3   46[BANK0 ] float 
 10152 ;; Auto vars:     Size  Location     Type
 10153 ;;  lval            4   56[BANK0 ] unsigned long 
 10154 ;;  exp1            1   60[BANK0 ] unsigned char 
 10155 ;;  sign1           1   55[BANK0 ] unsigned char 
 10156 ;; Return value:  Size  Location     Type
 10157 ;;                  4   46[BANK0 ] long 
 10158 ;; Registers used:
 10159 ;;		wreg, status,2, status,0
 10160 ;; Tracked objects:
 10161 ;;		On entry : 0/0
 10162 ;;		On exit  : 0/0
 10163 ;;		Unchanged: 0/0
 10164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10165 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10166 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10167 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10168 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10169 ;;Total ram usage:       15 bytes
 10170 ;; Hardware stack levels used:    1
 10171 ;; Hardware stack levels required when called:    3
 10172 ;; This function calls:
 10173 ;;		Nothing
 10174 ;; This function is called by:
 10175 ;;		_sortBattery
 10176 ;;		_angleToPulse
 10177 ;;		_printf
 10178 ;; This function uses a non-reentrant model
 10179 ;;
 10180                           
 10181                           	psect	text37
 10182  00224C                     __ptext37:
 10183                           	opt stack 0
 10184  00224C                     ___fttol:
 10185                           	opt stack 24
 10186                           
 10187                           ;incstack = 0
 10188  00224C  C0B0  F0B2         	movff	___fttol@f1+2,??___fttol
 10189  002250  0100               	movlb	0	; () banked
 10190  002252  6BB3               	clrf	(??___fttol+1)& (0+255),b
 10191  002254  6BB4               	clrf	(??___fttol+2)& (0+255),b
 10192  002256  0100               	movlb	0	; () banked
 10193  002258  35AF               	rlcf	(___fttol@f1+1)& (0+255),w,b
 10194  00225A  0100               	movlb	0	; () banked
 10195  00225C  37B2               	rlcf	??___fttol& (0+255),f,b
 10196  00225E  E301               	bnc	u6221
 10197  002260  81B3               	bsf	(??___fttol+1)& (0+255),0,b
 10198  002262                     u6221:
 10199  002262  0100               	movlb	0	; () banked
 10200  002264  51B2               	movf	??___fttol& (0+255),w,b
 10201  002266  0100               	movlb	0	; () banked
 10202  002268  6FBC               	movwf	___fttol@exp1& (0+255),b
 10203  00226A  0100               	movlb	0	; () banked
 10204  00226C  51BC               	movf	___fttol@exp1& (0+255),w,b
 10205  00226E  A4D8               	btfss	status,2,c
 10206  002270  D00A               	goto	l6148
 10207                           
 10208                           ; BSR set to: 0
 10209  002272  0E00               	movlw	0
 10210  002274  0100               	movlb	0	; () banked
 10211  002276  6FAE               	movwf	?___fttol& (0+255),b
 10212  002278  0E00               	movlw	0
 10213  00227A  6FAF               	movwf	(?___fttol+1)& (0+255),b
 10214  00227C  0E00               	movlw	0
 10215  00227E  6FB0               	movwf	(?___fttol+2)& (0+255),b
 10216  002280  0E00               	movlw	0
 10217  002282  6FB1               	movwf	(?___fttol+3)& (0+255),b
 10218                           
 10219                           ; BSR set to: 0
 10220  002284  0012               	return	
 10221  002286                     l6148:
 10222                           
 10223                           ; BSR set to: 0
 10224  002286  0E17               	movlw	23
 10225  002288  0100               	movlb	0	; () banked
 10226  00228A  6FB2               	movwf	??___fttol& (0+255),b
 10227  00228C  C0AE  F0B3         	movff	___fttol@f1,??___fttol+1
 10228  002290  C0AF  F0B4         	movff	___fttol@f1+1,??___fttol+2
 10229  002294  C0B0  F0B5         	movff	___fttol@f1+2,??___fttol+3
 10230  002298  0100               	movlb	0	; () banked
 10231  00229A  29B2               	incf	??___fttol& (0+255),w,b
 10232  00229C  0100               	movlb	0	; () banked
 10233  00229E  6FB6               	movwf	(??___fttol+4)& (0+255),b
 10234  0022A0  D005               	goto	u6240
 10235  0022A2                     u6245:
 10236  0022A2  0100               	movlb	0	; () banked
 10237  0022A4  90D8               	bcf	status,0,c
 10238  0022A6  33B5               	rrcf	(??___fttol+3)& (0+255),f,b
 10239  0022A8  33B4               	rrcf	(??___fttol+2)& (0+255),f,b
 10240  0022AA  33B3               	rrcf	(??___fttol+1)& (0+255),f,b
 10241  0022AC                     u6240:
 10242  0022AC  0100               	movlb	0	; () banked
 10243  0022AE  2FB6               	decfsz	(??___fttol+4)& (0+255),f,b
 10244  0022B0  D7F8               	goto	u6245
 10245  0022B2  0100               	movlb	0	; () banked
 10246  0022B4  51B3               	movf	(??___fttol+1)& (0+255),w,b
 10247  0022B6  0100               	movlb	0	; () banked
 10248  0022B8  6FB7               	movwf	___fttol@sign1& (0+255),b
 10249                           
 10250                           ; BSR set to: 0
 10251  0022BA  0100               	movlb	0	; () banked
 10252  0022BC  8FAF               	bsf	(___fttol@f1+1)& (0+255),7,b
 10253                           
 10254                           ; BSR set to: 0
 10255  0022BE  0EFF               	movlw	255
 10256  0022C0  0100               	movlb	0	; () banked
 10257  0022C2  17AE               	andwf	___fttol@f1& (0+255),f,b
 10258  0022C4  0EFF               	movlw	255
 10259  0022C6  0100               	movlb	0	; () banked
 10260  0022C8  17AF               	andwf	(___fttol@f1+1)& (0+255),f,b
 10261  0022CA  0E00               	movlw	0
 10262  0022CC  0100               	movlb	0	; () banked
 10263  0022CE  17B0               	andwf	(___fttol@f1+2)& (0+255),f,b
 10264                           
 10265                           ; BSR set to: 0
 10266  0022D0  0100               	movlb	0	; () banked
 10267  0022D2  51AE               	movf	___fttol@f1& (0+255),w,b
 10268  0022D4  0100               	movlb	0	; () banked
 10269  0022D6  6FB8               	movwf	___fttol@lval& (0+255),b
 10270  0022D8  0100               	movlb	0	; () banked
 10271  0022DA  51AF               	movf	(___fttol@f1+1)& (0+255),w,b
 10272  0022DC  0100               	movlb	0	; () banked
 10273  0022DE  6FB9               	movwf	(___fttol@lval+1)& (0+255),b
 10274  0022E0  0100               	movlb	0	; () banked
 10275  0022E2  51B0               	movf	(___fttol@f1+2)& (0+255),w,b
 10276  0022E4  0100               	movlb	0	; () banked
 10277  0022E6  6FBA               	movwf	(___fttol@lval+2)& (0+255),b
 10278  0022E8  0100               	movlb	0	; () banked
 10279  0022EA  6BBB               	clrf	(___fttol@lval+3)& (0+255),b
 10280                           
 10281                           ; BSR set to: 0
 10282  0022EC  0E8E               	movlw	142
 10283  0022EE  0100               	movlb	0	; () banked
 10284  0022F0  5FBC               	subwf	___fttol@exp1& (0+255),f,b
 10285                           
 10286                           ; BSR set to: 0
 10287  0022F2  0100               	movlb	0	; () banked
 10288  0022F4  AFBC               	btfss	___fttol@exp1& (0+255),7,b
 10289  0022F6  D01A               	goto	l6170
 10290                           
 10291                           ; BSR set to: 0
 10292  0022F8  0100               	movlb	0	; () banked
 10293  0022FA  51BC               	movf	___fttol@exp1& (0+255),w,b
 10294  0022FC  0A80               	xorlw	128
 10295  0022FE  0F8F               	addlw	143
 10296  002300  B0D8               	btfsc	status,0,c
 10297  002302  D00A               	goto	l6166
 10298                           
 10299                           ; BSR set to: 0
 10300  002304  0E00               	movlw	0
 10301  002306  0100               	movlb	0	; () banked
 10302  002308  6FAE               	movwf	?___fttol& (0+255),b
 10303  00230A  0E00               	movlw	0
 10304  00230C  6FAF               	movwf	(?___fttol+1)& (0+255),b
 10305  00230E  0E00               	movlw	0
 10306  002310  6FB0               	movwf	(?___fttol+2)& (0+255),b
 10307  002312  0E00               	movlw	0
 10308  002314  6FB1               	movwf	(?___fttol+3)& (0+255),b
 10309                           
 10310                           ; BSR set to: 0
 10311  002316  0012               	return	
 10312  002318                     l6166:
 10313                           
 10314                           ; BSR set to: 0
 10315  002318  0100               	movlb	0	; () banked
 10316  00231A  90D8               	bcf	status,0,c
 10317  00231C  33BB               	rrcf	(___fttol@lval+3)& (0+255),f,b
 10318  00231E  33BA               	rrcf	(___fttol@lval+2)& (0+255),f,b
 10319  002320  33B9               	rrcf	(___fttol@lval+1)& (0+255),f,b
 10320  002322  33B8               	rrcf	___fttol@lval& (0+255),f,b
 10321                           
 10322                           ; BSR set to: 0
 10323  002324  0100               	movlb	0	; () banked
 10324  002326  3FBC               	incfsz	___fttol@exp1& (0+255),f,b
 10325  002328  D7F7               	goto	l6166
 10326                           
 10327                           ; BSR set to: 0
 10328  00232A  D01B               	goto	l6180
 10329  00232C                     l6170:
 10330                           
 10331                           ; BSR set to: 0
 10332  00232C  0E17               	movlw	23
 10333  00232E  0100               	movlb	0	; () banked
 10334  002330  65BC               	cpfsgt	___fttol@exp1& (0+255),b
 10335  002332  D012               	goto	l6178
 10336                           
 10337                           ; BSR set to: 0
 10338  002334  0E00               	movlw	0
 10339  002336  0100               	movlb	0	; () banked
 10340  002338  6FAE               	movwf	?___fttol& (0+255),b
 10341  00233A  0E00               	movlw	0
 10342  00233C  6FAF               	movwf	(?___fttol+1)& (0+255),b
 10343  00233E  0E00               	movlw	0
 10344  002340  6FB0               	movwf	(?___fttol+2)& (0+255),b
 10345  002342  0E00               	movlw	0
 10346  002344  6FB1               	movwf	(?___fttol+3)& (0+255),b
 10347                           
 10348                           ; BSR set to: 0
 10349  002346  0012               	return	
 10350  002348                     l6176:
 10351                           
 10352                           ; BSR set to: 0
 10353  002348  0100               	movlb	0	; () banked
 10354  00234A  90D8               	bcf	status,0,c
 10355  00234C  37B8               	rlcf	___fttol@lval& (0+255),f,b
 10356  00234E  37B9               	rlcf	(___fttol@lval+1)& (0+255),f,b
 10357  002350  37BA               	rlcf	(___fttol@lval+2)& (0+255),f,b
 10358  002352  37BB               	rlcf	(___fttol@lval+3)& (0+255),f,b
 10359  002354  0100               	movlb	0	; () banked
 10360  002356  07BC               	decf	___fttol@exp1& (0+255),f,b
 10361  002358                     l6178:
 10362                           
 10363                           ; BSR set to: 0
 10364  002358  0100               	movlb	0	; () banked
 10365  00235A  51BC               	movf	___fttol@exp1& (0+255),w,b
 10366  00235C  0100               	movlb	0	; () banked
 10367  00235E  A4D8               	btfss	status,2,c
 10368  002360  D7F3               	goto	l6176
 10369  002362                     l6180:
 10370                           
 10371                           ; BSR set to: 0
 10372  002362  0100               	movlb	0	; () banked
 10373  002364  51B7               	movf	___fttol@sign1& (0+255),w,b
 10374  002366  0100               	movlb	0	; () banked
 10375  002368  B4D8               	btfsc	status,2,c
 10376  00236A  D009               	goto	l6184
 10377                           
 10378                           ; BSR set to: 0
 10379  00236C  0100               	movlb	0	; () banked
 10380  00236E  1FBB               	comf	(___fttol@lval+3)& (0+255),f,b
 10381  002370  1FBA               	comf	(___fttol@lval+2)& (0+255),f,b
 10382  002372  1FB9               	comf	(___fttol@lval+1)& (0+255),f,b
 10383  002374  6DB8               	negf	___fttol@lval& (0+255),b
 10384  002376  0E00               	movlw	0
 10385  002378  23B9               	addwfc	(___fttol@lval+1)& (0+255),f,b
 10386  00237A  23BA               	addwfc	(___fttol@lval+2)& (0+255),f,b
 10387  00237C  23BB               	addwfc	(___fttol@lval+3)& (0+255),f,b
 10388  00237E                     l6184:
 10389                           
 10390                           ; BSR set to: 0
 10391  00237E  C0B8  F0AE         	movff	___fttol@lval,?___fttol
 10392  002382  C0B9  F0AF         	movff	___fttol@lval+1,?___fttol+1
 10393  002386  C0BA  F0B0         	movff	___fttol@lval+2,?___fttol+2
 10394  00238A  C0BB  F0B1         	movff	___fttol@lval+3,?___fttol+3
 10395  00238E  0012               	return	
 10396  002390                     __end_of___fttol:
 10397                           	opt stack 0
 10398                           tblptru	equ	0xFF8
 10399                           tblptrh	equ	0xFF7
 10400                           tblptrl	equ	0xFF6
 10401                           tablat	equ	0xFF5
 10402                           prodh	equ	0xFF4
 10403                           prodl	equ	0xFF3
 10404                           intcon	equ	0xFF2
 10405                           intcon3	equ	0xFF0
 10406                           postinc0	equ	0xFEE
 10407                           wreg	equ	0xFE8
 10408                           postdec1	equ	0xFE5
 10409                           fsr1l	equ	0xFE1
 10410                           indf2	equ	0xFDF
 10411                           postinc2	equ	0xFDE
 10412                           postdec2	equ	0xFDD
 10413                           fsr2h	equ	0xFDA
 10414                           fsr2l	equ	0xFD9
 10415                           status	equ	0xFD8
 10416                           
 10417 ;; *************** function ___ftmul *****************
 10418 ;; Defined at:
 10419 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 10420 ;; Parameters:    Size  Location     Type
 10421 ;;  f1              3    9[BANK0 ] float 
 10422 ;;  f2              3   12[BANK0 ] float 
 10423 ;; Auto vars:     Size  Location     Type
 10424 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 10425 ;;  sign            1   23[BANK0 ] unsigned char 
 10426 ;;  cntr            1   22[BANK0 ] unsigned char 
 10427 ;;  exp             1   18[BANK0 ] unsigned char 
 10428 ;; Return value:  Size  Location     Type
 10429 ;;                  3    9[BANK0 ] float 
 10430 ;; Registers used:
 10431 ;;		wreg, status,2, status,0, cstack
 10432 ;; Tracked objects:
 10433 ;;		On entry : 0/0
 10434 ;;		On exit  : 0/0
 10435 ;;		Unchanged: 0/0
 10436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10437 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10438 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10439 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10440 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10441 ;;Total ram usage:       15 bytes
 10442 ;; Hardware stack levels used:    1
 10443 ;; Hardware stack levels required when called:    4
 10444 ;; This function calls:
 10445 ;;		___ftpack
 10446 ;; This function is called by:
 10447 ;;		_sortBattery
 10448 ;;		_angleToPulse
 10449 ;;		_fround
 10450 ;;		_scale
 10451 ;;		_printf
 10452 ;; This function uses a non-reentrant model
 10453 ;;
 10454                           
 10455                           	psect	text38
 10456  001F96                     __ptext38:
 10457                           	opt stack 0
 10458  001F96                     ___ftmul:
 10459                           	opt stack 23
 10460                           
 10461                           ; BSR set to: 0
 10462                           ;incstack = 0
 10463  001F96  C08B  F08F         	movff	___ftmul@f1+2,??___ftmul
 10464  001F9A  0100               	movlb	0	; () banked
 10465  001F9C  6B90               	clrf	(??___ftmul+1)& (0+255),b
 10466  001F9E  6B91               	clrf	(??___ftmul+2)& (0+255),b
 10467  001FA0  0100               	movlb	0	; () banked
 10468  001FA2  358A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 10469  001FA4  0100               	movlb	0	; () banked
 10470  001FA6  378F               	rlcf	??___ftmul& (0+255),f,b
 10471  001FA8  E301               	bnc	u5651
 10472  001FAA  8190               	bsf	(??___ftmul+1)& (0+255),0,b
 10473  001FAC                     u5651:
 10474  001FAC  0100               	movlb	0	; () banked
 10475  001FAE  518F               	movf	??___ftmul& (0+255),w,b
 10476  001FB0  0100               	movlb	0	; () banked
 10477  001FB2  6F92               	movwf	___ftmul@exp& (0+255),b
 10478  001FB4  0100               	movlb	0	; () banked
 10479  001FB6  5192               	movf	___ftmul@exp& (0+255),w,b
 10480  001FB8  A4D8               	btfss	status,2,c
 10481  001FBA  D00A               	goto	l5720
 10482                           
 10483                           ; BSR set to: 0
 10484  001FBC  0E00               	movlw	0
 10485  001FBE  0100               	movlb	0	; () banked
 10486  001FC0  6F89               	movwf	?___ftmul& (0+255),b
 10487  001FC2  0E00               	movlw	0
 10488  001FC4  0100               	movlb	0	; () banked
 10489  001FC6  6F8A               	movwf	(?___ftmul+1)& (0+255),b
 10490  001FC8  0E00               	movlw	0
 10491  001FCA  0100               	movlb	0	; () banked
 10492  001FCC  6F8B               	movwf	(?___ftmul+2)& (0+255),b
 10493                           
 10494                           ; BSR set to: 0
 10495  001FCE  0012               	return	
 10496  001FD0                     l5720:
 10497                           
 10498                           ; BSR set to: 0
 10499  001FD0  C08E  F08F         	movff	___ftmul@f2+2,??___ftmul
 10500  001FD4  0100               	movlb	0	; () banked
 10501  001FD6  6B90               	clrf	(??___ftmul+1)& (0+255),b
 10502  001FD8  6B91               	clrf	(??___ftmul+2)& (0+255),b
 10503  001FDA  0100               	movlb	0	; () banked
 10504  001FDC  358D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 10505  001FDE  0100               	movlb	0	; () banked
 10506  001FE0  378F               	rlcf	??___ftmul& (0+255),f,b
 10507  001FE2  E301               	bnc	u5671
 10508  001FE4  8190               	bsf	(??___ftmul+1)& (0+255),0,b
 10509  001FE6                     u5671:
 10510  001FE6  0100               	movlb	0	; () banked
 10511  001FE8  518F               	movf	??___ftmul& (0+255),w,b
 10512  001FEA  0100               	movlb	0	; () banked
 10513  001FEC  6F97               	movwf	___ftmul@sign& (0+255),b
 10514  001FEE  0100               	movlb	0	; () banked
 10515  001FF0  5197               	movf	___ftmul@sign& (0+255),w,b
 10516  001FF2  A4D8               	btfss	status,2,c
 10517  001FF4  D00A               	goto	l5726
 10518                           
 10519                           ; BSR set to: 0
 10520  001FF6  0E00               	movlw	0
 10521  001FF8  0100               	movlb	0	; () banked
 10522  001FFA  6F89               	movwf	?___ftmul& (0+255),b
 10523  001FFC  0E00               	movlw	0
 10524  001FFE  0100               	movlb	0	; () banked
 10525  002000  6F8A               	movwf	(?___ftmul+1)& (0+255),b
 10526  002002  0E00               	movlw	0
 10527  002004  0100               	movlb	0	; () banked
 10528  002006  6F8B               	movwf	(?___ftmul+2)& (0+255),b
 10529                           
 10530                           ; BSR set to: 0
 10531  002008  0012               	return	
 10532  00200A                     l5726:
 10533                           
 10534                           ; BSR set to: 0
 10535  00200A  0100               	movlb	0	; () banked
 10536  00200C  5197               	movf	___ftmul@sign& (0+255),w,b
 10537  00200E  0F7B               	addlw	123
 10538  002010  0100               	movlb	0	; () banked
 10539  002012  2792               	addwf	___ftmul@exp& (0+255),f,b
 10540                           
 10541                           ; BSR set to: 0
 10542  002014  C08B  F097         	movff	___ftmul@f1+2,___ftmul@sign
 10543  002018  0100               	movlb	0	; () banked
 10544  00201A  518E               	movf	(___ftmul@f2+2)& (0+255),w,b
 10545  00201C  0100               	movlb	0	; () banked
 10546  00201E  1B97               	xorwf	___ftmul@sign& (0+255),f,b
 10547  002020  0E80               	movlw	128
 10548  002022  0100               	movlb	0	; () banked
 10549  002024  1797               	andwf	___ftmul@sign& (0+255),f,b
 10550                           
 10551                           ; BSR set to: 0
 10552  002026  0100               	movlb	0	; () banked
 10553  002028  8F8A               	bsf	(___ftmul@f1+1)& (0+255),7,b
 10554                           
 10555                           ; BSR set to: 0
 10556  00202A  0100               	movlb	0	; () banked
 10557  00202C  8F8D               	bsf	(___ftmul@f2+1)& (0+255),7,b
 10558                           
 10559                           ; BSR set to: 0
 10560  00202E  0EFF               	movlw	255
 10561  002030  0100               	movlb	0	; () banked
 10562  002032  178C               	andwf	___ftmul@f2& (0+255),f,b
 10563  002034  0EFF               	movlw	255
 10564  002036  0100               	movlb	0	; () banked
 10565  002038  178D               	andwf	(___ftmul@f2+1)& (0+255),f,b
 10566  00203A  0E00               	movlw	0
 10567  00203C  0100               	movlb	0	; () banked
 10568  00203E  178E               	andwf	(___ftmul@f2+2)& (0+255),f,b
 10569                           
 10570                           ; BSR set to: 0
 10571  002040  0E00               	movlw	0
 10572  002042  0100               	movlb	0	; () banked
 10573  002044  6F93               	movwf	___ftmul@f3_as_product& (0+255),b
 10574  002046  0E00               	movlw	0
 10575  002048  0100               	movlb	0	; () banked
 10576  00204A  6F94               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 10577  00204C  0E00               	movlw	0
 10578  00204E  0100               	movlb	0	; () banked
 10579  002050  6F95               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 10580                           
 10581                           ; BSR set to: 0
 10582  002052  0E07               	movlw	7
 10583  002054  0100               	movlb	0	; () banked
 10584  002056  6F96               	movwf	___ftmul@cntr& (0+255),b
 10585  002058                     l5740:
 10586                           
 10587                           ; BSR set to: 0
 10588  002058  0100               	movlb	0	; () banked
 10589  00205A  A189               	btfss	___ftmul@f1& (0+255),0,b
 10590  00205C  D00C               	goto	l5744
 10591                           
 10592                           ; BSR set to: 0
 10593  00205E  0100               	movlb	0	; () banked
 10594  002060  518C               	movf	___ftmul@f2& (0+255),w,b
 10595  002062  0100               	movlb	0	; () banked
 10596  002064  2793               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10597  002066  0100               	movlb	0	; () banked
 10598  002068  518D               	movf	(___ftmul@f2+1)& (0+255),w,b
 10599  00206A  0100               	movlb	0	; () banked
 10600  00206C  2394               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10601  00206E  0100               	movlb	0	; () banked
 10602  002070  518E               	movf	(___ftmul@f2+2)& (0+255),w,b
 10603  002072  0100               	movlb	0	; () banked
 10604  002074  2395               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10605  002076                     l5744:
 10606                           
 10607                           ; BSR set to: 0
 10608  002076  0100               	movlb	0	; () banked
 10609  002078  90D8               	bcf	status,0,c
 10610  00207A  338B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10611  00207C  338A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10612  00207E  3389               	rrcf	___ftmul@f1& (0+255),f,b
 10613  002080  0100               	movlb	0	; () banked
 10614  002082  90D8               	bcf	status,0,c
 10615  002084  378C               	rlcf	___ftmul@f2& (0+255),f,b
 10616  002086  378D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 10617  002088  378E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 10618                           
 10619                           ; BSR set to: 0
 10620  00208A  0100               	movlb	0	; () banked
 10621  00208C  2F96               	decfsz	___ftmul@cntr& (0+255),f,b
 10622  00208E  D7E4               	goto	l5740
 10623                           
 10624                           ; BSR set to: 0
 10625                           
 10626                           ; BSR set to: 0
 10627  002090  0E09               	movlw	9
 10628  002092  0100               	movlb	0	; () banked
 10629  002094  6F96               	movwf	___ftmul@cntr& (0+255),b
 10630  002096                     l5750:
 10631                           
 10632                           ; BSR set to: 0
 10633  002096  0100               	movlb	0	; () banked
 10634  002098  A189               	btfss	___ftmul@f1& (0+255),0,b
 10635  00209A  D00C               	goto	l5754
 10636                           
 10637                           ; BSR set to: 0
 10638  00209C  0100               	movlb	0	; () banked
 10639  00209E  518C               	movf	___ftmul@f2& (0+255),w,b
 10640  0020A0  0100               	movlb	0	; () banked
 10641  0020A2  2793               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10642  0020A4  0100               	movlb	0	; () banked
 10643  0020A6  518D               	movf	(___ftmul@f2+1)& (0+255),w,b
 10644  0020A8  0100               	movlb	0	; () banked
 10645  0020AA  2394               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10646  0020AC  0100               	movlb	0	; () banked
 10647  0020AE  518E               	movf	(___ftmul@f2+2)& (0+255),w,b
 10648  0020B0  0100               	movlb	0	; () banked
 10649  0020B2  2395               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10650  0020B4                     l5754:
 10651                           
 10652                           ; BSR set to: 0
 10653  0020B4  0100               	movlb	0	; () banked
 10654  0020B6  90D8               	bcf	status,0,c
 10655  0020B8  338B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10656  0020BA  338A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10657  0020BC  3389               	rrcf	___ftmul@f1& (0+255),f,b
 10658  0020BE  0100               	movlb	0	; () banked
 10659  0020C0  90D8               	bcf	status,0,c
 10660  0020C2  3395               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 10661  0020C4  3394               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 10662  0020C6  3393               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 10663                           
 10664                           ; BSR set to: 0
 10665  0020C8  0100               	movlb	0	; () banked
 10666  0020CA  2F96               	decfsz	___ftmul@cntr& (0+255),f,b
 10667  0020CC  D7E4               	goto	l5750
 10668                           
 10669                           ; BSR set to: 0
 10670                           
 10671                           ; BSR set to: 0
 10672  0020CE  C093  F023         	movff	___ftmul@f3_as_product,___ftpack@arg
 10673  0020D2  C094  F024         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10674  0020D6  C095  F025         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10675  0020DA  C092  F026         	movff	___ftmul@exp,___ftpack@exp
 10676  0020DE  C097  F027         	movff	___ftmul@sign,___ftpack@sign
 10677  0020E2  EC76  F017         	call	___ftpack	;wreg free
 10678  0020E6  C023  F089         	movff	?___ftpack,?___ftmul
 10679  0020EA  C024  F08A         	movff	?___ftpack+1,?___ftmul+1
 10680  0020EE  C025  F08B         	movff	?___ftpack+2,?___ftmul+2
 10681  0020F2  0012               	return	
 10682  0020F4                     __end_of___ftmul:
 10683                           	opt stack 0
 10684                           tblptru	equ	0xFF8
 10685                           tblptrh	equ	0xFF7
 10686                           tblptrl	equ	0xFF6
 10687                           tablat	equ	0xFF5
 10688                           prodh	equ	0xFF4
 10689                           prodl	equ	0xFF3
 10690                           intcon	equ	0xFF2
 10691                           intcon3	equ	0xFF0
 10692                           postinc0	equ	0xFEE
 10693                           wreg	equ	0xFE8
 10694                           postdec1	equ	0xFE5
 10695                           fsr1l	equ	0xFE1
 10696                           indf2	equ	0xFDF
 10697                           postinc2	equ	0xFDE
 10698                           postdec2	equ	0xFDD
 10699                           fsr2h	equ	0xFDA
 10700                           fsr2l	equ	0xFD9
 10701                           status	equ	0xFD8
 10702                           
 10703 ;; *************** function ___ftdiv *****************
 10704 ;; Defined at:
 10705 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 10706 ;; Parameters:    Size  Location     Type
 10707 ;;  f1              3   52[COMRAM] float 
 10708 ;;  f2              3   55[COMRAM] float 
 10709 ;; Auto vars:     Size  Location     Type
 10710 ;;  f3              3    4[BANK0 ] float 
 10711 ;;  sign            1    8[BANK0 ] unsigned char 
 10712 ;;  exp             1    7[BANK0 ] unsigned char 
 10713 ;;  cntr            1    3[BANK0 ] unsigned char 
 10714 ;; Return value:  Size  Location     Type
 10715 ;;                  3   52[COMRAM] float 
 10716 ;; Registers used:
 10717 ;;		wreg, status,2, status,0, cstack
 10718 ;; Tracked objects:
 10719 ;;		On entry : 0/0
 10720 ;;		On exit  : 0/0
 10721 ;;		Unchanged: 0/0
 10722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10723 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10724 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10725 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10726 ;;      Totals:         6       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10727 ;;Total ram usage:       15 bytes
 10728 ;; Hardware stack levels used:    1
 10729 ;; Hardware stack levels required when called:    4
 10730 ;; This function calls:
 10731 ;;		___ftpack
 10732 ;; This function is called by:
 10733 ;;		_sortBattery
 10734 ;;		_angleToPulse
 10735 ;; This function uses a non-reentrant model
 10736 ;;
 10737                           
 10738                           	psect	text39
 10739  0025EA                     __ptext39:
 10740                           	opt stack 0
 10741  0025EA                     ___ftdiv:
 10742                           	opt stack 23
 10743                           
 10744                           ;incstack = 0
 10745  0025EA  C037  F080         	movff	___ftdiv@f1+2,??___ftdiv
 10746  0025EE  0100               	movlb	0	; () banked
 10747  0025F0  6B81               	clrf	(??___ftdiv+1)& (0+255),b
 10748  0025F2  6B82               	clrf	(??___ftdiv+2)& (0+255),b
 10749  0025F4  3436               	rlcf	___ftdiv@f1+1,w,c
 10750  0025F6  0100               	movlb	0	; () banked
 10751  0025F8  3780               	rlcf	??___ftdiv& (0+255),f,b
 10752  0025FA  E301               	bnc	u6111
 10753  0025FC  8181               	bsf	(??___ftdiv+1)& (0+255),0,b
 10754  0025FE                     u6111:
 10755  0025FE  0100               	movlb	0	; () banked
 10756  002600  5180               	movf	??___ftdiv& (0+255),w,b
 10757  002602  0100               	movlb	0	; () banked
 10758  002604  6F87               	movwf	___ftdiv@exp& (0+255),b
 10759  002606  0100               	movlb	0	; () banked
 10760  002608  5187               	movf	___ftdiv@exp& (0+255),w,b
 10761  00260A  A4D8               	btfss	status,2,c
 10762  00260C  D007               	goto	l6060
 10763                           
 10764                           ; BSR set to: 0
 10765  00260E  0E00               	movlw	0
 10766  002610  6E35               	movwf	?___ftdiv,c
 10767  002612  0E00               	movlw	0
 10768  002614  6E36               	movwf	?___ftdiv+1,c
 10769  002616  0E00               	movlw	0
 10770  002618  6E37               	movwf	?___ftdiv+2,c
 10771                           
 10772                           ; BSR set to: 0
 10773  00261A  0012               	return	
 10774  00261C                     l6060:
 10775                           
 10776                           ; BSR set to: 0
 10777  00261C  C03A  F080         	movff	___ftdiv@f2+2,??___ftdiv
 10778  002620  0100               	movlb	0	; () banked
 10779  002622  6B81               	clrf	(??___ftdiv+1)& (0+255),b
 10780  002624  6B82               	clrf	(??___ftdiv+2)& (0+255),b
 10781  002626  3439               	rlcf	___ftdiv@f2+1,w,c
 10782  002628  0100               	movlb	0	; () banked
 10783  00262A  3780               	rlcf	??___ftdiv& (0+255),f,b
 10784  00262C  E301               	bnc	u6131
 10785  00262E  8181               	bsf	(??___ftdiv+1)& (0+255),0,b
 10786  002630                     u6131:
 10787  002630  0100               	movlb	0	; () banked
 10788  002632  5180               	movf	??___ftdiv& (0+255),w,b
 10789  002634  0100               	movlb	0	; () banked
 10790  002636  6F88               	movwf	___ftdiv@sign& (0+255),b
 10791  002638  0100               	movlb	0	; () banked
 10792  00263A  5188               	movf	___ftdiv@sign& (0+255),w,b
 10793  00263C  A4D8               	btfss	status,2,c
 10794  00263E  D007               	goto	l6066
 10795                           
 10796                           ; BSR set to: 0
 10797  002640  0E00               	movlw	0
 10798  002642  6E35               	movwf	?___ftdiv,c
 10799  002644  0E00               	movlw	0
 10800  002646  6E36               	movwf	?___ftdiv+1,c
 10801  002648  0E00               	movlw	0
 10802  00264A  6E37               	movwf	?___ftdiv+2,c
 10803                           
 10804                           ; BSR set to: 0
 10805  00264C  0012               	return	
 10806  00264E                     l6066:
 10807                           
 10808                           ; BSR set to: 0
 10809  00264E  0E00               	movlw	0
 10810  002650  0100               	movlb	0	; () banked
 10811  002652  6F84               	movwf	___ftdiv@f3& (0+255),b
 10812  002654  0E00               	movlw	0
 10813  002656  0100               	movlb	0	; () banked
 10814  002658  6F85               	movwf	(___ftdiv@f3+1)& (0+255),b
 10815  00265A  0E00               	movlw	0
 10816  00265C  0100               	movlb	0	; () banked
 10817  00265E  6F86               	movwf	(___ftdiv@f3+2)& (0+255),b
 10818                           
 10819                           ; BSR set to: 0
 10820  002660  0100               	movlb	0	; () banked
 10821  002662  5188               	movf	___ftdiv@sign& (0+255),w,b
 10822  002664  0F89               	addlw	137
 10823  002666  0100               	movlb	0	; () banked
 10824  002668  5F87               	subwf	___ftdiv@exp& (0+255),f,b
 10825                           
 10826                           ; BSR set to: 0
 10827  00266A  C037  F088         	movff	___ftdiv@f1+2,___ftdiv@sign
 10828                           
 10829                           ; BSR set to: 0
 10830  00266E  503A               	movf	___ftdiv@f2+2,w,c
 10831  002670  0100               	movlb	0	; () banked
 10832  002672  1B88               	xorwf	___ftdiv@sign& (0+255),f,b
 10833                           
 10834                           ; BSR set to: 0
 10835  002674  0E80               	movlw	128
 10836  002676  0100               	movlb	0	; () banked
 10837  002678  1788               	andwf	___ftdiv@sign& (0+255),f,b
 10838                           
 10839                           ; BSR set to: 0
 10840  00267A  8E36               	bsf	___ftdiv@f1+1,7,c
 10841                           
 10842                           ; BSR set to: 0
 10843  00267C  0EFF               	movlw	255
 10844  00267E  1635               	andwf	___ftdiv@f1,f,c
 10845  002680  0EFF               	movlw	255
 10846  002682  1636               	andwf	___ftdiv@f1+1,f,c
 10847  002684  0E00               	movlw	0
 10848  002686  1637               	andwf	___ftdiv@f1+2,f,c
 10849                           
 10850                           ; BSR set to: 0
 10851  002688  8E39               	bsf	___ftdiv@f2+1,7,c
 10852                           
 10853                           ; BSR set to: 0
 10854  00268A  0EFF               	movlw	255
 10855  00268C  1638               	andwf	___ftdiv@f2,f,c
 10856  00268E  0EFF               	movlw	255
 10857  002690  1639               	andwf	___ftdiv@f2+1,f,c
 10858  002692  0E00               	movlw	0
 10859  002694  163A               	andwf	___ftdiv@f2+2,f,c
 10860                           
 10861                           ; BSR set to: 0
 10862  002696  0E18               	movlw	24
 10863  002698  0100               	movlb	0	; () banked
 10864  00269A  6F83               	movwf	___ftdiv@cntr& (0+255),b
 10865  00269C                     l6086:
 10866                           
 10867                           ; BSR set to: 0
 10868  00269C  0100               	movlb	0	; () banked
 10869  00269E  90D8               	bcf	status,0,c
 10870  0026A0  3784               	rlcf	___ftdiv@f3& (0+255),f,b
 10871  0026A2  3785               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 10872  0026A4  3786               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 10873                           
 10874                           ; BSR set to: 0
 10875  0026A6  5038               	movf	___ftdiv@f2,w,c
 10876  0026A8  5C35               	subwf	___ftdiv@f1,w,c
 10877  0026AA  5039               	movf	___ftdiv@f2+1,w,c
 10878  0026AC  5836               	subwfb	___ftdiv@f1+1,w,c
 10879  0026AE  503A               	movf	___ftdiv@f2+2,w,c
 10880  0026B0  5837               	subwfb	___ftdiv@f1+2,w,c
 10881  0026B2  A0D8               	btfss	status,0,c
 10882  0026B4  D008               	goto	l1129
 10883                           
 10884                           ; BSR set to: 0
 10885  0026B6  5038               	movf	___ftdiv@f2,w,c
 10886  0026B8  5E35               	subwf	___ftdiv@f1,f,c
 10887  0026BA  5039               	movf	___ftdiv@f2+1,w,c
 10888  0026BC  5A36               	subwfb	___ftdiv@f1+1,f,c
 10889  0026BE  503A               	movf	___ftdiv@f2+2,w,c
 10890  0026C0  5A37               	subwfb	___ftdiv@f1+2,f,c
 10891                           
 10892                           ; BSR set to: 0
 10893  0026C2  0100               	movlb	0	; () banked
 10894  0026C4  8184               	bsf	___ftdiv@f3& (0+255),0,b
 10895  0026C6                     l1129:
 10896                           
 10897                           ; BSR set to: 0
 10898  0026C6  90D8               	bcf	status,0,c
 10899  0026C8  3635               	rlcf	___ftdiv@f1,f,c
 10900  0026CA  3636               	rlcf	___ftdiv@f1+1,f,c
 10901  0026CC  3637               	rlcf	___ftdiv@f1+2,f,c
 10902                           
 10903                           ; BSR set to: 0
 10904  0026CE  0100               	movlb	0	; () banked
 10905  0026D0  2F83               	decfsz	___ftdiv@cntr& (0+255),f,b
 10906  0026D2  D7E4               	goto	l6086
 10907                           
 10908                           ; BSR set to: 0
 10909                           
 10910                           ; BSR set to: 0
 10911  0026D4  C084  F023         	movff	___ftdiv@f3,___ftpack@arg
 10912  0026D8  C085  F024         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10913  0026DC  C086  F025         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10914  0026E0  C087  F026         	movff	___ftdiv@exp,___ftpack@exp
 10915  0026E4  C088  F027         	movff	___ftdiv@sign,___ftpack@sign
 10916  0026E8  EC76  F017         	call	___ftpack	;wreg free
 10917  0026EC  C023  F035         	movff	?___ftpack,?___ftdiv
 10918  0026F0  C024  F036         	movff	?___ftpack+1,?___ftdiv+1
 10919  0026F4  C025  F037         	movff	?___ftpack+2,?___ftdiv+2
 10920  0026F8  0012               	return	
 10921  0026FA                     __end_of___ftdiv:
 10922                           	opt stack 0
 10923                           tblptru	equ	0xFF8
 10924                           tblptrh	equ	0xFF7
 10925                           tblptrl	equ	0xFF6
 10926                           tablat	equ	0xFF5
 10927                           prodh	equ	0xFF4
 10928                           prodl	equ	0xFF3
 10929                           intcon	equ	0xFF2
 10930                           intcon3	equ	0xFF0
 10931                           postinc0	equ	0xFEE
 10932                           wreg	equ	0xFE8
 10933                           postdec1	equ	0xFE5
 10934                           fsr1l	equ	0xFE1
 10935                           indf2	equ	0xFDF
 10936                           postinc2	equ	0xFDE
 10937                           postdec2	equ	0xFDD
 10938                           fsr2h	equ	0xFDA
 10939                           fsr2l	equ	0xFD9
 10940                           status	equ	0xFD8
 10941                           
 10942 ;; *************** function ___ftadd *****************
 10943 ;; Defined at:
 10944 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 10945 ;; Parameters:    Size  Location     Type
 10946 ;;  f1              3   34[BANK0 ] float 
 10947 ;;  f2              3   37[BANK0 ] float 
 10948 ;; Auto vars:     Size  Location     Type
 10949 ;;  exp1            1   45[BANK0 ] unsigned char 
 10950 ;;  exp2            1   44[BANK0 ] unsigned char 
 10951 ;;  sign            1   43[BANK0 ] unsigned char 
 10952 ;; Return value:  Size  Location     Type
 10953 ;;                  3   34[BANK0 ] float 
 10954 ;; Registers used:
 10955 ;;		wreg, status,2, status,0, cstack
 10956 ;; Tracked objects:
 10957 ;;		On entry : 0/0
 10958 ;;		On exit  : 0/0
 10959 ;;		Unchanged: 0/0
 10960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10961 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10962 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10963 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10964 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10965 ;;Total ram usage:       12 bytes
 10966 ;; Hardware stack levels used:    1
 10967 ;; Hardware stack levels required when called:    4
 10968 ;; This function calls:
 10969 ;;		___ftpack
 10970 ;; This function is called by:
 10971 ;;		_angleToPulse
 10972 ;;		_printf
 10973 ;;		___ftsub
 10974 ;; This function uses a non-reentrant model
 10975 ;;
 10976                           
 10977                           	psect	text40
 10978  001ACE                     __ptext40:
 10979                           	opt stack 0
 10980  001ACE                     ___ftadd:
 10981                           	opt stack 23
 10982                           
 10983                           ;incstack = 0
 10984  001ACE  C0A4  F0A8         	movff	___ftadd@f1+2,??___ftadd
 10985  001AD2  0100               	movlb	0	; () banked
 10986  001AD4  6BA9               	clrf	(??___ftadd+1)& (0+255),b
 10987  001AD6  6BAA               	clrf	(??___ftadd+2)& (0+255),b
 10988  001AD8  0100               	movlb	0	; () banked
 10989  001ADA  35A3               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 10990  001ADC  0100               	movlb	0	; () banked
 10991  001ADE  37A8               	rlcf	??___ftadd& (0+255),f,b
 10992  001AE0  E301               	bnc	u5441
 10993  001AE2  81A9               	bsf	(??___ftadd+1)& (0+255),0,b
 10994  001AE4                     u5441:
 10995  001AE4  0100               	movlb	0	; () banked
 10996  001AE6  51A8               	movf	??___ftadd& (0+255),w,b
 10997  001AE8  0100               	movlb	0	; () banked
 10998  001AEA  6FAD               	movwf	___ftadd@exp1& (0+255),b
 10999  001AEC  C0A7  F0A8         	movff	___ftadd@f2+2,??___ftadd
 11000  001AF0  0100               	movlb	0	; () banked
 11001  001AF2  6BA9               	clrf	(??___ftadd+1)& (0+255),b
 11002  001AF4  6BAA               	clrf	(??___ftadd+2)& (0+255),b
 11003  001AF6  0100               	movlb	0	; () banked
 11004  001AF8  35A6               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 11005  001AFA  0100               	movlb	0	; () banked
 11006  001AFC  37A8               	rlcf	??___ftadd& (0+255),f,b
 11007  001AFE  E301               	bnc	u5451
 11008  001B00  81A9               	bsf	(??___ftadd+1)& (0+255),0,b
 11009  001B02                     u5451:
 11010  001B02  0100               	movlb	0	; () banked
 11011  001B04  51A8               	movf	??___ftadd& (0+255),w,b
 11012  001B06  0100               	movlb	0	; () banked
 11013  001B08  6FAC               	movwf	___ftadd@exp2& (0+255),b
 11014                           
 11015                           ; BSR set to: 0
 11016  001B0A  0100               	movlb	0	; () banked
 11017  001B0C  51AD               	movf	___ftadd@exp1& (0+255),w,b
 11018  001B0E  0100               	movlb	0	; () banked
 11019  001B10  B4D8               	btfsc	status,2,c
 11020  001B12  D011               	goto	l1094
 11021                           
 11022                           ; BSR set to: 0
 11023  001B14  0100               	movlb	0	; () banked
 11024  001B16  51AC               	movf	___ftadd@exp2& (0+255),w,b
 11025  001B18  0100               	movlb	0	; () banked
 11026  001B1A  5DAD               	subwf	___ftadd@exp1& (0+255),w,b
 11027  001B1C  B0D8               	btfsc	status,0,c
 11028  001B1E  D012               	goto	l5652
 11029                           
 11030                           ; BSR set to: 0
 11031  001B20  0100               	movlb	0	; () banked
 11032  001B22  51AD               	movf	___ftadd@exp1& (0+255),w,b
 11033  001B24  0800               	sublw	0
 11034  001B26  0100               	movlb	0	; () banked
 11035  001B28  25AC               	addwf	___ftadd@exp2& (0+255),w,b
 11036  001B2A  0100               	movlb	0	; () banked
 11037  001B2C  6FA8               	movwf	??___ftadd& (0+255),b
 11038  001B2E  0E18               	movlw	24
 11039  001B30  0100               	movlb	0	; () banked
 11040  001B32  65A8               	cpfsgt	??___ftadd& (0+255),b
 11041  001B34  D007               	goto	l5652
 11042  001B36                     l1094:
 11043                           
 11044                           ; BSR set to: 0
 11045  001B36  C0A5  F0A2         	movff	___ftadd@f2,?___ftadd
 11046  001B3A  C0A6  F0A3         	movff	___ftadd@f2+1,?___ftadd+1
 11047  001B3E  C0A7  F0A4         	movff	___ftadd@f2+2,?___ftadd+2
 11048  001B42  0012               	return	
 11049  001B44                     l5652:
 11050                           
 11051                           ; BSR set to: 0
 11052  001B44  0100               	movlb	0	; () banked
 11053  001B46  51AC               	movf	___ftadd@exp2& (0+255),w,b
 11054  001B48  0100               	movlb	0	; () banked
 11055  001B4A  B4D8               	btfsc	status,2,c
 11056  001B4C  D011               	goto	l1098
 11057                           
 11058                           ; BSR set to: 0
 11059  001B4E  0100               	movlb	0	; () banked
 11060  001B50  51AD               	movf	___ftadd@exp1& (0+255),w,b
 11061  001B52  0100               	movlb	0	; () banked
 11062  001B54  5DAC               	subwf	___ftadd@exp2& (0+255),w,b
 11063  001B56  B0D8               	btfsc	status,0,c
 11064  001B58  D012               	goto	l5658
 11065                           
 11066                           ; BSR set to: 0
 11067  001B5A  0100               	movlb	0	; () banked
 11068  001B5C  51AC               	movf	___ftadd@exp2& (0+255),w,b
 11069  001B5E  0800               	sublw	0
 11070  001B60  0100               	movlb	0	; () banked
 11071  001B62  25AD               	addwf	___ftadd@exp1& (0+255),w,b
 11072  001B64  0100               	movlb	0	; () banked
 11073  001B66  6FA8               	movwf	??___ftadd& (0+255),b
 11074  001B68  0E18               	movlw	24
 11075  001B6A  0100               	movlb	0	; () banked
 11076  001B6C  65A8               	cpfsgt	??___ftadd& (0+255),b
 11077  001B6E  D007               	goto	l5658
 11078  001B70                     l1098:
 11079                           
 11080                           ; BSR set to: 0
 11081  001B70  C0A2  F0A2         	movff	___ftadd@f1,?___ftadd
 11082  001B74  C0A3  F0A3         	movff	___ftadd@f1+1,?___ftadd+1
 11083  001B78  C0A4  F0A4         	movff	___ftadd@f1+2,?___ftadd+2
 11084  001B7C  0012               	return	
 11085  001B7E                     l5658:
 11086                           
 11087                           ; BSR set to: 0
 11088  001B7E  0E06               	movlw	6
 11089  001B80  0100               	movlb	0	; () banked
 11090  001B82  6FAB               	movwf	___ftadd@sign& (0+255),b
 11091                           
 11092                           ; BSR set to: 0
 11093  001B84  0100               	movlb	0	; () banked
 11094  001B86  AFA4               	btfss	(___ftadd@f1+2)& (0+255),7,b
 11095  001B88  D002               	goto	l5664
 11096                           
 11097                           ; BSR set to: 0
 11098  001B8A  0100               	movlb	0	; () banked
 11099  001B8C  8FAB               	bsf	___ftadd@sign& (0+255),7,b
 11100  001B8E                     l5664:
 11101                           
 11102                           ; BSR set to: 0
 11103  001B8E  0100               	movlb	0	; () banked
 11104  001B90  AFA7               	btfss	(___ftadd@f2+2)& (0+255),7,b
 11105  001B92  D002               	goto	l1100
 11106                           
 11107                           ; BSR set to: 0
 11108  001B94  0100               	movlb	0	; () banked
 11109  001B96  8DAB               	bsf	___ftadd@sign& (0+255),6,b
 11110  001B98                     l1100:
 11111                           
 11112                           ; BSR set to: 0
 11113  001B98  0100               	movlb	0	; () banked
 11114  001B9A  8FA3               	bsf	(___ftadd@f1+1)& (0+255),7,b
 11115                           
 11116                           ; BSR set to: 0
 11117  001B9C  0EFF               	movlw	255
 11118  001B9E  0100               	movlb	0	; () banked
 11119  001BA0  17A2               	andwf	___ftadd@f1& (0+255),f,b
 11120  001BA2  0EFF               	movlw	255
 11121  001BA4  0100               	movlb	0	; () banked
 11122  001BA6  17A3               	andwf	(___ftadd@f1+1)& (0+255),f,b
 11123  001BA8  0E00               	movlw	0
 11124  001BAA  0100               	movlb	0	; () banked
 11125  001BAC  17A4               	andwf	(___ftadd@f1+2)& (0+255),f,b
 11126  001BAE  0100               	movlb	0	; () banked
 11127  001BB0  8FA6               	bsf	(___ftadd@f2+1)& (0+255),7,b
 11128                           
 11129                           ; BSR set to: 0
 11130  001BB2  0EFF               	movlw	255
 11131  001BB4  0100               	movlb	0	; () banked
 11132  001BB6  17A5               	andwf	___ftadd@f2& (0+255),f,b
 11133  001BB8  0EFF               	movlw	255
 11134  001BBA  0100               	movlb	0	; () banked
 11135  001BBC  17A6               	andwf	(___ftadd@f2+1)& (0+255),f,b
 11136  001BBE  0E00               	movlw	0
 11137  001BC0  0100               	movlb	0	; () banked
 11138  001BC2  17A7               	andwf	(___ftadd@f2+2)& (0+255),f,b
 11139                           
 11140                           ; BSR set to: 0
 11141  001BC4  0100               	movlb	0	; () banked
 11142  001BC6  51AC               	movf	___ftadd@exp2& (0+255),w,b
 11143  001BC8  0100               	movlb	0	; () banked
 11144  001BCA  5DAD               	subwf	___ftadd@exp1& (0+255),w,b
 11145  001BCC  B0D8               	btfsc	status,0,c
 11146  001BCE  D025               	goto	l5684
 11147  001BD0                     l5674:
 11148                           
 11149                           ; BSR set to: 0
 11150  001BD0  0100               	movlb	0	; () banked
 11151  001BD2  90D8               	bcf	status,0,c
 11152  001BD4  37A5               	rlcf	___ftadd@f2& (0+255),f,b
 11153  001BD6  37A6               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 11154  001BD8  37A7               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 11155  001BDA  0100               	movlb	0	; () banked
 11156  001BDC  07AC               	decf	___ftadd@exp2& (0+255),f,b
 11157                           
 11158                           ; BSR set to: 0
 11159  001BDE  0100               	movlb	0	; () banked
 11160  001BE0  51AD               	movf	___ftadd@exp1& (0+255),w,b
 11161  001BE2  0100               	movlb	0	; () banked
 11162  001BE4  19AC               	xorwf	___ftadd@exp2& (0+255),w,b
 11163  001BE6  B4D8               	btfsc	status,2,c
 11164  001BE8  D011               	goto	l5682
 11165                           
 11166                           ; BSR set to: 0
 11167  001BEA  0100               	movlb	0	; () banked
 11168  001BEC  07AB               	decf	___ftadd@sign& (0+255),f,b
 11169  001BEE  C0AB  F0A8         	movff	___ftadd@sign,??___ftadd
 11170  001BF2  0E07               	movlw	7
 11171  001BF4  0100               	movlb	0	; () banked
 11172  001BF6  17A8               	andwf	??___ftadd& (0+255),f,b
 11173  001BF8  B4D8               	btfsc	status,2,c
 11174  001BFA  D008               	goto	l5682
 11175  001BFC  D7E9               	goto	l5674
 11176  001BFE                     l5680:
 11177                           
 11178                           ; BSR set to: 0
 11179  001BFE  0100               	movlb	0	; () banked
 11180  001C00  90D8               	bcf	status,0,c
 11181  001C02  33A4               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 11182  001C04  33A3               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 11183  001C06  33A2               	rrcf	___ftadd@f1& (0+255),f,b
 11184  001C08  0100               	movlb	0	; () banked
 11185  001C0A  2BAD               	incf	___ftadd@exp1& (0+255),f,b
 11186  001C0C                     l5682:
 11187                           
 11188                           ; BSR set to: 0
 11189  001C0C  0100               	movlb	0	; () banked
 11190  001C0E  51AC               	movf	___ftadd@exp2& (0+255),w,b
 11191  001C10  0100               	movlb	0	; () banked
 11192  001C12  19AD               	xorwf	___ftadd@exp1& (0+255),w,b
 11193  001C14  B4D8               	btfsc	status,2,c
 11194  001C16  D02B               	goto	l1109
 11195  001C18  D7F2               	goto	l5680
 11196  001C1A                     l5684:
 11197                           
 11198                           ; BSR set to: 0
 11199  001C1A  0100               	movlb	0	; () banked
 11200  001C1C  51AD               	movf	___ftadd@exp1& (0+255),w,b
 11201  001C1E  0100               	movlb	0	; () banked
 11202  001C20  5DAC               	subwf	___ftadd@exp2& (0+255),w,b
 11203  001C22  B0D8               	btfsc	status,0,c
 11204  001C24  D024               	goto	l1109
 11205  001C26                     l5686:
 11206                           
 11207                           ; BSR set to: 0
 11208  001C26  0100               	movlb	0	; () banked
 11209  001C28  90D8               	bcf	status,0,c
 11210  001C2A  37A2               	rlcf	___ftadd@f1& (0+255),f,b
 11211  001C2C  37A3               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 11212  001C2E  37A4               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 11213  001C30  0100               	movlb	0	; () banked
 11214  001C32  07AD               	decf	___ftadd@exp1& (0+255),f,b
 11215                           
 11216                           ; BSR set to: 0
 11217  001C34  0100               	movlb	0	; () banked
 11218  001C36  51AD               	movf	___ftadd@exp1& (0+255),w,b
 11219  001C38  0100               	movlb	0	; () banked
 11220  001C3A  19AC               	xorwf	___ftadd@exp2& (0+255),w,b
 11221  001C3C  B4D8               	btfsc	status,2,c
 11222  001C3E  D011               	goto	l5694
 11223                           
 11224                           ; BSR set to: 0
 11225  001C40  0100               	movlb	0	; () banked
 11226  001C42  07AB               	decf	___ftadd@sign& (0+255),f,b
 11227  001C44  C0AB  F0A8         	movff	___ftadd@sign,??___ftadd
 11228  001C48  0E07               	movlw	7
 11229  001C4A  0100               	movlb	0	; () banked
 11230  001C4C  17A8               	andwf	??___ftadd& (0+255),f,b
 11231  001C4E  B4D8               	btfsc	status,2,c
 11232  001C50  D008               	goto	l5694
 11233  001C52  D7E9               	goto	l5686
 11234  001C54                     l5692:
 11235                           
 11236                           ; BSR set to: 0
 11237  001C54  0100               	movlb	0	; () banked
 11238  001C56  90D8               	bcf	status,0,c
 11239  001C58  33A7               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 11240  001C5A  33A6               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 11241  001C5C  33A5               	rrcf	___ftadd@f2& (0+255),f,b
 11242  001C5E  0100               	movlb	0	; () banked
 11243  001C60  2BAC               	incf	___ftadd@exp2& (0+255),f,b
 11244  001C62                     l5694:
 11245                           
 11246                           ; BSR set to: 0
 11247  001C62  0100               	movlb	0	; () banked
 11248  001C64  51AC               	movf	___ftadd@exp2& (0+255),w,b
 11249  001C66  0100               	movlb	0	; () banked
 11250  001C68  19AD               	xorwf	___ftadd@exp1& (0+255),w,b
 11251  001C6A  A4D8               	btfss	status,2,c
 11252  001C6C  D7F3               	goto	l5692
 11253  001C6E                     l1109:
 11254                           
 11255                           ; BSR set to: 0
 11256  001C6E  0100               	movlb	0	; () banked
 11257  001C70  AFAB               	btfss	___ftadd@sign& (0+255),7,b
 11258  001C72  D012               	goto	l1118
 11259                           
 11260                           ; BSR set to: 0
 11261  001C74  0EFF               	movlw	255
 11262  001C76  0100               	movlb	0	; () banked
 11263  001C78  1BA2               	xorwf	___ftadd@f1& (0+255),f,b
 11264  001C7A  0EFF               	movlw	255
 11265  001C7C  0100               	movlb	0	; () banked
 11266  001C7E  1BA3               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 11267  001C80  0EFF               	movlw	255
 11268  001C82  0100               	movlb	0	; () banked
 11269  001C84  1BA4               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 11270  001C86  0E01               	movlw	1
 11271  001C88  0100               	movlb	0	; () banked
 11272  001C8A  27A2               	addwf	___ftadd@f1& (0+255),f,b
 11273  001C8C  0E00               	movlw	0
 11274  001C8E  0100               	movlb	0	; () banked
 11275  001C90  23A3               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 11276  001C92  0E00               	movlw	0
 11277  001C94  0100               	movlb	0	; () banked
 11278  001C96  23A4               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 11279  001C98                     l1118:
 11280                           
 11281                           ; BSR set to: 0
 11282  001C98  0100               	movlb	0	; () banked
 11283  001C9A  ADAB               	btfss	___ftadd@sign& (0+255),6,b
 11284  001C9C  D012               	goto	l5700
 11285                           
 11286                           ; BSR set to: 0
 11287  001C9E  0EFF               	movlw	255
 11288  001CA0  0100               	movlb	0	; () banked
 11289  001CA2  1BA5               	xorwf	___ftadd@f2& (0+255),f,b
 11290  001CA4  0EFF               	movlw	255
 11291  001CA6  0100               	movlb	0	; () banked
 11292  001CA8  1BA6               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11293  001CAA  0EFF               	movlw	255
 11294  001CAC  0100               	movlb	0	; () banked
 11295  001CAE  1BA7               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11296  001CB0  0E01               	movlw	1
 11297  001CB2  0100               	movlb	0	; () banked
 11298  001CB4  27A5               	addwf	___ftadd@f2& (0+255),f,b
 11299  001CB6  0E00               	movlw	0
 11300  001CB8  0100               	movlb	0	; () banked
 11301  001CBA  23A6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11302  001CBC  0E00               	movlw	0
 11303  001CBE  0100               	movlb	0	; () banked
 11304  001CC0  23A7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11305  001CC2                     l5700:
 11306                           
 11307                           ; BSR set to: 0
 11308  001CC2  0E00               	movlw	0
 11309  001CC4  0100               	movlb	0	; () banked
 11310  001CC6  6FAB               	movwf	___ftadd@sign& (0+255),b
 11311                           
 11312                           ; BSR set to: 0
 11313  001CC8  0100               	movlb	0	; () banked
 11314  001CCA  51A2               	movf	___ftadd@f1& (0+255),w,b
 11315  001CCC  0100               	movlb	0	; () banked
 11316  001CCE  27A5               	addwf	___ftadd@f2& (0+255),f,b
 11317  001CD0  0100               	movlb	0	; () banked
 11318  001CD2  51A3               	movf	(___ftadd@f1+1)& (0+255),w,b
 11319  001CD4  0100               	movlb	0	; () banked
 11320  001CD6  23A6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11321  001CD8  0100               	movlb	0	; () banked
 11322  001CDA  51A4               	movf	(___ftadd@f1+2)& (0+255),w,b
 11323  001CDC  0100               	movlb	0	; () banked
 11324  001CDE  23A7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11325                           
 11326                           ; BSR set to: 0
 11327  001CE0  0100               	movlb	0	; () banked
 11328  001CE2  AFA7               	btfss	(___ftadd@f2+2)& (0+255),7,b
 11329  001CE4  D015               	goto	l5710
 11330                           
 11331                           ; BSR set to: 0
 11332  001CE6  0EFF               	movlw	255
 11333  001CE8  0100               	movlb	0	; () banked
 11334  001CEA  1BA5               	xorwf	___ftadd@f2& (0+255),f,b
 11335  001CEC  0EFF               	movlw	255
 11336  001CEE  0100               	movlb	0	; () banked
 11337  001CF0  1BA6               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11338  001CF2  0EFF               	movlw	255
 11339  001CF4  0100               	movlb	0	; () banked
 11340  001CF6  1BA7               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11341  001CF8  0E01               	movlw	1
 11342  001CFA  0100               	movlb	0	; () banked
 11343  001CFC  27A5               	addwf	___ftadd@f2& (0+255),f,b
 11344  001CFE  0E00               	movlw	0
 11345  001D00  0100               	movlb	0	; () banked
 11346  001D02  23A6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11347  001D04  0E00               	movlw	0
 11348  001D06  0100               	movlb	0	; () banked
 11349  001D08  23A7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11350                           
 11351                           ; BSR set to: 0
 11352  001D0A  0E01               	movlw	1
 11353  001D0C  0100               	movlb	0	; () banked
 11354  001D0E  6FAB               	movwf	___ftadd@sign& (0+255),b
 11355  001D10                     l5710:
 11356                           
 11357                           ; BSR set to: 0
 11358  001D10  C0A5  F023         	movff	___ftadd@f2,___ftpack@arg
 11359  001D14  C0A6  F024         	movff	___ftadd@f2+1,___ftpack@arg+1
 11360  001D18  C0A7  F025         	movff	___ftadd@f2+2,___ftpack@arg+2
 11361  001D1C  C0AD  F026         	movff	___ftadd@exp1,___ftpack@exp
 11362  001D20  C0AB  F027         	movff	___ftadd@sign,___ftpack@sign
 11363  001D24  EC76  F017         	call	___ftpack	;wreg free
 11364  001D28  C023  F0A2         	movff	?___ftpack,?___ftadd
 11365  001D2C  C024  F0A3         	movff	?___ftpack+1,?___ftadd+1
 11366  001D30  C025  F0A4         	movff	?___ftpack+2,?___ftadd+2
 11367  001D34  0012               	return	
 11368  001D36                     __end_of___ftadd:
 11369                           	opt stack 0
 11370                           tblptru	equ	0xFF8
 11371                           tblptrh	equ	0xFF7
 11372                           tblptrl	equ	0xFF6
 11373                           tablat	equ	0xFF5
 11374                           prodh	equ	0xFF4
 11375                           prodl	equ	0xFF3
 11376                           intcon	equ	0xFF2
 11377                           intcon3	equ	0xFF0
 11378                           postinc0	equ	0xFEE
 11379                           wreg	equ	0xFE8
 11380                           postdec1	equ	0xFE5
 11381                           fsr1l	equ	0xFE1
 11382                           indf2	equ	0xFDF
 11383                           postinc2	equ	0xFDE
 11384                           postdec2	equ	0xFDD
 11385                           fsr2h	equ	0xFDA
 11386                           fsr2l	equ	0xFD9
 11387                           status	equ	0xFD8
 11388                           
 11389 ;; *************** function ___awtoft *****************
 11390 ;; Defined at:
 11391 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 11392 ;; Parameters:    Size  Location     Type
 11393 ;;  c               2   42[COMRAM] int 
 11394 ;; Auto vars:     Size  Location     Type
 11395 ;;  sign            1   45[COMRAM] unsigned char 
 11396 ;; Return value:  Size  Location     Type
 11397 ;;                  3   42[COMRAM] float 
 11398 ;; Registers used:
 11399 ;;		wreg, status,2, status,0, cstack
 11400 ;; Tracked objects:
 11401 ;;		On entry : 0/0
 11402 ;;		On exit  : 0/0
 11403 ;;		Unchanged: 0/0
 11404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11405 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11406 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11408 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11409 ;;Total ram usage:        4 bytes
 11410 ;; Hardware stack levels used:    1
 11411 ;; Hardware stack levels required when called:    4
 11412 ;; This function calls:
 11413 ;;		___ftpack
 11414 ;; This function is called by:
 11415 ;;		_sortBattery
 11416 ;;		_angleToPulse
 11417 ;;		_testFrequency
 11418 ;; This function uses a non-reentrant model
 11419 ;;
 11420                           
 11421                           	psect	text41
 11422  0036D4                     __ptext41:
 11423                           	opt stack 0
 11424  0036D4                     ___awtoft:
 11425                           	opt stack 23
 11426                           
 11427                           ;incstack = 0
 11428  0036D4  0E00               	movlw	0
 11429  0036D6  6E2E               	movwf	___awtoft@sign,c
 11430  0036D8  AE2C               	btfss	___awtoft@c+1,7,c
 11431  0036DA  D006               	goto	l6116
 11432  0036DC  6C2B               	negf	___awtoft@c,c
 11433  0036DE  1E2C               	comf	___awtoft@c+1,f,c
 11434  0036E0  B0D8               	btfsc	status,0,c
 11435  0036E2  2A2C               	incf	___awtoft@c+1,f,c
 11436  0036E4  0E01               	movlw	1
 11437  0036E6  6E2E               	movwf	___awtoft@sign,c
 11438  0036E8                     l6116:
 11439  0036E8  C02B  F023         	movff	___awtoft@c,___ftpack@arg
 11440  0036EC  C02C  F024         	movff	___awtoft@c+1,___ftpack@arg+1
 11441  0036F0  6A25               	clrf	___ftpack@arg+2,c
 11442  0036F2  0E8E               	movlw	142
 11443  0036F4  6E26               	movwf	___ftpack@exp,c
 11444  0036F6  C02E  F027         	movff	___awtoft@sign,___ftpack@sign
 11445  0036FA  EC76  F017         	call	___ftpack	;wreg free
 11446  0036FE  C023  F02B         	movff	?___ftpack,?___awtoft
 11447  003702  C024  F02C         	movff	?___ftpack+1,?___awtoft+1
 11448  003706  C025  F02D         	movff	?___ftpack+2,?___awtoft+2
 11449  00370A  0012               	return	
 11450  00370C                     __end_of___awtoft:
 11451                           	opt stack 0
 11452                           tblptru	equ	0xFF8
 11453                           tblptrh	equ	0xFF7
 11454                           tblptrl	equ	0xFF6
 11455                           tablat	equ	0xFF5
 11456                           prodh	equ	0xFF4
 11457                           prodl	equ	0xFF3
 11458                           intcon	equ	0xFF2
 11459                           intcon3	equ	0xFF0
 11460                           postinc0	equ	0xFEE
 11461                           wreg	equ	0xFE8
 11462                           postdec1	equ	0xFE5
 11463                           fsr1l	equ	0xFE1
 11464                           indf2	equ	0xFDF
 11465                           postinc2	equ	0xFDE
 11466                           postdec2	equ	0xFDD
 11467                           fsr2h	equ	0xFDA
 11468                           fsr2l	equ	0xFD9
 11469                           status	equ	0xFD8
 11470                           
 11471 ;; *************** function ___altoft *****************
 11472 ;; Defined at:
 11473 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 11474 ;; Parameters:    Size  Location     Type
 11475 ;;  c               4   42[COMRAM] long 
 11476 ;; Auto vars:     Size  Location     Type
 11477 ;;  sign            1   51[COMRAM] unsigned char 
 11478 ;;  exp             1   50[COMRAM] unsigned char 
 11479 ;; Return value:  Size  Location     Type
 11480 ;;                  3   42[COMRAM] float 
 11481 ;; Registers used:
 11482 ;;		wreg, status,2, status,0, cstack
 11483 ;; Tracked objects:
 11484 ;;		On entry : 0/0
 11485 ;;		On exit  : 0/0
 11486 ;;		Unchanged: 0/0
 11487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11488 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11489 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11490 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11491 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11492 ;;Total ram usage:       10 bytes
 11493 ;; Hardware stack levels used:    1
 11494 ;; Hardware stack levels required when called:    4
 11495 ;; This function calls:
 11496 ;;		___ftpack
 11497 ;; This function is called by:
 11498 ;;		_sortBattery
 11499 ;;		_angleToPulse
 11500 ;; This function uses a non-reentrant model
 11501 ;;
 11502                           
 11503                           	psect	text42
 11504  003268                     __ptext42:
 11505                           	opt stack 0
 11506  003268                     ___altoft:
 11507                           	opt stack 23
 11508                           
 11509                           ;incstack = 0
 11510  003268  0E00               	movlw	0
 11511  00326A  6E34               	movwf	___altoft@sign,c
 11512  00326C  0E8E               	movlw	142
 11513  00326E  6E33               	movwf	___altoft@exp,c
 11514  003270  AE2E               	btfss	___altoft@c+3,7,c
 11515  003272  D011               	goto	l6048
 11516  003274  1E2E               	comf	___altoft@c+3,f,c
 11517  003276  1E2D               	comf	___altoft@c+2,f,c
 11518  003278  1E2C               	comf	___altoft@c+1,f,c
 11519  00327A  6C2B               	negf	___altoft@c,c
 11520  00327C  0E00               	movlw	0
 11521  00327E  222C               	addwfc	___altoft@c+1,f,c
 11522  003280  222D               	addwfc	___altoft@c+2,f,c
 11523  003282  222E               	addwfc	___altoft@c+3,f,c
 11524  003284  0E01               	movlw	1
 11525  003286  6E34               	movwf	___altoft@sign,c
 11526  003288  D006               	goto	l6048
 11527  00328A                     l6046:
 11528  00328A  90D8               	bcf	status,0,c
 11529  00328C  322E               	rrcf	___altoft@c+3,f,c
 11530  00328E  322D               	rrcf	___altoft@c+2,f,c
 11531  003290  322C               	rrcf	___altoft@c+1,f,c
 11532  003292  322B               	rrcf	___altoft@c,f,c
 11533  003294  2A33               	incf	___altoft@exp,f,c
 11534  003296                     l6048:
 11535  003296  0E00               	movlw	0
 11536  003298  142B               	andwf	___altoft@c,w,c
 11537  00329A  6E2F               	movwf	??___altoft& (0+255),c
 11538  00329C  0E00               	movlw	0
 11539  00329E  142C               	andwf	___altoft@c+1,w,c
 11540  0032A0  6E30               	movwf	(??___altoft+1)& (0+255),c
 11541  0032A2  0E00               	movlw	0
 11542  0032A4  142D               	andwf	___altoft@c+2,w,c
 11543  0032A6  6E31               	movwf	(??___altoft+2)& (0+255),c
 11544  0032A8  0EFF               	movlw	255
 11545  0032AA  142E               	andwf	___altoft@c+3,w,c
 11546  0032AC  6E32               	movwf	(??___altoft+3)& (0+255),c
 11547  0032AE  502F               	movf	??___altoft,w,c
 11548  0032B0  1030               	iorwf	??___altoft+1,w,c
 11549  0032B2  1031               	iorwf	??___altoft+2,w,c
 11550  0032B4  1032               	iorwf	??___altoft+3,w,c
 11551  0032B6  A4D8               	btfss	status,2,c
 11552  0032B8  D7E8               	goto	l6046
 11553  0032BA  C02B  F023         	movff	___altoft@c,___ftpack@arg
 11554  0032BE  C02C  F024         	movff	___altoft@c+1,___ftpack@arg+1
 11555  0032C2  C02D  F025         	movff	___altoft@c+2,___ftpack@arg+2
 11556  0032C6  C033  F026         	movff	___altoft@exp,___ftpack@exp
 11557  0032CA  C034  F027         	movff	___altoft@sign,___ftpack@sign
 11558  0032CE  EC76  F017         	call	___ftpack	;wreg free
 11559  0032D2  C023  F02B         	movff	?___ftpack,?___altoft
 11560  0032D6  C024  F02C         	movff	?___ftpack+1,?___altoft+1
 11561  0032DA  C025  F02D         	movff	?___ftpack+2,?___altoft+2
 11562  0032DE  0012               	return	
 11563  0032E0                     __end_of___altoft:
 11564                           	opt stack 0
 11565                           tblptru	equ	0xFF8
 11566                           tblptrh	equ	0xFF7
 11567                           tblptrl	equ	0xFF6
 11568                           tablat	equ	0xFF5
 11569                           prodh	equ	0xFF4
 11570                           prodl	equ	0xFF3
 11571                           intcon	equ	0xFF2
 11572                           intcon3	equ	0xFF0
 11573                           postinc0	equ	0xFEE
 11574                           wreg	equ	0xFE8
 11575                           postdec1	equ	0xFE5
 11576                           fsr1l	equ	0xFE1
 11577                           indf2	equ	0xFDF
 11578                           postinc2	equ	0xFDE
 11579                           postdec2	equ	0xFDD
 11580                           fsr2h	equ	0xFDA
 11581                           fsr2l	equ	0xFD9
 11582                           status	equ	0xFD8
 11583                           
 11584 ;; *************** function ___ftpack *****************
 11585 ;; Defined at:
 11586 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 11587 ;; Parameters:    Size  Location     Type
 11588 ;;  arg             3   34[COMRAM] unsigned um
 11589 ;;  exp             1   37[COMRAM] unsigned char 
 11590 ;;  sign            1   38[COMRAM] unsigned char 
 11591 ;; Auto vars:     Size  Location     Type
 11592 ;;		None
 11593 ;; Return value:  Size  Location     Type
 11594 ;;                  3   34[COMRAM] float 
 11595 ;; Registers used:
 11596 ;;		wreg, status,2, status,0
 11597 ;; Tracked objects:
 11598 ;;		On entry : 0/0
 11599 ;;		On exit  : 0/0
 11600 ;;		Unchanged: 0/0
 11601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11602 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11604 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11605 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11606 ;;Total ram usage:        8 bytes
 11607 ;; Hardware stack levels used:    1
 11608 ;; Hardware stack levels required when called:    3
 11609 ;; This function calls:
 11610 ;;		Nothing
 11611 ;; This function is called by:
 11612 ;;		___altoft
 11613 ;;		___awtoft
 11614 ;;		___ftadd
 11615 ;;		___ftdiv
 11616 ;;		___ftmul
 11617 ;;		___lltoft
 11618 ;; This function uses a non-reentrant model
 11619 ;;
 11620                           
 11621                           	psect	text43
 11622  002EEC                     __ptext43:
 11623                           	opt stack 0
 11624  002EEC                     ___ftpack:
 11625                           	opt stack 23
 11626                           
 11627                           ;incstack = 0
 11628  002EEC  5026               	movf	___ftpack@exp,w,c
 11629  002EEE  B4D8               	btfsc	status,2,c
 11630  002EF0  D005               	goto	l5604
 11631  002EF2  5023               	movf	___ftpack@arg,w,c
 11632  002EF4  1024               	iorwf	___ftpack@arg+1,w,c
 11633  002EF6  1025               	iorwf	___ftpack@arg+2,w,c
 11634  002EF8  A4D8               	btfss	status,2,c
 11635  002EFA  D00C               	goto	l5610
 11636  002EFC                     l5604:
 11637  002EFC  0E00               	movlw	0
 11638  002EFE  6E23               	movwf	?___ftpack,c
 11639  002F00  0E00               	movlw	0
 11640  002F02  6E24               	movwf	?___ftpack+1,c
 11641  002F04  0E00               	movlw	0
 11642  002F06  6E25               	movwf	?___ftpack+2,c
 11643  002F08  0012               	return	
 11644  002F0A                     l5608:
 11645  002F0A  2A26               	incf	___ftpack@exp,f,c
 11646  002F0C  90D8               	bcf	status,0,c
 11647  002F0E  3225               	rrcf	___ftpack@arg+2,f,c
 11648  002F10  3224               	rrcf	___ftpack@arg+1,f,c
 11649  002F12  3223               	rrcf	___ftpack@arg,f,c
 11650  002F14                     l5610:
 11651  002F14  0E00               	movlw	0
 11652  002F16  1423               	andwf	___ftpack@arg,w,c
 11653  002F18  6E28               	movwf	??___ftpack& (0+255),c
 11654  002F1A  0E00               	movlw	0
 11655  002F1C  1424               	andwf	___ftpack@arg+1,w,c
 11656  002F1E  6E29               	movwf	(??___ftpack+1)& (0+255),c
 11657  002F20  0EFE               	movlw	254
 11658  002F22  1425               	andwf	___ftpack@arg+2,w,c
 11659  002F24  6E2A               	movwf	(??___ftpack+2)& (0+255),c
 11660  002F26  5028               	movf	??___ftpack,w,c
 11661  002F28  1029               	iorwf	??___ftpack+1,w,c
 11662  002F2A  102A               	iorwf	??___ftpack+2,w,c
 11663  002F2C  B4D8               	btfsc	status,2,c
 11664  002F2E  D00C               	goto	l5616
 11665  002F30  D7EC               	goto	l5608
 11666  002F32                     l5612:
 11667  002F32  2A26               	incf	___ftpack@exp,f,c
 11668  002F34  0E01               	movlw	1
 11669  002F36  2623               	addwf	___ftpack@arg,f,c
 11670  002F38  0E00               	movlw	0
 11671  002F3A  2224               	addwfc	___ftpack@arg+1,f,c
 11672  002F3C  0E00               	movlw	0
 11673  002F3E  2225               	addwfc	___ftpack@arg+2,f,c
 11674  002F40  90D8               	bcf	status,0,c
 11675  002F42  3225               	rrcf	___ftpack@arg+2,f,c
 11676  002F44  3224               	rrcf	___ftpack@arg+1,f,c
 11677  002F46  3223               	rrcf	___ftpack@arg,f,c
 11678  002F48                     l5616:
 11679  002F48  0E00               	movlw	0
 11680  002F4A  1423               	andwf	___ftpack@arg,w,c
 11681  002F4C  6E28               	movwf	??___ftpack& (0+255),c
 11682  002F4E  0E00               	movlw	0
 11683  002F50  1424               	andwf	___ftpack@arg+1,w,c
 11684  002F52  6E29               	movwf	(??___ftpack+1)& (0+255),c
 11685  002F54  0EFF               	movlw	255
 11686  002F56  1425               	andwf	___ftpack@arg+2,w,c
 11687  002F58  6E2A               	movwf	(??___ftpack+2)& (0+255),c
 11688  002F5A  5028               	movf	??___ftpack,w,c
 11689  002F5C  1029               	iorwf	??___ftpack+1,w,c
 11690  002F5E  102A               	iorwf	??___ftpack+2,w,c
 11691  002F60  B4D8               	btfsc	status,2,c
 11692  002F62  D006               	goto	l5620
 11693  002F64  D7E6               	goto	l5612
 11694  002F66                     l5618:
 11695  002F66  0626               	decf	___ftpack@exp,f,c
 11696  002F68  90D8               	bcf	status,0,c
 11697  002F6A  3623               	rlcf	___ftpack@arg,f,c
 11698  002F6C  3624               	rlcf	___ftpack@arg+1,f,c
 11699  002F6E  3625               	rlcf	___ftpack@arg+2,f,c
 11700  002F70                     l5620:
 11701  002F70  BE24               	btfsc	___ftpack@arg+1,7,c
 11702  002F72  D003               	goto	l1071
 11703  002F74  0E02               	movlw	2
 11704  002F76  6026               	cpfslt	___ftpack@exp,c
 11705  002F78  D7F6               	goto	l5618
 11706  002F7A                     l1071:
 11707  002F7A  A026               	btfss	___ftpack@exp,0,c
 11708  002F7C  9E24               	bcf	___ftpack@arg+1,7,c
 11709  002F7E  90D8               	bcf	status,0,c
 11710  002F80  3226               	rrcf	___ftpack@exp,f,c
 11711  002F82  5026               	movf	___ftpack@exp,w,c
 11712  002F84  1225               	iorwf	___ftpack@arg+2,f,c
 11713  002F86  5027               	movf	___ftpack@sign,w,c
 11714  002F88  A4D8               	btfss	status,2,c
 11715  002F8A  8E25               	bsf	___ftpack@arg+2,7,c
 11716  002F8C  C023  F023         	movff	___ftpack@arg,?___ftpack
 11717  002F90  C024  F024         	movff	___ftpack@arg+1,?___ftpack+1
 11718  002F94  C025  F025         	movff	___ftpack@arg+2,?___ftpack+2
 11719  002F98  0012               	return	
 11720  002F9A                     __end_of___ftpack:
 11721                           	opt stack 0
 11722                           tblptru	equ	0xFF8
 11723                           tblptrh	equ	0xFF7
 11724                           tblptrl	equ	0xFF6
 11725                           tablat	equ	0xFF5
 11726                           prodh	equ	0xFF4
 11727                           prodl	equ	0xFF3
 11728                           intcon	equ	0xFF2
 11729                           intcon3	equ	0xFF0
 11730                           postinc0	equ	0xFEE
 11731                           wreg	equ	0xFE8
 11732                           postdec1	equ	0xFE5
 11733                           fsr1l	equ	0xFE1
 11734                           indf2	equ	0xFDF
 11735                           postinc2	equ	0xFDE
 11736                           postdec2	equ	0xFDD
 11737                           fsr2h	equ	0xFDA
 11738                           fsr2l	equ	0xFD9
 11739                           status	equ	0xFD8
 11740                           
 11741 ;; *************** function _initTimer *****************
 11742 ;; Defined at:
 11743 ;;		line 52 in file "timer.c"
 11744 ;; Parameters:    Size  Location     Type
 11745 ;;  timer           2   34[COMRAM] int 
 11746 ;; Auto vars:     Size  Location     Type
 11747 ;;		None
 11748 ;; Return value:  Size  Location     Type
 11749 ;;                  1    wreg      void 
 11750 ;; Registers used:
 11751 ;;		wreg, status,2, status,0
 11752 ;; Tracked objects:
 11753 ;;		On entry : 0/0
 11754 ;;		On exit  : 0/0
 11755 ;;		Unchanged: 0/0
 11756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11757 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11759 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11760 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11761 ;;Total ram usage:        4 bytes
 11762 ;; Hardware stack levels used:    1
 11763 ;; Hardware stack levels required when called:    3
 11764 ;; This function calls:
 11765 ;;		Nothing
 11766 ;; This function is called by:
 11767 ;;		_main
 11768 ;;		_initServo
 11769 ;;		_testFrequency
 11770 ;; This function uses a non-reentrant model
 11771 ;;
 11772                           
 11773                           	psect	text44
 11774  0035CC                     __ptext44:
 11775                           	opt stack 0
 11776  0035CC                     _initTimer:
 11777                           	opt stack 27
 11778                           
 11779                           ;timer.c: 53: switch(timer){
 11780                           
 11781                           ;incstack = 0
 11782  0035CC  D00F               	goto	l4708
 11783  0035CE                     l4690:
 11784                           
 11785                           ;timer.c: 55: T0CON = 0;
 11786  0035CE  0E00               	movlw	0
 11787  0035D0  6ED5               	movwf	4053,c	;volatile
 11788                           
 11789                           ;timer.c: 56: T0CON |= 1<<3;
 11790  0035D2  86D5               	bsf	4053,3,c	;volatile
 11791                           
 11792                           ;timer.c: 58: TMR0IE = 1;
 11793  0035D4  8AF2               	bsf	intcon,5,c	;volatile
 11794                           
 11795                           ;timer.c: 59: break;
 11796  0035D6  D01C               	goto	l424
 11797  0035D8                     l4696:
 11798                           
 11799                           ;timer.c: 61: T1CON = 0;
 11800  0035D8  0E00               	movlw	0
 11801  0035DA  6ECD               	movwf	4045,c	;volatile
 11802                           
 11803                           ;timer.c: 63: T1CON |= 0b11<<4;
 11804  0035DC  0E30               	movlw	48
 11805  0035DE  12CD               	iorwf	4045,f,c	;volatile
 11806                           
 11807                           ;timer.c: 64: TMR1IE = 1;
 11808  0035E0  809D               	bsf	3997,0,c	;volatile
 11809                           
 11810                           ;timer.c: 65: break;
 11811  0035E2  D016               	goto	l424
 11812  0035E4                     l4702:
 11813                           
 11814                           ;timer.c: 67: T3CON = 0;
 11815  0035E4  0E00               	movlw	0
 11816  0035E6  6EB1               	movwf	4017,c	;volatile
 11817                           
 11818                           ;timer.c: 68: TMR3IE = 1;
 11819  0035E8  82A0               	bsf	4000,1,c	;volatile
 11820                           
 11821                           ;timer.c: 70: }
 11822                           
 11823                           ;timer.c: 69: break;
 11824  0035EA  D012               	goto	l424
 11825  0035EC                     l4708:
 11826  0035EC  C023  F025         	movff	initTimer@timer,??_initTimer
 11827  0035F0  C024  F026         	movff	initTimer@timer+1,??_initTimer+1
 11828                           
 11829                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11830                           ; Switch size 1, requested type "space"
 11831                           ; Number of cases is 1, Range of values is 0 to 0
 11832                           ; switch strategies available:
 11833                           ; Name         Instructions Cycles
 11834                           ; simple_byte            4     3 (average)
 11835                           ;	Chosen strategy is simple_byte
 11836  0035F4  5026               	movf	??_initTimer+1,w,c
 11837  0035F6  0A00               	xorlw	0	; case 0
 11838  0035F8  A4D8               	btfss	status,2,c
 11839  0035FA  D00A               	goto	l424
 11840                           
 11841                           ; Switch size 1, requested type "space"
 11842                           ; Number of cases is 3, Range of values is 0 to 3
 11843                           ; switch strategies available:
 11844                           ; Name         Instructions Cycles
 11845                           ; simple_byte           10     6 (average)
 11846                           ;	Chosen strategy is simple_byte
 11847  0035FC  5025               	movf	??_initTimer,w,c
 11848  0035FE  0A00               	xorlw	0	; case 0
 11849  003600  B4D8               	btfsc	status,2,c
 11850  003602  D7E5               	goto	l4690
 11851  003604  0A01               	xorlw	1	; case 1
 11852  003606  B4D8               	btfsc	status,2,c
 11853  003608  D7E7               	goto	l4696
 11854  00360A  0A02               	xorlw	2	; case 3
 11855  00360C  B4D8               	btfsc	status,2,c
 11856  00360E  D7EA               	goto	l4702
 11857  003610                     l424:
 11858                           
 11859                           ;timer.c: 71: PEIE = 1;
 11860  003610  8CF2               	bsf	intcon,6,c	;volatile
 11861                           
 11862                           ;timer.c: 72: (INTCONbits.GIE = 1);
 11863  003612  8EF2               	bsf	intcon,7,c	;volatile
 11864  003614  0012               	return		;funcret
 11865  003616                     __end_of_initTimer:
 11866                           	opt stack 0
 11867                           tblptru	equ	0xFF8
 11868                           tblptrh	equ	0xFF7
 11869                           tblptrl	equ	0xFF6
 11870                           tablat	equ	0xFF5
 11871                           prodh	equ	0xFF4
 11872                           prodl	equ	0xFF3
 11873                           intcon	equ	0xFF2
 11874                           intcon3	equ	0xFF0
 11875                           postinc0	equ	0xFEE
 11876                           wreg	equ	0xFE8
 11877                           postdec1	equ	0xFE5
 11878                           fsr1l	equ	0xFE1
 11879                           indf2	equ	0xFDF
 11880                           postinc2	equ	0xFDE
 11881                           postdec2	equ	0xFDD
 11882                           fsr2h	equ	0xFDA
 11883                           fsr2l	equ	0xFD9
 11884                           status	equ	0xFD8
 11885                           
 11886 ;; *************** function _initLCD *****************
 11887 ;; Defined at:
 11888 ;;		line 15 in file "lcd.c"
 11889 ;; Parameters:    Size  Location     Type
 11890 ;;		None
 11891 ;; Auto vars:     Size  Location     Type
 11892 ;;		None
 11893 ;; Return value:  Size  Location     Type
 11894 ;;                  1    wreg      void 
 11895 ;; Registers used:
 11896 ;;		wreg, status,2, status,0, cstack
 11897 ;; Tracked objects:
 11898 ;;		On entry : 0/0
 11899 ;;		On exit  : 0/0
 11900 ;;		Unchanged: 0/0
 11901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11904 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11905 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11906 ;;Total ram usage:        1 bytes
 11907 ;; Hardware stack levels used:    1
 11908 ;; Hardware stack levels required when called:    5
 11909 ;; This function calls:
 11910 ;;		_lcdInst
 11911 ;; This function is called by:
 11912 ;;		_main
 11913 ;; This function uses a non-reentrant model
 11914 ;;
 11915                           
 11916                           	psect	text45
 11917  003616                     __ptext45:
 11918                           	opt stack 0
 11919  003616                     _initLCD:
 11920                           	opt stack 25
 11921                           
 11922                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
 11923                           
 11924                           ;incstack = 0
 11925  003616  0E31               	movlw	49
 11926  003618  6E27               	movwf	??_initLCD& (0+255),c
 11927  00361A  0EB2               	movlw	178
 11928  00361C                     u7707:
 11929  00361C  2EE8               	decfsz	wreg,f,c
 11930  00361E  D7FE               	bra	u7707
 11931  003620  2E27               	decfsz	??_initLCD& (0+255),f,c
 11932  003622  D7FC               	bra	u7707
 11933  003624  D000               	nop2	
 11934                           
 11935                           ;lcd.c: 18: lcdInst(0b00110011);
 11936  003626  0E33               	movlw	51
 11937  003628  EC47  F01C         	call	_lcdInst
 11938                           
 11939                           ;lcd.c: 19: lcdInst(0b00110010);
 11940  00362C  0E32               	movlw	50
 11941  00362E  EC47  F01C         	call	_lcdInst
 11942                           
 11943                           ;lcd.c: 20: lcdInst(0b00101000);
 11944  003632  0E28               	movlw	40
 11945  003634  EC47  F01C         	call	_lcdInst
 11946                           
 11947                           ;lcd.c: 21: lcdInst(0b00001111);
 11948  003638  0E0F               	movlw	15
 11949  00363A  EC47  F01C         	call	_lcdInst
 11950                           
 11951                           ;lcd.c: 22: lcdInst(0b00000110);
 11952  00363E  0E06               	movlw	6
 11953  003640  EC47  F01C         	call	_lcdInst
 11954                           
 11955                           ;lcd.c: 23: lcdInst(0b00000001);
 11956  003644  0E01               	movlw	1
 11957  003646  EC47  F01C         	call	_lcdInst
 11958                           
 11959                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
 11960  00364A  0E31               	movlw	49
 11961  00364C  6E27               	movwf	??_initLCD& (0+255),c
 11962  00364E  0EB2               	movlw	178
 11963  003650                     u7717:
 11964  003650  2EE8               	decfsz	wreg,f,c
 11965  003652  D7FE               	bra	u7717
 11966  003654  2E27               	decfsz	??_initLCD& (0+255),f,c
 11967  003656  D7FC               	bra	u7717
 11968  003658  D000               	nop2	
 11969  00365A  0012               	return		;funcret
 11970  00365C                     __end_of_initLCD:
 11971                           	opt stack 0
 11972                           tblptru	equ	0xFF8
 11973                           tblptrh	equ	0xFF7
 11974                           tblptrl	equ	0xFF6
 11975                           tablat	equ	0xFF5
 11976                           prodh	equ	0xFF4
 11977                           prodl	equ	0xFF3
 11978                           intcon	equ	0xFF2
 11979                           intcon3	equ	0xFF0
 11980                           postinc0	equ	0xFEE
 11981                           wreg	equ	0xFE8
 11982                           postdec1	equ	0xFE5
 11983                           fsr1l	equ	0xFE1
 11984                           indf2	equ	0xFDF
 11985                           postinc2	equ	0xFDE
 11986                           postdec2	equ	0xFDD
 11987                           fsr2h	equ	0xFDA
 11988                           fsr2l	equ	0xFD9
 11989                           status	equ	0xFD8
 11990                           
 11991 ;; *************** function _lcdInst *****************
 11992 ;; Defined at:
 11993 ;;		line 27 in file "lcd.c"
 11994 ;; Parameters:    Size  Location     Type
 11995 ;;  data            1    wreg     unsigned char 
 11996 ;; Auto vars:     Size  Location     Type
 11997 ;;  data            1   37[COMRAM] unsigned char 
 11998 ;; Return value:  Size  Location     Type
 11999 ;;                  1    wreg      void 
 12000 ;; Registers used:
 12001 ;;		wreg, status,2, status,0, cstack
 12002 ;; Tracked objects:
 12003 ;;		On entry : 0/0
 12004 ;;		On exit  : 0/0
 12005 ;;		Unchanged: 0/0
 12006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12008 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12009 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12010 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12011 ;;Total ram usage:        2 bytes
 12012 ;; Hardware stack levels used:    1
 12013 ;; Hardware stack levels required when called:    4
 12014 ;; This function calls:
 12015 ;;		_lcdNibble
 12016 ;; This function is called by:
 12017 ;;		_initLCD
 12018 ;;		_lcdHome
 12019 ;;		_lcdClear
 12020 ;;		_lcdNewline
 12021 ;; This function uses a non-reentrant model
 12022 ;;
 12023                           
 12024                           	psect	text46
 12025  00388E                     __ptext46:
 12026                           	opt stack 0
 12027  00388E                     _lcdInst:
 12028                           	opt stack 22
 12029                           
 12030                           ;incstack = 0
 12031                           ;lcdInst@data stored from wreg
 12032  00388E  6E26               	movwf	lcdInst@data,c
 12033                           
 12034                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 12035  003890  948C               	bcf	3980,2,c	;volatile
 12036                           
 12037                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 12038  003892  0E74               	movlw	116
 12039  003894                     u7727:
 12040  003894  2EE8               	decfsz	wreg,f,c
 12041  003896  D7FE               	bra	u7727
 12042  003898  D000               	nop2	
 12043                           
 12044                           ;lcd.c: 30: lcdNibble(data);
 12045  00389A  5026               	movf	lcdInst@data,w,c
 12046  00389C  EC13  F01A         	call	_lcdNibble
 12047                           
 12048                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 12049  0038A0  0E04               	movlw	4
 12050  0038A2  6E25               	movwf	??_lcdInst& (0+255),c
 12051  0038A4  0E3E               	movlw	62
 12052  0038A6                     u7737:
 12053  0038A6  2EE8               	decfsz	wreg,f,c
 12054  0038A8  D7FE               	bra	u7737
 12055  0038AA  2E25               	decfsz	??_lcdInst& (0+255),f,c
 12056  0038AC  D7FC               	bra	u7737
 12057  0038AE  0012               	return		;funcret
 12058  0038B0                     __end_of_lcdInst:
 12059                           	opt stack 0
 12060                           tblptru	equ	0xFF8
 12061                           tblptrh	equ	0xFF7
 12062                           tblptrl	equ	0xFF6
 12063                           tablat	equ	0xFF5
 12064                           prodh	equ	0xFF4
 12065                           prodl	equ	0xFF3
 12066                           intcon	equ	0xFF2
 12067                           intcon3	equ	0xFF0
 12068                           postinc0	equ	0xFEE
 12069                           wreg	equ	0xFE8
 12070                           postdec1	equ	0xFE5
 12071                           fsr1l	equ	0xFE1
 12072                           indf2	equ	0xFDF
 12073                           postinc2	equ	0xFDE
 12074                           postdec2	equ	0xFDD
 12075                           fsr2h	equ	0xFDA
 12076                           fsr2l	equ	0xFD9
 12077                           status	equ	0xFD8
 12078                           
 12079 ;; *************** function _lcdNibble *****************
 12080 ;; Defined at:
 12081 ;;		line 46 in file "lcd.c"
 12082 ;; Parameters:    Size  Location     Type
 12083 ;;  data            1    wreg     unsigned char 
 12084 ;; Auto vars:     Size  Location     Type
 12085 ;;  data            1   35[COMRAM] unsigned char 
 12086 ;;  temp            1   34[COMRAM] unsigned char 
 12087 ;; Return value:  Size  Location     Type
 12088 ;;                  1    wreg      void 
 12089 ;; Registers used:
 12090 ;;		wreg, status,2, status,0
 12091 ;; Tracked objects:
 12092 ;;		On entry : 0/0
 12093 ;;		On exit  : 0/0
 12094 ;;		Unchanged: 0/0
 12095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12097 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12099 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12100 ;;Total ram usage:        2 bytes
 12101 ;; Hardware stack levels used:    1
 12102 ;; Hardware stack levels required when called:    3
 12103 ;; This function calls:
 12104 ;;		Nothing
 12105 ;; This function is called by:
 12106 ;;		_lcdInst
 12107 ;;		_putch
 12108 ;; This function uses a non-reentrant model
 12109 ;;
 12110                           
 12111                           	psect	text47
 12112  003426                     __ptext47:
 12113                           	opt stack 0
 12114  003426                     _lcdNibble:
 12115                           	opt stack 24
 12116                           
 12117                           ;incstack = 0
 12118                           ;lcdNibble@data stored from wreg
 12119  003426  6E24               	movwf	lcdNibble@data,c
 12120                           
 12121                           ;lcd.c: 48: char temp = data & 0xF0;
 12122  003428  5024               	movf	lcdNibble@data,w,c
 12123  00342A  0BF0               	andlw	240
 12124  00342C  6E23               	movwf	lcdNibble@temp,c
 12125                           
 12126                           ;lcd.c: 49: LATD = LATD & 0x0F;
 12127  00342E  508C               	movf	3980,w,c	;volatile
 12128  003430  0B0F               	andlw	15
 12129  003432  6E8C               	movwf	3980,c	;volatile
 12130                           
 12131                           ;lcd.c: 50: LATD = temp | LATD;
 12132  003434  5023               	movf	lcdNibble@temp,w,c
 12133  003436  108C               	iorwf	3980,w,c	;volatile
 12134  003438  6E8C               	movwf	3980,c	;volatile
 12135                           
 12136                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 12137  00343A  968C               	bcf	3980,3,c	;volatile
 12138                           
 12139                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12140  00343C  0ED6               	movlw	214
 12141  00343E                     u7747:
 12142  00343E  D000               	nop2	
 12143  003440  D000               	nop2	
 12144  003442  2EE8               	decfsz	wreg,f,c
 12145  003444  D7FC               	bra	u7747
 12146  003446  D000               	nop2	
 12147                           
 12148                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 12149  003448  868C               	bsf	3980,3,c	;volatile
 12150                           
 12151                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12152  00344A  0ED6               	movlw	214
 12153  00344C                     u7757:
 12154  00344C  D000               	nop2	
 12155  00344E  D000               	nop2	
 12156  003450  2EE8               	decfsz	wreg,f,c
 12157  003452  D7FC               	bra	u7757
 12158  003454  D000               	nop2	
 12159                           
 12160                           ;lcd.c: 58: data = data << 4;
 12161  003456  3824               	swapf	lcdNibble@data,w,c
 12162  003458  0BF0               	andlw	240
 12163  00345A  6E24               	movwf	lcdNibble@data,c
 12164                           
 12165                           ;lcd.c: 60: temp = data & 0xF0;
 12166  00345C  5024               	movf	lcdNibble@data,w,c
 12167  00345E  0BF0               	andlw	240
 12168  003460  6E23               	movwf	lcdNibble@temp,c
 12169                           
 12170                           ;lcd.c: 61: LATD = LATD & 0x0F;
 12171  003462  508C               	movf	3980,w,c	;volatile
 12172  003464  0B0F               	andlw	15
 12173  003466  6E8C               	movwf	3980,c	;volatile
 12174                           
 12175                           ;lcd.c: 62: LATD = temp | LATD;
 12176  003468  5023               	movf	lcdNibble@temp,w,c
 12177  00346A  108C               	iorwf	3980,w,c	;volatile
 12178  00346C  6E8C               	movwf	3980,c	;volatile
 12179                           
 12180                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 12181  00346E  968C               	bcf	3980,3,c	;volatile
 12182                           
 12183                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12184  003470  0ED6               	movlw	214
 12185  003472                     u7767:
 12186  003472  D000               	nop2	
 12187  003474  D000               	nop2	
 12188  003476  2EE8               	decfsz	wreg,f,c
 12189  003478  D7FC               	bra	u7767
 12190  00347A  D000               	nop2	
 12191                           
 12192                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 12193  00347C  868C               	bsf	3980,3,c	;volatile
 12194                           
 12195                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12196  00347E  0ED6               	movlw	214
 12197  003480                     u7777:
 12198  003480  D000               	nop2	
 12199  003482  D000               	nop2	
 12200  003484  2EE8               	decfsz	wreg,f,c
 12201  003486  D7FC               	bra	u7777
 12202  003488  D000               	nop2	
 12203  00348A  0012               	return		;funcret
 12204  00348C                     __end_of_lcdNibble:
 12205                           	opt stack 0
 12206                           tblptru	equ	0xFF8
 12207                           tblptrh	equ	0xFF7
 12208                           tblptrl	equ	0xFF6
 12209                           tablat	equ	0xFF5
 12210                           prodh	equ	0xFF4
 12211                           prodl	equ	0xFF3
 12212                           intcon	equ	0xFF2
 12213                           intcon3	equ	0xFF0
 12214                           postinc0	equ	0xFEE
 12215                           wreg	equ	0xFE8
 12216                           postdec1	equ	0xFE5
 12217                           fsr1l	equ	0xFE1
 12218                           indf2	equ	0xFDF
 12219                           postinc2	equ	0xFDE
 12220                           postdec2	equ	0xFDD
 12221                           fsr2h	equ	0xFDA
 12222                           fsr2l	equ	0xFD9
 12223                           status	equ	0xFD8
 12224                           
 12225 ;; *************** function ___almod *****************
 12226 ;; Defined at:
 12227 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\almod.c"
 12228 ;; Parameters:    Size  Location     Type
 12229 ;;  dividend        4   48[COMRAM] long 
 12230 ;;  divisor         4   52[COMRAM] long 
 12231 ;; Auto vars:     Size  Location     Type
 12232 ;;  sign            1   57[COMRAM] unsigned char 
 12233 ;;  counter         1   56[COMRAM] unsigned char 
 12234 ;; Return value:  Size  Location     Type
 12235 ;;                  4   48[COMRAM] long 
 12236 ;; Registers used:
 12237 ;;		wreg, status,2, status,0
 12238 ;; Tracked objects:
 12239 ;;		On entry : 0/0
 12240 ;;		On exit  : 0/0
 12241 ;;		Unchanged: 0/0
 12242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12243 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12244 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12246 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12247 ;;Total ram usage:       10 bytes
 12248 ;; Hardware stack levels used:    1
 12249 ;; Hardware stack levels required when called:    3
 12250 ;; This function calls:
 12251 ;;		Nothing
 12252 ;; This function is called by:
 12253 ;;		_main
 12254 ;; This function uses a non-reentrant model
 12255 ;;
 12256                           
 12257                           	psect	text48
 12258  002F9A                     __ptext48:
 12259                           	opt stack 0
 12260  002F9A                     ___almod:
 12261                           	opt stack 27
 12262                           
 12263                           ;incstack = 0
 12264  002F9A  0E00               	movlw	0
 12265  002F9C  6E3A               	movwf	___almod@sign,c
 12266  002F9E  AE34               	btfss	___almod@dividend+3,7,c
 12267  002FA0  D00A               	goto	l5246
 12268  002FA2  1E34               	comf	___almod@dividend+3,f,c
 12269  002FA4  1E33               	comf	___almod@dividend+2,f,c
 12270  002FA6  1E32               	comf	___almod@dividend+1,f,c
 12271  002FA8  6C31               	negf	___almod@dividend,c
 12272  002FAA  0E00               	movlw	0
 12273  002FAC  2232               	addwfc	___almod@dividend+1,f,c
 12274  002FAE  2233               	addwfc	___almod@dividend+2,f,c
 12275  002FB0  2234               	addwfc	___almod@dividend+3,f,c
 12276  002FB2  0E01               	movlw	1
 12277  002FB4  6E3A               	movwf	___almod@sign,c
 12278  002FB6                     l5246:
 12279  002FB6  AE38               	btfss	___almod@divisor+3,7,c
 12280  002FB8  D008               	goto	l5250
 12281  002FBA  1E38               	comf	___almod@divisor+3,f,c
 12282  002FBC  1E37               	comf	___almod@divisor+2,f,c
 12283  002FBE  1E36               	comf	___almod@divisor+1,f,c
 12284  002FC0  6C35               	negf	___almod@divisor,c
 12285  002FC2  0E00               	movlw	0
 12286  002FC4  2236               	addwfc	___almod@divisor+1,f,c
 12287  002FC6  2237               	addwfc	___almod@divisor+2,f,c
 12288  002FC8  2238               	addwfc	___almod@divisor+3,f,c
 12289  002FCA                     l5250:
 12290  002FCA  5035               	movf	___almod@divisor,w,c
 12291  002FCC  1036               	iorwf	___almod@divisor+1,w,c
 12292  002FCE  1037               	iorwf	___almod@divisor+2,w,c
 12293  002FD0  1038               	iorwf	___almod@divisor+3,w,c
 12294  002FD2  B4D8               	btfsc	status,2,c
 12295  002FD4  D024               	goto	l5266
 12296  002FD6  0E01               	movlw	1
 12297  002FD8  6E39               	movwf	___almod@counter,c
 12298  002FDA  D006               	goto	l5256
 12299  002FDC                     l5254:
 12300  002FDC  90D8               	bcf	status,0,c
 12301  002FDE  3635               	rlcf	___almod@divisor,f,c
 12302  002FE0  3636               	rlcf	___almod@divisor+1,f,c
 12303  002FE2  3637               	rlcf	___almod@divisor+2,f,c
 12304  002FE4  3638               	rlcf	___almod@divisor+3,f,c
 12305  002FE6  2A39               	incf	___almod@counter,f,c
 12306  002FE8                     l5256:
 12307  002FE8  AE38               	btfss	___almod@divisor+3,7,c
 12308  002FEA  D7F8               	goto	l5254
 12309  002FEC                     l5258:
 12310  002FEC  5035               	movf	___almod@divisor,w,c
 12311  002FEE  5C31               	subwf	___almod@dividend,w,c
 12312  002FF0  5036               	movf	___almod@divisor+1,w,c
 12313  002FF2  5832               	subwfb	___almod@dividend+1,w,c
 12314  002FF4  5037               	movf	___almod@divisor+2,w,c
 12315  002FF6  5833               	subwfb	___almod@dividend+2,w,c
 12316  002FF8  5038               	movf	___almod@divisor+3,w,c
 12317  002FFA  5834               	subwfb	___almod@dividend+3,w,c
 12318  002FFC  A0D8               	btfss	status,0,c
 12319  002FFE  D008               	goto	l5262
 12320  003000  5035               	movf	___almod@divisor,w,c
 12321  003002  5E31               	subwf	___almod@dividend,f,c
 12322  003004  5036               	movf	___almod@divisor+1,w,c
 12323  003006  5A32               	subwfb	___almod@dividend+1,f,c
 12324  003008  5037               	movf	___almod@divisor+2,w,c
 12325  00300A  5A33               	subwfb	___almod@dividend+2,f,c
 12326  00300C  5038               	movf	___almod@divisor+3,w,c
 12327  00300E  5A34               	subwfb	___almod@dividend+3,f,c
 12328  003010                     l5262:
 12329  003010  90D8               	bcf	status,0,c
 12330  003012  3238               	rrcf	___almod@divisor+3,f,c
 12331  003014  3237               	rrcf	___almod@divisor+2,f,c
 12332  003016  3236               	rrcf	___almod@divisor+1,f,c
 12333  003018  3235               	rrcf	___almod@divisor,f,c
 12334  00301A  2E39               	decfsz	___almod@counter,f,c
 12335  00301C  D7E7               	goto	l5258
 12336  00301E                     l5266:
 12337  00301E  503A               	movf	___almod@sign,w,c
 12338  003020  B4D8               	btfsc	status,2,c
 12339  003022  D008               	goto	l5270
 12340  003024  1E34               	comf	___almod@dividend+3,f,c
 12341  003026  1E33               	comf	___almod@dividend+2,f,c
 12342  003028  1E32               	comf	___almod@dividend+1,f,c
 12343  00302A  6C31               	negf	___almod@dividend,c
 12344  00302C  0E00               	movlw	0
 12345  00302E  2232               	addwfc	___almod@dividend+1,f,c
 12346  003030  2233               	addwfc	___almod@dividend+2,f,c
 12347  003032  2234               	addwfc	___almod@dividend+3,f,c
 12348  003034                     l5270:
 12349  003034  C031  F031         	movff	___almod@dividend,?___almod
 12350  003038  C032  F032         	movff	___almod@dividend+1,?___almod+1
 12351  00303C  C033  F033         	movff	___almod@dividend+2,?___almod+2
 12352  003040  C034  F034         	movff	___almod@dividend+3,?___almod+3
 12353  003044  0012               	return	
 12354  003046                     __end_of___almod:
 12355                           	opt stack 0
 12356                           tblptru	equ	0xFF8
 12357                           tblptrh	equ	0xFF7
 12358                           tblptrl	equ	0xFF6
 12359                           tablat	equ	0xFF5
 12360                           prodh	equ	0xFF4
 12361                           prodl	equ	0xFF3
 12362                           intcon	equ	0xFF2
 12363                           intcon3	equ	0xFF0
 12364                           postinc0	equ	0xFEE
 12365                           wreg	equ	0xFE8
 12366                           postdec1	equ	0xFE5
 12367                           fsr1l	equ	0xFE1
 12368                           indf2	equ	0xFDF
 12369                           postinc2	equ	0xFDE
 12370                           postdec2	equ	0xFDD
 12371                           fsr2h	equ	0xFDA
 12372                           fsr2l	equ	0xFD9
 12373                           status	equ	0xFD8
 12374                           
 12375 ;; *************** function ___aldiv *****************
 12376 ;; Defined at:
 12377 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\aldiv.c"
 12378 ;; Parameters:    Size  Location     Type
 12379 ;;  dividend        4   34[COMRAM] long 
 12380 ;;  divisor         4   38[COMRAM] long 
 12381 ;; Auto vars:     Size  Location     Type
 12382 ;;  quotient        4   44[COMRAM] long 
 12383 ;;  sign            1   43[COMRAM] unsigned char 
 12384 ;;  counter         1   42[COMRAM] unsigned char 
 12385 ;; Return value:  Size  Location     Type
 12386 ;;                  4   34[COMRAM] long 
 12387 ;; Registers used:
 12388 ;;		wreg, status,2, status,0
 12389 ;; Tracked objects:
 12390 ;;		On entry : 0/0
 12391 ;;		On exit  : 0/0
 12392 ;;		Unchanged: 0/0
 12393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12394 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12395 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12397 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12398 ;;Total ram usage:       14 bytes
 12399 ;; Hardware stack levels used:    1
 12400 ;; Hardware stack levels required when called:    3
 12401 ;; This function calls:
 12402 ;;		Nothing
 12403 ;; This function is called by:
 12404 ;;		_main
 12405 ;; This function uses a non-reentrant model
 12406 ;;
 12407                           
 12408                           	psect	text49
 12409  002C90                     __ptext49:
 12410                           	opt stack 0
 12411  002C90                     ___aldiv:
 12412                           	opt stack 27
 12413                           
 12414                           ;incstack = 0
 12415  002C90  0E00               	movlw	0
 12416  002C92  6E2C               	movwf	___aldiv@sign,c
 12417  002C94  AE2A               	btfss	___aldiv@divisor+3,7,c
 12418  002C96  D00A               	goto	l5202
 12419  002C98  1E2A               	comf	___aldiv@divisor+3,f,c
 12420  002C9A  1E29               	comf	___aldiv@divisor+2,f,c
 12421  002C9C  1E28               	comf	___aldiv@divisor+1,f,c
 12422  002C9E  6C27               	negf	___aldiv@divisor,c
 12423  002CA0  0E00               	movlw	0
 12424  002CA2  2228               	addwfc	___aldiv@divisor+1,f,c
 12425  002CA4  2229               	addwfc	___aldiv@divisor+2,f,c
 12426  002CA6  222A               	addwfc	___aldiv@divisor+3,f,c
 12427  002CA8  0E01               	movlw	1
 12428  002CAA  6E2C               	movwf	___aldiv@sign,c
 12429  002CAC                     l5202:
 12430  002CAC  AE26               	btfss	___aldiv@dividend+3,7,c
 12431  002CAE  D00A               	goto	l5208
 12432  002CB0  1E26               	comf	___aldiv@dividend+3,f,c
 12433  002CB2  1E25               	comf	___aldiv@dividend+2,f,c
 12434  002CB4  1E24               	comf	___aldiv@dividend+1,f,c
 12435  002CB6  6C23               	negf	___aldiv@dividend,c
 12436  002CB8  0E00               	movlw	0
 12437  002CBA  2224               	addwfc	___aldiv@dividend+1,f,c
 12438  002CBC  2225               	addwfc	___aldiv@dividend+2,f,c
 12439  002CBE  2226               	addwfc	___aldiv@dividend+3,f,c
 12440  002CC0  0E01               	movlw	1
 12441  002CC2  1A2C               	xorwf	___aldiv@sign,f,c
 12442  002CC4                     l5208:
 12443  002CC4  0E00               	movlw	0
 12444  002CC6  6E2D               	movwf	___aldiv@quotient,c
 12445  002CC8  0E00               	movlw	0
 12446  002CCA  6E2E               	movwf	___aldiv@quotient+1,c
 12447  002CCC  0E00               	movlw	0
 12448  002CCE  6E2F               	movwf	___aldiv@quotient+2,c
 12449  002CD0  0E00               	movlw	0
 12450  002CD2  6E30               	movwf	___aldiv@quotient+3,c
 12451  002CD4  5027               	movf	___aldiv@divisor,w,c
 12452  002CD6  1028               	iorwf	___aldiv@divisor+1,w,c
 12453  002CD8  1029               	iorwf	___aldiv@divisor+2,w,c
 12454  002CDA  102A               	iorwf	___aldiv@divisor+3,w,c
 12455  002CDC  B4D8               	btfsc	status,2,c
 12456  002CDE  D02A               	goto	l5230
 12457  002CE0  0E01               	movlw	1
 12458  002CE2  6E2B               	movwf	___aldiv@counter,c
 12459  002CE4  D006               	goto	l5216
 12460  002CE6                     l5214:
 12461  002CE6  90D8               	bcf	status,0,c
 12462  002CE8  3627               	rlcf	___aldiv@divisor,f,c
 12463  002CEA  3628               	rlcf	___aldiv@divisor+1,f,c
 12464  002CEC  3629               	rlcf	___aldiv@divisor+2,f,c
 12465  002CEE  362A               	rlcf	___aldiv@divisor+3,f,c
 12466  002CF0  2A2B               	incf	___aldiv@counter,f,c
 12467  002CF2                     l5216:
 12468  002CF2  AE2A               	btfss	___aldiv@divisor+3,7,c
 12469  002CF4  D7F8               	goto	l5214
 12470  002CF6                     l5218:
 12471  002CF6  90D8               	bcf	status,0,c
 12472  002CF8  362D               	rlcf	___aldiv@quotient,f,c
 12473  002CFA  362E               	rlcf	___aldiv@quotient+1,f,c
 12474  002CFC  362F               	rlcf	___aldiv@quotient+2,f,c
 12475  002CFE  3630               	rlcf	___aldiv@quotient+3,f,c
 12476  002D00  5027               	movf	___aldiv@divisor,w,c
 12477  002D02  5C23               	subwf	___aldiv@dividend,w,c
 12478  002D04  5028               	movf	___aldiv@divisor+1,w,c
 12479  002D06  5824               	subwfb	___aldiv@dividend+1,w,c
 12480  002D08  5029               	movf	___aldiv@divisor+2,w,c
 12481  002D0A  5825               	subwfb	___aldiv@dividend+2,w,c
 12482  002D0C  502A               	movf	___aldiv@divisor+3,w,c
 12483  002D0E  5826               	subwfb	___aldiv@dividend+3,w,c
 12484  002D10  A0D8               	btfss	status,0,c
 12485  002D12  D009               	goto	l5226
 12486  002D14  5027               	movf	___aldiv@divisor,w,c
 12487  002D16  5E23               	subwf	___aldiv@dividend,f,c
 12488  002D18  5028               	movf	___aldiv@divisor+1,w,c
 12489  002D1A  5A24               	subwfb	___aldiv@dividend+1,f,c
 12490  002D1C  5029               	movf	___aldiv@divisor+2,w,c
 12491  002D1E  5A25               	subwfb	___aldiv@dividend+2,f,c
 12492  002D20  502A               	movf	___aldiv@divisor+3,w,c
 12493  002D22  5A26               	subwfb	___aldiv@dividend+3,f,c
 12494  002D24  802D               	bsf	___aldiv@quotient,0,c
 12495  002D26                     l5226:
 12496  002D26  90D8               	bcf	status,0,c
 12497  002D28  322A               	rrcf	___aldiv@divisor+3,f,c
 12498  002D2A  3229               	rrcf	___aldiv@divisor+2,f,c
 12499  002D2C  3228               	rrcf	___aldiv@divisor+1,f,c
 12500  002D2E  3227               	rrcf	___aldiv@divisor,f,c
 12501  002D30  2E2B               	decfsz	___aldiv@counter,f,c
 12502  002D32  D7E1               	goto	l5218
 12503  002D34                     l5230:
 12504  002D34  502C               	movf	___aldiv@sign,w,c
 12505  002D36  B4D8               	btfsc	status,2,c
 12506  002D38  D008               	goto	l5234
 12507  002D3A  1E30               	comf	___aldiv@quotient+3,f,c
 12508  002D3C  1E2F               	comf	___aldiv@quotient+2,f,c
 12509  002D3E  1E2E               	comf	___aldiv@quotient+1,f,c
 12510  002D40  6C2D               	negf	___aldiv@quotient,c
 12511  002D42  0E00               	movlw	0
 12512  002D44  222E               	addwfc	___aldiv@quotient+1,f,c
 12513  002D46  222F               	addwfc	___aldiv@quotient+2,f,c
 12514  002D48  2230               	addwfc	___aldiv@quotient+3,f,c
 12515  002D4A                     l5234:
 12516  002D4A  C02D  F023         	movff	___aldiv@quotient,?___aldiv
 12517  002D4E  C02E  F024         	movff	___aldiv@quotient+1,?___aldiv+1
 12518  002D52  C02F  F025         	movff	___aldiv@quotient+2,?___aldiv+2
 12519  002D56  C030  F026         	movff	___aldiv@quotient+3,?___aldiv+3
 12520  002D5A  0012               	return	
 12521  002D5C                     __end_of___aldiv:
 12522                           	opt stack 0
 12523                           tblptru	equ	0xFF8
 12524                           tblptrh	equ	0xFF7
 12525                           tblptrl	equ	0xFF6
 12526                           tablat	equ	0xFF5
 12527                           prodh	equ	0xFF4
 12528                           prodl	equ	0xFF3
 12529                           intcon	equ	0xFF2
 12530                           intcon3	equ	0xFF0
 12531                           postinc0	equ	0xFEE
 12532                           wreg	equ	0xFE8
 12533                           postdec1	equ	0xFE5
 12534                           fsr1l	equ	0xFE1
 12535                           indf2	equ	0xFDF
 12536                           postinc2	equ	0xFDE
 12537                           postdec2	equ	0xFDD
 12538                           fsr2h	equ	0xFDA
 12539                           fsr2l	equ	0xFD9
 12540                           status	equ	0xFD8
 12541                           
 12542 ;; *************** function _service *****************
 12543 ;; Defined at:
 12544 ;;		line 325 in file "main.c"
 12545 ;; Parameters:    Size  Location     Type
 12546 ;;		None
 12547 ;; Auto vars:     Size  Location     Type
 12548 ;;  key             1   33[COMRAM] unsigned char 
 12549 ;; Return value:  Size  Location     Type
 12550 ;;                  1    wreg      void 
 12551 ;; Registers used:
 12552 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12553 ;; Tracked objects:
 12554 ;;		On entry : 0/0
 12555 ;;		On exit  : 0/0
 12556 ;;		Unchanged: 0/0
 12557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12559 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12560 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12561 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12562 ;;Total ram usage:       15 bytes
 12563 ;; Hardware stack levels used:    1
 12564 ;; Hardware stack levels required when called:    2
 12565 ;; This function calls:
 12566 ;;		_servoInterruptService
 12567 ;;		i2_startTimer
 12568 ;; This function is called by:
 12569 ;;		Interrupt level 2
 12570 ;; This function uses a non-reentrant model
 12571 ;;
 12572                           
 12573                           	psect	intcode
 12574  000008                     __pintcode:
 12575                           	opt stack 0
 12576  000008                     _service:
 12577                           	opt stack 21
 12578                           
 12579                           ;incstack = 0
 12580  000008  825D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 12581  00000A  EDFA  F014         	call	int_func,f	;refresh shadow registers
 12582                           tblptru	equ	0xFF8
 12583                           tblptrh	equ	0xFF7
 12584                           tblptrl	equ	0xFF6
 12585                           tablat	equ	0xFF5
 12586                           prodh	equ	0xFF4
 12587                           prodl	equ	0xFF3
 12588                           intcon	equ	0xFF2
 12589                           intcon3	equ	0xFF0
 12590                           postinc0	equ	0xFEE
 12591                           wreg	equ	0xFE8
 12592                           postdec1	equ	0xFE5
 12593                           fsr1l	equ	0xFE1
 12594                           indf2	equ	0xFDF
 12595                           postinc2	equ	0xFDE
 12596                           postdec2	equ	0xFDD
 12597                           fsr2h	equ	0xFDA
 12598                           fsr2l	equ	0xFD9
 12599                           status	equ	0xFD8
 12600                           
 12601                           	psect	intcode_body
 12602  0029F4                     __pintcode_body:
 12603                           	opt stack 21
 12604  0029F4                     int_func:
 12605                           	opt stack 21
 12606  0029F4  0006               	pop		; remove dummy address from shadow register refresh
 12607  0029F6  CFFA F014          	movff	pclath,??_service
 12608  0029FA  CFFB F015          	movff	pclatu,??_service+1
 12609  0029FE  CFE9 F016          	movff	fsr0l,??_service+2
 12610  002A02  CFEA F017          	movff	fsr0h,??_service+3
 12611  002A06  CFE1 F018          	movff	fsr1l,??_service+4
 12612  002A0A  CFE2 F019          	movff	fsr1h,??_service+5
 12613  002A0E  CFD9 F01A          	movff	fsr2l,??_service+6
 12614  002A12  CFDA F01B          	movff	fsr2h,??_service+7
 12615  002A16  CFF3 F01C          	movff	prodl,??_service+8
 12616  002A1A  CFF4 F01D          	movff	prodh,??_service+9
 12617  002A1E  CFF6 F01E          	movff	tblptrl,??_service+10
 12618  002A22  CFF7 F01F          	movff	tblptrh,??_service+11
 12619  002A26  CFF8 F020          	movff	tblptru,??_service+12
 12620  002A2A  CFF5 F021          	movff	tablat,??_service+13
 12621                           
 12622                           ;main.c: 327: if( servoInterruptService() )return;
 12623  002A2E  EC7D  F013         	call	_servoInterruptService	;wreg free
 12624  002A32  0900               	iorlw	0
 12625  002A34  A4D8               	btfss	status,2,c
 12626  002A36  D033               	goto	i2l188
 12627                           
 12628                           ;main.c: 329: if(TMR1IF){
 12629  002A38  A09E               	btfss	3998,0,c	;volatile
 12630  002A3A  D017               	goto	i2l189
 12631                           
 12632                           ;main.c: 333: startTimer(1,0x8683);
 12633  002A3C  0E00               	movlw	0
 12634  002A3E  6E08               	movwf	i2startTimer@timer+1,c
 12635  002A40  0E01               	movlw	1
 12636  002A42  6E07               	movwf	i2startTimer@timer,c
 12637  002A44  0E83               	movlw	131
 12638  002A46  6E09               	movwf	i2startTimer@val,c
 12639  002A48  0E86               	movlw	134
 12640  002A4A  6E0A               	movwf	i2startTimer@val+1,c
 12641  002A4C  0E00               	movlw	0
 12642  002A4E  6E0B               	movwf	i2startTimer@val+2,c
 12643  002A50  0E00               	movlw	0
 12644  002A52  6E0C               	movwf	i2startTimer@val+3,c
 12645  002A54  ECC0  F01A         	call	i2_startTimer	;wreg free
 12646                           
 12647                           ;main.c: 334: time+=1;
 12648  002A58  0E01               	movlw	1
 12649  002A5A  0101               	movlb	1	; () banked
 12650  002A5C  2748               	addwf	_time& (0+255),f,b
 12651  002A5E  0E00               	movlw	0
 12652  002A60  2349               	addwfc	(_time+1)& (0+255),f,b
 12653  002A62  234A               	addwfc	(_time+2)& (0+255),f,b
 12654  002A64  234B               	addwfc	(_time+3)& (0+255),f,b
 12655                           
 12656                           ; BSR set to: 1
 12657                           ;main.c: 335: TMR1IF = 0;
 12658  002A66  909E               	bcf	3998,0,c	;volatile
 12659                           
 12660                           ; BSR set to: 1
 12661                           ;main.c: 336: return;
 12662  002A68  D01A               	goto	i2l188
 12663  002A6A                     i2l189:
 12664                           
 12665                           ;main.c: 337: }
 12666                           ;main.c: 340: if(INT0IF){ INT0IF = 0;
 12667  002A6A  A2F2               	btfss	intcon,1,c	;volatile
 12668  002A6C  D007               	goto	i2l190
 12669  002A6E  92F2               	bcf	intcon,1,c	;volatile
 12670                           
 12671                           ;main.c: 341: batteryDetected = 1;
 12672  002A70  0E00               	movlw	0
 12673  002A72  0101               	movlb	1	; () banked
 12674  002A74  6F4D               	movwf	(_batteryDetected+1)& (0+255),b
 12675  002A76  0E01               	movlw	1
 12676  002A78  6F4C               	movwf	_batteryDetected& (0+255),b
 12677                           
 12678                           ; BSR set to: 1
 12679                           ;main.c: 342: return;
 12680  002A7A  D011               	goto	i2l188
 12681  002A7C                     i2l190:
 12682                           
 12683                           ;main.c: 343: }
 12684                           ;main.c: 346: if(INT1IF && INT1IE){INT1IF = 0;
 12685  002A7C  B0F0               	btfsc	intcon3,0,c	;volatile
 12686  002A7E  A6F0               	btfss	intcon3,3,c	;volatile
 12687  002A80  D00E               	goto	i2l188
 12688  002A82  90F0               	bcf	intcon3,0,c	;volatile
 12689                           
 12690                           ;main.c: 347: char key = (PORTB & 0xF0) >> 4;
 12691  002A84  3881               	swapf	3969,w,c	;volatile
 12692  002A86  0B0F               	andlw	15
 12693  002A88  0B0F               	andlw	15
 12694  002A8A  6E22               	movwf	service@key,c
 12695                           
 12696                           ;main.c: 348: if(key == 12)terminate = 1;
 12697  002A8C  0E0C               	movlw	12
 12698  002A8E  1822               	xorwf	service@key,w,c
 12699  002A90  A4D8               	btfss	status,2,c
 12700  002A92  D005               	goto	i2l188
 12701  002A94  0E00               	movlw	0
 12702  002A96  0101               	movlb	1	; () banked
 12703  002A98  6F57               	movwf	(_terminate+1)& (0+255),b
 12704  002A9A  0E01               	movlw	1
 12705  002A9C  6F56               	movwf	_terminate& (0+255),b
 12706  002A9E                     i2l188:
 12707  002A9E  C021  FFF5         	movff	??_service+13,tablat
 12708  002AA2  C020  FFF8         	movff	??_service+12,tblptru
 12709  002AA6  C01F  FFF7         	movff	??_service+11,tblptrh
 12710  002AAA  C01E  FFF6         	movff	??_service+10,tblptrl
 12711  002AAE  C01D  FFF4         	movff	??_service+9,prodh
 12712  002AB2  C01C  FFF3         	movff	??_service+8,prodl
 12713  002AB6  C01B  FFDA         	movff	??_service+7,fsr2h
 12714  002ABA  C01A  FFD9         	movff	??_service+6,fsr2l
 12715  002ABE  C019  FFE2         	movff	??_service+5,fsr1h
 12716  002AC2  C018  FFE1         	movff	??_service+4,fsr1l
 12717  002AC6  C017  FFEA         	movff	??_service+3,fsr0h
 12718  002ACA  C016  FFE9         	movff	??_service+2,fsr0l
 12719  002ACE  C015  FFFB         	movff	??_service+1,pclatu
 12720  002AD2  C014  FFFA         	movff	??_service,pclath
 12721  002AD6  925D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12722  002AD8  0011               	retfie		f
 12723  002ADA                     __end_of_service:
 12724                           	opt stack 0
 12725                           pclatu	equ	0xFFB
 12726                           pclath	equ	0xFFA
 12727                           tblptru	equ	0xFF8
 12728                           tblptrh	equ	0xFF7
 12729                           tblptrl	equ	0xFF6
 12730                           tablat	equ	0xFF5
 12731                           prodh	equ	0xFF4
 12732                           prodl	equ	0xFF3
 12733                           intcon	equ	0xFF2
 12734                           intcon3	equ	0xFF0
 12735                           postinc0	equ	0xFEE
 12736                           fsr0h	equ	0xFEA
 12737                           fsr0l	equ	0xFE9
 12738                           wreg	equ	0xFE8
 12739                           postdec1	equ	0xFE5
 12740                           fsr1h	equ	0xFE2
 12741                           fsr1l	equ	0xFE1
 12742                           indf2	equ	0xFDF
 12743                           postinc2	equ	0xFDE
 12744                           postdec2	equ	0xFDD
 12745                           fsr2h	equ	0xFDA
 12746                           fsr2l	equ	0xFD9
 12747                           status	equ	0xFD8
 12748                           
 12749 ;; *************** function _servoInterruptService *****************
 12750 ;; Defined at:
 12751 ;;		line 55 in file "servo.c"
 12752 ;; Parameters:    Size  Location     Type
 12753 ;;		None
 12754 ;; Auto vars:     Size  Location     Type
 12755 ;;		None
 12756 ;; Return value:  Size  Location     Type
 12757 ;;                  1    wreg      unsigned char 
 12758 ;; Registers used:
 12759 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12760 ;; Tracked objects:
 12761 ;;		On entry : 0/0
 12762 ;;		On exit  : 0/0
 12763 ;;		Unchanged: 0/0
 12764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12767 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12768 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12769 ;;Total ram usage:        4 bytes
 12770 ;; Hardware stack levels used:    1
 12771 ;; Hardware stack levels required when called:    1
 12772 ;; This function calls:
 12773 ;;		i2___awmod
 12774 ;;		i2_digitalWrite
 12775 ;;		i2_startTimer
 12776 ;; This function is called by:
 12777 ;;		_service
 12778 ;; This function uses a non-reentrant model
 12779 ;;
 12780                           
 12781                           	psect	text51
 12782  0026FA                     __ptext51:
 12783                           	opt stack 0
 12784  0026FA                     _servoInterruptService:
 12785                           	opt stack 21
 12786                           
 12787                           ;servo.c: 57: if(TMR0IF){TMR0IF = 0;
 12788                           
 12789                           ;incstack = 0
 12790  0026FA  A4F2               	btfss	intcon,2,c	;volatile
 12791  0026FC  D082               	goto	i2l5182
 12792  0026FE  94F2               	bcf	intcon,2,c	;volatile
 12793                           
 12794                           ;servo.c: 58: digitalWrite(servos[curr],0);
 12795  002700  90D8               	bcf	status,0,c
 12796  002702  3458               	rlcf	_curr,w,c
 12797  002704  6ED9               	movwf	fsr2l,c
 12798  002706  3459               	rlcf	_curr+1,w,c
 12799  002708  6EDA               	movwf	fsr2h,c
 12800  00270A  0E40               	movlw	low _servos
 12801  00270C  26D9               	addwf	fsr2l,f,c
 12802  00270E  0E01               	movlw	high _servos
 12803  002710  22DA               	addwfc	fsr2h,f,c
 12804  002712  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 12805  002716  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 12806  00271A  0E00               	movlw	0
 12807  00271C  6E0A               	movwf	i2digitalWrite@val+1,c
 12808  00271E  0E00               	movlw	0
 12809  002720  6E09               	movwf	i2digitalWrite@val,c
 12810  002722  EC12  F017         	call	i2_digitalWrite	;wreg free
 12811                           
 12812                           ;servo.c: 59: digitalWrite(servos[ (curr+1)%(n+1) ],1);
 12813  002726  0E01               	movlw	1
 12814  002728  2458               	addwf	_curr,w,c
 12815  00272A  6E01               	movwf	i2___awmod@dividend,c
 12816  00272C  0E00               	movlw	0
 12817  00272E  2059               	addwfc	_curr+1,w,c
 12818  002730  6E02               	movwf	i2___awmod@dividend+1,c
 12819  002732  0E01               	movlw	1
 12820  002734  0100               	movlb	0	; () banked
 12821  002736  25F3               	addwf	_n& (0+255),w,b
 12822  002738  6E03               	movwf	i2___awmod@divisor,c
 12823  00273A  0E00               	movlw	0
 12824  00273C  0100               	movlb	0	; () banked
 12825  00273E  21F4               	addwfc	(_n+1)& (0+255),w,b
 12826  002740  6E04               	movwf	i2___awmod@divisor+1,c
 12827  002742  ECA8  F019         	call	i2___awmod	;wreg free
 12828  002746  90D8               	bcf	status,0,c
 12829  002748  3601               	rlcf	?i2___awmod,f,c
 12830  00274A  3602               	rlcf	?i2___awmod+1,f,c
 12831  00274C  0E40               	movlw	low _servos
 12832  00274E  2401               	addwf	?i2___awmod,w,c
 12833  002750  6ED9               	movwf	fsr2l,c
 12834  002752  0E01               	movlw	high _servos
 12835  002754  2002               	addwfc	?i2___awmod+1,w,c
 12836  002756  6EDA               	movwf	fsr2h,c
 12837  002758  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 12838  00275C  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 12839  002760  0E00               	movlw	0
 12840  002762  6E0A               	movwf	i2digitalWrite@val+1,c
 12841  002764  0E01               	movlw	1
 12842  002766  6E09               	movwf	i2digitalWrite@val,c
 12843  002768  EC12  F017         	call	i2_digitalWrite	;wreg free
 12844                           
 12845                           ;servo.c: 60: startTimer(0, 0xFFFF - pulse[ (curr+1)%(n+1) ]);
 12846  00276C  0E00               	movlw	0
 12847  00276E  6E08               	movwf	i2startTimer@timer+1,c
 12848  002770  0E00               	movlw	0
 12849  002772  6E07               	movwf	i2startTimer@timer,c
 12850  002774  0EFF               	movlw	255
 12851  002776  6E10               	movwf	??_servoInterruptService& (0+255),c
 12852  002778  0EFF               	movlw	255
 12853  00277A  6E11               	movwf	(??_servoInterruptService+1)& (0+255),c
 12854  00277C  0E01               	movlw	1
 12855  00277E  2458               	addwf	_curr,w,c
 12856  002780  6E01               	movwf	i2___awmod@dividend,c
 12857  002782  0E00               	movlw	0
 12858  002784  2059               	addwfc	_curr+1,w,c
 12859  002786  6E02               	movwf	i2___awmod@dividend+1,c
 12860  002788  0E01               	movlw	1
 12861  00278A  0100               	movlb	0	; () banked
 12862  00278C  25F3               	addwf	_n& (0+255),w,b
 12863  00278E  6E03               	movwf	i2___awmod@divisor,c
 12864  002790  0E00               	movlw	0
 12865  002792  0100               	movlb	0	; () banked
 12866  002794  21F4               	addwfc	(_n+1)& (0+255),w,b
 12867  002796  6E04               	movwf	i2___awmod@divisor+1,c
 12868  002798  ECA8  F019         	call	i2___awmod	;wreg free
 12869  00279C  90D8               	bcf	status,0,c
 12870  00279E  3601               	rlcf	?i2___awmod,f,c
 12871  0027A0  3602               	rlcf	?i2___awmod+1,f,c
 12872  0027A2  0E38               	movlw	low _pulse
 12873  0027A4  2401               	addwf	?i2___awmod,w,c
 12874  0027A6  6ED9               	movwf	fsr2l,c
 12875  0027A8  0E01               	movlw	high _pulse
 12876  0027AA  2002               	addwfc	?i2___awmod+1,w,c
 12877  0027AC  6EDA               	movwf	fsr2h,c
 12878  0027AE  CFDE F012          	movff	postinc2,??_servoInterruptService+2
 12879  0027B2  CFDD F013          	movff	postdec2,??_servoInterruptService+3
 12880  0027B6  1E12               	comf	??_servoInterruptService+2,f,c
 12881  0027B8  1E13               	comf	??_servoInterruptService+3,f,c
 12882  0027BA  4A12               	infsnz	??_servoInterruptService+2,f,c
 12883  0027BC  2A13               	incf	??_servoInterruptService+3,f,c
 12884  0027BE  5010               	movf	??_servoInterruptService,w,c
 12885  0027C0  2612               	addwf	??_servoInterruptService+2,f,c
 12886  0027C2  5011               	movf	??_servoInterruptService+1,w,c
 12887  0027C4  2213               	addwfc	??_servoInterruptService+3,f,c
 12888  0027C6  C012  F009         	movff	??_servoInterruptService+2,i2startTimer@val
 12889  0027CA  C013  F00A         	movff	??_servoInterruptService+3,i2startTimer@val+1
 12890  0027CE  6A0B               	clrf	i2startTimer@val+2,c
 12891  0027D0  6A0C               	clrf	i2startTimer@val+3,c
 12892  0027D2  ECC0  F01A         	call	i2_startTimer	;wreg free
 12893                           
 12894                           ;servo.c: 62: curr = (curr+1)%(n+1);
 12895  0027D6  0E01               	movlw	1
 12896  0027D8  2458               	addwf	_curr,w,c
 12897  0027DA  6E01               	movwf	i2___awmod@dividend,c
 12898  0027DC  0E00               	movlw	0
 12899  0027DE  2059               	addwfc	_curr+1,w,c
 12900  0027E0  6E02               	movwf	i2___awmod@dividend+1,c
 12901  0027E2  0E01               	movlw	1
 12902  0027E4  0100               	movlb	0	; () banked
 12903  0027E6  25F3               	addwf	_n& (0+255),w,b
 12904  0027E8  6E03               	movwf	i2___awmod@divisor,c
 12905  0027EA  0E00               	movlw	0
 12906  0027EC  0100               	movlb	0	; () banked
 12907  0027EE  21F4               	addwfc	(_n+1)& (0+255),w,b
 12908  0027F0  6E04               	movwf	i2___awmod@divisor+1,c
 12909  0027F2  ECA8  F019         	call	i2___awmod	;wreg free
 12910  0027F6  C001  F058         	movff	?i2___awmod,_curr
 12911  0027FA  C002  F059         	movff	?i2___awmod+1,_curr+1
 12912                           
 12913                           ;servo.c: 63: return 1;
 12914  0027FE  0E01               	movlw	1
 12915  002800  0012               	return	
 12916  002802                     i2l5182:
 12917                           
 12918                           ;servo.c: 64: }
 12919                           ;servo.c: 65: return 0;
 12920  002802  0E00               	movlw	0
 12921  002804  0012               	return	
 12922  002806                     __end_of_servoInterruptService:
 12923                           	opt stack 0
 12924                           pclatu	equ	0xFFB
 12925                           pclath	equ	0xFFA
 12926                           tblptru	equ	0xFF8
 12927                           tblptrh	equ	0xFF7
 12928                           tblptrl	equ	0xFF6
 12929                           tablat	equ	0xFF5
 12930                           prodh	equ	0xFF4
 12931                           prodl	equ	0xFF3
 12932                           intcon	equ	0xFF2
 12933                           intcon3	equ	0xFF0
 12934                           postinc0	equ	0xFEE
 12935                           fsr0h	equ	0xFEA
 12936                           fsr0l	equ	0xFE9
 12937                           wreg	equ	0xFE8
 12938                           postdec1	equ	0xFE5
 12939                           fsr1h	equ	0xFE2
 12940                           fsr1l	equ	0xFE1
 12941                           indf2	equ	0xFDF
 12942                           postinc2	equ	0xFDE
 12943                           postdec2	equ	0xFDD
 12944                           fsr2h	equ	0xFDA
 12945                           fsr2l	equ	0xFD9
 12946                           status	equ	0xFD8
 12947                           
 12948 ;; *************** function i2_startTimer *****************
 12949 ;; Defined at:
 12950 ;;		line 76 in file "timer.c"
 12951 ;; Parameters:    Size  Location     Type
 12952 ;;  timer           2    6[COMRAM] int 
 12953 ;;  val             4    8[COMRAM] long 
 12954 ;; Auto vars:     Size  Location     Type
 12955 ;;		None
 12956 ;; Return value:  Size  Location     Type
 12957 ;;                  1    wreg      void 
 12958 ;; Registers used:
 12959 ;;		wreg, status,2, status,0
 12960 ;; Tracked objects:
 12961 ;;		On entry : 0/0
 12962 ;;		On exit  : 0/0
 12963 ;;		Unchanged: 0/0
 12964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12965 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12967 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12968 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12969 ;;Total ram usage:        8 bytes
 12970 ;; Hardware stack levels used:    1
 12971 ;; This function calls:
 12972 ;;		Nothing
 12973 ;; This function is called by:
 12974 ;;		_service
 12975 ;;		_servoInterruptService
 12976 ;; This function uses a non-reentrant model
 12977 ;;
 12978                           
 12979                           	psect	text52
 12980  003580                     __ptext52:
 12981                           	opt stack 0
 12982  003580                     i2_startTimer:
 12983                           	opt stack 22
 12984                           
 12985                           ;timer.c: 77: switch(timer){
 12986                           
 12987                           ;incstack = 0
 12988  003580  D012               	goto	i2l4898
 12989  003582                     i2l431:
 12990                           
 12991                           ;timer.c: 79: TMR0H = val>>8;
 12992  003582  C00A  FFD7         	movff	i2startTimer@val+1,4055	;volatile
 12993                           
 12994                           ;timer.c: 80: TMR0L = val;
 12995  003586  C009  FFD6         	movff	i2startTimer@val,4054	;volatile
 12996                           
 12997                           ;timer.c: 81: T0CON |= 1<<7;
 12998  00358A  8ED5               	bsf	4053,7,c	;volatile
 12999                           
 13000                           ;timer.c: 82: break;
 13001  00358C  0012               	return	
 13002  00358E                     i2l433:
 13003                           
 13004                           ;timer.c: 84: TMR1H = val>>8;
 13005  00358E  C00A  FFCF         	movff	i2startTimer@val+1,4047	;volatile
 13006                           
 13007                           ;timer.c: 85: TMR1L = val;
 13008  003592  C009  FFCE         	movff	i2startTimer@val,4046	;volatile
 13009                           
 13010                           ;timer.c: 86: T1CON |= 1<<0;
 13011  003596  80CD               	bsf	4045,0,c	;volatile
 13012                           
 13013                           ;timer.c: 87: break;
 13014  003598  0012               	return	
 13015  00359A                     i2l434:
 13016                           
 13017                           ;timer.c: 89: TMR3H = val>>8;
 13018  00359A  C00A  FFB3         	movff	i2startTimer@val+1,4019	;volatile
 13019                           
 13020                           ;timer.c: 90: TMR3L = val;
 13021  00359E  C009  FFB2         	movff	i2startTimer@val,4018	;volatile
 13022                           
 13023                           ;timer.c: 91: T3CON |= 1<<0;
 13024  0035A2  80B1               	bsf	4017,0,c	;volatile
 13025                           
 13026                           ;timer.c: 92: }
 13027  0035A4  0012               	return	
 13028  0035A6                     i2l4898:
 13029  0035A6  C007  F00D         	movff	i2startTimer@timer,??i2_startTimer
 13030  0035AA  C008  F00E         	movff	i2startTimer@timer+1,??i2_startTimer+1
 13031                           
 13032                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13033                           ; Switch size 1, requested type "space"
 13034                           ; Number of cases is 1, Range of values is 0 to 0
 13035                           ; switch strategies available:
 13036                           ; Name         Instructions Cycles
 13037                           ; simple_byte            4     3 (average)
 13038                           ;	Chosen strategy is simple_byte
 13039  0035AE  500E               	movf	??i2_startTimer+1,w,c
 13040  0035B0  0A00               	xorlw	0	; case 0
 13041  0035B2  A4D8               	btfss	status,2,c
 13042  0035B4  0012               	return	
 13043                           
 13044                           ; Switch size 1, requested type "space"
 13045                           ; Number of cases is 3, Range of values is 0 to 3
 13046                           ; switch strategies available:
 13047                           ; Name         Instructions Cycles
 13048                           ; simple_byte           10     6 (average)
 13049                           ;	Chosen strategy is simple_byte
 13050  0035B6  500D               	movf	??i2_startTimer,w,c
 13051  0035B8  0A00               	xorlw	0	; case 0
 13052  0035BA  B4D8               	btfsc	status,2,c
 13053  0035BC  D7E2               	goto	i2l431
 13054  0035BE  0A01               	xorlw	1	; case 1
 13055  0035C0  B4D8               	btfsc	status,2,c
 13056  0035C2  D7E5               	goto	i2l433
 13057  0035C4  0A02               	xorlw	2	; case 3
 13058  0035C6  A4D8               	btfss	status,2,c
 13059  0035C8  0012               	return	
 13060  0035CA  D7E7               	goto	i2l434
 13061  0035CC                     __end_ofi2_startTimer:
 13062                           	opt stack 0
 13063                           pclatu	equ	0xFFB
 13064                           pclath	equ	0xFFA
 13065                           tblptru	equ	0xFF8
 13066                           tblptrh	equ	0xFF7
 13067                           tblptrl	equ	0xFF6
 13068                           tablat	equ	0xFF5
 13069                           prodh	equ	0xFF4
 13070                           prodl	equ	0xFF3
 13071                           intcon	equ	0xFF2
 13072                           intcon3	equ	0xFF0
 13073                           postinc0	equ	0xFEE
 13074                           fsr0h	equ	0xFEA
 13075                           fsr0l	equ	0xFE9
 13076                           wreg	equ	0xFE8
 13077                           postdec1	equ	0xFE5
 13078                           fsr1h	equ	0xFE2
 13079                           fsr1l	equ	0xFE1
 13080                           indf2	equ	0xFDF
 13081                           postinc2	equ	0xFDE
 13082                           postdec2	equ	0xFDD
 13083                           fsr2h	equ	0xFDA
 13084                           fsr2l	equ	0xFD9
 13085                           status	equ	0xFD8
 13086                           
 13087 ;; *************** function i2_digitalWrite *****************
 13088 ;; Defined at:
 13089 ;;		line 53 in file "iopin.c"
 13090 ;; Parameters:    Size  Location     Type
 13091 ;;  pin             2    6[COMRAM] PTR int 
 13092 ;;		 -> AA_float(4), cylinderDir(4), redirectingServo(4), conveyorServo(4), 
 13093 ;;		 -> cylinderMotor(4), padServo(4), 
 13094 ;;  val             2    8[COMRAM] int 
 13095 ;; Auto vars:     Size  Location     Type
 13096 ;;  digitalWrite    2   13[COMRAM] int 
 13097 ;; Return value:  Size  Location     Type
 13098 ;;                  1    wreg      void 
 13099 ;; Registers used:
 13100 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13101 ;; Tracked objects:
 13102 ;;		On entry : 0/0
 13103 ;;		On exit  : 0/0
 13104 ;;		Unchanged: 0/0
 13105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13106 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13107 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13108 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13109 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13110 ;;Total ram usage:        9 bytes
 13111 ;; Hardware stack levels used:    1
 13112 ;; This function calls:
 13113 ;;		Nothing
 13114 ;; This function is called by:
 13115 ;;		_servoInterruptService
 13116 ;; This function uses a non-reentrant model
 13117 ;;
 13118                           
 13119                           	psect	text53
 13120  002E24                     __ptext53:
 13121                           	opt stack 0
 13122  002E24                     i2_digitalWrite:
 13123                           	opt stack 21
 13124                           
 13125                           ;iopin.c: 54: if(pin){
 13126                           
 13127                           ;incstack = 0
 13128  002E24  5007               	movf	i2digitalWrite@pin,w,c
 13129  002E26  1008               	iorwf	i2digitalWrite@pin+1,w,c
 13130  002E28  B4D8               	btfsc	status,2,c
 13131  002E2A  0012               	return	
 13132                           
 13133                           ;iopin.c: 55: int p = 1 << pin[1];
 13134  002E2C  EE20 F002          	lfsr	2,2
 13135  002E30  5007               	movf	i2digitalWrite@pin,w,c
 13136  002E32  26D9               	addwf	fsr2l,f,c
 13137  002E34  5008               	movf	i2digitalWrite@pin+1,w,c
 13138  002E36  22DA               	addwfc	fsr2h,f,c
 13139  002E38  50DF               	movf	indf2,w,c
 13140  002E3A  6E0B               	movwf	??i2_digitalWrite& (0+255),c
 13141  002E3C  0E01               	movlw	1
 13142  002E3E  6E0C               	movwf	(??i2_digitalWrite+1)& (0+255),c
 13143  002E40  0E00               	movlw	0
 13144  002E42  6E0D               	movwf	(??i2_digitalWrite+2)& (0+255),c
 13145  002E44  2A0B               	incf	??i2_digitalWrite,f,c
 13146  002E46  D003               	goto	i2u464_44
 13147  002E48                     i2u464_45:
 13148  002E48  90D8               	bcf	status,0,c
 13149  002E4A  360C               	rlcf	??i2_digitalWrite+1,f,c
 13150  002E4C  360D               	rlcf	??i2_digitalWrite+2,f,c
 13151  002E4E                     i2u464_44:
 13152  002E4E  2E0B               	decfsz	??i2_digitalWrite,f,c
 13153  002E50  D7FB               	goto	i2u464_45
 13154  002E52  C00C  F00E         	movff	??i2_digitalWrite+1,i2digitalWrite@p
 13155  002E56  C00D  F00F         	movff	??i2_digitalWrite+2,i2digitalWrite@p+1
 13156                           
 13157                           ;iopin.c: 56: if(val == 0){
 13158  002E5A  5009               	movf	i2digitalWrite@val,w,c
 13159  002E5C  100A               	iorwf	i2digitalWrite@val+1,w,c
 13160  002E5E  A4D8               	btfss	status,2,c
 13161  002E60  D02B               	goto	i2l4884
 13162                           
 13163                           ;iopin.c: 57: p ^= 0xff;
 13164  002E62  0EFF               	movlw	255
 13165  002E64  1A0E               	xorwf	i2digitalWrite@p,f,c
 13166                           
 13167                           ;iopin.c: 58: }
 13168                           ;iopin.c: 60: switch(pin[0]){
 13169  002E66  D028               	goto	i2l4884
 13170  002E68                     i2l4860:
 13171  002E68  0409               	decf	i2digitalWrite@val,w,c
 13172  002E6A  100A               	iorwf	i2digitalWrite@val+1,w,c
 13173  002E6C  A4D8               	btfss	status,2,c
 13174  002E6E  D003               	goto	i2l4864
 13175  002E70  500E               	movf	i2digitalWrite@p,w,c
 13176  002E72  1289               	iorwf	3977,f,c	;volatile
 13177  002E74  0012               	return	
 13178  002E76                     i2l4864:
 13179                           
 13180                           ;iopin.c: 62: else LATA &= p;
 13181  002E76  500E               	movf	i2digitalWrite@p,w,c
 13182  002E78  1689               	andwf	3977,f,c	;volatile
 13183                           
 13184                           ;iopin.c: 63: break;
 13185  002E7A  0012               	return	
 13186  002E7C                     i2l4866:
 13187  002E7C  0409               	decf	i2digitalWrite@val,w,c
 13188  002E7E  100A               	iorwf	i2digitalWrite@val+1,w,c
 13189  002E80  A4D8               	btfss	status,2,c
 13190  002E82  D003               	goto	i2l4870
 13191  002E84  500E               	movf	i2digitalWrite@p,w,c
 13192  002E86  128A               	iorwf	3978,f,c	;volatile
 13193  002E88  0012               	return	
 13194  002E8A                     i2l4870:
 13195                           
 13196                           ;iopin.c: 65: else LATB &= p;
 13197  002E8A  500E               	movf	i2digitalWrite@p,w,c
 13198  002E8C  168A               	andwf	3978,f,c	;volatile
 13199                           
 13200                           ;iopin.c: 66: break;
 13201  002E8E  0012               	return	
 13202  002E90                     i2l4872:
 13203  002E90  0409               	decf	i2digitalWrite@val,w,c
 13204  002E92  100A               	iorwf	i2digitalWrite@val+1,w,c
 13205  002E94  A4D8               	btfss	status,2,c
 13206  002E96  D003               	goto	i2l4876
 13207  002E98  500E               	movf	i2digitalWrite@p,w,c
 13208  002E9A  128B               	iorwf	3979,f,c	;volatile
 13209  002E9C  0012               	return	
 13210  002E9E                     i2l4876:
 13211                           
 13212                           ;iopin.c: 68: else LATC &= p;
 13213  002E9E  500E               	movf	i2digitalWrite@p,w,c
 13214  002EA0  168B               	andwf	3979,f,c	;volatile
 13215                           
 13216                           ;iopin.c: 69: break;
 13217  002EA2  0012               	return	
 13218  002EA4                     i2l4878:
 13219  002EA4  0409               	decf	i2digitalWrite@val,w,c
 13220  002EA6  100A               	iorwf	i2digitalWrite@val+1,w,c
 13221  002EA8  A4D8               	btfss	status,2,c
 13222  002EAA  D003               	goto	i2l4882
 13223  002EAC  500E               	movf	i2digitalWrite@p,w,c
 13224  002EAE  128C               	iorwf	3980,f,c	;volatile
 13225  002EB0  0012               	return	
 13226  002EB2                     i2l4882:
 13227                           
 13228                           ;iopin.c: 71: else LATD &= p;
 13229  002EB2  500E               	movf	i2digitalWrite@p,w,c
 13230  002EB4  168C               	andwf	3980,f,c	;volatile
 13231                           
 13232                           ;iopin.c: 72: }
 13233  002EB6  0012               	return	
 13234  002EB8                     i2l4884:
 13235  002EB8  C007  FFD9         	movff	i2digitalWrite@pin,fsr2l
 13236  002EBC  C008  FFDA         	movff	i2digitalWrite@pin+1,fsr2h
 13237  002EC0  CFDE F00B          	movff	postinc2,??i2_digitalWrite
 13238  002EC4  CFDD F00C          	movff	postdec2,??i2_digitalWrite+1
 13239                           
 13240                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13241                           ; Switch size 1, requested type "space"
 13242                           ; Number of cases is 1, Range of values is 0 to 0
 13243                           ; switch strategies available:
 13244                           ; Name         Instructions Cycles
 13245                           ; simple_byte            4     3 (average)
 13246                           ;	Chosen strategy is simple_byte
 13247  002EC8  500C               	movf	??i2_digitalWrite+1,w,c
 13248  002ECA  0A00               	xorlw	0	; case 0
 13249  002ECC  A4D8               	btfss	status,2,c
 13250  002ECE  0012               	return	
 13251                           
 13252                           ; Switch size 1, requested type "space"
 13253                           ; Number of cases is 4, Range of values is 0 to 3
 13254                           ; switch strategies available:
 13255                           ; Name         Instructions Cycles
 13256                           ; simple_byte           13     7 (average)
 13257                           ;	Chosen strategy is simple_byte
 13258  002ED0  500B               	movf	??i2_digitalWrite,w,c
 13259  002ED2  0A00               	xorlw	0	; case 0
 13260  002ED4  B4D8               	btfsc	status,2,c
 13261  002ED6  D7C8               	goto	i2l4860
 13262  002ED8  0A01               	xorlw	1	; case 1
 13263  002EDA  B4D8               	btfsc	status,2,c
 13264  002EDC  D7CF               	goto	i2l4866
 13265  002EDE  0A03               	xorlw	3	; case 2
 13266  002EE0  B4D8               	btfsc	status,2,c
 13267  002EE2  D7D6               	goto	i2l4872
 13268  002EE4  0A01               	xorlw	1	; case 3
 13269  002EE6  A4D8               	btfss	status,2,c
 13270  002EE8  0012               	return	
 13271  002EEA  D7DC               	goto	i2l4878
 13272  002EEC                     __end_ofi2_digitalWrite:
 13273                           	opt stack 0
 13274                           pclatu	equ	0xFFB
 13275                           pclath	equ	0xFFA
 13276                           tblptru	equ	0xFF8
 13277                           tblptrh	equ	0xFF7
 13278                           tblptrl	equ	0xFF6
 13279                           tablat	equ	0xFF5
 13280                           prodh	equ	0xFF4
 13281                           prodl	equ	0xFF3
 13282                           intcon	equ	0xFF2
 13283                           intcon3	equ	0xFF0
 13284                           postinc0	equ	0xFEE
 13285                           fsr0h	equ	0xFEA
 13286                           fsr0l	equ	0xFE9
 13287                           wreg	equ	0xFE8
 13288                           postdec1	equ	0xFE5
 13289                           fsr1h	equ	0xFE2
 13290                           fsr1l	equ	0xFE1
 13291                           indf2	equ	0xFDF
 13292                           postinc2	equ	0xFDE
 13293                           postdec2	equ	0xFDD
 13294                           fsr2h	equ	0xFDA
 13295                           fsr2l	equ	0xFD9
 13296                           status	equ	0xFD8
 13297                           
 13298 ;; *************** function i2___awmod *****************
 13299 ;; Defined at:
 13300 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 13301 ;; Parameters:    Size  Location     Type
 13302 ;;  dividend        2    0[COMRAM] int 
 13303 ;;  divisor         2    2[COMRAM] int 
 13304 ;; Auto vars:     Size  Location     Type
 13305 ;;  __awmod         1    5[COMRAM] unsigned char 
 13306 ;;  __awmod         1    4[COMRAM] unsigned char 
 13307 ;; Return value:  Size  Location     Type
 13308 ;;                  2    0[COMRAM] int 
 13309 ;; Registers used:
 13310 ;;		wreg, status,2, status,0
 13311 ;; Tracked objects:
 13312 ;;		On entry : 0/0
 13313 ;;		On exit  : 0/0
 13314 ;;		Unchanged: 0/0
 13315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13316 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13317 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13319 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13320 ;;Total ram usage:        6 bytes
 13321 ;; Hardware stack levels used:    1
 13322 ;; This function calls:
 13323 ;;		Nothing
 13324 ;; This function is called by:
 13325 ;;		_servoInterruptService
 13326 ;; This function uses a non-reentrant model
 13327 ;;
 13328                           
 13329                           	psect	text54
 13330  003350                     __ptext54:
 13331                           	opt stack 0
 13332  003350                     i2___awmod:
 13333                           	opt stack 21
 13334                           
 13335                           ;incstack = 0
 13336  003350  0E00               	movlw	0
 13337  003352  6E06               	movwf	i2___awmod@sign,c
 13338  003354  AE02               	btfss	i2___awmod@dividend+1,7,c
 13339  003356  D006               	goto	i2l4912
 13340  003358  6C01               	negf	i2___awmod@dividend,c
 13341  00335A  1E02               	comf	i2___awmod@dividend+1,f,c
 13342  00335C  B0D8               	btfsc	status,0,c
 13343  00335E  2A02               	incf	i2___awmod@dividend+1,f,c
 13344  003360  0E01               	movlw	1
 13345  003362  6E06               	movwf	i2___awmod@sign,c
 13346  003364                     i2l4912:
 13347  003364  AE04               	btfss	i2___awmod@divisor+1,7,c
 13348  003366  D004               	goto	i2l4916
 13349  003368  6C03               	negf	i2___awmod@divisor,c
 13350  00336A  1E04               	comf	i2___awmod@divisor+1,f,c
 13351  00336C  B0D8               	btfsc	status,0,c
 13352  00336E  2A04               	incf	i2___awmod@divisor+1,f,c
 13353  003370                     i2l4916:
 13354  003370  5003               	movf	i2___awmod@divisor,w,c
 13355  003372  1004               	iorwf	i2___awmod@divisor+1,w,c
 13356  003374  B4D8               	btfsc	status,2,c
 13357  003376  D018               	goto	i2l4932
 13358  003378  0E01               	movlw	1
 13359  00337A  6E05               	movwf	i2___awmod@counter,c
 13360  00337C  D004               	goto	i2l4922
 13361  00337E                     i2l4920:
 13362  00337E  90D8               	bcf	status,0,c
 13363  003380  3603               	rlcf	i2___awmod@divisor,f,c
 13364  003382  3604               	rlcf	i2___awmod@divisor+1,f,c
 13365  003384  2A05               	incf	i2___awmod@counter,f,c
 13366  003386                     i2l4922:
 13367  003386  AE04               	btfss	i2___awmod@divisor+1,7,c
 13368  003388  D7FA               	goto	i2l4920
 13369  00338A                     i2l4924:
 13370  00338A  5003               	movf	i2___awmod@divisor,w,c
 13371  00338C  5C01               	subwf	i2___awmod@dividend,w,c
 13372  00338E  5004               	movf	i2___awmod@divisor+1,w,c
 13373  003390  5802               	subwfb	i2___awmod@dividend+1,w,c
 13374  003392  A0D8               	btfss	status,0,c
 13375  003394  D004               	goto	i2l4928
 13376  003396  5003               	movf	i2___awmod@divisor,w,c
 13377  003398  5E01               	subwf	i2___awmod@dividend,f,c
 13378  00339A  5004               	movf	i2___awmod@divisor+1,w,c
 13379  00339C  5A02               	subwfb	i2___awmod@dividend+1,f,c
 13380  00339E                     i2l4928:
 13381  00339E  90D8               	bcf	status,0,c
 13382  0033A0  3204               	rrcf	i2___awmod@divisor+1,f,c
 13383  0033A2  3203               	rrcf	i2___awmod@divisor,f,c
 13384  0033A4  2E05               	decfsz	i2___awmod@counter,f,c
 13385  0033A6  D7F1               	goto	i2l4924
 13386  0033A8                     i2l4932:
 13387  0033A8  5006               	movf	i2___awmod@sign,w,c
 13388  0033AA  B4D8               	btfsc	status,2,c
 13389  0033AC  D004               	goto	i2l4936
 13390  0033AE  6C01               	negf	i2___awmod@dividend,c
 13391  0033B0  1E02               	comf	i2___awmod@dividend+1,f,c
 13392  0033B2  B0D8               	btfsc	status,0,c
 13393  0033B4  2A02               	incf	i2___awmod@dividend+1,f,c
 13394  0033B6                     i2l4936:
 13395  0033B6  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 13396  0033BA  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 13397  0033BE  0012               	return	
 13398  0033C0                     __end_ofi2___awmod:
 13399                           	opt stack 0
 13400                           pclatu	equ	0xFFB
 13401                           pclath	equ	0xFFA
 13402                           tblptru	equ	0xFF8
 13403                           tblptrh	equ	0xFF7
 13404                           tblptrl	equ	0xFF6
 13405                           tablat	equ	0xFF5
 13406                           prodh	equ	0xFF4
 13407                           prodl	equ	0xFF3
 13408                           intcon	equ	0xFF2
 13409                           intcon3	equ	0xFF0
 13410                           postinc0	equ	0xFEE
 13411                           fsr0h	equ	0xFEA
 13412                           fsr0l	equ	0xFE9
 13413                           wreg	equ	0xFE8
 13414                           postdec1	equ	0xFE5
 13415                           fsr1h	equ	0xFE2
 13416                           fsr1l	equ	0xFE1
 13417                           indf2	equ	0xFDF
 13418                           postinc2	equ	0xFDE
 13419                           postdec2	equ	0xFDD
 13420                           fsr2h	equ	0xFDA
 13421                           fsr2l	equ	0xFD9
 13422                           status	equ	0xFD8
 13423                           pclatu	equ	0xFFB
 13424                           pclath	equ	0xFFA
 13425                           tblptru	equ	0xFF8
 13426                           tblptrh	equ	0xFF7
 13427                           tblptrl	equ	0xFF6
 13428                           tablat	equ	0xFF5
 13429                           prodh	equ	0xFF4
 13430                           prodl	equ	0xFF3
 13431                           intcon	equ	0xFF2
 13432                           intcon3	equ	0xFF0
 13433                           postinc0	equ	0xFEE
 13434                           fsr0h	equ	0xFEA
 13435                           fsr0l	equ	0xFE9
 13436                           wreg	equ	0xFE8
 13437                           postdec1	equ	0xFE5
 13438                           fsr1h	equ	0xFE2
 13439                           fsr1l	equ	0xFE1
 13440                           indf2	equ	0xFDF
 13441                           postinc2	equ	0xFDE
 13442                           postdec2	equ	0xFDD
 13443                           fsr2h	equ	0xFDA
 13444                           fsr2l	equ	0xFD9
 13445                           status	equ	0xFD8
 13446                           
 13447                           	psect	rparam
 13448  0000                     pclatu	equ	0xFFB
 13449                           pclath	equ	0xFFA
 13450                           tblptru	equ	0xFF8
 13451                           tblptrh	equ	0xFF7
 13452                           tblptrl	equ	0xFF6
 13453                           tablat	equ	0xFF5
 13454                           prodh	equ	0xFF4
 13455                           prodl	equ	0xFF3
 13456                           intcon	equ	0xFF2
 13457                           intcon3	equ	0xFF0
 13458                           postinc0	equ	0xFEE
 13459                           fsr0h	equ	0xFEA
 13460                           fsr0l	equ	0xFE9
 13461                           wreg	equ	0xFE8
 13462                           postdec1	equ	0xFE5
 13463                           fsr1h	equ	0xFE2
 13464                           fsr1l	equ	0xFE1
 13465                           indf2	equ	0xFDF
 13466                           postinc2	equ	0xFDE
 13467                           postdec2	equ	0xFDD
 13468                           fsr2h	equ	0xFDA
 13469                           fsr2l	equ	0xFD9
 13470                           status	equ	0xFD8
 13471                           
 13472                           	psect	temp
 13473  00005D                     btemp:
 13474                           	opt stack 0
 13475  00005D                     	ds	1
 13476  0000                     int$flags	set	btemp
 13477                           pclatu	equ	0xFFB
 13478                           pclath	equ	0xFFA
 13479                           tblptru	equ	0xFF8
 13480                           tblptrh	equ	0xFF7
 13481                           tblptrl	equ	0xFF6
 13482                           tablat	equ	0xFF5
 13483                           prodh	equ	0xFF4
 13484                           prodl	equ	0xFF3
 13485                           intcon	equ	0xFF2
 13486                           intcon3	equ	0xFF0
 13487                           postinc0	equ	0xFEE
 13488                           fsr0h	equ	0xFEA
 13489                           fsr0l	equ	0xFE9
 13490                           wreg	equ	0xFE8
 13491                           postdec1	equ	0xFE5
 13492                           fsr1h	equ	0xFE2
 13493                           fsr1l	equ	0xFE1
 13494                           indf2	equ	0xFDF
 13495                           postinc2	equ	0xFDE
 13496                           postdec2	equ	0xFDD
 13497                           fsr2h	equ	0xFDA
 13498                           fsr2l	equ	0xFD9
 13499                           status	equ	0xFD8


Data Sizes:
    Strings     307
    Constant    174
    Data        59
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     58      92
    BANK0           128    109     117
    BANK1           256     56     118
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_18(CODE[17]), STR_17(CODE[18]), STR_16(CODE[17]), STR_15(CODE[18]), 
		 -> STR_14(CODE[17]), STR_13(CODE[19]), STR_12(CODE[17]), STR_11(CODE[18]), 
		 -> STR_10(CODE[17]), STR_9(CODE[18]), STR_8(CODE[17]), STR_7(CODE[18]), 
		 -> STR_6(CODE[8]), STR_5(CODE[15]), STR_4(CODE[14]), STR_3(CODE[17]), 
		 -> STR_2(CODE[17]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 

    setAngle@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), conveyorServo(BANK1[4]), padServo(BANK1[4]), 

    initServo@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), conveyorServo(BANK1[4]), padServo(BANK1[4]), 

    servos	PTR int [4] size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), conveyorServo(BANK1[4]), padServo(BANK1[4]), 

    digitalWrite@pin	PTR int  size(2) Largest target is 4
		 -> AA_float(COMRAM[4]), cylinderDir(BANK1[4]), redirectingServo(BANK1[4]), conveyorServo(BANK1[4]), 
		 -> cylinderMotor(BANK1[4]), padServo(BANK1[4]), 

    digitalRead@pin	PTR int  size(2) Largest target is 4
		 -> padPin2(BANK1[4]), padPin1(COMRAM[4]), cylinderDir(BANK1[4]), 


Critical Paths under _main in COMRAM

    _main->___almod
    _sortBattery->___ftdiv
    _printf->___almod
    _lcdNewline->_lcdInst
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftge->___awtoft
    _lcdClear->_lcdInst
    _lcdHome->_lcdInst
    _angleToPulse->___ftdiv
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___altoft
    ___ftadd->___ftdiv
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    ___almod->___aldiv

Critical Paths under _service in COMRAM

    _service->_servoInterruptService
    _servoInterruptService->i2_digitalWrite
    i2_startTimer->i2___awmod
    i2_digitalWrite->i2___awmod

Critical Paths under _main in BANK0

    _main->_showInterface
    _main->_sortBattery
    _sortBattery->_printf
    _showInterface->_runMenu
    _runTime->_printf
    _runStats->_printf
    _runSelect->_printf
    _runMenu->_printf
    _mainMenu->_printf
    _dateTime->_printf
    _printf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___ftsub->___ftadd
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    ___fttol->___ftadd
    ___ftmul->___ftdiv
    ___ftadd->_fround

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sortBattery

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0  590775
                                             31 BANK1     25    25      0
                            ___aldiv
                            ___almod
                        _digitalRead
                       _digitalWrite
                            _initLCD
                          _initServo
                          _initTimer
                           _lcdClear
                            _lcdHome
                           _pinSetup
                             _printf
                         _readKeypad
                      _showInterface
                        _sortBattery
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _sortBattery                                         33    33      0  112776
                                            107 BANK0      2     2      0
                                              0 BANK1     31    31      0
                           ___altoft
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                         _analogRead
                        _digitalRead
                       _digitalWrite
                           _lcdClear
                             _printf
                         _readKeypad
                           _setAngle
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                         9     5      4    1748
                                             34 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _digitalRead                                          4     2      2     386
                                             34 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           6     2      4     185
                                             34 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _showInterface                                        1     1      0  384939
                                            108 BANK0      1     1      0
                           _dateTime
                           _mainMenu
                         _readKeypad
                            _runMenu
                          _runSelect
                           _runStats
                            _runTime
 ---------------------------------------------------------------------------------
 (2) _runTime                                              0     0      0   64046
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runStats                                             0     0      0   64046
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runSelect                                            0     0      0   64046
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runMenu                                              1     1      0   64077
                                            107 BANK0      1     1      0
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _readKeypad                                           1     1      0      34
                                             34 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _mainMenu                                             0     0      0   64046
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _dateTime                                             0     0      0   64046
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              47    37     10   63851
                                             61 BANK0     46    36     10
                            ___aldiv (ARG)
                            ___almod (ARG)
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   13985
                                             24 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     421
                                             38 COMRAM     1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             34 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   13706
                                             24 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3428
                                             48 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2071
                                             34 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1985
                                             40 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     608
                                             34 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     827
                                             34 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2763
                                             42 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     848
                                             47 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1011
                                             34 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    5057
                                             46 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     142
                                             34 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1738
                                             46 COMRAM     9     3      6
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _lcdClear                                             0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdHome                                              0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initServo                                           10     6      4   24325
                                             94 BANK0     10     6      4
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _startTimer                                           8     2      6     690
                                             34 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            10     6      4   22459
                                             84 BANK0     10     6      4
                       _angleToPulse
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        23    19      4   21152
                                             61 BANK0     23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     756
                                             46 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5804
                                              9 BANK0     15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3580
                                             52 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4539
                                             34 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3025
                                             42 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    3173
                                             42 COMRAM    10     6      4
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2584
                                             34 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            4     2      2     214
                                             34 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             38 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     195
                                             36 COMRAM     2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                             34 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___almod                                             10     2      8     424
                                             48 COMRAM    10     2      8
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     556
                                             34 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _service                                             15    15      0    1449
                                             19 COMRAM    15    15      0
              _servoInterruptService
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) _servoInterruptService                                4     4      0    1168
                                             15 COMRAM     4     4      0
                          i2___awmod
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) i2_startTimer                                         8     2      6     258
                                              6 COMRAM     8     2      6
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_digitalWrite                                      9     5      4     458
                                              6 COMRAM     9     5      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___awmod                                           6     2      4     452
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv
   ___almod
     ___aldiv (ARG)
   _digitalRead
   _digitalWrite
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _startTimer
   _initTimer
   _lcdClear
     _lcdInst
       _lcdNibble
   _lcdHome
     _lcdInst
       _lcdNibble
   _pinSetup
   _printf
     ___aldiv (ARG)
     ___almod (ARG)
       ___aldiv (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
       ___awtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _readKeypad
   _showInterface
     _dateTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _mainMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _readKeypad
     _runMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _runSelect
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _runStats
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _runTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _sortBattery
     ___altoft
       ___ftpack
       _analogRead (ARG)
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftge
       ___awtoft (ARG)
         ___ftpack
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _analogRead
     _digitalRead
     _digitalWrite
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___aldiv (ARG)
       ___almod (ARG)
         ___aldiv (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _startTimer

 _service (ROOT)
   _servoInterruptService
     i2___awmod
     i2_digitalWrite
       i2___awmod (ARG)
     i2_startTimer
       i2___awmod (ARG)
   i2_startTimer
     i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     38      76       7       46.1%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     6D      75       5       91.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3A      5C       1       73.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     147      34        0.0%
DATA                 0      0     147       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Thu Mar 30 23:16:20 2017

                  ___altoft@exp 0033                               _n 00F3               main@cylinderStart 0132  
          main@cylinderBackward 012E                   ___altoft@sign 0034                     _sortBattery 0E0A  
                  ___awdiv@sign 002E             ___wmul@multiplicand 0033                     __CFG_BORV$3 000000  
                  __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000  
                  __CFG_CP3$OFF 000000                     __CFG_OSC$HS 000000                _redirectingServo 0172  
                  ___ftadd@exp1 00AD                    ___ftadd@exp2 00AC             main@cylinderForward 012C  
                  ___ftadd@sign 00AB                             l142 1988                             l143 1990  
                           l216 387C                             l153 1ACC                             l252 37B0  
                           l325 29EE                             l350 36A8                             l174 11CC  
                           l431 3536                             l255 37BC                             l424 3610  
                           l433 3542                             l434 354E                             l735 0996  
               ??_showInterface 003B                             l775 0818                             l784 0A04  
                  __CFG_CPB$OFF 000000                             _PEN 007E2A                    __CFG_CPD$OFF 000000  
                           _SEN 007E28                             _n_C 0152                    ___awmod@sign 0028  
                           wreg 000FE8                    __CFG_LVP$OFF 000000                    ___ftdiv@cntr 0083  
                  ___ftdiv@sign 0088                    __CFG_WDT$OFF 000000                            l1100 1B98  
                          l1109 1C6E                            l1118 1C98                            l1071 2F7A  
                          l1039 25D8                            l1143 24B0                            l1136 2422  
                          l1129 26C6                            l1137 244A                            l1218 3256  
                          l1228 3414                            l1094 1B36                            l1168 385E  
                          l1098 1B70                            l5202 2CAC                            l6012 2570  
                          l6004 2540                            l5214 2CE6                            l5230 2D34  
                          l5216 2CF2                            l5208 2CC4                            l6104 350A  
                          l6024 259E                            l5234 2D4A                            l5226 2D26  
                          l5218 2CF6                            l5250 2FCA                            l6034 25C6  
                          l7002 17F0                            l6116 36E8                            l6060 261C  
                          l6124 3076                            l6036 25D2                            l6028 25AE  
                          l6300 01F8                            l7020 1A32                            l5270 3034  
                          l5262 3010                            l5254 2FDC                            l5246 2FB6  
                          l4702 35E4                            l6046 328A                            l6134 30D2  
                          l6206 3248                            l6222 3406                            l6214 33D2  
                          l6230 349E                            l6302 0210                            l5256 2FE8  
                          l6048 3296                            l6128 30A6                            l6216 33DE  
                          l6312 0256                            l6320 02B2                            l6240 0022  
                          l7024 1A4A                            l7016 1998                            l5258 2FEC  
                          l5266 301E                            l5610 2F14                            l6066 264E  
                          l6170 232C                            l4722 355A                            l6218 33E2  
                          l6306 0224                            l6250 0058                            l7034 1A6E  
                          l4708 35EC                            l5620 2F70                            l5612 2F32  
                          l5604 2EFC                            l5700 1CC2                            l6180 2362  
                          l6148 2286                            l6228 3492                            l6500 0A26  
                          l6412 067A                            l6308 023E                            l6244 0038  
                          l5710 1D10                            l6086 269C                            l6166 2318  
                          l6510 0A76                            l6422 06D0                            l6326 02CC  
                          l6318 026E                            l6270 0124                            l6246 004E  
                          l5616 2F48                            l5608 2F0A                            l5720 1FD0  
                          l6184 237E                            l6176 2348                            l6600 0DBA  
                          l6512 0A7C                            l6504 0A4E                            l6432 0702  
                          l6416 06A2                            l6408 062A                            l6360 0428  
                          l6352 03C0                            l6336 0312                            l6280 0186  
                          l6256 0088                            l6264 00FC                            l4690 35CE  
                          l5618 2F66                            l6178 2358                            l6194 3208  
                          l5802 31DC                            l6602 0DCC                            l6450 07E6  
                          l6434 0716                            l6426 06DE                            l6370 04AA  
                          l6282 018C                            l6274 0160                            l5652 1B44  
                          l5740 2058                            l6196 3214                            l5900 1638  
                          l6604 0DD4                            l6524 0AC2                            l6540 0B0E  
                          l6452 07FA                            l6428 06F4                            l6444 07CA  
                          l6380 051A                            l6364 044E                            l6292 01C0  
                          l6284 0192                            l6276 0176                            l5750 2096  
                          l5726 200A                            l6198 3218                            l5830 332E  
                          l5822 330E                            l5814 32F4                            l6550 0B78  
                          l6526 0AC8                            l6542 0B20                            l6462 0840  
                          l6446 07D8                            l6438 073E                            l6390 0578  
                          l6366 0464                            l6286 0198                            l6606 0DEA  
                          l4696 35D8                            l5680 1BFE                            l5664 1B8E  
                          l5744 2076                            l5824 3316                            l6472 096C  
                          l6456 081C                            l6376 04F4                            l6368 0494  
                          l6296 01E6                            l6800 284C                            l6632 2DA0  
                          l5682 1C0C                            l5674 1BD0                            l5658 1B7E  
                          l5754 20B4                            l5770 3176                            l5826 331A  
                          l5834 3338                            l5818 3300                            l5906 16E2  
                          l6570 0C30                            l6562 0BE4                            l6546 0B48  
                          l6474 097A                            l6466 0892                            l6394 05DE  
                          l6298 01F2                            l6650 2DDC                            l6642 2DC2  
                          l5692 1C54                            l5684 1C1A                            l5860 1E86  
                          l6564 0BEE                            l6556 0BAC                            l6396 05E4  
                          l6812 2886                            l6644 2DC8                            l6636 2DAE  
                          l5694 1C62                            l5686 1C26                            l6750 2AE6  
                          l5934 23E8                            l5782 319C                            l5838 3346  
                          l5918 38E4                            l6582 0C78                            l6486 09BE  
                          l6478 0988                            l6830 28CE                            l6654 2DEA  
                          l6638 2DB4                            l5928 23BC                            l5784 31A4  
                          l5776 3186                            l6592 0CC6                            l6584 0C84  
                          l6576 0C5C                            l6568 0C26                            l6816 2890  
                          l6840 28F4                            l6672 2964                            l6664 290C  
                          l6648 2DD6                            l6656 2DF0                            l6904 111C  
                          l6690 2BD2                            l6754 2B0E                            l5794 31C4  
                          l5786 31A8                            l5882 1434                            l6594 0D46  
                          l6834 28DE                            l6826 28BE                            l6818 2898  
                          l6682 29BC                            l6922 119C                            l6914 116C  
                          l6756 2B14                            l5964 2476                            l5868 1F4E  
                          l5892 1504                            l6588 0C9E                            l6676 2990  
                          l6668 2938                            l6940 1242                            l6932 11DC  
                          l6694 2C28                            l5990 24FE                            l5974 249E  
                          l5798 31CE                            l6838 28E8                            l6782 2806  
                          l6934 1204                            l6870 0ECA                            l5984 24E0  
                          l5976 24AA                            l5968 2486                            l5888 14DE  
                          l6784 280A                            l6698 2C50                            l6786 2814  
                          l6946 1272                            l6796 283E                            l6788 2818  
                          l6884 0FA0                            l6894 1088                            l6896 10B6  
                          l6994 17AC                            l6978 1710                            _EEIF 007D0C  
                          STR_1 FFF6                            STR_2 FFC0                            STR_3 FFAF  
                          STR_4 FFE0                            STR_5 FFD1                            STR_6 FFEE  
                          STR_7 FEF0                            STR_8 FF9E                            STR_9 FEDE  
                          _LATA 000F89                            _LATB 000F8A                            _LATC 000F8B  
                          _LATD 000F8C                            _LATE 000F8D                    printf@tmpval 00D7  
                          u6111 25FE                            u6131 2630                            _PEIE 007F96  
                          u6221 2262                            u6240 22AC                            u5441 1AE4  
                          u5451 1B02                            _RCEN 007E2B                            u6245 22A2  
                          u6510 0358                            u7144 2928                            u7145 2924  
                          u7154 2954                            u5651 1FAC                            u6515 034C  
                          u7155 2950                            u7164 2980                            u7084 2D86  
                          u7165 297C                            u7085 2D80                            u7174 29AC  
                          u5671 1FE6                            u7175 29A8                            u6730 0810  
                          u7530 1968                            u5931 23A0                            u7540 196A  
                          u5951 23CC                            u7707 361C                            u7627 1898  
                          u7717 3650                            u7637 0E46                            u7727 3894  
                          u7647 0EFC                            u7737 38A6                            u7657 101A  
                          u7747 343E                            u7667 122A                            u7757 344C  
                          u7677 1262                            u7767 3472                            u7687 129C  
                          u7777 3480                            u7697 3880                            _RSEN 007E29  
                          _n_AA 0150                            _n_9V 014E                            _main 1708  
                          _curr 0058                    ___ftpack@arg 0023                            _keys FEB3  
                  ___ftpack@exp 0026                            _time 0148                            fsr0h 000FEA  
                          fsr1h 000FE2                            fsr2h 000FDA                            fsr0l 000FE9  
                          indf2 000FDF                            fsr1l 000FE1                            fsr2l 000FD9  
                          btemp 005D                            prodh 000FF4                            prodl 000FF3  
                          start 000E                   __CFG_IESO$OFF 000000                   __CFG_MCLRE$ON 000000  
                  ___ftmul@cntr 0096                    ___param_bank 000000                    ___ftmul@sign 0097  
                  ___fttol@exp1 00BC                    ___fttol@lval 00B8            __end_ofi2_startTimer 35CC  
          __end_of_angleToPulse 224C                 __end_of___aldiv 2D5C                 __end_of___almod 3046  
                         ?_main 0001                           _ACKEN 007E2C                           _ACKDT 007E2D  
               __end_of___awdiv 31E6                           _EEADR 000FA9                 __end_of___ftadd 1D36  
                         STR_10 FF6B                           STR_11 FF02                           STR_12 FF5A  
                         STR_13 FECB                           STR_14 FF7C                           STR_15 FF14  
                         STR_16 FF49                           STR_17 FF26                           STR_18 FF8D  
                         STR_19 FF38                 __end_of___awmod 3350                 __end_of___ftdiv 26FA  
       ??_servoInterruptService 0010                 __end_of___ftneg 386C                 __end_of___lldiv 3268  
               __end_of___ftmul 20F4                           _T0CON 000FD5                 ___awdiv@divisor 002B  
                         _T1CON 000FCD                 __end_of___llmod 3426                 __end_of___ftsub 3534  
               __end_of___fttol 2390                           _T3CON 000FB1                           i2l190 2A7C  
                         i2l431 3582                           i2l433 358E                           i2l434 359A  
                         i2l188 2A9E                           i2l189 2A6A                 ___awdiv@counter 002D  
                         _TMR0H 000FD7                           _TMR1H 000FCF                           _TMR0L 000FD6  
                         _TMR3H 000FB3                           _TMR1L 000FCE                           _TMR3L 000FB2  
                         _PORTA 000F80                           _PORTB 000F81                           _PORTC 000F82  
                         _PORTD 000F83                           _TRISA 000F92                           _TRISB 000F93  
                         _TRISC 000F94                           _TRISD 000F95                           _TRISE 000F96  
                 __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000  
                 __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000                 __end_of_lcdHome 391C  
                  ___lltoft@exp 0033                   _conveyorServo 015E                 __end_of_lcdInst 38B0  
                __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000  
                __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000                   __CFG_WRTB$OFF 000000  
                 __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000                 __end_of_initLCD 365C  
                __CFG_EBTRB$OFF 000000                   ___awtoft@sign 002E                           _angle 0044  
               __end_of_dpowers FE45                           _count 0056                           _scale 12F2  
               __end_of_isdigit 38EC                   ___ftpack@sign 0027                           _pulse 0138  
                         _putch 386C                           pclath 000FFA                           tablat 000FF5  
               __end_of_service 2ADA                 __end_of_runMenu 373E                 __end_of_runTime 3764  
                         status 000FD8              __size_ofi2___awmod 0070                  __CFG_PBADEN$ON 000000  
          __end_of_digitalWrite 2E24                 __initialization 30D6                    __end_of_main 1ACE  
                  __end_of_keys FEC4                          ??_main 011F                   ___fttol@sign1 00B7  
                 __activetblptr 000002            __size_of_digitalRead 00EA            __size_of__tdiv_to_l_ 0132  
                  _stoppingTime 015C                 i2digitalWrite@p 000E                          _ADCON0 000FC2  
                        _ADCON1 000FC1                          _ADCON2 000FC0                __end_of___altoft 32E0  
              ___llmod@dividend 0030                          ?_scale 0098                          _ADRESH 000FC4  
                        _EEADRH 000FAA                          _ADRESL 000FC3                          _EEDATA 000FA8  
                        _EECON1 000FA6                          _EECON2 000FA7                ___awdiv@dividend 0029  
              __end_of___awtoft 370C                          ?_putch 0001                __end_of___ftpack 2F9A  
              __end_of___lltoft 34E8                          _INT0IE 007F94                          _INT0IF 007F91  
                        _INT1IE 007F83                          _INT1IF 007F80                    sortBattery@V 0116  
                  sortBattery@i 0119                          i2l5182 2802                          i2l4920 337E  
                        i2l4912 3364                          i2l4922 3386                          i2l4924 338A  
                        i2l4932 33A8                          i2l4916 3370                          i2l4860 2E68  
                        i2l4870 2E8A                          i2l4936 33B6                          i2l4928 339E  
                        i2l4872 2E90                          i2l4864 2E76                          i2l4882 2EB2  
                        i2l4866 2E7C                          i2l4876 2E9E                          i2l4884 2EB8  
                        i2l4878 2EA4                          i2l4898 35A6                          _TMR0IE 007F95  
                        _TMR0IF 007F92                          _TMR1IE 007CE8                          _TMR1IF 007CF0  
                        _TMR3IE 007D01                          _SSPADD 000FC8                          _TRISC3 007CA3  
                        _TRISC4 007CA4                          _SSPBUF 000FC9                __end_of_dateTime 3822  
              __end_of_lcdClear 3914               _angleToPulse$1352 00CD                  __CFG_XINST$OFF 000000  
              __end_of__powers_ FE93                          ___ftge 3046                __end_of_mainMenu 37FC  
                     ??___aldiv 002B                       ??___almod 0039                          ___wmul 3822  
                     ??___awdiv 002D                       ??___ftadd 00A8                  __CFG_STVREN$ON 000000  
                     ??___awmod 0027                       ??___ftdiv 0080                       ??___ftneg 0026  
                     ??___lldiv 002B                       ??___ftmul 008F                       ??___llmod 0038  
                     ??___ftsub 003B                       ??___fttol 00B2                          _fround 1D36  
                        clear_0 313C                          clear_1 314E                ___awdiv@quotient 002F  
               ___awmod@divisor 0025                       ??_lcdHome 0027                 ___awmod@counter 0027  
                        _servos 0140                       ??_lcdInst 0025                          _printf 0012  
              __end_of_pinSetup 369C                __end_of_setAngle 2C90               analogRead@channel 0023  
         ___ftmul@f3_as_product 0093                       ??_initLCD 0027                    __pdataCOMRAM 003B  
                     ??_isdigit 0023               __end_ofi2___awmod 33C0                   setAngle@angle 00D6  
                  __mediumconst FE1C                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8                   setAngle@motor 00D4                       ??_service 0014  
                     ??_runMenu 003B                __end_of_runStats 378A                       ??_runTime 003B  
                i2___awmod@sign 0006                      __accesstop 0080         __end_of__initialization 3154  
                    ___altoft@c 002B                      ___ftadd@f1 00A2                      ___ftadd@f2 00A5  
                    ___ftge@ff1 002F                      ___ftge@ff2 0032                   ___rparam_used 000001  
                    ___ftdiv@f1 0035                      ___ftdiv@f2 0038                      ___ftdiv@f3 0084  
                    ___ftneg@f1 0023                      ___awtoft@c 002B           __size_ofi2_startTimer 004C  
                    ___ftmul@f1 0089                      ___ftmul@f2 008C                      ___ftsub@f1 00AE  
                    ___ftsub@f2 00B1                      ___fttol@f1 00AE            __end_of_happynewyear FECB  
                __pcstackCOMRAM 0001           __size_of_angleToPulse 0158                    __pidataBANK0 391C  
                  __pidataBANK1 38B0                      ___lltoft@c 002B                   _cylinderMotor 0166  
                 __end_of_scale 1708                    ?_sortBattery 0001                   __end_of_putch 388E  
            __size_of_lcdNibble 0066                      __div_to_l_ 24C2                 __div_to_l_@exp1 002E  
               __div_to_l_@cntr 002D                         ??_scale 003B                 __div_to_l_@quot 0029  
                       ??_putch 0027                    i2_startTimer 3580                      __pbssBANK0 00F3  
                    __pbssBANK1 0138                    _angleToPulse 20F4           __size_of_digitalWrite 00C8  
            __size_of_initTimer 004A              __size_of_initServo 00E2                      _analogRead 369C  
                 __div_to_l_@f1 0023                   __div_to_l_@f2 0026                         ?___ftge 002F  
                       ?___wmul 0031                _sortBattery$1351 0100           sortBattery@resolution 010C  
                     ?___altoft 002B                         ?_fround 0098                      _lcdNewline 3904  
                     ?___awtoft 002B                       ?___ftpack 0023                         ?_printf 00BD  
                     ?___lltoft 002B  __size_of_servoInterruptService 010C   __end_of_servoInterruptService 2806  
         __end_of_showInterface 290A                       ?_dateTime 0001               i2startTimer@timer 0007  
                     ?_lcdClear 0001              __size_of_runSelect 0026                angleToPulse@a000 00D0  
              angleToPulse@a180 00C9                    _digitalWrite 2D5C                         _SSPCON1 000FC6  
                       _SSPCON2 000FC5                         _SSPSTAT 000FC7                       ?_mainMenu 0001  
       __size_ofi2_digitalWrite 00C8                         _V_LIM_C 0041             main@lastBatteryTime 0130  
                     ?_pinSetup 0001                       ?_setAngle 00D4               __end_of_lcdNibble 348C  
             __end_of__npowers_ FE6C                         __Hparam 0000                      _scale$1355 009B  
                       __Lparam 0000                         ___aldiv 2C90                         ___almod 2F9A  
               __size_of___ftge 0090                         ___awdiv 3162                         ___ftadd 1ACE  
                       ___awmod 32E0                      _readKeypad 37B0                         ___ftdiv 25EA  
                       ___ftneg 3848                         ___lldiv 31E6                 __size_of___wmul 0026  
                       ___ftmul 1F96                         ___llmod 33C0                         ___ftsub 34E8  
                       ___fttol 224C                       ?_runStats 0001                         _n_OTHER 0154  
                    ??___altoft 002F                         __pcinit 30D6                      ??___awtoft 002E  
                    ??___ftpack 0028                 __size_of_fround 0260                         __ramtop 1000  
                       _lcdHome 3914                         _lcdInst 388E                      ??___lltoft 002F  
                       __ptext0 1708                         __ptext1 0E0A                         __ptext2 2D5C  
                       __ptext3 290A                         __ptext4 369C                         __ptext5 2806  
                       __ptext6 373E                         __ptext7 3764                         __ptext8 378A  
                       __ptext9 370C                 __size_of_printf 0DF8                         _padPin1 004E  
                       _padPin2 016A                         _padPin3 0052                   startTimer@val 0025  
                       _initLCD 3616               __end_of_hexpowers FEB3                     ?__div_to_l_ 0023  
                       _lastKey 005C               __end_of_initTimer 3616               __end_of_initServo 2BBC  
                       _dpowers FE1D                         _isdigit 38CE                ___awmod@dividend 0023  
                    ??_dateTime 003B                ___aldiv@dividend 0023                      ??_lcdClear 0027  
                       _service 0008                         _runMenu 370C                         _runTime 373E  
                __pintcode_body 29F4            end_of_initialization 3154                      ??_mainMenu 003B  
                 __Lmediumconst FE1C                         int_func 29F4                  digitalRead@pin 0023  
                   ?_analogRead 0023                      ??_pinSetup 0023                      ??_setAngle 00D8  
               ___lldiv@divisor 0027                 ___lldiv@counter 002F                  setAngle@period 00DA  
             __end_of_runSelect 37B0                         printf@c 00EA                         printf@f 00BD  
              ___aldiv@quotient 002D                         postdec1 000FE5                         postdec2 000FDD  
               _batteryDetected 014C                         postinc0 000FEE                         postinc2 000FDE  
                    ??_runStats 003B                  __tdiv_to_l_@f1 0023                  __tdiv_to_l_@f2 0026  
                 ??_digitalRead 0025                     ?_lcdNewline 0001                   ??__tdiv_to_l_ 0029  
                     _PORTBbits 000F81            __size_of_sortBattery 04E8                showInterface@key 00EC  
           _redirectAngle_OTHER 00F1                    _happynewyear FEC4              angleToPulse@offset 00C5  
            sortBattery@V_float 0102                       i2___awmod 3350                      _startTimer 3534  
                   ___ftdiv@exp 0087                     printf@width 00E4             __size_of__div_to_l_ 0128  
                   ___ftmul@exp 0092                     ?_readKeypad 0001                  __end_of___ftge 30D6  
                __end_of___wmul 3848                   __pidataCOMRAM 38EC                  __end_of_fround 1F96  
                __end_of_printf 0E0A             __size_of_analogRead 0038             start_initialization 30D6  
           __end_of_digitalRead 29F4             __end_of__tdiv_to_l_ 24C2                  initServo@angle 00E0  
                initTimer@timer 0023                  initServo@motor 00DE                      ?i2___awmod 0001  
                i2_digitalWrite 2E24             __size_of_lcdNewline 0008                 ___llmod@divisor 0034  
               ___llmod@counter 0038                      initServo@i 00E6                        ??___ftge 0035  
                      ??___wmul 0035                     __pdataBANK0 00ED                     __pdataBANK1 0158  
              __CFG_LPT1OSC$OFF 000000                        ??_fround 003B                        ??_printf 00C7  
             __size_of___altoft 0078                      fround@prec 00A1               __size_of___awtoft 0038  
             __size_of___ftpack 00AE               __size_of___lltoft 005C                     __pbssCOMRAM 0052  
                 __pcstackBANK0 0080                   __pcstackBANK1 0100          __end_ofi2_digitalWrite 2EEC  
        sortBattery@targetAngle 0114               __size_of_dateTime 0026                     ?_startTimer 0023  
             __size_of_lcdClear 0008             __size_of_readKeypad 0026               __size_of_mainMenu 0026  
             i2digitalWrite@pin 0007               i2digitalWrite@val 0009               __CFG_CCP2MX$PORTC 000000  
             __size_of_pinSetup 0040               __size_of_setAngle 00D4                       __pintcode 0008  
                 __pmediumconst FE1C                       _lcdNibble 3426                        ?___aldiv 0023  
                      ?___almod 0031                        ?___awdiv 0029                        ?___ftadd 00A2  
                      ?___awmod 0023                        ?___ftdiv 0035                        ?___ftneg 0023  
                      ?___lldiv 0023                        ?___ftmul 0089                        ?___llmod 0030  
                      ?___ftsub 00AE                       __npowers_ FE45                        ?___fttol 00AE  
                   _digitalRead 290A                ___almod@dividend 0031                        ?_lcdHome 0001  
                      ?_lcdInst 0001                     __tdiv_to_l_ 2390               __size_of_runStats 0026  
                  ??__div_to_l_ 0029                        ?_initLCD 0001                 startTimer@timer 0023  
                      ?_isdigit 0001                        ?_service 0001                       _hexpowers FE93  
                      ?_runMenu 0001                       _initTimer 35CC                       _initServo 2ADA  
                      ?_runTime 0001                 ?i2_digitalWrite 0007           _servoInterruptService 26FA  
                   ??i2___awmod 0005                  __size_of_scale 0416                  __size_of_putch 0022  
                      _AA_float 004A                 ___aldiv@divisor 0027                 ___aldiv@counter 002B  
                sortBattery@Vcc 0109                  ___wmul@product 0035                        _LATDbits 000F8C  
                  ??_analogRead 0027              __end_of__div_to_l_ 25EA                        i2u464_44 2E4E  
                      i2u464_45 2E48          __size_of_showInterface 0104                __CFG_WDTPS$32768 000000  
                    ?_lcdNibble 0001                  _padAngle_CLOSE 00ED                       _terminate 0156  
                 digitalWrite@p 002A                      service@key 0022                    ??_lcdNewline 0027  
           __size_of_startTimer 004C                       _runSelect 378A               angleToPulse@angle 00BD  
               main@cylinderDur 0134               ___wmul@multiplier 0031                   lcdNibble@data 0024  
                    printf@flag 00E6                   lcdNibble@temp 0023                      printf@fval 00DD  
                    printf@prec 00E8              __end_of_analogRead 36D4                        _V_LIM_AA 003E  
                      _V_LIM_9V 003B                      runMenu@key 00EB                      ?_initTimer 0023  
                    ?_initServo 00DE               sortBattery@signal 0107        sortBattery@pos_v_counter 0105  
                     copy_data0 30EA                       copy_data1 310A                       copy_data2 312A  
            i2___awmod@dividend 0001              __end_of_lcdNewline 390C                   readKeypad@key 0023  
                      __Hrparam 0000                        __Lrparam 0000              __CFG_BOREN$SBORDIS 000000  
                  ??_readKeypad 0023                   ??_sortBattery 00EB                __size_of___aldiv 00CC  
              __size_of___almod 00AC                __size_of___awdiv 0084                __size_of___ftadd 0268  
              __size_of___awmod 0070                __size_of___ftdiv 0110                __size_of___ftneg 0024  
              __size_of___lldiv 0082                        ___altoft 3268                __size_of___ftmul 015E  
              __size_of___llmod 0066                __size_of___ftsub 004C                __size_of___fttol 0144  
                    ?_runSelect 0001                        ___awtoft 36D4                        ___ftpack 2EEC  
                   _fround$1353 009E                     _fround$1354 009B                     _cylinderDir 0162  
                      ___lltoft 348C                     _isdigit$978 0024                __size_of_lcdHome 0008  
              __size_of_lcdInst 0022                       setAngle@i 00DC                __size_of_initLCD 0046  
                      _dateTime 37FC                __size_of_isdigit 001E          ?_servoInterruptService 0001  
                 _showInterface 2806                        _lcdClear 390C                        __ptext10 37B0  
                      __ptext11 37D6                        __ptext20 32E0                        __ptext12 37FC  
                      __ptext21 3162                        __ptext13 0012                        __ptext30 390C  
                      __ptext22 2390                        __ptext14 12F2                        __ptext31 365C  
                      __ptext23 24C2                        __ptext15 386C                        __ptext40 1ACE  
                      __ptext32 3914                        __ptext24 348C                        __ptext16 3904  
                      __ptext41 36D4                        __ptext33 2ADA                        __ptext25 33C0  
                      __ptext17 38CE                        __ptext42 3268                        __ptext34 3534  
                      __ptext26 31E6                        __ptext18 1D36                        __ptext51 26FA  
                      __ptext43 2EEC                        __ptext35 2BBC                        __ptext27 34E8  
                      __ptext19 3822                        __ptext52 3580                        __ptext44 35CC  
                      __ptext36 20F4                        __ptext28 3848                        __ptext53 2E24  
                      __ptext45 3616                        __ptext37 224C                        __ptext29 3046  
                      __ptext54 3350                        __ptext46 388E                        __ptext38 1F96  
                      __ptext47 3426                        __ptext39 25EA                        __ptext48 2F9A  
                      __ptext49 2C90                        __powers_ FE6C                __size_of_service 2AD2  
              __size_of_runMenu 0032                 i2startTimer@val 0009                __size_of_runTime 0026  
               ___almod@divisor 0035                   ?i2_startTimer 0007                        _mainMenu 37D6  
                      _padServo 016E                 ___almod@counter 0039              __end_of_readKeypad 37D6  
                 ?_angleToPulse 00BD                   __size_of_main 03C6                        _pinSetup 365C  
                      _setAngle 2BBC                        _prevTime 005A                sortBattery@V_220 011C  
                   ??_lcdNibble 0023                   _padAngle_OPEN 0046                        int$flags 005D  
              sortBattery@i_222 0112                        _runStats 3764                sortBattery@V_max 010F  
                     printf@idx 00D0                       printf@len 00D3                       printf@exp 00DB  
                     printf@val 00E0                        main@prev 0136               i2___awmod@divisor 0003  
                     putch@data 0027               i2___awmod@counter 0005             __end_of_sortBattery 12F2  
                    _INTCONbits 000FF2                  ?_showInterface 0001                   ?_digitalWrite 0023  
                   ??_initTimer 0025                     ??_initServo 00E2                        isdigit@c 0025  
                      scale@scl 009E                  ??i2_startTimer 000D                    ??_startTimer 0029  
                      intlevel2 0000                __tdiv_to_l_@exp1 0031                __tdiv_to_l_@cntr 0030  
                ??_angleToPulse 00C1                __tdiv_to_l_@quot 002C                ___lldiv@dividend 0023  
              _redirectAngle_AA 015A                _redirectAngle_9V 0048                        printf@ap 00D5  
                      printf@cp 00D1                     lcdInst@data 0026                    ?_digitalRead 0023  
                   ??_runSelect 003B                    ?__tdiv_to_l_ 0023              __end_of_startTimer 3580  
                   _printf$1356 00CD                ??i2_digitalWrite 000B                ___lldiv@quotient 002B  
                ??_digitalWrite 0027                    ___aldiv@sign 002C                 _redirectAngle_C 00EF  
              _padAngle_NEUTRAL 0158                 digitalWrite@pin 0023                 digitalWrite@val 0025  
                  ___almod@sign 003A  
