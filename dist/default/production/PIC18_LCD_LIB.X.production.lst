

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Mar 12 00:39:16 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    40                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    41  0000                     
    42                           ; Version 1.40
    43                           ; Generated 01/12/2016 GMT
    44                           ; 
    45                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC18F4620 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76  0000                     
    77                           	psect	idataCOMRAM
    78  000FFA                     __pidataCOMRAM:
    79                           	opt stack 0
    80                           
    81                           ;initializer for _angle
    82  000FFA  F159               	dw	61785
    83  000FFC  0000               	dw	0
    84                           
    85                           ;initializer for _nServo
    86  000FFE  0002               	dw	2
    87                           
    88                           	psect	idataBANK0
    89  000EE8                     __pidataBANK0:
    90                           	opt stack 0
    91                           
    92                           ;initializer for _pulse
    93  000EE8  05DC               	dw	1500
    94  000EEA  0000               	dw	0
    95  000EEC  05DC               	dw	1500
    96  000EEE  0000               	dw	0
    97  000EF0  0000               	dw	0
    98  000EF2  0000               	dw	0
    99  000EF4  0000               	dw	0
   100  000EF6  0000               	dw	0
   101                           
   102                           ;initializer for _sequence
   103  000EF8  04E2               	dw	1250
   104  000EFA  0000               	dw	0
   105  000EFC  04E2               	dw	1250
   106  000EFE  0000               	dw	0
   107  000F00  C350               	dw	50000
   108  000F02  0000               	dw	0
   109  000F04  0000               	dw	0
   110  000F06  0000               	dw	0
   111                           
   112                           ;initializer for _order
   113  000F08  0000               	dw	0
   114  000F0A  0001               	dw	1
   115  000F0C  0002               	dw	2
   116  000F0E  0003               	dw	3
   117                           
   118                           ;initializer for _pin
   119  000F10  0000               	dw	0
   120  000F12  0001               	dw	1
   121  000F14  0000               	dw	0
   122  000F16  0000               	dw	0
   123                           
   124                           ;initializer for _port
   125  000F18  0002               	dw	2
   126  000F1A  0002               	dw	2
   127  000F1C  FFFF               	dw	65535
   128  000F1E  FFFF               	dw	65535
   129                           
   130                           	psect	mediumconst
   131  00FEA0                     __pmediumconst:
   132                           	opt stack 0
   133  00FEA0  00                 	db	0
   134  00FEA1                     _dpowers:
   135                           	opt stack 0
   136  00FEA1  0001               	dw	1
   137  00FEA3  0000               	dw	0
   138  00FEA5  000A               	dw	10
   139  00FEA7  0000               	dw	0
   140  00FEA9  0064               	dw	100
   141  00FEAB  0000               	dw	0
   142  00FEAD  03E8               	dw	1000
   143  00FEAF  0000               	dw	0
   144  00FEB1  2710               	dw	10000
   145  00FEB3  0000               	dw	0
   146  00FEB5  86A0               	dw	34464
   147  00FEB7  0001               	dw	1
   148  00FEB9  4240               	dw	16960
   149  00FEBB  000F               	dw	15
   150  00FEBD  9680               	dw	38528
   151  00FEBF  0098               	dw	152
   152  00FEC1  E100               	dw	57600
   153  00FEC3  05F5               	dw	1525
   154  00FEC5  CA00               	dw	51712
   155  00FEC7  3B9A               	dw	15258
   156  00FEC9                     __end_of_dpowers:
   157                           	opt stack 0
   158  00FEC9                     _hexpowers:
   159                           	opt stack 0
   160  00FEC9  0001               	dw	1
   161  00FECB  0000               	dw	0
   162  00FECD  0010               	dw	16
   163  00FECF  0000               	dw	0
   164  00FED1  0100               	dw	256
   165  00FED3  0000               	dw	0
   166  00FED5  1000               	dw	4096
   167  00FED7  0000               	dw	0
   168  00FED9  0000               	dw	0
   169  00FEDB  0001               	dw	1
   170  00FEDD  0000               	dw	0
   171  00FEDF  0010               	dw	16
   172  00FEE1  0000               	dw	0
   173  00FEE3  0100               	dw	256
   174  00FEE5  0000               	dw	0
   175  00FEE7  1000               	dw	4096
   176  00FEE9                     __end_of_hexpowers:
   177                           	opt stack 0
   178  00FEE9                     _keys:
   179                           	opt stack 0
   180  00FEE9  31                 	db	49
   181  00FEEA  32                 	db	50
   182  00FEEB  33                 	db	51
   183  00FEEC  41                 	db	65
   184  00FEED  34                 	db	52
   185  00FEEE  35                 	db	53
   186  00FEEF  36                 	db	54
   187  00FEF0  42                 	db	66
   188  00FEF1  37                 	db	55
   189  00FEF2  38                 	db	56
   190  00FEF3  39                 	db	57
   191  00FEF4  43                 	db	67
   192  00FEF5  2A                 	db	42
   193  00FEF6  30                 	db	48
   194  00FEF7  23                 	db	35
   195  00FEF8  44                 	db	68
   196  00FEF9  00                 	db	0
   197  00FEFA                     __end_of_keys:
   198                           	opt stack 0
   199  00FEFA                     _happynewyear:
   200                           	opt stack 0
   201  00FEFA  45                 	db	69
   202  00FEFB  59                 	db	89
   203  00FEFC  23                 	db	35
   204  00FEFD  07                 	db	7
   205  00FEFE  31                 	db	49
   206  00FEFF  12                 	db	18
   207  00FF00  16                 	db	22
   208  00FF01                     __end_of_happynewyear:
   209                           	opt stack 0
   210  0000                     _ADCON0	set	4034
   211  0000                     _ADCON1	set	4033
   212  0000                     _ADCON2	set	4032
   213  0000                     _ADRESH	set	4036
   214  0000                     _ADRESL	set	4035
   215  0000                     _EEADR	set	4009
   216  0000                     _EEADRH	set	4010
   217  0000                     _EECON1	set	4006
   218  0000                     _EECON2	set	4007
   219  0000                     _EEDATA	set	4008
   220  0000                     _INTCONbits	set	4082
   221  0000                     _LATA	set	3977
   222  0000                     _LATB	set	3978
   223  0000                     _LATC	set	3979
   224  0000                     _LATD	set	3980
   225  0000                     _LATDbits	set	3980
   226  0000                     _LATE	set	3981
   227  0000                     _PORTA	set	3968
   228  0000                     _PORTB	set	3969
   229  0000                     _PORTBbits	set	3969
   230  0000                     _PORTC	set	3970
   231  0000                     _PORTD	set	3971
   232  0000                     _SSPADD	set	4040
   233  0000                     _SSPBUF	set	4041
   234  0000                     _SSPCON1	set	4038
   235  0000                     _SSPCON2	set	4037
   236  0000                     _SSPSTAT	set	4039
   237  0000                     _T0CON	set	4053
   238  0000                     _T1CON	set	4045
   239  0000                     _T3CON	set	4017
   240  0000                     _TMR0H	set	4055
   241  0000                     _TMR0L	set	4054
   242  0000                     _TMR1H	set	4047
   243  0000                     _TMR1L	set	4046
   244  0000                     _TMR3H	set	4019
   245  0000                     _TMR3L	set	4018
   246  0000                     _TRISA	set	3986
   247  0000                     _TRISB	set	3987
   248  0000                     _TRISC	set	3988
   249  0000                     _TRISD	set	3989
   250  0000                     _TRISE	set	3990
   251  0000                     _ACKDT	set	32301
   252  0000                     _ACKEN	set	32300
   253  0000                     _EEIF	set	32012
   254  0000                     _INT1IF	set	32640
   255  0000                     _PEIE	set	32662
   256  0000                     _PEN	set	32298
   257  0000                     _RCEN	set	32299
   258  0000                     _RSEN	set	32297
   259  0000                     _SEN	set	32296
   260  0000                     _TMR0IE	set	32661
   261  0000                     _TMR0IF	set	32658
   262  0000                     _TMR1IE	set	31976
   263  0000                     _TMR3IE	set	32001
   264  0000                     _TRISC3	set	31907
   265  0000                     _TRISC4	set	31908
   266  00FF01  25                 	db	37
   267  00FF02  63                 	db	99	;'c'
   268  00FF03  29                 	db	41
   269  00FF04  20                 	db	32
   270  00FF05  74                 	db	116	;'t'
   271  00FF06  69                 	db	105	;'i'
   272  00FF07  6D                 	db	109	;'m'
   273  00FF08  65                 	db	101	;'e'
   274  00FF09  20                 	db	32
   275  00FF0A  20                 	db	32
   276  00FF0B  3C                 	db	60	;'<'
   277  00FF0C  41                 	db	65	;'A'
   278  00FF0D  20                 	db	32
   279  00FF0E  20                 	db	32
   280  00FF0F  20                 	db	32
   281  00FF10  20                 	db	32
   282  00FF11  20                 	db	32
   283  00FF12  0A                 	db	10
   284  00FF13  00                 	db	0
   285  00FF14  73                 	db	115	;'s'
   286  00FF15  74                 	db	116	;'t'
   287  00FF16  61                 	db	97	;'a'
   288  00FF17  72                 	db	114	;'r'
   289  00FF18  74                 	db	116	;'t'
   290  00FF19  20                 	db	32
   291  00FF1A  20                 	db	32
   292  00FF1B  20                 	db	32
   293  00FF1C  3C                 	db	60	;'<'
   294  00FF1D  42                 	db	66	;'B'
   295  00FF1E  20                 	db	32
   296  00FF1F  20                 	db	32
   297  00FF20  20                 	db	32
   298  00FF21  20                 	db	32
   299  00FF22  20                 	db	32
   300  00FF23  20                 	db	32
   301  00FF24  0A                 	db	10
   302  00FF25  00                 	db	0
   303  00FF26  20                 	db	32
   304  00FF27  20                 	db	32
   305  00FF28  68                 	db	104	;'h'
   306  00FF29  68                 	db	104	;'h'
   307  00FF2A  3A                 	db	58	;':'
   308  00FF2B  6D                 	db	109	;'m'
   309  00FF2C  6D                 	db	109	;'m'
   310  00FF2D  3A                 	db	58	;':'
   311  00FF2E  73                 	db	115	;'s'
   312  00FF2F  73                 	db	115	;'s'
   313  00FF30  20                 	db	32
   314  00FF31  20                 	db	32
   315  00FF32  20                 	db	32
   316  00FF33  20                 	db	32
   317  00FF34  20                 	db	32
   318  00FF35  20                 	db	32
   319  00FF36  0A                 	db	10
   320  00FF37  00                 	db	0
   321  00FF38  73                 	db	115	;'s'
   322  00FF39  65                 	db	101	;'e'
   323  00FF3A  6C                 	db	108	;'l'
   324  00FF3B  65                 	db	101	;'e'
   325  00FF3C  63                 	db	99	;'c'
   326  00FF3D  74                 	db	116	;'t'
   327  00FF3E  20                 	db	32
   328  00FF3F  72                 	db	114	;'r'
   329  00FF40  75                 	db	117	;'u'
   330  00FF41  6E                 	db	110	;'n'
   331  00FF42  3A                 	db	58	;':'
   332  00FF43  20                 	db	32
   333  00FF44  20                 	db	32
   334  00FF45  20                 	db	32
   335  00FF46  20                 	db	32
   336  00FF47  20                 	db	32
   337  00FF48  0A                 	db	10
   338  00FF49  00                 	db	0
   339  00FF4A  74                 	db	116	;'t'
   340  00FF4B  69                 	db	105	;'i'
   341  00FF4C  6D                 	db	109	;'m'
   342  00FF4D  65                 	db	101	;'e'
   343  00FF4E  3A                 	db	58	;':'
   344  00FF4F  20                 	db	32
   345  00FF50  6E                 	db	110	;'n'
   346  00FF51  6E                 	db	110	;'n'
   347  00FF52  6E                 	db	110	;'n'
   348  00FF53  20                 	db	32
   349  00FF54  73                 	db	115	;'s'
   350  00FF55  65                 	db	101	;'e'
   351  00FF56  63                 	db	99	;'c'
   352  00FF57  20                 	db	32
   353  00FF58  20                 	db	32
   354  00FF59  20                 	db	32
   355  00FF5A  0A                 	db	10
   356  00FF5B  00                 	db	0
   357  00FF5C  5B                 	db	91	;'['
   358  00FF5D  41                 	db	65	;'A'
   359  00FF5E  41                 	db	65	;'A'
   360  00FF5F  2C                 	db	44
   361  00FF60  39                 	db	57	;'9'
   362  00FF61  56                 	db	86	;'V'
   363  00FF62  2C                 	db	44
   364  00FF63  43                 	db	67	;'C'
   365  00FF64  2C                 	db	44
   366  00FF65  6F                 	db	111	;'o'
   367  00FF66  74                 	db	116	;'t'
   368  00FF67  68                 	db	104	;'h'
   369  00FF68  65                 	db	101	;'e'
   370  00FF69  72                 	db	114	;'r'
   371  00FF6A  5D                 	db	93	;']'
   372  00FF6B  20                 	db	32
   373  00FF6C  0A                 	db	10
   374  00FF6D  00                 	db	0
   375  00FF6E                     STR_16:
   376  00FF6E  30                 	db	48	;'0'
   377  00FF6F  31                 	db	49	;'1'
   378  00FF70  32                 	db	50	;'2'
   379  00FF71  33                 	db	51	;'3'
   380  00FF72  34                 	db	52	;'4'
   381  00FF73  35                 	db	53	;'5'
   382  00FF74  36                 	db	54	;'6'
   383  00FF75  37                 	db	55	;'7'
   384  00FF76  38                 	db	56	;'8'
   385  00FF77  39                 	db	57	;'9'
   386  00FF78  61                 	db	97	;'a'
   387  00FF79  62                 	db	98	;'b'
   388  00FF7A  63                 	db	99	;'c'
   389  00FF7B  64                 	db	100	;'d'
   390  00FF7C  65                 	db	101	;'e'
   391  00FF7D  66                 	db	102	;'f'
   392  00FF7E  00                 	db	0
   393  00FF7F  20                 	db	32
   394  00FF80  20                 	db	32
   395  00FF81  20                 	db	32
   396  00FF82  20                 	db	32
   397  00FF83  20                 	db	32
   398  00FF84  20                 	db	32
   399  00FF85  20                 	db	32
   400  00FF86  20                 	db	32
   401  00FF87  20                 	db	32
   402  00FF88  20                 	db	32
   403  00FF89  20                 	db	32
   404  00FF8A  20                 	db	32
   405  00FF8B  20                 	db	32
   406  00FF8C  20                 	db	32
   407  00FF8D  2A                 	db	42
   408  00FF8E  3E                 	db	62	;'>'
   409  00FF8F  00                 	db	0
   410  00FF90  5B                 	db	91	;'['
   411  00FF91  31                 	db	49	;'1'
   412  00FF92  2C                 	db	44
   413  00FF93  32                 	db	50	;'2'
   414  00FF94  2C                 	db	44
   415  00FF95  33                 	db	51	;'3'
   416  00FF96  2C                 	db	44
   417  00FF97  34                 	db	52	;'4'
   418  00FF98  5D                 	db	93	;']'
   419  00FF99  20                 	db	32
   420  00FF9A  20                 	db	32
   421  00FF9B  20                 	db	32
   422  00FF9C  20                 	db	32
   423  00FF9D  20                 	db	32
   424  00FF9E  2A                 	db	42
   425  00FF9F  3E                 	db	62	;'>'
   426  00FFA0  00                 	db	0
   427  00FFA1  68                 	db	104	;'h'
   428  00FFA2  69                 	db	105	;'i'
   429  00FFA3  73                 	db	115	;'s'
   430  00FFA4  74                 	db	116	;'t'
   431  00FFA5  6F                 	db	111	;'o'
   432  00FFA6  72                 	db	114	;'r'
   433  00FFA7  79                 	db	121	;'y'
   434  00FFA8  20                 	db	32
   435  00FFA9  3C                 	db	60	;'<'
   436  00FFAA  43                 	db	67	;'C'
   437  00FFAB  20                 	db	32
   438  00FFAC  20                 	db	32
   439  00FFAD  20                 	db	32
   440  00FFAE  20                 	db	32
   441  00FFAF  2A                 	db	42
   442  00FFB0  3E                 	db	62	;'>'
   443  00FFB1  00                 	db	0
   444  00FFB2  20                 	db	32
   445  00FFB3  20                 	db	32
   446  00FFB4  20                 	db	32
   447  00FFB5  73                 	db	115	;'s'
   448  00FFB6  74                 	db	116	;'t'
   449  00FFB7  61                 	db	97	;'a'
   450  00FFB8  74                 	db	116	;'t'
   451  00FFB9  73                 	db	115	;'s'
   452  00FFBA  20                 	db	32
   453  00FFBB  3C                 	db	60	;'<'
   454  00FFBC  42                 	db	66	;'B'
   455  00FFBD  20                 	db	32
   456  00FFBE  20                 	db	32
   457  00FFBF  20                 	db	32
   458  00FFC0  2A                 	db	42
   459  00FFC1  3E                 	db	62	;'>'
   460  00FFC2  00                 	db	0
   461  00FFC3  5B                 	db	91	;'['
   462  00FFC4  6E                 	db	110	;'n'
   463  00FFC5  6E                 	db	110	;'n'
   464  00FFC6  2C                 	db	44
   465  00FFC7  6E                 	db	110	;'n'
   466  00FFC8  2C                 	db	44
   467  00FFC9  6E                 	db	110	;'n'
   468  00FFCA  2C                 	db	44
   469  00FFCB  6E                 	db	110	;'n'
   470  00FFCC  6E                 	db	110	;'n'
   471  00FFCD  5D                 	db	93	;']'
   472  00FFCE  20                 	db	32
   473  00FFCF  20                 	db	32
   474  00FFD0  20                 	db	32
   475  00FFD1  2A                 	db	42
   476  00FFD2  3E                 	db	62	;'>'
   477  00FFD3  00                 	db	0
   478  00FFD4  20                 	db	32
   479  00FFD5  20                 	db	32
   480  00FFD6  6D                 	db	109	;'m'
   481  00FFD7  6D                 	db	109	;'m'
   482  00FFD8  3A                 	db	58	;':'
   483  00FFD9  64                 	db	100	;'d'
   484  00FFDA  64                 	db	100	;'d'
   485  00FFDB  3A                 	db	58	;':'
   486  00FFDC  79                 	db	121	;'y'
   487  00FFDD  79                 	db	121	;'y'
   488  00FFDE  20                 	db	32
   489  00FFDF  20                 	db	32
   490  00FFE0  20                 	db	32
   491  00FFE1  20                 	db	32
   492  00FFE2  41                 	db	65	;'A'
   493  00FFE3  3E                 	db	62	;'>'
   494  00FFE4  00                 	db	0
   495  00FFE5  5B                 	db	91	;'['
   496  00FFE6  25                 	db	37
   497  00FFE7  78                 	db	120	;'x'
   498  00FFE8  20                 	db	32
   499  00FFE9  25                 	db	37
   500  00FFEA  78                 	db	120	;'x'
   501  00FFEB  5D                 	db	93	;']'
   502  00FFEC  0A                 	db	10
   503  00FFED  00                 	db	0
   504  00FFEE                     STR_3:
   505  00FFEE  25                 	db	37
   506  00FFEF  6C                 	db	108	;'l'
   507  00FFF0  64                 	db	100	;'d'
   508  00FFF1  20                 	db	32
   509  00FFF2  25                 	db	37
   510  00FFF3  6C                 	db	108	;'l'
   511  00FFF4  64                 	db	100	;'d'
   512  00FFF5  00                 	db	0
   513  00FFF6  74                 	db	116	;'t'
   514  00FFF7  31                 	db	49	;'1'
   515  00FFF8  3A                 	db	58	;':'
   516  00FFF9  20                 	db	32
   517  00FFFA  25                 	db	37
   518  00FFFB  78                 	db	120	;'x'
   519  00FFFC  20                 	db	32
   520  00FFFD  00                 	db	0
   521                           
   522                           ; #config settings
   523  00FFFE  00                 	db	0	; dummy byte at the end
   524  0000                     
   525                           	psect	cinit
   526  000D2C                     __pcinit:
   527                           	opt stack 0
   528  000D2C                     start_initialization:
   529                           	opt stack 0
   530  000D2C                     __initialization:
   531                           	opt stack 0
   532                           
   533                           ; Initialize objects allocated to BANK0 (56 bytes)
   534                           ; load TBLPTR registers with __pidataBANK0
   535  000D2C  0EE8               	movlw	low __pidataBANK0
   536  000D2E  6EF6               	movwf	tblptrl,c
   537  000D30  0E0E               	movlw	high __pidataBANK0
   538  000D32  6EF7               	movwf	tblptrh,c
   539  000D34  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   540  000D36  6EF8               	movwf	tblptru,c
   541  000D38  EE00  F080         	lfsr	0,__pdataBANK0
   542  000D3C  EE10 F038          	lfsr	1,56
   543  000D40                     copy_data0:
   544  000D40  0009               	tblrd		*+
   545  000D42  CFF5 FFEE          	movff	tablat,postinc0
   546  000D46  50E5               	movf	postdec1,w,c
   547  000D48  50E1               	movf	fsr1l,w,c
   548  000D4A  E1FA               	bnz	copy_data0
   549                           
   550                           ; Initialize objects allocated to COMRAM (6 bytes)
   551                           ; load TBLPTR registers with __pidataCOMRAM
   552  000D4C  0EFA               	movlw	low __pidataCOMRAM
   553  000D4E  6EF6               	movwf	tblptrl,c
   554  000D50  0E0F               	movlw	high __pidataCOMRAM
   555  000D52  6EF7               	movwf	tblptrh,c
   556  000D54  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   557  000D56  6EF8               	movwf	tblptru,c
   558  000D58  EE00  F075         	lfsr	0,__pdataCOMRAM
   559  000D5C  EE10 F006          	lfsr	1,6
   560  000D60                     copy_data1:
   561  000D60  0009               	tblrd		*+
   562  000D62  CFF5 FFEE          	movff	tablat,postinc0
   563  000D66  50E5               	movf	postdec1,w,c
   564  000D68  50E1               	movf	fsr1l,w,c
   565  000D6A  E1FA               	bnz	copy_data1
   566                           
   567                           ; Clear objects allocated to COMRAM (2 bytes)
   568  000D6C  6A7C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   569  000D6E  6A7B               	clrf	__pbssCOMRAM& (0+255),c
   570  000D70                     end_of_initialization:
   571                           	opt stack 0
   572  000D70                     __end_of__initialization:
   573                           	opt stack 0
   574  000D70  907D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   575  000D72  927D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   576  000D74  0E00               	movlw	low (__Lmediumconst shr (0+16))
   577  000D76  6EF8               	movwf	tblptru,c
   578  000D78  0100               	movlb	0
   579  000D7A  EFA8  F007         	goto	_main	;jump to C main() function
   580                           tblptru	equ	0xFF8
   581                           tblptrh	equ	0xFF7
   582                           tblptrl	equ	0xFF6
   583                           tablat	equ	0xFF5
   584                           postinc0	equ	0xFEE
   585                           postdec1	equ	0xFE5
   586                           fsr1l	equ	0xFE1
   587                           
   588                           	psect	bssCOMRAM
   589  00007B                     __pbssCOMRAM:
   590                           	opt stack 0
   591  00007B                     _curr:
   592                           	opt stack 0
   593  00007B                     	ds	2
   594                           tblptru	equ	0xFF8
   595                           tblptrh	equ	0xFF7
   596                           tblptrl	equ	0xFF6
   597                           tablat	equ	0xFF5
   598                           postinc0	equ	0xFEE
   599                           postdec1	equ	0xFE5
   600                           fsr1l	equ	0xFE1
   601                           
   602                           	psect	dataCOMRAM
   603  000075                     __pdataCOMRAM:
   604                           	opt stack 0
   605  000075                     _angle:
   606                           	opt stack 0
   607  000075                     	ds	4
   608  000079                     _nServo:
   609                           	opt stack 0
   610  000079                     	ds	2
   611                           tblptru	equ	0xFF8
   612                           tblptrh	equ	0xFF7
   613                           tblptrl	equ	0xFF6
   614                           tablat	equ	0xFF5
   615                           postinc0	equ	0xFEE
   616                           postdec1	equ	0xFE5
   617                           fsr1l	equ	0xFE1
   618                           
   619                           	psect	dataBANK0
   620  000080                     __pdataBANK0:
   621                           	opt stack 0
   622  000080                     _pulse:
   623                           	opt stack 0
   624  000080                     	ds	16
   625  000090                     _sequence:
   626                           	opt stack 0
   627  000090                     	ds	16
   628  0000A0                     _order:
   629                           	opt stack 0
   630  0000A0                     	ds	8
   631  0000A8                     _pin:
   632                           	opt stack 0
   633  0000A8                     	ds	8
   634  0000B0                     _port:
   635                           	opt stack 0
   636  0000B0                     	ds	8
   637                           tblptru	equ	0xFF8
   638                           tblptrh	equ	0xFF7
   639                           tblptrl	equ	0xFF6
   640                           tablat	equ	0xFF5
   641                           postinc0	equ	0xFEE
   642                           postdec1	equ	0xFE5
   643                           fsr1l	equ	0xFE1
   644                           
   645                           	psect	cstackBANK0
   646  0000B8                     __pcstackBANK0:
   647                           	opt stack 0
   648  0000B8                     lcdNibble@temp:
   649                           	opt stack 0
   650  0000B8                     initTimer@timer:
   651                           	opt stack 0
   652  0000B8                     startTimer@timer:
   653                           	opt stack 0
   654                           
   655                           ; 2 bytes @ 0x0
   656  0000B8                     	ds	1
   657  0000B9                     lcdNibble@data:
   658                           	opt stack 0
   659                           
   660                           ; 1 bytes @ 0x1
   661  0000B9                     	ds	1
   662  0000BA                     ??_lcdInst:
   663  0000BA                     ??_initTimer:
   664  0000BA                     startTimer@val:
   665                           	opt stack 0
   666                           
   667                           ; 4 bytes @ 0x2
   668  0000BA                     	ds	1
   669  0000BB                     lcdInst@data:
   670                           	opt stack 0
   671                           
   672                           ; 1 bytes @ 0x3
   673  0000BB                     	ds	1
   674  0000BC                     ??_initLCD:
   675                           
   676                           ; 1 bytes @ 0x4
   677  0000BC                     	ds	2
   678  0000BE                     ??_startTimer:
   679                           
   680                           ; 1 bytes @ 0x6
   681  0000BE                     	ds	2
   682  0000C0                     initServo@timer:
   683                           	opt stack 0
   684                           
   685                           ; 2 bytes @ 0x8
   686  0000C0                     	ds	2
   687  0000C2                     initServo@po:
   688                           	opt stack 0
   689                           
   690                           ; 2 bytes @ 0xA
   691  0000C2                     	ds	2
   692  0000C4                     initServo@pi:
   693                           	opt stack 0
   694                           
   695                           ; 2 bytes @ 0xC
   696  0000C4                     	ds	2
   697  0000C6                     tblptru	equ	0xFF8
   698                           tblptrh	equ	0xFF7
   699                           tblptrl	equ	0xFF6
   700                           tablat	equ	0xFF5
   701                           postinc0	equ	0xFEE
   702                           postdec1	equ	0xFE5
   703                           fsr1l	equ	0xFE1
   704                           
   705                           ; 1 bytes @ 0xE
   706                           
   707                           	psect	cstackCOMRAM
   708  000001                     __pcstackCOMRAM:
   709                           	opt stack 0
   710  000001                     ?___lmul:
   711                           	opt stack 0
   712  000001                     ?___lldiv:
   713                           	opt stack 0
   714  000001                     i2lcdNibble@temp:
   715                           	opt stack 0
   716  000001                     digitalWrite@port:
   717                           	opt stack 0
   718  000001                     i2startTimer@timer:
   719                           	opt stack 0
   720  000001                     ___lmul@multiplier:
   721                           	opt stack 0
   722  000001                     ___lldiv@dividend:
   723                           	opt stack 0
   724                           
   725                           ; 4 bytes @ 0x0
   726  000001                     	ds	1
   727  000002                     i2lcdNibble@data:
   728                           	opt stack 0
   729                           
   730                           ; 1 bytes @ 0x1
   731  000002                     	ds	1
   732  000003                     ??i2_lcdInst:
   733  000003                     digitalWrite@pin:
   734                           	opt stack 0
   735  000003                     i2startTimer@val:
   736                           	opt stack 0
   737                           
   738                           ; 4 bytes @ 0x2
   739  000003                     	ds	1
   740  000004                     i2lcdInst@data:
   741                           	opt stack 0
   742                           
   743                           ; 1 bytes @ 0x3
   744  000004                     	ds	1
   745  000005                     putch@data:
   746                           	opt stack 0
   747  000005                     digitalWrite@val:
   748                           	opt stack 0
   749  000005                     ___lmul@multiplicand:
   750                           	opt stack 0
   751  000005                     ___lldiv@divisor:
   752                           	opt stack 0
   753                           
   754                           ; 4 bytes @ 0x4
   755  000005                     	ds	2
   756  000007                     ??_digitalWrite:
   757  000007                     ??i2_startTimer:
   758                           
   759                           ; 1 bytes @ 0x6
   760  000007                     	ds	2
   761  000009                     ___lmul@product:
   762                           	opt stack 0
   763  000009                     ___lldiv@quotient:
   764                           	opt stack 0
   765                           
   766                           ; 4 bytes @ 0x8
   767  000009                     	ds	1
   768  00000A                     ??_servoInterruptService:
   769                           
   770                           ; 1 bytes @ 0x9
   771  00000A                     	ds	3
   772  00000D                     ?___aldiv:
   773                           	opt stack 0
   774  00000D                     ___lldiv@counter:
   775                           	opt stack 0
   776  00000D                     ___aldiv@dividend:
   777                           	opt stack 0
   778                           
   779                           ; 4 bytes @ 0xC
   780  00000D                     	ds	1
   781  00000E                     ?___llmod:
   782                           	opt stack 0
   783  00000E                     ___llmod@dividend:
   784                           	opt stack 0
   785                           
   786                           ; 4 bytes @ 0xD
   787  00000E                     	ds	3
   788  000011                     ___aldiv@divisor:
   789                           	opt stack 0
   790                           
   791                           ; 4 bytes @ 0x10
   792  000011                     	ds	1
   793  000012                     ___llmod@divisor:
   794                           	opt stack 0
   795                           
   796                           ; 4 bytes @ 0x11
   797  000012                     	ds	3
   798  000015                     ___aldiv@counter:
   799                           	opt stack 0
   800                           
   801                           ; 1 bytes @ 0x14
   802  000015                     	ds	1
   803  000016                     ___aldiv@sign:
   804                           	opt stack 0
   805  000016                     ___llmod@counter:
   806                           	opt stack 0
   807  000016                     servoInterruptService@i:
   808                           	opt stack 0
   809                           
   810                           ; 2 bytes @ 0x15
   811  000016                     	ds	1
   812  000017                     ?_printf:
   813                           	opt stack 0
   814  000017                     printf@f:
   815                           	opt stack 0
   816  000017                     ___aldiv@quotient:
   817                           	opt stack 0
   818                           
   819                           ; 4 bytes @ 0x16
   820  000017                     	ds	10
   821  000021                     ??_printf:
   822                           
   823                           ; 1 bytes @ 0x20
   824  000021                     	ds	2
   825  000023                     printf@idx:
   826                           	opt stack 0
   827                           
   828                           ; 1 bytes @ 0x22
   829  000023                     	ds	1
   830  000024                     printf@prec:
   831                           	opt stack 0
   832                           
   833                           ; 2 bytes @ 0x23
   834  000024                     	ds	2
   835  000026                     printf@ap:
   836                           	opt stack 0
   837                           
   838                           ; 2 bytes @ 0x25
   839  000026                     	ds	2
   840  000028                     printf@val:
   841                           	opt stack 0
   842                           
   843                           ; 4 bytes @ 0x27
   844  000028                     	ds	4
   845  00002C                     printf@flag:
   846                           	opt stack 0
   847                           
   848                           ; 1 bytes @ 0x2B
   849  00002C                     	ds	1
   850  00002D                     printf@c:
   851                           	opt stack 0
   852                           
   853                           ; 1 bytes @ 0x2C
   854  00002D                     	ds	1
   855  00002E                     setAngle@id:
   856                           	opt stack 0
   857                           
   858                           ; 2 bytes @ 0x2D
   859  00002E                     	ds	2
   860  000030                     setAngle@puls:
   861                           	opt stack 0
   862                           
   863                           ; 4 bytes @ 0x2F
   864  000030                     	ds	4
   865  000034                     ??_setAngle:
   866                           
   867                           ; 1 bytes @ 0x33
   868  000034                     	ds	12
   869  000040                     setAngle@seen:
   870                           	opt stack 0
   871                           
   872                           ; 20 bytes @ 0x3F
   873  000040                     	ds	20
   874  000054                     setAngle@smallest:
   875                           	opt stack 0
   876                           
   877                           ; 4 bytes @ 0x53
   878  000054                     	ds	4
   879  000058                     setAngle@ind:
   880                           	opt stack 0
   881                           
   882                           ; 2 bytes @ 0x57
   883  000058                     	ds	2
   884  00005A                     setAngle@a_503:
   885                           	opt stack 0
   886                           
   887                           ; 2 bytes @ 0x59
   888  00005A                     	ds	2
   889  00005C                     setAngle@smallest_ind:
   890                           	opt stack 0
   891                           
   892                           ; 2 bytes @ 0x5B
   893  00005C                     	ds	2
   894  00005E                     setAngle@prev:
   895                           	opt stack 0
   896                           
   897                           ; 2 bytes @ 0x5D
   898  00005E                     	ds	2
   899  000060                     setAngle@a:
   900                           	opt stack 0
   901                           
   902                           ; 2 bytes @ 0x5F
   903  000060                     	ds	2
   904  000062                     setAngle@a_508:
   905                           	opt stack 0
   906                           
   907                           ; 2 bytes @ 0x61
   908  000062                     	ds	2
   909  000064                     setAngle@b:
   910                           	opt stack 0
   911                           
   912                           ; 2 bytes @ 0x63
   913  000064                     	ds	2
   914  000066                     ??_service:
   915                           
   916                           ; 1 bytes @ 0x65
   917  000066                     	ds	14
   918  000074                     service@key:
   919                           	opt stack 0
   920                           
   921                           ; 1 bytes @ 0x73
   922  000074                     	ds	1
   923                           tblptru	equ	0xFF8
   924                           tblptrh	equ	0xFF7
   925                           tblptrl	equ	0xFF6
   926                           tablat	equ	0xFF5
   927                           postinc0	equ	0xFEE
   928                           postdec1	equ	0xFE5
   929                           fsr1l	equ	0xFE1
   930                           
   931 ;;
   932 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   933 ;;
   934 ;; *************** function _main *****************
   935 ;; Defined at:
   936 ;;		line 121 in file "main.c"
   937 ;; Parameters:    Size  Location     Type
   938 ;;		None
   939 ;; Auto vars:     Size  Location     Type
   940 ;;		None
   941 ;; Return value:  Size  Location     Type
   942 ;;                  1    wreg      void 
   943 ;; Registers used:
   944 ;;		wreg, status,2, status,0, cstack
   945 ;; Tracked objects:
   946 ;;		On entry : 0/0
   947 ;;		On exit  : 0/0
   948 ;;		Unchanged: 0/0
   949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   954 ;;Total ram usage:        0 bytes
   955 ;; Hardware stack levels required when called:   10
   956 ;; This function calls:
   957 ;;		_initLCD
   958 ;;		_initServo
   959 ;;		_pinSetup
   960 ;; This function is called by:
   961 ;;		Startup code after reset
   962 ;; This function uses a non-reentrant model
   963 ;;
   964                           
   965                           	psect	text0
   966  000F50                     __ptext0:
   967                           	opt stack 0
   968  000F50                     _main:
   969                           	opt stack 21
   970                           
   971                           ;main.c: 122: pinSetup();
   972                           
   973                           ;incstack = 0
   974  000F50  EC57  F007         	call	_pinSetup	;wreg free
   975                           
   976                           ;main.c: 123: initLCD();
   977  000F54  EC32  F007         	call	_initLCD	;wreg free
   978                           
   979                           ;main.c: 127: initServo(0,0,0);
   980  000F58  0E00               	movlw	0
   981  000F5A  0100               	movlb	0	; () banked
   982  000F5C  6FC1               	movwf	(initServo@timer+1)& (0+255),b
   983  000F5E  0E00               	movlw	0
   984  000F60  6FC0               	movwf	initServo@timer& (0+255),b
   985  000F62  0E00               	movlw	0
   986  000F64  0100               	movlb	0	; () banked
   987  000F66  6FC3               	movwf	(initServo@po+1)& (0+255),b
   988  000F68  0E00               	movlw	0
   989  000F6A  6FC2               	movwf	initServo@po& (0+255),b
   990  000F6C  0E00               	movlw	0
   991  000F6E  0100               	movlb	0	; () banked
   992  000F70  6FC5               	movwf	(initServo@pi+1)& (0+255),b
   993  000F72  0E00               	movlw	0
   994  000F74  6FC4               	movwf	initServo@pi& (0+255),b
   995  000F76  EC90  F007         	call	_initServo	;wreg free
   996  000F7A                     l101:
   997  000F7A  D7FF               	goto	l101
   998  000F7C                     __end_of_main:
   999                           	opt stack 0
  1000                           tblptru	equ	0xFF8
  1001                           tblptrh	equ	0xFF7
  1002                           tblptrl	equ	0xFF6
  1003                           tablat	equ	0xFF5
  1004                           postinc0	equ	0xFEE
  1005                           postdec1	equ	0xFE5
  1006                           fsr1l	equ	0xFE1
  1007                           
  1008 ;; *************** function _pinSetup *****************
  1009 ;; Defined at:
  1010 ;;		line 27 in file "main.c"
  1011 ;; Parameters:    Size  Location     Type
  1012 ;;		None
  1013 ;; Auto vars:     Size  Location     Type
  1014 ;;		None
  1015 ;; Return value:  Size  Location     Type
  1016 ;;                  1    wreg      void 
  1017 ;; Registers used:
  1018 ;;		wreg, status,2, status,0
  1019 ;; Tracked objects:
  1020 ;;		On entry : 0/0
  1021 ;;		On exit  : 0/0
  1022 ;;		Unchanged: 0/0
  1023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1027 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1028 ;;Total ram usage:        0 bytes
  1029 ;; Hardware stack levels used:    1
  1030 ;; Hardware stack levels required when called:    7
  1031 ;; This function calls:
  1032 ;;		Nothing
  1033 ;; This function is called by:
  1034 ;;		_main
  1035 ;; This function uses a non-reentrant model
  1036 ;;
  1037                           
  1038                           	psect	text1
  1039  000EAE                     __ptext1:
  1040                           	opt stack 0
  1041  000EAE                     _pinSetup:
  1042                           	opt stack 23
  1043                           
  1044                           ;main.c: 33: TRISA = 0xFF;
  1045                           
  1046                           ;incstack = 0
  1047  000EAE  6892               	setf	3986,c	;volatile
  1048                           
  1049                           ;main.c: 34: TRISB = 0xFF;
  1050  000EB0  6893               	setf	3987,c	;volatile
  1051                           
  1052                           ;main.c: 35: TRISC = 0x00;
  1053  000EB2  0E00               	movlw	0
  1054  000EB4  6E94               	movwf	3988,c	;volatile
  1055                           
  1056                           ;main.c: 36: TRISD = 0x00;
  1057  000EB6  0E00               	movlw	0
  1058  000EB8  6E95               	movwf	3989,c	;volatile
  1059                           
  1060                           ;main.c: 37: TRISE = 0x00;
  1061  000EBA  0E00               	movlw	0
  1062  000EBC  6E96               	movwf	3990,c	;volatile
  1063                           
  1064                           ;main.c: 39: LATA = 0x00;
  1065  000EBE  0E00               	movlw	0
  1066  000EC0  6E89               	movwf	3977,c	;volatile
  1067                           
  1068                           ;main.c: 40: LATB = 0x00;
  1069  000EC2  0E00               	movlw	0
  1070  000EC4  6E8A               	movwf	3978,c	;volatile
  1071                           
  1072                           ;main.c: 41: LATC = 0x00;
  1073  000EC6  0E00               	movlw	0
  1074  000EC8  6E8B               	movwf	3979,c	;volatile
  1075                           
  1076                           ;main.c: 42: LATD = 0x00;
  1077  000ECA  0E00               	movlw	0
  1078  000ECC  6E8C               	movwf	3980,c	;volatile
  1079                           
  1080                           ;main.c: 43: LATE = 0x00;
  1081  000ECE  0E00               	movlw	0
  1082  000ED0  6E8D               	movwf	3981,c	;volatile
  1083                           
  1084                           ;main.c: 45: ADCON0 = 0x00;
  1085  000ED2  0E00               	movlw	0
  1086  000ED4  6EC2               	movwf	4034,c	;volatile
  1087                           
  1088                           ;main.c: 46: ADCON1 |= 0x0A;
  1089  000ED6  0E0A               	movlw	10
  1090  000ED8  12C1               	iorwf	4033,f,c	;volatile
  1091                           
  1092                           ;main.c: 50: ADCON2 = 0;
  1093  000EDA  0E00               	movlw	0
  1094  000EDC  6EC0               	movwf	4032,c	;volatile
  1095                           
  1096                           ;main.c: 51: ADCON2 |= 0b010;
  1097  000EDE  82C0               	bsf	4032,1,c	;volatile
  1098                           
  1099                           ;main.c: 52: ADCON2 |= 0b110<<3;
  1100  000EE0  0E30               	movlw	48
  1101  000EE2  12C0               	iorwf	4032,f,c	;volatile
  1102                           
  1103                           ;main.c: 53: ADCON2 |= 1<<7;
  1104  000EE4  8EC0               	bsf	4032,7,c	;volatile
  1105  000EE6  0012               	return		;funcret
  1106  000EE8                     __end_of_pinSetup:
  1107                           	opt stack 0
  1108                           tblptru	equ	0xFF8
  1109                           tblptrh	equ	0xFF7
  1110                           tblptrl	equ	0xFF6
  1111                           tablat	equ	0xFF5
  1112                           postinc0	equ	0xFEE
  1113                           postdec1	equ	0xFE5
  1114                           fsr1l	equ	0xFE1
  1115                           
  1116 ;; *************** function _initServo *****************
  1117 ;; Defined at:
  1118 ;;		line 23 in file "servo.c"
  1119 ;; Parameters:    Size  Location     Type
  1120 ;;  timer           2    8[BANK0 ] int 
  1121 ;;  po              2   10[BANK0 ] int 
  1122 ;;  pi              2   12[BANK0 ] int 
  1123 ;; Auto vars:     Size  Location     Type
  1124 ;;		None
  1125 ;; Return value:  Size  Location     Type
  1126 ;;                  1    wreg      void 
  1127 ;; Registers used:
  1128 ;;		wreg, status,2, status,0, cstack
  1129 ;; Tracked objects:
  1130 ;;		On entry : 0/0
  1131 ;;		On exit  : 0/0
  1132 ;;		Unchanged: 0/0
  1133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1134 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1137 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1138 ;;Total ram usage:        6 bytes
  1139 ;; Hardware stack levels used:    1
  1140 ;; Hardware stack levels required when called:    8
  1141 ;; This function calls:
  1142 ;;		_initTimer
  1143 ;;		_startTimer
  1144 ;; This function is called by:
  1145 ;;		_main
  1146 ;; This function uses a non-reentrant model
  1147 ;;
  1148                           
  1149                           	psect	text2
  1150  000F20                     __ptext2:
  1151                           	opt stack 0
  1152  000F20                     _initServo:
  1153                           	opt stack 22
  1154                           
  1155                           ;servo.c: 24: initTimer(0);
  1156                           
  1157                           ;incstack = 0
  1158  000F20  0E00               	movlw	0
  1159  000F22  0100               	movlb	0	; () banked
  1160  000F24  6FB9               	movwf	(initTimer@timer+1)& (0+255),b
  1161  000F26  0E00               	movlw	0
  1162  000F28  6FB8               	movwf	initTimer@timer& (0+255),b
  1163  000F2A  EC0D  F007         	call	_initTimer	;wreg free
  1164                           
  1165                           ;servo.c: 25: startTimer(0,61785);
  1166  000F2E  0E00               	movlw	0
  1167  000F30  0100               	movlb	0	; () banked
  1168  000F32  6FB9               	movwf	(startTimer@timer+1)& (0+255),b
  1169  000F34  0E00               	movlw	0
  1170  000F36  6FB8               	movwf	startTimer@timer& (0+255),b
  1171  000F38  0E59               	movlw	89
  1172  000F3A  0100               	movlb	0	; () banked
  1173  000F3C  6FBA               	movwf	startTimer@val& (0+255),b
  1174  000F3E  0EF1               	movlw	241
  1175  000F40  6FBB               	movwf	(startTimer@val+1)& (0+255),b
  1176  000F42  0E00               	movlw	0
  1177  000F44  6FBC               	movwf	(startTimer@val+2)& (0+255),b
  1178  000F46  0E00               	movlw	0
  1179  000F48  6FBD               	movwf	(startTimer@val+3)& (0+255),b
  1180  000F4A  ECBF  F006         	call	_startTimer	;wreg free
  1181  000F4E  0012               	return		;funcret
  1182  000F50                     __end_of_initServo:
  1183                           	opt stack 0
  1184                           tblptru	equ	0xFF8
  1185                           tblptrh	equ	0xFF7
  1186                           tblptrl	equ	0xFF6
  1187                           tablat	equ	0xFF5
  1188                           postinc0	equ	0xFEE
  1189                           postdec1	equ	0xFE5
  1190                           fsr1l	equ	0xFE1
  1191                           
  1192 ;; *************** function _startTimer *****************
  1193 ;; Defined at:
  1194 ;;		line 75 in file "timer.c"
  1195 ;; Parameters:    Size  Location     Type
  1196 ;;  timer           2    0[BANK0 ] int 
  1197 ;;  val             4    2[BANK0 ] long 
  1198 ;; Auto vars:     Size  Location     Type
  1199 ;;		None
  1200 ;; Return value:  Size  Location     Type
  1201 ;;                  1    wreg      void 
  1202 ;; Registers used:
  1203 ;;		wreg, status,2, status,0
  1204 ;; Tracked objects:
  1205 ;;		On entry : 0/0
  1206 ;;		On exit  : 0/0
  1207 ;;		Unchanged: 0/0
  1208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1209 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1211 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1212 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1213 ;;Total ram usage:        8 bytes
  1214 ;; Hardware stack levels used:    1
  1215 ;; Hardware stack levels required when called:    7
  1216 ;; This function calls:
  1217 ;;		Nothing
  1218 ;; This function is called by:
  1219 ;;		_initServo
  1220 ;; This function uses a non-reentrant model
  1221 ;;
  1222                           
  1223                           	psect	text3
  1224  000D7E                     __ptext3:
  1225                           	opt stack 0
  1226  000D7E                     _startTimer:
  1227                           	opt stack 22
  1228                           
  1229                           ;timer.c: 76: switch(timer){
  1230                           
  1231                           ;incstack = 0
  1232  000D7E  D012               	goto	l2307
  1233  000D80                     l345:
  1234                           
  1235                           ; BSR set to: 0
  1236                           ;timer.c: 78: TMR0H = val>>8;
  1237  000D80  C0BB  FFD7         	movff	startTimer@val+1,4055	;volatile
  1238                           
  1239                           ;timer.c: 79: TMR0L = val;
  1240  000D84  C0BA  FFD6         	movff	startTimer@val,4054	;volatile
  1241                           
  1242                           ; BSR set to: 0
  1243                           ;timer.c: 80: T0CON |= 1<<7;
  1244  000D88  8ED5               	bsf	4053,7,c	;volatile
  1245                           
  1246                           ;timer.c: 81: break;
  1247  000D8A  0012               	return	
  1248  000D8C                     l347:
  1249                           
  1250                           ; BSR set to: 0
  1251                           ;timer.c: 83: TMR1H = val>>8;
  1252  000D8C  C0BB  FFCF         	movff	startTimer@val+1,4047	;volatile
  1253                           
  1254                           ;timer.c: 84: TMR1L = val;
  1255  000D90  C0BA  FFCE         	movff	startTimer@val,4046	;volatile
  1256                           
  1257                           ; BSR set to: 0
  1258                           ;timer.c: 85: T1CON |= 1<<0;
  1259  000D94  80CD               	bsf	4045,0,c	;volatile
  1260                           
  1261                           ;timer.c: 86: break;
  1262  000D96  0012               	return	
  1263  000D98                     l348:
  1264                           
  1265                           ; BSR set to: 0
  1266                           ;timer.c: 88: TMR3H = val>>8;
  1267  000D98  C0BB  FFB3         	movff	startTimer@val+1,4019	;volatile
  1268                           
  1269                           ;timer.c: 89: TMR3L = val;
  1270  000D9C  C0BA  FFB2         	movff	startTimer@val,4018	;volatile
  1271                           
  1272                           ; BSR set to: 0
  1273                           ;timer.c: 90: T3CON |= 1<<0;
  1274  000DA0  80B1               	bsf	4017,0,c	;volatile
  1275                           
  1276                           ;timer.c: 91: }
  1277  000DA2  0012               	return	
  1278  000DA4                     l2307:
  1279  000DA4  C0B8  F0BE         	movff	startTimer@timer,??_startTimer
  1280  000DA8  C0B9  F0BF         	movff	startTimer@timer+1,??_startTimer+1
  1281                           
  1282                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1283                           ; Switch size 1, requested type "space"
  1284                           ; Number of cases is 1, Range of values is 0 to 0
  1285                           ; switch strategies available:
  1286                           ; Name         Instructions Cycles
  1287                           ; simple_byte            4     3 (average)
  1288                           ;	Chosen strategy is simple_byte
  1289  000DAC  0100               	movlb	0	; () banked
  1290  000DAE  51BF               	movf	(??_startTimer+1)& (0+255),w,b
  1291  000DB0  0A00               	xorlw	0	; case 0
  1292  000DB2  A4D8               	btfss	status,2,c
  1293  000DB4  0012               	return	
  1294                           
  1295                           ; BSR set to: 0
  1296                           ; Switch size 1, requested type "space"
  1297                           ; Number of cases is 3, Range of values is 0 to 3
  1298                           ; switch strategies available:
  1299                           ; Name         Instructions Cycles
  1300                           ; simple_byte           10     6 (average)
  1301                           ;	Chosen strategy is simple_byte
  1302  000DB6  0100               	movlb	0	; () banked
  1303  000DB8  51BE               	movf	??_startTimer& (0+255),w,b
  1304  000DBA  0A00               	xorlw	0	; case 0
  1305  000DBC  B4D8               	btfsc	status,2,c
  1306  000DBE  D7E0               	goto	l345
  1307  000DC0  0A01               	xorlw	1	; case 1
  1308  000DC2  B4D8               	btfsc	status,2,c
  1309  000DC4  D7E3               	goto	l347
  1310  000DC6  0A02               	xorlw	2	; case 3
  1311  000DC8  A4D8               	btfss	status,2,c
  1312  000DCA  0012               	return	
  1313  000DCC  D7E5               	goto	l348
  1314  000DCE                     __end_of_startTimer:
  1315                           	opt stack 0
  1316                           tblptru	equ	0xFF8
  1317                           tblptrh	equ	0xFF7
  1318                           tblptrl	equ	0xFF6
  1319                           tablat	equ	0xFF5
  1320                           postinc0	equ	0xFEE
  1321                           postdec1	equ	0xFE5
  1322                           fsr1l	equ	0xFE1
  1323                           status	equ	0xFD8
  1324                           
  1325 ;; *************** function _initTimer *****************
  1326 ;; Defined at:
  1327 ;;		line 52 in file "timer.c"
  1328 ;; Parameters:    Size  Location     Type
  1329 ;;  timer           2    0[BANK0 ] int 
  1330 ;; Auto vars:     Size  Location     Type
  1331 ;;		None
  1332 ;; Return value:  Size  Location     Type
  1333 ;;                  1    wreg      void 
  1334 ;; Registers used:
  1335 ;;		wreg, status,2, status,0
  1336 ;; Tracked objects:
  1337 ;;		On entry : 0/0
  1338 ;;		On exit  : 0/0
  1339 ;;		Unchanged: 0/0
  1340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1341 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1343 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1344 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1345 ;;Total ram usage:        4 bytes
  1346 ;; Hardware stack levels used:    1
  1347 ;; Hardware stack levels required when called:    7
  1348 ;; This function calls:
  1349 ;;		Nothing
  1350 ;; This function is called by:
  1351 ;;		_initServo
  1352 ;; This function uses a non-reentrant model
  1353 ;;
  1354                           
  1355                           	psect	text4
  1356  000E1A                     __ptext4:
  1357                           	opt stack 0
  1358  000E1A                     _initTimer:
  1359                           	opt stack 22
  1360                           
  1361                           ;timer.c: 53: switch(timer){
  1362                           
  1363                           ; BSR set to: 0
  1364                           ;incstack = 0
  1365  000E1A  D00D               	goto	l2293
  1366  000E1C                     l2277:
  1367                           
  1368                           ;timer.c: 55: T0CON = 0;
  1369  000E1C  0E00               	movlw	0
  1370  000E1E  6ED5               	movwf	4053,c	;volatile
  1371                           
  1372                           ;timer.c: 56: T0CON |= 1<<3;
  1373  000E20  86D5               	bsf	4053,3,c	;volatile
  1374                           
  1375                           ;timer.c: 58: TMR0IE = 1;
  1376  000E22  8AF2               	bsf	intcon,5,c	;volatile
  1377                           
  1378                           ;timer.c: 59: break;
  1379  000E24  D01C               	goto	l338
  1380  000E26                     l2283:
  1381                           
  1382                           ;timer.c: 61: T1CON = 0;
  1383  000E26  0E00               	movlw	0
  1384  000E28  6ECD               	movwf	4045,c	;volatile
  1385                           
  1386                           ;timer.c: 63: TMR1IE = 1;
  1387  000E2A  809D               	bsf	3997,0,c	;volatile
  1388                           
  1389                           ;timer.c: 64: break;
  1390  000E2C  D018               	goto	l338
  1391  000E2E                     l2287:
  1392                           
  1393                           ;timer.c: 66: T3CON = 0;
  1394  000E2E  0E00               	movlw	0
  1395  000E30  6EB1               	movwf	4017,c	;volatile
  1396                           
  1397                           ;timer.c: 67: TMR3IE = 1;
  1398  000E32  82A0               	bsf	4000,1,c	;volatile
  1399                           
  1400                           ;timer.c: 69: }
  1401                           
  1402                           ;timer.c: 68: break;
  1403  000E34  D014               	goto	l338
  1404  000E36                     l2293:
  1405  000E36  C0B8  F0BA         	movff	initTimer@timer,??_initTimer
  1406  000E3A  C0B9  F0BB         	movff	initTimer@timer+1,??_initTimer+1
  1407                           
  1408                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1409                           ; Switch size 1, requested type "space"
  1410                           ; Number of cases is 1, Range of values is 0 to 0
  1411                           ; switch strategies available:
  1412                           ; Name         Instructions Cycles
  1413                           ; simple_byte            4     3 (average)
  1414                           ;	Chosen strategy is simple_byte
  1415  000E3E  0100               	movlb	0	; () banked
  1416  000E40  51BB               	movf	(??_initTimer+1)& (0+255),w,b
  1417  000E42  0A00               	xorlw	0	; case 0
  1418  000E44  A4D8               	btfss	status,2,c
  1419  000E46  D00B               	goto	l338
  1420                           
  1421                           ; BSR set to: 0
  1422                           ; Switch size 1, requested type "space"
  1423                           ; Number of cases is 3, Range of values is 0 to 3
  1424                           ; switch strategies available:
  1425                           ; Name         Instructions Cycles
  1426                           ; simple_byte           10     6 (average)
  1427                           ;	Chosen strategy is simple_byte
  1428  000E48  0100               	movlb	0	; () banked
  1429  000E4A  51BA               	movf	??_initTimer& (0+255),w,b
  1430  000E4C  0A00               	xorlw	0	; case 0
  1431  000E4E  B4D8               	btfsc	status,2,c
  1432  000E50  D7E5               	goto	l2277
  1433  000E52  0A01               	xorlw	1	; case 1
  1434  000E54  B4D8               	btfsc	status,2,c
  1435  000E56  D7E7               	goto	l2283
  1436  000E58  0A02               	xorlw	2	; case 3
  1437  000E5A  B4D8               	btfsc	status,2,c
  1438  000E5C  D7E8               	goto	l2287
  1439  000E5E                     l338:
  1440                           
  1441                           ;timer.c: 70: PEIE = 1;
  1442  000E5E  8CF2               	bsf	intcon,6,c	;volatile
  1443                           
  1444                           ;timer.c: 71: (INTCONbits.GIE = 1);
  1445  000E60  8EF2               	bsf	intcon,7,c	;volatile
  1446  000E62  0012               	return		;funcret
  1447  000E64                     __end_of_initTimer:
  1448                           	opt stack 0
  1449                           tblptru	equ	0xFF8
  1450                           tblptrh	equ	0xFF7
  1451                           tblptrl	equ	0xFF6
  1452                           tablat	equ	0xFF5
  1453                           intcon	equ	0xFF2
  1454                           postinc0	equ	0xFEE
  1455                           postdec1	equ	0xFE5
  1456                           fsr1l	equ	0xFE1
  1457                           status	equ	0xFD8
  1458                           
  1459 ;; *************** function _initLCD *****************
  1460 ;; Defined at:
  1461 ;;		line 15 in file "lcd.c"
  1462 ;; Parameters:    Size  Location     Type
  1463 ;;		None
  1464 ;; Auto vars:     Size  Location     Type
  1465 ;;		None
  1466 ;; Return value:  Size  Location     Type
  1467 ;;                  1    wreg      void 
  1468 ;; Registers used:
  1469 ;;		wreg, status,2, status,0, cstack
  1470 ;; Tracked objects:
  1471 ;;		On entry : 0/0
  1472 ;;		On exit  : 0/0
  1473 ;;		Unchanged: 0/0
  1474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1477 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1478 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1479 ;;Total ram usage:        1 bytes
  1480 ;; Hardware stack levels used:    1
  1481 ;; Hardware stack levels required when called:    9
  1482 ;; This function calls:
  1483 ;;		_lcdInst
  1484 ;; This function is called by:
  1485 ;;		_main
  1486 ;; This function uses a non-reentrant model
  1487 ;;
  1488                           
  1489                           	psect	text5
  1490  000E64                     __ptext5:
  1491                           	opt stack 0
  1492  000E64                     _initLCD:
  1493                           	opt stack 21
  1494                           
  1495                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
  1496                           
  1497                           ;incstack = 0
  1498  000E64  0E31               	movlw	49
  1499  000E66  0100               	movlb	0	; () banked
  1500  000E68  6FBC               	movwf	??_initLCD& (0+255),b
  1501  000E6A  0EB2               	movlw	178
  1502  000E6C                     u1757:
  1503  000E6C  2EE8               	decfsz	wreg,f,c
  1504  000E6E  D7FE               	bra	u1757
  1505  000E70  2FBC               	decfsz	??_initLCD& (0+255),f,b
  1506  000E72  D7FC               	bra	u1757
  1507  000E74  F000               	nop	
  1508                           
  1509                           ;lcd.c: 18: lcdInst(0b00110011);
  1510  000E76  0E33               	movlw	51
  1511  000E78  ECBE  F007         	call	_lcdInst
  1512                           
  1513                           ;lcd.c: 19: lcdInst(0b00110010);
  1514  000E7C  0E32               	movlw	50
  1515  000E7E  ECBE  F007         	call	_lcdInst
  1516                           
  1517                           ;lcd.c: 20: lcdInst(0b00101000);
  1518  000E82  0E28               	movlw	40
  1519  000E84  ECBE  F007         	call	_lcdInst
  1520                           
  1521                           ;lcd.c: 21: lcdInst(0b00001111);
  1522  000E88  0E0F               	movlw	15
  1523  000E8A  ECBE  F007         	call	_lcdInst
  1524                           
  1525                           ;lcd.c: 22: lcdInst(0b00000110);
  1526  000E8E  0E06               	movlw	6
  1527  000E90  ECBE  F007         	call	_lcdInst
  1528                           
  1529                           ;lcd.c: 23: lcdInst(0b00000001);
  1530  000E94  0E01               	movlw	1
  1531  000E96  ECBE  F007         	call	_lcdInst
  1532                           
  1533                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
  1534  000E9A  0E31               	movlw	49
  1535  000E9C  0100               	movlb	0	; () banked
  1536  000E9E  6FBC               	movwf	??_initLCD& (0+255),b
  1537  000EA0  0EB2               	movlw	178
  1538  000EA2                     u1767:
  1539  000EA2  2EE8               	decfsz	wreg,f,c
  1540  000EA4  D7FE               	bra	u1767
  1541  000EA6  2FBC               	decfsz	??_initLCD& (0+255),f,b
  1542  000EA8  D7FC               	bra	u1767
  1543  000EAA  F000               	nop	
  1544  000EAC  0012               	return		;funcret
  1545  000EAE                     __end_of_initLCD:
  1546                           	opt stack 0
  1547                           tblptru	equ	0xFF8
  1548                           tblptrh	equ	0xFF7
  1549                           tblptrl	equ	0xFF6
  1550                           tablat	equ	0xFF5
  1551                           intcon	equ	0xFF2
  1552                           postinc0	equ	0xFEE
  1553                           wreg	equ	0xFE8
  1554                           postdec1	equ	0xFE5
  1555                           fsr1l	equ	0xFE1
  1556                           status	equ	0xFD8
  1557                           
  1558 ;; *************** function _lcdInst *****************
  1559 ;; Defined at:
  1560 ;;		line 27 in file "lcd.c"
  1561 ;; Parameters:    Size  Location     Type
  1562 ;;  data            1    wreg     unsigned char 
  1563 ;; Auto vars:     Size  Location     Type
  1564 ;;  data            1    3[BANK0 ] unsigned char 
  1565 ;; Return value:  Size  Location     Type
  1566 ;;                  1    wreg      void 
  1567 ;; Registers used:
  1568 ;;		wreg, status,2, status,0, cstack
  1569 ;; Tracked objects:
  1570 ;;		On entry : 0/0
  1571 ;;		On exit  : 0/0
  1572 ;;		Unchanged: 0/0
  1573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1575 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1576 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1577 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1578 ;;Total ram usage:        2 bytes
  1579 ;; Hardware stack levels used:    1
  1580 ;; Hardware stack levels required when called:    8
  1581 ;; This function calls:
  1582 ;;		_lcdNibble
  1583 ;; This function is called by:
  1584 ;;		_initLCD
  1585 ;;		_lcdHome
  1586 ;; This function uses a non-reentrant model
  1587 ;;
  1588                           
  1589                           	psect	text6
  1590  000F7C                     __ptext6:
  1591                           	opt stack 0
  1592  000F7C                     _lcdInst:
  1593                           	opt stack 21
  1594                           
  1595                           ;incstack = 0
  1596                           ;lcdInst@data stored from wreg
  1597  000F7C  0100               	movlb	0	; () banked
  1598  000F7E  6FBB               	movwf	lcdInst@data& (0+255),b
  1599                           
  1600                           ;lcd.c: 28: LATDbits.LATD2 = 0;
  1601  000F80  948C               	bcf	3980,2,c	;volatile
  1602                           
  1603                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
  1604  000F82  0E74               	movlw	116
  1605  000F84                     u1777:
  1606  000F84  2EE8               	decfsz	wreg,f,c
  1607  000F86  D7FE               	bra	u1777
  1608  000F88  D000               	nop2	
  1609                           
  1610                           ;lcd.c: 30: lcdNibble(data);
  1611  000F8A  0100               	movlb	0	; () banked
  1612  000F8C  51BB               	movf	lcdInst@data& (0+255),w,b
  1613  000F8E  ECC9  F005         	call	_lcdNibble
  1614                           
  1615                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
  1616  000F92  0E04               	movlw	4
  1617  000F94  0100               	movlb	0	; () banked
  1618  000F96  6FBA               	movwf	??_lcdInst& (0+255),b
  1619  000F98  0E3D               	movlw	61
  1620  000F9A                     u1787:
  1621  000F9A  2EE8               	decfsz	wreg,f,c
  1622  000F9C  D7FE               	bra	u1787
  1623  000F9E  2FBA               	decfsz	??_lcdInst& (0+255),f,b
  1624  000FA0  D7FC               	bra	u1787
  1625  000FA2  D000               	nop2	
  1626  000FA4  0012               	return		;funcret
  1627  000FA6                     __end_of_lcdInst:
  1628                           	opt stack 0
  1629                           tblptru	equ	0xFF8
  1630                           tblptrh	equ	0xFF7
  1631                           tblptrl	equ	0xFF6
  1632                           tablat	equ	0xFF5
  1633                           intcon	equ	0xFF2
  1634                           postinc0	equ	0xFEE
  1635                           wreg	equ	0xFE8
  1636                           postdec1	equ	0xFE5
  1637                           fsr1l	equ	0xFE1
  1638                           status	equ	0xFD8
  1639                           
  1640 ;; *************** function _lcdNibble *****************
  1641 ;; Defined at:
  1642 ;;		line 46 in file "lcd.c"
  1643 ;; Parameters:    Size  Location     Type
  1644 ;;  data            1    wreg     unsigned char 
  1645 ;; Auto vars:     Size  Location     Type
  1646 ;;  data            1    1[BANK0 ] unsigned char 
  1647 ;;  temp            1    0[BANK0 ] unsigned char 
  1648 ;; Return value:  Size  Location     Type
  1649 ;;                  1    wreg      void 
  1650 ;; Registers used:
  1651 ;;		wreg, status,2, status,0
  1652 ;; Tracked objects:
  1653 ;;		On entry : 0/0
  1654 ;;		On exit  : 0/0
  1655 ;;		Unchanged: 0/0
  1656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1658 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1660 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1661 ;;Total ram usage:        2 bytes
  1662 ;; Hardware stack levels used:    1
  1663 ;; Hardware stack levels required when called:    7
  1664 ;; This function calls:
  1665 ;;		Nothing
  1666 ;; This function is called by:
  1667 ;;		_lcdInst
  1668 ;; This function uses a non-reentrant model
  1669 ;;
  1670                           
  1671                           	psect	text7
  1672  000B92                     __ptext7:
  1673                           	opt stack 0
  1674  000B92                     _lcdNibble:
  1675                           	opt stack 21
  1676                           
  1677                           ;incstack = 0
  1678                           ;lcdNibble@data stored from wreg
  1679  000B92  0100               	movlb	0	; () banked
  1680  000B94  6FB9               	movwf	lcdNibble@data& (0+255),b
  1681                           
  1682                           ;lcd.c: 48: char temp = data & 0xF0;
  1683  000B96  0100               	movlb	0	; () banked
  1684  000B98  51B9               	movf	lcdNibble@data& (0+255),w,b
  1685  000B9A  0BF0               	andlw	240
  1686  000B9C  0100               	movlb	0	; () banked
  1687  000B9E  6FB8               	movwf	lcdNibble@temp& (0+255),b
  1688                           
  1689                           ;lcd.c: 49: LATD = LATD & 0x0F;
  1690  000BA0  508C               	movf	3980,w,c	;volatile
  1691  000BA2  0B0F               	andlw	15
  1692  000BA4  6E8C               	movwf	3980,c	;volatile
  1693                           
  1694                           ;lcd.c: 50: LATD = temp | LATD;
  1695  000BA6  0100               	movlb	0	; () banked
  1696  000BA8  51B8               	movf	lcdNibble@temp& (0+255),w,b
  1697  000BAA  108C               	iorwf	3980,w,c	;volatile
  1698  000BAC  6E8C               	movwf	3980,c	;volatile
  1699                           
  1700                           ; BSR set to: 0
  1701                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  1702  000BAE  968C               	bcf	3980,3,c	;volatile
  1703                           
  1704                           ; BSR set to: 0
  1705                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
  1706  000BB0  0ED6               	movlw	214
  1707  000BB2                     u1797:
  1708  000BB2  D000               	nop2	
  1709  000BB4  D000               	nop2	
  1710  000BB6  2EE8               	decfsz	wreg,f,c
  1711  000BB8  D7FC               	bra	u1797
  1712  000BBA  D000               	nop2	
  1713                           
  1714                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  1715  000BBC  868C               	bsf	3980,3,c	;volatile
  1716                           
  1717                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
  1718  000BBE  0ED6               	movlw	214
  1719  000BC0                     u1807:
  1720  000BC0  D000               	nop2	
  1721  000BC2  D000               	nop2	
  1722  000BC4  2EE8               	decfsz	wreg,f,c
  1723  000BC6  D7FC               	bra	u1807
  1724  000BC8  D000               	nop2	
  1725                           
  1726                           ;lcd.c: 58: data = data << 4;
  1727  000BCA  0100               	movlb	0	; () banked
  1728  000BCC  39B9               	swapf	lcdNibble@data& (0+255),w,b
  1729  000BCE  0BF0               	andlw	240
  1730  000BD0  0100               	movlb	0	; () banked
  1731  000BD2  6FB9               	movwf	lcdNibble@data& (0+255),b
  1732                           
  1733                           ;lcd.c: 60: temp = data & 0xF0;
  1734  000BD4  0100               	movlb	0	; () banked
  1735  000BD6  51B9               	movf	lcdNibble@data& (0+255),w,b
  1736  000BD8  0BF0               	andlw	240
  1737  000BDA  0100               	movlb	0	; () banked
  1738  000BDC  6FB8               	movwf	lcdNibble@temp& (0+255),b
  1739                           
  1740                           ;lcd.c: 61: LATD = LATD & 0x0F;
  1741  000BDE  508C               	movf	3980,w,c	;volatile
  1742  000BE0  0B0F               	andlw	15
  1743  000BE2  6E8C               	movwf	3980,c	;volatile
  1744                           
  1745                           ;lcd.c: 62: LATD = temp | LATD;
  1746  000BE4  0100               	movlb	0	; () banked
  1747  000BE6  51B8               	movf	lcdNibble@temp& (0+255),w,b
  1748  000BE8  108C               	iorwf	3980,w,c	;volatile
  1749  000BEA  6E8C               	movwf	3980,c	;volatile
  1750                           
  1751                           ; BSR set to: 0
  1752                           ;lcd.c: 64: LATDbits.LATD3 = 0;
  1753  000BEC  968C               	bcf	3980,3,c	;volatile
  1754                           
  1755                           ; BSR set to: 0
  1756                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
  1757  000BEE  0ED6               	movlw	214
  1758  000BF0                     u1817:
  1759  000BF0  D000               	nop2	
  1760  000BF2  D000               	nop2	
  1761  000BF4  2EE8               	decfsz	wreg,f,c
  1762  000BF6  D7FC               	bra	u1817
  1763  000BF8  D000               	nop2	
  1764                           
  1765                           ;lcd.c: 66: LATDbits.LATD3 = 1;
  1766  000BFA  868C               	bsf	3980,3,c	;volatile
  1767                           
  1768                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
  1769  000BFC  0ED6               	movlw	214
  1770  000BFE                     u1827:
  1771  000BFE  D000               	nop2	
  1772  000C00  D000               	nop2	
  1773  000C02  2EE8               	decfsz	wreg,f,c
  1774  000C04  D7FC               	bra	u1827
  1775  000C06  D000               	nop2	
  1776  000C08  0012               	return		;funcret
  1777  000C0A                     __end_of_lcdNibble:
  1778                           	opt stack 0
  1779                           tblptru	equ	0xFF8
  1780                           tblptrh	equ	0xFF7
  1781                           tblptrl	equ	0xFF6
  1782                           tablat	equ	0xFF5
  1783                           intcon	equ	0xFF2
  1784                           postinc0	equ	0xFEE
  1785                           wreg	equ	0xFE8
  1786                           postdec1	equ	0xFE5
  1787                           fsr1l	equ	0xFE1
  1788                           status	equ	0xFD8
  1789                           
  1790 ;; *************** function _service *****************
  1791 ;; Defined at:
  1792 ;;		line 133 in file "main.c"
  1793 ;; Parameters:    Size  Location     Type
  1794 ;;		None
  1795 ;; Auto vars:     Size  Location     Type
  1796 ;;  key             1  115[COMRAM] unsigned char 
  1797 ;; Return value:  Size  Location     Type
  1798 ;;                  1    wreg      void 
  1799 ;; Registers used:
  1800 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1801 ;; Tracked objects:
  1802 ;;		On entry : 0/0
  1803 ;;		On exit  : 0/0
  1804 ;;		Unchanged: 0/0
  1805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1807 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1808 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1809 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1810 ;;Total ram usage:       15 bytes
  1811 ;; Hardware stack levels used:    1
  1812 ;; Hardware stack levels required when called:    6
  1813 ;; This function calls:
  1814 ;;		_servoInterruptService
  1815 ;;		_setAngle
  1816 ;; This function is called by:
  1817 ;;		Interrupt level 2
  1818 ;; This function uses a non-reentrant model
  1819 ;;
  1820                           
  1821                           	psect	intcode
  1822  000008                     __pintcode:
  1823                           	opt stack 0
  1824  000008                     _service:
  1825                           	opt stack 21
  1826                           
  1827                           ;incstack = 0
  1828  000008  827D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1829  00000A  ED1E  F004         	call	int_func,f	;refresh shadow registers
  1830                           tblptru	equ	0xFF8
  1831                           tblptrh	equ	0xFF7
  1832                           tblptrl	equ	0xFF6
  1833                           tablat	equ	0xFF5
  1834                           intcon	equ	0xFF2
  1835                           postinc0	equ	0xFEE
  1836                           wreg	equ	0xFE8
  1837                           postdec1	equ	0xFE5
  1838                           fsr1l	equ	0xFE1
  1839                           status	equ	0xFD8
  1840                           
  1841                           	psect	intcode_body
  1842  00083C                     __pintcode_body:
  1843                           	opt stack 21
  1844  00083C                     int_func:
  1845                           	opt stack 21
  1846  00083C  0006               	pop		; remove dummy address from shadow register refresh
  1847  00083E  CFFA F066          	movff	pclath,??_service
  1848  000842  CFFB F067          	movff	pclatu,??_service+1
  1849  000846  CFE9 F068          	movff	fsr0l,??_service+2
  1850  00084A  CFEA F069          	movff	fsr0h,??_service+3
  1851  00084E  CFE1 F06A          	movff	fsr1l,??_service+4
  1852  000852  CFE2 F06B          	movff	fsr1h,??_service+5
  1853  000856  CFD9 F06C          	movff	fsr2l,??_service+6
  1854  00085A  CFDA F06D          	movff	fsr2h,??_service+7
  1855  00085E  CFF3 F06E          	movff	prodl,??_service+8
  1856  000862  CFF4 F06F          	movff	prodh,??_service+9
  1857  000866  CFF6 F070          	movff	tblptrl,??_service+10
  1858  00086A  CFF7 F071          	movff	tblptrh,??_service+11
  1859  00086E  CFF8 F072          	movff	tblptru,??_service+12
  1860  000872  CFF5 F073          	movff	tablat,??_service+13
  1861                           
  1862                           ;main.c: 135: servoInterruptService();
  1863  000876  EC11  F003         	call	_servoInterruptService	;wreg free
  1864                           
  1865                           ;main.c: 138: if(INT1IF){INT1IF = 0;
  1866  00087A  A0F0               	btfss	intcon3,0,c	;volatile
  1867  00087C  D06F               	goto	i2l114
  1868  00087E  90F0               	bcf	intcon3,0,c	;volatile
  1869                           
  1870                           ;main.c: 139: char key = (PORTB & 0xF0) >> 4;
  1871  000880  3881               	swapf	3969,w,c	;volatile
  1872  000882  0B0F               	andlw	15
  1873  000884  0B0F               	andlw	15
  1874  000886  6E74               	movwf	service@key,c
  1875                           
  1876                           ;main.c: 140: if(key == 0)setAngle(0,2500);
  1877  000888  5074               	movf	service@key,w,c
  1878  00088A  A4D8               	btfss	status,2,c
  1879  00088C  D00E               	goto	i2l2697
  1880  00088E  0E00               	movlw	0
  1881  000890  6E2F               	movwf	setAngle@id+1,c
  1882  000892  0E00               	movlw	0
  1883  000894  6E2E               	movwf	setAngle@id,c
  1884  000896  0EC4               	movlw	196
  1885  000898  6E30               	movwf	setAngle@puls,c
  1886  00089A  0E09               	movlw	9
  1887  00089C  6E31               	movwf	setAngle@puls+1,c
  1888  00089E  0E00               	movlw	0
  1889  0008A0  6E32               	movwf	setAngle@puls+2,c
  1890  0008A2  0E00               	movlw	0
  1891  0008A4  6E33               	movwf	setAngle@puls+3,c
  1892  0008A6  EC09  F000         	call	_setAngle	;wreg free
  1893  0008AA                     i2l2697:
  1894                           
  1895                           ;main.c: 141: if(key == 1)setAngle(0,1500);
  1896  0008AA  0474               	decf	service@key,w,c
  1897  0008AC  A4D8               	btfss	status,2,c
  1898  0008AE  D00E               	goto	i2l2701
  1899  0008B0  0E00               	movlw	0
  1900  0008B2  6E2F               	movwf	setAngle@id+1,c
  1901  0008B4  0E00               	movlw	0
  1902  0008B6  6E2E               	movwf	setAngle@id,c
  1903  0008B8  0EDC               	movlw	220
  1904  0008BA  6E30               	movwf	setAngle@puls,c
  1905  0008BC  0E05               	movlw	5
  1906  0008BE  6E31               	movwf	setAngle@puls+1,c
  1907  0008C0  0E00               	movlw	0
  1908  0008C2  6E32               	movwf	setAngle@puls+2,c
  1909  0008C4  0E00               	movlw	0
  1910  0008C6  6E33               	movwf	setAngle@puls+3,c
  1911  0008C8  EC09  F000         	call	_setAngle	;wreg free
  1912  0008CC                     i2l2701:
  1913                           
  1914                           ;main.c: 142: if(key == 2)setAngle(0,500);
  1915  0008CC  0E02               	movlw	2
  1916  0008CE  1874               	xorwf	service@key,w,c
  1917  0008D0  A4D8               	btfss	status,2,c
  1918  0008D2  D00E               	goto	i2l2705
  1919  0008D4  0E00               	movlw	0
  1920  0008D6  6E2F               	movwf	setAngle@id+1,c
  1921  0008D8  0E00               	movlw	0
  1922  0008DA  6E2E               	movwf	setAngle@id,c
  1923  0008DC  0EF4               	movlw	244
  1924  0008DE  6E30               	movwf	setAngle@puls,c
  1925  0008E0  0E01               	movlw	1
  1926  0008E2  6E31               	movwf	setAngle@puls+1,c
  1927  0008E4  0E00               	movlw	0
  1928  0008E6  6E32               	movwf	setAngle@puls+2,c
  1929  0008E8  0E00               	movlw	0
  1930  0008EA  6E33               	movwf	setAngle@puls+3,c
  1931  0008EC  EC09  F000         	call	_setAngle	;wreg free
  1932  0008F0                     i2l2705:
  1933                           
  1934                           ;main.c: 144: if(key == 4)setAngle(1,2500);
  1935  0008F0  0E04               	movlw	4
  1936  0008F2  1874               	xorwf	service@key,w,c
  1937  0008F4  A4D8               	btfss	status,2,c
  1938  0008F6  D00E               	goto	i2l2709
  1939  0008F8  0E00               	movlw	0
  1940  0008FA  6E2F               	movwf	setAngle@id+1,c
  1941  0008FC  0E01               	movlw	1
  1942  0008FE  6E2E               	movwf	setAngle@id,c
  1943  000900  0EC4               	movlw	196
  1944  000902  6E30               	movwf	setAngle@puls,c
  1945  000904  0E09               	movlw	9
  1946  000906  6E31               	movwf	setAngle@puls+1,c
  1947  000908  0E00               	movlw	0
  1948  00090A  6E32               	movwf	setAngle@puls+2,c
  1949  00090C  0E00               	movlw	0
  1950  00090E  6E33               	movwf	setAngle@puls+3,c
  1951  000910  EC09  F000         	call	_setAngle	;wreg free
  1952  000914                     i2l2709:
  1953                           
  1954                           ;main.c: 145: if(key == 5)setAngle(1,1500);
  1955  000914  0E05               	movlw	5
  1956  000916  1874               	xorwf	service@key,w,c
  1957  000918  A4D8               	btfss	status,2,c
  1958  00091A  D00E               	goto	i2l2713
  1959  00091C  0E00               	movlw	0
  1960  00091E  6E2F               	movwf	setAngle@id+1,c
  1961  000920  0E01               	movlw	1
  1962  000922  6E2E               	movwf	setAngle@id,c
  1963  000924  0EDC               	movlw	220
  1964  000926  6E30               	movwf	setAngle@puls,c
  1965  000928  0E05               	movlw	5
  1966  00092A  6E31               	movwf	setAngle@puls+1,c
  1967  00092C  0E00               	movlw	0
  1968  00092E  6E32               	movwf	setAngle@puls+2,c
  1969  000930  0E00               	movlw	0
  1970  000932  6E33               	movwf	setAngle@puls+3,c
  1971  000934  EC09  F000         	call	_setAngle	;wreg free
  1972  000938                     i2l2713:
  1973                           
  1974                           ;main.c: 146: if(key == 6)setAngle(1,500);
  1975  000938  0E06               	movlw	6
  1976  00093A  1874               	xorwf	service@key,w,c
  1977  00093C  A4D8               	btfss	status,2,c
  1978  00093E  D00E               	goto	i2l114
  1979  000940  0E00               	movlw	0
  1980  000942  6E2F               	movwf	setAngle@id+1,c
  1981  000944  0E01               	movlw	1
  1982  000946  6E2E               	movwf	setAngle@id,c
  1983  000948  0EF4               	movlw	244
  1984  00094A  6E30               	movwf	setAngle@puls,c
  1985  00094C  0E01               	movlw	1
  1986  00094E  6E31               	movwf	setAngle@puls+1,c
  1987  000950  0E00               	movlw	0
  1988  000952  6E32               	movwf	setAngle@puls+2,c
  1989  000954  0E00               	movlw	0
  1990  000956  6E33               	movwf	setAngle@puls+3,c
  1991  000958  EC09  F000         	call	_setAngle	;wreg free
  1992  00095C                     i2l114:
  1993  00095C  C073  FFF5         	movff	??_service+13,tablat
  1994  000960  C072  FFF8         	movff	??_service+12,tblptru
  1995  000964  C071  FFF7         	movff	??_service+11,tblptrh
  1996  000968  C070  FFF6         	movff	??_service+10,tblptrl
  1997  00096C  C06F  FFF4         	movff	??_service+9,prodh
  1998  000970  C06E  FFF3         	movff	??_service+8,prodl
  1999  000974  C06D  FFDA         	movff	??_service+7,fsr2h
  2000  000978  C06C  FFD9         	movff	??_service+6,fsr2l
  2001  00097C  C06B  FFE2         	movff	??_service+5,fsr1h
  2002  000980  C06A  FFE1         	movff	??_service+4,fsr1l
  2003  000984  C069  FFEA         	movff	??_service+3,fsr0h
  2004  000988  C068  FFE9         	movff	??_service+2,fsr0l
  2005  00098C  C067  FFFB         	movff	??_service+1,pclatu
  2006  000990  C066  FFFA         	movff	??_service,pclath
  2007  000994  927D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2008  000996  0011               	retfie		f
  2009  000998                     __end_of_service:
  2010                           	opt stack 0
  2011                           pclatu	equ	0xFFB
  2012                           pclath	equ	0xFFA
  2013                           tblptru	equ	0xFF8
  2014                           tblptrh	equ	0xFF7
  2015                           tblptrl	equ	0xFF6
  2016                           tablat	equ	0xFF5
  2017                           prodh	equ	0xFF4
  2018                           prodl	equ	0xFF3
  2019                           intcon	equ	0xFF2
  2020                           intcon3	equ	0xFF0
  2021                           postinc0	equ	0xFEE
  2022                           fsr0h	equ	0xFEA
  2023                           fsr0l	equ	0xFE9
  2024                           wreg	equ	0xFE8
  2025                           postdec1	equ	0xFE5
  2026                           fsr1h	equ	0xFE2
  2027                           fsr1l	equ	0xFE1
  2028                           fsr2h	equ	0xFDA
  2029                           fsr2l	equ	0xFD9
  2030                           status	equ	0xFD8
  2031                           
  2032 ;; *************** function _setAngle *****************
  2033 ;; Defined at:
  2034 ;;		line 28 in file "servo.c"
  2035 ;; Parameters:    Size  Location     Type
  2036 ;;  id              2   45[COMRAM] int 
  2037 ;;  puls            4   47[COMRAM] long 
  2038 ;; Auto vars:     Size  Location     Type
  2039 ;;  b               2   99[COMRAM] int 
  2040 ;;  smallest        4   83[COMRAM] long 
  2041 ;;  smallest_ind    2   91[COMRAM] int 
  2042 ;;  a               2   97[COMRAM] int 
  2043 ;;  a               2   89[COMRAM] int 
  2044 ;;  a               2   95[COMRAM] int 
  2045 ;;  seen           20   63[COMRAM] int [10]
  2046 ;;  prev            2   93[COMRAM] int 
  2047 ;;  ind             2   87[COMRAM] int 
  2048 ;; Return value:  Size  Location     Type
  2049 ;;                  1    wreg      void 
  2050 ;; Registers used:
  2051 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2052 ;; Tracked objects:
  2053 ;;		On entry : 0/0
  2054 ;;		On exit  : 0/0
  2055 ;;		Unchanged: 0/0
  2056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2057 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2058 ;;      Locals:        38       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2059 ;;      Temps:         12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2060 ;;      Totals:        56       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2061 ;;Total ram usage:       56 bytes
  2062 ;; Hardware stack levels used:    1
  2063 ;; Hardware stack levels required when called:    5
  2064 ;; This function calls:
  2065 ;;		___aldiv
  2066 ;;		___lmul
  2067 ;;		_lcdClear
  2068 ;;		_printf
  2069 ;; This function is called by:
  2070 ;;		_service
  2071 ;; This function uses a non-reentrant model
  2072 ;;
  2073                           
  2074                           	psect	text9
  2075  000012                     __ptext9:
  2076                           	opt stack 0
  2077  000012                     _setAngle:
  2078                           	opt stack 21
  2079                           
  2080                           ;servo.c: 29: pulse[id] = puls;
  2081                           
  2082                           ;incstack = 0
  2083  000012  0E80               	movlw	low _pulse
  2084  000014  6E34               	movwf	??_setAngle& (0+255),c
  2085  000016  0E00               	movlw	high _pulse
  2086  000018  6E35               	movwf	(??_setAngle+1)& (0+255),c
  2087  00001A  90D8               	bcf	status,0,c
  2088  00001C  342E               	rlcf	setAngle@id,w,c
  2089  00001E  6ED9               	movwf	fsr2l,c
  2090  000020  342F               	rlcf	setAngle@id+1,w,c
  2091  000022  6EDA               	movwf	fsr2h,c
  2092  000024  90D8               	bcf	status,0,c
  2093  000026  36D9               	rlcf	fsr2l,f,c
  2094  000028  36DA               	rlcf	fsr2h,f,c
  2095  00002A  5034               	movf	??_setAngle,w,c
  2096  00002C  26D9               	addwf	fsr2l,f,c
  2097  00002E  5035               	movf	??_setAngle+1,w,c
  2098  000030  22DA               	addwfc	fsr2h,f,c
  2099  000032  C030  FFDE         	movff	setAngle@puls,postinc2
  2100  000036  C031  FFDE         	movff	setAngle@puls+1,postinc2
  2101  00003A  C032  FFDE         	movff	setAngle@puls+2,postinc2
  2102  00003E  C033  FFDE         	movff	setAngle@puls+3,postinc2
  2103                           
  2104                           ;servo.c: 32: int seen[10];
  2105                           ;servo.c: 33: for(int a = 0; a < nServo; a++)
  2106  000042  0E00               	movlw	0
  2107  000044  6E61               	movwf	setAngle@a+1,c
  2108  000046  0E00               	movlw	0
  2109  000048  6E60               	movwf	setAngle@a,c
  2110  00004A  D00F               	goto	i2l2541
  2111  00004C                     i2l2537:
  2112                           
  2113                           ;servo.c: 34: seen[a] = 0;
  2114  00004C  90D8               	bcf	status,0,c
  2115  00004E  3460               	rlcf	setAngle@a,w,c
  2116  000050  6ED9               	movwf	fsr2l,c
  2117  000052  3461               	rlcf	setAngle@a+1,w,c
  2118  000054  6EDA               	movwf	fsr2h,c
  2119  000056  0E40               	movlw	low setAngle@seen
  2120  000058  26D9               	addwf	fsr2l,f,c
  2121  00005A  0E00               	movlw	high setAngle@seen
  2122  00005C  22DA               	addwfc	fsr2h,f,c
  2123  00005E  0E00               	movlw	0
  2124  000060  6EDE               	movwf	postinc2,c
  2125  000062  0E00               	movlw	0
  2126  000064  6EDD               	movwf	postdec2,c
  2127  000066  4A60               	infsnz	setAngle@a,f,c
  2128  000068  2A61               	incf	setAngle@a+1,f,c
  2129  00006A                     i2l2541:
  2130  00006A  5079               	movf	_nServo,w,c
  2131  00006C  5C60               	subwf	setAngle@a,w,c
  2132  00006E  5061               	movf	setAngle@a+1,w,c
  2133  000070  0A80               	xorlw	128
  2134  000072  6E34               	movwf	??_setAngle& (0+255),c
  2135  000074  507A               	movf	_nServo+1,w,c
  2136  000076  0A80               	xorlw	128
  2137  000078  5834               	subwfb	??_setAngle& (0+255),w,c
  2138  00007A  A0D8               	btfss	status,0,c
  2139  00007C  D7E7               	goto	i2l2537
  2140                           
  2141                           ;servo.c: 36: int ind = 0;
  2142  00007E  0E00               	movlw	0
  2143  000080  6E59               	movwf	setAngle@ind+1,c
  2144  000082  0E00               	movlw	0
  2145  000084  6E58               	movwf	setAngle@ind,c
  2146                           
  2147                           ;servo.c: 37: for(int a = 0; a < nServo; a++){
  2148  000086  0E00               	movlw	0
  2149  000088  6E5B               	movwf	setAngle@a_503+1,c
  2150  00008A  0E00               	movlw	0
  2151  00008C  6E5A               	movwf	setAngle@a_503,c
  2152  00008E  D082               	goto	i2l2565
  2153  000090                     i2l2545:
  2154                           
  2155                           ;servo.c: 38: long smallest = 0xffff;
  2156  000090  0EFF               	movlw	255
  2157  000092  6E54               	movwf	setAngle@smallest,c
  2158  000094  0EFF               	movlw	255
  2159  000096  6E55               	movwf	setAngle@smallest+1,c
  2160  000098  0E00               	movlw	0
  2161  00009A  6E56               	movwf	setAngle@smallest+2,c
  2162  00009C  0E00               	movlw	0
  2163  00009E  6E57               	movwf	setAngle@smallest+3,c
  2164                           
  2165                           ;servo.c: 39: int smallest_ind = 0;
  2166  0000A0  0E00               	movlw	0
  2167  0000A2  6E5D               	movwf	setAngle@smallest_ind+1,c
  2168  0000A4  0E00               	movlw	0
  2169  0000A6  6E5C               	movwf	setAngle@smallest_ind,c
  2170                           
  2171                           ;servo.c: 40: for(int b = 0; b < nServo; b++){
  2172  0000A8  0E00               	movlw	0
  2173  0000AA  6E65               	movwf	setAngle@b+1,c
  2174  0000AC  0E00               	movlw	0
  2175  0000AE  6E64               	movwf	setAngle@b,c
  2176  0000B0  D056               	goto	i2l2557
  2177  0000B2                     i2l2547:
  2178                           
  2179                           ;servo.c: 41: if(!seen[b] && pulse[b] < smallest){
  2180  0000B2  90D8               	bcf	status,0,c
  2181  0000B4  3464               	rlcf	setAngle@b,w,c
  2182  0000B6  6ED9               	movwf	fsr2l,c
  2183  0000B8  3465               	rlcf	setAngle@b+1,w,c
  2184  0000BA  6EDA               	movwf	fsr2h,c
  2185  0000BC  0E40               	movlw	low setAngle@seen
  2186  0000BE  26D9               	addwf	fsr2l,f,c
  2187  0000C0  0E00               	movlw	high setAngle@seen
  2188  0000C2  22DA               	addwfc	fsr2h,f,c
  2189  0000C4  50DE               	movf	postinc2,w,c
  2190  0000C6  10DE               	iorwf	postinc2,w,c
  2191  0000C8  A4D8               	btfss	status,2,c
  2192  0000CA  D047               	goto	i2l2555
  2193  0000CC  0E80               	movlw	low _pulse
  2194  0000CE  6E34               	movwf	??_setAngle& (0+255),c
  2195  0000D0  0E00               	movlw	high _pulse
  2196  0000D2  6E35               	movwf	(??_setAngle+1)& (0+255),c
  2197  0000D4  90D8               	bcf	status,0,c
  2198  0000D6  3464               	rlcf	setAngle@b,w,c
  2199  0000D8  6ED9               	movwf	fsr2l,c
  2200  0000DA  3465               	rlcf	setAngle@b+1,w,c
  2201  0000DC  6EDA               	movwf	fsr2h,c
  2202  0000DE  90D8               	bcf	status,0,c
  2203  0000E0  36D9               	rlcf	fsr2l,f,c
  2204  0000E2  36DA               	rlcf	fsr2h,f,c
  2205  0000E4  5034               	movf	??_setAngle,w,c
  2206  0000E6  26D9               	addwf	fsr2l,f,c
  2207  0000E8  5035               	movf	??_setAngle+1,w,c
  2208  0000EA  22DA               	addwfc	fsr2h,f,c
  2209  0000EC  5054               	movf	setAngle@smallest,w,c
  2210  0000EE  5CDE               	subwf	postinc2,w,c
  2211  0000F0  5055               	movf	setAngle@smallest+1,w,c
  2212  0000F2  58DE               	subwfb	postinc2,w,c
  2213  0000F4  5056               	movf	setAngle@smallest+2,w,c
  2214  0000F6  58DE               	subwfb	postinc2,w,c
  2215  0000F8  50DE               	movf	postinc2,w,c
  2216  0000FA  0A80               	xorlw	128
  2217  0000FC  6E3A               	movwf	(??_setAngle+6)& (0+255),c
  2218  0000FE  5057               	movf	setAngle@smallest+3,w,c
  2219  000100  0A80               	xorlw	128
  2220  000102  583A               	subwfb	(??_setAngle+6)& (0+255),w,c
  2221  000104  B0D8               	btfsc	status,0,c
  2222  000106  D029               	goto	i2l2555
  2223                           
  2224                           ;servo.c: 42: seen[b] = 1;
  2225  000108  90D8               	bcf	status,0,c
  2226  00010A  3464               	rlcf	setAngle@b,w,c
  2227  00010C  6ED9               	movwf	fsr2l,c
  2228  00010E  3465               	rlcf	setAngle@b+1,w,c
  2229  000110  6EDA               	movwf	fsr2h,c
  2230  000112  0E40               	movlw	low setAngle@seen
  2231  000114  26D9               	addwf	fsr2l,f,c
  2232  000116  0E00               	movlw	high setAngle@seen
  2233  000118  22DA               	addwfc	fsr2h,f,c
  2234  00011A  0E01               	movlw	1
  2235  00011C  6EDE               	movwf	postinc2,c
  2236  00011E  0E00               	movlw	0
  2237  000120  6EDD               	movwf	postdec2,c
  2238                           
  2239                           ;servo.c: 43: smallest = pulse[b];
  2240  000122  0E80               	movlw	low _pulse
  2241  000124  6E34               	movwf	??_setAngle& (0+255),c
  2242  000126  0E00               	movlw	high _pulse
  2243  000128  6E35               	movwf	(??_setAngle+1)& (0+255),c
  2244  00012A  90D8               	bcf	status,0,c
  2245  00012C  3464               	rlcf	setAngle@b,w,c
  2246  00012E  6ED9               	movwf	fsr2l,c
  2247  000130  3465               	rlcf	setAngle@b+1,w,c
  2248  000132  6EDA               	movwf	fsr2h,c
  2249  000134  90D8               	bcf	status,0,c
  2250  000136  36D9               	rlcf	fsr2l,f,c
  2251  000138  36DA               	rlcf	fsr2h,f,c
  2252  00013A  5034               	movf	??_setAngle,w,c
  2253  00013C  26D9               	addwf	fsr2l,f,c
  2254  00013E  5035               	movf	??_setAngle+1,w,c
  2255  000140  22DA               	addwfc	fsr2h,f,c
  2256  000142  CFDE F054          	movff	postinc2,setAngle@smallest
  2257  000146  CFDE F055          	movff	postinc2,setAngle@smallest+1
  2258  00014A  CFDE F056          	movff	postinc2,setAngle@smallest+2
  2259  00014E  CFDE F057          	movff	postinc2,setAngle@smallest+3
  2260                           
  2261                           ;servo.c: 44: smallest_ind = b;
  2262  000152  C064  F05C         	movff	setAngle@b,setAngle@smallest_ind
  2263  000156  C065  F05D         	movff	setAngle@b+1,setAngle@smallest_ind+1
  2264  00015A                     i2l2555:
  2265  00015A  4A64               	infsnz	setAngle@b,f,c
  2266  00015C  2A65               	incf	setAngle@b+1,f,c
  2267  00015E                     i2l2557:
  2268  00015E  5079               	movf	_nServo,w,c
  2269  000160  5C64               	subwf	setAngle@b,w,c
  2270  000162  5065               	movf	setAngle@b+1,w,c
  2271  000164  0A80               	xorlw	128
  2272  000166  6E34               	movwf	??_setAngle& (0+255),c
  2273  000168  507A               	movf	_nServo+1,w,c
  2274  00016A  0A80               	xorlw	128
  2275  00016C  5834               	subwfb	??_setAngle& (0+255),w,c
  2276  00016E  A0D8               	btfss	status,0,c
  2277  000170  D7A0               	goto	i2l2547
  2278                           
  2279                           ;servo.c: 45: }
  2280                           ;servo.c: 46: }
  2281                           ;servo.c: 47: order[ind++] = smallest_ind;
  2282  000172  90D8               	bcf	status,0,c
  2283  000174  3458               	rlcf	setAngle@ind,w,c
  2284  000176  6ED9               	movwf	fsr2l,c
  2285  000178  3459               	rlcf	setAngle@ind+1,w,c
  2286  00017A  6EDA               	movwf	fsr2h,c
  2287  00017C  0EA0               	movlw	low _order
  2288  00017E  26D9               	addwf	fsr2l,f,c
  2289  000180  0E00               	movlw	high _order
  2290  000182  22DA               	addwfc	fsr2h,f,c
  2291  000184  C05C  FFDE         	movff	setAngle@smallest_ind,postinc2
  2292  000188  C05D  FFDD         	movff	setAngle@smallest_ind+1,postdec2
  2293  00018C  4A58               	infsnz	setAngle@ind,f,c
  2294  00018E  2A59               	incf	setAngle@ind+1,f,c
  2295  000190  4A5A               	infsnz	setAngle@a_503,f,c
  2296  000192  2A5B               	incf	setAngle@a_503+1,f,c
  2297  000194                     i2l2565:
  2298  000194  5079               	movf	_nServo,w,c
  2299  000196  5C5A               	subwf	setAngle@a_503,w,c
  2300  000198  505B               	movf	setAngle@a_503+1,w,c
  2301  00019A  0A80               	xorlw	128
  2302  00019C  6E34               	movwf	??_setAngle& (0+255),c
  2303  00019E  507A               	movf	_nServo+1,w,c
  2304  0001A0  0A80               	xorlw	128
  2305  0001A2  5834               	subwfb	??_setAngle& (0+255),w,c
  2306  0001A4  A0D8               	btfss	status,0,c
  2307  0001A6  D774               	goto	i2l2545
  2308                           
  2309                           ;servo.c: 48: }
  2310                           ;servo.c: 51: int prev = 0;
  2311  0001A8  0E00               	movlw	0
  2312  0001AA  6E5F               	movwf	setAngle@prev+1,c
  2313  0001AC  0E00               	movlw	0
  2314  0001AE  6E5E               	movwf	setAngle@prev,c
  2315                           
  2316                           ;servo.c: 52: for(int a = 0; a < nServo; a++){
  2317  0001B0  0E00               	movlw	0
  2318  0001B2  6E63               	movwf	setAngle@a_508+1,c
  2319  0001B4  0E00               	movlw	0
  2320  0001B6  6E62               	movwf	setAngle@a_508,c
  2321  0001B8  D09B               	goto	i2l2575
  2322  0001BA                     i2l2569:
  2323                           
  2324                           ;servo.c: 53: sequence[order[a]] = (pulse[order[a]] - prev) * 5 / 2;
  2325  0001BA  90D8               	bcf	status,0,c
  2326  0001BC  3462               	rlcf	setAngle@a_508,w,c
  2327  0001BE  6ED9               	movwf	fsr2l,c
  2328  0001C0  3463               	rlcf	setAngle@a_508+1,w,c
  2329  0001C2  6EDA               	movwf	fsr2h,c
  2330  0001C4  0EA0               	movlw	low _order
  2331  0001C6  26D9               	addwf	fsr2l,f,c
  2332  0001C8  0E00               	movlw	high _order
  2333  0001CA  22DA               	addwfc	fsr2h,f,c
  2334  0001CC  CFDE F034          	movff	postinc2,??_setAngle
  2335  0001D0  CFDD F035          	movff	postdec2,??_setAngle+1
  2336  0001D4  90D8               	bcf	status,0,c
  2337  0001D6  3634               	rlcf	??_setAngle,f,c
  2338  0001D8  3635               	rlcf	??_setAngle+1,f,c
  2339  0001DA  90D8               	bcf	status,0,c
  2340  0001DC  3634               	rlcf	??_setAngle,f,c
  2341  0001DE  3635               	rlcf	??_setAngle+1,f,c
  2342  0001E0  0E80               	movlw	low _pulse
  2343  0001E2  2434               	addwf	??_setAngle,w,c
  2344  0001E4  6ED9               	movwf	fsr2l,c
  2345  0001E6  0E00               	movlw	high _pulse
  2346  0001E8  2035               	addwfc	??_setAngle+1,w,c
  2347  0001EA  6EDA               	movwf	fsr2h,c
  2348  0001EC  CFDE F036          	movff	postinc2,??_setAngle+2
  2349  0001F0  CFDE F037          	movff	postinc2,??_setAngle+3
  2350  0001F4  CFDE F038          	movff	postinc2,??_setAngle+4
  2351  0001F8  CFDE F039          	movff	postinc2,??_setAngle+5
  2352  0001FC  C05E  F03A         	movff	setAngle@prev,??_setAngle+6
  2353  000200  C05F  F03B         	movff	setAngle@prev+1,??_setAngle+7
  2354  000204  0E00               	movlw	0
  2355  000206  BE3B               	btfsc	(??_setAngle+7)& (0+255),7,c
  2356  000208  0EFF               	movlw	255
  2357  00020A  6E3C               	movwf	(??_setAngle+8)& (0+255),c
  2358  00020C  6E3D               	movwf	(??_setAngle+9)& (0+255),c
  2359  00020E  1E3A               	comf	??_setAngle+6,f,c
  2360  000210  1E3B               	comf	??_setAngle+7,f,c
  2361  000212  1E3C               	comf	??_setAngle+8,f,c
  2362  000214  1E3D               	comf	??_setAngle+9,f,c
  2363  000216  2A3A               	incf	??_setAngle+6,f,c
  2364  000218  0E00               	movlw	0
  2365  00021A  223B               	addwfc	??_setAngle+7,f,c
  2366  00021C  223C               	addwfc	??_setAngle+8,f,c
  2367  00021E  223D               	addwfc	??_setAngle+9,f,c
  2368  000220  5036               	movf	??_setAngle+2,w,c
  2369  000222  243A               	addwf	??_setAngle+6,w,c
  2370  000224  6E01               	movwf	___lmul@multiplier,c
  2371  000226  5037               	movf	??_setAngle+3,w,c
  2372  000228  203B               	addwfc	??_setAngle+7,w,c
  2373  00022A  6E02               	movwf	___lmul@multiplier+1,c
  2374  00022C  5038               	movf	??_setAngle+4,w,c
  2375  00022E  203C               	addwfc	??_setAngle+8,w,c
  2376  000230  6E03               	movwf	___lmul@multiplier+2,c
  2377  000232  5039               	movf	??_setAngle+5,w,c
  2378  000234  203D               	addwfc	??_setAngle+9,w,c
  2379  000236  6E04               	movwf	___lmul@multiplier+3,c
  2380  000238  0E05               	movlw	5
  2381  00023A  6E05               	movwf	___lmul@multiplicand,c
  2382  00023C  0E00               	movlw	0
  2383  00023E  6E06               	movwf	___lmul@multiplicand+1,c
  2384  000240  0E00               	movlw	0
  2385  000242  6E07               	movwf	___lmul@multiplicand+2,c
  2386  000244  0E00               	movlw	0
  2387  000246  6E08               	movwf	___lmul@multiplicand+3,c
  2388  000248  EC6B  F006         	call	___lmul	;wreg free
  2389  00024C  C001  F00D         	movff	?___lmul,___aldiv@dividend
  2390  000250  C002  F00E         	movff	?___lmul+1,___aldiv@dividend+1
  2391  000254  C003  F00F         	movff	?___lmul+2,___aldiv@dividend+2
  2392  000258  C004  F010         	movff	?___lmul+3,___aldiv@dividend+3
  2393  00025C  0E02               	movlw	2
  2394  00025E  6E11               	movwf	___aldiv@divisor,c
  2395  000260  0E00               	movlw	0
  2396  000262  6E12               	movwf	___aldiv@divisor+1,c
  2397  000264  0E00               	movlw	0
  2398  000266  6E13               	movwf	___aldiv@divisor+2,c
  2399  000268  0E00               	movlw	0
  2400  00026A  6E14               	movwf	___aldiv@divisor+3,c
  2401  00026C  ECCC  F004         	call	___aldiv	;wreg free
  2402  000270  90D8               	bcf	status,0,c
  2403  000272  3462               	rlcf	setAngle@a_508,w,c
  2404  000274  6ED9               	movwf	fsr2l,c
  2405  000276  3463               	rlcf	setAngle@a_508+1,w,c
  2406  000278  6EDA               	movwf	fsr2h,c
  2407  00027A  0EA0               	movlw	low _order
  2408  00027C  26D9               	addwf	fsr2l,f,c
  2409  00027E  0E00               	movlw	high _order
  2410  000280  22DA               	addwfc	fsr2h,f,c
  2411  000282  CFDE F03E          	movff	postinc2,??_setAngle+10
  2412  000286  CFDD F03F          	movff	postdec2,??_setAngle+11
  2413  00028A  90D8               	bcf	status,0,c
  2414  00028C  363E               	rlcf	??_setAngle+10,f,c
  2415  00028E  363F               	rlcf	??_setAngle+11,f,c
  2416  000290  90D8               	bcf	status,0,c
  2417  000292  363E               	rlcf	??_setAngle+10,f,c
  2418  000294  363F               	rlcf	??_setAngle+11,f,c
  2419  000296  0E90               	movlw	low _sequence
  2420  000298  243E               	addwf	??_setAngle+10,w,c
  2421  00029A  6ED9               	movwf	fsr2l,c
  2422  00029C  0E00               	movlw	high _sequence
  2423  00029E  203F               	addwfc	??_setAngle+11,w,c
  2424  0002A0  6EDA               	movwf	fsr2h,c
  2425  0002A2  C00D  FFDE         	movff	?___aldiv,postinc2
  2426  0002A6  C00E  FFDE         	movff	?___aldiv+1,postinc2
  2427  0002AA  C00F  FFDE         	movff	?___aldiv+2,postinc2
  2428  0002AE  C010  FFDE         	movff	?___aldiv+3,postinc2
  2429                           
  2430                           ;servo.c: 54: prev = pulse[order[a]];
  2431  0002B2  90D8               	bcf	status,0,c
  2432  0002B4  3462               	rlcf	setAngle@a_508,w,c
  2433  0002B6  6ED9               	movwf	fsr2l,c
  2434  0002B8  3463               	rlcf	setAngle@a_508+1,w,c
  2435  0002BA  6EDA               	movwf	fsr2h,c
  2436  0002BC  0EA0               	movlw	low _order
  2437  0002BE  26D9               	addwf	fsr2l,f,c
  2438  0002C0  0E00               	movlw	high _order
  2439  0002C2  22DA               	addwfc	fsr2h,f,c
  2440  0002C4  CFDE F034          	movff	postinc2,??_setAngle
  2441  0002C8  CFDD F035          	movff	postdec2,??_setAngle+1
  2442  0002CC  90D8               	bcf	status,0,c
  2443  0002CE  3634               	rlcf	??_setAngle,f,c
  2444  0002D0  3635               	rlcf	??_setAngle+1,f,c
  2445  0002D2  90D8               	bcf	status,0,c
  2446  0002D4  3634               	rlcf	??_setAngle,f,c
  2447  0002D6  3635               	rlcf	??_setAngle+1,f,c
  2448  0002D8  0E80               	movlw	low _pulse
  2449  0002DA  2434               	addwf	??_setAngle,w,c
  2450  0002DC  6ED9               	movwf	fsr2l,c
  2451  0002DE  0E00               	movlw	high _pulse
  2452  0002E0  2035               	addwfc	??_setAngle+1,w,c
  2453  0002E2  6EDA               	movwf	fsr2h,c
  2454  0002E4  CFDE F05E          	movff	postinc2,setAngle@prev
  2455  0002E8  CFDD F05F          	movff	postdec2,setAngle@prev+1
  2456  0002EC  4A62               	infsnz	setAngle@a_508,f,c
  2457  0002EE  2A63               	incf	setAngle@a_508+1,f,c
  2458  0002F0                     i2l2575:
  2459  0002F0  5079               	movf	_nServo,w,c
  2460  0002F2  5C62               	subwf	setAngle@a_508,w,c
  2461  0002F4  5063               	movf	setAngle@a_508+1,w,c
  2462  0002F6  0A80               	xorlw	128
  2463  0002F8  6E34               	movwf	??_setAngle& (0+255),c
  2464  0002FA  507A               	movf	_nServo+1,w,c
  2465  0002FC  0A80               	xorlw	128
  2466  0002FE  5834               	subwfb	??_setAngle& (0+255),w,c
  2467  000300  A0D8               	btfss	status,0,c
  2468  000302  D75B               	goto	i2l2569
  2469                           
  2470                           ;servo.c: 55: }
  2471                           ;servo.c: 56: lcdClear();
  2472  000304  ECF9  F007         	call	_lcdClear	;wreg free
  2473                           
  2474                           ;servo.c: 57: printf("%ld %ld",sequence[0], sequence[1]);
  2475  000308  0EEE               	movlw	low STR_3
  2476  00030A  6E17               	movwf	printf@f,c
  2477  00030C  0EFF               	movlw	high STR_3
  2478  00030E  6E18               	movwf	printf@f+1,c
  2479  000310  C090  F019         	movff	_sequence,?_printf+2
  2480  000314  C091  F01A         	movff	_sequence+1,?_printf+3
  2481  000318  C092  F01B         	movff	_sequence+2,?_printf+4
  2482  00031C  C093  F01C         	movff	_sequence+3,?_printf+5
  2483  000320  C094  F01D         	movff	_sequence+4,?_printf+6
  2484  000324  C095  F01E         	movff	_sequence+5,?_printf+7
  2485  000328  C096  F01F         	movff	_sequence+6,?_printf+8
  2486  00032C  C097  F020         	movff	_sequence+7,?_printf+9
  2487  000330  EC9B  F001         	call	_printf	;wreg free
  2488  000334  0012               	return		;funcret
  2489  000336                     __end_of_setAngle:
  2490                           	opt stack 0
  2491                           pclatu	equ	0xFFB
  2492                           pclath	equ	0xFFA
  2493                           tblptru	equ	0xFF8
  2494                           tblptrh	equ	0xFF7
  2495                           tblptrl	equ	0xFF6
  2496                           tablat	equ	0xFF5
  2497                           prodh	equ	0xFF4
  2498                           prodl	equ	0xFF3
  2499                           intcon	equ	0xFF2
  2500                           intcon3	equ	0xFF0
  2501                           postinc0	equ	0xFEE
  2502                           fsr0h	equ	0xFEA
  2503                           fsr0l	equ	0xFE9
  2504                           wreg	equ	0xFE8
  2505                           postdec1	equ	0xFE5
  2506                           fsr1h	equ	0xFE2
  2507                           fsr1l	equ	0xFE1
  2508                           postinc2	equ	0xFDE
  2509                           postdec2	equ	0xFDD
  2510                           fsr2h	equ	0xFDA
  2511                           fsr2l	equ	0xFD9
  2512                           status	equ	0xFD8
  2513                           
  2514 ;; *************** function _printf *****************
  2515 ;; Defined at:
  2516 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  2517 ;; Parameters:    Size  Location     Type
  2518 ;;  f               2   22[COMRAM] PTR const unsigned char 
  2519 ;;		 -> STR_15(17), STR_14(18), STR_13(17), STR_12(18), 
  2520 ;;		 -> STR_11(17), STR_10(19), STR_9(17), STR_8(18), 
  2521 ;;		 -> STR_7(17), STR_6(18), STR_5(17), STR_4(18), 
  2522 ;;		 -> STR_3(8), STR_2(9), STR_1(8), 
  2523 ;; Auto vars:     Size  Location     Type
  2524 ;;  idx             1   34[COMRAM] unsigned char 
  2525 ;;  val             4   39[COMRAM] unsigned long 
  2526 ;;  tmpval          4    0        struct .
  2527 ;;  cp              3    0        PTR const unsigned char 
  2528 ;;  ap              2   37[COMRAM] PTR void [1]
  2529 ;;		 -> ?_printf(2), 
  2530 ;;  prec            2   35[COMRAM] int 
  2531 ;;  len             2    0        unsigned int 
  2532 ;;  c               1   44[COMRAM] char 
  2533 ;;  flag            1   43[COMRAM] unsigned char 
  2534 ;; Return value:  Size  Location     Type
  2535 ;;                  2   22[COMRAM] int 
  2536 ;; Registers used:
  2537 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2538 ;; Tracked objects:
  2539 ;;		On entry : 0/0
  2540 ;;		On exit  : 0/0
  2541 ;;		Unchanged: 0/0
  2542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2543 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2544 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2545 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2546 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2547 ;;Total ram usage:       23 bytes
  2548 ;; Hardware stack levels used:    1
  2549 ;; Hardware stack levels required when called:    4
  2550 ;; This function calls:
  2551 ;;		___lldiv
  2552 ;;		___llmod
  2553 ;;		_putch
  2554 ;; This function is called by:
  2555 ;;		_setAngle
  2556 ;;		_testFrequency
  2557 ;;		_dateTime
  2558 ;;		_mainMenu
  2559 ;;		_runSelect
  2560 ;;		_runMenu
  2561 ;;		_runTime
  2562 ;;		_runStats
  2563 ;; This function uses a non-reentrant model
  2564 ;;
  2565                           
  2566                           	psect	text10
  2567  000336                     __ptext10:
  2568                           	opt stack 0
  2569  000336                     _printf:
  2570                           	opt stack 21
  2571                           
  2572                           ;doprnt.c: 466: va_list ap;
  2573                           ;doprnt.c: 499: signed char c;
  2574                           ;doprnt.c: 504: int prec;
  2575                           ;doprnt.c: 508: unsigned char flag;
  2576                           ;doprnt.c: 523: union {
  2577                           ;doprnt.c: 524: unsigned long vd;
  2578                           ;doprnt.c: 525: double integ;
  2579                           ;doprnt.c: 526: } tmpval;
  2580                           ;doprnt.c: 528: unsigned long val;
  2581                           ;doprnt.c: 529: unsigned len;
  2582                           ;doprnt.c: 530: const char * cp;
  2583                           ;doprnt.c: 533: *ap = __va_start();
  2584                           
  2585                           ;incstack = 0
  2586  000336  0E19               	movlw	low (?_printf+2)
  2587  000338  6E26               	movwf	printf@ap,c
  2588  00033A  0E00               	movlw	high (?_printf+2)
  2589  00033C  6E27               	movwf	printf@ap+1,c
  2590                           
  2591                           ;doprnt.c: 536: while(c = *f++) {
  2592  00033E  D164               	goto	i2l2413
  2593  000340                     i2l2317:
  2594                           
  2595                           ;doprnt.c: 538: if(c != '%')
  2596  000340  0E25               	movlw	37
  2597  000342  182D               	xorwf	printf@c,w,c
  2598  000344  B4D8               	btfsc	status,2,c
  2599  000346  D004               	goto	i2l2321
  2600                           
  2601                           ;doprnt.c: 540: {
  2602                           ;doprnt.c: 541: (putch(c) );
  2603  000348  502D               	movf	printf@c,w,c
  2604  00034A  ECD3  F007         	call	_putch
  2605                           
  2606                           ;doprnt.c: 542: continue;
  2607  00034E  D15C               	goto	i2l2413
  2608  000350                     i2l2321:
  2609                           
  2610                           ;doprnt.c: 543: }
  2611                           ;doprnt.c: 548: flag = 0;
  2612  000350  0E00               	movlw	0
  2613  000352  6E2C               	movwf	printf@flag,c
  2614                           
  2615                           ;doprnt.c: 635: switch(c = *f++) {
  2616                           
  2617                           ;doprnt.c: 633: loop:
  2618  000354  D012               	goto	i2l2335
  2619  000356                     i2l2323:
  2620                           
  2621                           ;doprnt.c: 643: flag |= 0x10;
  2622  000356  882C               	bsf	printf@flag,4,c
  2623                           
  2624                           ;doprnt.c: 644: goto loop;
  2625  000358  D010               	goto	i2l2335
  2626  00035A                     i2l2325:
  2627                           
  2628                           ;doprnt.c: 721: flag |= 0x80;
  2629  00035A  8E2C               	bsf	printf@flag,7,c
  2630                           
  2631                           ;doprnt.c: 723: break;
  2632  00035C  D02B               	goto	i2l545
  2633  00035E                     i2l2327:
  2634                           
  2635                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2636  00035E  C026  FFD9         	movff	printf@ap,fsr2l
  2637  000362  C027  FFDA         	movff	printf@ap+1,fsr2h
  2638  000366  50DF               	movf	indf2,w,c
  2639  000368  6E2D               	movwf	printf@c,c
  2640  00036A  0E02               	movlw	2
  2641  00036C  2626               	addwf	printf@ap,f,c
  2642  00036E  0E00               	movlw	0
  2643  000370  2227               	addwfc	printf@ap+1,f,c
  2644  000372                     i2l2331:
  2645                           
  2646                           ;doprnt.c: 809: (putch(c) );
  2647  000372  502D               	movf	printf@c,w,c
  2648  000374  ECD3  F007         	call	_putch
  2649                           
  2650                           ;doprnt.c: 810: continue;
  2651  000378  D147               	goto	i2l2413
  2652  00037A                     i2l2335:
  2653  00037A  C017  FFF6         	movff	printf@f,tblptrl
  2654  00037E  C018  FFF7         	movff	printf@f+1,tblptrh
  2655  000382  4A17               	infsnz	printf@f,f,c
  2656  000384  2A18               	incf	printf@f+1,f,c
  2657  000386                     	if	0	;tblptru may be non-zero
  2658  000386                     	endif
  2659  000386                     	if	0	;tblptru may be non-zero
  2660  000386                     	endif
  2661  000386  0008               	tblrd		*
  2662  000388  CFF5 F02D          	movff	tablat,printf@c
  2663  00038C  502D               	movf	printf@c,w,c
  2664                           
  2665                           ; Switch size 1, requested type "space"
  2666                           ; Number of cases is 6, Range of values is 0 to 120
  2667                           ; switch strategies available:
  2668                           ; Name         Instructions Cycles
  2669                           ; simple_byte           19    10 (average)
  2670                           ;	Chosen strategy is simple_byte
  2671  00038E  0A00               	xorlw	0	; case 0
  2672  000390  B4D8               	btfsc	status,2,c
  2673  000392  0012               	return	
  2674  000394  0A63               	xorlw	99	; case 99
  2675  000396  B4D8               	btfsc	status,2,c
  2676  000398  D7E2               	goto	i2l2327
  2677  00039A  0A07               	xorlw	7	; case 100
  2678  00039C  B4D8               	btfsc	status,2,c
  2679  00039E  D00A               	goto	i2l545
  2680  0003A0  0A0D               	xorlw	13	; case 105
  2681  0003A2  B4D8               	btfsc	status,2,c
  2682  0003A4  D007               	goto	i2l545
  2683  0003A6  0A05               	xorlw	5	; case 108
  2684  0003A8  B4D8               	btfsc	status,2,c
  2685  0003AA  D7D5               	goto	i2l2323
  2686  0003AC  0A14               	xorlw	20	; case 120
  2687  0003AE  B4D8               	btfsc	status,2,c
  2688  0003B0  D7D4               	goto	i2l2325
  2689  0003B2  D7DF               	goto	i2l2331
  2690  0003B4                     i2l545:
  2691                           
  2692                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2693  0003B4  BE2C               	btfsc	printf@flag,7,c
  2694  0003B6  D02E               	goto	i2l549
  2695                           
  2696                           ;doprnt.c: 1253: {
  2697                           ;doprnt.c: 1255: if(flag & 0x10)
  2698  0003B8  A82C               	btfss	printf@flag,4,c
  2699  0003BA  D00E               	goto	i2l2343
  2700                           
  2701                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  2702  0003BC  C026  FFD9         	movff	printf@ap,fsr2l
  2703  0003C0  C027  FFDA         	movff	printf@ap+1,fsr2h
  2704  0003C4  CFDE F028          	movff	postinc2,printf@val
  2705  0003C8  CFDE F029          	movff	postinc2,printf@val+1
  2706  0003CC  CFDE F02A          	movff	postinc2,printf@val+2
  2707  0003D0  CFDE F02B          	movff	postinc2,printf@val+3
  2708  0003D4  0E04               	movlw	4
  2709  0003D6  D00E               	goto	L1
  2710  0003D8                     i2l2343:
  2711                           
  2712                           ;doprnt.c: 1257: else
  2713                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2714  0003D8  C026  FFD9         	movff	printf@ap,fsr2l
  2715  0003DC  C027  FFDA         	movff	printf@ap+1,fsr2h
  2716  0003E0  CFDE F028          	movff	postinc2,printf@val
  2717  0003E4  CFDD F029          	movff	postdec2,printf@val+1
  2718  0003E8  0E00               	movlw	0
  2719  0003EA  BE29               	btfsc	printf@val+1,7,c
  2720  0003EC  0EFF               	movlw	-1
  2721  0003EE  6E2A               	movwf	printf@val+2,c
  2722  0003F0  6E2B               	movwf	printf@val+3,c
  2723  0003F2  0E02               	movlw	2
  2724  0003F4                     L1:
  2725  0003F4  2626               	addwf	printf@ap,f,c
  2726  0003F6  0E00               	movlw	0
  2727  0003F8  2227               	addwfc	printf@ap+1,f,c
  2728                           
  2729                           ;doprnt.c: 1261: if((long)val < 0) {
  2730  0003FA  AE2B               	btfss	printf@val+3,7,c
  2731  0003FC  D06A               	goto	i2l2391
  2732                           
  2733                           ;doprnt.c: 1262: flag |= 0x03;
  2734  0003FE  0E03               	movlw	3
  2735  000400  122C               	iorwf	printf@flag,f,c
  2736                           
  2737                           ;doprnt.c: 1263: val = -val;
  2738  000402  1E2B               	comf	printf@val+3,f,c
  2739  000404  1E2A               	comf	printf@val+2,f,c
  2740  000406  1E29               	comf	printf@val+1,f,c
  2741  000408  6C28               	negf	printf@val,c
  2742  00040A  0E00               	movlw	0
  2743  00040C  2229               	addwfc	printf@val+1,f,c
  2744  00040E  222A               	addwfc	printf@val+2,f,c
  2745  000410  222B               	addwfc	printf@val+3,f,c
  2746                           
  2747                           ;doprnt.c: 1264: }
  2748                           ;doprnt.c: 1266: }
  2749  000412  D05F               	goto	i2l2391
  2750  000414                     i2l549:
  2751                           
  2752                           ;doprnt.c: 1268: else
  2753                           ;doprnt.c: 1273: {
  2754                           ;doprnt.c: 1281: if(flag & 0x10)
  2755  000414  A82C               	btfss	printf@flag,4,c
  2756  000416  D00E               	goto	i2l2357
  2757                           
  2758                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2759  000418  C026  FFD9         	movff	printf@ap,fsr2l
  2760  00041C  C027  FFDA         	movff	printf@ap+1,fsr2h
  2761  000420  CFDE F028          	movff	postinc2,printf@val
  2762  000424  CFDE F029          	movff	postinc2,printf@val+1
  2763  000428  CFDE F02A          	movff	postinc2,printf@val+2
  2764  00042C  CFDE F02B          	movff	postinc2,printf@val+3
  2765  000430  0E04               	movlw	4
  2766  000432  D00F               	goto	L2
  2767  000434                     i2l2357:
  2768                           
  2769                           ;doprnt.c: 1283: else
  2770                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2771  000434  C026  FFD9         	movff	printf@ap,fsr2l
  2772  000438  C027  FFDA         	movff	printf@ap+1,fsr2h
  2773  00043C  CFDE F021          	movff	postinc2,??_printf
  2774  000440  CFDD F022          	movff	postdec2,??_printf+1
  2775  000444  C021  F028         	movff	??_printf,printf@val
  2776  000448  C022  F029         	movff	??_printf+1,printf@val+1
  2777  00044C  6A2A               	clrf	printf@val+2,c
  2778  00044E  6A2B               	clrf	printf@val+3,c
  2779  000450  0E02               	movlw	2
  2780  000452                     L2:
  2781  000452  2626               	addwf	printf@ap,f,c
  2782  000454  0E00               	movlw	0
  2783  000456  2227               	addwfc	printf@ap+1,f,c
  2784                           
  2785                           ;doprnt.c: 1287: }
  2786                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2787  000458  D03C               	goto	i2l2391
  2788  00045A                     i2l2361:
  2789                           
  2790                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2791  00045A  0E01               	movlw	1
  2792  00045C  6E2D               	movwf	printf@c,c
  2793  00045E                     i2l2363:
  2794  00045E  0E0A               	movlw	10
  2795  000460  182D               	xorwf	printf@c,w,c
  2796  000462  B4D8               	btfsc	status,2,c
  2797  000464  D03E               	goto	i2l2393
  2798                           
  2799                           ;doprnt.c: 1306: if(val < dpowers[c])
  2800  000466  502D               	movf	printf@c,w,c
  2801  000468  0D04               	mullw	4
  2802  00046A  0EA1               	movlw	low _dpowers
  2803  00046C  24F3               	addwf	prodl,w,c
  2804  00046E  6EF6               	movwf	tblptrl,c
  2805  000470  0EFE               	movlw	high _dpowers
  2806  000472  20F4               	addwfc	prodh,w,c
  2807  000474  6EF7               	movwf	tblptrh,c
  2808  000476                     	if	0	;There are less than 3 active tblptr bytes
  2809  000476                     	endif
  2810  000476  0009               	tblrd		*+
  2811  000478  50F5               	movf	tablat,w,c
  2812  00047A  5C28               	subwf	printf@val,w,c
  2813  00047C  0009               	tblrd		*+
  2814  00047E  50F5               	movf	tablat,w,c
  2815  000480  5829               	subwfb	printf@val+1,w,c
  2816  000482  0009               	tblrd		*+
  2817  000484  50F5               	movf	tablat,w,c
  2818  000486  582A               	subwfb	printf@val+2,w,c
  2819  000488  0009               	tblrd		*+
  2820  00048A  50F5               	movf	tablat,w,c
  2821  00048C  582B               	subwfb	printf@val+3,w,c
  2822  00048E  A0D8               	btfss	status,0,c
  2823  000490  D028               	goto	i2l2393
  2824                           
  2825                           ;doprnt.c: 1307: break;
  2826  000492  2A2D               	incf	printf@c,f,c
  2827  000494  D7E4               	goto	i2l2363
  2828  000496                     i2l2375:
  2829                           
  2830                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2831  000496  0E01               	movlw	1
  2832  000498  6E2D               	movwf	printf@c,c
  2833  00049A                     i2l2377:
  2834  00049A  0E08               	movlw	8
  2835  00049C  182D               	xorwf	printf@c,w,c
  2836  00049E  B4D8               	btfsc	status,2,c
  2837  0004A0  D020               	goto	i2l2393
  2838                           
  2839                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2840  0004A2  502D               	movf	printf@c,w,c
  2841  0004A4  0D04               	mullw	4
  2842  0004A6  0EC9               	movlw	low _hexpowers
  2843  0004A8  24F3               	addwf	prodl,w,c
  2844  0004AA  6EF6               	movwf	tblptrl,c
  2845  0004AC  0EFE               	movlw	high _hexpowers
  2846  0004AE  20F4               	addwfc	prodh,w,c
  2847  0004B0  6EF7               	movwf	tblptrh,c
  2848  0004B2                     	if	0	;There are less than 3 active tblptr bytes
  2849  0004B2                     	endif
  2850  0004B2  0009               	tblrd		*+
  2851  0004B4  50F5               	movf	tablat,w,c
  2852  0004B6  5C28               	subwf	printf@val,w,c
  2853  0004B8  0009               	tblrd		*+
  2854  0004BA  50F5               	movf	tablat,w,c
  2855  0004BC  5829               	subwfb	printf@val+1,w,c
  2856  0004BE  0009               	tblrd		*+
  2857  0004C0  50F5               	movf	tablat,w,c
  2858  0004C2  582A               	subwfb	printf@val+2,w,c
  2859  0004C4  0009               	tblrd		*+
  2860  0004C6  50F5               	movf	tablat,w,c
  2861  0004C8  582B               	subwfb	printf@val+3,w,c
  2862  0004CA  A0D8               	btfss	status,0,c
  2863  0004CC  D00A               	goto	i2l2393
  2864                           
  2865                           ;doprnt.c: 1318: break;
  2866  0004CE  2A2D               	incf	printf@c,f,c
  2867  0004D0  D7E4               	goto	i2l2377
  2868  0004D2                     i2l2391:
  2869  0004D2  502C               	movf	printf@flag,w,c
  2870  0004D4  0B80               	andlw	128
  2871                           
  2872                           ; Switch size 1, requested type "space"
  2873                           ; Number of cases is 2, Range of values is 0 to 128
  2874                           ; switch strategies available:
  2875                           ; Name         Instructions Cycles
  2876                           ; simple_byte            7     4 (average)
  2877                           ;	Chosen strategy is simple_byte
  2878  0004D6  0A00               	xorlw	0	; case 0
  2879  0004D8  B4D8               	btfsc	status,2,c
  2880  0004DA  D7BF               	goto	i2l2361
  2881  0004DC  0A80               	xorlw	128	; case 128
  2882  0004DE  B4D8               	btfsc	status,2,c
  2883  0004E0  D7DA               	goto	i2l2375
  2884  0004E2                     i2l2393:
  2885                           
  2886                           ;doprnt.c: 1422: {
  2887                           ;doprnt.c: 1438: if(flag & 0x03)
  2888  0004E2  C02C  F021         	movff	printf@flag,??_printf
  2889  0004E6  0E03               	movlw	3
  2890  0004E8  1621               	andwf	??_printf,f,c
  2891  0004EA  B4D8               	btfsc	status,2,c
  2892  0004EC  D003               	goto	i2l2397
  2893                           
  2894                           ;doprnt.c: 1439: (putch('-') );
  2895  0004EE  0E2D               	movlw	45
  2896  0004F0  ECD3  F007         	call	_putch
  2897  0004F4                     i2l2397:
  2898                           
  2899                           ;doprnt.c: 1469: }
  2900                           ;doprnt.c: 1472: prec = c;
  2901  0004F4  502D               	movf	printf@c,w,c
  2902  0004F6  6E24               	movwf	printf@prec,c
  2903  0004F8  6A25               	clrf	printf@prec+1,c
  2904  0004FA  BE24               	btfsc	printf@prec,7,c
  2905  0004FC  0625               	decf	printf@prec+1,f,c
  2906                           
  2907                           ;doprnt.c: 1474: while(prec--) {
  2908  0004FE  D07C               	goto	i2l2411
  2909  000500                     i2l2399:
  2910                           
  2911                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2912  000500  C024  F021         	movff	printf@prec,??_printf
  2913  000504  C025  F022         	movff	printf@prec+1,??_printf+1
  2914  000508  90D8               	bcf	status,0,c
  2915  00050A  3621               	rlcf	??_printf,f,c
  2916  00050C  3622               	rlcf	??_printf+1,f,c
  2917  00050E  90D8               	bcf	status,0,c
  2918  000510  3621               	rlcf	??_printf,f,c
  2919  000512  3622               	rlcf	??_printf+1,f,c
  2920  000514  0EA1               	movlw	low _dpowers
  2921  000516  2421               	addwf	??_printf,w,c
  2922  000518  6EF6               	movwf	tblptrl,c
  2923  00051A  0EFE               	movlw	high _dpowers
  2924  00051C  2022               	addwfc	??_printf+1,w,c
  2925  00051E  6EF7               	movwf	tblptrh,c
  2926  000520                     	if	0	;There are less than 3 active tblptr bytes
  2927  000520                     	endif
  2928  000520  0009               	tblrd		*+
  2929  000522  CFF5 F005          	movff	tablat,___lldiv@divisor
  2930  000526  0009               	tblrd		*+
  2931  000528  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2932  00052C  0009               	tblrd		*+
  2933  00052E  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2934  000532  000A               	tblrd		*-
  2935  000534  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2936  000538  C028  F001         	movff	printf@val,___lldiv@dividend
  2937  00053C  C029  F002         	movff	printf@val+1,___lldiv@dividend+1
  2938  000540  C02A  F003         	movff	printf@val+2,___lldiv@dividend+2
  2939  000544  C02B  F004         	movff	printf@val+3,___lldiv@dividend+3
  2940  000548  EC88  F005         	call	___lldiv	;wreg free
  2941  00054C  C001  F00E         	movff	?___lldiv,___llmod@dividend
  2942  000550  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  2943  000554  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  2944  000558  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  2945  00055C  0E0A               	movlw	10
  2946  00055E  6E12               	movwf	___llmod@divisor,c
  2947  000560  0E00               	movlw	0
  2948  000562  6E13               	movwf	___llmod@divisor+1,c
  2949  000564  0E00               	movlw	0
  2950  000566  6E14               	movwf	___llmod@divisor+2,c
  2951  000568  0E00               	movlw	0
  2952  00056A  6E15               	movwf	___llmod@divisor+3,c
  2953  00056C  EC05  F006         	call	___llmod	;wreg free
  2954  000570  500E               	movf	?___llmod,w,c
  2955  000572  0F30               	addlw	48
  2956  000574  6E2D               	movwf	printf@c,c
  2957                           
  2958                           ;doprnt.c: 1491: break;
  2959  000576  D03D               	goto	i2l2409
  2960  000578                     i2l2401:
  2961                           
  2962                           ;doprnt.c: 1499: {
  2963                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2964  000578  C028  F001         	movff	printf@val,___lldiv@dividend
  2965  00057C  C029  F002         	movff	printf@val+1,___lldiv@dividend+1
  2966  000580  C02A  F003         	movff	printf@val+2,___lldiv@dividend+2
  2967  000584  C02B  F004         	movff	printf@val+3,___lldiv@dividend+3
  2968  000588  C024  F021         	movff	printf@prec,??_printf
  2969  00058C  C025  F022         	movff	printf@prec+1,??_printf+1
  2970  000590  90D8               	bcf	status,0,c
  2971  000592  3621               	rlcf	??_printf,f,c
  2972  000594  3622               	rlcf	??_printf+1,f,c
  2973  000596  90D8               	bcf	status,0,c
  2974  000598  3621               	rlcf	??_printf,f,c
  2975  00059A  3622               	rlcf	??_printf+1,f,c
  2976  00059C  0EC9               	movlw	low _hexpowers
  2977  00059E  2421               	addwf	??_printf,w,c
  2978  0005A0  6EF6               	movwf	tblptrl,c
  2979  0005A2  0EFE               	movlw	high _hexpowers
  2980  0005A4  2022               	addwfc	??_printf+1,w,c
  2981  0005A6  6EF7               	movwf	tblptrh,c
  2982  0005A8                     	if	0	;There are less than 3 active tblptr bytes
  2983  0005A8                     	endif
  2984  0005A8  0009               	tblrd		*+
  2985  0005AA  CFF5 F005          	movff	tablat,___lldiv@divisor
  2986  0005AE  0009               	tblrd		*+
  2987  0005B0  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2988  0005B4  0009               	tblrd		*+
  2989  0005B6  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2990  0005BA  000A               	tblrd		*-
  2991  0005BC  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2992  0005C0  EC88  F005         	call	___lldiv	;wreg free
  2993  0005C4  5001               	movf	?___lldiv,w,c
  2994  0005C6  0B0F               	andlw	15
  2995  0005C8  6E23               	movwf	printf@idx,c
  2996                           
  2997                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2998  0005CA  5023               	movf	printf@idx,w,c
  2999  0005CC  0D01               	mullw	1
  3000  0005CE  0E6E               	movlw	low STR_16
  3001  0005D0  24F3               	addwf	prodl,w,c
  3002  0005D2  6EF6               	movwf	tblptrl,c
  3003  0005D4  0EFF               	movlw	high STR_16
  3004  0005D6  20F4               	addwfc	prodh,w,c
  3005  0005D8  6EF7               	movwf	tblptrh,c
  3006  0005DA                     	if	0	;There are less than 3 active tblptr bytes
  3007  0005DA                     	endif
  3008  0005DA  0008               	tblrd		*
  3009  0005DC  CFF5 F02D          	movff	tablat,printf@c
  3010                           
  3011                           ;doprnt.c: 1523: }
  3012                           
  3013                           ;doprnt.c: 1508: }
  3014                           ;doprnt.c: 1510: break;
  3015  0005E0  D008               	goto	i2l2409
  3016  0005E2                     i2l2407:
  3017  0005E2  502C               	movf	printf@flag,w,c
  3018  0005E4  0B80               	andlw	128
  3019                           
  3020                           ; Switch size 1, requested type "space"
  3021                           ; Number of cases is 2, Range of values is 0 to 128
  3022                           ; switch strategies available:
  3023                           ; Name         Instructions Cycles
  3024                           ; simple_byte            7     4 (average)
  3025                           ;	Chosen strategy is simple_byte
  3026  0005E6  0A00               	xorlw	0	; case 0
  3027  0005E8  B4D8               	btfsc	status,2,c
  3028  0005EA  D78A               	goto	i2l2399
  3029  0005EC  0A80               	xorlw	128	; case 128
  3030  0005EE  B4D8               	btfsc	status,2,c
  3031  0005F0  D7C3               	goto	i2l2401
  3032  0005F2                     i2l2409:
  3033                           
  3034                           ;doprnt.c: 1524: (putch(c) );
  3035  0005F2  502D               	movf	printf@c,w,c
  3036  0005F4  ECD3  F007         	call	_putch
  3037  0005F8                     i2l2411:
  3038  0005F8  0624               	decf	printf@prec,f,c
  3039  0005FA  A0D8               	btfss	status,0,c
  3040  0005FC  0625               	decf	printf@prec+1,f,c
  3041  0005FE  2824               	incf	printf@prec,w,c
  3042  000600  E1F0               	bnz	i2l2407
  3043  000602  2825               	incf	printf@prec+1,w,c
  3044  000604  A4D8               	btfss	status,2,c
  3045  000606  D7ED               	goto	i2l2407
  3046  000608                     i2l2413:
  3047  000608  C017  FFF6         	movff	printf@f,tblptrl
  3048  00060C  C018  FFF7         	movff	printf@f+1,tblptrh
  3049  000610  4A17               	infsnz	printf@f,f,c
  3050  000612  2A18               	incf	printf@f+1,f,c
  3051  000614                     	if	0	;tblptru may be non-zero
  3052  000614                     	endif
  3053  000614                     	if	0	;tblptru may be non-zero
  3054  000614                     	endif
  3055  000614  0008               	tblrd		*
  3056  000616  CFF5 F02D          	movff	tablat,printf@c
  3057  00061A  502D               	movf	printf@c,w,c
  3058  00061C  B4D8               	btfsc	status,2,c
  3059  00061E  0012               	return	
  3060  000620  D68F               	goto	i2l2317
  3061  000622                     __end_of_printf:
  3062                           	opt stack 0
  3063                           pclatu	equ	0xFFB
  3064                           pclath	equ	0xFFA
  3065                           tblptru	equ	0xFF8
  3066                           tblptrh	equ	0xFF7
  3067                           tblptrl	equ	0xFF6
  3068                           tablat	equ	0xFF5
  3069                           prodh	equ	0xFF4
  3070                           prodl	equ	0xFF3
  3071                           intcon	equ	0xFF2
  3072                           intcon3	equ	0xFF0
  3073                           postinc0	equ	0xFEE
  3074                           fsr0h	equ	0xFEA
  3075                           fsr0l	equ	0xFE9
  3076                           wreg	equ	0xFE8
  3077                           postdec1	equ	0xFE5
  3078                           fsr1h	equ	0xFE2
  3079                           fsr1l	equ	0xFE1
  3080                           indf2	equ	0xFDF
  3081                           postinc2	equ	0xFDE
  3082                           postdec2	equ	0xFDD
  3083                           fsr2h	equ	0xFDA
  3084                           fsr2l	equ	0xFD9
  3085                           status	equ	0xFD8
  3086                           
  3087 ;; *************** function _putch *****************
  3088 ;; Defined at:
  3089 ;;		line 35 in file "lcd.c"
  3090 ;; Parameters:    Size  Location     Type
  3091 ;;  data            1    wreg     unsigned char 
  3092 ;; Auto vars:     Size  Location     Type
  3093 ;;  data            1    4[COMRAM] unsigned char 
  3094 ;; Return value:  Size  Location     Type
  3095 ;;                  1    wreg      void 
  3096 ;; Registers used:
  3097 ;;		wreg, status,2, status,0, cstack
  3098 ;; Tracked objects:
  3099 ;;		On entry : 0/0
  3100 ;;		On exit  : 0/0
  3101 ;;		Unchanged: 0/0
  3102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3104 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3106 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3107 ;;Total ram usage:        1 bytes
  3108 ;; Hardware stack levels used:    1
  3109 ;; Hardware stack levels required when called:    3
  3110 ;; This function calls:
  3111 ;;		_lcdNewline
  3112 ;;		i2_lcdNibble
  3113 ;; This function is called by:
  3114 ;;		_printf
  3115 ;; This function uses a non-reentrant model
  3116 ;;
  3117                           
  3118                           	psect	text11
  3119  000FA6                     __ptext11:
  3120                           	opt stack 0
  3121  000FA6                     _putch:
  3122                           	opt stack 21
  3123                           
  3124                           ;incstack = 0
  3125                           ;putch@data stored from wreg
  3126  000FA6  6E05               	movwf	putch@data,c
  3127                           
  3128                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  3129  000FA8  0E0A               	movlw	10
  3130  000FAA  1805               	xorwf	putch@data,w,c
  3131  000FAC  A4D8               	btfss	status,2,c
  3132  000FAE  D003               	goto	i2l135
  3133  000FB0  ECF5  F007         	call	_lcdNewline	;wreg free
  3134  000FB4  0012               	return	
  3135  000FB6                     i2l135:
  3136                           
  3137                           ;lcd.c: 37: else
  3138                           ;lcd.c: 38: {
  3139                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  3140  000FB6  848C               	bsf	3980,2,c	;volatile
  3141                           
  3142                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  3143  000FB8  0E74               	movlw	116
  3144  000FBA                     i2u183_47:
  3145  000FBA  2EE8               	decfsz	wreg,f,c
  3146  000FBC  D7FE               	bra	i2u183_47
  3147  000FBE  D000               	nop2	
  3148                           
  3149                           ;lcd.c: 41: lcdNibble(data);
  3150  000FC0  5005               	movf	putch@data,w,c
  3151  000FC2  EC38  F006         	call	i2_lcdNibble
  3152  000FC6  0012               	return	
  3153  000FC8                     __end_of_putch:
  3154                           	opt stack 0
  3155                           pclatu	equ	0xFFB
  3156                           pclath	equ	0xFFA
  3157                           tblptru	equ	0xFF8
  3158                           tblptrh	equ	0xFF7
  3159                           tblptrl	equ	0xFF6
  3160                           tablat	equ	0xFF5
  3161                           prodh	equ	0xFF4
  3162                           prodl	equ	0xFF3
  3163                           intcon	equ	0xFF2
  3164                           intcon3	equ	0xFF0
  3165                           postinc0	equ	0xFEE
  3166                           fsr0h	equ	0xFEA
  3167                           fsr0l	equ	0xFE9
  3168                           wreg	equ	0xFE8
  3169                           postdec1	equ	0xFE5
  3170                           fsr1h	equ	0xFE2
  3171                           fsr1l	equ	0xFE1
  3172                           indf2	equ	0xFDF
  3173                           postinc2	equ	0xFDE
  3174                           postdec2	equ	0xFDD
  3175                           fsr2h	equ	0xFDA
  3176                           fsr2l	equ	0xFD9
  3177                           status	equ	0xFD8
  3178                           
  3179 ;; *************** function _lcdNewline *****************
  3180 ;; Defined at:
  3181 ;;		line 78 in file "lcd.c"
  3182 ;; Parameters:    Size  Location     Type
  3183 ;;		None
  3184 ;; Auto vars:     Size  Location     Type
  3185 ;;		None
  3186 ;; Return value:  Size  Location     Type
  3187 ;;                  1    wreg      void 
  3188 ;; Registers used:
  3189 ;;		wreg, status,2, status,0, cstack
  3190 ;; Tracked objects:
  3191 ;;		On entry : 0/0
  3192 ;;		On exit  : 0/0
  3193 ;;		Unchanged: 0/0
  3194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3198 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3199 ;;Total ram usage:        0 bytes
  3200 ;; Hardware stack levels used:    1
  3201 ;; Hardware stack levels required when called:    2
  3202 ;; This function calls:
  3203 ;;		i2_lcdInst
  3204 ;; This function is called by:
  3205 ;;		_putch
  3206 ;; This function uses a non-reentrant model
  3207 ;;
  3208                           
  3209                           	psect	text12
  3210  000FEA                     __ptext12:
  3211                           	opt stack 0
  3212  000FEA                     _lcdNewline:
  3213                           	opt stack 21
  3214                           
  3215                           ;lcd.c: 79: lcdInst(0b11000000);
  3216                           
  3217                           ;incstack = 0
  3218  000FEA  0EC0               	movlw	192
  3219  000FEC  ECE4  F007         	call	i2_lcdInst
  3220  000FF0  0012               	return		;funcret
  3221  000FF2                     __end_of_lcdNewline:
  3222                           	opt stack 0
  3223                           pclatu	equ	0xFFB
  3224                           pclath	equ	0xFFA
  3225                           tblptru	equ	0xFF8
  3226                           tblptrh	equ	0xFF7
  3227                           tblptrl	equ	0xFF6
  3228                           tablat	equ	0xFF5
  3229                           prodh	equ	0xFF4
  3230                           prodl	equ	0xFF3
  3231                           intcon	equ	0xFF2
  3232                           intcon3	equ	0xFF0
  3233                           postinc0	equ	0xFEE
  3234                           fsr0h	equ	0xFEA
  3235                           fsr0l	equ	0xFE9
  3236                           wreg	equ	0xFE8
  3237                           postdec1	equ	0xFE5
  3238                           fsr1h	equ	0xFE2
  3239                           fsr1l	equ	0xFE1
  3240                           indf2	equ	0xFDF
  3241                           postinc2	equ	0xFDE
  3242                           postdec2	equ	0xFDD
  3243                           fsr2h	equ	0xFDA
  3244                           fsr2l	equ	0xFD9
  3245                           status	equ	0xFD8
  3246                           
  3247 ;; *************** function ___llmod *****************
  3248 ;; Defined at:
  3249 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  3250 ;; Parameters:    Size  Location     Type
  3251 ;;  dividend        4   13[COMRAM] unsigned long 
  3252 ;;  divisor         4   17[COMRAM] unsigned long 
  3253 ;; Auto vars:     Size  Location     Type
  3254 ;;  counter         1   21[COMRAM] unsigned char 
  3255 ;; Return value:  Size  Location     Type
  3256 ;;                  4   13[COMRAM] unsigned long 
  3257 ;; Registers used:
  3258 ;;		wreg, status,2, status,0
  3259 ;; Tracked objects:
  3260 ;;		On entry : 0/0
  3261 ;;		On exit  : 0/0
  3262 ;;		Unchanged: 0/0
  3263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3264 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3265 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3267 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3268 ;;Total ram usage:        9 bytes
  3269 ;; Hardware stack levels used:    1
  3270 ;; This function calls:
  3271 ;;		Nothing
  3272 ;; This function is called by:
  3273 ;;		_printf
  3274 ;; This function uses a non-reentrant model
  3275 ;;
  3276                           
  3277                           	psect	text13
  3278  000C0A                     __ptext13:
  3279                           	opt stack 0
  3280  000C0A                     ___llmod:
  3281                           	opt stack 24
  3282                           
  3283                           ;incstack = 0
  3284  000C0A  5012               	movf	___llmod@divisor,w,c
  3285  000C0C  1013               	iorwf	___llmod@divisor+1,w,c
  3286  000C0E  1014               	iorwf	___llmod@divisor+2,w,c
  3287  000C10  1015               	iorwf	___llmod@divisor+3,w,c
  3288  000C12  B4D8               	btfsc	status,2,c
  3289  000C14  D024               	goto	i2l935
  3290  000C16  0E01               	movlw	1
  3291  000C18  6E16               	movwf	___llmod@counter,c
  3292  000C1A  D006               	goto	i2l2221
  3293  000C1C                     i2l2219:
  3294  000C1C  90D8               	bcf	status,0,c
  3295  000C1E  3612               	rlcf	___llmod@divisor,f,c
  3296  000C20  3613               	rlcf	___llmod@divisor+1,f,c
  3297  000C22  3614               	rlcf	___llmod@divisor+2,f,c
  3298  000C24  3615               	rlcf	___llmod@divisor+3,f,c
  3299  000C26  2A16               	incf	___llmod@counter,f,c
  3300  000C28                     i2l2221:
  3301  000C28  AE15               	btfss	___llmod@divisor+3,7,c
  3302  000C2A  D7F8               	goto	i2l2219
  3303  000C2C                     i2l2223:
  3304  000C2C  5012               	movf	___llmod@divisor,w,c
  3305  000C2E  5C0E               	subwf	___llmod@dividend,w,c
  3306  000C30  5013               	movf	___llmod@divisor+1,w,c
  3307  000C32  580F               	subwfb	___llmod@dividend+1,w,c
  3308  000C34  5014               	movf	___llmod@divisor+2,w,c
  3309  000C36  5810               	subwfb	___llmod@dividend+2,w,c
  3310  000C38  5015               	movf	___llmod@divisor+3,w,c
  3311  000C3A  5811               	subwfb	___llmod@dividend+3,w,c
  3312  000C3C  A0D8               	btfss	status,0,c
  3313  000C3E  D008               	goto	i2l2227
  3314  000C40  5012               	movf	___llmod@divisor,w,c
  3315  000C42  5E0E               	subwf	___llmod@dividend,f,c
  3316  000C44  5013               	movf	___llmod@divisor+1,w,c
  3317  000C46  5A0F               	subwfb	___llmod@dividend+1,f,c
  3318  000C48  5014               	movf	___llmod@divisor+2,w,c
  3319  000C4A  5A10               	subwfb	___llmod@dividend+2,f,c
  3320  000C4C  5015               	movf	___llmod@divisor+3,w,c
  3321  000C4E  5A11               	subwfb	___llmod@dividend+3,f,c
  3322  000C50                     i2l2227:
  3323  000C50  90D8               	bcf	status,0,c
  3324  000C52  3215               	rrcf	___llmod@divisor+3,f,c
  3325  000C54  3214               	rrcf	___llmod@divisor+2,f,c
  3326  000C56  3213               	rrcf	___llmod@divisor+1,f,c
  3327  000C58  3212               	rrcf	___llmod@divisor,f,c
  3328  000C5A  2E16               	decfsz	___llmod@counter,f,c
  3329  000C5C  D7E7               	goto	i2l2223
  3330  000C5E                     i2l935:
  3331  000C5E  C00E  F00E         	movff	___llmod@dividend,?___llmod
  3332  000C62  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  3333  000C66  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  3334  000C6A  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  3335  000C6E  0012               	return		;funcret
  3336  000C70                     __end_of___llmod:
  3337                           	opt stack 0
  3338                           pclatu	equ	0xFFB
  3339                           pclath	equ	0xFFA
  3340                           tblptru	equ	0xFF8
  3341                           tblptrh	equ	0xFF7
  3342                           tblptrl	equ	0xFF6
  3343                           tablat	equ	0xFF5
  3344                           prodh	equ	0xFF4
  3345                           prodl	equ	0xFF3
  3346                           intcon	equ	0xFF2
  3347                           intcon3	equ	0xFF0
  3348                           postinc0	equ	0xFEE
  3349                           fsr0h	equ	0xFEA
  3350                           fsr0l	equ	0xFE9
  3351                           wreg	equ	0xFE8
  3352                           postdec1	equ	0xFE5
  3353                           fsr1h	equ	0xFE2
  3354                           fsr1l	equ	0xFE1
  3355                           indf2	equ	0xFDF
  3356                           postinc2	equ	0xFDE
  3357                           postdec2	equ	0xFDD
  3358                           fsr2h	equ	0xFDA
  3359                           fsr2l	equ	0xFD9
  3360                           status	equ	0xFD8
  3361                           
  3362 ;; *************** function ___lldiv *****************
  3363 ;; Defined at:
  3364 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3365 ;; Parameters:    Size  Location     Type
  3366 ;;  dividend        4    0[COMRAM] unsigned long 
  3367 ;;  divisor         4    4[COMRAM] unsigned long 
  3368 ;; Auto vars:     Size  Location     Type
  3369 ;;  quotient        4    8[COMRAM] unsigned long 
  3370 ;;  counter         1   12[COMRAM] unsigned char 
  3371 ;; Return value:  Size  Location     Type
  3372 ;;                  4    0[COMRAM] unsigned long 
  3373 ;; Registers used:
  3374 ;;		wreg, status,2, status,0
  3375 ;; Tracked objects:
  3376 ;;		On entry : 0/0
  3377 ;;		On exit  : 0/0
  3378 ;;		Unchanged: 0/0
  3379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3380 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3381 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3383 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3384 ;;Total ram usage:       13 bytes
  3385 ;; Hardware stack levels used:    1
  3386 ;; This function calls:
  3387 ;;		Nothing
  3388 ;; This function is called by:
  3389 ;;		_printf
  3390 ;;		_I2C_Master_Init
  3391 ;; This function uses a non-reentrant model
  3392 ;;
  3393                           
  3394                           	psect	text14
  3395  000B10                     __ptext14:
  3396                           	opt stack 0
  3397  000B10                     ___lldiv:
  3398                           	opt stack 24
  3399                           
  3400                           ;incstack = 0
  3401  000B10  0E00               	movlw	0
  3402  000B12  6E09               	movwf	___lldiv@quotient,c
  3403  000B14  0E00               	movlw	0
  3404  000B16  6E0A               	movwf	___lldiv@quotient+1,c
  3405  000B18  0E00               	movlw	0
  3406  000B1A  6E0B               	movwf	___lldiv@quotient+2,c
  3407  000B1C  0E00               	movlw	0
  3408  000B1E  6E0C               	movwf	___lldiv@quotient+3,c
  3409  000B20  5005               	movf	___lldiv@divisor,w,c
  3410  000B22  1006               	iorwf	___lldiv@divisor+1,w,c
  3411  000B24  1007               	iorwf	___lldiv@divisor+2,w,c
  3412  000B26  1008               	iorwf	___lldiv@divisor+3,w,c
  3413  000B28  B4D8               	btfsc	status,2,c
  3414  000B2A  D02A               	goto	i2l925
  3415  000B2C  0E01               	movlw	1
  3416  000B2E  6E0D               	movwf	___lldiv@counter,c
  3417  000B30  D006               	goto	i2l2201
  3418  000B32                     i2l2199:
  3419  000B32  90D8               	bcf	status,0,c
  3420  000B34  3605               	rlcf	___lldiv@divisor,f,c
  3421  000B36  3606               	rlcf	___lldiv@divisor+1,f,c
  3422  000B38  3607               	rlcf	___lldiv@divisor+2,f,c
  3423  000B3A  3608               	rlcf	___lldiv@divisor+3,f,c
  3424  000B3C  2A0D               	incf	___lldiv@counter,f,c
  3425  000B3E                     i2l2201:
  3426  000B3E  AE08               	btfss	___lldiv@divisor+3,7,c
  3427  000B40  D7F8               	goto	i2l2199
  3428  000B42                     i2l2203:
  3429  000B42  90D8               	bcf	status,0,c
  3430  000B44  3609               	rlcf	___lldiv@quotient,f,c
  3431  000B46  360A               	rlcf	___lldiv@quotient+1,f,c
  3432  000B48  360B               	rlcf	___lldiv@quotient+2,f,c
  3433  000B4A  360C               	rlcf	___lldiv@quotient+3,f,c
  3434  000B4C  5005               	movf	___lldiv@divisor,w,c
  3435  000B4E  5C01               	subwf	___lldiv@dividend,w,c
  3436  000B50  5006               	movf	___lldiv@divisor+1,w,c
  3437  000B52  5802               	subwfb	___lldiv@dividend+1,w,c
  3438  000B54  5007               	movf	___lldiv@divisor+2,w,c
  3439  000B56  5803               	subwfb	___lldiv@dividend+2,w,c
  3440  000B58  5008               	movf	___lldiv@divisor+3,w,c
  3441  000B5A  5804               	subwfb	___lldiv@dividend+3,w,c
  3442  000B5C  A0D8               	btfss	status,0,c
  3443  000B5E  D009               	goto	i2l2211
  3444  000B60  5005               	movf	___lldiv@divisor,w,c
  3445  000B62  5E01               	subwf	___lldiv@dividend,f,c
  3446  000B64  5006               	movf	___lldiv@divisor+1,w,c
  3447  000B66  5A02               	subwfb	___lldiv@dividend+1,f,c
  3448  000B68  5007               	movf	___lldiv@divisor+2,w,c
  3449  000B6A  5A03               	subwfb	___lldiv@dividend+2,f,c
  3450  000B6C  5008               	movf	___lldiv@divisor+3,w,c
  3451  000B6E  5A04               	subwfb	___lldiv@dividend+3,f,c
  3452  000B70  8009               	bsf	___lldiv@quotient,0,c
  3453  000B72                     i2l2211:
  3454  000B72  90D8               	bcf	status,0,c
  3455  000B74  3208               	rrcf	___lldiv@divisor+3,f,c
  3456  000B76  3207               	rrcf	___lldiv@divisor+2,f,c
  3457  000B78  3206               	rrcf	___lldiv@divisor+1,f,c
  3458  000B7A  3205               	rrcf	___lldiv@divisor,f,c
  3459  000B7C  2E0D               	decfsz	___lldiv@counter,f,c
  3460  000B7E  D7E1               	goto	i2l2203
  3461  000B80                     i2l925:
  3462  000B80  C009  F001         	movff	___lldiv@quotient,?___lldiv
  3463  000B84  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  3464  000B88  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  3465  000B8C  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  3466  000B90  0012               	return		;funcret
  3467  000B92                     __end_of___lldiv:
  3468                           	opt stack 0
  3469                           pclatu	equ	0xFFB
  3470                           pclath	equ	0xFFA
  3471                           tblptru	equ	0xFF8
  3472                           tblptrh	equ	0xFF7
  3473                           tblptrl	equ	0xFF6
  3474                           tablat	equ	0xFF5
  3475                           prodh	equ	0xFF4
  3476                           prodl	equ	0xFF3
  3477                           intcon	equ	0xFF2
  3478                           intcon3	equ	0xFF0
  3479                           postinc0	equ	0xFEE
  3480                           fsr0h	equ	0xFEA
  3481                           fsr0l	equ	0xFE9
  3482                           wreg	equ	0xFE8
  3483                           postdec1	equ	0xFE5
  3484                           fsr1h	equ	0xFE2
  3485                           fsr1l	equ	0xFE1
  3486                           indf2	equ	0xFDF
  3487                           postinc2	equ	0xFDE
  3488                           postdec2	equ	0xFDD
  3489                           fsr2h	equ	0xFDA
  3490                           fsr2l	equ	0xFD9
  3491                           status	equ	0xFD8
  3492                           
  3493 ;; *************** function _lcdClear *****************
  3494 ;; Defined at:
  3495 ;;		line 74 in file "lcd.c"
  3496 ;; Parameters:    Size  Location     Type
  3497 ;;		None
  3498 ;; Auto vars:     Size  Location     Type
  3499 ;;		None
  3500 ;; Return value:  Size  Location     Type
  3501 ;;                  1    wreg      void 
  3502 ;; Registers used:
  3503 ;;		wreg, status,2, status,0, cstack
  3504 ;; Tracked objects:
  3505 ;;		On entry : 0/0
  3506 ;;		On exit  : 0/0
  3507 ;;		Unchanged: 0/0
  3508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3512 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3513 ;;Total ram usage:        0 bytes
  3514 ;; Hardware stack levels used:    1
  3515 ;; Hardware stack levels required when called:    2
  3516 ;; This function calls:
  3517 ;;		i2_lcdInst
  3518 ;; This function is called by:
  3519 ;;		_setAngle
  3520 ;;		_dateTime
  3521 ;;		_mainMenu
  3522 ;;		_runSelect
  3523 ;;		_runMenu
  3524 ;;		_runTime
  3525 ;;		_runStats
  3526 ;; This function uses a non-reentrant model
  3527 ;;
  3528                           
  3529                           	psect	text15
  3530  000FF2                     __ptext15:
  3531                           	opt stack 0
  3532  000FF2                     _lcdClear:
  3533                           	opt stack 23
  3534                           
  3535                           ;lcd.c: 75: lcdInst(0b00000001);
  3536                           
  3537                           ;incstack = 0
  3538  000FF2  0E01               	movlw	1
  3539  000FF4  ECE4  F007         	call	i2_lcdInst
  3540  000FF8  0012               	return		;funcret
  3541  000FFA                     __end_of_lcdClear:
  3542                           	opt stack 0
  3543                           pclatu	equ	0xFFB
  3544                           pclath	equ	0xFFA
  3545                           tblptru	equ	0xFF8
  3546                           tblptrh	equ	0xFF7
  3547                           tblptrl	equ	0xFF6
  3548                           tablat	equ	0xFF5
  3549                           prodh	equ	0xFF4
  3550                           prodl	equ	0xFF3
  3551                           intcon	equ	0xFF2
  3552                           intcon3	equ	0xFF0
  3553                           postinc0	equ	0xFEE
  3554                           fsr0h	equ	0xFEA
  3555                           fsr0l	equ	0xFE9
  3556                           wreg	equ	0xFE8
  3557                           postdec1	equ	0xFE5
  3558                           fsr1h	equ	0xFE2
  3559                           fsr1l	equ	0xFE1
  3560                           indf2	equ	0xFDF
  3561                           postinc2	equ	0xFDE
  3562                           postdec2	equ	0xFDD
  3563                           fsr2h	equ	0xFDA
  3564                           fsr2l	equ	0xFD9
  3565                           status	equ	0xFD8
  3566                           
  3567 ;; *************** function i2_lcdInst *****************
  3568 ;; Defined at:
  3569 ;;		line 27 in file "lcd.c"
  3570 ;; Parameters:    Size  Location     Type
  3571 ;;  data            1    wreg     unsigned char 
  3572 ;; Auto vars:     Size  Location     Type
  3573 ;;  data            1    3[COMRAM] unsigned char 
  3574 ;; Return value:  Size  Location     Type
  3575 ;;                  1    wreg      void 
  3576 ;; Registers used:
  3577 ;;		wreg, status,2, status,0, cstack
  3578 ;; Tracked objects:
  3579 ;;		On entry : 0/0
  3580 ;;		On exit  : 0/0
  3581 ;;		Unchanged: 0/0
  3582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3584 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3585 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3586 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3587 ;;Total ram usage:        2 bytes
  3588 ;; Hardware stack levels used:    1
  3589 ;; Hardware stack levels required when called:    1
  3590 ;; This function calls:
  3591 ;;		i2_lcdNibble
  3592 ;; This function is called by:
  3593 ;;		_lcdClear
  3594 ;;		_lcdNewline
  3595 ;; This function uses a non-reentrant model
  3596 ;;
  3597                           
  3598                           	psect	text16
  3599  000FC8                     __ptext16:
  3600                           	opt stack 0
  3601  000FC8                     i2_lcdInst:
  3602                           	opt stack 21
  3603                           
  3604                           ;incstack = 0
  3605                           ;i2lcdInst@data stored from wreg
  3606  000FC8  6E04               	movwf	i2lcdInst@data,c
  3607                           
  3608                           ;lcd.c: 28: LATDbits.LATD2 = 0;
  3609  000FCA  948C               	bcf	3980,2,c	;volatile
  3610                           
  3611                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
  3612  000FCC  0E74               	movlw	116
  3613  000FCE                     i2u184_47:
  3614  000FCE  2EE8               	decfsz	wreg,f,c
  3615  000FD0  D7FE               	bra	i2u184_47
  3616  000FD2  D000               	nop2	
  3617                           
  3618                           ;lcd.c: 30: lcdNibble(data);
  3619  000FD4  5004               	movf	i2lcdInst@data,w,c
  3620  000FD6  EC38  F006         	call	i2_lcdNibble
  3621                           
  3622                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
  3623  000FDA  0E04               	movlw	4
  3624  000FDC  6E03               	movwf	??i2_lcdInst& (0+255),c
  3625  000FDE  0E3E               	movlw	62
  3626  000FE0                     i2u185_47:
  3627  000FE0  2EE8               	decfsz	wreg,f,c
  3628  000FE2  D7FE               	bra	i2u185_47
  3629  000FE4  2E03               	decfsz	??i2_lcdInst& (0+255),f,c
  3630  000FE6  D7FC               	bra	i2u185_47
  3631  000FE8  0012               	return		;funcret
  3632  000FEA                     __end_ofi2_lcdInst:
  3633                           	opt stack 0
  3634                           pclatu	equ	0xFFB
  3635                           pclath	equ	0xFFA
  3636                           tblptru	equ	0xFF8
  3637                           tblptrh	equ	0xFF7
  3638                           tblptrl	equ	0xFF6
  3639                           tablat	equ	0xFF5
  3640                           prodh	equ	0xFF4
  3641                           prodl	equ	0xFF3
  3642                           intcon	equ	0xFF2
  3643                           intcon3	equ	0xFF0
  3644                           postinc0	equ	0xFEE
  3645                           fsr0h	equ	0xFEA
  3646                           fsr0l	equ	0xFE9
  3647                           wreg	equ	0xFE8
  3648                           postdec1	equ	0xFE5
  3649                           fsr1h	equ	0xFE2
  3650                           fsr1l	equ	0xFE1
  3651                           indf2	equ	0xFDF
  3652                           postinc2	equ	0xFDE
  3653                           postdec2	equ	0xFDD
  3654                           fsr2h	equ	0xFDA
  3655                           fsr2l	equ	0xFD9
  3656                           status	equ	0xFD8
  3657                           
  3658 ;; *************** function i2_lcdNibble *****************
  3659 ;; Defined at:
  3660 ;;		line 46 in file "lcd.c"
  3661 ;; Parameters:    Size  Location     Type
  3662 ;;  data            1    wreg     unsigned char 
  3663 ;; Auto vars:     Size  Location     Type
  3664 ;;  data            1    1[COMRAM] unsigned char 
  3665 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  3666 ;; Return value:  Size  Location     Type
  3667 ;;                  1    wreg      void 
  3668 ;; Registers used:
  3669 ;;		wreg, status,2, status,0
  3670 ;; Tracked objects:
  3671 ;;		On entry : 0/0
  3672 ;;		On exit  : 0/0
  3673 ;;		Unchanged: 0/0
  3674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3676 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3678 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3679 ;;Total ram usage:        2 bytes
  3680 ;; Hardware stack levels used:    1
  3681 ;; This function calls:
  3682 ;;		Nothing
  3683 ;; This function is called by:
  3684 ;;		_putch
  3685 ;;		i2_lcdInst
  3686 ;; This function uses a non-reentrant model
  3687 ;;
  3688                           
  3689                           	psect	text17
  3690  000C70                     __ptext17:
  3691                           	opt stack 0
  3692  000C70                     i2_lcdNibble:
  3693                           	opt stack 23
  3694                           
  3695                           ;incstack = 0
  3696                           ;i2lcdNibble@data stored from wreg
  3697  000C70  6E02               	movwf	i2lcdNibble@data,c
  3698                           
  3699                           ;lcd.c: 48: char temp = data & 0xF0;
  3700  000C72  5002               	movf	i2lcdNibble@data,w,c
  3701  000C74  0BF0               	andlw	240
  3702  000C76  6E01               	movwf	i2lcdNibble@temp,c
  3703                           
  3704                           ;lcd.c: 49: LATD = LATD & 0x0F;
  3705  000C78  508C               	movf	3980,w,c	;volatile
  3706  000C7A  0B0F               	andlw	15
  3707  000C7C  6E8C               	movwf	3980,c	;volatile
  3708                           
  3709                           ;lcd.c: 50: LATD = temp | LATD;
  3710  000C7E  5001               	movf	i2lcdNibble@temp,w,c
  3711  000C80  108C               	iorwf	3980,w,c	;volatile
  3712  000C82  6E8C               	movwf	3980,c	;volatile
  3713                           
  3714                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  3715  000C84  968C               	bcf	3980,3,c	;volatile
  3716                           
  3717                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
  3718  000C86  0ED6               	movlw	214
  3719  000C88                     i2u186_47:
  3720  000C88  D000               	nop2	
  3721  000C8A  D000               	nop2	
  3722  000C8C  2EE8               	decfsz	wreg,f,c
  3723  000C8E  D7FC               	bra	i2u186_47
  3724  000C90  D000               	nop2	
  3725                           
  3726                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  3727  000C92  868C               	bsf	3980,3,c	;volatile
  3728                           
  3729                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
  3730  000C94  0ED6               	movlw	214
  3731  000C96                     i2u187_47:
  3732  000C96  D000               	nop2	
  3733  000C98  D000               	nop2	
  3734  000C9A  2EE8               	decfsz	wreg,f,c
  3735  000C9C  D7FC               	bra	i2u187_47
  3736  000C9E  D000               	nop2	
  3737                           
  3738                           ;lcd.c: 58: data = data << 4;
  3739  000CA0  3802               	swapf	i2lcdNibble@data,w,c
  3740  000CA2  0BF0               	andlw	240
  3741  000CA4  6E02               	movwf	i2lcdNibble@data,c
  3742                           
  3743                           ;lcd.c: 60: temp = data & 0xF0;
  3744  000CA6  5002               	movf	i2lcdNibble@data,w,c
  3745  000CA8  0BF0               	andlw	240
  3746  000CAA  6E01               	movwf	i2lcdNibble@temp,c
  3747                           
  3748                           ;lcd.c: 61: LATD = LATD & 0x0F;
  3749  000CAC  508C               	movf	3980,w,c	;volatile
  3750  000CAE  0B0F               	andlw	15
  3751  000CB0  6E8C               	movwf	3980,c	;volatile
  3752                           
  3753                           ;lcd.c: 62: LATD = temp | LATD;
  3754  000CB2  5001               	movf	i2lcdNibble@temp,w,c
  3755  000CB4  108C               	iorwf	3980,w,c	;volatile
  3756  000CB6  6E8C               	movwf	3980,c	;volatile
  3757                           
  3758                           ;lcd.c: 64: LATDbits.LATD3 = 0;
  3759  000CB8  968C               	bcf	3980,3,c	;volatile
  3760                           
  3761                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
  3762  000CBA  0ED6               	movlw	214
  3763  000CBC                     i2u188_47:
  3764  000CBC  D000               	nop2	
  3765  000CBE  D000               	nop2	
  3766  000CC0  2EE8               	decfsz	wreg,f,c
  3767  000CC2  D7FC               	bra	i2u188_47
  3768  000CC4  D000               	nop2	
  3769                           
  3770                           ;lcd.c: 66: LATDbits.LATD3 = 1;
  3771  000CC6  868C               	bsf	3980,3,c	;volatile
  3772                           
  3773                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
  3774  000CC8  0ED6               	movlw	214
  3775  000CCA                     i2u189_47:
  3776  000CCA  D000               	nop2	
  3777  000CCC  D000               	nop2	
  3778  000CCE  2EE8               	decfsz	wreg,f,c
  3779  000CD0  D7FC               	bra	i2u189_47
  3780  000CD2  D000               	nop2	
  3781  000CD4  0012               	return		;funcret
  3782  000CD6                     __end_ofi2_lcdNibble:
  3783                           	opt stack 0
  3784                           pclatu	equ	0xFFB
  3785                           pclath	equ	0xFFA
  3786                           tblptru	equ	0xFF8
  3787                           tblptrh	equ	0xFF7
  3788                           tblptrl	equ	0xFF6
  3789                           tablat	equ	0xFF5
  3790                           prodh	equ	0xFF4
  3791                           prodl	equ	0xFF3
  3792                           intcon	equ	0xFF2
  3793                           intcon3	equ	0xFF0
  3794                           postinc0	equ	0xFEE
  3795                           fsr0h	equ	0xFEA
  3796                           fsr0l	equ	0xFE9
  3797                           wreg	equ	0xFE8
  3798                           postdec1	equ	0xFE5
  3799                           fsr1h	equ	0xFE2
  3800                           fsr1l	equ	0xFE1
  3801                           indf2	equ	0xFDF
  3802                           postinc2	equ	0xFDE
  3803                           postdec2	equ	0xFDD
  3804                           fsr2h	equ	0xFDA
  3805                           fsr2l	equ	0xFD9
  3806                           status	equ	0xFD8
  3807                           
  3808 ;; *************** function ___lmul *****************
  3809 ;; Defined at:
  3810 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul32.c"
  3811 ;; Parameters:    Size  Location     Type
  3812 ;;  multiplier      4    0[COMRAM] unsigned long 
  3813 ;;  multiplicand    4    4[COMRAM] unsigned long 
  3814 ;; Auto vars:     Size  Location     Type
  3815 ;;  product         4    8[COMRAM] unsigned long 
  3816 ;; Return value:  Size  Location     Type
  3817 ;;                  4    0[COMRAM] unsigned long 
  3818 ;; Registers used:
  3819 ;;		wreg, status,2, status,0
  3820 ;; Tracked objects:
  3821 ;;		On entry : 0/0
  3822 ;;		On exit  : 0/0
  3823 ;;		Unchanged: 0/0
  3824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3825 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3826 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3828 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3829 ;;Total ram usage:       12 bytes
  3830 ;; Hardware stack levels used:    1
  3831 ;; This function calls:
  3832 ;;		Nothing
  3833 ;; This function is called by:
  3834 ;;		_setAngle
  3835 ;; This function uses a non-reentrant model
  3836 ;;
  3837                           
  3838                           	psect	text18
  3839  000CD6                     __ptext18:
  3840                           	opt stack 0
  3841  000CD6                     ___lmul:
  3842                           	opt stack 25
  3843                           
  3844                           ;incstack = 0
  3845  000CD6  0E00               	movlw	0
  3846  000CD8  6E09               	movwf	___lmul@product,c
  3847  000CDA  0E00               	movlw	0
  3848  000CDC  6E0A               	movwf	___lmul@product+1,c
  3849  000CDE  0E00               	movlw	0
  3850  000CE0  6E0B               	movwf	___lmul@product+2,c
  3851  000CE2  0E00               	movlw	0
  3852  000CE4  6E0C               	movwf	___lmul@product+3,c
  3853  000CE6                     i2l2417:
  3854  000CE6  A001               	btfss	___lmul@multiplier,0,c
  3855  000CE8  D008               	goto	i2l2421
  3856  000CEA  5005               	movf	___lmul@multiplicand,w,c
  3857  000CEC  2609               	addwf	___lmul@product,f,c
  3858  000CEE  5006               	movf	___lmul@multiplicand+1,w,c
  3859  000CF0  220A               	addwfc	___lmul@product+1,f,c
  3860  000CF2  5007               	movf	___lmul@multiplicand+2,w,c
  3861  000CF4  220B               	addwfc	___lmul@product+2,f,c
  3862  000CF6  5008               	movf	___lmul@multiplicand+3,w,c
  3863  000CF8  220C               	addwfc	___lmul@product+3,f,c
  3864  000CFA                     i2l2421:
  3865  000CFA  90D8               	bcf	status,0,c
  3866  000CFC  3605               	rlcf	___lmul@multiplicand,f,c
  3867  000CFE  3606               	rlcf	___lmul@multiplicand+1,f,c
  3868  000D00  3607               	rlcf	___lmul@multiplicand+2,f,c
  3869  000D02  3608               	rlcf	___lmul@multiplicand+3,f,c
  3870  000D04  90D8               	bcf	status,0,c
  3871  000D06  3204               	rrcf	___lmul@multiplier+3,f,c
  3872  000D08  3203               	rrcf	___lmul@multiplier+2,f,c
  3873  000D0A  3202               	rrcf	___lmul@multiplier+1,f,c
  3874  000D0C  3201               	rrcf	___lmul@multiplier,f,c
  3875  000D0E  5001               	movf	___lmul@multiplier,w,c
  3876  000D10  1002               	iorwf	___lmul@multiplier+1,w,c
  3877  000D12  1003               	iorwf	___lmul@multiplier+2,w,c
  3878  000D14  1004               	iorwf	___lmul@multiplier+3,w,c
  3879  000D16  A4D8               	btfss	status,2,c
  3880  000D18  D7E6               	goto	i2l2417
  3881  000D1A  C009  F001         	movff	___lmul@product,?___lmul
  3882  000D1E  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  3883  000D22  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  3884  000D26  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  3885  000D2A  0012               	return		;funcret
  3886  000D2C                     __end_of___lmul:
  3887                           	opt stack 0
  3888                           pclatu	equ	0xFFB
  3889                           pclath	equ	0xFFA
  3890                           tblptru	equ	0xFF8
  3891                           tblptrh	equ	0xFF7
  3892                           tblptrl	equ	0xFF6
  3893                           tablat	equ	0xFF5
  3894                           prodh	equ	0xFF4
  3895                           prodl	equ	0xFF3
  3896                           intcon	equ	0xFF2
  3897                           intcon3	equ	0xFF0
  3898                           postinc0	equ	0xFEE
  3899                           fsr0h	equ	0xFEA
  3900                           fsr0l	equ	0xFE9
  3901                           wreg	equ	0xFE8
  3902                           postdec1	equ	0xFE5
  3903                           fsr1h	equ	0xFE2
  3904                           fsr1l	equ	0xFE1
  3905                           indf2	equ	0xFDF
  3906                           postinc2	equ	0xFDE
  3907                           postdec2	equ	0xFDD
  3908                           fsr2h	equ	0xFDA
  3909                           fsr2l	equ	0xFD9
  3910                           status	equ	0xFD8
  3911                           
  3912 ;; *************** function ___aldiv *****************
  3913 ;; Defined at:
  3914 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\aldiv.c"
  3915 ;; Parameters:    Size  Location     Type
  3916 ;;  dividend        4   12[COMRAM] long 
  3917 ;;  divisor         4   16[COMRAM] long 
  3918 ;; Auto vars:     Size  Location     Type
  3919 ;;  quotient        4   22[COMRAM] long 
  3920 ;;  sign            1   21[COMRAM] unsigned char 
  3921 ;;  counter         1   20[COMRAM] unsigned char 
  3922 ;; Return value:  Size  Location     Type
  3923 ;;                  4   12[COMRAM] long 
  3924 ;; Registers used:
  3925 ;;		wreg, status,2, status,0
  3926 ;; Tracked objects:
  3927 ;;		On entry : 0/0
  3928 ;;		On exit  : 0/0
  3929 ;;		Unchanged: 0/0
  3930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3931 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3932 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3934 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3935 ;;Total ram usage:       14 bytes
  3936 ;; Hardware stack levels used:    1
  3937 ;; This function calls:
  3938 ;;		Nothing
  3939 ;; This function is called by:
  3940 ;;		_setAngle
  3941 ;; This function uses a non-reentrant model
  3942 ;;
  3943                           
  3944                           	psect	text19
  3945  000998                     __ptext19:
  3946                           	opt stack 0
  3947  000998                     ___aldiv:
  3948                           	opt stack 25
  3949                           
  3950                           ;incstack = 0
  3951  000998  0E00               	movlw	0
  3952  00099A  6E16               	movwf	___aldiv@sign,c
  3953  00099C  AE14               	btfss	___aldiv@divisor+3,7,c
  3954  00099E  D00A               	goto	i2l2433
  3955  0009A0  1E14               	comf	___aldiv@divisor+3,f,c
  3956  0009A2  1E13               	comf	___aldiv@divisor+2,f,c
  3957  0009A4  1E12               	comf	___aldiv@divisor+1,f,c
  3958  0009A6  6C11               	negf	___aldiv@divisor,c
  3959  0009A8  0E00               	movlw	0
  3960  0009AA  2212               	addwfc	___aldiv@divisor+1,f,c
  3961  0009AC  2213               	addwfc	___aldiv@divisor+2,f,c
  3962  0009AE  2214               	addwfc	___aldiv@divisor+3,f,c
  3963  0009B0  0E01               	movlw	1
  3964  0009B2  6E16               	movwf	___aldiv@sign,c
  3965  0009B4                     i2l2433:
  3966  0009B4  AE10               	btfss	___aldiv@dividend+3,7,c
  3967  0009B6  D00A               	goto	i2l2439
  3968  0009B8  1E10               	comf	___aldiv@dividend+3,f,c
  3969  0009BA  1E0F               	comf	___aldiv@dividend+2,f,c
  3970  0009BC  1E0E               	comf	___aldiv@dividend+1,f,c
  3971  0009BE  6C0D               	negf	___aldiv@dividend,c
  3972  0009C0  0E00               	movlw	0
  3973  0009C2  220E               	addwfc	___aldiv@dividend+1,f,c
  3974  0009C4  220F               	addwfc	___aldiv@dividend+2,f,c
  3975  0009C6  2210               	addwfc	___aldiv@dividend+3,f,c
  3976  0009C8  0E01               	movlw	1
  3977  0009CA  1A16               	xorwf	___aldiv@sign,f,c
  3978  0009CC                     i2l2439:
  3979  0009CC  0E00               	movlw	0
  3980  0009CE  6E17               	movwf	___aldiv@quotient,c
  3981  0009D0  0E00               	movlw	0
  3982  0009D2  6E18               	movwf	___aldiv@quotient+1,c
  3983  0009D4  0E00               	movlw	0
  3984  0009D6  6E19               	movwf	___aldiv@quotient+2,c
  3985  0009D8  0E00               	movlw	0
  3986  0009DA  6E1A               	movwf	___aldiv@quotient+3,c
  3987  0009DC  5011               	movf	___aldiv@divisor,w,c
  3988  0009DE  1012               	iorwf	___aldiv@divisor+1,w,c
  3989  0009E0  1013               	iorwf	___aldiv@divisor+2,w,c
  3990  0009E2  1014               	iorwf	___aldiv@divisor+3,w,c
  3991  0009E4  B4D8               	btfsc	status,2,c
  3992  0009E6  D02A               	goto	i2l2461
  3993  0009E8  0E01               	movlw	1
  3994  0009EA  6E15               	movwf	___aldiv@counter,c
  3995  0009EC  D006               	goto	i2l2447
  3996  0009EE                     i2l2445:
  3997  0009EE  90D8               	bcf	status,0,c
  3998  0009F0  3611               	rlcf	___aldiv@divisor,f,c
  3999  0009F2  3612               	rlcf	___aldiv@divisor+1,f,c
  4000  0009F4  3613               	rlcf	___aldiv@divisor+2,f,c
  4001  0009F6  3614               	rlcf	___aldiv@divisor+3,f,c
  4002  0009F8  2A15               	incf	___aldiv@counter,f,c
  4003  0009FA                     i2l2447:
  4004  0009FA  AE14               	btfss	___aldiv@divisor+3,7,c
  4005  0009FC  D7F8               	goto	i2l2445
  4006  0009FE                     i2l2449:
  4007  0009FE  90D8               	bcf	status,0,c
  4008  000A00  3617               	rlcf	___aldiv@quotient,f,c
  4009  000A02  3618               	rlcf	___aldiv@quotient+1,f,c
  4010  000A04  3619               	rlcf	___aldiv@quotient+2,f,c
  4011  000A06  361A               	rlcf	___aldiv@quotient+3,f,c
  4012  000A08  5011               	movf	___aldiv@divisor,w,c
  4013  000A0A  5C0D               	subwf	___aldiv@dividend,w,c
  4014  000A0C  5012               	movf	___aldiv@divisor+1,w,c
  4015  000A0E  580E               	subwfb	___aldiv@dividend+1,w,c
  4016  000A10  5013               	movf	___aldiv@divisor+2,w,c
  4017  000A12  580F               	subwfb	___aldiv@dividend+2,w,c
  4018  000A14  5014               	movf	___aldiv@divisor+3,w,c
  4019  000A16  5810               	subwfb	___aldiv@dividend+3,w,c
  4020  000A18  A0D8               	btfss	status,0,c
  4021  000A1A  D009               	goto	i2l2457
  4022  000A1C  5011               	movf	___aldiv@divisor,w,c
  4023  000A1E  5E0D               	subwf	___aldiv@dividend,f,c
  4024  000A20  5012               	movf	___aldiv@divisor+1,w,c
  4025  000A22  5A0E               	subwfb	___aldiv@dividend+1,f,c
  4026  000A24  5013               	movf	___aldiv@divisor+2,w,c
  4027  000A26  5A0F               	subwfb	___aldiv@dividend+2,f,c
  4028  000A28  5014               	movf	___aldiv@divisor+3,w,c
  4029  000A2A  5A10               	subwfb	___aldiv@dividend+3,f,c
  4030  000A2C  8017               	bsf	___aldiv@quotient,0,c
  4031  000A2E                     i2l2457:
  4032  000A2E  90D8               	bcf	status,0,c
  4033  000A30  3214               	rrcf	___aldiv@divisor+3,f,c
  4034  000A32  3213               	rrcf	___aldiv@divisor+2,f,c
  4035  000A34  3212               	rrcf	___aldiv@divisor+1,f,c
  4036  000A36  3211               	rrcf	___aldiv@divisor,f,c
  4037  000A38  2E15               	decfsz	___aldiv@counter,f,c
  4038  000A3A  D7E1               	goto	i2l2449
  4039  000A3C                     i2l2461:
  4040  000A3C  5016               	movf	___aldiv@sign,w,c
  4041  000A3E  B4D8               	btfsc	status,2,c
  4042  000A40  D008               	goto	i2l2465
  4043  000A42  1E1A               	comf	___aldiv@quotient+3,f,c
  4044  000A44  1E19               	comf	___aldiv@quotient+2,f,c
  4045  000A46  1E18               	comf	___aldiv@quotient+1,f,c
  4046  000A48  6C17               	negf	___aldiv@quotient,c
  4047  000A4A  0E00               	movlw	0
  4048  000A4C  2218               	addwfc	___aldiv@quotient+1,f,c
  4049  000A4E  2219               	addwfc	___aldiv@quotient+2,f,c
  4050  000A50  221A               	addwfc	___aldiv@quotient+3,f,c
  4051  000A52                     i2l2465:
  4052  000A52  C017  F00D         	movff	___aldiv@quotient,?___aldiv
  4053  000A56  C018  F00E         	movff	___aldiv@quotient+1,?___aldiv+1
  4054  000A5A  C019  F00F         	movff	___aldiv@quotient+2,?___aldiv+2
  4055  000A5E  C01A  F010         	movff	___aldiv@quotient+3,?___aldiv+3
  4056  000A62  0012               	return	
  4057  000A64                     __end_of___aldiv:
  4058                           	opt stack 0
  4059                           pclatu	equ	0xFFB
  4060                           pclath	equ	0xFFA
  4061                           tblptru	equ	0xFF8
  4062                           tblptrh	equ	0xFF7
  4063                           tblptrl	equ	0xFF6
  4064                           tablat	equ	0xFF5
  4065                           prodh	equ	0xFF4
  4066                           prodl	equ	0xFF3
  4067                           intcon	equ	0xFF2
  4068                           intcon3	equ	0xFF0
  4069                           postinc0	equ	0xFEE
  4070                           fsr0h	equ	0xFEA
  4071                           fsr0l	equ	0xFE9
  4072                           wreg	equ	0xFE8
  4073                           postdec1	equ	0xFE5
  4074                           fsr1h	equ	0xFE2
  4075                           fsr1l	equ	0xFE1
  4076                           indf2	equ	0xFDF
  4077                           postinc2	equ	0xFDE
  4078                           postdec2	equ	0xFDD
  4079                           fsr2h	equ	0xFDA
  4080                           fsr2l	equ	0xFD9
  4081                           status	equ	0xFD8
  4082                           
  4083 ;; *************** function _servoInterruptService *****************
  4084 ;; Defined at:
  4085 ;;		line 60 in file "servo.c"
  4086 ;; Parameters:    Size  Location     Type
  4087 ;;		None
  4088 ;; Auto vars:     Size  Location     Type
  4089 ;;  i               2   21[COMRAM] int 
  4090 ;; Return value:  Size  Location     Type
  4091 ;;                  1    wreg      void 
  4092 ;; Registers used:
  4093 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4094 ;; Tracked objects:
  4095 ;;		On entry : 0/0
  4096 ;;		On exit  : 0/0
  4097 ;;		Unchanged: 0/0
  4098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4100 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4101 ;;      Temps:         12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4102 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4103 ;;Total ram usage:       14 bytes
  4104 ;; Hardware stack levels used:    1
  4105 ;; Hardware stack levels required when called:    1
  4106 ;; This function calls:
  4107 ;;		_digitalWrite
  4108 ;;		i2_startTimer
  4109 ;; This function is called by:
  4110 ;;		_service
  4111 ;; This function uses a non-reentrant model
  4112 ;;
  4113                           
  4114                           	psect	text20
  4115  000622                     __ptext20:
  4116                           	opt stack 0
  4117  000622                     _servoInterruptService:
  4118                           	opt stack 25
  4119                           
  4120                           ;servo.c: 61: if(TMR0IF){ TMR0IF = 0;
  4121                           
  4122                           ;incstack = 0
  4123  000622  A4F2               	btfss	intcon,2,c	;volatile
  4124  000624  0012               	return	
  4125  000626  94F2               	bcf	intcon,2,c	;volatile
  4126                           
  4127                           ;servo.c: 62: if(curr == nServo){
  4128  000628  5079               	movf	_nServo,w,c
  4129  00062A  187B               	xorwf	_curr,w,c
  4130  00062C  E176               	bnz	i2l2527
  4131  00062E  507A               	movf	_nServo+1,w,c
  4132  000630  187C               	xorwf	_curr+1,w,c
  4133  000632  A4D8               	btfss	status,2,c
  4134  000634  D072               	goto	i2l2527
  4135                           
  4136                           ;servo.c: 63: curr = 0;
  4137  000636  0E00               	movlw	0
  4138  000638  6E7C               	movwf	_curr+1,c
  4139  00063A  0E00               	movlw	0
  4140  00063C  6E7B               	movwf	_curr,c
  4141                           
  4142                           ;servo.c: 64: for(int i = 0; i < nServo; i++)
  4143  00063E  0E00               	movlw	0
  4144  000640  6E17               	movwf	servoInterruptService@i+1,c
  4145  000642  0E00               	movlw	0
  4146  000644  6E16               	movwf	servoInterruptService@i,c
  4147  000646  D022               	goto	i2l2523
  4148  000648                     i2l2519:
  4149                           
  4150                           ;servo.c: 65: digitalWrite(port[i], pin[i], 1);
  4151  000648  90D8               	bcf	status,0,c
  4152  00064A  3416               	rlcf	servoInterruptService@i,w,c
  4153  00064C  6ED9               	movwf	fsr2l,c
  4154  00064E  3417               	rlcf	servoInterruptService@i+1,w,c
  4155  000650  6EDA               	movwf	fsr2h,c
  4156  000652  0EB0               	movlw	low _port
  4157  000654  26D9               	addwf	fsr2l,f,c
  4158  000656  0E00               	movlw	high _port
  4159  000658  22DA               	addwfc	fsr2h,f,c
  4160  00065A  CFDE F001          	movff	postinc2,digitalWrite@port
  4161  00065E  CFDD F002          	movff	postdec2,digitalWrite@port+1
  4162  000662  90D8               	bcf	status,0,c
  4163  000664  3416               	rlcf	servoInterruptService@i,w,c
  4164  000666  6ED9               	movwf	fsr2l,c
  4165  000668  3417               	rlcf	servoInterruptService@i+1,w,c
  4166  00066A  6EDA               	movwf	fsr2h,c
  4167  00066C  0EA8               	movlw	low _pin
  4168  00066E  26D9               	addwf	fsr2l,f,c
  4169  000670  0E00               	movlw	high _pin
  4170  000672  22DA               	addwfc	fsr2h,f,c
  4171  000674  CFDE F003          	movff	postinc2,digitalWrite@pin
  4172  000678  CFDD F004          	movff	postdec2,digitalWrite@pin+1
  4173  00067C  0E00               	movlw	0
  4174  00067E  6E06               	movwf	digitalWrite@val+1,c
  4175  000680  0E01               	movlw	1
  4176  000682  6E05               	movwf	digitalWrite@val,c
  4177  000684  EC32  F005         	call	_digitalWrite	;wreg free
  4178  000688  4A16               	infsnz	servoInterruptService@i,f,c
  4179  00068A  2A17               	incf	servoInterruptService@i+1,f,c
  4180  00068C                     i2l2523:
  4181  00068C  5079               	movf	_nServo,w,c
  4182  00068E  5C16               	subwf	servoInterruptService@i,w,c
  4183  000690  5017               	movf	servoInterruptService@i+1,w,c
  4184  000692  0A80               	xorlw	128
  4185  000694  6E0A               	movwf	??_servoInterruptService& (0+255),c
  4186  000696  507A               	movf	_nServo+1,w,c
  4187  000698  0A80               	xorlw	128
  4188  00069A  580A               	subwfb	??_servoInterruptService& (0+255),w,c
  4189  00069C  A0D8               	btfss	status,0,c
  4190  00069E  D7D4               	goto	i2l2519
  4191                           
  4192                           ;servo.c: 66: startTimer(0, 0xffff - sequence[order[curr]]);
  4193  0006A0  0E00               	movlw	0
  4194  0006A2  6E02               	movwf	i2startTimer@timer+1,c
  4195  0006A4  0E00               	movlw	0
  4196  0006A6  6E01               	movwf	i2startTimer@timer,c
  4197  0006A8  90D8               	bcf	status,0,c
  4198  0006AA  347B               	rlcf	_curr,w,c
  4199  0006AC  6ED9               	movwf	fsr2l,c
  4200  0006AE  347C               	rlcf	_curr+1,w,c
  4201  0006B0  6EDA               	movwf	fsr2h,c
  4202  0006B2  0EA0               	movlw	low _order
  4203  0006B4  26D9               	addwf	fsr2l,f,c
  4204  0006B6  0E00               	movlw	high _order
  4205  0006B8  22DA               	addwfc	fsr2h,f,c
  4206  0006BA  CFDE F00A          	movff	postinc2,??_servoInterruptService
  4207  0006BE  CFDD F00B          	movff	postdec2,??_servoInterruptService+1
  4208  0006C2  90D8               	bcf	status,0,c
  4209  0006C4  360A               	rlcf	??_servoInterruptService,f,c
  4210  0006C6  360B               	rlcf	??_servoInterruptService+1,f,c
  4211  0006C8  90D8               	bcf	status,0,c
  4212  0006CA  360A               	rlcf	??_servoInterruptService,f,c
  4213  0006CC  360B               	rlcf	??_servoInterruptService+1,f,c
  4214  0006CE  0E90               	movlw	low _sequence
  4215  0006D0  240A               	addwf	??_servoInterruptService,w,c
  4216  0006D2  6ED9               	movwf	fsr2l,c
  4217  0006D4  0E00               	movlw	high _sequence
  4218  0006D6  200B               	addwfc	??_servoInterruptService+1,w,c
  4219  0006D8  6EDA               	movwf	fsr2h,c
  4220  0006DA  CFDE F00C          	movff	postinc2,??_servoInterruptService+2
  4221  0006DE  CFDE F00D          	movff	postinc2,??_servoInterruptService+3
  4222  0006E2  CFDE F00E          	movff	postinc2,??_servoInterruptService+4
  4223  0006E6  CFDE F00F          	movff	postinc2,??_servoInterruptService+5
  4224  0006EA  1E0C               	comf	??_servoInterruptService+2,f,c
  4225  0006EC  1E0D               	comf	??_servoInterruptService+3,f,c
  4226  0006EE  1E0E               	comf	??_servoInterruptService+4,f,c
  4227  0006F0  1E0F               	comf	??_servoInterruptService+5,f,c
  4228  0006F2  2A0C               	incf	??_servoInterruptService+2,f,c
  4229  0006F4  0E00               	movlw	0
  4230  0006F6  220D               	addwfc	??_servoInterruptService+3,f,c
  4231  0006F8  220E               	addwfc	??_servoInterruptService+4,f,c
  4232  0006FA  220F               	addwfc	??_servoInterruptService+5,f,c
  4233  0006FC  0EFF               	movlw	255
  4234  0006FE  240C               	addwf	??_servoInterruptService+2,w,c
  4235  000700  6E03               	movwf	i2startTimer@val,c
  4236  000702  0EFF               	movlw	255
  4237  000704  200D               	addwfc	??_servoInterruptService+3,w,c
  4238  000706  6E04               	movwf	i2startTimer@val+1,c
  4239  000708  0E00               	movlw	0
  4240  00070A  200E               	addwfc	??_servoInterruptService+4,w,c
  4241  00070C  6E05               	movwf	i2startTimer@val+2,c
  4242  00070E  0E00               	movlw	0
  4243  000710  200F               	addwfc	??_servoInterruptService+5,w,c
  4244  000712  6E06               	movwf	i2startTimer@val+3,c
  4245  000714  ECE7  F006         	call	i2_startTimer	;wreg free
  4246                           
  4247                           ;servo.c: 67: }
  4248  000718  0012               	return	
  4249  00071A                     i2l2527:
  4250                           
  4251                           ;servo.c: 68: else{
  4252                           ;servo.c: 69: curr++;
  4253  00071A  4A7B               	infsnz	_curr,f,c
  4254  00071C  2A7C               	incf	_curr+1,f,c
  4255                           
  4256                           ;servo.c: 70: startTimer(0, 0xffff - sequence[order[curr]]);
  4257  00071E  0E00               	movlw	0
  4258  000720  6E02               	movwf	i2startTimer@timer+1,c
  4259  000722  0E00               	movlw	0
  4260  000724  6E01               	movwf	i2startTimer@timer,c
  4261  000726  90D8               	bcf	status,0,c
  4262  000728  347B               	rlcf	_curr,w,c
  4263  00072A  6ED9               	movwf	fsr2l,c
  4264  00072C  347C               	rlcf	_curr+1,w,c
  4265  00072E  6EDA               	movwf	fsr2h,c
  4266  000730  0EA0               	movlw	low _order
  4267  000732  26D9               	addwf	fsr2l,f,c
  4268  000734  0E00               	movlw	high _order
  4269  000736  22DA               	addwfc	fsr2h,f,c
  4270  000738  CFDE F00A          	movff	postinc2,??_servoInterruptService
  4271  00073C  CFDD F00B          	movff	postdec2,??_servoInterruptService+1
  4272  000740  90D8               	bcf	status,0,c
  4273  000742  360A               	rlcf	??_servoInterruptService,f,c
  4274  000744  360B               	rlcf	??_servoInterruptService+1,f,c
  4275  000746  90D8               	bcf	status,0,c
  4276  000748  360A               	rlcf	??_servoInterruptService,f,c
  4277  00074A  360B               	rlcf	??_servoInterruptService+1,f,c
  4278  00074C  0E90               	movlw	low _sequence
  4279  00074E  240A               	addwf	??_servoInterruptService,w,c
  4280  000750  6ED9               	movwf	fsr2l,c
  4281  000752  0E00               	movlw	high _sequence
  4282  000754  200B               	addwfc	??_servoInterruptService+1,w,c
  4283  000756  6EDA               	movwf	fsr2h,c
  4284  000758  CFDE F00C          	movff	postinc2,??_servoInterruptService+2
  4285  00075C  CFDE F00D          	movff	postinc2,??_servoInterruptService+3
  4286  000760  CFDE F00E          	movff	postinc2,??_servoInterruptService+4
  4287  000764  CFDE F00F          	movff	postinc2,??_servoInterruptService+5
  4288  000768  1E0C               	comf	??_servoInterruptService+2,f,c
  4289  00076A  1E0D               	comf	??_servoInterruptService+3,f,c
  4290  00076C  1E0E               	comf	??_servoInterruptService+4,f,c
  4291  00076E  1E0F               	comf	??_servoInterruptService+5,f,c
  4292  000770  2A0C               	incf	??_servoInterruptService+2,f,c
  4293  000772  0E00               	movlw	0
  4294  000774  220D               	addwfc	??_servoInterruptService+3,f,c
  4295  000776  220E               	addwfc	??_servoInterruptService+4,f,c
  4296  000778  220F               	addwfc	??_servoInterruptService+5,f,c
  4297  00077A  0EFF               	movlw	255
  4298  00077C  240C               	addwf	??_servoInterruptService+2,w,c
  4299  00077E  6E03               	movwf	i2startTimer@val,c
  4300  000780  0EFF               	movlw	255
  4301  000782  200D               	addwfc	??_servoInterruptService+3,w,c
  4302  000784  6E04               	movwf	i2startTimer@val+1,c
  4303  000786  0E00               	movlw	0
  4304  000788  200E               	addwfc	??_servoInterruptService+4,w,c
  4305  00078A  6E05               	movwf	i2startTimer@val+2,c
  4306  00078C  0E00               	movlw	0
  4307  00078E  200F               	addwfc	??_servoInterruptService+5,w,c
  4308  000790  6E06               	movwf	i2startTimer@val+3,c
  4309  000792  ECE7  F006         	call	i2_startTimer	;wreg free
  4310                           
  4311                           ;servo.c: 71: digitalWrite(port[order[curr-1]],pin[order[curr-1]],0);
  4312  000796  0EFE               	movlw	254
  4313  000798  6E0A               	movwf	??_servoInterruptService& (0+255),c
  4314  00079A  0EFF               	movlw	255
  4315  00079C  6E0B               	movwf	(??_servoInterruptService+1)& (0+255),c
  4316  00079E  C07B  F00C         	movff	_curr,??_servoInterruptService+2
  4317  0007A2  C07C  F00D         	movff	_curr+1,??_servoInterruptService+3
  4318  0007A6  90D8               	bcf	status,0,c
  4319  0007A8  360C               	rlcf	??_servoInterruptService+2,f,c
  4320  0007AA  360D               	rlcf	??_servoInterruptService+3,f,c
  4321  0007AC  500A               	movf	??_servoInterruptService,w,c
  4322  0007AE  260C               	addwf	??_servoInterruptService+2,f,c
  4323  0007B0  500B               	movf	??_servoInterruptService+1,w,c
  4324  0007B2  220D               	addwfc	??_servoInterruptService+3,f,c
  4325  0007B4  0EA0               	movlw	low _order
  4326  0007B6  240C               	addwf	??_servoInterruptService+2,w,c
  4327  0007B8  6ED9               	movwf	fsr2l,c
  4328  0007BA  0E00               	movlw	high _order
  4329  0007BC  200D               	addwfc	??_servoInterruptService+3,w,c
  4330  0007BE  6EDA               	movwf	fsr2h,c
  4331  0007C0  CFDE F00E          	movff	postinc2,??_servoInterruptService+4
  4332  0007C4  CFDD F00F          	movff	postdec2,??_servoInterruptService+5
  4333  0007C8  90D8               	bcf	status,0,c
  4334  0007CA  360E               	rlcf	??_servoInterruptService+4,f,c
  4335  0007CC  360F               	rlcf	??_servoInterruptService+5,f,c
  4336  0007CE  0EB0               	movlw	low _port
  4337  0007D0  240E               	addwf	??_servoInterruptService+4,w,c
  4338  0007D2  6ED9               	movwf	fsr2l,c
  4339  0007D4  0E00               	movlw	high _port
  4340  0007D6  200F               	addwfc	??_servoInterruptService+5,w,c
  4341  0007D8  6EDA               	movwf	fsr2h,c
  4342  0007DA  CFDE F001          	movff	postinc2,digitalWrite@port
  4343  0007DE  CFDD F002          	movff	postdec2,digitalWrite@port+1
  4344  0007E2  0EFE               	movlw	254
  4345  0007E4  6E10               	movwf	(??_servoInterruptService+6)& (0+255),c
  4346  0007E6  0EFF               	movlw	255
  4347  0007E8  6E11               	movwf	(??_servoInterruptService+7)& (0+255),c
  4348  0007EA  C07B  F012         	movff	_curr,??_servoInterruptService+8
  4349  0007EE  C07C  F013         	movff	_curr+1,??_servoInterruptService+9
  4350  0007F2  90D8               	bcf	status,0,c
  4351  0007F4  3612               	rlcf	??_servoInterruptService+8,f,c
  4352  0007F6  3613               	rlcf	??_servoInterruptService+9,f,c
  4353  0007F8  5010               	movf	??_servoInterruptService+6,w,c
  4354  0007FA  2612               	addwf	??_servoInterruptService+8,f,c
  4355  0007FC  5011               	movf	??_servoInterruptService+7,w,c
  4356  0007FE  2213               	addwfc	??_servoInterruptService+9,f,c
  4357  000800  0EA0               	movlw	low _order
  4358  000802  2412               	addwf	??_servoInterruptService+8,w,c
  4359  000804  6ED9               	movwf	fsr2l,c
  4360  000806  0E00               	movlw	high _order
  4361  000808  2013               	addwfc	??_servoInterruptService+9,w,c
  4362  00080A  6EDA               	movwf	fsr2h,c
  4363  00080C  CFDE F014          	movff	postinc2,??_servoInterruptService+10
  4364  000810  CFDD F015          	movff	postdec2,??_servoInterruptService+11
  4365  000814  90D8               	bcf	status,0,c
  4366  000816  3614               	rlcf	??_servoInterruptService+10,f,c
  4367  000818  3615               	rlcf	??_servoInterruptService+11,f,c
  4368  00081A  0EA8               	movlw	low _pin
  4369  00081C  2414               	addwf	??_servoInterruptService+10,w,c
  4370  00081E  6ED9               	movwf	fsr2l,c
  4371  000820  0E00               	movlw	high _pin
  4372  000822  2015               	addwfc	??_servoInterruptService+11,w,c
  4373  000824  6EDA               	movwf	fsr2h,c
  4374  000826  CFDE F003          	movff	postinc2,digitalWrite@pin
  4375  00082A  CFDD F004          	movff	postdec2,digitalWrite@pin+1
  4376  00082E  0E00               	movlw	0
  4377  000830  6E06               	movwf	digitalWrite@val+1,c
  4378  000832  0E00               	movlw	0
  4379  000834  6E05               	movwf	digitalWrite@val,c
  4380  000836  EC32  F005         	call	_digitalWrite	;wreg free
  4381  00083A  0012               	return	
  4382  00083C                     __end_of_servoInterruptService:
  4383                           	opt stack 0
  4384                           pclatu	equ	0xFFB
  4385                           pclath	equ	0xFFA
  4386                           tblptru	equ	0xFF8
  4387                           tblptrh	equ	0xFF7
  4388                           tblptrl	equ	0xFF6
  4389                           tablat	equ	0xFF5
  4390                           prodh	equ	0xFF4
  4391                           prodl	equ	0xFF3
  4392                           intcon	equ	0xFF2
  4393                           intcon3	equ	0xFF0
  4394                           postinc0	equ	0xFEE
  4395                           fsr0h	equ	0xFEA
  4396                           fsr0l	equ	0xFE9
  4397                           wreg	equ	0xFE8
  4398                           postdec1	equ	0xFE5
  4399                           fsr1h	equ	0xFE2
  4400                           fsr1l	equ	0xFE1
  4401                           indf2	equ	0xFDF
  4402                           postinc2	equ	0xFDE
  4403                           postdec2	equ	0xFDD
  4404                           fsr2h	equ	0xFDA
  4405                           fsr2l	equ	0xFD9
  4406                           status	equ	0xFD8
  4407                           
  4408 ;; *************** function i2_startTimer *****************
  4409 ;; Defined at:
  4410 ;;		line 75 in file "timer.c"
  4411 ;; Parameters:    Size  Location     Type
  4412 ;;  timer           2    0[COMRAM] int 
  4413 ;;  val             4    2[COMRAM] long 
  4414 ;; Auto vars:     Size  Location     Type
  4415 ;;		None
  4416 ;; Return value:  Size  Location     Type
  4417 ;;                  1    wreg      void 
  4418 ;; Registers used:
  4419 ;;		wreg, status,2, status,0
  4420 ;; Tracked objects:
  4421 ;;		On entry : 0/0
  4422 ;;		On exit  : 0/0
  4423 ;;		Unchanged: 0/0
  4424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4425 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4427 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4428 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4429 ;;Total ram usage:        8 bytes
  4430 ;; Hardware stack levels used:    1
  4431 ;; This function calls:
  4432 ;;		Nothing
  4433 ;; This function is called by:
  4434 ;;		_servoInterruptService
  4435 ;; This function uses a non-reentrant model
  4436 ;;
  4437                           
  4438                           	psect	text21
  4439  000DCE                     __ptext21:
  4440                           	opt stack 0
  4441  000DCE                     i2_startTimer:
  4442                           	opt stack 25
  4443                           
  4444                           ;timer.c: 76: switch(timer){
  4445                           
  4446                           ;incstack = 0
  4447  000DCE  D012               	goto	i2l2477
  4448  000DD0                     i2l345:
  4449                           
  4450                           ;timer.c: 78: TMR0H = val>>8;
  4451  000DD0  C004  FFD7         	movff	i2startTimer@val+1,4055	;volatile
  4452                           
  4453                           ;timer.c: 79: TMR0L = val;
  4454  000DD4  C003  FFD6         	movff	i2startTimer@val,4054	;volatile
  4455                           
  4456                           ;timer.c: 80: T0CON |= 1<<7;
  4457  000DD8  8ED5               	bsf	4053,7,c	;volatile
  4458                           
  4459                           ;timer.c: 81: break;
  4460  000DDA  0012               	return	
  4461  000DDC                     i2l347:
  4462                           
  4463                           ;timer.c: 83: TMR1H = val>>8;
  4464  000DDC  C004  FFCF         	movff	i2startTimer@val+1,4047	;volatile
  4465                           
  4466                           ;timer.c: 84: TMR1L = val;
  4467  000DE0  C003  FFCE         	movff	i2startTimer@val,4046	;volatile
  4468                           
  4469                           ;timer.c: 85: T1CON |= 1<<0;
  4470  000DE4  80CD               	bsf	4045,0,c	;volatile
  4471                           
  4472                           ;timer.c: 86: break;
  4473  000DE6  0012               	return	
  4474  000DE8                     i2l348:
  4475                           
  4476                           ;timer.c: 88: TMR3H = val>>8;
  4477  000DE8  C004  FFB3         	movff	i2startTimer@val+1,4019	;volatile
  4478                           
  4479                           ;timer.c: 89: TMR3L = val;
  4480  000DEC  C003  FFB2         	movff	i2startTimer@val,4018	;volatile
  4481                           
  4482                           ;timer.c: 90: T3CON |= 1<<0;
  4483  000DF0  80B1               	bsf	4017,0,c	;volatile
  4484                           
  4485                           ;timer.c: 91: }
  4486  000DF2  0012               	return	
  4487  000DF4                     i2l2477:
  4488  000DF4  C001  F007         	movff	i2startTimer@timer,??i2_startTimer
  4489  000DF8  C002  F008         	movff	i2startTimer@timer+1,??i2_startTimer+1
  4490                           
  4491                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4492                           ; Switch size 1, requested type "space"
  4493                           ; Number of cases is 1, Range of values is 0 to 0
  4494                           ; switch strategies available:
  4495                           ; Name         Instructions Cycles
  4496                           ; simple_byte            4     3 (average)
  4497                           ;	Chosen strategy is simple_byte
  4498  000DFC  5008               	movf	??i2_startTimer+1,w,c
  4499  000DFE  0A00               	xorlw	0	; case 0
  4500  000E00  A4D8               	btfss	status,2,c
  4501  000E02  0012               	return	
  4502                           
  4503                           ; Switch size 1, requested type "space"
  4504                           ; Number of cases is 3, Range of values is 0 to 3
  4505                           ; switch strategies available:
  4506                           ; Name         Instructions Cycles
  4507                           ; simple_byte           10     6 (average)
  4508                           ;	Chosen strategy is simple_byte
  4509  000E04  5007               	movf	??i2_startTimer,w,c
  4510  000E06  0A00               	xorlw	0	; case 0
  4511  000E08  B4D8               	btfsc	status,2,c
  4512  000E0A  D7E2               	goto	i2l345
  4513  000E0C  0A01               	xorlw	1	; case 1
  4514  000E0E  B4D8               	btfsc	status,2,c
  4515  000E10  D7E5               	goto	i2l347
  4516  000E12  0A02               	xorlw	2	; case 3
  4517  000E14  A4D8               	btfss	status,2,c
  4518  000E16  0012               	return	
  4519  000E18  D7E7               	goto	i2l348
  4520  000E1A                     __end_ofi2_startTimer:
  4521                           	opt stack 0
  4522                           pclatu	equ	0xFFB
  4523                           pclath	equ	0xFFA
  4524                           tblptru	equ	0xFF8
  4525                           tblptrh	equ	0xFF7
  4526                           tblptrl	equ	0xFF6
  4527                           tablat	equ	0xFF5
  4528                           prodh	equ	0xFF4
  4529                           prodl	equ	0xFF3
  4530                           intcon	equ	0xFF2
  4531                           intcon3	equ	0xFF0
  4532                           postinc0	equ	0xFEE
  4533                           fsr0h	equ	0xFEA
  4534                           fsr0l	equ	0xFE9
  4535                           wreg	equ	0xFE8
  4536                           postdec1	equ	0xFE5
  4537                           fsr1h	equ	0xFE2
  4538                           fsr1l	equ	0xFE1
  4539                           indf2	equ	0xFDF
  4540                           postinc2	equ	0xFDE
  4541                           postdec2	equ	0xFDD
  4542                           fsr2h	equ	0xFDA
  4543                           fsr2l	equ	0xFD9
  4544                           status	equ	0xFD8
  4545                           
  4546 ;; *************** function _digitalWrite *****************
  4547 ;; Defined at:
  4548 ;;		line 53 in file "iopin.c"
  4549 ;; Parameters:    Size  Location     Type
  4550 ;;  port            2    0[COMRAM] int 
  4551 ;;  pin             2    2[COMRAM] int 
  4552 ;;  val             2    4[COMRAM] int 
  4553 ;; Auto vars:     Size  Location     Type
  4554 ;;		None
  4555 ;; Return value:  Size  Location     Type
  4556 ;;                  1    wreg      void 
  4557 ;; Registers used:
  4558 ;;		wreg, status,2, status,0
  4559 ;; Tracked objects:
  4560 ;;		On entry : 0/0
  4561 ;;		On exit  : 0/0
  4562 ;;		Unchanged: 0/0
  4563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4564 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4566 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4567 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4568 ;;Total ram usage:        9 bytes
  4569 ;; Hardware stack levels used:    1
  4570 ;; This function calls:
  4571 ;;		Nothing
  4572 ;; This function is called by:
  4573 ;;		_servoInterruptService
  4574 ;; This function uses a non-reentrant model
  4575 ;;
  4576                           
  4577                           	psect	text22
  4578  000A64                     __ptext22:
  4579                           	opt stack 0
  4580  000A64                     _digitalWrite:
  4581                           	opt stack 25
  4582                           
  4583                           ;iopin.c: 54: pin = 1 << pin;
  4584                           
  4585                           ;incstack = 0
  4586  000A64  C003  F007         	movff	digitalWrite@pin,??_digitalWrite
  4587  000A68  0E01               	movlw	1
  4588  000A6A  6E08               	movwf	(??_digitalWrite+1)& (0+255),c
  4589  000A6C  0E00               	movlw	0
  4590  000A6E  6E09               	movwf	(??_digitalWrite+2)& (0+255),c
  4591  000A70  2A07               	incf	??_digitalWrite,f,c
  4592  000A72  D003               	goto	i2u106_44
  4593  000A74                     i2u106_45:
  4594  000A74  90D8               	bcf	status,0,c
  4595  000A76  3608               	rlcf	??_digitalWrite+1,f,c
  4596  000A78  3609               	rlcf	??_digitalWrite+2,f,c
  4597  000A7A                     i2u106_44:
  4598  000A7A  2E07               	decfsz	??_digitalWrite,f,c
  4599  000A7C  D7FB               	goto	i2u106_45
  4600  000A7E  C008  F003         	movff	??_digitalWrite+1,digitalWrite@pin
  4601  000A82  C009  F004         	movff	??_digitalWrite+2,digitalWrite@pin+1
  4602                           
  4603                           ;iopin.c: 55: if(val == 0){
  4604  000A86  5005               	movf	digitalWrite@val,w,c
  4605  000A88  1006               	iorwf	digitalWrite@val+1,w,c
  4606  000A8A  A4D8               	btfss	status,2,c
  4607  000A8C  D02B               	goto	i2l2269
  4608                           
  4609                           ;iopin.c: 56: pin ^= 0xff;
  4610  000A8E  0EFF               	movlw	255
  4611  000A90  1A03               	xorwf	digitalWrite@pin,f,c
  4612                           
  4613                           ;iopin.c: 57: }
  4614                           ;iopin.c: 59: switch(port){
  4615  000A92  D028               	goto	i2l2269
  4616  000A94                     i2l2245:
  4617  000A94  0405               	decf	digitalWrite@val,w,c
  4618  000A96  1006               	iorwf	digitalWrite@val+1,w,c
  4619  000A98  A4D8               	btfss	status,2,c
  4620  000A9A  D003               	goto	i2l2249
  4621  000A9C  5003               	movf	digitalWrite@pin,w,c
  4622  000A9E  1289               	iorwf	3977,f,c	;volatile
  4623  000AA0  0012               	return	
  4624  000AA2                     i2l2249:
  4625                           
  4626                           ;iopin.c: 61: else LATA &= pin;
  4627  000AA2  5003               	movf	digitalWrite@pin,w,c
  4628  000AA4  1689               	andwf	3977,f,c	;volatile
  4629                           
  4630                           ;iopin.c: 62: break;
  4631  000AA6  0012               	return	
  4632  000AA8                     i2l2251:
  4633  000AA8  0405               	decf	digitalWrite@val,w,c
  4634  000AAA  1006               	iorwf	digitalWrite@val+1,w,c
  4635  000AAC  A4D8               	btfss	status,2,c
  4636  000AAE  D003               	goto	i2l2255
  4637  000AB0  5003               	movf	digitalWrite@pin,w,c
  4638  000AB2  128A               	iorwf	3978,f,c	;volatile
  4639  000AB4  0012               	return	
  4640  000AB6                     i2l2255:
  4641                           
  4642                           ;iopin.c: 64: else LATB &= pin;
  4643  000AB6  5003               	movf	digitalWrite@pin,w,c
  4644  000AB8  168A               	andwf	3978,f,c	;volatile
  4645                           
  4646                           ;iopin.c: 65: break;
  4647  000ABA  0012               	return	
  4648  000ABC                     i2l2257:
  4649  000ABC  0405               	decf	digitalWrite@val,w,c
  4650  000ABE  1006               	iorwf	digitalWrite@val+1,w,c
  4651  000AC0  A4D8               	btfss	status,2,c
  4652  000AC2  D003               	goto	i2l2261
  4653  000AC4  5003               	movf	digitalWrite@pin,w,c
  4654  000AC6  128B               	iorwf	3979,f,c	;volatile
  4655  000AC8  0012               	return	
  4656  000ACA                     i2l2261:
  4657                           
  4658                           ;iopin.c: 67: else LATC &= pin;
  4659  000ACA  5003               	movf	digitalWrite@pin,w,c
  4660  000ACC  168B               	andwf	3979,f,c	;volatile
  4661                           
  4662                           ;iopin.c: 68: break;
  4663  000ACE  0012               	return	
  4664  000AD0                     i2l2263:
  4665  000AD0  0405               	decf	digitalWrite@val,w,c
  4666  000AD2  1006               	iorwf	digitalWrite@val+1,w,c
  4667  000AD4  A4D8               	btfss	status,2,c
  4668  000AD6  D003               	goto	i2l2267
  4669  000AD8  5003               	movf	digitalWrite@pin,w,c
  4670  000ADA  128C               	iorwf	3980,f,c	;volatile
  4671  000ADC  0012               	return	
  4672  000ADE                     i2l2267:
  4673                           
  4674                           ;iopin.c: 70: else LATD &= pin;
  4675  000ADE  5003               	movf	digitalWrite@pin,w,c
  4676  000AE0  168C               	andwf	3980,f,c	;volatile
  4677                           
  4678                           ;iopin.c: 71: }
  4679  000AE2  0012               	return	
  4680  000AE4                     i2l2269:
  4681  000AE4  C001  F007         	movff	digitalWrite@port,??_digitalWrite
  4682  000AE8  C002  F008         	movff	digitalWrite@port+1,??_digitalWrite+1
  4683                           
  4684                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4685                           ; Switch size 1, requested type "space"
  4686                           ; Number of cases is 1, Range of values is 0 to 0
  4687                           ; switch strategies available:
  4688                           ; Name         Instructions Cycles
  4689                           ; simple_byte            4     3 (average)
  4690                           ;	Chosen strategy is simple_byte
  4691  000AEC  5008               	movf	??_digitalWrite+1,w,c
  4692  000AEE  0A00               	xorlw	0	; case 0
  4693  000AF0  A4D8               	btfss	status,2,c
  4694  000AF2  0012               	return	
  4695                           
  4696                           ; Switch size 1, requested type "space"
  4697                           ; Number of cases is 4, Range of values is 0 to 3
  4698                           ; switch strategies available:
  4699                           ; Name         Instructions Cycles
  4700                           ; simple_byte           13     7 (average)
  4701                           ;	Chosen strategy is simple_byte
  4702  000AF4  5007               	movf	??_digitalWrite,w,c
  4703  000AF6  0A00               	xorlw	0	; case 0
  4704  000AF8  B4D8               	btfsc	status,2,c
  4705  000AFA  D7CC               	goto	i2l2245
  4706  000AFC  0A01               	xorlw	1	; case 1
  4707  000AFE  B4D8               	btfsc	status,2,c
  4708  000B00  D7D3               	goto	i2l2251
  4709  000B02  0A03               	xorlw	3	; case 2
  4710  000B04  B4D8               	btfsc	status,2,c
  4711  000B06  D7DA               	goto	i2l2257
  4712  000B08  0A01               	xorlw	1	; case 3
  4713  000B0A  A4D8               	btfss	status,2,c
  4714  000B0C  0012               	return	
  4715  000B0E  D7E0               	goto	i2l2263
  4716  000B10                     __end_of_digitalWrite:
  4717                           	opt stack 0
  4718                           pclatu	equ	0xFFB
  4719                           pclath	equ	0xFFA
  4720                           tblptru	equ	0xFF8
  4721                           tblptrh	equ	0xFF7
  4722                           tblptrl	equ	0xFF6
  4723                           tablat	equ	0xFF5
  4724                           prodh	equ	0xFF4
  4725                           prodl	equ	0xFF3
  4726                           intcon	equ	0xFF2
  4727                           intcon3	equ	0xFF0
  4728                           postinc0	equ	0xFEE
  4729                           fsr0h	equ	0xFEA
  4730                           fsr0l	equ	0xFE9
  4731                           wreg	equ	0xFE8
  4732                           postdec1	equ	0xFE5
  4733                           fsr1h	equ	0xFE2
  4734                           fsr1l	equ	0xFE1
  4735                           indf2	equ	0xFDF
  4736                           postinc2	equ	0xFDE
  4737                           postdec2	equ	0xFDD
  4738                           fsr2h	equ	0xFDA
  4739                           fsr2l	equ	0xFD9
  4740                           status	equ	0xFD8
  4741                           pclatu	equ	0xFFB
  4742                           pclath	equ	0xFFA
  4743                           tblptru	equ	0xFF8
  4744                           tblptrh	equ	0xFF7
  4745                           tblptrl	equ	0xFF6
  4746                           tablat	equ	0xFF5
  4747                           prodh	equ	0xFF4
  4748                           prodl	equ	0xFF3
  4749                           intcon	equ	0xFF2
  4750                           intcon3	equ	0xFF0
  4751                           postinc0	equ	0xFEE
  4752                           fsr0h	equ	0xFEA
  4753                           fsr0l	equ	0xFE9
  4754                           wreg	equ	0xFE8
  4755                           postdec1	equ	0xFE5
  4756                           fsr1h	equ	0xFE2
  4757                           fsr1l	equ	0xFE1
  4758                           indf2	equ	0xFDF
  4759                           postinc2	equ	0xFDE
  4760                           postdec2	equ	0xFDD
  4761                           fsr2h	equ	0xFDA
  4762                           fsr2l	equ	0xFD9
  4763                           status	equ	0xFD8
  4764                           
  4765                           	psect	rparam
  4766  0000                     pclatu	equ	0xFFB
  4767                           pclath	equ	0xFFA
  4768                           tblptru	equ	0xFF8
  4769                           tblptrh	equ	0xFF7
  4770                           tblptrl	equ	0xFF6
  4771                           tablat	equ	0xFF5
  4772                           prodh	equ	0xFF4
  4773                           prodl	equ	0xFF3
  4774                           intcon	equ	0xFF2
  4775                           intcon3	equ	0xFF0
  4776                           postinc0	equ	0xFEE
  4777                           fsr0h	equ	0xFEA
  4778                           fsr0l	equ	0xFE9
  4779                           wreg	equ	0xFE8
  4780                           postdec1	equ	0xFE5
  4781                           fsr1h	equ	0xFE2
  4782                           fsr1l	equ	0xFE1
  4783                           indf2	equ	0xFDF
  4784                           postinc2	equ	0xFDE
  4785                           postdec2	equ	0xFDD
  4786                           fsr2h	equ	0xFDA
  4787                           fsr2l	equ	0xFD9
  4788                           status	equ	0xFD8
  4789                           
  4790                           	psect	temp
  4791  00007D                     btemp:
  4792                           	opt stack 0
  4793  00007D                     	ds	1
  4794  0000                     int$flags	set	btemp
  4795                           pclatu	equ	0xFFB
  4796                           pclath	equ	0xFFA
  4797                           tblptru	equ	0xFF8
  4798                           tblptrh	equ	0xFF7
  4799                           tblptrl	equ	0xFF6
  4800                           tablat	equ	0xFF5
  4801                           prodh	equ	0xFF4
  4802                           prodl	equ	0xFF3
  4803                           intcon	equ	0xFF2
  4804                           intcon3	equ	0xFF0
  4805                           postinc0	equ	0xFEE
  4806                           fsr0h	equ	0xFEA
  4807                           fsr0l	equ	0xFE9
  4808                           wreg	equ	0xFE8
  4809                           postdec1	equ	0xFE5
  4810                           fsr1h	equ	0xFE2
  4811                           fsr1l	equ	0xFE1
  4812                           indf2	equ	0xFDF
  4813                           postinc2	equ	0xFDE
  4814                           postdec2	equ	0xFDD
  4815                           fsr2h	equ	0xFDA
  4816                           fsr2l	equ	0xFD9
  4817                           status	equ	0xFD8


Data Sizes:
    Strings     253
    Constant    96
    Data        62
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    116     124
    BANK0           128     14      70
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_15(CODE[17]), STR_14(CODE[18]), STR_13(CODE[17]), STR_12(CODE[18]), 
		 -> STR_11(CODE[17]), STR_10(CODE[19]), STR_9(CODE[17]), STR_8(CODE[18]), 
		 -> STR_7(CODE[17]), STR_6(CODE[18]), STR_5(CODE[17]), STR_4(CODE[18]), 
		 -> STR_3(CODE[8]), STR_2(CODE[9]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__getTime	PTR int  size(2) Largest target is 7
		 -> getTime@time(COMRAM[7]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _service in COMRAM

    _service->_setAngle
    _setAngle->_printf
    _printf->___llmod
    _lcdNewline->i2_lcdInst
    ___llmod->___lldiv
    _lcdClear->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    ___aldiv->___lmul
    _servoInterruptService->_digitalWrite

Critical Paths under _main in BANK0

    _main->_initServo
    _initServo->_startTimer
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     847
                            _initLCD
                          _initServo
                           _pinSetup
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initServo                                            6     0      6     712
                                              8 BANK0      6     0      6
                          _initTimer
                         _startTimer
 ---------------------------------------------------------------------------------
 (2) _startTimer                                           8     2      6     434
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _initTimer                                            4     2      2      86
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              4 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              2     2      0     135
                                              2 BANK0      2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _service                                             15    15      0    6192
                                            101 COMRAM    15    15      0
              _servoInterruptService
                           _setAngle
 ---------------------------------------------------------------------------------
 (5) _setAngle                                            56    50      6    5017
                                             45 COMRAM    56    50      6
                            ___aldiv
                             ___lmul
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (6) _printf                                              32    22     10    2859
                                             22 COMRAM    23    13     10
                            ___lldiv
                            ___llmod
                              _putch
 ---------------------------------------------------------------------------------
 (7) _putch                                                1     1      0     292
                                              4 COMRAM     1     1      0
                         _lcdNewline
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) _lcdNewline                                           0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (7) ___llmod                                              9     1      8     287
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (7) ___lldiv                                             13     5      8     546
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (6) _lcdClear                                             0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (9) i2_lcdInst                                            2     2      0     135
                                              2 COMRAM     2     2      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     322
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (6) ___aldiv                                             14     6      8     428
                                             12 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _servoInterruptService                               14    14      0    1042
                                              9 COMRAM    14    14      0
                       _digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (6) i2_startTimer                                         8     2      6     258
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (6) _digitalWrite                                         9     3      6     716
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _startTimer
   _pinSetup

 _service (ROOT)
   _servoInterruptService
     _digitalWrite
     i2_startTimer
   _setAngle
     ___aldiv
       ___lmul (ARG)
     ___lmul
     _lcdClear
       i2_lcdInst
         i2_lcdNibble
     _printf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       _putch
         _lcdNewline
           i2_lcdInst
             i2_lcdNibble
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      E      46       5       54.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     74      7C       1       98.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C2      34        0.0%
DATA                 0      0      C2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Mar 12 00:39:16 2017

                   __CFG_BORV$3 000000                    __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000  
                  __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000                     __CFG_OSC$HS 000000  
                           l101 0F7A                             l345 0D80                             l338 0E5E  
                           l347 0D8C                             l348 0D98                    __CFG_CPB$OFF 000000  
                           _PEN 007E2A                    __CFG_CPD$OFF 000000                             _SEN 007E28  
                           _pin 00A8                             wreg 000FE8                    __CFG_LVP$OFF 000000  
                  __CFG_WDT$OFF 000000                            l2307 0DA4                            l2283 0E26  
                          l2277 0E1C                            l2293 0E36                            l2287 0E2E  
                          _EEIF 007D0C                            STR_1 FFF6                            STR_2 FFE5  
                          STR_3 FFEE                            STR_4 FF26                            STR_5 FFD4  
                          STR_6 FF14                            STR_7 FFA1                            STR_8 FF38  
                          STR_9 FF90                            _LATA 000F89                            _LATB 000F8A  
                          _LATC 000F8B                            _LATD 000F8C                            _LATE 000F8D  
                          u1807 0BC0                            u1817 0BF0                            u1827 0BFE  
                          u1757 0E6C                            u1767 0EA2                            u1777 0F84  
                          u1787 0F9A                            _PEIE 007F96                            u1797 0BB2  
                          _RCEN 007E2B                            _RSEN 007E29                            _main 0F50  
                          _curr 007B                            _keys FEE9                            _port 00B0  
                          fsr0h 000FEA                            fsr1h 000FE2                            fsr2h 000FDA  
                          fsr0l 000FE9                            indf2 000FDF                            fsr1l 000FE1  
                          fsr2l 000FD9                            btemp 007D                            prodh 000FF4  
                          prodl 000FF3                            start 000E                   __CFG_IESO$OFF 000000  
                 __CFG_MCLRE$ON 000000                    ___param_bank 000000                     i2_lcdNibble 0C70  
          __end_ofi2_startTimer 0E1A                 __end_of___aldiv 0A64                           ?_main 0001  
                         _ACKEN 007E2C                           _ACKDT 007E2D                           _EEADR 000FA9  
                         STR_10 FF01                           STR_11 FFB2                           STR_12 FF4A  
                         STR_13 FF7F                           STR_14 FF5C                           STR_15 FFC3  
                         STR_16 FF6E         ??_servoInterruptService 000A                 __end_of___lldiv 0B92  
                         _T0CON 000FD5                           _T1CON 000FCD                 __end_of___llmod 0C70  
                         _T3CON 000FB1                           i2l114 095C                           i2l135 0FB6  
                         i2l345 0DD0                           i2l347 0DDC                           i2l348 0DE8  
                         i2l545 03B4                           i2l549 0414                           i2l925 0B80  
                         i2l935 0C5E                           _TMR0H 000FD7                           _TMR1H 000FCF  
                         _TMR0L 000FD6                           _TMR3H 000FB3                           _TMR1L 000FCE  
                         _TMR3L 000FB2                           _PORTA 000F80                           _PORTB 000F81  
                         _PORTC 000F82                           _PORTD 000F83                           _TRISA 000F92  
                         _TRISB 000F93                           _TRISC 000F94                           _TRISD 000F95  
                         _TRISE 000F96                   __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000  
                 __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000             ___lmul@multiplicand 0005  
                 __CFG_WRT3$OFF 000000                 __end_of_lcdInst 0FA6                  __CFG_EBTR0$OFF 000000  
                __CFG_FCMEN$OFF 000000          servoInterruptService@i 0016                  __CFG_EBTR1$OFF 000000  
                __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000                   __CFG_WRTB$OFF 000000  
                 __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000                 __end_of_initLCD 0EAE  
                __CFG_EBTRB$OFF 000000                           _angle 0075                 __end_of_dpowers FEC9  
                         _order 00A0                           _pulse 0080                           _putch 0FA6  
                         pclath 000FFA                           tablat 000FF5                 __end_of_service 0998  
                         status 000FD8                  __CFG_PBADEN$ON 000000            __end_of_digitalWrite 0B10  
               __initialization 0D2C              __size_ofi2_lcdInst 0022                    __end_of_main 0F7C  
                  __end_of_keys FEFA                          ??_main 00C6                   __activetblptr 000002  
                        _ADCON0 000FC2                          _ADCON1 000FC1                          _ADCON2 000FC0  
              ___llmod@dividend 000E                          _ADRESH 000FC4                          _EEADRH 000FAA  
                        _ADRESL 000FC3                          _EEDATA 000FA8                          _EECON1 000FA6  
                        _EECON2 000FA7                 i2lcdNibble@data 0002                          ?_putch 0001  
               i2lcdNibble@temp 0001                          _INT1IF 007F80                          i2l2201 0B3E  
                        i2l2211 0B72                          i2l2203 0B42                          i2l2221 0C28  
                        i2l2223 0C2C                          i2l2401 0578                          i2l2321 0350  
                        i2l2251 0AA8                          i2l2227 0C50                          i2l2219 0C1C  
                        i2l2411 05F8                          i2l2331 0372                          i2l2323 0356  
                        i2l2261 0ACA                          i2l2245 0A94                          i2l2421 0CFA  
                        i2l2325 035A                          i2l2317 0340                          i2l2413 0608  
                        i2l2263 0AD0                          i2l2255 0AB6                          i2l2407 05E2  
                        i2l2343 03D8                          i2l2327 035E                          i2l2335 037A  
                        i2l2257 0ABC                          i2l2249 0AA2                          i2l2433 09B4  
                        i2l2417 0CE6                          i2l2409 05F2                          i2l2361 045A  
                        i2l2267 0ADE                          i2l2523 068C                          i2l2363 045E  
                        i2l2269 0AE4                          i2l2445 09EE                          i2l2461 0A3C  
                        i2l2357 0434                          i2l2541 006A                          i2l2701 08CC  
                        i2l2519 0648                          i2l2527 071A                          i2l2447 09FA  
                        i2l2439 09CC                          i2l2199 0B32                          i2l2375 0496  
                        i2l2391 04D2                          i2l2465 0A52                          i2l2457 0A2E  
                        i2l2449 09FE                          i2l2377 049A                          i2l2393 04E2  
                        i2l2545 0090                          i2l2537 004C                          i2l2713 0938  
                        i2l2705 08F0                          i2l2555 015A                          i2l2547 00B2  
                        i2l2477 0DF4                          i2l2397 04F4                          i2l2557 015E  
                        i2l2565 0194                          i2l2709 0914                          i2l2399 0500  
                        i2l2575 02F0                          i2l2569 01BA                          i2l2697 08AA  
                        _TMR0IE 007F95                          _TMR0IF 007F92                          _TMR1IE 007CE8  
                        _TMR3IE 007D01                          _SSPADD 000FC8                          _TRISC3 007CA3  
                        _TRISC4 007CA4                          _SSPBUF 000FC9                __end_of_lcdClear 0FFA  
                   initServo@pi 00C4                     initServo@po 00C2                  __CFG_XINST$OFF 000000  
                        ___lmul 0CD6                       ??___aldiv 0015                  __CFG_STVREN$ON 000000  
                     ??___lldiv 0009                       ??___llmod 0016                          _nServo 0079  
                     ??_lcdInst 00BA                          _printf 0336                __end_of_pinSetup 0EE8  
              __end_of_setAngle 0336                   setAngle@a_503 005A                   setAngle@a_508 0062  
                     ??_initLCD 00BC                    __pdataCOMRAM 0075                    __mediumconst FEA0  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
                     ??_service 0066               __end_ofi2_lcdInst 0FEA                      __accesstop 0080  
       __end_of__initialization 0D70                   ___rparam_used 000001           __size_ofi2_startTimer 004C  
          __end_of_happynewyear FF01                  __pcstackCOMRAM 0001                    __pidataBANK0 0EE8  
                 __end_of_putch 0FC8              __size_of_lcdNibble 0078                     setAngle@ind 0058  
                       ??_putch 0005                    i2_startTimer 0DCE           __size_of_digitalWrite 00AC  
            __size_of_initTimer 004A              __size_of_initServo 0030                         ?___lmul 0001  
                  ?i2_lcdNibble 0001                  ___lmul@product 0009                      _lcdNewline 0FEA  
                       ?_printf 0017  __size_of_servoInterruptService 021A   __end_of_servoInterruptService 083C  
             i2startTimer@timer 0001                       ?_lcdClear 0001                    _digitalWrite 0A64  
                       _SSPCON1 000FC6                         _SSPCON2 000FC5                         _SSPSTAT 000FC7  
                     ?_pinSetup 0001                       ?_setAngle 002E               __end_of_lcdNibble 0C0A  
                       __Hparam 0000                         __Lparam 0000                         ___aldiv 0998  
               __size_of___lmul 0056                         ___lldiv 0B10                         ___llmod 0C0A  
                       __pcinit 0D2C                         __ramtop 1000                         _lcdInst 0F7C  
                       __ptext0 0F50                         __ptext1 0EAE                         __ptext2 0F20  
                       __ptext3 0D7E                         __ptext4 0E1A                         __ptext5 0E64  
                       __ptext6 0F7C                         __ptext7 0B92                         __ptext9 0012  
               __size_of_printf 02EC                   startTimer@val 00BA                         _initLCD 0E64  
             __end_of_hexpowers FEE9               __end_of_initTimer 0E64               __end_of_initServo 0F50  
                       _dpowers FEA1                ___aldiv@dividend 000D                      ??_lcdClear 0005  
                       _service 0008                  __pintcode_body 083C            end_of_initialization 0D70  
                 __Lmediumconst FEA0                         int_func 083C                      ??_pinSetup 00B8  
                    ??_setAngle 0034                 ___lldiv@divisor 0005                 ___lldiv@counter 000D  
                       printf@c 002D                         printf@f 0017                ___aldiv@quotient 0017  
                       postdec1 000FE5                         postdec2 000FDD                         postinc0 000FEE  
                       postinc2 000FDE                     ?_lcdNewline 0001                       _PORTBbits 000F81  
                  _happynewyear FEFA                      _startTimer 0D7E                       i2_lcdInst 0FC8  
                __end_of___lmul 0D2C            __size_ofi2_lcdNibble 0066                   __pidataCOMRAM 0FFA  
                 i2lcdInst@data 0004                  __end_of_printf 0622             start_initialization 0D2C  
                initTimer@timer 00B8                  initServo@timer 00C0                      ?i2_lcdInst 0001  
           __size_of_lcdNewline 0008                 ___llmod@divisor 0012                 ___llmod@counter 0016  
                      ??___lmul 0009                     __pdataBANK0 0080                __CFG_LPT1OSC$OFF 000000  
                  setAngle@seen 0040                    setAngle@prev 005E                    setAngle@puls 0030  
                      ??_printf 0021                     __pbssCOMRAM 007B                   __pcstackBANK0 00B8  
                   ?_startTimer 00B8               __size_of_lcdClear 0008                      setAngle@id 002E  
             __CFG_CCP2MX$PORTC 000000               __size_of_pinSetup 003A               __size_of_setAngle 0324  
                     __pintcode 0008                   __pmediumconst FEA0                       _lcdNibble 0B92  
                      ?___aldiv 000D                        ?___lldiv 0001                        ?___llmod 000E  
                      ?_lcdInst 0001                        ?_initLCD 0001                 startTimer@timer 00B8  
                      ?_service 0001                       _hexpowers FEC9                       _initTimer 0E1A  
                     _initServo 0F20           _servoInterruptService 0622                  __size_of_putch 0022  
               ___aldiv@divisor 0011                     ??i2_lcdInst 0003                 ___aldiv@counter 0015  
                      _LATDbits 000F8C                        i2u106_44 0A7A                        i2u106_45 0A74  
                      i2u183_47 0FBA                        i2u184_47 0FCE                        i2u185_47 0FE0  
                      i2u186_47 0C88                        i2u187_47 0C96                        i2u188_47 0CBC  
                      i2u189_47 0CCA                __CFG_WDTPS$32768 000000                      ?_lcdNibble 0001  
                    service@key 0074                    ??_lcdNewline 0005             __size_of_startTimer 0050  
                 lcdNibble@data 00B9                      printf@flag 002C                   lcdNibble@temp 00B8  
                    printf@prec 0024                      ?_initTimer 00B8                      ?_initServo 00C0  
             ___lmul@multiplier 0001                       copy_data0 0D40                       copy_data1 0D60  
            __end_of_lcdNewline 0FF2                        __Hrparam 0000                        __Lrparam 0000  
            __CFG_BOREN$SBORDIS 000000                __size_of___aldiv 00CC                __size_of___lldiv 0082  
              __size_of___llmod 0066                __size_of_lcdInst 002A                       setAngle@a 0060  
                     setAngle@b 0064                __size_of_initLCD 004A          ?_servoInterruptService 0001  
                      _lcdClear 0FF2                        __ptext10 0336                        __ptext11 0FA6  
                      __ptext20 0622                        __ptext12 0FEA                        __ptext21 0DCE  
                      __ptext13 0C0A                        __ptext22 0A64                        __ptext14 0B10  
                      __ptext15 0FF2                        __ptext16 0FC8                        __ptext17 0C70  
                      __ptext18 0CD6                        __ptext19 0998                __size_of_service 0990  
               i2startTimer@val 0003                   ?i2_startTimer 0001                   __size_of_main 002C  
                      _pinSetup 0EAE                        _setAngle 0012                   ??i2_lcdNibble 0001  
                      _sequence 0090                     ??_lcdNibble 00B8                setAngle@smallest 0054  
                      int$flags 007D                       printf@idx 0023                       printf@val 0028  
                     putch@data 0005                      _INTCONbits 000FF2                   ?_digitalWrite 0001  
                   ??_initTimer 00BA                     ??_initServo 00C6                  ??i2_startTimer 0007  
                  ??_startTimer 00BE                        intlevel2 0000                ___lldiv@dividend 0001  
                      printf@ap 0026                     lcdInst@data 00BB              __end_of_startTimer 0DCE  
           __end_ofi2_lcdNibble 0CD6                digitalWrite@port 0001                ___lldiv@quotient 0009  
                ??_digitalWrite 0007            setAngle@smallest_ind 005C                    ___aldiv@sign 0016  
               digitalWrite@pin 0003                 digitalWrite@val 0005  
