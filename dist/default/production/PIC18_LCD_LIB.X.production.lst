

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Mar 12 23:15:20 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    51                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    66                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    67                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    68  0000                     
    69                           ; Version 1.40
    70                           ; Generated 01/12/2016 GMT
    71                           ; 
    72                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    73                           ; All rights reserved.
    74                           ; 
    75                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    76                           ; 
    77                           ; Redistribution and use in source and binary forms, with or without modification, are
    78                           ; permitted provided that the following conditions are met:
    79                           ; 
    80                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    81                           ;        conditions and the following disclaimer.
    82                           ; 
    83                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    84                           ;        of conditions and the following disclaimer in the documentation and/or other
    85                           ;        materials provided with the distribution.
    86                           ; 
    87                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    88                           ;        software without specific prior written permission.
    89                           ; 
    90                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    91                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    92                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    93                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    94                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    95                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    96                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    97                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    98                           ; 
    99                           ; 
   100                           ; Code-generator required, PIC18F4620 Definitions
   101                           ; 
   102                           ; SFR Addresses
   103  0000                     
   104                           	psect	idataCOMRAM
   105  001FD6                     __pidataCOMRAM:
   106                           	opt stack 0
   107                           
   108                           ;initializer for _redirectAngle_9V
   109  001FD6  0064               	dw	100
   110                           
   111                           ;initializer for _redirectAngle_AA
   112  001FD8  003C               	dw	60
   113                           
   114                           ;initializer for _redirectAngle_C
   115  001FDA  0050               	dw	80
   116                           
   117                           ;initializer for _redirectAngle_OTHER
   118  001FDC  0078               	dw	120
   119                           
   120                           	psect	idataBANK0
   121  001FBA                     __pidataBANK0:
   122                           	opt stack 0
   123                           
   124                           ;initializer for _padServo
   125  001FBA  0001               	dw	1
   126  001FBC  0002               	dw	2
   127  001FBE  0002               	dw	2
   128                           
   129                           ;initializer for _cylinderMotor
   130  001FC0  0002               	dw	2
   131  001FC2  0000               	dw	0
   132                           
   133                           ;initializer for _padAngle_CATCH
   134  001FC4  005A               	dw	90
   135                           
   136                           ;initializer for _padAngle_CLOSE
   137  001FC6  0046               	dw	70
   138                           
   139                           ;initializer for _padAngle_OPEN
   140  001FC8  00B4               	dw	180
   141                           
   142                           	psect	idataBANK1
   143  001FCA                     __pidataBANK1:
   144                           	opt stack 0
   145                           
   146                           ;initializer for _conveyorServo
   147  001FCA  0000               	dw	0
   148  001FCC  0002               	dw	2
   149  001FCE  0001               	dw	1
   150                           
   151                           ;initializer for _redirectingServo
   152  001FD0  0003               	dw	3
   153  001FD2  0002               	dw	2
   154  001FD4  0003               	dw	3
   155                           
   156                           	psect	mediumconst
   157  00FED2                     __pmediumconst:
   158                           	opt stack 0
   159  00FED2  00                 	db	0
   160  00FED3                     _keys:
   161                           	opt stack 0
   162  00FED3  31                 	db	49
   163  00FED4  32                 	db	50
   164  00FED5  33                 	db	51
   165  00FED6  41                 	db	65
   166  00FED7  34                 	db	52
   167  00FED8  35                 	db	53
   168  00FED9  36                 	db	54
   169  00FEDA  42                 	db	66
   170  00FEDB  37                 	db	55
   171  00FEDC  38                 	db	56
   172  00FEDD  39                 	db	57
   173  00FEDE  43                 	db	67
   174  00FEDF  2A                 	db	42
   175  00FEE0  30                 	db	48
   176  00FEE1  23                 	db	35
   177  00FEE2  44                 	db	68
   178  00FEE3  00                 	db	0
   179  00FEE4                     __end_of_keys:
   180                           	opt stack 0
   181  00FEE4                     _hexpowers:
   182                           	opt stack 0
   183  00FEE4  0001               	dw	1
   184  00FEE6  0010               	dw	16
   185  00FEE8  0100               	dw	256
   186  00FEEA  1000               	dw	4096
   187  00FEEC                     __end_of_hexpowers:
   188                           	opt stack 0
   189  00FEEC                     _happynewyear:
   190                           	opt stack 0
   191  00FEEC  45                 	db	69
   192  00FEED  59                 	db	89
   193  00FEEE  23                 	db	35
   194  00FEEF  07                 	db	7
   195  00FEF0  31                 	db	49
   196  00FEF1  12                 	db	18
   197  00FEF2  16                 	db	22
   198  00FEF3                     __end_of_happynewyear:
   199                           	opt stack 0
   200  0000                     _ADCON0	set	4034
   201  0000                     _ADCON1	set	4033
   202  0000                     _ADCON2	set	4032
   203  0000                     _ADRESH	set	4036
   204  0000                     _ADRESL	set	4035
   205  0000                     _EEADR	set	4009
   206  0000                     _EEADRH	set	4010
   207  0000                     _EECON1	set	4006
   208  0000                     _EECON2	set	4007
   209  0000                     _EEDATA	set	4008
   210  0000                     _INTCONbits	set	4082
   211  0000                     _LATA	set	3977
   212  0000                     _LATB	set	3978
   213  0000                     _LATC	set	3979
   214  0000                     _LATD	set	3980
   215  0000                     _LATDbits	set	3980
   216  0000                     _LATE	set	3981
   217  0000                     _PORTA	set	3968
   218  0000                     _PORTB	set	3969
   219  0000                     _PORTBbits	set	3969
   220  0000                     _PORTC	set	3970
   221  0000                     _PORTD	set	3971
   222  0000                     _SSPADD	set	4040
   223  0000                     _SSPBUF	set	4041
   224  0000                     _SSPCON1	set	4038
   225  0000                     _SSPCON2	set	4037
   226  0000                     _SSPSTAT	set	4039
   227  0000                     _T0CON	set	4053
   228  0000                     _T1CON	set	4045
   229  0000                     _T2CON	set	4042
   230  0000                     _T3CON	set	4017
   231  0000                     _TMR0H	set	4055
   232  0000                     _TMR0L	set	4054
   233  0000                     _TMR1H	set	4047
   234  0000                     _TMR1L	set	4046
   235  0000                     _TMR3H	set	4019
   236  0000                     _TMR3L	set	4018
   237  0000                     _TRISA	set	3986
   238  0000                     _TRISB	set	3987
   239  0000                     _TRISC	set	3988
   240  0000                     _TRISD	set	3989
   241  0000                     _TRISE	set	3990
   242  0000                     _ACKDT	set	32301
   243  0000                     _ACKEN	set	32300
   244  0000                     _EEIF	set	32012
   245  0000                     _INT0IE	set	32660
   246  0000                     _INT0IF	set	32657
   247  0000                     _INT1IE	set	32643
   248  0000                     _INT1IF	set	32640
   249  0000                     _PEIE	set	32662
   250  0000                     _PEN	set	32298
   251  0000                     _RCEN	set	32299
   252  0000                     _RSEN	set	32297
   253  0000                     _SEN	set	32296
   254  0000                     _TMR0IE	set	32661
   255  0000                     _TMR0IF	set	32658
   256  0000                     _TMR1IE	set	31976
   257  0000                     _TMR1IF	set	31984
   258  0000                     _TMR2IF	set	31985
   259  0000                     _TMR3IE	set	32001
   260  0000                     _TMR3IF	set	32009
   261  0000                     _TRISC3	set	31907
   262  0000                     _TRISC4	set	31908
   263  00FEF3                     STR_12:
   264  00FEF3  25                 	db	37
   265  00FEF4  63                 	db	99	;'c'
   266  00FEF5  29                 	db	41
   267  00FEF6  20                 	db	32
   268  00FEF7  74                 	db	116	;'t'
   269  00FEF8  69                 	db	105	;'i'
   270  00FEF9  6D                 	db	109	;'m'
   271  00FEFA  65                 	db	101	;'e'
   272  00FEFB  20                 	db	32
   273  00FEFC  20                 	db	32
   274  00FEFD  3C                 	db	60	;'<'
   275  00FEFE  41                 	db	65	;'A'
   276  00FEFF  20                 	db	32
   277  00FF00  20                 	db	32
   278  00FF01  20                 	db	32
   279  00FF02  20                 	db	32
   280  00FF03  20                 	db	32
   281  00FF04  0A                 	db	10
   282  00FF05  00                 	db	0
   283  00FF06                     STR_8:
   284  00FF06  73                 	db	115	;'s'
   285  00FF07  74                 	db	116	;'t'
   286  00FF08  61                 	db	97	;'a'
   287  00FF09  72                 	db	114	;'r'
   288  00FF0A  74                 	db	116	;'t'
   289  00FF0B  20                 	db	32
   290  00FF0C  20                 	db	32
   291  00FF0D  20                 	db	32
   292  00FF0E  3C                 	db	60	;'<'
   293  00FF0F  42                 	db	66	;'B'
   294  00FF10  20                 	db	32
   295  00FF11  20                 	db	32
   296  00FF12  20                 	db	32
   297  00FF13  20                 	db	32
   298  00FF14  20                 	db	32
   299  00FF15  20                 	db	32
   300  00FF16  0A                 	db	10
   301  00FF17  00                 	db	0
   302  00FF18                     STR_6:
   303  00FF18  20                 	db	32
   304  00FF19  20                 	db	32
   305  00FF1A  68                 	db	104	;'h'
   306  00FF1B  68                 	db	104	;'h'
   307  00FF1C  3A                 	db	58	;':'
   308  00FF1D  6D                 	db	109	;'m'
   309  00FF1E  6D                 	db	109	;'m'
   310  00FF1F  3A                 	db	58	;':'
   311  00FF20  73                 	db	115	;'s'
   312  00FF21  73                 	db	115	;'s'
   313  00FF22  20                 	db	32
   314  00FF23  20                 	db	32
   315  00FF24  20                 	db	32
   316  00FF25  20                 	db	32
   317  00FF26  20                 	db	32
   318  00FF27  20                 	db	32
   319  00FF28  0A                 	db	10
   320  00FF29  00                 	db	0
   321  00FF2A                     STR_10:
   322  00FF2A  73                 	db	115	;'s'
   323  00FF2B  65                 	db	101	;'e'
   324  00FF2C  6C                 	db	108	;'l'
   325  00FF2D  65                 	db	101	;'e'
   326  00FF2E  63                 	db	99	;'c'
   327  00FF2F  74                 	db	116	;'t'
   328  00FF30  20                 	db	32
   329  00FF31  72                 	db	114	;'r'
   330  00FF32  75                 	db	117	;'u'
   331  00FF33  6E                 	db	110	;'n'
   332  00FF34  3A                 	db	58	;':'
   333  00FF35  20                 	db	32
   334  00FF36  20                 	db	32
   335  00FF37  20                 	db	32
   336  00FF38  20                 	db	32
   337  00FF39  20                 	db	32
   338  00FF3A  0A                 	db	10
   339  00FF3B  00                 	db	0
   340  00FF3C                     STR_14:
   341  00FF3C  74                 	db	116	;'t'
   342  00FF3D  69                 	db	105	;'i'
   343  00FF3E  6D                 	db	109	;'m'
   344  00FF3F  65                 	db	101	;'e'
   345  00FF40  3A                 	db	58	;':'
   346  00FF41  20                 	db	32
   347  00FF42  6E                 	db	110	;'n'
   348  00FF43  6E                 	db	110	;'n'
   349  00FF44  6E                 	db	110	;'n'
   350  00FF45  20                 	db	32
   351  00FF46  73                 	db	115	;'s'
   352  00FF47  65                 	db	101	;'e'
   353  00FF48  63                 	db	99	;'c'
   354  00FF49  20                 	db	32
   355  00FF4A  20                 	db	32
   356  00FF4B  20                 	db	32
   357  00FF4C  0A                 	db	10
   358  00FF4D  00                 	db	0
   359  00FF4E                     STR_16:
   360  00FF4E  5B                 	db	91	;'['
   361  00FF4F  41                 	db	65	;'A'
   362  00FF50  41                 	db	65	;'A'
   363  00FF51  2C                 	db	44
   364  00FF52  39                 	db	57	;'9'
   365  00FF53  56                 	db	86	;'V'
   366  00FF54  2C                 	db	44
   367  00FF55  43                 	db	67	;'C'
   368  00FF56  2C                 	db	44
   369  00FF57  6F                 	db	111	;'o'
   370  00FF58  74                 	db	116	;'t'
   371  00FF59  68                 	db	104	;'h'
   372  00FF5A  65                 	db	101	;'e'
   373  00FF5B  72                 	db	114	;'r'
   374  00FF5C  5D                 	db	93	;']'
   375  00FF5D  20                 	db	32
   376  00FF5E  0A                 	db	10
   377  00FF5F  00                 	db	0
   378  00FF60                     STR_18:
   379  00FF60  30                 	db	48	;'0'
   380  00FF61  31                 	db	49	;'1'
   381  00FF62  32                 	db	50	;'2'
   382  00FF63  33                 	db	51	;'3'
   383  00FF64  34                 	db	52	;'4'
   384  00FF65  35                 	db	53	;'5'
   385  00FF66  36                 	db	54	;'6'
   386  00FF67  37                 	db	55	;'7'
   387  00FF68  38                 	db	56	;'8'
   388  00FF69  39                 	db	57	;'9'
   389  00FF6A  61                 	db	97	;'a'
   390  00FF6B  62                 	db	98	;'b'
   391  00FF6C  63                 	db	99	;'c'
   392  00FF6D  64                 	db	100	;'d'
   393  00FF6E  65                 	db	101	;'e'
   394  00FF6F  66                 	db	102	;'f'
   395  00FF70  00                 	db	0
   396  00FF71                     STR_15:
   397  00FF71  20                 	db	32
   398  00FF72  20                 	db	32
   399  00FF73  20                 	db	32
   400  00FF74  20                 	db	32
   401  00FF75  20                 	db	32
   402  00FF76  20                 	db	32
   403  00FF77  20                 	db	32
   404  00FF78  20                 	db	32
   405  00FF79  20                 	db	32
   406  00FF7A  20                 	db	32
   407  00FF7B  20                 	db	32
   408  00FF7C  20                 	db	32
   409  00FF7D  20                 	db	32
   410  00FF7E  20                 	db	32
   411  00FF7F  2A                 	db	42
   412  00FF80  3E                 	db	62	;'>'
   413  00FF81  00                 	db	0
   414  00FF82                     STR_11:
   415  00FF82  5B                 	db	91	;'['
   416  00FF83  31                 	db	49	;'1'
   417  00FF84  2C                 	db	44
   418  00FF85  32                 	db	50	;'2'
   419  00FF86  2C                 	db	44
   420  00FF87  33                 	db	51	;'3'
   421  00FF88  2C                 	db	44
   422  00FF89  34                 	db	52	;'4'
   423  00FF8A  5D                 	db	93	;']'
   424  00FF8B  20                 	db	32
   425  00FF8C  20                 	db	32
   426  00FF8D  20                 	db	32
   427  00FF8E  20                 	db	32
   428  00FF8F  20                 	db	32
   429  00FF90  2A                 	db	42
   430  00FF91  3E                 	db	62	;'>'
   431  00FF92  00                 	db	0
   432  00FF93                     STR_9:
   433  00FF93  68                 	db	104	;'h'
   434  00FF94  69                 	db	105	;'i'
   435  00FF95  73                 	db	115	;'s'
   436  00FF96  74                 	db	116	;'t'
   437  00FF97  6F                 	db	111	;'o'
   438  00FF98  72                 	db	114	;'r'
   439  00FF99  79                 	db	121	;'y'
   440  00FF9A  20                 	db	32
   441  00FF9B  3C                 	db	60	;'<'
   442  00FF9C  43                 	db	67	;'C'
   443  00FF9D  20                 	db	32
   444  00FF9E  20                 	db	32
   445  00FF9F  20                 	db	32
   446  00FFA0  20                 	db	32
   447  00FFA1  2A                 	db	42
   448  00FFA2  3E                 	db	62	;'>'
   449  00FFA3  00                 	db	0
   450  00FFA4                     STR_13:
   451  00FFA4  20                 	db	32
   452  00FFA5  20                 	db	32
   453  00FFA6  20                 	db	32
   454  00FFA7  73                 	db	115	;'s'
   455  00FFA8  74                 	db	116	;'t'
   456  00FFA9  61                 	db	97	;'a'
   457  00FFAA  74                 	db	116	;'t'
   458  00FFAB  73                 	db	115	;'s'
   459  00FFAC  20                 	db	32
   460  00FFAD  3C                 	db	60	;'<'
   461  00FFAE  42                 	db	66	;'B'
   462  00FFAF  20                 	db	32
   463  00FFB0  20                 	db	32
   464  00FFB1  20                 	db	32
   465  00FFB2  2A                 	db	42
   466  00FFB3  3E                 	db	62	;'>'
   467  00FFB4  00                 	db	0
   468  00FFB5                     STR_17:
   469  00FFB5  5B                 	db	91	;'['
   470  00FFB6  6E                 	db	110	;'n'
   471  00FFB7  6E                 	db	110	;'n'
   472  00FFB8  2C                 	db	44
   473  00FFB9  6E                 	db	110	;'n'
   474  00FFBA  2C                 	db	44
   475  00FFBB  6E                 	db	110	;'n'
   476  00FFBC  2C                 	db	44
   477  00FFBD  6E                 	db	110	;'n'
   478  00FFBE  6E                 	db	110	;'n'
   479  00FFBF  5D                 	db	93	;']'
   480  00FFC0  20                 	db	32
   481  00FFC1  20                 	db	32
   482  00FFC2  20                 	db	32
   483  00FFC3  2A                 	db	42
   484  00FFC4  3E                 	db	62	;'>'
   485  00FFC5  00                 	db	0
   486  00FFC6                     STR_7:
   487  00FFC6  20                 	db	32
   488  00FFC7  20                 	db	32
   489  00FFC8  6D                 	db	109	;'m'
   490  00FFC9  6D                 	db	109	;'m'
   491  00FFCA  3A                 	db	58	;':'
   492  00FFCB  64                 	db	100	;'d'
   493  00FFCC  64                 	db	100	;'d'
   494  00FFCD  3A                 	db	58	;':'
   495  00FFCE  79                 	db	121	;'y'
   496  00FFCF  79                 	db	121	;'y'
   497  00FFD0  20                 	db	32
   498  00FFD1  20                 	db	32
   499  00FFD2  20                 	db	32
   500  00FFD3  20                 	db	32
   501  00FFD4  41                 	db	65	;'A'
   502  00FFD5  3E                 	db	62	;'>'
   503  00FFD6  00                 	db	0
   504  00FFD7                     STR_1:
   505  00FFD7  69                 	db	105	;'i'
   506  00FFD8  6E                 	db	110	;'n'
   507  00FFD9  74                 	db	116	;'t'
   508  00FFDA  65                 	db	101	;'e'
   509  00FFDB  72                 	db	114	;'r'
   510  00FFDC  72                 	db	114	;'r'
   511  00FFDD  75                 	db	117	;'u'
   512  00FFDE  70                 	db	112	;'p'
   513  00FFDF  74                 	db	116	;'t'
   514  00FFE0  21                 	db	33
   515  00FFE1  00                 	db	0
   516  00FFE2  5B                 	db	91	;'['
   517  00FFE3  25                 	db	37
   518  00FFE4  78                 	db	120	;'x'
   519  00FFE5  20                 	db	32
   520  00FFE6  25                 	db	37
   521  00FFE7  78                 	db	120	;'x'
   522  00FFE8  5D                 	db	93	;']'
   523  00FFE9  0A                 	db	10
   524  00FFEA  00                 	db	0
   525  00FFEB  74                 	db	116	;'t'
   526  00FFEC  31                 	db	49	;'1'
   527  00FFED  3A                 	db	58	;':'
   528  00FFEE  20                 	db	32
   529  00FFEF  25                 	db	37
   530  00FFF0  78                 	db	120	;'x'
   531  00FFF1  20                 	db	32
   532  00FFF2  00                 	db	0
   533  00FFF3                     STR_3:
   534  00FFF3  6F                 	db	111	;'o'
   535  00FFF4  70                 	db	112	;'p'
   536  00FFF5  65                 	db	101	;'e'
   537  00FFF6  6E                 	db	110	;'n'
   538  00FFF7  21                 	db	33
   539  00FFF8  00                 	db	0
   540  00FFF9                     STR_2:
   541  00FFF9  6F                 	db	111	;'o'
   542  00FFFA  70                 	db	112	;'p'
   543  00FFFB  65                 	db	101	;'e'
   544  00FFFC  6E                 	db	110	;'n'
   545  00FFFD  3F                 	db	63	;'?'
   546  00FFFE  00                 	db	0
   547                           
   548                           ; #config settings
   549  00FFFF  00                 	db	0	; dummy byte at the end
   550  0000                     
   551                           	psect	cinit
   552  00194C                     __pcinit:
   553                           	opt stack 0
   554  00194C                     start_initialization:
   555                           	opt stack 0
   556  00194C                     __initialization:
   557                           	opt stack 0
   558                           
   559                           ; Initialize objects allocated to BANK1 (12 bytes)
   560                           ; load TBLPTR registers with __pidataBANK1
   561  00194C  0ECA               	movlw	low __pidataBANK1
   562  00194E  6EF6               	movwf	tblptrl,c
   563  001950  0E1F               	movlw	high __pidataBANK1
   564  001952  6EF7               	movwf	tblptrh,c
   565  001954  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   566  001956  6EF8               	movwf	tblptru,c
   567  001958  EE01  F020         	lfsr	0,__pdataBANK1
   568  00195C  EE10 F00C          	lfsr	1,12
   569  001960                     copy_data0:
   570  001960  0009               	tblrd		*+
   571  001962  CFF5 FFEE          	movff	tablat,postinc0
   572  001966  50E5               	movf	postdec1,w,c
   573  001968  50E1               	movf	fsr1l,w,c
   574  00196A  E1FA               	bnz	copy_data0
   575                           
   576                           ; Initialize objects allocated to BANK0 (16 bytes)
   577                           ; load TBLPTR registers with __pidataBANK0
   578  00196C  0EBA               	movlw	low __pidataBANK0
   579  00196E  6EF6               	movwf	tblptrl,c
   580  001970  0E1F               	movlw	high __pidataBANK0
   581  001972  6EF7               	movwf	tblptrh,c
   582  001974  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   583  001976  6EF8               	movwf	tblptru,c
   584  001978  EE00  F0EE         	lfsr	0,__pdataBANK0
   585  00197C  EE10 F010          	lfsr	1,16
   586  001980                     copy_data1:
   587  001980  0009               	tblrd		*+
   588  001982  CFF5 FFEE          	movff	tablat,postinc0
   589  001986  50E5               	movf	postdec1,w,c
   590  001988  50E1               	movf	fsr1l,w,c
   591  00198A  E1FA               	bnz	copy_data1
   592                           
   593                           ; Initialize objects allocated to COMRAM (8 bytes)
   594                           ; load TBLPTR registers with __pidataCOMRAM
   595  00198C  0ED6               	movlw	low __pidataCOMRAM
   596  00198E  6EF6               	movwf	tblptrl,c
   597  001990  0E1F               	movlw	high __pidataCOMRAM
   598  001992  6EF7               	movwf	tblptrh,c
   599  001994  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   600  001996  6EF8               	movwf	tblptru,c
   601  001998  EE00  F076         	lfsr	0,__pdataCOMRAM
   602  00199C  EE10 F008          	lfsr	1,8
   603  0019A0                     copy_data2:
   604  0019A0  0009               	tblrd		*+
   605  0019A2  CFF5 FFEE          	movff	tablat,postinc0
   606  0019A6  50E5               	movf	postdec1,w,c
   607  0019A8  50E1               	movf	fsr1l,w,c
   608  0019AA  E1FA               	bnz	copy_data2
   609                           
   610                           ; Clear objects allocated to BANK1 (32 bytes)
   611  0019AC  EE01  F000         	lfsr	0,__pbssBANK1
   612  0019B0  0E20               	movlw	32
   613  0019B2                     clear_0:
   614  0019B2  6AEE               	clrf	postinc0,c
   615  0019B4  06E8               	decf	wreg,f,c
   616  0019B6  E1FD               	bnz	clear_0
   617                           
   618                           ; Clear objects allocated to BANK0 (2 bytes)
   619  0019B8  0100               	movlb	0
   620  0019BA  6BFF               	clrf	(__pbssBANK0+1)& (0+255),b
   621  0019BC  6BFE               	clrf	__pbssBANK0& (0+255),b
   622  0019BE                     end_of_initialization:
   623                           	opt stack 0
   624  0019BE                     __end_of__initialization:
   625                           	opt stack 0
   626  0019BE  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   627  0019C0  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   628  0019C2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   629  0019C4  6EF8               	movwf	tblptru,c
   630  0019C6  0100               	movlb	0
   631  0019C8  EF72  F00B         	goto	_main	;jump to C main() function
   632                           tblptru	equ	0xFF8
   633                           tblptrh	equ	0xFF7
   634                           tblptrl	equ	0xFF6
   635                           tablat	equ	0xFF5
   636                           postinc0	equ	0xFEE
   637                           wreg	equ	0xFE8
   638                           postdec1	equ	0xFE5
   639                           fsr1l	equ	0xFE1
   640                           
   641                           	psect	dataCOMRAM
   642  000076                     __pdataCOMRAM:
   643                           	opt stack 0
   644  000076                     _redirectAngle_9V:
   645                           	opt stack 0
   646  000076                     	ds	2
   647  000078                     _redirectAngle_AA:
   648                           	opt stack 0
   649  000078                     	ds	2
   650  00007A                     _redirectAngle_C:
   651                           	opt stack 0
   652  00007A                     	ds	2
   653  00007C                     _redirectAngle_OTHER:
   654                           	opt stack 0
   655  00007C                     	ds	2
   656                           tblptru	equ	0xFF8
   657                           tblptrh	equ	0xFF7
   658                           tblptrl	equ	0xFF6
   659                           tablat	equ	0xFF5
   660                           postinc0	equ	0xFEE
   661                           wreg	equ	0xFE8
   662                           postdec1	equ	0xFE5
   663                           fsr1l	equ	0xFE1
   664                           
   665                           	psect	bssBANK0
   666  0000FE                     __pbssBANK0:
   667                           	opt stack 0
   668  0000FE                     _switchFlag:
   669                           	opt stack 0
   670  0000FE                     	ds	2
   671                           tblptru	equ	0xFF8
   672                           tblptrh	equ	0xFF7
   673                           tblptrl	equ	0xFF6
   674                           tablat	equ	0xFF5
   675                           postinc0	equ	0xFEE
   676                           wreg	equ	0xFE8
   677                           postdec1	equ	0xFE5
   678                           fsr1l	equ	0xFE1
   679                           
   680                           	psect	dataBANK0
   681  0000EE                     __pdataBANK0:
   682                           	opt stack 0
   683  0000EE                     _padServo:
   684                           	opt stack 0
   685  0000EE                     	ds	6
   686  0000F4                     _cylinderMotor:
   687                           	opt stack 0
   688  0000F4                     	ds	4
   689  0000F8                     _padAngle_CATCH:
   690                           	opt stack 0
   691  0000F8                     	ds	2
   692  0000FA                     _padAngle_CLOSE:
   693                           	opt stack 0
   694  0000FA                     	ds	2
   695  0000FC                     _padAngle_OPEN:
   696                           	opt stack 0
   697  0000FC                     	ds	2
   698                           tblptru	equ	0xFF8
   699                           tblptrh	equ	0xFF7
   700                           tblptrl	equ	0xFF6
   701                           tablat	equ	0xFF5
   702                           postinc0	equ	0xFEE
   703                           wreg	equ	0xFE8
   704                           postdec1	equ	0xFE5
   705                           fsr1l	equ	0xFE1
   706                           
   707                           	psect	bssBANK1
   708  000100                     __pbssBANK1:
   709                           	opt stack 0
   710  000100                     _pulse:
   711                           	opt stack 0
   712  000100                     	ds	16
   713  000110                     _pin:
   714                           	opt stack 0
   715  000110                     	ds	8
   716  000118                     _port:
   717                           	opt stack 0
   718  000118                     	ds	8
   719                           tblptru	equ	0xFF8
   720                           tblptrh	equ	0xFF7
   721                           tblptrl	equ	0xFF6
   722                           tablat	equ	0xFF5
   723                           postinc0	equ	0xFEE
   724                           wreg	equ	0xFE8
   725                           postdec1	equ	0xFE5
   726                           fsr1l	equ	0xFE1
   727                           
   728                           	psect	dataBANK1
   729  000120                     __pdataBANK1:
   730                           	opt stack 0
   731  000120                     _conveyorServo:
   732                           	opt stack 0
   733  000120                     	ds	6
   734  000126                     _redirectingServo:
   735                           	opt stack 0
   736  000126                     	ds	6
   737                           tblptru	equ	0xFF8
   738                           tblptrh	equ	0xFF7
   739                           tblptrl	equ	0xFF6
   740                           tablat	equ	0xFF5
   741                           postinc0	equ	0xFEE
   742                           wreg	equ	0xFE8
   743                           postdec1	equ	0xFE5
   744                           fsr1l	equ	0xFE1
   745                           
   746                           	psect	cstackBANK0
   747  000080                     __pcstackBANK0:
   748                           	opt stack 0
   749  000080                     ?___lwdiv:
   750                           	opt stack 0
   751  000080                     ?___ftpack:
   752                           	opt stack 0
   753  000080                     lcdNibble@temp:
   754                           	opt stack 0
   755  000080                     readKeypad@key:
   756                           	opt stack 0
   757  000080                     digitalWrite@port:
   758                           	opt stack 0
   759  000080                     initTimer@timer:
   760                           	opt stack 0
   761  000080                     startTimer@timer:
   762                           	opt stack 0
   763  000080                     stopServo@timer:
   764                           	opt stack 0
   765  000080                     ___lwdiv@dividend:
   766                           	opt stack 0
   767  000080                     ___ftpack@arg:
   768                           	opt stack 0
   769                           
   770                           ; 3 bytes @ 0x0
   771  000080                     	ds	1
   772  000081                     lcdNibble@data:
   773                           	opt stack 0
   774                           
   775                           ; 1 bytes @ 0x1
   776  000081                     	ds	1
   777  000082                     ??_stopServo:
   778  000082                     ??_lcdInst:
   779  000082                     ??_initTimer:
   780  000082                     digitalWrite@pin:
   781                           	opt stack 0
   782  000082                     ___lwdiv@divisor:
   783                           	opt stack 0
   784  000082                     startTimer@val:
   785                           	opt stack 0
   786                           
   787                           ; 4 bytes @ 0x2
   788  000082                     	ds	1
   789  000083                     lcdInst@data:
   790                           	opt stack 0
   791  000083                     ___ftpack@exp:
   792                           	opt stack 0
   793                           
   794                           ; 1 bytes @ 0x3
   795  000083                     	ds	1
   796  000084                     ??_initLCD:
   797  000084                     putch@data:
   798                           	opt stack 0
   799  000084                     ___ftpack@sign:
   800                           	opt stack 0
   801  000084                     digitalWrite@val:
   802                           	opt stack 0
   803  000084                     ___lwdiv@quotient:
   804                           	opt stack 0
   805                           
   806                           ; 2 bytes @ 0x4
   807  000084                     	ds	1
   808  000085                     ??___ftpack:
   809                           
   810                           ; 1 bytes @ 0x5
   811  000085                     	ds	1
   812  000086                     ??_digitalWrite:
   813  000086                     ??_startTimer:
   814  000086                     ___lwdiv@counter:
   815                           	opt stack 0
   816                           
   817                           ; 1 bytes @ 0x6
   818  000086                     	ds	1
   819  000087                     ?_printf:
   820                           	opt stack 0
   821  000087                     printf@f:
   822                           	opt stack 0
   823                           
   824                           ; 2 bytes @ 0x7
   825  000087                     	ds	1
   826  000088                     ?___altoft:
   827                           	opt stack 0
   828  000088                     ?___awtoft:
   829                           	opt stack 0
   830  000088                     ___awtoft@c:
   831                           	opt stack 0
   832  000088                     ___altoft@c:
   833                           	opt stack 0
   834                           
   835                           ; 4 bytes @ 0x8
   836  000088                     	ds	3
   837  00008B                     ___awtoft@sign:
   838                           	opt stack 0
   839                           
   840                           ; 1 bytes @ 0xB
   841  00008B                     	ds	1
   842  00008C                     ??___altoft:
   843  00008C                     ?___ftdiv:
   844                           	opt stack 0
   845  00008C                     ___ftdiv@f1:
   846                           	opt stack 0
   847                           
   848                           ; 3 bytes @ 0xC
   849  00008C                     	ds	1
   850  00008D                     printf@flag:
   851                           	opt stack 0
   852                           
   853                           ; 1 bytes @ 0xD
   854  00008D                     	ds	1
   855  00008E                     printf@idx:
   856                           	opt stack 0
   857                           
   858                           ; 1 bytes @ 0xE
   859  00008E                     	ds	1
   860  00008F                     printf@val:
   861                           	opt stack 0
   862  00008F                     ___ftdiv@f2:
   863                           	opt stack 0
   864                           
   865                           ; 3 bytes @ 0xF
   866  00008F                     	ds	1
   867  000090                     ___altoft@exp:
   868                           	opt stack 0
   869                           
   870                           ; 1 bytes @ 0x10
   871  000090                     	ds	1
   872  000091                     printf@prec:
   873                           	opt stack 0
   874  000091                     ___altoft@sign:
   875                           	opt stack 0
   876                           
   877                           ; 1 bytes @ 0x11
   878  000091                     	ds	1
   879  000092                     ??___ftdiv:
   880  000092                     printf@ap:
   881                           	opt stack 0
   882                           
   883                           ; 2 bytes @ 0x12
   884  000092                     	ds	2
   885  000094                     printf@c:
   886                           	opt stack 0
   887                           
   888                           ; 1 bytes @ 0x14
   889  000094                     	ds	1
   890  000095                     runMenu@key:
   891                           	opt stack 0
   892  000095                     ___ftdiv@cntr:
   893                           	opt stack 0
   894                           
   895                           ; 1 bytes @ 0x15
   896  000095                     	ds	1
   897  000096                     showInterface@key:
   898                           	opt stack 0
   899  000096                     ___ftdiv@f3:
   900                           	opt stack 0
   901                           
   902                           ; 3 bytes @ 0x16
   903  000096                     	ds	3
   904  000099                     ___ftdiv@exp:
   905                           	opt stack 0
   906                           
   907                           ; 1 bytes @ 0x19
   908  000099                     	ds	1
   909  00009A                     ___ftdiv@sign:
   910                           	opt stack 0
   911                           
   912                           ; 1 bytes @ 0x1A
   913  00009A                     	ds	1
   914  00009B                     ?___ftmul:
   915                           	opt stack 0
   916  00009B                     ___ftmul@f1:
   917                           	opt stack 0
   918                           
   919                           ; 3 bytes @ 0x1B
   920  00009B                     	ds	3
   921  00009E                     ___ftmul@f2:
   922                           	opt stack 0
   923                           
   924                           ; 3 bytes @ 0x1E
   925  00009E                     	ds	3
   926  0000A1                     ??___ftmul:
   927                           
   928                           ; 1 bytes @ 0x21
   929  0000A1                     	ds	3
   930  0000A4                     ___ftmul@exp:
   931                           	opt stack 0
   932                           
   933                           ; 1 bytes @ 0x24
   934  0000A4                     	ds	1
   935  0000A5                     ___ftmul@f3_as_product:
   936                           	opt stack 0
   937                           
   938                           ; 3 bytes @ 0x25
   939  0000A5                     	ds	3
   940  0000A8                     ___ftmul@cntr:
   941                           	opt stack 0
   942                           
   943                           ; 1 bytes @ 0x28
   944  0000A8                     	ds	1
   945  0000A9                     ___ftmul@sign:
   946                           	opt stack 0
   947                           
   948                           ; 1 bytes @ 0x29
   949  0000A9                     	ds	1
   950  0000AA                     ?___ftadd:
   951                           	opt stack 0
   952  0000AA                     ___ftadd@f1:
   953                           	opt stack 0
   954                           
   955                           ; 3 bytes @ 0x2A
   956  0000AA                     	ds	3
   957  0000AD                     ___ftadd@f2:
   958                           	opt stack 0
   959                           
   960                           ; 3 bytes @ 0x2D
   961  0000AD                     	ds	3
   962  0000B0                     ??___ftadd:
   963                           
   964                           ; 1 bytes @ 0x30
   965  0000B0                     	ds	3
   966  0000B3                     ___ftadd@sign:
   967                           	opt stack 0
   968                           
   969                           ; 1 bytes @ 0x33
   970  0000B3                     	ds	1
   971  0000B4                     ___ftadd@exp2:
   972                           	opt stack 0
   973                           
   974                           ; 1 bytes @ 0x34
   975  0000B4                     	ds	1
   976  0000B5                     ___ftadd@exp1:
   977                           	opt stack 0
   978                           
   979                           ; 1 bytes @ 0x35
   980  0000B5                     	ds	1
   981  0000B6                     ?___fttol:
   982                           	opt stack 0
   983  0000B6                     ___fttol@f1:
   984                           	opt stack 0
   985                           
   986                           ; 3 bytes @ 0x36
   987  0000B6                     	ds	4
   988  0000BA                     ??___fttol:
   989                           
   990                           ; 1 bytes @ 0x3A
   991  0000BA                     	ds	5
   992  0000BF                     ___fttol@sign1:
   993                           	opt stack 0
   994                           
   995                           ; 1 bytes @ 0x3F
   996  0000BF                     	ds	1
   997  0000C0                     ___fttol@lval:
   998                           	opt stack 0
   999                           
  1000                           ; 4 bytes @ 0x40
  1001  0000C0                     	ds	4
  1002  0000C4                     ___fttol@exp1:
  1003                           	opt stack 0
  1004                           
  1005                           ; 1 bytes @ 0x44
  1006  0000C4                     	ds	1
  1007  0000C5                     ?_angleToPulse:
  1008                           	opt stack 0
  1009  0000C5                     angleToPulse@angle:
  1010                           	opt stack 0
  1011                           
  1012                           ; 2 bytes @ 0x45
  1013  0000C5                     	ds	4
  1014  0000C9                     ??_angleToPulse:
  1015                           
  1016                           ; 1 bytes @ 0x49
  1017  0000C9                     	ds	4
  1018  0000CD                     angleToPulse@offset:
  1019                           	opt stack 0
  1020                           
  1021                           ; 4 bytes @ 0x4D
  1022  0000CD                     	ds	4
  1023  0000D1                     angleToPulse@a180:
  1024                           	opt stack 0
  1025                           
  1026                           ; 4 bytes @ 0x51
  1027  0000D1                     	ds	4
  1028  0000D5                     _angleToPulse$1222:
  1029                           	opt stack 0
  1030                           
  1031                           ; 3 bytes @ 0x55
  1032  0000D5                     	ds	3
  1033  0000D8                     angleToPulse@a000:
  1034                           	opt stack 0
  1035                           
  1036                           ; 4 bytes @ 0x58
  1037  0000D8                     	ds	4
  1038  0000DC                     setAngle@timer:
  1039                           	opt stack 0
  1040                           
  1041                           ; 2 bytes @ 0x5C
  1042  0000DC                     	ds	2
  1043  0000DE                     setAngle@angle:
  1044                           	opt stack 0
  1045                           
  1046                           ; 2 bytes @ 0x5E
  1047  0000DE                     	ds	2
  1048  0000E0                     ??_setAngle:
  1049                           
  1050                           ; 1 bytes @ 0x60
  1051  0000E0                     	ds	6
  1052  0000E6                     initServo@timer:
  1053                           	opt stack 0
  1054                           
  1055                           ; 2 bytes @ 0x66
  1056  0000E6                     	ds	2
  1057  0000E8                     initServo@po:
  1058                           	opt stack 0
  1059                           
  1060                           ; 2 bytes @ 0x68
  1061  0000E8                     	ds	2
  1062  0000EA                     initServo@pi:
  1063                           	opt stack 0
  1064                           
  1065                           ; 2 bytes @ 0x6A
  1066  0000EA                     	ds	2
  1067  0000EC                     initServo@angle:
  1068                           	opt stack 0
  1069                           
  1070                           ; 2 bytes @ 0x6C
  1071  0000EC                     	ds	2
  1072  0000EE                     tblptru	equ	0xFF8
  1073                           tblptrh	equ	0xFF7
  1074                           tblptrl	equ	0xFF6
  1075                           tablat	equ	0xFF5
  1076                           postinc0	equ	0xFEE
  1077                           wreg	equ	0xFE8
  1078                           postdec1	equ	0xFE5
  1079                           fsr1l	equ	0xFE1
  1080                           
  1081                           ; 1 bytes @ 0x6E
  1082                           
  1083                           	psect	cstackCOMRAM
  1084  000001                     __pcstackCOMRAM:
  1085                           	opt stack 0
  1086  000001                     ?_digitalRead:
  1087                           	opt stack 0
  1088  000001                     ?i2___ftpack:
  1089                           	opt stack 0
  1090  000001                     digitalRead@port:
  1091                           	opt stack 0
  1092  000001                     i2digitalWrite@port:
  1093                           	opt stack 0
  1094  000001                     i2startTimer@timer:
  1095                           	opt stack 0
  1096  000001                     i2___ftpack@arg:
  1097                           	opt stack 0
  1098                           
  1099                           ; 3 bytes @ 0x0
  1100  000001                     	ds	2
  1101  000003                     digitalRead@pin:
  1102                           	opt stack 0
  1103  000003                     i2digitalWrite@pin:
  1104                           	opt stack 0
  1105  000003                     i2startTimer@val:
  1106                           	opt stack 0
  1107                           
  1108                           ; 4 bytes @ 0x2
  1109  000003                     	ds	1
  1110  000004                     i2___ftpack@exp:
  1111                           	opt stack 0
  1112                           
  1113                           ; 1 bytes @ 0x3
  1114  000004                     	ds	1
  1115  000005                     ??_digitalRead:
  1116  000005                     i2___ftpack@sign:
  1117                           	opt stack 0
  1118  000005                     i2digitalWrite@val:
  1119                           	opt stack 0
  1120                           
  1121                           ; 2 bytes @ 0x4
  1122  000005                     	ds	1
  1123  000006                     ??i2___ftpack:
  1124                           
  1125                           ; 1 bytes @ 0x5
  1126  000006                     	ds	1
  1127  000007                     ??i2_digitalWrite:
  1128  000007                     ??i2_startTimer:
  1129                           
  1130                           ; 1 bytes @ 0x6
  1131  000007                     	ds	2
  1132  000009                     ?i2___altoft:
  1133                           	opt stack 0
  1134  000009                     ?i2___awtoft:
  1135                           	opt stack 0
  1136  000009                     i2___awtoft@c:
  1137                           	opt stack 0
  1138  000009                     i2___altoft@c:
  1139                           	opt stack 0
  1140                           
  1141                           ; 4 bytes @ 0x8
  1142  000009                     	ds	1
  1143  00000A                     ??_servoInterruptService:
  1144                           
  1145                           ; 1 bytes @ 0x9
  1146  00000A                     	ds	2
  1147  00000C                     i2___awtoft@sign:
  1148                           	opt stack 0
  1149  00000C                     servoInterruptService@flags:
  1150                           	opt stack 0
  1151                           
  1152                           ; 8 bytes @ 0xB
  1153  00000C                     	ds	1
  1154  00000D                     ??i2___altoft:
  1155  00000D                     ?i2___ftdiv:
  1156                           	opt stack 0
  1157  00000D                     i2___ftdiv@f1:
  1158                           	opt stack 0
  1159                           
  1160                           ; 3 bytes @ 0xC
  1161  00000D                     	ds	3
  1162  000010                     i2___ftdiv@f2:
  1163                           	opt stack 0
  1164                           
  1165                           ; 3 bytes @ 0xF
  1166  000010                     	ds	1
  1167  000011                     i2___altoft@exp:
  1168                           	opt stack 0
  1169                           
  1170                           ; 1 bytes @ 0x10
  1171  000011                     	ds	1
  1172  000012                     i2___altoft@sign:
  1173                           	opt stack 0
  1174                           
  1175                           ; 1 bytes @ 0x11
  1176  000012                     	ds	1
  1177  000013                     ??i2___ftdiv:
  1178                           
  1179                           ; 1 bytes @ 0x12
  1180  000013                     	ds	1
  1181  000014                     servoInterruptService@i:
  1182                           	opt stack 0
  1183                           
  1184                           ; 2 bytes @ 0x13
  1185  000014                     	ds	2
  1186  000016                     i2___ftdiv@cntr:
  1187                           	opt stack 0
  1188                           
  1189                           ; 1 bytes @ 0x15
  1190  000016                     	ds	1
  1191  000017                     i2___ftdiv@f3:
  1192                           	opt stack 0
  1193                           
  1194                           ; 3 bytes @ 0x16
  1195  000017                     	ds	3
  1196  00001A                     i2___ftdiv@exp:
  1197                           	opt stack 0
  1198                           
  1199                           ; 1 bytes @ 0x19
  1200  00001A                     	ds	1
  1201  00001B                     i2___ftdiv@sign:
  1202                           	opt stack 0
  1203                           
  1204                           ; 1 bytes @ 0x1A
  1205  00001B                     	ds	1
  1206  00001C                     ?i2___ftmul:
  1207                           	opt stack 0
  1208  00001C                     i2___ftmul@f1:
  1209                           	opt stack 0
  1210                           
  1211                           ; 3 bytes @ 0x1B
  1212  00001C                     	ds	3
  1213  00001F                     i2___ftmul@f2:
  1214                           	opt stack 0
  1215                           
  1216                           ; 3 bytes @ 0x1E
  1217  00001F                     	ds	3
  1218  000022                     ??i2___ftmul:
  1219                           
  1220                           ; 1 bytes @ 0x21
  1221  000022                     	ds	3
  1222  000025                     i2___ftmul@exp:
  1223                           	opt stack 0
  1224                           
  1225                           ; 1 bytes @ 0x24
  1226  000025                     	ds	1
  1227  000026                     i2___ftmul@f3_as_product:
  1228                           	opt stack 0
  1229                           
  1230                           ; 3 bytes @ 0x25
  1231  000026                     	ds	3
  1232  000029                     i2___ftmul@cntr:
  1233                           	opt stack 0
  1234                           
  1235                           ; 1 bytes @ 0x28
  1236  000029                     	ds	1
  1237  00002A                     i2___ftmul@sign:
  1238                           	opt stack 0
  1239                           
  1240                           ; 1 bytes @ 0x29
  1241  00002A                     	ds	1
  1242  00002B                     ?i2___ftadd:
  1243                           	opt stack 0
  1244  00002B                     i2___ftadd@f1:
  1245                           	opt stack 0
  1246                           
  1247                           ; 3 bytes @ 0x2A
  1248  00002B                     	ds	3
  1249  00002E                     i2___ftadd@f2:
  1250                           	opt stack 0
  1251                           
  1252                           ; 3 bytes @ 0x2D
  1253  00002E                     	ds	3
  1254  000031                     ??i2___ftadd:
  1255                           
  1256                           ; 1 bytes @ 0x30
  1257  000031                     	ds	3
  1258  000034                     i2___ftadd@sign:
  1259                           	opt stack 0
  1260                           
  1261                           ; 1 bytes @ 0x33
  1262  000034                     	ds	1
  1263  000035                     i2___ftadd@exp2:
  1264                           	opt stack 0
  1265                           
  1266                           ; 1 bytes @ 0x34
  1267  000035                     	ds	1
  1268  000036                     i2___ftadd@exp1:
  1269                           	opt stack 0
  1270                           
  1271                           ; 1 bytes @ 0x35
  1272  000036                     	ds	1
  1273  000037                     ?i2___fttol:
  1274                           	opt stack 0
  1275  000037                     i2___fttol@f1:
  1276                           	opt stack 0
  1277                           
  1278                           ; 3 bytes @ 0x36
  1279  000037                     	ds	4
  1280  00003B                     ??i2___fttol:
  1281                           
  1282                           ; 1 bytes @ 0x3A
  1283  00003B                     	ds	5
  1284  000040                     i2___fttol@sign1:
  1285                           	opt stack 0
  1286                           
  1287                           ; 1 bytes @ 0x3F
  1288  000040                     	ds	1
  1289  000041                     i2___fttol@lval:
  1290                           	opt stack 0
  1291                           
  1292                           ; 4 bytes @ 0x40
  1293  000041                     	ds	4
  1294  000045                     i2___fttol@exp1:
  1295                           	opt stack 0
  1296                           
  1297                           ; 1 bytes @ 0x44
  1298  000045                     	ds	1
  1299  000046                     ?i2_angleToPulse:
  1300                           	opt stack 0
  1301  000046                     i2angleToPulse@angle:
  1302                           	opt stack 0
  1303                           
  1304                           ; 2 bytes @ 0x45
  1305  000046                     	ds	4
  1306  00004A                     ??i2_angleToPulse:
  1307                           
  1308                           ; 1 bytes @ 0x49
  1309  00004A                     	ds	4
  1310  00004E                     i2angleToPulse@offset:
  1311                           	opt stack 0
  1312                           
  1313                           ; 4 bytes @ 0x4D
  1314  00004E                     	ds	4
  1315  000052                     i2angleToPulse@a180:
  1316                           	opt stack 0
  1317                           
  1318                           ; 4 bytes @ 0x51
  1319  000052                     	ds	4
  1320  000056                     i2_angleToPulse$1308:
  1321                           	opt stack 0
  1322                           
  1323                           ; 3 bytes @ 0x55
  1324  000056                     	ds	3
  1325  000059                     i2angleToPulse@a000:
  1326                           	opt stack 0
  1327                           
  1328                           ; 4 bytes @ 0x58
  1329  000059                     	ds	4
  1330  00005D                     i2setAngle@timer:
  1331                           	opt stack 0
  1332                           
  1333                           ; 2 bytes @ 0x5C
  1334  00005D                     	ds	2
  1335  00005F                     i2setAngle@angle:
  1336                           	opt stack 0
  1337                           
  1338                           ; 2 bytes @ 0x5E
  1339  00005F                     	ds	2
  1340  000061                     ??i2_setAngle:
  1341                           
  1342                           ; 1 bytes @ 0x60
  1343  000061                     	ds	6
  1344  000067                     ??_service:
  1345                           
  1346                           ; 1 bytes @ 0x66
  1347  000067                     	ds	14
  1348  000075                     service@key:
  1349                           	opt stack 0
  1350                           
  1351                           ; 1 bytes @ 0x74
  1352  000075                     	ds	1
  1353                           tblptru	equ	0xFF8
  1354                           tblptrh	equ	0xFF7
  1355                           tblptrl	equ	0xFF6
  1356                           tablat	equ	0xFF5
  1357                           postinc0	equ	0xFEE
  1358                           wreg	equ	0xFE8
  1359                           postdec1	equ	0xFE5
  1360                           fsr1l	equ	0xFE1
  1361                           
  1362 ;;
  1363 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1364 ;;
  1365 ;; *************** function _main *****************
  1366 ;; Defined at:
  1367 ;;		line 44 in file "main.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;		None
  1370 ;; Auto vars:     Size  Location     Type
  1371 ;;		None
  1372 ;; Return value:  Size  Location     Type
  1373 ;;                  1    wreg      void 
  1374 ;; Registers used:
  1375 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1376 ;; Tracked objects:
  1377 ;;		On entry : 0/0
  1378 ;;		On exit  : 0/0
  1379 ;;		Unchanged: 0/0
  1380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1384 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1385 ;;Total ram usage:        0 bytes
  1386 ;; Hardware stack levels required when called:   12
  1387 ;; This function calls:
  1388 ;;		_initLCD
  1389 ;;		_initServo
  1390 ;;		_pinSetup
  1391 ;;		_showInterface
  1392 ;;		_sortBattery
  1393 ;; This function is called by:
  1394 ;;		Startup code after reset
  1395 ;; This function uses a non-reentrant model
  1396 ;;
  1397                           
  1398                           	psect	text0
  1399  0016E4                     __ptext0:
  1400                           	opt stack 0
  1401  0016E4                     _main:
  1402                           	opt stack 19
  1403                           
  1404                           ;main.c: 45: pinSetup();
  1405                           
  1406                           ;incstack = 0
  1407  0016E4  ECEB  F00E         	call	_pinSetup	;wreg free
  1408                           
  1409                           ;main.c: 46: initLCD();
  1410  0016E8  ECA4  F00E         	call	_initLCD	;wreg free
  1411                           
  1412                           ;main.c: 50: (INTCONbits.GIE = 0);
  1413                           
  1414                           ;main.c: 49: while(1){
  1415  0016EC  9EF2               	bcf	intcon,7,c	;volatile
  1416                           
  1417                           ;main.c: 51: showInterface();
  1418  0016EE  EC13  F008         	call	_showInterface	;wreg free
  1419                           
  1420                           ;main.c: 52: (INTCONbits.GIE = 1);
  1421  0016F2  8EF2               	bsf	intcon,7,c	;volatile
  1422                           
  1423                           ;main.c: 55: initServo(conveyorServo[0], conveyorServo[1], conveyorServo[2], 90);
  1424  0016F4  C120  F0E6         	movff	_conveyorServo,initServo@timer
  1425  0016F8  C121  F0E7         	movff	_conveyorServo+1,initServo@timer+1
  1426  0016FC  C122  F0E8         	movff	_conveyorServo+2,initServo@po
  1427  001700  C123  F0E9         	movff	_conveyorServo+3,initServo@po+1
  1428  001704  C124  F0EA         	movff	_conveyorServo+4,initServo@pi
  1429  001708  C125  F0EB         	movff	_conveyorServo+5,initServo@pi+1
  1430  00170C  0E00               	movlw	0
  1431  00170E  0100               	movlb	0	; () banked
  1432  001710  6FED               	movwf	(initServo@angle+1)& (0+255),b
  1433  001712  0E5A               	movlw	90
  1434  001714  6FEC               	movwf	initServo@angle& (0+255),b
  1435  001716  ECE6  F00C         	call	_initServo	;wreg free
  1436                           
  1437                           ;main.c: 56: initServo(padServo[0], padServo[1], padServo[2], padAngle_CATCH);
  1438  00171A  C0EE  F0E6         	movff	_padServo,initServo@timer
  1439  00171E  C0EF  F0E7         	movff	_padServo+1,initServo@timer+1
  1440  001722  C0F0  F0E8         	movff	_padServo+2,initServo@po
  1441  001726  C0F1  F0E9         	movff	_padServo+3,initServo@po+1
  1442  00172A  C0F2  F0EA         	movff	_padServo+4,initServo@pi
  1443  00172E  C0F3  F0EB         	movff	_padServo+5,initServo@pi+1
  1444  001732  C0F8  F0EC         	movff	_padAngle_CATCH,initServo@angle
  1445  001736  C0F9  F0ED         	movff	_padAngle_CATCH+1,initServo@angle+1
  1446  00173A  ECE6  F00C         	call	_initServo	;wreg free
  1447                           
  1448                           ;main.c: 57: initServo(redirectingServo[0], redirectingServo[1],redirectingServo[2], 90)
      +                          ;
  1449  00173E  C126  F0E6         	movff	_redirectingServo,initServo@timer
  1450  001742  C127  F0E7         	movff	_redirectingServo+1,initServo@timer+1
  1451  001746  C128  F0E8         	movff	_redirectingServo+2,initServo@po
  1452  00174A  C129  F0E9         	movff	_redirectingServo+3,initServo@po+1
  1453  00174E  C12A  F0EA         	movff	_redirectingServo+4,initServo@pi
  1454  001752  C12B  F0EB         	movff	_redirectingServo+5,initServo@pi+1
  1455  001756  0E00               	movlw	0
  1456  001758  0100               	movlb	0	; () banked
  1457  00175A  6FED               	movwf	(initServo@angle+1)& (0+255),b
  1458  00175C  0E5A               	movlw	90
  1459  00175E  6FEC               	movwf	initServo@angle& (0+255),b
  1460  001760  ECE6  F00C         	call	_initServo	;wreg free
  1461  001764                     l3805:
  1462  001764  0100               	movlb	0	; () banked
  1463  001766  51FE               	movf	_switchFlag& (0+255),w,b
  1464  001768  0100               	movlb	0	; () banked
  1465  00176A  11FF               	iorwf	(_switchFlag+1)& (0+255),w,b
  1466  00176C  B4D8               	btfsc	status,2,c
  1467  00176E  D7FA               	goto	l3805
  1468                           
  1469                           ; BSR set to: 0
  1470                           ;main.c: 62: switchFlag = 0;
  1471                           
  1472                           ; BSR set to: 0
  1473  001770  0E00               	movlw	0
  1474  001772  0100               	movlb	0	; () banked
  1475  001774  6FFF               	movwf	(_switchFlag+1)& (0+255),b
  1476  001776  0E00               	movlw	0
  1477  001778  6FFE               	movwf	_switchFlag& (0+255),b
  1478                           
  1479                           ; BSR set to: 0
  1480                           ;main.c: 63: sortBattery();
  1481  00177A  EC10  F00C         	call	_sortBattery	;wreg free
  1482  00177E  D7F2               	goto	l3805
  1483  001780                     l108:
  1484  001780  D7FF               	goto	l108
  1485  001782                     __end_of_main:
  1486                           	opt stack 0
  1487                           tblptru	equ	0xFF8
  1488                           tblptrh	equ	0xFF7
  1489                           tblptrl	equ	0xFF6
  1490                           tablat	equ	0xFF5
  1491                           intcon	equ	0xFF2
  1492                           postinc0	equ	0xFEE
  1493                           wreg	equ	0xFE8
  1494                           postdec1	equ	0xFE5
  1495                           fsr1l	equ	0xFE1
  1496                           status	equ	0xFD8
  1497                           
  1498 ;; *************** function _sortBattery *****************
  1499 ;; Defined at:
  1500 ;;		line 70 in file "main.c"
  1501 ;; Parameters:    Size  Location     Type
  1502 ;;		None
  1503 ;; Auto vars:     Size  Location     Type
  1504 ;;		None
  1505 ;; Return value:  Size  Location     Type
  1506 ;;                  1    wreg      void 
  1507 ;; Registers used:
  1508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1509 ;; Tracked objects:
  1510 ;;		On entry : 0/0
  1511 ;;		On exit  : 0/0
  1512 ;;		Unchanged: 0/0
  1513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1517 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1518 ;;Total ram usage:        0 bytes
  1519 ;; Hardware stack levels used:    1
  1520 ;; Hardware stack levels required when called:   10
  1521 ;; This function calls:
  1522 ;;		_digitalWrite
  1523 ;;		_lcdClear
  1524 ;;		_printf
  1525 ;;		_readKeypad
  1526 ;;		_setAngle
  1527 ;;		_stopServo
  1528 ;; This function is called by:
  1529 ;;		_main
  1530 ;; This function uses a non-reentrant model
  1531 ;;
  1532                           
  1533                           	psect	text1
  1534  001820                     __ptext1:
  1535                           	opt stack 0
  1536  001820                     _sortBattery:
  1537                           	opt stack 20
  1538                           
  1539                           ;main.c: 72: lcdClear();
  1540                           
  1541                           ;incstack = 0
  1542  001820  ECF3  F00F         	call	_lcdClear	;wreg free
  1543                           
  1544                           ;main.c: 73: printf("interrupt!");
  1545  001824  0ED7               	movlw	low STR_1
  1546  001826  0100               	movlb	0	; () banked
  1547  001828  6F87               	movwf	printf@f& (0+255),b
  1548  00182A  0EFF               	movlw	high STR_1
  1549  00182C  0100               	movlb	0	; () banked
  1550  00182E  6F88               	movwf	(printf@f+1)& (0+255),b
  1551  001830  EC5F  F004         	call	_printf	;wreg free
  1552                           
  1553                           ;main.c: 76: stopServo(conveyorServo[0]);
  1554  001834  C120  F080         	movff	_conveyorServo,stopServo@timer
  1555  001838  C121  F081         	movff	_conveyorServo+1,stopServo@timer+1
  1556  00183C  EC5A  F00E         	call	_stopServo	;wreg free
  1557                           
  1558                           ;main.c: 77: digitalWrite(cylinderMotor[0], cylinderMotor[1], 0);
  1559  001840  C0F4  F080         	movff	_cylinderMotor,digitalWrite@port
  1560  001844  C0F5  F081         	movff	_cylinderMotor+1,digitalWrite@port+1
  1561  001848  C0F6  F082         	movff	_cylinderMotor+2,digitalWrite@pin
  1562  00184C  C0F7  F083         	movff	_cylinderMotor+3,digitalWrite@pin+1
  1563  001850  0E00               	movlw	0
  1564  001852  0100               	movlb	0	; () banked
  1565  001854  6F85               	movwf	(digitalWrite@val+1)& (0+255),b
  1566  001856  0E00               	movlw	0
  1567  001858  6F84               	movwf	digitalWrite@val& (0+255),b
  1568  00185A  ECFC  F009         	call	_digitalWrite	;wreg free
  1569                           
  1570                           ;main.c: 82: readKeypad();
  1571  00185E  EC40  F00F         	call	_readKeypad	;wreg free
  1572                           
  1573                           ;main.c: 85: setAngle(padServo[0], padAngle_CLOSE);
  1574  001862  C0EE  F0DC         	movff	_padServo,setAngle@timer
  1575  001866  C0EF  F0DD         	movff	_padServo+1,setAngle@timer+1
  1576  00186A  C0FA  F0DE         	movff	_padAngle_CLOSE,setAngle@angle
  1577  00186E  C0FB  F0DF         	movff	_padAngle_CLOSE+1,setAngle@angle+1
  1578  001872  EC5C  F00C         	call	_setAngle	;wreg free
  1579                           
  1580                           ;main.c: 87: lcdClear();
  1581  001876  ECF3  F00F         	call	_lcdClear	;wreg free
  1582                           
  1583                           ;main.c: 88: printf("open?");
  1584  00187A  0EF9               	movlw	low STR_2
  1585  00187C  0100               	movlb	0	; () banked
  1586  00187E  6F87               	movwf	printf@f& (0+255),b
  1587  001880  0EFF               	movlw	high STR_2
  1588  001882  0100               	movlb	0	; () banked
  1589  001884  6F88               	movwf	(printf@f+1)& (0+255),b
  1590  001886  EC5F  F004         	call	_printf	;wreg free
  1591                           
  1592                           ;main.c: 90: readKeypad();
  1593  00188A  EC40  F00F         	call	_readKeypad	;wreg free
  1594                           
  1595                           ;main.c: 92: lcdClear();
  1596  00188E  ECF3  F00F         	call	_lcdClear	;wreg free
  1597                           
  1598                           ;main.c: 93: printf("open!");
  1599  001892  0EF3               	movlw	low STR_3
  1600  001894  0100               	movlb	0	; () banked
  1601  001896  6F87               	movwf	printf@f& (0+255),b
  1602  001898  0EFF               	movlw	high STR_3
  1603  00189A  0100               	movlb	0	; () banked
  1604  00189C  6F88               	movwf	(printf@f+1)& (0+255),b
  1605  00189E  EC5F  F004         	call	_printf	;wreg free
  1606                           
  1607                           ;main.c: 95: setAngle(padServo[0], padAngle_OPEN);
  1608  0018A2  C0EE  F0DC         	movff	_padServo,setAngle@timer
  1609  0018A6  C0EF  F0DD         	movff	_padServo+1,setAngle@timer+1
  1610  0018AA  C0FC  F0DE         	movff	_padAngle_OPEN,setAngle@angle
  1611  0018AE  C0FD  F0DF         	movff	_padAngle_OPEN+1,setAngle@angle+1
  1612  0018B2  EC5C  F00C         	call	_setAngle	;wreg free
  1613  0018B6                     l116:
  1614  0018B6  D7FF               	goto	l116
  1615  0018B8                     __end_of_sortBattery:
  1616                           	opt stack 0
  1617                           tblptru	equ	0xFF8
  1618                           tblptrh	equ	0xFF7
  1619                           tblptrl	equ	0xFF6
  1620                           tablat	equ	0xFF5
  1621                           intcon	equ	0xFF2
  1622                           postinc0	equ	0xFEE
  1623                           wreg	equ	0xFE8
  1624                           postdec1	equ	0xFE5
  1625                           fsr1l	equ	0xFE1
  1626                           status	equ	0xFD8
  1627                           
  1628 ;; *************** function _stopServo *****************
  1629 ;; Defined at:
  1630 ;;		line 26 in file "servo.c"
  1631 ;; Parameters:    Size  Location     Type
  1632 ;;  timer           2    0[BANK0 ] int 
  1633 ;; Auto vars:     Size  Location     Type
  1634 ;;		None
  1635 ;; Return value:  Size  Location     Type
  1636 ;;                  1    wreg      void 
  1637 ;; Registers used:
  1638 ;;		wreg, status,2, status,0
  1639 ;; Tracked objects:
  1640 ;;		On entry : 0/0
  1641 ;;		On exit  : 0/0
  1642 ;;		Unchanged: 0/0
  1643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1644 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1646 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1647 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1648 ;;Total ram usage:        4 bytes
  1649 ;; Hardware stack levels used:    1
  1650 ;; Hardware stack levels required when called:    5
  1651 ;; This function calls:
  1652 ;;		Nothing
  1653 ;; This function is called by:
  1654 ;;		_sortBattery
  1655 ;; This function uses a non-reentrant model
  1656 ;;
  1657                           
  1658                           	psect	text2
  1659  001CB4                     __ptext2:
  1660                           	opt stack 0
  1661  001CB4                     _stopServo:
  1662                           	opt stack 24
  1663                           
  1664                           ;servo.c: 27: switch(timer){
  1665                           
  1666                           ;incstack = 0
  1667  001CB4  D00C               	goto	l3427
  1668  001CB6                     l3417:
  1669  001CB6  0E00               	movlw	0
  1670  001CB8  6ED5               	movwf	4053,c	;volatile
  1671  001CBA  0012               	return	
  1672  001CBC                     l3419:
  1673  001CBC  0E00               	movlw	0
  1674  001CBE  6ECD               	movwf	4045,c	;volatile
  1675  001CC0  0012               	return	
  1676  001CC2                     l3421:
  1677  001CC2  0E00               	movlw	0
  1678  001CC4  6ECA               	movwf	4042,c	;volatile
  1679  001CC6  0012               	return	
  1680  001CC8                     l3423:
  1681  001CC8  0E00               	movlw	0
  1682  001CCA  6EB1               	movwf	4017,c	;volatile
  1683                           
  1684                           ;servo.c: 32: }
  1685  001CCC  0012               	return	
  1686  001CCE                     l3427:
  1687  001CCE  C080  F082         	movff	stopServo@timer,??_stopServo
  1688  001CD2  C081  F083         	movff	stopServo@timer+1,??_stopServo+1
  1689                           
  1690                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1691                           ; Switch size 1, requested type "space"
  1692                           ; Number of cases is 1, Range of values is 0 to 0
  1693                           ; switch strategies available:
  1694                           ; Name         Instructions Cycles
  1695                           ; simple_byte            4     3 (average)
  1696                           ;	Chosen strategy is simple_byte
  1697  001CD6  0100               	movlb	0	; () banked
  1698  001CD8  5183               	movf	(??_stopServo+1)& (0+255),w,b
  1699  001CDA  0A00               	xorlw	0	; case 0
  1700  001CDC  A4D8               	btfss	status,2,c
  1701  001CDE  0012               	return	
  1702                           
  1703                           ; BSR set to: 0
  1704                           ; Switch size 1, requested type "space"
  1705                           ; Number of cases is 4, Range of values is 0 to 3
  1706                           ; switch strategies available:
  1707                           ; Name         Instructions Cycles
  1708                           ; simple_byte           13     7 (average)
  1709                           ;	Chosen strategy is simple_byte
  1710  001CE0  0100               	movlb	0	; () banked
  1711  001CE2  5182               	movf	??_stopServo& (0+255),w,b
  1712  001CE4  0A00               	xorlw	0	; case 0
  1713  001CE6  B4D8               	btfsc	status,2,c
  1714  001CE8  D7E6               	goto	l3417
  1715  001CEA  0A01               	xorlw	1	; case 1
  1716  001CEC  B4D8               	btfsc	status,2,c
  1717  001CEE  D7E6               	goto	l3419
  1718  001CF0  0A03               	xorlw	3	; case 2
  1719  001CF2  B4D8               	btfsc	status,2,c
  1720  001CF4  D7E6               	goto	l3421
  1721  001CF6  0A01               	xorlw	1	; case 3
  1722  001CF8  A4D8               	btfss	status,2,c
  1723  001CFA  0012               	return	
  1724  001CFC  D7E5               	goto	l3423
  1725  001CFE                     __end_of_stopServo:
  1726                           	opt stack 0
  1727                           tblptru	equ	0xFF8
  1728                           tblptrh	equ	0xFF7
  1729                           tblptrl	equ	0xFF6
  1730                           tablat	equ	0xFF5
  1731                           intcon	equ	0xFF2
  1732                           postinc0	equ	0xFEE
  1733                           wreg	equ	0xFE8
  1734                           postdec1	equ	0xFE5
  1735                           fsr1l	equ	0xFE1
  1736                           status	equ	0xFD8
  1737                           
  1738 ;; *************** function _digitalWrite *****************
  1739 ;; Defined at:
  1740 ;;		line 53 in file "iopin.c"
  1741 ;; Parameters:    Size  Location     Type
  1742 ;;  port            2    0[BANK0 ] int 
  1743 ;;  pin             2    2[BANK0 ] int 
  1744 ;;  val             2    4[BANK0 ] int 
  1745 ;; Auto vars:     Size  Location     Type
  1746 ;;		None
  1747 ;; Return value:  Size  Location     Type
  1748 ;;                  1    wreg      void 
  1749 ;; Registers used:
  1750 ;;		wreg, status,2, status,0
  1751 ;; Tracked objects:
  1752 ;;		On entry : 0/0
  1753 ;;		On exit  : 0/0
  1754 ;;		Unchanged: 0/0
  1755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1756 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1758 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1759 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1760 ;;Total ram usage:        9 bytes
  1761 ;; Hardware stack levels used:    1
  1762 ;; Hardware stack levels required when called:    5
  1763 ;; This function calls:
  1764 ;;		Nothing
  1765 ;; This function is called by:
  1766 ;;		_sortBattery
  1767 ;; This function uses a non-reentrant model
  1768 ;;
  1769                           
  1770                           	psect	text3
  1771  0013F8                     __ptext3:
  1772                           	opt stack 0
  1773  0013F8                     _digitalWrite:
  1774                           	opt stack 24
  1775                           
  1776                           ;iopin.c: 54: pin = 1 << pin;
  1777                           
  1778                           ;incstack = 0
  1779  0013F8  C082  F086         	movff	digitalWrite@pin,??_digitalWrite
  1780  0013FC  0E01               	movlw	1
  1781  0013FE  0100               	movlb	0	; () banked
  1782  001400  6F87               	movwf	(??_digitalWrite+1)& (0+255),b
  1783  001402  0E00               	movlw	0
  1784  001404  0100               	movlb	0	; () banked
  1785  001406  6F88               	movwf	(??_digitalWrite+2)& (0+255),b
  1786  001408  0100               	movlb	0	; () banked
  1787  00140A  2B86               	incf	??_digitalWrite& (0+255),f,b
  1788  00140C  D004               	goto	u3094
  1789  00140E                     u3095:
  1790  00140E  90D8               	bcf	status,0,c
  1791  001410  0100               	movlb	0	; () banked
  1792  001412  3787               	rlcf	(??_digitalWrite+1)& (0+255),f,b
  1793  001414  3788               	rlcf	(??_digitalWrite+2)& (0+255),f,b
  1794  001416                     u3094:
  1795  001416  0100               	movlb	0	; () banked
  1796  001418  2F86               	decfsz	??_digitalWrite& (0+255),f,b
  1797  00141A  D7F9               	goto	u3095
  1798  00141C  C087  F082         	movff	??_digitalWrite+1,digitalWrite@pin
  1799  001420  C088  F083         	movff	??_digitalWrite+2,digitalWrite@pin+1
  1800                           
  1801                           ;iopin.c: 55: if(val == 0){
  1802  001424  0100               	movlb	0	; () banked
  1803  001426  5184               	movf	digitalWrite@val& (0+255),w,b
  1804  001428  0100               	movlb	0	; () banked
  1805  00142A  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  1806  00142C  A4D8               	btfss	status,2,c
  1807  00142E  D03C               	goto	l3461
  1808                           
  1809                           ; BSR set to: 0
  1810                           ;iopin.c: 56: pin ^= 0xff;
  1811  001430  0EFF               	movlw	255
  1812  001432  0100               	movlb	0	; () banked
  1813  001434  1B82               	xorwf	digitalWrite@pin& (0+255),f,b
  1814                           
  1815                           ; BSR set to: 0
  1816                           ;iopin.c: 57: }
  1817                           ;iopin.c: 59: switch(port){
  1818  001436  D038               	goto	l3461
  1819  001438                     l3437:
  1820                           
  1821                           ; BSR set to: 0
  1822  001438  0100               	movlb	0	; () banked
  1823  00143A  0584               	decf	digitalWrite@val& (0+255),w,b
  1824  00143C  0100               	movlb	0	; () banked
  1825  00143E  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  1826  001440  A4D8               	btfss	status,2,c
  1827  001442  D004               	goto	l3441
  1828                           
  1829                           ; BSR set to: 0
  1830  001444  0100               	movlb	0	; () banked
  1831  001446  5182               	movf	digitalWrite@pin& (0+255),w,b
  1832  001448  1289               	iorwf	3977,f,c	;volatile
  1833  00144A  0012               	return	
  1834  00144C                     l3441:
  1835                           
  1836                           ; BSR set to: 0
  1837                           ;iopin.c: 61: else LATA &= pin;
  1838  00144C  0100               	movlb	0	; () banked
  1839  00144E  5182               	movf	digitalWrite@pin& (0+255),w,b
  1840  001450  1689               	andwf	3977,f,c	;volatile
  1841                           
  1842                           ; BSR set to: 0
  1843                           ;iopin.c: 62: break;
  1844  001452  0012               	return	
  1845  001454                     l3443:
  1846                           
  1847                           ; BSR set to: 0
  1848  001454  0100               	movlb	0	; () banked
  1849  001456  0584               	decf	digitalWrite@val& (0+255),w,b
  1850  001458  0100               	movlb	0	; () banked
  1851  00145A  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  1852  00145C  A4D8               	btfss	status,2,c
  1853  00145E  D004               	goto	l3447
  1854                           
  1855                           ; BSR set to: 0
  1856  001460  0100               	movlb	0	; () banked
  1857  001462  5182               	movf	digitalWrite@pin& (0+255),w,b
  1858  001464  128A               	iorwf	3978,f,c	;volatile
  1859  001466  0012               	return	
  1860  001468                     l3447:
  1861                           
  1862                           ; BSR set to: 0
  1863                           ;iopin.c: 64: else LATB &= pin;
  1864  001468  0100               	movlb	0	; () banked
  1865  00146A  5182               	movf	digitalWrite@pin& (0+255),w,b
  1866  00146C  168A               	andwf	3978,f,c	;volatile
  1867                           
  1868                           ; BSR set to: 0
  1869                           ;iopin.c: 65: break;
  1870  00146E  0012               	return	
  1871  001470                     l3449:
  1872                           
  1873                           ; BSR set to: 0
  1874  001470  0100               	movlb	0	; () banked
  1875  001472  0584               	decf	digitalWrite@val& (0+255),w,b
  1876  001474  0100               	movlb	0	; () banked
  1877  001476  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  1878  001478  A4D8               	btfss	status,2,c
  1879  00147A  D004               	goto	l3453
  1880                           
  1881                           ; BSR set to: 0
  1882  00147C  0100               	movlb	0	; () banked
  1883  00147E  5182               	movf	digitalWrite@pin& (0+255),w,b
  1884  001480  128B               	iorwf	3979,f,c	;volatile
  1885  001482  0012               	return	
  1886  001484                     l3453:
  1887                           
  1888                           ; BSR set to: 0
  1889                           ;iopin.c: 67: else LATC &= pin;
  1890  001484  0100               	movlb	0	; () banked
  1891  001486  5182               	movf	digitalWrite@pin& (0+255),w,b
  1892  001488  168B               	andwf	3979,f,c	;volatile
  1893                           
  1894                           ; BSR set to: 0
  1895                           ;iopin.c: 68: break;
  1896  00148A  0012               	return	
  1897  00148C                     l3455:
  1898                           
  1899                           ; BSR set to: 0
  1900  00148C  0100               	movlb	0	; () banked
  1901  00148E  0584               	decf	digitalWrite@val& (0+255),w,b
  1902  001490  0100               	movlb	0	; () banked
  1903  001492  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  1904  001494  A4D8               	btfss	status,2,c
  1905  001496  D004               	goto	l3459
  1906                           
  1907                           ; BSR set to: 0
  1908  001498  0100               	movlb	0	; () banked
  1909  00149A  5182               	movf	digitalWrite@pin& (0+255),w,b
  1910  00149C  128C               	iorwf	3980,f,c	;volatile
  1911  00149E  0012               	return	
  1912  0014A0                     l3459:
  1913                           
  1914                           ; BSR set to: 0
  1915                           ;iopin.c: 70: else LATD &= pin;
  1916  0014A0  0100               	movlb	0	; () banked
  1917  0014A2  5182               	movf	digitalWrite@pin& (0+255),w,b
  1918  0014A4  168C               	andwf	3980,f,c	;volatile
  1919                           
  1920                           ; BSR set to: 0
  1921                           ;iopin.c: 71: }
  1922  0014A6  0012               	return	
  1923  0014A8                     l3461:
  1924                           
  1925                           ; BSR set to: 0
  1926  0014A8  C080  F086         	movff	digitalWrite@port,??_digitalWrite
  1927  0014AC  C081  F087         	movff	digitalWrite@port+1,??_digitalWrite+1
  1928                           
  1929                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1930                           ; Switch size 1, requested type "space"
  1931                           ; Number of cases is 1, Range of values is 0 to 0
  1932                           ; switch strategies available:
  1933                           ; Name         Instructions Cycles
  1934                           ; simple_byte            4     3 (average)
  1935                           ;	Chosen strategy is simple_byte
  1936  0014B0  0100               	movlb	0	; () banked
  1937  0014B2  5187               	movf	(??_digitalWrite+1)& (0+255),w,b
  1938  0014B4  0A00               	xorlw	0	; case 0
  1939  0014B6  A4D8               	btfss	status,2,c
  1940  0014B8  0012               	return	
  1941                           
  1942                           ; BSR set to: 0
  1943                           ; Switch size 1, requested type "space"
  1944                           ; Number of cases is 4, Range of values is 0 to 3
  1945                           ; switch strategies available:
  1946                           ; Name         Instructions Cycles
  1947                           ; simple_byte           13     7 (average)
  1948                           ;	Chosen strategy is simple_byte
  1949  0014BA  0100               	movlb	0	; () banked
  1950  0014BC  5186               	movf	??_digitalWrite& (0+255),w,b
  1951  0014BE  0A00               	xorlw	0	; case 0
  1952  0014C0  B4D8               	btfsc	status,2,c
  1953  0014C2  D7BA               	goto	l3437
  1954  0014C4  0A01               	xorlw	1	; case 1
  1955  0014C6  B4D8               	btfsc	status,2,c
  1956  0014C8  D7C5               	goto	l3443
  1957  0014CA  0A03               	xorlw	3	; case 2
  1958  0014CC  B4D8               	btfsc	status,2,c
  1959  0014CE  D7D0               	goto	l3449
  1960  0014D0  0A01               	xorlw	1	; case 3
  1961  0014D2  A4D8               	btfss	status,2,c
  1962  0014D4  0012               	return	
  1963  0014D6  D7DA               	goto	l3455
  1964  0014D8                     __end_of_digitalWrite:
  1965                           	opt stack 0
  1966                           tblptru	equ	0xFF8
  1967                           tblptrh	equ	0xFF7
  1968                           tblptrl	equ	0xFF6
  1969                           tablat	equ	0xFF5
  1970                           intcon	equ	0xFF2
  1971                           postinc0	equ	0xFEE
  1972                           wreg	equ	0xFE8
  1973                           postdec1	equ	0xFE5
  1974                           fsr1l	equ	0xFE1
  1975                           status	equ	0xFD8
  1976                           
  1977 ;; *************** function _showInterface *****************
  1978 ;; Defined at:
  1979 ;;		line 137 in file "main.c"
  1980 ;; Parameters:    Size  Location     Type
  1981 ;;		None
  1982 ;; Auto vars:     Size  Location     Type
  1983 ;;  key             1   22[BANK0 ] unsigned char 
  1984 ;; Return value:  Size  Location     Type
  1985 ;;                  1    wreg      void 
  1986 ;; Registers used:
  1987 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1988 ;; Tracked objects:
  1989 ;;		On entry : 0/0
  1990 ;;		On exit  : 0/0
  1991 ;;		Unchanged: 0/0
  1992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1994 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1996 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1997 ;;Total ram usage:        1 bytes
  1998 ;; Hardware stack levels used:    1
  1999 ;; Hardware stack levels required when called:   11
  2000 ;; This function calls:
  2001 ;;		_dateTime
  2002 ;;		_mainMenu
  2003 ;;		_readKeypad
  2004 ;;		_runMenu
  2005 ;;		_runSelect
  2006 ;;		_runStats
  2007 ;;		_runTime
  2008 ;; This function is called by:
  2009 ;;		_main
  2010 ;; This function uses a non-reentrant model
  2011 ;;
  2012                           
  2013                           	psect	text4
  2014  001026                     __ptext4:
  2015                           	opt stack 0
  2016  001026                     _showInterface:
  2017                           	opt stack 19
  2018  001026                     
  2019                           ;main.c: 140: dateTime();
  2020  001026  ECCA  F00F         	call	_dateTime	;wreg free
  2021  00102A                     l3669:
  2022  00102A  EC40  F00F         	call	_readKeypad	;wreg free
  2023  00102E  0A41               	xorlw	65
  2024  001030  A4D8               	btfss	status,2,c
  2025  001032  D7FB               	goto	l3669
  2026  001034                     l3671:
  2027                           
  2028                           ;main.c: 145: mainMenu();
  2029  001034  ECB7  F00F         	call	_mainMenu	;wreg free
  2030  001038                     l3673:
  2031  001038  EC40  F00F         	call	_readKeypad	;wreg free
  2032  00103C  0100               	movlb	0	; () banked
  2033  00103E  6F96               	movwf	showInterface@key& (0+255),b
  2034                           
  2035                           ; BSR set to: 0
  2036                           ;main.c: 149: while(key != 'B' && key != 'C' && key != '*');
  2037  001040  0E42               	movlw	66
  2038  001042  0100               	movlb	0	; () banked
  2039  001044  1996               	xorwf	showInterface@key& (0+255),w,b
  2040  001046  B4D8               	btfsc	status,2,c
  2041  001048  D00A               	goto	l3681
  2042                           
  2043                           ; BSR set to: 0
  2044  00104A  0E43               	movlw	67
  2045  00104C  0100               	movlb	0	; () banked
  2046  00104E  1996               	xorwf	showInterface@key& (0+255),w,b
  2047  001050  B4D8               	btfsc	status,2,c
  2048  001052  D005               	goto	l3681
  2049                           
  2050                           ; BSR set to: 0
  2051  001054  0E2A               	movlw	42
  2052  001056  0100               	movlb	0	; () banked
  2053  001058  1996               	xorwf	showInterface@key& (0+255),w,b
  2054  00105A  A4D8               	btfss	status,2,c
  2055  00105C  D7ED               	goto	l3673
  2056  00105E                     l3681:
  2057                           
  2058                           ; BSR set to: 0
  2059                           ;main.c: 151: if(key == 'C'){
  2060  00105E  0E43               	movlw	67
  2061  001060  0100               	movlb	0	; () banked
  2062  001062  1996               	xorwf	showInterface@key& (0+255),w,b
  2063  001064  A4D8               	btfss	status,2,c
  2064  001066  D056               	goto	l3725
  2065                           
  2066                           ; BSR set to: 0
  2067                           ;main.c: 153: runSelect();
  2068  001068  ECA4  F00F         	call	_runSelect	;wreg free
  2069  00106C                     l3685:
  2070  00106C  EC40  F00F         	call	_readKeypad	;wreg free
  2071  001070  0100               	movlb	0	; () banked
  2072  001072  6F96               	movwf	showInterface@key& (0+255),b
  2073                           
  2074                           ; BSR set to: 0
  2075                           ;main.c: 159: while(key != '1' && key != '2' && key != '3' && key != '4' && key != '*');
  2076  001074  0E31               	movlw	49
  2077  001076  0100               	movlb	0	; () banked
  2078  001078  1996               	xorwf	showInterface@key& (0+255),w,b
  2079  00107A  B4D8               	btfsc	status,2,c
  2080  00107C  D014               	goto	l3697
  2081                           
  2082                           ; BSR set to: 0
  2083  00107E  0E32               	movlw	50
  2084  001080  0100               	movlb	0	; () banked
  2085  001082  1996               	xorwf	showInterface@key& (0+255),w,b
  2086  001084  B4D8               	btfsc	status,2,c
  2087  001086  D00F               	goto	l3697
  2088                           
  2089                           ; BSR set to: 0
  2090  001088  0E33               	movlw	51
  2091  00108A  0100               	movlb	0	; () banked
  2092  00108C  1996               	xorwf	showInterface@key& (0+255),w,b
  2093  00108E  B4D8               	btfsc	status,2,c
  2094  001090  D00A               	goto	l3697
  2095                           
  2096                           ; BSR set to: 0
  2097  001092  0E34               	movlw	52
  2098  001094  0100               	movlb	0	; () banked
  2099  001096  1996               	xorwf	showInterface@key& (0+255),w,b
  2100  001098  B4D8               	btfsc	status,2,c
  2101  00109A  D005               	goto	l3697
  2102                           
  2103                           ; BSR set to: 0
  2104  00109C  0E2A               	movlw	42
  2105  00109E  0100               	movlb	0	; () banked
  2106  0010A0  1996               	xorwf	showInterface@key& (0+255),w,b
  2107  0010A2  A4D8               	btfss	status,2,c
  2108  0010A4  D7E3               	goto	l3685
  2109  0010A6                     l3697:
  2110                           
  2111                           ; BSR set to: 0
  2112                           ;main.c: 161: if(key == '*')continue;
  2113  0010A6  0E2A               	movlw	42
  2114  0010A8  0100               	movlb	0	; () banked
  2115  0010AA  1996               	xorwf	showInterface@key& (0+255),w,b
  2116  0010AC  B4D8               	btfsc	status,2,c
  2117  0010AE  D7C2               	goto	l3671
  2118  0010B0                     l3701:
  2119                           
  2120                           ;main.c: 167: runMenu(key);
  2121  0010B0  0100               	movlb	0	; () banked
  2122  0010B2  5196               	movf	showInterface@key& (0+255),w,b
  2123  0010B4  EC27  F00F         	call	_runMenu
  2124  0010B8                     l3703:
  2125  0010B8  EC40  F00F         	call	_readKeypad	;wreg free
  2126  0010BC  0100               	movlb	0	; () banked
  2127  0010BE  6F96               	movwf	showInterface@key& (0+255),b
  2128                           
  2129                           ; BSR set to: 0
  2130                           ;main.c: 171: while(key != 'A' && key != 'B' && key != '*');
  2131  0010C0  0E41               	movlw	65
  2132  0010C2  0100               	movlb	0	; () banked
  2133  0010C4  1996               	xorwf	showInterface@key& (0+255),w,b
  2134  0010C6  B4D8               	btfsc	status,2,c
  2135  0010C8  D00A               	goto	l3711
  2136                           
  2137                           ; BSR set to: 0
  2138  0010CA  0E42               	movlw	66
  2139  0010CC  0100               	movlb	0	; () banked
  2140  0010CE  1996               	xorwf	showInterface@key& (0+255),w,b
  2141  0010D0  B4D8               	btfsc	status,2,c
  2142  0010D2  D005               	goto	l3711
  2143                           
  2144                           ; BSR set to: 0
  2145  0010D4  0E2A               	movlw	42
  2146  0010D6  0100               	movlb	0	; () banked
  2147  0010D8  1996               	xorwf	showInterface@key& (0+255),w,b
  2148  0010DA  A4D8               	btfss	status,2,c
  2149  0010DC  D7ED               	goto	l3703
  2150  0010DE                     l3711:
  2151                           
  2152                           ; BSR set to: 0
  2153                           ;main.c: 173: if(key == 'A'){
  2154  0010DE  0E41               	movlw	65
  2155  0010E0  0100               	movlb	0	; () banked
  2156  0010E2  1996               	xorwf	showInterface@key& (0+255),w,b
  2157  0010E4  A4D8               	btfss	status,2,c
  2158  0010E6  D003               	goto	l3715
  2159                           
  2160                           ; BSR set to: 0
  2161                           ;main.c: 175: runTime();
  2162  0010E8  EC7E  F00F         	call	_runTime	;wreg free
  2163                           
  2164                           ;main.c: 177: }
  2165  0010EC  D00D               	goto	l3723
  2166  0010EE                     l3715:
  2167                           
  2168                           ;main.c: 178: else if(key == 'B'){
  2169  0010EE  0E42               	movlw	66
  2170  0010F0  0100               	movlb	0	; () banked
  2171  0010F2  1996               	xorwf	showInterface@key& (0+255),w,b
  2172  0010F4  A4D8               	btfss	status,2,c
  2173  0010F6  D003               	goto	l3719
  2174                           
  2175                           ; BSR set to: 0
  2176                           ;main.c: 180: runStats();
  2177  0010F8  EC91  F00F         	call	_runStats	;wreg free
  2178                           
  2179                           ;main.c: 182: }
  2180  0010FC  D005               	goto	l3723
  2181  0010FE                     l3719:
  2182                           
  2183                           ;main.c: 183: else if(key == '*')break;
  2184  0010FE  0E2A               	movlw	42
  2185  001100  0100               	movlb	0	; () banked
  2186  001102  1996               	xorwf	showInterface@key& (0+255),w,b
  2187  001104  B4D8               	btfsc	status,2,c
  2188  001106  D796               	goto	l3671
  2189  001108                     l3723:
  2190  001108  EC40  F00F         	call	_readKeypad	;wreg free
  2191  00110C  0A2A               	xorlw	42
  2192  00110E  B4D8               	btfsc	status,2,c
  2193  001110  D7CF               	goto	l3701
  2194  001112  D7FA               	goto	l3723
  2195  001114                     l3725:
  2196                           
  2197                           ;main.c: 189: else if(key == 'B'){
  2198  001114  0E42               	movlw	66
  2199  001116  0100               	movlb	0	; () banked
  2200  001118  1996               	xorwf	showInterface@key& (0+255),w,b
  2201  00111A  B4D8               	btfsc	status,2,c
  2202  00111C  0012               	return	
  2203                           
  2204                           ; BSR set to: 0
  2205                           ;main.c: 192: else if(key == '*')
  2206                           
  2207                           ; BSR set to: 0
  2208                           
  2209                           ; BSR set to: 0
  2210                           ;main.c: 191: }
  2211                           
  2212                           ; BSR set to: 0
  2213                           ;main.c: 190: return;
  2214  00111E  0E2A               	movlw	42
  2215  001120  0100               	movlb	0	; () banked
  2216  001122  1996               	xorwf	showInterface@key& (0+255),w,b
  2217  001124  B4D8               	btfsc	status,2,c
  2218  001126  D77F               	goto	l3667
  2219  001128  D785               	goto	l3671
  2220  00112A                     __end_of_showInterface:
  2221                           	opt stack 0
  2222                           tblptru	equ	0xFF8
  2223                           tblptrh	equ	0xFF7
  2224                           tblptrl	equ	0xFF6
  2225                           tablat	equ	0xFF5
  2226                           intcon	equ	0xFF2
  2227                           postinc0	equ	0xFEE
  2228                           wreg	equ	0xFE8
  2229                           postdec1	equ	0xFE5
  2230                           fsr1l	equ	0xFE1
  2231                           status	equ	0xFD8
  2232                           
  2233 ;; *************** function _runTime *****************
  2234 ;; Defined at:
  2235 ;;		line 36 in file "interface.c"
  2236 ;; Parameters:    Size  Location     Type
  2237 ;;		None
  2238 ;; Auto vars:     Size  Location     Type
  2239 ;;		None
  2240 ;; Return value:  Size  Location     Type
  2241 ;;                  1    wreg      void 
  2242 ;; Registers used:
  2243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2244 ;; Tracked objects:
  2245 ;;		On entry : 0/0
  2246 ;;		On exit  : 0/0
  2247 ;;		Unchanged: 0/0
  2248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2253 ;;Total ram usage:        0 bytes
  2254 ;; Hardware stack levels used:    1
  2255 ;; Hardware stack levels required when called:   10
  2256 ;; This function calls:
  2257 ;;		_lcdClear
  2258 ;;		_printf
  2259 ;; This function is called by:
  2260 ;;		_showInterface
  2261 ;; This function uses a non-reentrant model
  2262 ;;
  2263                           
  2264                           	psect	text5
  2265  001EFC                     __ptext5:
  2266                           	opt stack 0
  2267  001EFC                     _runTime:
  2268                           	opt stack 19
  2269                           
  2270                           ;interface.c: 37: lcdClear();
  2271                           
  2272                           ; BSR set to: 0
  2273                           ;incstack = 0
  2274  001EFC  ECF3  F00F         	call	_lcdClear	;wreg free
  2275                           
  2276                           ;interface.c: 38: printf("time: nnn sec   \n");
  2277  001F00  0E3C               	movlw	low STR_14
  2278  001F02  0100               	movlb	0	; () banked
  2279  001F04  6F87               	movwf	printf@f& (0+255),b
  2280  001F06  0EFF               	movlw	high STR_14
  2281  001F08  0100               	movlb	0	; () banked
  2282  001F0A  6F88               	movwf	(printf@f+1)& (0+255),b
  2283  001F0C  EC5F  F004         	call	_printf	;wreg free
  2284                           
  2285                           ;interface.c: 39: printf("              *>");
  2286  001F10  0E71               	movlw	low STR_15
  2287  001F12  0100               	movlb	0	; () banked
  2288  001F14  6F87               	movwf	printf@f& (0+255),b
  2289  001F16  0EFF               	movlw	high STR_15
  2290  001F18  0100               	movlb	0	; () banked
  2291  001F1A  6F88               	movwf	(printf@f+1)& (0+255),b
  2292  001F1C  EC5F  F004         	call	_printf	;wreg free
  2293  001F20  0012               	return		;funcret
  2294  001F22                     __end_of_runTime:
  2295                           	opt stack 0
  2296                           tblptru	equ	0xFF8
  2297                           tblptrh	equ	0xFF7
  2298                           tblptrl	equ	0xFF6
  2299                           tablat	equ	0xFF5
  2300                           intcon	equ	0xFF2
  2301                           postinc0	equ	0xFEE
  2302                           wreg	equ	0xFE8
  2303                           postdec1	equ	0xFE5
  2304                           fsr1l	equ	0xFE1
  2305                           status	equ	0xFD8
  2306                           
  2307 ;; *************** function _runStats *****************
  2308 ;; Defined at:
  2309 ;;		line 42 in file "interface.c"
  2310 ;; Parameters:    Size  Location     Type
  2311 ;;		None
  2312 ;; Auto vars:     Size  Location     Type
  2313 ;;		None
  2314 ;; Return value:  Size  Location     Type
  2315 ;;                  1    wreg      void 
  2316 ;; Registers used:
  2317 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2318 ;; Tracked objects:
  2319 ;;		On entry : 0/0
  2320 ;;		On exit  : 0/0
  2321 ;;		Unchanged: 0/0
  2322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2327 ;;Total ram usage:        0 bytes
  2328 ;; Hardware stack levels used:    1
  2329 ;; Hardware stack levels required when called:   10
  2330 ;; This function calls:
  2331 ;;		_lcdClear
  2332 ;;		_printf
  2333 ;; This function is called by:
  2334 ;;		_showInterface
  2335 ;; This function uses a non-reentrant model
  2336 ;;
  2337                           
  2338                           	psect	text6
  2339  001F22                     __ptext6:
  2340                           	opt stack 0
  2341  001F22                     _runStats:
  2342                           	opt stack 19
  2343                           
  2344                           ;interface.c: 43: lcdClear();
  2345                           
  2346                           ;incstack = 0
  2347  001F22  ECF3  F00F         	call	_lcdClear	;wreg free
  2348                           
  2349                           ;interface.c: 44: printf("[AA,9V,C,other] \n");
  2350  001F26  0E4E               	movlw	low STR_16
  2351  001F28  0100               	movlb	0	; () banked
  2352  001F2A  6F87               	movwf	printf@f& (0+255),b
  2353  001F2C  0EFF               	movlw	high STR_16
  2354  001F2E  0100               	movlb	0	; () banked
  2355  001F30  6F88               	movwf	(printf@f+1)& (0+255),b
  2356  001F32  EC5F  F004         	call	_printf	;wreg free
  2357                           
  2358                           ;interface.c: 45: printf("[nn,n,n,nn]   *>");
  2359  001F36  0EB5               	movlw	low STR_17
  2360  001F38  0100               	movlb	0	; () banked
  2361  001F3A  6F87               	movwf	printf@f& (0+255),b
  2362  001F3C  0EFF               	movlw	high STR_17
  2363  001F3E  0100               	movlb	0	; () banked
  2364  001F40  6F88               	movwf	(printf@f+1)& (0+255),b
  2365  001F42  EC5F  F004         	call	_printf	;wreg free
  2366  001F46  0012               	return		;funcret
  2367  001F48                     __end_of_runStats:
  2368                           	opt stack 0
  2369                           tblptru	equ	0xFF8
  2370                           tblptrh	equ	0xFF7
  2371                           tblptrl	equ	0xFF6
  2372                           tablat	equ	0xFF5
  2373                           intcon	equ	0xFF2
  2374                           postinc0	equ	0xFEE
  2375                           wreg	equ	0xFE8
  2376                           postdec1	equ	0xFE5
  2377                           fsr1l	equ	0xFE1
  2378                           status	equ	0xFD8
  2379                           
  2380 ;; *************** function _runSelect *****************
  2381 ;; Defined at:
  2382 ;;		line 24 in file "interface.c"
  2383 ;; Parameters:    Size  Location     Type
  2384 ;;		None
  2385 ;; Auto vars:     Size  Location     Type
  2386 ;;		None
  2387 ;; Return value:  Size  Location     Type
  2388 ;;                  1    wreg      void 
  2389 ;; Registers used:
  2390 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2391 ;; Tracked objects:
  2392 ;;		On entry : 0/0
  2393 ;;		On exit  : 0/0
  2394 ;;		Unchanged: 0/0
  2395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2399 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2400 ;;Total ram usage:        0 bytes
  2401 ;; Hardware stack levels used:    1
  2402 ;; Hardware stack levels required when called:   10
  2403 ;; This function calls:
  2404 ;;		_lcdClear
  2405 ;;		_printf
  2406 ;; This function is called by:
  2407 ;;		_showInterface
  2408 ;; This function uses a non-reentrant model
  2409 ;;
  2410                           
  2411                           	psect	text7
  2412  001F48                     __ptext7:
  2413                           	opt stack 0
  2414  001F48                     _runSelect:
  2415                           	opt stack 19
  2416                           
  2417                           ;interface.c: 25: lcdClear();
  2418                           
  2419                           ;incstack = 0
  2420  001F48  ECF3  F00F         	call	_lcdClear	;wreg free
  2421                           
  2422                           ;interface.c: 26: printf("select run:     \n");
  2423  001F4C  0E2A               	movlw	low STR_10
  2424  001F4E  0100               	movlb	0	; () banked
  2425  001F50  6F87               	movwf	printf@f& (0+255),b
  2426  001F52  0EFF               	movlw	high STR_10
  2427  001F54  0100               	movlb	0	; () banked
  2428  001F56  6F88               	movwf	(printf@f+1)& (0+255),b
  2429  001F58  EC5F  F004         	call	_printf	;wreg free
  2430                           
  2431                           ;interface.c: 27: printf("[1,2,3,4]     *>");
  2432  001F5C  0E82               	movlw	low STR_11
  2433  001F5E  0100               	movlb	0	; () banked
  2434  001F60  6F87               	movwf	printf@f& (0+255),b
  2435  001F62  0EFF               	movlw	high STR_11
  2436  001F64  0100               	movlb	0	; () banked
  2437  001F66  6F88               	movwf	(printf@f+1)& (0+255),b
  2438  001F68  EC5F  F004         	call	_printf	;wreg free
  2439  001F6C  0012               	return		;funcret
  2440  001F6E                     __end_of_runSelect:
  2441                           	opt stack 0
  2442                           tblptru	equ	0xFF8
  2443                           tblptrh	equ	0xFF7
  2444                           tblptrl	equ	0xFF6
  2445                           tablat	equ	0xFF5
  2446                           intcon	equ	0xFF2
  2447                           postinc0	equ	0xFEE
  2448                           wreg	equ	0xFE8
  2449                           postdec1	equ	0xFE5
  2450                           fsr1l	equ	0xFE1
  2451                           status	equ	0xFD8
  2452                           
  2453 ;; *************** function _runMenu *****************
  2454 ;; Defined at:
  2455 ;;		line 30 in file "interface.c"
  2456 ;; Parameters:    Size  Location     Type
  2457 ;;  key             1    wreg     unsigned char 
  2458 ;; Auto vars:     Size  Location     Type
  2459 ;;  key             1   21[BANK0 ] unsigned char 
  2460 ;; Return value:  Size  Location     Type
  2461 ;;                  1    wreg      void 
  2462 ;; Registers used:
  2463 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2464 ;; Tracked objects:
  2465 ;;		On entry : 0/0
  2466 ;;		On exit  : 0/0
  2467 ;;		Unchanged: 0/0
  2468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2470 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2472 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2473 ;;Total ram usage:        1 bytes
  2474 ;; Hardware stack levels used:    1
  2475 ;; Hardware stack levels required when called:   10
  2476 ;; This function calls:
  2477 ;;		_lcdClear
  2478 ;;		_printf
  2479 ;; This function is called by:
  2480 ;;		_showInterface
  2481 ;; This function uses a non-reentrant model
  2482 ;;
  2483                           
  2484                           	psect	text8
  2485  001E4E                     __ptext8:
  2486                           	opt stack 0
  2487  001E4E                     _runMenu:
  2488                           	opt stack 19
  2489                           
  2490                           ;incstack = 0
  2491                           ;runMenu@key stored from wreg
  2492  001E4E  0100               	movlb	0	; () banked
  2493  001E50  6F95               	movwf	runMenu@key& (0+255),b
  2494                           
  2495                           ;interface.c: 31: lcdClear();
  2496  001E52  ECF3  F00F         	call	_lcdClear	;wreg free
  2497                           
  2498                           ;interface.c: 32: printf("%c) time  <A     \n",key);
  2499  001E56  0EF3               	movlw	low STR_12
  2500  001E58  0100               	movlb	0	; () banked
  2501  001E5A  6F87               	movwf	printf@f& (0+255),b
  2502  001E5C  0EFE               	movlw	high STR_12
  2503  001E5E  0100               	movlb	0	; () banked
  2504  001E60  6F88               	movwf	(printf@f+1)& (0+255),b
  2505  001E62  C095  F089         	movff	runMenu@key,?_printf+2
  2506  001E66  0100               	movlb	0	; () banked
  2507  001E68  6B8A               	clrf	(?_printf+3)& (0+255),b
  2508  001E6A  EC5F  F004         	call	_printf	;wreg free
  2509                           
  2510                           ;interface.c: 33: printf( "   stats <B   *>");
  2511  001E6E  0EA4               	movlw	low STR_13
  2512  001E70  0100               	movlb	0	; () banked
  2513  001E72  6F87               	movwf	printf@f& (0+255),b
  2514  001E74  0EFF               	movlw	high STR_13
  2515  001E76  0100               	movlb	0	; () banked
  2516  001E78  6F88               	movwf	(printf@f+1)& (0+255),b
  2517  001E7A  EC5F  F004         	call	_printf	;wreg free
  2518  001E7E  0012               	return		;funcret
  2519  001E80                     __end_of_runMenu:
  2520                           	opt stack 0
  2521                           tblptru	equ	0xFF8
  2522                           tblptrh	equ	0xFF7
  2523                           tblptrl	equ	0xFF6
  2524                           tablat	equ	0xFF5
  2525                           intcon	equ	0xFF2
  2526                           postinc0	equ	0xFEE
  2527                           wreg	equ	0xFE8
  2528                           postdec1	equ	0xFE5
  2529                           fsr1l	equ	0xFE1
  2530                           status	equ	0xFD8
  2531                           
  2532 ;; *************** function _readKeypad *****************
  2533 ;; Defined at:
  2534 ;;		line 35 in file "keypad.c"
  2535 ;; Parameters:    Size  Location     Type
  2536 ;;		None
  2537 ;; Auto vars:     Size  Location     Type
  2538 ;;  key             1    0[BANK0 ] unsigned char 
  2539 ;; Return value:  Size  Location     Type
  2540 ;;                  1    wreg      unsigned char 
  2541 ;; Registers used:
  2542 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  2543 ;; Tracked objects:
  2544 ;;		On entry : 0/0
  2545 ;;		On exit  : 0/0
  2546 ;;		Unchanged: 0/0
  2547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2549 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2551 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2552 ;;Total ram usage:        1 bytes
  2553 ;; Hardware stack levels used:    1
  2554 ;; Hardware stack levels required when called:    5
  2555 ;; This function calls:
  2556 ;;		Nothing
  2557 ;; This function is called by:
  2558 ;;		_sortBattery
  2559 ;;		_showInterface
  2560 ;; This function uses a non-reentrant model
  2561 ;;
  2562                           
  2563                           	psect	text9
  2564  001E80                     __ptext9:
  2565                           	opt stack 0
  2566  001E80                     _readKeypad:
  2567                           	opt stack 24
  2568  001E80                     l229:
  2569  001E80  A281               	btfss	3969,1,c	;volatile
  2570  001E82  D7FE               	goto	l229
  2571                           
  2572                           ;keypad.c: 37: char key = (PORTB & 0xF0) >> 4;
  2573  001E84  3881               	swapf	3969,w,c	;volatile
  2574  001E86  0B0F               	andlw	15
  2575  001E88  0B0F               	andlw	15
  2576  001E8A  0100               	movlb	0	; () banked
  2577  001E8C  6F80               	movwf	readKeypad@key& (0+255),b
  2578  001E8E                     l232:
  2579  001E8E  B281               	btfsc	3969,1,c	;volatile
  2580  001E90  D7FE               	goto	l232
  2581                           
  2582                           ;keypad.c: 39: return keys[key];
  2583  001E92  0100               	movlb	0	; () banked
  2584  001E94  5180               	movf	readKeypad@key& (0+255),w,b
  2585  001E96  0D01               	mullw	1
  2586  001E98  0ED3               	movlw	low _keys
  2587  001E9A  24F3               	addwf	prodl,w,c
  2588  001E9C  6EF6               	movwf	tblptrl,c
  2589  001E9E  0EFE               	movlw	high _keys
  2590  001EA0  20F4               	addwfc	prodh,w,c
  2591  001EA2  6EF7               	movwf	tblptrh,c
  2592  001EA4                     	if	0	;There are less than 3 active tblptr bytes
  2593  001EA4                     	endif
  2594  001EA4  0008               	tblrd		*
  2595  001EA6  50F5               	movf	tablat,w,c
  2596  001EA8  0012               	return	
  2597  001EAA                     __end_of_readKeypad:
  2598                           	opt stack 0
  2599                           tblptru	equ	0xFF8
  2600                           tblptrh	equ	0xFF7
  2601                           tblptrl	equ	0xFF6
  2602                           tablat	equ	0xFF5
  2603                           prodh	equ	0xFF4
  2604                           prodl	equ	0xFF3
  2605                           intcon	equ	0xFF2
  2606                           postinc0	equ	0xFEE
  2607                           wreg	equ	0xFE8
  2608                           postdec1	equ	0xFE5
  2609                           fsr1l	equ	0xFE1
  2610                           status	equ	0xFD8
  2611                           
  2612 ;; *************** function _mainMenu *****************
  2613 ;; Defined at:
  2614 ;;		line 18 in file "interface.c"
  2615 ;; Parameters:    Size  Location     Type
  2616 ;;		None
  2617 ;; Auto vars:     Size  Location     Type
  2618 ;;		None
  2619 ;; Return value:  Size  Location     Type
  2620 ;;                  1    wreg      void 
  2621 ;; Registers used:
  2622 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2623 ;; Tracked objects:
  2624 ;;		On entry : 0/0
  2625 ;;		On exit  : 0/0
  2626 ;;		Unchanged: 0/0
  2627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2632 ;;Total ram usage:        0 bytes
  2633 ;; Hardware stack levels used:    1
  2634 ;; Hardware stack levels required when called:   10
  2635 ;; This function calls:
  2636 ;;		_lcdClear
  2637 ;;		_printf
  2638 ;; This function is called by:
  2639 ;;		_showInterface
  2640 ;; This function uses a non-reentrant model
  2641 ;;
  2642                           
  2643                           	psect	text10
  2644  001F6E                     __ptext10:
  2645                           	opt stack 0
  2646  001F6E                     _mainMenu:
  2647                           	opt stack 19
  2648                           
  2649                           ;interface.c: 19: lcdClear();
  2650                           
  2651                           ; BSR set to: 0
  2652                           ;incstack = 0
  2653  001F6E  ECF3  F00F         	call	_lcdClear	;wreg free
  2654                           
  2655                           ;interface.c: 20: printf("start   <B      \n");
  2656  001F72  0E06               	movlw	low STR_8
  2657  001F74  0100               	movlb	0	; () banked
  2658  001F76  6F87               	movwf	printf@f& (0+255),b
  2659  001F78  0EFF               	movlw	high STR_8
  2660  001F7A  0100               	movlb	0	; () banked
  2661  001F7C  6F88               	movwf	(printf@f+1)& (0+255),b
  2662  001F7E  EC5F  F004         	call	_printf	;wreg free
  2663                           
  2664                           ;interface.c: 21: printf("history <C    *>");
  2665  001F82  0E93               	movlw	low STR_9
  2666  001F84  0100               	movlb	0	; () banked
  2667  001F86  6F87               	movwf	printf@f& (0+255),b
  2668  001F88  0EFF               	movlw	high STR_9
  2669  001F8A  0100               	movlb	0	; () banked
  2670  001F8C  6F88               	movwf	(printf@f+1)& (0+255),b
  2671  001F8E  EC5F  F004         	call	_printf	;wreg free
  2672  001F92  0012               	return		;funcret
  2673  001F94                     __end_of_mainMenu:
  2674                           	opt stack 0
  2675                           tblptru	equ	0xFF8
  2676                           tblptrh	equ	0xFF7
  2677                           tblptrl	equ	0xFF6
  2678                           tablat	equ	0xFF5
  2679                           prodh	equ	0xFF4
  2680                           prodl	equ	0xFF3
  2681                           intcon	equ	0xFF2
  2682                           postinc0	equ	0xFEE
  2683                           wreg	equ	0xFE8
  2684                           postdec1	equ	0xFE5
  2685                           fsr1l	equ	0xFE1
  2686                           status	equ	0xFD8
  2687                           
  2688 ;; *************** function _dateTime *****************
  2689 ;; Defined at:
  2690 ;;		line 12 in file "interface.c"
  2691 ;; Parameters:    Size  Location     Type
  2692 ;;		None
  2693 ;; Auto vars:     Size  Location     Type
  2694 ;;		None
  2695 ;; Return value:  Size  Location     Type
  2696 ;;                  1    wreg      void 
  2697 ;; Registers used:
  2698 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2699 ;; Tracked objects:
  2700 ;;		On entry : 0/0
  2701 ;;		On exit  : 0/0
  2702 ;;		Unchanged: 0/0
  2703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2707 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2708 ;;Total ram usage:        0 bytes
  2709 ;; Hardware stack levels used:    1
  2710 ;; Hardware stack levels required when called:   10
  2711 ;; This function calls:
  2712 ;;		_lcdClear
  2713 ;;		_printf
  2714 ;; This function is called by:
  2715 ;;		_showInterface
  2716 ;; This function uses a non-reentrant model
  2717 ;;
  2718                           
  2719                           	psect	text11
  2720  001F94                     __ptext11:
  2721                           	opt stack 0
  2722  001F94                     _dateTime:
  2723                           	opt stack 19
  2724                           
  2725                           ;interface.c: 13: lcdClear();
  2726                           
  2727                           ;incstack = 0
  2728  001F94  ECF3  F00F         	call	_lcdClear	;wreg free
  2729                           
  2730                           ;interface.c: 14: printf("  hh:mm:ss      \n");
  2731  001F98  0E18               	movlw	low STR_6
  2732  001F9A  0100               	movlb	0	; () banked
  2733  001F9C  6F87               	movwf	printf@f& (0+255),b
  2734  001F9E  0EFF               	movlw	high STR_6
  2735  001FA0  0100               	movlb	0	; () banked
  2736  001FA2  6F88               	movwf	(printf@f+1)& (0+255),b
  2737  001FA4  EC5F  F004         	call	_printf	;wreg free
  2738                           
  2739                           ;interface.c: 15: printf("  mm:dd:yy    A>");
  2740  001FA8  0EC6               	movlw	low STR_7
  2741  001FAA  0100               	movlb	0	; () banked
  2742  001FAC  6F87               	movwf	printf@f& (0+255),b
  2743  001FAE  0EFF               	movlw	high STR_7
  2744  001FB0  0100               	movlb	0	; () banked
  2745  001FB2  6F88               	movwf	(printf@f+1)& (0+255),b
  2746  001FB4  EC5F  F004         	call	_printf	;wreg free
  2747  001FB8  0012               	return		;funcret
  2748  001FBA                     __end_of_dateTime:
  2749                           	opt stack 0
  2750                           tblptru	equ	0xFF8
  2751                           tblptrh	equ	0xFF7
  2752                           tblptrl	equ	0xFF6
  2753                           tablat	equ	0xFF5
  2754                           prodh	equ	0xFF4
  2755                           prodl	equ	0xFF3
  2756                           intcon	equ	0xFF2
  2757                           postinc0	equ	0xFEE
  2758                           wreg	equ	0xFE8
  2759                           postdec1	equ	0xFE5
  2760                           fsr1l	equ	0xFE1
  2761                           status	equ	0xFD8
  2762                           
  2763 ;; *************** function _printf *****************
  2764 ;; Defined at:
  2765 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  2766 ;; Parameters:    Size  Location     Type
  2767 ;;  f               2    7[BANK0 ] PTR const unsigned char 
  2768 ;;		 -> STR_17(17), STR_16(18), STR_15(17), STR_14(18), 
  2769 ;;		 -> STR_13(17), STR_12(19), STR_11(17), STR_10(18), 
  2770 ;;		 -> STR_9(17), STR_8(18), STR_7(17), STR_6(18), 
  2771 ;;		 -> STR_5(9), STR_4(8), STR_3(6), STR_2(6), 
  2772 ;;		 -> STR_1(11), 
  2773 ;; Auto vars:     Size  Location     Type
  2774 ;;  idx             1   14[BANK0 ] unsigned char 
  2775 ;;  tmpval          4    0        struct .
  2776 ;;  cp              3    0        PTR const unsigned char 
  2777 ;;  ap              2   18[BANK0 ] PTR void [1]
  2778 ;;		 -> ?_printf(2), 
  2779 ;;  val             2   15[BANK0 ] unsigned int 
  2780 ;;  len             2    0        unsigned int 
  2781 ;;  c               1   20[BANK0 ] char 
  2782 ;;  prec            1   17[BANK0 ] char 
  2783 ;;  flag            1   13[BANK0 ] unsigned char 
  2784 ;; Return value:  Size  Location     Type
  2785 ;;                  2    7[BANK0 ] int 
  2786 ;; Registers used:
  2787 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2788 ;; Tracked objects:
  2789 ;;		On entry : 0/0
  2790 ;;		On exit  : 0/0
  2791 ;;		Unchanged: 0/0
  2792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2793 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2794 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2796 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2797 ;;Total ram usage:       14 bytes
  2798 ;; Hardware stack levels used:    1
  2799 ;; Hardware stack levels required when called:    9
  2800 ;; This function calls:
  2801 ;;		___lwdiv
  2802 ;;		_putch
  2803 ;; This function is called by:
  2804 ;;		_sortBattery
  2805 ;;		_dateTime
  2806 ;;		_mainMenu
  2807 ;;		_runSelect
  2808 ;;		_runMenu
  2809 ;;		_runTime
  2810 ;;		_runStats
  2811 ;;		_testFrequency
  2812 ;; This function uses a non-reentrant model
  2813 ;;
  2814                           
  2815                           	psect	text12
  2816  0008BE                     __ptext12:
  2817                           	opt stack 0
  2818  0008BE                     _printf:
  2819                           	opt stack 20
  2820                           
  2821                           ;doprnt.c: 466: va_list ap;
  2822                           ;doprnt.c: 499: signed char c;
  2823                           ;doprnt.c: 506: signed char prec;
  2824                           ;doprnt.c: 508: unsigned char flag;
  2825                           ;doprnt.c: 523: union {
  2826                           ;doprnt.c: 524: unsigned long vd;
  2827                           ;doprnt.c: 525: double integ;
  2828                           ;doprnt.c: 526: } tmpval;
  2829                           ;doprnt.c: 528: unsigned int val;
  2830                           ;doprnt.c: 529: unsigned len;
  2831                           ;doprnt.c: 530: const char * cp;
  2832                           ;doprnt.c: 533: *ap = __va_start();
  2833                           
  2834                           ;incstack = 0
  2835  0008BE  0E89               	movlw	low (?_printf+2)
  2836  0008C0  0100               	movlb	0	; () banked
  2837  0008C2  6F92               	movwf	printf@ap& (0+255),b
  2838  0008C4  0E00               	movlw	high (?_printf+2)
  2839  0008C6  0100               	movlb	0	; () banked
  2840  0008C8  6F93               	movwf	(printf@ap+1)& (0+255),b
  2841                           
  2842                           ;doprnt.c: 536: while(c = *f++) {
  2843  0008CA  D092               	goto	l3167
  2844  0008CC                     l3127:
  2845                           
  2846                           ; BSR set to: 0
  2847                           ;doprnt.c: 538: if(c != '%')
  2848  0008CC  0E25               	movlw	37
  2849  0008CE  0100               	movlb	0	; () banked
  2850  0008D0  1994               	xorwf	printf@c& (0+255),w,b
  2851  0008D2  B4D8               	btfsc	status,2,c
  2852  0008D4  D005               	goto	l3131
  2853                           
  2854                           ; BSR set to: 0
  2855                           ;doprnt.c: 540: {
  2856                           ;doprnt.c: 541: (putch(c) );
  2857  0008D6  0100               	movlb	0	; () banked
  2858  0008D8  5194               	movf	printf@c& (0+255),w,b
  2859  0008DA  EC6A  F00F         	call	_putch
  2860                           
  2861                           ;doprnt.c: 542: continue;
  2862  0008DE  D088               	goto	l3167
  2863  0008E0                     l3131:
  2864                           
  2865                           ;doprnt.c: 543: }
  2866                           ;doprnt.c: 548: flag = 0;
  2867  0008E0  0E00               	movlw	0
  2868  0008E2  0100               	movlb	0	; () banked
  2869  0008E4  6F8D               	movwf	printf@flag& (0+255),b
  2870                           
  2871                           ;doprnt.c: 635: switch(c = *f++) {
  2872  0008E6  D011               	goto	l3141
  2873  0008E8                     l3133:
  2874                           
  2875                           ; BSR set to: 0
  2876                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2877  0008E8  C092  FFD9         	movff	printf@ap,fsr2l
  2878  0008EC  C093  FFDA         	movff	printf@ap+1,fsr2h
  2879  0008F0  50DF               	movf	indf2,w,c
  2880  0008F2  0100               	movlb	0	; () banked
  2881  0008F4  6F94               	movwf	printf@c& (0+255),b
  2882                           
  2883                           ; BSR set to: 0
  2884  0008F6  0E02               	movlw	2
  2885  0008F8  0100               	movlb	0	; () banked
  2886  0008FA  2792               	addwf	printf@ap& (0+255),f,b
  2887  0008FC  0E00               	movlw	0
  2888  0008FE  2393               	addwfc	(printf@ap+1)& (0+255),f,b
  2889  000900                     l3137:
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;doprnt.c: 809: (putch(c) );
  2893  000900  0100               	movlb	0	; () banked
  2894  000902  5194               	movf	printf@c& (0+255),w,b
  2895  000904  EC6A  F00F         	call	_putch
  2896                           
  2897                           ;doprnt.c: 810: continue;
  2898  000908  D073               	goto	l3167
  2899  00090A                     l3141:
  2900  00090A  C087  FFF6         	movff	printf@f,tblptrl
  2901  00090E  C088  FFF7         	movff	printf@f+1,tblptrh
  2902  000912  0100               	movlb	0	; () banked
  2903  000914  4B87               	infsnz	printf@f& (0+255),f,b
  2904  000916  2B88               	incf	(printf@f+1)& (0+255),f,b
  2905  000918                     	if	0	;tblptru may be non-zero
  2906  000918                     	endif
  2907  000918                     	if	0	;tblptru may be non-zero
  2908  000918                     	endif
  2909  000918  0008               	tblrd		*
  2910  00091A  CFF5 F094          	movff	tablat,printf@c
  2911  00091E  0100               	movlb	0	; () banked
  2912  000920  5194               	movf	printf@c& (0+255),w,b
  2913                           
  2914                           ; Switch size 1, requested type "space"
  2915                           ; Number of cases is 3, Range of values is 0 to 120
  2916                           ; switch strategies available:
  2917                           ; Name         Instructions Cycles
  2918                           ; simple_byte           10     6 (average)
  2919                           ;	Chosen strategy is simple_byte
  2920  000922  0A00               	xorlw	0	; case 0
  2921  000924  B4D8               	btfsc	status,2,c
  2922  000926  0012               	return	
  2923  000928  0A63               	xorlw	99	; case 99
  2924  00092A  B4D8               	btfsc	status,2,c
  2925  00092C  D7DD               	goto	l3133
  2926  00092E  0A1B               	xorlw	27	; case 120
  2927  000930  A4D8               	btfss	status,2,c
  2928  000932  D7E6               	goto	l3137
  2929                           
  2930                           ;doprnt.c: 1273: {
  2931                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2932                           
  2933                           ; BSR set to: 0
  2934  000934  C092  FFD9         	movff	printf@ap,fsr2l
  2935  000938  C093  FFDA         	movff	printf@ap+1,fsr2h
  2936  00093C  CFDE F08F          	movff	postinc2,printf@val
  2937  000940  CFDD F090          	movff	postdec2,printf@val+1
  2938  000944  0E02               	movlw	2
  2939  000946  0100               	movlb	0	; () banked
  2940  000948  2792               	addwf	printf@ap& (0+255),f,b
  2941  00094A  0E00               	movlw	0
  2942  00094C  2393               	addwfc	(printf@ap+1)& (0+255),f,b
  2943                           
  2944                           ; BSR set to: 0
  2945                           ;doprnt.c: 1287: }
  2946                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2947  00094E  0E01               	movlw	1
  2948  000950  0100               	movlb	0	; () banked
  2949  000952  6F94               	movwf	printf@c& (0+255),b
  2950  000954                     l3149:
  2951                           
  2952                           ; BSR set to: 0
  2953  000954  0E04               	movlw	4
  2954  000956  0100               	movlb	0	; () banked
  2955  000958  1994               	xorwf	printf@c& (0+255),w,b
  2956  00095A  B4D8               	btfsc	status,2,c
  2957  00095C  D016               	goto	l615
  2958                           
  2959                           ; BSR set to: 0
  2960                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2961                           
  2962                           ; BSR set to: 0
  2963                           
  2964                           ; BSR set to: 0
  2965  00095E  0100               	movlb	0	; () banked
  2966  000960  5194               	movf	printf@c& (0+255),w,b
  2967  000962  0D02               	mullw	2
  2968  000964  0EE4               	movlw	low _hexpowers
  2969  000966  24F3               	addwf	prodl,w,c
  2970  000968  6EF6               	movwf	tblptrl,c
  2971  00096A  0EFE               	movlw	high _hexpowers
  2972  00096C  20F4               	addwfc	prodh,w,c
  2973  00096E  6EF7               	movwf	tblptrh,c
  2974  000970                     	if	0	;There are less than 3 active tblptr bytes
  2975  000970                     	endif
  2976  000970  0009               	tblrd		*+
  2977  000972  50F5               	movf	tablat,w,c
  2978  000974  0100               	movlb	0	; () banked
  2979  000976  5D8F               	subwf	printf@val& (0+255),w,b
  2980  000978  0009               	tblrd		*+
  2981  00097A  50F5               	movf	tablat,w,c
  2982  00097C  0100               	movlb	0	; () banked
  2983  00097E  5990               	subwfb	(printf@val+1)& (0+255),w,b
  2984  000980  A0D8               	btfss	status,0,c
  2985  000982  D003               	goto	l615
  2986                           
  2987                           ; BSR set to: 0
  2988                           
  2989                           ; BSR set to: 0
  2990                           
  2991                           ; BSR set to: 0
  2992                           ;doprnt.c: 1318: break;
  2993  000984  0100               	movlb	0	; () banked
  2994  000986  2B94               	incf	printf@c& (0+255),f,b
  2995  000988  D7E5               	goto	l3149
  2996  00098A                     l615:
  2997                           
  2998                           ; BSR set to: 0
  2999                           ;doprnt.c: 1422: {
  3000                           ;doprnt.c: 1469: }
  3001                           ;doprnt.c: 1472: prec = c;
  3002  00098A  C094  F091         	movff	printf@c,printf@prec
  3003                           
  3004                           ;doprnt.c: 1474: while(prec--) {
  3005  00098E  D02A               	goto	l617
  3006  000990                     l3161:
  3007                           
  3008                           ; BSR set to: 0
  3009                           ;doprnt.c: 1478: {
  3010                           ;doprnt.c: 1499: {
  3011                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3012  000990  C08F  F080         	movff	printf@val,___lwdiv@dividend
  3013  000994  C090  F081         	movff	printf@val+1,___lwdiv@dividend+1
  3014  000998  0100               	movlb	0	; () banked
  3015  00099A  5191               	movf	printf@prec& (0+255),w,b
  3016  00099C  0D02               	mullw	2
  3017  00099E  0EE4               	movlw	low _hexpowers
  3018  0009A0  24F3               	addwf	prodl,w,c
  3019  0009A2  6EF6               	movwf	tblptrl,c
  3020  0009A4  0EFE               	movlw	high _hexpowers
  3021  0009A6  20F4               	addwfc	prodh,w,c
  3022  0009A8  6EF7               	movwf	tblptrh,c
  3023  0009AA                     	if	0	;There are less than 3 active tblptr bytes
  3024  0009AA                     	endif
  3025  0009AA  0009               	tblrd		*+
  3026  0009AC  CFF5 F082          	movff	tablat,___lwdiv@divisor
  3027  0009B0  000A               	tblrd		*-
  3028  0009B2  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  3029  0009B6  EC24  F00D         	call	___lwdiv	;wreg free
  3030  0009BA  0100               	movlb	0	; () banked
  3031  0009BC  5180               	movf	?___lwdiv& (0+255),w,b
  3032  0009BE  0B0F               	andlw	15
  3033  0009C0  0100               	movlb	0	; () banked
  3034  0009C2  6F8E               	movwf	printf@idx& (0+255),b
  3035                           
  3036                           ; BSR set to: 0
  3037                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3038  0009C4  0100               	movlb	0	; () banked
  3039  0009C6  518E               	movf	printf@idx& (0+255),w,b
  3040  0009C8  0D01               	mullw	1
  3041  0009CA  0E60               	movlw	low STR_18
  3042  0009CC  24F3               	addwf	prodl,w,c
  3043  0009CE  6EF6               	movwf	tblptrl,c
  3044  0009D0  0EFF               	movlw	high STR_18
  3045  0009D2  20F4               	addwfc	prodh,w,c
  3046  0009D4  6EF7               	movwf	tblptrh,c
  3047  0009D6                     	if	0	;There are less than 3 active tblptr bytes
  3048  0009D6                     	endif
  3049  0009D6  0008               	tblrd		*
  3050  0009D8  CFF5 F094          	movff	tablat,printf@c
  3051                           
  3052                           ; BSR set to: 0
  3053                           ;doprnt.c: 1508: }
  3054                           ;doprnt.c: 1523: }
  3055                           ;doprnt.c: 1524: (putch(c) );
  3056  0009DC  0100               	movlb	0	; () banked
  3057  0009DE  5194               	movf	printf@c& (0+255),w,b
  3058  0009E0  EC6A  F00F         	call	_putch
  3059  0009E4                     l617:
  3060  0009E4  0100               	movlb	0	; () banked
  3061  0009E6  0791               	decf	printf@prec& (0+255),f,b
  3062  0009E8  0100               	movlb	0	; () banked
  3063  0009EA  2991               	incf	printf@prec& (0+255),w,b
  3064  0009EC  A4D8               	btfss	status,2,c
  3065  0009EE  D7D0               	goto	l3161
  3066  0009F0                     l3167:
  3067  0009F0  C087  FFF6         	movff	printf@f,tblptrl
  3068  0009F4  C088  FFF7         	movff	printf@f+1,tblptrh
  3069  0009F8  0100               	movlb	0	; () banked
  3070  0009FA  4B87               	infsnz	printf@f& (0+255),f,b
  3071  0009FC  2B88               	incf	(printf@f+1)& (0+255),f,b
  3072  0009FE                     	if	0	;tblptru may be non-zero
  3073  0009FE                     	endif
  3074  0009FE                     	if	0	;tblptru may be non-zero
  3075  0009FE                     	endif
  3076  0009FE  0008               	tblrd		*
  3077  000A00  CFF5 F094          	movff	tablat,printf@c
  3078  000A04  0100               	movlb	0	; () banked
  3079  000A06  5194               	movf	printf@c& (0+255),w,b
  3080  000A08  B4D8               	btfsc	status,2,c
  3081  000A0A  0012               	return	
  3082  000A0C  D75F               	goto	l3127
  3083  000A0E                     __end_of_printf:
  3084                           	opt stack 0
  3085                           tblptru	equ	0xFF8
  3086                           tblptrh	equ	0xFF7
  3087                           tblptrl	equ	0xFF6
  3088                           tablat	equ	0xFF5
  3089                           prodh	equ	0xFF4
  3090                           prodl	equ	0xFF3
  3091                           intcon	equ	0xFF2
  3092                           postinc0	equ	0xFEE
  3093                           wreg	equ	0xFE8
  3094                           postdec1	equ	0xFE5
  3095                           fsr1l	equ	0xFE1
  3096                           indf2	equ	0xFDF
  3097                           postinc2	equ	0xFDE
  3098                           postdec2	equ	0xFDD
  3099                           fsr2h	equ	0xFDA
  3100                           fsr2l	equ	0xFD9
  3101                           status	equ	0xFD8
  3102                           
  3103 ;; *************** function _putch *****************
  3104 ;; Defined at:
  3105 ;;		line 35 in file "lcd.c"
  3106 ;; Parameters:    Size  Location     Type
  3107 ;;  data            1    wreg     unsigned char 
  3108 ;; Auto vars:     Size  Location     Type
  3109 ;;  data            1    4[BANK0 ] unsigned char 
  3110 ;; Return value:  Size  Location     Type
  3111 ;;                  1    wreg      void 
  3112 ;; Registers used:
  3113 ;;		wreg, status,2, status,0, cstack
  3114 ;; Tracked objects:
  3115 ;;		On entry : 0/0
  3116 ;;		On exit  : 0/0
  3117 ;;		Unchanged: 0/0
  3118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3120 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3122 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3123 ;;Total ram usage:        1 bytes
  3124 ;; Hardware stack levels used:    1
  3125 ;; Hardware stack levels required when called:    8
  3126 ;; This function calls:
  3127 ;;		_lcdNewline
  3128 ;;		_lcdNibble
  3129 ;; This function is called by:
  3130 ;;		_printf
  3131 ;; This function uses a non-reentrant model
  3132 ;;
  3133                           
  3134                           	psect	text13
  3135  001ED4                     __ptext13:
  3136                           	opt stack 0
  3137  001ED4                     _putch:
  3138                           	opt stack 20
  3139                           
  3140                           ; BSR set to: 0
  3141                           ;incstack = 0
  3142                           ;putch@data stored from wreg
  3143  001ED4  0100               	movlb	0	; () banked
  3144  001ED6  6F84               	movwf	putch@data& (0+255),b
  3145                           
  3146                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  3147  001ED8  0E0A               	movlw	10
  3148  001EDA  0100               	movlb	0	; () banked
  3149  001EDC  1984               	xorwf	putch@data& (0+255),w,b
  3150  001EDE  A4D8               	btfss	status,2,c
  3151  001EE0  D003               	goto	l195
  3152                           
  3153                           ; BSR set to: 0
  3154  001EE2  ECEF  F00F         	call	_lcdNewline	;wreg free
  3155  001EE6  0012               	return	
  3156  001EE8                     l195:
  3157                           
  3158                           ; BSR set to: 0
  3159                           ;lcd.c: 37: else
  3160                           ;lcd.c: 38: {
  3161                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  3162  001EE8  848C               	bsf	3980,2,c	;volatile
  3163                           
  3164                           ; BSR set to: 0
  3165                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  3166  001EEA  0E74               	movlw	116
  3167  001EEC                     u3727:
  3168  001EEC  2EE8               	decfsz	wreg,f,c
  3169  001EEE  D7FE               	bra	u3727
  3170  001EF0  D000               	nop2	
  3171                           
  3172                           ;lcd.c: 41: lcdNibble(data);
  3173  001EF2  0100               	movlb	0	; () banked
  3174  001EF4  5184               	movf	putch@data& (0+255),w,b
  3175  001EF6  EC60  F00D         	call	_lcdNibble
  3176  001EFA  0012               	return	
  3177  001EFC                     __end_of_putch:
  3178                           	opt stack 0
  3179                           tblptru	equ	0xFF8
  3180                           tblptrh	equ	0xFF7
  3181                           tblptrl	equ	0xFF6
  3182                           tablat	equ	0xFF5
  3183                           prodh	equ	0xFF4
  3184                           prodl	equ	0xFF3
  3185                           intcon	equ	0xFF2
  3186                           postinc0	equ	0xFEE
  3187                           wreg	equ	0xFE8
  3188                           postdec1	equ	0xFE5
  3189                           fsr1l	equ	0xFE1
  3190                           indf2	equ	0xFDF
  3191                           postinc2	equ	0xFDE
  3192                           postdec2	equ	0xFDD
  3193                           fsr2h	equ	0xFDA
  3194                           fsr2l	equ	0xFD9
  3195                           status	equ	0xFD8
  3196                           
  3197 ;; *************** function _lcdNewline *****************
  3198 ;; Defined at:
  3199 ;;		line 78 in file "lcd.c"
  3200 ;; Parameters:    Size  Location     Type
  3201 ;;		None
  3202 ;; Auto vars:     Size  Location     Type
  3203 ;;		None
  3204 ;; Return value:  Size  Location     Type
  3205 ;;                  1    wreg      void 
  3206 ;; Registers used:
  3207 ;;		wreg, status,2, status,0, cstack
  3208 ;; Tracked objects:
  3209 ;;		On entry : 0/0
  3210 ;;		On exit  : 0/0
  3211 ;;		Unchanged: 0/0
  3212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3217 ;;Total ram usage:        0 bytes
  3218 ;; Hardware stack levels used:    1
  3219 ;; Hardware stack levels required when called:    7
  3220 ;; This function calls:
  3221 ;;		_lcdInst
  3222 ;; This function is called by:
  3223 ;;		_putch
  3224 ;; This function uses a non-reentrant model
  3225 ;;
  3226                           
  3227                           	psect	text14
  3228  001FDE                     __ptext14:
  3229                           	opt stack 0
  3230  001FDE                     _lcdNewline:
  3231                           	opt stack 20
  3232                           
  3233                           ;lcd.c: 79: lcdInst(0b11000000);
  3234                           
  3235                           ;incstack = 0
  3236  001FDE  0EC0               	movlw	192
  3237  001FE0  EC55  F00F         	call	_lcdInst
  3238  001FE4  0012               	return		;funcret
  3239  001FE6                     __end_of_lcdNewline:
  3240                           	opt stack 0
  3241                           tblptru	equ	0xFF8
  3242                           tblptrh	equ	0xFF7
  3243                           tblptrl	equ	0xFF6
  3244                           tablat	equ	0xFF5
  3245                           prodh	equ	0xFF4
  3246                           prodl	equ	0xFF3
  3247                           intcon	equ	0xFF2
  3248                           postinc0	equ	0xFEE
  3249                           wreg	equ	0xFE8
  3250                           postdec1	equ	0xFE5
  3251                           fsr1l	equ	0xFE1
  3252                           indf2	equ	0xFDF
  3253                           postinc2	equ	0xFDE
  3254                           postdec2	equ	0xFDD
  3255                           fsr2h	equ	0xFDA
  3256                           fsr2l	equ	0xFD9
  3257                           status	equ	0xFD8
  3258                           
  3259 ;; *************** function ___lwdiv *****************
  3260 ;; Defined at:
  3261 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  3262 ;; Parameters:    Size  Location     Type
  3263 ;;  dividend        2    0[BANK0 ] unsigned int 
  3264 ;;  divisor         2    2[BANK0 ] unsigned int 
  3265 ;; Auto vars:     Size  Location     Type
  3266 ;;  quotient        2    4[BANK0 ] unsigned int 
  3267 ;;  counter         1    6[BANK0 ] unsigned char 
  3268 ;; Return value:  Size  Location     Type
  3269 ;;                  2    0[BANK0 ] unsigned int 
  3270 ;; Registers used:
  3271 ;;		wreg, status,2, status,0
  3272 ;; Tracked objects:
  3273 ;;		On entry : 0/0
  3274 ;;		On exit  : 0/0
  3275 ;;		Unchanged: 0/0
  3276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3277 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3278 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3280 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3281 ;;Total ram usage:        7 bytes
  3282 ;; Hardware stack levels used:    1
  3283 ;; Hardware stack levels required when called:    5
  3284 ;; This function calls:
  3285 ;;		Nothing
  3286 ;; This function is called by:
  3287 ;;		_printf
  3288 ;; This function uses a non-reentrant model
  3289 ;;
  3290                           
  3291                           	psect	text15
  3292  001A48                     __ptext15:
  3293                           	opt stack 0
  3294  001A48                     ___lwdiv:
  3295                           	opt stack 23
  3296                           
  3297                           ;incstack = 0
  3298  001A48  0E00               	movlw	0
  3299  001A4A  0100               	movlb	0	; () banked
  3300  001A4C  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
  3301  001A4E  0E00               	movlw	0
  3302  001A50  6F84               	movwf	___lwdiv@quotient& (0+255),b
  3303                           
  3304                           ; BSR set to: 0
  3305  001A52  0100               	movlb	0	; () banked
  3306  001A54  5182               	movf	___lwdiv@divisor& (0+255),w,b
  3307  001A56  0100               	movlb	0	; () banked
  3308  001A58  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  3309  001A5A  B4D8               	btfsc	status,2,c
  3310  001A5C  D02C               	goto	l1024
  3311                           
  3312                           ; BSR set to: 0
  3313  001A5E  0E01               	movlw	1
  3314  001A60  0100               	movlb	0	; () banked
  3315  001A62  6F86               	movwf	___lwdiv@counter& (0+255),b
  3316  001A64  D006               	goto	l3073
  3317  001A66                     l3071:
  3318                           
  3319                           ; BSR set to: 0
  3320  001A66  0100               	movlb	0	; () banked
  3321  001A68  90D8               	bcf	status,0,c
  3322  001A6A  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  3323  001A6C  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  3324  001A6E  0100               	movlb	0	; () banked
  3325  001A70  2B86               	incf	___lwdiv@counter& (0+255),f,b
  3326  001A72                     l3073:
  3327                           
  3328                           ; BSR set to: 0
  3329  001A72  0100               	movlb	0	; () banked
  3330  001A74  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  3331  001A76  D7F7               	goto	l3071
  3332  001A78                     l3075:
  3333                           
  3334                           ; BSR set to: 0
  3335  001A78  0100               	movlb	0	; () banked
  3336  001A7A  90D8               	bcf	status,0,c
  3337  001A7C  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
  3338  001A7E  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  3339                           
  3340                           ; BSR set to: 0
  3341  001A80  0100               	movlb	0	; () banked
  3342  001A82  5182               	movf	___lwdiv@divisor& (0+255),w,b
  3343  001A84  0100               	movlb	0	; () banked
  3344  001A86  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  3345  001A88  0100               	movlb	0	; () banked
  3346  001A8A  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3347  001A8C  0100               	movlb	0	; () banked
  3348  001A8E  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  3349  001A90  A0D8               	btfss	status,0,c
  3350  001A92  D00A               	goto	l3083
  3351                           
  3352                           ; BSR set to: 0
  3353  001A94  0100               	movlb	0	; () banked
  3354  001A96  5182               	movf	___lwdiv@divisor& (0+255),w,b
  3355  001A98  0100               	movlb	0	; () banked
  3356  001A9A  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  3357  001A9C  0100               	movlb	0	; () banked
  3358  001A9E  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3359  001AA0  0100               	movlb	0	; () banked
  3360  001AA2  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  3361                           
  3362                           ; BSR set to: 0
  3363  001AA4  0100               	movlb	0	; () banked
  3364  001AA6  8184               	bsf	___lwdiv@quotient& (0+255),0,b
  3365  001AA8                     l3083:
  3366                           
  3367                           ; BSR set to: 0
  3368  001AA8  0100               	movlb	0	; () banked
  3369  001AAA  90D8               	bcf	status,0,c
  3370  001AAC  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  3371  001AAE  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  3372                           
  3373                           ; BSR set to: 0
  3374  001AB0  0100               	movlb	0	; () banked
  3375  001AB2  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
  3376  001AB4  D7E1               	goto	l3075
  3377  001AB6                     l1024:
  3378                           
  3379                           ; BSR set to: 0
  3380  001AB6  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
  3381  001ABA  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3382                           
  3383                           ; BSR set to: 0
  3384  001ABE  0012               	return		;funcret
  3385  001AC0                     __end_of___lwdiv:
  3386                           	opt stack 0
  3387                           tblptru	equ	0xFF8
  3388                           tblptrh	equ	0xFF7
  3389                           tblptrl	equ	0xFF6
  3390                           tablat	equ	0xFF5
  3391                           prodh	equ	0xFF4
  3392                           prodl	equ	0xFF3
  3393                           intcon	equ	0xFF2
  3394                           postinc0	equ	0xFEE
  3395                           wreg	equ	0xFE8
  3396                           postdec1	equ	0xFE5
  3397                           fsr1l	equ	0xFE1
  3398                           indf2	equ	0xFDF
  3399                           postinc2	equ	0xFDE
  3400                           postdec2	equ	0xFDD
  3401                           fsr2h	equ	0xFDA
  3402                           fsr2l	equ	0xFD9
  3403                           status	equ	0xFD8
  3404                           
  3405 ;; *************** function _lcdClear *****************
  3406 ;; Defined at:
  3407 ;;		line 74 in file "lcd.c"
  3408 ;; Parameters:    Size  Location     Type
  3409 ;;		None
  3410 ;; Auto vars:     Size  Location     Type
  3411 ;;		None
  3412 ;; Return value:  Size  Location     Type
  3413 ;;                  1    wreg      void 
  3414 ;; Registers used:
  3415 ;;		wreg, status,2, status,0, cstack
  3416 ;; Tracked objects:
  3417 ;;		On entry : 0/0
  3418 ;;		On exit  : 0/0
  3419 ;;		Unchanged: 0/0
  3420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3424 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3425 ;;Total ram usage:        0 bytes
  3426 ;; Hardware stack levels used:    1
  3427 ;; Hardware stack levels required when called:    7
  3428 ;; This function calls:
  3429 ;;		_lcdInst
  3430 ;; This function is called by:
  3431 ;;		_sortBattery
  3432 ;;		_dateTime
  3433 ;;		_mainMenu
  3434 ;;		_runSelect
  3435 ;;		_runMenu
  3436 ;;		_runTime
  3437 ;;		_runStats
  3438 ;; This function uses a non-reentrant model
  3439 ;;
  3440                           
  3441                           	psect	text16
  3442  001FE6                     __ptext16:
  3443                           	opt stack 0
  3444  001FE6                     _lcdClear:
  3445                           	opt stack 22
  3446                           
  3447                           ;lcd.c: 75: lcdInst(0b00000001);
  3448                           
  3449                           ; BSR set to: 0
  3450                           ;incstack = 0
  3451  001FE6  0E01               	movlw	1
  3452  001FE8  EC55  F00F         	call	_lcdInst
  3453  001FEC  0012               	return		;funcret
  3454  001FEE                     __end_of_lcdClear:
  3455                           	opt stack 0
  3456                           tblptru	equ	0xFF8
  3457                           tblptrh	equ	0xFF7
  3458                           tblptrl	equ	0xFF6
  3459                           tablat	equ	0xFF5
  3460                           prodh	equ	0xFF4
  3461                           prodl	equ	0xFF3
  3462                           intcon	equ	0xFF2
  3463                           postinc0	equ	0xFEE
  3464                           wreg	equ	0xFE8
  3465                           postdec1	equ	0xFE5
  3466                           fsr1l	equ	0xFE1
  3467                           indf2	equ	0xFDF
  3468                           postinc2	equ	0xFDE
  3469                           postdec2	equ	0xFDD
  3470                           fsr2h	equ	0xFDA
  3471                           fsr2l	equ	0xFD9
  3472                           status	equ	0xFD8
  3473                           
  3474 ;; *************** function _pinSetup *****************
  3475 ;; Defined at:
  3476 ;;		line 103 in file "main.c"
  3477 ;; Parameters:    Size  Location     Type
  3478 ;;		None
  3479 ;; Auto vars:     Size  Location     Type
  3480 ;;		None
  3481 ;; Return value:  Size  Location     Type
  3482 ;;                  1    wreg      void 
  3483 ;; Registers used:
  3484 ;;		wreg, status,2, status,0
  3485 ;; Tracked objects:
  3486 ;;		On entry : 0/0
  3487 ;;		On exit  : 0/0
  3488 ;;		Unchanged: 0/0
  3489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3493 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3494 ;;Total ram usage:        0 bytes
  3495 ;; Hardware stack levels used:    1
  3496 ;; Hardware stack levels required when called:    5
  3497 ;; This function calls:
  3498 ;;		Nothing
  3499 ;; This function is called by:
  3500 ;;		_main
  3501 ;; This function uses a non-reentrant model
  3502 ;;
  3503                           
  3504                           	psect	text17
  3505  001DD6                     __ptext17:
  3506                           	opt stack 0
  3507  001DD6                     _pinSetup:
  3508                           	opt stack 25
  3509                           
  3510                           ;main.c: 109: TRISA = 0xFF;
  3511                           
  3512                           ;incstack = 0
  3513  001DD6  6892               	setf	3986,c	;volatile
  3514                           
  3515                           ;main.c: 110: TRISB = 0xFF;
  3516  001DD8  6893               	setf	3987,c	;volatile
  3517                           
  3518                           ;main.c: 111: TRISC = 0x00;
  3519  001DDA  0E00               	movlw	0
  3520  001DDC  6E94               	movwf	3988,c	;volatile
  3521                           
  3522                           ;main.c: 112: TRISD = 0x00;
  3523  001DDE  0E00               	movlw	0
  3524  001DE0  6E95               	movwf	3989,c	;volatile
  3525                           
  3526                           ;main.c: 113: TRISE = 0x00;
  3527  001DE2  0E00               	movlw	0
  3528  001DE4  6E96               	movwf	3990,c	;volatile
  3529                           
  3530                           ;main.c: 115: LATA = 0x00;
  3531  001DE6  0E00               	movlw	0
  3532  001DE8  6E89               	movwf	3977,c	;volatile
  3533                           
  3534                           ;main.c: 116: LATB = 0x00;
  3535  001DEA  0E00               	movlw	0
  3536  001DEC  6E8A               	movwf	3978,c	;volatile
  3537                           
  3538                           ;main.c: 117: LATC = 0x00;
  3539  001DEE  0E00               	movlw	0
  3540  001DF0  6E8B               	movwf	3979,c	;volatile
  3541                           
  3542                           ;main.c: 118: LATD = 0x00;
  3543  001DF2  0E00               	movlw	0
  3544  001DF4  6E8C               	movwf	3980,c	;volatile
  3545                           
  3546                           ;main.c: 119: LATE = 0x00;
  3547  001DF6  0E00               	movlw	0
  3548  001DF8  6E8D               	movwf	3981,c	;volatile
  3549                           
  3550                           ;main.c: 121: ADCON0 = 0x00;
  3551  001DFA  0E00               	movlw	0
  3552  001DFC  6EC2               	movwf	4034,c	;volatile
  3553                           
  3554                           ;main.c: 122: ADCON1 |= 0x0A;
  3555  001DFE  0E0A               	movlw	10
  3556  001E00  12C1               	iorwf	4033,f,c	;volatile
  3557                           
  3558                           ;main.c: 126: ADCON2 = 0;
  3559  001E02  0E00               	movlw	0
  3560  001E04  6EC0               	movwf	4032,c	;volatile
  3561                           
  3562                           ;main.c: 127: ADCON2 |= 0b010;
  3563  001E06  82C0               	bsf	4032,1,c	;volatile
  3564                           
  3565                           ;main.c: 128: ADCON2 |= 0b110<<3;
  3566  001E08  0E30               	movlw	48
  3567  001E0A  12C0               	iorwf	4032,f,c	;volatile
  3568                           
  3569                           ;main.c: 129: ADCON2 |= 1<<7;
  3570  001E0C  8EC0               	bsf	4032,7,c	;volatile
  3571                           
  3572                           ;main.c: 132: INT1IE = 1;
  3573  001E0E  86F0               	bsf	intcon3,3,c	;volatile
  3574                           
  3575                           ;main.c: 133: INT0IE = 1;
  3576  001E10  88F2               	bsf	intcon,4,c	;volatile
  3577                           
  3578                           ;main.c: 134: (INTCONbits.GIE = 1);
  3579  001E12  8EF2               	bsf	intcon,7,c	;volatile
  3580  001E14  0012               	return		;funcret
  3581  001E16                     __end_of_pinSetup:
  3582                           	opt stack 0
  3583                           tblptru	equ	0xFF8
  3584                           tblptrh	equ	0xFF7
  3585                           tblptrl	equ	0xFF6
  3586                           tablat	equ	0xFF5
  3587                           prodh	equ	0xFF4
  3588                           prodl	equ	0xFF3
  3589                           intcon	equ	0xFF2
  3590                           intcon3	equ	0xFF0
  3591                           postinc0	equ	0xFEE
  3592                           wreg	equ	0xFE8
  3593                           postdec1	equ	0xFE5
  3594                           fsr1l	equ	0xFE1
  3595                           indf2	equ	0xFDF
  3596                           postinc2	equ	0xFDE
  3597                           postdec2	equ	0xFDD
  3598                           fsr2h	equ	0xFDA
  3599                           fsr2l	equ	0xFD9
  3600                           status	equ	0xFD8
  3601                           
  3602 ;; *************** function _initServo *****************
  3603 ;; Defined at:
  3604 ;;		line 17 in file "servo.c"
  3605 ;; Parameters:    Size  Location     Type
  3606 ;;  timer           2  102[BANK0 ] int 
  3607 ;;  po              2  104[BANK0 ] int 
  3608 ;;  pi              2  106[BANK0 ] int 
  3609 ;;  angle           2  108[BANK0 ] int 
  3610 ;; Auto vars:     Size  Location     Type
  3611 ;;		None
  3612 ;; Return value:  Size  Location     Type
  3613 ;;                  1    wreg      void 
  3614 ;; Registers used:
  3615 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3616 ;; Tracked objects:
  3617 ;;		On entry : 0/0
  3618 ;;		On exit  : 0/0
  3619 ;;		Unchanged: 0/0
  3620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3621 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3624 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3625 ;;Total ram usage:        8 bytes
  3626 ;; Hardware stack levels used:    1
  3627 ;; Hardware stack levels required when called:    9
  3628 ;; This function calls:
  3629 ;;		_initTimer
  3630 ;;		_setAngle
  3631 ;;		_startTimer
  3632 ;; This function is called by:
  3633 ;;		_main
  3634 ;; This function uses a non-reentrant model
  3635 ;;
  3636                           
  3637                           	psect	text18
  3638  0019CC                     __ptext18:
  3639                           	opt stack 0
  3640  0019CC                     _initServo:
  3641                           	opt stack 21
  3642                           
  3643                           ;servo.c: 18: port[timer] = po;
  3644                           
  3645                           ;incstack = 0
  3646  0019CC  90D8               	bcf	status,0,c
  3647  0019CE  0100               	movlb	0	; () banked
  3648  0019D0  35E6               	rlcf	initServo@timer& (0+255),w,b
  3649  0019D2  6ED9               	movwf	fsr2l,c
  3650  0019D4  0100               	movlb	0	; () banked
  3651  0019D6  35E7               	rlcf	(initServo@timer+1)& (0+255),w,b
  3652  0019D8  6EDA               	movwf	fsr2h,c
  3653  0019DA  0E18               	movlw	low _port
  3654  0019DC  26D9               	addwf	fsr2l,f,c
  3655  0019DE  0E01               	movlw	high _port
  3656  0019E0  22DA               	addwfc	fsr2h,f,c
  3657  0019E2  C0E8  FFDE         	movff	initServo@po,postinc2
  3658  0019E6  C0E9  FFDD         	movff	initServo@po+1,postdec2
  3659                           
  3660                           ;servo.c: 19: pin[timer] = pi;
  3661  0019EA  90D8               	bcf	status,0,c
  3662  0019EC  0100               	movlb	0	; () banked
  3663  0019EE  35E6               	rlcf	initServo@timer& (0+255),w,b
  3664  0019F0  6ED9               	movwf	fsr2l,c
  3665  0019F2  0100               	movlb	0	; () banked
  3666  0019F4  35E7               	rlcf	(initServo@timer+1)& (0+255),w,b
  3667  0019F6  6EDA               	movwf	fsr2h,c
  3668  0019F8  0E10               	movlw	low _pin
  3669  0019FA  26D9               	addwf	fsr2l,f,c
  3670  0019FC  0E01               	movlw	high _pin
  3671  0019FE  22DA               	addwfc	fsr2h,f,c
  3672  001A00  C0EA  FFDE         	movff	initServo@pi,postinc2
  3673  001A04  C0EB  FFDD         	movff	initServo@pi+1,postdec2
  3674                           
  3675                           ; BSR set to: 0
  3676                           ;servo.c: 20: setAngle(timer, angle);
  3677  001A08  C0E6  F0DC         	movff	initServo@timer,setAngle@timer
  3678  001A0C  C0E7  F0DD         	movff	initServo@timer+1,setAngle@timer+1
  3679  001A10  C0EC  F0DE         	movff	initServo@angle,setAngle@angle
  3680  001A14  C0ED  F0DF         	movff	initServo@angle+1,setAngle@angle+1
  3681  001A18  EC5C  F00C         	call	_setAngle	;wreg free
  3682                           
  3683                           ;servo.c: 22: initTimer(timer);
  3684  001A1C  C0E6  F080         	movff	initServo@timer,initTimer@timer
  3685  001A20  C0E7  F081         	movff	initServo@timer+1,initTimer@timer+1
  3686  001A24  EC7F  F00E         	call	_initTimer	;wreg free
  3687                           
  3688                           ;servo.c: 23: startTimer(timer,0);
  3689  001A28  C0E6  F080         	movff	initServo@timer,startTimer@timer
  3690  001A2C  C0E7  F081         	movff	initServo@timer+1,startTimer@timer+1
  3691  001A30  0E00               	movlw	0
  3692  001A32  0100               	movlb	0	; () banked
  3693  001A34  6F82               	movwf	startTimer@val& (0+255),b
  3694  001A36  0E00               	movlw	0
  3695  001A38  6F83               	movwf	(startTimer@val+1)& (0+255),b
  3696  001A3A  0E00               	movlw	0
  3697  001A3C  6F84               	movwf	(startTimer@val+2)& (0+255),b
  3698  001A3E  0E00               	movlw	0
  3699  001A40  6F85               	movwf	(startTimer@val+3)& (0+255),b
  3700  001A42  EC0C  F00E         	call	_startTimer	;wreg free
  3701  001A46  0012               	return		;funcret
  3702  001A48                     __end_of_initServo:
  3703                           	opt stack 0
  3704                           tblptru	equ	0xFF8
  3705                           tblptrh	equ	0xFF7
  3706                           tblptrl	equ	0xFF6
  3707                           tablat	equ	0xFF5
  3708                           prodh	equ	0xFF4
  3709                           prodl	equ	0xFF3
  3710                           intcon	equ	0xFF2
  3711                           intcon3	equ	0xFF0
  3712                           postinc0	equ	0xFEE
  3713                           wreg	equ	0xFE8
  3714                           postdec1	equ	0xFE5
  3715                           fsr1l	equ	0xFE1
  3716                           indf2	equ	0xFDF
  3717                           postinc2	equ	0xFDE
  3718                           postdec2	equ	0xFDD
  3719                           fsr2h	equ	0xFDA
  3720                           fsr2l	equ	0xFD9
  3721                           status	equ	0xFD8
  3722                           
  3723 ;; *************** function _startTimer *****************
  3724 ;; Defined at:
  3725 ;;		line 75 in file "timer.c"
  3726 ;; Parameters:    Size  Location     Type
  3727 ;;  timer           2    0[BANK0 ] int 
  3728 ;;  val             4    2[BANK0 ] long 
  3729 ;; Auto vars:     Size  Location     Type
  3730 ;;		None
  3731 ;; Return value:  Size  Location     Type
  3732 ;;                  1    wreg      void 
  3733 ;; Registers used:
  3734 ;;		wreg, status,2, status,0
  3735 ;; Tracked objects:
  3736 ;;		On entry : 0/0
  3737 ;;		On exit  : 0/0
  3738 ;;		Unchanged: 0/0
  3739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3740 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3742 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3743 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3744 ;;Total ram usage:        8 bytes
  3745 ;; Hardware stack levels used:    1
  3746 ;; Hardware stack levels required when called:    5
  3747 ;; This function calls:
  3748 ;;		Nothing
  3749 ;; This function is called by:
  3750 ;;		_initServo
  3751 ;;		_testFrequency
  3752 ;; This function uses a non-reentrant model
  3753 ;;
  3754                           
  3755                           	psect	text19
  3756  001C18                     __ptext19:
  3757                           	opt stack 0
  3758  001C18                     _startTimer:
  3759                           	opt stack 24
  3760                           
  3761                           ;timer.c: 76: switch(timer){
  3762                           
  3763                           ;incstack = 0
  3764  001C18  D012               	goto	l3571
  3765  001C1A                     l401:
  3766                           
  3767                           ; BSR set to: 0
  3768                           ;timer.c: 78: TMR0H = val>>8;
  3769  001C1A  C083  FFD7         	movff	startTimer@val+1,4055	;volatile
  3770                           
  3771                           ;timer.c: 79: TMR0L = val;
  3772  001C1E  C082  FFD6         	movff	startTimer@val,4054	;volatile
  3773                           
  3774                           ; BSR set to: 0
  3775                           ;timer.c: 80: T0CON |= 1<<7;
  3776  001C22  8ED5               	bsf	4053,7,c	;volatile
  3777                           
  3778                           ;timer.c: 81: break;
  3779  001C24  0012               	return	
  3780  001C26                     l403:
  3781                           
  3782                           ; BSR set to: 0
  3783                           ;timer.c: 83: TMR1H = val>>8;
  3784  001C26  C083  FFCF         	movff	startTimer@val+1,4047	;volatile
  3785                           
  3786                           ;timer.c: 84: TMR1L = val;
  3787  001C2A  C082  FFCE         	movff	startTimer@val,4046	;volatile
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;timer.c: 85: T1CON |= 1<<0;
  3791  001C2E  80CD               	bsf	4045,0,c	;volatile
  3792                           
  3793                           ;timer.c: 86: break;
  3794  001C30  0012               	return	
  3795  001C32                     l404:
  3796                           
  3797                           ; BSR set to: 0
  3798                           ;timer.c: 88: TMR3H = val>>8;
  3799  001C32  C083  FFB3         	movff	startTimer@val+1,4019	;volatile
  3800                           
  3801                           ;timer.c: 89: TMR3L = val;
  3802  001C36  C082  FFB2         	movff	startTimer@val,4018	;volatile
  3803                           
  3804                           ; BSR set to: 0
  3805                           ;timer.c: 90: T3CON |= 1<<0;
  3806  001C3A  80B1               	bsf	4017,0,c	;volatile
  3807                           
  3808                           ;timer.c: 91: }
  3809  001C3C  0012               	return	
  3810  001C3E                     l3571:
  3811  001C3E  C080  F086         	movff	startTimer@timer,??_startTimer
  3812  001C42  C081  F087         	movff	startTimer@timer+1,??_startTimer+1
  3813                           
  3814                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3815                           ; Switch size 1, requested type "space"
  3816                           ; Number of cases is 1, Range of values is 0 to 0
  3817                           ; switch strategies available:
  3818                           ; Name         Instructions Cycles
  3819                           ; simple_byte            4     3 (average)
  3820                           ;	Chosen strategy is simple_byte
  3821  001C46  0100               	movlb	0	; () banked
  3822  001C48  5187               	movf	(??_startTimer+1)& (0+255),w,b
  3823  001C4A  0A00               	xorlw	0	; case 0
  3824  001C4C  A4D8               	btfss	status,2,c
  3825  001C4E  0012               	return	
  3826                           
  3827                           ; BSR set to: 0
  3828                           ; Switch size 1, requested type "space"
  3829                           ; Number of cases is 3, Range of values is 0 to 3
  3830                           ; switch strategies available:
  3831                           ; Name         Instructions Cycles
  3832                           ; simple_byte           10     6 (average)
  3833                           ;	Chosen strategy is simple_byte
  3834  001C50  0100               	movlb	0	; () banked
  3835  001C52  5186               	movf	??_startTimer& (0+255),w,b
  3836  001C54  0A00               	xorlw	0	; case 0
  3837  001C56  B4D8               	btfsc	status,2,c
  3838  001C58  D7E0               	goto	l401
  3839  001C5A  0A01               	xorlw	1	; case 1
  3840  001C5C  B4D8               	btfsc	status,2,c
  3841  001C5E  D7E3               	goto	l403
  3842  001C60  0A02               	xorlw	2	; case 3
  3843  001C62  A4D8               	btfss	status,2,c
  3844  001C64  0012               	return	
  3845  001C66  D7E5               	goto	l404
  3846  001C68                     __end_of_startTimer:
  3847                           	opt stack 0
  3848                           tblptru	equ	0xFF8
  3849                           tblptrh	equ	0xFF7
  3850                           tblptrl	equ	0xFF6
  3851                           tablat	equ	0xFF5
  3852                           prodh	equ	0xFF4
  3853                           prodl	equ	0xFF3
  3854                           intcon	equ	0xFF2
  3855                           intcon3	equ	0xFF0
  3856                           postinc0	equ	0xFEE
  3857                           wreg	equ	0xFE8
  3858                           postdec1	equ	0xFE5
  3859                           fsr1l	equ	0xFE1
  3860                           indf2	equ	0xFDF
  3861                           postinc2	equ	0xFDE
  3862                           postdec2	equ	0xFDD
  3863                           fsr2h	equ	0xFDA
  3864                           fsr2l	equ	0xFD9
  3865                           status	equ	0xFD8
  3866                           
  3867 ;; *************** function _setAngle *****************
  3868 ;; Defined at:
  3869 ;;		line 43 in file "servo.c"
  3870 ;; Parameters:    Size  Location     Type
  3871 ;;  timer           2   92[BANK0 ] int 
  3872 ;;  angle           2   94[BANK0 ] int 
  3873 ;; Auto vars:     Size  Location     Type
  3874 ;;		None
  3875 ;; Return value:  Size  Location     Type
  3876 ;;                  1    wreg      void 
  3877 ;; Registers used:
  3878 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3879 ;; Tracked objects:
  3880 ;;		On entry : 0/0
  3881 ;;		On exit  : 0/0
  3882 ;;		Unchanged: 0/0
  3883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3884 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3886 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3887 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3888 ;;Total ram usage:       10 bytes
  3889 ;; Hardware stack levels used:    1
  3890 ;; Hardware stack levels required when called:    8
  3891 ;; This function calls:
  3892 ;;		_angleToPulse
  3893 ;; This function is called by:
  3894 ;;		_sortBattery
  3895 ;;		_initServo
  3896 ;; This function uses a non-reentrant model
  3897 ;;
  3898                           
  3899                           	psect	text20
  3900  0018B8                     __ptext20:
  3901                           	opt stack 0
  3902  0018B8                     _setAngle:
  3903                           	opt stack 21
  3904                           
  3905                           ;servo.c: 44: pulse[timer] = 0xffff - angleToPulse(angle);
  3906                           
  3907                           ; BSR set to: 0
  3908                           ;incstack = 0
  3909  0018B8  C0DE  F0C5         	movff	setAngle@angle,angleToPulse@angle
  3910  0018BC  C0DF  F0C6         	movff	setAngle@angle+1,angleToPulse@angle+1
  3911  0018C0  ECFD  F002         	call	_angleToPulse	;wreg free
  3912  0018C4  0100               	movlb	0	; () banked
  3913  0018C6  1FC5               	comf	?_angleToPulse& (0+255),f,b
  3914  0018C8  0100               	movlb	0	; () banked
  3915  0018CA  1FC6               	comf	(?_angleToPulse+1)& (0+255),f,b
  3916  0018CC  0100               	movlb	0	; () banked
  3917  0018CE  1FC7               	comf	(?_angleToPulse+2)& (0+255),f,b
  3918  0018D0  0100               	movlb	0	; () banked
  3919  0018D2  1FC8               	comf	(?_angleToPulse+3)& (0+255),f,b
  3920  0018D4  0100               	movlb	0	; () banked
  3921  0018D6  2BC5               	incf	?_angleToPulse& (0+255),f,b
  3922  0018D8  0E00               	movlw	0
  3923  0018DA  0100               	movlb	0	; () banked
  3924  0018DC  23C6               	addwfc	(?_angleToPulse+1)& (0+255),f,b
  3925  0018DE  0100               	movlb	0	; () banked
  3926  0018E0  23C7               	addwfc	(?_angleToPulse+2)& (0+255),f,b
  3927  0018E2  0100               	movlb	0	; () banked
  3928  0018E4  23C8               	addwfc	(?_angleToPulse+3)& (0+255),f,b
  3929  0018E6  0EFF               	movlw	255
  3930  0018E8  0100               	movlb	0	; () banked
  3931  0018EA  25C5               	addwf	?_angleToPulse& (0+255),w,b
  3932  0018EC  0100               	movlb	0	; () banked
  3933  0018EE  6FE0               	movwf	??_setAngle& (0+255),b
  3934  0018F0  0EFF               	movlw	255
  3935  0018F2  0100               	movlb	0	; () banked
  3936  0018F4  21C6               	addwfc	(?_angleToPulse+1)& (0+255),w,b
  3937  0018F6  0100               	movlb	0	; () banked
  3938  0018F8  6FE1               	movwf	(??_setAngle+1)& (0+255),b
  3939  0018FA  0E00               	movlw	0
  3940  0018FC  0100               	movlb	0	; () banked
  3941  0018FE  21C7               	addwfc	(?_angleToPulse+2)& (0+255),w,b
  3942  001900  0100               	movlb	0	; () banked
  3943  001902  6FE2               	movwf	(??_setAngle+2)& (0+255),b
  3944  001904  0E00               	movlw	0
  3945  001906  0100               	movlb	0	; () banked
  3946  001908  21C8               	addwfc	(?_angleToPulse+3)& (0+255),w,b
  3947  00190A  0100               	movlb	0	; () banked
  3948  00190C  6FE3               	movwf	(??_setAngle+3)& (0+255),b
  3949  00190E  0E00               	movlw	low _pulse
  3950  001910  0100               	movlb	0	; () banked
  3951  001912  6FE4               	movwf	(??_setAngle+4)& (0+255),b
  3952  001914  0E01               	movlw	high _pulse
  3953  001916  0100               	movlb	0	; () banked
  3954  001918  6FE5               	movwf	(??_setAngle+5)& (0+255),b
  3955  00191A  90D8               	bcf	status,0,c
  3956  00191C  0100               	movlb	0	; () banked
  3957  00191E  35DC               	rlcf	setAngle@timer& (0+255),w,b
  3958  001920  6ED9               	movwf	fsr2l,c
  3959  001922  0100               	movlb	0	; () banked
  3960  001924  35DD               	rlcf	(setAngle@timer+1)& (0+255),w,b
  3961  001926  6EDA               	movwf	fsr2h,c
  3962  001928  90D8               	bcf	status,0,c
  3963  00192A  36D9               	rlcf	fsr2l,f,c
  3964  00192C  36DA               	rlcf	fsr2h,f,c
  3965  00192E  0100               	movlb	0	; () banked
  3966  001930  51E4               	movf	(??_setAngle+4)& (0+255),w,b
  3967  001932  26D9               	addwf	fsr2l,f,c
  3968  001934  0100               	movlb	0	; () banked
  3969  001936  51E5               	movf	(??_setAngle+5)& (0+255),w,b
  3970  001938  22DA               	addwfc	fsr2h,f,c
  3971  00193A  C0E0  FFDE         	movff	??_setAngle,postinc2
  3972  00193E  C0E1  FFDE         	movff	??_setAngle+1,postinc2
  3973  001942  C0E2  FFDE         	movff	??_setAngle+2,postinc2
  3974  001946  C0E3  FFDE         	movff	??_setAngle+3,postinc2
  3975                           
  3976                           ; BSR set to: 0
  3977  00194A  0012               	return		;funcret
  3978  00194C                     __end_of_setAngle:
  3979                           	opt stack 0
  3980                           tblptru	equ	0xFF8
  3981                           tblptrh	equ	0xFF7
  3982                           tblptrl	equ	0xFF6
  3983                           tablat	equ	0xFF5
  3984                           prodh	equ	0xFF4
  3985                           prodl	equ	0xFF3
  3986                           intcon	equ	0xFF2
  3987                           intcon3	equ	0xFF0
  3988                           postinc0	equ	0xFEE
  3989                           wreg	equ	0xFE8
  3990                           postdec1	equ	0xFE5
  3991                           fsr1l	equ	0xFE1
  3992                           indf2	equ	0xFDF
  3993                           postinc2	equ	0xFDE
  3994                           postdec2	equ	0xFDD
  3995                           fsr2h	equ	0xFDA
  3996                           fsr2l	equ	0xFD9
  3997                           status	equ	0xFD8
  3998                           
  3999 ;; *************** function _angleToPulse *****************
  4000 ;; Defined at:
  4001 ;;		line 35 in file "servo.c"
  4002 ;; Parameters:    Size  Location     Type
  4003 ;;  angle           2   69[BANK0 ] int 
  4004 ;; Auto vars:     Size  Location     Type
  4005 ;;  a000            4   88[BANK0 ] long 
  4006 ;;  a180            4   81[BANK0 ] long 
  4007 ;;  offset          4   77[BANK0 ] long 
  4008 ;; Return value:  Size  Location     Type
  4009 ;;                  4   69[BANK0 ] long 
  4010 ;; Registers used:
  4011 ;;		wreg, status,2, status,0, cstack
  4012 ;; Tracked objects:
  4013 ;;		On entry : 0/0
  4014 ;;		On exit  : 0/0
  4015 ;;		Unchanged: 0/0
  4016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4017 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4018 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4019 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4020 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4021 ;;Total ram usage:       23 bytes
  4022 ;; Hardware stack levels used:    1
  4023 ;; Hardware stack levels required when called:    7
  4024 ;; This function calls:
  4025 ;;		___altoft
  4026 ;;		___awtoft
  4027 ;;		___ftadd
  4028 ;;		___ftdiv
  4029 ;;		___ftmul
  4030 ;;		___fttol
  4031 ;; This function is called by:
  4032 ;;		_setAngle
  4033 ;; This function uses a non-reentrant model
  4034 ;;
  4035                           
  4036                           	psect	text21
  4037  0005FA                     __ptext21:
  4038                           	opt stack 0
  4039  0005FA                     _angleToPulse:
  4040                           	opt stack 21
  4041                           
  4042                           ;servo.c: 36: long offset = 0;
  4043                           
  4044                           ; BSR set to: 0
  4045                           ;incstack = 0
  4046  0005FA  0E00               	movlw	0
  4047  0005FC  0100               	movlb	0	; () banked
  4048  0005FE  6FCD               	movwf	angleToPulse@offset& (0+255),b
  4049  000600  0E00               	movlw	0
  4050  000602  6FCE               	movwf	(angleToPulse@offset+1)& (0+255),b
  4051  000604  0E00               	movlw	0
  4052  000606  6FCF               	movwf	(angleToPulse@offset+2)& (0+255),b
  4053  000608  0E00               	movlw	0
  4054  00060A  6FD0               	movwf	(angleToPulse@offset+3)& (0+255),b
  4055                           
  4056                           ;servo.c: 37: long a000 = 1250;
  4057  00060C  0EE2               	movlw	226
  4058  00060E  0100               	movlb	0	; () banked
  4059  000610  6FD8               	movwf	angleToPulse@a000& (0+255),b
  4060  000612  0E04               	movlw	4
  4061  000614  6FD9               	movwf	(angleToPulse@a000+1)& (0+255),b
  4062  000616  0E00               	movlw	0
  4063  000618  6FDA               	movwf	(angleToPulse@a000+2)& (0+255),b
  4064  00061A  0E00               	movlw	0
  4065  00061C  6FDB               	movwf	(angleToPulse@a000+3)& (0+255),b
  4066                           
  4067                           ;servo.c: 38: long a180 = 6250;
  4068  00061E  0E6A               	movlw	106
  4069  000620  0100               	movlb	0	; () banked
  4070  000622  6FD1               	movwf	angleToPulse@a180& (0+255),b
  4071  000624  0E18               	movlw	24
  4072  000626  6FD2               	movwf	(angleToPulse@a180+1)& (0+255),b
  4073  000628  0E00               	movlw	0
  4074  00062A  6FD3               	movwf	(angleToPulse@a180+2)& (0+255),b
  4075  00062C  0E00               	movlw	0
  4076  00062E  6FD4               	movwf	(angleToPulse@a180+3)& (0+255),b
  4077                           
  4078                           ; BSR set to: 0
  4079                           ;servo.c: 40: return a000 + angle/180.0*(a180-a000) + offset;
  4080  000630  C0D8  F0C9         	movff	angleToPulse@a000,??_angleToPulse
  4081  000634  C0D9  F0CA         	movff	angleToPulse@a000+1,??_angleToPulse+1
  4082  000638  C0DA  F0CB         	movff	angleToPulse@a000+2,??_angleToPulse+2
  4083  00063C  C0DB  F0CC         	movff	angleToPulse@a000+3,??_angleToPulse+3
  4084  000640  0100               	movlb	0	; () banked
  4085  000642  1FC9               	comf	??_angleToPulse& (0+255),f,b
  4086  000644  1FCA               	comf	(??_angleToPulse+1)& (0+255),f,b
  4087  000646  1FCB               	comf	(??_angleToPulse+2)& (0+255),f,b
  4088  000648  1FCC               	comf	(??_angleToPulse+3)& (0+255),f,b
  4089  00064A  2BC9               	incf	??_angleToPulse& (0+255),f,b
  4090  00064C  0E00               	movlw	0
  4091  00064E  23CA               	addwfc	(??_angleToPulse+1)& (0+255),f,b
  4092  000650  23CB               	addwfc	(??_angleToPulse+2)& (0+255),f,b
  4093  000652  23CC               	addwfc	(??_angleToPulse+3)& (0+255),f,b
  4094  000654  0100               	movlb	0	; () banked
  4095  000656  51D1               	movf	angleToPulse@a180& (0+255),w,b
  4096  000658  0100               	movlb	0	; () banked
  4097  00065A  25C9               	addwf	??_angleToPulse& (0+255),w,b
  4098  00065C  0100               	movlb	0	; () banked
  4099  00065E  6F88               	movwf	___altoft@c& (0+255),b
  4100  000660  0100               	movlb	0	; () banked
  4101  000662  51D2               	movf	(angleToPulse@a180+1)& (0+255),w,b
  4102  000664  0100               	movlb	0	; () banked
  4103  000666  21CA               	addwfc	(??_angleToPulse+1)& (0+255),w,b
  4104  000668  0100               	movlb	0	; () banked
  4105  00066A  6F89               	movwf	(___altoft@c+1)& (0+255),b
  4106  00066C  0100               	movlb	0	; () banked
  4107  00066E  51D3               	movf	(angleToPulse@a180+2)& (0+255),w,b
  4108  000670  0100               	movlb	0	; () banked
  4109  000672  21CB               	addwfc	(??_angleToPulse+2)& (0+255),w,b
  4110  000674  0100               	movlb	0	; () banked
  4111  000676  6F8A               	movwf	(___altoft@c+2)& (0+255),b
  4112  000678  0100               	movlb	0	; () banked
  4113  00067A  51D4               	movf	(angleToPulse@a180+3)& (0+255),w,b
  4114  00067C  0100               	movlb	0	; () banked
  4115  00067E  21CC               	addwfc	(??_angleToPulse+3)& (0+255),w,b
  4116  000680  0100               	movlb	0	; () banked
  4117  000682  6F8B               	movwf	(___altoft@c+3)& (0+255),b
  4118  000684  ECC1  F00B         	call	___altoft	;wreg free
  4119  000688  C088  F09E         	movff	?___altoft,___ftmul@f2
  4120  00068C  C089  F09F         	movff	?___altoft+1,___ftmul@f2+1
  4121  000690  C08A  F0A0         	movff	?___altoft+2,___ftmul@f2+2
  4122  000694  0E00               	movlw	0
  4123  000696  0100               	movlb	0	; () banked
  4124  000698  6F8F               	movwf	___ftdiv@f2& (0+255),b
  4125  00069A  0E34               	movlw	52
  4126  00069C  0100               	movlb	0	; () banked
  4127  00069E  6F90               	movwf	(___ftdiv@f2+1)& (0+255),b
  4128  0006A0  0E43               	movlw	67
  4129  0006A2  0100               	movlb	0	; () banked
  4130  0006A4  6F91               	movwf	(___ftdiv@f2+2)& (0+255),b
  4131  0006A6  C0C5  F088         	movff	angleToPulse@angle,___awtoft@c
  4132  0006AA  C0C6  F089         	movff	angleToPulse@angle+1,___awtoft@c+1
  4133  0006AE  ECC9  F00E         	call	___awtoft	;wreg free
  4134  0006B2  C088  F08C         	movff	?___awtoft,___ftdiv@f1
  4135  0006B6  C089  F08D         	movff	?___awtoft+1,___ftdiv@f1+1
  4136  0006BA  C08A  F08E         	movff	?___awtoft+2,___ftdiv@f1+2
  4137  0006BE  EC07  F005         	call	___ftdiv	;wreg free
  4138  0006C2  C08C  F09B         	movff	?___ftdiv,___ftmul@f1
  4139  0006C6  C08D  F09C         	movff	?___ftdiv+1,___ftmul@f1+1
  4140  0006CA  C08E  F09D         	movff	?___ftdiv+2,___ftmul@f1+2
  4141  0006CE  ECB0  F003         	call	___ftmul	;wreg free
  4142  0006D2  C09B  F0AD         	movff	?___ftmul,___ftadd@f2
  4143  0006D6  C09C  F0AE         	movff	?___ftmul+1,___ftadd@f2+1
  4144  0006DA  C09D  F0AF         	movff	?___ftmul+2,___ftadd@f2+2
  4145  0006DE  C0D8  F088         	movff	angleToPulse@a000,___altoft@c
  4146  0006E2  C0D9  F089         	movff	angleToPulse@a000+1,___altoft@c+1
  4147  0006E6  C0DA  F08A         	movff	angleToPulse@a000+2,___altoft@c+2
  4148  0006EA  C0DB  F08B         	movff	angleToPulse@a000+3,___altoft@c+3
  4149  0006EE  ECC1  F00B         	call	___altoft	;wreg free
  4150  0006F2  C088  F0AA         	movff	?___altoft,___ftadd@f1
  4151  0006F6  C089  F0AB         	movff	?___altoft+1,___ftadd@f1+1
  4152  0006FA  C08A  F0AC         	movff	?___altoft+2,___ftadd@f1+2
  4153  0006FE  EC09  F000         	call	___ftadd	;wreg free
  4154  000702  C0AA  F0D5         	movff	?___ftadd,_angleToPulse$1222
  4155  000706  C0AB  F0D6         	movff	?___ftadd+1,_angleToPulse$1222+1
  4156  00070A  C0AC  F0D7         	movff	?___ftadd+2,_angleToPulse$1222+2
  4157                           
  4158                           ;servo.c: 40: return a000 + angle/180.0*(a180-a000) + offset;
  4159  00070E  C0CD  F088         	movff	angleToPulse@offset,___altoft@c
  4160  000712  C0CE  F089         	movff	angleToPulse@offset+1,___altoft@c+1
  4161  000716  C0CF  F08A         	movff	angleToPulse@offset+2,___altoft@c+2
  4162  00071A  C0D0  F08B         	movff	angleToPulse@offset+3,___altoft@c+3
  4163  00071E  ECC1  F00B         	call	___altoft	;wreg free
  4164  000722  C088  F0AD         	movff	?___altoft,___ftadd@f2
  4165  000726  C089  F0AE         	movff	?___altoft+1,___ftadd@f2+1
  4166  00072A  C08A  F0AF         	movff	?___altoft+2,___ftadd@f2+2
  4167  00072E  C0D5  F0AA         	movff	_angleToPulse$1222,___ftadd@f1
  4168  000732  C0D6  F0AB         	movff	_angleToPulse$1222+1,___ftadd@f1+1
  4169  000736  C0D7  F0AC         	movff	_angleToPulse$1222+2,___ftadd@f1+2
  4170  00073A  EC09  F000         	call	___ftadd	;wreg free
  4171  00073E  C0AA  F0B6         	movff	?___ftadd,___fttol@f1
  4172  000742  C0AB  F0B7         	movff	?___ftadd+1,___fttol@f1+1
  4173  000746  C0AC  F0B8         	movff	?___ftadd+2,___fttol@f1+2
  4174  00074A  ECAD  F005         	call	___fttol	;wreg free
  4175  00074E  C0B6  F0C5         	movff	?___fttol,?_angleToPulse
  4176  000752  C0B7  F0C6         	movff	?___fttol+1,?_angleToPulse+1
  4177  000756  C0B8  F0C7         	movff	?___fttol+2,?_angleToPulse+2
  4178  00075A  C0B9  F0C8         	movff	?___fttol+3,?_angleToPulse+3
  4179  00075E  0012               	return	
  4180  000760                     __end_of_angleToPulse:
  4181                           	opt stack 0
  4182                           tblptru	equ	0xFF8
  4183                           tblptrh	equ	0xFF7
  4184                           tblptrl	equ	0xFF6
  4185                           tablat	equ	0xFF5
  4186                           prodh	equ	0xFF4
  4187                           prodl	equ	0xFF3
  4188                           intcon	equ	0xFF2
  4189                           intcon3	equ	0xFF0
  4190                           postinc0	equ	0xFEE
  4191                           wreg	equ	0xFE8
  4192                           postdec1	equ	0xFE5
  4193                           fsr1l	equ	0xFE1
  4194                           indf2	equ	0xFDF
  4195                           postinc2	equ	0xFDE
  4196                           postdec2	equ	0xFDD
  4197                           fsr2h	equ	0xFDA
  4198                           fsr2l	equ	0xFD9
  4199                           status	equ	0xFD8
  4200                           
  4201 ;; *************** function ___fttol *****************
  4202 ;; Defined at:
  4203 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  4204 ;; Parameters:    Size  Location     Type
  4205 ;;  f1              3   54[BANK0 ] float 
  4206 ;; Auto vars:     Size  Location     Type
  4207 ;;  lval            4   64[BANK0 ] unsigned long 
  4208 ;;  exp1            1   68[BANK0 ] unsigned char 
  4209 ;;  sign1           1   63[BANK0 ] unsigned char 
  4210 ;; Return value:  Size  Location     Type
  4211 ;;                  4   54[BANK0 ] long 
  4212 ;; Registers used:
  4213 ;;		wreg, status,2, status,0
  4214 ;; Tracked objects:
  4215 ;;		On entry : 0/0
  4216 ;;		On exit  : 0/0
  4217 ;;		Unchanged: 0/0
  4218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4219 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4220 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4221 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4222 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4223 ;;Total ram usage:       15 bytes
  4224 ;; Hardware stack levels used:    1
  4225 ;; Hardware stack levels required when called:    5
  4226 ;; This function calls:
  4227 ;;		Nothing
  4228 ;; This function is called by:
  4229 ;;		_angleToPulse
  4230 ;; This function uses a non-reentrant model
  4231 ;;
  4232                           
  4233                           	psect	text22
  4234  000B5A                     __ptext22:
  4235                           	opt stack 0
  4236  000B5A                     ___fttol:
  4237                           	opt stack 22
  4238                           
  4239                           ;incstack = 0
  4240  000B5A  C0B8  F0BA         	movff	___fttol@f1+2,??___fttol
  4241  000B5E  0100               	movlb	0	; () banked
  4242  000B60  6BBB               	clrf	(??___fttol+1)& (0+255),b
  4243  000B62  6BBC               	clrf	(??___fttol+2)& (0+255),b
  4244  000B64  0100               	movlb	0	; () banked
  4245  000B66  35B7               	rlcf	(___fttol@f1+1)& (0+255),w,b
  4246  000B68  0100               	movlb	0	; () banked
  4247  000B6A  37BA               	rlcf	??___fttol& (0+255),f,b
  4248  000B6C  E301               	bnc	u2411
  4249  000B6E  81BB               	bsf	(??___fttol+1)& (0+255),0,b
  4250  000B70                     u2411:
  4251  000B70  0100               	movlb	0	; () banked
  4252  000B72  51BA               	movf	??___fttol& (0+255),w,b
  4253  000B74  0100               	movlb	0	; () banked
  4254  000B76  6FC4               	movwf	___fttol@exp1& (0+255),b
  4255  000B78  0100               	movlb	0	; () banked
  4256  000B7A  51C4               	movf	___fttol@exp1& (0+255),w,b
  4257  000B7C  A4D8               	btfss	status,2,c
  4258  000B7E  D00A               	goto	l3025
  4259                           
  4260                           ; BSR set to: 0
  4261  000B80  0E00               	movlw	0
  4262  000B82  0100               	movlb	0	; () banked
  4263  000B84  6FB6               	movwf	?___fttol& (0+255),b
  4264  000B86  0E00               	movlw	0
  4265  000B88  6FB7               	movwf	(?___fttol+1)& (0+255),b
  4266  000B8A  0E00               	movlw	0
  4267  000B8C  6FB8               	movwf	(?___fttol+2)& (0+255),b
  4268  000B8E  0E00               	movlw	0
  4269  000B90  6FB9               	movwf	(?___fttol+3)& (0+255),b
  4270                           
  4271                           ; BSR set to: 0
  4272  000B92  0012               	return	
  4273  000B94                     l3025:
  4274                           
  4275                           ; BSR set to: 0
  4276  000B94  0E17               	movlw	23
  4277  000B96  0100               	movlb	0	; () banked
  4278  000B98  6FBA               	movwf	??___fttol& (0+255),b
  4279  000B9A  C0B6  F0BB         	movff	___fttol@f1,??___fttol+1
  4280  000B9E  C0B7  F0BC         	movff	___fttol@f1+1,??___fttol+2
  4281  000BA2  C0B8  F0BD         	movff	___fttol@f1+2,??___fttol+3
  4282  000BA6  0100               	movlb	0	; () banked
  4283  000BA8  29BA               	incf	??___fttol& (0+255),w,b
  4284  000BAA  0100               	movlb	0	; () banked
  4285  000BAC  6FBE               	movwf	(??___fttol+4)& (0+255),b
  4286  000BAE  D005               	goto	u2430
  4287  000BB0                     u2435:
  4288  000BB0  0100               	movlb	0	; () banked
  4289  000BB2  90D8               	bcf	status,0,c
  4290  000BB4  33BD               	rrcf	(??___fttol+3)& (0+255),f,b
  4291  000BB6  33BC               	rrcf	(??___fttol+2)& (0+255),f,b
  4292  000BB8  33BB               	rrcf	(??___fttol+1)& (0+255),f,b
  4293  000BBA                     u2430:
  4294  000BBA  0100               	movlb	0	; () banked
  4295  000BBC  2FBE               	decfsz	(??___fttol+4)& (0+255),f,b
  4296  000BBE  D7F8               	goto	u2435
  4297  000BC0  0100               	movlb	0	; () banked
  4298  000BC2  51BB               	movf	(??___fttol+1)& (0+255),w,b
  4299  000BC4  0100               	movlb	0	; () banked
  4300  000BC6  6FBF               	movwf	___fttol@sign1& (0+255),b
  4301                           
  4302                           ; BSR set to: 0
  4303  000BC8  0100               	movlb	0	; () banked
  4304  000BCA  8FB7               	bsf	(___fttol@f1+1)& (0+255),7,b
  4305                           
  4306                           ; BSR set to: 0
  4307  000BCC  0EFF               	movlw	255
  4308  000BCE  0100               	movlb	0	; () banked
  4309  000BD0  17B6               	andwf	___fttol@f1& (0+255),f,b
  4310  000BD2  0EFF               	movlw	255
  4311  000BD4  0100               	movlb	0	; () banked
  4312  000BD6  17B7               	andwf	(___fttol@f1+1)& (0+255),f,b
  4313  000BD8  0E00               	movlw	0
  4314  000BDA  0100               	movlb	0	; () banked
  4315  000BDC  17B8               	andwf	(___fttol@f1+2)& (0+255),f,b
  4316                           
  4317                           ; BSR set to: 0
  4318  000BDE  0100               	movlb	0	; () banked
  4319  000BE0  51B6               	movf	___fttol@f1& (0+255),w,b
  4320  000BE2  0100               	movlb	0	; () banked
  4321  000BE4  6FC0               	movwf	___fttol@lval& (0+255),b
  4322  000BE6  0100               	movlb	0	; () banked
  4323  000BE8  51B7               	movf	(___fttol@f1+1)& (0+255),w,b
  4324  000BEA  0100               	movlb	0	; () banked
  4325  000BEC  6FC1               	movwf	(___fttol@lval+1)& (0+255),b
  4326  000BEE  0100               	movlb	0	; () banked
  4327  000BF0  51B8               	movf	(___fttol@f1+2)& (0+255),w,b
  4328  000BF2  0100               	movlb	0	; () banked
  4329  000BF4  6FC2               	movwf	(___fttol@lval+2)& (0+255),b
  4330  000BF6  0100               	movlb	0	; () banked
  4331  000BF8  6BC3               	clrf	(___fttol@lval+3)& (0+255),b
  4332                           
  4333                           ; BSR set to: 0
  4334  000BFA  0E8E               	movlw	142
  4335  000BFC  0100               	movlb	0	; () banked
  4336  000BFE  5FC4               	subwf	___fttol@exp1& (0+255),f,b
  4337                           
  4338                           ; BSR set to: 0
  4339  000C00  0100               	movlb	0	; () banked
  4340  000C02  AFC4               	btfss	___fttol@exp1& (0+255),7,b
  4341  000C04  D01A               	goto	l3047
  4342                           
  4343                           ; BSR set to: 0
  4344  000C06  0100               	movlb	0	; () banked
  4345  000C08  51C4               	movf	___fttol@exp1& (0+255),w,b
  4346  000C0A  0A80               	xorlw	128
  4347  000C0C  0F8F               	addlw	143
  4348  000C0E  B0D8               	btfsc	status,0,c
  4349  000C10  D00A               	goto	l3043
  4350                           
  4351                           ; BSR set to: 0
  4352  000C12  0E00               	movlw	0
  4353  000C14  0100               	movlb	0	; () banked
  4354  000C16  6FB6               	movwf	?___fttol& (0+255),b
  4355  000C18  0E00               	movlw	0
  4356  000C1A  6FB7               	movwf	(?___fttol+1)& (0+255),b
  4357  000C1C  0E00               	movlw	0
  4358  000C1E  6FB8               	movwf	(?___fttol+2)& (0+255),b
  4359  000C20  0E00               	movlw	0
  4360  000C22  6FB9               	movwf	(?___fttol+3)& (0+255),b
  4361                           
  4362                           ; BSR set to: 0
  4363  000C24  0012               	return	
  4364  000C26                     l3043:
  4365                           
  4366                           ; BSR set to: 0
  4367  000C26  0100               	movlb	0	; () banked
  4368  000C28  90D8               	bcf	status,0,c
  4369  000C2A  33C3               	rrcf	(___fttol@lval+3)& (0+255),f,b
  4370  000C2C  33C2               	rrcf	(___fttol@lval+2)& (0+255),f,b
  4371  000C2E  33C1               	rrcf	(___fttol@lval+1)& (0+255),f,b
  4372  000C30  33C0               	rrcf	___fttol@lval& (0+255),f,b
  4373                           
  4374                           ; BSR set to: 0
  4375  000C32  0100               	movlb	0	; () banked
  4376  000C34  3FC4               	incfsz	___fttol@exp1& (0+255),f,b
  4377  000C36  D7F7               	goto	l3043
  4378                           
  4379                           ; BSR set to: 0
  4380  000C38  D01B               	goto	l3057
  4381  000C3A                     l3047:
  4382                           
  4383                           ; BSR set to: 0
  4384  000C3A  0E17               	movlw	23
  4385  000C3C  0100               	movlb	0	; () banked
  4386  000C3E  65C4               	cpfsgt	___fttol@exp1& (0+255),b
  4387  000C40  D012               	goto	l3055
  4388                           
  4389                           ; BSR set to: 0
  4390  000C42  0E00               	movlw	0
  4391  000C44  0100               	movlb	0	; () banked
  4392  000C46  6FB6               	movwf	?___fttol& (0+255),b
  4393  000C48  0E00               	movlw	0
  4394  000C4A  6FB7               	movwf	(?___fttol+1)& (0+255),b
  4395  000C4C  0E00               	movlw	0
  4396  000C4E  6FB8               	movwf	(?___fttol+2)& (0+255),b
  4397  000C50  0E00               	movlw	0
  4398  000C52  6FB9               	movwf	(?___fttol+3)& (0+255),b
  4399                           
  4400                           ; BSR set to: 0
  4401  000C54  0012               	return	
  4402  000C56                     l3053:
  4403                           
  4404                           ; BSR set to: 0
  4405  000C56  0100               	movlb	0	; () banked
  4406  000C58  90D8               	bcf	status,0,c
  4407  000C5A  37C0               	rlcf	___fttol@lval& (0+255),f,b
  4408  000C5C  37C1               	rlcf	(___fttol@lval+1)& (0+255),f,b
  4409  000C5E  37C2               	rlcf	(___fttol@lval+2)& (0+255),f,b
  4410  000C60  37C3               	rlcf	(___fttol@lval+3)& (0+255),f,b
  4411  000C62  0100               	movlb	0	; () banked
  4412  000C64  07C4               	decf	___fttol@exp1& (0+255),f,b
  4413  000C66                     l3055:
  4414                           
  4415                           ; BSR set to: 0
  4416  000C66  0100               	movlb	0	; () banked
  4417  000C68  51C4               	movf	___fttol@exp1& (0+255),w,b
  4418  000C6A  0100               	movlb	0	; () banked
  4419  000C6C  A4D8               	btfss	status,2,c
  4420  000C6E  D7F3               	goto	l3053
  4421  000C70                     l3057:
  4422                           
  4423                           ; BSR set to: 0
  4424  000C70  0100               	movlb	0	; () banked
  4425  000C72  51BF               	movf	___fttol@sign1& (0+255),w,b
  4426  000C74  0100               	movlb	0	; () banked
  4427  000C76  B4D8               	btfsc	status,2,c
  4428  000C78  D009               	goto	l3061
  4429                           
  4430                           ; BSR set to: 0
  4431  000C7A  0100               	movlb	0	; () banked
  4432  000C7C  1FC3               	comf	(___fttol@lval+3)& (0+255),f,b
  4433  000C7E  1FC2               	comf	(___fttol@lval+2)& (0+255),f,b
  4434  000C80  1FC1               	comf	(___fttol@lval+1)& (0+255),f,b
  4435  000C82  6DC0               	negf	___fttol@lval& (0+255),b
  4436  000C84  0E00               	movlw	0
  4437  000C86  23C1               	addwfc	(___fttol@lval+1)& (0+255),f,b
  4438  000C88  23C2               	addwfc	(___fttol@lval+2)& (0+255),f,b
  4439  000C8A  23C3               	addwfc	(___fttol@lval+3)& (0+255),f,b
  4440  000C8C                     l3061:
  4441                           
  4442                           ; BSR set to: 0
  4443  000C8C  C0C0  F0B6         	movff	___fttol@lval,?___fttol
  4444  000C90  C0C1  F0B7         	movff	___fttol@lval+1,?___fttol+1
  4445  000C94  C0C2  F0B8         	movff	___fttol@lval+2,?___fttol+2
  4446  000C98  C0C3  F0B9         	movff	___fttol@lval+3,?___fttol+3
  4447  000C9C  0012               	return	
  4448  000C9E                     __end_of___fttol:
  4449                           	opt stack 0
  4450                           tblptru	equ	0xFF8
  4451                           tblptrh	equ	0xFF7
  4452                           tblptrl	equ	0xFF6
  4453                           tablat	equ	0xFF5
  4454                           prodh	equ	0xFF4
  4455                           prodl	equ	0xFF3
  4456                           intcon	equ	0xFF2
  4457                           intcon3	equ	0xFF0
  4458                           postinc0	equ	0xFEE
  4459                           wreg	equ	0xFE8
  4460                           postdec1	equ	0xFE5
  4461                           fsr1l	equ	0xFE1
  4462                           indf2	equ	0xFDF
  4463                           postinc2	equ	0xFDE
  4464                           postdec2	equ	0xFDD
  4465                           fsr2h	equ	0xFDA
  4466                           fsr2l	equ	0xFD9
  4467                           status	equ	0xFD8
  4468                           
  4469 ;; *************** function ___ftmul *****************
  4470 ;; Defined at:
  4471 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  4472 ;; Parameters:    Size  Location     Type
  4473 ;;  f1              3   27[BANK0 ] float 
  4474 ;;  f2              3   30[BANK0 ] float 
  4475 ;; Auto vars:     Size  Location     Type
  4476 ;;  f3_as_produc    3   37[BANK0 ] unsigned um
  4477 ;;  sign            1   41[BANK0 ] unsigned char 
  4478 ;;  cntr            1   40[BANK0 ] unsigned char 
  4479 ;;  exp             1   36[BANK0 ] unsigned char 
  4480 ;; Return value:  Size  Location     Type
  4481 ;;                  3   27[BANK0 ] float 
  4482 ;; Registers used:
  4483 ;;		wreg, status,2, status,0, cstack
  4484 ;; Tracked objects:
  4485 ;;		On entry : 0/0
  4486 ;;		On exit  : 0/0
  4487 ;;		Unchanged: 0/0
  4488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4489 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4490 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4491 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4492 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4493 ;;Total ram usage:       15 bytes
  4494 ;; Hardware stack levels used:    1
  4495 ;; Hardware stack levels required when called:    6
  4496 ;; This function calls:
  4497 ;;		___ftpack
  4498 ;; This function is called by:
  4499 ;;		_angleToPulse
  4500 ;; This function uses a non-reentrant model
  4501 ;;
  4502                           
  4503                           	psect	text23
  4504  000760                     __ptext23:
  4505                           	opt stack 0
  4506  000760                     ___ftmul:
  4507                           	opt stack 21
  4508                           
  4509                           ; BSR set to: 0
  4510                           ;incstack = 0
  4511  000760  C09D  F0A1         	movff	___ftmul@f1+2,??___ftmul
  4512  000764  0100               	movlb	0	; () banked
  4513  000766  6BA2               	clrf	(??___ftmul+1)& (0+255),b
  4514  000768  6BA3               	clrf	(??___ftmul+2)& (0+255),b
  4515  00076A  0100               	movlb	0	; () banked
  4516  00076C  359C               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  4517  00076E  0100               	movlb	0	; () banked
  4518  000770  37A1               	rlcf	??___ftmul& (0+255),f,b
  4519  000772  E301               	bnc	u2341
  4520  000774  81A2               	bsf	(??___ftmul+1)& (0+255),0,b
  4521  000776                     u2341:
  4522  000776  0100               	movlb	0	; () banked
  4523  000778  51A1               	movf	??___ftmul& (0+255),w,b
  4524  00077A  0100               	movlb	0	; () banked
  4525  00077C  6FA4               	movwf	___ftmul@exp& (0+255),b
  4526  00077E  0100               	movlb	0	; () banked
  4527  000780  51A4               	movf	___ftmul@exp& (0+255),w,b
  4528  000782  A4D8               	btfss	status,2,c
  4529  000784  D00A               	goto	l2965
  4530                           
  4531                           ; BSR set to: 0
  4532  000786  0E00               	movlw	0
  4533  000788  0100               	movlb	0	; () banked
  4534  00078A  6F9B               	movwf	?___ftmul& (0+255),b
  4535  00078C  0E00               	movlw	0
  4536  00078E  0100               	movlb	0	; () banked
  4537  000790  6F9C               	movwf	(?___ftmul+1)& (0+255),b
  4538  000792  0E00               	movlw	0
  4539  000794  0100               	movlb	0	; () banked
  4540  000796  6F9D               	movwf	(?___ftmul+2)& (0+255),b
  4541                           
  4542                           ; BSR set to: 0
  4543  000798  0012               	return	
  4544  00079A                     l2965:
  4545                           
  4546                           ; BSR set to: 0
  4547  00079A  C0A0  F0A1         	movff	___ftmul@f2+2,??___ftmul
  4548  00079E  0100               	movlb	0	; () banked
  4549  0007A0  6BA2               	clrf	(??___ftmul+1)& (0+255),b
  4550  0007A2  6BA3               	clrf	(??___ftmul+2)& (0+255),b
  4551  0007A4  0100               	movlb	0	; () banked
  4552  0007A6  359F               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  4553  0007A8  0100               	movlb	0	; () banked
  4554  0007AA  37A1               	rlcf	??___ftmul& (0+255),f,b
  4555  0007AC  E301               	bnc	u2361
  4556  0007AE  81A2               	bsf	(??___ftmul+1)& (0+255),0,b
  4557  0007B0                     u2361:
  4558  0007B0  0100               	movlb	0	; () banked
  4559  0007B2  51A1               	movf	??___ftmul& (0+255),w,b
  4560  0007B4  0100               	movlb	0	; () banked
  4561  0007B6  6FA9               	movwf	___ftmul@sign& (0+255),b
  4562  0007B8  0100               	movlb	0	; () banked
  4563  0007BA  51A9               	movf	___ftmul@sign& (0+255),w,b
  4564  0007BC  A4D8               	btfss	status,2,c
  4565  0007BE  D00A               	goto	l2971
  4566                           
  4567                           ; BSR set to: 0
  4568  0007C0  0E00               	movlw	0
  4569  0007C2  0100               	movlb	0	; () banked
  4570  0007C4  6F9B               	movwf	?___ftmul& (0+255),b
  4571  0007C6  0E00               	movlw	0
  4572  0007C8  0100               	movlb	0	; () banked
  4573  0007CA  6F9C               	movwf	(?___ftmul+1)& (0+255),b
  4574  0007CC  0E00               	movlw	0
  4575  0007CE  0100               	movlb	0	; () banked
  4576  0007D0  6F9D               	movwf	(?___ftmul+2)& (0+255),b
  4577                           
  4578                           ; BSR set to: 0
  4579  0007D2  0012               	return	
  4580  0007D4                     l2971:
  4581                           
  4582                           ; BSR set to: 0
  4583  0007D4  0100               	movlb	0	; () banked
  4584  0007D6  51A9               	movf	___ftmul@sign& (0+255),w,b
  4585  0007D8  0F7B               	addlw	123
  4586  0007DA  0100               	movlb	0	; () banked
  4587  0007DC  27A4               	addwf	___ftmul@exp& (0+255),f,b
  4588                           
  4589                           ; BSR set to: 0
  4590  0007DE  C09D  F0A9         	movff	___ftmul@f1+2,___ftmul@sign
  4591  0007E2  0100               	movlb	0	; () banked
  4592  0007E4  51A0               	movf	(___ftmul@f2+2)& (0+255),w,b
  4593  0007E6  0100               	movlb	0	; () banked
  4594  0007E8  1BA9               	xorwf	___ftmul@sign& (0+255),f,b
  4595  0007EA  0E80               	movlw	128
  4596  0007EC  0100               	movlb	0	; () banked
  4597  0007EE  17A9               	andwf	___ftmul@sign& (0+255),f,b
  4598                           
  4599                           ; BSR set to: 0
  4600  0007F0  0100               	movlb	0	; () banked
  4601  0007F2  8F9C               	bsf	(___ftmul@f1+1)& (0+255),7,b
  4602                           
  4603                           ; BSR set to: 0
  4604  0007F4  0100               	movlb	0	; () banked
  4605  0007F6  8F9F               	bsf	(___ftmul@f2+1)& (0+255),7,b
  4606                           
  4607                           ; BSR set to: 0
  4608  0007F8  0EFF               	movlw	255
  4609  0007FA  0100               	movlb	0	; () banked
  4610  0007FC  179E               	andwf	___ftmul@f2& (0+255),f,b
  4611  0007FE  0EFF               	movlw	255
  4612  000800  0100               	movlb	0	; () banked
  4613  000802  179F               	andwf	(___ftmul@f2+1)& (0+255),f,b
  4614  000804  0E00               	movlw	0
  4615  000806  0100               	movlb	0	; () banked
  4616  000808  17A0               	andwf	(___ftmul@f2+2)& (0+255),f,b
  4617                           
  4618                           ; BSR set to: 0
  4619  00080A  0E00               	movlw	0
  4620  00080C  0100               	movlb	0	; () banked
  4621  00080E  6FA5               	movwf	___ftmul@f3_as_product& (0+255),b
  4622  000810  0E00               	movlw	0
  4623  000812  0100               	movlb	0	; () banked
  4624  000814  6FA6               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  4625  000816  0E00               	movlw	0
  4626  000818  0100               	movlb	0	; () banked
  4627  00081A  6FA7               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  4628                           
  4629                           ; BSR set to: 0
  4630  00081C  0E07               	movlw	7
  4631  00081E  0100               	movlb	0	; () banked
  4632  000820  6FA8               	movwf	___ftmul@cntr& (0+255),b
  4633  000822                     l2985:
  4634                           
  4635                           ; BSR set to: 0
  4636  000822  0100               	movlb	0	; () banked
  4637  000824  A19B               	btfss	___ftmul@f1& (0+255),0,b
  4638  000826  D00C               	goto	l2989
  4639                           
  4640                           ; BSR set to: 0
  4641  000828  0100               	movlb	0	; () banked
  4642  00082A  519E               	movf	___ftmul@f2& (0+255),w,b
  4643  00082C  0100               	movlb	0	; () banked
  4644  00082E  27A5               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4645  000830  0100               	movlb	0	; () banked
  4646  000832  519F               	movf	(___ftmul@f2+1)& (0+255),w,b
  4647  000834  0100               	movlb	0	; () banked
  4648  000836  23A6               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4649  000838  0100               	movlb	0	; () banked
  4650  00083A  51A0               	movf	(___ftmul@f2+2)& (0+255),w,b
  4651  00083C  0100               	movlb	0	; () banked
  4652  00083E  23A7               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4653  000840                     l2989:
  4654                           
  4655                           ; BSR set to: 0
  4656  000840  0100               	movlb	0	; () banked
  4657  000842  90D8               	bcf	status,0,c
  4658  000844  339D               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  4659  000846  339C               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  4660  000848  339B               	rrcf	___ftmul@f1& (0+255),f,b
  4661  00084A  0100               	movlb	0	; () banked
  4662  00084C  90D8               	bcf	status,0,c
  4663  00084E  379E               	rlcf	___ftmul@f2& (0+255),f,b
  4664  000850  379F               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  4665  000852  37A0               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  4666                           
  4667                           ; BSR set to: 0
  4668  000854  0100               	movlb	0	; () banked
  4669  000856  2FA8               	decfsz	___ftmul@cntr& (0+255),f,b
  4670  000858  D7E4               	goto	l2985
  4671                           
  4672                           ; BSR set to: 0
  4673                           
  4674                           ; BSR set to: 0
  4675  00085A  0E09               	movlw	9
  4676  00085C  0100               	movlb	0	; () banked
  4677  00085E  6FA8               	movwf	___ftmul@cntr& (0+255),b
  4678  000860                     l2995:
  4679                           
  4680                           ; BSR set to: 0
  4681  000860  0100               	movlb	0	; () banked
  4682  000862  A19B               	btfss	___ftmul@f1& (0+255),0,b
  4683  000864  D00C               	goto	l2999
  4684                           
  4685                           ; BSR set to: 0
  4686  000866  0100               	movlb	0	; () banked
  4687  000868  519E               	movf	___ftmul@f2& (0+255),w,b
  4688  00086A  0100               	movlb	0	; () banked
  4689  00086C  27A5               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4690  00086E  0100               	movlb	0	; () banked
  4691  000870  519F               	movf	(___ftmul@f2+1)& (0+255),w,b
  4692  000872  0100               	movlb	0	; () banked
  4693  000874  23A6               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4694  000876  0100               	movlb	0	; () banked
  4695  000878  51A0               	movf	(___ftmul@f2+2)& (0+255),w,b
  4696  00087A  0100               	movlb	0	; () banked
  4697  00087C  23A7               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4698  00087E                     l2999:
  4699                           
  4700                           ; BSR set to: 0
  4701  00087E  0100               	movlb	0	; () banked
  4702  000880  90D8               	bcf	status,0,c
  4703  000882  339D               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  4704  000884  339C               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  4705  000886  339B               	rrcf	___ftmul@f1& (0+255),f,b
  4706  000888  0100               	movlb	0	; () banked
  4707  00088A  90D8               	bcf	status,0,c
  4708  00088C  33A7               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  4709  00088E  33A6               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  4710  000890  33A5               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  4711                           
  4712                           ; BSR set to: 0
  4713  000892  0100               	movlb	0	; () banked
  4714  000894  2FA8               	decfsz	___ftmul@cntr& (0+255),f,b
  4715  000896  D7E4               	goto	l2995
  4716                           
  4717                           ; BSR set to: 0
  4718                           
  4719                           ; BSR set to: 0
  4720  000898  C0A5  F080         	movff	___ftmul@f3_as_product,___ftpack@arg
  4721  00089C  C0A6  F081         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4722  0008A0  C0A7  F082         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4723  0008A4  C0A4  F083         	movff	___ftmul@exp,___ftpack@exp
  4724  0008A8  C0A9  F084         	movff	___ftmul@sign,___ftpack@sign
  4725  0008AC  EC8D  F007         	call	___ftpack	;wreg free
  4726  0008B0  C080  F09B         	movff	?___ftpack,?___ftmul
  4727  0008B4  C081  F09C         	movff	?___ftpack+1,?___ftmul+1
  4728  0008B8  C082  F09D         	movff	?___ftpack+2,?___ftmul+2
  4729  0008BC  0012               	return	
  4730  0008BE                     __end_of___ftmul:
  4731                           	opt stack 0
  4732                           tblptru	equ	0xFF8
  4733                           tblptrh	equ	0xFF7
  4734                           tblptrl	equ	0xFF6
  4735                           tablat	equ	0xFF5
  4736                           prodh	equ	0xFF4
  4737                           prodl	equ	0xFF3
  4738                           intcon	equ	0xFF2
  4739                           intcon3	equ	0xFF0
  4740                           postinc0	equ	0xFEE
  4741                           wreg	equ	0xFE8
  4742                           postdec1	equ	0xFE5
  4743                           fsr1l	equ	0xFE1
  4744                           indf2	equ	0xFDF
  4745                           postinc2	equ	0xFDE
  4746                           postdec2	equ	0xFDD
  4747                           fsr2h	equ	0xFDA
  4748                           fsr2l	equ	0xFD9
  4749                           status	equ	0xFD8
  4750                           
  4751 ;; *************** function ___ftdiv *****************
  4752 ;; Defined at:
  4753 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  4754 ;; Parameters:    Size  Location     Type
  4755 ;;  f1              3   12[BANK0 ] float 
  4756 ;;  f2              3   15[BANK0 ] float 
  4757 ;; Auto vars:     Size  Location     Type
  4758 ;;  f3              3   22[BANK0 ] float 
  4759 ;;  sign            1   26[BANK0 ] unsigned char 
  4760 ;;  exp             1   25[BANK0 ] unsigned char 
  4761 ;;  cntr            1   21[BANK0 ] unsigned char 
  4762 ;; Return value:  Size  Location     Type
  4763 ;;                  3   12[BANK0 ] float 
  4764 ;; Registers used:
  4765 ;;		wreg, status,2, status,0, cstack
  4766 ;; Tracked objects:
  4767 ;;		On entry : 0/0
  4768 ;;		On exit  : 0/0
  4769 ;;		Unchanged: 0/0
  4770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4771 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4772 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4773 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4774 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4775 ;;Total ram usage:       15 bytes
  4776 ;; Hardware stack levels used:    1
  4777 ;; Hardware stack levels required when called:    6
  4778 ;; This function calls:
  4779 ;;		___ftpack
  4780 ;; This function is called by:
  4781 ;;		_angleToPulse
  4782 ;;		_testFrequency
  4783 ;; This function uses a non-reentrant model
  4784 ;;
  4785                           
  4786                           	psect	text24
  4787  000A0E                     __ptext24:
  4788                           	opt stack 0
  4789  000A0E                     ___ftdiv:
  4790                           	opt stack 21
  4791                           
  4792                           ;incstack = 0
  4793  000A0E  C08E  F092         	movff	___ftdiv@f1+2,??___ftdiv
  4794  000A12  0100               	movlb	0	; () banked
  4795  000A14  6B93               	clrf	(??___ftdiv+1)& (0+255),b
  4796  000A16  6B94               	clrf	(??___ftdiv+2)& (0+255),b
  4797  000A18  0100               	movlb	0	; () banked
  4798  000A1A  358D               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  4799  000A1C  0100               	movlb	0	; () banked
  4800  000A1E  3792               	rlcf	??___ftdiv& (0+255),f,b
  4801  000A20  E301               	bnc	u2291
  4802  000A22  8193               	bsf	(??___ftdiv+1)& (0+255),0,b
  4803  000A24                     u2291:
  4804  000A24  0100               	movlb	0	; () banked
  4805  000A26  5192               	movf	??___ftdiv& (0+255),w,b
  4806  000A28  0100               	movlb	0	; () banked
  4807  000A2A  6F99               	movwf	___ftdiv@exp& (0+255),b
  4808  000A2C  0100               	movlb	0	; () banked
  4809  000A2E  5199               	movf	___ftdiv@exp& (0+255),w,b
  4810  000A30  A4D8               	btfss	status,2,c
  4811  000A32  D00A               	goto	l2919
  4812                           
  4813                           ; BSR set to: 0
  4814  000A34  0E00               	movlw	0
  4815  000A36  0100               	movlb	0	; () banked
  4816  000A38  6F8C               	movwf	?___ftdiv& (0+255),b
  4817  000A3A  0E00               	movlw	0
  4818  000A3C  0100               	movlb	0	; () banked
  4819  000A3E  6F8D               	movwf	(?___ftdiv+1)& (0+255),b
  4820  000A40  0E00               	movlw	0
  4821  000A42  0100               	movlb	0	; () banked
  4822  000A44  6F8E               	movwf	(?___ftdiv+2)& (0+255),b
  4823                           
  4824                           ; BSR set to: 0
  4825  000A46  0012               	return	
  4826  000A48                     l2919:
  4827                           
  4828                           ; BSR set to: 0
  4829  000A48  C091  F092         	movff	___ftdiv@f2+2,??___ftdiv
  4830  000A4C  0100               	movlb	0	; () banked
  4831  000A4E  6B93               	clrf	(??___ftdiv+1)& (0+255),b
  4832  000A50  6B94               	clrf	(??___ftdiv+2)& (0+255),b
  4833  000A52  0100               	movlb	0	; () banked
  4834  000A54  3590               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  4835  000A56  0100               	movlb	0	; () banked
  4836  000A58  3792               	rlcf	??___ftdiv& (0+255),f,b
  4837  000A5A  E301               	bnc	u2311
  4838  000A5C  8193               	bsf	(??___ftdiv+1)& (0+255),0,b
  4839  000A5E                     u2311:
  4840  000A5E  0100               	movlb	0	; () banked
  4841  000A60  5192               	movf	??___ftdiv& (0+255),w,b
  4842  000A62  0100               	movlb	0	; () banked
  4843  000A64  6F9A               	movwf	___ftdiv@sign& (0+255),b
  4844  000A66  0100               	movlb	0	; () banked
  4845  000A68  519A               	movf	___ftdiv@sign& (0+255),w,b
  4846  000A6A  A4D8               	btfss	status,2,c
  4847  000A6C  D00A               	goto	l2925
  4848                           
  4849                           ; BSR set to: 0
  4850  000A6E  0E00               	movlw	0
  4851  000A70  0100               	movlb	0	; () banked
  4852  000A72  6F8C               	movwf	?___ftdiv& (0+255),b
  4853  000A74  0E00               	movlw	0
  4854  000A76  0100               	movlb	0	; () banked
  4855  000A78  6F8D               	movwf	(?___ftdiv+1)& (0+255),b
  4856  000A7A  0E00               	movlw	0
  4857  000A7C  0100               	movlb	0	; () banked
  4858  000A7E  6F8E               	movwf	(?___ftdiv+2)& (0+255),b
  4859                           
  4860                           ; BSR set to: 0
  4861  000A80  0012               	return	
  4862  000A82                     l2925:
  4863                           
  4864                           ; BSR set to: 0
  4865  000A82  0E00               	movlw	0
  4866  000A84  0100               	movlb	0	; () banked
  4867  000A86  6F96               	movwf	___ftdiv@f3& (0+255),b
  4868  000A88  0E00               	movlw	0
  4869  000A8A  0100               	movlb	0	; () banked
  4870  000A8C  6F97               	movwf	(___ftdiv@f3+1)& (0+255),b
  4871  000A8E  0E00               	movlw	0
  4872  000A90  0100               	movlb	0	; () banked
  4873  000A92  6F98               	movwf	(___ftdiv@f3+2)& (0+255),b
  4874                           
  4875                           ; BSR set to: 0
  4876  000A94  0100               	movlb	0	; () banked
  4877  000A96  519A               	movf	___ftdiv@sign& (0+255),w,b
  4878  000A98  0F89               	addlw	137
  4879  000A9A  0100               	movlb	0	; () banked
  4880  000A9C  5F99               	subwf	___ftdiv@exp& (0+255),f,b
  4881                           
  4882                           ; BSR set to: 0
  4883  000A9E  C08E  F09A         	movff	___ftdiv@f1+2,___ftdiv@sign
  4884                           
  4885                           ; BSR set to: 0
  4886  000AA2  0100               	movlb	0	; () banked
  4887  000AA4  5191               	movf	(___ftdiv@f2+2)& (0+255),w,b
  4888  000AA6  0100               	movlb	0	; () banked
  4889  000AA8  1B9A               	xorwf	___ftdiv@sign& (0+255),f,b
  4890                           
  4891                           ; BSR set to: 0
  4892  000AAA  0E80               	movlw	128
  4893  000AAC  0100               	movlb	0	; () banked
  4894  000AAE  179A               	andwf	___ftdiv@sign& (0+255),f,b
  4895                           
  4896                           ; BSR set to: 0
  4897  000AB0  0100               	movlb	0	; () banked
  4898  000AB2  8F8D               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  4899                           
  4900                           ; BSR set to: 0
  4901  000AB4  0EFF               	movlw	255
  4902  000AB6  0100               	movlb	0	; () banked
  4903  000AB8  178C               	andwf	___ftdiv@f1& (0+255),f,b
  4904  000ABA  0EFF               	movlw	255
  4905  000ABC  0100               	movlb	0	; () banked
  4906  000ABE  178D               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  4907  000AC0  0E00               	movlw	0
  4908  000AC2  0100               	movlb	0	; () banked
  4909  000AC4  178E               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  4910                           
  4911                           ; BSR set to: 0
  4912  000AC6  0100               	movlb	0	; () banked
  4913  000AC8  8F90               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  4914                           
  4915                           ; BSR set to: 0
  4916  000ACA  0EFF               	movlw	255
  4917  000ACC  0100               	movlb	0	; () banked
  4918  000ACE  178F               	andwf	___ftdiv@f2& (0+255),f,b
  4919  000AD0  0EFF               	movlw	255
  4920  000AD2  0100               	movlb	0	; () banked
  4921  000AD4  1790               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  4922  000AD6  0E00               	movlw	0
  4923  000AD8  0100               	movlb	0	; () banked
  4924  000ADA  1791               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  4925                           
  4926                           ; BSR set to: 0
  4927  000ADC  0E18               	movlw	24
  4928  000ADE  0100               	movlb	0	; () banked
  4929  000AE0  6F95               	movwf	___ftdiv@cntr& (0+255),b
  4930  000AE2                     l2945:
  4931                           
  4932                           ; BSR set to: 0
  4933  000AE2  0100               	movlb	0	; () banked
  4934  000AE4  90D8               	bcf	status,0,c
  4935  000AE6  3796               	rlcf	___ftdiv@f3& (0+255),f,b
  4936  000AE8  3797               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  4937  000AEA  3798               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  4938                           
  4939                           ; BSR set to: 0
  4940  000AEC  0100               	movlb	0	; () banked
  4941  000AEE  518F               	movf	___ftdiv@f2& (0+255),w,b
  4942  000AF0  0100               	movlb	0	; () banked
  4943  000AF2  5D8C               	subwf	___ftdiv@f1& (0+255),w,b
  4944  000AF4  0100               	movlb	0	; () banked
  4945  000AF6  5190               	movf	(___ftdiv@f2+1)& (0+255),w,b
  4946  000AF8  0100               	movlb	0	; () banked
  4947  000AFA  598D               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  4948  000AFC  0100               	movlb	0	; () banked
  4949  000AFE  5191               	movf	(___ftdiv@f2+2)& (0+255),w,b
  4950  000B00  0100               	movlb	0	; () banked
  4951  000B02  598E               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  4952  000B04  A0D8               	btfss	status,0,c
  4953  000B06  D00E               	goto	l904
  4954                           
  4955                           ; BSR set to: 0
  4956  000B08  0100               	movlb	0	; () banked
  4957  000B0A  518F               	movf	___ftdiv@f2& (0+255),w,b
  4958  000B0C  0100               	movlb	0	; () banked
  4959  000B0E  5F8C               	subwf	___ftdiv@f1& (0+255),f,b
  4960  000B10  0100               	movlb	0	; () banked
  4961  000B12  5190               	movf	(___ftdiv@f2+1)& (0+255),w,b
  4962  000B14  0100               	movlb	0	; () banked
  4963  000B16  5B8D               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  4964  000B18  0100               	movlb	0	; () banked
  4965  000B1A  5191               	movf	(___ftdiv@f2+2)& (0+255),w,b
  4966  000B1C  0100               	movlb	0	; () banked
  4967  000B1E  5B8E               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  4968                           
  4969                           ; BSR set to: 0
  4970  000B20  0100               	movlb	0	; () banked
  4971  000B22  8196               	bsf	___ftdiv@f3& (0+255),0,b
  4972  000B24                     l904:
  4973                           
  4974                           ; BSR set to: 0
  4975  000B24  0100               	movlb	0	; () banked
  4976  000B26  90D8               	bcf	status,0,c
  4977  000B28  378C               	rlcf	___ftdiv@f1& (0+255),f,b
  4978  000B2A  378D               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  4979  000B2C  378E               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  4980                           
  4981                           ; BSR set to: 0
  4982  000B2E  0100               	movlb	0	; () banked
  4983  000B30  2F95               	decfsz	___ftdiv@cntr& (0+255),f,b
  4984  000B32  D7D7               	goto	l2945
  4985                           
  4986                           ; BSR set to: 0
  4987                           
  4988                           ; BSR set to: 0
  4989  000B34  C096  F080         	movff	___ftdiv@f3,___ftpack@arg
  4990  000B38  C097  F081         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4991  000B3C  C098  F082         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4992  000B40  C099  F083         	movff	___ftdiv@exp,___ftpack@exp
  4993  000B44  C09A  F084         	movff	___ftdiv@sign,___ftpack@sign
  4994  000B48  EC8D  F007         	call	___ftpack	;wreg free
  4995  000B4C  C080  F08C         	movff	?___ftpack,?___ftdiv
  4996  000B50  C081  F08D         	movff	?___ftpack+1,?___ftdiv+1
  4997  000B54  C082  F08E         	movff	?___ftpack+2,?___ftdiv+2
  4998  000B58  0012               	return	
  4999  000B5A                     __end_of___ftdiv:
  5000                           	opt stack 0
  5001                           tblptru	equ	0xFF8
  5002                           tblptrh	equ	0xFF7
  5003                           tblptrl	equ	0xFF6
  5004                           tablat	equ	0xFF5
  5005                           prodh	equ	0xFF4
  5006                           prodl	equ	0xFF3
  5007                           intcon	equ	0xFF2
  5008                           intcon3	equ	0xFF0
  5009                           postinc0	equ	0xFEE
  5010                           wreg	equ	0xFE8
  5011                           postdec1	equ	0xFE5
  5012                           fsr1l	equ	0xFE1
  5013                           indf2	equ	0xFDF
  5014                           postinc2	equ	0xFDE
  5015                           postdec2	equ	0xFDD
  5016                           fsr2h	equ	0xFDA
  5017                           fsr2l	equ	0xFD9
  5018                           status	equ	0xFD8
  5019                           
  5020 ;; *************** function ___ftadd *****************
  5021 ;; Defined at:
  5022 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  5023 ;; Parameters:    Size  Location     Type
  5024 ;;  f1              3   42[BANK0 ] float 
  5025 ;;  f2              3   45[BANK0 ] float 
  5026 ;; Auto vars:     Size  Location     Type
  5027 ;;  exp1            1   53[BANK0 ] unsigned char 
  5028 ;;  exp2            1   52[BANK0 ] unsigned char 
  5029 ;;  sign            1   51[BANK0 ] unsigned char 
  5030 ;; Return value:  Size  Location     Type
  5031 ;;                  3   42[BANK0 ] float 
  5032 ;; Registers used:
  5033 ;;		wreg, status,2, status,0, cstack
  5034 ;; Tracked objects:
  5035 ;;		On entry : 0/0
  5036 ;;		On exit  : 0/0
  5037 ;;		Unchanged: 0/0
  5038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5039 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5040 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5041 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5042 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5043 ;;Total ram usage:       12 bytes
  5044 ;; Hardware stack levels used:    1
  5045 ;; Hardware stack levels required when called:    6
  5046 ;; This function calls:
  5047 ;;		___ftpack
  5048 ;; This function is called by:
  5049 ;;		_angleToPulse
  5050 ;; This function uses a non-reentrant model
  5051 ;;
  5052                           
  5053                           	psect	text25
  5054  000012                     __ptext25:
  5055                           	opt stack 0
  5056  000012                     ___ftadd:
  5057                           	opt stack 21
  5058                           
  5059                           ;incstack = 0
  5060  000012  C0AC  F0B0         	movff	___ftadd@f1+2,??___ftadd
  5061  000016  0100               	movlb	0	; () banked
  5062  000018  6BB1               	clrf	(??___ftadd+1)& (0+255),b
  5063  00001A  6BB2               	clrf	(??___ftadd+2)& (0+255),b
  5064  00001C  0100               	movlb	0	; () banked
  5065  00001E  35AB               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  5066  000020  0100               	movlb	0	; () banked
  5067  000022  37B0               	rlcf	??___ftadd& (0+255),f,b
  5068  000024  E301               	bnc	u2081
  5069  000026  81B1               	bsf	(??___ftadd+1)& (0+255),0,b
  5070  000028                     u2081:
  5071  000028  0100               	movlb	0	; () banked
  5072  00002A  51B0               	movf	??___ftadd& (0+255),w,b
  5073  00002C  0100               	movlb	0	; () banked
  5074  00002E  6FB5               	movwf	___ftadd@exp1& (0+255),b
  5075  000030  C0AF  F0B0         	movff	___ftadd@f2+2,??___ftadd
  5076  000034  0100               	movlb	0	; () banked
  5077  000036  6BB1               	clrf	(??___ftadd+1)& (0+255),b
  5078  000038  6BB2               	clrf	(??___ftadd+2)& (0+255),b
  5079  00003A  0100               	movlb	0	; () banked
  5080  00003C  35AE               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  5081  00003E  0100               	movlb	0	; () banked
  5082  000040  37B0               	rlcf	??___ftadd& (0+255),f,b
  5083  000042  E301               	bnc	u2091
  5084  000044  81B1               	bsf	(??___ftadd+1)& (0+255),0,b
  5085  000046                     u2091:
  5086  000046  0100               	movlb	0	; () banked
  5087  000048  51B0               	movf	??___ftadd& (0+255),w,b
  5088  00004A  0100               	movlb	0	; () banked
  5089  00004C  6FB4               	movwf	___ftadd@exp2& (0+255),b
  5090                           
  5091                           ; BSR set to: 0
  5092  00004E  0100               	movlb	0	; () banked
  5093  000050  51B5               	movf	___ftadd@exp1& (0+255),w,b
  5094  000052  0100               	movlb	0	; () banked
  5095  000054  B4D8               	btfsc	status,2,c
  5096  000056  D011               	goto	l869
  5097                           
  5098                           ; BSR set to: 0
  5099  000058  0100               	movlb	0	; () banked
  5100  00005A  51B4               	movf	___ftadd@exp2& (0+255),w,b
  5101  00005C  0100               	movlb	0	; () banked
  5102  00005E  5DB5               	subwf	___ftadd@exp1& (0+255),w,b
  5103  000060  B0D8               	btfsc	status,0,c
  5104  000062  D012               	goto	l2851
  5105                           
  5106                           ; BSR set to: 0
  5107  000064  0100               	movlb	0	; () banked
  5108  000066  51B5               	movf	___ftadd@exp1& (0+255),w,b
  5109  000068  0800               	sublw	0
  5110  00006A  0100               	movlb	0	; () banked
  5111  00006C  25B4               	addwf	___ftadd@exp2& (0+255),w,b
  5112  00006E  0100               	movlb	0	; () banked
  5113  000070  6FB0               	movwf	??___ftadd& (0+255),b
  5114  000072  0E18               	movlw	24
  5115  000074  0100               	movlb	0	; () banked
  5116  000076  65B0               	cpfsgt	??___ftadd& (0+255),b
  5117  000078  D007               	goto	l2851
  5118  00007A                     l869:
  5119                           
  5120                           ; BSR set to: 0
  5121  00007A  C0AD  F0AA         	movff	___ftadd@f2,?___ftadd
  5122  00007E  C0AE  F0AB         	movff	___ftadd@f2+1,?___ftadd+1
  5123  000082  C0AF  F0AC         	movff	___ftadd@f2+2,?___ftadd+2
  5124  000086  0012               	return	
  5125  000088                     l2851:
  5126                           
  5127                           ; BSR set to: 0
  5128  000088  0100               	movlb	0	; () banked
  5129  00008A  51B4               	movf	___ftadd@exp2& (0+255),w,b
  5130  00008C  0100               	movlb	0	; () banked
  5131  00008E  B4D8               	btfsc	status,2,c
  5132  000090  D011               	goto	l873
  5133                           
  5134                           ; BSR set to: 0
  5135  000092  0100               	movlb	0	; () banked
  5136  000094  51B5               	movf	___ftadd@exp1& (0+255),w,b
  5137  000096  0100               	movlb	0	; () banked
  5138  000098  5DB4               	subwf	___ftadd@exp2& (0+255),w,b
  5139  00009A  B0D8               	btfsc	status,0,c
  5140  00009C  D012               	goto	l2857
  5141                           
  5142                           ; BSR set to: 0
  5143  00009E  0100               	movlb	0	; () banked
  5144  0000A0  51B4               	movf	___ftadd@exp2& (0+255),w,b
  5145  0000A2  0800               	sublw	0
  5146  0000A4  0100               	movlb	0	; () banked
  5147  0000A6  25B5               	addwf	___ftadd@exp1& (0+255),w,b
  5148  0000A8  0100               	movlb	0	; () banked
  5149  0000AA  6FB0               	movwf	??___ftadd& (0+255),b
  5150  0000AC  0E18               	movlw	24
  5151  0000AE  0100               	movlb	0	; () banked
  5152  0000B0  65B0               	cpfsgt	??___ftadd& (0+255),b
  5153  0000B2  D007               	goto	l2857
  5154  0000B4                     l873:
  5155                           
  5156                           ; BSR set to: 0
  5157  0000B4  C0AA  F0AA         	movff	___ftadd@f1,?___ftadd
  5158  0000B8  C0AB  F0AB         	movff	___ftadd@f1+1,?___ftadd+1
  5159  0000BC  C0AC  F0AC         	movff	___ftadd@f1+2,?___ftadd+2
  5160  0000C0  0012               	return	
  5161  0000C2                     l2857:
  5162                           
  5163                           ; BSR set to: 0
  5164  0000C2  0E06               	movlw	6
  5165  0000C4  0100               	movlb	0	; () banked
  5166  0000C6  6FB3               	movwf	___ftadd@sign& (0+255),b
  5167                           
  5168                           ; BSR set to: 0
  5169  0000C8  0100               	movlb	0	; () banked
  5170  0000CA  AFAC               	btfss	(___ftadd@f1+2)& (0+255),7,b
  5171  0000CC  D002               	goto	l2863
  5172                           
  5173                           ; BSR set to: 0
  5174  0000CE  0100               	movlb	0	; () banked
  5175  0000D0  8FB3               	bsf	___ftadd@sign& (0+255),7,b
  5176  0000D2                     l2863:
  5177                           
  5178                           ; BSR set to: 0
  5179  0000D2  0100               	movlb	0	; () banked
  5180  0000D4  AFAF               	btfss	(___ftadd@f2+2)& (0+255),7,b
  5181  0000D6  D002               	goto	l875
  5182                           
  5183                           ; BSR set to: 0
  5184  0000D8  0100               	movlb	0	; () banked
  5185  0000DA  8DB3               	bsf	___ftadd@sign& (0+255),6,b
  5186  0000DC                     l875:
  5187                           
  5188                           ; BSR set to: 0
  5189  0000DC  0100               	movlb	0	; () banked
  5190  0000DE  8FAB               	bsf	(___ftadd@f1+1)& (0+255),7,b
  5191                           
  5192                           ; BSR set to: 0
  5193  0000E0  0EFF               	movlw	255
  5194  0000E2  0100               	movlb	0	; () banked
  5195  0000E4  17AA               	andwf	___ftadd@f1& (0+255),f,b
  5196  0000E6  0EFF               	movlw	255
  5197  0000E8  0100               	movlb	0	; () banked
  5198  0000EA  17AB               	andwf	(___ftadd@f1+1)& (0+255),f,b
  5199  0000EC  0E00               	movlw	0
  5200  0000EE  0100               	movlb	0	; () banked
  5201  0000F0  17AC               	andwf	(___ftadd@f1+2)& (0+255),f,b
  5202  0000F2  0100               	movlb	0	; () banked
  5203  0000F4  8FAE               	bsf	(___ftadd@f2+1)& (0+255),7,b
  5204                           
  5205                           ; BSR set to: 0
  5206  0000F6  0EFF               	movlw	255
  5207  0000F8  0100               	movlb	0	; () banked
  5208  0000FA  17AD               	andwf	___ftadd@f2& (0+255),f,b
  5209  0000FC  0EFF               	movlw	255
  5210  0000FE  0100               	movlb	0	; () banked
  5211  000100  17AE               	andwf	(___ftadd@f2+1)& (0+255),f,b
  5212  000102  0E00               	movlw	0
  5213  000104  0100               	movlb	0	; () banked
  5214  000106  17AF               	andwf	(___ftadd@f2+2)& (0+255),f,b
  5215                           
  5216                           ; BSR set to: 0
  5217  000108  0100               	movlb	0	; () banked
  5218  00010A  51B4               	movf	___ftadd@exp2& (0+255),w,b
  5219  00010C  0100               	movlb	0	; () banked
  5220  00010E  5DB5               	subwf	___ftadd@exp1& (0+255),w,b
  5221  000110  B0D8               	btfsc	status,0,c
  5222  000112  D025               	goto	l2883
  5223  000114                     l2873:
  5224                           
  5225                           ; BSR set to: 0
  5226  000114  0100               	movlb	0	; () banked
  5227  000116  90D8               	bcf	status,0,c
  5228  000118  37AD               	rlcf	___ftadd@f2& (0+255),f,b
  5229  00011A  37AE               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  5230  00011C  37AF               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  5231  00011E  0100               	movlb	0	; () banked
  5232  000120  07B4               	decf	___ftadd@exp2& (0+255),f,b
  5233                           
  5234                           ; BSR set to: 0
  5235  000122  0100               	movlb	0	; () banked
  5236  000124  51B5               	movf	___ftadd@exp1& (0+255),w,b
  5237  000126  0100               	movlb	0	; () banked
  5238  000128  19B4               	xorwf	___ftadd@exp2& (0+255),w,b
  5239  00012A  B4D8               	btfsc	status,2,c
  5240  00012C  D011               	goto	l2881
  5241                           
  5242                           ; BSR set to: 0
  5243  00012E  0100               	movlb	0	; () banked
  5244  000130  07B3               	decf	___ftadd@sign& (0+255),f,b
  5245  000132  C0B3  F0B0         	movff	___ftadd@sign,??___ftadd
  5246  000136  0E07               	movlw	7
  5247  000138  0100               	movlb	0	; () banked
  5248  00013A  17B0               	andwf	??___ftadd& (0+255),f,b
  5249  00013C  B4D8               	btfsc	status,2,c
  5250  00013E  D008               	goto	l2881
  5251  000140  D7E9               	goto	l2873
  5252  000142                     l2879:
  5253                           
  5254                           ; BSR set to: 0
  5255  000142  0100               	movlb	0	; () banked
  5256  000144  90D8               	bcf	status,0,c
  5257  000146  33AC               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  5258  000148  33AB               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  5259  00014A  33AA               	rrcf	___ftadd@f1& (0+255),f,b
  5260  00014C  0100               	movlb	0	; () banked
  5261  00014E  2BB5               	incf	___ftadd@exp1& (0+255),f,b
  5262  000150                     l2881:
  5263                           
  5264                           ; BSR set to: 0
  5265  000150  0100               	movlb	0	; () banked
  5266  000152  51B4               	movf	___ftadd@exp2& (0+255),w,b
  5267  000154  0100               	movlb	0	; () banked
  5268  000156  19B5               	xorwf	___ftadd@exp1& (0+255),w,b
  5269  000158  B4D8               	btfsc	status,2,c
  5270  00015A  D02B               	goto	l884
  5271  00015C  D7F2               	goto	l2879
  5272  00015E                     l2883:
  5273                           
  5274                           ; BSR set to: 0
  5275  00015E  0100               	movlb	0	; () banked
  5276  000160  51B5               	movf	___ftadd@exp1& (0+255),w,b
  5277  000162  0100               	movlb	0	; () banked
  5278  000164  5DB4               	subwf	___ftadd@exp2& (0+255),w,b
  5279  000166  B0D8               	btfsc	status,0,c
  5280  000168  D024               	goto	l884
  5281  00016A                     l2885:
  5282                           
  5283                           ; BSR set to: 0
  5284  00016A  0100               	movlb	0	; () banked
  5285  00016C  90D8               	bcf	status,0,c
  5286  00016E  37AA               	rlcf	___ftadd@f1& (0+255),f,b
  5287  000170  37AB               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  5288  000172  37AC               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  5289  000174  0100               	movlb	0	; () banked
  5290  000176  07B5               	decf	___ftadd@exp1& (0+255),f,b
  5291                           
  5292                           ; BSR set to: 0
  5293  000178  0100               	movlb	0	; () banked
  5294  00017A  51B5               	movf	___ftadd@exp1& (0+255),w,b
  5295  00017C  0100               	movlb	0	; () banked
  5296  00017E  19B4               	xorwf	___ftadd@exp2& (0+255),w,b
  5297  000180  B4D8               	btfsc	status,2,c
  5298  000182  D011               	goto	l2893
  5299                           
  5300                           ; BSR set to: 0
  5301  000184  0100               	movlb	0	; () banked
  5302  000186  07B3               	decf	___ftadd@sign& (0+255),f,b
  5303  000188  C0B3  F0B0         	movff	___ftadd@sign,??___ftadd
  5304  00018C  0E07               	movlw	7
  5305  00018E  0100               	movlb	0	; () banked
  5306  000190  17B0               	andwf	??___ftadd& (0+255),f,b
  5307  000192  B4D8               	btfsc	status,2,c
  5308  000194  D008               	goto	l2893
  5309  000196  D7E9               	goto	l2885
  5310  000198                     l2891:
  5311                           
  5312                           ; BSR set to: 0
  5313  000198  0100               	movlb	0	; () banked
  5314  00019A  90D8               	bcf	status,0,c
  5315  00019C  33AF               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  5316  00019E  33AE               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  5317  0001A0  33AD               	rrcf	___ftadd@f2& (0+255),f,b
  5318  0001A2  0100               	movlb	0	; () banked
  5319  0001A4  2BB4               	incf	___ftadd@exp2& (0+255),f,b
  5320  0001A6                     l2893:
  5321                           
  5322                           ; BSR set to: 0
  5323  0001A6  0100               	movlb	0	; () banked
  5324  0001A8  51B4               	movf	___ftadd@exp2& (0+255),w,b
  5325  0001AA  0100               	movlb	0	; () banked
  5326  0001AC  19B5               	xorwf	___ftadd@exp1& (0+255),w,b
  5327  0001AE  A4D8               	btfss	status,2,c
  5328  0001B0  D7F3               	goto	l2891
  5329  0001B2                     l884:
  5330                           
  5331                           ; BSR set to: 0
  5332  0001B2  0100               	movlb	0	; () banked
  5333  0001B4  AFB3               	btfss	___ftadd@sign& (0+255),7,b
  5334  0001B6  D012               	goto	l893
  5335                           
  5336                           ; BSR set to: 0
  5337  0001B8  0EFF               	movlw	255
  5338  0001BA  0100               	movlb	0	; () banked
  5339  0001BC  1BAA               	xorwf	___ftadd@f1& (0+255),f,b
  5340  0001BE  0EFF               	movlw	255
  5341  0001C0  0100               	movlb	0	; () banked
  5342  0001C2  1BAB               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  5343  0001C4  0EFF               	movlw	255
  5344  0001C6  0100               	movlb	0	; () banked
  5345  0001C8  1BAC               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  5346  0001CA  0E01               	movlw	1
  5347  0001CC  0100               	movlb	0	; () banked
  5348  0001CE  27AA               	addwf	___ftadd@f1& (0+255),f,b
  5349  0001D0  0E00               	movlw	0
  5350  0001D2  0100               	movlb	0	; () banked
  5351  0001D4  23AB               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  5352  0001D6  0E00               	movlw	0
  5353  0001D8  0100               	movlb	0	; () banked
  5354  0001DA  23AC               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  5355  0001DC                     l893:
  5356                           
  5357                           ; BSR set to: 0
  5358  0001DC  0100               	movlb	0	; () banked
  5359  0001DE  ADB3               	btfss	___ftadd@sign& (0+255),6,b
  5360  0001E0  D012               	goto	l2899
  5361                           
  5362                           ; BSR set to: 0
  5363  0001E2  0EFF               	movlw	255
  5364  0001E4  0100               	movlb	0	; () banked
  5365  0001E6  1BAD               	xorwf	___ftadd@f2& (0+255),f,b
  5366  0001E8  0EFF               	movlw	255
  5367  0001EA  0100               	movlb	0	; () banked
  5368  0001EC  1BAE               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  5369  0001EE  0EFF               	movlw	255
  5370  0001F0  0100               	movlb	0	; () banked
  5371  0001F2  1BAF               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  5372  0001F4  0E01               	movlw	1
  5373  0001F6  0100               	movlb	0	; () banked
  5374  0001F8  27AD               	addwf	___ftadd@f2& (0+255),f,b
  5375  0001FA  0E00               	movlw	0
  5376  0001FC  0100               	movlb	0	; () banked
  5377  0001FE  23AE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5378  000200  0E00               	movlw	0
  5379  000202  0100               	movlb	0	; () banked
  5380  000204  23AF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5381  000206                     l2899:
  5382                           
  5383                           ; BSR set to: 0
  5384  000206  0E00               	movlw	0
  5385  000208  0100               	movlb	0	; () banked
  5386  00020A  6FB3               	movwf	___ftadd@sign& (0+255),b
  5387                           
  5388                           ; BSR set to: 0
  5389  00020C  0100               	movlb	0	; () banked
  5390  00020E  51AA               	movf	___ftadd@f1& (0+255),w,b
  5391  000210  0100               	movlb	0	; () banked
  5392  000212  27AD               	addwf	___ftadd@f2& (0+255),f,b
  5393  000214  0100               	movlb	0	; () banked
  5394  000216  51AB               	movf	(___ftadd@f1+1)& (0+255),w,b
  5395  000218  0100               	movlb	0	; () banked
  5396  00021A  23AE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5397  00021C  0100               	movlb	0	; () banked
  5398  00021E  51AC               	movf	(___ftadd@f1+2)& (0+255),w,b
  5399  000220  0100               	movlb	0	; () banked
  5400  000222  23AF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5401                           
  5402                           ; BSR set to: 0
  5403  000224  0100               	movlb	0	; () banked
  5404  000226  AFAF               	btfss	(___ftadd@f2+2)& (0+255),7,b
  5405  000228  D015               	goto	l2909
  5406                           
  5407                           ; BSR set to: 0
  5408  00022A  0EFF               	movlw	255
  5409  00022C  0100               	movlb	0	; () banked
  5410  00022E  1BAD               	xorwf	___ftadd@f2& (0+255),f,b
  5411  000230  0EFF               	movlw	255
  5412  000232  0100               	movlb	0	; () banked
  5413  000234  1BAE               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  5414  000236  0EFF               	movlw	255
  5415  000238  0100               	movlb	0	; () banked
  5416  00023A  1BAF               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  5417  00023C  0E01               	movlw	1
  5418  00023E  0100               	movlb	0	; () banked
  5419  000240  27AD               	addwf	___ftadd@f2& (0+255),f,b
  5420  000242  0E00               	movlw	0
  5421  000244  0100               	movlb	0	; () banked
  5422  000246  23AE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5423  000248  0E00               	movlw	0
  5424  00024A  0100               	movlb	0	; () banked
  5425  00024C  23AF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5426                           
  5427                           ; BSR set to: 0
  5428  00024E  0E01               	movlw	1
  5429  000250  0100               	movlb	0	; () banked
  5430  000252  6FB3               	movwf	___ftadd@sign& (0+255),b
  5431  000254                     l2909:
  5432                           
  5433                           ; BSR set to: 0
  5434  000254  C0AD  F080         	movff	___ftadd@f2,___ftpack@arg
  5435  000258  C0AE  F081         	movff	___ftadd@f2+1,___ftpack@arg+1
  5436  00025C  C0AF  F082         	movff	___ftadd@f2+2,___ftpack@arg+2
  5437  000260  C0B5  F083         	movff	___ftadd@exp1,___ftpack@exp
  5438  000264  C0B3  F084         	movff	___ftadd@sign,___ftpack@sign
  5439  000268  EC8D  F007         	call	___ftpack	;wreg free
  5440  00026C  C080  F0AA         	movff	?___ftpack,?___ftadd
  5441  000270  C081  F0AB         	movff	?___ftpack+1,?___ftadd+1
  5442  000274  C082  F0AC         	movff	?___ftpack+2,?___ftadd+2
  5443  000278  0012               	return	
  5444  00027A                     __end_of___ftadd:
  5445                           	opt stack 0
  5446                           tblptru	equ	0xFF8
  5447                           tblptrh	equ	0xFF7
  5448                           tblptrl	equ	0xFF6
  5449                           tablat	equ	0xFF5
  5450                           prodh	equ	0xFF4
  5451                           prodl	equ	0xFF3
  5452                           intcon	equ	0xFF2
  5453                           intcon3	equ	0xFF0
  5454                           postinc0	equ	0xFEE
  5455                           wreg	equ	0xFE8
  5456                           postdec1	equ	0xFE5
  5457                           fsr1l	equ	0xFE1
  5458                           indf2	equ	0xFDF
  5459                           postinc2	equ	0xFDE
  5460                           postdec2	equ	0xFDD
  5461                           fsr2h	equ	0xFDA
  5462                           fsr2l	equ	0xFD9
  5463                           status	equ	0xFD8
  5464                           
  5465 ;; *************** function ___awtoft *****************
  5466 ;; Defined at:
  5467 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  5468 ;; Parameters:    Size  Location     Type
  5469 ;;  c               2    8[BANK0 ] int 
  5470 ;; Auto vars:     Size  Location     Type
  5471 ;;  sign            1   11[BANK0 ] unsigned char 
  5472 ;; Return value:  Size  Location     Type
  5473 ;;                  3    8[BANK0 ] float 
  5474 ;; Registers used:
  5475 ;;		wreg, status,2, status,0, cstack
  5476 ;; Tracked objects:
  5477 ;;		On entry : 0/0
  5478 ;;		On exit  : 0/0
  5479 ;;		Unchanged: 0/0
  5480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5481 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5482 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5484 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5485 ;;Total ram usage:        4 bytes
  5486 ;; Hardware stack levels used:    1
  5487 ;; Hardware stack levels required when called:    6
  5488 ;; This function calls:
  5489 ;;		___ftpack
  5490 ;; This function is called by:
  5491 ;;		_angleToPulse
  5492 ;; This function uses a non-reentrant model
  5493 ;;
  5494                           
  5495                           	psect	text26
  5496  001D92                     __ptext26:
  5497                           	opt stack 0
  5498  001D92                     ___awtoft:
  5499                           	opt stack 21
  5500                           
  5501                           ;incstack = 0
  5502  001D92  0E00               	movlw	0
  5503  001D94  0100               	movlb	0	; () banked
  5504  001D96  6F8B               	movwf	___awtoft@sign& (0+255),b
  5505                           
  5506                           ; BSR set to: 0
  5507  001D98  0100               	movlb	0	; () banked
  5508  001D9A  AF89               	btfss	(___awtoft@c+1)& (0+255),7,b
  5509  001D9C  D008               	goto	l3015
  5510                           
  5511                           ; BSR set to: 0
  5512  001D9E  0100               	movlb	0	; () banked
  5513  001DA0  6D88               	negf	___awtoft@c& (0+255),b
  5514  001DA2  1F89               	comf	(___awtoft@c+1)& (0+255),f,b
  5515  001DA4  B0D8               	btfsc	status,0,c
  5516  001DA6  2B89               	incf	(___awtoft@c+1)& (0+255),f,b
  5517                           
  5518                           ; BSR set to: 0
  5519  001DA8  0E01               	movlw	1
  5520  001DAA  0100               	movlb	0	; () banked
  5521  001DAC  6F8B               	movwf	___awtoft@sign& (0+255),b
  5522  001DAE                     l3015:
  5523                           
  5524                           ; BSR set to: 0
  5525  001DAE  C088  F080         	movff	___awtoft@c,___ftpack@arg
  5526  001DB2  C089  F081         	movff	___awtoft@c+1,___ftpack@arg+1
  5527  001DB6  0100               	movlb	0	; () banked
  5528  001DB8  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
  5529  001DBA  0E8E               	movlw	142
  5530  001DBC  0100               	movlb	0	; () banked
  5531  001DBE  6F83               	movwf	___ftpack@exp& (0+255),b
  5532  001DC0  C08B  F084         	movff	___awtoft@sign,___ftpack@sign
  5533  001DC4  EC8D  F007         	call	___ftpack	;wreg free
  5534  001DC8  C080  F088         	movff	?___ftpack,?___awtoft
  5535  001DCC  C081  F089         	movff	?___ftpack+1,?___awtoft+1
  5536  001DD0  C082  F08A         	movff	?___ftpack+2,?___awtoft+2
  5537  001DD4  0012               	return	
  5538  001DD6                     __end_of___awtoft:
  5539                           	opt stack 0
  5540                           tblptru	equ	0xFF8
  5541                           tblptrh	equ	0xFF7
  5542                           tblptrl	equ	0xFF6
  5543                           tablat	equ	0xFF5
  5544                           prodh	equ	0xFF4
  5545                           prodl	equ	0xFF3
  5546                           intcon	equ	0xFF2
  5547                           intcon3	equ	0xFF0
  5548                           postinc0	equ	0xFEE
  5549                           wreg	equ	0xFE8
  5550                           postdec1	equ	0xFE5
  5551                           fsr1l	equ	0xFE1
  5552                           indf2	equ	0xFDF
  5553                           postinc2	equ	0xFDE
  5554                           postdec2	equ	0xFDD
  5555                           fsr2h	equ	0xFDA
  5556                           fsr2l	equ	0xFD9
  5557                           status	equ	0xFD8
  5558                           
  5559 ;; *************** function ___altoft *****************
  5560 ;; Defined at:
  5561 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  5562 ;; Parameters:    Size  Location     Type
  5563 ;;  c               4    8[BANK0 ] long 
  5564 ;; Auto vars:     Size  Location     Type
  5565 ;;  sign            1   17[BANK0 ] unsigned char 
  5566 ;;  exp             1   16[BANK0 ] unsigned char 
  5567 ;; Return value:  Size  Location     Type
  5568 ;;                  3    8[BANK0 ] float 
  5569 ;; Registers used:
  5570 ;;		wreg, status,2, status,0, cstack
  5571 ;; Tracked objects:
  5572 ;;		On entry : 0/0
  5573 ;;		On exit  : 0/0
  5574 ;;		Unchanged: 0/0
  5575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5576 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5577 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5578 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5579 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5580 ;;Total ram usage:       10 bytes
  5581 ;; Hardware stack levels used:    1
  5582 ;; Hardware stack levels required when called:    6
  5583 ;; This function calls:
  5584 ;;		___ftpack
  5585 ;; This function is called by:
  5586 ;;		_angleToPulse
  5587 ;;		_testFrequency
  5588 ;; This function uses a non-reentrant model
  5589 ;;
  5590                           
  5591                           	psect	text27
  5592  001782                     __ptext27:
  5593                           	opt stack 0
  5594  001782                     ___altoft:
  5595                           	opt stack 21
  5596                           
  5597                           ;incstack = 0
  5598  001782  0E00               	movlw	0
  5599  001784  0100               	movlb	0	; () banked
  5600  001786  6F91               	movwf	___altoft@sign& (0+255),b
  5601  001788  0E8E               	movlw	142
  5602  00178A  0100               	movlb	0	; () banked
  5603  00178C  6F90               	movwf	___altoft@exp& (0+255),b
  5604                           
  5605                           ; BSR set to: 0
  5606  00178E  0100               	movlb	0	; () banked
  5607  001790  AF8B               	btfss	(___altoft@c+3)& (0+255),7,b
  5608  001792  D015               	goto	l2837
  5609                           
  5610                           ; BSR set to: 0
  5611  001794  0100               	movlb	0	; () banked
  5612  001796  1F8B               	comf	(___altoft@c+3)& (0+255),f,b
  5613  001798  1F8A               	comf	(___altoft@c+2)& (0+255),f,b
  5614  00179A  1F89               	comf	(___altoft@c+1)& (0+255),f,b
  5615  00179C  6D88               	negf	___altoft@c& (0+255),b
  5616  00179E  0E00               	movlw	0
  5617  0017A0  2389               	addwfc	(___altoft@c+1)& (0+255),f,b
  5618  0017A2  238A               	addwfc	(___altoft@c+2)& (0+255),f,b
  5619  0017A4  238B               	addwfc	(___altoft@c+3)& (0+255),f,b
  5620                           
  5621                           ; BSR set to: 0
  5622  0017A6  0E01               	movlw	1
  5623  0017A8  0100               	movlb	0	; () banked
  5624  0017AA  6F91               	movwf	___altoft@sign& (0+255),b
  5625                           
  5626                           ; BSR set to: 0
  5627  0017AC  D008               	goto	l2837
  5628  0017AE                     l2835:
  5629                           
  5630                           ; BSR set to: 0
  5631  0017AE  0100               	movlb	0	; () banked
  5632  0017B0  90D8               	bcf	status,0,c
  5633  0017B2  338B               	rrcf	(___altoft@c+3)& (0+255),f,b
  5634  0017B4  338A               	rrcf	(___altoft@c+2)& (0+255),f,b
  5635  0017B6  3389               	rrcf	(___altoft@c+1)& (0+255),f,b
  5636  0017B8  3388               	rrcf	___altoft@c& (0+255),f,b
  5637  0017BA  0100               	movlb	0	; () banked
  5638  0017BC  2B90               	incf	___altoft@exp& (0+255),f,b
  5639  0017BE                     l2837:
  5640                           
  5641                           ; BSR set to: 0
  5642  0017BE  0E00               	movlw	0
  5643  0017C0  0100               	movlb	0	; () banked
  5644  0017C2  1588               	andwf	___altoft@c& (0+255),w,b
  5645  0017C4  0100               	movlb	0	; () banked
  5646  0017C6  6F8C               	movwf	??___altoft& (0+255),b
  5647  0017C8  0E00               	movlw	0
  5648  0017CA  0100               	movlb	0	; () banked
  5649  0017CC  1589               	andwf	(___altoft@c+1)& (0+255),w,b
  5650  0017CE  0100               	movlb	0	; () banked
  5651  0017D0  6F8D               	movwf	(??___altoft+1)& (0+255),b
  5652  0017D2  0E00               	movlw	0
  5653  0017D4  0100               	movlb	0	; () banked
  5654  0017D6  158A               	andwf	(___altoft@c+2)& (0+255),w,b
  5655  0017D8  0100               	movlb	0	; () banked
  5656  0017DA  6F8E               	movwf	(??___altoft+2)& (0+255),b
  5657  0017DC  0EFF               	movlw	255
  5658  0017DE  0100               	movlb	0	; () banked
  5659  0017E0  158B               	andwf	(___altoft@c+3)& (0+255),w,b
  5660  0017E2  0100               	movlb	0	; () banked
  5661  0017E4  6F8F               	movwf	(??___altoft+3)& (0+255),b
  5662  0017E6  0100               	movlb	0	; () banked
  5663  0017E8  518C               	movf	??___altoft& (0+255),w,b
  5664  0017EA  0100               	movlb	0	; () banked
  5665  0017EC  118D               	iorwf	(??___altoft+1)& (0+255),w,b
  5666  0017EE  0100               	movlb	0	; () banked
  5667  0017F0  118E               	iorwf	(??___altoft+2)& (0+255),w,b
  5668  0017F2  0100               	movlb	0	; () banked
  5669  0017F4  118F               	iorwf	(??___altoft+3)& (0+255),w,b
  5670  0017F6  A4D8               	btfss	status,2,c
  5671  0017F8  D7DA               	goto	l2835
  5672                           
  5673                           ; BSR set to: 0
  5674                           
  5675                           ; BSR set to: 0
  5676  0017FA  C088  F080         	movff	___altoft@c,___ftpack@arg
  5677  0017FE  C089  F081         	movff	___altoft@c+1,___ftpack@arg+1
  5678  001802  C08A  F082         	movff	___altoft@c+2,___ftpack@arg+2
  5679  001806  C090  F083         	movff	___altoft@exp,___ftpack@exp
  5680  00180A  C091  F084         	movff	___altoft@sign,___ftpack@sign
  5681  00180E  EC8D  F007         	call	___ftpack	;wreg free
  5682  001812  C080  F088         	movff	?___ftpack,?___altoft
  5683  001816  C081  F089         	movff	?___ftpack+1,?___altoft+1
  5684  00181A  C082  F08A         	movff	?___ftpack+2,?___altoft+2
  5685  00181E  0012               	return	
  5686  001820                     __end_of___altoft:
  5687                           	opt stack 0
  5688                           tblptru	equ	0xFF8
  5689                           tblptrh	equ	0xFF7
  5690                           tblptrl	equ	0xFF6
  5691                           tablat	equ	0xFF5
  5692                           prodh	equ	0xFF4
  5693                           prodl	equ	0xFF3
  5694                           intcon	equ	0xFF2
  5695                           intcon3	equ	0xFF0
  5696                           postinc0	equ	0xFEE
  5697                           wreg	equ	0xFE8
  5698                           postdec1	equ	0xFE5
  5699                           fsr1l	equ	0xFE1
  5700                           indf2	equ	0xFDF
  5701                           postinc2	equ	0xFDE
  5702                           postdec2	equ	0xFDD
  5703                           fsr2h	equ	0xFDA
  5704                           fsr2l	equ	0xFD9
  5705                           status	equ	0xFD8
  5706                           
  5707 ;; *************** function ___ftpack *****************
  5708 ;; Defined at:
  5709 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  5710 ;; Parameters:    Size  Location     Type
  5711 ;;  arg             3    0[BANK0 ] unsigned um
  5712 ;;  exp             1    3[BANK0 ] unsigned char 
  5713 ;;  sign            1    4[BANK0 ] unsigned char 
  5714 ;; Auto vars:     Size  Location     Type
  5715 ;;		None
  5716 ;; Return value:  Size  Location     Type
  5717 ;;                  3    0[BANK0 ] float 
  5718 ;; Registers used:
  5719 ;;		wreg, status,2, status,0
  5720 ;; Tracked objects:
  5721 ;;		On entry : 0/0
  5722 ;;		On exit  : 0/0
  5723 ;;		Unchanged: 0/0
  5724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5725 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5727 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5728 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5729 ;;Total ram usage:        8 bytes
  5730 ;; Hardware stack levels used:    1
  5731 ;; Hardware stack levels required when called:    5
  5732 ;; This function calls:
  5733 ;;		Nothing
  5734 ;; This function is called by:
  5735 ;;		___altoft
  5736 ;;		___awtoft
  5737 ;;		___ftadd
  5738 ;;		___ftdiv
  5739 ;;		___ftmul
  5740 ;; This function uses a non-reentrant model
  5741 ;;
  5742                           
  5743                           	psect	text28
  5744  000F1A                     __ptext28:
  5745                           	opt stack 0
  5746  000F1A                     ___ftpack:
  5747                           	opt stack 21
  5748                           
  5749                           ;incstack = 0
  5750  000F1A  0100               	movlb	0	; () banked
  5751  000F1C  5183               	movf	___ftpack@exp& (0+255),w,b
  5752  000F1E  0100               	movlb	0	; () banked
  5753  000F20  B4D8               	btfsc	status,2,c
  5754  000F22  D008               	goto	l2787
  5755                           
  5756                           ; BSR set to: 0
  5757  000F24  0100               	movlb	0	; () banked
  5758  000F26  5180               	movf	___ftpack@arg& (0+255),w,b
  5759  000F28  0100               	movlb	0	; () banked
  5760  000F2A  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  5761  000F2C  0100               	movlb	0	; () banked
  5762  000F2E  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  5763  000F30  A4D8               	btfss	status,2,c
  5764  000F32  D011               	goto	l2793
  5765  000F34                     l2787:
  5766                           
  5767                           ; BSR set to: 0
  5768  000F34  0E00               	movlw	0
  5769  000F36  0100               	movlb	0	; () banked
  5770  000F38  6F80               	movwf	?___ftpack& (0+255),b
  5771  000F3A  0E00               	movlw	0
  5772  000F3C  0100               	movlb	0	; () banked
  5773  000F3E  6F81               	movwf	(?___ftpack+1)& (0+255),b
  5774  000F40  0E00               	movlw	0
  5775  000F42  0100               	movlb	0	; () banked
  5776  000F44  6F82               	movwf	(?___ftpack+2)& (0+255),b
  5777                           
  5778                           ; BSR set to: 0
  5779  000F46  0012               	return	
  5780  000F48                     l2791:
  5781                           
  5782                           ; BSR set to: 0
  5783  000F48  0100               	movlb	0	; () banked
  5784  000F4A  2B83               	incf	___ftpack@exp& (0+255),f,b
  5785  000F4C  0100               	movlb	0	; () banked
  5786  000F4E  90D8               	bcf	status,0,c
  5787  000F50  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  5788  000F52  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  5789  000F54  3380               	rrcf	___ftpack@arg& (0+255),f,b
  5790  000F56                     l2793:
  5791                           
  5792                           ; BSR set to: 0
  5793  000F56  0E00               	movlw	0
  5794  000F58  0100               	movlb	0	; () banked
  5795  000F5A  1580               	andwf	___ftpack@arg& (0+255),w,b
  5796  000F5C  0100               	movlb	0	; () banked
  5797  000F5E  6F85               	movwf	??___ftpack& (0+255),b
  5798  000F60  0E00               	movlw	0
  5799  000F62  0100               	movlb	0	; () banked
  5800  000F64  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  5801  000F66  0100               	movlb	0	; () banked
  5802  000F68  6F86               	movwf	(??___ftpack+1)& (0+255),b
  5803  000F6A  0EFE               	movlw	254
  5804  000F6C  0100               	movlb	0	; () banked
  5805  000F6E  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  5806  000F70  0100               	movlb	0	; () banked
  5807  000F72  6F87               	movwf	(??___ftpack+2)& (0+255),b
  5808  000F74  0100               	movlb	0	; () banked
  5809  000F76  5185               	movf	??___ftpack& (0+255),w,b
  5810  000F78  0100               	movlb	0	; () banked
  5811  000F7A  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  5812  000F7C  0100               	movlb	0	; () banked
  5813  000F7E  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  5814  000F80  B4D8               	btfsc	status,2,c
  5815  000F82  D011               	goto	l2799
  5816  000F84  D7E1               	goto	l2791
  5817  000F86                     l2795:
  5818                           
  5819                           ; BSR set to: 0
  5820  000F86  0100               	movlb	0	; () banked
  5821  000F88  2B83               	incf	___ftpack@exp& (0+255),f,b
  5822                           
  5823                           ; BSR set to: 0
  5824  000F8A  0E01               	movlw	1
  5825  000F8C  0100               	movlb	0	; () banked
  5826  000F8E  2780               	addwf	___ftpack@arg& (0+255),f,b
  5827  000F90  0E00               	movlw	0
  5828  000F92  0100               	movlb	0	; () banked
  5829  000F94  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  5830  000F96  0E00               	movlw	0
  5831  000F98  0100               	movlb	0	; () banked
  5832  000F9A  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  5833  000F9C  0100               	movlb	0	; () banked
  5834  000F9E  90D8               	bcf	status,0,c
  5835  000FA0  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  5836  000FA2  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  5837  000FA4  3380               	rrcf	___ftpack@arg& (0+255),f,b
  5838  000FA6                     l2799:
  5839                           
  5840                           ; BSR set to: 0
  5841  000FA6  0E00               	movlw	0
  5842  000FA8  0100               	movlb	0	; () banked
  5843  000FAA  1580               	andwf	___ftpack@arg& (0+255),w,b
  5844  000FAC  0100               	movlb	0	; () banked
  5845  000FAE  6F85               	movwf	??___ftpack& (0+255),b
  5846  000FB0  0E00               	movlw	0
  5847  000FB2  0100               	movlb	0	; () banked
  5848  000FB4  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  5849  000FB6  0100               	movlb	0	; () banked
  5850  000FB8  6F86               	movwf	(??___ftpack+1)& (0+255),b
  5851  000FBA  0EFF               	movlw	255
  5852  000FBC  0100               	movlb	0	; () banked
  5853  000FBE  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  5854  000FC0  0100               	movlb	0	; () banked
  5855  000FC2  6F87               	movwf	(??___ftpack+2)& (0+255),b
  5856  000FC4  0100               	movlb	0	; () banked
  5857  000FC6  5185               	movf	??___ftpack& (0+255),w,b
  5858  000FC8  0100               	movlb	0	; () banked
  5859  000FCA  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  5860  000FCC  0100               	movlb	0	; () banked
  5861  000FCE  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  5862  000FD0  B4D8               	btfsc	status,2,c
  5863  000FD2  D008               	goto	l2803
  5864  000FD4  D7D8               	goto	l2795
  5865  000FD6                     l2801:
  5866                           
  5867                           ; BSR set to: 0
  5868  000FD6  0100               	movlb	0	; () banked
  5869  000FD8  0783               	decf	___ftpack@exp& (0+255),f,b
  5870  000FDA  0100               	movlb	0	; () banked
  5871  000FDC  90D8               	bcf	status,0,c
  5872  000FDE  3780               	rlcf	___ftpack@arg& (0+255),f,b
  5873  000FE0  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  5874  000FE2  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  5875  000FE4                     l2803:
  5876                           
  5877                           ; BSR set to: 0
  5878  000FE4  0100               	movlb	0	; () banked
  5879  000FE6  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  5880  000FE8  D004               	goto	l846
  5881                           
  5882                           ; BSR set to: 0
  5883  000FEA  0E02               	movlw	2
  5884  000FEC  0100               	movlb	0	; () banked
  5885  000FEE  6183               	cpfslt	___ftpack@exp& (0+255),b
  5886  000FF0  D7F2               	goto	l2801
  5887  000FF2                     l846:
  5888                           
  5889                           ; BSR set to: 0
  5890  000FF2  0100               	movlb	0	; () banked
  5891  000FF4  B183               	btfsc	___ftpack@exp& (0+255),0,b
  5892  000FF6  D002               	goto	l2809
  5893                           
  5894                           ; BSR set to: 0
  5895  000FF8  0100               	movlb	0	; () banked
  5896  000FFA  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
  5897  000FFC                     l2809:
  5898                           
  5899                           ; BSR set to: 0
  5900  000FFC  0100               	movlb	0	; () banked
  5901  000FFE  90D8               	bcf	status,0,c
  5902  001000  3383               	rrcf	___ftpack@exp& (0+255),f,b
  5903  001002  0100               	movlb	0	; () banked
  5904  001004  5183               	movf	___ftpack@exp& (0+255),w,b
  5905  001006  0100               	movlb	0	; () banked
  5906  001008  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  5907                           
  5908                           ; BSR set to: 0
  5909  00100A  0100               	movlb	0	; () banked
  5910  00100C  5184               	movf	___ftpack@sign& (0+255),w,b
  5911  00100E  0100               	movlb	0	; () banked
  5912  001010  B4D8               	btfsc	status,2,c
  5913  001012  D002               	goto	l2815
  5914                           
  5915                           ; BSR set to: 0
  5916  001014  0100               	movlb	0	; () banked
  5917  001016  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
  5918  001018                     l2815:
  5919                           
  5920                           ; BSR set to: 0
  5921  001018  C080  F080         	movff	___ftpack@arg,?___ftpack
  5922  00101C  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
  5923  001020  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
  5924  001024  0012               	return	
  5925  001026                     __end_of___ftpack:
  5926                           	opt stack 0
  5927                           tblptru	equ	0xFF8
  5928                           tblptrh	equ	0xFF7
  5929                           tblptrl	equ	0xFF6
  5930                           tablat	equ	0xFF5
  5931                           prodh	equ	0xFF4
  5932                           prodl	equ	0xFF3
  5933                           intcon	equ	0xFF2
  5934                           intcon3	equ	0xFF0
  5935                           postinc0	equ	0xFEE
  5936                           wreg	equ	0xFE8
  5937                           postdec1	equ	0xFE5
  5938                           fsr1l	equ	0xFE1
  5939                           indf2	equ	0xFDF
  5940                           postinc2	equ	0xFDE
  5941                           postdec2	equ	0xFDD
  5942                           fsr2h	equ	0xFDA
  5943                           fsr2l	equ	0xFD9
  5944                           status	equ	0xFD8
  5945                           
  5946 ;; *************** function _initTimer *****************
  5947 ;; Defined at:
  5948 ;;		line 52 in file "timer.c"
  5949 ;; Parameters:    Size  Location     Type
  5950 ;;  timer           2    0[BANK0 ] int 
  5951 ;; Auto vars:     Size  Location     Type
  5952 ;;		None
  5953 ;; Return value:  Size  Location     Type
  5954 ;;                  1    wreg      void 
  5955 ;; Registers used:
  5956 ;;		wreg, status,2, status,0
  5957 ;; Tracked objects:
  5958 ;;		On entry : 0/0
  5959 ;;		On exit  : 0/0
  5960 ;;		Unchanged: 0/0
  5961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5962 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5964 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5965 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5966 ;;Total ram usage:        4 bytes
  5967 ;; Hardware stack levels used:    1
  5968 ;; Hardware stack levels required when called:    5
  5969 ;; This function calls:
  5970 ;;		Nothing
  5971 ;; This function is called by:
  5972 ;;		_initServo
  5973 ;;		_testFrequency
  5974 ;; This function uses a non-reentrant model
  5975 ;;
  5976                           
  5977                           	psect	text29
  5978  001CFE                     __ptext29:
  5979                           	opt stack 0
  5980  001CFE                     _initTimer:
  5981                           	opt stack 24
  5982                           
  5983                           ;timer.c: 53: switch(timer){
  5984                           
  5985                           ; BSR set to: 0
  5986                           ;incstack = 0
  5987  001CFE  D00D               	goto	l3557
  5988  001D00                     l3541:
  5989                           
  5990                           ;timer.c: 55: T0CON = 0;
  5991  001D00  0E00               	movlw	0
  5992  001D02  6ED5               	movwf	4053,c	;volatile
  5993                           
  5994                           ;timer.c: 56: T0CON |= 1<<3;
  5995  001D04  86D5               	bsf	4053,3,c	;volatile
  5996                           
  5997                           ;timer.c: 58: TMR0IE = 1;
  5998  001D06  8AF2               	bsf	intcon,5,c	;volatile
  5999                           
  6000                           ;timer.c: 59: break;
  6001  001D08  D01C               	goto	l394
  6002  001D0A                     l3547:
  6003                           
  6004                           ;timer.c: 61: T1CON = 0;
  6005  001D0A  0E00               	movlw	0
  6006  001D0C  6ECD               	movwf	4045,c	;volatile
  6007                           
  6008                           ;timer.c: 63: TMR1IE = 1;
  6009  001D0E  809D               	bsf	3997,0,c	;volatile
  6010                           
  6011                           ;timer.c: 64: break;
  6012  001D10  D018               	goto	l394
  6013  001D12                     l3551:
  6014                           
  6015                           ;timer.c: 66: T3CON = 0;
  6016  001D12  0E00               	movlw	0
  6017  001D14  6EB1               	movwf	4017,c	;volatile
  6018                           
  6019                           ;timer.c: 67: TMR3IE = 1;
  6020  001D16  82A0               	bsf	4000,1,c	;volatile
  6021                           
  6022                           ;timer.c: 69: }
  6023                           
  6024                           ;timer.c: 68: break;
  6025  001D18  D014               	goto	l394
  6026  001D1A                     l3557:
  6027  001D1A  C080  F082         	movff	initTimer@timer,??_initTimer
  6028  001D1E  C081  F083         	movff	initTimer@timer+1,??_initTimer+1
  6029                           
  6030                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6031                           ; Switch size 1, requested type "space"
  6032                           ; Number of cases is 1, Range of values is 0 to 0
  6033                           ; switch strategies available:
  6034                           ; Name         Instructions Cycles
  6035                           ; simple_byte            4     3 (average)
  6036                           ;	Chosen strategy is simple_byte
  6037  001D22  0100               	movlb	0	; () banked
  6038  001D24  5183               	movf	(??_initTimer+1)& (0+255),w,b
  6039  001D26  0A00               	xorlw	0	; case 0
  6040  001D28  A4D8               	btfss	status,2,c
  6041  001D2A  D00B               	goto	l394
  6042                           
  6043                           ; BSR set to: 0
  6044                           ; Switch size 1, requested type "space"
  6045                           ; Number of cases is 3, Range of values is 0 to 3
  6046                           ; switch strategies available:
  6047                           ; Name         Instructions Cycles
  6048                           ; simple_byte           10     6 (average)
  6049                           ;	Chosen strategy is simple_byte
  6050  001D2C  0100               	movlb	0	; () banked
  6051  001D2E  5182               	movf	??_initTimer& (0+255),w,b
  6052  001D30  0A00               	xorlw	0	; case 0
  6053  001D32  B4D8               	btfsc	status,2,c
  6054  001D34  D7E5               	goto	l3541
  6055  001D36  0A01               	xorlw	1	; case 1
  6056  001D38  B4D8               	btfsc	status,2,c
  6057  001D3A  D7E7               	goto	l3547
  6058  001D3C  0A02               	xorlw	2	; case 3
  6059  001D3E  B4D8               	btfsc	status,2,c
  6060  001D40  D7E8               	goto	l3551
  6061  001D42                     l394:
  6062                           
  6063                           ;timer.c: 70: PEIE = 1;
  6064  001D42  8CF2               	bsf	intcon,6,c	;volatile
  6065                           
  6066                           ;timer.c: 71: (INTCONbits.GIE = 1);
  6067  001D44  8EF2               	bsf	intcon,7,c	;volatile
  6068  001D46  0012               	return		;funcret
  6069  001D48                     __end_of_initTimer:
  6070                           	opt stack 0
  6071                           tblptru	equ	0xFF8
  6072                           tblptrh	equ	0xFF7
  6073                           tblptrl	equ	0xFF6
  6074                           tablat	equ	0xFF5
  6075                           prodh	equ	0xFF4
  6076                           prodl	equ	0xFF3
  6077                           intcon	equ	0xFF2
  6078                           intcon3	equ	0xFF0
  6079                           postinc0	equ	0xFEE
  6080                           wreg	equ	0xFE8
  6081                           postdec1	equ	0xFE5
  6082                           fsr1l	equ	0xFE1
  6083                           indf2	equ	0xFDF
  6084                           postinc2	equ	0xFDE
  6085                           postdec2	equ	0xFDD
  6086                           fsr2h	equ	0xFDA
  6087                           fsr2l	equ	0xFD9
  6088                           status	equ	0xFD8
  6089                           
  6090 ;; *************** function _initLCD *****************
  6091 ;; Defined at:
  6092 ;;		line 15 in file "lcd.c"
  6093 ;; Parameters:    Size  Location     Type
  6094 ;;		None
  6095 ;; Auto vars:     Size  Location     Type
  6096 ;;		None
  6097 ;; Return value:  Size  Location     Type
  6098 ;;                  1    wreg      void 
  6099 ;; Registers used:
  6100 ;;		wreg, status,2, status,0, cstack
  6101 ;; Tracked objects:
  6102 ;;		On entry : 0/0
  6103 ;;		On exit  : 0/0
  6104 ;;		Unchanged: 0/0
  6105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6108 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6109 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6110 ;;Total ram usage:        1 bytes
  6111 ;; Hardware stack levels used:    1
  6112 ;; Hardware stack levels required when called:    7
  6113 ;; This function calls:
  6114 ;;		_lcdInst
  6115 ;; This function is called by:
  6116 ;;		_main
  6117 ;; This function uses a non-reentrant model
  6118 ;;
  6119                           
  6120                           	psect	text30
  6121  001D48                     __ptext30:
  6122                           	opt stack 0
  6123  001D48                     _initLCD:
  6124                           	opt stack 23
  6125                           
  6126                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
  6127                           
  6128                           ;incstack = 0
  6129  001D48  0E31               	movlw	49
  6130  001D4A  0100               	movlb	0	; () banked
  6131  001D4C  6F84               	movwf	??_initLCD& (0+255),b
  6132  001D4E  0EB2               	movlw	178
  6133  001D50                     u3737:
  6134  001D50  2EE8               	decfsz	wreg,f,c
  6135  001D52  D7FE               	bra	u3737
  6136  001D54  2F84               	decfsz	??_initLCD& (0+255),f,b
  6137  001D56  D7FC               	bra	u3737
  6138  001D58  F000               	nop	
  6139                           
  6140                           ;lcd.c: 18: lcdInst(0b00110011);
  6141  001D5A  0E33               	movlw	51
  6142  001D5C  EC55  F00F         	call	_lcdInst
  6143                           
  6144                           ;lcd.c: 19: lcdInst(0b00110010);
  6145  001D60  0E32               	movlw	50
  6146  001D62  EC55  F00F         	call	_lcdInst
  6147                           
  6148                           ;lcd.c: 20: lcdInst(0b00101000);
  6149  001D66  0E28               	movlw	40
  6150  001D68  EC55  F00F         	call	_lcdInst
  6151                           
  6152                           ;lcd.c: 21: lcdInst(0b00001111);
  6153  001D6C  0E0F               	movlw	15
  6154  001D6E  EC55  F00F         	call	_lcdInst
  6155                           
  6156                           ;lcd.c: 22: lcdInst(0b00000110);
  6157  001D72  0E06               	movlw	6
  6158  001D74  EC55  F00F         	call	_lcdInst
  6159                           
  6160                           ;lcd.c: 23: lcdInst(0b00000001);
  6161  001D78  0E01               	movlw	1
  6162  001D7A  EC55  F00F         	call	_lcdInst
  6163                           
  6164                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
  6165  001D7E  0E31               	movlw	49
  6166  001D80  0100               	movlb	0	; () banked
  6167  001D82  6F84               	movwf	??_initLCD& (0+255),b
  6168  001D84  0EB2               	movlw	178
  6169  001D86                     u3747:
  6170  001D86  2EE8               	decfsz	wreg,f,c
  6171  001D88  D7FE               	bra	u3747
  6172  001D8A  2F84               	decfsz	??_initLCD& (0+255),f,b
  6173  001D8C  D7FC               	bra	u3747
  6174  001D8E  F000               	nop	
  6175  001D90  0012               	return		;funcret
  6176  001D92                     __end_of_initLCD:
  6177                           	opt stack 0
  6178                           tblptru	equ	0xFF8
  6179                           tblptrh	equ	0xFF7
  6180                           tblptrl	equ	0xFF6
  6181                           tablat	equ	0xFF5
  6182                           prodh	equ	0xFF4
  6183                           prodl	equ	0xFF3
  6184                           intcon	equ	0xFF2
  6185                           intcon3	equ	0xFF0
  6186                           postinc0	equ	0xFEE
  6187                           wreg	equ	0xFE8
  6188                           postdec1	equ	0xFE5
  6189                           fsr1l	equ	0xFE1
  6190                           indf2	equ	0xFDF
  6191                           postinc2	equ	0xFDE
  6192                           postdec2	equ	0xFDD
  6193                           fsr2h	equ	0xFDA
  6194                           fsr2l	equ	0xFD9
  6195                           status	equ	0xFD8
  6196                           
  6197 ;; *************** function _lcdInst *****************
  6198 ;; Defined at:
  6199 ;;		line 27 in file "lcd.c"
  6200 ;; Parameters:    Size  Location     Type
  6201 ;;  data            1    wreg     unsigned char 
  6202 ;; Auto vars:     Size  Location     Type
  6203 ;;  data            1    3[BANK0 ] unsigned char 
  6204 ;; Return value:  Size  Location     Type
  6205 ;;                  1    wreg      void 
  6206 ;; Registers used:
  6207 ;;		wreg, status,2, status,0, cstack
  6208 ;; Tracked objects:
  6209 ;;		On entry : 0/0
  6210 ;;		On exit  : 0/0
  6211 ;;		Unchanged: 0/0
  6212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6214 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6215 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6216 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6217 ;;Total ram usage:        2 bytes
  6218 ;; Hardware stack levels used:    1
  6219 ;; Hardware stack levels required when called:    6
  6220 ;; This function calls:
  6221 ;;		_lcdNibble
  6222 ;; This function is called by:
  6223 ;;		_initLCD
  6224 ;;		_lcdClear
  6225 ;;		_lcdNewline
  6226 ;;		_lcdHome
  6227 ;; This function uses a non-reentrant model
  6228 ;;
  6229                           
  6230                           	psect	text31
  6231  001EAA                     __ptext31:
  6232                           	opt stack 0
  6233  001EAA                     _lcdInst:
  6234                           	opt stack 20
  6235                           
  6236                           ;incstack = 0
  6237                           ;lcdInst@data stored from wreg
  6238  001EAA  0100               	movlb	0	; () banked
  6239  001EAC  6F83               	movwf	lcdInst@data& (0+255),b
  6240                           
  6241                           ;lcd.c: 28: LATDbits.LATD2 = 0;
  6242  001EAE  948C               	bcf	3980,2,c	;volatile
  6243                           
  6244                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
  6245  001EB0  0E74               	movlw	116
  6246  001EB2                     u3757:
  6247  001EB2  2EE8               	decfsz	wreg,f,c
  6248  001EB4  D7FE               	bra	u3757
  6249  001EB6  D000               	nop2	
  6250                           
  6251                           ;lcd.c: 30: lcdNibble(data);
  6252  001EB8  0100               	movlb	0	; () banked
  6253  001EBA  5183               	movf	lcdInst@data& (0+255),w,b
  6254  001EBC  EC60  F00D         	call	_lcdNibble
  6255                           
  6256                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
  6257  001EC0  0E04               	movlw	4
  6258  001EC2  0100               	movlb	0	; () banked
  6259  001EC4  6F82               	movwf	??_lcdInst& (0+255),b
  6260  001EC6  0E3D               	movlw	61
  6261  001EC8                     u3767:
  6262  001EC8  2EE8               	decfsz	wreg,f,c
  6263  001ECA  D7FE               	bra	u3767
  6264  001ECC  2F82               	decfsz	??_lcdInst& (0+255),f,b
  6265  001ECE  D7FC               	bra	u3767
  6266  001ED0  D000               	nop2	
  6267  001ED2  0012               	return		;funcret
  6268  001ED4                     __end_of_lcdInst:
  6269                           	opt stack 0
  6270                           tblptru	equ	0xFF8
  6271                           tblptrh	equ	0xFF7
  6272                           tblptrl	equ	0xFF6
  6273                           tablat	equ	0xFF5
  6274                           prodh	equ	0xFF4
  6275                           prodl	equ	0xFF3
  6276                           intcon	equ	0xFF2
  6277                           intcon3	equ	0xFF0
  6278                           postinc0	equ	0xFEE
  6279                           wreg	equ	0xFE8
  6280                           postdec1	equ	0xFE5
  6281                           fsr1l	equ	0xFE1
  6282                           indf2	equ	0xFDF
  6283                           postinc2	equ	0xFDE
  6284                           postdec2	equ	0xFDD
  6285                           fsr2h	equ	0xFDA
  6286                           fsr2l	equ	0xFD9
  6287                           status	equ	0xFD8
  6288                           
  6289 ;; *************** function _lcdNibble *****************
  6290 ;; Defined at:
  6291 ;;		line 46 in file "lcd.c"
  6292 ;; Parameters:    Size  Location     Type
  6293 ;;  data            1    wreg     unsigned char 
  6294 ;; Auto vars:     Size  Location     Type
  6295 ;;  data            1    1[BANK0 ] unsigned char 
  6296 ;;  temp            1    0[BANK0 ] unsigned char 
  6297 ;; Return value:  Size  Location     Type
  6298 ;;                  1    wreg      void 
  6299 ;; Registers used:
  6300 ;;		wreg, status,2, status,0
  6301 ;; Tracked objects:
  6302 ;;		On entry : 0/0
  6303 ;;		On exit  : 0/0
  6304 ;;		Unchanged: 0/0
  6305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6307 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6309 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6310 ;;Total ram usage:        2 bytes
  6311 ;; Hardware stack levels used:    1
  6312 ;; Hardware stack levels required when called:    5
  6313 ;; This function calls:
  6314 ;;		Nothing
  6315 ;; This function is called by:
  6316 ;;		_lcdInst
  6317 ;;		_putch
  6318 ;; This function uses a non-reentrant model
  6319 ;;
  6320                           
  6321                           	psect	text32
  6322  001AC0                     __ptext32:
  6323                           	opt stack 0
  6324  001AC0                     _lcdNibble:
  6325                           	opt stack 22
  6326                           
  6327                           ;incstack = 0
  6328                           ;lcdNibble@data stored from wreg
  6329  001AC0  0100               	movlb	0	; () banked
  6330  001AC2  6F81               	movwf	lcdNibble@data& (0+255),b
  6331                           
  6332                           ;lcd.c: 48: char temp = data & 0xF0;
  6333  001AC4  0100               	movlb	0	; () banked
  6334  001AC6  5181               	movf	lcdNibble@data& (0+255),w,b
  6335  001AC8  0BF0               	andlw	240
  6336  001ACA  0100               	movlb	0	; () banked
  6337  001ACC  6F80               	movwf	lcdNibble@temp& (0+255),b
  6338                           
  6339                           ;lcd.c: 49: LATD = LATD & 0x0F;
  6340  001ACE  508C               	movf	3980,w,c	;volatile
  6341  001AD0  0B0F               	andlw	15
  6342  001AD2  6E8C               	movwf	3980,c	;volatile
  6343                           
  6344                           ;lcd.c: 50: LATD = temp | LATD;
  6345  001AD4  0100               	movlb	0	; () banked
  6346  001AD6  5180               	movf	lcdNibble@temp& (0+255),w,b
  6347  001AD8  108C               	iorwf	3980,w,c	;volatile
  6348  001ADA  6E8C               	movwf	3980,c	;volatile
  6349                           
  6350                           ; BSR set to: 0
  6351                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  6352  001ADC  968C               	bcf	3980,3,c	;volatile
  6353                           
  6354                           ; BSR set to: 0
  6355                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
  6356  001ADE  0ED6               	movlw	214
  6357  001AE0                     u3777:
  6358  001AE0  D000               	nop2	
  6359  001AE2  D000               	nop2	
  6360  001AE4  2EE8               	decfsz	wreg,f,c
  6361  001AE6  D7FC               	bra	u3777
  6362  001AE8  D000               	nop2	
  6363                           
  6364                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  6365  001AEA  868C               	bsf	3980,3,c	;volatile
  6366                           
  6367                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
  6368  001AEC  0ED6               	movlw	214
  6369  001AEE                     u3787:
  6370  001AEE  D000               	nop2	
  6371  001AF0  D000               	nop2	
  6372  001AF2  2EE8               	decfsz	wreg,f,c
  6373  001AF4  D7FC               	bra	u3787
  6374  001AF6  D000               	nop2	
  6375                           
  6376                           ;lcd.c: 58: data = data << 4;
  6377  001AF8  0100               	movlb	0	; () banked
  6378  001AFA  3981               	swapf	lcdNibble@data& (0+255),w,b
  6379  001AFC  0BF0               	andlw	240
  6380  001AFE  0100               	movlb	0	; () banked
  6381  001B00  6F81               	movwf	lcdNibble@data& (0+255),b
  6382                           
  6383                           ;lcd.c: 60: temp = data & 0xF0;
  6384  001B02  0100               	movlb	0	; () banked
  6385  001B04  5181               	movf	lcdNibble@data& (0+255),w,b
  6386  001B06  0BF0               	andlw	240
  6387  001B08  0100               	movlb	0	; () banked
  6388  001B0A  6F80               	movwf	lcdNibble@temp& (0+255),b
  6389                           
  6390                           ;lcd.c: 61: LATD = LATD & 0x0F;
  6391  001B0C  508C               	movf	3980,w,c	;volatile
  6392  001B0E  0B0F               	andlw	15
  6393  001B10  6E8C               	movwf	3980,c	;volatile
  6394                           
  6395                           ;lcd.c: 62: LATD = temp | LATD;
  6396  001B12  0100               	movlb	0	; () banked
  6397  001B14  5180               	movf	lcdNibble@temp& (0+255),w,b
  6398  001B16  108C               	iorwf	3980,w,c	;volatile
  6399  001B18  6E8C               	movwf	3980,c	;volatile
  6400                           
  6401                           ; BSR set to: 0
  6402                           ;lcd.c: 64: LATDbits.LATD3 = 0;
  6403  001B1A  968C               	bcf	3980,3,c	;volatile
  6404                           
  6405                           ; BSR set to: 0
  6406                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
  6407  001B1C  0ED6               	movlw	214
  6408  001B1E                     u3797:
  6409  001B1E  D000               	nop2	
  6410  001B20  D000               	nop2	
  6411  001B22  2EE8               	decfsz	wreg,f,c
  6412  001B24  D7FC               	bra	u3797
  6413  001B26  D000               	nop2	
  6414                           
  6415                           ;lcd.c: 66: LATDbits.LATD3 = 1;
  6416  001B28  868C               	bsf	3980,3,c	;volatile
  6417                           
  6418                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
  6419  001B2A  0ED6               	movlw	214
  6420  001B2C                     u3807:
  6421  001B2C  D000               	nop2	
  6422  001B2E  D000               	nop2	
  6423  001B30  2EE8               	decfsz	wreg,f,c
  6424  001B32  D7FC               	bra	u3807
  6425  001B34  D000               	nop2	
  6426  001B36  0012               	return		;funcret
  6427  001B38                     __end_of_lcdNibble:
  6428                           	opt stack 0
  6429                           tblptru	equ	0xFF8
  6430                           tblptrh	equ	0xFF7
  6431                           tblptrl	equ	0xFF6
  6432                           tablat	equ	0xFF5
  6433                           prodh	equ	0xFF4
  6434                           prodl	equ	0xFF3
  6435                           intcon	equ	0xFF2
  6436                           intcon3	equ	0xFF0
  6437                           postinc0	equ	0xFEE
  6438                           wreg	equ	0xFE8
  6439                           postdec1	equ	0xFE5
  6440                           fsr1l	equ	0xFE1
  6441                           indf2	equ	0xFDF
  6442                           postinc2	equ	0xFDE
  6443                           postdec2	equ	0xFDD
  6444                           fsr2h	equ	0xFDA
  6445                           fsr2l	equ	0xFD9
  6446                           status	equ	0xFD8
  6447                           
  6448 ;; *************** function _service *****************
  6449 ;; Defined at:
  6450 ;;		line 200 in file "main.c"
  6451 ;; Parameters:    Size  Location     Type
  6452 ;;		None
  6453 ;; Auto vars:     Size  Location     Type
  6454 ;;  key             1  116[COMRAM] unsigned char 
  6455 ;; Return value:  Size  Location     Type
  6456 ;;                  1    wreg      void 
  6457 ;; Registers used:
  6458 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6459 ;; Tracked objects:
  6460 ;;		On entry : 0/0
  6461 ;;		On exit  : 0/0
  6462 ;;		Unchanged: 0/0
  6463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6465 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6466 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6467 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6468 ;;Total ram usage:       15 bytes
  6469 ;; Hardware stack levels used:    1
  6470 ;; Hardware stack levels required when called:    4
  6471 ;; This function calls:
  6472 ;;		_servoInterruptService
  6473 ;;		i2_setAngle
  6474 ;; This function is called by:
  6475 ;;		Interrupt level 2
  6476 ;; This function uses a non-reentrant model
  6477 ;;
  6478                           
  6479                           	psect	intcode
  6480  000008                     __pintcode:
  6481                           	opt stack 0
  6482  000008                     _service:
  6483                           	opt stack 19
  6484                           
  6485                           ;incstack = 0
  6486  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6487  00000A  EDEF  F006         	call	int_func,f	;refresh shadow registers
  6488                           tblptru	equ	0xFF8
  6489                           tblptrh	equ	0xFF7
  6490                           tblptrl	equ	0xFF6
  6491                           tablat	equ	0xFF5
  6492                           prodh	equ	0xFF4
  6493                           prodl	equ	0xFF3
  6494                           intcon	equ	0xFF2
  6495                           intcon3	equ	0xFF0
  6496                           postinc0	equ	0xFEE
  6497                           wreg	equ	0xFE8
  6498                           postdec1	equ	0xFE5
  6499                           fsr1l	equ	0xFE1
  6500                           indf2	equ	0xFDF
  6501                           postinc2	equ	0xFDE
  6502                           postdec2	equ	0xFDD
  6503                           fsr2h	equ	0xFDA
  6504                           fsr2l	equ	0xFD9
  6505                           status	equ	0xFD8
  6506                           
  6507                           	psect	intcode_body
  6508  000DDE                     __pintcode_body:
  6509                           	opt stack 19
  6510  000DDE                     int_func:
  6511                           	opt stack 19
  6512  000DDE  0006               	pop		; remove dummy address from shadow register refresh
  6513  000DE0  CFFA F067          	movff	pclath,??_service
  6514  000DE4  CFFB F068          	movff	pclatu,??_service+1
  6515  000DE8  CFE9 F069          	movff	fsr0l,??_service+2
  6516  000DEC  CFEA F06A          	movff	fsr0h,??_service+3
  6517  000DF0  CFE1 F06B          	movff	fsr1l,??_service+4
  6518  000DF4  CFE2 F06C          	movff	fsr1h,??_service+5
  6519  000DF8  CFD9 F06D          	movff	fsr2l,??_service+6
  6520  000DFC  CFDA F06E          	movff	fsr2h,??_service+7
  6521  000E00  CFF3 F06F          	movff	prodl,??_service+8
  6522  000E04  CFF4 F070          	movff	prodh,??_service+9
  6523  000E08  CFF6 F071          	movff	tblptrl,??_service+10
  6524  000E0C  CFF7 F072          	movff	tblptrh,??_service+11
  6525  000E10  CFF8 F073          	movff	tblptru,??_service+12
  6526  000E14  CFF5 F074          	movff	tablat,??_service+13
  6527                           
  6528                           ;main.c: 202: servoInterruptService();
  6529  000E18  EC3D  F001         	call	_servoInterruptService	;wreg free
  6530                           
  6531                           ;main.c: 205: if(INT0IF){ INT0IF = 0;
  6532  000E1C  A2F2               	btfss	intcon,1,c	;volatile
  6533  000E1E  D006               	goto	i2l3819
  6534  000E20  92F2               	bcf	intcon,1,c	;volatile
  6535                           
  6536                           ;main.c: 206: switchFlag = 1;
  6537  000E22  0E00               	movlw	0
  6538  000E24  0100               	movlb	0	; () banked
  6539  000E26  6FFF               	movwf	(_switchFlag+1)& (0+255),b
  6540  000E28  0E01               	movlw	1
  6541  000E2A  6FFE               	movwf	_switchFlag& (0+255),b
  6542  000E2C                     i2l3819:
  6543                           
  6544                           ;main.c: 207: }
  6545                           ;main.c: 210: if(INT1IF){INT1IF = 0;
  6546  000E2C  A0F0               	btfss	intcon3,0,c	;volatile
  6547  000E2E  D057               	goto	i2l174
  6548  000E30  90F0               	bcf	intcon3,0,c	;volatile
  6549                           
  6550                           ;main.c: 211: char key = (PORTB & 0xF0) >> 4;
  6551  000E32  3881               	swapf	3969,w,c	;volatile
  6552  000E34  0B0F               	andlw	15
  6553  000E36  0B0F               	andlw	15
  6554  000E38  6E75               	movwf	service@key,c
  6555                           
  6556                           ;main.c: 212: if(key == 0)setAngle(0,30);
  6557  000E3A  5075               	movf	service@key,w,c
  6558  000E3C  A4D8               	btfss	status,2,c
  6559  000E3E  D00A               	goto	i2l3829
  6560  000E40  0E00               	movlw	0
  6561  000E42  6E5E               	movwf	i2setAngle@timer+1,c
  6562  000E44  0E00               	movlw	0
  6563  000E46  6E5D               	movwf	i2setAngle@timer,c
  6564  000E48  0E00               	movlw	0
  6565  000E4A  6E60               	movwf	i2setAngle@angle+1,c
  6566  000E4C  0E1E               	movlw	30
  6567  000E4E  6E5F               	movwf	i2setAngle@angle,c
  6568  000E50  ECD8  F00D         	call	i2_setAngle	;wreg free
  6569  000E54                     i2l3829:
  6570                           
  6571                           ;main.c: 213: if(key == 1)setAngle(0,90);
  6572  000E54  0475               	decf	service@key,w,c
  6573  000E56  A4D8               	btfss	status,2,c
  6574  000E58  D00A               	goto	i2l3833
  6575  000E5A  0E00               	movlw	0
  6576  000E5C  6E5E               	movwf	i2setAngle@timer+1,c
  6577  000E5E  0E00               	movlw	0
  6578  000E60  6E5D               	movwf	i2setAngle@timer,c
  6579  000E62  0E00               	movlw	0
  6580  000E64  6E60               	movwf	i2setAngle@angle+1,c
  6581  000E66  0E5A               	movlw	90
  6582  000E68  6E5F               	movwf	i2setAngle@angle,c
  6583  000E6A  ECD8  F00D         	call	i2_setAngle	;wreg free
  6584  000E6E                     i2l3833:
  6585                           
  6586                           ;main.c: 214: if(key == 2)setAngle(0,135);
  6587  000E6E  0E02               	movlw	2
  6588  000E70  1875               	xorwf	service@key,w,c
  6589  000E72  A4D8               	btfss	status,2,c
  6590  000E74  D00A               	goto	i2l3837
  6591  000E76  0E00               	movlw	0
  6592  000E78  6E5E               	movwf	i2setAngle@timer+1,c
  6593  000E7A  0E00               	movlw	0
  6594  000E7C  6E5D               	movwf	i2setAngle@timer,c
  6595  000E7E  0E00               	movlw	0
  6596  000E80  6E60               	movwf	i2setAngle@angle+1,c
  6597  000E82  0E87               	movlw	135
  6598  000E84  6E5F               	movwf	i2setAngle@angle,c
  6599  000E86  ECD8  F00D         	call	i2_setAngle	;wreg free
  6600  000E8A                     i2l3837:
  6601                           
  6602                           ;main.c: 216: if(key == 4)setAngle(3,80);
  6603  000E8A  0E04               	movlw	4
  6604  000E8C  1875               	xorwf	service@key,w,c
  6605  000E8E  A4D8               	btfss	status,2,c
  6606  000E90  D00A               	goto	i2l3841
  6607  000E92  0E00               	movlw	0
  6608  000E94  6E5E               	movwf	i2setAngle@timer+1,c
  6609  000E96  0E03               	movlw	3
  6610  000E98  6E5D               	movwf	i2setAngle@timer,c
  6611  000E9A  0E00               	movlw	0
  6612  000E9C  6E60               	movwf	i2setAngle@angle+1,c
  6613  000E9E  0E50               	movlw	80
  6614  000EA0  6E5F               	movwf	i2setAngle@angle,c
  6615  000EA2  ECD8  F00D         	call	i2_setAngle	;wreg free
  6616  000EA6                     i2l3841:
  6617                           
  6618                           ;main.c: 217: if(key == 5)setAngle(3,90);
  6619  000EA6  0E05               	movlw	5
  6620  000EA8  1875               	xorwf	service@key,w,c
  6621  000EAA  A4D8               	btfss	status,2,c
  6622  000EAC  D00A               	goto	i2l3845
  6623  000EAE  0E00               	movlw	0
  6624  000EB0  6E5E               	movwf	i2setAngle@timer+1,c
  6625  000EB2  0E03               	movlw	3
  6626  000EB4  6E5D               	movwf	i2setAngle@timer,c
  6627  000EB6  0E00               	movlw	0
  6628  000EB8  6E60               	movwf	i2setAngle@angle+1,c
  6629  000EBA  0E5A               	movlw	90
  6630  000EBC  6E5F               	movwf	i2setAngle@angle,c
  6631  000EBE  ECD8  F00D         	call	i2_setAngle	;wreg free
  6632  000EC2                     i2l3845:
  6633                           
  6634                           ;main.c: 218: if(key == 6)setAngle(3,100);
  6635  000EC2  0E06               	movlw	6
  6636  000EC4  1875               	xorwf	service@key,w,c
  6637  000EC6  A4D8               	btfss	status,2,c
  6638  000EC8  D00A               	goto	i2l174
  6639  000ECA  0E00               	movlw	0
  6640  000ECC  6E5E               	movwf	i2setAngle@timer+1,c
  6641  000ECE  0E03               	movlw	3
  6642  000ED0  6E5D               	movwf	i2setAngle@timer,c
  6643  000ED2  0E00               	movlw	0
  6644  000ED4  6E60               	movwf	i2setAngle@angle+1,c
  6645  000ED6  0E64               	movlw	100
  6646  000ED8  6E5F               	movwf	i2setAngle@angle,c
  6647  000EDA  ECD8  F00D         	call	i2_setAngle	;wreg free
  6648  000EDE                     i2l174:
  6649  000EDE  C074  FFF5         	movff	??_service+13,tablat
  6650  000EE2  C073  FFF8         	movff	??_service+12,tblptru
  6651  000EE6  C072  FFF7         	movff	??_service+11,tblptrh
  6652  000EEA  C071  FFF6         	movff	??_service+10,tblptrl
  6653  000EEE  C070  FFF4         	movff	??_service+9,prodh
  6654  000EF2  C06F  FFF3         	movff	??_service+8,prodl
  6655  000EF6  C06E  FFDA         	movff	??_service+7,fsr2h
  6656  000EFA  C06D  FFD9         	movff	??_service+6,fsr2l
  6657  000EFE  C06C  FFE2         	movff	??_service+5,fsr1h
  6658  000F02  C06B  FFE1         	movff	??_service+4,fsr1l
  6659  000F06  C06A  FFEA         	movff	??_service+3,fsr0h
  6660  000F0A  C069  FFE9         	movff	??_service+2,fsr0l
  6661  000F0E  C068  FFFB         	movff	??_service+1,pclatu
  6662  000F12  C067  FFFA         	movff	??_service,pclath
  6663  000F16  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6664  000F18  0011               	retfie		f
  6665  000F1A                     __end_of_service:
  6666                           	opt stack 0
  6667                           pclatu	equ	0xFFB
  6668                           pclath	equ	0xFFA
  6669                           tblptru	equ	0xFF8
  6670                           tblptrh	equ	0xFF7
  6671                           tblptrl	equ	0xFF6
  6672                           tablat	equ	0xFF5
  6673                           prodh	equ	0xFF4
  6674                           prodl	equ	0xFF3
  6675                           intcon	equ	0xFF2
  6676                           intcon3	equ	0xFF0
  6677                           postinc0	equ	0xFEE
  6678                           fsr0h	equ	0xFEA
  6679                           fsr0l	equ	0xFE9
  6680                           wreg	equ	0xFE8
  6681                           postdec1	equ	0xFE5
  6682                           fsr1h	equ	0xFE2
  6683                           fsr1l	equ	0xFE1
  6684                           indf2	equ	0xFDF
  6685                           postinc2	equ	0xFDE
  6686                           postdec2	equ	0xFDD
  6687                           fsr2h	equ	0xFDA
  6688                           fsr2l	equ	0xFD9
  6689                           status	equ	0xFD8
  6690                           
  6691 ;; *************** function i2_setAngle *****************
  6692 ;; Defined at:
  6693 ;;		line 43 in file "servo.c"
  6694 ;; Parameters:    Size  Location     Type
  6695 ;;  timer           2   92[COMRAM] int 
  6696 ;;  angle           2   94[COMRAM] int 
  6697 ;; Auto vars:     Size  Location     Type
  6698 ;;		None
  6699 ;; Return value:  Size  Location     Type
  6700 ;;                  1    wreg      void 
  6701 ;; Registers used:
  6702 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6703 ;; Tracked objects:
  6704 ;;		On entry : 0/0
  6705 ;;		On exit  : 0/0
  6706 ;;		Unchanged: 0/0
  6707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6708 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6710 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6711 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6712 ;;Total ram usage:       10 bytes
  6713 ;; Hardware stack levels used:    1
  6714 ;; Hardware stack levels required when called:    3
  6715 ;; This function calls:
  6716 ;;		i2_angleToPulse
  6717 ;; This function is called by:
  6718 ;;		_service
  6719 ;; This function uses a non-reentrant model
  6720 ;;
  6721                           
  6722                           	psect	text34
  6723  001BB0                     __ptext34:
  6724                           	opt stack 0
  6725  001BB0                     i2_setAngle:
  6726                           	opt stack 19
  6727                           
  6728                           ;servo.c: 44: pulse[timer] = 0xffff - angleToPulse(angle);
  6729                           
  6730                           ;incstack = 0
  6731  001BB0  C05F  F046         	movff	i2setAngle@angle,i2angleToPulse@angle
  6732  001BB4  C060  F047         	movff	i2setAngle@angle+1,i2angleToPulse@angle+1
  6733  001BB8  EC4F  F006         	call	i2_angleToPulse	;wreg free
  6734  001BBC  1E46               	comf	?i2_angleToPulse,f,c
  6735  001BBE  1E47               	comf	?i2_angleToPulse+1,f,c
  6736  001BC0  1E48               	comf	?i2_angleToPulse+2,f,c
  6737  001BC2  1E49               	comf	?i2_angleToPulse+3,f,c
  6738  001BC4  2A46               	incf	?i2_angleToPulse,f,c
  6739  001BC6  0E00               	movlw	0
  6740  001BC8  2247               	addwfc	?i2_angleToPulse+1,f,c
  6741  001BCA  2248               	addwfc	?i2_angleToPulse+2,f,c
  6742  001BCC  2249               	addwfc	?i2_angleToPulse+3,f,c
  6743  001BCE  0EFF               	movlw	255
  6744  001BD0  2446               	addwf	?i2_angleToPulse,w,c
  6745  001BD2  6E61               	movwf	??i2_setAngle& (0+255),c
  6746  001BD4  0EFF               	movlw	255
  6747  001BD6  2047               	addwfc	?i2_angleToPulse+1,w,c
  6748  001BD8  6E62               	movwf	(??i2_setAngle+1)& (0+255),c
  6749  001BDA  0E00               	movlw	0
  6750  001BDC  2048               	addwfc	?i2_angleToPulse+2,w,c
  6751  001BDE  6E63               	movwf	(??i2_setAngle+2)& (0+255),c
  6752  001BE0  0E00               	movlw	0
  6753  001BE2  2049               	addwfc	?i2_angleToPulse+3,w,c
  6754  001BE4  6E64               	movwf	(??i2_setAngle+3)& (0+255),c
  6755  001BE6  0E00               	movlw	low _pulse
  6756  001BE8  6E65               	movwf	(??i2_setAngle+4)& (0+255),c
  6757  001BEA  0E01               	movlw	high _pulse
  6758  001BEC  6E66               	movwf	(??i2_setAngle+5)& (0+255),c
  6759  001BEE  90D8               	bcf	status,0,c
  6760  001BF0  345D               	rlcf	i2setAngle@timer,w,c
  6761  001BF2  6ED9               	movwf	fsr2l,c
  6762  001BF4  345E               	rlcf	i2setAngle@timer+1,w,c
  6763  001BF6  6EDA               	movwf	fsr2h,c
  6764  001BF8  90D8               	bcf	status,0,c
  6765  001BFA  36D9               	rlcf	fsr2l,f,c
  6766  001BFC  36DA               	rlcf	fsr2h,f,c
  6767  001BFE  5065               	movf	??i2_setAngle+4,w,c
  6768  001C00  26D9               	addwf	fsr2l,f,c
  6769  001C02  5066               	movf	??i2_setAngle+5,w,c
  6770  001C04  22DA               	addwfc	fsr2h,f,c
  6771  001C06  C061  FFDE         	movff	??i2_setAngle,postinc2
  6772  001C0A  C062  FFDE         	movff	??i2_setAngle+1,postinc2
  6773  001C0E  C063  FFDE         	movff	??i2_setAngle+2,postinc2
  6774  001C12  C064  FFDE         	movff	??i2_setAngle+3,postinc2
  6775  001C16  0012               	return		;funcret
  6776  001C18                     __end_ofi2_setAngle:
  6777                           	opt stack 0
  6778                           pclatu	equ	0xFFB
  6779                           pclath	equ	0xFFA
  6780                           tblptru	equ	0xFF8
  6781                           tblptrh	equ	0xFF7
  6782                           tblptrl	equ	0xFF6
  6783                           tablat	equ	0xFF5
  6784                           prodh	equ	0xFF4
  6785                           prodl	equ	0xFF3
  6786                           intcon	equ	0xFF2
  6787                           intcon3	equ	0xFF0
  6788                           postinc0	equ	0xFEE
  6789                           fsr0h	equ	0xFEA
  6790                           fsr0l	equ	0xFE9
  6791                           wreg	equ	0xFE8
  6792                           postdec1	equ	0xFE5
  6793                           fsr1h	equ	0xFE2
  6794                           fsr1l	equ	0xFE1
  6795                           indf2	equ	0xFDF
  6796                           postinc2	equ	0xFDE
  6797                           postdec2	equ	0xFDD
  6798                           fsr2h	equ	0xFDA
  6799                           fsr2l	equ	0xFD9
  6800                           status	equ	0xFD8
  6801                           
  6802 ;; *************** function i2_angleToPulse *****************
  6803 ;; Defined at:
  6804 ;;		line 35 in file "servo.c"
  6805 ;; Parameters:    Size  Location     Type
  6806 ;;  angle           2   69[COMRAM] int 
  6807 ;; Auto vars:     Size  Location     Type
  6808 ;;  angleToPulse    4   88[COMRAM] long 
  6809 ;;  angleToPulse    4   81[COMRAM] long 
  6810 ;;  angleToPulse    4   77[COMRAM] long 
  6811 ;; Return value:  Size  Location     Type
  6812 ;;                  4   69[COMRAM] long 
  6813 ;; Registers used:
  6814 ;;		wreg, status,2, status,0, cstack
  6815 ;; Tracked objects:
  6816 ;;		On entry : 0/0
  6817 ;;		On exit  : 0/0
  6818 ;;		Unchanged: 0/0
  6819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6820 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6821 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6822 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6823 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6824 ;;Total ram usage:       23 bytes
  6825 ;; Hardware stack levels used:    1
  6826 ;; Hardware stack levels required when called:    2
  6827 ;; This function calls:
  6828 ;;		i2___altoft
  6829 ;;		i2___awtoft
  6830 ;;		i2___ftadd
  6831 ;;		i2___ftdiv
  6832 ;;		i2___ftmul
  6833 ;;		i2___fttol
  6834 ;; This function is called by:
  6835 ;;		i2_setAngle
  6836 ;; This function uses a non-reentrant model
  6837 ;;
  6838                           
  6839                           	psect	text35
  6840  000C9E                     __ptext35:
  6841                           	opt stack 0
  6842  000C9E                     i2_angleToPulse:
  6843                           	opt stack 19
  6844                           
  6845                           ;servo.c: 36: long offset = 0;
  6846                           
  6847                           ;incstack = 0
  6848  000C9E  0E00               	movlw	0
  6849  000CA0  6E4E               	movwf	i2angleToPulse@offset,c
  6850  000CA2  0E00               	movlw	0
  6851  000CA4  6E4F               	movwf	i2angleToPulse@offset+1,c
  6852  000CA6  0E00               	movlw	0
  6853  000CA8  6E50               	movwf	i2angleToPulse@offset+2,c
  6854  000CAA  0E00               	movlw	0
  6855  000CAC  6E51               	movwf	i2angleToPulse@offset+3,c
  6856                           
  6857                           ;servo.c: 37: long a000 = 1250;
  6858  000CAE  0EE2               	movlw	226
  6859  000CB0  6E59               	movwf	i2angleToPulse@a000,c
  6860  000CB2  0E04               	movlw	4
  6861  000CB4  6E5A               	movwf	i2angleToPulse@a000+1,c
  6862  000CB6  0E00               	movlw	0
  6863  000CB8  6E5B               	movwf	i2angleToPulse@a000+2,c
  6864  000CBA  0E00               	movlw	0
  6865  000CBC  6E5C               	movwf	i2angleToPulse@a000+3,c
  6866                           
  6867                           ;servo.c: 38: long a180 = 6250;
  6868  000CBE  0E6A               	movlw	106
  6869  000CC0  6E52               	movwf	i2angleToPulse@a180,c
  6870  000CC2  0E18               	movlw	24
  6871  000CC4  6E53               	movwf	i2angleToPulse@a180+1,c
  6872  000CC6  0E00               	movlw	0
  6873  000CC8  6E54               	movwf	i2angleToPulse@a180+2,c
  6874  000CCA  0E00               	movlw	0
  6875  000CCC  6E55               	movwf	i2angleToPulse@a180+3,c
  6876                           
  6877                           ;servo.c: 40: return a000 + angle/180.0*(a180-a000) + offset;
  6878  000CCE  C059  F04A         	movff	i2angleToPulse@a000,??i2_angleToPulse
  6879  000CD2  C05A  F04B         	movff	i2angleToPulse@a000+1,??i2_angleToPulse+1
  6880  000CD6  C05B  F04C         	movff	i2angleToPulse@a000+2,??i2_angleToPulse+2
  6881  000CDA  C05C  F04D         	movff	i2angleToPulse@a000+3,??i2_angleToPulse+3
  6882  000CDE  1E4A               	comf	??i2_angleToPulse,f,c
  6883  000CE0  1E4B               	comf	??i2_angleToPulse+1,f,c
  6884  000CE2  1E4C               	comf	??i2_angleToPulse+2,f,c
  6885  000CE4  1E4D               	comf	??i2_angleToPulse+3,f,c
  6886  000CE6  2A4A               	incf	??i2_angleToPulse,f,c
  6887  000CE8  0E00               	movlw	0
  6888  000CEA  224B               	addwfc	??i2_angleToPulse+1,f,c
  6889  000CEC  224C               	addwfc	??i2_angleToPulse+2,f,c
  6890  000CEE  224D               	addwfc	??i2_angleToPulse+3,f,c
  6891  000CF0  5052               	movf	i2angleToPulse@a180,w,c
  6892  000CF2  244A               	addwf	??i2_angleToPulse,w,c
  6893  000CF4  6E09               	movwf	i2___altoft@c,c
  6894  000CF6  5053               	movf	i2angleToPulse@a180+1,w,c
  6895  000CF8  204B               	addwfc	??i2_angleToPulse+1,w,c
  6896  000CFA  6E0A               	movwf	i2___altoft@c+1,c
  6897  000CFC  5054               	movf	i2angleToPulse@a180+2,w,c
  6898  000CFE  204C               	addwfc	??i2_angleToPulse+2,w,c
  6899  000D00  6E0B               	movwf	i2___altoft@c+2,c
  6900  000D02  5055               	movf	i2angleToPulse@a180+3,w,c
  6901  000D04  204D               	addwfc	??i2_angleToPulse+3,w,c
  6902  000D06  6E0C               	movwf	i2___altoft@c+3,c
  6903  000D08  EC9C  F00D         	call	i2___altoft	;wreg free
  6904  000D0C  C009  F01F         	movff	?i2___altoft,i2___ftmul@f2
  6905  000D10  C00A  F020         	movff	?i2___altoft+1,i2___ftmul@f2+1
  6906  000D14  C00B  F021         	movff	?i2___altoft+2,i2___ftmul@f2+2
  6907  000D18  0E00               	movlw	0
  6908  000D1A  6E10               	movwf	i2___ftdiv@f2,c
  6909  000D1C  0E34               	movlw	52
  6910  000D1E  6E11               	movwf	i2___ftdiv@f2+1,c
  6911  000D20  0E43               	movlw	67
  6912  000D22  6E12               	movwf	i2___ftdiv@f2+2,c
  6913  000D24  C046  F009         	movff	i2angleToPulse@angle,i2___awtoft@c
  6914  000D28  C047  F00A         	movff	i2angleToPulse@angle+1,i2___awtoft@c+1
  6915  000D2C  EC0B  F00F         	call	i2___awtoft	;wreg free
  6916  000D30  C009  F00D         	movff	?i2___awtoft,i2___ftdiv@f1
  6917  000D34  C00A  F00E         	movff	?i2___awtoft+1,i2___ftdiv@f1+1
  6918  000D38  C00B  F00F         	movff	?i2___awtoft+2,i2___ftdiv@f1+2
  6919  000D3C  EC89  F009         	call	i2___ftdiv	;wreg free
  6920  000D40  C00D  F01C         	movff	?i2___ftdiv,i2___ftmul@f1
  6921  000D44  C00E  F01D         	movff	?i2___ftdiv+1,i2___ftmul@f1+1
  6922  000D48  C00F  F01E         	movff	?i2___ftdiv+2,i2___ftmul@f1+2
  6923  000D4C  EC0F  F009         	call	i2___ftmul	;wreg free
  6924  000D50  C01C  F02E         	movff	?i2___ftmul,i2___ftadd@f2
  6925  000D54  C01D  F02F         	movff	?i2___ftmul+1,i2___ftadd@f2+1
  6926  000D58  C01E  F030         	movff	?i2___ftmul+2,i2___ftadd@f2+2
  6927  000D5C  C059  F009         	movff	i2angleToPulse@a000,i2___altoft@c
  6928  000D60  C05A  F00A         	movff	i2angleToPulse@a000+1,i2___altoft@c+1
  6929  000D64  C05B  F00B         	movff	i2angleToPulse@a000+2,i2___altoft@c+2
  6930  000D68  C05C  F00C         	movff	i2angleToPulse@a000+3,i2___altoft@c+3
  6931  000D6C  EC9C  F00D         	call	i2___altoft	;wreg free
  6932  000D70  C009  F02B         	movff	?i2___altoft,i2___ftadd@f1
  6933  000D74  C00A  F02C         	movff	?i2___altoft+1,i2___ftadd@f1+1
  6934  000D78  C00B  F02D         	movff	?i2___altoft+2,i2___ftadd@f1+2
  6935  000D7C  EC27  F002         	call	i2___ftadd	;wreg free
  6936  000D80  C02B  F056         	movff	?i2___ftadd,i2_angleToPulse$1308
  6937  000D84  C02C  F057         	movff	?i2___ftadd+1,i2_angleToPulse$1308+1
  6938  000D88  C02D  F058         	movff	?i2___ftadd+2,i2_angleToPulse$1308+2
  6939                           
  6940                           ;servo.c: 40: return a000 + angle/180.0*(a180-a000) + offset;
  6941  000D8C  C04E  F009         	movff	i2angleToPulse@offset,i2___altoft@c
  6942  000D90  C04F  F00A         	movff	i2angleToPulse@offset+1,i2___altoft@c+1
  6943  000D94  C050  F00B         	movff	i2angleToPulse@offset+2,i2___altoft@c+2
  6944  000D98  C051  F00C         	movff	i2angleToPulse@offset+3,i2___altoft@c+3
  6945  000D9C  EC9C  F00D         	call	i2___altoft	;wreg free
  6946  000DA0  C009  F02E         	movff	?i2___altoft,i2___ftadd@f2
  6947  000DA4  C00A  F02F         	movff	?i2___altoft+1,i2___ftadd@f2+1
  6948  000DA8  C00B  F030         	movff	?i2___altoft+2,i2___ftadd@f2+2
  6949  000DAC  C056  F02B         	movff	i2_angleToPulse$1308,i2___ftadd@f1
  6950  000DB0  C057  F02C         	movff	i2_angleToPulse$1308+1,i2___ftadd@f1+1
  6951  000DB4  C058  F02D         	movff	i2_angleToPulse$1308+2,i2___ftadd@f1+2
  6952  000DB8  EC27  F002         	call	i2___ftadd	;wreg free
  6953  000DBC  C02B  F037         	movff	?i2___ftadd,i2___fttol@f1
  6954  000DC0  C02C  F038         	movff	?i2___ftadd+1,i2___fttol@f1+1
  6955  000DC4  C02D  F039         	movff	?i2___ftadd+2,i2___fttol@f1+2
  6956  000DC8  EC95  F008         	call	i2___fttol	;wreg free
  6957  000DCC  C037  F046         	movff	?i2___fttol,?i2_angleToPulse
  6958  000DD0  C038  F047         	movff	?i2___fttol+1,?i2_angleToPulse+1
  6959  000DD4  C039  F048         	movff	?i2___fttol+2,?i2_angleToPulse+2
  6960  000DD8  C03A  F049         	movff	?i2___fttol+3,?i2_angleToPulse+3
  6961  000DDC  0012               	return	
  6962  000DDE                     __end_ofi2_angleToPulse:
  6963                           	opt stack 0
  6964                           pclatu	equ	0xFFB
  6965                           pclath	equ	0xFFA
  6966                           tblptru	equ	0xFF8
  6967                           tblptrh	equ	0xFF7
  6968                           tblptrl	equ	0xFF6
  6969                           tablat	equ	0xFF5
  6970                           prodh	equ	0xFF4
  6971                           prodl	equ	0xFF3
  6972                           intcon	equ	0xFF2
  6973                           intcon3	equ	0xFF0
  6974                           postinc0	equ	0xFEE
  6975                           fsr0h	equ	0xFEA
  6976                           fsr0l	equ	0xFE9
  6977                           wreg	equ	0xFE8
  6978                           postdec1	equ	0xFE5
  6979                           fsr1h	equ	0xFE2
  6980                           fsr1l	equ	0xFE1
  6981                           indf2	equ	0xFDF
  6982                           postinc2	equ	0xFDE
  6983                           postdec2	equ	0xFDD
  6984                           fsr2h	equ	0xFDA
  6985                           fsr2l	equ	0xFD9
  6986                           status	equ	0xFD8
  6987                           
  6988 ;; *************** function i2___fttol *****************
  6989 ;; Defined at:
  6990 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  6991 ;; Parameters:    Size  Location     Type
  6992 ;;  f1              3   54[COMRAM] float 
  6993 ;; Auto vars:     Size  Location     Type
  6994 ;;  __fttol         4   64[COMRAM] unsigned long 
  6995 ;;  __fttol         1   68[COMRAM] unsigned char 
  6996 ;;  __fttol         1   63[COMRAM] unsigned char 
  6997 ;; Return value:  Size  Location     Type
  6998 ;;                  4   54[COMRAM] long 
  6999 ;; Registers used:
  7000 ;;		wreg, status,2, status,0
  7001 ;; Tracked objects:
  7002 ;;		On entry : 0/0
  7003 ;;		On exit  : 0/0
  7004 ;;		Unchanged: 0/0
  7005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7006 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7007 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7008 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7009 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7010 ;;Total ram usage:       15 bytes
  7011 ;; Hardware stack levels used:    1
  7012 ;; This function calls:
  7013 ;;		Nothing
  7014 ;; This function is called by:
  7015 ;;		i2_angleToPulse
  7016 ;; This function uses a non-reentrant model
  7017 ;;
  7018                           
  7019                           	psect	text36
  7020  00112A                     __ptext36:
  7021                           	opt stack 0
  7022  00112A                     i2___fttol:
  7023                           	opt stack 20
  7024                           
  7025                           ;incstack = 0
  7026  00112A  C039  F03B         	movff	i2___fttol@f1+2,??i2___fttol
  7027  00112E  6A3C               	clrf	(??i2___fttol+1)& (0+255),c
  7028  001130  6A3D               	clrf	(??i2___fttol+2)& (0+255),c
  7029  001132  3438               	rlcf	i2___fttol@f1+1,w,c
  7030  001134  363B               	rlcf	??i2___fttol& (0+255),f,c
  7031  001136  E301               	bnc	u301_41
  7032  001138  803C               	bsf	(??i2___fttol+1)& (0+255),0,c
  7033  00113A                     u301_41:
  7034  00113A  503B               	movf	??i2___fttol,w,c
  7035  00113C  6E45               	movwf	i2___fttol@exp1,c
  7036  00113E  5045               	movf	i2___fttol@exp1,w,c
  7037  001140  A4D8               	btfss	status,2,c
  7038  001142  D009               	goto	i2l3375
  7039  001144  0E00               	movlw	0
  7040  001146  6E37               	movwf	?i2___fttol,c
  7041  001148  0E00               	movlw	0
  7042  00114A  6E38               	movwf	?i2___fttol+1,c
  7043  00114C  0E00               	movlw	0
  7044  00114E  6E39               	movwf	?i2___fttol+2,c
  7045  001150  0E00               	movlw	0
  7046  001152  6E3A               	movwf	?i2___fttol+3,c
  7047  001154  0012               	return	
  7048  001156                     i2l3375:
  7049  001156  0E17               	movlw	23
  7050  001158  6E3B               	movwf	??i2___fttol& (0+255),c
  7051  00115A  C037  F03C         	movff	i2___fttol@f1,??i2___fttol+1
  7052  00115E  C038  F03D         	movff	i2___fttol@f1+1,??i2___fttol+2
  7053  001162  C039  F03E         	movff	i2___fttol@f1+2,??i2___fttol+3
  7054  001166  283B               	incf	??i2___fttol,w,c
  7055  001168  6E3F               	movwf	(??i2___fttol+4)& (0+255),c
  7056  00116A  D004               	goto	i2u303_40
  7057  00116C                     i2u303_45:
  7058  00116C  90D8               	bcf	status,0,c
  7059  00116E  323E               	rrcf	??i2___fttol+3,f,c
  7060  001170  323D               	rrcf	??i2___fttol+2,f,c
  7061  001172  323C               	rrcf	??i2___fttol+1,f,c
  7062  001174                     i2u303_40:
  7063  001174  2E3F               	decfsz	(??i2___fttol+4)& (0+255),f,c
  7064  001176  D7FA               	goto	i2u303_45
  7065  001178  503C               	movf	??i2___fttol+1,w,c
  7066  00117A  6E40               	movwf	i2___fttol@sign1,c
  7067  00117C  8E38               	bsf	i2___fttol@f1+1,7,c
  7068  00117E  0EFF               	movlw	255
  7069  001180  1637               	andwf	i2___fttol@f1,f,c
  7070  001182  0EFF               	movlw	255
  7071  001184  1638               	andwf	i2___fttol@f1+1,f,c
  7072  001186  0E00               	movlw	0
  7073  001188  1639               	andwf	i2___fttol@f1+2,f,c
  7074  00118A  5037               	movf	i2___fttol@f1,w,c
  7075  00118C  6E41               	movwf	i2___fttol@lval,c
  7076  00118E  5038               	movf	i2___fttol@f1+1,w,c
  7077  001190  6E42               	movwf	i2___fttol@lval+1,c
  7078  001192  5039               	movf	i2___fttol@f1+2,w,c
  7079  001194  6E43               	movwf	i2___fttol@lval+2,c
  7080  001196  6A44               	clrf	i2___fttol@lval+3,c
  7081  001198  0E8E               	movlw	142
  7082  00119A  5E45               	subwf	i2___fttol@exp1,f,c
  7083  00119C  AE45               	btfss	i2___fttol@exp1,7,c
  7084  00119E  D016               	goto	i2l3397
  7085  0011A0  5045               	movf	i2___fttol@exp1,w,c
  7086  0011A2  0A80               	xorlw	128
  7087  0011A4  0F8F               	addlw	143
  7088  0011A6  B0D8               	btfsc	status,0,c
  7089  0011A8  D009               	goto	i2l3393
  7090  0011AA  0E00               	movlw	0
  7091  0011AC  6E37               	movwf	?i2___fttol,c
  7092  0011AE  0E00               	movlw	0
  7093  0011B0  6E38               	movwf	?i2___fttol+1,c
  7094  0011B2  0E00               	movlw	0
  7095  0011B4  6E39               	movwf	?i2___fttol+2,c
  7096  0011B6  0E00               	movlw	0
  7097  0011B8  6E3A               	movwf	?i2___fttol+3,c
  7098  0011BA  0012               	return	
  7099  0011BC                     i2l3393:
  7100  0011BC  90D8               	bcf	status,0,c
  7101  0011BE  3244               	rrcf	i2___fttol@lval+3,f,c
  7102  0011C0  3243               	rrcf	i2___fttol@lval+2,f,c
  7103  0011C2  3242               	rrcf	i2___fttol@lval+1,f,c
  7104  0011C4  3241               	rrcf	i2___fttol@lval,f,c
  7105  0011C6  3E45               	incfsz	i2___fttol@exp1,f,c
  7106  0011C8  D7F9               	goto	i2l3393
  7107  0011CA  D015               	goto	i2l3407
  7108  0011CC                     i2l3397:
  7109  0011CC  0E17               	movlw	23
  7110  0011CE  6445               	cpfsgt	i2___fttol@exp1,c
  7111  0011D0  D00F               	goto	i2l3405
  7112  0011D2  0E00               	movlw	0
  7113  0011D4  6E37               	movwf	?i2___fttol,c
  7114  0011D6  0E00               	movlw	0
  7115  0011D8  6E38               	movwf	?i2___fttol+1,c
  7116  0011DA  0E00               	movlw	0
  7117  0011DC  6E39               	movwf	?i2___fttol+2,c
  7118  0011DE  0E00               	movlw	0
  7119  0011E0  6E3A               	movwf	?i2___fttol+3,c
  7120  0011E2  0012               	return	
  7121  0011E4                     i2l3403:
  7122  0011E4  90D8               	bcf	status,0,c
  7123  0011E6  3641               	rlcf	i2___fttol@lval,f,c
  7124  0011E8  3642               	rlcf	i2___fttol@lval+1,f,c
  7125  0011EA  3643               	rlcf	i2___fttol@lval+2,f,c
  7126  0011EC  3644               	rlcf	i2___fttol@lval+3,f,c
  7127  0011EE  0645               	decf	i2___fttol@exp1,f,c
  7128  0011F0                     i2l3405:
  7129  0011F0  5045               	movf	i2___fttol@exp1,w,c
  7130  0011F2  A4D8               	btfss	status,2,c
  7131  0011F4  D7F7               	goto	i2l3403
  7132  0011F6                     i2l3407:
  7133  0011F6  5040               	movf	i2___fttol@sign1,w,c
  7134  0011F8  B4D8               	btfsc	status,2,c
  7135  0011FA  D008               	goto	i2l3411
  7136  0011FC  1E44               	comf	i2___fttol@lval+3,f,c
  7137  0011FE  1E43               	comf	i2___fttol@lval+2,f,c
  7138  001200  1E42               	comf	i2___fttol@lval+1,f,c
  7139  001202  6C41               	negf	i2___fttol@lval,c
  7140  001204  0E00               	movlw	0
  7141  001206  2242               	addwfc	i2___fttol@lval+1,f,c
  7142  001208  2243               	addwfc	i2___fttol@lval+2,f,c
  7143  00120A  2244               	addwfc	i2___fttol@lval+3,f,c
  7144  00120C                     i2l3411:
  7145  00120C  C041  F037         	movff	i2___fttol@lval,?i2___fttol
  7146  001210  C042  F038         	movff	i2___fttol@lval+1,?i2___fttol+1
  7147  001214  C043  F039         	movff	i2___fttol@lval+2,?i2___fttol+2
  7148  001218  C044  F03A         	movff	i2___fttol@lval+3,?i2___fttol+3
  7149  00121C  0012               	return	
  7150  00121E                     __end_ofi2___fttol:
  7151                           	opt stack 0
  7152                           pclatu	equ	0xFFB
  7153                           pclath	equ	0xFFA
  7154                           tblptru	equ	0xFF8
  7155                           tblptrh	equ	0xFF7
  7156                           tblptrl	equ	0xFF6
  7157                           tablat	equ	0xFF5
  7158                           prodh	equ	0xFF4
  7159                           prodl	equ	0xFF3
  7160                           intcon	equ	0xFF2
  7161                           intcon3	equ	0xFF0
  7162                           postinc0	equ	0xFEE
  7163                           fsr0h	equ	0xFEA
  7164                           fsr0l	equ	0xFE9
  7165                           wreg	equ	0xFE8
  7166                           postdec1	equ	0xFE5
  7167                           fsr1h	equ	0xFE2
  7168                           fsr1l	equ	0xFE1
  7169                           indf2	equ	0xFDF
  7170                           postinc2	equ	0xFDE
  7171                           postdec2	equ	0xFDD
  7172                           fsr2h	equ	0xFDA
  7173                           fsr2l	equ	0xFD9
  7174                           status	equ	0xFD8
  7175                           
  7176 ;; *************** function i2___ftmul *****************
  7177 ;; Defined at:
  7178 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  7179 ;; Parameters:    Size  Location     Type
  7180 ;;  f1              3   27[COMRAM] float 
  7181 ;;  f2              3   30[COMRAM] float 
  7182 ;; Auto vars:     Size  Location     Type
  7183 ;;  __ftmul         3   37[COMRAM] unsigned um
  7184 ;;  __ftmul         1   41[COMRAM] unsigned char 
  7185 ;;  __ftmul         1   40[COMRAM] unsigned char 
  7186 ;;  __ftmul         1   36[COMRAM] unsigned char 
  7187 ;; Return value:  Size  Location     Type
  7188 ;;                  3   27[COMRAM] float 
  7189 ;; Registers used:
  7190 ;;		wreg, status,2, status,0, cstack
  7191 ;; Tracked objects:
  7192 ;;		On entry : 0/0
  7193 ;;		On exit  : 0/0
  7194 ;;		Unchanged: 0/0
  7195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7196 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7197 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7198 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7199 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7200 ;;Total ram usage:       15 bytes
  7201 ;; Hardware stack levels used:    1
  7202 ;; Hardware stack levels required when called:    1
  7203 ;; This function calls:
  7204 ;;		i2___ftpack
  7205 ;; This function is called by:
  7206 ;;		i2_angleToPulse
  7207 ;; This function uses a non-reentrant model
  7208 ;;
  7209                           
  7210                           	psect	text37
  7211  00121E                     __ptext37:
  7212                           	opt stack 0
  7213  00121E                     i2___ftmul:
  7214                           	opt stack 19
  7215                           
  7216                           ;incstack = 0
  7217  00121E  C01E  F022         	movff	i2___ftmul@f1+2,??i2___ftmul
  7218  001222  6A23               	clrf	(??i2___ftmul+1)& (0+255),c
  7219  001224  6A24               	clrf	(??i2___ftmul+2)& (0+255),c
  7220  001226  341D               	rlcf	i2___ftmul@f1+1,w,c
  7221  001228  3622               	rlcf	??i2___ftmul& (0+255),f,c
  7222  00122A  E301               	bnc	u295_41
  7223  00122C  8023               	bsf	(??i2___ftmul+1)& (0+255),0,c
  7224  00122E                     u295_41:
  7225  00122E  5022               	movf	??i2___ftmul,w,c
  7226  001230  6E25               	movwf	i2___ftmul@exp,c
  7227  001232  5025               	movf	i2___ftmul@exp,w,c
  7228  001234  A4D8               	btfss	status,2,c
  7229  001236  D007               	goto	i2l3327
  7230  001238  0E00               	movlw	0
  7231  00123A  6E1C               	movwf	?i2___ftmul,c
  7232  00123C  0E00               	movlw	0
  7233  00123E  6E1D               	movwf	?i2___ftmul+1,c
  7234  001240  0E00               	movlw	0
  7235  001242  6E1E               	movwf	?i2___ftmul+2,c
  7236  001244  0012               	return	
  7237  001246                     i2l3327:
  7238  001246  C021  F022         	movff	i2___ftmul@f2+2,??i2___ftmul
  7239  00124A  6A23               	clrf	(??i2___ftmul+1)& (0+255),c
  7240  00124C  6A24               	clrf	(??i2___ftmul+2)& (0+255),c
  7241  00124E  3420               	rlcf	i2___ftmul@f2+1,w,c
  7242  001250  3622               	rlcf	??i2___ftmul& (0+255),f,c
  7243  001252  E301               	bnc	u297_41
  7244  001254  8023               	bsf	(??i2___ftmul+1)& (0+255),0,c
  7245  001256                     u297_41:
  7246  001256  5022               	movf	??i2___ftmul,w,c
  7247  001258  6E2A               	movwf	i2___ftmul@sign,c
  7248  00125A  502A               	movf	i2___ftmul@sign,w,c
  7249  00125C  A4D8               	btfss	status,2,c
  7250  00125E  D007               	goto	i2l3333
  7251  001260  0E00               	movlw	0
  7252  001262  6E1C               	movwf	?i2___ftmul,c
  7253  001264  0E00               	movlw	0
  7254  001266  6E1D               	movwf	?i2___ftmul+1,c
  7255  001268  0E00               	movlw	0
  7256  00126A  6E1E               	movwf	?i2___ftmul+2,c
  7257  00126C  0012               	return	
  7258  00126E                     i2l3333:
  7259  00126E  502A               	movf	i2___ftmul@sign,w,c
  7260  001270  0F7B               	addlw	123
  7261  001272  2625               	addwf	i2___ftmul@exp,f,c
  7262  001274  C01E  F02A         	movff	i2___ftmul@f1+2,i2___ftmul@sign
  7263  001278  5021               	movf	i2___ftmul@f2+2,w,c
  7264  00127A  1A2A               	xorwf	i2___ftmul@sign,f,c
  7265  00127C  0E80               	movlw	128
  7266  00127E  162A               	andwf	i2___ftmul@sign,f,c
  7267  001280  8E1D               	bsf	i2___ftmul@f1+1,7,c
  7268  001282  8E20               	bsf	i2___ftmul@f2+1,7,c
  7269  001284  0EFF               	movlw	255
  7270  001286  161F               	andwf	i2___ftmul@f2,f,c
  7271  001288  0EFF               	movlw	255
  7272  00128A  1620               	andwf	i2___ftmul@f2+1,f,c
  7273  00128C  0E00               	movlw	0
  7274  00128E  1621               	andwf	i2___ftmul@f2+2,f,c
  7275  001290  0E00               	movlw	0
  7276  001292  6E26               	movwf	i2___ftmul@f3_as_product,c
  7277  001294  0E00               	movlw	0
  7278  001296  6E27               	movwf	i2___ftmul@f3_as_product+1,c
  7279  001298  0E00               	movlw	0
  7280  00129A  6E28               	movwf	i2___ftmul@f3_as_product+2,c
  7281  00129C  0E07               	movlw	7
  7282  00129E  6E29               	movwf	i2___ftmul@cntr,c
  7283  0012A0                     i2l3347:
  7284  0012A0  A01C               	btfss	i2___ftmul@f1,0,c
  7285  0012A2  D006               	goto	i2l3351
  7286  0012A4  501F               	movf	i2___ftmul@f2,w,c
  7287  0012A6  2626               	addwf	i2___ftmul@f3_as_product,f,c
  7288  0012A8  5020               	movf	i2___ftmul@f2+1,w,c
  7289  0012AA  2227               	addwfc	i2___ftmul@f3_as_product+1,f,c
  7290  0012AC  5021               	movf	i2___ftmul@f2+2,w,c
  7291  0012AE  2228               	addwfc	i2___ftmul@f3_as_product+2,f,c
  7292  0012B0                     i2l3351:
  7293  0012B0  90D8               	bcf	status,0,c
  7294  0012B2  321E               	rrcf	i2___ftmul@f1+2,f,c
  7295  0012B4  321D               	rrcf	i2___ftmul@f1+1,f,c
  7296  0012B6  321C               	rrcf	i2___ftmul@f1,f,c
  7297  0012B8  90D8               	bcf	status,0,c
  7298  0012BA  361F               	rlcf	i2___ftmul@f2,f,c
  7299  0012BC  3620               	rlcf	i2___ftmul@f2+1,f,c
  7300  0012BE  3621               	rlcf	i2___ftmul@f2+2,f,c
  7301  0012C0  2E29               	decfsz	i2___ftmul@cntr,f,c
  7302  0012C2  D7EE               	goto	i2l3347
  7303  0012C4  0E09               	movlw	9
  7304  0012C6  6E29               	movwf	i2___ftmul@cntr,c
  7305  0012C8                     i2l3357:
  7306  0012C8  A01C               	btfss	i2___ftmul@f1,0,c
  7307  0012CA  D006               	goto	i2l3361
  7308  0012CC  501F               	movf	i2___ftmul@f2,w,c
  7309  0012CE  2626               	addwf	i2___ftmul@f3_as_product,f,c
  7310  0012D0  5020               	movf	i2___ftmul@f2+1,w,c
  7311  0012D2  2227               	addwfc	i2___ftmul@f3_as_product+1,f,c
  7312  0012D4  5021               	movf	i2___ftmul@f2+2,w,c
  7313  0012D6  2228               	addwfc	i2___ftmul@f3_as_product+2,f,c
  7314  0012D8                     i2l3361:
  7315  0012D8  90D8               	bcf	status,0,c
  7316  0012DA  321E               	rrcf	i2___ftmul@f1+2,f,c
  7317  0012DC  321D               	rrcf	i2___ftmul@f1+1,f,c
  7318  0012DE  321C               	rrcf	i2___ftmul@f1,f,c
  7319  0012E0  90D8               	bcf	status,0,c
  7320  0012E2  3228               	rrcf	i2___ftmul@f3_as_product+2,f,c
  7321  0012E4  3227               	rrcf	i2___ftmul@f3_as_product+1,f,c
  7322  0012E6  3226               	rrcf	i2___ftmul@f3_as_product,f,c
  7323  0012E8  2E29               	decfsz	i2___ftmul@cntr,f,c
  7324  0012EA  D7EE               	goto	i2l3357
  7325  0012EC  C026  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
  7326  0012F0  C027  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
  7327  0012F4  C028  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
  7328  0012F8  C025  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
  7329  0012FC  C02A  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
  7330  001300  ECC5  F00A         	call	i2___ftpack	;wreg free
  7331  001304  C001  F01C         	movff	?i2___ftpack,?i2___ftmul
  7332  001308  C002  F01D         	movff	?i2___ftpack+1,?i2___ftmul+1
  7333  00130C  C003  F01E         	movff	?i2___ftpack+2,?i2___ftmul+2
  7334  001310  0012               	return	
  7335  001312                     __end_ofi2___ftmul:
  7336                           	opt stack 0
  7337                           pclatu	equ	0xFFB
  7338                           pclath	equ	0xFFA
  7339                           tblptru	equ	0xFF8
  7340                           tblptrh	equ	0xFF7
  7341                           tblptrl	equ	0xFF6
  7342                           tablat	equ	0xFF5
  7343                           prodh	equ	0xFF4
  7344                           prodl	equ	0xFF3
  7345                           intcon	equ	0xFF2
  7346                           intcon3	equ	0xFF0
  7347                           postinc0	equ	0xFEE
  7348                           fsr0h	equ	0xFEA
  7349                           fsr0l	equ	0xFE9
  7350                           wreg	equ	0xFE8
  7351                           postdec1	equ	0xFE5
  7352                           fsr1h	equ	0xFE2
  7353                           fsr1l	equ	0xFE1
  7354                           indf2	equ	0xFDF
  7355                           postinc2	equ	0xFDE
  7356                           postdec2	equ	0xFDD
  7357                           fsr2h	equ	0xFDA
  7358                           fsr2l	equ	0xFD9
  7359                           status	equ	0xFD8
  7360                           
  7361 ;; *************** function i2___ftdiv *****************
  7362 ;; Defined at:
  7363 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  7364 ;; Parameters:    Size  Location     Type
  7365 ;;  f1              3   12[COMRAM] float 
  7366 ;;  f2              3   15[COMRAM] float 
  7367 ;; Auto vars:     Size  Location     Type
  7368 ;;  __ftdiv         3   22[COMRAM] float 
  7369 ;;  __ftdiv         1   26[COMRAM] unsigned char 
  7370 ;;  __ftdiv         1   25[COMRAM] unsigned char 
  7371 ;;  __ftdiv         1   21[COMRAM] unsigned char 
  7372 ;; Return value:  Size  Location     Type
  7373 ;;                  3   12[COMRAM] float 
  7374 ;; Registers used:
  7375 ;;		wreg, status,2, status,0, cstack
  7376 ;; Tracked objects:
  7377 ;;		On entry : 0/0
  7378 ;;		On exit  : 0/0
  7379 ;;		Unchanged: 0/0
  7380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7381 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7382 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7383 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7384 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7385 ;;Total ram usage:       15 bytes
  7386 ;; Hardware stack levels used:    1
  7387 ;; Hardware stack levels required when called:    1
  7388 ;; This function calls:
  7389 ;;		i2___ftpack
  7390 ;; This function is called by:
  7391 ;;		i2_angleToPulse
  7392 ;; This function uses a non-reentrant model
  7393 ;;
  7394                           
  7395                           	psect	text38
  7396  001312                     __ptext38:
  7397                           	opt stack 0
  7398  001312                     i2___ftdiv:
  7399                           	opt stack 19
  7400                           
  7401                           ;incstack = 0
  7402  001312  C00F  F013         	movff	i2___ftdiv@f1+2,??i2___ftdiv
  7403  001316  6A14               	clrf	(??i2___ftdiv+1)& (0+255),c
  7404  001318  6A15               	clrf	(??i2___ftdiv+2)& (0+255),c
  7405  00131A  340E               	rlcf	i2___ftdiv@f1+1,w,c
  7406  00131C  3613               	rlcf	??i2___ftdiv& (0+255),f,c
  7407  00131E  E301               	bnc	u290_41
  7408  001320  8014               	bsf	(??i2___ftdiv+1)& (0+255),0,c
  7409  001322                     u290_41:
  7410  001322  5013               	movf	??i2___ftdiv,w,c
  7411  001324  6E1A               	movwf	i2___ftdiv@exp,c
  7412  001326  501A               	movf	i2___ftdiv@exp,w,c
  7413  001328  A4D8               	btfss	status,2,c
  7414  00132A  D007               	goto	i2l3281
  7415  00132C  0E00               	movlw	0
  7416  00132E  6E0D               	movwf	?i2___ftdiv,c
  7417  001330  0E00               	movlw	0
  7418  001332  6E0E               	movwf	?i2___ftdiv+1,c
  7419  001334  0E00               	movlw	0
  7420  001336  6E0F               	movwf	?i2___ftdiv+2,c
  7421  001338  0012               	return	
  7422  00133A                     i2l3281:
  7423  00133A  C012  F013         	movff	i2___ftdiv@f2+2,??i2___ftdiv
  7424  00133E  6A14               	clrf	(??i2___ftdiv+1)& (0+255),c
  7425  001340  6A15               	clrf	(??i2___ftdiv+2)& (0+255),c
  7426  001342  3411               	rlcf	i2___ftdiv@f2+1,w,c
  7427  001344  3613               	rlcf	??i2___ftdiv& (0+255),f,c
  7428  001346  E301               	bnc	u292_41
  7429  001348  8014               	bsf	(??i2___ftdiv+1)& (0+255),0,c
  7430  00134A                     u292_41:
  7431  00134A  5013               	movf	??i2___ftdiv,w,c
  7432  00134C  6E1B               	movwf	i2___ftdiv@sign,c
  7433  00134E  501B               	movf	i2___ftdiv@sign,w,c
  7434  001350  A4D8               	btfss	status,2,c
  7435  001352  D007               	goto	i2l3287
  7436  001354  0E00               	movlw	0
  7437  001356  6E0D               	movwf	?i2___ftdiv,c
  7438  001358  0E00               	movlw	0
  7439  00135A  6E0E               	movwf	?i2___ftdiv+1,c
  7440  00135C  0E00               	movlw	0
  7441  00135E  6E0F               	movwf	?i2___ftdiv+2,c
  7442  001360  0012               	return	
  7443  001362                     i2l3287:
  7444  001362  0E00               	movlw	0
  7445  001364  6E17               	movwf	i2___ftdiv@f3,c
  7446  001366  0E00               	movlw	0
  7447  001368  6E18               	movwf	i2___ftdiv@f3+1,c
  7448  00136A  0E00               	movlw	0
  7449  00136C  6E19               	movwf	i2___ftdiv@f3+2,c
  7450  00136E  501B               	movf	i2___ftdiv@sign,w,c
  7451  001370  0F89               	addlw	137
  7452  001372  5E1A               	subwf	i2___ftdiv@exp,f,c
  7453  001374  C00F  F01B         	movff	i2___ftdiv@f1+2,i2___ftdiv@sign
  7454  001378  5012               	movf	i2___ftdiv@f2+2,w,c
  7455  00137A  1A1B               	xorwf	i2___ftdiv@sign,f,c
  7456  00137C  0E80               	movlw	128
  7457  00137E  161B               	andwf	i2___ftdiv@sign,f,c
  7458  001380  8E0E               	bsf	i2___ftdiv@f1+1,7,c
  7459  001382  0EFF               	movlw	255
  7460  001384  160D               	andwf	i2___ftdiv@f1,f,c
  7461  001386  0EFF               	movlw	255
  7462  001388  160E               	andwf	i2___ftdiv@f1+1,f,c
  7463  00138A  0E00               	movlw	0
  7464  00138C  160F               	andwf	i2___ftdiv@f1+2,f,c
  7465  00138E  8E11               	bsf	i2___ftdiv@f2+1,7,c
  7466  001390  0EFF               	movlw	255
  7467  001392  1610               	andwf	i2___ftdiv@f2,f,c
  7468  001394  0EFF               	movlw	255
  7469  001396  1611               	andwf	i2___ftdiv@f2+1,f,c
  7470  001398  0E00               	movlw	0
  7471  00139A  1612               	andwf	i2___ftdiv@f2+2,f,c
  7472  00139C  0E18               	movlw	24
  7473  00139E  6E16               	movwf	i2___ftdiv@cntr,c
  7474  0013A0                     i2l3307:
  7475  0013A0  90D8               	bcf	status,0,c
  7476  0013A2  3617               	rlcf	i2___ftdiv@f3,f,c
  7477  0013A4  3618               	rlcf	i2___ftdiv@f3+1,f,c
  7478  0013A6  3619               	rlcf	i2___ftdiv@f3+2,f,c
  7479  0013A8  5010               	movf	i2___ftdiv@f2,w,c
  7480  0013AA  5C0D               	subwf	i2___ftdiv@f1,w,c
  7481  0013AC  5011               	movf	i2___ftdiv@f2+1,w,c
  7482  0013AE  580E               	subwfb	i2___ftdiv@f1+1,w,c
  7483  0013B0  5012               	movf	i2___ftdiv@f2+2,w,c
  7484  0013B2  580F               	subwfb	i2___ftdiv@f1+2,w,c
  7485  0013B4  A0D8               	btfss	status,0,c
  7486  0013B6  D007               	goto	i2l904
  7487  0013B8  5010               	movf	i2___ftdiv@f2,w,c
  7488  0013BA  5E0D               	subwf	i2___ftdiv@f1,f,c
  7489  0013BC  5011               	movf	i2___ftdiv@f2+1,w,c
  7490  0013BE  5A0E               	subwfb	i2___ftdiv@f1+1,f,c
  7491  0013C0  5012               	movf	i2___ftdiv@f2+2,w,c
  7492  0013C2  5A0F               	subwfb	i2___ftdiv@f1+2,f,c
  7493  0013C4  8017               	bsf	i2___ftdiv@f3,0,c
  7494  0013C6                     i2l904:
  7495  0013C6  90D8               	bcf	status,0,c
  7496  0013C8  360D               	rlcf	i2___ftdiv@f1,f,c
  7497  0013CA  360E               	rlcf	i2___ftdiv@f1+1,f,c
  7498  0013CC  360F               	rlcf	i2___ftdiv@f1+2,f,c
  7499  0013CE  2E16               	decfsz	i2___ftdiv@cntr,f,c
  7500  0013D0  D7E7               	goto	i2l3307
  7501  0013D2  C017  F001         	movff	i2___ftdiv@f3,i2___ftpack@arg
  7502  0013D6  C018  F002         	movff	i2___ftdiv@f3+1,i2___ftpack@arg+1
  7503  0013DA  C019  F003         	movff	i2___ftdiv@f3+2,i2___ftpack@arg+2
  7504  0013DE  C01A  F004         	movff	i2___ftdiv@exp,i2___ftpack@exp
  7505  0013E2  C01B  F005         	movff	i2___ftdiv@sign,i2___ftpack@sign
  7506  0013E6  ECC5  F00A         	call	i2___ftpack	;wreg free
  7507  0013EA  C001  F00D         	movff	?i2___ftpack,?i2___ftdiv
  7508  0013EE  C002  F00E         	movff	?i2___ftpack+1,?i2___ftdiv+1
  7509  0013F2  C003  F00F         	movff	?i2___ftpack+2,?i2___ftdiv+2
  7510  0013F6  0012               	return	
  7511  0013F8                     __end_ofi2___ftdiv:
  7512                           	opt stack 0
  7513                           pclatu	equ	0xFFB
  7514                           pclath	equ	0xFFA
  7515                           tblptru	equ	0xFF8
  7516                           tblptrh	equ	0xFF7
  7517                           tblptrl	equ	0xFF6
  7518                           tablat	equ	0xFF5
  7519                           prodh	equ	0xFF4
  7520                           prodl	equ	0xFF3
  7521                           intcon	equ	0xFF2
  7522                           intcon3	equ	0xFF0
  7523                           postinc0	equ	0xFEE
  7524                           fsr0h	equ	0xFEA
  7525                           fsr0l	equ	0xFE9
  7526                           wreg	equ	0xFE8
  7527                           postdec1	equ	0xFE5
  7528                           fsr1h	equ	0xFE2
  7529                           fsr1l	equ	0xFE1
  7530                           indf2	equ	0xFDF
  7531                           postinc2	equ	0xFDE
  7532                           postdec2	equ	0xFDD
  7533                           fsr2h	equ	0xFDA
  7534                           fsr2l	equ	0xFD9
  7535                           status	equ	0xFD8
  7536                           
  7537 ;; *************** function i2___ftadd *****************
  7538 ;; Defined at:
  7539 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  7540 ;; Parameters:    Size  Location     Type
  7541 ;;  f1              3   42[COMRAM] float 
  7542 ;;  f2              3   45[COMRAM] float 
  7543 ;; Auto vars:     Size  Location     Type
  7544 ;;  __ftadd         1   53[COMRAM] unsigned char 
  7545 ;;  __ftadd         1   52[COMRAM] unsigned char 
  7546 ;;  __ftadd         1   51[COMRAM] unsigned char 
  7547 ;; Return value:  Size  Location     Type
  7548 ;;                  3   42[COMRAM] float 
  7549 ;; Registers used:
  7550 ;;		wreg, status,2, status,0, cstack
  7551 ;; Tracked objects:
  7552 ;;		On entry : 0/0
  7553 ;;		On exit  : 0/0
  7554 ;;		Unchanged: 0/0
  7555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7556 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7557 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7558 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7559 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7560 ;;Total ram usage:       12 bytes
  7561 ;; Hardware stack levels used:    1
  7562 ;; Hardware stack levels required when called:    1
  7563 ;; This function calls:
  7564 ;;		i2___ftpack
  7565 ;; This function is called by:
  7566 ;;		i2_angleToPulse
  7567 ;; This function uses a non-reentrant model
  7568 ;;
  7569                           
  7570                           	psect	text39
  7571  00044E                     __ptext39:
  7572                           	opt stack 0
  7573  00044E                     i2___ftadd:
  7574                           	opt stack 19
  7575                           
  7576                           ;incstack = 0
  7577  00044E  C02D  F031         	movff	i2___ftadd@f1+2,??i2___ftadd
  7578  000452  6A32               	clrf	(??i2___ftadd+1)& (0+255),c
  7579  000454  6A33               	clrf	(??i2___ftadd+2)& (0+255),c
  7580  000456  342C               	rlcf	i2___ftadd@f1+1,w,c
  7581  000458  3631               	rlcf	??i2___ftadd& (0+255),f,c
  7582  00045A  E301               	bnc	u269_41
  7583  00045C  8032               	bsf	(??i2___ftadd+1)& (0+255),0,c
  7584  00045E                     u269_41:
  7585  00045E  5031               	movf	??i2___ftadd,w,c
  7586  000460  6E36               	movwf	i2___ftadd@exp1,c
  7587  000462  C030  F031         	movff	i2___ftadd@f2+2,??i2___ftadd
  7588  000466  6A32               	clrf	(??i2___ftadd+1)& (0+255),c
  7589  000468  6A33               	clrf	(??i2___ftadd+2)& (0+255),c
  7590  00046A  342F               	rlcf	i2___ftadd@f2+1,w,c
  7591  00046C  3631               	rlcf	??i2___ftadd& (0+255),f,c
  7592  00046E  E301               	bnc	u270_41
  7593  000470  8032               	bsf	(??i2___ftadd+1)& (0+255),0,c
  7594  000472                     u270_41:
  7595  000472  5031               	movf	??i2___ftadd,w,c
  7596  000474  6E35               	movwf	i2___ftadd@exp2,c
  7597  000476  5036               	movf	i2___ftadd@exp1,w,c
  7598  000478  B4D8               	btfsc	status,2,c
  7599  00047A  D00B               	goto	i2l869
  7600  00047C  5035               	movf	i2___ftadd@exp2,w,c
  7601  00047E  5C36               	subwf	i2___ftadd@exp1,w,c
  7602  000480  B0D8               	btfsc	status,0,c
  7603  000482  D00E               	goto	i2l3213
  7604  000484  5036               	movf	i2___ftadd@exp1,w,c
  7605  000486  0800               	sublw	0
  7606  000488  2435               	addwf	i2___ftadd@exp2,w,c
  7607  00048A  6E31               	movwf	??i2___ftadd& (0+255),c
  7608  00048C  0E18               	movlw	24
  7609  00048E  6431               	cpfsgt	??i2___ftadd,c
  7610  000490  D007               	goto	i2l3213
  7611  000492                     i2l869:
  7612  000492  C02E  F02B         	movff	i2___ftadd@f2,?i2___ftadd
  7613  000496  C02F  F02C         	movff	i2___ftadd@f2+1,?i2___ftadd+1
  7614  00049A  C030  F02D         	movff	i2___ftadd@f2+2,?i2___ftadd+2
  7615  00049E  0012               	return	
  7616  0004A0                     i2l3213:
  7617  0004A0  5035               	movf	i2___ftadd@exp2,w,c
  7618  0004A2  B4D8               	btfsc	status,2,c
  7619  0004A4  D00B               	goto	i2l873
  7620  0004A6  5036               	movf	i2___ftadd@exp1,w,c
  7621  0004A8  5C35               	subwf	i2___ftadd@exp2,w,c
  7622  0004AA  B0D8               	btfsc	status,0,c
  7623  0004AC  D00E               	goto	i2l3219
  7624  0004AE  5035               	movf	i2___ftadd@exp2,w,c
  7625  0004B0  0800               	sublw	0
  7626  0004B2  2436               	addwf	i2___ftadd@exp1,w,c
  7627  0004B4  6E31               	movwf	??i2___ftadd& (0+255),c
  7628  0004B6  0E18               	movlw	24
  7629  0004B8  6431               	cpfsgt	??i2___ftadd,c
  7630  0004BA  D007               	goto	i2l3219
  7631  0004BC                     i2l873:
  7632  0004BC  C02B  F02B         	movff	i2___ftadd@f1,?i2___ftadd
  7633  0004C0  C02C  F02C         	movff	i2___ftadd@f1+1,?i2___ftadd+1
  7634  0004C4  C02D  F02D         	movff	i2___ftadd@f1+2,?i2___ftadd+2
  7635  0004C8  0012               	return	
  7636  0004CA                     i2l3219:
  7637  0004CA  0E06               	movlw	6
  7638  0004CC  6E34               	movwf	i2___ftadd@sign,c
  7639  0004CE  BE2D               	btfsc	i2___ftadd@f1+2,7,c
  7640  0004D0  8E34               	bsf	i2___ftadd@sign,7,c
  7641  0004D2  BE30               	btfsc	i2___ftadd@f2+2,7,c
  7642  0004D4  8C34               	bsf	i2___ftadd@sign,6,c
  7643  0004D6  8E2C               	bsf	i2___ftadd@f1+1,7,c
  7644  0004D8  0EFF               	movlw	255
  7645  0004DA  162B               	andwf	i2___ftadd@f1,f,c
  7646  0004DC  0EFF               	movlw	255
  7647  0004DE  162C               	andwf	i2___ftadd@f1+1,f,c
  7648  0004E0  0E00               	movlw	0
  7649  0004E2  162D               	andwf	i2___ftadd@f1+2,f,c
  7650  0004E4  8E2F               	bsf	i2___ftadd@f2+1,7,c
  7651  0004E6  0EFF               	movlw	255
  7652  0004E8  162E               	andwf	i2___ftadd@f2,f,c
  7653  0004EA  0EFF               	movlw	255
  7654  0004EC  162F               	andwf	i2___ftadd@f2+1,f,c
  7655  0004EE  0E00               	movlw	0
  7656  0004F0  1630               	andwf	i2___ftadd@f2+2,f,c
  7657  0004F2  5035               	movf	i2___ftadd@exp2,w,c
  7658  0004F4  5C36               	subwf	i2___ftadd@exp1,w,c
  7659  0004F6  B0D8               	btfsc	status,0,c
  7660  0004F8  D01B               	goto	i2l3245
  7661  0004FA                     i2l3235:
  7662  0004FA  90D8               	bcf	status,0,c
  7663  0004FC  362E               	rlcf	i2___ftadd@f2,f,c
  7664  0004FE  362F               	rlcf	i2___ftadd@f2+1,f,c
  7665  000500  3630               	rlcf	i2___ftadd@f2+2,f,c
  7666  000502  0635               	decf	i2___ftadd@exp2,f,c
  7667  000504  5036               	movf	i2___ftadd@exp1,w,c
  7668  000506  1835               	xorwf	i2___ftadd@exp2,w,c
  7669  000508  B4D8               	btfsc	status,2,c
  7670  00050A  D00D               	goto	i2l3243
  7671  00050C  0634               	decf	i2___ftadd@sign,f,c
  7672  00050E  C034  F031         	movff	i2___ftadd@sign,??i2___ftadd
  7673  000512  0E07               	movlw	7
  7674  000514  1631               	andwf	??i2___ftadd,f,c
  7675  000516  B4D8               	btfsc	status,2,c
  7676  000518  D006               	goto	i2l3243
  7677  00051A  D7EF               	goto	i2l3235
  7678  00051C                     i2l3241:
  7679  00051C  90D8               	bcf	status,0,c
  7680  00051E  322D               	rrcf	i2___ftadd@f1+2,f,c
  7681  000520  322C               	rrcf	i2___ftadd@f1+1,f,c
  7682  000522  322B               	rrcf	i2___ftadd@f1,f,c
  7683  000524  2A36               	incf	i2___ftadd@exp1,f,c
  7684  000526                     i2l3243:
  7685  000526  5035               	movf	i2___ftadd@exp2,w,c
  7686  000528  1836               	xorwf	i2___ftadd@exp1,w,c
  7687  00052A  B4D8               	btfsc	status,2,c
  7688  00052C  D01F               	goto	i2l884
  7689  00052E  D7F6               	goto	i2l3241
  7690  000530                     i2l3245:
  7691  000530  5036               	movf	i2___ftadd@exp1,w,c
  7692  000532  5C35               	subwf	i2___ftadd@exp2,w,c
  7693  000534  B0D8               	btfsc	status,0,c
  7694  000536  D01A               	goto	i2l884
  7695  000538                     i2l3247:
  7696  000538  90D8               	bcf	status,0,c
  7697  00053A  362B               	rlcf	i2___ftadd@f1,f,c
  7698  00053C  362C               	rlcf	i2___ftadd@f1+1,f,c
  7699  00053E  362D               	rlcf	i2___ftadd@f1+2,f,c
  7700  000540  0636               	decf	i2___ftadd@exp1,f,c
  7701  000542  5036               	movf	i2___ftadd@exp1,w,c
  7702  000544  1835               	xorwf	i2___ftadd@exp2,w,c
  7703  000546  B4D8               	btfsc	status,2,c
  7704  000548  D00D               	goto	i2l3255
  7705  00054A  0634               	decf	i2___ftadd@sign,f,c
  7706  00054C  C034  F031         	movff	i2___ftadd@sign,??i2___ftadd
  7707  000550  0E07               	movlw	7
  7708  000552  1631               	andwf	??i2___ftadd,f,c
  7709  000554  B4D8               	btfsc	status,2,c
  7710  000556  D006               	goto	i2l3255
  7711  000558  D7EF               	goto	i2l3247
  7712  00055A                     i2l3253:
  7713  00055A  90D8               	bcf	status,0,c
  7714  00055C  3230               	rrcf	i2___ftadd@f2+2,f,c
  7715  00055E  322F               	rrcf	i2___ftadd@f2+1,f,c
  7716  000560  322E               	rrcf	i2___ftadd@f2,f,c
  7717  000562  2A35               	incf	i2___ftadd@exp2,f,c
  7718  000564                     i2l3255:
  7719  000564  5035               	movf	i2___ftadd@exp2,w,c
  7720  000566  1836               	xorwf	i2___ftadd@exp1,w,c
  7721  000568  A4D8               	btfss	status,2,c
  7722  00056A  D7F7               	goto	i2l3253
  7723  00056C                     i2l884:
  7724  00056C  AE34               	btfss	i2___ftadd@sign,7,c
  7725  00056E  D00C               	goto	i2l893
  7726  000570  0EFF               	movlw	255
  7727  000572  1A2B               	xorwf	i2___ftadd@f1,f,c
  7728  000574  0EFF               	movlw	255
  7729  000576  1A2C               	xorwf	i2___ftadd@f1+1,f,c
  7730  000578  0EFF               	movlw	255
  7731  00057A  1A2D               	xorwf	i2___ftadd@f1+2,f,c
  7732  00057C  0E01               	movlw	1
  7733  00057E  262B               	addwf	i2___ftadd@f1,f,c
  7734  000580  0E00               	movlw	0
  7735  000582  222C               	addwfc	i2___ftadd@f1+1,f,c
  7736  000584  0E00               	movlw	0
  7737  000586  222D               	addwfc	i2___ftadd@f1+2,f,c
  7738  000588                     i2l893:
  7739  000588  AC34               	btfss	i2___ftadd@sign,6,c
  7740  00058A  D00C               	goto	i2l3261
  7741  00058C  0EFF               	movlw	255
  7742  00058E  1A2E               	xorwf	i2___ftadd@f2,f,c
  7743  000590  0EFF               	movlw	255
  7744  000592  1A2F               	xorwf	i2___ftadd@f2+1,f,c
  7745  000594  0EFF               	movlw	255
  7746  000596  1A30               	xorwf	i2___ftadd@f2+2,f,c
  7747  000598  0E01               	movlw	1
  7748  00059A  262E               	addwf	i2___ftadd@f2,f,c
  7749  00059C  0E00               	movlw	0
  7750  00059E  222F               	addwfc	i2___ftadd@f2+1,f,c
  7751  0005A0  0E00               	movlw	0
  7752  0005A2  2230               	addwfc	i2___ftadd@f2+2,f,c
  7753  0005A4                     i2l3261:
  7754  0005A4  0E00               	movlw	0
  7755  0005A6  6E34               	movwf	i2___ftadd@sign,c
  7756  0005A8  502B               	movf	i2___ftadd@f1,w,c
  7757  0005AA  262E               	addwf	i2___ftadd@f2,f,c
  7758  0005AC  502C               	movf	i2___ftadd@f1+1,w,c
  7759  0005AE  222F               	addwfc	i2___ftadd@f2+1,f,c
  7760  0005B0  502D               	movf	i2___ftadd@f1+2,w,c
  7761  0005B2  2230               	addwfc	i2___ftadd@f2+2,f,c
  7762  0005B4  AE30               	btfss	i2___ftadd@f2+2,7,c
  7763  0005B6  D00E               	goto	i2l3271
  7764  0005B8  0EFF               	movlw	255
  7765  0005BA  1A2E               	xorwf	i2___ftadd@f2,f,c
  7766  0005BC  0EFF               	movlw	255
  7767  0005BE  1A2F               	xorwf	i2___ftadd@f2+1,f,c
  7768  0005C0  0EFF               	movlw	255
  7769  0005C2  1A30               	xorwf	i2___ftadd@f2+2,f,c
  7770  0005C4  0E01               	movlw	1
  7771  0005C6  262E               	addwf	i2___ftadd@f2,f,c
  7772  0005C8  0E00               	movlw	0
  7773  0005CA  222F               	addwfc	i2___ftadd@f2+1,f,c
  7774  0005CC  0E00               	movlw	0
  7775  0005CE  2230               	addwfc	i2___ftadd@f2+2,f,c
  7776  0005D0  0E01               	movlw	1
  7777  0005D2  6E34               	movwf	i2___ftadd@sign,c
  7778  0005D4                     i2l3271:
  7779  0005D4  C02E  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
  7780  0005D8  C02F  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
  7781  0005DC  C030  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
  7782  0005E0  C036  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
  7783  0005E4  C034  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
  7784  0005E8  ECC5  F00A         	call	i2___ftpack	;wreg free
  7785  0005EC  C001  F02B         	movff	?i2___ftpack,?i2___ftadd
  7786  0005F0  C002  F02C         	movff	?i2___ftpack+1,?i2___ftadd+1
  7787  0005F4  C003  F02D         	movff	?i2___ftpack+2,?i2___ftadd+2
  7788  0005F8  0012               	return	
  7789  0005FA                     __end_ofi2___ftadd:
  7790                           	opt stack 0
  7791                           pclatu	equ	0xFFB
  7792                           pclath	equ	0xFFA
  7793                           tblptru	equ	0xFF8
  7794                           tblptrh	equ	0xFF7
  7795                           tblptrl	equ	0xFF6
  7796                           tablat	equ	0xFF5
  7797                           prodh	equ	0xFF4
  7798                           prodl	equ	0xFF3
  7799                           intcon	equ	0xFF2
  7800                           intcon3	equ	0xFF0
  7801                           postinc0	equ	0xFEE
  7802                           fsr0h	equ	0xFEA
  7803                           fsr0l	equ	0xFE9
  7804                           wreg	equ	0xFE8
  7805                           postdec1	equ	0xFE5
  7806                           fsr1h	equ	0xFE2
  7807                           fsr1l	equ	0xFE1
  7808                           indf2	equ	0xFDF
  7809                           postinc2	equ	0xFDE
  7810                           postdec2	equ	0xFDD
  7811                           fsr2h	equ	0xFDA
  7812                           fsr2l	equ	0xFD9
  7813                           status	equ	0xFD8
  7814                           
  7815 ;; *************** function i2___awtoft *****************
  7816 ;; Defined at:
  7817 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  7818 ;; Parameters:    Size  Location     Type
  7819 ;;  c               2    8[COMRAM] int 
  7820 ;; Auto vars:     Size  Location     Type
  7821 ;;  __awtoft        1   11[COMRAM] unsigned char 
  7822 ;; Return value:  Size  Location     Type
  7823 ;;                  3    8[COMRAM] float 
  7824 ;; Registers used:
  7825 ;;		wreg, status,2, status,0, cstack
  7826 ;; Tracked objects:
  7827 ;;		On entry : 0/0
  7828 ;;		On exit  : 0/0
  7829 ;;		Unchanged: 0/0
  7830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7831 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7832 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7834 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7835 ;;Total ram usage:        4 bytes
  7836 ;; Hardware stack levels used:    1
  7837 ;; Hardware stack levels required when called:    1
  7838 ;; This function calls:
  7839 ;;		i2___ftpack
  7840 ;; This function is called by:
  7841 ;;		i2_angleToPulse
  7842 ;; This function uses a non-reentrant model
  7843 ;;
  7844                           
  7845                           	psect	text40
  7846  001E16                     __ptext40:
  7847                           	opt stack 0
  7848  001E16                     i2___awtoft:
  7849                           	opt stack 19
  7850                           
  7851                           ;incstack = 0
  7852  001E16  0E00               	movlw	0
  7853  001E18  6E0C               	movwf	i2___awtoft@sign,c
  7854  001E1A  AE0A               	btfss	i2___awtoft@c+1,7,c
  7855  001E1C  D006               	goto	i2l3201
  7856  001E1E  6C09               	negf	i2___awtoft@c,c
  7857  001E20  1E0A               	comf	i2___awtoft@c+1,f,c
  7858  001E22  B0D8               	btfsc	status,0,c
  7859  001E24  2A0A               	incf	i2___awtoft@c+1,f,c
  7860  001E26  0E01               	movlw	1
  7861  001E28  6E0C               	movwf	i2___awtoft@sign,c
  7862  001E2A                     i2l3201:
  7863  001E2A  C009  F001         	movff	i2___awtoft@c,i2___ftpack@arg
  7864  001E2E  C00A  F002         	movff	i2___awtoft@c+1,i2___ftpack@arg+1
  7865  001E32  6A03               	clrf	i2___ftpack@arg+2,c
  7866  001E34  0E8E               	movlw	142
  7867  001E36  6E04               	movwf	i2___ftpack@exp,c
  7868  001E38  C00C  F005         	movff	i2___awtoft@sign,i2___ftpack@sign
  7869  001E3C  ECC5  F00A         	call	i2___ftpack	;wreg free
  7870  001E40  C001  F009         	movff	?i2___ftpack,?i2___awtoft
  7871  001E44  C002  F00A         	movff	?i2___ftpack+1,?i2___awtoft+1
  7872  001E48  C003  F00B         	movff	?i2___ftpack+2,?i2___awtoft+2
  7873  001E4C  0012               	return	
  7874  001E4E                     __end_ofi2___awtoft:
  7875                           	opt stack 0
  7876                           pclatu	equ	0xFFB
  7877                           pclath	equ	0xFFA
  7878                           tblptru	equ	0xFF8
  7879                           tblptrh	equ	0xFF7
  7880                           tblptrl	equ	0xFF6
  7881                           tablat	equ	0xFF5
  7882                           prodh	equ	0xFF4
  7883                           prodl	equ	0xFF3
  7884                           intcon	equ	0xFF2
  7885                           intcon3	equ	0xFF0
  7886                           postinc0	equ	0xFEE
  7887                           fsr0h	equ	0xFEA
  7888                           fsr0l	equ	0xFE9
  7889                           wreg	equ	0xFE8
  7890                           postdec1	equ	0xFE5
  7891                           fsr1h	equ	0xFE2
  7892                           fsr1l	equ	0xFE1
  7893                           indf2	equ	0xFDF
  7894                           postinc2	equ	0xFDE
  7895                           postdec2	equ	0xFDD
  7896                           fsr2h	equ	0xFDA
  7897                           fsr2l	equ	0xFD9
  7898                           status	equ	0xFD8
  7899                           
  7900 ;; *************** function i2___altoft *****************
  7901 ;; Defined at:
  7902 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  7903 ;; Parameters:    Size  Location     Type
  7904 ;;  c               4    8[COMRAM] long 
  7905 ;; Auto vars:     Size  Location     Type
  7906 ;;  __altoft        1   17[COMRAM] unsigned char 
  7907 ;;  __altoft        1   16[COMRAM] unsigned char 
  7908 ;; Return value:  Size  Location     Type
  7909 ;;                  3    8[COMRAM] float 
  7910 ;; Registers used:
  7911 ;;		wreg, status,2, status,0, cstack
  7912 ;; Tracked objects:
  7913 ;;		On entry : 0/0
  7914 ;;		On exit  : 0/0
  7915 ;;		Unchanged: 0/0
  7916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7917 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7918 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7919 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7920 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7921 ;;Total ram usage:       10 bytes
  7922 ;; Hardware stack levels used:    1
  7923 ;; Hardware stack levels required when called:    1
  7924 ;; This function calls:
  7925 ;;		i2___ftpack
  7926 ;; This function is called by:
  7927 ;;		i2_angleToPulse
  7928 ;; This function uses a non-reentrant model
  7929 ;;
  7930                           
  7931                           	psect	text41
  7932  001B38                     __ptext41:
  7933                           	opt stack 0
  7934  001B38                     i2___altoft:
  7935                           	opt stack 19
  7936                           
  7937                           ;incstack = 0
  7938  001B38  0E00               	movlw	0
  7939  001B3A  6E12               	movwf	i2___altoft@sign,c
  7940  001B3C  0E8E               	movlw	142
  7941  001B3E  6E11               	movwf	i2___altoft@exp,c
  7942  001B40  AE0C               	btfss	i2___altoft@c+3,7,c
  7943  001B42  D011               	goto	i2l3187
  7944  001B44  1E0C               	comf	i2___altoft@c+3,f,c
  7945  001B46  1E0B               	comf	i2___altoft@c+2,f,c
  7946  001B48  1E0A               	comf	i2___altoft@c+1,f,c
  7947  001B4A  6C09               	negf	i2___altoft@c,c
  7948  001B4C  0E00               	movlw	0
  7949  001B4E  220A               	addwfc	i2___altoft@c+1,f,c
  7950  001B50  220B               	addwfc	i2___altoft@c+2,f,c
  7951  001B52  220C               	addwfc	i2___altoft@c+3,f,c
  7952  001B54  0E01               	movlw	1
  7953  001B56  6E12               	movwf	i2___altoft@sign,c
  7954  001B58  D006               	goto	i2l3187
  7955  001B5A                     i2l3185:
  7956  001B5A  90D8               	bcf	status,0,c
  7957  001B5C  320C               	rrcf	i2___altoft@c+3,f,c
  7958  001B5E  320B               	rrcf	i2___altoft@c+2,f,c
  7959  001B60  320A               	rrcf	i2___altoft@c+1,f,c
  7960  001B62  3209               	rrcf	i2___altoft@c,f,c
  7961  001B64  2A11               	incf	i2___altoft@exp,f,c
  7962  001B66                     i2l3187:
  7963  001B66  0E00               	movlw	0
  7964  001B68  1409               	andwf	i2___altoft@c,w,c
  7965  001B6A  6E0D               	movwf	??i2___altoft& (0+255),c
  7966  001B6C  0E00               	movlw	0
  7967  001B6E  140A               	andwf	i2___altoft@c+1,w,c
  7968  001B70  6E0E               	movwf	(??i2___altoft+1)& (0+255),c
  7969  001B72  0E00               	movlw	0
  7970  001B74  140B               	andwf	i2___altoft@c+2,w,c
  7971  001B76  6E0F               	movwf	(??i2___altoft+2)& (0+255),c
  7972  001B78  0EFF               	movlw	255
  7973  001B7A  140C               	andwf	i2___altoft@c+3,w,c
  7974  001B7C  6E10               	movwf	(??i2___altoft+3)& (0+255),c
  7975  001B7E  500D               	movf	??i2___altoft,w,c
  7976  001B80  100E               	iorwf	??i2___altoft+1,w,c
  7977  001B82  100F               	iorwf	??i2___altoft+2,w,c
  7978  001B84  1010               	iorwf	??i2___altoft+3,w,c
  7979  001B86  A4D8               	btfss	status,2,c
  7980  001B88  D7E8               	goto	i2l3185
  7981  001B8A  C009  F001         	movff	i2___altoft@c,i2___ftpack@arg
  7982  001B8E  C00A  F002         	movff	i2___altoft@c+1,i2___ftpack@arg+1
  7983  001B92  C00B  F003         	movff	i2___altoft@c+2,i2___ftpack@arg+2
  7984  001B96  C011  F004         	movff	i2___altoft@exp,i2___ftpack@exp
  7985  001B9A  C012  F005         	movff	i2___altoft@sign,i2___ftpack@sign
  7986  001B9E  ECC5  F00A         	call	i2___ftpack	;wreg free
  7987  001BA2  C001  F009         	movff	?i2___ftpack,?i2___altoft
  7988  001BA6  C002  F00A         	movff	?i2___ftpack+1,?i2___altoft+1
  7989  001BAA  C003  F00B         	movff	?i2___ftpack+2,?i2___altoft+2
  7990  001BAE  0012               	return	
  7991  001BB0                     __end_ofi2___altoft:
  7992                           	opt stack 0
  7993                           pclatu	equ	0xFFB
  7994                           pclath	equ	0xFFA
  7995                           tblptru	equ	0xFF8
  7996                           tblptrh	equ	0xFF7
  7997                           tblptrl	equ	0xFF6
  7998                           tablat	equ	0xFF5
  7999                           prodh	equ	0xFF4
  8000                           prodl	equ	0xFF3
  8001                           intcon	equ	0xFF2
  8002                           intcon3	equ	0xFF0
  8003                           postinc0	equ	0xFEE
  8004                           fsr0h	equ	0xFEA
  8005                           fsr0l	equ	0xFE9
  8006                           wreg	equ	0xFE8
  8007                           postdec1	equ	0xFE5
  8008                           fsr1h	equ	0xFE2
  8009                           fsr1l	equ	0xFE1
  8010                           indf2	equ	0xFDF
  8011                           postinc2	equ	0xFDE
  8012                           postdec2	equ	0xFDD
  8013                           fsr2h	equ	0xFDA
  8014                           fsr2l	equ	0xFD9
  8015                           status	equ	0xFD8
  8016                           
  8017 ;; *************** function i2___ftpack *****************
  8018 ;; Defined at:
  8019 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  8020 ;; Parameters:    Size  Location     Type
  8021 ;;  arg             3    0[COMRAM] unsigned um
  8022 ;;  exp             1    3[COMRAM] unsigned char 
  8023 ;;  sign            1    4[COMRAM] unsigned char 
  8024 ;; Auto vars:     Size  Location     Type
  8025 ;;		None
  8026 ;; Return value:  Size  Location     Type
  8027 ;;                  3    0[COMRAM] float 
  8028 ;; Registers used:
  8029 ;;		wreg, status,2, status,0
  8030 ;; Tracked objects:
  8031 ;;		On entry : 0/0
  8032 ;;		On exit  : 0/0
  8033 ;;		Unchanged: 0/0
  8034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8035 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8037 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8038 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8039 ;;Total ram usage:        8 bytes
  8040 ;; Hardware stack levels used:    1
  8041 ;; This function calls:
  8042 ;;		Nothing
  8043 ;; This function is called by:
  8044 ;;		i2___altoft
  8045 ;;		i2___awtoft
  8046 ;;		i2___ftadd
  8047 ;;		i2___ftdiv
  8048 ;;		i2___ftmul
  8049 ;; This function uses a non-reentrant model
  8050 ;;
  8051                           
  8052                           	psect	text42
  8053  00158A                     __ptext42:
  8054                           	opt stack 0
  8055  00158A                     i2___ftpack:
  8056                           	opt stack 19
  8057                           
  8058                           ;incstack = 0
  8059  00158A  5004               	movf	i2___ftpack@exp,w,c
  8060  00158C  B4D8               	btfsc	status,2,c
  8061  00158E  D005               	goto	i2l3091
  8062  001590  5001               	movf	i2___ftpack@arg,w,c
  8063  001592  1002               	iorwf	i2___ftpack@arg+1,w,c
  8064  001594  1003               	iorwf	i2___ftpack@arg+2,w,c
  8065  001596  A4D8               	btfss	status,2,c
  8066  001598  D00C               	goto	i2l3097
  8067  00159A                     i2l3091:
  8068  00159A  0E00               	movlw	0
  8069  00159C  6E01               	movwf	?i2___ftpack,c
  8070  00159E  0E00               	movlw	0
  8071  0015A0  6E02               	movwf	?i2___ftpack+1,c
  8072  0015A2  0E00               	movlw	0
  8073  0015A4  6E03               	movwf	?i2___ftpack+2,c
  8074  0015A6  0012               	return	
  8075  0015A8                     i2l3095:
  8076  0015A8  2A04               	incf	i2___ftpack@exp,f,c
  8077  0015AA  90D8               	bcf	status,0,c
  8078  0015AC  3203               	rrcf	i2___ftpack@arg+2,f,c
  8079  0015AE  3202               	rrcf	i2___ftpack@arg+1,f,c
  8080  0015B0  3201               	rrcf	i2___ftpack@arg,f,c
  8081  0015B2                     i2l3097:
  8082  0015B2  0E00               	movlw	0
  8083  0015B4  1401               	andwf	i2___ftpack@arg,w,c
  8084  0015B6  6E06               	movwf	??i2___ftpack& (0+255),c
  8085  0015B8  0E00               	movlw	0
  8086  0015BA  1402               	andwf	i2___ftpack@arg+1,w,c
  8087  0015BC  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
  8088  0015BE  0EFE               	movlw	254
  8089  0015C0  1403               	andwf	i2___ftpack@arg+2,w,c
  8090  0015C2  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
  8091  0015C4  5006               	movf	??i2___ftpack,w,c
  8092  0015C6  1007               	iorwf	??i2___ftpack+1,w,c
  8093  0015C8  1008               	iorwf	??i2___ftpack+2,w,c
  8094  0015CA  B4D8               	btfsc	status,2,c
  8095  0015CC  D00C               	goto	i2l3103
  8096  0015CE  D7EC               	goto	i2l3095
  8097  0015D0                     i2l3099:
  8098  0015D0  2A04               	incf	i2___ftpack@exp,f,c
  8099  0015D2  0E01               	movlw	1
  8100  0015D4  2601               	addwf	i2___ftpack@arg,f,c
  8101  0015D6  0E00               	movlw	0
  8102  0015D8  2202               	addwfc	i2___ftpack@arg+1,f,c
  8103  0015DA  0E00               	movlw	0
  8104  0015DC  2203               	addwfc	i2___ftpack@arg+2,f,c
  8105  0015DE  90D8               	bcf	status,0,c
  8106  0015E0  3203               	rrcf	i2___ftpack@arg+2,f,c
  8107  0015E2  3202               	rrcf	i2___ftpack@arg+1,f,c
  8108  0015E4  3201               	rrcf	i2___ftpack@arg,f,c
  8109  0015E6                     i2l3103:
  8110  0015E6  0E00               	movlw	0
  8111  0015E8  1401               	andwf	i2___ftpack@arg,w,c
  8112  0015EA  6E06               	movwf	??i2___ftpack& (0+255),c
  8113  0015EC  0E00               	movlw	0
  8114  0015EE  1402               	andwf	i2___ftpack@arg+1,w,c
  8115  0015F0  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
  8116  0015F2  0EFF               	movlw	255
  8117  0015F4  1403               	andwf	i2___ftpack@arg+2,w,c
  8118  0015F6  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
  8119  0015F8  5006               	movf	??i2___ftpack,w,c
  8120  0015FA  1007               	iorwf	??i2___ftpack+1,w,c
  8121  0015FC  1008               	iorwf	??i2___ftpack+2,w,c
  8122  0015FE  B4D8               	btfsc	status,2,c
  8123  001600  D006               	goto	i2l3107
  8124  001602  D7E6               	goto	i2l3099
  8125  001604                     i2l3105:
  8126  001604  0604               	decf	i2___ftpack@exp,f,c
  8127  001606  90D8               	bcf	status,0,c
  8128  001608  3601               	rlcf	i2___ftpack@arg,f,c
  8129  00160A  3602               	rlcf	i2___ftpack@arg+1,f,c
  8130  00160C  3603               	rlcf	i2___ftpack@arg+2,f,c
  8131  00160E                     i2l3107:
  8132  00160E  BE02               	btfsc	i2___ftpack@arg+1,7,c
  8133  001610  D003               	goto	i2l846
  8134  001612  0E02               	movlw	2
  8135  001614  6004               	cpfslt	i2___ftpack@exp,c
  8136  001616  D7F6               	goto	i2l3105
  8137  001618                     i2l846:
  8138  001618  A004               	btfss	i2___ftpack@exp,0,c
  8139  00161A  9E02               	bcf	i2___ftpack@arg+1,7,c
  8140  00161C  90D8               	bcf	status,0,c
  8141  00161E  3204               	rrcf	i2___ftpack@exp,f,c
  8142  001620  5004               	movf	i2___ftpack@exp,w,c
  8143  001622  1203               	iorwf	i2___ftpack@arg+2,f,c
  8144  001624  5005               	movf	i2___ftpack@sign,w,c
  8145  001626  A4D8               	btfss	status,2,c
  8146  001628  8E03               	bsf	i2___ftpack@arg+2,7,c
  8147  00162A  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
  8148  00162E  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
  8149  001632  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
  8150  001636  0012               	return	
  8151  001638                     __end_ofi2___ftpack:
  8152                           	opt stack 0
  8153                           pclatu	equ	0xFFB
  8154                           pclath	equ	0xFFA
  8155                           tblptru	equ	0xFF8
  8156                           tblptrh	equ	0xFF7
  8157                           tblptrl	equ	0xFF6
  8158                           tablat	equ	0xFF5
  8159                           prodh	equ	0xFF4
  8160                           prodl	equ	0xFF3
  8161                           intcon	equ	0xFF2
  8162                           intcon3	equ	0xFF0
  8163                           postinc0	equ	0xFEE
  8164                           fsr0h	equ	0xFEA
  8165                           fsr0l	equ	0xFE9
  8166                           wreg	equ	0xFE8
  8167                           postdec1	equ	0xFE5
  8168                           fsr1h	equ	0xFE2
  8169                           fsr1l	equ	0xFE1
  8170                           indf2	equ	0xFDF
  8171                           postinc2	equ	0xFDE
  8172                           postdec2	equ	0xFDD
  8173                           fsr2h	equ	0xFDA
  8174                           fsr2l	equ	0xFD9
  8175                           status	equ	0xFD8
  8176                           
  8177 ;; *************** function _servoInterruptService *****************
  8178 ;; Defined at:
  8179 ;;		line 47 in file "servo.c"
  8180 ;; Parameters:    Size  Location     Type
  8181 ;;		None
  8182 ;; Auto vars:     Size  Location     Type
  8183 ;;  i               2   19[COMRAM] int 
  8184 ;;  flags           8   11[COMRAM] int [4]
  8185 ;; Return value:  Size  Location     Type
  8186 ;;                  1    wreg      void 
  8187 ;; Registers used:
  8188 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8189 ;; Tracked objects:
  8190 ;;		On entry : 0/0
  8191 ;;		On exit  : 0/0
  8192 ;;		Unchanged: 0/0
  8193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8195 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8196 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8197 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8198 ;;Total ram usage:       12 bytes
  8199 ;; Hardware stack levels used:    1
  8200 ;; Hardware stack levels required when called:    1
  8201 ;; This function calls:
  8202 ;;		_digitalRead
  8203 ;;		i2_digitalWrite
  8204 ;;		i2_startTimer
  8205 ;; This function is called by:
  8206 ;;		_service
  8207 ;; This function uses a non-reentrant model
  8208 ;;
  8209                           
  8210                           	psect	text43
  8211  00027A                     __ptext43:
  8212                           	opt stack 0
  8213  00027A                     _servoInterruptService:
  8214                           	opt stack 21
  8215                           
  8216                           ;servo.c: 49: int flags[4];
  8217                           ;servo.c: 50: flags[0] = TMR0IF;
  8218                           
  8219                           ;incstack = 0
  8220  00027A  A4F2               	btfss	intcon,2,c	;volatile
  8221  00027C  D002               	goto	i2u347_40
  8222  00027E  0E01               	movlw	1
  8223  000280  D001               	goto	i2u348_40
  8224  000282                     i2u347_40:
  8225  000282  0E00               	movlw	0
  8226  000284                     i2u348_40:
  8227  000284  6E0C               	movwf	servoInterruptService@flags,c
  8228  000286  6A0D               	clrf	servoInterruptService@flags+1,c
  8229                           
  8230                           ;servo.c: 51: flags[1] = TMR1IF;
  8231  000288  A09E               	btfss	3998,0,c	;volatile
  8232  00028A  D002               	goto	i2u349_40
  8233  00028C  0E01               	movlw	1
  8234  00028E  D001               	goto	i2u350_40
  8235  000290                     i2u349_40:
  8236  000290  0E00               	movlw	0
  8237  000292                     i2u350_40:
  8238  000292  6E0E               	movwf	servoInterruptService@flags+2,c
  8239  000294  6A0F               	clrf	servoInterruptService@flags+3,c
  8240                           
  8241                           ;servo.c: 52: flags[2] = TMR2IF;
  8242  000296  A29E               	btfss	3998,1,c	;volatile
  8243  000298  D002               	goto	i2u351_40
  8244  00029A  0E01               	movlw	1
  8245  00029C  D001               	goto	i2u352_40
  8246  00029E                     i2u351_40:
  8247  00029E  0E00               	movlw	0
  8248  0002A0                     i2u352_40:
  8249  0002A0  6E10               	movwf	servoInterruptService@flags+4,c
  8250  0002A2  6A11               	clrf	servoInterruptService@flags+5,c
  8251                           
  8252                           ;servo.c: 53: flags[3] = TMR3IF;
  8253  0002A4  A2A1               	btfss	4001,1,c	;volatile
  8254  0002A6  D002               	goto	i2u353_40
  8255  0002A8  0E01               	movlw	1
  8256  0002AA  D001               	goto	i2u354_40
  8257  0002AC                     i2u353_40:
  8258  0002AC  0E00               	movlw	0
  8259  0002AE                     i2u354_40:
  8260  0002AE  6E12               	movwf	servoInterruptService@flags+6,c
  8261  0002B0  6A13               	clrf	servoInterruptService@flags+7,c
  8262                           
  8263                           ;servo.c: 55: for(int i = 0; i < 4; i++){
  8264  0002B2  0E00               	movlw	0
  8265  0002B4  6E15               	movwf	servoInterruptService@i+1,c
  8266  0002B6  0E00               	movlw	0
  8267  0002B8  6E14               	movwf	servoInterruptService@i,c
  8268  0002BA  BE15               	btfsc	servoInterruptService@i+1,7,c
  8269  0002BC  D008               	goto	i2l3767
  8270  0002BE  5015               	movf	servoInterruptService@i+1,w,c
  8271  0002C0  E105               	bnz	i2u355_40
  8272  0002C2  0E04               	movlw	4
  8273  0002C4  5C14               	subwf	servoInterruptService@i,w,c
  8274  0002C6  B0D8               	btfsc	status,0,c
  8275  0002C8  0012               	return	
  8276  0002CA  D001               	goto	i2l3767
  8277  0002CC                     i2u355_40:
  8278  0002CC  0012               	return	
  8279  0002CE                     i2l3767:
  8280                           
  8281                           ;servo.c: 56: if(flags[i]){
  8282  0002CE  90D8               	bcf	status,0,c
  8283  0002D0  3414               	rlcf	servoInterruptService@i,w,c
  8284  0002D2  6ED9               	movwf	fsr2l,c
  8285  0002D4  3415               	rlcf	servoInterruptService@i+1,w,c
  8286  0002D6  6EDA               	movwf	fsr2h,c
  8287  0002D8  0E0C               	movlw	low servoInterruptService@flags
  8288  0002DA  26D9               	addwf	fsr2l,f,c
  8289  0002DC  0E00               	movlw	high servoInterruptService@flags
  8290  0002DE  22DA               	addwfc	fsr2h,f,c
  8291  0002E0  50DE               	movf	postinc2,w,c
  8292  0002E2  10DE               	iorwf	postinc2,w,c
  8293  0002E4  B4D8               	btfsc	status,2,c
  8294  0002E6  D0AB               	goto	i2l3781
  8295                           
  8296                           ;servo.c: 58: if(digitalRead(port[i],pin[i])){
  8297  0002E8  90D8               	bcf	status,0,c
  8298  0002EA  3414               	rlcf	servoInterruptService@i,w,c
  8299  0002EC  6ED9               	movwf	fsr2l,c
  8300  0002EE  3415               	rlcf	servoInterruptService@i+1,w,c
  8301  0002F0  6EDA               	movwf	fsr2h,c
  8302  0002F2  0E18               	movlw	low _port
  8303  0002F4  26D9               	addwf	fsr2l,f,c
  8304  0002F6  0E01               	movlw	high _port
  8305  0002F8  22DA               	addwfc	fsr2h,f,c
  8306  0002FA  CFDE F001          	movff	postinc2,digitalRead@port
  8307  0002FE  CFDD F002          	movff	postdec2,digitalRead@port+1
  8308  000302  90D8               	bcf	status,0,c
  8309  000304  3414               	rlcf	servoInterruptService@i,w,c
  8310  000306  6ED9               	movwf	fsr2l,c
  8311  000308  3415               	rlcf	servoInterruptService@i+1,w,c
  8312  00030A  6EDA               	movwf	fsr2h,c
  8313  00030C  0E10               	movlw	low _pin
  8314  00030E  26D9               	addwf	fsr2l,f,c
  8315  000310  0E01               	movlw	high _pin
  8316  000312  22DA               	addwfc	fsr2h,f,c
  8317  000314  CFDE F003          	movff	postinc2,digitalRead@pin
  8318  000318  CFDD F004          	movff	postdec2,digitalRead@pin+1
  8319  00031C  EC6C  F00A         	call	_digitalRead	;wreg free
  8320  000320  5001               	movf	?_digitalRead,w,c
  8321  000322  1002               	iorwf	?_digitalRead+1,w,c
  8322  000324  B4D8               	btfsc	status,2,c
  8323  000326  D02F               	goto	i2l3775
  8324                           
  8325                           ;servo.c: 59: startTimer(i,15535);
  8326  000328  C014  F001         	movff	servoInterruptService@i,i2startTimer@timer
  8327  00032C  C015  F002         	movff	servoInterruptService@i+1,i2startTimer@timer+1
  8328  000330  0EAF               	movlw	175
  8329  000332  6E03               	movwf	i2startTimer@val,c
  8330  000334  0E3C               	movlw	60
  8331  000336  6E04               	movwf	i2startTimer@val+1,c
  8332  000338  0E00               	movlw	0
  8333  00033A  6E05               	movwf	i2startTimer@val+2,c
  8334  00033C  0E00               	movlw	0
  8335  00033E  6E06               	movwf	i2startTimer@val+3,c
  8336  000340  EC34  F00E         	call	i2_startTimer	;wreg free
  8337                           
  8338                           ;servo.c: 60: digitalWrite(port[i],pin[i],0);
  8339  000344  90D8               	bcf	status,0,c
  8340  000346  3414               	rlcf	servoInterruptService@i,w,c
  8341  000348  6ED9               	movwf	fsr2l,c
  8342  00034A  3415               	rlcf	servoInterruptService@i+1,w,c
  8343  00034C  6EDA               	movwf	fsr2h,c
  8344  00034E  0E18               	movlw	low _port
  8345  000350  26D9               	addwf	fsr2l,f,c
  8346  000352  0E01               	movlw	high _port
  8347  000354  22DA               	addwfc	fsr2h,f,c
  8348  000356  CFDE F001          	movff	postinc2,i2digitalWrite@port
  8349  00035A  CFDD F002          	movff	postdec2,i2digitalWrite@port+1
  8350  00035E  90D8               	bcf	status,0,c
  8351  000360  3414               	rlcf	servoInterruptService@i,w,c
  8352  000362  6ED9               	movwf	fsr2l,c
  8353  000364  3415               	rlcf	servoInterruptService@i+1,w,c
  8354  000366  6EDA               	movwf	fsr2h,c
  8355  000368  0E10               	movlw	low _pin
  8356  00036A  26D9               	addwf	fsr2l,f,c
  8357  00036C  0E01               	movlw	high _pin
  8358  00036E  22DA               	addwfc	fsr2h,f,c
  8359  000370  CFDE F003          	movff	postinc2,i2digitalWrite@pin
  8360  000374  CFDD F004          	movff	postdec2,i2digitalWrite@pin+1
  8361  000378  0E00               	movlw	0
  8362  00037A  6E06               	movwf	i2digitalWrite@val+1,c
  8363  00037C  0E00               	movlw	0
  8364  00037E  6E05               	movwf	i2digitalWrite@val,c
  8365  000380  EC1C  F00B         	call	i2_digitalWrite	;wreg free
  8366                           
  8367                           ;servo.c: 61: }
  8368  000384  D047               	goto	i2l3779
  8369  000386                     i2l3775:
  8370                           
  8371                           ;servo.c: 62: else{
  8372                           ;servo.c: 63: startTimer(i, pulse[i]);
  8373  000386  C014  F001         	movff	servoInterruptService@i,i2startTimer@timer
  8374  00038A  C015  F002         	movff	servoInterruptService@i+1,i2startTimer@timer+1
  8375  00038E  0E00               	movlw	low _pulse
  8376  000390  6E0A               	movwf	??_servoInterruptService& (0+255),c
  8377  000392  0E01               	movlw	high _pulse
  8378  000394  6E0B               	movwf	(??_servoInterruptService+1)& (0+255),c
  8379  000396  90D8               	bcf	status,0,c
  8380  000398  3414               	rlcf	servoInterruptService@i,w,c
  8381  00039A  6ED9               	movwf	fsr2l,c
  8382  00039C  3415               	rlcf	servoInterruptService@i+1,w,c
  8383  00039E  6EDA               	movwf	fsr2h,c
  8384  0003A0  90D8               	bcf	status,0,c
  8385  0003A2  36D9               	rlcf	fsr2l,f,c
  8386  0003A4  36DA               	rlcf	fsr2h,f,c
  8387  0003A6  500A               	movf	??_servoInterruptService,w,c
  8388  0003A8  26D9               	addwf	fsr2l,f,c
  8389  0003AA  500B               	movf	??_servoInterruptService+1,w,c
  8390  0003AC  22DA               	addwfc	fsr2h,f,c
  8391  0003AE  CFDE F003          	movff	postinc2,i2startTimer@val
  8392  0003B2  CFDE F004          	movff	postinc2,i2startTimer@val+1
  8393  0003B6  CFDE F005          	movff	postinc2,i2startTimer@val+2
  8394  0003BA  CFDE F006          	movff	postinc2,i2startTimer@val+3
  8395  0003BE  EC34  F00E         	call	i2_startTimer	;wreg free
  8396                           
  8397                           ;servo.c: 64: digitalWrite(port[i],pin[i],1);
  8398  0003C2  90D8               	bcf	status,0,c
  8399  0003C4  3414               	rlcf	servoInterruptService@i,w,c
  8400  0003C6  6ED9               	movwf	fsr2l,c
  8401  0003C8  3415               	rlcf	servoInterruptService@i+1,w,c
  8402  0003CA  6EDA               	movwf	fsr2h,c
  8403  0003CC  0E18               	movlw	low _port
  8404  0003CE  26D9               	addwf	fsr2l,f,c
  8405  0003D0  0E01               	movlw	high _port
  8406  0003D2  22DA               	addwfc	fsr2h,f,c
  8407  0003D4  CFDE F001          	movff	postinc2,i2digitalWrite@port
  8408  0003D8  CFDD F002          	movff	postdec2,i2digitalWrite@port+1
  8409  0003DC  90D8               	bcf	status,0,c
  8410  0003DE  3414               	rlcf	servoInterruptService@i,w,c
  8411  0003E0  6ED9               	movwf	fsr2l,c
  8412  0003E2  3415               	rlcf	servoInterruptService@i+1,w,c
  8413  0003E4  6EDA               	movwf	fsr2h,c
  8414  0003E6  0E10               	movlw	low _pin
  8415  0003E8  26D9               	addwf	fsr2l,f,c
  8416  0003EA  0E01               	movlw	high _pin
  8417  0003EC  22DA               	addwfc	fsr2h,f,c
  8418  0003EE  CFDE F003          	movff	postinc2,i2digitalWrite@pin
  8419  0003F2  CFDD F004          	movff	postdec2,i2digitalWrite@pin+1
  8420  0003F6  0E00               	movlw	0
  8421  0003F8  6E06               	movwf	i2digitalWrite@val+1,c
  8422  0003FA  0E01               	movlw	1
  8423  0003FC  6E05               	movwf	i2digitalWrite@val,c
  8424  0003FE  EC1C  F00B         	call	i2_digitalWrite	;wreg free
  8425                           
  8426                           ;servo.c: 65: }
  8427                           ;servo.c: 68: switch(i){
  8428  000402  D008               	goto	i2l3779
  8429  000404                     i2l541:
  8430  000404  94F2               	bcf	intcon,2,c	;volatile
  8431  000406  D01B               	goto	i2l3781
  8432  000408                     i2l543:
  8433  000408  909E               	bcf	3998,0,c	;volatile
  8434  00040A  D019               	goto	i2l3781
  8435  00040C                     i2l544:
  8436  00040C  929E               	bcf	3998,1,c	;volatile
  8437  00040E  D017               	goto	i2l3781
  8438  000410                     i2l545:
  8439  000410  92A1               	bcf	4001,1,c	;volatile
  8440                           
  8441                           ;servo.c: 73: }
  8442  000412  D015               	goto	i2l3781
  8443  000414                     i2l3779:
  8444  000414  C014  F00A         	movff	servoInterruptService@i,??_servoInterruptService
  8445  000418  C015  F00B         	movff	servoInterruptService@i+1,??_servoInterruptService+1
  8446                           
  8447                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8448                           ; Switch size 1, requested type "space"
  8449                           ; Number of cases is 1, Range of values is 0 to 0
  8450                           ; switch strategies available:
  8451                           ; Name         Instructions Cycles
  8452                           ; simple_byte            4     3 (average)
  8453                           ;	Chosen strategy is simple_byte
  8454  00041C  500B               	movf	??_servoInterruptService+1,w,c
  8455  00041E  0A00               	xorlw	0	; case 0
  8456  000420  A4D8               	btfss	status,2,c
  8457  000422  D00D               	goto	i2l3781
  8458                           
  8459                           ; Switch size 1, requested type "space"
  8460                           ; Number of cases is 4, Range of values is 0 to 3
  8461                           ; switch strategies available:
  8462                           ; Name         Instructions Cycles
  8463                           ; simple_byte           13     7 (average)
  8464                           ;	Chosen strategy is simple_byte
  8465  000424  500A               	movf	??_servoInterruptService,w,c
  8466  000426  0A00               	xorlw	0	; case 0
  8467  000428  B4D8               	btfsc	status,2,c
  8468  00042A  D7EC               	goto	i2l541
  8469  00042C  0A01               	xorlw	1	; case 1
  8470  00042E  B4D8               	btfsc	status,2,c
  8471  000430  D7EB               	goto	i2l543
  8472  000432  0A03               	xorlw	3	; case 2
  8473  000434  B4D8               	btfsc	status,2,c
  8474  000436  D7EA               	goto	i2l544
  8475  000438  0A01               	xorlw	1	; case 3
  8476  00043A  B4D8               	btfsc	status,2,c
  8477  00043C  D7E9               	goto	i2l545
  8478  00043E                     i2l3781:
  8479  00043E  4A14               	infsnz	servoInterruptService@i,f,c
  8480  000440  2A15               	incf	servoInterruptService@i+1,f,c
  8481  000442  BE15               	btfsc	servoInterruptService@i+1,7,c
  8482  000444  D744               	goto	i2l3767
  8483  000446  5015               	movf	servoInterruptService@i+1,w,c
  8484  000448  E101               	bnz	i2l546
  8485  00044A  D73B               	goto	L1
  8486  00044C                     i2l546:
  8487  00044C  0012               	return		;funcret
  8488  00044E                     __end_of_servoInterruptService:
  8489                           	opt stack 0
  8490                           pclatu	equ	0xFFB
  8491                           pclath	equ	0xFFA
  8492                           tblptru	equ	0xFF8
  8493                           tblptrh	equ	0xFF7
  8494                           tblptrl	equ	0xFF6
  8495                           tablat	equ	0xFF5
  8496                           prodh	equ	0xFF4
  8497                           prodl	equ	0xFF3
  8498                           intcon	equ	0xFF2
  8499                           intcon3	equ	0xFF0
  8500                           postinc0	equ	0xFEE
  8501                           fsr0h	equ	0xFEA
  8502                           fsr0l	equ	0xFE9
  8503                           wreg	equ	0xFE8
  8504                           postdec1	equ	0xFE5
  8505                           fsr1h	equ	0xFE2
  8506                           fsr1l	equ	0xFE1
  8507                           indf2	equ	0xFDF
  8508                           postinc2	equ	0xFDE
  8509                           postdec2	equ	0xFDD
  8510                           fsr2h	equ	0xFDA
  8511                           fsr2l	equ	0xFD9
  8512                           status	equ	0xFD8
  8513                           
  8514 ;; *************** function i2_startTimer *****************
  8515 ;; Defined at:
  8516 ;;		line 75 in file "timer.c"
  8517 ;; Parameters:    Size  Location     Type
  8518 ;;  timer           2    0[COMRAM] int 
  8519 ;;  val             4    2[COMRAM] long 
  8520 ;; Auto vars:     Size  Location     Type
  8521 ;;		None
  8522 ;; Return value:  Size  Location     Type
  8523 ;;                  1    wreg      void 
  8524 ;; Registers used:
  8525 ;;		wreg, status,2, status,0
  8526 ;; Tracked objects:
  8527 ;;		On entry : 0/0
  8528 ;;		On exit  : 0/0
  8529 ;;		Unchanged: 0/0
  8530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8531 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8533 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8534 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8535 ;;Total ram usage:        8 bytes
  8536 ;; Hardware stack levels used:    1
  8537 ;; This function calls:
  8538 ;;		Nothing
  8539 ;; This function is called by:
  8540 ;;		_servoInterruptService
  8541 ;; This function uses a non-reentrant model
  8542 ;;
  8543                           
  8544                           	psect	text44
  8545  001C68                     __ptext44:
  8546                           	opt stack 0
  8547  001C68                     i2_startTimer:
  8548                           	opt stack 21
  8549                           
  8550                           ;timer.c: 76: switch(timer){
  8551                           
  8552                           ;incstack = 0
  8553  001C68  D012               	goto	i2l3621
  8554  001C6A                     i2l401:
  8555                           
  8556                           ;timer.c: 78: TMR0H = val>>8;
  8557  001C6A  C004  FFD7         	movff	i2startTimer@val+1,4055	;volatile
  8558                           
  8559                           ;timer.c: 79: TMR0L = val;
  8560  001C6E  C003  FFD6         	movff	i2startTimer@val,4054	;volatile
  8561                           
  8562                           ;timer.c: 80: T0CON |= 1<<7;
  8563  001C72  8ED5               	bsf	4053,7,c	;volatile
  8564                           
  8565                           ;timer.c: 81: break;
  8566  001C74  0012               	return	
  8567  001C76                     i2l403:
  8568                           
  8569                           ;timer.c: 83: TMR1H = val>>8;
  8570  001C76  C004  FFCF         	movff	i2startTimer@val+1,4047	;volatile
  8571                           
  8572                           ;timer.c: 84: TMR1L = val;
  8573  001C7A  C003  FFCE         	movff	i2startTimer@val,4046	;volatile
  8574                           
  8575                           ;timer.c: 85: T1CON |= 1<<0;
  8576  001C7E  80CD               	bsf	4045,0,c	;volatile
  8577                           
  8578                           ;timer.c: 86: break;
  8579  001C80  0012               	return	
  8580  001C82                     i2l404:
  8581                           
  8582                           ;timer.c: 88: TMR3H = val>>8;
  8583  001C82  C004  FFB3         	movff	i2startTimer@val+1,4019	;volatile
  8584                           
  8585                           ;timer.c: 89: TMR3L = val;
  8586  001C86  C003  FFB2         	movff	i2startTimer@val,4018	;volatile
  8587                           
  8588                           ;timer.c: 90: T3CON |= 1<<0;
  8589  001C8A  80B1               	bsf	4017,0,c	;volatile
  8590                           
  8591                           ;timer.c: 91: }
  8592  001C8C  0012               	return	
  8593  001C8E                     i2l3621:
  8594  001C8E  C001  F007         	movff	i2startTimer@timer,??i2_startTimer
  8595  001C92  C002  F008         	movff	i2startTimer@timer+1,??i2_startTimer+1
  8596                           
  8597                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8598                           ; Switch size 1, requested type "space"
  8599                           ; Number of cases is 1, Range of values is 0 to 0
  8600                           ; switch strategies available:
  8601                           ; Name         Instructions Cycles
  8602                           ; simple_byte            4     3 (average)
  8603                           ;	Chosen strategy is simple_byte
  8604  001C96  5008               	movf	??i2_startTimer+1,w,c
  8605  001C98  0A00               	xorlw	0	; case 0
  8606  001C9A  A4D8               	btfss	status,2,c
  8607  001C9C  0012               	return	
  8608                           
  8609                           ; Switch size 1, requested type "space"
  8610                           ; Number of cases is 3, Range of values is 0 to 3
  8611                           ; switch strategies available:
  8612                           ; Name         Instructions Cycles
  8613                           ; simple_byte           10     6 (average)
  8614                           ;	Chosen strategy is simple_byte
  8615  001C9E  5007               	movf	??i2_startTimer,w,c
  8616  001CA0  0A00               	xorlw	0	; case 0
  8617  001CA2  B4D8               	btfsc	status,2,c
  8618  001CA4  D7E2               	goto	i2l401
  8619  001CA6  0A01               	xorlw	1	; case 1
  8620  001CA8  B4D8               	btfsc	status,2,c
  8621  001CAA  D7E5               	goto	i2l403
  8622  001CAC  0A02               	xorlw	2	; case 3
  8623  001CAE  A4D8               	btfss	status,2,c
  8624  001CB0  0012               	return	
  8625  001CB2  D7E7               	goto	i2l404
  8626  001CB4                     __end_ofi2_startTimer:
  8627                           	opt stack 0
  8628                           pclatu	equ	0xFFB
  8629                           pclath	equ	0xFFA
  8630                           tblptru	equ	0xFF8
  8631                           tblptrh	equ	0xFF7
  8632                           tblptrl	equ	0xFF6
  8633                           tablat	equ	0xFF5
  8634                           prodh	equ	0xFF4
  8635                           prodl	equ	0xFF3
  8636                           intcon	equ	0xFF2
  8637                           intcon3	equ	0xFF0
  8638                           postinc0	equ	0xFEE
  8639                           fsr0h	equ	0xFEA
  8640                           fsr0l	equ	0xFE9
  8641                           wreg	equ	0xFE8
  8642                           postdec1	equ	0xFE5
  8643                           fsr1h	equ	0xFE2
  8644                           fsr1l	equ	0xFE1
  8645                           indf2	equ	0xFDF
  8646                           postinc2	equ	0xFDE
  8647                           postdec2	equ	0xFDD
  8648                           fsr2h	equ	0xFDA
  8649                           fsr2l	equ	0xFD9
  8650                           status	equ	0xFD8
  8651                           
  8652 ;; *************** function i2_digitalWrite *****************
  8653 ;; Defined at:
  8654 ;;		line 53 in file "iopin.c"
  8655 ;; Parameters:    Size  Location     Type
  8656 ;;  port            2    0[COMRAM] int 
  8657 ;;  pin             2    2[COMRAM] int 
  8658 ;;  val             2    4[COMRAM] int 
  8659 ;; Auto vars:     Size  Location     Type
  8660 ;;		None
  8661 ;; Return value:  Size  Location     Type
  8662 ;;                  1    wreg      void 
  8663 ;; Registers used:
  8664 ;;		wreg, status,2, status,0
  8665 ;; Tracked objects:
  8666 ;;		On entry : 0/0
  8667 ;;		On exit  : 0/0
  8668 ;;		Unchanged: 0/0
  8669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8670 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8672 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8673 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8674 ;;Total ram usage:        9 bytes
  8675 ;; Hardware stack levels used:    1
  8676 ;; This function calls:
  8677 ;;		Nothing
  8678 ;; This function is called by:
  8679 ;;		_servoInterruptService
  8680 ;; This function uses a non-reentrant model
  8681 ;;
  8682                           
  8683                           	psect	text45
  8684  001638                     __ptext45:
  8685                           	opt stack 0
  8686  001638                     i2_digitalWrite:
  8687                           	opt stack 21
  8688                           
  8689                           ;iopin.c: 54: pin = 1 << pin;
  8690                           
  8691                           ;incstack = 0
  8692  001638  C003  F007         	movff	i2digitalWrite@pin,??i2_digitalWrite
  8693  00163C  0E01               	movlw	1
  8694  00163E  6E08               	movwf	(??i2_digitalWrite+1)& (0+255),c
  8695  001640  0E00               	movlw	0
  8696  001642  6E09               	movwf	(??i2_digitalWrite+2)& (0+255),c
  8697  001644  2A07               	incf	??i2_digitalWrite,f,c
  8698  001646  D003               	goto	i2u321_44
  8699  001648                     i2u321_45:
  8700  001648  90D8               	bcf	status,0,c
  8701  00164A  3608               	rlcf	??i2_digitalWrite+1,f,c
  8702  00164C  3609               	rlcf	??i2_digitalWrite+2,f,c
  8703  00164E                     i2u321_44:
  8704  00164E  2E07               	decfsz	??i2_digitalWrite,f,c
  8705  001650  D7FB               	goto	i2u321_45
  8706  001652  C008  F003         	movff	??i2_digitalWrite+1,i2digitalWrite@pin
  8707  001656  C009  F004         	movff	??i2_digitalWrite+2,i2digitalWrite@pin+1
  8708                           
  8709                           ;iopin.c: 55: if(val == 0){
  8710  00165A  5005               	movf	i2digitalWrite@val,w,c
  8711  00165C  1006               	iorwf	i2digitalWrite@val+1,w,c
  8712  00165E  A4D8               	btfss	status,2,c
  8713  001660  D02B               	goto	i2l3607
  8714                           
  8715                           ;iopin.c: 56: pin ^= 0xff;
  8716  001662  0EFF               	movlw	255
  8717  001664  1A03               	xorwf	i2digitalWrite@pin,f,c
  8718                           
  8719                           ;iopin.c: 57: }
  8720                           ;iopin.c: 59: switch(port){
  8721  001666  D028               	goto	i2l3607
  8722  001668                     i2l3583:
  8723  001668  0405               	decf	i2digitalWrite@val,w,c
  8724  00166A  1006               	iorwf	i2digitalWrite@val+1,w,c
  8725  00166C  A4D8               	btfss	status,2,c
  8726  00166E  D003               	goto	i2l3587
  8727  001670  5003               	movf	i2digitalWrite@pin,w,c
  8728  001672  1289               	iorwf	3977,f,c	;volatile
  8729  001674  0012               	return	
  8730  001676                     i2l3587:
  8731                           
  8732                           ;iopin.c: 61: else LATA &= pin;
  8733  001676  5003               	movf	i2digitalWrite@pin,w,c
  8734  001678  1689               	andwf	3977,f,c	;volatile
  8735                           
  8736                           ;iopin.c: 62: break;
  8737  00167A  0012               	return	
  8738  00167C                     i2l3589:
  8739  00167C  0405               	decf	i2digitalWrite@val,w,c
  8740  00167E  1006               	iorwf	i2digitalWrite@val+1,w,c
  8741  001680  A4D8               	btfss	status,2,c
  8742  001682  D003               	goto	i2l3593
  8743  001684  5003               	movf	i2digitalWrite@pin,w,c
  8744  001686  128A               	iorwf	3978,f,c	;volatile
  8745  001688  0012               	return	
  8746  00168A                     i2l3593:
  8747                           
  8748                           ;iopin.c: 64: else LATB &= pin;
  8749  00168A  5003               	movf	i2digitalWrite@pin,w,c
  8750  00168C  168A               	andwf	3978,f,c	;volatile
  8751                           
  8752                           ;iopin.c: 65: break;
  8753  00168E  0012               	return	
  8754  001690                     i2l3595:
  8755  001690  0405               	decf	i2digitalWrite@val,w,c
  8756  001692  1006               	iorwf	i2digitalWrite@val+1,w,c
  8757  001694  A4D8               	btfss	status,2,c
  8758  001696  D003               	goto	i2l3599
  8759  001698  5003               	movf	i2digitalWrite@pin,w,c
  8760  00169A  128B               	iorwf	3979,f,c	;volatile
  8761  00169C  0012               	return	
  8762  00169E                     i2l3599:
  8763                           
  8764                           ;iopin.c: 67: else LATC &= pin;
  8765  00169E  5003               	movf	i2digitalWrite@pin,w,c
  8766  0016A0  168B               	andwf	3979,f,c	;volatile
  8767                           
  8768                           ;iopin.c: 68: break;
  8769  0016A2  0012               	return	
  8770  0016A4                     i2l3601:
  8771  0016A4  0405               	decf	i2digitalWrite@val,w,c
  8772  0016A6  1006               	iorwf	i2digitalWrite@val+1,w,c
  8773  0016A8  A4D8               	btfss	status,2,c
  8774  0016AA  D003               	goto	i2l3605
  8775  0016AC  5003               	movf	i2digitalWrite@pin,w,c
  8776  0016AE  128C               	iorwf	3980,f,c	;volatile
  8777  0016B0  0012               	return	
  8778  0016B2                     i2l3605:
  8779                           
  8780                           ;iopin.c: 70: else LATD &= pin;
  8781  0016B2  5003               	movf	i2digitalWrite@pin,w,c
  8782  0016B4  168C               	andwf	3980,f,c	;volatile
  8783                           
  8784                           ;iopin.c: 71: }
  8785  0016B6  0012               	return	
  8786  0016B8                     i2l3607:
  8787  0016B8  C001  F007         	movff	i2digitalWrite@port,??i2_digitalWrite
  8788  0016BC  C002  F008         	movff	i2digitalWrite@port+1,??i2_digitalWrite+1
  8789                           
  8790                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8791                           ; Switch size 1, requested type "space"
  8792                           ; Number of cases is 1, Range of values is 0 to 0
  8793                           ; switch strategies available:
  8794                           ; Name         Instructions Cycles
  8795                           ; simple_byte            4     3 (average)
  8796                           ;	Chosen strategy is simple_byte
  8797  0016C0  5008               	movf	??i2_digitalWrite+1,w,c
  8798  0016C2  0A00               	xorlw	0	; case 0
  8799  0016C4  A4D8               	btfss	status,2,c
  8800  0016C6  0012               	return	
  8801                           
  8802                           ; Switch size 1, requested type "space"
  8803                           ; Number of cases is 4, Range of values is 0 to 3
  8804                           ; switch strategies available:
  8805                           ; Name         Instructions Cycles
  8806                           ; simple_byte           13     7 (average)
  8807                           ;	Chosen strategy is simple_byte
  8808  0016C8  5007               	movf	??i2_digitalWrite,w,c
  8809  0016CA  0A00               	xorlw	0	; case 0
  8810  0016CC  B4D8               	btfsc	status,2,c
  8811  0016CE  D7CC               	goto	i2l3583
  8812  0016D0  0A01               	xorlw	1	; case 1
  8813  0016D2  B4D8               	btfsc	status,2,c
  8814  0016D4  D7D3               	goto	i2l3589
  8815  0016D6  0A03               	xorlw	3	; case 2
  8816  0016D8  B4D8               	btfsc	status,2,c
  8817  0016DA  D7DA               	goto	i2l3595
  8818  0016DC  0A01               	xorlw	1	; case 3
  8819  0016DE  A4D8               	btfss	status,2,c
  8820  0016E0  0012               	return	
  8821  0016E2  D7E0               	goto	i2l3601
  8822  0016E4                     __end_ofi2_digitalWrite:
  8823                           	opt stack 0
  8824                           pclatu	equ	0xFFB
  8825                           pclath	equ	0xFFA
  8826                           tblptru	equ	0xFF8
  8827                           tblptrh	equ	0xFF7
  8828                           tblptrl	equ	0xFF6
  8829                           tablat	equ	0xFF5
  8830                           prodh	equ	0xFF4
  8831                           prodl	equ	0xFF3
  8832                           intcon	equ	0xFF2
  8833                           intcon3	equ	0xFF0
  8834                           postinc0	equ	0xFEE
  8835                           fsr0h	equ	0xFEA
  8836                           fsr0l	equ	0xFE9
  8837                           wreg	equ	0xFE8
  8838                           postdec1	equ	0xFE5
  8839                           fsr1h	equ	0xFE2
  8840                           fsr1l	equ	0xFE1
  8841                           indf2	equ	0xFDF
  8842                           postinc2	equ	0xFDE
  8843                           postdec2	equ	0xFDD
  8844                           fsr2h	equ	0xFDA
  8845                           fsr2l	equ	0xFD9
  8846                           status	equ	0xFD8
  8847                           
  8848 ;; *************** function _digitalRead *****************
  8849 ;; Defined at:
  8850 ;;		line 43 in file "iopin.c"
  8851 ;; Parameters:    Size  Location     Type
  8852 ;;  port            2    0[COMRAM] int 
  8853 ;;  pin             2    2[COMRAM] int 
  8854 ;; Auto vars:     Size  Location     Type
  8855 ;;		None
  8856 ;; Return value:  Size  Location     Type
  8857 ;;                  2    0[COMRAM] int 
  8858 ;; Registers used:
  8859 ;;		wreg, status,2, status,0
  8860 ;; Tracked objects:
  8861 ;;		On entry : 0/0
  8862 ;;		On exit  : 0/0
  8863 ;;		Unchanged: 0/0
  8864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8865 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8867 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8868 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8869 ;;Total ram usage:        6 bytes
  8870 ;; Hardware stack levels used:    1
  8871 ;; This function calls:
  8872 ;;		Nothing
  8873 ;; This function is called by:
  8874 ;;		_servoInterruptService
  8875 ;; This function uses a non-reentrant model
  8876 ;;
  8877                           
  8878                           	psect	text46
  8879  0014D8                     __ptext46:
  8880                           	opt stack 0
  8881  0014D8                     _digitalRead:
  8882                           	opt stack 21
  8883                           
  8884                           ;iopin.c: 44: switch(port){
  8885                           
  8886                           ;incstack = 0
  8887  0014D8  D040               	goto	i2l3533
  8888  0014DA                     i2l3515:
  8889  0014DA  C003  F005         	movff	digitalRead@pin,??_digitalRead
  8890  0014DE  CF80 F006          	movff	3968,??_digitalRead+1	;volatile
  8891  0014E2  2A05               	incf	??_digitalRead,f,c
  8892  0014E4  D002               	goto	i2u317_44
  8893  0014E6                     i2u317_45:
  8894  0014E6  90D8               	bcf	status,0,c
  8895  0014E8  3206               	rrcf	??_digitalRead+1,f,c
  8896  0014EA                     i2u317_44:
  8897  0014EA  2E05               	decfsz	??_digitalRead,f,c
  8898  0014EC  D7FC               	goto	i2u317_45
  8899  0014EE  0E01               	movlw	1
  8900  0014F0  1606               	andwf	??_digitalRead+1,f,c
  8901  0014F2  5006               	movf	??_digitalRead+1,w,c
  8902  0014F4  6E01               	movwf	?_digitalRead,c
  8903  0014F6  6A02               	clrf	?_digitalRead+1,c
  8904  0014F8  0012               	return	
  8905  0014FA                     i2l3519:
  8906  0014FA  C003  F005         	movff	digitalRead@pin,??_digitalRead
  8907  0014FE  CF81 F006          	movff	3969,??_digitalRead+1	;volatile
  8908  001502  2A05               	incf	??_digitalRead,f,c
  8909  001504  D002               	goto	i2u318_44
  8910  001506                     i2u318_45:
  8911  001506  90D8               	bcf	status,0,c
  8912  001508  3206               	rrcf	??_digitalRead+1,f,c
  8913  00150A                     i2u318_44:
  8914  00150A  2E05               	decfsz	??_digitalRead,f,c
  8915  00150C  D7FC               	goto	i2u318_45
  8916  00150E  0E01               	movlw	1
  8917  001510  1606               	andwf	??_digitalRead+1,f,c
  8918  001512  5006               	movf	??_digitalRead+1,w,c
  8919  001514  6E01               	movwf	?_digitalRead,c
  8920  001516  6A02               	clrf	?_digitalRead+1,c
  8921  001518  0012               	return	
  8922  00151A                     i2l3523:
  8923  00151A  C003  F005         	movff	digitalRead@pin,??_digitalRead
  8924  00151E  CF82 F006          	movff	3970,??_digitalRead+1	;volatile
  8925  001522  2A05               	incf	??_digitalRead,f,c
  8926  001524  D002               	goto	i2u319_44
  8927  001526                     i2u319_45:
  8928  001526  90D8               	bcf	status,0,c
  8929  001528  3206               	rrcf	??_digitalRead+1,f,c
  8930  00152A                     i2u319_44:
  8931  00152A  2E05               	decfsz	??_digitalRead,f,c
  8932  00152C  D7FC               	goto	i2u319_45
  8933  00152E  0E01               	movlw	1
  8934  001530  1606               	andwf	??_digitalRead+1,f,c
  8935  001532  5006               	movf	??_digitalRead+1,w,c
  8936  001534  6E01               	movwf	?_digitalRead,c
  8937  001536  6A02               	clrf	?_digitalRead+1,c
  8938  001538  0012               	return	
  8939  00153A                     i2l3527:
  8940  00153A  C003  F005         	movff	digitalRead@pin,??_digitalRead
  8941  00153E  CF83 F006          	movff	3971,??_digitalRead+1	;volatile
  8942  001542  2A05               	incf	??_digitalRead,f,c
  8943  001544  D002               	goto	i2u320_44
  8944  001546                     i2u320_45:
  8945  001546  90D8               	bcf	status,0,c
  8946  001548  3206               	rrcf	??_digitalRead+1,f,c
  8947  00154A                     i2u320_44:
  8948  00154A  2E05               	decfsz	??_digitalRead,f,c
  8949  00154C  D7FC               	goto	i2u320_45
  8950  00154E  0E01               	movlw	1
  8951  001550  1606               	andwf	??_digitalRead+1,f,c
  8952  001552  5006               	movf	??_digitalRead+1,w,c
  8953  001554  6E01               	movwf	?_digitalRead,c
  8954  001556  6A02               	clrf	?_digitalRead+1,c
  8955  001558  0012               	return	
  8956  00155A                     i2l3533:
  8957  00155A  C001  F005         	movff	digitalRead@port,??_digitalRead
  8958  00155E  C002  F006         	movff	digitalRead@port+1,??_digitalRead+1
  8959                           
  8960                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8961                           ; Switch size 1, requested type "space"
  8962                           ; Number of cases is 1, Range of values is 0 to 0
  8963                           ; switch strategies available:
  8964                           ; Name         Instructions Cycles
  8965                           ; simple_byte            4     3 (average)
  8966                           ;	Chosen strategy is simple_byte
  8967  001562  5006               	movf	??_digitalRead+1,w,c
  8968  001564  0A00               	xorlw	0	; case 0
  8969  001566  A4D8               	btfss	status,2,c
  8970  001568  D00D               	goto	i2l296
  8971                           
  8972                           ; Switch size 1, requested type "space"
  8973                           ; Number of cases is 4, Range of values is 0 to 3
  8974                           ; switch strategies available:
  8975                           ; Name         Instructions Cycles
  8976                           ; simple_byte           13     7 (average)
  8977                           ;	Chosen strategy is simple_byte
  8978  00156A  5005               	movf	??_digitalRead,w,c
  8979  00156C  0A00               	xorlw	0	; case 0
  8980  00156E  B4D8               	btfsc	status,2,c
  8981  001570  D7B4               	goto	i2l3515
  8982  001572  0A01               	xorlw	1	; case 1
  8983  001574  B4D8               	btfsc	status,2,c
  8984  001576  D7C1               	goto	i2l3519
  8985  001578  0A03               	xorlw	3	; case 2
  8986  00157A  B4D8               	btfsc	status,2,c
  8987  00157C  D7CE               	goto	i2l3523
  8988  00157E  0A01               	xorlw	1	; case 3
  8989  001580  B4D8               	btfsc	status,2,c
  8990  001582  D7DB               	goto	i2l3527
  8991  001584                     i2l296:
  8992                           
  8993                           ;iopin.c: 50: return -1;
  8994  001584  6801               	setf	?_digitalRead,c
  8995  001586  6802               	setf	?_digitalRead+1,c
  8996  001588  0012               	return		;funcret
  8997  00158A                     __end_of_digitalRead:
  8998                           	opt stack 0
  8999                           pclatu	equ	0xFFB
  9000                           pclath	equ	0xFFA
  9001                           tblptru	equ	0xFF8
  9002                           tblptrh	equ	0xFF7
  9003                           tblptrl	equ	0xFF6
  9004                           tablat	equ	0xFF5
  9005                           prodh	equ	0xFF4
  9006                           prodl	equ	0xFF3
  9007                           intcon	equ	0xFF2
  9008                           intcon3	equ	0xFF0
  9009                           postinc0	equ	0xFEE
  9010                           fsr0h	equ	0xFEA
  9011                           fsr0l	equ	0xFE9
  9012                           wreg	equ	0xFE8
  9013                           postdec1	equ	0xFE5
  9014                           fsr1h	equ	0xFE2
  9015                           fsr1l	equ	0xFE1
  9016                           indf2	equ	0xFDF
  9017                           postinc2	equ	0xFDE
  9018                           postdec2	equ	0xFDD
  9019                           fsr2h	equ	0xFDA
  9020                           fsr2l	equ	0xFD9
  9021                           status	equ	0xFD8
  9022                           pclatu	equ	0xFFB
  9023                           pclath	equ	0xFFA
  9024                           tblptru	equ	0xFF8
  9025                           tblptrh	equ	0xFF7
  9026                           tblptrl	equ	0xFF6
  9027                           tablat	equ	0xFF5
  9028                           prodh	equ	0xFF4
  9029                           prodl	equ	0xFF3
  9030                           intcon	equ	0xFF2
  9031                           intcon3	equ	0xFF0
  9032                           postinc0	equ	0xFEE
  9033                           fsr0h	equ	0xFEA
  9034                           fsr0l	equ	0xFE9
  9035                           wreg	equ	0xFE8
  9036                           postdec1	equ	0xFE5
  9037                           fsr1h	equ	0xFE2
  9038                           fsr1l	equ	0xFE1
  9039                           indf2	equ	0xFDF
  9040                           postinc2	equ	0xFDE
  9041                           postdec2	equ	0xFDD
  9042                           fsr2h	equ	0xFDA
  9043                           fsr2l	equ	0xFD9
  9044                           status	equ	0xFD8
  9045                           
  9046                           	psect	rparam
  9047  0000                     pclatu	equ	0xFFB
  9048                           pclath	equ	0xFFA
  9049                           tblptru	equ	0xFF8
  9050                           tblptrh	equ	0xFF7
  9051                           tblptrl	equ	0xFF6
  9052                           tablat	equ	0xFF5
  9053                           prodh	equ	0xFF4
  9054                           prodl	equ	0xFF3
  9055                           intcon	equ	0xFF2
  9056                           intcon3	equ	0xFF0
  9057                           postinc0	equ	0xFEE
  9058                           fsr0h	equ	0xFEA
  9059                           fsr0l	equ	0xFE9
  9060                           wreg	equ	0xFE8
  9061                           postdec1	equ	0xFE5
  9062                           fsr1h	equ	0xFE2
  9063                           fsr1l	equ	0xFE1
  9064                           indf2	equ	0xFDF
  9065                           postinc2	equ	0xFDE
  9066                           postdec2	equ	0xFDD
  9067                           fsr2h	equ	0xFDA
  9068                           fsr2l	equ	0xFD9
  9069                           status	equ	0xFD8
  9070                           
  9071                           	psect	temp
  9072  00007E                     btemp:
  9073                           	opt stack 0
  9074  00007E                     	ds	1
  9075  0000                     int$flags	set	btemp
  9076                           pclatu	equ	0xFFB
  9077                           pclath	equ	0xFFA
  9078                           tblptru	equ	0xFF8
  9079                           tblptrh	equ	0xFF7
  9080                           tblptrl	equ	0xFF6
  9081                           tablat	equ	0xFF5
  9082                           prodh	equ	0xFF4
  9083                           prodl	equ	0xFF3
  9084                           intcon	equ	0xFF2
  9085                           intcon3	equ	0xFF0
  9086                           postinc0	equ	0xFEE
  9087                           fsr0h	equ	0xFEA
  9088                           fsr0l	equ	0xFE9
  9089                           wreg	equ	0xFE8
  9090                           postdec1	equ	0xFE5
  9091                           fsr1h	equ	0xFE2
  9092                           fsr1l	equ	0xFE1
  9093                           indf2	equ	0xFDF
  9094                           postinc2	equ	0xFDE
  9095                           postdec2	equ	0xFDD
  9096                           fsr2h	equ	0xFDA
  9097                           fsr2l	equ	0xFD9
  9098                           status	equ	0xFD8


Data Sizes:
    Strings     268
    Constant    32
    Data        36
    BSS         34
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    117     125
    BANK0           128    110     128
    BANK1           256      0      44
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_17(CODE[17]), STR_16(CODE[18]), STR_15(CODE[17]), STR_14(CODE[18]), 
		 -> STR_13(CODE[17]), STR_12(CODE[19]), STR_11(CODE[17]), STR_10(CODE[18]), 
		 -> STR_9(CODE[17]), STR_8(CODE[18]), STR_7(CODE[17]), STR_6(CODE[18]), 
		 -> STR_5(CODE[9]), STR_4(CODE[8]), STR_3(CODE[6]), STR_2(CODE[6]), 
		 -> STR_1(CODE[11]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _service in COMRAM

    _service->i2_setAngle
    i2_setAngle->i2_angleToPulse
    i2_angleToPulse->i2___fttol
    i2___fttol->i2___ftadd
    i2___ftmul->i2___ftdiv
    i2___ftdiv->i2___awtoft
    i2___ftadd->i2___ftmul
    i2___awtoft->i2___ftpack
    i2___altoft->i2___ftpack
    _servoInterruptService->i2_digitalWrite

Critical Paths under _main in BANK0

    _main->_initServo
    _sortBattery->_setAngle
    _showInterface->_runMenu
    _runTime->_printf
    _runStats->_printf
    _runSelect->_printf
    _runMenu->_printf
    _mainMenu->_printf
    _dateTime->_printf
    _printf->___lwdiv
    _lcdNewline->_lcdInst
    _lcdClear->_lcdInst
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    ___fttol->___ftadd
    ___ftmul->___ftdiv
    ___ftdiv->___awtoft
    ___ftadd->___ftmul
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   48438
                            _initLCD
                          _initServo
                           _pinSetup
                      _showInterface
                        _sortBattery
 ---------------------------------------------------------------------------------
 (1) _sortBattery                                          0     0      0   18041
                       _digitalWrite
                           _lcdClear
                             _printf
                         _readKeypad
                           _setAngle
                          _stopServo
 ---------------------------------------------------------------------------------
 (2) _stopServo                                            4     2      2      86
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                         9     3      6     752
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (1) _showInterface                                        1     1      0   13618
                                             22 BANK0      1     1      0
                           _dateTime
                           _mainMenu
                         _readKeypad
                            _runMenu
                          _runSelect
                           _runStats
                            _runTime
 ---------------------------------------------------------------------------------
 (2) _runTime                                              0     0      0    2192
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runStats                                             0     0      0    2192
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runSelect                                            0     0      0    2192
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runMenu                                              1     1      0    2214
                                             21 BANK0      1     1      0
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _readKeypad                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _mainMenu                                             0     0      0    2192
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _dateTime                                             0     0      0    2192
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              23    17      6    2057
                                              7 BANK0     14     8      6
                            ___lwdiv
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     292
                                              4 BANK0      1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     290
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdClear                                             0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initServo                                            8     0      8   16644
                                            102 BANK0      8     0      8
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (2) _startTimer                                           8     2      6     562
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            10     6      4   14988
                                             92 BANK0     10     6      4
                       _angleToPulse
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        23    19      4   14104
                                             69 BANK0     23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     316
                                             54 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    2665
                                             27 BANK0     15     9      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    2747
                                             12 BANK0     15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    3409
                                             42 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2264
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2503
                                              8 BANK0     10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2109
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _initTimer                                            4     2      2     150
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              4 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     135
                                              2 BANK0      2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _service                                             15    15      0    7389
                                            102 COMRAM    15    15      0
              _servoInterruptService
                         i2_setAngle
 ---------------------------------------------------------------------------------
 (9) i2_setAngle                                          10     6      4    5888
                                             92 COMRAM    10     6      4
                     i2_angleToPulse
 ---------------------------------------------------------------------------------
 (10) i2_angleToPulse                                     23    19      4    5532
                                             69 COMRAM    23    19      4
                         i2___altoft
                         i2___awtoft
                          i2___ftadd
                          i2___ftdiv
                          i2___ftmul
                          i2___fttol
 ---------------------------------------------------------------------------------
 (11) i2___fttol                                          15    11      4     278
                                             54 COMRAM    15    11      4
                         i2___altoft (ARG)
                         i2___awtoft (ARG)
                          i2___ftadd (ARG)
                          i2___ftdiv (ARG)
                          i2___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___ftmul                                          15     9      6     999
                                             27 COMRAM    15     9      6
                         i2___altoft (ARG)
                         i2___awtoft (ARG)
                          i2___ftdiv (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (11) i2___ftdiv                                          15     9      6     953
                                             12 COMRAM    15     9      6
                         i2___awtoft (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (11) i2___ftadd                                          12     6      6    1565
                                             42 COMRAM    12     6      6
                         i2___altoft (ARG)
                         i2___awtoft (ARG)
                          i2___ftdiv (ARG)
                          i2___ftmul (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (11) i2___awtoft                                          4     1      3     738
                                              8 COMRAM     4     1      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (11) i2___altoft                                         10     6      4     837
                                              8 COMRAM    10     6      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (12) i2___ftpack                                          8     3      5     621
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) _servoInterruptService                               12    12      0    1368
                                              9 COMRAM    12    12      0
                        _digitalRead
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (10) i2_startTimer                                        8     2      6     258
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (10) i2_digitalWrite                                      9     3      6     488
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (10) _digitalRead                                         6     2      4     238
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
     _startTimer
   _pinSetup
   _showInterface
     _dateTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lwdiv
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _mainMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lwdiv
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _readKeypad
     _runMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lwdiv
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _runSelect
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lwdiv
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _runStats
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lwdiv
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _runTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lwdiv
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
   _sortBattery
     _digitalWrite
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___lwdiv
       _putch
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
     _readKeypad
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
     _stopServo

 _service (ROOT)
   _servoInterruptService
     _digitalRead
     i2_digitalWrite
     i2_startTimer
   i2_setAngle
     i2_angleToPulse
       i2___altoft
         i2___ftpack
       i2___awtoft
         i2___ftpack
       i2___ftadd
         i2___altoft (ARG)
           i2___ftpack
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftmul (ARG)
           i2___altoft (ARG)
             i2___ftpack
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftdiv (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftpack (ARG)
         i2___ftpack (ARG)
       i2___ftdiv
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
       i2___ftmul
         i2___altoft (ARG)
           i2___ftpack
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftpack (ARG)
       i2___fttol
         i2___altoft (ARG)
           i2___ftpack
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftadd (ARG)
           i2___altoft (ARG)
             i2___ftpack
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftdiv (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftmul (ARG)
             i2___altoft (ARG)
               i2___ftpack
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftdiv (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___ftpack (ARG)
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftmul (ARG)
           i2___altoft (ARG)
             i2___ftpack
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftdiv (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftpack (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      2C       7       17.2%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     6E      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     75      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     129      34        0.0%
DATA                 0      0     129       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Mar 12 23:15:20 2017

                  ___altoft@exp 0090                   ___altoft@sign 0091                     _sortBattery 1820  
                    i2___altoft 1B38                     __CFG_BORV$3 000000                      i2___awtoft 1E16  
                    i2___ftpack 158A                    __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000  
                  __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000                     __CFG_OSC$HS 000000  
              _redirectingServo 0126                    ___ftadd@exp1 00B5                    ___ftadd@exp2 00B4  
                  ___ftadd@sign 00B3                             l116 18B6                             l108 1780  
                           l232 1E8E                             l401 1C1A                             l403 1C26  
                           l404 1C32                             l229 1E80                             l195 1EE8  
                           l615 098A                             l617 09E4                             l394 1D42  
                           l904 0B24                 ??_showInterface 0096                             l846 0FF2  
                           l873 00B4                             l875 00DC                             l884 01B2  
                           l893 01DC                             l869 007A                    __CFG_CPB$OFF 000000  
                           _PEN 007E2A                    __CFG_CPD$OFF 000000                             _SEN 007E28  
                           _pin 0110                             wreg 000FE8                    __CFG_LVP$OFF 000000  
                  ___ftdiv@cntr 0095                    ___ftdiv@sign 009A                    __CFG_WDT$OFF 000000  
                          l1024 1AB6                            l3015 1DAE                            l3025 0B94  
                          l3043 0C26                            l3131 08E0                            l3061 0C8C  
                          l3053 0C56                            l3133 08E8                            l3141 090A  
                          l3055 0C66                            l3047 0C3A                            l3071 1A66  
                          l3127 08CC                            l3057 0C70                            l3073 1A72  
                          l3161 0990                            l3137 0900                            l3083 1AA8  
                          l3075 1A78                            l3149 0954                            l3421 1CC2  
                          l3167 09F0                            l3423 1CC8                            l2801 0FD6  
                          l3441 144C                            l3417 1CB6                            l2803 0FE4  
                          l3443 1454                            l3419 1CBC                            l3427 1CCE  
                          l3541 1D00                            l3701 10B0                            l3453 1484  
                          l3437 1438                            l3461 14A8                            l3551 1D12  
                          l2815 1018                            l3711 10DE                            l3703 10B8  
                          l3455 148C                            l3447 1468                            l2809 0FFC  
                          l3449 1470                            l3547 1D0A                            l2835 17AE  
                          l2851 0088                            l3571 1C3E                            l3723 1108  
                          l3715 10EE                            l3459 14A0                            l3557 1D1A  
                          l2837 17BE                            l2909 0254                            l2925 0A82  
                          l3725 1114                            l3805 1764                            l2791 0F48  
                          l2863 00D2                            l2919 0A48                            l3719 10FE  
                          l3671 1034                            l2793 0F56                            l2881 0150  
                          l2873 0114                            l2857 00C2                            l2945 0AE2  
                          l3681 105E                            l3673 1038                            l2795 0F86  
                          l2787 0F34                            l2891 0198                            l2883 015E  
                          l2971 07D4                            l3667 1026                            l2893 01A6  
                          l2885 016A                            l2965 079A                            l3685 106C  
                          l3669 102A                            l2799 0FA6                            l2879 0142  
                          l2985 0822                            l3697 10A6                            l2899 0206  
                          l2995 0860                            l2989 0840                            l2999 087E  
                          _EEIF 007D0C                            STR_1 FFD7                            STR_2 FFF9  
                          STR_3 FFF3                            STR_4 FFEB                            STR_5 FFE2  
                          STR_6 FF18                            STR_7 FFC6                            STR_8 FF06  
                          STR_9 FF93                            _LATA 000F89                            _LATB 000F8A  
                          u2311 0A5E                            _LATC 000F8B                            _LATD 000F8C  
                          u2081 0028                            _LATE 000F8D                            u2091 0046  
                          u2411 0B70                            u2341 0776                            u2430 0BBA  
                          u2361 07B0                            u2291 0A24                            u2435 0BB0  
                          u3094 1416                            u3095 140E                            _PEIE 007F96  
                          u3807 1B2C                            u3727 1EEC                            u3737 1D50  
                          u3747 1D86                            _RCEN 007E2B                            u3757 1EB2  
                          u3767 1EC8                            u3777 1AE0                            u3787 1AEE  
                          u3797 1B1E                            _RSEN 007E29                            _main 16E4  
                  ___ftpack@arg 0080                    i2___altoft@c 0009                            _keys FED3  
                  ___ftpack@exp 0083                            _port 0118                            fsr0h 000FEA  
                          fsr1h 000FE2                            fsr2h 000FDA                            fsr0l 000FE9  
                          indf2 000FDF                            fsr1l 000FE1                            fsr2l 000FD9  
                          btemp 007E                    i2___ftadd@f1 002B                    i2___ftadd@f2 002E  
                          prodh 000FF4                            prodl 000FF3                            start 000E  
                    i2_setAngle 1BB0                   __CFG_IESO$OFF 000000                    i2___ftdiv@f1 000D  
                  i2___ftdiv@f2 0010                    i2___ftdiv@f3 0017                    i2___awtoft@c 0009  
                 __CFG_MCLRE$ON 000000                    ___ftmul@cntr 00A8                    i2___ftmul@f1 001C  
                  i2___ftmul@f2 001F                    ___param_bank 000000                    ___ftmul@sign 00A9  
                  i2___fttol@f1 0037                    ___fttol@exp1 00C4                    ___fttol@lval 00C0  
          __end_ofi2_startTimer 1CB4            __end_of_angleToPulse 0760                           ?_main 0001  
                         _ACKEN 007E2C                           _ACKDT 007E2D                           _EEADR 000FA9  
               __end_of___ftadd 027A                           STR_10 FF2A                           STR_11 FF82  
                         STR_12 FEF3                           STR_13 FFA4                           STR_14 FF3C  
                         STR_15 FF71                           STR_16 FF4E                           STR_17 FFB5  
                         STR_18 FF60                 __end_of___ftdiv 0B5A         ??_servoInterruptService 000A  
               __end_of___ftmul 08BE                           _T0CON 000FD5                           _T1CON 000FCD  
               __end_of___fttol 0C9E                           _T2CON 000FCA                           _T3CON 000FB1  
               __end_of___lwdiv 1AC0                           i2l401 1C6A                           i2l403 1C76  
                         i2l404 1C82                           i2l174 0EDE                           i2l541 0404  
                         i2l543 0408                           i2l296 1584                           i2l544 040C  
                         i2l545 0410                           i2l546 044C                           i2l904 13C6  
                         i2l846 1618                           i2l873 04BC                           i2l884 056C  
                         i2l893 0588                           i2l869 0492                           _TMR0H 000FD7  
                         _TMR1H 000FCF                           _TMR0L 000FD6                           _TMR3H 000FB3  
                         _TMR1L 000FCE                           _TMR3L 000FB2                           _PORTA 000F80  
                         _PORTB 000F81                           _PORTC 000F82                           _PORTD 000F83  
                         _TRISA 000F92                           _TRISB 000F93                           _TRISC 000F94  
                         _TRISD 000F95                           _TRISE 000F96                   __CFG_PWRT$OFF 000000  
                 __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000  
                 __CFG_WRT3$OFF 000000                   _conveyorServo 0120                 __end_of_lcdInst 1ED4  
                __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000          servoInterruptService@i 0014  
                __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000  
                 __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000  
               __end_of_initLCD 1D92                  __CFG_EBTRB$OFF 000000                   ___awtoft@sign 008B  
                 ___ftpack@sign 0084                           _pulse 0100                           _putch 1ED4  
                         pclath 000FFA                           tablat 000FF5                 __end_of_service 0F1A  
               __end_of_runMenu 1E80                 __end_of_runTime 1F22                           status 000FD8  
                 i2___ftdiv@exp 001A              __size_ofi2___ftadd 01AC                  __CFG_PBADEN$ON 000000  
            __size_ofi2___ftdiv 00E6              __size_ofi2___ftmul 00F4              __size_ofi2___fttol 00F4  
          __end_of_digitalWrite 14D8                 __initialization 194C                    __end_of_main 1782  
                  __end_of_keys FEE4                   i2___ftmul@exp 0025                     ?i2___altoft 0009  
                   ?i2___awtoft 0009                     ?i2___ftpack 0001                          ??_main 00EE  
                 ___fttol@sign1 00BF                   __activetblptr 000002            __size_of_digitalRead 00B2  
                        _ADCON0 000FC2                          _ADCON1 000FC1                          _ADCON2 000FC0  
              __end_of___altoft 1820                          _ADRESH 000FC4                          _EEADRH 000FAA  
                        _ADRESL 000FC3                          _EEDATA 000FA8                          _EECON1 000FA6  
                        _EECON2 000FA7                __end_of___awtoft 1DD6                          ?_putch 0001  
              __end_of___ftpack 1026                          _INT0IE 007F94                          _INT0IF 007F91  
                        _INT1IE 007F83                          _INT1IF 007F80                          i2l3103 15E6  
                        i2l3105 1604                          i2l3201 1E2A                          i2l3107 160E  
                        i2l3213 04A0                          i2l3241 051C                          i2l3091 159A  
                        i2l3243 0526                          i2l3235 04FA                          i2l3219 04CA  
                        i2l3307 13A0                          i2l3411 120C                          i2l3403 11E4  
                        i2l3261 05A4                          i2l3253 055A                          i2l3245 0530  
                        i2l3333 126E                          i2l3405 11F0                          u301_41 113A  
                        i2l3095 15A8                          i2l3271 05D4                          i2l3255 0564  
                        i2l3247 0538                          i2l3351 12B0                          i2l3327 1246  
                        i2l3407 11F6                          i2l3601 16A4                          i2l3097 15B2  
                        i2l3185 1B5A                          i2l3281 133A                          i2l3361 12D8  
                        i2l3523 151A                          i2l3515 14DA                          i2l3099 15D0  
                        i2l3187 1B66                          i2l3347 12A0                          i2l3533 155A  
                        i2l3605 16B2                          i2l3621 1C8E                          i2l3357 12C8  
                        i2l3527 153A                          i2l3519 14FA                          i2l3607 16B8  
                        i2l3287 1362                          i2l3375 1156                          i2l3393 11BC  
                        i2l3397 11CC                          i2l3583 1668                          i2l3593 168A  
                        i2l3841 0EA6                          i2l3833 0E6E                          i2l3595 1690  
                        i2l3587 1676                          i2l3819 0E2C                          i2l3589 167C  
                        i2l3781 043E                          i2l3845 0EC2                          i2l3837 0E8A  
                        i2l3829 0E54                          i2l3599 169E                          i2l3775 0386  
                        i2l3767 02CE                          i2l3779 0414                          u270_41 0472  
                        u290_41 1322                          u292_41 134A                          u269_41 045E  
                        u295_41 122E                          u297_41 1256                          _TMR0IE 007F95  
                        _TMR0IF 007F92                          _TMR1IE 007CE8                          _TMR1IF 007CF0  
                        _TMR2IF 007CF1                          _TMR3IE 007D01                          _TMR3IF 007D09  
                        _SSPADD 000FC8                          _TRISC3 007CA3                          _TRISC4 007CA4  
                        _SSPBUF 000FC9                __end_of_dateTime 1FBA                     ?i2_setAngle 005D  
             _angleToPulse$1222 00D5                __end_of_lcdClear 1FEE                     initServo@pi 00EA  
                   initServo@po 00E8                  __CFG_XINST$OFF 000000                __end_of_mainMenu 1F94  
                     ??___ftadd 00B0                  __CFG_STVREN$ON 000000                       ??___ftdiv 0092  
                     ??___ftmul 00A1                       ??___fttol 00BA                       ??___lwdiv 0084  
                i2___altoft@exp 0011                          clear_0 19B2                       ??_lcdInst 0082  
                        _printf 08BE                __end_of_pinSetup 1E16                __end_of_setAngle 194C  
         ___ftmul@f3_as_product 00A5                       ??_initLCD 0084                    __pdataCOMRAM 0076  
             __end_ofi2___ftadd 05FA               __end_ofi2___ftdiv 13F8                  i2___ftadd@exp1 0036  
                i2___ftadd@exp2 0035               __end_ofi2___ftmul 1312                   setAngle@angle 00DE  
             __end_ofi2___fttol 121E                  i2___ftadd@sign 0034                    __mediumconst FED2  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
                 setAngle@timer 00DC                       ??_service 0067                       ??_runMenu 0095  
              __end_of_runStats 1F48                       ??_runTime 0095                  i2___ftdiv@cntr 0016  
                    __accesstop 0080         __end_of__initialization 19BE                      ___altoft@c 0088  
           __size_ofi2___altoft 0078                  i2___ftdiv@sign 001B                      ___ftadd@f1 00AA  
                    ___ftadd@f2 00AD             __size_ofi2___awtoft 0038             __size_ofi2___ftpack 00AE  
                 ___rparam_used 000001                      ___ftdiv@f1 008C                      ___ftdiv@f2 008F  
                    ___ftdiv@f3 0096                      ___awtoft@c 0088                  i2___ftpack@arg 0001  
         __size_ofi2_startTimer 004C                  i2___ftpack@exp 0004                      ___ftmul@f1 009B  
                    ___ftmul@f2 009E                      ___fttol@f1 00B6            __end_of_happynewyear FEF3  
                __pcstackCOMRAM 0001           __size_of_angleToPulse 0166                    __pidataBANK0 1FBA  
                  __pidataBANK1 1FCA                   _cylinderMotor 00F4                  i2___ftmul@cntr 0029  
                  ?_sortBattery 0001                  i2___ftmul@sign 002A                   __end_of_putch 1EFC  
                i2___fttol@exp1 0045                  i2___fttol@lval 0041              __size_of_lcdNibble 0078  
           __size_ofi2_setAngle 0068              i2digitalWrite@port 0001                         ??_putch 0084  
                  i2_startTimer 1C68                      __pbssBANK0 00FE                      __pbssBANK1 0100  
                  _angleToPulse 05FA           __size_of_digitalWrite 00E0              __size_of_initTimer 004A  
            __size_of_initServo 007C         __size_ofi2_angleToPulse 0140                       ?___altoft 0088  
                    _lcdNewline 1FDE                       ?___awtoft 0088                       ?___ftpack 0080  
                       ?_printf 0087      servoInterruptService@flags 000C  __size_of_servoInterruptService 01D4  
 __end_of_servoInterruptService 044E           __end_of_showInterface 112A                       ?_dateTime 0001  
                stopServo@timer 0080               i2startTimer@timer 0001                       ?_lcdClear 0001  
            __size_of_runSelect 0026                angleToPulse@a000 00D8                angleToPulse@a180 00D1  
                  _digitalWrite 13F8                         _SSPCON1 000FC6                         _SSPCON2 000FC5  
                       _SSPSTAT 000FC7                       ?_mainMenu 0001         __size_ofi2_digitalWrite 00AC  
            __size_of_stopServo 004A                       ?_pinSetup 0001                       ?_setAngle 00DC  
             __end_of_lcdNibble 1B38                         __Hparam 0000                         __Lparam 0000  
                       ___ftadd 0012                      _readKeypad 1E80                         ___ftdiv 0A0E  
                       ___ftmul 0760                         ___fttol 0B5A                       ?_runStats 0001  
                       ___lwdiv 1A48                    ??i2___altoft 000D                      ??___altoft 008C  
                       __pcinit 194C                    ??i2___awtoft 000C                    ??i2___ftpack 0006  
                    ??___awtoft 008B                      ??___ftpack 0085         i2___ftmul@f3_as_product 0026  
                       __ramtop 1000                         _lcdInst 1EAA                         __ptext0 16E4  
                       __ptext1 1820                         __ptext2 1CB4                         __ptext3 13F8  
                       __ptext4 1026                         __ptext5 1EFC                         __ptext6 1F22  
                       __ptext7 1F48                         __ptext8 1E4E                         __ptext9 1E80  
               __size_of_printf 0150                   startTimer@val 0082                         _initLCD 1D48  
             __end_of_hexpowers FEEC               __end_of_initTimer 1D48               __end_of_initServo 1A48  
                    ??_dateTime 0095                 i2___altoft@sign 0012                      ??_lcdClear 0084  
                       _service 0008                         _runMenu 1E4E                         _runTime 1EFC  
                __pintcode_body 0DDE            end_of_initialization 19BE                      ??_mainMenu 0095  
           i2angleToPulse@angle 0046                   __Lmediumconst FED2                         int_func 0DDE  
            __end_ofi2___altoft 1BB0                  digitalRead@pin 0003              __end_ofi2___awtoft 1E4E  
            __end_ofi2___ftpack 1638                    ??i2_setAngle 0061                      ??_pinSetup 0080  
                    ??_setAngle 00E0               __end_of_runSelect 1F6E                         printf@c 0094  
                       printf@f 0087                         postdec1 000FE5                         postdec2 000FDD  
                       postinc0 000FEE                         postinc2 000FDE                      ??_runStats 0095  
                 ??_digitalRead 0005                     ?_lcdNewline 0001               __end_of_stopServo 1CFE  
                     _PORTBbits 000F81            __size_of_sortBattery 0098                showInterface@key 0096  
            __end_ofi2_setAngle 1C18             _redirectAngle_OTHER 007C                    _happynewyear FEEC  
            angleToPulse@offset 00CD                       i2___ftadd 044E                       i2___ftdiv 1312  
                     i2___ftmul 121E                       i2___fttol 112A                      _startTimer 1C18  
                   ___ftdiv@exp 0099                 i2___awtoft@sign 000C                 i2___ftpack@sign 0005  
                i2_angleToPulse 0C9E                      _switchFlag 00FE                     ___ftmul@exp 00A4  
                   ?_readKeypad 0001                   __pidataCOMRAM 1FD6                  __end_of_printf 0A0E  
           start_initialization 194C             __end_of_digitalRead 158A                  initServo@angle 00EC  
                initTimer@timer 0080                 i2___fttol@sign1 0040                  initServo@timer 00E6  
                    ?i2___ftadd 002B                      ?i2___ftdiv 000D                      ?i2___ftmul 001C  
                    ?i2___fttol 0037                  i2_digitalWrite 1638             __size_of_lcdNewline 0008  
        __end_ofi2_angleToPulse 0DDE                     __pdataBANK0 00EE                     __pdataBANK1 0120  
              __CFG_LPT1OSC$OFF 000000                        ??_printf 008D               __size_of___altoft 009E  
             __size_of___awtoft 0044               __size_of___ftpack 010C                   __pcstackBANK0 0080  
        __end_ofi2_digitalWrite 16E4               __size_of_dateTime 0026                     ?_startTimer 0080  
             __size_of_lcdClear 0008             __size_of_readKeypad 002A                 i2setAngle@angle 005F  
               i2setAngle@timer 005D               __size_of_mainMenu 0026               i2digitalWrite@pin 0003  
             i2digitalWrite@val 0005                 ?i2_angleToPulse 0046                ___lwdiv@dividend 0080  
             __CFG_CCP2MX$PORTC 000000               __size_of_pinSetup 0040               __size_of_setAngle 0094  
                     __pintcode 0008                   __pmediumconst FED2                       _lcdNibble 1AC0  
                      ?___ftadd 00AA                        ?___ftdiv 008C                        ?___ftmul 009B  
                      ?___fttol 00B6                        ?___lwdiv 0080                     _digitalRead 14D8  
                      ?_lcdInst 0001               __size_of_runStats 0026                        ?_initLCD 0001  
               startTimer@timer 0080                        ?_service 0001                       _hexpowers FEE4  
                      ?_runMenu 0001                       _initTimer 1CFE                       _initServo 19CC  
                      ?_runTime 0001                 ?i2_digitalWrite 0001           _servoInterruptService 027A  
              ___lwdiv@quotient 0084                     ??i2___ftadd 0031                     ??i2___ftdiv 0013  
                   ??i2___ftmul 0022                     ??i2___fttol 003B                  __size_of_putch 0028  
            i2angleToPulse@a000 0059              i2angleToPulse@a180 0052                        _LATDbits 000F8C  
                      i2u303_40 1174                        i2u303_45 116C                        i2u320_44 154A  
                      i2u320_45 1546                        i2u321_44 164E                        i2u321_45 1648  
                      i2u317_44 14EA                        i2u317_45 14E6                        i2u350_40 0292  
                      i2u318_44 150A                        i2u318_45 1506                        i2u351_40 029E  
                      i2u319_44 152A                        i2u319_45 1526                        i2u352_40 02A0  
                      i2u353_40 02AC                        i2u354_40 02AE                        i2u355_40 02CC  
                      i2u347_40 0282                        i2u348_40 0284                        i2u349_40 0290  
        __size_of_showInterface 0104                __CFG_WDTPS$32768 000000                      ?_lcdNibble 0001  
                _padAngle_CATCH 00F8                  _padAngle_CLOSE 00FA                      service@key 0075  
                  ??_lcdNewline 0084             __size_of_startTimer 0050                       _runSelect 1F48  
             angleToPulse@angle 00C5                   lcdNibble@data 0081                      printf@flag 008D  
                 lcdNibble@temp 0080                      printf@prec 0091                       _stopServo 1CB4  
                    runMenu@key 0095                      ?_initTimer 0080                      ?_initServo 00E6  
                     copy_data0 1960                       copy_data1 1980                       copy_data2 19A0  
            __end_of_lcdNewline 1FE6                   readKeypad@key 0080                        __Hrparam 0000  
                      __Lrparam 0000              __CFG_BOREN$SBORDIS 000000                    ??_readKeypad 0080  
                 ??_sortBattery 00E6                __size_of___ftadd 0268                __size_of___ftdiv 014C  
                      ___altoft 1782                __size_of___ftmul 015E                __size_of___fttol 0144  
              __size_of___lwdiv 0078                      ?_runSelect 0001                        ___awtoft 1D92  
                      ___ftpack 0F1A                __size_of_lcdInst 002A                __size_of_initLCD 004A  
                      _dateTime 1F94                      ?_stopServo 0080          ?_servoInterruptService 0001  
                 _showInterface 1026                        _lcdClear 1FE6                 ___lwdiv@divisor 0082  
               ___lwdiv@counter 0086                        __ptext10 1F6E                        __ptext11 1F94  
                      __ptext20 18B8                        __ptext12 08BE                        __ptext21 05FA  
                      __ptext13 1ED4                        __ptext30 1D48                        __ptext22 0B5A  
                      __ptext14 1FDE                        __ptext31 1EAA                        __ptext23 0760  
                      __ptext15 1A48                        __ptext40 1E16                        __ptext32 1AC0  
                      __ptext24 0A0E                        __ptext16 1FE6                        __ptext41 1B38  
                      __ptext25 0012                        __ptext17 1DD6                        __ptext42 158A  
                      __ptext34 1BB0                        __ptext26 1D92                        __ptext18 19CC  
                      __ptext43 027A                        __ptext35 0C9E                        __ptext27 1782  
                      __ptext19 1C18                        __ptext44 1C68                        __ptext36 112A  
                      __ptext28 0F1A                        __ptext45 1638                        __ptext37 121E  
                      __ptext29 1CFE                        __ptext46 14D8                        __ptext38 1312  
                      __ptext39 044E                __size_of_service 0F12                __size_of_runMenu 0032  
               i2startTimer@val 0003                __size_of_runTime 0026                   ?i2_startTimer 0001  
                      _mainMenu 1F6E                        _padServo 00EE              __end_of_readKeypad 1EAA  
                 ?_angleToPulse 00C5                   __size_of_main 009E                        _pinSetup 1DD6  
                      _setAngle 18B8                     ??_lcdNibble 0080                   _padAngle_OPEN 00FC  
                      int$flags 007E                        _runStats 1F22                       printf@idx 008E  
                     printf@val 008F                       putch@data 0084             i2_angleToPulse$1308 0056  
           __end_of_sortBattery 18B8                      _INTCONbits 000FF2                  ?_showInterface 0001  
                 ?_digitalWrite 0080                     ??_initTimer 0082                     ??_initServo 00EE  
          i2angleToPulse@offset 004E                  ??i2_startTimer 0007                ??i2_angleToPulse 004A  
                  ??_startTimer 0086                 digitalRead@port 0001                        intlevel2 0000  
                ??_angleToPulse 00C9                _redirectAngle_AA 0078                _redirectAngle_9V 0076  
                      printf@ap 0092                     lcdInst@data 0083                    ?_digitalRead 0001  
                   ??_runSelect 0095              __end_of_startTimer 1C68                ??i2_digitalWrite 0007  
              digitalWrite@port 0080                     ??_stopServo 0082                  ??_digitalWrite 0086  
               _redirectAngle_C 007A                 digitalWrite@pin 0082                 digitalWrite@val 0084  
