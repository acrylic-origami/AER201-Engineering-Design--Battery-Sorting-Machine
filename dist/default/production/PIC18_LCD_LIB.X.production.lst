

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Mar 13 11:23:30 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    52                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    67                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    68                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    69  0000                     
    70                           ; Version 1.40
    71                           ; Generated 01/12/2016 GMT
    72                           ; 
    73                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC18F4620 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104  0000                     
   105                           	psect	idataCOMRAM
   106  002044                     __pidataCOMRAM:
   107                           	opt stack 0
   108                           
   109                           ;initializer for _redirectAngle_9V
   110  002044  0064               	dw	100
   111                           
   112                           ;initializer for _redirectAngle_AA
   113  002046  003C               	dw	60
   114                           
   115                           ;initializer for _redirectAngle_C
   116  002048  0050               	dw	80
   117                           
   118                           ;initializer for _redirectAngle_OTHER
   119  00204A  0078               	dw	120
   120                           
   121                           	psect	idataBANK0
   122  002028                     __pidataBANK0:
   123                           	opt stack 0
   124                           
   125                           ;initializer for _conveyorServo
   126  002028  0000               	dw	0
   127  00202A  0002               	dw	2
   128  00202C  0001               	dw	1
   129                           
   130                           ;initializer for _cylinderMotor
   131  00202E  0002               	dw	2
   132  002030  0000               	dw	0
   133                           
   134                           ;initializer for _padAngle_CATCH
   135  002032  005A               	dw	90
   136                           
   137                           ;initializer for _padAngle_CLOSE
   138  002034  0046               	dw	70
   139                           
   140                           ;initializer for _padAngle_OPEN
   141  002036  00B4               	dw	180
   142                           
   143                           	psect	idataBANK1
   144  002038                     __pidataBANK1:
   145                           	opt stack 0
   146                           
   147                           ;initializer for _padServo
   148  002038  0001               	dw	1
   149  00203A  0002               	dw	2
   150  00203C  0002               	dw	2
   151                           
   152                           ;initializer for _redirectingServo
   153  00203E  0003               	dw	3
   154  002040  0002               	dw	2
   155  002042  0003               	dw	3
   156                           
   157                           	psect	mediumconst
   158  00FE88                     __pmediumconst:
   159                           	opt stack 0
   160  00FE88  00                 	db	0
   161  00FE89                     _keys:
   162                           	opt stack 0
   163  00FE89  31                 	db	49
   164  00FE8A  32                 	db	50
   165  00FE8B  33                 	db	51
   166  00FE8C  41                 	db	65
   167  00FE8D  34                 	db	52
   168  00FE8E  35                 	db	53
   169  00FE8F  36                 	db	54
   170  00FE90  42                 	db	66
   171  00FE91  37                 	db	55
   172  00FE92  38                 	db	56
   173  00FE93  39                 	db	57
   174  00FE94  43                 	db	67
   175  00FE95  2A                 	db	42
   176  00FE96  30                 	db	48
   177  00FE97  23                 	db	35
   178  00FE98  44                 	db	68
   179  00FE99  00                 	db	0
   180  00FE9A                     __end_of_keys:
   181                           	opt stack 0
   182  00FE9A                     _hexpowers:
   183                           	opt stack 0
   184  00FE9A  0001               	dw	1
   185  00FE9C  0010               	dw	16
   186  00FE9E  0100               	dw	256
   187  00FEA0  1000               	dw	4096
   188  00FEA2                     __end_of_hexpowers:
   189                           	opt stack 0
   190  00FEA2                     _happynewyear:
   191                           	opt stack 0
   192  00FEA2  45                 	db	69
   193  00FEA3  59                 	db	89
   194  00FEA4  23                 	db	35
   195  00FEA5  07                 	db	7
   196  00FEA6  31                 	db	49
   197  00FEA7  12                 	db	18
   198  00FEA8  16                 	db	22
   199  00FEA9                     __end_of_happynewyear:
   200                           	opt stack 0
   201  0000                     _ADCON0	set	4034
   202  0000                     _ADCON1	set	4033
   203  0000                     _ADCON2	set	4032
   204  0000                     _ADRESH	set	4036
   205  0000                     _ADRESL	set	4035
   206  0000                     _EEADR	set	4009
   207  0000                     _EEADRH	set	4010
   208  0000                     _EECON1	set	4006
   209  0000                     _EECON2	set	4007
   210  0000                     _EEDATA	set	4008
   211  0000                     _INTCONbits	set	4082
   212  0000                     _LATA	set	3977
   213  0000                     _LATB	set	3978
   214  0000                     _LATC	set	3979
   215  0000                     _LATD	set	3980
   216  0000                     _LATDbits	set	3980
   217  0000                     _LATE	set	3981
   218  0000                     _PORTA	set	3968
   219  0000                     _PORTB	set	3969
   220  0000                     _PORTBbits	set	3969
   221  0000                     _PORTC	set	3970
   222  0000                     _PORTD	set	3971
   223  0000                     _SSPADD	set	4040
   224  0000                     _SSPBUF	set	4041
   225  0000                     _SSPCON1	set	4038
   226  0000                     _SSPCON2	set	4037
   227  0000                     _SSPSTAT	set	4039
   228  0000                     _T0CON	set	4053
   229  0000                     _T1CON	set	4045
   230  0000                     _T2CON	set	4042
   231  0000                     _T3CON	set	4017
   232  0000                     _TMR0H	set	4055
   233  0000                     _TMR0L	set	4054
   234  0000                     _TMR1H	set	4047
   235  0000                     _TMR1L	set	4046
   236  0000                     _TMR3H	set	4019
   237  0000                     _TMR3L	set	4018
   238  0000                     _TRISA	set	3986
   239  0000                     _TRISB	set	3987
   240  0000                     _TRISC	set	3988
   241  0000                     _TRISD	set	3989
   242  0000                     _TRISE	set	3990
   243  0000                     _ACKDT	set	32301
   244  0000                     _ACKEN	set	32300
   245  0000                     _EEIF	set	32012
   246  0000                     _INT0IE	set	32660
   247  0000                     _INT0IF	set	32657
   248  0000                     _INT1IF	set	32640
   249  0000                     _PEIE	set	32662
   250  0000                     _PEN	set	32298
   251  0000                     _RCEN	set	32299
   252  0000                     _RSEN	set	32297
   253  0000                     _SEN	set	32296
   254  0000                     _TMR0IE	set	32661
   255  0000                     _TMR0IF	set	32658
   256  0000                     _TMR1IE	set	31976
   257  0000                     _TMR1IF	set	31984
   258  0000                     _TMR2IF	set	31985
   259  0000                     _TMR3IE	set	32001
   260  0000                     _TMR3IF	set	32009
   261  0000                     _TRISC3	set	31907
   262  0000                     _TRISC4	set	31908
   263  00FEA9                     STR_7:
   264  00FEA9  63                 	db	99	;'c'
   265  00FEAA  6F                 	db	111	;'o'
   266  00FEAB  6E                 	db	110	;'n'
   267  00FEAC  76                 	db	118	;'v'
   268  00FEAD  65                 	db	101	;'e'
   269  00FEAE  79                 	db	121	;'y'
   270  00FEAF  6F                 	db	111	;'o'
   271  00FEB0  72                 	db	114	;'r'
   272  00FEB1  20                 	db	32
   273  00FEB2  26                 	db	38
   274  00FEB3  20                 	db	32
   275  00FEB4  63                 	db	99	;'c'
   276  00FEB5  79                 	db	121	;'y'
   277  00FEB6  6C                 	db	108	;'l'
   278  00FEB7  69                 	db	105	;'i'
   279  00FEB8  6E                 	db	110	;'n'
   280  00FEB9  64                 	db	100	;'d'
   281  00FEBA  65                 	db	101	;'e'
   282  00FEBB  72                 	db	114	;'r'
   283  00FEBC  20                 	db	32
   284  00FEBD  6F                 	db	111	;'o'
   285  00FEBE  6E                 	db	110	;'n'
   286  00FEBF  3F                 	db	63	;'?'
   287  00FEC0  00                 	db	0
   288  00FEC1                     STR_16:
   289  00FEC1  25                 	db	37
   290  00FEC2  63                 	db	99	;'c'
   291  00FEC3  29                 	db	41
   292  00FEC4  20                 	db	32
   293  00FEC5  74                 	db	116	;'t'
   294  00FEC6  69                 	db	105	;'i'
   295  00FEC7  6D                 	db	109	;'m'
   296  00FEC8  65                 	db	101	;'e'
   297  00FEC9  20                 	db	32
   298  00FECA  20                 	db	32
   299  00FECB  3C                 	db	60	;'<'
   300  00FECC  41                 	db	65	;'A'
   301  00FECD  20                 	db	32
   302  00FECE  20                 	db	32
   303  00FECF  20                 	db	32
   304  00FED0  20                 	db	32
   305  00FED1  20                 	db	32
   306  00FED2  0A                 	db	10
   307  00FED3  00                 	db	0
   308  00FED4                     STR_12:
   309  00FED4  73                 	db	115	;'s'
   310  00FED5  74                 	db	116	;'t'
   311  00FED6  61                 	db	97	;'a'
   312  00FED7  72                 	db	114	;'r'
   313  00FED8  74                 	db	116	;'t'
   314  00FED9  20                 	db	32
   315  00FEDA  20                 	db	32
   316  00FEDB  20                 	db	32
   317  00FEDC  3C                 	db	60	;'<'
   318  00FEDD  42                 	db	66	;'B'
   319  00FEDE  20                 	db	32
   320  00FEDF  20                 	db	32
   321  00FEE0  20                 	db	32
   322  00FEE1  20                 	db	32
   323  00FEE2  20                 	db	32
   324  00FEE3  20                 	db	32
   325  00FEE4  0A                 	db	10
   326  00FEE5  00                 	db	0
   327  00FEE6                     STR_10:
   328  00FEE6  20                 	db	32
   329  00FEE7  20                 	db	32
   330  00FEE8  68                 	db	104	;'h'
   331  00FEE9  68                 	db	104	;'h'
   332  00FEEA  3A                 	db	58	;':'
   333  00FEEB  6D                 	db	109	;'m'
   334  00FEEC  6D                 	db	109	;'m'
   335  00FEED  3A                 	db	58	;':'
   336  00FEEE  73                 	db	115	;'s'
   337  00FEEF  73                 	db	115	;'s'
   338  00FEF0  20                 	db	32
   339  00FEF1  20                 	db	32
   340  00FEF2  20                 	db	32
   341  00FEF3  20                 	db	32
   342  00FEF4  20                 	db	32
   343  00FEF5  20                 	db	32
   344  00FEF6  0A                 	db	10
   345  00FEF7  00                 	db	0
   346  00FEF8                     STR_14:
   347  00FEF8  73                 	db	115	;'s'
   348  00FEF9  65                 	db	101	;'e'
   349  00FEFA  6C                 	db	108	;'l'
   350  00FEFB  65                 	db	101	;'e'
   351  00FEFC  63                 	db	99	;'c'
   352  00FEFD  74                 	db	116	;'t'
   353  00FEFE  20                 	db	32
   354  00FEFF  72                 	db	114	;'r'
   355  00FF00  75                 	db	117	;'u'
   356  00FF01  6E                 	db	110	;'n'
   357  00FF02  3A                 	db	58	;':'
   358  00FF03  20                 	db	32
   359  00FF04  20                 	db	32
   360  00FF05  20                 	db	32
   361  00FF06  20                 	db	32
   362  00FF07  20                 	db	32
   363  00FF08  0A                 	db	10
   364  00FF09  00                 	db	0
   365  00FF0A                     STR_18:
   366  00FF0A  74                 	db	116	;'t'
   367  00FF0B  69                 	db	105	;'i'
   368  00FF0C  6D                 	db	109	;'m'
   369  00FF0D  65                 	db	101	;'e'
   370  00FF0E  3A                 	db	58	;':'
   371  00FF0F  20                 	db	32
   372  00FF10  6E                 	db	110	;'n'
   373  00FF11  6E                 	db	110	;'n'
   374  00FF12  6E                 	db	110	;'n'
   375  00FF13  20                 	db	32
   376  00FF14  73                 	db	115	;'s'
   377  00FF15  65                 	db	101	;'e'
   378  00FF16  63                 	db	99	;'c'
   379  00FF17  20                 	db	32
   380  00FF18  20                 	db	32
   381  00FF19  20                 	db	32
   382  00FF1A  0A                 	db	10
   383  00FF1B  00                 	db	0
   384  00FF1C                     STR_20:
   385  00FF1C  5B                 	db	91	;'['
   386  00FF1D  41                 	db	65	;'A'
   387  00FF1E  41                 	db	65	;'A'
   388  00FF1F  2C                 	db	44
   389  00FF20  39                 	db	57	;'9'
   390  00FF21  56                 	db	86	;'V'
   391  00FF22  2C                 	db	44
   392  00FF23  43                 	db	67	;'C'
   393  00FF24  2C                 	db	44
   394  00FF25  6F                 	db	111	;'o'
   395  00FF26  74                 	db	116	;'t'
   396  00FF27  68                 	db	104	;'h'
   397  00FF28  65                 	db	101	;'e'
   398  00FF29  72                 	db	114	;'r'
   399  00FF2A  5D                 	db	93	;']'
   400  00FF2B  20                 	db	32
   401  00FF2C  0A                 	db	10
   402  00FF2D  00                 	db	0
   403  00FF2E                     STR_22:
   404  00FF2E  30                 	db	48	;'0'
   405  00FF2F  31                 	db	49	;'1'
   406  00FF30  32                 	db	50	;'2'
   407  00FF31  33                 	db	51	;'3'
   408  00FF32  34                 	db	52	;'4'
   409  00FF33  35                 	db	53	;'5'
   410  00FF34  36                 	db	54	;'6'
   411  00FF35  37                 	db	55	;'7'
   412  00FF36  38                 	db	56	;'8'
   413  00FF37  39                 	db	57	;'9'
   414  00FF38  61                 	db	97	;'a'
   415  00FF39  62                 	db	98	;'b'
   416  00FF3A  63                 	db	99	;'c'
   417  00FF3B  64                 	db	100	;'d'
   418  00FF3C  65                 	db	101	;'e'
   419  00FF3D  66                 	db	102	;'f'
   420  00FF3E  00                 	db	0
   421  00FF3F                     STR_19:
   422  00FF3F  20                 	db	32
   423  00FF40  20                 	db	32
   424  00FF41  20                 	db	32
   425  00FF42  20                 	db	32
   426  00FF43  20                 	db	32
   427  00FF44  20                 	db	32
   428  00FF45  20                 	db	32
   429  00FF46  20                 	db	32
   430  00FF47  20                 	db	32
   431  00FF48  20                 	db	32
   432  00FF49  20                 	db	32
   433  00FF4A  20                 	db	32
   434  00FF4B  20                 	db	32
   435  00FF4C  20                 	db	32
   436  00FF4D  2A                 	db	42
   437  00FF4E  3E                 	db	62	;'>'
   438  00FF4F  00                 	db	0
   439  00FF50                     STR_15:
   440  00FF50  5B                 	db	91	;'['
   441  00FF51  31                 	db	49	;'1'
   442  00FF52  2C                 	db	44
   443  00FF53  32                 	db	50	;'2'
   444  00FF54  2C                 	db	44
   445  00FF55  33                 	db	51	;'3'
   446  00FF56  2C                 	db	44
   447  00FF57  34                 	db	52	;'4'
   448  00FF58  5D                 	db	93	;']'
   449  00FF59  20                 	db	32
   450  00FF5A  20                 	db	32
   451  00FF5B  20                 	db	32
   452  00FF5C  20                 	db	32
   453  00FF5D  20                 	db	32
   454  00FF5E  2A                 	db	42
   455  00FF5F  3E                 	db	62	;'>'
   456  00FF60  00                 	db	0
   457  00FF61                     STR_13:
   458  00FF61  68                 	db	104	;'h'
   459  00FF62  69                 	db	105	;'i'
   460  00FF63  73                 	db	115	;'s'
   461  00FF64  74                 	db	116	;'t'
   462  00FF65  6F                 	db	111	;'o'
   463  00FF66  72                 	db	114	;'r'
   464  00FF67  79                 	db	121	;'y'
   465  00FF68  20                 	db	32
   466  00FF69  3C                 	db	60	;'<'
   467  00FF6A  43                 	db	67	;'C'
   468  00FF6B  20                 	db	32
   469  00FF6C  20                 	db	32
   470  00FF6D  20                 	db	32
   471  00FF6E  20                 	db	32
   472  00FF6F  2A                 	db	42
   473  00FF70  3E                 	db	62	;'>'
   474  00FF71  00                 	db	0
   475  00FF72                     STR_17:
   476  00FF72  20                 	db	32
   477  00FF73  20                 	db	32
   478  00FF74  20                 	db	32
   479  00FF75  73                 	db	115	;'s'
   480  00FF76  74                 	db	116	;'t'
   481  00FF77  61                 	db	97	;'a'
   482  00FF78  74                 	db	116	;'t'
   483  00FF79  73                 	db	115	;'s'
   484  00FF7A  20                 	db	32
   485  00FF7B  3C                 	db	60	;'<'
   486  00FF7C  42                 	db	66	;'B'
   487  00FF7D  20                 	db	32
   488  00FF7E  20                 	db	32
   489  00FF7F  20                 	db	32
   490  00FF80  2A                 	db	42
   491  00FF81  3E                 	db	62	;'>'
   492  00FF82  00                 	db	0
   493  00FF83                     STR_21:
   494  00FF83  5B                 	db	91	;'['
   495  00FF84  6E                 	db	110	;'n'
   496  00FF85  6E                 	db	110	;'n'
   497  00FF86  2C                 	db	44
   498  00FF87  6E                 	db	110	;'n'
   499  00FF88  2C                 	db	44
   500  00FF89  6E                 	db	110	;'n'
   501  00FF8A  2C                 	db	44
   502  00FF8B  6E                 	db	110	;'n'
   503  00FF8C  6E                 	db	110	;'n'
   504  00FF8D  5D                 	db	93	;']'
   505  00FF8E  20                 	db	32
   506  00FF8F  20                 	db	32
   507  00FF90  20                 	db	32
   508  00FF91  2A                 	db	42
   509  00FF92  3E                 	db	62	;'>'
   510  00FF93  00                 	db	0
   511  00FF94                     STR_11:
   512  00FF94  20                 	db	32
   513  00FF95  20                 	db	32
   514  00FF96  6D                 	db	109	;'m'
   515  00FF97  6D                 	db	109	;'m'
   516  00FF98  3A                 	db	58	;':'
   517  00FF99  64                 	db	100	;'d'
   518  00FF9A  64                 	db	100	;'d'
   519  00FF9B  3A                 	db	58	;':'
   520  00FF9C  79                 	db	121	;'y'
   521  00FF9D  79                 	db	121	;'y'
   522  00FF9E  20                 	db	32
   523  00FF9F  20                 	db	32
   524  00FFA0  20                 	db	32
   525  00FFA1  20                 	db	32
   526  00FFA2  41                 	db	65	;'A'
   527  00FFA3  3E                 	db	62	;'>'
   528  00FFA4  00                 	db	0
   529  00FFA5                     STR_5:
   530  00FFA5  72                 	db	114	;'r'
   531  00FFA6  65                 	db	101	;'e'
   532  00FFA7  6C                 	db	108	;'l'
   533  00FFA8  65                 	db	101	;'e'
   534  00FFA9  61                 	db	97	;'a'
   535  00FFAA  73                 	db	115	;'s'
   536  00FFAB  65                 	db	101	;'e'
   537  00FFAC  20                 	db	32
   538  00FFAD  62                 	db	98	;'b'
   539  00FFAE  61                 	db	97	;'a'
   540  00FFAF  74                 	db	116	;'t'
   541  00FFB0  74                 	db	116	;'t'
   542  00FFB1  65                 	db	101	;'e'
   543  00FFB2  72                 	db	114	;'r'
   544  00FFB3  79                 	db	121	;'y'
   545  00FFB4  3F                 	db	63	;'?'
   546  00FFB5  00                 	db	0
   547  00FFB6                     STR_6:
   548  00FFB6  72                 	db	114	;'r'
   549  00FFB7  65                 	db	101	;'e'
   550  00FFB8  73                 	db	115	;'s'
   551  00FFB9  65                 	db	101	;'e'
   552  00FFBA  74                 	db	116	;'t'
   553  00FFBB  20                 	db	32
   554  00FFBC  74                 	db	116	;'t'
   555  00FFBD  68                 	db	104	;'h'
   556  00FFBE  65                 	db	101	;'e'
   557  00FFBF  20                 	db	32
   558  00FFC0  70                 	db	112	;'p'
   559  00FFC1  61                 	db	97	;'a'
   560  00FFC2  64                 	db	100	;'d'
   561  00FFC3  3F                 	db	63	;'?'
   562  00FFC4  00                 	db	0
   563  00FFC5                     STR_4:
   564  00FFC5  72                 	db	114	;'r'
   565  00FFC6  65                 	db	101	;'e'
   566  00FFC7  61                 	db	97	;'a'
   567  00FFC8  64                 	db	100	;'d'
   568  00FFC9  20                 	db	32
   569  00FFCA  76                 	db	118	;'v'
   570  00FFCB  6F                 	db	111	;'o'
   571  00FFCC  6C                 	db	108	;'l'
   572  00FFCD  74                 	db	116	;'t'
   573  00FFCE  61                 	db	97	;'a'
   574  00FFCF  67                 	db	103	;'g'
   575  00FFD0  65                 	db	101	;'e'
   576  00FFD1  3F                 	db	63	;'?'
   577  00FFD2  00                 	db	0
   578  00FFD3                     STR_2:
   579  00FFD3  69                 	db	105	;'i'
   580  00FFD4  6E                 	db	110	;'n'
   581  00FFD5  74                 	db	116	;'t'
   582  00FFD6  65                 	db	101	;'e'
   583  00FFD7  72                 	db	114	;'r'
   584  00FFD8  72                 	db	114	;'r'
   585  00FFD9  75                 	db	117	;'u'
   586  00FFDA  70                 	db	112	;'p'
   587  00FFDB  74                 	db	116	;'t'
   588  00FFDC  21                 	db	33
   589  00FFDD  00                 	db	0
   590  00FFDE  5B                 	db	91	;'['
   591  00FFDF  25                 	db	37
   592  00FFE0  78                 	db	120	;'x'
   593  00FFE1  20                 	db	32
   594  00FFE2  25                 	db	37
   595  00FFE3  78                 	db	120	;'x'
   596  00FFE4  5D                 	db	93	;']'
   597  00FFE5  0A                 	db	10
   598  00FFE6  00                 	db	0
   599  00FFE7  74                 	db	116	;'t'
   600  00FFE8  31                 	db	49	;'1'
   601  00FFE9  3A                 	db	58	;':'
   602  00FFEA  20                 	db	32
   603  00FFEB  25                 	db	37
   604  00FFEC  78                 	db	120	;'x'
   605  00FFED  20                 	db	32
   606  00FFEE  00                 	db	0
   607  00FFEF                     STR_1:
   608  00FFEF  72                 	db	114	;'r'
   609  00FFF0  75                 	db	117	;'u'
   610  00FFF1  6E                 	db	110	;'n'
   611  00FFF2  6E                 	db	110	;'n'
   612  00FFF3  69                 	db	105	;'i'
   613  00FFF4  6E                 	db	110	;'n'
   614  00FFF5  67                 	db	103	;'g'
   615  00FFF6  00                 	db	0
   616  00FFF7                     STR_3:
   617  00FFF7  63                 	db	99	;'c'
   618  00FFF8  6C                 	db	108	;'l'
   619  00FFF9  6F                 	db	111	;'o'
   620  00FFFA  73                 	db	115	;'s'
   621  00FFFB  65                 	db	101	;'e'
   622  00FFFC  3F                 	db	63	;'?'
   623  00FFFD  00                 	db	0
   624                           
   625                           ; #config settings
   626  00FFFE  00                 	db	0	; dummy byte at the end
   627  0000                     
   628                           	psect	cinit
   629  0019A6                     __pcinit:
   630                           	opt stack 0
   631  0019A6                     start_initialization:
   632                           	opt stack 0
   633  0019A6                     __initialization:
   634                           	opt stack 0
   635                           
   636                           ; Initialize objects allocated to BANK1 (12 bytes)
   637                           ; load TBLPTR registers with __pidataBANK1
   638  0019A6  0E38               	movlw	low __pidataBANK1
   639  0019A8  6EF6               	movwf	tblptrl,c
   640  0019AA  0E20               	movlw	high __pidataBANK1
   641  0019AC  6EF7               	movwf	tblptrh,c
   642  0019AE  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   643  0019B0  6EF8               	movwf	tblptru,c
   644  0019B2  EE01  F020         	lfsr	0,__pdataBANK1
   645  0019B6  EE10 F00C          	lfsr	1,12
   646  0019BA                     copy_data0:
   647  0019BA  0009               	tblrd		*+
   648  0019BC  CFF5 FFEE          	movff	tablat,postinc0
   649  0019C0  50E5               	movf	postdec1,w,c
   650  0019C2  50E1               	movf	fsr1l,w,c
   651  0019C4  E1FA               	bnz	copy_data0
   652                           
   653                           ; Initialize objects allocated to BANK0 (16 bytes)
   654                           ; load TBLPTR registers with __pidataBANK0
   655  0019C6  0E28               	movlw	low __pidataBANK0
   656  0019C8  6EF6               	movwf	tblptrl,c
   657  0019CA  0E20               	movlw	high __pidataBANK0
   658  0019CC  6EF7               	movwf	tblptrh,c
   659  0019CE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   660  0019D0  6EF8               	movwf	tblptru,c
   661  0019D2  EE00  F0EE         	lfsr	0,__pdataBANK0
   662  0019D6  EE10 F010          	lfsr	1,16
   663  0019DA                     copy_data1:
   664  0019DA  0009               	tblrd		*+
   665  0019DC  CFF5 FFEE          	movff	tablat,postinc0
   666  0019E0  50E5               	movf	postdec1,w,c
   667  0019E2  50E1               	movf	fsr1l,w,c
   668  0019E4  E1FA               	bnz	copy_data1
   669                           
   670                           ; Initialize objects allocated to COMRAM (8 bytes)
   671                           ; load TBLPTR registers with __pidataCOMRAM
   672  0019E6  0E44               	movlw	low __pidataCOMRAM
   673  0019E8  6EF6               	movwf	tblptrl,c
   674  0019EA  0E20               	movlw	high __pidataCOMRAM
   675  0019EC  6EF7               	movwf	tblptrh,c
   676  0019EE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   677  0019F0  6EF8               	movwf	tblptru,c
   678  0019F2  EE00  F076         	lfsr	0,__pdataCOMRAM
   679  0019F6  EE10 F008          	lfsr	1,8
   680  0019FA                     copy_data2:
   681  0019FA  0009               	tblrd		*+
   682  0019FC  CFF5 FFEE          	movff	tablat,postinc0
   683  001A00  50E5               	movf	postdec1,w,c
   684  001A02  50E1               	movf	fsr1l,w,c
   685  001A04  E1FA               	bnz	copy_data2
   686                           
   687                           ; Clear objects allocated to BANK1 (32 bytes)
   688  001A06  EE01  F000         	lfsr	0,__pbssBANK1
   689  001A0A  0E20               	movlw	32
   690  001A0C                     clear_0:
   691  001A0C  6AEE               	clrf	postinc0,c
   692  001A0E  06E8               	decf	wreg,f,c
   693  001A10  E1FD               	bnz	clear_0
   694                           
   695                           ; Clear objects allocated to BANK0 (2 bytes)
   696  001A12  0100               	movlb	0
   697  001A14  6BFF               	clrf	(__pbssBANK0+1)& (0+255),b
   698  001A16  6BFE               	clrf	__pbssBANK0& (0+255),b
   699  001A18                     end_of_initialization:
   700                           	opt stack 0
   701  001A18                     __end_of__initialization:
   702                           	opt stack 0
   703  001A18  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   704  001A1A  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   705  001A1C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   706  001A1E  6EF8               	movwf	tblptru,c
   707  001A20  0100               	movlb	0
   708  001A22  EFDB  F00A         	goto	_main	;jump to C main() function
   709                           tblptru	equ	0xFF8
   710                           tblptrh	equ	0xFF7
   711                           tblptrl	equ	0xFF6
   712                           tablat	equ	0xFF5
   713                           postinc0	equ	0xFEE
   714                           wreg	equ	0xFE8
   715                           postdec1	equ	0xFE5
   716                           fsr1l	equ	0xFE1
   717                           
   718                           	psect	dataCOMRAM
   719  000076                     __pdataCOMRAM:
   720                           	opt stack 0
   721  000076                     _redirectAngle_9V:
   722                           	opt stack 0
   723  000076                     	ds	2
   724  000078                     _redirectAngle_AA:
   725                           	opt stack 0
   726  000078                     	ds	2
   727  00007A                     _redirectAngle_C:
   728                           	opt stack 0
   729  00007A                     	ds	2
   730  00007C                     _redirectAngle_OTHER:
   731                           	opt stack 0
   732  00007C                     	ds	2
   733                           tblptru	equ	0xFF8
   734                           tblptrh	equ	0xFF7
   735                           tblptrl	equ	0xFF6
   736                           tablat	equ	0xFF5
   737                           postinc0	equ	0xFEE
   738                           wreg	equ	0xFE8
   739                           postdec1	equ	0xFE5
   740                           fsr1l	equ	0xFE1
   741                           
   742                           	psect	bssBANK0
   743  0000FE                     __pbssBANK0:
   744                           	opt stack 0
   745  0000FE                     _switchFlag:
   746                           	opt stack 0
   747  0000FE                     	ds	2
   748                           tblptru	equ	0xFF8
   749                           tblptrh	equ	0xFF7
   750                           tblptrl	equ	0xFF6
   751                           tablat	equ	0xFF5
   752                           postinc0	equ	0xFEE
   753                           wreg	equ	0xFE8
   754                           postdec1	equ	0xFE5
   755                           fsr1l	equ	0xFE1
   756                           
   757                           	psect	dataBANK0
   758  0000EE                     __pdataBANK0:
   759                           	opt stack 0
   760  0000EE                     _conveyorServo:
   761                           	opt stack 0
   762  0000EE                     	ds	6
   763  0000F4                     _cylinderMotor:
   764                           	opt stack 0
   765  0000F4                     	ds	4
   766  0000F8                     _padAngle_CATCH:
   767                           	opt stack 0
   768  0000F8                     	ds	2
   769  0000FA                     _padAngle_CLOSE:
   770                           	opt stack 0
   771  0000FA                     	ds	2
   772  0000FC                     _padAngle_OPEN:
   773                           	opt stack 0
   774  0000FC                     	ds	2
   775                           tblptru	equ	0xFF8
   776                           tblptrh	equ	0xFF7
   777                           tblptrl	equ	0xFF6
   778                           tablat	equ	0xFF5
   779                           postinc0	equ	0xFEE
   780                           wreg	equ	0xFE8
   781                           postdec1	equ	0xFE5
   782                           fsr1l	equ	0xFE1
   783                           
   784                           	psect	bssBANK1
   785  000100                     __pbssBANK1:
   786                           	opt stack 0
   787  000100                     _pulse:
   788                           	opt stack 0
   789  000100                     	ds	16
   790  000110                     _pin:
   791                           	opt stack 0
   792  000110                     	ds	8
   793  000118                     _port:
   794                           	opt stack 0
   795  000118                     	ds	8
   796                           tblptru	equ	0xFF8
   797                           tblptrh	equ	0xFF7
   798                           tblptrl	equ	0xFF6
   799                           tablat	equ	0xFF5
   800                           postinc0	equ	0xFEE
   801                           wreg	equ	0xFE8
   802                           postdec1	equ	0xFE5
   803                           fsr1l	equ	0xFE1
   804                           
   805                           	psect	dataBANK1
   806  000120                     __pdataBANK1:
   807                           	opt stack 0
   808  000120                     _padServo:
   809                           	opt stack 0
   810  000120                     	ds	6
   811  000126                     _redirectingServo:
   812                           	opt stack 0
   813  000126                     	ds	6
   814                           tblptru	equ	0xFF8
   815                           tblptrh	equ	0xFF7
   816                           tblptrl	equ	0xFF6
   817                           tablat	equ	0xFF5
   818                           postinc0	equ	0xFEE
   819                           wreg	equ	0xFE8
   820                           postdec1	equ	0xFE5
   821                           fsr1l	equ	0xFE1
   822                           
   823                           	psect	cstackBANK0
   824  000080                     __pcstackBANK0:
   825                           	opt stack 0
   826  000080                     ?___lwdiv:
   827                           	opt stack 0
   828  000080                     ?___ftpack:
   829                           	opt stack 0
   830  000080                     lcdNibble@temp:
   831                           	opt stack 0
   832  000080                     readKeypad@key:
   833                           	opt stack 0
   834  000080                     digitalWrite@port:
   835                           	opt stack 0
   836  000080                     initTimer@timer:
   837                           	opt stack 0
   838  000080                     startTimer@timer:
   839                           	opt stack 0
   840  000080                     stopServo@timer:
   841                           	opt stack 0
   842  000080                     ___lwdiv@dividend:
   843                           	opt stack 0
   844  000080                     ___ftpack@arg:
   845                           	opt stack 0
   846                           
   847                           ; 3 bytes @ 0x0
   848  000080                     	ds	1
   849  000081                     lcdNibble@data:
   850                           	opt stack 0
   851                           
   852                           ; 1 bytes @ 0x1
   853  000081                     	ds	1
   854  000082                     ??_stopServo:
   855  000082                     ??_lcdInst:
   856  000082                     ??_initTimer:
   857  000082                     digitalWrite@pin:
   858                           	opt stack 0
   859  000082                     ___lwdiv@divisor:
   860                           	opt stack 0
   861  000082                     startTimer@val:
   862                           	opt stack 0
   863                           
   864                           ; 4 bytes @ 0x2
   865  000082                     	ds	1
   866  000083                     lcdInst@data:
   867                           	opt stack 0
   868  000083                     ___ftpack@exp:
   869                           	opt stack 0
   870                           
   871                           ; 1 bytes @ 0x3
   872  000083                     	ds	1
   873  000084                     ??_initLCD:
   874  000084                     putch@data:
   875                           	opt stack 0
   876  000084                     ___ftpack@sign:
   877                           	opt stack 0
   878  000084                     digitalWrite@val:
   879                           	opt stack 0
   880  000084                     ___lwdiv@quotient:
   881                           	opt stack 0
   882                           
   883                           ; 2 bytes @ 0x4
   884  000084                     	ds	1
   885  000085                     ??___ftpack:
   886                           
   887                           ; 1 bytes @ 0x5
   888  000085                     	ds	1
   889  000086                     ??_digitalWrite:
   890  000086                     ??_startTimer:
   891  000086                     ___lwdiv@counter:
   892                           	opt stack 0
   893                           
   894                           ; 1 bytes @ 0x6
   895  000086                     	ds	1
   896  000087                     ?_printf:
   897                           	opt stack 0
   898  000087                     printf@f:
   899                           	opt stack 0
   900                           
   901                           ; 2 bytes @ 0x7
   902  000087                     	ds	1
   903  000088                     ?___altoft:
   904                           	opt stack 0
   905  000088                     ?___awtoft:
   906                           	opt stack 0
   907  000088                     ___awtoft@c:
   908                           	opt stack 0
   909  000088                     ___altoft@c:
   910                           	opt stack 0
   911                           
   912                           ; 4 bytes @ 0x8
   913  000088                     	ds	3
   914  00008B                     ___awtoft@sign:
   915                           	opt stack 0
   916                           
   917                           ; 1 bytes @ 0xB
   918  00008B                     	ds	1
   919  00008C                     ??___altoft:
   920  00008C                     ?___ftdiv:
   921                           	opt stack 0
   922  00008C                     ___ftdiv@f1:
   923                           	opt stack 0
   924                           
   925                           ; 3 bytes @ 0xC
   926  00008C                     	ds	1
   927  00008D                     printf@flag:
   928                           	opt stack 0
   929                           
   930                           ; 1 bytes @ 0xD
   931  00008D                     	ds	1
   932  00008E                     printf@idx:
   933                           	opt stack 0
   934                           
   935                           ; 1 bytes @ 0xE
   936  00008E                     	ds	1
   937  00008F                     printf@val:
   938                           	opt stack 0
   939  00008F                     ___ftdiv@f2:
   940                           	opt stack 0
   941                           
   942                           ; 3 bytes @ 0xF
   943  00008F                     	ds	1
   944  000090                     ___altoft@exp:
   945                           	opt stack 0
   946                           
   947                           ; 1 bytes @ 0x10
   948  000090                     	ds	1
   949  000091                     printf@prec:
   950                           	opt stack 0
   951  000091                     ___altoft@sign:
   952                           	opt stack 0
   953                           
   954                           ; 1 bytes @ 0x11
   955  000091                     	ds	1
   956  000092                     ??___ftdiv:
   957  000092                     printf@ap:
   958                           	opt stack 0
   959                           
   960                           ; 2 bytes @ 0x12
   961  000092                     	ds	2
   962  000094                     printf@c:
   963                           	opt stack 0
   964                           
   965                           ; 1 bytes @ 0x14
   966  000094                     	ds	1
   967  000095                     runMenu@key:
   968                           	opt stack 0
   969  000095                     ___ftdiv@cntr:
   970                           	opt stack 0
   971  000095                     pause@message:
   972                           	opt stack 0
   973                           
   974                           ; 2 bytes @ 0x15
   975  000095                     	ds	1
   976  000096                     showInterface@key:
   977                           	opt stack 0
   978  000096                     ___ftdiv@f3:
   979                           	opt stack 0
   980                           
   981                           ; 3 bytes @ 0x16
   982  000096                     	ds	1
   983  000097                     
   984                           ; 1 bytes @ 0x17
   985  000097                     	ds	2
   986  000099                     ___ftdiv@exp:
   987                           	opt stack 0
   988                           
   989                           ; 1 bytes @ 0x19
   990  000099                     	ds	1
   991  00009A                     ___ftdiv@sign:
   992                           	opt stack 0
   993                           
   994                           ; 1 bytes @ 0x1A
   995  00009A                     	ds	1
   996  00009B                     ?___ftmul:
   997                           	opt stack 0
   998  00009B                     ___ftmul@f1:
   999                           	opt stack 0
  1000                           
  1001                           ; 3 bytes @ 0x1B
  1002  00009B                     	ds	3
  1003  00009E                     ___ftmul@f2:
  1004                           	opt stack 0
  1005                           
  1006                           ; 3 bytes @ 0x1E
  1007  00009E                     	ds	3
  1008  0000A1                     ??___ftmul:
  1009                           
  1010                           ; 1 bytes @ 0x21
  1011  0000A1                     	ds	3
  1012  0000A4                     ___ftmul@exp:
  1013                           	opt stack 0
  1014                           
  1015                           ; 1 bytes @ 0x24
  1016  0000A4                     	ds	1
  1017  0000A5                     ___ftmul@f3_as_product:
  1018                           	opt stack 0
  1019                           
  1020                           ; 3 bytes @ 0x25
  1021  0000A5                     	ds	3
  1022  0000A8                     ___ftmul@cntr:
  1023                           	opt stack 0
  1024                           
  1025                           ; 1 bytes @ 0x28
  1026  0000A8                     	ds	1
  1027  0000A9                     ___ftmul@sign:
  1028                           	opt stack 0
  1029                           
  1030                           ; 1 bytes @ 0x29
  1031  0000A9                     	ds	1
  1032  0000AA                     ?___ftadd:
  1033                           	opt stack 0
  1034  0000AA                     ___ftadd@f1:
  1035                           	opt stack 0
  1036                           
  1037                           ; 3 bytes @ 0x2A
  1038  0000AA                     	ds	3
  1039  0000AD                     ___ftadd@f2:
  1040                           	opt stack 0
  1041                           
  1042                           ; 3 bytes @ 0x2D
  1043  0000AD                     	ds	3
  1044  0000B0                     ??___ftadd:
  1045                           
  1046                           ; 1 bytes @ 0x30
  1047  0000B0                     	ds	3
  1048  0000B3                     ___ftadd@sign:
  1049                           	opt stack 0
  1050                           
  1051                           ; 1 bytes @ 0x33
  1052  0000B3                     	ds	1
  1053  0000B4                     ___ftadd@exp2:
  1054                           	opt stack 0
  1055                           
  1056                           ; 1 bytes @ 0x34
  1057  0000B4                     	ds	1
  1058  0000B5                     ___ftadd@exp1:
  1059                           	opt stack 0
  1060                           
  1061                           ; 1 bytes @ 0x35
  1062  0000B5                     	ds	1
  1063  0000B6                     ?___fttol:
  1064                           	opt stack 0
  1065  0000B6                     ___fttol@f1:
  1066                           	opt stack 0
  1067                           
  1068                           ; 3 bytes @ 0x36
  1069  0000B6                     	ds	4
  1070  0000BA                     ??___fttol:
  1071                           
  1072                           ; 1 bytes @ 0x3A
  1073  0000BA                     	ds	5
  1074  0000BF                     ___fttol@sign1:
  1075                           	opt stack 0
  1076                           
  1077                           ; 1 bytes @ 0x3F
  1078  0000BF                     	ds	1
  1079  0000C0                     ___fttol@lval:
  1080                           	opt stack 0
  1081                           
  1082                           ; 4 bytes @ 0x40
  1083  0000C0                     	ds	4
  1084  0000C4                     ___fttol@exp1:
  1085                           	opt stack 0
  1086                           
  1087                           ; 1 bytes @ 0x44
  1088  0000C4                     	ds	1
  1089  0000C5                     ?_angleToPulse:
  1090                           	opt stack 0
  1091  0000C5                     angleToPulse@angle:
  1092                           	opt stack 0
  1093                           
  1094                           ; 2 bytes @ 0x45
  1095  0000C5                     	ds	4
  1096  0000C9                     ??_angleToPulse:
  1097                           
  1098                           ; 1 bytes @ 0x49
  1099  0000C9                     	ds	4
  1100  0000CD                     angleToPulse@offset:
  1101                           	opt stack 0
  1102                           
  1103                           ; 4 bytes @ 0x4D
  1104  0000CD                     	ds	4
  1105  0000D1                     angleToPulse@a180:
  1106                           	opt stack 0
  1107                           
  1108                           ; 4 bytes @ 0x51
  1109  0000D1                     	ds	4
  1110  0000D5                     _angleToPulse$1232:
  1111                           	opt stack 0
  1112                           
  1113                           ; 3 bytes @ 0x55
  1114  0000D5                     	ds	3
  1115  0000D8                     angleToPulse@a000:
  1116                           	opt stack 0
  1117                           
  1118                           ; 4 bytes @ 0x58
  1119  0000D8                     	ds	4
  1120  0000DC                     setAngle@timer:
  1121                           	opt stack 0
  1122                           
  1123                           ; 2 bytes @ 0x5C
  1124  0000DC                     	ds	2
  1125  0000DE                     setAngle@angle:
  1126                           	opt stack 0
  1127                           
  1128                           ; 2 bytes @ 0x5E
  1129  0000DE                     	ds	2
  1130  0000E0                     ??_setAngle:
  1131                           
  1132                           ; 1 bytes @ 0x60
  1133  0000E0                     	ds	6
  1134  0000E6                     initServo@timer:
  1135                           	opt stack 0
  1136                           
  1137                           ; 2 bytes @ 0x66
  1138  0000E6                     	ds	2
  1139  0000E8                     initServo@po:
  1140                           	opt stack 0
  1141                           
  1142                           ; 2 bytes @ 0x68
  1143  0000E8                     	ds	2
  1144  0000EA                     initServo@pi:
  1145                           	opt stack 0
  1146                           
  1147                           ; 2 bytes @ 0x6A
  1148  0000EA                     	ds	2
  1149  0000EC                     initServo@angle:
  1150                           	opt stack 0
  1151                           
  1152                           ; 2 bytes @ 0x6C
  1153  0000EC                     	ds	2
  1154  0000EE                     tblptru	equ	0xFF8
  1155                           tblptrh	equ	0xFF7
  1156                           tblptrl	equ	0xFF6
  1157                           tablat	equ	0xFF5
  1158                           postinc0	equ	0xFEE
  1159                           wreg	equ	0xFE8
  1160                           postdec1	equ	0xFE5
  1161                           fsr1l	equ	0xFE1
  1162                           
  1163                           ; 1 bytes @ 0x6E
  1164                           
  1165                           	psect	cstackCOMRAM
  1166  000001                     __pcstackCOMRAM:
  1167                           	opt stack 0
  1168  000001                     ?_digitalRead:
  1169                           	opt stack 0
  1170  000001                     ?i2___ftpack:
  1171                           	opt stack 0
  1172  000001                     digitalRead@port:
  1173                           	opt stack 0
  1174  000001                     i2digitalWrite@port:
  1175                           	opt stack 0
  1176  000001                     i2startTimer@timer:
  1177                           	opt stack 0
  1178  000001                     i2___ftpack@arg:
  1179                           	opt stack 0
  1180                           
  1181                           ; 3 bytes @ 0x0
  1182  000001                     	ds	2
  1183  000003                     digitalRead@pin:
  1184                           	opt stack 0
  1185  000003                     i2digitalWrite@pin:
  1186                           	opt stack 0
  1187  000003                     i2startTimer@val:
  1188                           	opt stack 0
  1189                           
  1190                           ; 4 bytes @ 0x2
  1191  000003                     	ds	1
  1192  000004                     i2___ftpack@exp:
  1193                           	opt stack 0
  1194                           
  1195                           ; 1 bytes @ 0x3
  1196  000004                     	ds	1
  1197  000005                     ??_digitalRead:
  1198  000005                     i2___ftpack@sign:
  1199                           	opt stack 0
  1200  000005                     i2digitalWrite@val:
  1201                           	opt stack 0
  1202                           
  1203                           ; 2 bytes @ 0x4
  1204  000005                     	ds	1
  1205  000006                     ??i2___ftpack:
  1206                           
  1207                           ; 1 bytes @ 0x5
  1208  000006                     	ds	1
  1209  000007                     ??i2_digitalWrite:
  1210  000007                     ??i2_startTimer:
  1211                           
  1212                           ; 1 bytes @ 0x6
  1213  000007                     	ds	2
  1214  000009                     ?i2___altoft:
  1215                           	opt stack 0
  1216  000009                     ?i2___awtoft:
  1217                           	opt stack 0
  1218  000009                     i2___awtoft@c:
  1219                           	opt stack 0
  1220  000009                     i2___altoft@c:
  1221                           	opt stack 0
  1222                           
  1223                           ; 4 bytes @ 0x8
  1224  000009                     	ds	1
  1225  00000A                     ??_servoInterruptService:
  1226                           
  1227                           ; 1 bytes @ 0x9
  1228  00000A                     	ds	2
  1229  00000C                     i2___awtoft@sign:
  1230                           	opt stack 0
  1231  00000C                     servoInterruptService@flags:
  1232                           	opt stack 0
  1233                           
  1234                           ; 8 bytes @ 0xB
  1235  00000C                     	ds	1
  1236  00000D                     ??i2___altoft:
  1237  00000D                     ?i2___ftdiv:
  1238                           	opt stack 0
  1239  00000D                     i2___ftdiv@f1:
  1240                           	opt stack 0
  1241                           
  1242                           ; 3 bytes @ 0xC
  1243  00000D                     	ds	3
  1244  000010                     i2___ftdiv@f2:
  1245                           	opt stack 0
  1246                           
  1247                           ; 3 bytes @ 0xF
  1248  000010                     	ds	1
  1249  000011                     i2___altoft@exp:
  1250                           	opt stack 0
  1251                           
  1252                           ; 1 bytes @ 0x10
  1253  000011                     	ds	1
  1254  000012                     i2___altoft@sign:
  1255                           	opt stack 0
  1256                           
  1257                           ; 1 bytes @ 0x11
  1258  000012                     	ds	1
  1259  000013                     ??i2___ftdiv:
  1260                           
  1261                           ; 1 bytes @ 0x12
  1262  000013                     	ds	1
  1263  000014                     servoInterruptService@i:
  1264                           	opt stack 0
  1265                           
  1266                           ; 2 bytes @ 0x13
  1267  000014                     	ds	2
  1268  000016                     i2___ftdiv@cntr:
  1269                           	opt stack 0
  1270                           
  1271                           ; 1 bytes @ 0x15
  1272  000016                     	ds	1
  1273  000017                     i2___ftdiv@f3:
  1274                           	opt stack 0
  1275                           
  1276                           ; 3 bytes @ 0x16
  1277  000017                     	ds	3
  1278  00001A                     i2___ftdiv@exp:
  1279                           	opt stack 0
  1280                           
  1281                           ; 1 bytes @ 0x19
  1282  00001A                     	ds	1
  1283  00001B                     i2___ftdiv@sign:
  1284                           	opt stack 0
  1285                           
  1286                           ; 1 bytes @ 0x1A
  1287  00001B                     	ds	1
  1288  00001C                     ?i2___ftmul:
  1289                           	opt stack 0
  1290  00001C                     i2___ftmul@f1:
  1291                           	opt stack 0
  1292                           
  1293                           ; 3 bytes @ 0x1B
  1294  00001C                     	ds	3
  1295  00001F                     i2___ftmul@f2:
  1296                           	opt stack 0
  1297                           
  1298                           ; 3 bytes @ 0x1E
  1299  00001F                     	ds	3
  1300  000022                     ??i2___ftmul:
  1301                           
  1302                           ; 1 bytes @ 0x21
  1303  000022                     	ds	3
  1304  000025                     i2___ftmul@exp:
  1305                           	opt stack 0
  1306                           
  1307                           ; 1 bytes @ 0x24
  1308  000025                     	ds	1
  1309  000026                     i2___ftmul@f3_as_product:
  1310                           	opt stack 0
  1311                           
  1312                           ; 3 bytes @ 0x25
  1313  000026                     	ds	3
  1314  000029                     i2___ftmul@cntr:
  1315                           	opt stack 0
  1316                           
  1317                           ; 1 bytes @ 0x28
  1318  000029                     	ds	1
  1319  00002A                     i2___ftmul@sign:
  1320                           	opt stack 0
  1321                           
  1322                           ; 1 bytes @ 0x29
  1323  00002A                     	ds	1
  1324  00002B                     ?i2___ftadd:
  1325                           	opt stack 0
  1326  00002B                     i2___ftadd@f1:
  1327                           	opt stack 0
  1328                           
  1329                           ; 3 bytes @ 0x2A
  1330  00002B                     	ds	3
  1331  00002E                     i2___ftadd@f2:
  1332                           	opt stack 0
  1333                           
  1334                           ; 3 bytes @ 0x2D
  1335  00002E                     	ds	3
  1336  000031                     ??i2___ftadd:
  1337                           
  1338                           ; 1 bytes @ 0x30
  1339  000031                     	ds	3
  1340  000034                     i2___ftadd@sign:
  1341                           	opt stack 0
  1342                           
  1343                           ; 1 bytes @ 0x33
  1344  000034                     	ds	1
  1345  000035                     i2___ftadd@exp2:
  1346                           	opt stack 0
  1347                           
  1348                           ; 1 bytes @ 0x34
  1349  000035                     	ds	1
  1350  000036                     i2___ftadd@exp1:
  1351                           	opt stack 0
  1352                           
  1353                           ; 1 bytes @ 0x35
  1354  000036                     	ds	1
  1355  000037                     ?i2___fttol:
  1356                           	opt stack 0
  1357  000037                     i2___fttol@f1:
  1358                           	opt stack 0
  1359                           
  1360                           ; 3 bytes @ 0x36
  1361  000037                     	ds	4
  1362  00003B                     ??i2___fttol:
  1363                           
  1364                           ; 1 bytes @ 0x3A
  1365  00003B                     	ds	5
  1366  000040                     i2___fttol@sign1:
  1367                           	opt stack 0
  1368                           
  1369                           ; 1 bytes @ 0x3F
  1370  000040                     	ds	1
  1371  000041                     i2___fttol@lval:
  1372                           	opt stack 0
  1373                           
  1374                           ; 4 bytes @ 0x40
  1375  000041                     	ds	4
  1376  000045                     i2___fttol@exp1:
  1377                           	opt stack 0
  1378                           
  1379                           ; 1 bytes @ 0x44
  1380  000045                     	ds	1
  1381  000046                     ?i2_angleToPulse:
  1382                           	opt stack 0
  1383  000046                     i2angleToPulse@angle:
  1384                           	opt stack 0
  1385                           
  1386                           ; 2 bytes @ 0x45
  1387  000046                     	ds	4
  1388  00004A                     ??i2_angleToPulse:
  1389                           
  1390                           ; 1 bytes @ 0x49
  1391  00004A                     	ds	4
  1392  00004E                     i2angleToPulse@offset:
  1393                           	opt stack 0
  1394                           
  1395                           ; 4 bytes @ 0x4D
  1396  00004E                     	ds	4
  1397  000052                     i2angleToPulse@a180:
  1398                           	opt stack 0
  1399                           
  1400                           ; 4 bytes @ 0x51
  1401  000052                     	ds	4
  1402  000056                     i2_angleToPulse$1318:
  1403                           	opt stack 0
  1404                           
  1405                           ; 3 bytes @ 0x55
  1406  000056                     	ds	3
  1407  000059                     i2angleToPulse@a000:
  1408                           	opt stack 0
  1409                           
  1410                           ; 4 bytes @ 0x58
  1411  000059                     	ds	4
  1412  00005D                     i2setAngle@timer:
  1413                           	opt stack 0
  1414                           
  1415                           ; 2 bytes @ 0x5C
  1416  00005D                     	ds	2
  1417  00005F                     i2setAngle@angle:
  1418                           	opt stack 0
  1419                           
  1420                           ; 2 bytes @ 0x5E
  1421  00005F                     	ds	2
  1422  000061                     ??i2_setAngle:
  1423                           
  1424                           ; 1 bytes @ 0x60
  1425  000061                     	ds	6
  1426  000067                     ??_service:
  1427                           
  1428                           ; 1 bytes @ 0x66
  1429  000067                     	ds	14
  1430  000075                     service@key:
  1431                           	opt stack 0
  1432                           
  1433                           ; 1 bytes @ 0x74
  1434  000075                     	ds	1
  1435                           tblptru	equ	0xFF8
  1436                           tblptrh	equ	0xFF7
  1437                           tblptrl	equ	0xFF6
  1438                           tablat	equ	0xFF5
  1439                           postinc0	equ	0xFEE
  1440                           wreg	equ	0xFE8
  1441                           postdec1	equ	0xFE5
  1442                           fsr1l	equ	0xFE1
  1443                           
  1444 ;;
  1445 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1446 ;;
  1447 ;; *************** function _main *****************
  1448 ;; Defined at:
  1449 ;;		line 45 in file "main.c"
  1450 ;; Parameters:    Size  Location     Type
  1451 ;;		None
  1452 ;; Auto vars:     Size  Location     Type
  1453 ;;		None
  1454 ;; Return value:  Size  Location     Type
  1455 ;;                  1    wreg      void 
  1456 ;; Registers used:
  1457 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1458 ;; Tracked objects:
  1459 ;;		On entry : 0/0
  1460 ;;		On exit  : 0/0
  1461 ;;		Unchanged: 0/0
  1462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1466 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1467 ;;Total ram usage:        0 bytes
  1468 ;; Hardware stack levels required when called:   12
  1469 ;; This function calls:
  1470 ;;		_initLCD
  1471 ;;		_initServo
  1472 ;;		_lcdClear
  1473 ;;		_pinSetup
  1474 ;;		_printf
  1475 ;;		_showInterface
  1476 ;;		_sortBattery
  1477 ;; This function is called by:
  1478 ;;		Startup code after reset
  1479 ;; This function uses a non-reentrant model
  1480 ;;
  1481                           
  1482                           	psect	text0
  1483  0015B6                     __ptext0:
  1484                           	opt stack 0
  1485  0015B6                     _main:
  1486                           	opt stack 19
  1487                           
  1488                           ;main.c: 46: pinSetup();
  1489                           
  1490                           ;incstack = 0
  1491  0015B6  EC18  F00F         	call	_pinSetup	;wreg free
  1492                           
  1493                           ;main.c: 47: initLCD();
  1494  0015BA  ECD1  F00E         	call	_initLCD	;wreg free
  1495                           
  1496                           ;main.c: 51: (INTCONbits.GIE = 0);
  1497                           
  1498                           ;main.c: 50: while(1){
  1499  0015BE  9EF2               	bcf	intcon,7,c	;volatile
  1500                           
  1501                           ;main.c: 52: showInterface();
  1502  0015C0  EC13  F008         	call	_showInterface	;wreg free
  1503                           
  1504                           ;main.c: 53: (INTCONbits.GIE = 1);
  1505  0015C4  8EF2               	bsf	intcon,7,c	;volatile
  1506                           
  1507                           ;main.c: 56: initServo(conveyorServo[0], conveyorServo[1], conveyorServo[2], 90);
  1508  0015C6  C0EE  F0E6         	movff	_conveyorServo,initServo@timer
  1509  0015CA  C0EF  F0E7         	movff	_conveyorServo+1,initServo@timer+1
  1510  0015CE  C0F0  F0E8         	movff	_conveyorServo+2,initServo@po
  1511  0015D2  C0F1  F0E9         	movff	_conveyorServo+3,initServo@po+1
  1512  0015D6  C0F2  F0EA         	movff	_conveyorServo+4,initServo@pi
  1513  0015DA  C0F3  F0EB         	movff	_conveyorServo+5,initServo@pi+1
  1514  0015DE  0E00               	movlw	0
  1515  0015E0  0100               	movlb	0	; () banked
  1516  0015E2  6FED               	movwf	(initServo@angle+1)& (0+255),b
  1517  0015E4  0E5A               	movlw	90
  1518  0015E6  6FEC               	movwf	initServo@angle& (0+255),b
  1519  0015E8  EC13  F00D         	call	_initServo	;wreg free
  1520                           
  1521                           ;main.c: 57: initServo(padServo[0], padServo[1], padServo[2], padAngle_CATCH);
  1522  0015EC  C120  F0E6         	movff	_padServo,initServo@timer
  1523  0015F0  C121  F0E7         	movff	_padServo+1,initServo@timer+1
  1524  0015F4  C122  F0E8         	movff	_padServo+2,initServo@po
  1525  0015F8  C123  F0E9         	movff	_padServo+3,initServo@po+1
  1526  0015FC  C124  F0EA         	movff	_padServo+4,initServo@pi
  1527  001600  C125  F0EB         	movff	_padServo+5,initServo@pi+1
  1528  001604  C0F8  F0EC         	movff	_padAngle_CATCH,initServo@angle
  1529  001608  C0F9  F0ED         	movff	_padAngle_CATCH+1,initServo@angle+1
  1530  00160C  EC13  F00D         	call	_initServo	;wreg free
  1531                           
  1532                           ;main.c: 58: initServo(redirectingServo[0], redirectingServo[1],redirectingServo[2], 90)
      +                          ;
  1533  001610  C126  F0E6         	movff	_redirectingServo,initServo@timer
  1534  001614  C127  F0E7         	movff	_redirectingServo+1,initServo@timer+1
  1535  001618  C128  F0E8         	movff	_redirectingServo+2,initServo@po
  1536  00161C  C129  F0E9         	movff	_redirectingServo+3,initServo@po+1
  1537  001620  C12A  F0EA         	movff	_redirectingServo+4,initServo@pi
  1538  001624  C12B  F0EB         	movff	_redirectingServo+5,initServo@pi+1
  1539  001628  0E00               	movlw	0
  1540  00162A  0100               	movlb	0	; () banked
  1541  00162C  6FED               	movwf	(initServo@angle+1)& (0+255),b
  1542  00162E  0E5A               	movlw	90
  1543  001630  6FEC               	movwf	initServo@angle& (0+255),b
  1544  001632  EC13  F00D         	call	_initServo	;wreg free
  1545                           
  1546                           ;main.c: 60: lcdClear();
  1547  001636  EC2A  F010         	call	_lcdClear	;wreg free
  1548                           
  1549                           ;main.c: 61: printf("running");
  1550  00163A  0EEF               	movlw	low STR_1
  1551  00163C  0100               	movlb	0	; () banked
  1552  00163E  6F87               	movwf	printf@f& (0+255),b
  1553  001640  0EFF               	movlw	high STR_1
  1554  001642  0100               	movlb	0	; () banked
  1555  001644  6F88               	movwf	(printf@f+1)& (0+255),b
  1556  001646  EC5F  F004         	call	_printf	;wreg free
  1557  00164A                     l3836:
  1558  00164A  0100               	movlb	0	; () banked
  1559  00164C  51FE               	movf	_switchFlag& (0+255),w,b
  1560  00164E  0100               	movlb	0	; () banked
  1561  001650  11FF               	iorwf	(_switchFlag+1)& (0+255),w,b
  1562  001652  B4D8               	btfsc	status,2,c
  1563  001654  D7FA               	goto	l3836
  1564                           
  1565                           ; BSR set to: 0
  1566                           ;main.c: 66: switchFlag = 0;
  1567                           
  1568                           ; BSR set to: 0
  1569  001656  0E00               	movlw	0
  1570  001658  0100               	movlb	0	; () banked
  1571  00165A  6FFF               	movwf	(_switchFlag+1)& (0+255),b
  1572  00165C  0E00               	movlw	0
  1573  00165E  6FFE               	movwf	_switchFlag& (0+255),b
  1574                           
  1575                           ; BSR set to: 0
  1576                           ;main.c: 67: sortBattery();
  1577  001660  EC6C  F00A         	call	_sortBattery	;wreg free
  1578  001664  D7F2               	goto	l3836
  1579  001666                     l108:
  1580  001666  D7FF               	goto	l108
  1581  001668                     __end_of_main:
  1582                           	opt stack 0
  1583                           tblptru	equ	0xFF8
  1584                           tblptrh	equ	0xFF7
  1585                           tblptrl	equ	0xFF6
  1586                           tablat	equ	0xFF5
  1587                           intcon	equ	0xFF2
  1588                           postinc0	equ	0xFEE
  1589                           wreg	equ	0xFE8
  1590                           postdec1	equ	0xFE5
  1591                           fsr1l	equ	0xFE1
  1592                           status	equ	0xFD8
  1593                           
  1594 ;; *************** function _sortBattery *****************
  1595 ;; Defined at:
  1596 ;;		line 74 in file "main.c"
  1597 ;; Parameters:    Size  Location     Type
  1598 ;;		None
  1599 ;; Auto vars:     Size  Location     Type
  1600 ;;		None
  1601 ;; Return value:  Size  Location     Type
  1602 ;;                  1    wreg      void 
  1603 ;; Registers used:
  1604 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1605 ;; Tracked objects:
  1606 ;;		On entry : 0/0
  1607 ;;		On exit  : 0/0
  1608 ;;		Unchanged: 0/0
  1609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1613 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1614 ;;Total ram usage:        0 bytes
  1615 ;; Hardware stack levels used:    1
  1616 ;; Hardware stack levels required when called:   11
  1617 ;; This function calls:
  1618 ;;		_digitalWrite
  1619 ;;		_initServo
  1620 ;;		_lcdClear
  1621 ;;		_pause
  1622 ;;		_printf
  1623 ;;		_setAngle
  1624 ;;		_stopServo
  1625 ;; This function is called by:
  1626 ;;		_main
  1627 ;; This function uses a non-reentrant model
  1628 ;;
  1629                           
  1630                           	psect	text1
  1631  0014D8                     __ptext1:
  1632                           	opt stack 0
  1633  0014D8                     _sortBattery:
  1634                           	opt stack 19
  1635                           
  1636                           ;main.c: 76: lcdClear();
  1637                           
  1638                           ;incstack = 0
  1639  0014D8  EC2A  F010         	call	_lcdClear	;wreg free
  1640                           
  1641                           ;main.c: 77: printf("interrupt!");
  1642  0014DC  0ED3               	movlw	low STR_2
  1643  0014DE  0100               	movlb	0	; () banked
  1644  0014E0  6F87               	movwf	printf@f& (0+255),b
  1645  0014E2  0EFF               	movlw	high STR_2
  1646  0014E4  0100               	movlb	0	; () banked
  1647  0014E6  6F88               	movwf	(printf@f+1)& (0+255),b
  1648  0014E8  EC5F  F004         	call	_printf	;wreg free
  1649                           
  1650                           ;main.c: 80: stopServo(conveyorServo[0]);
  1651  0014EC  C0EE  F080         	movff	_conveyorServo,stopServo@timer
  1652  0014F0  C0EF  F081         	movff	_conveyorServo+1,stopServo@timer+1
  1653  0014F4  EC87  F00E         	call	_stopServo	;wreg free
  1654                           
  1655                           ;main.c: 81: digitalWrite(cylinderMotor[0], cylinderMotor[1], 0);
  1656  0014F8  C0F4  F080         	movff	_cylinderMotor,digitalWrite@port
  1657  0014FC  C0F5  F081         	movff	_cylinderMotor+1,digitalWrite@port+1
  1658  001500  C0F6  F082         	movff	_cylinderMotor+2,digitalWrite@pin
  1659  001504  C0F7  F083         	movff	_cylinderMotor+3,digitalWrite@pin+1
  1660  001508  0E00               	movlw	0
  1661  00150A  0100               	movlb	0	; () banked
  1662  00150C  6F85               	movwf	(digitalWrite@val+1)& (0+255),b
  1663  00150E  0E00               	movlw	0
  1664  001510  6F84               	movwf	digitalWrite@val& (0+255),b
  1665  001512  ECFC  F009         	call	_digitalWrite	;wreg free
  1666                           
  1667                           ;main.c: 86: pause("close?");
  1668  001516  0EF7               	movlw	low STR_3
  1669  001518  0100               	movlb	0	; () banked
  1670  00151A  6F95               	movwf	pause@message& (0+255),b
  1671  00151C  0EFF               	movlw	high STR_3
  1672  00151E  0100               	movlb	0	; () banked
  1673  001520  6F96               	movwf	(pause@message+1)& (0+255),b
  1674  001522  EC09  F010         	call	_pause	;wreg free
  1675                           
  1676                           ;main.c: 89: setAngle(padServo[0], padAngle_CLOSE);
  1677  001526  C120  F0DC         	movff	_padServo,setAngle@timer
  1678  00152A  C121  F0DD         	movff	_padServo+1,setAngle@timer+1
  1679  00152E  C0FA  F0DE         	movff	_padAngle_CLOSE,setAngle@angle
  1680  001532  C0FB  F0DF         	movff	_padAngle_CLOSE+1,setAngle@angle+1
  1681  001536  EC89  F00C         	call	_setAngle	;wreg free
  1682                           
  1683                           ;main.c: 91: pause("read voltage?");
  1684  00153A  0EC5               	movlw	low STR_4
  1685  00153C  0100               	movlb	0	; () banked
  1686  00153E  6F95               	movwf	pause@message& (0+255),b
  1687  001540  0EFF               	movlw	high STR_4
  1688  001542  0100               	movlb	0	; () banked
  1689  001544  6F96               	movwf	(pause@message+1)& (0+255),b
  1690  001546  EC09  F010         	call	_pause	;wreg free
  1691                           
  1692                           ;main.c: 96: pause("release battery?");
  1693  00154A  0EA5               	movlw	low STR_5
  1694  00154C  0100               	movlb	0	; () banked
  1695  00154E  6F95               	movwf	pause@message& (0+255),b
  1696  001550  0EFF               	movlw	high STR_5
  1697  001552  0100               	movlb	0	; () banked
  1698  001554  6F96               	movwf	(pause@message+1)& (0+255),b
  1699  001556  EC09  F010         	call	_pause	;wreg free
  1700                           
  1701                           ;main.c: 98: setAngle(padServo[0], padAngle_OPEN);
  1702  00155A  C120  F0DC         	movff	_padServo,setAngle@timer
  1703  00155E  C121  F0DD         	movff	_padServo+1,setAngle@timer+1
  1704  001562  C0FC  F0DE         	movff	_padAngle_OPEN,setAngle@angle
  1705  001566  C0FD  F0DF         	movff	_padAngle_OPEN+1,setAngle@angle+1
  1706  00156A  EC89  F00C         	call	_setAngle	;wreg free
  1707                           
  1708                           ;main.c: 100: pause("reset the pad?");
  1709  00156E  0EB6               	movlw	low STR_6
  1710  001570  0100               	movlb	0	; () banked
  1711  001572  6F95               	movwf	pause@message& (0+255),b
  1712  001574  0EFF               	movlw	high STR_6
  1713  001576  0100               	movlb	0	; () banked
  1714  001578  6F96               	movwf	(pause@message+1)& (0+255),b
  1715  00157A  EC09  F010         	call	_pause	;wreg free
  1716                           
  1717                           ;main.c: 103: pause("conveyor & cylinder on?");
  1718  00157E  0EA9               	movlw	low STR_7
  1719  001580  0100               	movlb	0	; () banked
  1720  001582  6F95               	movwf	pause@message& (0+255),b
  1721  001584  0EFE               	movlw	high STR_7
  1722  001586  0100               	movlb	0	; () banked
  1723  001588  6F96               	movwf	(pause@message+1)& (0+255),b
  1724  00158A  EC09  F010         	call	_pause	;wreg free
  1725                           
  1726                           ;main.c: 105: initServo(conveyorServo[0], conveyorServo[1], conveyorServo[2], 90);
  1727  00158E  C0EE  F0E6         	movff	_conveyorServo,initServo@timer
  1728  001592  C0EF  F0E7         	movff	_conveyorServo+1,initServo@timer+1
  1729  001596  C0F0  F0E8         	movff	_conveyorServo+2,initServo@po
  1730  00159A  C0F1  F0E9         	movff	_conveyorServo+3,initServo@po+1
  1731  00159E  C0F2  F0EA         	movff	_conveyorServo+4,initServo@pi
  1732  0015A2  C0F3  F0EB         	movff	_conveyorServo+5,initServo@pi+1
  1733  0015A6  0E00               	movlw	0
  1734  0015A8  0100               	movlb	0	; () banked
  1735  0015AA  6FED               	movwf	(initServo@angle+1)& (0+255),b
  1736  0015AC  0E5A               	movlw	90
  1737  0015AE  6FEC               	movwf	initServo@angle& (0+255),b
  1738  0015B0  EC13  F00D         	call	_initServo	;wreg free
  1739  0015B4                     l116:
  1740  0015B4  D7FF               	goto	l116
  1741  0015B6                     __end_of_sortBattery:
  1742                           	opt stack 0
  1743                           tblptru	equ	0xFF8
  1744                           tblptrh	equ	0xFF7
  1745                           tblptrl	equ	0xFF6
  1746                           tablat	equ	0xFF5
  1747                           intcon	equ	0xFF2
  1748                           postinc0	equ	0xFEE
  1749                           wreg	equ	0xFE8
  1750                           postdec1	equ	0xFE5
  1751                           fsr1l	equ	0xFE1
  1752                           status	equ	0xFD8
  1753                           
  1754 ;; *************** function _stopServo *****************
  1755 ;; Defined at:
  1756 ;;		line 26 in file "servo.c"
  1757 ;; Parameters:    Size  Location     Type
  1758 ;;  timer           2    0[BANK0 ] int 
  1759 ;; Auto vars:     Size  Location     Type
  1760 ;;		None
  1761 ;; Return value:  Size  Location     Type
  1762 ;;                  1    wreg      void 
  1763 ;; Registers used:
  1764 ;;		wreg, status,2, status,0
  1765 ;; Tracked objects:
  1766 ;;		On entry : 0/0
  1767 ;;		On exit  : 0/0
  1768 ;;		Unchanged: 0/0
  1769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1770 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1772 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1773 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1774 ;;Total ram usage:        4 bytes
  1775 ;; Hardware stack levels used:    1
  1776 ;; Hardware stack levels required when called:    5
  1777 ;; This function calls:
  1778 ;;		Nothing
  1779 ;; This function is called by:
  1780 ;;		_sortBattery
  1781 ;; This function uses a non-reentrant model
  1782 ;;
  1783                           
  1784                           	psect	text2
  1785  001D0E                     __ptext2:
  1786                           	opt stack 0
  1787  001D0E                     _stopServo:
  1788                           	opt stack 24
  1789                           
  1790                           ;servo.c: 27: switch(timer){
  1791                           
  1792                           ;incstack = 0
  1793  001D0E  D00C               	goto	l3502
  1794  001D10                     l3492:
  1795  001D10  0E00               	movlw	0
  1796  001D12  6ED5               	movwf	4053,c	;volatile
  1797  001D14  0012               	return	
  1798  001D16                     l3494:
  1799  001D16  0E00               	movlw	0
  1800  001D18  6ECD               	movwf	4045,c	;volatile
  1801  001D1A  0012               	return	
  1802  001D1C                     l3496:
  1803  001D1C  0E00               	movlw	0
  1804  001D1E  6ECA               	movwf	4042,c	;volatile
  1805  001D20  0012               	return	
  1806  001D22                     l3498:
  1807  001D22  0E00               	movlw	0
  1808  001D24  6EB1               	movwf	4017,c	;volatile
  1809                           
  1810                           ;servo.c: 32: }
  1811  001D26  0012               	return	
  1812  001D28                     l3502:
  1813  001D28  C080  F082         	movff	stopServo@timer,??_stopServo
  1814  001D2C  C081  F083         	movff	stopServo@timer+1,??_stopServo+1
  1815                           
  1816                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1817                           ; Switch size 1, requested type "space"
  1818                           ; Number of cases is 1, Range of values is 0 to 0
  1819                           ; switch strategies available:
  1820                           ; Name         Instructions Cycles
  1821                           ; simple_byte            4     3 (average)
  1822                           ;	Chosen strategy is simple_byte
  1823  001D30  0100               	movlb	0	; () banked
  1824  001D32  5183               	movf	(??_stopServo+1)& (0+255),w,b
  1825  001D34  0A00               	xorlw	0	; case 0
  1826  001D36  A4D8               	btfss	status,2,c
  1827  001D38  0012               	return	
  1828                           
  1829                           ; BSR set to: 0
  1830                           ; Switch size 1, requested type "space"
  1831                           ; Number of cases is 4, Range of values is 0 to 3
  1832                           ; switch strategies available:
  1833                           ; Name         Instructions Cycles
  1834                           ; simple_byte           13     7 (average)
  1835                           ;	Chosen strategy is simple_byte
  1836  001D3A  0100               	movlb	0	; () banked
  1837  001D3C  5182               	movf	??_stopServo& (0+255),w,b
  1838  001D3E  0A00               	xorlw	0	; case 0
  1839  001D40  B4D8               	btfsc	status,2,c
  1840  001D42  D7E6               	goto	l3492
  1841  001D44  0A01               	xorlw	1	; case 1
  1842  001D46  B4D8               	btfsc	status,2,c
  1843  001D48  D7E6               	goto	l3494
  1844  001D4A  0A03               	xorlw	3	; case 2
  1845  001D4C  B4D8               	btfsc	status,2,c
  1846  001D4E  D7E6               	goto	l3496
  1847  001D50  0A01               	xorlw	1	; case 3
  1848  001D52  A4D8               	btfss	status,2,c
  1849  001D54  0012               	return	
  1850  001D56  D7E5               	goto	l3498
  1851  001D58                     __end_of_stopServo:
  1852                           	opt stack 0
  1853                           tblptru	equ	0xFF8
  1854                           tblptrh	equ	0xFF7
  1855                           tblptrl	equ	0xFF6
  1856                           tablat	equ	0xFF5
  1857                           intcon	equ	0xFF2
  1858                           postinc0	equ	0xFEE
  1859                           wreg	equ	0xFE8
  1860                           postdec1	equ	0xFE5
  1861                           fsr1l	equ	0xFE1
  1862                           status	equ	0xFD8
  1863                           
  1864 ;; *************** function _pause *****************
  1865 ;; Defined at:
  1866 ;;		line 227 in file "main.c"
  1867 ;; Parameters:    Size  Location     Type
  1868 ;;  message         2   21[BANK0 ] PTR unsigned char 
  1869 ;;		 -> STR_7(24), STR_6(15), STR_5(17), STR_4(14), 
  1870 ;;		 -> STR_3(7), 
  1871 ;; Auto vars:     Size  Location     Type
  1872 ;;		None
  1873 ;; Return value:  Size  Location     Type
  1874 ;;                  1    wreg      void 
  1875 ;; Registers used:
  1876 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1877 ;; Tracked objects:
  1878 ;;		On entry : 0/0
  1879 ;;		On exit  : 0/0
  1880 ;;		Unchanged: 0/0
  1881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1882 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1885 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1886 ;;Total ram usage:        2 bytes
  1887 ;; Hardware stack levels used:    1
  1888 ;; Hardware stack levels required when called:   10
  1889 ;; This function calls:
  1890 ;;		_lcdClear
  1891 ;;		_printf
  1892 ;;		_readKeypad
  1893 ;; This function is called by:
  1894 ;;		_sortBattery
  1895 ;; This function uses a non-reentrant model
  1896 ;;
  1897                           
  1898                           	psect	text3
  1899  002012                     __ptext3:
  1900                           	opt stack 0
  1901  002012                     _pause:
  1902                           	opt stack 19
  1903                           
  1904                           ;main.c: 228: lcdClear();
  1905                           
  1906                           ;incstack = 0
  1907  002012  EC2A  F010         	call	_lcdClear	;wreg free
  1908                           
  1909                           ;main.c: 229: printf(message);
  1910  002016  C095  F087         	movff	pause@message,printf@f
  1911  00201A  C096  F088         	movff	pause@message+1,printf@f+1
  1912  00201E  EC5F  F004         	call	_printf	;wreg free
  1913                           
  1914                           ;main.c: 230: readKeypad();
  1915  002022  EC6C  F00F         	call	_readKeypad	;wreg free
  1916  002026  0012               	return		;funcret
  1917  002028                     __end_of_pause:
  1918                           	opt stack 0
  1919                           tblptru	equ	0xFF8
  1920                           tblptrh	equ	0xFF7
  1921                           tblptrl	equ	0xFF6
  1922                           tablat	equ	0xFF5
  1923                           intcon	equ	0xFF2
  1924                           postinc0	equ	0xFEE
  1925                           wreg	equ	0xFE8
  1926                           postdec1	equ	0xFE5
  1927                           fsr1l	equ	0xFE1
  1928                           status	equ	0xFD8
  1929                           
  1930 ;; *************** function _initServo *****************
  1931 ;; Defined at:
  1932 ;;		line 17 in file "servo.c"
  1933 ;; Parameters:    Size  Location     Type
  1934 ;;  timer           2  102[BANK0 ] int 
  1935 ;;  po              2  104[BANK0 ] int 
  1936 ;;  pi              2  106[BANK0 ] int 
  1937 ;;  angle           2  108[BANK0 ] int 
  1938 ;; Auto vars:     Size  Location     Type
  1939 ;;		None
  1940 ;; Return value:  Size  Location     Type
  1941 ;;                  1    wreg      void 
  1942 ;; Registers used:
  1943 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1944 ;; Tracked objects:
  1945 ;;		On entry : 0/0
  1946 ;;		On exit  : 0/0
  1947 ;;		Unchanged: 0/0
  1948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1949 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1952 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1953 ;;Total ram usage:        8 bytes
  1954 ;; Hardware stack levels used:    1
  1955 ;; Hardware stack levels required when called:    9
  1956 ;; This function calls:
  1957 ;;		_initTimer
  1958 ;;		_setAngle
  1959 ;;		_startTimer
  1960 ;; This function is called by:
  1961 ;;		_main
  1962 ;;		_sortBattery
  1963 ;; This function uses a non-reentrant model
  1964 ;;
  1965                           
  1966                           	psect	text4
  1967  001A26                     __ptext4:
  1968                           	opt stack 0
  1969  001A26                     _initServo:
  1970                           	opt stack 20
  1971                           
  1972                           ;servo.c: 18: port[timer] = po;
  1973                           
  1974                           ;incstack = 0
  1975  001A26  90D8               	bcf	status,0,c
  1976  001A28  0100               	movlb	0	; () banked
  1977  001A2A  35E6               	rlcf	initServo@timer& (0+255),w,b
  1978  001A2C  6ED9               	movwf	fsr2l,c
  1979  001A2E  0100               	movlb	0	; () banked
  1980  001A30  35E7               	rlcf	(initServo@timer+1)& (0+255),w,b
  1981  001A32  6EDA               	movwf	fsr2h,c
  1982  001A34  0E18               	movlw	low _port
  1983  001A36  26D9               	addwf	fsr2l,f,c
  1984  001A38  0E01               	movlw	high _port
  1985  001A3A  22DA               	addwfc	fsr2h,f,c
  1986  001A3C  C0E8  FFDE         	movff	initServo@po,postinc2
  1987  001A40  C0E9  FFDD         	movff	initServo@po+1,postdec2
  1988                           
  1989                           ;servo.c: 19: pin[timer] = pi;
  1990  001A44  90D8               	bcf	status,0,c
  1991  001A46  0100               	movlb	0	; () banked
  1992  001A48  35E6               	rlcf	initServo@timer& (0+255),w,b
  1993  001A4A  6ED9               	movwf	fsr2l,c
  1994  001A4C  0100               	movlb	0	; () banked
  1995  001A4E  35E7               	rlcf	(initServo@timer+1)& (0+255),w,b
  1996  001A50  6EDA               	movwf	fsr2h,c
  1997  001A52  0E10               	movlw	low _pin
  1998  001A54  26D9               	addwf	fsr2l,f,c
  1999  001A56  0E01               	movlw	high _pin
  2000  001A58  22DA               	addwfc	fsr2h,f,c
  2001  001A5A  C0EA  FFDE         	movff	initServo@pi,postinc2
  2002  001A5E  C0EB  FFDD         	movff	initServo@pi+1,postdec2
  2003                           
  2004                           ; BSR set to: 0
  2005                           ;servo.c: 20: setAngle(timer, angle);
  2006  001A62  C0E6  F0DC         	movff	initServo@timer,setAngle@timer
  2007  001A66  C0E7  F0DD         	movff	initServo@timer+1,setAngle@timer+1
  2008  001A6A  C0EC  F0DE         	movff	initServo@angle,setAngle@angle
  2009  001A6E  C0ED  F0DF         	movff	initServo@angle+1,setAngle@angle+1
  2010  001A72  EC89  F00C         	call	_setAngle	;wreg free
  2011                           
  2012                           ;servo.c: 22: initTimer(timer);
  2013  001A76  C0E6  F080         	movff	initServo@timer,initTimer@timer
  2014  001A7A  C0E7  F081         	movff	initServo@timer+1,initTimer@timer+1
  2015  001A7E  ECAC  F00E         	call	_initTimer	;wreg free
  2016                           
  2017                           ;servo.c: 23: startTimer(timer,0);
  2018  001A82  C0E6  F080         	movff	initServo@timer,startTimer@timer
  2019  001A86  C0E7  F081         	movff	initServo@timer+1,startTimer@timer+1
  2020  001A8A  0E00               	movlw	0
  2021  001A8C  0100               	movlb	0	; () banked
  2022  001A8E  6F82               	movwf	startTimer@val& (0+255),b
  2023  001A90  0E00               	movlw	0
  2024  001A92  6F83               	movwf	(startTimer@val+1)& (0+255),b
  2025  001A94  0E00               	movlw	0
  2026  001A96  6F84               	movwf	(startTimer@val+2)& (0+255),b
  2027  001A98  0E00               	movlw	0
  2028  001A9A  6F85               	movwf	(startTimer@val+3)& (0+255),b
  2029  001A9C  EC39  F00E         	call	_startTimer	;wreg free
  2030  001AA0  0012               	return		;funcret
  2031  001AA2                     __end_of_initServo:
  2032                           	opt stack 0
  2033                           tblptru	equ	0xFF8
  2034                           tblptrh	equ	0xFF7
  2035                           tblptrl	equ	0xFF6
  2036                           tablat	equ	0xFF5
  2037                           intcon	equ	0xFF2
  2038                           postinc0	equ	0xFEE
  2039                           wreg	equ	0xFE8
  2040                           postdec1	equ	0xFE5
  2041                           fsr1l	equ	0xFE1
  2042                           postinc2	equ	0xFDE
  2043                           postdec2	equ	0xFDD
  2044                           fsr2h	equ	0xFDA
  2045                           fsr2l	equ	0xFD9
  2046                           status	equ	0xFD8
  2047                           
  2048 ;; *************** function _startTimer *****************
  2049 ;; Defined at:
  2050 ;;		line 75 in file "timer.c"
  2051 ;; Parameters:    Size  Location     Type
  2052 ;;  timer           2    0[BANK0 ] int 
  2053 ;;  val             4    2[BANK0 ] long 
  2054 ;; Auto vars:     Size  Location     Type
  2055 ;;		None
  2056 ;; Return value:  Size  Location     Type
  2057 ;;                  1    wreg      void 
  2058 ;; Registers used:
  2059 ;;		wreg, status,2, status,0
  2060 ;; Tracked objects:
  2061 ;;		On entry : 0/0
  2062 ;;		On exit  : 0/0
  2063 ;;		Unchanged: 0/0
  2064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2065 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2067 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2068 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2069 ;;Total ram usage:        8 bytes
  2070 ;; Hardware stack levels used:    1
  2071 ;; Hardware stack levels required when called:    5
  2072 ;; This function calls:
  2073 ;;		Nothing
  2074 ;; This function is called by:
  2075 ;;		_initServo
  2076 ;;		_testFrequency
  2077 ;; This function uses a non-reentrant model
  2078 ;;
  2079                           
  2080                           	psect	text5
  2081  001C72                     __ptext5:
  2082                           	opt stack 0
  2083  001C72                     _startTimer:
  2084                           	opt stack 23
  2085                           
  2086                           ;timer.c: 76: switch(timer){
  2087                           
  2088                           ;incstack = 0
  2089  001C72  D012               	goto	l3236
  2090  001C74                     l404:
  2091                           
  2092                           ; BSR set to: 0
  2093                           ;timer.c: 78: TMR0H = val>>8;
  2094  001C74  C083  FFD7         	movff	startTimer@val+1,4055	;volatile
  2095                           
  2096                           ;timer.c: 79: TMR0L = val;
  2097  001C78  C082  FFD6         	movff	startTimer@val,4054	;volatile
  2098                           
  2099                           ; BSR set to: 0
  2100                           ;timer.c: 80: T0CON |= 1<<7;
  2101  001C7C  8ED5               	bsf	4053,7,c	;volatile
  2102                           
  2103                           ;timer.c: 81: break;
  2104  001C7E  0012               	return	
  2105  001C80                     l406:
  2106                           
  2107                           ; BSR set to: 0
  2108                           ;timer.c: 83: TMR1H = val>>8;
  2109  001C80  C083  FFCF         	movff	startTimer@val+1,4047	;volatile
  2110                           
  2111                           ;timer.c: 84: TMR1L = val;
  2112  001C84  C082  FFCE         	movff	startTimer@val,4046	;volatile
  2113                           
  2114                           ; BSR set to: 0
  2115                           ;timer.c: 85: T1CON |= 1<<0;
  2116  001C88  80CD               	bsf	4045,0,c	;volatile
  2117                           
  2118                           ;timer.c: 86: break;
  2119  001C8A  0012               	return	
  2120  001C8C                     l407:
  2121                           
  2122                           ; BSR set to: 0
  2123                           ;timer.c: 88: TMR3H = val>>8;
  2124  001C8C  C083  FFB3         	movff	startTimer@val+1,4019	;volatile
  2125                           
  2126                           ;timer.c: 89: TMR3L = val;
  2127  001C90  C082  FFB2         	movff	startTimer@val,4018	;volatile
  2128                           
  2129                           ; BSR set to: 0
  2130                           ;timer.c: 90: T3CON |= 1<<0;
  2131  001C94  80B1               	bsf	4017,0,c	;volatile
  2132                           
  2133                           ;timer.c: 91: }
  2134  001C96  0012               	return	
  2135  001C98                     l3236:
  2136  001C98  C080  F086         	movff	startTimer@timer,??_startTimer
  2137  001C9C  C081  F087         	movff	startTimer@timer+1,??_startTimer+1
  2138                           
  2139                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2140                           ; Switch size 1, requested type "space"
  2141                           ; Number of cases is 1, Range of values is 0 to 0
  2142                           ; switch strategies available:
  2143                           ; Name         Instructions Cycles
  2144                           ; simple_byte            4     3 (average)
  2145                           ;	Chosen strategy is simple_byte
  2146  001CA0  0100               	movlb	0	; () banked
  2147  001CA2  5187               	movf	(??_startTimer+1)& (0+255),w,b
  2148  001CA4  0A00               	xorlw	0	; case 0
  2149  001CA6  A4D8               	btfss	status,2,c
  2150  001CA8  0012               	return	
  2151                           
  2152                           ; BSR set to: 0
  2153                           ; Switch size 1, requested type "space"
  2154                           ; Number of cases is 3, Range of values is 0 to 3
  2155                           ; switch strategies available:
  2156                           ; Name         Instructions Cycles
  2157                           ; simple_byte           10     6 (average)
  2158                           ;	Chosen strategy is simple_byte
  2159  001CAA  0100               	movlb	0	; () banked
  2160  001CAC  5186               	movf	??_startTimer& (0+255),w,b
  2161  001CAE  0A00               	xorlw	0	; case 0
  2162  001CB0  B4D8               	btfsc	status,2,c
  2163  001CB2  D7E0               	goto	l404
  2164  001CB4  0A01               	xorlw	1	; case 1
  2165  001CB6  B4D8               	btfsc	status,2,c
  2166  001CB8  D7E3               	goto	l406
  2167  001CBA  0A02               	xorlw	2	; case 3
  2168  001CBC  A4D8               	btfss	status,2,c
  2169  001CBE  0012               	return	
  2170  001CC0  D7E5               	goto	l407
  2171  001CC2                     __end_of_startTimer:
  2172                           	opt stack 0
  2173                           tblptru	equ	0xFF8
  2174                           tblptrh	equ	0xFF7
  2175                           tblptrl	equ	0xFF6
  2176                           tablat	equ	0xFF5
  2177                           intcon	equ	0xFF2
  2178                           postinc0	equ	0xFEE
  2179                           wreg	equ	0xFE8
  2180                           postdec1	equ	0xFE5
  2181                           fsr1l	equ	0xFE1
  2182                           postinc2	equ	0xFDE
  2183                           postdec2	equ	0xFDD
  2184                           fsr2h	equ	0xFDA
  2185                           fsr2l	equ	0xFD9
  2186                           status	equ	0xFD8
  2187                           
  2188 ;; *************** function _setAngle *****************
  2189 ;; Defined at:
  2190 ;;		line 43 in file "servo.c"
  2191 ;; Parameters:    Size  Location     Type
  2192 ;;  timer           2   92[BANK0 ] int 
  2193 ;;  angle           2   94[BANK0 ] int 
  2194 ;; Auto vars:     Size  Location     Type
  2195 ;;		None
  2196 ;; Return value:  Size  Location     Type
  2197 ;;                  1    wreg      void 
  2198 ;; Registers used:
  2199 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2200 ;; Tracked objects:
  2201 ;;		On entry : 0/0
  2202 ;;		On exit  : 0/0
  2203 ;;		Unchanged: 0/0
  2204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2205 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2207 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2208 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2209 ;;Total ram usage:       10 bytes
  2210 ;; Hardware stack levels used:    1
  2211 ;; Hardware stack levels required when called:    8
  2212 ;; This function calls:
  2213 ;;		_angleToPulse
  2214 ;; This function is called by:
  2215 ;;		_sortBattery
  2216 ;;		_initServo
  2217 ;; This function uses a non-reentrant model
  2218 ;;
  2219                           
  2220                           	psect	text6
  2221  001912                     __ptext6:
  2222                           	opt stack 0
  2223  001912                     _setAngle:
  2224                           	opt stack 21
  2225                           
  2226                           ;servo.c: 44: pulse[timer] = 0xffff - angleToPulse(angle);
  2227                           
  2228                           ; BSR set to: 0
  2229                           ;incstack = 0
  2230  001912  C0DE  F0C5         	movff	setAngle@angle,angleToPulse@angle
  2231  001916  C0DF  F0C6         	movff	setAngle@angle+1,angleToPulse@angle+1
  2232  00191A  ECFD  F002         	call	_angleToPulse	;wreg free
  2233  00191E  0100               	movlb	0	; () banked
  2234  001920  1FC5               	comf	?_angleToPulse& (0+255),f,b
  2235  001922  0100               	movlb	0	; () banked
  2236  001924  1FC6               	comf	(?_angleToPulse+1)& (0+255),f,b
  2237  001926  0100               	movlb	0	; () banked
  2238  001928  1FC7               	comf	(?_angleToPulse+2)& (0+255),f,b
  2239  00192A  0100               	movlb	0	; () banked
  2240  00192C  1FC8               	comf	(?_angleToPulse+3)& (0+255),f,b
  2241  00192E  0100               	movlb	0	; () banked
  2242  001930  2BC5               	incf	?_angleToPulse& (0+255),f,b
  2243  001932  0E00               	movlw	0
  2244  001934  0100               	movlb	0	; () banked
  2245  001936  23C6               	addwfc	(?_angleToPulse+1)& (0+255),f,b
  2246  001938  0100               	movlb	0	; () banked
  2247  00193A  23C7               	addwfc	(?_angleToPulse+2)& (0+255),f,b
  2248  00193C  0100               	movlb	0	; () banked
  2249  00193E  23C8               	addwfc	(?_angleToPulse+3)& (0+255),f,b
  2250  001940  0EFF               	movlw	255
  2251  001942  0100               	movlb	0	; () banked
  2252  001944  25C5               	addwf	?_angleToPulse& (0+255),w,b
  2253  001946  0100               	movlb	0	; () banked
  2254  001948  6FE0               	movwf	??_setAngle& (0+255),b
  2255  00194A  0EFF               	movlw	255
  2256  00194C  0100               	movlb	0	; () banked
  2257  00194E  21C6               	addwfc	(?_angleToPulse+1)& (0+255),w,b
  2258  001950  0100               	movlb	0	; () banked
  2259  001952  6FE1               	movwf	(??_setAngle+1)& (0+255),b
  2260  001954  0E00               	movlw	0
  2261  001956  0100               	movlb	0	; () banked
  2262  001958  21C7               	addwfc	(?_angleToPulse+2)& (0+255),w,b
  2263  00195A  0100               	movlb	0	; () banked
  2264  00195C  6FE2               	movwf	(??_setAngle+2)& (0+255),b
  2265  00195E  0E00               	movlw	0
  2266  001960  0100               	movlb	0	; () banked
  2267  001962  21C8               	addwfc	(?_angleToPulse+3)& (0+255),w,b
  2268  001964  0100               	movlb	0	; () banked
  2269  001966  6FE3               	movwf	(??_setAngle+3)& (0+255),b
  2270  001968  0E00               	movlw	low _pulse
  2271  00196A  0100               	movlb	0	; () banked
  2272  00196C  6FE4               	movwf	(??_setAngle+4)& (0+255),b
  2273  00196E  0E01               	movlw	high _pulse
  2274  001970  0100               	movlb	0	; () banked
  2275  001972  6FE5               	movwf	(??_setAngle+5)& (0+255),b
  2276  001974  90D8               	bcf	status,0,c
  2277  001976  0100               	movlb	0	; () banked
  2278  001978  35DC               	rlcf	setAngle@timer& (0+255),w,b
  2279  00197A  6ED9               	movwf	fsr2l,c
  2280  00197C  0100               	movlb	0	; () banked
  2281  00197E  35DD               	rlcf	(setAngle@timer+1)& (0+255),w,b
  2282  001980  6EDA               	movwf	fsr2h,c
  2283  001982  90D8               	bcf	status,0,c
  2284  001984  36D9               	rlcf	fsr2l,f,c
  2285  001986  36DA               	rlcf	fsr2h,f,c
  2286  001988  0100               	movlb	0	; () banked
  2287  00198A  51E4               	movf	(??_setAngle+4)& (0+255),w,b
  2288  00198C  26D9               	addwf	fsr2l,f,c
  2289  00198E  0100               	movlb	0	; () banked
  2290  001990  51E5               	movf	(??_setAngle+5)& (0+255),w,b
  2291  001992  22DA               	addwfc	fsr2h,f,c
  2292  001994  C0E0  FFDE         	movff	??_setAngle,postinc2
  2293  001998  C0E1  FFDE         	movff	??_setAngle+1,postinc2
  2294  00199C  C0E2  FFDE         	movff	??_setAngle+2,postinc2
  2295  0019A0  C0E3  FFDE         	movff	??_setAngle+3,postinc2
  2296                           
  2297                           ; BSR set to: 0
  2298  0019A4  0012               	return		;funcret
  2299  0019A6                     __end_of_setAngle:
  2300                           	opt stack 0
  2301                           tblptru	equ	0xFF8
  2302                           tblptrh	equ	0xFF7
  2303                           tblptrl	equ	0xFF6
  2304                           tablat	equ	0xFF5
  2305                           intcon	equ	0xFF2
  2306                           postinc0	equ	0xFEE
  2307                           wreg	equ	0xFE8
  2308                           postdec1	equ	0xFE5
  2309                           fsr1l	equ	0xFE1
  2310                           postinc2	equ	0xFDE
  2311                           postdec2	equ	0xFDD
  2312                           fsr2h	equ	0xFDA
  2313                           fsr2l	equ	0xFD9
  2314                           status	equ	0xFD8
  2315                           
  2316 ;; *************** function _angleToPulse *****************
  2317 ;; Defined at:
  2318 ;;		line 35 in file "servo.c"
  2319 ;; Parameters:    Size  Location     Type
  2320 ;;  angle           2   69[BANK0 ] int 
  2321 ;; Auto vars:     Size  Location     Type
  2322 ;;  a000            4   88[BANK0 ] long 
  2323 ;;  a180            4   81[BANK0 ] long 
  2324 ;;  offset          4   77[BANK0 ] long 
  2325 ;; Return value:  Size  Location     Type
  2326 ;;                  4   69[BANK0 ] long 
  2327 ;; Registers used:
  2328 ;;		wreg, status,2, status,0, cstack
  2329 ;; Tracked objects:
  2330 ;;		On entry : 0/0
  2331 ;;		On exit  : 0/0
  2332 ;;		Unchanged: 0/0
  2333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2334 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2335 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2336 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2337 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2338 ;;Total ram usage:       23 bytes
  2339 ;; Hardware stack levels used:    1
  2340 ;; Hardware stack levels required when called:    7
  2341 ;; This function calls:
  2342 ;;		___altoft
  2343 ;;		___awtoft
  2344 ;;		___ftadd
  2345 ;;		___ftdiv
  2346 ;;		___ftmul
  2347 ;;		___fttol
  2348 ;; This function is called by:
  2349 ;;		_setAngle
  2350 ;; This function uses a non-reentrant model
  2351 ;;
  2352                           
  2353                           	psect	text7
  2354  0005FA                     __ptext7:
  2355                           	opt stack 0
  2356  0005FA                     _angleToPulse:
  2357                           	opt stack 21
  2358                           
  2359                           ;servo.c: 36: long offset = 0;
  2360                           
  2361                           ; BSR set to: 0
  2362                           ;incstack = 0
  2363  0005FA  0E00               	movlw	0
  2364  0005FC  0100               	movlb	0	; () banked
  2365  0005FE  6FCD               	movwf	angleToPulse@offset& (0+255),b
  2366  000600  0E00               	movlw	0
  2367  000602  6FCE               	movwf	(angleToPulse@offset+1)& (0+255),b
  2368  000604  0E00               	movlw	0
  2369  000606  6FCF               	movwf	(angleToPulse@offset+2)& (0+255),b
  2370  000608  0E00               	movlw	0
  2371  00060A  6FD0               	movwf	(angleToPulse@offset+3)& (0+255),b
  2372                           
  2373                           ;servo.c: 37: long a000 = 1250;
  2374  00060C  0EE2               	movlw	226
  2375  00060E  0100               	movlb	0	; () banked
  2376  000610  6FD8               	movwf	angleToPulse@a000& (0+255),b
  2377  000612  0E04               	movlw	4
  2378  000614  6FD9               	movwf	(angleToPulse@a000+1)& (0+255),b
  2379  000616  0E00               	movlw	0
  2380  000618  6FDA               	movwf	(angleToPulse@a000+2)& (0+255),b
  2381  00061A  0E00               	movlw	0
  2382  00061C  6FDB               	movwf	(angleToPulse@a000+3)& (0+255),b
  2383                           
  2384                           ;servo.c: 38: long a180 = 6250;
  2385  00061E  0E6A               	movlw	106
  2386  000620  0100               	movlb	0	; () banked
  2387  000622  6FD1               	movwf	angleToPulse@a180& (0+255),b
  2388  000624  0E18               	movlw	24
  2389  000626  6FD2               	movwf	(angleToPulse@a180+1)& (0+255),b
  2390  000628  0E00               	movlw	0
  2391  00062A  6FD3               	movwf	(angleToPulse@a180+2)& (0+255),b
  2392  00062C  0E00               	movlw	0
  2393  00062E  6FD4               	movwf	(angleToPulse@a180+3)& (0+255),b
  2394                           
  2395                           ; BSR set to: 0
  2396                           ;servo.c: 40: return a000 + angle/180.0*(a180-a000) + offset;
  2397  000630  C0D8  F0C9         	movff	angleToPulse@a000,??_angleToPulse
  2398  000634  C0D9  F0CA         	movff	angleToPulse@a000+1,??_angleToPulse+1
  2399  000638  C0DA  F0CB         	movff	angleToPulse@a000+2,??_angleToPulse+2
  2400  00063C  C0DB  F0CC         	movff	angleToPulse@a000+3,??_angleToPulse+3
  2401  000640  0100               	movlb	0	; () banked
  2402  000642  1FC9               	comf	??_angleToPulse& (0+255),f,b
  2403  000644  1FCA               	comf	(??_angleToPulse+1)& (0+255),f,b
  2404  000646  1FCB               	comf	(??_angleToPulse+2)& (0+255),f,b
  2405  000648  1FCC               	comf	(??_angleToPulse+3)& (0+255),f,b
  2406  00064A  2BC9               	incf	??_angleToPulse& (0+255),f,b
  2407  00064C  0E00               	movlw	0
  2408  00064E  23CA               	addwfc	(??_angleToPulse+1)& (0+255),f,b
  2409  000650  23CB               	addwfc	(??_angleToPulse+2)& (0+255),f,b
  2410  000652  23CC               	addwfc	(??_angleToPulse+3)& (0+255),f,b
  2411  000654  0100               	movlb	0	; () banked
  2412  000656  51D1               	movf	angleToPulse@a180& (0+255),w,b
  2413  000658  0100               	movlb	0	; () banked
  2414  00065A  25C9               	addwf	??_angleToPulse& (0+255),w,b
  2415  00065C  0100               	movlb	0	; () banked
  2416  00065E  6F88               	movwf	___altoft@c& (0+255),b
  2417  000660  0100               	movlb	0	; () banked
  2418  000662  51D2               	movf	(angleToPulse@a180+1)& (0+255),w,b
  2419  000664  0100               	movlb	0	; () banked
  2420  000666  21CA               	addwfc	(??_angleToPulse+1)& (0+255),w,b
  2421  000668  0100               	movlb	0	; () banked
  2422  00066A  6F89               	movwf	(___altoft@c+1)& (0+255),b
  2423  00066C  0100               	movlb	0	; () banked
  2424  00066E  51D3               	movf	(angleToPulse@a180+2)& (0+255),w,b
  2425  000670  0100               	movlb	0	; () banked
  2426  000672  21CB               	addwfc	(??_angleToPulse+2)& (0+255),w,b
  2427  000674  0100               	movlb	0	; () banked
  2428  000676  6F8A               	movwf	(___altoft@c+2)& (0+255),b
  2429  000678  0100               	movlb	0	; () banked
  2430  00067A  51D4               	movf	(angleToPulse@a180+3)& (0+255),w,b
  2431  00067C  0100               	movlb	0	; () banked
  2432  00067E  21CC               	addwfc	(??_angleToPulse+3)& (0+255),w,b
  2433  000680  0100               	movlb	0	; () banked
  2434  000682  6F8B               	movwf	(___altoft@c+3)& (0+255),b
  2435  000684  EC3A  F00C         	call	___altoft	;wreg free
  2436  000688  C088  F09E         	movff	?___altoft,___ftmul@f2
  2437  00068C  C089  F09F         	movff	?___altoft+1,___ftmul@f2+1
  2438  000690  C08A  F0A0         	movff	?___altoft+2,___ftmul@f2+2
  2439  000694  0E00               	movlw	0
  2440  000696  0100               	movlb	0	; () banked
  2441  000698  6F8F               	movwf	___ftdiv@f2& (0+255),b
  2442  00069A  0E34               	movlw	52
  2443  00069C  0100               	movlb	0	; () banked
  2444  00069E  6F90               	movwf	(___ftdiv@f2+1)& (0+255),b
  2445  0006A0  0E43               	movlw	67
  2446  0006A2  0100               	movlb	0	; () banked
  2447  0006A4  6F91               	movwf	(___ftdiv@f2+2)& (0+255),b
  2448  0006A6  C0C5  F088         	movff	angleToPulse@angle,___awtoft@c
  2449  0006AA  C0C6  F089         	movff	angleToPulse@angle+1,___awtoft@c+1
  2450  0006AE  ECF6  F00E         	call	___awtoft	;wreg free
  2451  0006B2  C088  F08C         	movff	?___awtoft,___ftdiv@f1
  2452  0006B6  C089  F08D         	movff	?___awtoft+1,___ftdiv@f1+1
  2453  0006BA  C08A  F08E         	movff	?___awtoft+2,___ftdiv@f1+2
  2454  0006BE  EC07  F005         	call	___ftdiv	;wreg free
  2455  0006C2  C08C  F09B         	movff	?___ftdiv,___ftmul@f1
  2456  0006C6  C08D  F09C         	movff	?___ftdiv+1,___ftmul@f1+1
  2457  0006CA  C08E  F09D         	movff	?___ftdiv+2,___ftmul@f1+2
  2458  0006CE  ECB0  F003         	call	___ftmul	;wreg free
  2459  0006D2  C09B  F0AD         	movff	?___ftmul,___ftadd@f2
  2460  0006D6  C09C  F0AE         	movff	?___ftmul+1,___ftadd@f2+1
  2461  0006DA  C09D  F0AF         	movff	?___ftmul+2,___ftadd@f2+2
  2462  0006DE  C0D8  F088         	movff	angleToPulse@a000,___altoft@c
  2463  0006E2  C0D9  F089         	movff	angleToPulse@a000+1,___altoft@c+1
  2464  0006E6  C0DA  F08A         	movff	angleToPulse@a000+2,___altoft@c+2
  2465  0006EA  C0DB  F08B         	movff	angleToPulse@a000+3,___altoft@c+3
  2466  0006EE  EC3A  F00C         	call	___altoft	;wreg free
  2467  0006F2  C088  F0AA         	movff	?___altoft,___ftadd@f1
  2468  0006F6  C089  F0AB         	movff	?___altoft+1,___ftadd@f1+1
  2469  0006FA  C08A  F0AC         	movff	?___altoft+2,___ftadd@f1+2
  2470  0006FE  EC09  F000         	call	___ftadd	;wreg free
  2471  000702  C0AA  F0D5         	movff	?___ftadd,_angleToPulse$1232
  2472  000706  C0AB  F0D6         	movff	?___ftadd+1,_angleToPulse$1232+1
  2473  00070A  C0AC  F0D7         	movff	?___ftadd+2,_angleToPulse$1232+2
  2474                           
  2475                           ;servo.c: 40: return a000 + angle/180.0*(a180-a000) + offset;
  2476  00070E  C0CD  F088         	movff	angleToPulse@offset,___altoft@c
  2477  000712  C0CE  F089         	movff	angleToPulse@offset+1,___altoft@c+1
  2478  000716  C0CF  F08A         	movff	angleToPulse@offset+2,___altoft@c+2
  2479  00071A  C0D0  F08B         	movff	angleToPulse@offset+3,___altoft@c+3
  2480  00071E  EC3A  F00C         	call	___altoft	;wreg free
  2481  000722  C088  F0AD         	movff	?___altoft,___ftadd@f2
  2482  000726  C089  F0AE         	movff	?___altoft+1,___ftadd@f2+1
  2483  00072A  C08A  F0AF         	movff	?___altoft+2,___ftadd@f2+2
  2484  00072E  C0D5  F0AA         	movff	_angleToPulse$1232,___ftadd@f1
  2485  000732  C0D6  F0AB         	movff	_angleToPulse$1232+1,___ftadd@f1+1
  2486  000736  C0D7  F0AC         	movff	_angleToPulse$1232+2,___ftadd@f1+2
  2487  00073A  EC09  F000         	call	___ftadd	;wreg free
  2488  00073E  C0AA  F0B6         	movff	?___ftadd,___fttol@f1
  2489  000742  C0AB  F0B7         	movff	?___ftadd+1,___fttol@f1+1
  2490  000746  C0AC  F0B8         	movff	?___ftadd+2,___fttol@f1+2
  2491  00074A  ECAD  F005         	call	___fttol	;wreg free
  2492  00074E  C0B6  F0C5         	movff	?___fttol,?_angleToPulse
  2493  000752  C0B7  F0C6         	movff	?___fttol+1,?_angleToPulse+1
  2494  000756  C0B8  F0C7         	movff	?___fttol+2,?_angleToPulse+2
  2495  00075A  C0B9  F0C8         	movff	?___fttol+3,?_angleToPulse+3
  2496  00075E  0012               	return	
  2497  000760                     __end_of_angleToPulse:
  2498                           	opt stack 0
  2499                           tblptru	equ	0xFF8
  2500                           tblptrh	equ	0xFF7
  2501                           tblptrl	equ	0xFF6
  2502                           tablat	equ	0xFF5
  2503                           intcon	equ	0xFF2
  2504                           postinc0	equ	0xFEE
  2505                           wreg	equ	0xFE8
  2506                           postdec1	equ	0xFE5
  2507                           fsr1l	equ	0xFE1
  2508                           postinc2	equ	0xFDE
  2509                           postdec2	equ	0xFDD
  2510                           fsr2h	equ	0xFDA
  2511                           fsr2l	equ	0xFD9
  2512                           status	equ	0xFD8
  2513                           
  2514 ;; *************** function ___fttol *****************
  2515 ;; Defined at:
  2516 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  2517 ;; Parameters:    Size  Location     Type
  2518 ;;  f1              3   54[BANK0 ] float 
  2519 ;; Auto vars:     Size  Location     Type
  2520 ;;  lval            4   64[BANK0 ] unsigned long 
  2521 ;;  exp1            1   68[BANK0 ] unsigned char 
  2522 ;;  sign1           1   63[BANK0 ] unsigned char 
  2523 ;; Return value:  Size  Location     Type
  2524 ;;                  4   54[BANK0 ] long 
  2525 ;; Registers used:
  2526 ;;		wreg, status,2, status,0
  2527 ;; Tracked objects:
  2528 ;;		On entry : 0/0
  2529 ;;		On exit  : 0/0
  2530 ;;		Unchanged: 0/0
  2531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2532 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2533 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2534 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2535 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2536 ;;Total ram usage:       15 bytes
  2537 ;; Hardware stack levels used:    1
  2538 ;; Hardware stack levels required when called:    5
  2539 ;; This function calls:
  2540 ;;		Nothing
  2541 ;; This function is called by:
  2542 ;;		_angleToPulse
  2543 ;; This function uses a non-reentrant model
  2544 ;;
  2545                           
  2546                           	psect	text8
  2547  000B5A                     __ptext8:
  2548                           	opt stack 0
  2549  000B5A                     ___fttol:
  2550                           	opt stack 22
  2551                           
  2552                           ;incstack = 0
  2553  000B5A  C0B8  F0BA         	movff	___fttol@f1+2,??___fttol
  2554  000B5E  0100               	movlb	0	; () banked
  2555  000B60  6BBB               	clrf	(??___fttol+1)& (0+255),b
  2556  000B62  6BBC               	clrf	(??___fttol+2)& (0+255),b
  2557  000B64  0100               	movlb	0	; () banked
  2558  000B66  35B7               	rlcf	(___fttol@f1+1)& (0+255),w,b
  2559  000B68  0100               	movlb	0	; () banked
  2560  000B6A  37BA               	rlcf	??___fttol& (0+255),f,b
  2561  000B6C  E301               	bnc	u2401
  2562  000B6E  81BB               	bsf	(??___fttol+1)& (0+255),0,b
  2563  000B70                     u2401:
  2564  000B70  0100               	movlb	0	; () banked
  2565  000B72  51BA               	movf	??___fttol& (0+255),w,b
  2566  000B74  0100               	movlb	0	; () banked
  2567  000B76  6FC4               	movwf	___fttol@exp1& (0+255),b
  2568  000B78  0100               	movlb	0	; () banked
  2569  000B7A  51C4               	movf	___fttol@exp1& (0+255),w,b
  2570  000B7C  A4D8               	btfss	status,2,c
  2571  000B7E  D00A               	goto	l3034
  2572                           
  2573                           ; BSR set to: 0
  2574  000B80  0E00               	movlw	0
  2575  000B82  0100               	movlb	0	; () banked
  2576  000B84  6FB6               	movwf	?___fttol& (0+255),b
  2577  000B86  0E00               	movlw	0
  2578  000B88  6FB7               	movwf	(?___fttol+1)& (0+255),b
  2579  000B8A  0E00               	movlw	0
  2580  000B8C  6FB8               	movwf	(?___fttol+2)& (0+255),b
  2581  000B8E  0E00               	movlw	0
  2582  000B90  6FB9               	movwf	(?___fttol+3)& (0+255),b
  2583                           
  2584                           ; BSR set to: 0
  2585  000B92  0012               	return	
  2586  000B94                     l3034:
  2587                           
  2588                           ; BSR set to: 0
  2589  000B94  0E17               	movlw	23
  2590  000B96  0100               	movlb	0	; () banked
  2591  000B98  6FBA               	movwf	??___fttol& (0+255),b
  2592  000B9A  C0B6  F0BB         	movff	___fttol@f1,??___fttol+1
  2593  000B9E  C0B7  F0BC         	movff	___fttol@f1+1,??___fttol+2
  2594  000BA2  C0B8  F0BD         	movff	___fttol@f1+2,??___fttol+3
  2595  000BA6  0100               	movlb	0	; () banked
  2596  000BA8  29BA               	incf	??___fttol& (0+255),w,b
  2597  000BAA  0100               	movlb	0	; () banked
  2598  000BAC  6FBE               	movwf	(??___fttol+4)& (0+255),b
  2599  000BAE  D005               	goto	u2420
  2600  000BB0                     u2425:
  2601  000BB0  0100               	movlb	0	; () banked
  2602  000BB2  90D8               	bcf	status,0,c
  2603  000BB4  33BD               	rrcf	(??___fttol+3)& (0+255),f,b
  2604  000BB6  33BC               	rrcf	(??___fttol+2)& (0+255),f,b
  2605  000BB8  33BB               	rrcf	(??___fttol+1)& (0+255),f,b
  2606  000BBA                     u2420:
  2607  000BBA  0100               	movlb	0	; () banked
  2608  000BBC  2FBE               	decfsz	(??___fttol+4)& (0+255),f,b
  2609  000BBE  D7F8               	goto	u2425
  2610  000BC0  0100               	movlb	0	; () banked
  2611  000BC2  51BB               	movf	(??___fttol+1)& (0+255),w,b
  2612  000BC4  0100               	movlb	0	; () banked
  2613  000BC6  6FBF               	movwf	___fttol@sign1& (0+255),b
  2614                           
  2615                           ; BSR set to: 0
  2616  000BC8  0100               	movlb	0	; () banked
  2617  000BCA  8FB7               	bsf	(___fttol@f1+1)& (0+255),7,b
  2618                           
  2619                           ; BSR set to: 0
  2620  000BCC  0EFF               	movlw	255
  2621  000BCE  0100               	movlb	0	; () banked
  2622  000BD0  17B6               	andwf	___fttol@f1& (0+255),f,b
  2623  000BD2  0EFF               	movlw	255
  2624  000BD4  0100               	movlb	0	; () banked
  2625  000BD6  17B7               	andwf	(___fttol@f1+1)& (0+255),f,b
  2626  000BD8  0E00               	movlw	0
  2627  000BDA  0100               	movlb	0	; () banked
  2628  000BDC  17B8               	andwf	(___fttol@f1+2)& (0+255),f,b
  2629                           
  2630                           ; BSR set to: 0
  2631  000BDE  0100               	movlb	0	; () banked
  2632  000BE0  51B6               	movf	___fttol@f1& (0+255),w,b
  2633  000BE2  0100               	movlb	0	; () banked
  2634  000BE4  6FC0               	movwf	___fttol@lval& (0+255),b
  2635  000BE6  0100               	movlb	0	; () banked
  2636  000BE8  51B7               	movf	(___fttol@f1+1)& (0+255),w,b
  2637  000BEA  0100               	movlb	0	; () banked
  2638  000BEC  6FC1               	movwf	(___fttol@lval+1)& (0+255),b
  2639  000BEE  0100               	movlb	0	; () banked
  2640  000BF0  51B8               	movf	(___fttol@f1+2)& (0+255),w,b
  2641  000BF2  0100               	movlb	0	; () banked
  2642  000BF4  6FC2               	movwf	(___fttol@lval+2)& (0+255),b
  2643  000BF6  0100               	movlb	0	; () banked
  2644  000BF8  6BC3               	clrf	(___fttol@lval+3)& (0+255),b
  2645                           
  2646                           ; BSR set to: 0
  2647  000BFA  0E8E               	movlw	142
  2648  000BFC  0100               	movlb	0	; () banked
  2649  000BFE  5FC4               	subwf	___fttol@exp1& (0+255),f,b
  2650                           
  2651                           ; BSR set to: 0
  2652  000C00  0100               	movlb	0	; () banked
  2653  000C02  AFC4               	btfss	___fttol@exp1& (0+255),7,b
  2654  000C04  D01A               	goto	l3056
  2655                           
  2656                           ; BSR set to: 0
  2657  000C06  0100               	movlb	0	; () banked
  2658  000C08  51C4               	movf	___fttol@exp1& (0+255),w,b
  2659  000C0A  0A80               	xorlw	128
  2660  000C0C  0F8F               	addlw	143
  2661  000C0E  B0D8               	btfsc	status,0,c
  2662  000C10  D00A               	goto	l3052
  2663                           
  2664                           ; BSR set to: 0
  2665  000C12  0E00               	movlw	0
  2666  000C14  0100               	movlb	0	; () banked
  2667  000C16  6FB6               	movwf	?___fttol& (0+255),b
  2668  000C18  0E00               	movlw	0
  2669  000C1A  6FB7               	movwf	(?___fttol+1)& (0+255),b
  2670  000C1C  0E00               	movlw	0
  2671  000C1E  6FB8               	movwf	(?___fttol+2)& (0+255),b
  2672  000C20  0E00               	movlw	0
  2673  000C22  6FB9               	movwf	(?___fttol+3)& (0+255),b
  2674                           
  2675                           ; BSR set to: 0
  2676  000C24  0012               	return	
  2677  000C26                     l3052:
  2678                           
  2679                           ; BSR set to: 0
  2680  000C26  0100               	movlb	0	; () banked
  2681  000C28  90D8               	bcf	status,0,c
  2682  000C2A  33C3               	rrcf	(___fttol@lval+3)& (0+255),f,b
  2683  000C2C  33C2               	rrcf	(___fttol@lval+2)& (0+255),f,b
  2684  000C2E  33C1               	rrcf	(___fttol@lval+1)& (0+255),f,b
  2685  000C30  33C0               	rrcf	___fttol@lval& (0+255),f,b
  2686                           
  2687                           ; BSR set to: 0
  2688  000C32  0100               	movlb	0	; () banked
  2689  000C34  3FC4               	incfsz	___fttol@exp1& (0+255),f,b
  2690  000C36  D7F7               	goto	l3052
  2691                           
  2692                           ; BSR set to: 0
  2693  000C38  D01B               	goto	l3066
  2694  000C3A                     l3056:
  2695                           
  2696                           ; BSR set to: 0
  2697  000C3A  0E17               	movlw	23
  2698  000C3C  0100               	movlb	0	; () banked
  2699  000C3E  65C4               	cpfsgt	___fttol@exp1& (0+255),b
  2700  000C40  D012               	goto	l3064
  2701                           
  2702                           ; BSR set to: 0
  2703  000C42  0E00               	movlw	0
  2704  000C44  0100               	movlb	0	; () banked
  2705  000C46  6FB6               	movwf	?___fttol& (0+255),b
  2706  000C48  0E00               	movlw	0
  2707  000C4A  6FB7               	movwf	(?___fttol+1)& (0+255),b
  2708  000C4C  0E00               	movlw	0
  2709  000C4E  6FB8               	movwf	(?___fttol+2)& (0+255),b
  2710  000C50  0E00               	movlw	0
  2711  000C52  6FB9               	movwf	(?___fttol+3)& (0+255),b
  2712                           
  2713                           ; BSR set to: 0
  2714  000C54  0012               	return	
  2715  000C56                     l3062:
  2716                           
  2717                           ; BSR set to: 0
  2718  000C56  0100               	movlb	0	; () banked
  2719  000C58  90D8               	bcf	status,0,c
  2720  000C5A  37C0               	rlcf	___fttol@lval& (0+255),f,b
  2721  000C5C  37C1               	rlcf	(___fttol@lval+1)& (0+255),f,b
  2722  000C5E  37C2               	rlcf	(___fttol@lval+2)& (0+255),f,b
  2723  000C60  37C3               	rlcf	(___fttol@lval+3)& (0+255),f,b
  2724  000C62  0100               	movlb	0	; () banked
  2725  000C64  07C4               	decf	___fttol@exp1& (0+255),f,b
  2726  000C66                     l3064:
  2727                           
  2728                           ; BSR set to: 0
  2729  000C66  0100               	movlb	0	; () banked
  2730  000C68  51C4               	movf	___fttol@exp1& (0+255),w,b
  2731  000C6A  0100               	movlb	0	; () banked
  2732  000C6C  A4D8               	btfss	status,2,c
  2733  000C6E  D7F3               	goto	l3062
  2734  000C70                     l3066:
  2735                           
  2736                           ; BSR set to: 0
  2737  000C70  0100               	movlb	0	; () banked
  2738  000C72  51BF               	movf	___fttol@sign1& (0+255),w,b
  2739  000C74  0100               	movlb	0	; () banked
  2740  000C76  B4D8               	btfsc	status,2,c
  2741  000C78  D009               	goto	l3070
  2742                           
  2743                           ; BSR set to: 0
  2744  000C7A  0100               	movlb	0	; () banked
  2745  000C7C  1FC3               	comf	(___fttol@lval+3)& (0+255),f,b
  2746  000C7E  1FC2               	comf	(___fttol@lval+2)& (0+255),f,b
  2747  000C80  1FC1               	comf	(___fttol@lval+1)& (0+255),f,b
  2748  000C82  6DC0               	negf	___fttol@lval& (0+255),b
  2749  000C84  0E00               	movlw	0
  2750  000C86  23C1               	addwfc	(___fttol@lval+1)& (0+255),f,b
  2751  000C88  23C2               	addwfc	(___fttol@lval+2)& (0+255),f,b
  2752  000C8A  23C3               	addwfc	(___fttol@lval+3)& (0+255),f,b
  2753  000C8C                     l3070:
  2754                           
  2755                           ; BSR set to: 0
  2756  000C8C  C0C0  F0B6         	movff	___fttol@lval,?___fttol
  2757  000C90  C0C1  F0B7         	movff	___fttol@lval+1,?___fttol+1
  2758  000C94  C0C2  F0B8         	movff	___fttol@lval+2,?___fttol+2
  2759  000C98  C0C3  F0B9         	movff	___fttol@lval+3,?___fttol+3
  2760  000C9C  0012               	return	
  2761  000C9E                     __end_of___fttol:
  2762                           	opt stack 0
  2763                           tblptru	equ	0xFF8
  2764                           tblptrh	equ	0xFF7
  2765                           tblptrl	equ	0xFF6
  2766                           tablat	equ	0xFF5
  2767                           intcon	equ	0xFF2
  2768                           postinc0	equ	0xFEE
  2769                           wreg	equ	0xFE8
  2770                           postdec1	equ	0xFE5
  2771                           fsr1l	equ	0xFE1
  2772                           postinc2	equ	0xFDE
  2773                           postdec2	equ	0xFDD
  2774                           fsr2h	equ	0xFDA
  2775                           fsr2l	equ	0xFD9
  2776                           status	equ	0xFD8
  2777                           
  2778 ;; *************** function ___ftmul *****************
  2779 ;; Defined at:
  2780 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  2781 ;; Parameters:    Size  Location     Type
  2782 ;;  f1              3   27[BANK0 ] float 
  2783 ;;  f2              3   30[BANK0 ] float 
  2784 ;; Auto vars:     Size  Location     Type
  2785 ;;  f3_as_produc    3   37[BANK0 ] unsigned um
  2786 ;;  sign            1   41[BANK0 ] unsigned char 
  2787 ;;  cntr            1   40[BANK0 ] unsigned char 
  2788 ;;  exp             1   36[BANK0 ] unsigned char 
  2789 ;; Return value:  Size  Location     Type
  2790 ;;                  3   27[BANK0 ] float 
  2791 ;; Registers used:
  2792 ;;		wreg, status,2, status,0, cstack
  2793 ;; Tracked objects:
  2794 ;;		On entry : 0/0
  2795 ;;		On exit  : 0/0
  2796 ;;		Unchanged: 0/0
  2797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2798 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2799 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2800 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2801 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2802 ;;Total ram usage:       15 bytes
  2803 ;; Hardware stack levels used:    1
  2804 ;; Hardware stack levels required when called:    6
  2805 ;; This function calls:
  2806 ;;		___ftpack
  2807 ;; This function is called by:
  2808 ;;		_angleToPulse
  2809 ;; This function uses a non-reentrant model
  2810 ;;
  2811                           
  2812                           	psect	text9
  2813  000760                     __ptext9:
  2814                           	opt stack 0
  2815  000760                     ___ftmul:
  2816                           	opt stack 21
  2817                           
  2818                           ; BSR set to: 0
  2819                           ;incstack = 0
  2820  000760  C09D  F0A1         	movff	___ftmul@f1+2,??___ftmul
  2821  000764  0100               	movlb	0	; () banked
  2822  000766  6BA2               	clrf	(??___ftmul+1)& (0+255),b
  2823  000768  6BA3               	clrf	(??___ftmul+2)& (0+255),b
  2824  00076A  0100               	movlb	0	; () banked
  2825  00076C  359C               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  2826  00076E  0100               	movlb	0	; () banked
  2827  000770  37A1               	rlcf	??___ftmul& (0+255),f,b
  2828  000772  E301               	bnc	u2331
  2829  000774  81A2               	bsf	(??___ftmul+1)& (0+255),0,b
  2830  000776                     u2331:
  2831  000776  0100               	movlb	0	; () banked
  2832  000778  51A1               	movf	??___ftmul& (0+255),w,b
  2833  00077A  0100               	movlb	0	; () banked
  2834  00077C  6FA4               	movwf	___ftmul@exp& (0+255),b
  2835  00077E  0100               	movlb	0	; () banked
  2836  000780  51A4               	movf	___ftmul@exp& (0+255),w,b
  2837  000782  A4D8               	btfss	status,2,c
  2838  000784  D00A               	goto	l2974
  2839                           
  2840                           ; BSR set to: 0
  2841  000786  0E00               	movlw	0
  2842  000788  0100               	movlb	0	; () banked
  2843  00078A  6F9B               	movwf	?___ftmul& (0+255),b
  2844  00078C  0E00               	movlw	0
  2845  00078E  0100               	movlb	0	; () banked
  2846  000790  6F9C               	movwf	(?___ftmul+1)& (0+255),b
  2847  000792  0E00               	movlw	0
  2848  000794  0100               	movlb	0	; () banked
  2849  000796  6F9D               	movwf	(?___ftmul+2)& (0+255),b
  2850                           
  2851                           ; BSR set to: 0
  2852  000798  0012               	return	
  2853  00079A                     l2974:
  2854                           
  2855                           ; BSR set to: 0
  2856  00079A  C0A0  F0A1         	movff	___ftmul@f2+2,??___ftmul
  2857  00079E  0100               	movlb	0	; () banked
  2858  0007A0  6BA2               	clrf	(??___ftmul+1)& (0+255),b
  2859  0007A2  6BA3               	clrf	(??___ftmul+2)& (0+255),b
  2860  0007A4  0100               	movlb	0	; () banked
  2861  0007A6  359F               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  2862  0007A8  0100               	movlb	0	; () banked
  2863  0007AA  37A1               	rlcf	??___ftmul& (0+255),f,b
  2864  0007AC  E301               	bnc	u2351
  2865  0007AE  81A2               	bsf	(??___ftmul+1)& (0+255),0,b
  2866  0007B0                     u2351:
  2867  0007B0  0100               	movlb	0	; () banked
  2868  0007B2  51A1               	movf	??___ftmul& (0+255),w,b
  2869  0007B4  0100               	movlb	0	; () banked
  2870  0007B6  6FA9               	movwf	___ftmul@sign& (0+255),b
  2871  0007B8  0100               	movlb	0	; () banked
  2872  0007BA  51A9               	movf	___ftmul@sign& (0+255),w,b
  2873  0007BC  A4D8               	btfss	status,2,c
  2874  0007BE  D00A               	goto	l2980
  2875                           
  2876                           ; BSR set to: 0
  2877  0007C0  0E00               	movlw	0
  2878  0007C2  0100               	movlb	0	; () banked
  2879  0007C4  6F9B               	movwf	?___ftmul& (0+255),b
  2880  0007C6  0E00               	movlw	0
  2881  0007C8  0100               	movlb	0	; () banked
  2882  0007CA  6F9C               	movwf	(?___ftmul+1)& (0+255),b
  2883  0007CC  0E00               	movlw	0
  2884  0007CE  0100               	movlb	0	; () banked
  2885  0007D0  6F9D               	movwf	(?___ftmul+2)& (0+255),b
  2886                           
  2887                           ; BSR set to: 0
  2888  0007D2  0012               	return	
  2889  0007D4                     l2980:
  2890                           
  2891                           ; BSR set to: 0
  2892  0007D4  0100               	movlb	0	; () banked
  2893  0007D6  51A9               	movf	___ftmul@sign& (0+255),w,b
  2894  0007D8  0F7B               	addlw	123
  2895  0007DA  0100               	movlb	0	; () banked
  2896  0007DC  27A4               	addwf	___ftmul@exp& (0+255),f,b
  2897                           
  2898                           ; BSR set to: 0
  2899  0007DE  C09D  F0A9         	movff	___ftmul@f1+2,___ftmul@sign
  2900  0007E2  0100               	movlb	0	; () banked
  2901  0007E4  51A0               	movf	(___ftmul@f2+2)& (0+255),w,b
  2902  0007E6  0100               	movlb	0	; () banked
  2903  0007E8  1BA9               	xorwf	___ftmul@sign& (0+255),f,b
  2904  0007EA  0E80               	movlw	128
  2905  0007EC  0100               	movlb	0	; () banked
  2906  0007EE  17A9               	andwf	___ftmul@sign& (0+255),f,b
  2907                           
  2908                           ; BSR set to: 0
  2909  0007F0  0100               	movlb	0	; () banked
  2910  0007F2  8F9C               	bsf	(___ftmul@f1+1)& (0+255),7,b
  2911                           
  2912                           ; BSR set to: 0
  2913  0007F4  0100               	movlb	0	; () banked
  2914  0007F6  8F9F               	bsf	(___ftmul@f2+1)& (0+255),7,b
  2915                           
  2916                           ; BSR set to: 0
  2917  0007F8  0EFF               	movlw	255
  2918  0007FA  0100               	movlb	0	; () banked
  2919  0007FC  179E               	andwf	___ftmul@f2& (0+255),f,b
  2920  0007FE  0EFF               	movlw	255
  2921  000800  0100               	movlb	0	; () banked
  2922  000802  179F               	andwf	(___ftmul@f2+1)& (0+255),f,b
  2923  000804  0E00               	movlw	0
  2924  000806  0100               	movlb	0	; () banked
  2925  000808  17A0               	andwf	(___ftmul@f2+2)& (0+255),f,b
  2926                           
  2927                           ; BSR set to: 0
  2928  00080A  0E00               	movlw	0
  2929  00080C  0100               	movlb	0	; () banked
  2930  00080E  6FA5               	movwf	___ftmul@f3_as_product& (0+255),b
  2931  000810  0E00               	movlw	0
  2932  000812  0100               	movlb	0	; () banked
  2933  000814  6FA6               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  2934  000816  0E00               	movlw	0
  2935  000818  0100               	movlb	0	; () banked
  2936  00081A  6FA7               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  2937                           
  2938                           ; BSR set to: 0
  2939  00081C  0E07               	movlw	7
  2940  00081E  0100               	movlb	0	; () banked
  2941  000820  6FA8               	movwf	___ftmul@cntr& (0+255),b
  2942  000822                     l2994:
  2943                           
  2944                           ; BSR set to: 0
  2945  000822  0100               	movlb	0	; () banked
  2946  000824  A19B               	btfss	___ftmul@f1& (0+255),0,b
  2947  000826  D00C               	goto	l2998
  2948                           
  2949                           ; BSR set to: 0
  2950  000828  0100               	movlb	0	; () banked
  2951  00082A  519E               	movf	___ftmul@f2& (0+255),w,b
  2952  00082C  0100               	movlb	0	; () banked
  2953  00082E  27A5               	addwf	___ftmul@f3_as_product& (0+255),f,b
  2954  000830  0100               	movlb	0	; () banked
  2955  000832  519F               	movf	(___ftmul@f2+1)& (0+255),w,b
  2956  000834  0100               	movlb	0	; () banked
  2957  000836  23A6               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  2958  000838  0100               	movlb	0	; () banked
  2959  00083A  51A0               	movf	(___ftmul@f2+2)& (0+255),w,b
  2960  00083C  0100               	movlb	0	; () banked
  2961  00083E  23A7               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  2962  000840                     l2998:
  2963                           
  2964                           ; BSR set to: 0
  2965  000840  0100               	movlb	0	; () banked
  2966  000842  90D8               	bcf	status,0,c
  2967  000844  339D               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  2968  000846  339C               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  2969  000848  339B               	rrcf	___ftmul@f1& (0+255),f,b
  2970  00084A  0100               	movlb	0	; () banked
  2971  00084C  90D8               	bcf	status,0,c
  2972  00084E  379E               	rlcf	___ftmul@f2& (0+255),f,b
  2973  000850  379F               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  2974  000852  37A0               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  2975                           
  2976                           ; BSR set to: 0
  2977  000854  0100               	movlb	0	; () banked
  2978  000856  2FA8               	decfsz	___ftmul@cntr& (0+255),f,b
  2979  000858  D7E4               	goto	l2994
  2980                           
  2981                           ; BSR set to: 0
  2982                           
  2983                           ; BSR set to: 0
  2984  00085A  0E09               	movlw	9
  2985  00085C  0100               	movlb	0	; () banked
  2986  00085E  6FA8               	movwf	___ftmul@cntr& (0+255),b
  2987  000860                     l3004:
  2988                           
  2989                           ; BSR set to: 0
  2990  000860  0100               	movlb	0	; () banked
  2991  000862  A19B               	btfss	___ftmul@f1& (0+255),0,b
  2992  000864  D00C               	goto	l3008
  2993                           
  2994                           ; BSR set to: 0
  2995  000866  0100               	movlb	0	; () banked
  2996  000868  519E               	movf	___ftmul@f2& (0+255),w,b
  2997  00086A  0100               	movlb	0	; () banked
  2998  00086C  27A5               	addwf	___ftmul@f3_as_product& (0+255),f,b
  2999  00086E  0100               	movlb	0	; () banked
  3000  000870  519F               	movf	(___ftmul@f2+1)& (0+255),w,b
  3001  000872  0100               	movlb	0	; () banked
  3002  000874  23A6               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3003  000876  0100               	movlb	0	; () banked
  3004  000878  51A0               	movf	(___ftmul@f2+2)& (0+255),w,b
  3005  00087A  0100               	movlb	0	; () banked
  3006  00087C  23A7               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3007  00087E                     l3008:
  3008                           
  3009                           ; BSR set to: 0
  3010  00087E  0100               	movlb	0	; () banked
  3011  000880  90D8               	bcf	status,0,c
  3012  000882  339D               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  3013  000884  339C               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  3014  000886  339B               	rrcf	___ftmul@f1& (0+255),f,b
  3015  000888  0100               	movlb	0	; () banked
  3016  00088A  90D8               	bcf	status,0,c
  3017  00088C  33A7               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  3018  00088E  33A6               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  3019  000890  33A5               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  3020                           
  3021                           ; BSR set to: 0
  3022  000892  0100               	movlb	0	; () banked
  3023  000894  2FA8               	decfsz	___ftmul@cntr& (0+255),f,b
  3024  000896  D7E4               	goto	l3004
  3025                           
  3026                           ; BSR set to: 0
  3027                           
  3028                           ; BSR set to: 0
  3029  000898  C0A5  F080         	movff	___ftmul@f3_as_product,___ftpack@arg
  3030  00089C  C0A6  F081         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3031  0008A0  C0A7  F082         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3032  0008A4  C0A4  F083         	movff	___ftmul@exp,___ftpack@exp
  3033  0008A8  C0A9  F084         	movff	___ftmul@sign,___ftpack@sign
  3034  0008AC  EC8D  F007         	call	___ftpack	;wreg free
  3035  0008B0  C080  F09B         	movff	?___ftpack,?___ftmul
  3036  0008B4  C081  F09C         	movff	?___ftpack+1,?___ftmul+1
  3037  0008B8  C082  F09D         	movff	?___ftpack+2,?___ftmul+2
  3038  0008BC  0012               	return	
  3039  0008BE                     __end_of___ftmul:
  3040                           	opt stack 0
  3041                           tblptru	equ	0xFF8
  3042                           tblptrh	equ	0xFF7
  3043                           tblptrl	equ	0xFF6
  3044                           tablat	equ	0xFF5
  3045                           intcon	equ	0xFF2
  3046                           postinc0	equ	0xFEE
  3047                           wreg	equ	0xFE8
  3048                           postdec1	equ	0xFE5
  3049                           fsr1l	equ	0xFE1
  3050                           postinc2	equ	0xFDE
  3051                           postdec2	equ	0xFDD
  3052                           fsr2h	equ	0xFDA
  3053                           fsr2l	equ	0xFD9
  3054                           status	equ	0xFD8
  3055                           
  3056 ;; *************** function ___ftdiv *****************
  3057 ;; Defined at:
  3058 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  3059 ;; Parameters:    Size  Location     Type
  3060 ;;  f1              3   12[BANK0 ] float 
  3061 ;;  f2              3   15[BANK0 ] float 
  3062 ;; Auto vars:     Size  Location     Type
  3063 ;;  f3              3   22[BANK0 ] float 
  3064 ;;  sign            1   26[BANK0 ] unsigned char 
  3065 ;;  exp             1   25[BANK0 ] unsigned char 
  3066 ;;  cntr            1   21[BANK0 ] unsigned char 
  3067 ;; Return value:  Size  Location     Type
  3068 ;;                  3   12[BANK0 ] float 
  3069 ;; Registers used:
  3070 ;;		wreg, status,2, status,0, cstack
  3071 ;; Tracked objects:
  3072 ;;		On entry : 0/0
  3073 ;;		On exit  : 0/0
  3074 ;;		Unchanged: 0/0
  3075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3076 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3077 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3078 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3079 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3080 ;;Total ram usage:       15 bytes
  3081 ;; Hardware stack levels used:    1
  3082 ;; Hardware stack levels required when called:    6
  3083 ;; This function calls:
  3084 ;;		___ftpack
  3085 ;; This function is called by:
  3086 ;;		_angleToPulse
  3087 ;;		_testFrequency
  3088 ;; This function uses a non-reentrant model
  3089 ;;
  3090                           
  3091                           	psect	text10
  3092  000A0E                     __ptext10:
  3093                           	opt stack 0
  3094  000A0E                     ___ftdiv:
  3095                           	opt stack 21
  3096                           
  3097                           ;incstack = 0
  3098  000A0E  C08E  F092         	movff	___ftdiv@f1+2,??___ftdiv
  3099  000A12  0100               	movlb	0	; () banked
  3100  000A14  6B93               	clrf	(??___ftdiv+1)& (0+255),b
  3101  000A16  6B94               	clrf	(??___ftdiv+2)& (0+255),b
  3102  000A18  0100               	movlb	0	; () banked
  3103  000A1A  358D               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  3104  000A1C  0100               	movlb	0	; () banked
  3105  000A1E  3792               	rlcf	??___ftdiv& (0+255),f,b
  3106  000A20  E301               	bnc	u2281
  3107  000A22  8193               	bsf	(??___ftdiv+1)& (0+255),0,b
  3108  000A24                     u2281:
  3109  000A24  0100               	movlb	0	; () banked
  3110  000A26  5192               	movf	??___ftdiv& (0+255),w,b
  3111  000A28  0100               	movlb	0	; () banked
  3112  000A2A  6F99               	movwf	___ftdiv@exp& (0+255),b
  3113  000A2C  0100               	movlb	0	; () banked
  3114  000A2E  5199               	movf	___ftdiv@exp& (0+255),w,b
  3115  000A30  A4D8               	btfss	status,2,c
  3116  000A32  D00A               	goto	l2928
  3117                           
  3118                           ; BSR set to: 0
  3119  000A34  0E00               	movlw	0
  3120  000A36  0100               	movlb	0	; () banked
  3121  000A38  6F8C               	movwf	?___ftdiv& (0+255),b
  3122  000A3A  0E00               	movlw	0
  3123  000A3C  0100               	movlb	0	; () banked
  3124  000A3E  6F8D               	movwf	(?___ftdiv+1)& (0+255),b
  3125  000A40  0E00               	movlw	0
  3126  000A42  0100               	movlb	0	; () banked
  3127  000A44  6F8E               	movwf	(?___ftdiv+2)& (0+255),b
  3128                           
  3129                           ; BSR set to: 0
  3130  000A46  0012               	return	
  3131  000A48                     l2928:
  3132                           
  3133                           ; BSR set to: 0
  3134  000A48  C091  F092         	movff	___ftdiv@f2+2,??___ftdiv
  3135  000A4C  0100               	movlb	0	; () banked
  3136  000A4E  6B93               	clrf	(??___ftdiv+1)& (0+255),b
  3137  000A50  6B94               	clrf	(??___ftdiv+2)& (0+255),b
  3138  000A52  0100               	movlb	0	; () banked
  3139  000A54  3590               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  3140  000A56  0100               	movlb	0	; () banked
  3141  000A58  3792               	rlcf	??___ftdiv& (0+255),f,b
  3142  000A5A  E301               	bnc	u2301
  3143  000A5C  8193               	bsf	(??___ftdiv+1)& (0+255),0,b
  3144  000A5E                     u2301:
  3145  000A5E  0100               	movlb	0	; () banked
  3146  000A60  5192               	movf	??___ftdiv& (0+255),w,b
  3147  000A62  0100               	movlb	0	; () banked
  3148  000A64  6F9A               	movwf	___ftdiv@sign& (0+255),b
  3149  000A66  0100               	movlb	0	; () banked
  3150  000A68  519A               	movf	___ftdiv@sign& (0+255),w,b
  3151  000A6A  A4D8               	btfss	status,2,c
  3152  000A6C  D00A               	goto	l2934
  3153                           
  3154                           ; BSR set to: 0
  3155  000A6E  0E00               	movlw	0
  3156  000A70  0100               	movlb	0	; () banked
  3157  000A72  6F8C               	movwf	?___ftdiv& (0+255),b
  3158  000A74  0E00               	movlw	0
  3159  000A76  0100               	movlb	0	; () banked
  3160  000A78  6F8D               	movwf	(?___ftdiv+1)& (0+255),b
  3161  000A7A  0E00               	movlw	0
  3162  000A7C  0100               	movlb	0	; () banked
  3163  000A7E  6F8E               	movwf	(?___ftdiv+2)& (0+255),b
  3164                           
  3165                           ; BSR set to: 0
  3166  000A80  0012               	return	
  3167  000A82                     l2934:
  3168                           
  3169                           ; BSR set to: 0
  3170  000A82  0E00               	movlw	0
  3171  000A84  0100               	movlb	0	; () banked
  3172  000A86  6F96               	movwf	___ftdiv@f3& (0+255),b
  3173  000A88  0E00               	movlw	0
  3174  000A8A  0100               	movlb	0	; () banked
  3175  000A8C  6F97               	movwf	(___ftdiv@f3+1)& (0+255),b
  3176  000A8E  0E00               	movlw	0
  3177  000A90  0100               	movlb	0	; () banked
  3178  000A92  6F98               	movwf	(___ftdiv@f3+2)& (0+255),b
  3179                           
  3180                           ; BSR set to: 0
  3181  000A94  0100               	movlb	0	; () banked
  3182  000A96  519A               	movf	___ftdiv@sign& (0+255),w,b
  3183  000A98  0F89               	addlw	137
  3184  000A9A  0100               	movlb	0	; () banked
  3185  000A9C  5F99               	subwf	___ftdiv@exp& (0+255),f,b
  3186                           
  3187                           ; BSR set to: 0
  3188  000A9E  C08E  F09A         	movff	___ftdiv@f1+2,___ftdiv@sign
  3189                           
  3190                           ; BSR set to: 0
  3191  000AA2  0100               	movlb	0	; () banked
  3192  000AA4  5191               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3193  000AA6  0100               	movlb	0	; () banked
  3194  000AA8  1B9A               	xorwf	___ftdiv@sign& (0+255),f,b
  3195                           
  3196                           ; BSR set to: 0
  3197  000AAA  0E80               	movlw	128
  3198  000AAC  0100               	movlb	0	; () banked
  3199  000AAE  179A               	andwf	___ftdiv@sign& (0+255),f,b
  3200                           
  3201                           ; BSR set to: 0
  3202  000AB0  0100               	movlb	0	; () banked
  3203  000AB2  8F8D               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  3204                           
  3205                           ; BSR set to: 0
  3206  000AB4  0EFF               	movlw	255
  3207  000AB6  0100               	movlb	0	; () banked
  3208  000AB8  178C               	andwf	___ftdiv@f1& (0+255),f,b
  3209  000ABA  0EFF               	movlw	255
  3210  000ABC  0100               	movlb	0	; () banked
  3211  000ABE  178D               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  3212  000AC0  0E00               	movlw	0
  3213  000AC2  0100               	movlb	0	; () banked
  3214  000AC4  178E               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  3215                           
  3216                           ; BSR set to: 0
  3217  000AC6  0100               	movlb	0	; () banked
  3218  000AC8  8F90               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  3219                           
  3220                           ; BSR set to: 0
  3221  000ACA  0EFF               	movlw	255
  3222  000ACC  0100               	movlb	0	; () banked
  3223  000ACE  178F               	andwf	___ftdiv@f2& (0+255),f,b
  3224  000AD0  0EFF               	movlw	255
  3225  000AD2  0100               	movlb	0	; () banked
  3226  000AD4  1790               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  3227  000AD6  0E00               	movlw	0
  3228  000AD8  0100               	movlb	0	; () banked
  3229  000ADA  1791               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  3230                           
  3231                           ; BSR set to: 0
  3232  000ADC  0E18               	movlw	24
  3233  000ADE  0100               	movlb	0	; () banked
  3234  000AE0  6F95               	movwf	___ftdiv@cntr& (0+255),b
  3235  000AE2                     l2954:
  3236                           
  3237                           ; BSR set to: 0
  3238  000AE2  0100               	movlb	0	; () banked
  3239  000AE4  90D8               	bcf	status,0,c
  3240  000AE6  3796               	rlcf	___ftdiv@f3& (0+255),f,b
  3241  000AE8  3797               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  3242  000AEA  3798               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  3243                           
  3244                           ; BSR set to: 0
  3245  000AEC  0100               	movlb	0	; () banked
  3246  000AEE  518F               	movf	___ftdiv@f2& (0+255),w,b
  3247  000AF0  0100               	movlb	0	; () banked
  3248  000AF2  5D8C               	subwf	___ftdiv@f1& (0+255),w,b
  3249  000AF4  0100               	movlb	0	; () banked
  3250  000AF6  5190               	movf	(___ftdiv@f2+1)& (0+255),w,b
  3251  000AF8  0100               	movlb	0	; () banked
  3252  000AFA  598D               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  3253  000AFC  0100               	movlb	0	; () banked
  3254  000AFE  5191               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3255  000B00  0100               	movlb	0	; () banked
  3256  000B02  598E               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  3257  000B04  A0D8               	btfss	status,0,c
  3258  000B06  D00E               	goto	l907
  3259                           
  3260                           ; BSR set to: 0
  3261  000B08  0100               	movlb	0	; () banked
  3262  000B0A  518F               	movf	___ftdiv@f2& (0+255),w,b
  3263  000B0C  0100               	movlb	0	; () banked
  3264  000B0E  5F8C               	subwf	___ftdiv@f1& (0+255),f,b
  3265  000B10  0100               	movlb	0	; () banked
  3266  000B12  5190               	movf	(___ftdiv@f2+1)& (0+255),w,b
  3267  000B14  0100               	movlb	0	; () banked
  3268  000B16  5B8D               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  3269  000B18  0100               	movlb	0	; () banked
  3270  000B1A  5191               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3271  000B1C  0100               	movlb	0	; () banked
  3272  000B1E  5B8E               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  3273                           
  3274                           ; BSR set to: 0
  3275  000B20  0100               	movlb	0	; () banked
  3276  000B22  8196               	bsf	___ftdiv@f3& (0+255),0,b
  3277  000B24                     l907:
  3278                           
  3279                           ; BSR set to: 0
  3280  000B24  0100               	movlb	0	; () banked
  3281  000B26  90D8               	bcf	status,0,c
  3282  000B28  378C               	rlcf	___ftdiv@f1& (0+255),f,b
  3283  000B2A  378D               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  3284  000B2C  378E               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  3285                           
  3286                           ; BSR set to: 0
  3287  000B2E  0100               	movlb	0	; () banked
  3288  000B30  2F95               	decfsz	___ftdiv@cntr& (0+255),f,b
  3289  000B32  D7D7               	goto	l2954
  3290                           
  3291                           ; BSR set to: 0
  3292                           
  3293                           ; BSR set to: 0
  3294  000B34  C096  F080         	movff	___ftdiv@f3,___ftpack@arg
  3295  000B38  C097  F081         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3296  000B3C  C098  F082         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3297  000B40  C099  F083         	movff	___ftdiv@exp,___ftpack@exp
  3298  000B44  C09A  F084         	movff	___ftdiv@sign,___ftpack@sign
  3299  000B48  EC8D  F007         	call	___ftpack	;wreg free
  3300  000B4C  C080  F08C         	movff	?___ftpack,?___ftdiv
  3301  000B50  C081  F08D         	movff	?___ftpack+1,?___ftdiv+1
  3302  000B54  C082  F08E         	movff	?___ftpack+2,?___ftdiv+2
  3303  000B58  0012               	return	
  3304  000B5A                     __end_of___ftdiv:
  3305                           	opt stack 0
  3306                           tblptru	equ	0xFF8
  3307                           tblptrh	equ	0xFF7
  3308                           tblptrl	equ	0xFF6
  3309                           tablat	equ	0xFF5
  3310                           intcon	equ	0xFF2
  3311                           postinc0	equ	0xFEE
  3312                           wreg	equ	0xFE8
  3313                           postdec1	equ	0xFE5
  3314                           fsr1l	equ	0xFE1
  3315                           postinc2	equ	0xFDE
  3316                           postdec2	equ	0xFDD
  3317                           fsr2h	equ	0xFDA
  3318                           fsr2l	equ	0xFD9
  3319                           status	equ	0xFD8
  3320                           
  3321 ;; *************** function ___ftadd *****************
  3322 ;; Defined at:
  3323 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  3324 ;; Parameters:    Size  Location     Type
  3325 ;;  f1              3   42[BANK0 ] float 
  3326 ;;  f2              3   45[BANK0 ] float 
  3327 ;; Auto vars:     Size  Location     Type
  3328 ;;  exp1            1   53[BANK0 ] unsigned char 
  3329 ;;  exp2            1   52[BANK0 ] unsigned char 
  3330 ;;  sign            1   51[BANK0 ] unsigned char 
  3331 ;; Return value:  Size  Location     Type
  3332 ;;                  3   42[BANK0 ] float 
  3333 ;; Registers used:
  3334 ;;		wreg, status,2, status,0, cstack
  3335 ;; Tracked objects:
  3336 ;;		On entry : 0/0
  3337 ;;		On exit  : 0/0
  3338 ;;		Unchanged: 0/0
  3339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3340 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3341 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3342 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3343 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3344 ;;Total ram usage:       12 bytes
  3345 ;; Hardware stack levels used:    1
  3346 ;; Hardware stack levels required when called:    6
  3347 ;; This function calls:
  3348 ;;		___ftpack
  3349 ;; This function is called by:
  3350 ;;		_angleToPulse
  3351 ;; This function uses a non-reentrant model
  3352 ;;
  3353                           
  3354                           	psect	text11
  3355  000012                     __ptext11:
  3356                           	opt stack 0
  3357  000012                     ___ftadd:
  3358                           	opt stack 21
  3359                           
  3360                           ;incstack = 0
  3361  000012  C0AC  F0B0         	movff	___ftadd@f1+2,??___ftadd
  3362  000016  0100               	movlb	0	; () banked
  3363  000018  6BB1               	clrf	(??___ftadd+1)& (0+255),b
  3364  00001A  6BB2               	clrf	(??___ftadd+2)& (0+255),b
  3365  00001C  0100               	movlb	0	; () banked
  3366  00001E  35AB               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  3367  000020  0100               	movlb	0	; () banked
  3368  000022  37B0               	rlcf	??___ftadd& (0+255),f,b
  3369  000024  E301               	bnc	u2071
  3370  000026  81B1               	bsf	(??___ftadd+1)& (0+255),0,b
  3371  000028                     u2071:
  3372  000028  0100               	movlb	0	; () banked
  3373  00002A  51B0               	movf	??___ftadd& (0+255),w,b
  3374  00002C  0100               	movlb	0	; () banked
  3375  00002E  6FB5               	movwf	___ftadd@exp1& (0+255),b
  3376  000030  C0AF  F0B0         	movff	___ftadd@f2+2,??___ftadd
  3377  000034  0100               	movlb	0	; () banked
  3378  000036  6BB1               	clrf	(??___ftadd+1)& (0+255),b
  3379  000038  6BB2               	clrf	(??___ftadd+2)& (0+255),b
  3380  00003A  0100               	movlb	0	; () banked
  3381  00003C  35AE               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  3382  00003E  0100               	movlb	0	; () banked
  3383  000040  37B0               	rlcf	??___ftadd& (0+255),f,b
  3384  000042  E301               	bnc	u2081
  3385  000044  81B1               	bsf	(??___ftadd+1)& (0+255),0,b
  3386  000046                     u2081:
  3387  000046  0100               	movlb	0	; () banked
  3388  000048  51B0               	movf	??___ftadd& (0+255),w,b
  3389  00004A  0100               	movlb	0	; () banked
  3390  00004C  6FB4               	movwf	___ftadd@exp2& (0+255),b
  3391                           
  3392                           ; BSR set to: 0
  3393  00004E  0100               	movlb	0	; () banked
  3394  000050  51B5               	movf	___ftadd@exp1& (0+255),w,b
  3395  000052  0100               	movlb	0	; () banked
  3396  000054  B4D8               	btfsc	status,2,c
  3397  000056  D011               	goto	l872
  3398                           
  3399                           ; BSR set to: 0
  3400  000058  0100               	movlb	0	; () banked
  3401  00005A  51B4               	movf	___ftadd@exp2& (0+255),w,b
  3402  00005C  0100               	movlb	0	; () banked
  3403  00005E  5DB5               	subwf	___ftadd@exp1& (0+255),w,b
  3404  000060  B0D8               	btfsc	status,0,c
  3405  000062  D012               	goto	l2860
  3406                           
  3407                           ; BSR set to: 0
  3408  000064  0100               	movlb	0	; () banked
  3409  000066  51B5               	movf	___ftadd@exp1& (0+255),w,b
  3410  000068  0800               	sublw	0
  3411  00006A  0100               	movlb	0	; () banked
  3412  00006C  25B4               	addwf	___ftadd@exp2& (0+255),w,b
  3413  00006E  0100               	movlb	0	; () banked
  3414  000070  6FB0               	movwf	??___ftadd& (0+255),b
  3415  000072  0E18               	movlw	24
  3416  000074  0100               	movlb	0	; () banked
  3417  000076  65B0               	cpfsgt	??___ftadd& (0+255),b
  3418  000078  D007               	goto	l2860
  3419  00007A                     l872:
  3420                           
  3421                           ; BSR set to: 0
  3422  00007A  C0AD  F0AA         	movff	___ftadd@f2,?___ftadd
  3423  00007E  C0AE  F0AB         	movff	___ftadd@f2+1,?___ftadd+1
  3424  000082  C0AF  F0AC         	movff	___ftadd@f2+2,?___ftadd+2
  3425  000086  0012               	return	
  3426  000088                     l2860:
  3427                           
  3428                           ; BSR set to: 0
  3429  000088  0100               	movlb	0	; () banked
  3430  00008A  51B4               	movf	___ftadd@exp2& (0+255),w,b
  3431  00008C  0100               	movlb	0	; () banked
  3432  00008E  B4D8               	btfsc	status,2,c
  3433  000090  D011               	goto	l876
  3434                           
  3435                           ; BSR set to: 0
  3436  000092  0100               	movlb	0	; () banked
  3437  000094  51B5               	movf	___ftadd@exp1& (0+255),w,b
  3438  000096  0100               	movlb	0	; () banked
  3439  000098  5DB4               	subwf	___ftadd@exp2& (0+255),w,b
  3440  00009A  B0D8               	btfsc	status,0,c
  3441  00009C  D012               	goto	l2866
  3442                           
  3443                           ; BSR set to: 0
  3444  00009E  0100               	movlb	0	; () banked
  3445  0000A0  51B4               	movf	___ftadd@exp2& (0+255),w,b
  3446  0000A2  0800               	sublw	0
  3447  0000A4  0100               	movlb	0	; () banked
  3448  0000A6  25B5               	addwf	___ftadd@exp1& (0+255),w,b
  3449  0000A8  0100               	movlb	0	; () banked
  3450  0000AA  6FB0               	movwf	??___ftadd& (0+255),b
  3451  0000AC  0E18               	movlw	24
  3452  0000AE  0100               	movlb	0	; () banked
  3453  0000B0  65B0               	cpfsgt	??___ftadd& (0+255),b
  3454  0000B2  D007               	goto	l2866
  3455  0000B4                     l876:
  3456                           
  3457                           ; BSR set to: 0
  3458  0000B4  C0AA  F0AA         	movff	___ftadd@f1,?___ftadd
  3459  0000B8  C0AB  F0AB         	movff	___ftadd@f1+1,?___ftadd+1
  3460  0000BC  C0AC  F0AC         	movff	___ftadd@f1+2,?___ftadd+2
  3461  0000C0  0012               	return	
  3462  0000C2                     l2866:
  3463                           
  3464                           ; BSR set to: 0
  3465  0000C2  0E06               	movlw	6
  3466  0000C4  0100               	movlb	0	; () banked
  3467  0000C6  6FB3               	movwf	___ftadd@sign& (0+255),b
  3468                           
  3469                           ; BSR set to: 0
  3470  0000C8  0100               	movlb	0	; () banked
  3471  0000CA  AFAC               	btfss	(___ftadd@f1+2)& (0+255),7,b
  3472  0000CC  D002               	goto	l2872
  3473                           
  3474                           ; BSR set to: 0
  3475  0000CE  0100               	movlb	0	; () banked
  3476  0000D0  8FB3               	bsf	___ftadd@sign& (0+255),7,b
  3477  0000D2                     l2872:
  3478                           
  3479                           ; BSR set to: 0
  3480  0000D2  0100               	movlb	0	; () banked
  3481  0000D4  AFAF               	btfss	(___ftadd@f2+2)& (0+255),7,b
  3482  0000D6  D002               	goto	l878
  3483                           
  3484                           ; BSR set to: 0
  3485  0000D8  0100               	movlb	0	; () banked
  3486  0000DA  8DB3               	bsf	___ftadd@sign& (0+255),6,b
  3487  0000DC                     l878:
  3488                           
  3489                           ; BSR set to: 0
  3490  0000DC  0100               	movlb	0	; () banked
  3491  0000DE  8FAB               	bsf	(___ftadd@f1+1)& (0+255),7,b
  3492                           
  3493                           ; BSR set to: 0
  3494  0000E0  0EFF               	movlw	255
  3495  0000E2  0100               	movlb	0	; () banked
  3496  0000E4  17AA               	andwf	___ftadd@f1& (0+255),f,b
  3497  0000E6  0EFF               	movlw	255
  3498  0000E8  0100               	movlb	0	; () banked
  3499  0000EA  17AB               	andwf	(___ftadd@f1+1)& (0+255),f,b
  3500  0000EC  0E00               	movlw	0
  3501  0000EE  0100               	movlb	0	; () banked
  3502  0000F0  17AC               	andwf	(___ftadd@f1+2)& (0+255),f,b
  3503  0000F2  0100               	movlb	0	; () banked
  3504  0000F4  8FAE               	bsf	(___ftadd@f2+1)& (0+255),7,b
  3505                           
  3506                           ; BSR set to: 0
  3507  0000F6  0EFF               	movlw	255
  3508  0000F8  0100               	movlb	0	; () banked
  3509  0000FA  17AD               	andwf	___ftadd@f2& (0+255),f,b
  3510  0000FC  0EFF               	movlw	255
  3511  0000FE  0100               	movlb	0	; () banked
  3512  000100  17AE               	andwf	(___ftadd@f2+1)& (0+255),f,b
  3513  000102  0E00               	movlw	0
  3514  000104  0100               	movlb	0	; () banked
  3515  000106  17AF               	andwf	(___ftadd@f2+2)& (0+255),f,b
  3516                           
  3517                           ; BSR set to: 0
  3518  000108  0100               	movlb	0	; () banked
  3519  00010A  51B4               	movf	___ftadd@exp2& (0+255),w,b
  3520  00010C  0100               	movlb	0	; () banked
  3521  00010E  5DB5               	subwf	___ftadd@exp1& (0+255),w,b
  3522  000110  B0D8               	btfsc	status,0,c
  3523  000112  D025               	goto	l2892
  3524  000114                     l2882:
  3525                           
  3526                           ; BSR set to: 0
  3527  000114  0100               	movlb	0	; () banked
  3528  000116  90D8               	bcf	status,0,c
  3529  000118  37AD               	rlcf	___ftadd@f2& (0+255),f,b
  3530  00011A  37AE               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  3531  00011C  37AF               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  3532  00011E  0100               	movlb	0	; () banked
  3533  000120  07B4               	decf	___ftadd@exp2& (0+255),f,b
  3534                           
  3535                           ; BSR set to: 0
  3536  000122  0100               	movlb	0	; () banked
  3537  000124  51B5               	movf	___ftadd@exp1& (0+255),w,b
  3538  000126  0100               	movlb	0	; () banked
  3539  000128  19B4               	xorwf	___ftadd@exp2& (0+255),w,b
  3540  00012A  B4D8               	btfsc	status,2,c
  3541  00012C  D011               	goto	l2890
  3542                           
  3543                           ; BSR set to: 0
  3544  00012E  0100               	movlb	0	; () banked
  3545  000130  07B3               	decf	___ftadd@sign& (0+255),f,b
  3546  000132  C0B3  F0B0         	movff	___ftadd@sign,??___ftadd
  3547  000136  0E07               	movlw	7
  3548  000138  0100               	movlb	0	; () banked
  3549  00013A  17B0               	andwf	??___ftadd& (0+255),f,b
  3550  00013C  B4D8               	btfsc	status,2,c
  3551  00013E  D008               	goto	l2890
  3552  000140  D7E9               	goto	l2882
  3553  000142                     l2888:
  3554                           
  3555                           ; BSR set to: 0
  3556  000142  0100               	movlb	0	; () banked
  3557  000144  90D8               	bcf	status,0,c
  3558  000146  33AC               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  3559  000148  33AB               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  3560  00014A  33AA               	rrcf	___ftadd@f1& (0+255),f,b
  3561  00014C  0100               	movlb	0	; () banked
  3562  00014E  2BB5               	incf	___ftadd@exp1& (0+255),f,b
  3563  000150                     l2890:
  3564                           
  3565                           ; BSR set to: 0
  3566  000150  0100               	movlb	0	; () banked
  3567  000152  51B4               	movf	___ftadd@exp2& (0+255),w,b
  3568  000154  0100               	movlb	0	; () banked
  3569  000156  19B5               	xorwf	___ftadd@exp1& (0+255),w,b
  3570  000158  B4D8               	btfsc	status,2,c
  3571  00015A  D02B               	goto	l887
  3572  00015C  D7F2               	goto	l2888
  3573  00015E                     l2892:
  3574                           
  3575                           ; BSR set to: 0
  3576  00015E  0100               	movlb	0	; () banked
  3577  000160  51B5               	movf	___ftadd@exp1& (0+255),w,b
  3578  000162  0100               	movlb	0	; () banked
  3579  000164  5DB4               	subwf	___ftadd@exp2& (0+255),w,b
  3580  000166  B0D8               	btfsc	status,0,c
  3581  000168  D024               	goto	l887
  3582  00016A                     l2894:
  3583                           
  3584                           ; BSR set to: 0
  3585  00016A  0100               	movlb	0	; () banked
  3586  00016C  90D8               	bcf	status,0,c
  3587  00016E  37AA               	rlcf	___ftadd@f1& (0+255),f,b
  3588  000170  37AB               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  3589  000172  37AC               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  3590  000174  0100               	movlb	0	; () banked
  3591  000176  07B5               	decf	___ftadd@exp1& (0+255),f,b
  3592                           
  3593                           ; BSR set to: 0
  3594  000178  0100               	movlb	0	; () banked
  3595  00017A  51B5               	movf	___ftadd@exp1& (0+255),w,b
  3596  00017C  0100               	movlb	0	; () banked
  3597  00017E  19B4               	xorwf	___ftadd@exp2& (0+255),w,b
  3598  000180  B4D8               	btfsc	status,2,c
  3599  000182  D011               	goto	l2902
  3600                           
  3601                           ; BSR set to: 0
  3602  000184  0100               	movlb	0	; () banked
  3603  000186  07B3               	decf	___ftadd@sign& (0+255),f,b
  3604  000188  C0B3  F0B0         	movff	___ftadd@sign,??___ftadd
  3605  00018C  0E07               	movlw	7
  3606  00018E  0100               	movlb	0	; () banked
  3607  000190  17B0               	andwf	??___ftadd& (0+255),f,b
  3608  000192  B4D8               	btfsc	status,2,c
  3609  000194  D008               	goto	l2902
  3610  000196  D7E9               	goto	l2894
  3611  000198                     l2900:
  3612                           
  3613                           ; BSR set to: 0
  3614  000198  0100               	movlb	0	; () banked
  3615  00019A  90D8               	bcf	status,0,c
  3616  00019C  33AF               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  3617  00019E  33AE               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  3618  0001A0  33AD               	rrcf	___ftadd@f2& (0+255),f,b
  3619  0001A2  0100               	movlb	0	; () banked
  3620  0001A4  2BB4               	incf	___ftadd@exp2& (0+255),f,b
  3621  0001A6                     l2902:
  3622                           
  3623                           ; BSR set to: 0
  3624  0001A6  0100               	movlb	0	; () banked
  3625  0001A8  51B4               	movf	___ftadd@exp2& (0+255),w,b
  3626  0001AA  0100               	movlb	0	; () banked
  3627  0001AC  19B5               	xorwf	___ftadd@exp1& (0+255),w,b
  3628  0001AE  A4D8               	btfss	status,2,c
  3629  0001B0  D7F3               	goto	l2900
  3630  0001B2                     l887:
  3631                           
  3632                           ; BSR set to: 0
  3633  0001B2  0100               	movlb	0	; () banked
  3634  0001B4  AFB3               	btfss	___ftadd@sign& (0+255),7,b
  3635  0001B6  D012               	goto	l896
  3636                           
  3637                           ; BSR set to: 0
  3638  0001B8  0EFF               	movlw	255
  3639  0001BA  0100               	movlb	0	; () banked
  3640  0001BC  1BAA               	xorwf	___ftadd@f1& (0+255),f,b
  3641  0001BE  0EFF               	movlw	255
  3642  0001C0  0100               	movlb	0	; () banked
  3643  0001C2  1BAB               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  3644  0001C4  0EFF               	movlw	255
  3645  0001C6  0100               	movlb	0	; () banked
  3646  0001C8  1BAC               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  3647  0001CA  0E01               	movlw	1
  3648  0001CC  0100               	movlb	0	; () banked
  3649  0001CE  27AA               	addwf	___ftadd@f1& (0+255),f,b
  3650  0001D0  0E00               	movlw	0
  3651  0001D2  0100               	movlb	0	; () banked
  3652  0001D4  23AB               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  3653  0001D6  0E00               	movlw	0
  3654  0001D8  0100               	movlb	0	; () banked
  3655  0001DA  23AC               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  3656  0001DC                     l896:
  3657                           
  3658                           ; BSR set to: 0
  3659  0001DC  0100               	movlb	0	; () banked
  3660  0001DE  ADB3               	btfss	___ftadd@sign& (0+255),6,b
  3661  0001E0  D012               	goto	l2908
  3662                           
  3663                           ; BSR set to: 0
  3664  0001E2  0EFF               	movlw	255
  3665  0001E4  0100               	movlb	0	; () banked
  3666  0001E6  1BAD               	xorwf	___ftadd@f2& (0+255),f,b
  3667  0001E8  0EFF               	movlw	255
  3668  0001EA  0100               	movlb	0	; () banked
  3669  0001EC  1BAE               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  3670  0001EE  0EFF               	movlw	255
  3671  0001F0  0100               	movlb	0	; () banked
  3672  0001F2  1BAF               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  3673  0001F4  0E01               	movlw	1
  3674  0001F6  0100               	movlb	0	; () banked
  3675  0001F8  27AD               	addwf	___ftadd@f2& (0+255),f,b
  3676  0001FA  0E00               	movlw	0
  3677  0001FC  0100               	movlb	0	; () banked
  3678  0001FE  23AE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  3679  000200  0E00               	movlw	0
  3680  000202  0100               	movlb	0	; () banked
  3681  000204  23AF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  3682  000206                     l2908:
  3683                           
  3684                           ; BSR set to: 0
  3685  000206  0E00               	movlw	0
  3686  000208  0100               	movlb	0	; () banked
  3687  00020A  6FB3               	movwf	___ftadd@sign& (0+255),b
  3688                           
  3689                           ; BSR set to: 0
  3690  00020C  0100               	movlb	0	; () banked
  3691  00020E  51AA               	movf	___ftadd@f1& (0+255),w,b
  3692  000210  0100               	movlb	0	; () banked
  3693  000212  27AD               	addwf	___ftadd@f2& (0+255),f,b
  3694  000214  0100               	movlb	0	; () banked
  3695  000216  51AB               	movf	(___ftadd@f1+1)& (0+255),w,b
  3696  000218  0100               	movlb	0	; () banked
  3697  00021A  23AE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  3698  00021C  0100               	movlb	0	; () banked
  3699  00021E  51AC               	movf	(___ftadd@f1+2)& (0+255),w,b
  3700  000220  0100               	movlb	0	; () banked
  3701  000222  23AF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  3702                           
  3703                           ; BSR set to: 0
  3704  000224  0100               	movlb	0	; () banked
  3705  000226  AFAF               	btfss	(___ftadd@f2+2)& (0+255),7,b
  3706  000228  D015               	goto	l2918
  3707                           
  3708                           ; BSR set to: 0
  3709  00022A  0EFF               	movlw	255
  3710  00022C  0100               	movlb	0	; () banked
  3711  00022E  1BAD               	xorwf	___ftadd@f2& (0+255),f,b
  3712  000230  0EFF               	movlw	255
  3713  000232  0100               	movlb	0	; () banked
  3714  000234  1BAE               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  3715  000236  0EFF               	movlw	255
  3716  000238  0100               	movlb	0	; () banked
  3717  00023A  1BAF               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  3718  00023C  0E01               	movlw	1
  3719  00023E  0100               	movlb	0	; () banked
  3720  000240  27AD               	addwf	___ftadd@f2& (0+255),f,b
  3721  000242  0E00               	movlw	0
  3722  000244  0100               	movlb	0	; () banked
  3723  000246  23AE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  3724  000248  0E00               	movlw	0
  3725  00024A  0100               	movlb	0	; () banked
  3726  00024C  23AF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  3727                           
  3728                           ; BSR set to: 0
  3729  00024E  0E01               	movlw	1
  3730  000250  0100               	movlb	0	; () banked
  3731  000252  6FB3               	movwf	___ftadd@sign& (0+255),b
  3732  000254                     l2918:
  3733                           
  3734                           ; BSR set to: 0
  3735  000254  C0AD  F080         	movff	___ftadd@f2,___ftpack@arg
  3736  000258  C0AE  F081         	movff	___ftadd@f2+1,___ftpack@arg+1
  3737  00025C  C0AF  F082         	movff	___ftadd@f2+2,___ftpack@arg+2
  3738  000260  C0B5  F083         	movff	___ftadd@exp1,___ftpack@exp
  3739  000264  C0B3  F084         	movff	___ftadd@sign,___ftpack@sign
  3740  000268  EC8D  F007         	call	___ftpack	;wreg free
  3741  00026C  C080  F0AA         	movff	?___ftpack,?___ftadd
  3742  000270  C081  F0AB         	movff	?___ftpack+1,?___ftadd+1
  3743  000274  C082  F0AC         	movff	?___ftpack+2,?___ftadd+2
  3744  000278  0012               	return	
  3745  00027A                     __end_of___ftadd:
  3746                           	opt stack 0
  3747                           tblptru	equ	0xFF8
  3748                           tblptrh	equ	0xFF7
  3749                           tblptrl	equ	0xFF6
  3750                           tablat	equ	0xFF5
  3751                           intcon	equ	0xFF2
  3752                           postinc0	equ	0xFEE
  3753                           wreg	equ	0xFE8
  3754                           postdec1	equ	0xFE5
  3755                           fsr1l	equ	0xFE1
  3756                           postinc2	equ	0xFDE
  3757                           postdec2	equ	0xFDD
  3758                           fsr2h	equ	0xFDA
  3759                           fsr2l	equ	0xFD9
  3760                           status	equ	0xFD8
  3761                           
  3762 ;; *************** function ___awtoft *****************
  3763 ;; Defined at:
  3764 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  3765 ;; Parameters:    Size  Location     Type
  3766 ;;  c               2    8[BANK0 ] int 
  3767 ;; Auto vars:     Size  Location     Type
  3768 ;;  sign            1   11[BANK0 ] unsigned char 
  3769 ;; Return value:  Size  Location     Type
  3770 ;;                  3    8[BANK0 ] float 
  3771 ;; Registers used:
  3772 ;;		wreg, status,2, status,0, cstack
  3773 ;; Tracked objects:
  3774 ;;		On entry : 0/0
  3775 ;;		On exit  : 0/0
  3776 ;;		Unchanged: 0/0
  3777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3778 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3779 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3781 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3782 ;;Total ram usage:        4 bytes
  3783 ;; Hardware stack levels used:    1
  3784 ;; Hardware stack levels required when called:    6
  3785 ;; This function calls:
  3786 ;;		___ftpack
  3787 ;; This function is called by:
  3788 ;;		_angleToPulse
  3789 ;; This function uses a non-reentrant model
  3790 ;;
  3791                           
  3792                           	psect	text12
  3793  001DEC                     __ptext12:
  3794                           	opt stack 0
  3795  001DEC                     ___awtoft:
  3796                           	opt stack 21
  3797                           
  3798                           ;incstack = 0
  3799  001DEC  0E00               	movlw	0
  3800  001DEE  0100               	movlb	0	; () banked
  3801  001DF0  6F8B               	movwf	___awtoft@sign& (0+255),b
  3802                           
  3803                           ; BSR set to: 0
  3804  001DF2  0100               	movlb	0	; () banked
  3805  001DF4  AF89               	btfss	(___awtoft@c+1)& (0+255),7,b
  3806  001DF6  D008               	goto	l3024
  3807                           
  3808                           ; BSR set to: 0
  3809  001DF8  0100               	movlb	0	; () banked
  3810  001DFA  6D88               	negf	___awtoft@c& (0+255),b
  3811  001DFC  1F89               	comf	(___awtoft@c+1)& (0+255),f,b
  3812  001DFE  B0D8               	btfsc	status,0,c
  3813  001E00  2B89               	incf	(___awtoft@c+1)& (0+255),f,b
  3814                           
  3815                           ; BSR set to: 0
  3816  001E02  0E01               	movlw	1
  3817  001E04  0100               	movlb	0	; () banked
  3818  001E06  6F8B               	movwf	___awtoft@sign& (0+255),b
  3819  001E08                     l3024:
  3820                           
  3821                           ; BSR set to: 0
  3822  001E08  C088  F080         	movff	___awtoft@c,___ftpack@arg
  3823  001E0C  C089  F081         	movff	___awtoft@c+1,___ftpack@arg+1
  3824  001E10  0100               	movlb	0	; () banked
  3825  001E12  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
  3826  001E14  0E8E               	movlw	142
  3827  001E16  0100               	movlb	0	; () banked
  3828  001E18  6F83               	movwf	___ftpack@exp& (0+255),b
  3829  001E1A  C08B  F084         	movff	___awtoft@sign,___ftpack@sign
  3830  001E1E  EC8D  F007         	call	___ftpack	;wreg free
  3831  001E22  C080  F088         	movff	?___ftpack,?___awtoft
  3832  001E26  C081  F089         	movff	?___ftpack+1,?___awtoft+1
  3833  001E2A  C082  F08A         	movff	?___ftpack+2,?___awtoft+2
  3834  001E2E  0012               	return	
  3835  001E30                     __end_of___awtoft:
  3836                           	opt stack 0
  3837                           tblptru	equ	0xFF8
  3838                           tblptrh	equ	0xFF7
  3839                           tblptrl	equ	0xFF6
  3840                           tablat	equ	0xFF5
  3841                           intcon	equ	0xFF2
  3842                           postinc0	equ	0xFEE
  3843                           wreg	equ	0xFE8
  3844                           postdec1	equ	0xFE5
  3845                           fsr1l	equ	0xFE1
  3846                           postinc2	equ	0xFDE
  3847                           postdec2	equ	0xFDD
  3848                           fsr2h	equ	0xFDA
  3849                           fsr2l	equ	0xFD9
  3850                           status	equ	0xFD8
  3851                           
  3852 ;; *************** function ___altoft *****************
  3853 ;; Defined at:
  3854 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  3855 ;; Parameters:    Size  Location     Type
  3856 ;;  c               4    8[BANK0 ] long 
  3857 ;; Auto vars:     Size  Location     Type
  3858 ;;  sign            1   17[BANK0 ] unsigned char 
  3859 ;;  exp             1   16[BANK0 ] unsigned char 
  3860 ;; Return value:  Size  Location     Type
  3861 ;;                  3    8[BANK0 ] float 
  3862 ;; Registers used:
  3863 ;;		wreg, status,2, status,0, cstack
  3864 ;; Tracked objects:
  3865 ;;		On entry : 0/0
  3866 ;;		On exit  : 0/0
  3867 ;;		Unchanged: 0/0
  3868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3869 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3870 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3871 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3872 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3873 ;;Total ram usage:       10 bytes
  3874 ;; Hardware stack levels used:    1
  3875 ;; Hardware stack levels required when called:    6
  3876 ;; This function calls:
  3877 ;;		___ftpack
  3878 ;; This function is called by:
  3879 ;;		_angleToPulse
  3880 ;;		_testFrequency
  3881 ;; This function uses a non-reentrant model
  3882 ;;
  3883                           
  3884                           	psect	text13
  3885  001874                     __ptext13:
  3886                           	opt stack 0
  3887  001874                     ___altoft:
  3888                           	opt stack 21
  3889                           
  3890                           ;incstack = 0
  3891  001874  0E00               	movlw	0
  3892  001876  0100               	movlb	0	; () banked
  3893  001878  6F91               	movwf	___altoft@sign& (0+255),b
  3894  00187A  0E8E               	movlw	142
  3895  00187C  0100               	movlb	0	; () banked
  3896  00187E  6F90               	movwf	___altoft@exp& (0+255),b
  3897                           
  3898                           ; BSR set to: 0
  3899  001880  0100               	movlb	0	; () banked
  3900  001882  AF8B               	btfss	(___altoft@c+3)& (0+255),7,b
  3901  001884  D015               	goto	l2846
  3902                           
  3903                           ; BSR set to: 0
  3904  001886  0100               	movlb	0	; () banked
  3905  001888  1F8B               	comf	(___altoft@c+3)& (0+255),f,b
  3906  00188A  1F8A               	comf	(___altoft@c+2)& (0+255),f,b
  3907  00188C  1F89               	comf	(___altoft@c+1)& (0+255),f,b
  3908  00188E  6D88               	negf	___altoft@c& (0+255),b
  3909  001890  0E00               	movlw	0
  3910  001892  2389               	addwfc	(___altoft@c+1)& (0+255),f,b
  3911  001894  238A               	addwfc	(___altoft@c+2)& (0+255),f,b
  3912  001896  238B               	addwfc	(___altoft@c+3)& (0+255),f,b
  3913                           
  3914                           ; BSR set to: 0
  3915  001898  0E01               	movlw	1
  3916  00189A  0100               	movlb	0	; () banked
  3917  00189C  6F91               	movwf	___altoft@sign& (0+255),b
  3918                           
  3919                           ; BSR set to: 0
  3920  00189E  D008               	goto	l2846
  3921  0018A0                     l2844:
  3922                           
  3923                           ; BSR set to: 0
  3924  0018A0  0100               	movlb	0	; () banked
  3925  0018A2  90D8               	bcf	status,0,c
  3926  0018A4  338B               	rrcf	(___altoft@c+3)& (0+255),f,b
  3927  0018A6  338A               	rrcf	(___altoft@c+2)& (0+255),f,b
  3928  0018A8  3389               	rrcf	(___altoft@c+1)& (0+255),f,b
  3929  0018AA  3388               	rrcf	___altoft@c& (0+255),f,b
  3930  0018AC  0100               	movlb	0	; () banked
  3931  0018AE  2B90               	incf	___altoft@exp& (0+255),f,b
  3932  0018B0                     l2846:
  3933                           
  3934                           ; BSR set to: 0
  3935  0018B0  0E00               	movlw	0
  3936  0018B2  0100               	movlb	0	; () banked
  3937  0018B4  1588               	andwf	___altoft@c& (0+255),w,b
  3938  0018B6  0100               	movlb	0	; () banked
  3939  0018B8  6F8C               	movwf	??___altoft& (0+255),b
  3940  0018BA  0E00               	movlw	0
  3941  0018BC  0100               	movlb	0	; () banked
  3942  0018BE  1589               	andwf	(___altoft@c+1)& (0+255),w,b
  3943  0018C0  0100               	movlb	0	; () banked
  3944  0018C2  6F8D               	movwf	(??___altoft+1)& (0+255),b
  3945  0018C4  0E00               	movlw	0
  3946  0018C6  0100               	movlb	0	; () banked
  3947  0018C8  158A               	andwf	(___altoft@c+2)& (0+255),w,b
  3948  0018CA  0100               	movlb	0	; () banked
  3949  0018CC  6F8E               	movwf	(??___altoft+2)& (0+255),b
  3950  0018CE  0EFF               	movlw	255
  3951  0018D0  0100               	movlb	0	; () banked
  3952  0018D2  158B               	andwf	(___altoft@c+3)& (0+255),w,b
  3953  0018D4  0100               	movlb	0	; () banked
  3954  0018D6  6F8F               	movwf	(??___altoft+3)& (0+255),b
  3955  0018D8  0100               	movlb	0	; () banked
  3956  0018DA  518C               	movf	??___altoft& (0+255),w,b
  3957  0018DC  0100               	movlb	0	; () banked
  3958  0018DE  118D               	iorwf	(??___altoft+1)& (0+255),w,b
  3959  0018E0  0100               	movlb	0	; () banked
  3960  0018E2  118E               	iorwf	(??___altoft+2)& (0+255),w,b
  3961  0018E4  0100               	movlb	0	; () banked
  3962  0018E6  118F               	iorwf	(??___altoft+3)& (0+255),w,b
  3963  0018E8  A4D8               	btfss	status,2,c
  3964  0018EA  D7DA               	goto	l2844
  3965                           
  3966                           ; BSR set to: 0
  3967                           
  3968                           ; BSR set to: 0
  3969  0018EC  C088  F080         	movff	___altoft@c,___ftpack@arg
  3970  0018F0  C089  F081         	movff	___altoft@c+1,___ftpack@arg+1
  3971  0018F4  C08A  F082         	movff	___altoft@c+2,___ftpack@arg+2
  3972  0018F8  C090  F083         	movff	___altoft@exp,___ftpack@exp
  3973  0018FC  C091  F084         	movff	___altoft@sign,___ftpack@sign
  3974  001900  EC8D  F007         	call	___ftpack	;wreg free
  3975  001904  C080  F088         	movff	?___ftpack,?___altoft
  3976  001908  C081  F089         	movff	?___ftpack+1,?___altoft+1
  3977  00190C  C082  F08A         	movff	?___ftpack+2,?___altoft+2
  3978  001910  0012               	return	
  3979  001912                     __end_of___altoft:
  3980                           	opt stack 0
  3981                           tblptru	equ	0xFF8
  3982                           tblptrh	equ	0xFF7
  3983                           tblptrl	equ	0xFF6
  3984                           tablat	equ	0xFF5
  3985                           intcon	equ	0xFF2
  3986                           postinc0	equ	0xFEE
  3987                           wreg	equ	0xFE8
  3988                           postdec1	equ	0xFE5
  3989                           fsr1l	equ	0xFE1
  3990                           postinc2	equ	0xFDE
  3991                           postdec2	equ	0xFDD
  3992                           fsr2h	equ	0xFDA
  3993                           fsr2l	equ	0xFD9
  3994                           status	equ	0xFD8
  3995                           
  3996 ;; *************** function ___ftpack *****************
  3997 ;; Defined at:
  3998 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  3999 ;; Parameters:    Size  Location     Type
  4000 ;;  arg             3    0[BANK0 ] unsigned um
  4001 ;;  exp             1    3[BANK0 ] unsigned char 
  4002 ;;  sign            1    4[BANK0 ] unsigned char 
  4003 ;; Auto vars:     Size  Location     Type
  4004 ;;		None
  4005 ;; Return value:  Size  Location     Type
  4006 ;;                  3    0[BANK0 ] float 
  4007 ;; Registers used:
  4008 ;;		wreg, status,2, status,0
  4009 ;; Tracked objects:
  4010 ;;		On entry : 0/0
  4011 ;;		On exit  : 0/0
  4012 ;;		Unchanged: 0/0
  4013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4014 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4016 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4017 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4018 ;;Total ram usage:        8 bytes
  4019 ;; Hardware stack levels used:    1
  4020 ;; Hardware stack levels required when called:    5
  4021 ;; This function calls:
  4022 ;;		Nothing
  4023 ;; This function is called by:
  4024 ;;		___altoft
  4025 ;;		___awtoft
  4026 ;;		___ftadd
  4027 ;;		___ftdiv
  4028 ;;		___ftmul
  4029 ;; This function uses a non-reentrant model
  4030 ;;
  4031                           
  4032                           	psect	text14
  4033  000F1A                     __ptext14:
  4034                           	opt stack 0
  4035  000F1A                     ___ftpack:
  4036                           	opt stack 21
  4037                           
  4038                           ;incstack = 0
  4039  000F1A  0100               	movlb	0	; () banked
  4040  000F1C  5183               	movf	___ftpack@exp& (0+255),w,b
  4041  000F1E  0100               	movlb	0	; () banked
  4042  000F20  B4D8               	btfsc	status,2,c
  4043  000F22  D008               	goto	l2802
  4044                           
  4045                           ; BSR set to: 0
  4046  000F24  0100               	movlb	0	; () banked
  4047  000F26  5180               	movf	___ftpack@arg& (0+255),w,b
  4048  000F28  0100               	movlb	0	; () banked
  4049  000F2A  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  4050  000F2C  0100               	movlb	0	; () banked
  4051  000F2E  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  4052  000F30  A4D8               	btfss	status,2,c
  4053  000F32  D011               	goto	l2808
  4054  000F34                     l2802:
  4055                           
  4056                           ; BSR set to: 0
  4057  000F34  0E00               	movlw	0
  4058  000F36  0100               	movlb	0	; () banked
  4059  000F38  6F80               	movwf	?___ftpack& (0+255),b
  4060  000F3A  0E00               	movlw	0
  4061  000F3C  0100               	movlb	0	; () banked
  4062  000F3E  6F81               	movwf	(?___ftpack+1)& (0+255),b
  4063  000F40  0E00               	movlw	0
  4064  000F42  0100               	movlb	0	; () banked
  4065  000F44  6F82               	movwf	(?___ftpack+2)& (0+255),b
  4066                           
  4067                           ; BSR set to: 0
  4068  000F46  0012               	return	
  4069  000F48                     l2806:
  4070                           
  4071                           ; BSR set to: 0
  4072  000F48  0100               	movlb	0	; () banked
  4073  000F4A  2B83               	incf	___ftpack@exp& (0+255),f,b
  4074  000F4C  0100               	movlb	0	; () banked
  4075  000F4E  90D8               	bcf	status,0,c
  4076  000F50  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  4077  000F52  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  4078  000F54  3380               	rrcf	___ftpack@arg& (0+255),f,b
  4079  000F56                     l2808:
  4080                           
  4081                           ; BSR set to: 0
  4082  000F56  0E00               	movlw	0
  4083  000F58  0100               	movlb	0	; () banked
  4084  000F5A  1580               	andwf	___ftpack@arg& (0+255),w,b
  4085  000F5C  0100               	movlb	0	; () banked
  4086  000F5E  6F85               	movwf	??___ftpack& (0+255),b
  4087  000F60  0E00               	movlw	0
  4088  000F62  0100               	movlb	0	; () banked
  4089  000F64  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  4090  000F66  0100               	movlb	0	; () banked
  4091  000F68  6F86               	movwf	(??___ftpack+1)& (0+255),b
  4092  000F6A  0EFE               	movlw	254
  4093  000F6C  0100               	movlb	0	; () banked
  4094  000F6E  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  4095  000F70  0100               	movlb	0	; () banked
  4096  000F72  6F87               	movwf	(??___ftpack+2)& (0+255),b
  4097  000F74  0100               	movlb	0	; () banked
  4098  000F76  5185               	movf	??___ftpack& (0+255),w,b
  4099  000F78  0100               	movlb	0	; () banked
  4100  000F7A  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  4101  000F7C  0100               	movlb	0	; () banked
  4102  000F7E  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  4103  000F80  B4D8               	btfsc	status,2,c
  4104  000F82  D011               	goto	l2814
  4105  000F84  D7E1               	goto	l2806
  4106  000F86                     l2810:
  4107                           
  4108                           ; BSR set to: 0
  4109  000F86  0100               	movlb	0	; () banked
  4110  000F88  2B83               	incf	___ftpack@exp& (0+255),f,b
  4111                           
  4112                           ; BSR set to: 0
  4113  000F8A  0E01               	movlw	1
  4114  000F8C  0100               	movlb	0	; () banked
  4115  000F8E  2780               	addwf	___ftpack@arg& (0+255),f,b
  4116  000F90  0E00               	movlw	0
  4117  000F92  0100               	movlb	0	; () banked
  4118  000F94  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  4119  000F96  0E00               	movlw	0
  4120  000F98  0100               	movlb	0	; () banked
  4121  000F9A  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  4122  000F9C  0100               	movlb	0	; () banked
  4123  000F9E  90D8               	bcf	status,0,c
  4124  000FA0  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  4125  000FA2  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  4126  000FA4  3380               	rrcf	___ftpack@arg& (0+255),f,b
  4127  000FA6                     l2814:
  4128                           
  4129                           ; BSR set to: 0
  4130  000FA6  0E00               	movlw	0
  4131  000FA8  0100               	movlb	0	; () banked
  4132  000FAA  1580               	andwf	___ftpack@arg& (0+255),w,b
  4133  000FAC  0100               	movlb	0	; () banked
  4134  000FAE  6F85               	movwf	??___ftpack& (0+255),b
  4135  000FB0  0E00               	movlw	0
  4136  000FB2  0100               	movlb	0	; () banked
  4137  000FB4  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  4138  000FB6  0100               	movlb	0	; () banked
  4139  000FB8  6F86               	movwf	(??___ftpack+1)& (0+255),b
  4140  000FBA  0EFF               	movlw	255
  4141  000FBC  0100               	movlb	0	; () banked
  4142  000FBE  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  4143  000FC0  0100               	movlb	0	; () banked
  4144  000FC2  6F87               	movwf	(??___ftpack+2)& (0+255),b
  4145  000FC4  0100               	movlb	0	; () banked
  4146  000FC6  5185               	movf	??___ftpack& (0+255),w,b
  4147  000FC8  0100               	movlb	0	; () banked
  4148  000FCA  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  4149  000FCC  0100               	movlb	0	; () banked
  4150  000FCE  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  4151  000FD0  B4D8               	btfsc	status,2,c
  4152  000FD2  D008               	goto	l2818
  4153  000FD4  D7D8               	goto	l2810
  4154  000FD6                     l2816:
  4155                           
  4156                           ; BSR set to: 0
  4157  000FD6  0100               	movlb	0	; () banked
  4158  000FD8  0783               	decf	___ftpack@exp& (0+255),f,b
  4159  000FDA  0100               	movlb	0	; () banked
  4160  000FDC  90D8               	bcf	status,0,c
  4161  000FDE  3780               	rlcf	___ftpack@arg& (0+255),f,b
  4162  000FE0  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  4163  000FE2  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  4164  000FE4                     l2818:
  4165                           
  4166                           ; BSR set to: 0
  4167  000FE4  0100               	movlb	0	; () banked
  4168  000FE6  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  4169  000FE8  D004               	goto	l849
  4170                           
  4171                           ; BSR set to: 0
  4172  000FEA  0E02               	movlw	2
  4173  000FEC  0100               	movlb	0	; () banked
  4174  000FEE  6183               	cpfslt	___ftpack@exp& (0+255),b
  4175  000FF0  D7F2               	goto	l2816
  4176  000FF2                     l849:
  4177                           
  4178                           ; BSR set to: 0
  4179  000FF2  0100               	movlb	0	; () banked
  4180  000FF4  B183               	btfsc	___ftpack@exp& (0+255),0,b
  4181  000FF6  D002               	goto	l2824
  4182                           
  4183                           ; BSR set to: 0
  4184  000FF8  0100               	movlb	0	; () banked
  4185  000FFA  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
  4186  000FFC                     l2824:
  4187                           
  4188                           ; BSR set to: 0
  4189  000FFC  0100               	movlb	0	; () banked
  4190  000FFE  90D8               	bcf	status,0,c
  4191  001000  3383               	rrcf	___ftpack@exp& (0+255),f,b
  4192  001002  0100               	movlb	0	; () banked
  4193  001004  5183               	movf	___ftpack@exp& (0+255),w,b
  4194  001006  0100               	movlb	0	; () banked
  4195  001008  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  4196                           
  4197                           ; BSR set to: 0
  4198  00100A  0100               	movlb	0	; () banked
  4199  00100C  5184               	movf	___ftpack@sign& (0+255),w,b
  4200  00100E  0100               	movlb	0	; () banked
  4201  001010  B4D8               	btfsc	status,2,c
  4202  001012  D002               	goto	l2830
  4203                           
  4204                           ; BSR set to: 0
  4205  001014  0100               	movlb	0	; () banked
  4206  001016  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
  4207  001018                     l2830:
  4208                           
  4209                           ; BSR set to: 0
  4210  001018  C080  F080         	movff	___ftpack@arg,?___ftpack
  4211  00101C  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
  4212  001020  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
  4213  001024  0012               	return	
  4214  001026                     __end_of___ftpack:
  4215                           	opt stack 0
  4216                           tblptru	equ	0xFF8
  4217                           tblptrh	equ	0xFF7
  4218                           tblptrl	equ	0xFF6
  4219                           tablat	equ	0xFF5
  4220                           intcon	equ	0xFF2
  4221                           postinc0	equ	0xFEE
  4222                           wreg	equ	0xFE8
  4223                           postdec1	equ	0xFE5
  4224                           fsr1l	equ	0xFE1
  4225                           postinc2	equ	0xFDE
  4226                           postdec2	equ	0xFDD
  4227                           fsr2h	equ	0xFDA
  4228                           fsr2l	equ	0xFD9
  4229                           status	equ	0xFD8
  4230                           
  4231 ;; *************** function _initTimer *****************
  4232 ;; Defined at:
  4233 ;;		line 52 in file "timer.c"
  4234 ;; Parameters:    Size  Location     Type
  4235 ;;  timer           2    0[BANK0 ] int 
  4236 ;; Auto vars:     Size  Location     Type
  4237 ;;		None
  4238 ;; Return value:  Size  Location     Type
  4239 ;;                  1    wreg      void 
  4240 ;; Registers used:
  4241 ;;		wreg, status,2, status,0
  4242 ;; Tracked objects:
  4243 ;;		On entry : 0/0
  4244 ;;		On exit  : 0/0
  4245 ;;		Unchanged: 0/0
  4246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4247 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4249 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4250 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4251 ;;Total ram usage:        4 bytes
  4252 ;; Hardware stack levels used:    1
  4253 ;; Hardware stack levels required when called:    5
  4254 ;; This function calls:
  4255 ;;		Nothing
  4256 ;; This function is called by:
  4257 ;;		_initServo
  4258 ;;		_testFrequency
  4259 ;; This function uses a non-reentrant model
  4260 ;;
  4261                           
  4262                           	psect	text15
  4263  001D58                     __ptext15:
  4264                           	opt stack 0
  4265  001D58                     _initTimer:
  4266                           	opt stack 23
  4267                           
  4268                           ;timer.c: 53: switch(timer){
  4269                           
  4270                           ; BSR set to: 0
  4271                           ;incstack = 0
  4272  001D58  D00D               	goto	l3222
  4273  001D5A                     l3206:
  4274                           
  4275                           ;timer.c: 55: T0CON = 0;
  4276  001D5A  0E00               	movlw	0
  4277  001D5C  6ED5               	movwf	4053,c	;volatile
  4278                           
  4279                           ;timer.c: 56: T0CON |= 1<<3;
  4280  001D5E  86D5               	bsf	4053,3,c	;volatile
  4281                           
  4282                           ;timer.c: 58: TMR0IE = 1;
  4283  001D60  8AF2               	bsf	intcon,5,c	;volatile
  4284                           
  4285                           ;timer.c: 59: break;
  4286  001D62  D01C               	goto	l397
  4287  001D64                     l3212:
  4288                           
  4289                           ;timer.c: 61: T1CON = 0;
  4290  001D64  0E00               	movlw	0
  4291  001D66  6ECD               	movwf	4045,c	;volatile
  4292                           
  4293                           ;timer.c: 63: TMR1IE = 1;
  4294  001D68  809D               	bsf	3997,0,c	;volatile
  4295                           
  4296                           ;timer.c: 64: break;
  4297  001D6A  D018               	goto	l397
  4298  001D6C                     l3216:
  4299                           
  4300                           ;timer.c: 66: T3CON = 0;
  4301  001D6C  0E00               	movlw	0
  4302  001D6E  6EB1               	movwf	4017,c	;volatile
  4303                           
  4304                           ;timer.c: 67: TMR3IE = 1;
  4305  001D70  82A0               	bsf	4000,1,c	;volatile
  4306                           
  4307                           ;timer.c: 69: }
  4308                           
  4309                           ;timer.c: 68: break;
  4310  001D72  D014               	goto	l397
  4311  001D74                     l3222:
  4312  001D74  C080  F082         	movff	initTimer@timer,??_initTimer
  4313  001D78  C081  F083         	movff	initTimer@timer+1,??_initTimer+1
  4314                           
  4315                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4316                           ; Switch size 1, requested type "space"
  4317                           ; Number of cases is 1, Range of values is 0 to 0
  4318                           ; switch strategies available:
  4319                           ; Name         Instructions Cycles
  4320                           ; simple_byte            4     3 (average)
  4321                           ;	Chosen strategy is simple_byte
  4322  001D7C  0100               	movlb	0	; () banked
  4323  001D7E  5183               	movf	(??_initTimer+1)& (0+255),w,b
  4324  001D80  0A00               	xorlw	0	; case 0
  4325  001D82  A4D8               	btfss	status,2,c
  4326  001D84  D00B               	goto	l397
  4327                           
  4328                           ; BSR set to: 0
  4329                           ; Switch size 1, requested type "space"
  4330                           ; Number of cases is 3, Range of values is 0 to 3
  4331                           ; switch strategies available:
  4332                           ; Name         Instructions Cycles
  4333                           ; simple_byte           10     6 (average)
  4334                           ;	Chosen strategy is simple_byte
  4335  001D86  0100               	movlb	0	; () banked
  4336  001D88  5182               	movf	??_initTimer& (0+255),w,b
  4337  001D8A  0A00               	xorlw	0	; case 0
  4338  001D8C  B4D8               	btfsc	status,2,c
  4339  001D8E  D7E5               	goto	l3206
  4340  001D90  0A01               	xorlw	1	; case 1
  4341  001D92  B4D8               	btfsc	status,2,c
  4342  001D94  D7E7               	goto	l3212
  4343  001D96  0A02               	xorlw	2	; case 3
  4344  001D98  B4D8               	btfsc	status,2,c
  4345  001D9A  D7E8               	goto	l3216
  4346  001D9C                     l397:
  4347                           
  4348                           ;timer.c: 70: PEIE = 1;
  4349  001D9C  8CF2               	bsf	intcon,6,c	;volatile
  4350                           
  4351                           ;timer.c: 71: (INTCONbits.GIE = 1);
  4352  001D9E  8EF2               	bsf	intcon,7,c	;volatile
  4353  001DA0  0012               	return		;funcret
  4354  001DA2                     __end_of_initTimer:
  4355                           	opt stack 0
  4356                           tblptru	equ	0xFF8
  4357                           tblptrh	equ	0xFF7
  4358                           tblptrl	equ	0xFF6
  4359                           tablat	equ	0xFF5
  4360                           intcon	equ	0xFF2
  4361                           postinc0	equ	0xFEE
  4362                           wreg	equ	0xFE8
  4363                           postdec1	equ	0xFE5
  4364                           fsr1l	equ	0xFE1
  4365                           postinc2	equ	0xFDE
  4366                           postdec2	equ	0xFDD
  4367                           fsr2h	equ	0xFDA
  4368                           fsr2l	equ	0xFD9
  4369                           status	equ	0xFD8
  4370                           
  4371 ;; *************** function _digitalWrite *****************
  4372 ;; Defined at:
  4373 ;;		line 53 in file "iopin.c"
  4374 ;; Parameters:    Size  Location     Type
  4375 ;;  port            2    0[BANK0 ] int 
  4376 ;;  pin             2    2[BANK0 ] int 
  4377 ;;  val             2    4[BANK0 ] int 
  4378 ;; Auto vars:     Size  Location     Type
  4379 ;;		None
  4380 ;; Return value:  Size  Location     Type
  4381 ;;                  1    wreg      void 
  4382 ;; Registers used:
  4383 ;;		wreg, status,2, status,0
  4384 ;; Tracked objects:
  4385 ;;		On entry : 0/0
  4386 ;;		On exit  : 0/0
  4387 ;;		Unchanged: 0/0
  4388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4389 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4391 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4392 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4393 ;;Total ram usage:        9 bytes
  4394 ;; Hardware stack levels used:    1
  4395 ;; Hardware stack levels required when called:    5
  4396 ;; This function calls:
  4397 ;;		Nothing
  4398 ;; This function is called by:
  4399 ;;		_sortBattery
  4400 ;; This function uses a non-reentrant model
  4401 ;;
  4402                           
  4403                           	psect	text16
  4404  0013F8                     __ptext16:
  4405                           	opt stack 0
  4406  0013F8                     _digitalWrite:
  4407                           	opt stack 24
  4408                           
  4409                           ;iopin.c: 54: pin = 1 << pin;
  4410                           
  4411                           ;incstack = 0
  4412  0013F8  C082  F086         	movff	digitalWrite@pin,??_digitalWrite
  4413  0013FC  0E01               	movlw	1
  4414  0013FE  0100               	movlb	0	; () banked
  4415  001400  6F87               	movwf	(??_digitalWrite+1)& (0+255),b
  4416  001402  0E00               	movlw	0
  4417  001404  0100               	movlb	0	; () banked
  4418  001406  6F88               	movwf	(??_digitalWrite+2)& (0+255),b
  4419  001408  0100               	movlb	0	; () banked
  4420  00140A  2B86               	incf	??_digitalWrite& (0+255),f,b
  4421  00140C  D004               	goto	u3114
  4422  00140E                     u3115:
  4423  00140E  90D8               	bcf	status,0,c
  4424  001410  0100               	movlb	0	; () banked
  4425  001412  3787               	rlcf	(??_digitalWrite+1)& (0+255),f,b
  4426  001414  3788               	rlcf	(??_digitalWrite+2)& (0+255),f,b
  4427  001416                     u3114:
  4428  001416  0100               	movlb	0	; () banked
  4429  001418  2F86               	decfsz	??_digitalWrite& (0+255),f,b
  4430  00141A  D7F9               	goto	u3115
  4431  00141C  C087  F082         	movff	??_digitalWrite+1,digitalWrite@pin
  4432  001420  C088  F083         	movff	??_digitalWrite+2,digitalWrite@pin+1
  4433                           
  4434                           ;iopin.c: 55: if(val == 0){
  4435  001424  0100               	movlb	0	; () banked
  4436  001426  5184               	movf	digitalWrite@val& (0+255),w,b
  4437  001428  0100               	movlb	0	; () banked
  4438  00142A  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  4439  00142C  A4D8               	btfss	status,2,c
  4440  00142E  D03C               	goto	l3536
  4441                           
  4442                           ; BSR set to: 0
  4443                           ;iopin.c: 56: pin ^= 0xff;
  4444  001430  0EFF               	movlw	255
  4445  001432  0100               	movlb	0	; () banked
  4446  001434  1B82               	xorwf	digitalWrite@pin& (0+255),f,b
  4447                           
  4448                           ; BSR set to: 0
  4449                           ;iopin.c: 57: }
  4450                           ;iopin.c: 59: switch(port){
  4451  001436  D038               	goto	l3536
  4452  001438                     l3512:
  4453                           
  4454                           ; BSR set to: 0
  4455  001438  0100               	movlb	0	; () banked
  4456  00143A  0584               	decf	digitalWrite@val& (0+255),w,b
  4457  00143C  0100               	movlb	0	; () banked
  4458  00143E  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  4459  001440  A4D8               	btfss	status,2,c
  4460  001442  D004               	goto	l3516
  4461                           
  4462                           ; BSR set to: 0
  4463  001444  0100               	movlb	0	; () banked
  4464  001446  5182               	movf	digitalWrite@pin& (0+255),w,b
  4465  001448  1289               	iorwf	3977,f,c	;volatile
  4466  00144A  0012               	return	
  4467  00144C                     l3516:
  4468                           
  4469                           ; BSR set to: 0
  4470                           ;iopin.c: 61: else LATA &= pin;
  4471  00144C  0100               	movlb	0	; () banked
  4472  00144E  5182               	movf	digitalWrite@pin& (0+255),w,b
  4473  001450  1689               	andwf	3977,f,c	;volatile
  4474                           
  4475                           ; BSR set to: 0
  4476                           ;iopin.c: 62: break;
  4477  001452  0012               	return	
  4478  001454                     l3518:
  4479                           
  4480                           ; BSR set to: 0
  4481  001454  0100               	movlb	0	; () banked
  4482  001456  0584               	decf	digitalWrite@val& (0+255),w,b
  4483  001458  0100               	movlb	0	; () banked
  4484  00145A  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  4485  00145C  A4D8               	btfss	status,2,c
  4486  00145E  D004               	goto	l3522
  4487                           
  4488                           ; BSR set to: 0
  4489  001460  0100               	movlb	0	; () banked
  4490  001462  5182               	movf	digitalWrite@pin& (0+255),w,b
  4491  001464  128A               	iorwf	3978,f,c	;volatile
  4492  001466  0012               	return	
  4493  001468                     l3522:
  4494                           
  4495                           ; BSR set to: 0
  4496                           ;iopin.c: 64: else LATB &= pin;
  4497  001468  0100               	movlb	0	; () banked
  4498  00146A  5182               	movf	digitalWrite@pin& (0+255),w,b
  4499  00146C  168A               	andwf	3978,f,c	;volatile
  4500                           
  4501                           ; BSR set to: 0
  4502                           ;iopin.c: 65: break;
  4503  00146E  0012               	return	
  4504  001470                     l3524:
  4505                           
  4506                           ; BSR set to: 0
  4507  001470  0100               	movlb	0	; () banked
  4508  001472  0584               	decf	digitalWrite@val& (0+255),w,b
  4509  001474  0100               	movlb	0	; () banked
  4510  001476  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  4511  001478  A4D8               	btfss	status,2,c
  4512  00147A  D004               	goto	l3528
  4513                           
  4514                           ; BSR set to: 0
  4515  00147C  0100               	movlb	0	; () banked
  4516  00147E  5182               	movf	digitalWrite@pin& (0+255),w,b
  4517  001480  128B               	iorwf	3979,f,c	;volatile
  4518  001482  0012               	return	
  4519  001484                     l3528:
  4520                           
  4521                           ; BSR set to: 0
  4522                           ;iopin.c: 67: else LATC &= pin;
  4523  001484  0100               	movlb	0	; () banked
  4524  001486  5182               	movf	digitalWrite@pin& (0+255),w,b
  4525  001488  168B               	andwf	3979,f,c	;volatile
  4526                           
  4527                           ; BSR set to: 0
  4528                           ;iopin.c: 68: break;
  4529  00148A  0012               	return	
  4530  00148C                     l3530:
  4531                           
  4532                           ; BSR set to: 0
  4533  00148C  0100               	movlb	0	; () banked
  4534  00148E  0584               	decf	digitalWrite@val& (0+255),w,b
  4535  001490  0100               	movlb	0	; () banked
  4536  001492  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  4537  001494  A4D8               	btfss	status,2,c
  4538  001496  D004               	goto	l3534
  4539                           
  4540                           ; BSR set to: 0
  4541  001498  0100               	movlb	0	; () banked
  4542  00149A  5182               	movf	digitalWrite@pin& (0+255),w,b
  4543  00149C  128C               	iorwf	3980,f,c	;volatile
  4544  00149E  0012               	return	
  4545  0014A0                     l3534:
  4546                           
  4547                           ; BSR set to: 0
  4548                           ;iopin.c: 70: else LATD &= pin;
  4549  0014A0  0100               	movlb	0	; () banked
  4550  0014A2  5182               	movf	digitalWrite@pin& (0+255),w,b
  4551  0014A4  168C               	andwf	3980,f,c	;volatile
  4552                           
  4553                           ; BSR set to: 0
  4554                           ;iopin.c: 71: }
  4555  0014A6  0012               	return	
  4556  0014A8                     l3536:
  4557                           
  4558                           ; BSR set to: 0
  4559  0014A8  C080  F086         	movff	digitalWrite@port,??_digitalWrite
  4560  0014AC  C081  F087         	movff	digitalWrite@port+1,??_digitalWrite+1
  4561                           
  4562                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4563                           ; Switch size 1, requested type "space"
  4564                           ; Number of cases is 1, Range of values is 0 to 0
  4565                           ; switch strategies available:
  4566                           ; Name         Instructions Cycles
  4567                           ; simple_byte            4     3 (average)
  4568                           ;	Chosen strategy is simple_byte
  4569  0014B0  0100               	movlb	0	; () banked
  4570  0014B2  5187               	movf	(??_digitalWrite+1)& (0+255),w,b
  4571  0014B4  0A00               	xorlw	0	; case 0
  4572  0014B6  A4D8               	btfss	status,2,c
  4573  0014B8  0012               	return	
  4574                           
  4575                           ; BSR set to: 0
  4576                           ; Switch size 1, requested type "space"
  4577                           ; Number of cases is 4, Range of values is 0 to 3
  4578                           ; switch strategies available:
  4579                           ; Name         Instructions Cycles
  4580                           ; simple_byte           13     7 (average)
  4581                           ;	Chosen strategy is simple_byte
  4582  0014BA  0100               	movlb	0	; () banked
  4583  0014BC  5186               	movf	??_digitalWrite& (0+255),w,b
  4584  0014BE  0A00               	xorlw	0	; case 0
  4585  0014C0  B4D8               	btfsc	status,2,c
  4586  0014C2  D7BA               	goto	l3512
  4587  0014C4  0A01               	xorlw	1	; case 1
  4588  0014C6  B4D8               	btfsc	status,2,c
  4589  0014C8  D7C5               	goto	l3518
  4590  0014CA  0A03               	xorlw	3	; case 2
  4591  0014CC  B4D8               	btfsc	status,2,c
  4592  0014CE  D7D0               	goto	l3524
  4593  0014D0  0A01               	xorlw	1	; case 3
  4594  0014D2  A4D8               	btfss	status,2,c
  4595  0014D4  0012               	return	
  4596  0014D6  D7DA               	goto	l3530
  4597  0014D8                     __end_of_digitalWrite:
  4598                           	opt stack 0
  4599                           tblptru	equ	0xFF8
  4600                           tblptrh	equ	0xFF7
  4601                           tblptrl	equ	0xFF6
  4602                           tablat	equ	0xFF5
  4603                           intcon	equ	0xFF2
  4604                           postinc0	equ	0xFEE
  4605                           wreg	equ	0xFE8
  4606                           postdec1	equ	0xFE5
  4607                           fsr1l	equ	0xFE1
  4608                           postinc2	equ	0xFDE
  4609                           postdec2	equ	0xFDD
  4610                           fsr2h	equ	0xFDA
  4611                           fsr2l	equ	0xFD9
  4612                           status	equ	0xFD8
  4613                           
  4614 ;; *************** function _showInterface *****************
  4615 ;; Defined at:
  4616 ;;		line 144 in file "main.c"
  4617 ;; Parameters:    Size  Location     Type
  4618 ;;		None
  4619 ;; Auto vars:     Size  Location     Type
  4620 ;;  key             1   22[BANK0 ] unsigned char 
  4621 ;; Return value:  Size  Location     Type
  4622 ;;                  1    wreg      void 
  4623 ;; Registers used:
  4624 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4625 ;; Tracked objects:
  4626 ;;		On entry : 0/0
  4627 ;;		On exit  : 0/0
  4628 ;;		Unchanged: 0/0
  4629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4631 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4633 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4634 ;;Total ram usage:        1 bytes
  4635 ;; Hardware stack levels used:    1
  4636 ;; Hardware stack levels required when called:   11
  4637 ;; This function calls:
  4638 ;;		_dateTime
  4639 ;;		_mainMenu
  4640 ;;		_readKeypad
  4641 ;;		_runMenu
  4642 ;;		_runSelect
  4643 ;;		_runStats
  4644 ;;		_runTime
  4645 ;; This function is called by:
  4646 ;;		_main
  4647 ;; This function uses a non-reentrant model
  4648 ;;
  4649                           
  4650                           	psect	text17
  4651  001026                     __ptext17:
  4652                           	opt stack 0
  4653  001026                     _showInterface:
  4654                           	opt stack 19
  4655  001026                     
  4656                           ;main.c: 147: dateTime();
  4657  001026  ECF6  F00F         	call	_dateTime	;wreg free
  4658  00102A                     l3698:
  4659  00102A  EC6C  F00F         	call	_readKeypad	;wreg free
  4660  00102E  0A41               	xorlw	65
  4661  001030  A4D8               	btfss	status,2,c
  4662  001032  D7FB               	goto	l3698
  4663  001034                     l3700:
  4664                           
  4665                           ;main.c: 152: mainMenu();
  4666  001034  ECE3  F00F         	call	_mainMenu	;wreg free
  4667  001038                     l3702:
  4668  001038  EC6C  F00F         	call	_readKeypad	;wreg free
  4669  00103C  0100               	movlb	0	; () banked
  4670  00103E  6F96               	movwf	showInterface@key& (0+255),b
  4671                           
  4672                           ; BSR set to: 0
  4673                           ;main.c: 156: while(key != 'B' && key != 'C' && key != '*');
  4674  001040  0E42               	movlw	66
  4675  001042  0100               	movlb	0	; () banked
  4676  001044  1996               	xorwf	showInterface@key& (0+255),w,b
  4677  001046  B4D8               	btfsc	status,2,c
  4678  001048  D00A               	goto	l3710
  4679                           
  4680                           ; BSR set to: 0
  4681  00104A  0E43               	movlw	67
  4682  00104C  0100               	movlb	0	; () banked
  4683  00104E  1996               	xorwf	showInterface@key& (0+255),w,b
  4684  001050  B4D8               	btfsc	status,2,c
  4685  001052  D005               	goto	l3710
  4686                           
  4687                           ; BSR set to: 0
  4688  001054  0E2A               	movlw	42
  4689  001056  0100               	movlb	0	; () banked
  4690  001058  1996               	xorwf	showInterface@key& (0+255),w,b
  4691  00105A  A4D8               	btfss	status,2,c
  4692  00105C  D7ED               	goto	l3702
  4693  00105E                     l3710:
  4694                           
  4695                           ; BSR set to: 0
  4696                           ;main.c: 158: if(key == 'C'){
  4697  00105E  0E43               	movlw	67
  4698  001060  0100               	movlb	0	; () banked
  4699  001062  1996               	xorwf	showInterface@key& (0+255),w,b
  4700  001064  A4D8               	btfss	status,2,c
  4701  001066  D056               	goto	l3754
  4702                           
  4703                           ; BSR set to: 0
  4704                           ;main.c: 160: runSelect();
  4705  001068  ECD0  F00F         	call	_runSelect	;wreg free
  4706  00106C                     l3714:
  4707  00106C  EC6C  F00F         	call	_readKeypad	;wreg free
  4708  001070  0100               	movlb	0	; () banked
  4709  001072  6F96               	movwf	showInterface@key& (0+255),b
  4710                           
  4711                           ; BSR set to: 0
  4712                           ;main.c: 166: while(key != '1' && key != '2' && key != '3' && key != '4' && key != '*');
  4713  001074  0E31               	movlw	49
  4714  001076  0100               	movlb	0	; () banked
  4715  001078  1996               	xorwf	showInterface@key& (0+255),w,b
  4716  00107A  B4D8               	btfsc	status,2,c
  4717  00107C  D014               	goto	l3726
  4718                           
  4719                           ; BSR set to: 0
  4720  00107E  0E32               	movlw	50
  4721  001080  0100               	movlb	0	; () banked
  4722  001082  1996               	xorwf	showInterface@key& (0+255),w,b
  4723  001084  B4D8               	btfsc	status,2,c
  4724  001086  D00F               	goto	l3726
  4725                           
  4726                           ; BSR set to: 0
  4727  001088  0E33               	movlw	51
  4728  00108A  0100               	movlb	0	; () banked
  4729  00108C  1996               	xorwf	showInterface@key& (0+255),w,b
  4730  00108E  B4D8               	btfsc	status,2,c
  4731  001090  D00A               	goto	l3726
  4732                           
  4733                           ; BSR set to: 0
  4734  001092  0E34               	movlw	52
  4735  001094  0100               	movlb	0	; () banked
  4736  001096  1996               	xorwf	showInterface@key& (0+255),w,b
  4737  001098  B4D8               	btfsc	status,2,c
  4738  00109A  D005               	goto	l3726
  4739                           
  4740                           ; BSR set to: 0
  4741  00109C  0E2A               	movlw	42
  4742  00109E  0100               	movlb	0	; () banked
  4743  0010A0  1996               	xorwf	showInterface@key& (0+255),w,b
  4744  0010A2  A4D8               	btfss	status,2,c
  4745  0010A4  D7E3               	goto	l3714
  4746  0010A6                     l3726:
  4747                           
  4748                           ; BSR set to: 0
  4749                           ;main.c: 168: if(key == '*')continue;
  4750  0010A6  0E2A               	movlw	42
  4751  0010A8  0100               	movlb	0	; () banked
  4752  0010AA  1996               	xorwf	showInterface@key& (0+255),w,b
  4753  0010AC  B4D8               	btfsc	status,2,c
  4754  0010AE  D7C2               	goto	l3700
  4755  0010B0                     l3730:
  4756                           
  4757                           ;main.c: 174: runMenu(key);
  4758  0010B0  0100               	movlb	0	; () banked
  4759  0010B2  5196               	movf	showInterface@key& (0+255),w,b
  4760  0010B4  EC53  F00F         	call	_runMenu
  4761  0010B8                     l3732:
  4762  0010B8  EC6C  F00F         	call	_readKeypad	;wreg free
  4763  0010BC  0100               	movlb	0	; () banked
  4764  0010BE  6F96               	movwf	showInterface@key& (0+255),b
  4765                           
  4766                           ; BSR set to: 0
  4767                           ;main.c: 178: while(key != 'A' && key != 'B' && key != '*');
  4768  0010C0  0E41               	movlw	65
  4769  0010C2  0100               	movlb	0	; () banked
  4770  0010C4  1996               	xorwf	showInterface@key& (0+255),w,b
  4771  0010C6  B4D8               	btfsc	status,2,c
  4772  0010C8  D00A               	goto	l3740
  4773                           
  4774                           ; BSR set to: 0
  4775  0010CA  0E42               	movlw	66
  4776  0010CC  0100               	movlb	0	; () banked
  4777  0010CE  1996               	xorwf	showInterface@key& (0+255),w,b
  4778  0010D0  B4D8               	btfsc	status,2,c
  4779  0010D2  D005               	goto	l3740
  4780                           
  4781                           ; BSR set to: 0
  4782  0010D4  0E2A               	movlw	42
  4783  0010D6  0100               	movlb	0	; () banked
  4784  0010D8  1996               	xorwf	showInterface@key& (0+255),w,b
  4785  0010DA  A4D8               	btfss	status,2,c
  4786  0010DC  D7ED               	goto	l3732
  4787  0010DE                     l3740:
  4788                           
  4789                           ; BSR set to: 0
  4790                           ;main.c: 180: if(key == 'A'){
  4791  0010DE  0E41               	movlw	65
  4792  0010E0  0100               	movlb	0	; () banked
  4793  0010E2  1996               	xorwf	showInterface@key& (0+255),w,b
  4794  0010E4  A4D8               	btfss	status,2,c
  4795  0010E6  D003               	goto	l3744
  4796                           
  4797                           ; BSR set to: 0
  4798                           ;main.c: 182: runTime();
  4799  0010E8  ECAA  F00F         	call	_runTime	;wreg free
  4800                           
  4801                           ;main.c: 184: }
  4802  0010EC  D00D               	goto	l3752
  4803  0010EE                     l3744:
  4804                           
  4805                           ;main.c: 185: else if(key == 'B'){
  4806  0010EE  0E42               	movlw	66
  4807  0010F0  0100               	movlb	0	; () banked
  4808  0010F2  1996               	xorwf	showInterface@key& (0+255),w,b
  4809  0010F4  A4D8               	btfss	status,2,c
  4810  0010F6  D003               	goto	l3748
  4811                           
  4812                           ; BSR set to: 0
  4813                           ;main.c: 187: runStats();
  4814  0010F8  ECBD  F00F         	call	_runStats	;wreg free
  4815                           
  4816                           ;main.c: 189: }
  4817  0010FC  D005               	goto	l3752
  4818  0010FE                     l3748:
  4819                           
  4820                           ;main.c: 190: else if(key == '*')break;
  4821  0010FE  0E2A               	movlw	42
  4822  001100  0100               	movlb	0	; () banked
  4823  001102  1996               	xorwf	showInterface@key& (0+255),w,b
  4824  001104  B4D8               	btfsc	status,2,c
  4825  001106  D796               	goto	l3700
  4826  001108                     l3752:
  4827  001108  EC6C  F00F         	call	_readKeypad	;wreg free
  4828  00110C  0A2A               	xorlw	42
  4829  00110E  B4D8               	btfsc	status,2,c
  4830  001110  D7CF               	goto	l3730
  4831  001112  D7FA               	goto	l3752
  4832  001114                     l3754:
  4833                           
  4834                           ;main.c: 196: else if(key == 'B'){
  4835  001114  0E42               	movlw	66
  4836  001116  0100               	movlb	0	; () banked
  4837  001118  1996               	xorwf	showInterface@key& (0+255),w,b
  4838  00111A  B4D8               	btfsc	status,2,c
  4839  00111C  0012               	return	
  4840                           
  4841                           ; BSR set to: 0
  4842                           ;main.c: 199: else if(key == '*')
  4843                           
  4844                           ; BSR set to: 0
  4845                           
  4846                           ; BSR set to: 0
  4847                           ;main.c: 198: }
  4848                           
  4849                           ; BSR set to: 0
  4850                           ;main.c: 197: return;
  4851  00111E  0E2A               	movlw	42
  4852  001120  0100               	movlb	0	; () banked
  4853  001122  1996               	xorwf	showInterface@key& (0+255),w,b
  4854  001124  B4D8               	btfsc	status,2,c
  4855  001126  D77F               	goto	l3696
  4856  001128  D785               	goto	l3700
  4857  00112A                     __end_of_showInterface:
  4858                           	opt stack 0
  4859                           tblptru	equ	0xFF8
  4860                           tblptrh	equ	0xFF7
  4861                           tblptrl	equ	0xFF6
  4862                           tablat	equ	0xFF5
  4863                           intcon	equ	0xFF2
  4864                           postinc0	equ	0xFEE
  4865                           wreg	equ	0xFE8
  4866                           postdec1	equ	0xFE5
  4867                           fsr1l	equ	0xFE1
  4868                           postinc2	equ	0xFDE
  4869                           postdec2	equ	0xFDD
  4870                           fsr2h	equ	0xFDA
  4871                           fsr2l	equ	0xFD9
  4872                           status	equ	0xFD8
  4873                           
  4874 ;; *************** function _runTime *****************
  4875 ;; Defined at:
  4876 ;;		line 36 in file "interface.c"
  4877 ;; Parameters:    Size  Location     Type
  4878 ;;		None
  4879 ;; Auto vars:     Size  Location     Type
  4880 ;;		None
  4881 ;; Return value:  Size  Location     Type
  4882 ;;                  1    wreg      void 
  4883 ;; Registers used:
  4884 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4885 ;; Tracked objects:
  4886 ;;		On entry : 0/0
  4887 ;;		On exit  : 0/0
  4888 ;;		Unchanged: 0/0
  4889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4893 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4894 ;;Total ram usage:        0 bytes
  4895 ;; Hardware stack levels used:    1
  4896 ;; Hardware stack levels required when called:   10
  4897 ;; This function calls:
  4898 ;;		_lcdClear
  4899 ;;		_printf
  4900 ;; This function is called by:
  4901 ;;		_showInterface
  4902 ;; This function uses a non-reentrant model
  4903 ;;
  4904                           
  4905                           	psect	text18
  4906  001F54                     __ptext18:
  4907                           	opt stack 0
  4908  001F54                     _runTime:
  4909                           	opt stack 19
  4910                           
  4911                           ;interface.c: 37: lcdClear();
  4912                           
  4913                           ; BSR set to: 0
  4914                           ;incstack = 0
  4915  001F54  EC2A  F010         	call	_lcdClear	;wreg free
  4916                           
  4917                           ;interface.c: 38: printf("time: nnn sec   \n");
  4918  001F58  0E0A               	movlw	low STR_18
  4919  001F5A  0100               	movlb	0	; () banked
  4920  001F5C  6F87               	movwf	printf@f& (0+255),b
  4921  001F5E  0EFF               	movlw	high STR_18
  4922  001F60  0100               	movlb	0	; () banked
  4923  001F62  6F88               	movwf	(printf@f+1)& (0+255),b
  4924  001F64  EC5F  F004         	call	_printf	;wreg free
  4925                           
  4926                           ;interface.c: 39: printf("              *>");
  4927  001F68  0E3F               	movlw	low STR_19
  4928  001F6A  0100               	movlb	0	; () banked
  4929  001F6C  6F87               	movwf	printf@f& (0+255),b
  4930  001F6E  0EFF               	movlw	high STR_19
  4931  001F70  0100               	movlb	0	; () banked
  4932  001F72  6F88               	movwf	(printf@f+1)& (0+255),b
  4933  001F74  EC5F  F004         	call	_printf	;wreg free
  4934  001F78  0012               	return		;funcret
  4935  001F7A                     __end_of_runTime:
  4936                           	opt stack 0
  4937                           tblptru	equ	0xFF8
  4938                           tblptrh	equ	0xFF7
  4939                           tblptrl	equ	0xFF6
  4940                           tablat	equ	0xFF5
  4941                           intcon	equ	0xFF2
  4942                           postinc0	equ	0xFEE
  4943                           wreg	equ	0xFE8
  4944                           postdec1	equ	0xFE5
  4945                           fsr1l	equ	0xFE1
  4946                           postinc2	equ	0xFDE
  4947                           postdec2	equ	0xFDD
  4948                           fsr2h	equ	0xFDA
  4949                           fsr2l	equ	0xFD9
  4950                           status	equ	0xFD8
  4951                           
  4952 ;; *************** function _runStats *****************
  4953 ;; Defined at:
  4954 ;;		line 42 in file "interface.c"
  4955 ;; Parameters:    Size  Location     Type
  4956 ;;		None
  4957 ;; Auto vars:     Size  Location     Type
  4958 ;;		None
  4959 ;; Return value:  Size  Location     Type
  4960 ;;                  1    wreg      void 
  4961 ;; Registers used:
  4962 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4963 ;; Tracked objects:
  4964 ;;		On entry : 0/0
  4965 ;;		On exit  : 0/0
  4966 ;;		Unchanged: 0/0
  4967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4971 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4972 ;;Total ram usage:        0 bytes
  4973 ;; Hardware stack levels used:    1
  4974 ;; Hardware stack levels required when called:   10
  4975 ;; This function calls:
  4976 ;;		_lcdClear
  4977 ;;		_printf
  4978 ;; This function is called by:
  4979 ;;		_showInterface
  4980 ;; This function uses a non-reentrant model
  4981 ;;
  4982                           
  4983                           	psect	text19
  4984  001F7A                     __ptext19:
  4985                           	opt stack 0
  4986  001F7A                     _runStats:
  4987                           	opt stack 19
  4988                           
  4989                           ;interface.c: 43: lcdClear();
  4990                           
  4991                           ;incstack = 0
  4992  001F7A  EC2A  F010         	call	_lcdClear	;wreg free
  4993                           
  4994                           ;interface.c: 44: printf("[AA,9V,C,other] \n");
  4995  001F7E  0E1C               	movlw	low STR_20
  4996  001F80  0100               	movlb	0	; () banked
  4997  001F82  6F87               	movwf	printf@f& (0+255),b
  4998  001F84  0EFF               	movlw	high STR_20
  4999  001F86  0100               	movlb	0	; () banked
  5000  001F88  6F88               	movwf	(printf@f+1)& (0+255),b
  5001  001F8A  EC5F  F004         	call	_printf	;wreg free
  5002                           
  5003                           ;interface.c: 45: printf("[nn,n,n,nn]   *>");
  5004  001F8E  0E83               	movlw	low STR_21
  5005  001F90  0100               	movlb	0	; () banked
  5006  001F92  6F87               	movwf	printf@f& (0+255),b
  5007  001F94  0EFF               	movlw	high STR_21
  5008  001F96  0100               	movlb	0	; () banked
  5009  001F98  6F88               	movwf	(printf@f+1)& (0+255),b
  5010  001F9A  EC5F  F004         	call	_printf	;wreg free
  5011  001F9E  0012               	return		;funcret
  5012  001FA0                     __end_of_runStats:
  5013                           	opt stack 0
  5014                           tblptru	equ	0xFF8
  5015                           tblptrh	equ	0xFF7
  5016                           tblptrl	equ	0xFF6
  5017                           tablat	equ	0xFF5
  5018                           intcon	equ	0xFF2
  5019                           postinc0	equ	0xFEE
  5020                           wreg	equ	0xFE8
  5021                           postdec1	equ	0xFE5
  5022                           fsr1l	equ	0xFE1
  5023                           postinc2	equ	0xFDE
  5024                           postdec2	equ	0xFDD
  5025                           fsr2h	equ	0xFDA
  5026                           fsr2l	equ	0xFD9
  5027                           status	equ	0xFD8
  5028                           
  5029 ;; *************** function _runSelect *****************
  5030 ;; Defined at:
  5031 ;;		line 24 in file "interface.c"
  5032 ;; Parameters:    Size  Location     Type
  5033 ;;		None
  5034 ;; Auto vars:     Size  Location     Type
  5035 ;;		None
  5036 ;; Return value:  Size  Location     Type
  5037 ;;                  1    wreg      void 
  5038 ;; Registers used:
  5039 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5040 ;; Tracked objects:
  5041 ;;		On entry : 0/0
  5042 ;;		On exit  : 0/0
  5043 ;;		Unchanged: 0/0
  5044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5048 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5049 ;;Total ram usage:        0 bytes
  5050 ;; Hardware stack levels used:    1
  5051 ;; Hardware stack levels required when called:   10
  5052 ;; This function calls:
  5053 ;;		_lcdClear
  5054 ;;		_printf
  5055 ;; This function is called by:
  5056 ;;		_showInterface
  5057 ;; This function uses a non-reentrant model
  5058 ;;
  5059                           
  5060                           	psect	text20
  5061  001FA0                     __ptext20:
  5062                           	opt stack 0
  5063  001FA0                     _runSelect:
  5064                           	opt stack 19
  5065                           
  5066                           ;interface.c: 25: lcdClear();
  5067                           
  5068                           ;incstack = 0
  5069  001FA0  EC2A  F010         	call	_lcdClear	;wreg free
  5070                           
  5071                           ;interface.c: 26: printf("select run:     \n");
  5072  001FA4  0EF8               	movlw	low STR_14
  5073  001FA6  0100               	movlb	0	; () banked
  5074  001FA8  6F87               	movwf	printf@f& (0+255),b
  5075  001FAA  0EFE               	movlw	high STR_14
  5076  001FAC  0100               	movlb	0	; () banked
  5077  001FAE  6F88               	movwf	(printf@f+1)& (0+255),b
  5078  001FB0  EC5F  F004         	call	_printf	;wreg free
  5079                           
  5080                           ;interface.c: 27: printf("[1,2,3,4]     *>");
  5081  001FB4  0E50               	movlw	low STR_15
  5082  001FB6  0100               	movlb	0	; () banked
  5083  001FB8  6F87               	movwf	printf@f& (0+255),b
  5084  001FBA  0EFF               	movlw	high STR_15
  5085  001FBC  0100               	movlb	0	; () banked
  5086  001FBE  6F88               	movwf	(printf@f+1)& (0+255),b
  5087  001FC0  EC5F  F004         	call	_printf	;wreg free
  5088  001FC4  0012               	return		;funcret
  5089  001FC6                     __end_of_runSelect:
  5090                           	opt stack 0
  5091                           tblptru	equ	0xFF8
  5092                           tblptrh	equ	0xFF7
  5093                           tblptrl	equ	0xFF6
  5094                           tablat	equ	0xFF5
  5095                           intcon	equ	0xFF2
  5096                           postinc0	equ	0xFEE
  5097                           wreg	equ	0xFE8
  5098                           postdec1	equ	0xFE5
  5099                           fsr1l	equ	0xFE1
  5100                           postinc2	equ	0xFDE
  5101                           postdec2	equ	0xFDD
  5102                           fsr2h	equ	0xFDA
  5103                           fsr2l	equ	0xFD9
  5104                           status	equ	0xFD8
  5105                           
  5106 ;; *************** function _runMenu *****************
  5107 ;; Defined at:
  5108 ;;		line 30 in file "interface.c"
  5109 ;; Parameters:    Size  Location     Type
  5110 ;;  key             1    wreg     unsigned char 
  5111 ;; Auto vars:     Size  Location     Type
  5112 ;;  key             1   21[BANK0 ] unsigned char 
  5113 ;; Return value:  Size  Location     Type
  5114 ;;                  1    wreg      void 
  5115 ;; Registers used:
  5116 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5117 ;; Tracked objects:
  5118 ;;		On entry : 0/0
  5119 ;;		On exit  : 0/0
  5120 ;;		Unchanged: 0/0
  5121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5123 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5125 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5126 ;;Total ram usage:        1 bytes
  5127 ;; Hardware stack levels used:    1
  5128 ;; Hardware stack levels required when called:   10
  5129 ;; This function calls:
  5130 ;;		_lcdClear
  5131 ;;		_printf
  5132 ;; This function is called by:
  5133 ;;		_showInterface
  5134 ;; This function uses a non-reentrant model
  5135 ;;
  5136                           
  5137                           	psect	text21
  5138  001EA6                     __ptext21:
  5139                           	opt stack 0
  5140  001EA6                     _runMenu:
  5141                           	opt stack 19
  5142                           
  5143                           ;incstack = 0
  5144                           ;runMenu@key stored from wreg
  5145  001EA6  0100               	movlb	0	; () banked
  5146  001EA8  6F95               	movwf	runMenu@key& (0+255),b
  5147                           
  5148                           ;interface.c: 31: lcdClear();
  5149  001EAA  EC2A  F010         	call	_lcdClear	;wreg free
  5150                           
  5151                           ;interface.c: 32: printf("%c) time  <A     \n",key);
  5152  001EAE  0EC1               	movlw	low STR_16
  5153  001EB0  0100               	movlb	0	; () banked
  5154  001EB2  6F87               	movwf	printf@f& (0+255),b
  5155  001EB4  0EFE               	movlw	high STR_16
  5156  001EB6  0100               	movlb	0	; () banked
  5157  001EB8  6F88               	movwf	(printf@f+1)& (0+255),b
  5158  001EBA  C095  F089         	movff	runMenu@key,?_printf+2
  5159  001EBE  0100               	movlb	0	; () banked
  5160  001EC0  6B8A               	clrf	(?_printf+3)& (0+255),b
  5161  001EC2  EC5F  F004         	call	_printf	;wreg free
  5162                           
  5163                           ;interface.c: 33: printf( "   stats <B   *>");
  5164  001EC6  0E72               	movlw	low STR_17
  5165  001EC8  0100               	movlb	0	; () banked
  5166  001ECA  6F87               	movwf	printf@f& (0+255),b
  5167  001ECC  0EFF               	movlw	high STR_17
  5168  001ECE  0100               	movlb	0	; () banked
  5169  001ED0  6F88               	movwf	(printf@f+1)& (0+255),b
  5170  001ED2  EC5F  F004         	call	_printf	;wreg free
  5171  001ED6  0012               	return		;funcret
  5172  001ED8                     __end_of_runMenu:
  5173                           	opt stack 0
  5174                           tblptru	equ	0xFF8
  5175                           tblptrh	equ	0xFF7
  5176                           tblptrl	equ	0xFF6
  5177                           tablat	equ	0xFF5
  5178                           intcon	equ	0xFF2
  5179                           postinc0	equ	0xFEE
  5180                           wreg	equ	0xFE8
  5181                           postdec1	equ	0xFE5
  5182                           fsr1l	equ	0xFE1
  5183                           postinc2	equ	0xFDE
  5184                           postdec2	equ	0xFDD
  5185                           fsr2h	equ	0xFDA
  5186                           fsr2l	equ	0xFD9
  5187                           status	equ	0xFD8
  5188                           
  5189 ;; *************** function _readKeypad *****************
  5190 ;; Defined at:
  5191 ;;		line 35 in file "keypad.c"
  5192 ;; Parameters:    Size  Location     Type
  5193 ;;		None
  5194 ;; Auto vars:     Size  Location     Type
  5195 ;;  key             1    0[BANK0 ] unsigned char 
  5196 ;; Return value:  Size  Location     Type
  5197 ;;                  1    wreg      unsigned char 
  5198 ;; Registers used:
  5199 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  5200 ;; Tracked objects:
  5201 ;;		On entry : 0/0
  5202 ;;		On exit  : 0/0
  5203 ;;		Unchanged: 0/0
  5204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5206 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5208 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5209 ;;Total ram usage:        1 bytes
  5210 ;; Hardware stack levels used:    1
  5211 ;; Hardware stack levels required when called:    5
  5212 ;; This function calls:
  5213 ;;		Nothing
  5214 ;; This function is called by:
  5215 ;;		_showInterface
  5216 ;;		_pause
  5217 ;; This function uses a non-reentrant model
  5218 ;;
  5219                           
  5220                           	psect	text22
  5221  001ED8                     __ptext22:
  5222                           	opt stack 0
  5223  001ED8                     _readKeypad:
  5224                           	opt stack 23
  5225  001ED8                     l232:
  5226  001ED8  A281               	btfss	3969,1,c	;volatile
  5227  001EDA  D7FE               	goto	l232
  5228                           
  5229                           ;keypad.c: 37: char key = (PORTB & 0xF0) >> 4;
  5230  001EDC  3881               	swapf	3969,w,c	;volatile
  5231  001EDE  0B0F               	andlw	15
  5232  001EE0  0B0F               	andlw	15
  5233  001EE2  0100               	movlb	0	; () banked
  5234  001EE4  6F80               	movwf	readKeypad@key& (0+255),b
  5235  001EE6                     l235:
  5236  001EE6  B281               	btfsc	3969,1,c	;volatile
  5237  001EE8  D7FE               	goto	l235
  5238                           
  5239                           ;keypad.c: 39: return keys[key];
  5240  001EEA  0100               	movlb	0	; () banked
  5241  001EEC  5180               	movf	readKeypad@key& (0+255),w,b
  5242  001EEE  0D01               	mullw	1
  5243  001EF0  0E89               	movlw	low _keys
  5244  001EF2  24F3               	addwf	prodl,w,c
  5245  001EF4  6EF6               	movwf	tblptrl,c
  5246  001EF6  0EFE               	movlw	high _keys
  5247  001EF8  20F4               	addwfc	prodh,w,c
  5248  001EFA  6EF7               	movwf	tblptrh,c
  5249  001EFC                     	if	0	;There are less than 3 active tblptr bytes
  5250  001EFC                     	endif
  5251  001EFC  0008               	tblrd		*
  5252  001EFE  50F5               	movf	tablat,w,c
  5253  001F00  0012               	return	
  5254  001F02                     __end_of_readKeypad:
  5255                           	opt stack 0
  5256                           tblptru	equ	0xFF8
  5257                           tblptrh	equ	0xFF7
  5258                           tblptrl	equ	0xFF6
  5259                           tablat	equ	0xFF5
  5260                           prodh	equ	0xFF4
  5261                           prodl	equ	0xFF3
  5262                           intcon	equ	0xFF2
  5263                           postinc0	equ	0xFEE
  5264                           wreg	equ	0xFE8
  5265                           postdec1	equ	0xFE5
  5266                           fsr1l	equ	0xFE1
  5267                           postinc2	equ	0xFDE
  5268                           postdec2	equ	0xFDD
  5269                           fsr2h	equ	0xFDA
  5270                           fsr2l	equ	0xFD9
  5271                           status	equ	0xFD8
  5272                           
  5273 ;; *************** function _mainMenu *****************
  5274 ;; Defined at:
  5275 ;;		line 18 in file "interface.c"
  5276 ;; Parameters:    Size  Location     Type
  5277 ;;		None
  5278 ;; Auto vars:     Size  Location     Type
  5279 ;;		None
  5280 ;; Return value:  Size  Location     Type
  5281 ;;                  1    wreg      void 
  5282 ;; Registers used:
  5283 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5284 ;; Tracked objects:
  5285 ;;		On entry : 0/0
  5286 ;;		On exit  : 0/0
  5287 ;;		Unchanged: 0/0
  5288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5292 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5293 ;;Total ram usage:        0 bytes
  5294 ;; Hardware stack levels used:    1
  5295 ;; Hardware stack levels required when called:   10
  5296 ;; This function calls:
  5297 ;;		_lcdClear
  5298 ;;		_printf
  5299 ;; This function is called by:
  5300 ;;		_showInterface
  5301 ;; This function uses a non-reentrant model
  5302 ;;
  5303                           
  5304                           	psect	text23
  5305  001FC6                     __ptext23:
  5306                           	opt stack 0
  5307  001FC6                     _mainMenu:
  5308                           	opt stack 19
  5309                           
  5310                           ;interface.c: 19: lcdClear();
  5311                           
  5312                           ; BSR set to: 0
  5313                           ;incstack = 0
  5314  001FC6  EC2A  F010         	call	_lcdClear	;wreg free
  5315                           
  5316                           ;interface.c: 20: printf("start   <B      \n");
  5317  001FCA  0ED4               	movlw	low STR_12
  5318  001FCC  0100               	movlb	0	; () banked
  5319  001FCE  6F87               	movwf	printf@f& (0+255),b
  5320  001FD0  0EFE               	movlw	high STR_12
  5321  001FD2  0100               	movlb	0	; () banked
  5322  001FD4  6F88               	movwf	(printf@f+1)& (0+255),b
  5323  001FD6  EC5F  F004         	call	_printf	;wreg free
  5324                           
  5325                           ;interface.c: 21: printf("history <C    *>");
  5326  001FDA  0E61               	movlw	low STR_13
  5327  001FDC  0100               	movlb	0	; () banked
  5328  001FDE  6F87               	movwf	printf@f& (0+255),b
  5329  001FE0  0EFF               	movlw	high STR_13
  5330  001FE2  0100               	movlb	0	; () banked
  5331  001FE4  6F88               	movwf	(printf@f+1)& (0+255),b
  5332  001FE6  EC5F  F004         	call	_printf	;wreg free
  5333  001FEA  0012               	return		;funcret
  5334  001FEC                     __end_of_mainMenu:
  5335                           	opt stack 0
  5336                           tblptru	equ	0xFF8
  5337                           tblptrh	equ	0xFF7
  5338                           tblptrl	equ	0xFF6
  5339                           tablat	equ	0xFF5
  5340                           prodh	equ	0xFF4
  5341                           prodl	equ	0xFF3
  5342                           intcon	equ	0xFF2
  5343                           postinc0	equ	0xFEE
  5344                           wreg	equ	0xFE8
  5345                           postdec1	equ	0xFE5
  5346                           fsr1l	equ	0xFE1
  5347                           postinc2	equ	0xFDE
  5348                           postdec2	equ	0xFDD
  5349                           fsr2h	equ	0xFDA
  5350                           fsr2l	equ	0xFD9
  5351                           status	equ	0xFD8
  5352                           
  5353 ;; *************** function _dateTime *****************
  5354 ;; Defined at:
  5355 ;;		line 12 in file "interface.c"
  5356 ;; Parameters:    Size  Location     Type
  5357 ;;		None
  5358 ;; Auto vars:     Size  Location     Type
  5359 ;;		None
  5360 ;; Return value:  Size  Location     Type
  5361 ;;                  1    wreg      void 
  5362 ;; Registers used:
  5363 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5364 ;; Tracked objects:
  5365 ;;		On entry : 0/0
  5366 ;;		On exit  : 0/0
  5367 ;;		Unchanged: 0/0
  5368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5373 ;;Total ram usage:        0 bytes
  5374 ;; Hardware stack levels used:    1
  5375 ;; Hardware stack levels required when called:   10
  5376 ;; This function calls:
  5377 ;;		_lcdClear
  5378 ;;		_printf
  5379 ;; This function is called by:
  5380 ;;		_showInterface
  5381 ;; This function uses a non-reentrant model
  5382 ;;
  5383                           
  5384                           	psect	text24
  5385  001FEC                     __ptext24:
  5386                           	opt stack 0
  5387  001FEC                     _dateTime:
  5388                           	opt stack 19
  5389                           
  5390                           ;interface.c: 13: lcdClear();
  5391                           
  5392                           ;incstack = 0
  5393  001FEC  EC2A  F010         	call	_lcdClear	;wreg free
  5394                           
  5395                           ;interface.c: 14: printf("  hh:mm:ss      \n");
  5396  001FF0  0EE6               	movlw	low STR_10
  5397  001FF2  0100               	movlb	0	; () banked
  5398  001FF4  6F87               	movwf	printf@f& (0+255),b
  5399  001FF6  0EFE               	movlw	high STR_10
  5400  001FF8  0100               	movlb	0	; () banked
  5401  001FFA  6F88               	movwf	(printf@f+1)& (0+255),b
  5402  001FFC  EC5F  F004         	call	_printf	;wreg free
  5403                           
  5404                           ;interface.c: 15: printf("  mm:dd:yy    A>");
  5405  002000  0E94               	movlw	low STR_11
  5406  002002  0100               	movlb	0	; () banked
  5407  002004  6F87               	movwf	printf@f& (0+255),b
  5408  002006  0EFF               	movlw	high STR_11
  5409  002008  0100               	movlb	0	; () banked
  5410  00200A  6F88               	movwf	(printf@f+1)& (0+255),b
  5411  00200C  EC5F  F004         	call	_printf	;wreg free
  5412  002010  0012               	return		;funcret
  5413  002012                     __end_of_dateTime:
  5414                           	opt stack 0
  5415                           tblptru	equ	0xFF8
  5416                           tblptrh	equ	0xFF7
  5417                           tblptrl	equ	0xFF6
  5418                           tablat	equ	0xFF5
  5419                           prodh	equ	0xFF4
  5420                           prodl	equ	0xFF3
  5421                           intcon	equ	0xFF2
  5422                           postinc0	equ	0xFEE
  5423                           wreg	equ	0xFE8
  5424                           postdec1	equ	0xFE5
  5425                           fsr1l	equ	0xFE1
  5426                           postinc2	equ	0xFDE
  5427                           postdec2	equ	0xFDD
  5428                           fsr2h	equ	0xFDA
  5429                           fsr2l	equ	0xFD9
  5430                           status	equ	0xFD8
  5431                           
  5432 ;; *************** function _printf *****************
  5433 ;; Defined at:
  5434 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  5435 ;; Parameters:    Size  Location     Type
  5436 ;;  f               2    7[BANK0 ] PTR const unsigned char 
  5437 ;;		 -> STR_21(17), STR_20(18), STR_19(17), STR_18(18), 
  5438 ;;		 -> STR_17(17), STR_16(19), STR_15(17), STR_14(18), 
  5439 ;;		 -> STR_13(17), STR_12(18), STR_11(17), STR_10(18), 
  5440 ;;		 -> STR_9(9), STR_8(8), STR_7(24), STR_6(15), 
  5441 ;;		 -> STR_5(17), STR_4(14), STR_3(7), STR_2(11), 
  5442 ;;		 -> STR_1(8), 
  5443 ;; Auto vars:     Size  Location     Type
  5444 ;;  idx             1   14[BANK0 ] unsigned char 
  5445 ;;  tmpval          4    0        struct .
  5446 ;;  cp              3    0        PTR const unsigned char 
  5447 ;;  ap              2   18[BANK0 ] PTR void [1]
  5448 ;;		 -> ?_printf(2), 
  5449 ;;  val             2   15[BANK0 ] unsigned int 
  5450 ;;  len             2    0        unsigned int 
  5451 ;;  c               1   20[BANK0 ] char 
  5452 ;;  prec            1   17[BANK0 ] char 
  5453 ;;  flag            1   13[BANK0 ] unsigned char 
  5454 ;; Return value:  Size  Location     Type
  5455 ;;                  2    7[BANK0 ] int 
  5456 ;; Registers used:
  5457 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5458 ;; Tracked objects:
  5459 ;;		On entry : 0/0
  5460 ;;		On exit  : 0/0
  5461 ;;		Unchanged: 0/0
  5462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5463 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5464 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5466 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5467 ;;Total ram usage:       14 bytes
  5468 ;; Hardware stack levels used:    1
  5469 ;; Hardware stack levels required when called:    9
  5470 ;; This function calls:
  5471 ;;		___lwdiv
  5472 ;;		_putch
  5473 ;; This function is called by:
  5474 ;;		_main
  5475 ;;		_sortBattery
  5476 ;;		_pause
  5477 ;;		_dateTime
  5478 ;;		_mainMenu
  5479 ;;		_runSelect
  5480 ;;		_runMenu
  5481 ;;		_runTime
  5482 ;;		_runStats
  5483 ;;		_testFrequency
  5484 ;; This function uses a non-reentrant model
  5485 ;;
  5486                           
  5487                           	psect	text25
  5488  0008BE                     __ptext25:
  5489                           	opt stack 0
  5490  0008BE                     _printf:
  5491                           	opt stack 20
  5492                           
  5493                           ;doprnt.c: 466: va_list ap;
  5494                           ;doprnt.c: 499: signed char c;
  5495                           ;doprnt.c: 506: signed char prec;
  5496                           ;doprnt.c: 508: unsigned char flag;
  5497                           ;doprnt.c: 523: union {
  5498                           ;doprnt.c: 524: unsigned long vd;
  5499                           ;doprnt.c: 525: double integ;
  5500                           ;doprnt.c: 526: } tmpval;
  5501                           ;doprnt.c: 528: unsigned int val;
  5502                           ;doprnt.c: 529: unsigned len;
  5503                           ;doprnt.c: 530: const char * cp;
  5504                           ;doprnt.c: 533: *ap = __va_start();
  5505                           
  5506                           ;incstack = 0
  5507  0008BE  0E89               	movlw	low (?_printf+2)
  5508  0008C0  0100               	movlb	0	; () banked
  5509  0008C2  6F92               	movwf	printf@ap& (0+255),b
  5510  0008C4  0E00               	movlw	high (?_printf+2)
  5511  0008C6  0100               	movlb	0	; () banked
  5512  0008C8  6F93               	movwf	(printf@ap+1)& (0+255),b
  5513                           
  5514                           ;doprnt.c: 536: while(c = *f++) {
  5515  0008CA  D092               	goto	l3192
  5516  0008CC                     l3152:
  5517                           
  5518                           ; BSR set to: 0
  5519                           ;doprnt.c: 538: if(c != '%')
  5520  0008CC  0E25               	movlw	37
  5521  0008CE  0100               	movlb	0	; () banked
  5522  0008D0  1994               	xorwf	printf@c& (0+255),w,b
  5523  0008D2  B4D8               	btfsc	status,2,c
  5524  0008D4  D005               	goto	l3156
  5525                           
  5526                           ; BSR set to: 0
  5527                           ;doprnt.c: 540: {
  5528                           ;doprnt.c: 541: (putch(c) );
  5529  0008D6  0100               	movlb	0	; () banked
  5530  0008D8  5194               	movf	printf@c& (0+255),w,b
  5531  0008DA  EC96  F00F         	call	_putch
  5532                           
  5533                           ;doprnt.c: 542: continue;
  5534  0008DE  D088               	goto	l3192
  5535  0008E0                     l3156:
  5536                           
  5537                           ;doprnt.c: 543: }
  5538                           ;doprnt.c: 548: flag = 0;
  5539  0008E0  0E00               	movlw	0
  5540  0008E2  0100               	movlb	0	; () banked
  5541  0008E4  6F8D               	movwf	printf@flag& (0+255),b
  5542                           
  5543                           ;doprnt.c: 635: switch(c = *f++) {
  5544  0008E6  D011               	goto	l3166
  5545  0008E8                     l3158:
  5546                           
  5547                           ; BSR set to: 0
  5548                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  5549  0008E8  C092  FFD9         	movff	printf@ap,fsr2l
  5550  0008EC  C093  FFDA         	movff	printf@ap+1,fsr2h
  5551  0008F0  50DF               	movf	indf2,w,c
  5552  0008F2  0100               	movlb	0	; () banked
  5553  0008F4  6F94               	movwf	printf@c& (0+255),b
  5554                           
  5555                           ; BSR set to: 0
  5556  0008F6  0E02               	movlw	2
  5557  0008F8  0100               	movlb	0	; () banked
  5558  0008FA  2792               	addwf	printf@ap& (0+255),f,b
  5559  0008FC  0E00               	movlw	0
  5560  0008FE  2393               	addwfc	(printf@ap+1)& (0+255),f,b
  5561  000900                     l3162:
  5562                           
  5563                           ; BSR set to: 0
  5564                           ;doprnt.c: 809: (putch(c) );
  5565  000900  0100               	movlb	0	; () banked
  5566  000902  5194               	movf	printf@c& (0+255),w,b
  5567  000904  EC96  F00F         	call	_putch
  5568                           
  5569                           ;doprnt.c: 810: continue;
  5570  000908  D073               	goto	l3192
  5571  00090A                     l3166:
  5572  00090A  C087  FFF6         	movff	printf@f,tblptrl
  5573  00090E  C088  FFF7         	movff	printf@f+1,tblptrh
  5574  000912  0100               	movlb	0	; () banked
  5575  000914  4B87               	infsnz	printf@f& (0+255),f,b
  5576  000916  2B88               	incf	(printf@f+1)& (0+255),f,b
  5577  000918                     	if	0	;tblptru may be non-zero
  5578  000918                     	endif
  5579  000918                     	if	0	;tblptru may be non-zero
  5580  000918                     	endif
  5581  000918  0008               	tblrd		*
  5582  00091A  CFF5 F094          	movff	tablat,printf@c
  5583  00091E  0100               	movlb	0	; () banked
  5584  000920  5194               	movf	printf@c& (0+255),w,b
  5585                           
  5586                           ; Switch size 1, requested type "space"
  5587                           ; Number of cases is 3, Range of values is 0 to 120
  5588                           ; switch strategies available:
  5589                           ; Name         Instructions Cycles
  5590                           ; simple_byte           10     6 (average)
  5591                           ;	Chosen strategy is simple_byte
  5592  000922  0A00               	xorlw	0	; case 0
  5593  000924  B4D8               	btfsc	status,2,c
  5594  000926  0012               	return	
  5595  000928  0A63               	xorlw	99	; case 99
  5596  00092A  B4D8               	btfsc	status,2,c
  5597  00092C  D7DD               	goto	l3158
  5598  00092E  0A1B               	xorlw	27	; case 120
  5599  000930  A4D8               	btfss	status,2,c
  5600  000932  D7E6               	goto	l3162
  5601                           
  5602                           ;doprnt.c: 1273: {
  5603                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5604                           
  5605                           ; BSR set to: 0
  5606  000934  C092  FFD9         	movff	printf@ap,fsr2l
  5607  000938  C093  FFDA         	movff	printf@ap+1,fsr2h
  5608  00093C  CFDE F08F          	movff	postinc2,printf@val
  5609  000940  CFDD F090          	movff	postdec2,printf@val+1
  5610  000944  0E02               	movlw	2
  5611  000946  0100               	movlb	0	; () banked
  5612  000948  2792               	addwf	printf@ap& (0+255),f,b
  5613  00094A  0E00               	movlw	0
  5614  00094C  2393               	addwfc	(printf@ap+1)& (0+255),f,b
  5615                           
  5616                           ; BSR set to: 0
  5617                           ;doprnt.c: 1287: }
  5618                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5619  00094E  0E01               	movlw	1
  5620  000950  0100               	movlb	0	; () banked
  5621  000952  6F94               	movwf	printf@c& (0+255),b
  5622  000954                     l3174:
  5623                           
  5624                           ; BSR set to: 0
  5625  000954  0E04               	movlw	4
  5626  000956  0100               	movlb	0	; () banked
  5627  000958  1994               	xorwf	printf@c& (0+255),w,b
  5628  00095A  B4D8               	btfsc	status,2,c
  5629  00095C  D016               	goto	l618
  5630                           
  5631                           ; BSR set to: 0
  5632                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5633                           
  5634                           ; BSR set to: 0
  5635                           
  5636                           ; BSR set to: 0
  5637  00095E  0100               	movlb	0	; () banked
  5638  000960  5194               	movf	printf@c& (0+255),w,b
  5639  000962  0D02               	mullw	2
  5640  000964  0E9A               	movlw	low _hexpowers
  5641  000966  24F3               	addwf	prodl,w,c
  5642  000968  6EF6               	movwf	tblptrl,c
  5643  00096A  0EFE               	movlw	high _hexpowers
  5644  00096C  20F4               	addwfc	prodh,w,c
  5645  00096E  6EF7               	movwf	tblptrh,c
  5646  000970                     	if	0	;There are less than 3 active tblptr bytes
  5647  000970                     	endif
  5648  000970  0009               	tblrd		*+
  5649  000972  50F5               	movf	tablat,w,c
  5650  000974  0100               	movlb	0	; () banked
  5651  000976  5D8F               	subwf	printf@val& (0+255),w,b
  5652  000978  0009               	tblrd		*+
  5653  00097A  50F5               	movf	tablat,w,c
  5654  00097C  0100               	movlb	0	; () banked
  5655  00097E  5990               	subwfb	(printf@val+1)& (0+255),w,b
  5656  000980  A0D8               	btfss	status,0,c
  5657  000982  D003               	goto	l618
  5658                           
  5659                           ; BSR set to: 0
  5660                           
  5661                           ; BSR set to: 0
  5662                           
  5663                           ; BSR set to: 0
  5664                           ;doprnt.c: 1318: break;
  5665  000984  0100               	movlb	0	; () banked
  5666  000986  2B94               	incf	printf@c& (0+255),f,b
  5667  000988  D7E5               	goto	l3174
  5668  00098A                     l618:
  5669                           
  5670                           ; BSR set to: 0
  5671                           ;doprnt.c: 1422: {
  5672                           ;doprnt.c: 1469: }
  5673                           ;doprnt.c: 1472: prec = c;
  5674  00098A  C094  F091         	movff	printf@c,printf@prec
  5675                           
  5676                           ;doprnt.c: 1474: while(prec--) {
  5677  00098E  D02A               	goto	l620
  5678  000990                     l3186:
  5679                           
  5680                           ; BSR set to: 0
  5681                           ;doprnt.c: 1478: {
  5682                           ;doprnt.c: 1499: {
  5683                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5684  000990  C08F  F080         	movff	printf@val,___lwdiv@dividend
  5685  000994  C090  F081         	movff	printf@val+1,___lwdiv@dividend+1
  5686  000998  0100               	movlb	0	; () banked
  5687  00099A  5191               	movf	printf@prec& (0+255),w,b
  5688  00099C  0D02               	mullw	2
  5689  00099E  0E9A               	movlw	low _hexpowers
  5690  0009A0  24F3               	addwf	prodl,w,c
  5691  0009A2  6EF6               	movwf	tblptrl,c
  5692  0009A4  0EFE               	movlw	high _hexpowers
  5693  0009A6  20F4               	addwfc	prodh,w,c
  5694  0009A8  6EF7               	movwf	tblptrh,c
  5695  0009AA                     	if	0	;There are less than 3 active tblptr bytes
  5696  0009AA                     	endif
  5697  0009AA  0009               	tblrd		*+
  5698  0009AC  CFF5 F082          	movff	tablat,___lwdiv@divisor
  5699  0009B0  000A               	tblrd		*-
  5700  0009B2  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  5701  0009B6  EC51  F00D         	call	___lwdiv	;wreg free
  5702  0009BA  0100               	movlb	0	; () banked
  5703  0009BC  5180               	movf	?___lwdiv& (0+255),w,b
  5704  0009BE  0B0F               	andlw	15
  5705  0009C0  0100               	movlb	0	; () banked
  5706  0009C2  6F8E               	movwf	printf@idx& (0+255),b
  5707                           
  5708                           ; BSR set to: 0
  5709                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5710  0009C4  0100               	movlb	0	; () banked
  5711  0009C6  518E               	movf	printf@idx& (0+255),w,b
  5712  0009C8  0D01               	mullw	1
  5713  0009CA  0E2E               	movlw	low STR_22
  5714  0009CC  24F3               	addwf	prodl,w,c
  5715  0009CE  6EF6               	movwf	tblptrl,c
  5716  0009D0  0EFF               	movlw	high STR_22
  5717  0009D2  20F4               	addwfc	prodh,w,c
  5718  0009D4  6EF7               	movwf	tblptrh,c
  5719  0009D6                     	if	0	;There are less than 3 active tblptr bytes
  5720  0009D6                     	endif
  5721  0009D6  0008               	tblrd		*
  5722  0009D8  CFF5 F094          	movff	tablat,printf@c
  5723                           
  5724                           ; BSR set to: 0
  5725                           ;doprnt.c: 1508: }
  5726                           ;doprnt.c: 1523: }
  5727                           ;doprnt.c: 1524: (putch(c) );
  5728  0009DC  0100               	movlb	0	; () banked
  5729  0009DE  5194               	movf	printf@c& (0+255),w,b
  5730  0009E0  EC96  F00F         	call	_putch
  5731  0009E4                     l620:
  5732  0009E4  0100               	movlb	0	; () banked
  5733  0009E6  0791               	decf	printf@prec& (0+255),f,b
  5734  0009E8  0100               	movlb	0	; () banked
  5735  0009EA  2991               	incf	printf@prec& (0+255),w,b
  5736  0009EC  A4D8               	btfss	status,2,c
  5737  0009EE  D7D0               	goto	l3186
  5738  0009F0                     l3192:
  5739  0009F0  C087  FFF6         	movff	printf@f,tblptrl
  5740  0009F4  C088  FFF7         	movff	printf@f+1,tblptrh
  5741  0009F8  0100               	movlb	0	; () banked
  5742  0009FA  4B87               	infsnz	printf@f& (0+255),f,b
  5743  0009FC  2B88               	incf	(printf@f+1)& (0+255),f,b
  5744  0009FE                     	if	0	;tblptru may be non-zero
  5745  0009FE                     	endif
  5746  0009FE                     	if	0	;tblptru may be non-zero
  5747  0009FE                     	endif
  5748  0009FE  0008               	tblrd		*
  5749  000A00  CFF5 F094          	movff	tablat,printf@c
  5750  000A04  0100               	movlb	0	; () banked
  5751  000A06  5194               	movf	printf@c& (0+255),w,b
  5752  000A08  B4D8               	btfsc	status,2,c
  5753  000A0A  0012               	return	
  5754  000A0C  D75F               	goto	l3152
  5755  000A0E                     __end_of_printf:
  5756                           	opt stack 0
  5757                           tblptru	equ	0xFF8
  5758                           tblptrh	equ	0xFF7
  5759                           tblptrl	equ	0xFF6
  5760                           tablat	equ	0xFF5
  5761                           prodh	equ	0xFF4
  5762                           prodl	equ	0xFF3
  5763                           intcon	equ	0xFF2
  5764                           postinc0	equ	0xFEE
  5765                           wreg	equ	0xFE8
  5766                           postdec1	equ	0xFE5
  5767                           fsr1l	equ	0xFE1
  5768                           indf2	equ	0xFDF
  5769                           postinc2	equ	0xFDE
  5770                           postdec2	equ	0xFDD
  5771                           fsr2h	equ	0xFDA
  5772                           fsr2l	equ	0xFD9
  5773                           status	equ	0xFD8
  5774                           
  5775 ;; *************** function _putch *****************
  5776 ;; Defined at:
  5777 ;;		line 35 in file "lcd.c"
  5778 ;; Parameters:    Size  Location     Type
  5779 ;;  data            1    wreg     unsigned char 
  5780 ;; Auto vars:     Size  Location     Type
  5781 ;;  data            1    4[BANK0 ] unsigned char 
  5782 ;; Return value:  Size  Location     Type
  5783 ;;                  1    wreg      void 
  5784 ;; Registers used:
  5785 ;;		wreg, status,2, status,0, cstack
  5786 ;; Tracked objects:
  5787 ;;		On entry : 0/0
  5788 ;;		On exit  : 0/0
  5789 ;;		Unchanged: 0/0
  5790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5792 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5794 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5795 ;;Total ram usage:        1 bytes
  5796 ;; Hardware stack levels used:    1
  5797 ;; Hardware stack levels required when called:    8
  5798 ;; This function calls:
  5799 ;;		_lcdNewline
  5800 ;;		_lcdNibble
  5801 ;; This function is called by:
  5802 ;;		_printf
  5803 ;; This function uses a non-reentrant model
  5804 ;;
  5805                           
  5806                           	psect	text26
  5807  001F2C                     __ptext26:
  5808                           	opt stack 0
  5809  001F2C                     _putch:
  5810                           	opt stack 20
  5811                           
  5812                           ; BSR set to: 0
  5813                           ;incstack = 0
  5814                           ;putch@data stored from wreg
  5815  001F2C  0100               	movlb	0	; () banked
  5816  001F2E  6F84               	movwf	putch@data& (0+255),b
  5817                           
  5818                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  5819  001F30  0E0A               	movlw	10
  5820  001F32  0100               	movlb	0	; () banked
  5821  001F34  1984               	xorwf	putch@data& (0+255),w,b
  5822  001F36  A4D8               	btfss	status,2,c
  5823  001F38  D003               	goto	l198
  5824                           
  5825                           ; BSR set to: 0
  5826  001F3A  EC26  F010         	call	_lcdNewline	;wreg free
  5827  001F3E  0012               	return	
  5828  001F40                     l198:
  5829                           
  5830                           ; BSR set to: 0
  5831                           ;lcd.c: 37: else
  5832                           ;lcd.c: 38: {
  5833                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  5834  001F40  848C               	bsf	3980,2,c	;volatile
  5835                           
  5836                           ; BSR set to: 0
  5837                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  5838  001F42  0E74               	movlw	116
  5839  001F44                     u3727:
  5840  001F44  2EE8               	decfsz	wreg,f,c
  5841  001F46  D7FE               	bra	u3727
  5842  001F48  D000               	nop2	
  5843                           
  5844                           ;lcd.c: 41: lcdNibble(data);
  5845  001F4A  0100               	movlb	0	; () banked
  5846  001F4C  5184               	movf	putch@data& (0+255),w,b
  5847  001F4E  EC8D  F00D         	call	_lcdNibble
  5848  001F52  0012               	return	
  5849  001F54                     __end_of_putch:
  5850                           	opt stack 0
  5851                           tblptru	equ	0xFF8
  5852                           tblptrh	equ	0xFF7
  5853                           tblptrl	equ	0xFF6
  5854                           tablat	equ	0xFF5
  5855                           prodh	equ	0xFF4
  5856                           prodl	equ	0xFF3
  5857                           intcon	equ	0xFF2
  5858                           postinc0	equ	0xFEE
  5859                           wreg	equ	0xFE8
  5860                           postdec1	equ	0xFE5
  5861                           fsr1l	equ	0xFE1
  5862                           indf2	equ	0xFDF
  5863                           postinc2	equ	0xFDE
  5864                           postdec2	equ	0xFDD
  5865                           fsr2h	equ	0xFDA
  5866                           fsr2l	equ	0xFD9
  5867                           status	equ	0xFD8
  5868                           
  5869 ;; *************** function _lcdNewline *****************
  5870 ;; Defined at:
  5871 ;;		line 78 in file "lcd.c"
  5872 ;; Parameters:    Size  Location     Type
  5873 ;;		None
  5874 ;; Auto vars:     Size  Location     Type
  5875 ;;		None
  5876 ;; Return value:  Size  Location     Type
  5877 ;;                  1    wreg      void 
  5878 ;; Registers used:
  5879 ;;		wreg, status,2, status,0, cstack
  5880 ;; Tracked objects:
  5881 ;;		On entry : 0/0
  5882 ;;		On exit  : 0/0
  5883 ;;		Unchanged: 0/0
  5884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5888 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5889 ;;Total ram usage:        0 bytes
  5890 ;; Hardware stack levels used:    1
  5891 ;; Hardware stack levels required when called:    7
  5892 ;; This function calls:
  5893 ;;		_lcdInst
  5894 ;; This function is called by:
  5895 ;;		_putch
  5896 ;; This function uses a non-reentrant model
  5897 ;;
  5898                           
  5899                           	psect	text27
  5900  00204C                     __ptext27:
  5901                           	opt stack 0
  5902  00204C                     _lcdNewline:
  5903                           	opt stack 20
  5904                           
  5905                           ;lcd.c: 79: lcdInst(0b11000000);
  5906                           
  5907                           ;incstack = 0
  5908  00204C  0EC0               	movlw	192
  5909  00204E  EC81  F00F         	call	_lcdInst
  5910  002052  0012               	return		;funcret
  5911  002054                     __end_of_lcdNewline:
  5912                           	opt stack 0
  5913                           tblptru	equ	0xFF8
  5914                           tblptrh	equ	0xFF7
  5915                           tblptrl	equ	0xFF6
  5916                           tablat	equ	0xFF5
  5917                           prodh	equ	0xFF4
  5918                           prodl	equ	0xFF3
  5919                           intcon	equ	0xFF2
  5920                           postinc0	equ	0xFEE
  5921                           wreg	equ	0xFE8
  5922                           postdec1	equ	0xFE5
  5923                           fsr1l	equ	0xFE1
  5924                           indf2	equ	0xFDF
  5925                           postinc2	equ	0xFDE
  5926                           postdec2	equ	0xFDD
  5927                           fsr2h	equ	0xFDA
  5928                           fsr2l	equ	0xFD9
  5929                           status	equ	0xFD8
  5930                           
  5931 ;; *************** function ___lwdiv *****************
  5932 ;; Defined at:
  5933 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  5934 ;; Parameters:    Size  Location     Type
  5935 ;;  dividend        2    0[BANK0 ] unsigned int 
  5936 ;;  divisor         2    2[BANK0 ] unsigned int 
  5937 ;; Auto vars:     Size  Location     Type
  5938 ;;  quotient        2    4[BANK0 ] unsigned int 
  5939 ;;  counter         1    6[BANK0 ] unsigned char 
  5940 ;; Return value:  Size  Location     Type
  5941 ;;                  2    0[BANK0 ] unsigned int 
  5942 ;; Registers used:
  5943 ;;		wreg, status,2, status,0
  5944 ;; Tracked objects:
  5945 ;;		On entry : 0/0
  5946 ;;		On exit  : 0/0
  5947 ;;		Unchanged: 0/0
  5948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5949 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5950 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5952 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5953 ;;Total ram usage:        7 bytes
  5954 ;; Hardware stack levels used:    1
  5955 ;; Hardware stack levels required when called:    5
  5956 ;; This function calls:
  5957 ;;		Nothing
  5958 ;; This function is called by:
  5959 ;;		_printf
  5960 ;; This function uses a non-reentrant model
  5961 ;;
  5962                           
  5963                           	psect	text28
  5964  001AA2                     __ptext28:
  5965                           	opt stack 0
  5966  001AA2                     ___lwdiv:
  5967                           	opt stack 23
  5968                           
  5969                           ;incstack = 0
  5970  001AA2  0E00               	movlw	0
  5971  001AA4  0100               	movlb	0	; () banked
  5972  001AA6  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
  5973  001AA8  0E00               	movlw	0
  5974  001AAA  6F84               	movwf	___lwdiv@quotient& (0+255),b
  5975                           
  5976                           ; BSR set to: 0
  5977  001AAC  0100               	movlb	0	; () banked
  5978  001AAE  5182               	movf	___lwdiv@divisor& (0+255),w,b
  5979  001AB0  0100               	movlb	0	; () banked
  5980  001AB2  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  5981  001AB4  B4D8               	btfsc	status,2,c
  5982  001AB6  D02C               	goto	l1027
  5983                           
  5984                           ; BSR set to: 0
  5985  001AB8  0E01               	movlw	1
  5986  001ABA  0100               	movlb	0	; () banked
  5987  001ABC  6F86               	movwf	___lwdiv@counter& (0+255),b
  5988  001ABE  D006               	goto	l3098
  5989  001AC0                     l3096:
  5990                           
  5991                           ; BSR set to: 0
  5992  001AC0  0100               	movlb	0	; () banked
  5993  001AC2  90D8               	bcf	status,0,c
  5994  001AC4  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  5995  001AC6  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  5996  001AC8  0100               	movlb	0	; () banked
  5997  001ACA  2B86               	incf	___lwdiv@counter& (0+255),f,b
  5998  001ACC                     l3098:
  5999                           
  6000                           ; BSR set to: 0
  6001  001ACC  0100               	movlb	0	; () banked
  6002  001ACE  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  6003  001AD0  D7F7               	goto	l3096
  6004  001AD2                     l3100:
  6005                           
  6006                           ; BSR set to: 0
  6007  001AD2  0100               	movlb	0	; () banked
  6008  001AD4  90D8               	bcf	status,0,c
  6009  001AD6  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
  6010  001AD8  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  6011                           
  6012                           ; BSR set to: 0
  6013  001ADA  0100               	movlb	0	; () banked
  6014  001ADC  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6015  001ADE  0100               	movlb	0	; () banked
  6016  001AE0  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  6017  001AE2  0100               	movlb	0	; () banked
  6018  001AE4  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6019  001AE6  0100               	movlb	0	; () banked
  6020  001AE8  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  6021  001AEA  A0D8               	btfss	status,0,c
  6022  001AEC  D00A               	goto	l3108
  6023                           
  6024                           ; BSR set to: 0
  6025  001AEE  0100               	movlb	0	; () banked
  6026  001AF0  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6027  001AF2  0100               	movlb	0	; () banked
  6028  001AF4  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  6029  001AF6  0100               	movlb	0	; () banked
  6030  001AF8  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6031  001AFA  0100               	movlb	0	; () banked
  6032  001AFC  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  6033                           
  6034                           ; BSR set to: 0
  6035  001AFE  0100               	movlb	0	; () banked
  6036  001B00  8184               	bsf	___lwdiv@quotient& (0+255),0,b
  6037  001B02                     l3108:
  6038                           
  6039                           ; BSR set to: 0
  6040  001B02  0100               	movlb	0	; () banked
  6041  001B04  90D8               	bcf	status,0,c
  6042  001B06  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  6043  001B08  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  6044                           
  6045                           ; BSR set to: 0
  6046  001B0A  0100               	movlb	0	; () banked
  6047  001B0C  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
  6048  001B0E  D7E1               	goto	l3100
  6049  001B10                     l1027:
  6050                           
  6051                           ; BSR set to: 0
  6052  001B10  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
  6053  001B14  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6054                           
  6055                           ; BSR set to: 0
  6056  001B18  0012               	return		;funcret
  6057  001B1A                     __end_of___lwdiv:
  6058                           	opt stack 0
  6059                           tblptru	equ	0xFF8
  6060                           tblptrh	equ	0xFF7
  6061                           tblptrl	equ	0xFF6
  6062                           tablat	equ	0xFF5
  6063                           prodh	equ	0xFF4
  6064                           prodl	equ	0xFF3
  6065                           intcon	equ	0xFF2
  6066                           postinc0	equ	0xFEE
  6067                           wreg	equ	0xFE8
  6068                           postdec1	equ	0xFE5
  6069                           fsr1l	equ	0xFE1
  6070                           indf2	equ	0xFDF
  6071                           postinc2	equ	0xFDE
  6072                           postdec2	equ	0xFDD
  6073                           fsr2h	equ	0xFDA
  6074                           fsr2l	equ	0xFD9
  6075                           status	equ	0xFD8
  6076                           
  6077 ;; *************** function _lcdClear *****************
  6078 ;; Defined at:
  6079 ;;		line 74 in file "lcd.c"
  6080 ;; Parameters:    Size  Location     Type
  6081 ;;		None
  6082 ;; Auto vars:     Size  Location     Type
  6083 ;;		None
  6084 ;; Return value:  Size  Location     Type
  6085 ;;                  1    wreg      void 
  6086 ;; Registers used:
  6087 ;;		wreg, status,2, status,0, cstack
  6088 ;; Tracked objects:
  6089 ;;		On entry : 0/0
  6090 ;;		On exit  : 0/0
  6091 ;;		Unchanged: 0/0
  6092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6096 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6097 ;;Total ram usage:        0 bytes
  6098 ;; Hardware stack levels used:    1
  6099 ;; Hardware stack levels required when called:    7
  6100 ;; This function calls:
  6101 ;;		_lcdInst
  6102 ;; This function is called by:
  6103 ;;		_main
  6104 ;;		_sortBattery
  6105 ;;		_pause
  6106 ;;		_dateTime
  6107 ;;		_mainMenu
  6108 ;;		_runSelect
  6109 ;;		_runMenu
  6110 ;;		_runTime
  6111 ;;		_runStats
  6112 ;; This function uses a non-reentrant model
  6113 ;;
  6114                           
  6115                           	psect	text29
  6116  002054                     __ptext29:
  6117                           	opt stack 0
  6118  002054                     _lcdClear:
  6119                           	opt stack 21
  6120                           
  6121                           ;lcd.c: 75: lcdInst(0b00000001);
  6122                           
  6123                           ; BSR set to: 0
  6124                           ;incstack = 0
  6125  002054  0E01               	movlw	1
  6126  002056  EC81  F00F         	call	_lcdInst
  6127  00205A  0012               	return		;funcret
  6128  00205C                     __end_of_lcdClear:
  6129                           	opt stack 0
  6130                           tblptru	equ	0xFF8
  6131                           tblptrh	equ	0xFF7
  6132                           tblptrl	equ	0xFF6
  6133                           tablat	equ	0xFF5
  6134                           prodh	equ	0xFF4
  6135                           prodl	equ	0xFF3
  6136                           intcon	equ	0xFF2
  6137                           postinc0	equ	0xFEE
  6138                           wreg	equ	0xFE8
  6139                           postdec1	equ	0xFE5
  6140                           fsr1l	equ	0xFE1
  6141                           indf2	equ	0xFDF
  6142                           postinc2	equ	0xFDE
  6143                           postdec2	equ	0xFDD
  6144                           fsr2h	equ	0xFDA
  6145                           fsr2l	equ	0xFD9
  6146                           status	equ	0xFD8
  6147                           
  6148 ;; *************** function _pinSetup *****************
  6149 ;; Defined at:
  6150 ;;		line 110 in file "main.c"
  6151 ;; Parameters:    Size  Location     Type
  6152 ;;		None
  6153 ;; Auto vars:     Size  Location     Type
  6154 ;;		None
  6155 ;; Return value:  Size  Location     Type
  6156 ;;                  1    wreg      void 
  6157 ;; Registers used:
  6158 ;;		wreg, status,2, status,0
  6159 ;; Tracked objects:
  6160 ;;		On entry : 0/0
  6161 ;;		On exit  : 0/0
  6162 ;;		Unchanged: 0/0
  6163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6167 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6168 ;;Total ram usage:        0 bytes
  6169 ;; Hardware stack levels used:    1
  6170 ;; Hardware stack levels required when called:    5
  6171 ;; This function calls:
  6172 ;;		Nothing
  6173 ;; This function is called by:
  6174 ;;		_main
  6175 ;; This function uses a non-reentrant model
  6176 ;;
  6177                           
  6178                           	psect	text30
  6179  001E30                     __ptext30:
  6180                           	opt stack 0
  6181  001E30                     _pinSetup:
  6182                           	opt stack 25
  6183                           
  6184                           ;main.c: 116: TRISA = 0xFF;
  6185                           
  6186                           ;incstack = 0
  6187  001E30  6892               	setf	3986,c	;volatile
  6188                           
  6189                           ;main.c: 117: TRISB = 0xFF;
  6190  001E32  6893               	setf	3987,c	;volatile
  6191                           
  6192                           ;main.c: 118: TRISC = 0x00;
  6193  001E34  0E00               	movlw	0
  6194  001E36  6E94               	movwf	3988,c	;volatile
  6195                           
  6196                           ;main.c: 119: TRISD = 0x00;
  6197  001E38  0E00               	movlw	0
  6198  001E3A  6E95               	movwf	3989,c	;volatile
  6199                           
  6200                           ;main.c: 120: TRISE = 0x00;
  6201  001E3C  0E00               	movlw	0
  6202  001E3E  6E96               	movwf	3990,c	;volatile
  6203                           
  6204                           ;main.c: 122: LATA = 0x00;
  6205  001E40  0E00               	movlw	0
  6206  001E42  6E89               	movwf	3977,c	;volatile
  6207                           
  6208                           ;main.c: 123: LATB = 0x00;
  6209  001E44  0E00               	movlw	0
  6210  001E46  6E8A               	movwf	3978,c	;volatile
  6211                           
  6212                           ;main.c: 124: LATC = 0x00;
  6213  001E48  0E00               	movlw	0
  6214  001E4A  6E8B               	movwf	3979,c	;volatile
  6215                           
  6216                           ;main.c: 125: LATD = 0x00;
  6217  001E4C  0E00               	movlw	0
  6218  001E4E  6E8C               	movwf	3980,c	;volatile
  6219                           
  6220                           ;main.c: 126: LATE = 0x00;
  6221  001E50  0E00               	movlw	0
  6222  001E52  6E8D               	movwf	3981,c	;volatile
  6223                           
  6224                           ;main.c: 128: ADCON0 = 0x00;
  6225  001E54  0E00               	movlw	0
  6226  001E56  6EC2               	movwf	4034,c	;volatile
  6227                           
  6228                           ;main.c: 129: ADCON1 |= 0x0A;
  6229  001E58  0E0A               	movlw	10
  6230  001E5A  12C1               	iorwf	4033,f,c	;volatile
  6231                           
  6232                           ;main.c: 133: ADCON2 = 0;
  6233  001E5C  0E00               	movlw	0
  6234  001E5E  6EC0               	movwf	4032,c	;volatile
  6235                           
  6236                           ;main.c: 134: ADCON2 |= 0b010;
  6237  001E60  82C0               	bsf	4032,1,c	;volatile
  6238                           
  6239                           ;main.c: 135: ADCON2 |= 0b110<<3;
  6240  001E62  0E30               	movlw	48
  6241  001E64  12C0               	iorwf	4032,f,c	;volatile
  6242                           
  6243                           ;main.c: 136: ADCON2 |= 1<<7;
  6244  001E66  8EC0               	bsf	4032,7,c	;volatile
  6245                           
  6246                           ;main.c: 140: INT0IE = 1;
  6247  001E68  88F2               	bsf	intcon,4,c	;volatile
  6248                           
  6249                           ;main.c: 141: (INTCONbits.GIE = 1);
  6250  001E6A  8EF2               	bsf	intcon,7,c	;volatile
  6251  001E6C  0012               	return		;funcret
  6252  001E6E                     __end_of_pinSetup:
  6253                           	opt stack 0
  6254                           tblptru	equ	0xFF8
  6255                           tblptrh	equ	0xFF7
  6256                           tblptrl	equ	0xFF6
  6257                           tablat	equ	0xFF5
  6258                           prodh	equ	0xFF4
  6259                           prodl	equ	0xFF3
  6260                           intcon	equ	0xFF2
  6261                           postinc0	equ	0xFEE
  6262                           wreg	equ	0xFE8
  6263                           postdec1	equ	0xFE5
  6264                           fsr1l	equ	0xFE1
  6265                           indf2	equ	0xFDF
  6266                           postinc2	equ	0xFDE
  6267                           postdec2	equ	0xFDD
  6268                           fsr2h	equ	0xFDA
  6269                           fsr2l	equ	0xFD9
  6270                           status	equ	0xFD8
  6271                           
  6272 ;; *************** function _initLCD *****************
  6273 ;; Defined at:
  6274 ;;		line 15 in file "lcd.c"
  6275 ;; Parameters:    Size  Location     Type
  6276 ;;		None
  6277 ;; Auto vars:     Size  Location     Type
  6278 ;;		None
  6279 ;; Return value:  Size  Location     Type
  6280 ;;                  1    wreg      void 
  6281 ;; Registers used:
  6282 ;;		wreg, status,2, status,0, cstack
  6283 ;; Tracked objects:
  6284 ;;		On entry : 0/0
  6285 ;;		On exit  : 0/0
  6286 ;;		Unchanged: 0/0
  6287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6290 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6291 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6292 ;;Total ram usage:        1 bytes
  6293 ;; Hardware stack levels used:    1
  6294 ;; Hardware stack levels required when called:    7
  6295 ;; This function calls:
  6296 ;;		_lcdInst
  6297 ;; This function is called by:
  6298 ;;		_main
  6299 ;; This function uses a non-reentrant model
  6300 ;;
  6301                           
  6302                           	psect	text31
  6303  001DA2                     __ptext31:
  6304                           	opt stack 0
  6305  001DA2                     _initLCD:
  6306                           	opt stack 23
  6307                           
  6308                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
  6309                           
  6310                           ;incstack = 0
  6311  001DA2  0E31               	movlw	49
  6312  001DA4  0100               	movlb	0	; () banked
  6313  001DA6  6F84               	movwf	??_initLCD& (0+255),b
  6314  001DA8  0EB2               	movlw	178
  6315  001DAA                     u3737:
  6316  001DAA  2EE8               	decfsz	wreg,f,c
  6317  001DAC  D7FE               	bra	u3737
  6318  001DAE  2F84               	decfsz	??_initLCD& (0+255),f,b
  6319  001DB0  D7FC               	bra	u3737
  6320  001DB2  F000               	nop	
  6321                           
  6322                           ;lcd.c: 18: lcdInst(0b00110011);
  6323  001DB4  0E33               	movlw	51
  6324  001DB6  EC81  F00F         	call	_lcdInst
  6325                           
  6326                           ;lcd.c: 19: lcdInst(0b00110010);
  6327  001DBA  0E32               	movlw	50
  6328  001DBC  EC81  F00F         	call	_lcdInst
  6329                           
  6330                           ;lcd.c: 20: lcdInst(0b00101000);
  6331  001DC0  0E28               	movlw	40
  6332  001DC2  EC81  F00F         	call	_lcdInst
  6333                           
  6334                           ;lcd.c: 21: lcdInst(0b00001111);
  6335  001DC6  0E0F               	movlw	15
  6336  001DC8  EC81  F00F         	call	_lcdInst
  6337                           
  6338                           ;lcd.c: 22: lcdInst(0b00000110);
  6339  001DCC  0E06               	movlw	6
  6340  001DCE  EC81  F00F         	call	_lcdInst
  6341                           
  6342                           ;lcd.c: 23: lcdInst(0b00000001);
  6343  001DD2  0E01               	movlw	1
  6344  001DD4  EC81  F00F         	call	_lcdInst
  6345                           
  6346                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
  6347  001DD8  0E31               	movlw	49
  6348  001DDA  0100               	movlb	0	; () banked
  6349  001DDC  6F84               	movwf	??_initLCD& (0+255),b
  6350  001DDE  0EB2               	movlw	178
  6351  001DE0                     u3747:
  6352  001DE0  2EE8               	decfsz	wreg,f,c
  6353  001DE2  D7FE               	bra	u3747
  6354  001DE4  2F84               	decfsz	??_initLCD& (0+255),f,b
  6355  001DE6  D7FC               	bra	u3747
  6356  001DE8  F000               	nop	
  6357  001DEA  0012               	return		;funcret
  6358  001DEC                     __end_of_initLCD:
  6359                           	opt stack 0
  6360                           tblptru	equ	0xFF8
  6361                           tblptrh	equ	0xFF7
  6362                           tblptrl	equ	0xFF6
  6363                           tablat	equ	0xFF5
  6364                           prodh	equ	0xFF4
  6365                           prodl	equ	0xFF3
  6366                           intcon	equ	0xFF2
  6367                           postinc0	equ	0xFEE
  6368                           wreg	equ	0xFE8
  6369                           postdec1	equ	0xFE5
  6370                           fsr1l	equ	0xFE1
  6371                           indf2	equ	0xFDF
  6372                           postinc2	equ	0xFDE
  6373                           postdec2	equ	0xFDD
  6374                           fsr2h	equ	0xFDA
  6375                           fsr2l	equ	0xFD9
  6376                           status	equ	0xFD8
  6377                           
  6378 ;; *************** function _lcdInst *****************
  6379 ;; Defined at:
  6380 ;;		line 27 in file "lcd.c"
  6381 ;; Parameters:    Size  Location     Type
  6382 ;;  data            1    wreg     unsigned char 
  6383 ;; Auto vars:     Size  Location     Type
  6384 ;;  data            1    3[BANK0 ] unsigned char 
  6385 ;; Return value:  Size  Location     Type
  6386 ;;                  1    wreg      void 
  6387 ;; Registers used:
  6388 ;;		wreg, status,2, status,0, cstack
  6389 ;; Tracked objects:
  6390 ;;		On entry : 0/0
  6391 ;;		On exit  : 0/0
  6392 ;;		Unchanged: 0/0
  6393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6395 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6396 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6397 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6398 ;;Total ram usage:        2 bytes
  6399 ;; Hardware stack levels used:    1
  6400 ;; Hardware stack levels required when called:    6
  6401 ;; This function calls:
  6402 ;;		_lcdNibble
  6403 ;; This function is called by:
  6404 ;;		_initLCD
  6405 ;;		_lcdClear
  6406 ;;		_lcdNewline
  6407 ;;		_lcdHome
  6408 ;; This function uses a non-reentrant model
  6409 ;;
  6410                           
  6411                           	psect	text32
  6412  001F02                     __ptext32:
  6413                           	opt stack 0
  6414  001F02                     _lcdInst:
  6415                           	opt stack 20
  6416                           
  6417                           ;incstack = 0
  6418                           ;lcdInst@data stored from wreg
  6419  001F02  0100               	movlb	0	; () banked
  6420  001F04  6F83               	movwf	lcdInst@data& (0+255),b
  6421                           
  6422                           ;lcd.c: 28: LATDbits.LATD2 = 0;
  6423  001F06  948C               	bcf	3980,2,c	;volatile
  6424                           
  6425                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
  6426  001F08  0E74               	movlw	116
  6427  001F0A                     u3757:
  6428  001F0A  2EE8               	decfsz	wreg,f,c
  6429  001F0C  D7FE               	bra	u3757
  6430  001F0E  D000               	nop2	
  6431                           
  6432                           ;lcd.c: 30: lcdNibble(data);
  6433  001F10  0100               	movlb	0	; () banked
  6434  001F12  5183               	movf	lcdInst@data& (0+255),w,b
  6435  001F14  EC8D  F00D         	call	_lcdNibble
  6436                           
  6437                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
  6438  001F18  0E04               	movlw	4
  6439  001F1A  0100               	movlb	0	; () banked
  6440  001F1C  6F82               	movwf	??_lcdInst& (0+255),b
  6441  001F1E  0E3D               	movlw	61
  6442  001F20                     u3767:
  6443  001F20  2EE8               	decfsz	wreg,f,c
  6444  001F22  D7FE               	bra	u3767
  6445  001F24  2F82               	decfsz	??_lcdInst& (0+255),f,b
  6446  001F26  D7FC               	bra	u3767
  6447  001F28  D000               	nop2	
  6448  001F2A  0012               	return		;funcret
  6449  001F2C                     __end_of_lcdInst:
  6450                           	opt stack 0
  6451                           tblptru	equ	0xFF8
  6452                           tblptrh	equ	0xFF7
  6453                           tblptrl	equ	0xFF6
  6454                           tablat	equ	0xFF5
  6455                           prodh	equ	0xFF4
  6456                           prodl	equ	0xFF3
  6457                           intcon	equ	0xFF2
  6458                           postinc0	equ	0xFEE
  6459                           wreg	equ	0xFE8
  6460                           postdec1	equ	0xFE5
  6461                           fsr1l	equ	0xFE1
  6462                           indf2	equ	0xFDF
  6463                           postinc2	equ	0xFDE
  6464                           postdec2	equ	0xFDD
  6465                           fsr2h	equ	0xFDA
  6466                           fsr2l	equ	0xFD9
  6467                           status	equ	0xFD8
  6468                           
  6469 ;; *************** function _lcdNibble *****************
  6470 ;; Defined at:
  6471 ;;		line 46 in file "lcd.c"
  6472 ;; Parameters:    Size  Location     Type
  6473 ;;  data            1    wreg     unsigned char 
  6474 ;; Auto vars:     Size  Location     Type
  6475 ;;  data            1    1[BANK0 ] unsigned char 
  6476 ;;  temp            1    0[BANK0 ] unsigned char 
  6477 ;; Return value:  Size  Location     Type
  6478 ;;                  1    wreg      void 
  6479 ;; Registers used:
  6480 ;;		wreg, status,2, status,0
  6481 ;; Tracked objects:
  6482 ;;		On entry : 0/0
  6483 ;;		On exit  : 0/0
  6484 ;;		Unchanged: 0/0
  6485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6487 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6489 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6490 ;;Total ram usage:        2 bytes
  6491 ;; Hardware stack levels used:    1
  6492 ;; Hardware stack levels required when called:    5
  6493 ;; This function calls:
  6494 ;;		Nothing
  6495 ;; This function is called by:
  6496 ;;		_lcdInst
  6497 ;;		_putch
  6498 ;; This function uses a non-reentrant model
  6499 ;;
  6500                           
  6501                           	psect	text33
  6502  001B1A                     __ptext33:
  6503                           	opt stack 0
  6504  001B1A                     _lcdNibble:
  6505                           	opt stack 22
  6506                           
  6507                           ;incstack = 0
  6508                           ;lcdNibble@data stored from wreg
  6509  001B1A  0100               	movlb	0	; () banked
  6510  001B1C  6F81               	movwf	lcdNibble@data& (0+255),b
  6511                           
  6512                           ;lcd.c: 48: char temp = data & 0xF0;
  6513  001B1E  0100               	movlb	0	; () banked
  6514  001B20  5181               	movf	lcdNibble@data& (0+255),w,b
  6515  001B22  0BF0               	andlw	240
  6516  001B24  0100               	movlb	0	; () banked
  6517  001B26  6F80               	movwf	lcdNibble@temp& (0+255),b
  6518                           
  6519                           ;lcd.c: 49: LATD = LATD & 0x0F;
  6520  001B28  508C               	movf	3980,w,c	;volatile
  6521  001B2A  0B0F               	andlw	15
  6522  001B2C  6E8C               	movwf	3980,c	;volatile
  6523                           
  6524                           ;lcd.c: 50: LATD = temp | LATD;
  6525  001B2E  0100               	movlb	0	; () banked
  6526  001B30  5180               	movf	lcdNibble@temp& (0+255),w,b
  6527  001B32  108C               	iorwf	3980,w,c	;volatile
  6528  001B34  6E8C               	movwf	3980,c	;volatile
  6529                           
  6530                           ; BSR set to: 0
  6531                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  6532  001B36  968C               	bcf	3980,3,c	;volatile
  6533                           
  6534                           ; BSR set to: 0
  6535                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
  6536  001B38  0ED6               	movlw	214
  6537  001B3A                     u3777:
  6538  001B3A  D000               	nop2	
  6539  001B3C  D000               	nop2	
  6540  001B3E  2EE8               	decfsz	wreg,f,c
  6541  001B40  D7FC               	bra	u3777
  6542  001B42  D000               	nop2	
  6543                           
  6544                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  6545  001B44  868C               	bsf	3980,3,c	;volatile
  6546                           
  6547                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
  6548  001B46  0ED6               	movlw	214
  6549  001B48                     u3787:
  6550  001B48  D000               	nop2	
  6551  001B4A  D000               	nop2	
  6552  001B4C  2EE8               	decfsz	wreg,f,c
  6553  001B4E  D7FC               	bra	u3787
  6554  001B50  D000               	nop2	
  6555                           
  6556                           ;lcd.c: 58: data = data << 4;
  6557  001B52  0100               	movlb	0	; () banked
  6558  001B54  3981               	swapf	lcdNibble@data& (0+255),w,b
  6559  001B56  0BF0               	andlw	240
  6560  001B58  0100               	movlb	0	; () banked
  6561  001B5A  6F81               	movwf	lcdNibble@data& (0+255),b
  6562                           
  6563                           ;lcd.c: 60: temp = data & 0xF0;
  6564  001B5C  0100               	movlb	0	; () banked
  6565  001B5E  5181               	movf	lcdNibble@data& (0+255),w,b
  6566  001B60  0BF0               	andlw	240
  6567  001B62  0100               	movlb	0	; () banked
  6568  001B64  6F80               	movwf	lcdNibble@temp& (0+255),b
  6569                           
  6570                           ;lcd.c: 61: LATD = LATD & 0x0F;
  6571  001B66  508C               	movf	3980,w,c	;volatile
  6572  001B68  0B0F               	andlw	15
  6573  001B6A  6E8C               	movwf	3980,c	;volatile
  6574                           
  6575                           ;lcd.c: 62: LATD = temp | LATD;
  6576  001B6C  0100               	movlb	0	; () banked
  6577  001B6E  5180               	movf	lcdNibble@temp& (0+255),w,b
  6578  001B70  108C               	iorwf	3980,w,c	;volatile
  6579  001B72  6E8C               	movwf	3980,c	;volatile
  6580                           
  6581                           ; BSR set to: 0
  6582                           ;lcd.c: 64: LATDbits.LATD3 = 0;
  6583  001B74  968C               	bcf	3980,3,c	;volatile
  6584                           
  6585                           ; BSR set to: 0
  6586                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
  6587  001B76  0ED6               	movlw	214
  6588  001B78                     u3797:
  6589  001B78  D000               	nop2	
  6590  001B7A  D000               	nop2	
  6591  001B7C  2EE8               	decfsz	wreg,f,c
  6592  001B7E  D7FC               	bra	u3797
  6593  001B80  D000               	nop2	
  6594                           
  6595                           ;lcd.c: 66: LATDbits.LATD3 = 1;
  6596  001B82  868C               	bsf	3980,3,c	;volatile
  6597                           
  6598                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
  6599  001B84  0ED6               	movlw	214
  6600  001B86                     u3807:
  6601  001B86  D000               	nop2	
  6602  001B88  D000               	nop2	
  6603  001B8A  2EE8               	decfsz	wreg,f,c
  6604  001B8C  D7FC               	bra	u3807
  6605  001B8E  D000               	nop2	
  6606  001B90  0012               	return		;funcret
  6607  001B92                     __end_of_lcdNibble:
  6608                           	opt stack 0
  6609                           tblptru	equ	0xFF8
  6610                           tblptrh	equ	0xFF7
  6611                           tblptrl	equ	0xFF6
  6612                           tablat	equ	0xFF5
  6613                           prodh	equ	0xFF4
  6614                           prodl	equ	0xFF3
  6615                           intcon	equ	0xFF2
  6616                           postinc0	equ	0xFEE
  6617                           wreg	equ	0xFE8
  6618                           postdec1	equ	0xFE5
  6619                           fsr1l	equ	0xFE1
  6620                           indf2	equ	0xFDF
  6621                           postinc2	equ	0xFDE
  6622                           postdec2	equ	0xFDD
  6623                           fsr2h	equ	0xFDA
  6624                           fsr2l	equ	0xFD9
  6625                           status	equ	0xFD8
  6626                           
  6627 ;; *************** function _service *****************
  6628 ;; Defined at:
  6629 ;;		line 205 in file "main.c"
  6630 ;; Parameters:    Size  Location     Type
  6631 ;;		None
  6632 ;; Auto vars:     Size  Location     Type
  6633 ;;  key             1  116[COMRAM] unsigned char 
  6634 ;; Return value:  Size  Location     Type
  6635 ;;                  1    wreg      void 
  6636 ;; Registers used:
  6637 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6638 ;; Tracked objects:
  6639 ;;		On entry : 0/0
  6640 ;;		On exit  : 0/0
  6641 ;;		Unchanged: 0/0
  6642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6644 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6645 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6646 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6647 ;;Total ram usage:       15 bytes
  6648 ;; Hardware stack levels used:    1
  6649 ;; Hardware stack levels required when called:    4
  6650 ;; This function calls:
  6651 ;;		_servoInterruptService
  6652 ;;		i2_setAngle
  6653 ;; This function is called by:
  6654 ;;		Interrupt level 2
  6655 ;; This function uses a non-reentrant model
  6656 ;;
  6657                           
  6658                           	psect	intcode
  6659  000008                     __pintcode:
  6660                           	opt stack 0
  6661  000008                     _service:
  6662                           	opt stack 19
  6663                           
  6664                           ;incstack = 0
  6665  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6666  00000A  EDEF  F006         	call	int_func,f	;refresh shadow registers
  6667                           tblptru	equ	0xFF8
  6668                           tblptrh	equ	0xFF7
  6669                           tblptrl	equ	0xFF6
  6670                           tablat	equ	0xFF5
  6671                           prodh	equ	0xFF4
  6672                           prodl	equ	0xFF3
  6673                           intcon	equ	0xFF2
  6674                           postinc0	equ	0xFEE
  6675                           wreg	equ	0xFE8
  6676                           postdec1	equ	0xFE5
  6677                           fsr1l	equ	0xFE1
  6678                           indf2	equ	0xFDF
  6679                           postinc2	equ	0xFDE
  6680                           postdec2	equ	0xFDD
  6681                           fsr2h	equ	0xFDA
  6682                           fsr2l	equ	0xFD9
  6683                           status	equ	0xFD8
  6684                           
  6685                           	psect	intcode_body
  6686  000DDE                     __pintcode_body:
  6687                           	opt stack 19
  6688  000DDE                     int_func:
  6689                           	opt stack 19
  6690  000DDE  0006               	pop		; remove dummy address from shadow register refresh
  6691  000DE0  CFFA F067          	movff	pclath,??_service
  6692  000DE4  CFFB F068          	movff	pclatu,??_service+1
  6693  000DE8  CFE9 F069          	movff	fsr0l,??_service+2
  6694  000DEC  CFEA F06A          	movff	fsr0h,??_service+3
  6695  000DF0  CFE1 F06B          	movff	fsr1l,??_service+4
  6696  000DF4  CFE2 F06C          	movff	fsr1h,??_service+5
  6697  000DF8  CFD9 F06D          	movff	fsr2l,??_service+6
  6698  000DFC  CFDA F06E          	movff	fsr2h,??_service+7
  6699  000E00  CFF3 F06F          	movff	prodl,??_service+8
  6700  000E04  CFF4 F070          	movff	prodh,??_service+9
  6701  000E08  CFF6 F071          	movff	tblptrl,??_service+10
  6702  000E0C  CFF7 F072          	movff	tblptrh,??_service+11
  6703  000E10  CFF8 F073          	movff	tblptru,??_service+12
  6704  000E14  CFF5 F074          	movff	tablat,??_service+13
  6705                           
  6706                           ;main.c: 207: servoInterruptService();
  6707  000E18  EC3D  F001         	call	_servoInterruptService	;wreg free
  6708                           
  6709                           ;main.c: 210: if(INT0IF){ INT0IF = 0;
  6710  000E1C  A2F2               	btfss	intcon,1,c	;volatile
  6711  000E1E  D006               	goto	i2l3850
  6712  000E20  92F2               	bcf	intcon,1,c	;volatile
  6713                           
  6714                           ;main.c: 211: switchFlag = 1;
  6715  000E22  0E00               	movlw	0
  6716  000E24  0100               	movlb	0	; () banked
  6717  000E26  6FFF               	movwf	(_switchFlag+1)& (0+255),b
  6718  000E28  0E01               	movlw	1
  6719  000E2A  6FFE               	movwf	_switchFlag& (0+255),b
  6720  000E2C                     i2l3850:
  6721                           
  6722                           ;main.c: 212: }
  6723                           ;main.c: 215: if(INT1IF){INT1IF = 0;
  6724  000E2C  A0F0               	btfss	intcon3,0,c	;volatile
  6725  000E2E  D057               	goto	i2l174
  6726  000E30  90F0               	bcf	intcon3,0,c	;volatile
  6727                           
  6728                           ;main.c: 216: char key = (PORTB & 0xF0) >> 4;
  6729  000E32  3881               	swapf	3969,w,c	;volatile
  6730  000E34  0B0F               	andlw	15
  6731  000E36  0B0F               	andlw	15
  6732  000E38  6E75               	movwf	service@key,c
  6733                           
  6734                           ;main.c: 217: if(key == 0)setAngle(0,30);
  6735  000E3A  5075               	movf	service@key,w,c
  6736  000E3C  A4D8               	btfss	status,2,c
  6737  000E3E  D00A               	goto	i2l3860
  6738  000E40  0E00               	movlw	0
  6739  000E42  6E5E               	movwf	i2setAngle@timer+1,c
  6740  000E44  0E00               	movlw	0
  6741  000E46  6E5D               	movwf	i2setAngle@timer,c
  6742  000E48  0E00               	movlw	0
  6743  000E4A  6E60               	movwf	i2setAngle@angle+1,c
  6744  000E4C  0E1E               	movlw	30
  6745  000E4E  6E5F               	movwf	i2setAngle@angle,c
  6746  000E50  EC05  F00E         	call	i2_setAngle	;wreg free
  6747  000E54                     i2l3860:
  6748                           
  6749                           ;main.c: 218: if(key == 1)setAngle(0,90);
  6750  000E54  0475               	decf	service@key,w,c
  6751  000E56  A4D8               	btfss	status,2,c
  6752  000E58  D00A               	goto	i2l3864
  6753  000E5A  0E00               	movlw	0
  6754  000E5C  6E5E               	movwf	i2setAngle@timer+1,c
  6755  000E5E  0E00               	movlw	0
  6756  000E60  6E5D               	movwf	i2setAngle@timer,c
  6757  000E62  0E00               	movlw	0
  6758  000E64  6E60               	movwf	i2setAngle@angle+1,c
  6759  000E66  0E5A               	movlw	90
  6760  000E68  6E5F               	movwf	i2setAngle@angle,c
  6761  000E6A  EC05  F00E         	call	i2_setAngle	;wreg free
  6762  000E6E                     i2l3864:
  6763                           
  6764                           ;main.c: 219: if(key == 2)setAngle(0,135);
  6765  000E6E  0E02               	movlw	2
  6766  000E70  1875               	xorwf	service@key,w,c
  6767  000E72  A4D8               	btfss	status,2,c
  6768  000E74  D00A               	goto	i2l3868
  6769  000E76  0E00               	movlw	0
  6770  000E78  6E5E               	movwf	i2setAngle@timer+1,c
  6771  000E7A  0E00               	movlw	0
  6772  000E7C  6E5D               	movwf	i2setAngle@timer,c
  6773  000E7E  0E00               	movlw	0
  6774  000E80  6E60               	movwf	i2setAngle@angle+1,c
  6775  000E82  0E87               	movlw	135
  6776  000E84  6E5F               	movwf	i2setAngle@angle,c
  6777  000E86  EC05  F00E         	call	i2_setAngle	;wreg free
  6778  000E8A                     i2l3868:
  6779                           
  6780                           ;main.c: 221: if(key == 4)setAngle(3,80);
  6781  000E8A  0E04               	movlw	4
  6782  000E8C  1875               	xorwf	service@key,w,c
  6783  000E8E  A4D8               	btfss	status,2,c
  6784  000E90  D00A               	goto	i2l3872
  6785  000E92  0E00               	movlw	0
  6786  000E94  6E5E               	movwf	i2setAngle@timer+1,c
  6787  000E96  0E03               	movlw	3
  6788  000E98  6E5D               	movwf	i2setAngle@timer,c
  6789  000E9A  0E00               	movlw	0
  6790  000E9C  6E60               	movwf	i2setAngle@angle+1,c
  6791  000E9E  0E50               	movlw	80
  6792  000EA0  6E5F               	movwf	i2setAngle@angle,c
  6793  000EA2  EC05  F00E         	call	i2_setAngle	;wreg free
  6794  000EA6                     i2l3872:
  6795                           
  6796                           ;main.c: 222: if(key == 5)setAngle(3,90);
  6797  000EA6  0E05               	movlw	5
  6798  000EA8  1875               	xorwf	service@key,w,c
  6799  000EAA  A4D8               	btfss	status,2,c
  6800  000EAC  D00A               	goto	i2l3876
  6801  000EAE  0E00               	movlw	0
  6802  000EB0  6E5E               	movwf	i2setAngle@timer+1,c
  6803  000EB2  0E03               	movlw	3
  6804  000EB4  6E5D               	movwf	i2setAngle@timer,c
  6805  000EB6  0E00               	movlw	0
  6806  000EB8  6E60               	movwf	i2setAngle@angle+1,c
  6807  000EBA  0E5A               	movlw	90
  6808  000EBC  6E5F               	movwf	i2setAngle@angle,c
  6809  000EBE  EC05  F00E         	call	i2_setAngle	;wreg free
  6810  000EC2                     i2l3876:
  6811                           
  6812                           ;main.c: 223: if(key == 6)setAngle(3,100);
  6813  000EC2  0E06               	movlw	6
  6814  000EC4  1875               	xorwf	service@key,w,c
  6815  000EC6  A4D8               	btfss	status,2,c
  6816  000EC8  D00A               	goto	i2l174
  6817  000ECA  0E00               	movlw	0
  6818  000ECC  6E5E               	movwf	i2setAngle@timer+1,c
  6819  000ECE  0E03               	movlw	3
  6820  000ED0  6E5D               	movwf	i2setAngle@timer,c
  6821  000ED2  0E00               	movlw	0
  6822  000ED4  6E60               	movwf	i2setAngle@angle+1,c
  6823  000ED6  0E64               	movlw	100
  6824  000ED8  6E5F               	movwf	i2setAngle@angle,c
  6825  000EDA  EC05  F00E         	call	i2_setAngle	;wreg free
  6826  000EDE                     i2l174:
  6827  000EDE  C074  FFF5         	movff	??_service+13,tablat
  6828  000EE2  C073  FFF8         	movff	??_service+12,tblptru
  6829  000EE6  C072  FFF7         	movff	??_service+11,tblptrh
  6830  000EEA  C071  FFF6         	movff	??_service+10,tblptrl
  6831  000EEE  C070  FFF4         	movff	??_service+9,prodh
  6832  000EF2  C06F  FFF3         	movff	??_service+8,prodl
  6833  000EF6  C06E  FFDA         	movff	??_service+7,fsr2h
  6834  000EFA  C06D  FFD9         	movff	??_service+6,fsr2l
  6835  000EFE  C06C  FFE2         	movff	??_service+5,fsr1h
  6836  000F02  C06B  FFE1         	movff	??_service+4,fsr1l
  6837  000F06  C06A  FFEA         	movff	??_service+3,fsr0h
  6838  000F0A  C069  FFE9         	movff	??_service+2,fsr0l
  6839  000F0E  C068  FFFB         	movff	??_service+1,pclatu
  6840  000F12  C067  FFFA         	movff	??_service,pclath
  6841  000F16  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6842  000F18  0011               	retfie		f
  6843  000F1A                     __end_of_service:
  6844                           	opt stack 0
  6845                           pclatu	equ	0xFFB
  6846                           pclath	equ	0xFFA
  6847                           tblptru	equ	0xFF8
  6848                           tblptrh	equ	0xFF7
  6849                           tblptrl	equ	0xFF6
  6850                           tablat	equ	0xFF5
  6851                           prodh	equ	0xFF4
  6852                           prodl	equ	0xFF3
  6853                           intcon	equ	0xFF2
  6854                           intcon3	equ	0xFF0
  6855                           postinc0	equ	0xFEE
  6856                           fsr0h	equ	0xFEA
  6857                           fsr0l	equ	0xFE9
  6858                           wreg	equ	0xFE8
  6859                           postdec1	equ	0xFE5
  6860                           fsr1h	equ	0xFE2
  6861                           fsr1l	equ	0xFE1
  6862                           indf2	equ	0xFDF
  6863                           postinc2	equ	0xFDE
  6864                           postdec2	equ	0xFDD
  6865                           fsr2h	equ	0xFDA
  6866                           fsr2l	equ	0xFD9
  6867                           status	equ	0xFD8
  6868                           
  6869 ;; *************** function i2_setAngle *****************
  6870 ;; Defined at:
  6871 ;;		line 43 in file "servo.c"
  6872 ;; Parameters:    Size  Location     Type
  6873 ;;  timer           2   92[COMRAM] int 
  6874 ;;  angle           2   94[COMRAM] int 
  6875 ;; Auto vars:     Size  Location     Type
  6876 ;;		None
  6877 ;; Return value:  Size  Location     Type
  6878 ;;                  1    wreg      void 
  6879 ;; Registers used:
  6880 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6881 ;; Tracked objects:
  6882 ;;		On entry : 0/0
  6883 ;;		On exit  : 0/0
  6884 ;;		Unchanged: 0/0
  6885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6886 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6888 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6889 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6890 ;;Total ram usage:       10 bytes
  6891 ;; Hardware stack levels used:    1
  6892 ;; Hardware stack levels required when called:    3
  6893 ;; This function calls:
  6894 ;;		i2_angleToPulse
  6895 ;; This function is called by:
  6896 ;;		_service
  6897 ;; This function uses a non-reentrant model
  6898 ;;
  6899                           
  6900                           	psect	text35
  6901  001C0A                     __ptext35:
  6902                           	opt stack 0
  6903  001C0A                     i2_setAngle:
  6904                           	opt stack 19
  6905                           
  6906                           ;servo.c: 44: pulse[timer] = 0xffff - angleToPulse(angle);
  6907                           
  6908                           ;incstack = 0
  6909  001C0A  C05F  F046         	movff	i2setAngle@angle,i2angleToPulse@angle
  6910  001C0E  C060  F047         	movff	i2setAngle@angle+1,i2angleToPulse@angle+1
  6911  001C12  EC4F  F006         	call	i2_angleToPulse	;wreg free
  6912  001C16  1E46               	comf	?i2_angleToPulse,f,c
  6913  001C18  1E47               	comf	?i2_angleToPulse+1,f,c
  6914  001C1A  1E48               	comf	?i2_angleToPulse+2,f,c
  6915  001C1C  1E49               	comf	?i2_angleToPulse+3,f,c
  6916  001C1E  2A46               	incf	?i2_angleToPulse,f,c
  6917  001C20  0E00               	movlw	0
  6918  001C22  2247               	addwfc	?i2_angleToPulse+1,f,c
  6919  001C24  2248               	addwfc	?i2_angleToPulse+2,f,c
  6920  001C26  2249               	addwfc	?i2_angleToPulse+3,f,c
  6921  001C28  0EFF               	movlw	255
  6922  001C2A  2446               	addwf	?i2_angleToPulse,w,c
  6923  001C2C  6E61               	movwf	??i2_setAngle& (0+255),c
  6924  001C2E  0EFF               	movlw	255
  6925  001C30  2047               	addwfc	?i2_angleToPulse+1,w,c
  6926  001C32  6E62               	movwf	(??i2_setAngle+1)& (0+255),c
  6927  001C34  0E00               	movlw	0
  6928  001C36  2048               	addwfc	?i2_angleToPulse+2,w,c
  6929  001C38  6E63               	movwf	(??i2_setAngle+2)& (0+255),c
  6930  001C3A  0E00               	movlw	0
  6931  001C3C  2049               	addwfc	?i2_angleToPulse+3,w,c
  6932  001C3E  6E64               	movwf	(??i2_setAngle+3)& (0+255),c
  6933  001C40  0E00               	movlw	low _pulse
  6934  001C42  6E65               	movwf	(??i2_setAngle+4)& (0+255),c
  6935  001C44  0E01               	movlw	high _pulse
  6936  001C46  6E66               	movwf	(??i2_setAngle+5)& (0+255),c
  6937  001C48  90D8               	bcf	status,0,c
  6938  001C4A  345D               	rlcf	i2setAngle@timer,w,c
  6939  001C4C  6ED9               	movwf	fsr2l,c
  6940  001C4E  345E               	rlcf	i2setAngle@timer+1,w,c
  6941  001C50  6EDA               	movwf	fsr2h,c
  6942  001C52  90D8               	bcf	status,0,c
  6943  001C54  36D9               	rlcf	fsr2l,f,c
  6944  001C56  36DA               	rlcf	fsr2h,f,c
  6945  001C58  5065               	movf	??i2_setAngle+4,w,c
  6946  001C5A  26D9               	addwf	fsr2l,f,c
  6947  001C5C  5066               	movf	??i2_setAngle+5,w,c
  6948  001C5E  22DA               	addwfc	fsr2h,f,c
  6949  001C60  C061  FFDE         	movff	??i2_setAngle,postinc2
  6950  001C64  C062  FFDE         	movff	??i2_setAngle+1,postinc2
  6951  001C68  C063  FFDE         	movff	??i2_setAngle+2,postinc2
  6952  001C6C  C064  FFDE         	movff	??i2_setAngle+3,postinc2
  6953  001C70  0012               	return		;funcret
  6954  001C72                     __end_ofi2_setAngle:
  6955                           	opt stack 0
  6956                           pclatu	equ	0xFFB
  6957                           pclath	equ	0xFFA
  6958                           tblptru	equ	0xFF8
  6959                           tblptrh	equ	0xFF7
  6960                           tblptrl	equ	0xFF6
  6961                           tablat	equ	0xFF5
  6962                           prodh	equ	0xFF4
  6963                           prodl	equ	0xFF3
  6964                           intcon	equ	0xFF2
  6965                           intcon3	equ	0xFF0
  6966                           postinc0	equ	0xFEE
  6967                           fsr0h	equ	0xFEA
  6968                           fsr0l	equ	0xFE9
  6969                           wreg	equ	0xFE8
  6970                           postdec1	equ	0xFE5
  6971                           fsr1h	equ	0xFE2
  6972                           fsr1l	equ	0xFE1
  6973                           indf2	equ	0xFDF
  6974                           postinc2	equ	0xFDE
  6975                           postdec2	equ	0xFDD
  6976                           fsr2h	equ	0xFDA
  6977                           fsr2l	equ	0xFD9
  6978                           status	equ	0xFD8
  6979                           
  6980 ;; *************** function i2_angleToPulse *****************
  6981 ;; Defined at:
  6982 ;;		line 35 in file "servo.c"
  6983 ;; Parameters:    Size  Location     Type
  6984 ;;  angle           2   69[COMRAM] int 
  6985 ;; Auto vars:     Size  Location     Type
  6986 ;;  angleToPulse    4   88[COMRAM] long 
  6987 ;;  angleToPulse    4   81[COMRAM] long 
  6988 ;;  angleToPulse    4   77[COMRAM] long 
  6989 ;; Return value:  Size  Location     Type
  6990 ;;                  4   69[COMRAM] long 
  6991 ;; Registers used:
  6992 ;;		wreg, status,2, status,0, cstack
  6993 ;; Tracked objects:
  6994 ;;		On entry : 0/0
  6995 ;;		On exit  : 0/0
  6996 ;;		Unchanged: 0/0
  6997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6998 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6999 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7000 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7001 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7002 ;;Total ram usage:       23 bytes
  7003 ;; Hardware stack levels used:    1
  7004 ;; Hardware stack levels required when called:    2
  7005 ;; This function calls:
  7006 ;;		i2___altoft
  7007 ;;		i2___awtoft
  7008 ;;		i2___ftadd
  7009 ;;		i2___ftdiv
  7010 ;;		i2___ftmul
  7011 ;;		i2___fttol
  7012 ;; This function is called by:
  7013 ;;		i2_setAngle
  7014 ;; This function uses a non-reentrant model
  7015 ;;
  7016                           
  7017                           	psect	text36
  7018  000C9E                     __ptext36:
  7019                           	opt stack 0
  7020  000C9E                     i2_angleToPulse:
  7021                           	opt stack 19
  7022                           
  7023                           ;servo.c: 36: long offset = 0;
  7024                           
  7025                           ;incstack = 0
  7026  000C9E  0E00               	movlw	0
  7027  000CA0  6E4E               	movwf	i2angleToPulse@offset,c
  7028  000CA2  0E00               	movlw	0
  7029  000CA4  6E4F               	movwf	i2angleToPulse@offset+1,c
  7030  000CA6  0E00               	movlw	0
  7031  000CA8  6E50               	movwf	i2angleToPulse@offset+2,c
  7032  000CAA  0E00               	movlw	0
  7033  000CAC  6E51               	movwf	i2angleToPulse@offset+3,c
  7034                           
  7035                           ;servo.c: 37: long a000 = 1250;
  7036  000CAE  0EE2               	movlw	226
  7037  000CB0  6E59               	movwf	i2angleToPulse@a000,c
  7038  000CB2  0E04               	movlw	4
  7039  000CB4  6E5A               	movwf	i2angleToPulse@a000+1,c
  7040  000CB6  0E00               	movlw	0
  7041  000CB8  6E5B               	movwf	i2angleToPulse@a000+2,c
  7042  000CBA  0E00               	movlw	0
  7043  000CBC  6E5C               	movwf	i2angleToPulse@a000+3,c
  7044                           
  7045                           ;servo.c: 38: long a180 = 6250;
  7046  000CBE  0E6A               	movlw	106
  7047  000CC0  6E52               	movwf	i2angleToPulse@a180,c
  7048  000CC2  0E18               	movlw	24
  7049  000CC4  6E53               	movwf	i2angleToPulse@a180+1,c
  7050  000CC6  0E00               	movlw	0
  7051  000CC8  6E54               	movwf	i2angleToPulse@a180+2,c
  7052  000CCA  0E00               	movlw	0
  7053  000CCC  6E55               	movwf	i2angleToPulse@a180+3,c
  7054                           
  7055                           ;servo.c: 40: return a000 + angle/180.0*(a180-a000) + offset;
  7056  000CCE  C059  F04A         	movff	i2angleToPulse@a000,??i2_angleToPulse
  7057  000CD2  C05A  F04B         	movff	i2angleToPulse@a000+1,??i2_angleToPulse+1
  7058  000CD6  C05B  F04C         	movff	i2angleToPulse@a000+2,??i2_angleToPulse+2
  7059  000CDA  C05C  F04D         	movff	i2angleToPulse@a000+3,??i2_angleToPulse+3
  7060  000CDE  1E4A               	comf	??i2_angleToPulse,f,c
  7061  000CE0  1E4B               	comf	??i2_angleToPulse+1,f,c
  7062  000CE2  1E4C               	comf	??i2_angleToPulse+2,f,c
  7063  000CE4  1E4D               	comf	??i2_angleToPulse+3,f,c
  7064  000CE6  2A4A               	incf	??i2_angleToPulse,f,c
  7065  000CE8  0E00               	movlw	0
  7066  000CEA  224B               	addwfc	??i2_angleToPulse+1,f,c
  7067  000CEC  224C               	addwfc	??i2_angleToPulse+2,f,c
  7068  000CEE  224D               	addwfc	??i2_angleToPulse+3,f,c
  7069  000CF0  5052               	movf	i2angleToPulse@a180,w,c
  7070  000CF2  244A               	addwf	??i2_angleToPulse,w,c
  7071  000CF4  6E09               	movwf	i2___altoft@c,c
  7072  000CF6  5053               	movf	i2angleToPulse@a180+1,w,c
  7073  000CF8  204B               	addwfc	??i2_angleToPulse+1,w,c
  7074  000CFA  6E0A               	movwf	i2___altoft@c+1,c
  7075  000CFC  5054               	movf	i2angleToPulse@a180+2,w,c
  7076  000CFE  204C               	addwfc	??i2_angleToPulse+2,w,c
  7077  000D00  6E0B               	movwf	i2___altoft@c+2,c
  7078  000D02  5055               	movf	i2angleToPulse@a180+3,w,c
  7079  000D04  204D               	addwfc	??i2_angleToPulse+3,w,c
  7080  000D06  6E0C               	movwf	i2___altoft@c+3,c
  7081  000D08  ECC9  F00D         	call	i2___altoft	;wreg free
  7082  000D0C  C009  F01F         	movff	?i2___altoft,i2___ftmul@f2
  7083  000D10  C00A  F020         	movff	?i2___altoft+1,i2___ftmul@f2+1
  7084  000D14  C00B  F021         	movff	?i2___altoft+2,i2___ftmul@f2+2
  7085  000D18  0E00               	movlw	0
  7086  000D1A  6E10               	movwf	i2___ftdiv@f2,c
  7087  000D1C  0E34               	movlw	52
  7088  000D1E  6E11               	movwf	i2___ftdiv@f2+1,c
  7089  000D20  0E43               	movlw	67
  7090  000D22  6E12               	movwf	i2___ftdiv@f2+2,c
  7091  000D24  C046  F009         	movff	i2angleToPulse@angle,i2___awtoft@c
  7092  000D28  C047  F00A         	movff	i2angleToPulse@angle+1,i2___awtoft@c+1
  7093  000D2C  EC37  F00F         	call	i2___awtoft	;wreg free
  7094  000D30  C009  F00D         	movff	?i2___awtoft,i2___ftdiv@f1
  7095  000D34  C00A  F00E         	movff	?i2___awtoft+1,i2___ftdiv@f1+1
  7096  000D38  C00B  F00F         	movff	?i2___awtoft+2,i2___ftdiv@f1+2
  7097  000D3C  EC89  F009         	call	i2___ftdiv	;wreg free
  7098  000D40  C00D  F01C         	movff	?i2___ftdiv,i2___ftmul@f1
  7099  000D44  C00E  F01D         	movff	?i2___ftdiv+1,i2___ftmul@f1+1
  7100  000D48  C00F  F01E         	movff	?i2___ftdiv+2,i2___ftmul@f1+2
  7101  000D4C  EC0F  F009         	call	i2___ftmul	;wreg free
  7102  000D50  C01C  F02E         	movff	?i2___ftmul,i2___ftadd@f2
  7103  000D54  C01D  F02F         	movff	?i2___ftmul+1,i2___ftadd@f2+1
  7104  000D58  C01E  F030         	movff	?i2___ftmul+2,i2___ftadd@f2+2
  7105  000D5C  C059  F009         	movff	i2angleToPulse@a000,i2___altoft@c
  7106  000D60  C05A  F00A         	movff	i2angleToPulse@a000+1,i2___altoft@c+1
  7107  000D64  C05B  F00B         	movff	i2angleToPulse@a000+2,i2___altoft@c+2
  7108  000D68  C05C  F00C         	movff	i2angleToPulse@a000+3,i2___altoft@c+3
  7109  000D6C  ECC9  F00D         	call	i2___altoft	;wreg free
  7110  000D70  C009  F02B         	movff	?i2___altoft,i2___ftadd@f1
  7111  000D74  C00A  F02C         	movff	?i2___altoft+1,i2___ftadd@f1+1
  7112  000D78  C00B  F02D         	movff	?i2___altoft+2,i2___ftadd@f1+2
  7113  000D7C  EC27  F002         	call	i2___ftadd	;wreg free
  7114  000D80  C02B  F056         	movff	?i2___ftadd,i2_angleToPulse$1318
  7115  000D84  C02C  F057         	movff	?i2___ftadd+1,i2_angleToPulse$1318+1
  7116  000D88  C02D  F058         	movff	?i2___ftadd+2,i2_angleToPulse$1318+2
  7117                           
  7118                           ;servo.c: 40: return a000 + angle/180.0*(a180-a000) + offset;
  7119  000D8C  C04E  F009         	movff	i2angleToPulse@offset,i2___altoft@c
  7120  000D90  C04F  F00A         	movff	i2angleToPulse@offset+1,i2___altoft@c+1
  7121  000D94  C050  F00B         	movff	i2angleToPulse@offset+2,i2___altoft@c+2
  7122  000D98  C051  F00C         	movff	i2angleToPulse@offset+3,i2___altoft@c+3
  7123  000D9C  ECC9  F00D         	call	i2___altoft	;wreg free
  7124  000DA0  C009  F02E         	movff	?i2___altoft,i2___ftadd@f2
  7125  000DA4  C00A  F02F         	movff	?i2___altoft+1,i2___ftadd@f2+1
  7126  000DA8  C00B  F030         	movff	?i2___altoft+2,i2___ftadd@f2+2
  7127  000DAC  C056  F02B         	movff	i2_angleToPulse$1318,i2___ftadd@f1
  7128  000DB0  C057  F02C         	movff	i2_angleToPulse$1318+1,i2___ftadd@f1+1
  7129  000DB4  C058  F02D         	movff	i2_angleToPulse$1318+2,i2___ftadd@f1+2
  7130  000DB8  EC27  F002         	call	i2___ftadd	;wreg free
  7131  000DBC  C02B  F037         	movff	?i2___ftadd,i2___fttol@f1
  7132  000DC0  C02C  F038         	movff	?i2___ftadd+1,i2___fttol@f1+1
  7133  000DC4  C02D  F039         	movff	?i2___ftadd+2,i2___fttol@f1+2
  7134  000DC8  EC95  F008         	call	i2___fttol	;wreg free
  7135  000DCC  C037  F046         	movff	?i2___fttol,?i2_angleToPulse
  7136  000DD0  C038  F047         	movff	?i2___fttol+1,?i2_angleToPulse+1
  7137  000DD4  C039  F048         	movff	?i2___fttol+2,?i2_angleToPulse+2
  7138  000DD8  C03A  F049         	movff	?i2___fttol+3,?i2_angleToPulse+3
  7139  000DDC  0012               	return	
  7140  000DDE                     __end_ofi2_angleToPulse:
  7141                           	opt stack 0
  7142                           pclatu	equ	0xFFB
  7143                           pclath	equ	0xFFA
  7144                           tblptru	equ	0xFF8
  7145                           tblptrh	equ	0xFF7
  7146                           tblptrl	equ	0xFF6
  7147                           tablat	equ	0xFF5
  7148                           prodh	equ	0xFF4
  7149                           prodl	equ	0xFF3
  7150                           intcon	equ	0xFF2
  7151                           intcon3	equ	0xFF0
  7152                           postinc0	equ	0xFEE
  7153                           fsr0h	equ	0xFEA
  7154                           fsr0l	equ	0xFE9
  7155                           wreg	equ	0xFE8
  7156                           postdec1	equ	0xFE5
  7157                           fsr1h	equ	0xFE2
  7158                           fsr1l	equ	0xFE1
  7159                           indf2	equ	0xFDF
  7160                           postinc2	equ	0xFDE
  7161                           postdec2	equ	0xFDD
  7162                           fsr2h	equ	0xFDA
  7163                           fsr2l	equ	0xFD9
  7164                           status	equ	0xFD8
  7165                           
  7166 ;; *************** function i2___fttol *****************
  7167 ;; Defined at:
  7168 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  7169 ;; Parameters:    Size  Location     Type
  7170 ;;  f1              3   54[COMRAM] float 
  7171 ;; Auto vars:     Size  Location     Type
  7172 ;;  __fttol         4   64[COMRAM] unsigned long 
  7173 ;;  __fttol         1   68[COMRAM] unsigned char 
  7174 ;;  __fttol         1   63[COMRAM] unsigned char 
  7175 ;; Return value:  Size  Location     Type
  7176 ;;                  4   54[COMRAM] long 
  7177 ;; Registers used:
  7178 ;;		wreg, status,2, status,0
  7179 ;; Tracked objects:
  7180 ;;		On entry : 0/0
  7181 ;;		On exit  : 0/0
  7182 ;;		Unchanged: 0/0
  7183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7184 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7185 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7186 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7187 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7188 ;;Total ram usage:       15 bytes
  7189 ;; Hardware stack levels used:    1
  7190 ;; This function calls:
  7191 ;;		Nothing
  7192 ;; This function is called by:
  7193 ;;		i2_angleToPulse
  7194 ;; This function uses a non-reentrant model
  7195 ;;
  7196                           
  7197                           	psect	text37
  7198  00112A                     __ptext37:
  7199                           	opt stack 0
  7200  00112A                     i2___fttol:
  7201                           	opt stack 20
  7202                           
  7203                           ;incstack = 0
  7204  00112A  C039  F03B         	movff	i2___fttol@f1+2,??i2___fttol
  7205  00112E  6A3C               	clrf	(??i2___fttol+1)& (0+255),c
  7206  001130  6A3D               	clrf	(??i2___fttol+2)& (0+255),c
  7207  001132  3438               	rlcf	i2___fttol@f1+1,w,c
  7208  001134  363B               	rlcf	??i2___fttol& (0+255),f,c
  7209  001136  E301               	bnc	u303_41
  7210  001138  803C               	bsf	(??i2___fttol+1)& (0+255),0,c
  7211  00113A                     u303_41:
  7212  00113A  503B               	movf	??i2___fttol,w,c
  7213  00113C  6E45               	movwf	i2___fttol@exp1,c
  7214  00113E  5045               	movf	i2___fttol@exp1,w,c
  7215  001140  A4D8               	btfss	status,2,c
  7216  001142  D009               	goto	i2l3442
  7217  001144  0E00               	movlw	0
  7218  001146  6E37               	movwf	?i2___fttol,c
  7219  001148  0E00               	movlw	0
  7220  00114A  6E38               	movwf	?i2___fttol+1,c
  7221  00114C  0E00               	movlw	0
  7222  00114E  6E39               	movwf	?i2___fttol+2,c
  7223  001150  0E00               	movlw	0
  7224  001152  6E3A               	movwf	?i2___fttol+3,c
  7225  001154  0012               	return	
  7226  001156                     i2l3442:
  7227  001156  0E17               	movlw	23
  7228  001158  6E3B               	movwf	??i2___fttol& (0+255),c
  7229  00115A  C037  F03C         	movff	i2___fttol@f1,??i2___fttol+1
  7230  00115E  C038  F03D         	movff	i2___fttol@f1+1,??i2___fttol+2
  7231  001162  C039  F03E         	movff	i2___fttol@f1+2,??i2___fttol+3
  7232  001166  283B               	incf	??i2___fttol,w,c
  7233  001168  6E3F               	movwf	(??i2___fttol+4)& (0+255),c
  7234  00116A  D004               	goto	i2u305_40
  7235  00116C                     i2u305_45:
  7236  00116C  90D8               	bcf	status,0,c
  7237  00116E  323E               	rrcf	??i2___fttol+3,f,c
  7238  001170  323D               	rrcf	??i2___fttol+2,f,c
  7239  001172  323C               	rrcf	??i2___fttol+1,f,c
  7240  001174                     i2u305_40:
  7241  001174  2E3F               	decfsz	(??i2___fttol+4)& (0+255),f,c
  7242  001176  D7FA               	goto	i2u305_45
  7243  001178  503C               	movf	??i2___fttol+1,w,c
  7244  00117A  6E40               	movwf	i2___fttol@sign1,c
  7245  00117C  8E38               	bsf	i2___fttol@f1+1,7,c
  7246  00117E  0EFF               	movlw	255
  7247  001180  1637               	andwf	i2___fttol@f1,f,c
  7248  001182  0EFF               	movlw	255
  7249  001184  1638               	andwf	i2___fttol@f1+1,f,c
  7250  001186  0E00               	movlw	0
  7251  001188  1639               	andwf	i2___fttol@f1+2,f,c
  7252  00118A  5037               	movf	i2___fttol@f1,w,c
  7253  00118C  6E41               	movwf	i2___fttol@lval,c
  7254  00118E  5038               	movf	i2___fttol@f1+1,w,c
  7255  001190  6E42               	movwf	i2___fttol@lval+1,c
  7256  001192  5039               	movf	i2___fttol@f1+2,w,c
  7257  001194  6E43               	movwf	i2___fttol@lval+2,c
  7258  001196  6A44               	clrf	i2___fttol@lval+3,c
  7259  001198  0E8E               	movlw	142
  7260  00119A  5E45               	subwf	i2___fttol@exp1,f,c
  7261  00119C  AE45               	btfss	i2___fttol@exp1,7,c
  7262  00119E  D016               	goto	i2l3464
  7263  0011A0  5045               	movf	i2___fttol@exp1,w,c
  7264  0011A2  0A80               	xorlw	128
  7265  0011A4  0F8F               	addlw	143
  7266  0011A6  B0D8               	btfsc	status,0,c
  7267  0011A8  D009               	goto	i2l3460
  7268  0011AA  0E00               	movlw	0
  7269  0011AC  6E37               	movwf	?i2___fttol,c
  7270  0011AE  0E00               	movlw	0
  7271  0011B0  6E38               	movwf	?i2___fttol+1,c
  7272  0011B2  0E00               	movlw	0
  7273  0011B4  6E39               	movwf	?i2___fttol+2,c
  7274  0011B6  0E00               	movlw	0
  7275  0011B8  6E3A               	movwf	?i2___fttol+3,c
  7276  0011BA  0012               	return	
  7277  0011BC                     i2l3460:
  7278  0011BC  90D8               	bcf	status,0,c
  7279  0011BE  3244               	rrcf	i2___fttol@lval+3,f,c
  7280  0011C0  3243               	rrcf	i2___fttol@lval+2,f,c
  7281  0011C2  3242               	rrcf	i2___fttol@lval+1,f,c
  7282  0011C4  3241               	rrcf	i2___fttol@lval,f,c
  7283  0011C6  3E45               	incfsz	i2___fttol@exp1,f,c
  7284  0011C8  D7F9               	goto	i2l3460
  7285  0011CA  D015               	goto	i2l3474
  7286  0011CC                     i2l3464:
  7287  0011CC  0E17               	movlw	23
  7288  0011CE  6445               	cpfsgt	i2___fttol@exp1,c
  7289  0011D0  D00F               	goto	i2l3472
  7290  0011D2  0E00               	movlw	0
  7291  0011D4  6E37               	movwf	?i2___fttol,c
  7292  0011D6  0E00               	movlw	0
  7293  0011D8  6E38               	movwf	?i2___fttol+1,c
  7294  0011DA  0E00               	movlw	0
  7295  0011DC  6E39               	movwf	?i2___fttol+2,c
  7296  0011DE  0E00               	movlw	0
  7297  0011E0  6E3A               	movwf	?i2___fttol+3,c
  7298  0011E2  0012               	return	
  7299  0011E4                     i2l3470:
  7300  0011E4  90D8               	bcf	status,0,c
  7301  0011E6  3641               	rlcf	i2___fttol@lval,f,c
  7302  0011E8  3642               	rlcf	i2___fttol@lval+1,f,c
  7303  0011EA  3643               	rlcf	i2___fttol@lval+2,f,c
  7304  0011EC  3644               	rlcf	i2___fttol@lval+3,f,c
  7305  0011EE  0645               	decf	i2___fttol@exp1,f,c
  7306  0011F0                     i2l3472:
  7307  0011F0  5045               	movf	i2___fttol@exp1,w,c
  7308  0011F2  A4D8               	btfss	status,2,c
  7309  0011F4  D7F7               	goto	i2l3470
  7310  0011F6                     i2l3474:
  7311  0011F6  5040               	movf	i2___fttol@sign1,w,c
  7312  0011F8  B4D8               	btfsc	status,2,c
  7313  0011FA  D008               	goto	i2l3478
  7314  0011FC  1E44               	comf	i2___fttol@lval+3,f,c
  7315  0011FE  1E43               	comf	i2___fttol@lval+2,f,c
  7316  001200  1E42               	comf	i2___fttol@lval+1,f,c
  7317  001202  6C41               	negf	i2___fttol@lval,c
  7318  001204  0E00               	movlw	0
  7319  001206  2242               	addwfc	i2___fttol@lval+1,f,c
  7320  001208  2243               	addwfc	i2___fttol@lval+2,f,c
  7321  00120A  2244               	addwfc	i2___fttol@lval+3,f,c
  7322  00120C                     i2l3478:
  7323  00120C  C041  F037         	movff	i2___fttol@lval,?i2___fttol
  7324  001210  C042  F038         	movff	i2___fttol@lval+1,?i2___fttol+1
  7325  001214  C043  F039         	movff	i2___fttol@lval+2,?i2___fttol+2
  7326  001218  C044  F03A         	movff	i2___fttol@lval+3,?i2___fttol+3
  7327  00121C  0012               	return	
  7328  00121E                     __end_ofi2___fttol:
  7329                           	opt stack 0
  7330                           pclatu	equ	0xFFB
  7331                           pclath	equ	0xFFA
  7332                           tblptru	equ	0xFF8
  7333                           tblptrh	equ	0xFF7
  7334                           tblptrl	equ	0xFF6
  7335                           tablat	equ	0xFF5
  7336                           prodh	equ	0xFF4
  7337                           prodl	equ	0xFF3
  7338                           intcon	equ	0xFF2
  7339                           intcon3	equ	0xFF0
  7340                           postinc0	equ	0xFEE
  7341                           fsr0h	equ	0xFEA
  7342                           fsr0l	equ	0xFE9
  7343                           wreg	equ	0xFE8
  7344                           postdec1	equ	0xFE5
  7345                           fsr1h	equ	0xFE2
  7346                           fsr1l	equ	0xFE1
  7347                           indf2	equ	0xFDF
  7348                           postinc2	equ	0xFDE
  7349                           postdec2	equ	0xFDD
  7350                           fsr2h	equ	0xFDA
  7351                           fsr2l	equ	0xFD9
  7352                           status	equ	0xFD8
  7353                           
  7354 ;; *************** function i2___ftmul *****************
  7355 ;; Defined at:
  7356 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  7357 ;; Parameters:    Size  Location     Type
  7358 ;;  f1              3   27[COMRAM] float 
  7359 ;;  f2              3   30[COMRAM] float 
  7360 ;; Auto vars:     Size  Location     Type
  7361 ;;  __ftmul         3   37[COMRAM] unsigned um
  7362 ;;  __ftmul         1   41[COMRAM] unsigned char 
  7363 ;;  __ftmul         1   40[COMRAM] unsigned char 
  7364 ;;  __ftmul         1   36[COMRAM] unsigned char 
  7365 ;; Return value:  Size  Location     Type
  7366 ;;                  3   27[COMRAM] float 
  7367 ;; Registers used:
  7368 ;;		wreg, status,2, status,0, cstack
  7369 ;; Tracked objects:
  7370 ;;		On entry : 0/0
  7371 ;;		On exit  : 0/0
  7372 ;;		Unchanged: 0/0
  7373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7374 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7375 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7376 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7377 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7378 ;;Total ram usage:       15 bytes
  7379 ;; Hardware stack levels used:    1
  7380 ;; Hardware stack levels required when called:    1
  7381 ;; This function calls:
  7382 ;;		i2___ftpack
  7383 ;; This function is called by:
  7384 ;;		i2_angleToPulse
  7385 ;; This function uses a non-reentrant model
  7386 ;;
  7387                           
  7388                           	psect	text38
  7389  00121E                     __ptext38:
  7390                           	opt stack 0
  7391  00121E                     i2___ftmul:
  7392                           	opt stack 19
  7393                           
  7394                           ;incstack = 0
  7395  00121E  C01E  F022         	movff	i2___ftmul@f1+2,??i2___ftmul
  7396  001222  6A23               	clrf	(??i2___ftmul+1)& (0+255),c
  7397  001224  6A24               	clrf	(??i2___ftmul+2)& (0+255),c
  7398  001226  341D               	rlcf	i2___ftmul@f1+1,w,c
  7399  001228  3622               	rlcf	??i2___ftmul& (0+255),f,c
  7400  00122A  E301               	bnc	u297_41
  7401  00122C  8023               	bsf	(??i2___ftmul+1)& (0+255),0,c
  7402  00122E                     u297_41:
  7403  00122E  5022               	movf	??i2___ftmul,w,c
  7404  001230  6E25               	movwf	i2___ftmul@exp,c
  7405  001232  5025               	movf	i2___ftmul@exp,w,c
  7406  001234  A4D8               	btfss	status,2,c
  7407  001236  D007               	goto	i2l3394
  7408  001238  0E00               	movlw	0
  7409  00123A  6E1C               	movwf	?i2___ftmul,c
  7410  00123C  0E00               	movlw	0
  7411  00123E  6E1D               	movwf	?i2___ftmul+1,c
  7412  001240  0E00               	movlw	0
  7413  001242  6E1E               	movwf	?i2___ftmul+2,c
  7414  001244  0012               	return	
  7415  001246                     i2l3394:
  7416  001246  C021  F022         	movff	i2___ftmul@f2+2,??i2___ftmul
  7417  00124A  6A23               	clrf	(??i2___ftmul+1)& (0+255),c
  7418  00124C  6A24               	clrf	(??i2___ftmul+2)& (0+255),c
  7419  00124E  3420               	rlcf	i2___ftmul@f2+1,w,c
  7420  001250  3622               	rlcf	??i2___ftmul& (0+255),f,c
  7421  001252  E301               	bnc	u299_41
  7422  001254  8023               	bsf	(??i2___ftmul+1)& (0+255),0,c
  7423  001256                     u299_41:
  7424  001256  5022               	movf	??i2___ftmul,w,c
  7425  001258  6E2A               	movwf	i2___ftmul@sign,c
  7426  00125A  502A               	movf	i2___ftmul@sign,w,c
  7427  00125C  A4D8               	btfss	status,2,c
  7428  00125E  D007               	goto	i2l3400
  7429  001260  0E00               	movlw	0
  7430  001262  6E1C               	movwf	?i2___ftmul,c
  7431  001264  0E00               	movlw	0
  7432  001266  6E1D               	movwf	?i2___ftmul+1,c
  7433  001268  0E00               	movlw	0
  7434  00126A  6E1E               	movwf	?i2___ftmul+2,c
  7435  00126C  0012               	return	
  7436  00126E                     i2l3400:
  7437  00126E  502A               	movf	i2___ftmul@sign,w,c
  7438  001270  0F7B               	addlw	123
  7439  001272  2625               	addwf	i2___ftmul@exp,f,c
  7440  001274  C01E  F02A         	movff	i2___ftmul@f1+2,i2___ftmul@sign
  7441  001278  5021               	movf	i2___ftmul@f2+2,w,c
  7442  00127A  1A2A               	xorwf	i2___ftmul@sign,f,c
  7443  00127C  0E80               	movlw	128
  7444  00127E  162A               	andwf	i2___ftmul@sign,f,c
  7445  001280  8E1D               	bsf	i2___ftmul@f1+1,7,c
  7446  001282  8E20               	bsf	i2___ftmul@f2+1,7,c
  7447  001284  0EFF               	movlw	255
  7448  001286  161F               	andwf	i2___ftmul@f2,f,c
  7449  001288  0EFF               	movlw	255
  7450  00128A  1620               	andwf	i2___ftmul@f2+1,f,c
  7451  00128C  0E00               	movlw	0
  7452  00128E  1621               	andwf	i2___ftmul@f2+2,f,c
  7453  001290  0E00               	movlw	0
  7454  001292  6E26               	movwf	i2___ftmul@f3_as_product,c
  7455  001294  0E00               	movlw	0
  7456  001296  6E27               	movwf	i2___ftmul@f3_as_product+1,c
  7457  001298  0E00               	movlw	0
  7458  00129A  6E28               	movwf	i2___ftmul@f3_as_product+2,c
  7459  00129C  0E07               	movlw	7
  7460  00129E  6E29               	movwf	i2___ftmul@cntr,c
  7461  0012A0                     i2l3414:
  7462  0012A0  A01C               	btfss	i2___ftmul@f1,0,c
  7463  0012A2  D006               	goto	i2l3418
  7464  0012A4  501F               	movf	i2___ftmul@f2,w,c
  7465  0012A6  2626               	addwf	i2___ftmul@f3_as_product,f,c
  7466  0012A8  5020               	movf	i2___ftmul@f2+1,w,c
  7467  0012AA  2227               	addwfc	i2___ftmul@f3_as_product+1,f,c
  7468  0012AC  5021               	movf	i2___ftmul@f2+2,w,c
  7469  0012AE  2228               	addwfc	i2___ftmul@f3_as_product+2,f,c
  7470  0012B0                     i2l3418:
  7471  0012B0  90D8               	bcf	status,0,c
  7472  0012B2  321E               	rrcf	i2___ftmul@f1+2,f,c
  7473  0012B4  321D               	rrcf	i2___ftmul@f1+1,f,c
  7474  0012B6  321C               	rrcf	i2___ftmul@f1,f,c
  7475  0012B8  90D8               	bcf	status,0,c
  7476  0012BA  361F               	rlcf	i2___ftmul@f2,f,c
  7477  0012BC  3620               	rlcf	i2___ftmul@f2+1,f,c
  7478  0012BE  3621               	rlcf	i2___ftmul@f2+2,f,c
  7479  0012C0  2E29               	decfsz	i2___ftmul@cntr,f,c
  7480  0012C2  D7EE               	goto	i2l3414
  7481  0012C4  0E09               	movlw	9
  7482  0012C6  6E29               	movwf	i2___ftmul@cntr,c
  7483  0012C8                     i2l3424:
  7484  0012C8  A01C               	btfss	i2___ftmul@f1,0,c
  7485  0012CA  D006               	goto	i2l3428
  7486  0012CC  501F               	movf	i2___ftmul@f2,w,c
  7487  0012CE  2626               	addwf	i2___ftmul@f3_as_product,f,c
  7488  0012D0  5020               	movf	i2___ftmul@f2+1,w,c
  7489  0012D2  2227               	addwfc	i2___ftmul@f3_as_product+1,f,c
  7490  0012D4  5021               	movf	i2___ftmul@f2+2,w,c
  7491  0012D6  2228               	addwfc	i2___ftmul@f3_as_product+2,f,c
  7492  0012D8                     i2l3428:
  7493  0012D8  90D8               	bcf	status,0,c
  7494  0012DA  321E               	rrcf	i2___ftmul@f1+2,f,c
  7495  0012DC  321D               	rrcf	i2___ftmul@f1+1,f,c
  7496  0012DE  321C               	rrcf	i2___ftmul@f1,f,c
  7497  0012E0  90D8               	bcf	status,0,c
  7498  0012E2  3228               	rrcf	i2___ftmul@f3_as_product+2,f,c
  7499  0012E4  3227               	rrcf	i2___ftmul@f3_as_product+1,f,c
  7500  0012E6  3226               	rrcf	i2___ftmul@f3_as_product,f,c
  7501  0012E8  2E29               	decfsz	i2___ftmul@cntr,f,c
  7502  0012EA  D7EE               	goto	i2l3424
  7503  0012EC  C026  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
  7504  0012F0  C027  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
  7505  0012F4  C028  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
  7506  0012F8  C025  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
  7507  0012FC  C02A  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
  7508  001300  EC8D  F00B         	call	i2___ftpack	;wreg free
  7509  001304  C001  F01C         	movff	?i2___ftpack,?i2___ftmul
  7510  001308  C002  F01D         	movff	?i2___ftpack+1,?i2___ftmul+1
  7511  00130C  C003  F01E         	movff	?i2___ftpack+2,?i2___ftmul+2
  7512  001310  0012               	return	
  7513  001312                     __end_ofi2___ftmul:
  7514                           	opt stack 0
  7515                           pclatu	equ	0xFFB
  7516                           pclath	equ	0xFFA
  7517                           tblptru	equ	0xFF8
  7518                           tblptrh	equ	0xFF7
  7519                           tblptrl	equ	0xFF6
  7520                           tablat	equ	0xFF5
  7521                           prodh	equ	0xFF4
  7522                           prodl	equ	0xFF3
  7523                           intcon	equ	0xFF2
  7524                           intcon3	equ	0xFF0
  7525                           postinc0	equ	0xFEE
  7526                           fsr0h	equ	0xFEA
  7527                           fsr0l	equ	0xFE9
  7528                           wreg	equ	0xFE8
  7529                           postdec1	equ	0xFE5
  7530                           fsr1h	equ	0xFE2
  7531                           fsr1l	equ	0xFE1
  7532                           indf2	equ	0xFDF
  7533                           postinc2	equ	0xFDE
  7534                           postdec2	equ	0xFDD
  7535                           fsr2h	equ	0xFDA
  7536                           fsr2l	equ	0xFD9
  7537                           status	equ	0xFD8
  7538                           
  7539 ;; *************** function i2___ftdiv *****************
  7540 ;; Defined at:
  7541 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  7542 ;; Parameters:    Size  Location     Type
  7543 ;;  f1              3   12[COMRAM] float 
  7544 ;;  f2              3   15[COMRAM] float 
  7545 ;; Auto vars:     Size  Location     Type
  7546 ;;  __ftdiv         3   22[COMRAM] float 
  7547 ;;  __ftdiv         1   26[COMRAM] unsigned char 
  7548 ;;  __ftdiv         1   25[COMRAM] unsigned char 
  7549 ;;  __ftdiv         1   21[COMRAM] unsigned char 
  7550 ;; Return value:  Size  Location     Type
  7551 ;;                  3   12[COMRAM] float 
  7552 ;; Registers used:
  7553 ;;		wreg, status,2, status,0, cstack
  7554 ;; Tracked objects:
  7555 ;;		On entry : 0/0
  7556 ;;		On exit  : 0/0
  7557 ;;		Unchanged: 0/0
  7558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7559 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7560 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7561 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7562 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7563 ;;Total ram usage:       15 bytes
  7564 ;; Hardware stack levels used:    1
  7565 ;; Hardware stack levels required when called:    1
  7566 ;; This function calls:
  7567 ;;		i2___ftpack
  7568 ;; This function is called by:
  7569 ;;		i2_angleToPulse
  7570 ;; This function uses a non-reentrant model
  7571 ;;
  7572                           
  7573                           	psect	text39
  7574  001312                     __ptext39:
  7575                           	opt stack 0
  7576  001312                     i2___ftdiv:
  7577                           	opt stack 19
  7578                           
  7579                           ;incstack = 0
  7580  001312  C00F  F013         	movff	i2___ftdiv@f1+2,??i2___ftdiv
  7581  001316  6A14               	clrf	(??i2___ftdiv+1)& (0+255),c
  7582  001318  6A15               	clrf	(??i2___ftdiv+2)& (0+255),c
  7583  00131A  340E               	rlcf	i2___ftdiv@f1+1,w,c
  7584  00131C  3613               	rlcf	??i2___ftdiv& (0+255),f,c
  7585  00131E  E301               	bnc	u292_41
  7586  001320  8014               	bsf	(??i2___ftdiv+1)& (0+255),0,c
  7587  001322                     u292_41:
  7588  001322  5013               	movf	??i2___ftdiv,w,c
  7589  001324  6E1A               	movwf	i2___ftdiv@exp,c
  7590  001326  501A               	movf	i2___ftdiv@exp,w,c
  7591  001328  A4D8               	btfss	status,2,c
  7592  00132A  D007               	goto	i2l3348
  7593  00132C  0E00               	movlw	0
  7594  00132E  6E0D               	movwf	?i2___ftdiv,c
  7595  001330  0E00               	movlw	0
  7596  001332  6E0E               	movwf	?i2___ftdiv+1,c
  7597  001334  0E00               	movlw	0
  7598  001336  6E0F               	movwf	?i2___ftdiv+2,c
  7599  001338  0012               	return	
  7600  00133A                     i2l3348:
  7601  00133A  C012  F013         	movff	i2___ftdiv@f2+2,??i2___ftdiv
  7602  00133E  6A14               	clrf	(??i2___ftdiv+1)& (0+255),c
  7603  001340  6A15               	clrf	(??i2___ftdiv+2)& (0+255),c
  7604  001342  3411               	rlcf	i2___ftdiv@f2+1,w,c
  7605  001344  3613               	rlcf	??i2___ftdiv& (0+255),f,c
  7606  001346  E301               	bnc	u294_41
  7607  001348  8014               	bsf	(??i2___ftdiv+1)& (0+255),0,c
  7608  00134A                     u294_41:
  7609  00134A  5013               	movf	??i2___ftdiv,w,c
  7610  00134C  6E1B               	movwf	i2___ftdiv@sign,c
  7611  00134E  501B               	movf	i2___ftdiv@sign,w,c
  7612  001350  A4D8               	btfss	status,2,c
  7613  001352  D007               	goto	i2l3354
  7614  001354  0E00               	movlw	0
  7615  001356  6E0D               	movwf	?i2___ftdiv,c
  7616  001358  0E00               	movlw	0
  7617  00135A  6E0E               	movwf	?i2___ftdiv+1,c
  7618  00135C  0E00               	movlw	0
  7619  00135E  6E0F               	movwf	?i2___ftdiv+2,c
  7620  001360  0012               	return	
  7621  001362                     i2l3354:
  7622  001362  0E00               	movlw	0
  7623  001364  6E17               	movwf	i2___ftdiv@f3,c
  7624  001366  0E00               	movlw	0
  7625  001368  6E18               	movwf	i2___ftdiv@f3+1,c
  7626  00136A  0E00               	movlw	0
  7627  00136C  6E19               	movwf	i2___ftdiv@f3+2,c
  7628  00136E  501B               	movf	i2___ftdiv@sign,w,c
  7629  001370  0F89               	addlw	137
  7630  001372  5E1A               	subwf	i2___ftdiv@exp,f,c
  7631  001374  C00F  F01B         	movff	i2___ftdiv@f1+2,i2___ftdiv@sign
  7632  001378  5012               	movf	i2___ftdiv@f2+2,w,c
  7633  00137A  1A1B               	xorwf	i2___ftdiv@sign,f,c
  7634  00137C  0E80               	movlw	128
  7635  00137E  161B               	andwf	i2___ftdiv@sign,f,c
  7636  001380  8E0E               	bsf	i2___ftdiv@f1+1,7,c
  7637  001382  0EFF               	movlw	255
  7638  001384  160D               	andwf	i2___ftdiv@f1,f,c
  7639  001386  0EFF               	movlw	255
  7640  001388  160E               	andwf	i2___ftdiv@f1+1,f,c
  7641  00138A  0E00               	movlw	0
  7642  00138C  160F               	andwf	i2___ftdiv@f1+2,f,c
  7643  00138E  8E11               	bsf	i2___ftdiv@f2+1,7,c
  7644  001390  0EFF               	movlw	255
  7645  001392  1610               	andwf	i2___ftdiv@f2,f,c
  7646  001394  0EFF               	movlw	255
  7647  001396  1611               	andwf	i2___ftdiv@f2+1,f,c
  7648  001398  0E00               	movlw	0
  7649  00139A  1612               	andwf	i2___ftdiv@f2+2,f,c
  7650  00139C  0E18               	movlw	24
  7651  00139E  6E16               	movwf	i2___ftdiv@cntr,c
  7652  0013A0                     i2l3374:
  7653  0013A0  90D8               	bcf	status,0,c
  7654  0013A2  3617               	rlcf	i2___ftdiv@f3,f,c
  7655  0013A4  3618               	rlcf	i2___ftdiv@f3+1,f,c
  7656  0013A6  3619               	rlcf	i2___ftdiv@f3+2,f,c
  7657  0013A8  5010               	movf	i2___ftdiv@f2,w,c
  7658  0013AA  5C0D               	subwf	i2___ftdiv@f1,w,c
  7659  0013AC  5011               	movf	i2___ftdiv@f2+1,w,c
  7660  0013AE  580E               	subwfb	i2___ftdiv@f1+1,w,c
  7661  0013B0  5012               	movf	i2___ftdiv@f2+2,w,c
  7662  0013B2  580F               	subwfb	i2___ftdiv@f1+2,w,c
  7663  0013B4  A0D8               	btfss	status,0,c
  7664  0013B6  D007               	goto	i2l907
  7665  0013B8  5010               	movf	i2___ftdiv@f2,w,c
  7666  0013BA  5E0D               	subwf	i2___ftdiv@f1,f,c
  7667  0013BC  5011               	movf	i2___ftdiv@f2+1,w,c
  7668  0013BE  5A0E               	subwfb	i2___ftdiv@f1+1,f,c
  7669  0013C0  5012               	movf	i2___ftdiv@f2+2,w,c
  7670  0013C2  5A0F               	subwfb	i2___ftdiv@f1+2,f,c
  7671  0013C4  8017               	bsf	i2___ftdiv@f3,0,c
  7672  0013C6                     i2l907:
  7673  0013C6  90D8               	bcf	status,0,c
  7674  0013C8  360D               	rlcf	i2___ftdiv@f1,f,c
  7675  0013CA  360E               	rlcf	i2___ftdiv@f1+1,f,c
  7676  0013CC  360F               	rlcf	i2___ftdiv@f1+2,f,c
  7677  0013CE  2E16               	decfsz	i2___ftdiv@cntr,f,c
  7678  0013D0  D7E7               	goto	i2l3374
  7679  0013D2  C017  F001         	movff	i2___ftdiv@f3,i2___ftpack@arg
  7680  0013D6  C018  F002         	movff	i2___ftdiv@f3+1,i2___ftpack@arg+1
  7681  0013DA  C019  F003         	movff	i2___ftdiv@f3+2,i2___ftpack@arg+2
  7682  0013DE  C01A  F004         	movff	i2___ftdiv@exp,i2___ftpack@exp
  7683  0013E2  C01B  F005         	movff	i2___ftdiv@sign,i2___ftpack@sign
  7684  0013E6  EC8D  F00B         	call	i2___ftpack	;wreg free
  7685  0013EA  C001  F00D         	movff	?i2___ftpack,?i2___ftdiv
  7686  0013EE  C002  F00E         	movff	?i2___ftpack+1,?i2___ftdiv+1
  7687  0013F2  C003  F00F         	movff	?i2___ftpack+2,?i2___ftdiv+2
  7688  0013F6  0012               	return	
  7689  0013F8                     __end_ofi2___ftdiv:
  7690                           	opt stack 0
  7691                           pclatu	equ	0xFFB
  7692                           pclath	equ	0xFFA
  7693                           tblptru	equ	0xFF8
  7694                           tblptrh	equ	0xFF7
  7695                           tblptrl	equ	0xFF6
  7696                           tablat	equ	0xFF5
  7697                           prodh	equ	0xFF4
  7698                           prodl	equ	0xFF3
  7699                           intcon	equ	0xFF2
  7700                           intcon3	equ	0xFF0
  7701                           postinc0	equ	0xFEE
  7702                           fsr0h	equ	0xFEA
  7703                           fsr0l	equ	0xFE9
  7704                           wreg	equ	0xFE8
  7705                           postdec1	equ	0xFE5
  7706                           fsr1h	equ	0xFE2
  7707                           fsr1l	equ	0xFE1
  7708                           indf2	equ	0xFDF
  7709                           postinc2	equ	0xFDE
  7710                           postdec2	equ	0xFDD
  7711                           fsr2h	equ	0xFDA
  7712                           fsr2l	equ	0xFD9
  7713                           status	equ	0xFD8
  7714                           
  7715 ;; *************** function i2___ftadd *****************
  7716 ;; Defined at:
  7717 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  7718 ;; Parameters:    Size  Location     Type
  7719 ;;  f1              3   42[COMRAM] float 
  7720 ;;  f2              3   45[COMRAM] float 
  7721 ;; Auto vars:     Size  Location     Type
  7722 ;;  __ftadd         1   53[COMRAM] unsigned char 
  7723 ;;  __ftadd         1   52[COMRAM] unsigned char 
  7724 ;;  __ftadd         1   51[COMRAM] unsigned char 
  7725 ;; Return value:  Size  Location     Type
  7726 ;;                  3   42[COMRAM] float 
  7727 ;; Registers used:
  7728 ;;		wreg, status,2, status,0, cstack
  7729 ;; Tracked objects:
  7730 ;;		On entry : 0/0
  7731 ;;		On exit  : 0/0
  7732 ;;		Unchanged: 0/0
  7733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7734 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7735 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7736 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7737 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7738 ;;Total ram usage:       12 bytes
  7739 ;; Hardware stack levels used:    1
  7740 ;; Hardware stack levels required when called:    1
  7741 ;; This function calls:
  7742 ;;		i2___ftpack
  7743 ;; This function is called by:
  7744 ;;		i2_angleToPulse
  7745 ;; This function uses a non-reentrant model
  7746 ;;
  7747                           
  7748                           	psect	text40
  7749  00044E                     __ptext40:
  7750                           	opt stack 0
  7751  00044E                     i2___ftadd:
  7752                           	opt stack 19
  7753                           
  7754                           ;incstack = 0
  7755  00044E  C02D  F031         	movff	i2___ftadd@f1+2,??i2___ftadd
  7756  000452  6A32               	clrf	(??i2___ftadd+1)& (0+255),c
  7757  000454  6A33               	clrf	(??i2___ftadd+2)& (0+255),c
  7758  000456  342C               	rlcf	i2___ftadd@f1+1,w,c
  7759  000458  3631               	rlcf	??i2___ftadd& (0+255),f,c
  7760  00045A  E301               	bnc	u271_41
  7761  00045C  8032               	bsf	(??i2___ftadd+1)& (0+255),0,c
  7762  00045E                     u271_41:
  7763  00045E  5031               	movf	??i2___ftadd,w,c
  7764  000460  6E36               	movwf	i2___ftadd@exp1,c
  7765  000462  C030  F031         	movff	i2___ftadd@f2+2,??i2___ftadd
  7766  000466  6A32               	clrf	(??i2___ftadd+1)& (0+255),c
  7767  000468  6A33               	clrf	(??i2___ftadd+2)& (0+255),c
  7768  00046A  342F               	rlcf	i2___ftadd@f2+1,w,c
  7769  00046C  3631               	rlcf	??i2___ftadd& (0+255),f,c
  7770  00046E  E301               	bnc	u272_41
  7771  000470  8032               	bsf	(??i2___ftadd+1)& (0+255),0,c
  7772  000472                     u272_41:
  7773  000472  5031               	movf	??i2___ftadd,w,c
  7774  000474  6E35               	movwf	i2___ftadd@exp2,c
  7775  000476  5036               	movf	i2___ftadd@exp1,w,c
  7776  000478  B4D8               	btfsc	status,2,c
  7777  00047A  D00B               	goto	i2l872
  7778  00047C  5035               	movf	i2___ftadd@exp2,w,c
  7779  00047E  5C36               	subwf	i2___ftadd@exp1,w,c
  7780  000480  B0D8               	btfsc	status,0,c
  7781  000482  D00E               	goto	i2l3280
  7782  000484  5036               	movf	i2___ftadd@exp1,w,c
  7783  000486  0800               	sublw	0
  7784  000488  2435               	addwf	i2___ftadd@exp2,w,c
  7785  00048A  6E31               	movwf	??i2___ftadd& (0+255),c
  7786  00048C  0E18               	movlw	24
  7787  00048E  6431               	cpfsgt	??i2___ftadd,c
  7788  000490  D007               	goto	i2l3280
  7789  000492                     i2l872:
  7790  000492  C02E  F02B         	movff	i2___ftadd@f2,?i2___ftadd
  7791  000496  C02F  F02C         	movff	i2___ftadd@f2+1,?i2___ftadd+1
  7792  00049A  C030  F02D         	movff	i2___ftadd@f2+2,?i2___ftadd+2
  7793  00049E  0012               	return	
  7794  0004A0                     i2l3280:
  7795  0004A0  5035               	movf	i2___ftadd@exp2,w,c
  7796  0004A2  B4D8               	btfsc	status,2,c
  7797  0004A4  D00B               	goto	i2l876
  7798  0004A6  5036               	movf	i2___ftadd@exp1,w,c
  7799  0004A8  5C35               	subwf	i2___ftadd@exp2,w,c
  7800  0004AA  B0D8               	btfsc	status,0,c
  7801  0004AC  D00E               	goto	i2l3286
  7802  0004AE  5035               	movf	i2___ftadd@exp2,w,c
  7803  0004B0  0800               	sublw	0
  7804  0004B2  2436               	addwf	i2___ftadd@exp1,w,c
  7805  0004B4  6E31               	movwf	??i2___ftadd& (0+255),c
  7806  0004B6  0E18               	movlw	24
  7807  0004B8  6431               	cpfsgt	??i2___ftadd,c
  7808  0004BA  D007               	goto	i2l3286
  7809  0004BC                     i2l876:
  7810  0004BC  C02B  F02B         	movff	i2___ftadd@f1,?i2___ftadd
  7811  0004C0  C02C  F02C         	movff	i2___ftadd@f1+1,?i2___ftadd+1
  7812  0004C4  C02D  F02D         	movff	i2___ftadd@f1+2,?i2___ftadd+2
  7813  0004C8  0012               	return	
  7814  0004CA                     i2l3286:
  7815  0004CA  0E06               	movlw	6
  7816  0004CC  6E34               	movwf	i2___ftadd@sign,c
  7817  0004CE  BE2D               	btfsc	i2___ftadd@f1+2,7,c
  7818  0004D0  8E34               	bsf	i2___ftadd@sign,7,c
  7819  0004D2  BE30               	btfsc	i2___ftadd@f2+2,7,c
  7820  0004D4  8C34               	bsf	i2___ftadd@sign,6,c
  7821  0004D6  8E2C               	bsf	i2___ftadd@f1+1,7,c
  7822  0004D8  0EFF               	movlw	255
  7823  0004DA  162B               	andwf	i2___ftadd@f1,f,c
  7824  0004DC  0EFF               	movlw	255
  7825  0004DE  162C               	andwf	i2___ftadd@f1+1,f,c
  7826  0004E0  0E00               	movlw	0
  7827  0004E2  162D               	andwf	i2___ftadd@f1+2,f,c
  7828  0004E4  8E2F               	bsf	i2___ftadd@f2+1,7,c
  7829  0004E6  0EFF               	movlw	255
  7830  0004E8  162E               	andwf	i2___ftadd@f2,f,c
  7831  0004EA  0EFF               	movlw	255
  7832  0004EC  162F               	andwf	i2___ftadd@f2+1,f,c
  7833  0004EE  0E00               	movlw	0
  7834  0004F0  1630               	andwf	i2___ftadd@f2+2,f,c
  7835  0004F2  5035               	movf	i2___ftadd@exp2,w,c
  7836  0004F4  5C36               	subwf	i2___ftadd@exp1,w,c
  7837  0004F6  B0D8               	btfsc	status,0,c
  7838  0004F8  D01B               	goto	i2l3312
  7839  0004FA                     i2l3302:
  7840  0004FA  90D8               	bcf	status,0,c
  7841  0004FC  362E               	rlcf	i2___ftadd@f2,f,c
  7842  0004FE  362F               	rlcf	i2___ftadd@f2+1,f,c
  7843  000500  3630               	rlcf	i2___ftadd@f2+2,f,c
  7844  000502  0635               	decf	i2___ftadd@exp2,f,c
  7845  000504  5036               	movf	i2___ftadd@exp1,w,c
  7846  000506  1835               	xorwf	i2___ftadd@exp2,w,c
  7847  000508  B4D8               	btfsc	status,2,c
  7848  00050A  D00D               	goto	i2l3310
  7849  00050C  0634               	decf	i2___ftadd@sign,f,c
  7850  00050E  C034  F031         	movff	i2___ftadd@sign,??i2___ftadd
  7851  000512  0E07               	movlw	7
  7852  000514  1631               	andwf	??i2___ftadd,f,c
  7853  000516  B4D8               	btfsc	status,2,c
  7854  000518  D006               	goto	i2l3310
  7855  00051A  D7EF               	goto	i2l3302
  7856  00051C                     i2l3308:
  7857  00051C  90D8               	bcf	status,0,c
  7858  00051E  322D               	rrcf	i2___ftadd@f1+2,f,c
  7859  000520  322C               	rrcf	i2___ftadd@f1+1,f,c
  7860  000522  322B               	rrcf	i2___ftadd@f1,f,c
  7861  000524  2A36               	incf	i2___ftadd@exp1,f,c
  7862  000526                     i2l3310:
  7863  000526  5035               	movf	i2___ftadd@exp2,w,c
  7864  000528  1836               	xorwf	i2___ftadd@exp1,w,c
  7865  00052A  B4D8               	btfsc	status,2,c
  7866  00052C  D01F               	goto	i2l887
  7867  00052E  D7F6               	goto	i2l3308
  7868  000530                     i2l3312:
  7869  000530  5036               	movf	i2___ftadd@exp1,w,c
  7870  000532  5C35               	subwf	i2___ftadd@exp2,w,c
  7871  000534  B0D8               	btfsc	status,0,c
  7872  000536  D01A               	goto	i2l887
  7873  000538                     i2l3314:
  7874  000538  90D8               	bcf	status,0,c
  7875  00053A  362B               	rlcf	i2___ftadd@f1,f,c
  7876  00053C  362C               	rlcf	i2___ftadd@f1+1,f,c
  7877  00053E  362D               	rlcf	i2___ftadd@f1+2,f,c
  7878  000540  0636               	decf	i2___ftadd@exp1,f,c
  7879  000542  5036               	movf	i2___ftadd@exp1,w,c
  7880  000544  1835               	xorwf	i2___ftadd@exp2,w,c
  7881  000546  B4D8               	btfsc	status,2,c
  7882  000548  D00D               	goto	i2l3322
  7883  00054A  0634               	decf	i2___ftadd@sign,f,c
  7884  00054C  C034  F031         	movff	i2___ftadd@sign,??i2___ftadd
  7885  000550  0E07               	movlw	7
  7886  000552  1631               	andwf	??i2___ftadd,f,c
  7887  000554  B4D8               	btfsc	status,2,c
  7888  000556  D006               	goto	i2l3322
  7889  000558  D7EF               	goto	i2l3314
  7890  00055A                     i2l3320:
  7891  00055A  90D8               	bcf	status,0,c
  7892  00055C  3230               	rrcf	i2___ftadd@f2+2,f,c
  7893  00055E  322F               	rrcf	i2___ftadd@f2+1,f,c
  7894  000560  322E               	rrcf	i2___ftadd@f2,f,c
  7895  000562  2A35               	incf	i2___ftadd@exp2,f,c
  7896  000564                     i2l3322:
  7897  000564  5035               	movf	i2___ftadd@exp2,w,c
  7898  000566  1836               	xorwf	i2___ftadd@exp1,w,c
  7899  000568  A4D8               	btfss	status,2,c
  7900  00056A  D7F7               	goto	i2l3320
  7901  00056C                     i2l887:
  7902  00056C  AE34               	btfss	i2___ftadd@sign,7,c
  7903  00056E  D00C               	goto	i2l896
  7904  000570  0EFF               	movlw	255
  7905  000572  1A2B               	xorwf	i2___ftadd@f1,f,c
  7906  000574  0EFF               	movlw	255
  7907  000576  1A2C               	xorwf	i2___ftadd@f1+1,f,c
  7908  000578  0EFF               	movlw	255
  7909  00057A  1A2D               	xorwf	i2___ftadd@f1+2,f,c
  7910  00057C  0E01               	movlw	1
  7911  00057E  262B               	addwf	i2___ftadd@f1,f,c
  7912  000580  0E00               	movlw	0
  7913  000582  222C               	addwfc	i2___ftadd@f1+1,f,c
  7914  000584  0E00               	movlw	0
  7915  000586  222D               	addwfc	i2___ftadd@f1+2,f,c
  7916  000588                     i2l896:
  7917  000588  AC34               	btfss	i2___ftadd@sign,6,c
  7918  00058A  D00C               	goto	i2l3328
  7919  00058C  0EFF               	movlw	255
  7920  00058E  1A2E               	xorwf	i2___ftadd@f2,f,c
  7921  000590  0EFF               	movlw	255
  7922  000592  1A2F               	xorwf	i2___ftadd@f2+1,f,c
  7923  000594  0EFF               	movlw	255
  7924  000596  1A30               	xorwf	i2___ftadd@f2+2,f,c
  7925  000598  0E01               	movlw	1
  7926  00059A  262E               	addwf	i2___ftadd@f2,f,c
  7927  00059C  0E00               	movlw	0
  7928  00059E  222F               	addwfc	i2___ftadd@f2+1,f,c
  7929  0005A0  0E00               	movlw	0
  7930  0005A2  2230               	addwfc	i2___ftadd@f2+2,f,c
  7931  0005A4                     i2l3328:
  7932  0005A4  0E00               	movlw	0
  7933  0005A6  6E34               	movwf	i2___ftadd@sign,c
  7934  0005A8  502B               	movf	i2___ftadd@f1,w,c
  7935  0005AA  262E               	addwf	i2___ftadd@f2,f,c
  7936  0005AC  502C               	movf	i2___ftadd@f1+1,w,c
  7937  0005AE  222F               	addwfc	i2___ftadd@f2+1,f,c
  7938  0005B0  502D               	movf	i2___ftadd@f1+2,w,c
  7939  0005B2  2230               	addwfc	i2___ftadd@f2+2,f,c
  7940  0005B4  AE30               	btfss	i2___ftadd@f2+2,7,c
  7941  0005B6  D00E               	goto	i2l3338
  7942  0005B8  0EFF               	movlw	255
  7943  0005BA  1A2E               	xorwf	i2___ftadd@f2,f,c
  7944  0005BC  0EFF               	movlw	255
  7945  0005BE  1A2F               	xorwf	i2___ftadd@f2+1,f,c
  7946  0005C0  0EFF               	movlw	255
  7947  0005C2  1A30               	xorwf	i2___ftadd@f2+2,f,c
  7948  0005C4  0E01               	movlw	1
  7949  0005C6  262E               	addwf	i2___ftadd@f2,f,c
  7950  0005C8  0E00               	movlw	0
  7951  0005CA  222F               	addwfc	i2___ftadd@f2+1,f,c
  7952  0005CC  0E00               	movlw	0
  7953  0005CE  2230               	addwfc	i2___ftadd@f2+2,f,c
  7954  0005D0  0E01               	movlw	1
  7955  0005D2  6E34               	movwf	i2___ftadd@sign,c
  7956  0005D4                     i2l3338:
  7957  0005D4  C02E  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
  7958  0005D8  C02F  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
  7959  0005DC  C030  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
  7960  0005E0  C036  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
  7961  0005E4  C034  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
  7962  0005E8  EC8D  F00B         	call	i2___ftpack	;wreg free
  7963  0005EC  C001  F02B         	movff	?i2___ftpack,?i2___ftadd
  7964  0005F0  C002  F02C         	movff	?i2___ftpack+1,?i2___ftadd+1
  7965  0005F4  C003  F02D         	movff	?i2___ftpack+2,?i2___ftadd+2
  7966  0005F8  0012               	return	
  7967  0005FA                     __end_ofi2___ftadd:
  7968                           	opt stack 0
  7969                           pclatu	equ	0xFFB
  7970                           pclath	equ	0xFFA
  7971                           tblptru	equ	0xFF8
  7972                           tblptrh	equ	0xFF7
  7973                           tblptrl	equ	0xFF6
  7974                           tablat	equ	0xFF5
  7975                           prodh	equ	0xFF4
  7976                           prodl	equ	0xFF3
  7977                           intcon	equ	0xFF2
  7978                           intcon3	equ	0xFF0
  7979                           postinc0	equ	0xFEE
  7980                           fsr0h	equ	0xFEA
  7981                           fsr0l	equ	0xFE9
  7982                           wreg	equ	0xFE8
  7983                           postdec1	equ	0xFE5
  7984                           fsr1h	equ	0xFE2
  7985                           fsr1l	equ	0xFE1
  7986                           indf2	equ	0xFDF
  7987                           postinc2	equ	0xFDE
  7988                           postdec2	equ	0xFDD
  7989                           fsr2h	equ	0xFDA
  7990                           fsr2l	equ	0xFD9
  7991                           status	equ	0xFD8
  7992                           
  7993 ;; *************** function i2___awtoft *****************
  7994 ;; Defined at:
  7995 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  7996 ;; Parameters:    Size  Location     Type
  7997 ;;  c               2    8[COMRAM] int 
  7998 ;; Auto vars:     Size  Location     Type
  7999 ;;  __awtoft        1   11[COMRAM] unsigned char 
  8000 ;; Return value:  Size  Location     Type
  8001 ;;                  3    8[COMRAM] float 
  8002 ;; Registers used:
  8003 ;;		wreg, status,2, status,0, cstack
  8004 ;; Tracked objects:
  8005 ;;		On entry : 0/0
  8006 ;;		On exit  : 0/0
  8007 ;;		Unchanged: 0/0
  8008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8009 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8010 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8012 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8013 ;;Total ram usage:        4 bytes
  8014 ;; Hardware stack levels used:    1
  8015 ;; Hardware stack levels required when called:    1
  8016 ;; This function calls:
  8017 ;;		i2___ftpack
  8018 ;; This function is called by:
  8019 ;;		i2_angleToPulse
  8020 ;; This function uses a non-reentrant model
  8021 ;;
  8022                           
  8023                           	psect	text41
  8024  001E6E                     __ptext41:
  8025                           	opt stack 0
  8026  001E6E                     i2___awtoft:
  8027                           	opt stack 19
  8028                           
  8029                           ;incstack = 0
  8030  001E6E  0E00               	movlw	0
  8031  001E70  6E0C               	movwf	i2___awtoft@sign,c
  8032  001E72  AE0A               	btfss	i2___awtoft@c+1,7,c
  8033  001E74  D006               	goto	i2l3268
  8034  001E76  6C09               	negf	i2___awtoft@c,c
  8035  001E78  1E0A               	comf	i2___awtoft@c+1,f,c
  8036  001E7A  B0D8               	btfsc	status,0,c
  8037  001E7C  2A0A               	incf	i2___awtoft@c+1,f,c
  8038  001E7E  0E01               	movlw	1
  8039  001E80  6E0C               	movwf	i2___awtoft@sign,c
  8040  001E82                     i2l3268:
  8041  001E82  C009  F001         	movff	i2___awtoft@c,i2___ftpack@arg
  8042  001E86  C00A  F002         	movff	i2___awtoft@c+1,i2___ftpack@arg+1
  8043  001E8A  6A03               	clrf	i2___ftpack@arg+2,c
  8044  001E8C  0E8E               	movlw	142
  8045  001E8E  6E04               	movwf	i2___ftpack@exp,c
  8046  001E90  C00C  F005         	movff	i2___awtoft@sign,i2___ftpack@sign
  8047  001E94  EC8D  F00B         	call	i2___ftpack	;wreg free
  8048  001E98  C001  F009         	movff	?i2___ftpack,?i2___awtoft
  8049  001E9C  C002  F00A         	movff	?i2___ftpack+1,?i2___awtoft+1
  8050  001EA0  C003  F00B         	movff	?i2___ftpack+2,?i2___awtoft+2
  8051  001EA4  0012               	return	
  8052  001EA6                     __end_ofi2___awtoft:
  8053                           	opt stack 0
  8054                           pclatu	equ	0xFFB
  8055                           pclath	equ	0xFFA
  8056                           tblptru	equ	0xFF8
  8057                           tblptrh	equ	0xFF7
  8058                           tblptrl	equ	0xFF6
  8059                           tablat	equ	0xFF5
  8060                           prodh	equ	0xFF4
  8061                           prodl	equ	0xFF3
  8062                           intcon	equ	0xFF2
  8063                           intcon3	equ	0xFF0
  8064                           postinc0	equ	0xFEE
  8065                           fsr0h	equ	0xFEA
  8066                           fsr0l	equ	0xFE9
  8067                           wreg	equ	0xFE8
  8068                           postdec1	equ	0xFE5
  8069                           fsr1h	equ	0xFE2
  8070                           fsr1l	equ	0xFE1
  8071                           indf2	equ	0xFDF
  8072                           postinc2	equ	0xFDE
  8073                           postdec2	equ	0xFDD
  8074                           fsr2h	equ	0xFDA
  8075                           fsr2l	equ	0xFD9
  8076                           status	equ	0xFD8
  8077                           
  8078 ;; *************** function i2___altoft *****************
  8079 ;; Defined at:
  8080 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  8081 ;; Parameters:    Size  Location     Type
  8082 ;;  c               4    8[COMRAM] long 
  8083 ;; Auto vars:     Size  Location     Type
  8084 ;;  __altoft        1   17[COMRAM] unsigned char 
  8085 ;;  __altoft        1   16[COMRAM] unsigned char 
  8086 ;; Return value:  Size  Location     Type
  8087 ;;                  3    8[COMRAM] float 
  8088 ;; Registers used:
  8089 ;;		wreg, status,2, status,0, cstack
  8090 ;; Tracked objects:
  8091 ;;		On entry : 0/0
  8092 ;;		On exit  : 0/0
  8093 ;;		Unchanged: 0/0
  8094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8095 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8096 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8097 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8098 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8099 ;;Total ram usage:       10 bytes
  8100 ;; Hardware stack levels used:    1
  8101 ;; Hardware stack levels required when called:    1
  8102 ;; This function calls:
  8103 ;;		i2___ftpack
  8104 ;; This function is called by:
  8105 ;;		i2_angleToPulse
  8106 ;; This function uses a non-reentrant model
  8107 ;;
  8108                           
  8109                           	psect	text42
  8110  001B92                     __ptext42:
  8111                           	opt stack 0
  8112  001B92                     i2___altoft:
  8113                           	opt stack 19
  8114                           
  8115                           ;incstack = 0
  8116  001B92  0E00               	movlw	0
  8117  001B94  6E12               	movwf	i2___altoft@sign,c
  8118  001B96  0E8E               	movlw	142
  8119  001B98  6E11               	movwf	i2___altoft@exp,c
  8120  001B9A  AE0C               	btfss	i2___altoft@c+3,7,c
  8121  001B9C  D011               	goto	i2l3254
  8122  001B9E  1E0C               	comf	i2___altoft@c+3,f,c
  8123  001BA0  1E0B               	comf	i2___altoft@c+2,f,c
  8124  001BA2  1E0A               	comf	i2___altoft@c+1,f,c
  8125  001BA4  6C09               	negf	i2___altoft@c,c
  8126  001BA6  0E00               	movlw	0
  8127  001BA8  220A               	addwfc	i2___altoft@c+1,f,c
  8128  001BAA  220B               	addwfc	i2___altoft@c+2,f,c
  8129  001BAC  220C               	addwfc	i2___altoft@c+3,f,c
  8130  001BAE  0E01               	movlw	1
  8131  001BB0  6E12               	movwf	i2___altoft@sign,c
  8132  001BB2  D006               	goto	i2l3254
  8133  001BB4                     i2l3252:
  8134  001BB4  90D8               	bcf	status,0,c
  8135  001BB6  320C               	rrcf	i2___altoft@c+3,f,c
  8136  001BB8  320B               	rrcf	i2___altoft@c+2,f,c
  8137  001BBA  320A               	rrcf	i2___altoft@c+1,f,c
  8138  001BBC  3209               	rrcf	i2___altoft@c,f,c
  8139  001BBE  2A11               	incf	i2___altoft@exp,f,c
  8140  001BC0                     i2l3254:
  8141  001BC0  0E00               	movlw	0
  8142  001BC2  1409               	andwf	i2___altoft@c,w,c
  8143  001BC4  6E0D               	movwf	??i2___altoft& (0+255),c
  8144  001BC6  0E00               	movlw	0
  8145  001BC8  140A               	andwf	i2___altoft@c+1,w,c
  8146  001BCA  6E0E               	movwf	(??i2___altoft+1)& (0+255),c
  8147  001BCC  0E00               	movlw	0
  8148  001BCE  140B               	andwf	i2___altoft@c+2,w,c
  8149  001BD0  6E0F               	movwf	(??i2___altoft+2)& (0+255),c
  8150  001BD2  0EFF               	movlw	255
  8151  001BD4  140C               	andwf	i2___altoft@c+3,w,c
  8152  001BD6  6E10               	movwf	(??i2___altoft+3)& (0+255),c
  8153  001BD8  500D               	movf	??i2___altoft,w,c
  8154  001BDA  100E               	iorwf	??i2___altoft+1,w,c
  8155  001BDC  100F               	iorwf	??i2___altoft+2,w,c
  8156  001BDE  1010               	iorwf	??i2___altoft+3,w,c
  8157  001BE0  A4D8               	btfss	status,2,c
  8158  001BE2  D7E8               	goto	i2l3252
  8159  001BE4  C009  F001         	movff	i2___altoft@c,i2___ftpack@arg
  8160  001BE8  C00A  F002         	movff	i2___altoft@c+1,i2___ftpack@arg+1
  8161  001BEC  C00B  F003         	movff	i2___altoft@c+2,i2___ftpack@arg+2
  8162  001BF0  C011  F004         	movff	i2___altoft@exp,i2___ftpack@exp
  8163  001BF4  C012  F005         	movff	i2___altoft@sign,i2___ftpack@sign
  8164  001BF8  EC8D  F00B         	call	i2___ftpack	;wreg free
  8165  001BFC  C001  F009         	movff	?i2___ftpack,?i2___altoft
  8166  001C00  C002  F00A         	movff	?i2___ftpack+1,?i2___altoft+1
  8167  001C04  C003  F00B         	movff	?i2___ftpack+2,?i2___altoft+2
  8168  001C08  0012               	return	
  8169  001C0A                     __end_ofi2___altoft:
  8170                           	opt stack 0
  8171                           pclatu	equ	0xFFB
  8172                           pclath	equ	0xFFA
  8173                           tblptru	equ	0xFF8
  8174                           tblptrh	equ	0xFF7
  8175                           tblptrl	equ	0xFF6
  8176                           tablat	equ	0xFF5
  8177                           prodh	equ	0xFF4
  8178                           prodl	equ	0xFF3
  8179                           intcon	equ	0xFF2
  8180                           intcon3	equ	0xFF0
  8181                           postinc0	equ	0xFEE
  8182                           fsr0h	equ	0xFEA
  8183                           fsr0l	equ	0xFE9
  8184                           wreg	equ	0xFE8
  8185                           postdec1	equ	0xFE5
  8186                           fsr1h	equ	0xFE2
  8187                           fsr1l	equ	0xFE1
  8188                           indf2	equ	0xFDF
  8189                           postinc2	equ	0xFDE
  8190                           postdec2	equ	0xFDD
  8191                           fsr2h	equ	0xFDA
  8192                           fsr2l	equ	0xFD9
  8193                           status	equ	0xFD8
  8194                           
  8195 ;; *************** function i2___ftpack *****************
  8196 ;; Defined at:
  8197 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  8198 ;; Parameters:    Size  Location     Type
  8199 ;;  arg             3    0[COMRAM] unsigned um
  8200 ;;  exp             1    3[COMRAM] unsigned char 
  8201 ;;  sign            1    4[COMRAM] unsigned char 
  8202 ;; Auto vars:     Size  Location     Type
  8203 ;;		None
  8204 ;; Return value:  Size  Location     Type
  8205 ;;                  3    0[COMRAM] float 
  8206 ;; Registers used:
  8207 ;;		wreg, status,2, status,0
  8208 ;; Tracked objects:
  8209 ;;		On entry : 0/0
  8210 ;;		On exit  : 0/0
  8211 ;;		Unchanged: 0/0
  8212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8213 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8215 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8216 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8217 ;;Total ram usage:        8 bytes
  8218 ;; Hardware stack levels used:    1
  8219 ;; This function calls:
  8220 ;;		Nothing
  8221 ;; This function is called by:
  8222 ;;		i2___altoft
  8223 ;;		i2___awtoft
  8224 ;;		i2___ftadd
  8225 ;;		i2___ftdiv
  8226 ;;		i2___ftmul
  8227 ;; This function uses a non-reentrant model
  8228 ;;
  8229                           
  8230                           	psect	text43
  8231  00171A                     __ptext43:
  8232                           	opt stack 0
  8233  00171A                     i2___ftpack:
  8234                           	opt stack 19
  8235                           
  8236                           ;incstack = 0
  8237  00171A  5004               	movf	i2___ftpack@exp,w,c
  8238  00171C  B4D8               	btfsc	status,2,c
  8239  00171E  D005               	goto	i2l3116
  8240  001720  5001               	movf	i2___ftpack@arg,w,c
  8241  001722  1002               	iorwf	i2___ftpack@arg+1,w,c
  8242  001724  1003               	iorwf	i2___ftpack@arg+2,w,c
  8243  001726  A4D8               	btfss	status,2,c
  8244  001728  D00C               	goto	i2l3122
  8245  00172A                     i2l3116:
  8246  00172A  0E00               	movlw	0
  8247  00172C  6E01               	movwf	?i2___ftpack,c
  8248  00172E  0E00               	movlw	0
  8249  001730  6E02               	movwf	?i2___ftpack+1,c
  8250  001732  0E00               	movlw	0
  8251  001734  6E03               	movwf	?i2___ftpack+2,c
  8252  001736  0012               	return	
  8253  001738                     i2l3120:
  8254  001738  2A04               	incf	i2___ftpack@exp,f,c
  8255  00173A  90D8               	bcf	status,0,c
  8256  00173C  3203               	rrcf	i2___ftpack@arg+2,f,c
  8257  00173E  3202               	rrcf	i2___ftpack@arg+1,f,c
  8258  001740  3201               	rrcf	i2___ftpack@arg,f,c
  8259  001742                     i2l3122:
  8260  001742  0E00               	movlw	0
  8261  001744  1401               	andwf	i2___ftpack@arg,w,c
  8262  001746  6E06               	movwf	??i2___ftpack& (0+255),c
  8263  001748  0E00               	movlw	0
  8264  00174A  1402               	andwf	i2___ftpack@arg+1,w,c
  8265  00174C  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
  8266  00174E  0EFE               	movlw	254
  8267  001750  1403               	andwf	i2___ftpack@arg+2,w,c
  8268  001752  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
  8269  001754  5006               	movf	??i2___ftpack,w,c
  8270  001756  1007               	iorwf	??i2___ftpack+1,w,c
  8271  001758  1008               	iorwf	??i2___ftpack+2,w,c
  8272  00175A  B4D8               	btfsc	status,2,c
  8273  00175C  D00C               	goto	i2l3128
  8274  00175E  D7EC               	goto	i2l3120
  8275  001760                     i2l3124:
  8276  001760  2A04               	incf	i2___ftpack@exp,f,c
  8277  001762  0E01               	movlw	1
  8278  001764  2601               	addwf	i2___ftpack@arg,f,c
  8279  001766  0E00               	movlw	0
  8280  001768  2202               	addwfc	i2___ftpack@arg+1,f,c
  8281  00176A  0E00               	movlw	0
  8282  00176C  2203               	addwfc	i2___ftpack@arg+2,f,c
  8283  00176E  90D8               	bcf	status,0,c
  8284  001770  3203               	rrcf	i2___ftpack@arg+2,f,c
  8285  001772  3202               	rrcf	i2___ftpack@arg+1,f,c
  8286  001774  3201               	rrcf	i2___ftpack@arg,f,c
  8287  001776                     i2l3128:
  8288  001776  0E00               	movlw	0
  8289  001778  1401               	andwf	i2___ftpack@arg,w,c
  8290  00177A  6E06               	movwf	??i2___ftpack& (0+255),c
  8291  00177C  0E00               	movlw	0
  8292  00177E  1402               	andwf	i2___ftpack@arg+1,w,c
  8293  001780  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
  8294  001782  0EFF               	movlw	255
  8295  001784  1403               	andwf	i2___ftpack@arg+2,w,c
  8296  001786  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
  8297  001788  5006               	movf	??i2___ftpack,w,c
  8298  00178A  1007               	iorwf	??i2___ftpack+1,w,c
  8299  00178C  1008               	iorwf	??i2___ftpack+2,w,c
  8300  00178E  B4D8               	btfsc	status,2,c
  8301  001790  D006               	goto	i2l3132
  8302  001792  D7E6               	goto	i2l3124
  8303  001794                     i2l3130:
  8304  001794  0604               	decf	i2___ftpack@exp,f,c
  8305  001796  90D8               	bcf	status,0,c
  8306  001798  3601               	rlcf	i2___ftpack@arg,f,c
  8307  00179A  3602               	rlcf	i2___ftpack@arg+1,f,c
  8308  00179C  3603               	rlcf	i2___ftpack@arg+2,f,c
  8309  00179E                     i2l3132:
  8310  00179E  BE02               	btfsc	i2___ftpack@arg+1,7,c
  8311  0017A0  D003               	goto	i2l849
  8312  0017A2  0E02               	movlw	2
  8313  0017A4  6004               	cpfslt	i2___ftpack@exp,c
  8314  0017A6  D7F6               	goto	i2l3130
  8315  0017A8                     i2l849:
  8316  0017A8  A004               	btfss	i2___ftpack@exp,0,c
  8317  0017AA  9E02               	bcf	i2___ftpack@arg+1,7,c
  8318  0017AC  90D8               	bcf	status,0,c
  8319  0017AE  3204               	rrcf	i2___ftpack@exp,f,c
  8320  0017B0  5004               	movf	i2___ftpack@exp,w,c
  8321  0017B2  1203               	iorwf	i2___ftpack@arg+2,f,c
  8322  0017B4  5005               	movf	i2___ftpack@sign,w,c
  8323  0017B6  A4D8               	btfss	status,2,c
  8324  0017B8  8E03               	bsf	i2___ftpack@arg+2,7,c
  8325  0017BA  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
  8326  0017BE  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
  8327  0017C2  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
  8328  0017C6  0012               	return	
  8329  0017C8                     __end_ofi2___ftpack:
  8330                           	opt stack 0
  8331                           pclatu	equ	0xFFB
  8332                           pclath	equ	0xFFA
  8333                           tblptru	equ	0xFF8
  8334                           tblptrh	equ	0xFF7
  8335                           tblptrl	equ	0xFF6
  8336                           tablat	equ	0xFF5
  8337                           prodh	equ	0xFF4
  8338                           prodl	equ	0xFF3
  8339                           intcon	equ	0xFF2
  8340                           intcon3	equ	0xFF0
  8341                           postinc0	equ	0xFEE
  8342                           fsr0h	equ	0xFEA
  8343                           fsr0l	equ	0xFE9
  8344                           wreg	equ	0xFE8
  8345                           postdec1	equ	0xFE5
  8346                           fsr1h	equ	0xFE2
  8347                           fsr1l	equ	0xFE1
  8348                           indf2	equ	0xFDF
  8349                           postinc2	equ	0xFDE
  8350                           postdec2	equ	0xFDD
  8351                           fsr2h	equ	0xFDA
  8352                           fsr2l	equ	0xFD9
  8353                           status	equ	0xFD8
  8354                           
  8355 ;; *************** function _servoInterruptService *****************
  8356 ;; Defined at:
  8357 ;;		line 47 in file "servo.c"
  8358 ;; Parameters:    Size  Location     Type
  8359 ;;		None
  8360 ;; Auto vars:     Size  Location     Type
  8361 ;;  i               2   19[COMRAM] int 
  8362 ;;  flags           8   11[COMRAM] int [4]
  8363 ;; Return value:  Size  Location     Type
  8364 ;;                  1    wreg      void 
  8365 ;; Registers used:
  8366 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8367 ;; Tracked objects:
  8368 ;;		On entry : 0/0
  8369 ;;		On exit  : 0/0
  8370 ;;		Unchanged: 0/0
  8371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8373 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8374 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8375 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8376 ;;Total ram usage:       12 bytes
  8377 ;; Hardware stack levels used:    1
  8378 ;; Hardware stack levels required when called:    1
  8379 ;; This function calls:
  8380 ;;		_digitalRead
  8381 ;;		i2_digitalWrite
  8382 ;;		i2_startTimer
  8383 ;; This function is called by:
  8384 ;;		_service
  8385 ;; This function uses a non-reentrant model
  8386 ;;
  8387                           
  8388                           	psect	text44
  8389  00027A                     __ptext44:
  8390                           	opt stack 0
  8391  00027A                     _servoInterruptService:
  8392                           	opt stack 21
  8393                           
  8394                           ;servo.c: 49: int flags[4];
  8395                           ;servo.c: 50: flags[0] = TMR0IF;
  8396                           
  8397                           ;incstack = 0
  8398  00027A  A4F2               	btfss	intcon,2,c	;volatile
  8399  00027C  D002               	goto	i2u347_40
  8400  00027E  0E01               	movlw	1
  8401  000280  D001               	goto	i2u348_40
  8402  000282                     i2u347_40:
  8403  000282  0E00               	movlw	0
  8404  000284                     i2u348_40:
  8405  000284  6E0C               	movwf	servoInterruptService@flags,c
  8406  000286  6A0D               	clrf	servoInterruptService@flags+1,c
  8407                           
  8408                           ;servo.c: 51: flags[1] = TMR1IF;
  8409  000288  A09E               	btfss	3998,0,c	;volatile
  8410  00028A  D002               	goto	i2u349_40
  8411  00028C  0E01               	movlw	1
  8412  00028E  D001               	goto	i2u350_40
  8413  000290                     i2u349_40:
  8414  000290  0E00               	movlw	0
  8415  000292                     i2u350_40:
  8416  000292  6E0E               	movwf	servoInterruptService@flags+2,c
  8417  000294  6A0F               	clrf	servoInterruptService@flags+3,c
  8418                           
  8419                           ;servo.c: 52: flags[2] = TMR2IF;
  8420  000296  A29E               	btfss	3998,1,c	;volatile
  8421  000298  D002               	goto	i2u351_40
  8422  00029A  0E01               	movlw	1
  8423  00029C  D001               	goto	i2u352_40
  8424  00029E                     i2u351_40:
  8425  00029E  0E00               	movlw	0
  8426  0002A0                     i2u352_40:
  8427  0002A0  6E10               	movwf	servoInterruptService@flags+4,c
  8428  0002A2  6A11               	clrf	servoInterruptService@flags+5,c
  8429                           
  8430                           ;servo.c: 53: flags[3] = TMR3IF;
  8431  0002A4  A2A1               	btfss	4001,1,c	;volatile
  8432  0002A6  D002               	goto	i2u353_40
  8433  0002A8  0E01               	movlw	1
  8434  0002AA  D001               	goto	i2u354_40
  8435  0002AC                     i2u353_40:
  8436  0002AC  0E00               	movlw	0
  8437  0002AE                     i2u354_40:
  8438  0002AE  6E12               	movwf	servoInterruptService@flags+6,c
  8439  0002B0  6A13               	clrf	servoInterruptService@flags+7,c
  8440                           
  8441                           ;servo.c: 55: for(int i = 0; i < 4; i++){
  8442  0002B2  0E00               	movlw	0
  8443  0002B4  6E15               	movwf	servoInterruptService@i+1,c
  8444  0002B6  0E00               	movlw	0
  8445  0002B8  6E14               	movwf	servoInterruptService@i,c
  8446  0002BA  BE15               	btfsc	servoInterruptService@i+1,7,c
  8447  0002BC  D008               	goto	i2l3794
  8448  0002BE  5015               	movf	servoInterruptService@i+1,w,c
  8449  0002C0  E105               	bnz	i2u355_40
  8450  0002C2  0E04               	movlw	4
  8451  0002C4  5C14               	subwf	servoInterruptService@i,w,c
  8452  0002C6  B0D8               	btfsc	status,0,c
  8453  0002C8  0012               	return	
  8454  0002CA  D001               	goto	i2l3794
  8455  0002CC                     i2u355_40:
  8456  0002CC  0012               	return	
  8457  0002CE                     i2l3794:
  8458                           
  8459                           ;servo.c: 56: if(flags[i]){
  8460  0002CE  90D8               	bcf	status,0,c
  8461  0002D0  3414               	rlcf	servoInterruptService@i,w,c
  8462  0002D2  6ED9               	movwf	fsr2l,c
  8463  0002D4  3415               	rlcf	servoInterruptService@i+1,w,c
  8464  0002D6  6EDA               	movwf	fsr2h,c
  8465  0002D8  0E0C               	movlw	low servoInterruptService@flags
  8466  0002DA  26D9               	addwf	fsr2l,f,c
  8467  0002DC  0E00               	movlw	high servoInterruptService@flags
  8468  0002DE  22DA               	addwfc	fsr2h,f,c
  8469  0002E0  50DE               	movf	postinc2,w,c
  8470  0002E2  10DE               	iorwf	postinc2,w,c
  8471  0002E4  B4D8               	btfsc	status,2,c
  8472  0002E6  D0AB               	goto	i2l3808
  8473                           
  8474                           ;servo.c: 58: if(digitalRead(port[i],pin[i])){
  8475  0002E8  90D8               	bcf	status,0,c
  8476  0002EA  3414               	rlcf	servoInterruptService@i,w,c
  8477  0002EC  6ED9               	movwf	fsr2l,c
  8478  0002EE  3415               	rlcf	servoInterruptService@i+1,w,c
  8479  0002F0  6EDA               	movwf	fsr2h,c
  8480  0002F2  0E18               	movlw	low _port
  8481  0002F4  26D9               	addwf	fsr2l,f,c
  8482  0002F6  0E01               	movlw	high _port
  8483  0002F8  22DA               	addwfc	fsr2h,f,c
  8484  0002FA  CFDE F001          	movff	postinc2,digitalRead@port
  8485  0002FE  CFDD F002          	movff	postdec2,digitalRead@port+1
  8486  000302  90D8               	bcf	status,0,c
  8487  000304  3414               	rlcf	servoInterruptService@i,w,c
  8488  000306  6ED9               	movwf	fsr2l,c
  8489  000308  3415               	rlcf	servoInterruptService@i+1,w,c
  8490  00030A  6EDA               	movwf	fsr2h,c
  8491  00030C  0E10               	movlw	low _pin
  8492  00030E  26D9               	addwf	fsr2l,f,c
  8493  000310  0E01               	movlw	high _pin
  8494  000312  22DA               	addwfc	fsr2h,f,c
  8495  000314  CFDE F003          	movff	postinc2,digitalRead@pin
  8496  000318  CFDD F004          	movff	postdec2,digitalRead@pin+1
  8497  00031C  EC34  F00B         	call	_digitalRead	;wreg free
  8498  000320  5001               	movf	?_digitalRead,w,c
  8499  000322  1002               	iorwf	?_digitalRead+1,w,c
  8500  000324  B4D8               	btfsc	status,2,c
  8501  000326  D02F               	goto	i2l3802
  8502                           
  8503                           ;servo.c: 59: startTimer(i,15535);
  8504  000328  C014  F001         	movff	servoInterruptService@i,i2startTimer@timer
  8505  00032C  C015  F002         	movff	servoInterruptService@i+1,i2startTimer@timer+1
  8506  000330  0EAF               	movlw	175
  8507  000332  6E03               	movwf	i2startTimer@val,c
  8508  000334  0E3C               	movlw	60
  8509  000336  6E04               	movwf	i2startTimer@val+1,c
  8510  000338  0E00               	movlw	0
  8511  00033A  6E05               	movwf	i2startTimer@val+2,c
  8512  00033C  0E00               	movlw	0
  8513  00033E  6E06               	movwf	i2startTimer@val+3,c
  8514  000340  EC61  F00E         	call	i2_startTimer	;wreg free
  8515                           
  8516                           ;servo.c: 60: digitalWrite(port[i],pin[i],0);
  8517  000344  90D8               	bcf	status,0,c
  8518  000346  3414               	rlcf	servoInterruptService@i,w,c
  8519  000348  6ED9               	movwf	fsr2l,c
  8520  00034A  3415               	rlcf	servoInterruptService@i+1,w,c
  8521  00034C  6EDA               	movwf	fsr2h,c
  8522  00034E  0E18               	movlw	low _port
  8523  000350  26D9               	addwf	fsr2l,f,c
  8524  000352  0E01               	movlw	high _port
  8525  000354  22DA               	addwfc	fsr2h,f,c
  8526  000356  CFDE F001          	movff	postinc2,i2digitalWrite@port
  8527  00035A  CFDD F002          	movff	postdec2,i2digitalWrite@port+1
  8528  00035E  90D8               	bcf	status,0,c
  8529  000360  3414               	rlcf	servoInterruptService@i,w,c
  8530  000362  6ED9               	movwf	fsr2l,c
  8531  000364  3415               	rlcf	servoInterruptService@i+1,w,c
  8532  000366  6EDA               	movwf	fsr2h,c
  8533  000368  0E10               	movlw	low _pin
  8534  00036A  26D9               	addwf	fsr2l,f,c
  8535  00036C  0E01               	movlw	high _pin
  8536  00036E  22DA               	addwfc	fsr2h,f,c
  8537  000370  CFDE F003          	movff	postinc2,i2digitalWrite@pin
  8538  000374  CFDD F004          	movff	postdec2,i2digitalWrite@pin+1
  8539  000378  0E00               	movlw	0
  8540  00037A  6E06               	movwf	i2digitalWrite@val+1,c
  8541  00037C  0E00               	movlw	0
  8542  00037E  6E05               	movwf	i2digitalWrite@val,c
  8543  000380  ECE4  F00B         	call	i2_digitalWrite	;wreg free
  8544                           
  8545                           ;servo.c: 61: }
  8546  000384  D047               	goto	i2l3806
  8547  000386                     i2l3802:
  8548                           
  8549                           ;servo.c: 62: else{
  8550                           ;servo.c: 63: startTimer(i, pulse[i]);
  8551  000386  C014  F001         	movff	servoInterruptService@i,i2startTimer@timer
  8552  00038A  C015  F002         	movff	servoInterruptService@i+1,i2startTimer@timer+1
  8553  00038E  0E00               	movlw	low _pulse
  8554  000390  6E0A               	movwf	??_servoInterruptService& (0+255),c
  8555  000392  0E01               	movlw	high _pulse
  8556  000394  6E0B               	movwf	(??_servoInterruptService+1)& (0+255),c
  8557  000396  90D8               	bcf	status,0,c
  8558  000398  3414               	rlcf	servoInterruptService@i,w,c
  8559  00039A  6ED9               	movwf	fsr2l,c
  8560  00039C  3415               	rlcf	servoInterruptService@i+1,w,c
  8561  00039E  6EDA               	movwf	fsr2h,c
  8562  0003A0  90D8               	bcf	status,0,c
  8563  0003A2  36D9               	rlcf	fsr2l,f,c
  8564  0003A4  36DA               	rlcf	fsr2h,f,c
  8565  0003A6  500A               	movf	??_servoInterruptService,w,c
  8566  0003A8  26D9               	addwf	fsr2l,f,c
  8567  0003AA  500B               	movf	??_servoInterruptService+1,w,c
  8568  0003AC  22DA               	addwfc	fsr2h,f,c
  8569  0003AE  CFDE F003          	movff	postinc2,i2startTimer@val
  8570  0003B2  CFDE F004          	movff	postinc2,i2startTimer@val+1
  8571  0003B6  CFDE F005          	movff	postinc2,i2startTimer@val+2
  8572  0003BA  CFDE F006          	movff	postinc2,i2startTimer@val+3
  8573  0003BE  EC61  F00E         	call	i2_startTimer	;wreg free
  8574                           
  8575                           ;servo.c: 64: digitalWrite(port[i],pin[i],1);
  8576  0003C2  90D8               	bcf	status,0,c
  8577  0003C4  3414               	rlcf	servoInterruptService@i,w,c
  8578  0003C6  6ED9               	movwf	fsr2l,c
  8579  0003C8  3415               	rlcf	servoInterruptService@i+1,w,c
  8580  0003CA  6EDA               	movwf	fsr2h,c
  8581  0003CC  0E18               	movlw	low _port
  8582  0003CE  26D9               	addwf	fsr2l,f,c
  8583  0003D0  0E01               	movlw	high _port
  8584  0003D2  22DA               	addwfc	fsr2h,f,c
  8585  0003D4  CFDE F001          	movff	postinc2,i2digitalWrite@port
  8586  0003D8  CFDD F002          	movff	postdec2,i2digitalWrite@port+1
  8587  0003DC  90D8               	bcf	status,0,c
  8588  0003DE  3414               	rlcf	servoInterruptService@i,w,c
  8589  0003E0  6ED9               	movwf	fsr2l,c
  8590  0003E2  3415               	rlcf	servoInterruptService@i+1,w,c
  8591  0003E4  6EDA               	movwf	fsr2h,c
  8592  0003E6  0E10               	movlw	low _pin
  8593  0003E8  26D9               	addwf	fsr2l,f,c
  8594  0003EA  0E01               	movlw	high _pin
  8595  0003EC  22DA               	addwfc	fsr2h,f,c
  8596  0003EE  CFDE F003          	movff	postinc2,i2digitalWrite@pin
  8597  0003F2  CFDD F004          	movff	postdec2,i2digitalWrite@pin+1
  8598  0003F6  0E00               	movlw	0
  8599  0003F8  6E06               	movwf	i2digitalWrite@val+1,c
  8600  0003FA  0E01               	movlw	1
  8601  0003FC  6E05               	movwf	i2digitalWrite@val,c
  8602  0003FE  ECE4  F00B         	call	i2_digitalWrite	;wreg free
  8603                           
  8604                           ;servo.c: 65: }
  8605                           ;servo.c: 68: switch(i){
  8606  000402  D008               	goto	i2l3806
  8607  000404                     i2l544:
  8608  000404  94F2               	bcf	intcon,2,c	;volatile
  8609  000406  D01B               	goto	i2l3808
  8610  000408                     i2l546:
  8611  000408  909E               	bcf	3998,0,c	;volatile
  8612  00040A  D019               	goto	i2l3808
  8613  00040C                     i2l547:
  8614  00040C  929E               	bcf	3998,1,c	;volatile
  8615  00040E  D017               	goto	i2l3808
  8616  000410                     i2l548:
  8617  000410  92A1               	bcf	4001,1,c	;volatile
  8618                           
  8619                           ;servo.c: 73: }
  8620  000412  D015               	goto	i2l3808
  8621  000414                     i2l3806:
  8622  000414  C014  F00A         	movff	servoInterruptService@i,??_servoInterruptService
  8623  000418  C015  F00B         	movff	servoInterruptService@i+1,??_servoInterruptService+1
  8624                           
  8625                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8626                           ; Switch size 1, requested type "space"
  8627                           ; Number of cases is 1, Range of values is 0 to 0
  8628                           ; switch strategies available:
  8629                           ; Name         Instructions Cycles
  8630                           ; simple_byte            4     3 (average)
  8631                           ;	Chosen strategy is simple_byte
  8632  00041C  500B               	movf	??_servoInterruptService+1,w,c
  8633  00041E  0A00               	xorlw	0	; case 0
  8634  000420  A4D8               	btfss	status,2,c
  8635  000422  D00D               	goto	i2l3808
  8636                           
  8637                           ; Switch size 1, requested type "space"
  8638                           ; Number of cases is 4, Range of values is 0 to 3
  8639                           ; switch strategies available:
  8640                           ; Name         Instructions Cycles
  8641                           ; simple_byte           13     7 (average)
  8642                           ;	Chosen strategy is simple_byte
  8643  000424  500A               	movf	??_servoInterruptService,w,c
  8644  000426  0A00               	xorlw	0	; case 0
  8645  000428  B4D8               	btfsc	status,2,c
  8646  00042A  D7EC               	goto	i2l544
  8647  00042C  0A01               	xorlw	1	; case 1
  8648  00042E  B4D8               	btfsc	status,2,c
  8649  000430  D7EB               	goto	i2l546
  8650  000432  0A03               	xorlw	3	; case 2
  8651  000434  B4D8               	btfsc	status,2,c
  8652  000436  D7EA               	goto	i2l547
  8653  000438  0A01               	xorlw	1	; case 3
  8654  00043A  B4D8               	btfsc	status,2,c
  8655  00043C  D7E9               	goto	i2l548
  8656  00043E                     i2l3808:
  8657  00043E  4A14               	infsnz	servoInterruptService@i,f,c
  8658  000440  2A15               	incf	servoInterruptService@i+1,f,c
  8659  000442  BE15               	btfsc	servoInterruptService@i+1,7,c
  8660  000444  D744               	goto	i2l3794
  8661  000446  5015               	movf	servoInterruptService@i+1,w,c
  8662  000448  E101               	bnz	i2l549
  8663  00044A  D73B               	goto	L1
  8664  00044C                     i2l549:
  8665  00044C  0012               	return		;funcret
  8666  00044E                     __end_of_servoInterruptService:
  8667                           	opt stack 0
  8668                           pclatu	equ	0xFFB
  8669                           pclath	equ	0xFFA
  8670                           tblptru	equ	0xFF8
  8671                           tblptrh	equ	0xFF7
  8672                           tblptrl	equ	0xFF6
  8673                           tablat	equ	0xFF5
  8674                           prodh	equ	0xFF4
  8675                           prodl	equ	0xFF3
  8676                           intcon	equ	0xFF2
  8677                           intcon3	equ	0xFF0
  8678                           postinc0	equ	0xFEE
  8679                           fsr0h	equ	0xFEA
  8680                           fsr0l	equ	0xFE9
  8681                           wreg	equ	0xFE8
  8682                           postdec1	equ	0xFE5
  8683                           fsr1h	equ	0xFE2
  8684                           fsr1l	equ	0xFE1
  8685                           indf2	equ	0xFDF
  8686                           postinc2	equ	0xFDE
  8687                           postdec2	equ	0xFDD
  8688                           fsr2h	equ	0xFDA
  8689                           fsr2l	equ	0xFD9
  8690                           status	equ	0xFD8
  8691                           
  8692 ;; *************** function i2_startTimer *****************
  8693 ;; Defined at:
  8694 ;;		line 75 in file "timer.c"
  8695 ;; Parameters:    Size  Location     Type
  8696 ;;  timer           2    0[COMRAM] int 
  8697 ;;  val             4    2[COMRAM] long 
  8698 ;; Auto vars:     Size  Location     Type
  8699 ;;		None
  8700 ;; Return value:  Size  Location     Type
  8701 ;;                  1    wreg      void 
  8702 ;; Registers used:
  8703 ;;		wreg, status,2, status,0
  8704 ;; Tracked objects:
  8705 ;;		On entry : 0/0
  8706 ;;		On exit  : 0/0
  8707 ;;		Unchanged: 0/0
  8708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8709 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8711 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8712 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8713 ;;Total ram usage:        8 bytes
  8714 ;; Hardware stack levels used:    1
  8715 ;; This function calls:
  8716 ;;		Nothing
  8717 ;; This function is called by:
  8718 ;;		_servoInterruptService
  8719 ;; This function uses a non-reentrant model
  8720 ;;
  8721                           
  8722                           	psect	text45
  8723  001CC2                     __ptext45:
  8724                           	opt stack 0
  8725  001CC2                     i2_startTimer:
  8726                           	opt stack 21
  8727                           
  8728                           ;timer.c: 76: switch(timer){
  8729                           
  8730                           ;incstack = 0
  8731  001CC2  D012               	goto	i2l3652
  8732  001CC4                     i2l404:
  8733                           
  8734                           ;timer.c: 78: TMR0H = val>>8;
  8735  001CC4  C004  FFD7         	movff	i2startTimer@val+1,4055	;volatile
  8736                           
  8737                           ;timer.c: 79: TMR0L = val;
  8738  001CC8  C003  FFD6         	movff	i2startTimer@val,4054	;volatile
  8739                           
  8740                           ;timer.c: 80: T0CON |= 1<<7;
  8741  001CCC  8ED5               	bsf	4053,7,c	;volatile
  8742                           
  8743                           ;timer.c: 81: break;
  8744  001CCE  0012               	return	
  8745  001CD0                     i2l406:
  8746                           
  8747                           ;timer.c: 83: TMR1H = val>>8;
  8748  001CD0  C004  FFCF         	movff	i2startTimer@val+1,4047	;volatile
  8749                           
  8750                           ;timer.c: 84: TMR1L = val;
  8751  001CD4  C003  FFCE         	movff	i2startTimer@val,4046	;volatile
  8752                           
  8753                           ;timer.c: 85: T1CON |= 1<<0;
  8754  001CD8  80CD               	bsf	4045,0,c	;volatile
  8755                           
  8756                           ;timer.c: 86: break;
  8757  001CDA  0012               	return	
  8758  001CDC                     i2l407:
  8759                           
  8760                           ;timer.c: 88: TMR3H = val>>8;
  8761  001CDC  C004  FFB3         	movff	i2startTimer@val+1,4019	;volatile
  8762                           
  8763                           ;timer.c: 89: TMR3L = val;
  8764  001CE0  C003  FFB2         	movff	i2startTimer@val,4018	;volatile
  8765                           
  8766                           ;timer.c: 90: T3CON |= 1<<0;
  8767  001CE4  80B1               	bsf	4017,0,c	;volatile
  8768                           
  8769                           ;timer.c: 91: }
  8770  001CE6  0012               	return	
  8771  001CE8                     i2l3652:
  8772  001CE8  C001  F007         	movff	i2startTimer@timer,??i2_startTimer
  8773  001CEC  C002  F008         	movff	i2startTimer@timer+1,??i2_startTimer+1
  8774                           
  8775                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8776                           ; Switch size 1, requested type "space"
  8777                           ; Number of cases is 1, Range of values is 0 to 0
  8778                           ; switch strategies available:
  8779                           ; Name         Instructions Cycles
  8780                           ; simple_byte            4     3 (average)
  8781                           ;	Chosen strategy is simple_byte
  8782  001CF0  5008               	movf	??i2_startTimer+1,w,c
  8783  001CF2  0A00               	xorlw	0	; case 0
  8784  001CF4  A4D8               	btfss	status,2,c
  8785  001CF6  0012               	return	
  8786                           
  8787                           ; Switch size 1, requested type "space"
  8788                           ; Number of cases is 3, Range of values is 0 to 3
  8789                           ; switch strategies available:
  8790                           ; Name         Instructions Cycles
  8791                           ; simple_byte           10     6 (average)
  8792                           ;	Chosen strategy is simple_byte
  8793  001CF8  5007               	movf	??i2_startTimer,w,c
  8794  001CFA  0A00               	xorlw	0	; case 0
  8795  001CFC  B4D8               	btfsc	status,2,c
  8796  001CFE  D7E2               	goto	i2l404
  8797  001D00  0A01               	xorlw	1	; case 1
  8798  001D02  B4D8               	btfsc	status,2,c
  8799  001D04  D7E5               	goto	i2l406
  8800  001D06  0A02               	xorlw	2	; case 3
  8801  001D08  A4D8               	btfss	status,2,c
  8802  001D0A  0012               	return	
  8803  001D0C  D7E7               	goto	i2l407
  8804  001D0E                     __end_ofi2_startTimer:
  8805                           	opt stack 0
  8806                           pclatu	equ	0xFFB
  8807                           pclath	equ	0xFFA
  8808                           tblptru	equ	0xFF8
  8809                           tblptrh	equ	0xFF7
  8810                           tblptrl	equ	0xFF6
  8811                           tablat	equ	0xFF5
  8812                           prodh	equ	0xFF4
  8813                           prodl	equ	0xFF3
  8814                           intcon	equ	0xFF2
  8815                           intcon3	equ	0xFF0
  8816                           postinc0	equ	0xFEE
  8817                           fsr0h	equ	0xFEA
  8818                           fsr0l	equ	0xFE9
  8819                           wreg	equ	0xFE8
  8820                           postdec1	equ	0xFE5
  8821                           fsr1h	equ	0xFE2
  8822                           fsr1l	equ	0xFE1
  8823                           indf2	equ	0xFDF
  8824                           postinc2	equ	0xFDE
  8825                           postdec2	equ	0xFDD
  8826                           fsr2h	equ	0xFDA
  8827                           fsr2l	equ	0xFD9
  8828                           status	equ	0xFD8
  8829                           
  8830 ;; *************** function i2_digitalWrite *****************
  8831 ;; Defined at:
  8832 ;;		line 53 in file "iopin.c"
  8833 ;; Parameters:    Size  Location     Type
  8834 ;;  port            2    0[COMRAM] int 
  8835 ;;  pin             2    2[COMRAM] int 
  8836 ;;  val             2    4[COMRAM] int 
  8837 ;; Auto vars:     Size  Location     Type
  8838 ;;		None
  8839 ;; Return value:  Size  Location     Type
  8840 ;;                  1    wreg      void 
  8841 ;; Registers used:
  8842 ;;		wreg, status,2, status,0
  8843 ;; Tracked objects:
  8844 ;;		On entry : 0/0
  8845 ;;		On exit  : 0/0
  8846 ;;		Unchanged: 0/0
  8847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8848 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8850 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8851 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8852 ;;Total ram usage:        9 bytes
  8853 ;; Hardware stack levels used:    1
  8854 ;; This function calls:
  8855 ;;		Nothing
  8856 ;; This function is called by:
  8857 ;;		_servoInterruptService
  8858 ;; This function uses a non-reentrant model
  8859 ;;
  8860                           
  8861                           	psect	text46
  8862  0017C8                     __ptext46:
  8863                           	opt stack 0
  8864  0017C8                     i2_digitalWrite:
  8865                           	opt stack 21
  8866                           
  8867                           ;iopin.c: 54: pin = 1 << pin;
  8868                           
  8869                           ;incstack = 0
  8870  0017C8  C003  F007         	movff	i2digitalWrite@pin,??i2_digitalWrite
  8871  0017CC  0E01               	movlw	1
  8872  0017CE  6E08               	movwf	(??i2_digitalWrite+1)& (0+255),c
  8873  0017D0  0E00               	movlw	0
  8874  0017D2  6E09               	movwf	(??i2_digitalWrite+2)& (0+255),c
  8875  0017D4  2A07               	incf	??i2_digitalWrite,f,c
  8876  0017D6  D003               	goto	i2u321_44
  8877  0017D8                     i2u321_45:
  8878  0017D8  90D8               	bcf	status,0,c
  8879  0017DA  3608               	rlcf	??i2_digitalWrite+1,f,c
  8880  0017DC  3609               	rlcf	??i2_digitalWrite+2,f,c
  8881  0017DE                     i2u321_44:
  8882  0017DE  2E07               	decfsz	??i2_digitalWrite,f,c
  8883  0017E0  D7FB               	goto	i2u321_45
  8884  0017E2  C008  F003         	movff	??i2_digitalWrite+1,i2digitalWrite@pin
  8885  0017E6  C009  F004         	movff	??i2_digitalWrite+2,i2digitalWrite@pin+1
  8886                           
  8887                           ;iopin.c: 55: if(val == 0){
  8888  0017EA  5005               	movf	i2digitalWrite@val,w,c
  8889  0017EC  1006               	iorwf	i2digitalWrite@val+1,w,c
  8890  0017EE  A4D8               	btfss	status,2,c
  8891  0017F0  D02B               	goto	i2l3638
  8892                           
  8893                           ;iopin.c: 56: pin ^= 0xff;
  8894  0017F2  0EFF               	movlw	255
  8895  0017F4  1A03               	xorwf	i2digitalWrite@pin,f,c
  8896                           
  8897                           ;iopin.c: 57: }
  8898                           ;iopin.c: 59: switch(port){
  8899  0017F6  D028               	goto	i2l3638
  8900  0017F8                     i2l3614:
  8901  0017F8  0405               	decf	i2digitalWrite@val,w,c
  8902  0017FA  1006               	iorwf	i2digitalWrite@val+1,w,c
  8903  0017FC  A4D8               	btfss	status,2,c
  8904  0017FE  D003               	goto	i2l3618
  8905  001800  5003               	movf	i2digitalWrite@pin,w,c
  8906  001802  1289               	iorwf	3977,f,c	;volatile
  8907  001804  0012               	return	
  8908  001806                     i2l3618:
  8909                           
  8910                           ;iopin.c: 61: else LATA &= pin;
  8911  001806  5003               	movf	i2digitalWrite@pin,w,c
  8912  001808  1689               	andwf	3977,f,c	;volatile
  8913                           
  8914                           ;iopin.c: 62: break;
  8915  00180A  0012               	return	
  8916  00180C                     i2l3620:
  8917  00180C  0405               	decf	i2digitalWrite@val,w,c
  8918  00180E  1006               	iorwf	i2digitalWrite@val+1,w,c
  8919  001810  A4D8               	btfss	status,2,c
  8920  001812  D003               	goto	i2l3624
  8921  001814  5003               	movf	i2digitalWrite@pin,w,c
  8922  001816  128A               	iorwf	3978,f,c	;volatile
  8923  001818  0012               	return	
  8924  00181A                     i2l3624:
  8925                           
  8926                           ;iopin.c: 64: else LATB &= pin;
  8927  00181A  5003               	movf	i2digitalWrite@pin,w,c
  8928  00181C  168A               	andwf	3978,f,c	;volatile
  8929                           
  8930                           ;iopin.c: 65: break;
  8931  00181E  0012               	return	
  8932  001820                     i2l3626:
  8933  001820  0405               	decf	i2digitalWrite@val,w,c
  8934  001822  1006               	iorwf	i2digitalWrite@val+1,w,c
  8935  001824  A4D8               	btfss	status,2,c
  8936  001826  D003               	goto	i2l3630
  8937  001828  5003               	movf	i2digitalWrite@pin,w,c
  8938  00182A  128B               	iorwf	3979,f,c	;volatile
  8939  00182C  0012               	return	
  8940  00182E                     i2l3630:
  8941                           
  8942                           ;iopin.c: 67: else LATC &= pin;
  8943  00182E  5003               	movf	i2digitalWrite@pin,w,c
  8944  001830  168B               	andwf	3979,f,c	;volatile
  8945                           
  8946                           ;iopin.c: 68: break;
  8947  001832  0012               	return	
  8948  001834                     i2l3632:
  8949  001834  0405               	decf	i2digitalWrite@val,w,c
  8950  001836  1006               	iorwf	i2digitalWrite@val+1,w,c
  8951  001838  A4D8               	btfss	status,2,c
  8952  00183A  D003               	goto	i2l3636
  8953  00183C  5003               	movf	i2digitalWrite@pin,w,c
  8954  00183E  128C               	iorwf	3980,f,c	;volatile
  8955  001840  0012               	return	
  8956  001842                     i2l3636:
  8957                           
  8958                           ;iopin.c: 70: else LATD &= pin;
  8959  001842  5003               	movf	i2digitalWrite@pin,w,c
  8960  001844  168C               	andwf	3980,f,c	;volatile
  8961                           
  8962                           ;iopin.c: 71: }
  8963  001846  0012               	return	
  8964  001848                     i2l3638:
  8965  001848  C001  F007         	movff	i2digitalWrite@port,??i2_digitalWrite
  8966  00184C  C002  F008         	movff	i2digitalWrite@port+1,??i2_digitalWrite+1
  8967                           
  8968                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8969                           ; Switch size 1, requested type "space"
  8970                           ; Number of cases is 1, Range of values is 0 to 0
  8971                           ; switch strategies available:
  8972                           ; Name         Instructions Cycles
  8973                           ; simple_byte            4     3 (average)
  8974                           ;	Chosen strategy is simple_byte
  8975  001850  5008               	movf	??i2_digitalWrite+1,w,c
  8976  001852  0A00               	xorlw	0	; case 0
  8977  001854  A4D8               	btfss	status,2,c
  8978  001856  0012               	return	
  8979                           
  8980                           ; Switch size 1, requested type "space"
  8981                           ; Number of cases is 4, Range of values is 0 to 3
  8982                           ; switch strategies available:
  8983                           ; Name         Instructions Cycles
  8984                           ; simple_byte           13     7 (average)
  8985                           ;	Chosen strategy is simple_byte
  8986  001858  5007               	movf	??i2_digitalWrite,w,c
  8987  00185A  0A00               	xorlw	0	; case 0
  8988  00185C  B4D8               	btfsc	status,2,c
  8989  00185E  D7CC               	goto	i2l3614
  8990  001860  0A01               	xorlw	1	; case 1
  8991  001862  B4D8               	btfsc	status,2,c
  8992  001864  D7D3               	goto	i2l3620
  8993  001866  0A03               	xorlw	3	; case 2
  8994  001868  B4D8               	btfsc	status,2,c
  8995  00186A  D7DA               	goto	i2l3626
  8996  00186C  0A01               	xorlw	1	; case 3
  8997  00186E  A4D8               	btfss	status,2,c
  8998  001870  0012               	return	
  8999  001872  D7E0               	goto	i2l3632
  9000  001874                     __end_ofi2_digitalWrite:
  9001                           	opt stack 0
  9002                           pclatu	equ	0xFFB
  9003                           pclath	equ	0xFFA
  9004                           tblptru	equ	0xFF8
  9005                           tblptrh	equ	0xFF7
  9006                           tblptrl	equ	0xFF6
  9007                           tablat	equ	0xFF5
  9008                           prodh	equ	0xFF4
  9009                           prodl	equ	0xFF3
  9010                           intcon	equ	0xFF2
  9011                           intcon3	equ	0xFF0
  9012                           postinc0	equ	0xFEE
  9013                           fsr0h	equ	0xFEA
  9014                           fsr0l	equ	0xFE9
  9015                           wreg	equ	0xFE8
  9016                           postdec1	equ	0xFE5
  9017                           fsr1h	equ	0xFE2
  9018                           fsr1l	equ	0xFE1
  9019                           indf2	equ	0xFDF
  9020                           postinc2	equ	0xFDE
  9021                           postdec2	equ	0xFDD
  9022                           fsr2h	equ	0xFDA
  9023                           fsr2l	equ	0xFD9
  9024                           status	equ	0xFD8
  9025                           
  9026 ;; *************** function _digitalRead *****************
  9027 ;; Defined at:
  9028 ;;		line 43 in file "iopin.c"
  9029 ;; Parameters:    Size  Location     Type
  9030 ;;  port            2    0[COMRAM] int 
  9031 ;;  pin             2    2[COMRAM] int 
  9032 ;; Auto vars:     Size  Location     Type
  9033 ;;		None
  9034 ;; Return value:  Size  Location     Type
  9035 ;;                  2    0[COMRAM] int 
  9036 ;; Registers used:
  9037 ;;		wreg, status,2, status,0
  9038 ;; Tracked objects:
  9039 ;;		On entry : 0/0
  9040 ;;		On exit  : 0/0
  9041 ;;		Unchanged: 0/0
  9042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9043 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9045 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9046 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9047 ;;Total ram usage:        6 bytes
  9048 ;; Hardware stack levels used:    1
  9049 ;; This function calls:
  9050 ;;		Nothing
  9051 ;; This function is called by:
  9052 ;;		_servoInterruptService
  9053 ;; This function uses a non-reentrant model
  9054 ;;
  9055                           
  9056                           	psect	text47
  9057  001668                     __ptext47:
  9058                           	opt stack 0
  9059  001668                     _digitalRead:
  9060                           	opt stack 21
  9061                           
  9062                           ;iopin.c: 44: switch(port){
  9063                           
  9064                           ;incstack = 0
  9065  001668  D040               	goto	i2l3604
  9066  00166A                     i2l3586:
  9067  00166A  C003  F005         	movff	digitalRead@pin,??_digitalRead
  9068  00166E  CF80 F006          	movff	3968,??_digitalRead+1	;volatile
  9069  001672  2A05               	incf	??_digitalRead,f,c
  9070  001674  D002               	goto	i2u317_44
  9071  001676                     i2u317_45:
  9072  001676  90D8               	bcf	status,0,c
  9073  001678  3206               	rrcf	??_digitalRead+1,f,c
  9074  00167A                     i2u317_44:
  9075  00167A  2E05               	decfsz	??_digitalRead,f,c
  9076  00167C  D7FC               	goto	i2u317_45
  9077  00167E  0E01               	movlw	1
  9078  001680  1606               	andwf	??_digitalRead+1,f,c
  9079  001682  5006               	movf	??_digitalRead+1,w,c
  9080  001684  6E01               	movwf	?_digitalRead,c
  9081  001686  6A02               	clrf	?_digitalRead+1,c
  9082  001688  0012               	return	
  9083  00168A                     i2l3590:
  9084  00168A  C003  F005         	movff	digitalRead@pin,??_digitalRead
  9085  00168E  CF81 F006          	movff	3969,??_digitalRead+1	;volatile
  9086  001692  2A05               	incf	??_digitalRead,f,c
  9087  001694  D002               	goto	i2u318_44
  9088  001696                     i2u318_45:
  9089  001696  90D8               	bcf	status,0,c
  9090  001698  3206               	rrcf	??_digitalRead+1,f,c
  9091  00169A                     i2u318_44:
  9092  00169A  2E05               	decfsz	??_digitalRead,f,c
  9093  00169C  D7FC               	goto	i2u318_45
  9094  00169E  0E01               	movlw	1
  9095  0016A0  1606               	andwf	??_digitalRead+1,f,c
  9096  0016A2  5006               	movf	??_digitalRead+1,w,c
  9097  0016A4  6E01               	movwf	?_digitalRead,c
  9098  0016A6  6A02               	clrf	?_digitalRead+1,c
  9099  0016A8  0012               	return	
  9100  0016AA                     i2l3594:
  9101  0016AA  C003  F005         	movff	digitalRead@pin,??_digitalRead
  9102  0016AE  CF82 F006          	movff	3970,??_digitalRead+1	;volatile
  9103  0016B2  2A05               	incf	??_digitalRead,f,c
  9104  0016B4  D002               	goto	i2u319_44
  9105  0016B6                     i2u319_45:
  9106  0016B6  90D8               	bcf	status,0,c
  9107  0016B8  3206               	rrcf	??_digitalRead+1,f,c
  9108  0016BA                     i2u319_44:
  9109  0016BA  2E05               	decfsz	??_digitalRead,f,c
  9110  0016BC  D7FC               	goto	i2u319_45
  9111  0016BE  0E01               	movlw	1
  9112  0016C0  1606               	andwf	??_digitalRead+1,f,c
  9113  0016C2  5006               	movf	??_digitalRead+1,w,c
  9114  0016C4  6E01               	movwf	?_digitalRead,c
  9115  0016C6  6A02               	clrf	?_digitalRead+1,c
  9116  0016C8  0012               	return	
  9117  0016CA                     i2l3598:
  9118  0016CA  C003  F005         	movff	digitalRead@pin,??_digitalRead
  9119  0016CE  CF83 F006          	movff	3971,??_digitalRead+1	;volatile
  9120  0016D2  2A05               	incf	??_digitalRead,f,c
  9121  0016D4  D002               	goto	i2u320_44
  9122  0016D6                     i2u320_45:
  9123  0016D6  90D8               	bcf	status,0,c
  9124  0016D8  3206               	rrcf	??_digitalRead+1,f,c
  9125  0016DA                     i2u320_44:
  9126  0016DA  2E05               	decfsz	??_digitalRead,f,c
  9127  0016DC  D7FC               	goto	i2u320_45
  9128  0016DE  0E01               	movlw	1
  9129  0016E0  1606               	andwf	??_digitalRead+1,f,c
  9130  0016E2  5006               	movf	??_digitalRead+1,w,c
  9131  0016E4  6E01               	movwf	?_digitalRead,c
  9132  0016E6  6A02               	clrf	?_digitalRead+1,c
  9133  0016E8  0012               	return	
  9134  0016EA                     i2l3604:
  9135  0016EA  C001  F005         	movff	digitalRead@port,??_digitalRead
  9136  0016EE  C002  F006         	movff	digitalRead@port+1,??_digitalRead+1
  9137                           
  9138                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9139                           ; Switch size 1, requested type "space"
  9140                           ; Number of cases is 1, Range of values is 0 to 0
  9141                           ; switch strategies available:
  9142                           ; Name         Instructions Cycles
  9143                           ; simple_byte            4     3 (average)
  9144                           ;	Chosen strategy is simple_byte
  9145  0016F2  5006               	movf	??_digitalRead+1,w,c
  9146  0016F4  0A00               	xorlw	0	; case 0
  9147  0016F6  A4D8               	btfss	status,2,c
  9148  0016F8  D00D               	goto	i2l299
  9149                           
  9150                           ; Switch size 1, requested type "space"
  9151                           ; Number of cases is 4, Range of values is 0 to 3
  9152                           ; switch strategies available:
  9153                           ; Name         Instructions Cycles
  9154                           ; simple_byte           13     7 (average)
  9155                           ;	Chosen strategy is simple_byte
  9156  0016FA  5005               	movf	??_digitalRead,w,c
  9157  0016FC  0A00               	xorlw	0	; case 0
  9158  0016FE  B4D8               	btfsc	status,2,c
  9159  001700  D7B4               	goto	i2l3586
  9160  001702  0A01               	xorlw	1	; case 1
  9161  001704  B4D8               	btfsc	status,2,c
  9162  001706  D7C1               	goto	i2l3590
  9163  001708  0A03               	xorlw	3	; case 2
  9164  00170A  B4D8               	btfsc	status,2,c
  9165  00170C  D7CE               	goto	i2l3594
  9166  00170E  0A01               	xorlw	1	; case 3
  9167  001710  B4D8               	btfsc	status,2,c
  9168  001712  D7DB               	goto	i2l3598
  9169  001714                     i2l299:
  9170                           
  9171                           ;iopin.c: 50: return -1;
  9172  001714  6801               	setf	?_digitalRead,c
  9173  001716  6802               	setf	?_digitalRead+1,c
  9174  001718  0012               	return		;funcret
  9175  00171A                     __end_of_digitalRead:
  9176                           	opt stack 0
  9177                           pclatu	equ	0xFFB
  9178                           pclath	equ	0xFFA
  9179                           tblptru	equ	0xFF8
  9180                           tblptrh	equ	0xFF7
  9181                           tblptrl	equ	0xFF6
  9182                           tablat	equ	0xFF5
  9183                           prodh	equ	0xFF4
  9184                           prodl	equ	0xFF3
  9185                           intcon	equ	0xFF2
  9186                           intcon3	equ	0xFF0
  9187                           postinc0	equ	0xFEE
  9188                           fsr0h	equ	0xFEA
  9189                           fsr0l	equ	0xFE9
  9190                           wreg	equ	0xFE8
  9191                           postdec1	equ	0xFE5
  9192                           fsr1h	equ	0xFE2
  9193                           fsr1l	equ	0xFE1
  9194                           indf2	equ	0xFDF
  9195                           postinc2	equ	0xFDE
  9196                           postdec2	equ	0xFDD
  9197                           fsr2h	equ	0xFDA
  9198                           fsr2l	equ	0xFD9
  9199                           status	equ	0xFD8
  9200                           pclatu	equ	0xFFB
  9201                           pclath	equ	0xFFA
  9202                           tblptru	equ	0xFF8
  9203                           tblptrh	equ	0xFF7
  9204                           tblptrl	equ	0xFF6
  9205                           tablat	equ	0xFF5
  9206                           prodh	equ	0xFF4
  9207                           prodl	equ	0xFF3
  9208                           intcon	equ	0xFF2
  9209                           intcon3	equ	0xFF0
  9210                           postinc0	equ	0xFEE
  9211                           fsr0h	equ	0xFEA
  9212                           fsr0l	equ	0xFE9
  9213                           wreg	equ	0xFE8
  9214                           postdec1	equ	0xFE5
  9215                           fsr1h	equ	0xFE2
  9216                           fsr1l	equ	0xFE1
  9217                           indf2	equ	0xFDF
  9218                           postinc2	equ	0xFDE
  9219                           postdec2	equ	0xFDD
  9220                           fsr2h	equ	0xFDA
  9221                           fsr2l	equ	0xFD9
  9222                           status	equ	0xFD8
  9223                           
  9224                           	psect	rparam
  9225  0000                     pclatu	equ	0xFFB
  9226                           pclath	equ	0xFFA
  9227                           tblptru	equ	0xFF8
  9228                           tblptrh	equ	0xFF7
  9229                           tblptrl	equ	0xFF6
  9230                           tablat	equ	0xFF5
  9231                           prodh	equ	0xFF4
  9232                           prodl	equ	0xFF3
  9233                           intcon	equ	0xFF2
  9234                           intcon3	equ	0xFF0
  9235                           postinc0	equ	0xFEE
  9236                           fsr0h	equ	0xFEA
  9237                           fsr0l	equ	0xFE9
  9238                           wreg	equ	0xFE8
  9239                           postdec1	equ	0xFE5
  9240                           fsr1h	equ	0xFE2
  9241                           fsr1l	equ	0xFE1
  9242                           indf2	equ	0xFDF
  9243                           postinc2	equ	0xFDE
  9244                           postdec2	equ	0xFDD
  9245                           fsr2h	equ	0xFDA
  9246                           fsr2l	equ	0xFD9
  9247                           status	equ	0xFD8
  9248                           
  9249                           	psect	temp
  9250  00007E                     btemp:
  9251                           	opt stack 0
  9252  00007E                     	ds	1
  9253  0000                     int$flags	set	btemp
  9254                           pclatu	equ	0xFFB
  9255                           pclath	equ	0xFFA
  9256                           tblptru	equ	0xFF8
  9257                           tblptrh	equ	0xFF7
  9258                           tblptrl	equ	0xFF6
  9259                           tablat	equ	0xFF5
  9260                           prodh	equ	0xFF4
  9261                           prodl	equ	0xFF3
  9262                           intcon	equ	0xFF2
  9263                           intcon3	equ	0xFF0
  9264                           postinc0	equ	0xFEE
  9265                           fsr0h	equ	0xFEA
  9266                           fsr0l	equ	0xFE9
  9267                           wreg	equ	0xFE8
  9268                           postdec1	equ	0xFE5
  9269                           fsr1h	equ	0xFE2
  9270                           fsr1l	equ	0xFE1
  9271                           indf2	equ	0xFDF
  9272                           postinc2	equ	0xFDE
  9273                           postdec2	equ	0xFDD
  9274                           fsr2h	equ	0xFDA
  9275                           fsr2l	equ	0xFD9
  9276                           status	equ	0xFD8


Data Sizes:
    Strings     341
    Constant    32
    Data        36
    BSS         34
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    117     125
    BANK0           128    110     128
    BANK1           256      0      44
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_21(CODE[17]), STR_20(CODE[18]), STR_19(CODE[17]), STR_18(CODE[18]), 
		 -> STR_17(CODE[17]), STR_16(CODE[19]), STR_15(CODE[17]), STR_14(CODE[18]), 
		 -> STR_13(CODE[17]), STR_12(CODE[18]), STR_11(CODE[17]), STR_10(CODE[18]), 
		 -> STR_9(CODE[9]), STR_8(CODE[8]), STR_7(CODE[24]), STR_6(CODE[15]), 
		 -> STR_5(CODE[17]), STR_4(CODE[14]), STR_3(CODE[7]), STR_2(CODE[11]), 
		 -> STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 

    pause@message	PTR unsigned char  size(2) Largest target is 24
		 -> STR_7(CODE[24]), STR_6(CODE[15]), STR_5(CODE[17]), STR_4(CODE[14]), 
		 -> STR_3(CODE[7]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _service in COMRAM

    _service->i2_setAngle
    i2_setAngle->i2_angleToPulse
    i2_angleToPulse->i2___fttol
    i2___fttol->i2___ftadd
    i2___ftmul->i2___ftdiv
    i2___ftdiv->i2___awtoft
    i2___ftadd->i2___ftmul
    i2___awtoft->i2___ftpack
    i2___altoft->i2___ftpack
    _servoInterruptService->i2_digitalWrite

Critical Paths under _main in BANK0

    _main->_initServo
    _sortBattery->_initServo
    _pause->_printf
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    ___fttol->___ftadd
    ___ftmul->___ftdiv
    ___ftdiv->___awtoft
    ___ftadd->___ftmul
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _showInterface->_runMenu
    _runTime->_printf
    _runStats->_printf
    _runSelect->_printf
    _runMenu->_printf
    _mainMenu->_printf
    _dateTime->_printf
    _printf->___lwdiv
    _lcdNewline->_lcdInst
    _lcdClear->_lcdInst
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   70320
                            _initLCD
                          _initServo
                           _lcdClear
                           _pinSetup
                             _printf
                      _showInterface
                        _sortBattery
 ---------------------------------------------------------------------------------
 (1) _sortBattery                                          0     0      0   37475
                       _digitalWrite
                          _initServo
                           _lcdClear
                              _pause
                             _printf
                           _setAngle
                          _stopServo
 ---------------------------------------------------------------------------------
 (2) _stopServo                                            4     2      2      86
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _pause                                                2     0      2    2557
                                             21 BANK0      2     0      2
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _initServo                                            8     0      8   16900
                                            102 BANK0      8     0      8
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (3) _startTimer                                           8     2      6     562
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            10     6      4   14988
                                             92 BANK0     10     6      4
                       _angleToPulse
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        23    19      4   14104
                                             69 BANK0     23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     316
                                             54 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    2665
                                             27 BANK0     15     9      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    2747
                                             12 BANK0     15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    3409
                                             42 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2264
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2503
                                              8 BANK0     10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2109
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _initTimer                                            4     2      2     150
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                         9     3      6     752
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (1) _showInterface                                        1     1      0   13618
                                             22 BANK0      1     1      0
                           _dateTime
                           _mainMenu
                         _readKeypad
                            _runMenu
                          _runSelect
                           _runStats
                            _runTime
 ---------------------------------------------------------------------------------
 (2) _runTime                                              0     0      0    2192
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runStats                                             0     0      0    2192
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runSelect                                            0     0      0    2192
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runMenu                                              1     1      0    2214
                                             21 BANK0      1     1      0
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (3) _readKeypad                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _mainMenu                                             0     0      0    2192
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _dateTime                                             0     0      0    2192
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              23    17      6    2057
                                              7 BANK0     14     8      6
                            ___lwdiv
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     292
                                              4 BANK0      1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     290
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdClear                                             0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              4 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     135
                                              2 BANK0      2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _service                                             15    15      0    7389
                                            102 COMRAM    15    15      0
              _servoInterruptService
                         i2_setAngle
 ---------------------------------------------------------------------------------
 (9) i2_setAngle                                          10     6      4    5888
                                             92 COMRAM    10     6      4
                     i2_angleToPulse
 ---------------------------------------------------------------------------------
 (10) i2_angleToPulse                                     23    19      4    5532
                                             69 COMRAM    23    19      4
                         i2___altoft
                         i2___awtoft
                          i2___ftadd
                          i2___ftdiv
                          i2___ftmul
                          i2___fttol
 ---------------------------------------------------------------------------------
 (11) i2___fttol                                          15    11      4     278
                                             54 COMRAM    15    11      4
                         i2___altoft (ARG)
                         i2___awtoft (ARG)
                          i2___ftadd (ARG)
                          i2___ftdiv (ARG)
                          i2___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___ftmul                                          15     9      6     999
                                             27 COMRAM    15     9      6
                         i2___altoft (ARG)
                         i2___awtoft (ARG)
                          i2___ftdiv (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (11) i2___ftdiv                                          15     9      6     953
                                             12 COMRAM    15     9      6
                         i2___awtoft (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (11) i2___ftadd                                          12     6      6    1565
                                             42 COMRAM    12     6      6
                         i2___altoft (ARG)
                         i2___awtoft (ARG)
                          i2___ftdiv (ARG)
                          i2___ftmul (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (11) i2___awtoft                                          4     1      3     738
                                              8 COMRAM     4     1      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (11) i2___altoft                                         10     6      4     837
                                              8 COMRAM    10     6      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (12) i2___ftpack                                          8     3      5     621
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) _servoInterruptService                               12    12      0    1368
                                              9 COMRAM    12    12      0
                        _digitalRead
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (10) i2_startTimer                                        8     2      6     258
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (10) i2_digitalWrite                                      9     3      6     488
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (10) _digitalRead                                         6     2      4     238
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
     _startTimer
   _lcdClear
     _lcdInst
       _lcdNibble
   _pinSetup
   _printf
     ___lwdiv
     _putch
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
   _showInterface
     _dateTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lwdiv
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _mainMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lwdiv
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _readKeypad
     _runMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lwdiv
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _runSelect
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lwdiv
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _runStats
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lwdiv
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _runTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lwdiv
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
   _sortBattery
     _digitalWrite
     _initServo
       _initTimer
       _setAngle
         _angleToPulse
           ___altoft
             ___ftpack
           ___awtoft
             ___ftpack
           ___ftadd
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
       _startTimer
     _lcdClear
       _lcdInst
         _lcdNibble
     _pause
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lwdiv
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
       _readKeypad
     _printf
       ___lwdiv
       _putch
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
     _stopServo

 _service (ROOT)
   _servoInterruptService
     _digitalRead
     i2_digitalWrite
     i2_startTimer
   i2_setAngle
     i2_angleToPulse
       i2___altoft
         i2___ftpack
       i2___awtoft
         i2___ftpack
       i2___ftadd
         i2___altoft (ARG)
           i2___ftpack
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftmul (ARG)
           i2___altoft (ARG)
             i2___ftpack
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftdiv (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftpack (ARG)
         i2___ftpack (ARG)
       i2___ftdiv
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
       i2___ftmul
         i2___altoft (ARG)
           i2___ftpack
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftpack (ARG)
       i2___fttol
         i2___altoft (ARG)
           i2___ftpack
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftadd (ARG)
           i2___altoft (ARG)
             i2___ftpack
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftdiv (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftmul (ARG)
             i2___altoft (ARG)
               i2___ftpack
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftdiv (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___ftpack (ARG)
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftmul (ARG)
           i2___altoft (ARG)
             i2___ftpack
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftdiv (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftpack (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      2C       7       17.2%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     6E      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     75      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     129      34        0.0%
DATA                 0      0     129       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Mar 13 11:23:30 2017

                  ___altoft@exp 0090                   ___altoft@sign 0091                     _sortBattery 14D8  
                    i2___altoft 1B92                     __CFG_BORV$3 000000                      i2___awtoft 1E6E  
                    i2___ftpack 171A                    __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000  
                  __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000                     __CFG_OSC$HS 000000  
              _redirectingServo 0126                    ___ftadd@exp1 00B5                    ___ftadd@exp2 00B4  
                  ___ftadd@sign 00B3                             l116 15B4                             l108 1666  
                           l232 1ED8                             l235 1EE6                             l404 1C74  
                           l406 1C80                             l407 1C8C                             l620 09E4  
                           l198 1F40                             l618 098A                             l397 1D9C  
                           l907 0B24                 ??_showInterface 0096                             l872 007A  
                           l849 0FF2                             l876 00B4                             l878 00DC  
                           l887 01B2                             l896 01DC                    __CFG_CPB$OFF 000000  
                           _PEN 007E2A                    __CFG_CPD$OFF 000000                             _SEN 007E28  
                           _pin 0110                             wreg 000FE8                    __CFG_LVP$OFF 000000  
                  ___ftdiv@cntr 0095                    ___ftdiv@sign 009A                    __CFG_WDT$OFF 000000  
                          l1027 1B10                            l3100 1AD2                            l3004 0860  
                          l3024 1E08                            l3008 087E                            l3034 0B94  
                          l3108 1B02                            l3212 1D64                            l3052 0C26  
                          l3206 1D5A                            l3222 1D74                            l3070 0C8C  
                          l3062 0C56                            l3152 08CC                            l3216 1D6C  
                          l3064 0C66                            l3056 0C3A                            l3162 0900  
                          l3066 0C70                            l3156 08E0                            l3236 1C98  
                          l3174 0954                            l3158 08E8                            l3166 090A  
                          l3502 1D28                            l3096 1AC0                            l3192 09F0  
                          l3512 1438                            l3098 1ACC                            l3186 0990  
                          l3530 148C                            l3522 1468                            l2810 0F86  
                          l2802 0F34                            l3700 1034                            l3524 1470  
                          l3516 144C                            l2900 0198                            l3710 105E  
                          l3702 1038                            l3534 14A0                            l3518 1454  
                          l2830 1018                            l2814 0FA6                            l2806 0F48  
                          l2902 01A6                            l3528 1484                            l3536 14A8  
                          l2824 0FFC                            l2816 0FD6                            l2808 0F56  
                          l3730 10B0                            l3714 106C                            l2818 0FE4  
                          l3740 10DE                            l3732 10B8                            l2844 18A0  
                          l2908 0206                            l2860 0088                            l3492 1D10  
                          l3726 10A6                            l2846 18B0                            l2918 0254  
                          l2934 0A82                            l3494 1D16                            l3752 1108  
                          l3744 10EE                            l2872 00D2                            l2928 0A48  
                          l3496 1D1C                            l3754 1114                            l2890 0150  
                          l2882 0114                            l2866 00C2                            l2954 0AE2  
                          l3498 1D22                            l3748 10FE                            l2892 015E  
                          l2980 07D4                            l3836 164A                            l2894 016A  
                          l2974 079A                            l3696 1026                            l2888 0142  
                          l3698 102A                            l2994 0822                            l2998 0840  
                          _EEIF 007D0C                            STR_1 FFEF                            STR_2 FFD3  
                          STR_3 FFF7                            STR_4 FFC5                            STR_5 FFA5  
                          STR_6 FFB6                            STR_7 FEA9                            STR_8 FFE7  
                          STR_9 FFDE                            u2301 0A5E                            _LATA 000F89  
                          _LATB 000F8A                            u2071 0028                            _LATC 000F8B  
                          _LATD 000F8C                            u2081 0046                            u2401 0B70  
                          _LATE 000F8D                            u3114 1416                            u3115 140E  
                          u2331 0776                            u2420 0BBA                            u2351 07B0  
                          u2281 0A24                            u2425 0BB0                            _PEIE 007F96  
                          u3807 1B86                            u3727 1F44                            u3737 1DAA  
                          u3747 1DE0                            _RCEN 007E2B                            u3757 1F0A  
                          u3767 1F20                            u3777 1B3A                            u3787 1B48  
                          u3797 1B78                            _RSEN 007E29                            _main 15B6  
                  ___ftpack@arg 0080                    i2___altoft@c 0009                            _keys FE89  
                  ___ftpack@exp 0083                            _port 0118                            fsr0h 000FEA  
                          fsr1h 000FE2                            fsr2h 000FDA                            fsr0l 000FE9  
                          indf2 000FDF                            fsr1l 000FE1                            fsr2l 000FD9  
                          btemp 007E                    i2___ftadd@f1 002B                    i2___ftadd@f2 002E  
                          prodh 000FF4                            prodl 000FF3                            start 000E  
                    i2_setAngle 1C0A                   __CFG_IESO$OFF 000000                    i2___ftdiv@f1 000D  
                  i2___ftdiv@f2 0010                    i2___ftdiv@f3 0017                    i2___awtoft@c 0009  
                 __CFG_MCLRE$ON 000000                    ___ftmul@cntr 00A8                    i2___ftmul@f1 001C  
                  i2___ftmul@f2 001F                    ___param_bank 000000                    ___ftmul@sign 00A9  
                  i2___fttol@f1 0037                    ___fttol@exp1 00C4                    ___fttol@lval 00C0  
          __end_ofi2_startTimer 1D0E            __end_of_angleToPulse 0760                           ?_main 0001  
                         _ACKEN 007E2C                           _ACKDT 007E2D                           _EEADR 000FA9  
               __end_of___ftadd 027A                           STR_10 FEE6                           STR_11 FF94  
                         STR_20 FF1C                           STR_12 FED4                           STR_21 FF83  
                         STR_13 FF61                           STR_22 FF2E                           STR_14 FEF8  
                         STR_15 FF50                           STR_16 FEC1                           STR_17 FF72  
                         STR_18 FF0A                           STR_19 FF3F                 __end_of___ftdiv 0B5A  
       ??_servoInterruptService 000A                 __end_of___ftmul 08BE                           _T0CON 000FD5  
                         _T1CON 000FCD                 __end_of___fttol 0C9E                           _T2CON 000FCA  
                         _T3CON 000FB1                 __end_of___lwdiv 1B1A                           i2l404 1CC4  
                         i2l406 1CD0                           i2l174 0EDE                           i2l407 1CDC  
                         i2l544 0404                           i2l546 0408                           i2l299 1714  
                         i2l547 040C                           i2l548 0410                           i2l549 044C  
                         i2l907 13C6                           i2l872 0492                           i2l849 17A8  
                         i2l876 04BC                           i2l887 056C                           i2l896 0588  
                         _TMR0H 000FD7                           _TMR1H 000FCF                           _TMR0L 000FD6  
                         _TMR3H 000FB3                           _TMR1L 000FCE                           _TMR3L 000FB2  
                         _PORTA 000F80                           _PORTB 000F81                           _PORTC 000F82  
                         _PORTD 000F83                           _TRISA 000F92                           _TRISB 000F93  
                         _TRISC 000F94                           _TRISD 000F95                           _TRISE 000F96  
                 __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000  
                 __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000                   _conveyorServo 00EE  
               __end_of_lcdInst 1F2C                  __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000  
        servoInterruptService@i 0014                  __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000  
                __CFG_EBTR3$OFF 000000                   __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000  
                 __CFG_WRTD$OFF 000000                 __end_of_initLCD 1DEC                  __CFG_EBTRB$OFF 000000  
                 ___awtoft@sign 008B                           _pause 2012                   ___ftpack@sign 0084  
                         _pulse 0100                           _putch 1F2C                           pclath 000FFA  
                         tablat 000FF5                 __end_of_service 0F1A                 __end_of_runMenu 1ED8  
               __end_of_runTime 1F7A                           status 000FD8                   i2___ftdiv@exp 001A  
            __size_ofi2___ftadd 01AC                  __CFG_PBADEN$ON 000000              __size_ofi2___ftdiv 00E6  
            __size_ofi2___ftmul 00F4              __size_ofi2___fttol 00F4            __end_of_digitalWrite 14D8  
               __initialization 19A6                    __end_of_main 1668                    __end_of_keys FE9A  
                 i2___ftmul@exp 0025                     ?i2___altoft 0009                     ?i2___awtoft 0009  
                   ?i2___ftpack 0001                          ??_main 00EE                   ___fttol@sign1 00BF  
                 __activetblptr 000002            __size_of_digitalRead 00B2                          _ADCON0 000FC2  
                        _ADCON1 000FC1                          _ADCON2 000FC0                __end_of___altoft 1912  
                        _ADRESH 000FC4                          _EEADRH 000FAA                          _ADRESL 000FC3  
                        _EEDATA 000FA8                          ?_pause 0095                          _EECON1 000FA6  
                        _EECON2 000FA7                __end_of___awtoft 1E30                          ?_putch 0001  
              __end_of___ftpack 1026                          _INT0IE 007F94                          _INT0IF 007F91  
                        _INT1IF 007F80                          i2l3120 1738                          i2l3130 1794  
                        i2l3122 1742                          i2l3132 179E                          i2l3124 1760  
                        i2l3116 172A                          i2l3310 0526                          i2l3302 04FA  
                        i2l3128 1776                          i2l3320 055A                          i2l3312 0530  
                        i2l3400 126E                          i2l3322 0564                          i2l3314 0538  
                        i2l3252 1BB4                          i2l3308 051C                          i2l3254 1BC0  
                        i2l3414 12A0                          i2l3328 05A4                          i2l3280 04A0  
                        i2l3424 12C8                          i2l3338 05D4                          i2l3354 1362  
                        i2l3418 12B0                          i2l3442 1156                          i2l3604 16EA  
                        i2l3620 180C                          i2l3268 1E82                          i2l3348 133A  
                        i2l3428 12D8                          i2l3460 11BC                          i2l3630 182E  
                        i2l3614 17F8                          i2l3286 04CA                          i2l3374 13A0  
                        i2l3470 11E4                          i2l3632 1834                          i2l3624 181A  
                        i2l3472 11F0                          i2l3464 11CC                          i2l3626 1820  
                        i2l3618 1806                          i2l3802 0386                          i2l3394 1246  
                        i2l3474 11F6                          i2l3636 1842                          i2l3652 1CE8  
                        u303_41 113A                          i2l3590 168A                          i2l3638 1848  
                        i2l3806 0414                          i2l3478 120C                          i2l3808 043E  
                        i2l3594 16AA                          i2l3586 166A                          i2l3850 0E2C  
                        i2l3860 0E54                          i2l3598 16CA                          i2l3872 0EA6  
                        i2l3864 0E6E                          i2l3794 02CE                          i2l3876 0EC2  
                        i2l3868 0E8A                          u271_41 045E                          u272_41 0472  
                        u292_41 1322                          u294_41 134A                          u297_41 122E  
                        u299_41 1256                          _TMR0IE 007F95                          _TMR0IF 007F92  
                        _TMR1IE 007CE8                          _TMR1IF 007CF0                          _TMR2IF 007CF1  
                        _TMR3IE 007D01                          _TMR3IF 007D09                          _SSPADD 000FC8  
                        _TRISC3 007CA3                          _TRISC4 007CA4                          _SSPBUF 000FC9  
              __end_of_dateTime 2012                     ?i2_setAngle 005D               _angleToPulse$1232 00D5  
              __end_of_lcdClear 205C                     initServo@pi 00EA                     initServo@po 00E8  
                __CFG_XINST$OFF 000000                __end_of_mainMenu 1FEC                       ??___ftadd 00B0  
                __CFG_STVREN$ON 000000                       ??___ftdiv 0092                       ??___ftmul 00A1  
                     ??___fttol 00BA                       ??___lwdiv 0084                  i2___altoft@exp 0011  
                        clear_0 1A0C                       ??_lcdInst 0082                          _printf 08BE  
              __end_of_pinSetup 1E6E                __end_of_setAngle 19A6           ___ftmul@f3_as_product 00A5  
                     ??_initLCD 0084                    __pdataCOMRAM 0076               __end_ofi2___ftadd 05FA  
             __end_ofi2___ftdiv 13F8                  i2___ftadd@exp1 0036                  i2___ftadd@exp2 0035  
             __end_ofi2___ftmul 1312                   setAngle@angle 00DE               __end_ofi2___fttol 121E  
                i2___ftadd@sign 0034                    __mediumconst FE88                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8                   setAngle@timer 00DC  
                     ??_service 0067                       ??_runMenu 0095                __end_of_runStats 1FA0  
                     ??_runTime 0095                  i2___ftdiv@cntr 0016                      __accesstop 0080  
       __end_of__initialization 1A18                      ___altoft@c 0088             __size_ofi2___altoft 0078  
                i2___ftdiv@sign 001B                      ___ftadd@f1 00AA                      ___ftadd@f2 00AD  
           __size_ofi2___awtoft 0038             __size_ofi2___ftpack 00AE                   ___rparam_used 000001  
                    ___ftdiv@f1 008C                      ___ftdiv@f2 008F                      ___ftdiv@f3 0096  
                    ___awtoft@c 0088                  i2___ftpack@arg 0001           __size_ofi2_startTimer 004C  
                i2___ftpack@exp 0004                      ___ftmul@f1 009B                      ___ftmul@f2 009E  
                    ___fttol@f1 00B6            __end_of_happynewyear FEA9                  __pcstackCOMRAM 0001  
         __size_of_angleToPulse 0166                    __pidataBANK0 2028                    __pidataBANK1 2038  
                 _cylinderMotor 00F4                  i2___ftmul@cntr 0029                    ?_sortBattery 0001  
                 __end_of_pause 2028                  i2___ftmul@sign 002A                   __end_of_putch 1F54  
                i2___fttol@exp1 0045                  i2___fttol@lval 0041              __size_of_lcdNibble 0078  
           __size_ofi2_setAngle 0068                         ??_pause 0097              i2digitalWrite@port 0001  
                       ??_putch 0084                    i2_startTimer 1CC2                      __pbssBANK0 00FE  
                    __pbssBANK1 0100                    _angleToPulse 05FA           __size_of_digitalWrite 00E0  
            __size_of_initTimer 004A              __size_of_initServo 007C         __size_ofi2_angleToPulse 0140  
                     ?___altoft 0088                      _lcdNewline 204C                       ?___awtoft 0088  
                     ?___ftpack 0080                         ?_printf 0087      servoInterruptService@flags 000C  
__size_of_servoInterruptService 01D4   __end_of_servoInterruptService 044E           __end_of_showInterface 112A  
                     ?_dateTime 0001                  stopServo@timer 0080               i2startTimer@timer 0001  
                     ?_lcdClear 0001              __size_of_runSelect 0026                angleToPulse@a000 00D8  
              angleToPulse@a180 00D1                    _digitalWrite 13F8                         _SSPCON1 000FC6  
                       _SSPCON2 000FC5                         _SSPSTAT 000FC7                       ?_mainMenu 0001  
       __size_ofi2_digitalWrite 00AC              __size_of_stopServo 004A                       ?_pinSetup 0001  
                     ?_setAngle 00DC               __end_of_lcdNibble 1B92                         __Hparam 0000  
                       __Lparam 0000                         ___ftadd 0012                      _readKeypad 1ED8  
                       ___ftdiv 0A0E                         ___ftmul 0760                         ___fttol 0B5A  
                     ?_runStats 0001                         ___lwdiv 1AA2                    ??i2___altoft 000D  
                    ??___altoft 008C                         __pcinit 19A6                    ??i2___awtoft 000C  
                  ??i2___ftpack 0006                      ??___awtoft 008B                      ??___ftpack 0085  
       i2___ftmul@f3_as_product 0026                         __ramtop 1000                         _lcdInst 1F02  
                       __ptext0 15B6                         __ptext1 14D8                         __ptext2 1D0E  
                       __ptext3 2012                         __ptext4 1A26                         __ptext5 1C72  
                       __ptext6 1912                         __ptext7 05FA                         __ptext8 0B5A  
                       __ptext9 0760                 __size_of_printf 0150                   startTimer@val 0082  
                       _initLCD 1DA2               __end_of_hexpowers FEA2               __end_of_initTimer 1DA2  
             __end_of_initServo 1AA2                      ??_dateTime 0095                 i2___altoft@sign 0012  
                    ??_lcdClear 0084                         _service 0008                         _runMenu 1EA6  
                       _runTime 1F54                  __pintcode_body 0DDE            end_of_initialization 1A18  
                    ??_mainMenu 0095             i2angleToPulse@angle 0046                   __Lmediumconst FE88  
                       int_func 0DDE              __end_ofi2___altoft 1C0A                  digitalRead@pin 0003  
            __end_ofi2___awtoft 1EA6              __end_ofi2___ftpack 17C8                    ??i2_setAngle 0061  
                    ??_pinSetup 0080                      ??_setAngle 00E0               __end_of_runSelect 1FC6  
                       printf@c 0094                         printf@f 0087                         postdec1 000FE5  
                       postdec2 000FDD                         postinc0 000FEE                         postinc2 000FDE  
                    ??_runStats 0095                   ??_digitalRead 0005                     ?_lcdNewline 0001  
             __end_of_stopServo 1D58                       _PORTBbits 000F81            __size_of_sortBattery 00DE  
              showInterface@key 0096              __end_ofi2_setAngle 1C72             _redirectAngle_OTHER 007C  
                  _happynewyear FEA2              angleToPulse@offset 00CD                       i2___ftadd 044E  
                     i2___ftdiv 1312                       i2___ftmul 121E                       i2___fttol 112A  
                    _startTimer 1C72                     ___ftdiv@exp 0099                 i2___awtoft@sign 000C  
               i2___ftpack@sign 0005                  i2_angleToPulse 0C9E                      _switchFlag 00FE  
                   ___ftmul@exp 00A4                     ?_readKeypad 0001                   __pidataCOMRAM 2044  
                __end_of_printf 0A0E             start_initialization 19A6             __end_of_digitalRead 171A  
                initServo@angle 00EC                  initTimer@timer 0080                 i2___fttol@sign1 0040  
                initServo@timer 00E6                      ?i2___ftadd 002B                      ?i2___ftdiv 000D  
                    ?i2___ftmul 001C                      ?i2___fttol 0037                  i2_digitalWrite 17C8  
           __size_of_lcdNewline 0008          __end_ofi2_angleToPulse 0DDE                     __pdataBANK0 00EE  
                   __pdataBANK1 0120                    pause@message 0095                __CFG_LPT1OSC$OFF 000000  
                      ??_printf 008D               __size_of___altoft 009E               __size_of___awtoft 0044  
             __size_of___ftpack 010C                   __pcstackBANK0 0080          __end_ofi2_digitalWrite 1874  
             __size_of_dateTime 0026                     ?_startTimer 0080               __size_of_lcdClear 0008  
           __size_of_readKeypad 002A                 i2setAngle@angle 005F                 i2setAngle@timer 005D  
             __size_of_mainMenu 0026               i2digitalWrite@pin 0003               i2digitalWrite@val 0005  
               ?i2_angleToPulse 0046                ___lwdiv@dividend 0080               __CFG_CCP2MX$PORTC 000000  
             __size_of_pinSetup 003E               __size_of_setAngle 0094                       __pintcode 0008  
                 __pmediumconst FE88                       _lcdNibble 1B1A                        ?___ftadd 00AA  
                      ?___ftdiv 008C                        ?___ftmul 009B                        ?___fttol 00B6  
                      ?___lwdiv 0080                     _digitalRead 1668                        ?_lcdInst 0001  
             __size_of_runStats 0026                        ?_initLCD 0001                 startTimer@timer 0080  
                      ?_service 0001                       _hexpowers FE9A                        ?_runMenu 0001  
                     _initTimer 1D58                       _initServo 1A26                        ?_runTime 0001  
               ?i2_digitalWrite 0001           _servoInterruptService 027A                ___lwdiv@quotient 0084  
                   ??i2___ftadd 0031                     ??i2___ftdiv 0013                     ??i2___ftmul 0022  
                   ??i2___fttol 003B                  __size_of_pause 0016                  __size_of_putch 0028  
            i2angleToPulse@a000 0059              i2angleToPulse@a180 0052                        _LATDbits 000F8C  
                      i2u320_44 16DA                        i2u320_45 16D6                        i2u305_40 1174  
                      i2u321_44 17DE                        i2u321_45 17D8                        i2u305_45 116C  
                      i2u317_44 167A                        i2u317_45 1676                        i2u350_40 0292  
                      i2u318_44 169A                        i2u318_45 1696                        i2u351_40 029E  
                      i2u319_44 16BA                        i2u319_45 16B6                        i2u352_40 02A0  
                      i2u353_40 02AC                        i2u354_40 02AE                        i2u355_40 02CC  
                      i2u347_40 0282                        i2u348_40 0284                        i2u349_40 0290  
        __size_of_showInterface 0104                __CFG_WDTPS$32768 000000                      ?_lcdNibble 0001  
                _padAngle_CATCH 00F8                  _padAngle_CLOSE 00FA                      service@key 0075  
                  ??_lcdNewline 0084             __size_of_startTimer 0050                       _runSelect 1FA0  
             angleToPulse@angle 00C5                   lcdNibble@data 0081                      printf@flag 008D  
                 lcdNibble@temp 0080                      printf@prec 0091                       _stopServo 1D0E  
                    runMenu@key 0095                      ?_initTimer 0080                      ?_initServo 00E6  
                     copy_data0 19BA                       copy_data1 19DA                       copy_data2 19FA  
            __end_of_lcdNewline 2054                   readKeypad@key 0080                        __Hrparam 0000  
                      __Lrparam 0000              __CFG_BOREN$SBORDIS 000000                    ??_readKeypad 0080  
                 ??_sortBattery 00EE                __size_of___ftadd 0268                __size_of___ftdiv 014C  
                      ___altoft 1874                __size_of___ftmul 015E                __size_of___fttol 0144  
              __size_of___lwdiv 0078                      ?_runSelect 0001                        ___awtoft 1DEC  
                      ___ftpack 0F1A                __size_of_lcdInst 002A                __size_of_initLCD 004A  
                      _dateTime 1FEC                      ?_stopServo 0080          ?_servoInterruptService 0001  
                 _showInterface 1026                        _lcdClear 2054                 ___lwdiv@divisor 0082  
               ___lwdiv@counter 0086                        __ptext10 0A0E                        __ptext11 0012  
                      __ptext20 1FA0                        __ptext12 1DEC                        __ptext21 1EA6  
                      __ptext13 1874                        __ptext30 1E30                        __ptext22 1ED8  
                      __ptext14 0F1A                        __ptext31 1DA2                        __ptext23 1FC6  
                      __ptext15 1D58                        __ptext40 044E                        __ptext32 1F02  
                      __ptext24 1FEC                        __ptext16 13F8                        __ptext41 1E6E  
                      __ptext33 1B1A                        __ptext25 08BE                        __ptext17 1026  
                      __ptext42 1B92                        __ptext26 1F2C                        __ptext18 1F54  
                      __ptext43 171A                        __ptext35 1C0A                        __ptext27 204C  
                      __ptext19 1F7A                        __ptext44 027A                        __ptext36 0C9E  
                      __ptext28 1AA2                        __ptext45 1CC2                        __ptext37 112A  
                      __ptext29 2054                        __ptext46 17C8                        __ptext38 121E  
                      __ptext47 1668                        __ptext39 1312                __size_of_service 0F12  
              __size_of_runMenu 0032                 i2startTimer@val 0003                __size_of_runTime 0026  
                 ?i2_startTimer 0001                        _mainMenu 1FC6                        _padServo 0120  
            __end_of_readKeypad 1F02                   ?_angleToPulse 00C5                   __size_of_main 00B2  
                      _pinSetup 1E30                        _setAngle 1912                     ??_lcdNibble 0080  
                 _padAngle_OPEN 00FC                        int$flags 007E                        _runStats 1F7A  
                     printf@idx 008E                       printf@val 008F                       putch@data 0084  
           i2_angleToPulse$1318 0056             __end_of_sortBattery 15B6                      _INTCONbits 000FF2  
                ?_showInterface 0001                   ?_digitalWrite 0080                     ??_initTimer 0082  
                   ??_initServo 00EE            i2angleToPulse@offset 004E                  ??i2_startTimer 0007  
              ??i2_angleToPulse 004A                    ??_startTimer 0086                 digitalRead@port 0001  
                      intlevel2 0000                  ??_angleToPulse 00C9                _redirectAngle_AA 0078  
              _redirectAngle_9V 0076                        printf@ap 0092                     lcdInst@data 0083  
                  ?_digitalRead 0001                     ??_runSelect 0095              __end_of_startTimer 1CC2  
              ??i2_digitalWrite 0007                digitalWrite@port 0080                     ??_stopServo 0082  
                ??_digitalWrite 0086                 _redirectAngle_C 007A                 digitalWrite@pin 0082  
               digitalWrite@val 0084  
