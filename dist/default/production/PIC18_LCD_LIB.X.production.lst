

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Mar 25 21:54:41 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    90                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    91                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    92  0000                     
    93                           ; Version 1.40
    94                           ; Generated 01/12/2016 GMT
    95                           ; 
    96                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    97                           ; All rights reserved.
    98                           ; 
    99                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   100                           ; 
   101                           ; Redistribution and use in source and binary forms, with or without modification, are
   102                           ; permitted provided that the following conditions are met:
   103                           ; 
   104                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   105                           ;        conditions and the following disclaimer.
   106                           ; 
   107                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   108                           ;        of conditions and the following disclaimer in the documentation and/or other
   109                           ;        materials provided with the distribution.
   110                           ; 
   111                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   112                           ;        software without specific prior written permission.
   113                           ; 
   114                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   115                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   116                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   117                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   118                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   119                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   120                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   121                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   122                           ; 
   123                           ; 
   124                           ; Code-generator required, PIC18F4620 Definitions
   125                           ; 
   126                           ; SFR Addresses
   127  0000                     
   128                           	psect	idataCOMRAM
   129  004C7A                     __pidataCOMRAM:
   130                           	opt stack 0
   131                           
   132                           ;initializer for _angle
   133  004C7A  005A               	dw	90
   134                           
   135                           	psect	idataBANK1
   136  004AEC                     __pidataBANK1:
   137                           	opt stack 0
   138                           
   139                           ;initializer for _V_LIM_9V
   140  004AEC  E1                 	db	225
   141  004AED  FA                 	db	250
   142  004AEE  3F                 	db	63
   143                           
   144                           ;initializer for _V_LIM_AA
   145  004AEF  E9                 	db	233
   146  004AF0  A6                 	db	166
   147  004AF1  3E                 	db	62
   148                           
   149                           ;initializer for _V_LIM_C
   150  004AF2  33                 	db	51
   151  004AF3  A3                 	db	163
   152  004AF4  3F                 	db	63
   153                           
   154                           ;initializer for _padAngle_CLOSE
   155  004AF5  001E               	dw	30
   156                           
   157                           ;initializer for _padAngle_NEUTRAL
   158  004AF7  003C               	dw	60
   159                           
   160                           ;initializer for _padAngle_OPEN
   161  004AF9  00B4               	dw	180
   162                           
   163                           ;initializer for _redirectAngle_9V
   164  004AFB  0076               	dw	118
   165                           
   166                           ;initializer for _redirectAngle_AA
   167  004AFD  008A               	dw	138
   168                           
   169                           ;initializer for _redirectAngle_C
   170  004AFF  00A6               	dw	166
   171                           
   172                           ;initializer for _redirectAngle_OTHER
   173  004B01  0099               	dw	153
   174                           
   175                           ;initializer for _AA_float
   176  004B03  0002               	dw	2
   177  004B05  0005               	dw	5
   178                           
   179                           ;initializer for _conveyorServo
   180  004B07  0002               	dw	2
   181  004B09  0002               	dw	2
   182                           
   183                           ;initializer for _cylinderMotor
   184  004B0B  0002               	dw	2
   185  004B0D  0000               	dw	0
   186                           
   187                           ;initializer for _padPin1
   188  004B0F  0002               	dw	2
   189  004B11  0006               	dw	6
   190                           
   191                           ;initializer for _padPin2
   192  004B13  0002               	dw	2
   193  004B15  0007               	dw	7
   194                           
   195                           ;initializer for _padServo
   196  004B17  0002               	dw	2
   197  004B19  0001               	dw	1
   198                           
   199                           ;initializer for _redirectingServo
   200  004B1B  0003               	dw	3
   201  004B1D  0000               	dw	0
   202                           
   203                           	psect	mediumconst
   204  00FE30                     __pmediumconst:
   205                           	opt stack 0
   206  00FE30  00                 	db	0
   207  00FE31                     _dpowers:
   208                           	opt stack 0
   209  00FE31  0001               	dw	1
   210  00FE33  0000               	dw	0
   211  00FE35  000A               	dw	10
   212  00FE37  0000               	dw	0
   213  00FE39  0064               	dw	100
   214  00FE3B  0000               	dw	0
   215  00FE3D  03E8               	dw	1000
   216  00FE3F  0000               	dw	0
   217  00FE41  2710               	dw	10000
   218  00FE43  0000               	dw	0
   219  00FE45  86A0               	dw	34464
   220  00FE47  0001               	dw	1
   221  00FE49  4240               	dw	16960
   222  00FE4B  000F               	dw	15
   223  00FE4D  9680               	dw	38528
   224  00FE4F  0098               	dw	152
   225  00FE51  E100               	dw	57600
   226  00FE53  05F5               	dw	1525
   227  00FE55  CA00               	dw	51712
   228  00FE57  3B9A               	dw	15258
   229  00FE59                     __end_of_dpowers:
   230                           	opt stack 0
   231  00FE59                     __npowers_:
   232                           	opt stack 0
   233  00FE59  00                 	db	0
   234  00FE5A  80                 	db	128
   235  00FE5B  3F                 	db	63
   236  00FE5C  CD                 	db	205
   237  00FE5D  CC                 	db	204
   238  00FE5E  3D                 	db	61
   239  00FE5F  D7                 	db	215
   240  00FE60  23                 	db	35
   241  00FE61  3C                 	db	60
   242  00FE62  12                 	db	18
   243  00FE63  83                 	db	131
   244  00FE64  3A                 	db	58
   245  00FE65  B7                 	db	183
   246  00FE66  D1                 	db	209
   247  00FE67  38                 	db	56
   248  00FE68  C6                 	db	198
   249  00FE69  27                 	db	39
   250  00FE6A  37                 	db	55
   251  00FE6B  38                 	db	56
   252  00FE6C  86                 	db	134
   253  00FE6D  35                 	db	53
   254  00FE6E  C0                 	db	192
   255  00FE6F  D6                 	db	214
   256  00FE70  33                 	db	51
   257  00FE71  CC                 	db	204
   258  00FE72  2B                 	db	43
   259  00FE73  32                 	db	50
   260  00FE74  70                 	db	112
   261  00FE75  89                 	db	137
   262  00FE76  30                 	db	48
   263  00FE77  E7                 	db	231
   264  00FE78  DB                 	db	219
   265  00FE79  2E                 	db	46
   266  00FE7A  E5                 	db	229
   267  00FE7B  3C                 	db	60
   268  00FE7C  1E                 	db	30
   269  00FE7D  42                 	db	66
   270  00FE7E  A2                 	db	162
   271  00FE7F  0D                 	db	13
   272  00FE80                     __end_of__npowers_:
   273                           	opt stack 0
   274  00FE80                     __powers_:
   275                           	opt stack 0
   276  00FE80  00                 	db	0
   277  00FE81  80                 	db	128
   278  00FE82  3F                 	db	63
   279  00FE83  00                 	db	0
   280  00FE84  20                 	db	32
   281  00FE85  41                 	db	65
   282  00FE86  00                 	db	0
   283  00FE87  C8                 	db	200
   284  00FE88  42                 	db	66
   285  00FE89  00                 	db	0
   286  00FE8A  7A                 	db	122
   287  00FE8B  44                 	db	68
   288  00FE8C  40                 	db	64
   289  00FE8D  1C                 	db	28
   290  00FE8E  46                 	db	70
   291  00FE8F  50                 	db	80
   292  00FE90  C3                 	db	195
   293  00FE91  47                 	db	71
   294  00FE92  24                 	db	36
   295  00FE93  74                 	db	116
   296  00FE94  49                 	db	73
   297  00FE95  97                 	db	151
   298  00FE96  18                 	db	24
   299  00FE97  4B                 	db	75
   300  00FE98  BC                 	db	188
   301  00FE99  BE                 	db	190
   302  00FE9A  4C                 	db	76
   303  00FE9B  6B                 	db	107
   304  00FE9C  6E                 	db	110
   305  00FE9D  4E                 	db	78
   306  00FE9E  03                 	db	3
   307  00FE9F  15                 	db	21
   308  00FEA0  50                 	db	80
   309  00FEA1  79                 	db	121
   310  00FEA2  AD                 	db	173
   311  00FEA3  60                 	db	96
   312  00FEA4  F3                 	db	243
   313  00FEA5  49                 	db	73
   314  00FEA6  71                 	db	113
   315  00FEA7                     __end_of__powers_:
   316                           	opt stack 0
   317  00FEA7                     _hexpowers:
   318                           	opt stack 0
   319  00FEA7  0001               	dw	1
   320  00FEA9  0000               	dw	0
   321  00FEAB  0010               	dw	16
   322  00FEAD  0000               	dw	0
   323  00FEAF  0100               	dw	256
   324  00FEB1  0000               	dw	0
   325  00FEB3  1000               	dw	4096
   326  00FEB5  0000               	dw	0
   327  00FEB7  0000               	dw	0
   328  00FEB9  0001               	dw	1
   329  00FEBB  0000               	dw	0
   330  00FEBD  0010               	dw	16
   331  00FEBF  0000               	dw	0
   332  00FEC1  0100               	dw	256
   333  00FEC3  0000               	dw	0
   334  00FEC5  1000               	dw	4096
   335  00FEC7                     __end_of_hexpowers:
   336                           	opt stack 0
   337  00FEC7                     _keys:
   338                           	opt stack 0
   339  00FEC7  31                 	db	49
   340  00FEC8  32                 	db	50
   341  00FEC9  33                 	db	51
   342  00FECA  41                 	db	65
   343  00FECB  34                 	db	52
   344  00FECC  35                 	db	53
   345  00FECD  36                 	db	54
   346  00FECE  42                 	db	66
   347  00FECF  37                 	db	55
   348  00FED0  38                 	db	56
   349  00FED1  39                 	db	57
   350  00FED2  43                 	db	67
   351  00FED3  2A                 	db	42
   352  00FED4  30                 	db	48
   353  00FED5  23                 	db	35
   354  00FED6  44                 	db	68
   355  00FED7  00                 	db	0
   356  00FED8                     __end_of_keys:
   357                           	opt stack 0
   358  00FED8                     _happynewyear:
   359                           	opt stack 0
   360  00FED8  00                 	db	0
   361  00FED9  59                 	db	89
   362  00FEDA  03                 	db	3
   363  00FEDB  01                 	db	1
   364  00FEDC  13                 	db	19
   365  00FEDD  04                 	db	4
   366  00FEDE  17                 	db	23
   367  00FEDF                     __end_of_happynewyear:
   368                           	opt stack 0
   369  0000                     _ADCON0	set	4034
   370  0000                     _ADCON1	set	4033
   371  0000                     _ADCON2	set	4032
   372  0000                     _ADRESH	set	4036
   373  0000                     _ADRESL	set	4035
   374  0000                     _EEADR	set	4009
   375  0000                     _EEADRH	set	4010
   376  0000                     _EECON1	set	4006
   377  0000                     _EECON2	set	4007
   378  0000                     _EEDATA	set	4008
   379  0000                     _INTCONbits	set	4082
   380  0000                     _LATA	set	3977
   381  0000                     _LATB	set	3978
   382  0000                     _LATC	set	3979
   383  0000                     _LATD	set	3980
   384  0000                     _LATDbits	set	3980
   385  0000                     _LATE	set	3981
   386  0000                     _PORTA	set	3968
   387  0000                     _PORTB	set	3969
   388  0000                     _PORTBbits	set	3969
   389  0000                     _PORTC	set	3970
   390  0000                     _PORTD	set	3971
   391  0000                     _SSPADD	set	4040
   392  0000                     _SSPBUF	set	4041
   393  0000                     _SSPCON1	set	4038
   394  0000                     _SSPCON2	set	4037
   395  0000                     _SSPSTAT	set	4039
   396  0000                     _T0CON	set	4053
   397  0000                     _T1CON	set	4045
   398  0000                     _T3CON	set	4017
   399  0000                     _TMR0H	set	4055
   400  0000                     _TMR0L	set	4054
   401  0000                     _TMR1H	set	4047
   402  0000                     _TMR1L	set	4046
   403  0000                     _TMR3H	set	4019
   404  0000                     _TMR3L	set	4018
   405  0000                     _TRISA	set	3986
   406  0000                     _TRISB	set	3987
   407  0000                     _TRISC	set	3988
   408  0000                     _TRISD	set	3989
   409  0000                     _TRISE	set	3990
   410  0000                     _ACKDT	set	32301
   411  0000                     _ACKEN	set	32300
   412  0000                     _EEIF	set	32012
   413  0000                     _INT0IE	set	32660
   414  0000                     _INT0IF	set	32657
   415  0000                     _INT1IE	set	32643
   416  0000                     _INT1IF	set	32640
   417  0000                     _PEIE	set	32662
   418  0000                     _PEN	set	32298
   419  0000                     _RCEN	set	32299
   420  0000                     _RSEN	set	32297
   421  0000                     _SEN	set	32296
   422  0000                     _TMR0IE	set	32661
   423  0000                     _TMR0IF	set	32658
   424  0000                     _TMR1IE	set	31976
   425  0000                     _TMR3IE	set	32001
   426  0000                     _TRISC3	set	31907
   427  0000                     _TRISC4	set	31908
   428  00FEDF                     STR_2:
   429  00FEDF  73                 	db	115	;'s'
   430  00FEE0  69                 	db	105	;'i'
   431  00FEE1  67                 	db	103	;'g'
   432  00FEE2  6E                 	db	110	;'n'
   433  00FEE3  61                 	db	97	;'a'
   434  00FEE4  6C                 	db	108	;'l'
   435  00FEE5  3A                 	db	58	;':'
   436  00FEE6  20                 	db	32
   437  00FEE7  25                 	db	37
   438  00FEE8  64                 	db	100	;'d'
   439  00FEE9  20                 	db	32
   440  00FEEA  0A                 	db	10
   441  00FEEB  56                 	db	86	;'V'
   442  00FEEC  6F                 	db	111	;'o'
   443  00FEED  6C                 	db	108	;'l'
   444  00FEEE  74                 	db	116	;'t'
   445  00FEEF  61                 	db	97	;'a'
   446  00FEF0  67                 	db	103	;'g'
   447  00FEF1  65                 	db	101	;'e'
   448  00FEF2  3A                 	db	58	;':'
   449  00FEF3  20                 	db	32
   450  00FEF4  25                 	db	37
   451  00FEF5  66                 	db	102	;'f'
   452  00FEF6  00                 	db	0
   453  00FEF7  25                 	db	37
   454  00FEF8  63                 	db	99	;'c'
   455  00FEF9  29                 	db	41
   456  00FEFA  20                 	db	32
   457  00FEFB  74                 	db	116	;'t'
   458  00FEFC  69                 	db	105	;'i'
   459  00FEFD  6D                 	db	109	;'m'
   460  00FEFE  65                 	db	101	;'e'
   461  00FEFF  20                 	db	32
   462  00FF00  20                 	db	32
   463  00FF01  3C                 	db	60	;'<'
   464  00FF02  41                 	db	65	;'A'
   465  00FF03  20                 	db	32
   466  00FF04  20                 	db	32
   467  00FF05  20                 	db	32
   468  00FF06  20                 	db	32
   469  00FF07  20                 	db	32
   470  00FF08  0A                 	db	10
   471  00FF09  00                 	db	0
   472  00FF0A  73                 	db	115	;'s'
   473  00FF0B  74                 	db	116	;'t'
   474  00FF0C  61                 	db	97	;'a'
   475  00FF0D  72                 	db	114	;'r'
   476  00FF0E  74                 	db	116	;'t'
   477  00FF0F  20                 	db	32
   478  00FF10  20                 	db	32
   479  00FF11  20                 	db	32
   480  00FF12  3C                 	db	60	;'<'
   481  00FF13  42                 	db	66	;'B'
   482  00FF14  20                 	db	32
   483  00FF15  20                 	db	32
   484  00FF16  20                 	db	32
   485  00FF17  20                 	db	32
   486  00FF18  20                 	db	32
   487  00FF19  20                 	db	32
   488  00FF1A  0A                 	db	10
   489  00FF1B  00                 	db	0
   490  00FF1C  20                 	db	32
   491  00FF1D  20                 	db	32
   492  00FF1E  68                 	db	104	;'h'
   493  00FF1F  68                 	db	104	;'h'
   494  00FF20  3A                 	db	58	;':'
   495  00FF21  6D                 	db	109	;'m'
   496  00FF22  6D                 	db	109	;'m'
   497  00FF23  3A                 	db	58	;':'
   498  00FF24  73                 	db	115	;'s'
   499  00FF25  73                 	db	115	;'s'
   500  00FF26  20                 	db	32
   501  00FF27  20                 	db	32
   502  00FF28  20                 	db	32
   503  00FF29  20                 	db	32
   504  00FF2A  20                 	db	32
   505  00FF2B  20                 	db	32
   506  00FF2C  0A                 	db	10
   507  00FF2D  00                 	db	0
   508  00FF2E  73                 	db	115	;'s'
   509  00FF2F  65                 	db	101	;'e'
   510  00FF30  6C                 	db	108	;'l'
   511  00FF31  65                 	db	101	;'e'
   512  00FF32  63                 	db	99	;'c'
   513  00FF33  74                 	db	116	;'t'
   514  00FF34  20                 	db	32
   515  00FF35  72                 	db	114	;'r'
   516  00FF36  75                 	db	117	;'u'
   517  00FF37  6E                 	db	110	;'n'
   518  00FF38  3A                 	db	58	;':'
   519  00FF39  20                 	db	32
   520  00FF3A  20                 	db	32
   521  00FF3B  20                 	db	32
   522  00FF3C  20                 	db	32
   523  00FF3D  20                 	db	32
   524  00FF3E  0A                 	db	10
   525  00FF3F  00                 	db	0
   526  00FF40  74                 	db	116	;'t'
   527  00FF41  69                 	db	105	;'i'
   528  00FF42  6D                 	db	109	;'m'
   529  00FF43  65                 	db	101	;'e'
   530  00FF44  3A                 	db	58	;':'
   531  00FF45  20                 	db	32
   532  00FF46  6E                 	db	110	;'n'
   533  00FF47  6E                 	db	110	;'n'
   534  00FF48  6E                 	db	110	;'n'
   535  00FF49  20                 	db	32
   536  00FF4A  73                 	db	115	;'s'
   537  00FF4B  65                 	db	101	;'e'
   538  00FF4C  63                 	db	99	;'c'
   539  00FF4D  20                 	db	32
   540  00FF4E  20                 	db	32
   541  00FF4F  20                 	db	32
   542  00FF50  0A                 	db	10
   543  00FF51  00                 	db	0
   544  00FF52  5B                 	db	91	;'['
   545  00FF53  41                 	db	65	;'A'
   546  00FF54  41                 	db	65	;'A'
   547  00FF55  2C                 	db	44
   548  00FF56  39                 	db	57	;'9'
   549  00FF57  56                 	db	86	;'V'
   550  00FF58  2C                 	db	44
   551  00FF59  43                 	db	67	;'C'
   552  00FF5A  2C                 	db	44
   553  00FF5B  6F                 	db	111	;'o'
   554  00FF5C  74                 	db	116	;'t'
   555  00FF5D  68                 	db	104	;'h'
   556  00FF5E  65                 	db	101	;'e'
   557  00FF5F  72                 	db	114	;'r'
   558  00FF60  5D                 	db	93	;']'
   559  00FF61  20                 	db	32
   560  00FF62  0A                 	db	10
   561  00FF63  00                 	db	0
   562  00FF64                     STR_18:
   563  00FF64  30                 	db	48	;'0'
   564  00FF65  31                 	db	49	;'1'
   565  00FF66  32                 	db	50	;'2'
   566  00FF67  33                 	db	51	;'3'
   567  00FF68  34                 	db	52	;'4'
   568  00FF69  35                 	db	53	;'5'
   569  00FF6A  36                 	db	54	;'6'
   570  00FF6B  37                 	db	55	;'7'
   571  00FF6C  38                 	db	56	;'8'
   572  00FF6D  39                 	db	57	;'9'
   573  00FF6E  61                 	db	97	;'a'
   574  00FF6F  62                 	db	98	;'b'
   575  00FF70  63                 	db	99	;'c'
   576  00FF71  64                 	db	100	;'d'
   577  00FF72  65                 	db	101	;'e'
   578  00FF73  66                 	db	102	;'f'
   579  00FF74  00                 	db	0
   580  00FF75  20                 	db	32
   581  00FF76  20                 	db	32
   582  00FF77  20                 	db	32
   583  00FF78  20                 	db	32
   584  00FF79  20                 	db	32
   585  00FF7A  20                 	db	32
   586  00FF7B  20                 	db	32
   587  00FF7C  20                 	db	32
   588  00FF7D  20                 	db	32
   589  00FF7E  20                 	db	32
   590  00FF7F  20                 	db	32
   591  00FF80  20                 	db	32
   592  00FF81  20                 	db	32
   593  00FF82  20                 	db	32
   594  00FF83  2A                 	db	42
   595  00FF84  3E                 	db	62	;'>'
   596  00FF85  00                 	db	0
   597  00FF86  5B                 	db	91	;'['
   598  00FF87  31                 	db	49	;'1'
   599  00FF88  2C                 	db	44
   600  00FF89  32                 	db	50	;'2'
   601  00FF8A  2C                 	db	44
   602  00FF8B  33                 	db	51	;'3'
   603  00FF8C  2C                 	db	44
   604  00FF8D  34                 	db	52	;'4'
   605  00FF8E  5D                 	db	93	;']'
   606  00FF8F  20                 	db	32
   607  00FF90  20                 	db	32
   608  00FF91  20                 	db	32
   609  00FF92  20                 	db	32
   610  00FF93  20                 	db	32
   611  00FF94  2A                 	db	42
   612  00FF95  3E                 	db	62	;'>'
   613  00FF96  00                 	db	0
   614  00FF97  68                 	db	104	;'h'
   615  00FF98  69                 	db	105	;'i'
   616  00FF99  73                 	db	115	;'s'
   617  00FF9A  74                 	db	116	;'t'
   618  00FF9B  6F                 	db	111	;'o'
   619  00FF9C  72                 	db	114	;'r'
   620  00FF9D  79                 	db	121	;'y'
   621  00FF9E  20                 	db	32
   622  00FF9F  3C                 	db	60	;'<'
   623  00FFA0  43                 	db	67	;'C'
   624  00FFA1  20                 	db	32
   625  00FFA2  20                 	db	32
   626  00FFA3  20                 	db	32
   627  00FFA4  20                 	db	32
   628  00FFA5  2A                 	db	42
   629  00FFA6  3E                 	db	62	;'>'
   630  00FFA7  00                 	db	0
   631  00FFA8  20                 	db	32
   632  00FFA9  20                 	db	32
   633  00FFAA  20                 	db	32
   634  00FFAB  73                 	db	115	;'s'
   635  00FFAC  74                 	db	116	;'t'
   636  00FFAD  61                 	db	97	;'a'
   637  00FFAE  74                 	db	116	;'t'
   638  00FFAF  73                 	db	115	;'s'
   639  00FFB0  20                 	db	32
   640  00FFB1  3C                 	db	60	;'<'
   641  00FFB2  42                 	db	66	;'B'
   642  00FFB3  20                 	db	32
   643  00FFB4  20                 	db	32
   644  00FFB5  20                 	db	32
   645  00FFB6  2A                 	db	42
   646  00FFB7  3E                 	db	62	;'>'
   647  00FFB8  00                 	db	0
   648  00FFB9  5B                 	db	91	;'['
   649  00FFBA  6E                 	db	110	;'n'
   650  00FFBB  6E                 	db	110	;'n'
   651  00FFBC  2C                 	db	44
   652  00FFBD  6E                 	db	110	;'n'
   653  00FFBE  2C                 	db	44
   654  00FFBF  6E                 	db	110	;'n'
   655  00FFC0  2C                 	db	44
   656  00FFC1  6E                 	db	110	;'n'
   657  00FFC2  6E                 	db	110	;'n'
   658  00FFC3  5D                 	db	93	;']'
   659  00FFC4  20                 	db	32
   660  00FFC5  20                 	db	32
   661  00FFC6  20                 	db	32
   662  00FFC7  2A                 	db	42
   663  00FFC8  3E                 	db	62	;'>'
   664  00FFC9  00                 	db	0
   665  00FFCA  20                 	db	32
   666  00FFCB  20                 	db	32
   667  00FFCC  6D                 	db	109	;'m'
   668  00FFCD  6D                 	db	109	;'m'
   669  00FFCE  3A                 	db	58	;':'
   670  00FFCF  64                 	db	100	;'d'
   671  00FFD0  64                 	db	100	;'d'
   672  00FFD1  3A                 	db	58	;':'
   673  00FFD2  79                 	db	121	;'y'
   674  00FFD3  79                 	db	121	;'y'
   675  00FFD4  20                 	db	32
   676  00FFD5  20                 	db	32
   677  00FFD6  20                 	db	32
   678  00FFD7  20                 	db	32
   679  00FFD8  41                 	db	65	;'A'
   680  00FFD9  3E                 	db	62	;'>'
   681  00FFDA  00                 	db	0
   682  00FFDB                     STR_3:
   683  00FFDB  61                 	db	97	;'a'
   684  00FFDC  6E                 	db	110	;'n'
   685  00FFDD  67                 	db	103	;'g'
   686  00FFDE  6C                 	db	108	;'l'
   687  00FFDF  65                 	db	101	;'e'
   688  00FFE0  3A                 	db	58	;':'
   689  00FFE1  20                 	db	32
   690  00FFE2  25                 	db	37
   691  00FFE3  64                 	db	100	;'d'
   692  00FFE4  00                 	db	0
   693  00FFE5  5B                 	db	91	;'['
   694  00FFE6  25                 	db	37
   695  00FFE7  78                 	db	120	;'x'
   696  00FFE8  20                 	db	32
   697  00FFE9  25                 	db	37
   698  00FFEA  78                 	db	120	;'x'
   699  00FFEB  5D                 	db	93	;']'
   700  00FFEC  0A                 	db	10
   701  00FFED  00                 	db	0
   702  00FFEE  74                 	db	116	;'t'
   703  00FFEF  31                 	db	49	;'1'
   704  00FFF0  3A                 	db	58	;':'
   705  00FFF1  20                 	db	32
   706  00FFF2  25                 	db	37
   707  00FFF3  78                 	db	120	;'x'
   708  00FFF4  20                 	db	32
   709  00FFF5  00                 	db	0
   710  00FFF6                     STR_1:
   711  00FFF6  72                 	db	114	;'r'
   712  00FFF7  75                 	db	117	;'u'
   713  00FFF8  6E                 	db	110	;'n'
   714  00FFF9  6E                 	db	110	;'n'
   715  00FFFA  69                 	db	105	;'i'
   716  00FFFB  6E                 	db	110	;'n'
   717  00FFFC  67                 	db	103	;'g'
   718  00FFFD  00                 	db	0
   719                           
   720                           ; #config settings
   721  00FFFE  00                 	db	0	; dummy byte at the end
   722  0000                     
   723                           	psect	cinit
   724  00466C                     __pcinit:
   725                           	opt stack 0
   726  00466C                     start_initialization:
   727                           	opt stack 0
   728  00466C                     __initialization:
   729                           	opt stack 0
   730                           
   731                           ; Initialize objects allocated to BANK1 (51 bytes)
   732                           ; load TBLPTR registers with __pidataBANK1
   733  00466C  0EEC               	movlw	low __pidataBANK1
   734  00466E  6EF6               	movwf	tblptrl,c
   735  004670  0E4A               	movlw	high __pidataBANK1
   736  004672  6EF7               	movwf	tblptrh,c
   737  004674  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   738  004676  6EF8               	movwf	tblptru,c
   739  004678  EE01  F000         	lfsr	0,__pdataBANK1
   740  00467C  EE10 F033          	lfsr	1,51
   741  004680                     copy_data0:
   742  004680  0009               	tblrd		*+
   743  004682  CFF5 FFEE          	movff	tablat,postinc0
   744  004686  50E5               	movf	postdec1,w,c
   745  004688  50E1               	movf	fsr1l,w,c
   746  00468A  E1FA               	bnz	copy_data0
   747                           
   748                           ; Initialize objects allocated to COMRAM (2 bytes)
   749                           ; load TBLPTR registers with __pidataCOMRAM
   750  00468C  0E7A               	movlw	low __pidataCOMRAM
   751  00468E  6EF6               	movwf	tblptrl,c
   752  004690  0E4C               	movlw	high __pidataCOMRAM
   753  004692  6EF7               	movwf	tblptrh,c
   754  004694  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   755  004696  6EF8               	movwf	tblptru,c
   756  004698  0009               	tblrd		*+	;fetch initializer
   757  00469A  CFF5 F07A          	movff	tablat,__pdataCOMRAM
   758  00469E  0009               	tblrd		*+	;fetch initializer
   759  0046A0  CFF5 F07B          	movff	tablat,__pdataCOMRAM+1
   760                           
   761                           ; Clear objects allocated to BANK1 (16 bytes)
   762  0046A4  EE01  F063         	lfsr	0,__pbssBANK1
   763  0046A8  0E10               	movlw	16
   764  0046AA                     clear_0:
   765  0046AA  6AEE               	clrf	postinc0,c
   766  0046AC  06E8               	decf	wreg,f,c
   767  0046AE  E1FD               	bnz	clear_0
   768                           
   769                           ; Clear objects allocated to BANK0 (8 bytes)
   770  0046B0  EE00  F0EA         	lfsr	0,__pbssBANK0
   771  0046B4  0E08               	movlw	8
   772  0046B6                     clear_1:
   773  0046B6  6AEE               	clrf	postinc0,c
   774  0046B8  06E8               	decf	wreg,f,c
   775  0046BA  E1FD               	bnz	clear_1
   776                           
   777                           ; Clear objects allocated to COMRAM (7 bytes)
   778  0046BC  EE00  F073         	lfsr	0,__pbssCOMRAM
   779  0046C0  0E07               	movlw	7
   780  0046C2                     clear_2:
   781  0046C2  6AEE               	clrf	postinc0,c
   782  0046C4  06E8               	decf	wreg,f,c
   783  0046C6  E1FD               	bnz	clear_2
   784  0046C8                     end_of_initialization:
   785                           	opt stack 0
   786  0046C8                     __end_of__initialization:
   787                           	opt stack 0
   788  0046C8  907C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   789  0046CA  927C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   790  0046CC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   791  0046CE  6EF8               	movwf	tblptru,c
   792  0046D0  0100               	movlb	0
   793  0046D2  EF9C  F020         	goto	_main	;jump to C main() function
   794                           tblptru	equ	0xFF8
   795                           tblptrh	equ	0xFF7
   796                           tblptrl	equ	0xFF6
   797                           tablat	equ	0xFF5
   798                           postinc0	equ	0xFEE
   799                           wreg	equ	0xFE8
   800                           postdec1	equ	0xFE5
   801                           fsr1l	equ	0xFE1
   802                           
   803                           	psect	bssCOMRAM
   804  000073                     __pbssCOMRAM:
   805                           	opt stack 0
   806  000073                     _count:
   807                           	opt stack 0
   808  000073                     	ds	2
   809  000075                     _curr:
   810                           	opt stack 0
   811  000075                     	ds	2
   812  000077                     _prevTime:
   813                           	opt stack 0
   814  000077                     	ds	2
   815  000079                     _lastKey:
   816                           	opt stack 0
   817  000079                     	ds	1
   818                           tblptru	equ	0xFF8
   819                           tblptrh	equ	0xFF7
   820                           tblptrl	equ	0xFF6
   821                           tablat	equ	0xFF5
   822                           postinc0	equ	0xFEE
   823                           wreg	equ	0xFE8
   824                           postdec1	equ	0xFE5
   825                           fsr1l	equ	0xFE1
   826                           
   827                           	psect	dataCOMRAM
   828  00007A                     __pdataCOMRAM:
   829                           	opt stack 0
   830  00007A                     _angle:
   831                           	opt stack 0
   832  00007A                     	ds	2
   833                           tblptru	equ	0xFF8
   834                           tblptrh	equ	0xFF7
   835                           tblptrl	equ	0xFF6
   836                           tablat	equ	0xFF5
   837                           postinc0	equ	0xFEE
   838                           wreg	equ	0xFE8
   839                           postdec1	equ	0xFE5
   840                           fsr1l	equ	0xFE1
   841                           
   842                           	psect	bssBANK0
   843  0000EA                     __pbssBANK0:
   844                           	opt stack 0
   845  0000EA                     _pulse:
   846                           	opt stack 0
   847  0000EA                     	ds	8
   848                           tblptru	equ	0xFF8
   849                           tblptrh	equ	0xFF7
   850                           tblptrl	equ	0xFF6
   851                           tablat	equ	0xFF5
   852                           postinc0	equ	0xFEE
   853                           wreg	equ	0xFE8
   854                           postdec1	equ	0xFE5
   855                           fsr1l	equ	0xFE1
   856                           
   857                           	psect	bssBANK1
   858  000163                     __pbssBANK1:
   859                           	opt stack 0
   860  000163                     _servos:
   861                           	opt stack 0
   862  000163                     	ds	8
   863  00016B                     _padPin3:
   864                           	opt stack 0
   865  00016B                     	ds	4
   866  00016F                     _batteryDetected:
   867                           	opt stack 0
   868  00016F                     	ds	2
   869  000171                     _n:
   870                           	opt stack 0
   871  000171                     	ds	2
   872                           tblptru	equ	0xFF8
   873                           tblptrh	equ	0xFF7
   874                           tblptrl	equ	0xFF6
   875                           tablat	equ	0xFF5
   876                           postinc0	equ	0xFEE
   877                           wreg	equ	0xFE8
   878                           postdec1	equ	0xFE5
   879                           fsr1l	equ	0xFE1
   880                           
   881                           	psect	dataBANK1
   882  000100                     __pdataBANK1:
   883                           	opt stack 0
   884  000100                     _V_LIM_9V:
   885                           	opt stack 0
   886  000100                     	ds	3
   887  000103                     _V_LIM_AA:
   888                           	opt stack 0
   889  000103                     	ds	3
   890  000106                     _V_LIM_C:
   891                           	opt stack 0
   892  000106                     	ds	3
   893  000109                     _padAngle_CLOSE:
   894                           	opt stack 0
   895  000109                     	ds	2
   896  00010B                     _padAngle_NEUTRAL:
   897                           	opt stack 0
   898  00010B                     	ds	2
   899  00010D                     _padAngle_OPEN:
   900                           	opt stack 0
   901  00010D                     	ds	2
   902  00010F                     _redirectAngle_9V:
   903                           	opt stack 0
   904  00010F                     	ds	2
   905  000111                     _redirectAngle_AA:
   906                           	opt stack 0
   907  000111                     	ds	2
   908  000113                     _redirectAngle_C:
   909                           	opt stack 0
   910  000113                     	ds	2
   911  000115                     _redirectAngle_OTHER:
   912                           	opt stack 0
   913  000115                     	ds	2
   914  000117                     _AA_float:
   915                           	opt stack 0
   916  000117                     	ds	4
   917  00011B                     _conveyorServo:
   918                           	opt stack 0
   919  00011B                     	ds	4
   920  00011F                     _cylinderMotor:
   921                           	opt stack 0
   922  00011F                     	ds	4
   923  000123                     _padPin1:
   924                           	opt stack 0
   925  000123                     	ds	4
   926  000127                     _padPin2:
   927                           	opt stack 0
   928  000127                     	ds	4
   929  00012B                     _padServo:
   930                           	opt stack 0
   931  00012B                     	ds	4
   932  00012F                     _redirectingServo:
   933                           	opt stack 0
   934  00012F                     	ds	4
   935                           tblptru	equ	0xFF8
   936                           tblptrh	equ	0xFF7
   937                           tblptrl	equ	0xFF6
   938                           tablat	equ	0xFF5
   939                           postinc0	equ	0xFEE
   940                           wreg	equ	0xFE8
   941                           postdec1	equ	0xFE5
   942                           fsr1l	equ	0xFE1
   943                           
   944                           	psect	cstackBANK1
   945  000133                     __pcstackBANK1:
   946                           	opt stack 0
   947  000133                     ??_printf:
   948  000133                     ??_angleToPulse:
   949                           
   950                           ; 1 bytes @ 0x0
   951  000133                     	ds	4
   952  000137                     angleToPulse@offset:
   953                           	opt stack 0
   954                           
   955                           ; 4 bytes @ 0x4
   956  000137                     	ds	2
   957  000139                     _printf$1315:
   958                           	opt stack 0
   959                           
   960                           ; 3 bytes @ 0x6
   961  000139                     	ds	2
   962  00013B                     angleToPulse@a180:
   963                           	opt stack 0
   964                           
   965                           ; 4 bytes @ 0x8
   966  00013B                     	ds	1
   967  00013C                     printf@idx:
   968                           	opt stack 0
   969                           
   970                           ; 1 bytes @ 0x9
   971  00013C                     	ds	1
   972  00013D                     printf@ap:
   973                           	opt stack 0
   974                           
   975                           ; 2 bytes @ 0xA
   976  00013D                     	ds	2
   977  00013F                     printf@flag:
   978                           	opt stack 0
   979  00013F                     _angleToPulse$1311:
   980                           	opt stack 0
   981                           
   982                           ; 3 bytes @ 0xC
   983  00013F                     	ds	2
   984  000141                     printf@prec:
   985                           	opt stack 0
   986                           
   987                           ; 2 bytes @ 0xE
   988  000141                     	ds	1
   989  000142                     angleToPulse@a000:
   990                           	opt stack 0
   991                           
   992                           ; 4 bytes @ 0xF
   993  000142                     	ds	1
   994  000143                     printf@exp:
   995                           	opt stack 0
   996                           
   997                           ; 2 bytes @ 0x10
   998  000143                     	ds	2
   999  000145                     printf@tmpval:
  1000                           	opt stack 0
  1001                           
  1002                           ; 4 bytes @ 0x12
  1003  000145                     	ds	1
  1004  000146                     setAngle@motor:
  1005                           	opt stack 0
  1006                           
  1007                           ; 2 bytes @ 0x13
  1008  000146                     	ds	2
  1009  000148                     setAngle@angle:
  1010                           	opt stack 0
  1011                           
  1012                           ; 2 bytes @ 0x15
  1013  000148                     	ds	1
  1014  000149                     printf@val:
  1015                           	opt stack 0
  1016                           
  1017                           ; 4 bytes @ 0x16
  1018  000149                     	ds	1
  1019  00014A                     setAngle@period:
  1020                           	opt stack 0
  1021                           
  1022                           ; 2 bytes @ 0x17
  1023  00014A                     	ds	2
  1024  00014C                     setAngle@i:
  1025                           	opt stack 0
  1026                           
  1027                           ; 2 bytes @ 0x19
  1028  00014C                     	ds	1
  1029  00014D                     printf@fval:
  1030                           	opt stack 0
  1031                           
  1032                           ; 3 bytes @ 0x1A
  1033  00014D                     	ds	1
  1034  00014E                     initServo@motor:
  1035                           	opt stack 0
  1036                           
  1037                           ; 2 bytes @ 0x1B
  1038  00014E                     	ds	2
  1039  000150                     printf@c:
  1040                           	opt stack 0
  1041  000150                     initServo@angle:
  1042                           	opt stack 0
  1043                           
  1044                           ; 2 bytes @ 0x1D
  1045  000150                     	ds	1
  1046  000151                     ??_sortBattery:
  1047                           
  1048                           ; 1 bytes @ 0x1E
  1049  000151                     	ds	1
  1050  000152                     ??_initServo:
  1051                           
  1052                           ; 1 bytes @ 0x1F
  1053  000152                     	ds	1
  1054  000153                     sortBattery@V_float:
  1055                           	opt stack 0
  1056                           
  1057                           ; 3 bytes @ 0x20
  1058  000153                     	ds	3
  1059  000156                     sortBattery@Vcc:
  1060                           	opt stack 0
  1061                           
  1062                           ; 3 bytes @ 0x23
  1063  000156                     	ds	3
  1064  000159                     sortBattery@resolution:
  1065                           	opt stack 0
  1066                           
  1067                           ; 3 bytes @ 0x26
  1068  000159                     	ds	3
  1069  00015C                     sortBattery@signal:
  1070                           	opt stack 0
  1071                           
  1072                           ; 2 bytes @ 0x29
  1073  00015C                     	ds	2
  1074  00015E                     sortBattery@targetAngle:
  1075                           	opt stack 0
  1076                           
  1077                           ; 2 bytes @ 0x2B
  1078  00015E                     	ds	2
  1079  000160                     sortBattery@V:
  1080                           	opt stack 0
  1081                           
  1082                           ; 3 bytes @ 0x2D
  1083  000160                     	ds	3
  1084                           tblptru	equ	0xFF8
  1085                           tblptrh	equ	0xFF7
  1086                           tblptrl	equ	0xFF6
  1087                           tablat	equ	0xFF5
  1088                           postinc0	equ	0xFEE
  1089                           wreg	equ	0xFE8
  1090                           postdec1	equ	0xFE5
  1091                           fsr1l	equ	0xFE1
  1092                           
  1093                           	psect	cstackBANK0
  1094  000080                     __pcstackBANK0:
  1095                           	opt stack 0
  1096  000080                     ??_service:
  1097                           
  1098                           ; 1 bytes @ 0x0
  1099  000080                     	ds	14
  1100  00008E                     ?_digitalRead:
  1101                           	opt stack 0
  1102  00008E                     ?___awmod:
  1103                           	opt stack 0
  1104  00008E                     ?___ftpack:
  1105                           	opt stack 0
  1106  00008E                     ?___ftneg:
  1107                           	opt stack 0
  1108  00008E                     ?_analogRead:
  1109                           	opt stack 0
  1110  00008E                     ?__tdiv_to_l_:
  1111                           	opt stack 0
  1112  00008E                     ?__div_to_l_:
  1113                           	opt stack 0
  1114  00008E                     ?___lldiv:
  1115                           	opt stack 0
  1116  00008E                     lcdNibble@temp:
  1117                           	opt stack 0
  1118  00008E                     readKeypad@key:
  1119                           	opt stack 0
  1120  00008E                     digitalRead@pin:
  1121                           	opt stack 0
  1122  00008E                     digitalWrite@pin:
  1123                           	opt stack 0
  1124  00008E                     analogRead@channel:
  1125                           	opt stack 0
  1126  00008E                     initTimer@timer:
  1127                           	opt stack 0
  1128  00008E                     startTimer@timer:
  1129                           	opt stack 0
  1130  00008E                     ___awmod@dividend:
  1131                           	opt stack 0
  1132  00008E                     __div_to_l_@f1:
  1133                           	opt stack 0
  1134  00008E                     ___ftpack@arg:
  1135                           	opt stack 0
  1136  00008E                     __tdiv_to_l_@f1:
  1137                           	opt stack 0
  1138  00008E                     ___ftge@ff1:
  1139                           	opt stack 0
  1140  00008E                     ___ftneg@f1:
  1141                           	opt stack 0
  1142  00008E                     ___lldiv@dividend:
  1143                           	opt stack 0
  1144                           
  1145                           ; 4 bytes @ 0xE
  1146  00008E                     	ds	1
  1147  00008F                     lcdNibble@data:
  1148                           	opt stack 0
  1149                           
  1150                           ; 1 bytes @ 0xF
  1151  00008F                     	ds	1
  1152  000090                     ??_digitalRead:
  1153  000090                     ??_lcdInst:
  1154  000090                     ??_initTimer:
  1155  000090                     digitalWrite@val:
  1156                           	opt stack 0
  1157  000090                     ___awmod@divisor:
  1158                           	opt stack 0
  1159  000090                     startTimer@val:
  1160                           	opt stack 0
  1161                           
  1162                           ; 4 bytes @ 0x10
  1163  000090                     	ds	1
  1164  000091                     lcdInst@data:
  1165                           	opt stack 0
  1166  000091                     ___ftpack@exp:
  1167                           	opt stack 0
  1168  000091                     __div_to_l_@f2:
  1169                           	opt stack 0
  1170  000091                     __tdiv_to_l_@f2:
  1171                           	opt stack 0
  1172  000091                     ___ftge@ff2:
  1173                           	opt stack 0
  1174                           
  1175                           ; 3 bytes @ 0x11
  1176  000091                     	ds	1
  1177  000092                     ??_initLCD:
  1178  000092                     ??_digitalWrite:
  1179  000092                     ??_analogRead:
  1180  000092                     putch@data:
  1181                           	opt stack 0
  1182  000092                     ___awmod@counter:
  1183                           	opt stack 0
  1184  000092                     ___ftpack@sign:
  1185                           	opt stack 0
  1186  000092                     ___lldiv@divisor:
  1187                           	opt stack 0
  1188                           
  1189                           ; 4 bytes @ 0x12
  1190  000092                     	ds	1
  1191  000093                     ??___ftpack:
  1192  000093                     ___awmod@sign:
  1193                           	opt stack 0
  1194                           
  1195                           ; 1 bytes @ 0x13
  1196  000093                     	ds	1
  1197  000094                     ??__tdiv_to_l_:
  1198  000094                     ??_startTimer:
  1199  000094                     ??___ftge:
  1200  000094                     ?___awdiv:
  1201                           	opt stack 0
  1202  000094                     ___awdiv@dividend:
  1203                           	opt stack 0
  1204  000094                     __div_to_l_@quot:
  1205                           	opt stack 0
  1206                           
  1207                           ; 4 bytes @ 0x14
  1208  000094                     	ds	1
  1209  000095                     digitalWrite@p:
  1210                           	opt stack 0
  1211                           
  1212                           ; 2 bytes @ 0x15
  1213  000095                     	ds	1
  1214  000096                     ?___altoft:
  1215                           	opt stack 0
  1216  000096                     ?___awtoft:
  1217                           	opt stack 0
  1218  000096                     ?___lltoft:
  1219                           	opt stack 0
  1220  000096                     ___awdiv@divisor:
  1221                           	opt stack 0
  1222  000096                     ___awtoft@c:
  1223                           	opt stack 0
  1224  000096                     ___altoft@c:
  1225                           	opt stack 0
  1226  000096                     ___lldiv@quotient:
  1227                           	opt stack 0
  1228  000096                     ___lltoft@c:
  1229                           	opt stack 0
  1230                           
  1231                           ; 4 bytes @ 0x16
  1232  000096                     	ds	1
  1233  000097                     __tdiv_to_l_@quot:
  1234                           	opt stack 0
  1235                           
  1236                           ; 4 bytes @ 0x17
  1237  000097                     	ds	1
  1238  000098                     ___awdiv@counter:
  1239                           	opt stack 0
  1240  000098                     __div_to_l_@cntr:
  1241                           	opt stack 0
  1242                           
  1243                           ; 1 bytes @ 0x18
  1244  000098                     	ds	1
  1245  000099                     ___awdiv@sign:
  1246                           	opt stack 0
  1247  000099                     ___awtoft@sign:
  1248                           	opt stack 0
  1249  000099                     __div_to_l_@exp1:
  1250                           	opt stack 0
  1251                           
  1252                           ; 1 bytes @ 0x19
  1253  000099                     	ds	1
  1254  00009A                     ??___altoft:
  1255  00009A                     ??___lltoft:
  1256  00009A                     ___lldiv@counter:
  1257                           	opt stack 0
  1258  00009A                     ___awdiv@quotient:
  1259                           	opt stack 0
  1260                           
  1261                           ; 2 bytes @ 0x1A
  1262  00009A                     	ds	1
  1263  00009B                     ?___llmod:
  1264                           	opt stack 0
  1265  00009B                     __tdiv_to_l_@cntr:
  1266                           	opt stack 0
  1267  00009B                     ___llmod@dividend:
  1268                           	opt stack 0
  1269                           
  1270                           ; 4 bytes @ 0x1B
  1271  00009B                     	ds	1
  1272  00009C                     ?___wmul:
  1273                           	opt stack 0
  1274  00009C                     __tdiv_to_l_@exp1:
  1275                           	opt stack 0
  1276  00009C                     ___wmul@multiplier:
  1277                           	opt stack 0
  1278                           
  1279                           ; 2 bytes @ 0x1C
  1280  00009C                     	ds	2
  1281  00009E                     ___altoft@exp:
  1282                           	opt stack 0
  1283  00009E                     ___lltoft@exp:
  1284                           	opt stack 0
  1285  00009E                     ___wmul@multiplicand:
  1286                           	opt stack 0
  1287                           
  1288                           ; 2 bytes @ 0x1E
  1289  00009E                     	ds	1
  1290  00009F                     ___altoft@sign:
  1291                           	opt stack 0
  1292  00009F                     ___llmod@divisor:
  1293                           	opt stack 0
  1294                           
  1295                           ; 4 bytes @ 0x1F
  1296  00009F                     	ds	1
  1297  0000A0                     ?___ftdiv:
  1298                           	opt stack 0
  1299  0000A0                     ___wmul@product:
  1300                           	opt stack 0
  1301  0000A0                     ___ftdiv@f1:
  1302                           	opt stack 0
  1303                           
  1304                           ; 3 bytes @ 0x20
  1305  0000A0                     	ds	3
  1306  0000A3                     ___llmod@counter:
  1307                           	opt stack 0
  1308  0000A3                     ___ftdiv@f2:
  1309                           	opt stack 0
  1310                           
  1311                           ; 3 bytes @ 0x23
  1312  0000A3                     	ds	3
  1313  0000A6                     ??___ftdiv:
  1314                           
  1315                           ; 1 bytes @ 0x26
  1316  0000A6                     	ds	3
  1317  0000A9                     ___ftdiv@cntr:
  1318                           	opt stack 0
  1319                           
  1320                           ; 1 bytes @ 0x29
  1321  0000A9                     	ds	1
  1322  0000AA                     ___ftdiv@f3:
  1323                           	opt stack 0
  1324                           
  1325                           ; 3 bytes @ 0x2A
  1326  0000AA                     	ds	3
  1327  0000AD                     ___ftdiv@exp:
  1328                           	opt stack 0
  1329                           
  1330                           ; 1 bytes @ 0x2D
  1331  0000AD                     	ds	1
  1332  0000AE                     ___ftdiv@sign:
  1333                           	opt stack 0
  1334                           
  1335                           ; 1 bytes @ 0x2E
  1336  0000AE                     	ds	1
  1337  0000AF                     ?___ftmul:
  1338                           	opt stack 0
  1339  0000AF                     ___ftmul@f1:
  1340                           	opt stack 0
  1341                           
  1342                           ; 3 bytes @ 0x2F
  1343  0000AF                     	ds	3
  1344  0000B2                     ___ftmul@f2:
  1345                           	opt stack 0
  1346                           
  1347                           ; 3 bytes @ 0x32
  1348  0000B2                     	ds	3
  1349  0000B5                     ??___ftmul:
  1350                           
  1351                           ; 1 bytes @ 0x35
  1352  0000B5                     	ds	3
  1353  0000B8                     ___ftmul@exp:
  1354                           	opt stack 0
  1355                           
  1356                           ; 1 bytes @ 0x38
  1357  0000B8                     	ds	1
  1358  0000B9                     ___ftmul@f3_as_product:
  1359                           	opt stack 0
  1360                           
  1361                           ; 3 bytes @ 0x39
  1362  0000B9                     	ds	3
  1363  0000BC                     ___ftmul@cntr:
  1364                           	opt stack 0
  1365                           
  1366                           ; 1 bytes @ 0x3C
  1367  0000BC                     	ds	1
  1368  0000BD                     ___ftmul@sign:
  1369                           	opt stack 0
  1370                           
  1371                           ; 1 bytes @ 0x3D
  1372  0000BD                     	ds	1
  1373  0000BE                     ?_fround:
  1374                           	opt stack 0
  1375  0000BE                     ?_scale:
  1376                           	opt stack 0
  1377                           
  1378                           ; 3 bytes @ 0x3E
  1379  0000BE                     	ds	3
  1380  0000C1                     _fround$1313:
  1381                           	opt stack 0
  1382  0000C1                     _scale$1314:
  1383                           	opt stack 0
  1384                           
  1385                           ; 3 bytes @ 0x41
  1386  0000C1                     	ds	3
  1387  0000C4                     scale@scl:
  1388                           	opt stack 0
  1389  0000C4                     _fround$1312:
  1390                           	opt stack 0
  1391                           
  1392                           ; 3 bytes @ 0x44
  1393  0000C4                     	ds	3
  1394  0000C7                     fround@prec:
  1395                           	opt stack 0
  1396                           
  1397                           ; 1 bytes @ 0x47
  1398  0000C7                     	ds	1
  1399  0000C8                     ?___ftadd:
  1400                           	opt stack 0
  1401  0000C8                     ___ftadd@f1:
  1402                           	opt stack 0
  1403                           
  1404                           ; 3 bytes @ 0x48
  1405  0000C8                     	ds	3
  1406  0000CB                     ___ftadd@f2:
  1407                           	opt stack 0
  1408                           
  1409                           ; 3 bytes @ 0x4B
  1410  0000CB                     	ds	3
  1411  0000CE                     ??___ftadd:
  1412                           
  1413                           ; 1 bytes @ 0x4E
  1414  0000CE                     	ds	3
  1415  0000D1                     ___ftadd@sign:
  1416                           	opt stack 0
  1417                           
  1418                           ; 1 bytes @ 0x51
  1419  0000D1                     	ds	1
  1420  0000D2                     ___ftadd@exp2:
  1421                           	opt stack 0
  1422                           
  1423                           ; 1 bytes @ 0x52
  1424  0000D2                     	ds	1
  1425  0000D3                     ___ftadd@exp1:
  1426                           	opt stack 0
  1427                           
  1428                           ; 1 bytes @ 0x53
  1429  0000D3                     	ds	1
  1430  0000D4                     ?___ftsub:
  1431                           	opt stack 0
  1432  0000D4                     ?___fttol:
  1433                           	opt stack 0
  1434  0000D4                     ___ftsub@f1:
  1435                           	opt stack 0
  1436  0000D4                     ___fttol@f1:
  1437                           	opt stack 0
  1438                           
  1439                           ; 3 bytes @ 0x54
  1440  0000D4                     	ds	3
  1441  0000D7                     ___ftsub@f2:
  1442                           	opt stack 0
  1443                           
  1444                           ; 3 bytes @ 0x57
  1445  0000D7                     	ds	1
  1446  0000D8                     ??___fttol:
  1447                           
  1448                           ; 1 bytes @ 0x58
  1449  0000D8                     	ds	2
  1450  0000DA                     
  1451                           ; 1 bytes @ 0x5A
  1452  0000DA                     	ds	3
  1453  0000DD                     ___fttol@sign1:
  1454                           	opt stack 0
  1455                           
  1456                           ; 1 bytes @ 0x5D
  1457  0000DD                     	ds	1
  1458  0000DE                     ___fttol@lval:
  1459                           	opt stack 0
  1460                           
  1461                           ; 4 bytes @ 0x5E
  1462  0000DE                     	ds	4
  1463  0000E2                     ___fttol@exp1:
  1464                           	opt stack 0
  1465                           
  1466                           ; 1 bytes @ 0x62
  1467  0000E2                     	ds	1
  1468  0000E3                     ?_printf:
  1469                           	opt stack 0
  1470  0000E3                     ?_angleToPulse:
  1471                           	opt stack 0
  1472  0000E3                     angleToPulse@angle:
  1473                           	opt stack 0
  1474  0000E3                     printf@f:
  1475                           	opt stack 0
  1476                           
  1477                           ; 2 bytes @ 0x63
  1478  0000E3                     	ds	4
  1479  0000E7                     ??_setAngle:
  1480                           
  1481                           ; 1 bytes @ 0x67
  1482  0000E7                     	ds	3
  1483  0000EA                     tblptru	equ	0xFF8
  1484                           tblptrh	equ	0xFF7
  1485                           tblptrl	equ	0xFF6
  1486                           tablat	equ	0xFF5
  1487                           postinc0	equ	0xFEE
  1488                           wreg	equ	0xFE8
  1489                           postdec1	equ	0xFE5
  1490                           fsr1l	equ	0xFE1
  1491                           
  1492                           ; 1 bytes @ 0x6A
  1493                           
  1494                           	psect	cstackCOMRAM
  1495  000001                     __pcstackCOMRAM:
  1496                           	opt stack 0
  1497  000001                     ?i2___awmod:
  1498                           	opt stack 0
  1499  000001                     ?i2___ftpack:
  1500                           	opt stack 0
  1501  000001                     ?i2___ftneg:
  1502                           	opt stack 0
  1503  000001                     ?i2__div_to_l_:
  1504                           	opt stack 0
  1505  000001                     ?i2__tdiv_to_l_:
  1506                           	opt stack 0
  1507  000001                     ?i2___lldiv:
  1508                           	opt stack 0
  1509  000001                     i2lcdNibble@temp:
  1510                           	opt stack 0
  1511  000001                     i2___awmod@dividend:
  1512                           	opt stack 0
  1513  000001                     i2__div_to_l_@f1:
  1514                           	opt stack 0
  1515  000001                     i2___ftpack@arg:
  1516                           	opt stack 0
  1517  000001                     i2__tdiv_to_l_@f1:
  1518                           	opt stack 0
  1519  000001                     i2___ftge@ff1:
  1520                           	opt stack 0
  1521  000001                     i2___ftneg@f1:
  1522                           	opt stack 0
  1523  000001                     i2___lldiv@dividend:
  1524                           	opt stack 0
  1525                           
  1526                           ; 4 bytes @ 0x0
  1527  000001                     	ds	1
  1528  000002                     i2lcdNibble@data:
  1529                           	opt stack 0
  1530                           
  1531                           ; 1 bytes @ 0x1
  1532  000002                     	ds	1
  1533  000003                     ??i2_lcdInst:
  1534  000003                     i2___awmod@divisor:
  1535                           	opt stack 0
  1536                           
  1537                           ; 2 bytes @ 0x2
  1538  000003                     	ds	1
  1539  000004                     i2lcdInst@data:
  1540                           	opt stack 0
  1541  000004                     i2___ftpack@exp:
  1542                           	opt stack 0
  1543  000004                     i2__div_to_l_@f2:
  1544                           	opt stack 0
  1545  000004                     i2__tdiv_to_l_@f2:
  1546                           	opt stack 0
  1547  000004                     i2___ftge@ff2:
  1548                           	opt stack 0
  1549                           
  1550                           ; 3 bytes @ 0x3
  1551  000004                     	ds	1
  1552  000005                     i2putch@data:
  1553                           	opt stack 0
  1554  000005                     i2___awmod@counter:
  1555                           	opt stack 0
  1556  000005                     i2___ftpack@sign:
  1557                           	opt stack 0
  1558  000005                     i2___lldiv@divisor:
  1559                           	opt stack 0
  1560                           
  1561                           ; 4 bytes @ 0x4
  1562  000005                     	ds	1
  1563  000006                     ??i2___ftpack:
  1564  000006                     i2___awmod@sign:
  1565                           	opt stack 0
  1566                           
  1567                           ; 1 bytes @ 0x5
  1568  000006                     	ds	1
  1569  000007                     ??i2__tdiv_to_l_:
  1570  000007                     ??i2___ftge:
  1571  000007                     ?i2___awdiv:
  1572                           	opt stack 0
  1573  000007                     i2digitalWrite@pin:
  1574                           	opt stack 0
  1575  000007                     i2startTimer@timer:
  1576                           	opt stack 0
  1577  000007                     i2___awdiv@dividend:
  1578                           	opt stack 0
  1579  000007                     i2__div_to_l_@quot:
  1580                           	opt stack 0
  1581                           
  1582                           ; 4 bytes @ 0x6
  1583  000007                     	ds	2
  1584  000009                     ?i2___altoft:
  1585                           	opt stack 0
  1586  000009                     ?i2___awtoft:
  1587                           	opt stack 0
  1588  000009                     ?i2___lltoft:
  1589                           	opt stack 0
  1590  000009                     i2digitalWrite@val:
  1591                           	opt stack 0
  1592  000009                     i2___awdiv@divisor:
  1593                           	opt stack 0
  1594  000009                     i2___awtoft@c:
  1595                           	opt stack 0
  1596  000009                     i2startTimer@val:
  1597                           	opt stack 0
  1598  000009                     i2___altoft@c:
  1599                           	opt stack 0
  1600  000009                     i2___lldiv@quotient:
  1601                           	opt stack 0
  1602  000009                     i2___lltoft@c:
  1603                           	opt stack 0
  1604                           
  1605                           ; 4 bytes @ 0x8
  1606  000009                     	ds	1
  1607  00000A                     i2__tdiv_to_l_@quot:
  1608                           	opt stack 0
  1609                           
  1610                           ; 4 bytes @ 0x9
  1611  00000A                     	ds	1
  1612  00000B                     ??i2_digitalWrite:
  1613  00000B                     i2___awdiv@counter:
  1614                           	opt stack 0
  1615  00000B                     i2__div_to_l_@cntr:
  1616                           	opt stack 0
  1617                           
  1618                           ; 1 bytes @ 0xA
  1619  00000B                     	ds	1
  1620  00000C                     i2___awdiv@sign:
  1621                           	opt stack 0
  1622  00000C                     i2___awtoft@sign:
  1623                           	opt stack 0
  1624  00000C                     i2__div_to_l_@exp1:
  1625                           	opt stack 0
  1626                           
  1627                           ; 1 bytes @ 0xB
  1628  00000C                     	ds	1
  1629  00000D                     ??i2_startTimer:
  1630  00000D                     ??i2___altoft:
  1631  00000D                     ??i2___lltoft:
  1632  00000D                     ?i2___ftdiv:
  1633                           	opt stack 0
  1634  00000D                     i2___lldiv@counter:
  1635                           	opt stack 0
  1636  00000D                     i2___awdiv@quotient:
  1637                           	opt stack 0
  1638  00000D                     i2___ftdiv@f1:
  1639                           	opt stack 0
  1640                           
  1641                           ; 3 bytes @ 0xC
  1642  00000D                     	ds	1
  1643  00000E                     ?i2___llmod:
  1644                           	opt stack 0
  1645  00000E                     i2__tdiv_to_l_@cntr:
  1646                           	opt stack 0
  1647  00000E                     i2digitalWrite@p:
  1648                           	opt stack 0
  1649  00000E                     i2___llmod@dividend:
  1650                           	opt stack 0
  1651                           
  1652                           ; 4 bytes @ 0xD
  1653  00000E                     	ds	1
  1654  00000F                     ?i2___wmul:
  1655                           	opt stack 0
  1656  00000F                     i2__tdiv_to_l_@exp1:
  1657                           	opt stack 0
  1658  00000F                     i2___wmul@multiplier:
  1659                           	opt stack 0
  1660                           
  1661                           ; 2 bytes @ 0xE
  1662  00000F                     	ds	1
  1663  000010                     ??_servoInterruptService:
  1664  000010                     i2___ftdiv@f2:
  1665                           	opt stack 0
  1666                           
  1667                           ; 3 bytes @ 0xF
  1668  000010                     	ds	1
  1669  000011                     i2___altoft@exp:
  1670                           	opt stack 0
  1671  000011                     i2___lltoft@exp:
  1672                           	opt stack 0
  1673  000011                     i2___wmul@multiplicand:
  1674                           	opt stack 0
  1675                           
  1676                           ; 2 bytes @ 0x10
  1677  000011                     	ds	1
  1678  000012                     i2___altoft@sign:
  1679                           	opt stack 0
  1680  000012                     i2___llmod@divisor:
  1681                           	opt stack 0
  1682                           
  1683                           ; 4 bytes @ 0x11
  1684  000012                     	ds	1
  1685  000013                     ??i2___ftdiv:
  1686  000013                     i2___wmul@product:
  1687                           	opt stack 0
  1688                           
  1689                           ; 2 bytes @ 0x12
  1690  000013                     	ds	3
  1691  000016                     i2___ftdiv@cntr:
  1692                           	opt stack 0
  1693  000016                     i2___llmod@counter:
  1694                           	opt stack 0
  1695                           
  1696                           ; 1 bytes @ 0x15
  1697  000016                     	ds	1
  1698  000017                     i2___ftdiv@f3:
  1699                           	opt stack 0
  1700                           
  1701                           ; 3 bytes @ 0x16
  1702  000017                     	ds	3
  1703  00001A                     i2___ftdiv@exp:
  1704                           	opt stack 0
  1705                           
  1706                           ; 1 bytes @ 0x19
  1707  00001A                     	ds	1
  1708  00001B                     i2___ftdiv@sign:
  1709                           	opt stack 0
  1710                           
  1711                           ; 1 bytes @ 0x1A
  1712  00001B                     	ds	1
  1713  00001C                     ?i2___ftmul:
  1714                           	opt stack 0
  1715  00001C                     i2___ftmul@f1:
  1716                           	opt stack 0
  1717                           
  1718                           ; 3 bytes @ 0x1B
  1719  00001C                     	ds	3
  1720  00001F                     i2___ftmul@f2:
  1721                           	opt stack 0
  1722                           
  1723                           ; 3 bytes @ 0x1E
  1724  00001F                     	ds	3
  1725  000022                     ??i2___ftmul:
  1726                           
  1727                           ; 1 bytes @ 0x21
  1728  000022                     	ds	3
  1729  000025                     i2___ftmul@exp:
  1730                           	opt stack 0
  1731                           
  1732                           ; 1 bytes @ 0x24
  1733  000025                     	ds	1
  1734  000026                     i2___ftmul@f3_as_product:
  1735                           	opt stack 0
  1736                           
  1737                           ; 3 bytes @ 0x25
  1738  000026                     	ds	3
  1739  000029                     i2___ftmul@cntr:
  1740                           	opt stack 0
  1741                           
  1742                           ; 1 bytes @ 0x28
  1743  000029                     	ds	1
  1744  00002A                     i2___ftmul@sign:
  1745                           	opt stack 0
  1746                           
  1747                           ; 1 bytes @ 0x29
  1748  00002A                     	ds	1
  1749  00002B                     ?i2_fround:
  1750                           	opt stack 0
  1751  00002B                     ?i2_scale:
  1752                           	opt stack 0
  1753                           
  1754                           ; 3 bytes @ 0x2A
  1755  00002B                     	ds	3
  1756  00002E                     i2_fround$1543:
  1757                           	opt stack 0
  1758  00002E                     i2_scale$1544:
  1759                           	opt stack 0
  1760                           
  1761                           ; 3 bytes @ 0x2D
  1762  00002E                     	ds	3
  1763  000031                     i2scale@scl:
  1764                           	opt stack 0
  1765  000031                     i2_fround$1542:
  1766                           	opt stack 0
  1767                           
  1768                           ; 3 bytes @ 0x30
  1769  000031                     	ds	3
  1770  000034                     i2fround@prec:
  1771                           	opt stack 0
  1772                           
  1773                           ; 1 bytes @ 0x33
  1774  000034                     	ds	1
  1775  000035                     ?i2___ftadd:
  1776                           	opt stack 0
  1777  000035                     i2___ftadd@f1:
  1778                           	opt stack 0
  1779                           
  1780                           ; 3 bytes @ 0x34
  1781  000035                     	ds	3
  1782  000038                     i2___ftadd@f2:
  1783                           	opt stack 0
  1784                           
  1785                           ; 3 bytes @ 0x37
  1786  000038                     	ds	3
  1787  00003B                     ??i2___ftadd:
  1788                           
  1789                           ; 1 bytes @ 0x3A
  1790  00003B                     	ds	3
  1791  00003E                     i2___ftadd@sign:
  1792                           	opt stack 0
  1793                           
  1794                           ; 1 bytes @ 0x3D
  1795  00003E                     	ds	1
  1796  00003F                     i2___ftadd@exp2:
  1797                           	opt stack 0
  1798                           
  1799                           ; 1 bytes @ 0x3E
  1800  00003F                     	ds	1
  1801  000040                     i2___ftadd@exp1:
  1802                           	opt stack 0
  1803                           
  1804                           ; 1 bytes @ 0x3F
  1805  000040                     	ds	1
  1806  000041                     ?i2___ftsub:
  1807                           	opt stack 0
  1808  000041                     ?i2___fttol:
  1809                           	opt stack 0
  1810  000041                     i2___ftsub@f1:
  1811                           	opt stack 0
  1812  000041                     i2___fttol@f1:
  1813                           	opt stack 0
  1814                           
  1815                           ; 3 bytes @ 0x40
  1816  000041                     	ds	3
  1817  000044                     i2___ftsub@f2:
  1818                           	opt stack 0
  1819                           
  1820                           ; 3 bytes @ 0x43
  1821  000044                     	ds	1
  1822  000045                     ??i2___fttol:
  1823                           
  1824                           ; 1 bytes @ 0x44
  1825  000045                     	ds	2
  1826  000047                     
  1827                           ; 1 bytes @ 0x46
  1828  000047                     	ds	3
  1829  00004A                     i2___fttol@sign1:
  1830                           	opt stack 0
  1831                           
  1832                           ; 1 bytes @ 0x49
  1833  00004A                     	ds	1
  1834  00004B                     i2___fttol@lval:
  1835                           	opt stack 0
  1836                           
  1837                           ; 4 bytes @ 0x4A
  1838  00004B                     	ds	4
  1839  00004F                     i2___fttol@exp1:
  1840                           	opt stack 0
  1841                           
  1842                           ; 1 bytes @ 0x4E
  1843  00004F                     	ds	1
  1844  000050                     ?i2_printf:
  1845                           	opt stack 0
  1846  000050                     ?i2_angleToPulse:
  1847                           	opt stack 0
  1848  000050                     i2angleToPulse@angle:
  1849                           	opt stack 0
  1850  000050                     i2printf@f:
  1851                           	opt stack 0
  1852                           
  1853                           ; 2 bytes @ 0x4F
  1854  000050                     	ds	4
  1855  000054                     ??i2_angleToPulse:
  1856  000054                     ??i2_printf:
  1857                           
  1858                           ; 1 bytes @ 0x53
  1859  000054                     	ds	4
  1860  000058                     i2angleToPulse@offset:
  1861                           	opt stack 0
  1862                           
  1863                           ; 4 bytes @ 0x57
  1864  000058                     	ds	2
  1865  00005A                     i2_printf$1545:
  1866                           	opt stack 0
  1867                           
  1868                           ; 3 bytes @ 0x59
  1869  00005A                     	ds	2
  1870  00005C                     i2angleToPulse@a180:
  1871                           	opt stack 0
  1872                           
  1873                           ; 4 bytes @ 0x5B
  1874  00005C                     	ds	1
  1875  00005D                     i2printf@idx:
  1876                           	opt stack 0
  1877                           
  1878                           ; 1 bytes @ 0x5C
  1879  00005D                     	ds	1
  1880  00005E                     i2printf@ap:
  1881                           	opt stack 0
  1882                           
  1883                           ; 2 bytes @ 0x5D
  1884  00005E                     	ds	2
  1885  000060                     i2printf@flag:
  1886                           	opt stack 0
  1887  000060                     i2_angleToPulse$1541:
  1888                           	opt stack 0
  1889                           
  1890                           ; 3 bytes @ 0x5F
  1891  000060                     	ds	2
  1892  000062                     i2printf@prec:
  1893                           	opt stack 0
  1894                           
  1895                           ; 2 bytes @ 0x61
  1896  000062                     	ds	1
  1897  000063                     i2angleToPulse@a000:
  1898                           	opt stack 0
  1899                           
  1900                           ; 4 bytes @ 0x62
  1901  000063                     	ds	1
  1902  000064                     i2printf@exp:
  1903                           	opt stack 0
  1904                           
  1905                           ; 2 bytes @ 0x63
  1906  000064                     	ds	2
  1907  000066                     i2printf@tmpval:
  1908                           	opt stack 0
  1909                           
  1910                           ; 4 bytes @ 0x65
  1911  000066                     	ds	1
  1912  000067                     i2setAngle@motor:
  1913                           	opt stack 0
  1914                           
  1915                           ; 2 bytes @ 0x66
  1916  000067                     	ds	2
  1917  000069                     i2setAngle@angle:
  1918                           	opt stack 0
  1919                           
  1920                           ; 2 bytes @ 0x68
  1921  000069                     	ds	1
  1922  00006A                     i2printf@val:
  1923                           	opt stack 0
  1924                           
  1925                           ; 4 bytes @ 0x69
  1926  00006A                     	ds	1
  1927  00006B                     ??i2_setAngle:
  1928                           
  1929                           ; 1 bytes @ 0x6A
  1930  00006B                     	ds	2
  1931  00006D                     i2setAngle@period:
  1932                           	opt stack 0
  1933                           
  1934                           ; 2 bytes @ 0x6C
  1935  00006D                     	ds	1
  1936  00006E                     i2printf@fval:
  1937                           	opt stack 0
  1938                           
  1939                           ; 3 bytes @ 0x6D
  1940  00006E                     	ds	1
  1941  00006F                     i2setAngle@i:
  1942                           	opt stack 0
  1943                           
  1944                           ; 2 bytes @ 0x6E
  1945  00006F                     	ds	2
  1946  000071                     i2printf@c:
  1947                           	opt stack 0
  1948                           
  1949                           ; 1 bytes @ 0x70
  1950  000071                     	ds	1
  1951  000072                     service@key:
  1952                           	opt stack 0
  1953                           
  1954                           ; 1 bytes @ 0x71
  1955  000072                     	ds	1
  1956                           tblptru	equ	0xFF8
  1957                           tblptrh	equ	0xFF7
  1958                           tblptrl	equ	0xFF6
  1959                           tablat	equ	0xFF5
  1960                           postinc0	equ	0xFEE
  1961                           wreg	equ	0xFE8
  1962                           postdec1	equ	0xFE5
  1963                           fsr1l	equ	0xFE1
  1964                           
  1965 ;;
  1966 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1967 ;;
  1968 ;; *************** function _main *****************
  1969 ;; Defined at:
  1970 ;;		line 90 in file "main.c"
  1971 ;; Parameters:    Size  Location     Type
  1972 ;;		None
  1973 ;; Auto vars:     Size  Location     Type
  1974 ;;		None
  1975 ;; Return value:  Size  Location     Type
  1976 ;;                  1    wreg      void 
  1977 ;; Registers used:
  1978 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1979 ;; Tracked objects:
  1980 ;;		On entry : 0/0
  1981 ;;		On exit  : 0/0
  1982 ;;		Unchanged: 0/0
  1983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1987 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1988 ;;Total ram usage:        0 bytes
  1989 ;; Hardware stack levels required when called:   12
  1990 ;; This function calls:
  1991 ;;		_digitalWrite
  1992 ;;		_initLCD
  1993 ;;		_initServo
  1994 ;;		_pinSetup
  1995 ;;		_printf
  1996 ;;		_sortBattery
  1997 ;; This function is called by:
  1998 ;;		Startup code after reset
  1999 ;; This function uses a non-reentrant model
  2000 ;;
  2001                           
  2002                           	psect	text0
  2003  004138                     __ptext0:
  2004                           	opt stack 0
  2005  004138                     _main:
  2006                           	opt stack 19
  2007                           
  2008                           ;main.c: 91: pinSetup();
  2009                           
  2010                           ;incstack = 0
  2011  004138  EC20  F025         	call	_pinSetup	;wreg free
  2012                           
  2013                           ;main.c: 92: initLCD();
  2014  00413C  EC98  F024         	call	_initLCD	;wreg free
  2015                           
  2016                           ;main.c: 98: digitalWrite(cylinderMotor, 1);
  2017                           
  2018                           ;main.c: 94: while(1){
  2019  004140  0E1F               	movlw	low _cylinderMotor
  2020  004142  0100               	movlb	0	; () banked
  2021  004144  6F8E               	movwf	digitalWrite@pin& (0+255),b
  2022  004146  0E01               	movlw	high _cylinderMotor
  2023  004148  0100               	movlb	0	; () banked
  2024  00414A  6F8F               	movwf	(digitalWrite@pin+1)& (0+255),b
  2025  00414C  0E00               	movlw	0
  2026  00414E  0100               	movlb	0	; () banked
  2027  004150  6F91               	movwf	(digitalWrite@val+1)& (0+255),b
  2028  004152  0E01               	movlw	1
  2029  004154  6F90               	movwf	digitalWrite@val& (0+255),b
  2030  004156  EC08  F01B         	call	_digitalWrite	;wreg free
  2031                           
  2032                           ;main.c: 99: initServo(conveyorServo, 0);
  2033  00415A  0E1B               	movlw	low _conveyorServo
  2034  00415C  0101               	movlb	1	; () banked
  2035  00415E  6F4E               	movwf	initServo@motor& (0+255),b
  2036  004160  0E01               	movlw	high _conveyorServo
  2037  004162  0101               	movlb	1	; () banked
  2038  004164  6F4F               	movwf	(initServo@motor+1)& (0+255),b
  2039  004166  0E00               	movlw	0
  2040  004168  0101               	movlb	1	; () banked
  2041  00416A  6F51               	movwf	(initServo@angle+1)& (0+255),b
  2042  00416C  0E00               	movlw	0
  2043  00416E  6F50               	movwf	initServo@angle& (0+255),b
  2044  004170  EC7E  F021         	call	_initServo	;wreg free
  2045                           
  2046                           ;main.c: 100: initServo(padServo, padAngle_NEUTRAL);
  2047  004174  0E2B               	movlw	low _padServo
  2048  004176  0101               	movlb	1	; () banked
  2049  004178  6F4E               	movwf	initServo@motor& (0+255),b
  2050  00417A  0E01               	movlw	high _padServo
  2051  00417C  0101               	movlb	1	; () banked
  2052  00417E  6F4F               	movwf	(initServo@motor+1)& (0+255),b
  2053  004180  C10B  F150         	movff	_padAngle_NEUTRAL,initServo@angle
  2054  004184  C10C  F151         	movff	_padAngle_NEUTRAL+1,initServo@angle+1
  2055  004188  EC7E  F021         	call	_initServo	;wreg free
  2056                           
  2057                           ;main.c: 101: initServo(redirectingServo, redirectAngle_AA);
  2058  00418C  0E2F               	movlw	low _redirectingServo
  2059  00418E  0101               	movlb	1	; () banked
  2060  004190  6F4E               	movwf	initServo@motor& (0+255),b
  2061  004192  0E01               	movlw	high _redirectingServo
  2062  004194  0101               	movlb	1	; () banked
  2063  004196  6F4F               	movwf	(initServo@motor+1)& (0+255),b
  2064  004198  C111  F150         	movff	_redirectAngle_AA,initServo@angle
  2065  00419C  C112  F151         	movff	_redirectAngle_AA+1,initServo@angle+1
  2066  0041A0  EC7E  F021         	call	_initServo	;wreg free
  2067  0041A4                     l6830:
  2068                           
  2069                           ;main.c: 106: printf("running");
  2070  0041A4  0EF6               	movlw	low STR_1
  2071  0041A6  0100               	movlb	0	; () banked
  2072  0041A8  6FE3               	movwf	printf@f& (0+255),b
  2073  0041AA  0EFF               	movlw	high STR_1
  2074  0041AC  0100               	movlb	0	; () banked
  2075  0041AE  6FE4               	movwf	(printf@f+1)& (0+255),b
  2076  0041B0  EC09  F000         	call	_printf	;wreg free
  2077  0041B4                     l6832:
  2078  0041B4  0101               	movlb	1	; () banked
  2079  0041B6  516F               	movf	_batteryDetected& (0+255),w,b
  2080  0041B8  0101               	movlb	1	; () banked
  2081  0041BA  1170               	iorwf	(_batteryDetected+1)& (0+255),w,b
  2082  0041BC  B4D8               	btfsc	status,2,c
  2083  0041BE  D7FA               	goto	l6832
  2084                           
  2085                           ; BSR set to: 1
  2086                           ;main.c: 110: sortBattery();
  2087                           
  2088                           ; BSR set to: 1
  2089  0041C0  ECFD  F00C         	call	_sortBattery	;wreg free
  2090                           
  2091                           ;main.c: 113: batteryDetected = 0;
  2092  0041C4  0E00               	movlw	0
  2093  0041C6  0101               	movlb	1	; () banked
  2094  0041C8  6F70               	movwf	(_batteryDetected+1)& (0+255),b
  2095  0041CA  0E00               	movlw	0
  2096  0041CC  6F6F               	movwf	_batteryDetected& (0+255),b
  2097                           
  2098                           ; BSR set to: 1
  2099  0041CE  D7EA               	goto	l6830
  2100  0041D0                     l114:
  2101  0041D0  D7FF               	goto	l114
  2102  0041D2                     __end_of_main:
  2103                           	opt stack 0
  2104                           tblptru	equ	0xFF8
  2105                           tblptrh	equ	0xFF7
  2106                           tblptrl	equ	0xFF6
  2107                           tablat	equ	0xFF5
  2108                           postinc0	equ	0xFEE
  2109                           wreg	equ	0xFE8
  2110                           postdec1	equ	0xFE5
  2111                           fsr1l	equ	0xFE1
  2112                           status	equ	0xFD8
  2113                           
  2114 ;; *************** function _sortBattery *****************
  2115 ;; Defined at:
  2116 ;;		line 125 in file "main.c"
  2117 ;; Parameters:    Size  Location     Type
  2118 ;;		None
  2119 ;; Auto vars:     Size  Location     Type
  2120 ;;  V_float         3   32[BANK1 ] float 
  2121 ;;  V               3   45[BANK1 ] float 
  2122 ;;  resolution      3   38[BANK1 ] float 
  2123 ;;  Vcc             3   35[BANK1 ] float 
  2124 ;;  targetAngle     2   43[BANK1 ] int 
  2125 ;;  signal          2   41[BANK1 ] int 
  2126 ;; Return value:  Size  Location     Type
  2127 ;;                  1    wreg      void 
  2128 ;; Registers used:
  2129 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2130 ;; Tracked objects:
  2131 ;;		On entry : 0/0
  2132 ;;		On exit  : 0/0
  2133 ;;		Unchanged: 0/0
  2134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2136 ;;      Locals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2137 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2138 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2139 ;;Total ram usage:       18 bytes
  2140 ;; Hardware stack levels used:    1
  2141 ;; Hardware stack levels required when called:   11
  2142 ;; This function calls:
  2143 ;;		___altoft
  2144 ;;		___ftdiv
  2145 ;;		___ftge
  2146 ;;		___ftmul
  2147 ;;		_analogRead
  2148 ;;		_digitalRead
  2149 ;;		_digitalWrite
  2150 ;;		_lcdClear
  2151 ;;		_printf
  2152 ;;		_readKeypad
  2153 ;;		_setAngle
  2154 ;; This function is called by:
  2155 ;;		_main
  2156 ;; This function uses a non-reentrant model
  2157 ;;
  2158                           
  2159                           	psect	text1
  2160  0019FA                     __ptext1:
  2161                           	opt stack 0
  2162  0019FA                     _sortBattery:
  2163                           	opt stack 19
  2164                           
  2165                           ;main.c: 128: setAngle(conveyorServo, 90);
  2166                           
  2167                           ;incstack = 0
  2168  0019FA  0E1B               	movlw	low _conveyorServo
  2169  0019FC  0101               	movlb	1	; () banked
  2170  0019FE  6F46               	movwf	setAngle@motor& (0+255),b
  2171  001A00  0E01               	movlw	high _conveyorServo
  2172  001A02  0101               	movlb	1	; () banked
  2173  001A04  6F47               	movwf	(setAngle@motor+1)& (0+255),b
  2174  001A06  0E00               	movlw	0
  2175  001A08  0101               	movlb	1	; () banked
  2176  001A0A  6F49               	movwf	(setAngle@angle+1)& (0+255),b
  2177  001A0C  0E5A               	movlw	90
  2178  001A0E  6F48               	movwf	setAngle@angle& (0+255),b
  2179  001A10  EC5F  F01D         	call	_setAngle	;wreg free
  2180                           
  2181                           ;main.c: 129: digitalWrite(cylinderMotor, 0);
  2182  001A14  0E1F               	movlw	low _cylinderMotor
  2183  001A16  0100               	movlb	0	; () banked
  2184  001A18  6F8E               	movwf	digitalWrite@pin& (0+255),b
  2185  001A1A  0E01               	movlw	high _cylinderMotor
  2186  001A1C  0100               	movlb	0	; () banked
  2187  001A1E  6F8F               	movwf	(digitalWrite@pin+1)& (0+255),b
  2188  001A20  0E00               	movlw	0
  2189  001A22  0100               	movlb	0	; () banked
  2190  001A24  6F91               	movwf	(digitalWrite@val+1)& (0+255),b
  2191  001A26  0E00               	movlw	0
  2192  001A28  6F90               	movwf	digitalWrite@val& (0+255),b
  2193  001A2A  EC08  F01B         	call	_digitalWrite	;wreg free
  2194                           
  2195                           ;main.c: 132: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2196  001A2E  0E0D               	movlw	13
  2197  001A30  0101               	movlb	1	; () banked
  2198  001A32  6F52               	movwf	(??_sortBattery+1)& (0+255),b
  2199  001A34  0EAF               	movlw	175
  2200  001A36  0101               	movlb	1	; () banked
  2201  001A38  6F51               	movwf	??_sortBattery& (0+255),b
  2202  001A3A  0EB6               	movlw	182
  2203  001A3C                     u7447:
  2204  001A3C  2EE8               	decfsz	wreg,f,c
  2205  001A3E  D7FE               	bra	u7447
  2206  001A40  2F51               	decfsz	??_sortBattery& (0+255),f,b
  2207  001A42  D7FC               	bra	u7447
  2208  001A44  2F52               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2209  001A46  D7FA               	bra	u7447
  2210  001A48  F000               	nop	
  2211                           
  2212                           ;main.c: 136: setAngle(padServo, padAngle_CLOSE);
  2213  001A4A  0E2B               	movlw	low _padServo
  2214  001A4C  0101               	movlb	1	; () banked
  2215  001A4E  6F46               	movwf	setAngle@motor& (0+255),b
  2216  001A50  0E01               	movlw	high _padServo
  2217  001A52  0101               	movlb	1	; () banked
  2218  001A54  6F47               	movwf	(setAngle@motor+1)& (0+255),b
  2219  001A56  C109  F148         	movff	_padAngle_CLOSE,setAngle@angle
  2220  001A5A  C10A  F149         	movff	_padAngle_CLOSE+1,setAngle@angle+1
  2221  001A5E  EC5F  F01D         	call	_setAngle	;wreg free
  2222                           
  2223                           ;main.c: 137: _delay((unsigned long)((500)*(10000000/4000.0)));
  2224  001A62  0E07               	movlw	7
  2225  001A64  0101               	movlb	1	; () banked
  2226  001A66  6F52               	movwf	(??_sortBattery+1)& (0+255),b
  2227  001A68  0E58               	movlw	88
  2228  001A6A  0101               	movlb	1	; () banked
  2229  001A6C  6F51               	movwf	??_sortBattery& (0+255),b
  2230  001A6E  0E59               	movlw	89
  2231  001A70                     u7457:
  2232  001A70  2EE8               	decfsz	wreg,f,c
  2233  001A72  D7FE               	bra	u7457
  2234  001A74  2F51               	decfsz	??_sortBattery& (0+255),f,b
  2235  001A76  D7FC               	bra	u7457
  2236  001A78  2F52               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2237  001A7A  D7FA               	bra	u7457
  2238  001A7C  D000               	nop2	
  2239                           
  2240                           ;main.c: 141: float Vcc = 4.61;
  2241  001A7E  0E85               	movlw	133
  2242  001A80  0101               	movlb	1	; () banked
  2243  001A82  6F56               	movwf	sortBattery@Vcc& (0+255),b
  2244  001A84  0E93               	movlw	147
  2245  001A86  0101               	movlb	1	; () banked
  2246  001A88  6F57               	movwf	(sortBattery@Vcc+1)& (0+255),b
  2247  001A8A  0E40               	movlw	64
  2248  001A8C  0101               	movlb	1	; () banked
  2249  001A8E  6F58               	movwf	(sortBattery@Vcc+2)& (0+255),b
  2250                           
  2251                           ; BSR set to: 1
  2252                           ;main.c: 142: float resolution = (1<<10) - 1;
  2253  001A90  0EC0               	movlw	192
  2254  001A92  0101               	movlb	1	; () banked
  2255  001A94  6F59               	movwf	sortBattery@resolution& (0+255),b
  2256  001A96  0E7F               	movlw	127
  2257  001A98  0101               	movlb	1	; () banked
  2258  001A9A  6F5A               	movwf	(sortBattery@resolution+1)& (0+255),b
  2259  001A9C  0E44               	movlw	68
  2260  001A9E  0101               	movlb	1	; () banked
  2261  001AA0  6F5B               	movwf	(sortBattery@resolution+2)& (0+255),b
  2262                           
  2263                           ; BSR set to: 1
  2264                           ;main.c: 144: int targetAngle;
  2265                           ;main.c: 145: int signal = digitalRead(padPin1)<<1;
  2266  001AA2  0E23               	movlw	low _padPin1
  2267  001AA4  0100               	movlb	0	; () banked
  2268  001AA6  6F8E               	movwf	digitalRead@pin& (0+255),b
  2269  001AA8  0E01               	movlw	high _padPin1
  2270  001AAA  0100               	movlb	0	; () banked
  2271  001AAC  6F8F               	movwf	(digitalRead@pin+1)& (0+255),b
  2272  001AAE  ECD3  F018         	call	_digitalRead	;wreg free
  2273  001AB2  90D8               	bcf	status,0,c
  2274  001AB4  0100               	movlb	0	; () banked
  2275  001AB6  358E               	rlcf	?_digitalRead& (0+255),w,b
  2276  001AB8  0101               	movlb	1	; () banked
  2277  001ABA  6F5C               	movwf	sortBattery@signal& (0+255),b
  2278  001ABC  0100               	movlb	0	; () banked
  2279  001ABE  358F               	rlcf	(?_digitalRead+1)& (0+255),w,b
  2280  001AC0  0101               	movlb	1	; () banked
  2281  001AC2  6F5D               	movwf	(sortBattery@signal+1)& (0+255),b
  2282                           
  2283                           ; BSR set to: 1
  2284                           ;main.c: 146: signal |= digitalRead(padPin2);
  2285  001AC4  0E27               	movlw	low _padPin2
  2286  001AC6  0100               	movlb	0	; () banked
  2287  001AC8  6F8E               	movwf	digitalRead@pin& (0+255),b
  2288  001ACA  0E01               	movlw	high _padPin2
  2289  001ACC  0100               	movlb	0	; () banked
  2290  001ACE  6F8F               	movwf	(digitalRead@pin+1)& (0+255),b
  2291  001AD0  ECD3  F018         	call	_digitalRead	;wreg free
  2292  001AD4  0100               	movlb	0	; () banked
  2293  001AD6  518E               	movf	?_digitalRead& (0+255),w,b
  2294  001AD8  0101               	movlb	1	; () banked
  2295  001ADA  135C               	iorwf	sortBattery@signal& (0+255),f,b
  2296  001ADC  0100               	movlb	0	; () banked
  2297  001ADE  518F               	movf	(?_digitalRead+1)& (0+255),w,b
  2298  001AE0  0101               	movlb	1	; () banked
  2299  001AE2  135D               	iorwf	(sortBattery@signal+1)& (0+255),f,b
  2300                           
  2301                           ; BSR set to: 1
  2302                           ;main.c: 148: digitalWrite(AA_float, 1);
  2303  001AE4  0E17               	movlw	low _AA_float
  2304  001AE6  0100               	movlb	0	; () banked
  2305  001AE8  6F8E               	movwf	digitalWrite@pin& (0+255),b
  2306  001AEA  0E01               	movlw	high _AA_float
  2307  001AEC  0100               	movlb	0	; () banked
  2308  001AEE  6F8F               	movwf	(digitalWrite@pin+1)& (0+255),b
  2309  001AF0  0E00               	movlw	0
  2310  001AF2  0100               	movlb	0	; () banked
  2311  001AF4  6F91               	movwf	(digitalWrite@val+1)& (0+255),b
  2312  001AF6  0E01               	movlw	1
  2313  001AF8  6F90               	movwf	digitalWrite@val& (0+255),b
  2314  001AFA  EC08  F01B         	call	_digitalWrite	;wreg free
  2315                           
  2316                           ;main.c: 149: float V = analogRead(padPin3[1]) / resolution * Vcc;
  2317  001AFE  C159  F0A3         	movff	sortBattery@resolution,___ftdiv@f2
  2318  001B02  C15A  F0A4         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2319  001B06  C15B  F0A5         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2320  001B0A  C16D  F08E         	movff	_padPin3+2,analogRead@channel
  2321  001B0E  C16E  F08F         	movff	_padPin3+3,analogRead@channel+1
  2322  001B12  ECDF  F024         	call	_analogRead	;wreg free
  2323  001B16  C08E  F096         	movff	?_analogRead,___altoft@c
  2324  001B1A  C08F  F097         	movff	?_analogRead+1,___altoft@c+1
  2325  001B1E  C090  F098         	movff	?_analogRead+2,___altoft@c+2
  2326  001B22  C091  F099         	movff	?_analogRead+3,___altoft@c+3
  2327  001B26  EC4D  F020         	call	___altoft	;wreg free
  2328  001B2A  C096  F0A0         	movff	?___altoft,___ftdiv@f1
  2329  001B2E  C097  F0A1         	movff	?___altoft+1,___ftdiv@f1+1
  2330  001B32  C098  F0A2         	movff	?___altoft+2,___ftdiv@f1+2
  2331  001B36  EC52  F016         	call	___ftdiv	;wreg free
  2332  001B3A  C0A0  F0AF         	movff	?___ftdiv,___ftmul@f1
  2333  001B3E  C0A1  F0B0         	movff	?___ftdiv+1,___ftmul@f1+1
  2334  001B42  C0A2  F0B1         	movff	?___ftdiv+2,___ftmul@f1+2
  2335  001B46  C156  F0B2         	movff	sortBattery@Vcc,___ftmul@f2
  2336  001B4A  C157  F0B3         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2337  001B4E  C158  F0B4         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2338  001B52  ECA3  F015         	call	___ftmul	;wreg free
  2339  001B56  C0AF  F160         	movff	?___ftmul,sortBattery@V
  2340  001B5A  C0B0  F161         	movff	?___ftmul+1,sortBattery@V+1
  2341  001B5E  C0B1  F162         	movff	?___ftmul+2,sortBattery@V+2
  2342                           
  2343                           ;main.c: 151: lcdClear();
  2344  001B62  EC31  F026         	call	_lcdClear	;wreg free
  2345                           
  2346                           ;main.c: 152: printf("signal: %d \nVoltage: %f",signal,V);
  2347  001B66  0EDF               	movlw	low STR_2
  2348  001B68  0100               	movlb	0	; () banked
  2349  001B6A  6FE3               	movwf	printf@f& (0+255),b
  2350  001B6C  0EFE               	movlw	high STR_2
  2351  001B6E  0100               	movlb	0	; () banked
  2352  001B70  6FE4               	movwf	(printf@f+1)& (0+255),b
  2353  001B72  C15C  F0E5         	movff	sortBattery@signal,?_printf+2
  2354  001B76  C15D  F0E6         	movff	sortBattery@signal+1,?_printf+3
  2355  001B7A  C160  F0E7         	movff	sortBattery@V,?_printf+4
  2356  001B7E  C161  F0E8         	movff	sortBattery@V+1,?_printf+5
  2357  001B82  C162  F0E9         	movff	sortBattery@V+2,?_printf+6
  2358  001B86  EC09  F000         	call	_printf	;wreg free
  2359                           
  2360                           ;main.c: 153: readKeypad();
  2361  001B8A  ECA8  F025         	call	_readKeypad	;wreg free
  2362                           
  2363                           ;main.c: 157: switch(signal){
  2364  001B8E  D0A3               	goto	l6802
  2365  001B90                     l6780:
  2366                           
  2367                           ;main.c: 160: digitalWrite(AA_float, 0);
  2368  001B90  0E17               	movlw	low _AA_float
  2369  001B92  0100               	movlb	0	; () banked
  2370  001B94  6F8E               	movwf	digitalWrite@pin& (0+255),b
  2371  001B96  0E01               	movlw	high _AA_float
  2372  001B98  0100               	movlb	0	; () banked
  2373  001B9A  6F8F               	movwf	(digitalWrite@pin+1)& (0+255),b
  2374  001B9C  0E00               	movlw	0
  2375  001B9E  0100               	movlb	0	; () banked
  2376  001BA0  6F91               	movwf	(digitalWrite@val+1)& (0+255),b
  2377  001BA2  0E00               	movlw	0
  2378  001BA4  6F90               	movwf	digitalWrite@val& (0+255),b
  2379  001BA6  EC08  F01B         	call	_digitalWrite	;wreg free
  2380                           
  2381                           ;main.c: 161: _delay((unsigned long)((1)*(10000000/4000.0)));
  2382  001BAA  0E04               	movlw	4
  2383  001BAC  0101               	movlb	1	; () banked
  2384  001BAE  6F51               	movwf	??_sortBattery& (0+255),b
  2385  001BB0  0E3D               	movlw	61
  2386  001BB2                     u7467:
  2387  001BB2  2EE8               	decfsz	wreg,f,c
  2388  001BB4  D7FE               	bra	u7467
  2389  001BB6  2F51               	decfsz	??_sortBattery& (0+255),f,b
  2390  001BB8  D7FC               	bra	u7467
  2391  001BBA  D000               	nop2	
  2392                           
  2393                           ;main.c: 162: float V_float = analogRead(padPin3[1]) / resolution * Vcc;
  2394  001BBC  C159  F0A3         	movff	sortBattery@resolution,___ftdiv@f2
  2395  001BC0  C15A  F0A4         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2396  001BC4  C15B  F0A5         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2397  001BC8  C16D  F08E         	movff	_padPin3+2,analogRead@channel
  2398  001BCC  C16E  F08F         	movff	_padPin3+3,analogRead@channel+1
  2399  001BD0  ECDF  F024         	call	_analogRead	;wreg free
  2400  001BD4  C08E  F096         	movff	?_analogRead,___altoft@c
  2401  001BD8  C08F  F097         	movff	?_analogRead+1,___altoft@c+1
  2402  001BDC  C090  F098         	movff	?_analogRead+2,___altoft@c+2
  2403  001BE0  C091  F099         	movff	?_analogRead+3,___altoft@c+3
  2404  001BE4  EC4D  F020         	call	___altoft	;wreg free
  2405  001BE8  C096  F0A0         	movff	?___altoft,___ftdiv@f1
  2406  001BEC  C097  F0A1         	movff	?___altoft+1,___ftdiv@f1+1
  2407  001BF0  C098  F0A2         	movff	?___altoft+2,___ftdiv@f1+2
  2408  001BF4  EC52  F016         	call	___ftdiv	;wreg free
  2409  001BF8  C0A0  F0AF         	movff	?___ftdiv,___ftmul@f1
  2410  001BFC  C0A1  F0B0         	movff	?___ftdiv+1,___ftmul@f1+1
  2411  001C00  C0A2  F0B1         	movff	?___ftdiv+2,___ftmul@f1+2
  2412  001C04  C156  F0B2         	movff	sortBattery@Vcc,___ftmul@f2
  2413  001C08  C157  F0B3         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2414  001C0C  C158  F0B4         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2415  001C10  ECA3  F015         	call	___ftmul	;wreg free
  2416  001C14  C0AF  F153         	movff	?___ftmul,sortBattery@V_float
  2417  001C18  C0B0  F154         	movff	?___ftmul+1,sortBattery@V_float+1
  2418  001C1C  C0B1  F155         	movff	?___ftmul+2,sortBattery@V_float+2
  2419                           
  2420                           ;main.c: 163: if(V_float < 0.1){
  2421  001C20  C153  F08E         	movff	sortBattery@V_float,___ftge@ff1
  2422  001C24  C154  F08F         	movff	sortBattery@V_float+1,___ftge@ff1+1
  2423  001C28  C155  F090         	movff	sortBattery@V_float+2,___ftge@ff1+2
  2424  001C2C  0ECD               	movlw	205
  2425  001C2E  0100               	movlb	0	; () banked
  2426  001C30  6F91               	movwf	___ftge@ff2& (0+255),b
  2427  001C32  0ECC               	movlw	204
  2428  001C34  0100               	movlb	0	; () banked
  2429  001C36  6F92               	movwf	(___ftge@ff2+1)& (0+255),b
  2430  001C38  0E3D               	movlw	61
  2431  001C3A  0100               	movlb	0	; () banked
  2432  001C3C  6F93               	movwf	(___ftge@ff2+2)& (0+255),b
  2433  001C3E  ECC9  F01D         	call	___ftge	;wreg free
  2434  001C42  0100               	movlb	0	; () banked
  2435  001C44  B0D8               	btfsc	status,0,c
  2436  001C46  D016               	goto	l6792
  2437                           
  2438                           ; BSR set to: 0
  2439                           ;main.c: 164: if(V > V_LIM_AA) targetAngle = redirectAngle_AA;
  2440  001C48  C103  F08E         	movff	_V_LIM_AA,___ftge@ff1
  2441  001C4C  C104  F08F         	movff	_V_LIM_AA+1,___ftge@ff1+1
  2442  001C50  C105  F090         	movff	_V_LIM_AA+2,___ftge@ff1+2
  2443  001C54  C160  F091         	movff	sortBattery@V,___ftge@ff2
  2444  001C58  C161  F092         	movff	sortBattery@V+1,___ftge@ff2+1
  2445  001C5C  C162  F093         	movff	sortBattery@V+2,___ftge@ff2+2
  2446  001C60  ECC9  F01D         	call	___ftge	;wreg free
  2447  001C64  0100               	movlb	0	; () banked
  2448  001C66  B0D8               	btfsc	status,0,c
  2449  001C68  D031               	goto	l130
  2450                           
  2451                           ; BSR set to: 0
  2452  001C6A  C111  F15E         	movff	_redirectAngle_AA,sortBattery@targetAngle
  2453  001C6E  C112  F15F         	movff	_redirectAngle_AA+1,sortBattery@targetAngle+1
  2454  001C72  D045               	goto	l6804
  2455  001C74                     l6792:
  2456                           
  2457                           ;main.c: 170: if(V > V_LIM_9V) targetAngle = redirectAngle_9V;
  2458  001C74  C100  F08E         	movff	_V_LIM_9V,___ftge@ff1
  2459  001C78  C101  F08F         	movff	_V_LIM_9V+1,___ftge@ff1+1
  2460  001C7C  C102  F090         	movff	_V_LIM_9V+2,___ftge@ff1+2
  2461  001C80  C160  F091         	movff	sortBattery@V,___ftge@ff2
  2462  001C84  C161  F092         	movff	sortBattery@V+1,___ftge@ff2+1
  2463  001C88  C162  F093         	movff	sortBattery@V+2,___ftge@ff2+2
  2464  001C8C  ECC9  F01D         	call	___ftge	;wreg free
  2465  001C90  0100               	movlb	0	; () banked
  2466  001C92  B0D8               	btfsc	status,0,c
  2467  001C94  D01B               	goto	l130
  2468                           
  2469                           ; BSR set to: 0
  2470  001C96  C10F  F15E         	movff	_redirectAngle_9V,sortBattery@targetAngle
  2471  001C9A  C110  F15F         	movff	_redirectAngle_9V+1,sortBattery@targetAngle+1
  2472  001C9E  D02F               	goto	l6804
  2473  001CA0                     l6796:
  2474                           
  2475                           ;main.c: 174: if(V > V_LIM_C) targetAngle = redirectAngle_C;
  2476  001CA0  C106  F08E         	movff	_V_LIM_C,___ftge@ff1
  2477  001CA4  C107  F08F         	movff	_V_LIM_C+1,___ftge@ff1+1
  2478  001CA8  C108  F090         	movff	_V_LIM_C+2,___ftge@ff1+2
  2479  001CAC  C160  F091         	movff	sortBattery@V,___ftge@ff2
  2480  001CB0  C161  F092         	movff	sortBattery@V+1,___ftge@ff2+1
  2481  001CB4  C162  F093         	movff	sortBattery@V+2,___ftge@ff2+2
  2482  001CB8  ECC9  F01D         	call	___ftge	;wreg free
  2483  001CBC  0100               	movlb	0	; () banked
  2484  001CBE  B0D8               	btfsc	status,0,c
  2485  001CC0  D005               	goto	l130
  2486                           
  2487                           ; BSR set to: 0
  2488  001CC2  C113  F15E         	movff	_redirectAngle_C,sortBattery@targetAngle
  2489  001CC6  C114  F15F         	movff	_redirectAngle_C+1,sortBattery@targetAngle+1
  2490  001CCA  D019               	goto	l6804
  2491  001CCC                     l130:
  2492                           
  2493                           ; BSR set to: 0
  2494                           ;main.c: 175: else targetAngle = redirectAngle_OTHER;
  2495  001CCC  C115  F15E         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  2496  001CD0  C116  F15F         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  2497                           
  2498                           ; BSR set to: 0
  2499                           ;main.c: 177: }
  2500                           
  2501                           ; BSR set to: 0
  2502                           ;main.c: 176: break;
  2503  001CD4  D014               	goto	l6804
  2504  001CD6                     l6802:
  2505  001CD6  C15C  F151         	movff	sortBattery@signal,??_sortBattery
  2506  001CDA  C15D  F152         	movff	sortBattery@signal+1,??_sortBattery+1
  2507                           
  2508                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2509                           ; Switch size 1, requested type "space"
  2510                           ; Number of cases is 1, Range of values is 0 to 0
  2511                           ; switch strategies available:
  2512                           ; Name         Instructions Cycles
  2513                           ; simple_byte            4     3 (average)
  2514                           ;	Chosen strategy is simple_byte
  2515  001CDE  0101               	movlb	1	; () banked
  2516  001CE0  5152               	movf	(??_sortBattery+1)& (0+255),w,b
  2517  001CE2  0A00               	xorlw	0	; case 0
  2518  001CE4  A4D8               	btfss	status,2,c
  2519  001CE6  D00B               	goto	l6804
  2520                           
  2521                           ; BSR set to: 1
  2522                           ; Switch size 1, requested type "space"
  2523                           ; Number of cases is 3, Range of values is 0 to 2
  2524                           ; switch strategies available:
  2525                           ; Name         Instructions Cycles
  2526                           ; simple_byte           10     6 (average)
  2527                           ;	Chosen strategy is simple_byte
  2528  001CE8  0101               	movlb	1	; () banked
  2529  001CEA  5151               	movf	??_sortBattery& (0+255),w,b
  2530  001CEC  0A00               	xorlw	0	; case 0
  2531  001CEE  B4D8               	btfsc	status,2,c
  2532  001CF0  D74F               	goto	l6780
  2533  001CF2  0A01               	xorlw	1	; case 1
  2534  001CF4  B4D8               	btfsc	status,2,c
  2535  001CF6  D7D4               	goto	l6796
  2536  001CF8  0A03               	xorlw	3	; case 2
  2537  001CFA  B4D8               	btfsc	status,2,c
  2538  001CFC  D7BB               	goto	l6792
  2539  001CFE                     l6804:
  2540                           
  2541                           ;main.c: 179: setAngle(redirectingServo, targetAngle);
  2542  001CFE  0E2F               	movlw	low _redirectingServo
  2543  001D00  0101               	movlb	1	; () banked
  2544  001D02  6F46               	movwf	setAngle@motor& (0+255),b
  2545  001D04  0E01               	movlw	high _redirectingServo
  2546  001D06  0101               	movlb	1	; () banked
  2547  001D08  6F47               	movwf	(setAngle@motor+1)& (0+255),b
  2548  001D0A  C15E  F148         	movff	sortBattery@targetAngle,setAngle@angle
  2549  001D0E  C15F  F149         	movff	sortBattery@targetAngle+1,setAngle@angle+1
  2550  001D12  EC5F  F01D         	call	_setAngle	;wreg free
  2551                           
  2552                           ;main.c: 180: _delay((unsigned long)((500)*(10000000/4000.0)));
  2553  001D16  0E07               	movlw	7
  2554  001D18  0101               	movlb	1	; () banked
  2555  001D1A  6F52               	movwf	(??_sortBattery+1)& (0+255),b
  2556  001D1C  0E58               	movlw	88
  2557  001D1E  0101               	movlb	1	; () banked
  2558  001D20  6F51               	movwf	??_sortBattery& (0+255),b
  2559  001D22  0E59               	movlw	89
  2560  001D24                     u7477:
  2561  001D24  2EE8               	decfsz	wreg,f,c
  2562  001D26  D7FE               	bra	u7477
  2563  001D28  2F51               	decfsz	??_sortBattery& (0+255),f,b
  2564  001D2A  D7FC               	bra	u7477
  2565  001D2C  2F52               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2566  001D2E  D7FA               	bra	u7477
  2567  001D30  D000               	nop2	
  2568                           
  2569                           ;main.c: 184: setAngle(padServo, padAngle_OPEN);
  2570  001D32  0E2B               	movlw	low _padServo
  2571  001D34  0101               	movlb	1	; () banked
  2572  001D36  6F46               	movwf	setAngle@motor& (0+255),b
  2573  001D38  0E01               	movlw	high _padServo
  2574  001D3A  0101               	movlb	1	; () banked
  2575  001D3C  6F47               	movwf	(setAngle@motor+1)& (0+255),b
  2576  001D3E  C10D  F148         	movff	_padAngle_OPEN,setAngle@angle
  2577  001D42  C10E  F149         	movff	_padAngle_OPEN+1,setAngle@angle+1
  2578  001D46  EC5F  F01D         	call	_setAngle	;wreg free
  2579                           
  2580                           ;main.c: 185: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2581  001D4A  0E0D               	movlw	13
  2582  001D4C  0101               	movlb	1	; () banked
  2583  001D4E  6F52               	movwf	(??_sortBattery+1)& (0+255),b
  2584  001D50  0EAF               	movlw	175
  2585  001D52  0101               	movlb	1	; () banked
  2586  001D54  6F51               	movwf	??_sortBattery& (0+255),b
  2587  001D56  0EB6               	movlw	182
  2588  001D58                     u7487:
  2589  001D58  2EE8               	decfsz	wreg,f,c
  2590  001D5A  D7FE               	bra	u7487
  2591  001D5C  2F51               	decfsz	??_sortBattery& (0+255),f,b
  2592  001D5E  D7FC               	bra	u7487
  2593  001D60  2F52               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2594  001D62  D7FA               	bra	u7487
  2595  001D64  F000               	nop	
  2596                           
  2597                           ;main.c: 189: setAngle(padServo, padAngle_NEUTRAL);
  2598  001D66  0E2B               	movlw	low _padServo
  2599  001D68  0101               	movlb	1	; () banked
  2600  001D6A  6F46               	movwf	setAngle@motor& (0+255),b
  2601  001D6C  0E01               	movlw	high _padServo
  2602  001D6E  0101               	movlb	1	; () banked
  2603  001D70  6F47               	movwf	(setAngle@motor+1)& (0+255),b
  2604  001D72  C10B  F148         	movff	_padAngle_NEUTRAL,setAngle@angle
  2605  001D76  C10C  F149         	movff	_padAngle_NEUTRAL+1,setAngle@angle+1
  2606  001D7A  EC5F  F01D         	call	_setAngle	;wreg free
  2607                           
  2608                           ;main.c: 193: setAngle(conveyorServo, 0);
  2609  001D7E  0E1B               	movlw	low _conveyorServo
  2610  001D80  0101               	movlb	1	; () banked
  2611  001D82  6F46               	movwf	setAngle@motor& (0+255),b
  2612  001D84  0E01               	movlw	high _conveyorServo
  2613  001D86  0101               	movlb	1	; () banked
  2614  001D88  6F47               	movwf	(setAngle@motor+1)& (0+255),b
  2615  001D8A  0E00               	movlw	0
  2616  001D8C  0101               	movlb	1	; () banked
  2617  001D8E  6F49               	movwf	(setAngle@angle+1)& (0+255),b
  2618  001D90  0E00               	movlw	0
  2619  001D92  6F48               	movwf	setAngle@angle& (0+255),b
  2620  001D94  EC5F  F01D         	call	_setAngle	;wreg free
  2621                           
  2622                           ;main.c: 194: digitalWrite(cylinderMotor, 1);
  2623  001D98  0E1F               	movlw	low _cylinderMotor
  2624  001D9A  0100               	movlb	0	; () banked
  2625  001D9C  6F8E               	movwf	digitalWrite@pin& (0+255),b
  2626  001D9E  0E01               	movlw	high _cylinderMotor
  2627  001DA0  0100               	movlb	0	; () banked
  2628  001DA2  6F8F               	movwf	(digitalWrite@pin+1)& (0+255),b
  2629  001DA4  0E00               	movlw	0
  2630  001DA6  0100               	movlb	0	; () banked
  2631  001DA8  6F91               	movwf	(digitalWrite@val+1)& (0+255),b
  2632  001DAA  0E01               	movlw	1
  2633  001DAC  6F90               	movwf	digitalWrite@val& (0+255),b
  2634  001DAE  EC08  F01B         	call	_digitalWrite	;wreg free
  2635  001DB2  0012               	return		;funcret
  2636  001DB4                     __end_of_sortBattery:
  2637                           	opt stack 0
  2638                           tblptru	equ	0xFF8
  2639                           tblptrh	equ	0xFF7
  2640                           tblptrl	equ	0xFF6
  2641                           tablat	equ	0xFF5
  2642                           postinc0	equ	0xFEE
  2643                           wreg	equ	0xFE8
  2644                           postdec1	equ	0xFE5
  2645                           fsr1l	equ	0xFE1
  2646                           status	equ	0xFD8
  2647                           
  2648 ;; *************** function _readKeypad *****************
  2649 ;; Defined at:
  2650 ;;		line 36 in file "keypad.c"
  2651 ;; Parameters:    Size  Location     Type
  2652 ;;		None
  2653 ;; Auto vars:     Size  Location     Type
  2654 ;;  key             1   14[BANK0 ] unsigned char 
  2655 ;; Return value:  Size  Location     Type
  2656 ;;                  1    wreg      unsigned char 
  2657 ;; Registers used:
  2658 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  2659 ;; Tracked objects:
  2660 ;;		On entry : 0/0
  2661 ;;		On exit  : 0/0
  2662 ;;		Unchanged: 0/0
  2663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2665 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2667 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2668 ;;Total ram usage:        1 bytes
  2669 ;; Hardware stack levels used:    1
  2670 ;; Hardware stack levels required when called:    6
  2671 ;; This function calls:
  2672 ;;		Nothing
  2673 ;; This function is called by:
  2674 ;;		_sortBattery
  2675 ;;		_pause
  2676 ;;		_showInterface
  2677 ;; This function uses a non-reentrant model
  2678 ;;
  2679                           
  2680                           	psect	text2
  2681  004B50                     __ptext2:
  2682                           	opt stack 0
  2683  004B50                     _readKeypad:
  2684                           	opt stack 23
  2685  004B50                     l204:
  2686  004B50  A281               	btfss	3969,1,c	;volatile
  2687  004B52  D7FE               	goto	l204
  2688                           
  2689                           ;keypad.c: 38: char key = (PORTB & 0xF0) >> 4;
  2690  004B54  3881               	swapf	3969,w,c	;volatile
  2691  004B56  0B0F               	andlw	15
  2692  004B58  0B0F               	andlw	15
  2693  004B5A  0100               	movlb	0	; () banked
  2694  004B5C  6F8E               	movwf	readKeypad@key& (0+255),b
  2695  004B5E                     l207:
  2696  004B5E  B281               	btfsc	3969,1,c	;volatile
  2697  004B60  D7FE               	goto	l207
  2698                           
  2699                           ;keypad.c: 40: return keys[key];
  2700  004B62  0100               	movlb	0	; () banked
  2701  004B64  518E               	movf	readKeypad@key& (0+255),w,b
  2702  004B66  0D01               	mullw	1
  2703  004B68  0EC7               	movlw	low _keys
  2704  004B6A  24F3               	addwf	prodl,w,c
  2705  004B6C  6EF6               	movwf	tblptrl,c
  2706  004B6E  0EFE               	movlw	high _keys
  2707  004B70  20F4               	addwfc	prodh,w,c
  2708  004B72  6EF7               	movwf	tblptrh,c
  2709  004B74                     	if	0	;There are less than 3 active tblptr bytes
  2710  004B74                     	endif
  2711  004B74  0008               	tblrd		*
  2712  004B76  50F5               	movf	tablat,w,c
  2713  004B78  0012               	return	
  2714  004B7A                     __end_of_readKeypad:
  2715                           	opt stack 0
  2716                           tblptru	equ	0xFF8
  2717                           tblptrh	equ	0xFF7
  2718                           tblptrl	equ	0xFF6
  2719                           tablat	equ	0xFF5
  2720                           prodh	equ	0xFF4
  2721                           prodl	equ	0xFF3
  2722                           postinc0	equ	0xFEE
  2723                           wreg	equ	0xFE8
  2724                           postdec1	equ	0xFE5
  2725                           fsr1l	equ	0xFE1
  2726                           status	equ	0xFD8
  2727                           
  2728 ;; *************** function _printf *****************
  2729 ;; Defined at:
  2730 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  2731 ;; Parameters:    Size  Location     Type
  2732 ;;  f               2   99[BANK0 ] PTR const unsigned char 
  2733 ;;		 -> STR_17(17), STR_16(18), STR_15(17), STR_14(18), 
  2734 ;;		 -> STR_13(17), STR_12(19), STR_11(17), STR_10(18), 
  2735 ;;		 -> STR_9(17), STR_8(18), STR_7(17), STR_6(18), 
  2736 ;;		 -> STR_5(9), STR_4(8), STR_3(10), STR_2(24), 
  2737 ;;		 -> STR_1(8), 
  2738 ;; Auto vars:     Size  Location     Type
  2739 ;;  idx             1    9[BANK1 ] unsigned char 
  2740 ;;  val             4   22[BANK1 ] unsigned long 
  2741 ;;  tmpval          4   18[BANK1 ] struct .
  2742 ;;  fval            3   26[BANK1 ] struct .
  2743 ;;  cp              3    0        PTR const unsigned char 
  2744 ;;  exp             2   16[BANK1 ] int 
  2745 ;;  prec            2   14[BANK1 ] int 
  2746 ;;  flag            2   12[BANK1 ] unsigned short 
  2747 ;;  ap              2   10[BANK1 ] PTR void [1]
  2748 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2749 ;;  len             2    0        unsigned int 
  2750 ;;  width           2    0        int 
  2751 ;;  c               1   29[BANK1 ] char 
  2752 ;;  d               1    0        unsigned char 
  2753 ;; Return value:  Size  Location     Type
  2754 ;;                  2   99[BANK0 ] int 
  2755 ;; Registers used:
  2756 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2757 ;; Tracked objects:
  2758 ;;		On entry : 0/0
  2759 ;;		On exit  : 0/0
  2760 ;;		Unchanged: 0/0
  2761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2762 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2763 ;;      Locals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2764 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2765 ;;      Totals:         0       7      30       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2766 ;;Total ram usage:       37 bytes
  2767 ;; Hardware stack levels used:    1
  2768 ;; Hardware stack levels required when called:   10
  2769 ;; This function calls:
  2770 ;;		___awdiv
  2771 ;;		___ftadd
  2772 ;;		___ftge
  2773 ;;		___ftmul
  2774 ;;		___ftneg
  2775 ;;		___ftsub
  2776 ;;		___fttol
  2777 ;;		___lldiv
  2778 ;;		___llmod
  2779 ;;		___lltoft
  2780 ;;		___wmul
  2781 ;;		__div_to_l_
  2782 ;;		__tdiv_to_l_
  2783 ;;		_fround
  2784 ;;		_putch
  2785 ;;		_scale
  2786 ;; This function is called by:
  2787 ;;		_main
  2788 ;;		_sortBattery
  2789 ;;		_pause
  2790 ;;		_testFrequency
  2791 ;;		_dateTime
  2792 ;;		_mainMenu
  2793 ;;		_runSelect
  2794 ;;		_runMenu
  2795 ;;		_runTime
  2796 ;;		_runStats
  2797 ;; This function uses a non-reentrant model
  2798 ;;
  2799                           
  2800                           	psect	text3
  2801  000012                     __ptext3:
  2802                           	opt stack 0
  2803  000012                     _printf:
  2804                           	opt stack 19
  2805                           
  2806                           ;doprnt.c: 466: va_list ap;
  2807                           ;doprnt.c: 499: signed char c;
  2808                           ;doprnt.c: 501: int width;
  2809                           ;doprnt.c: 504: int prec;
  2810                           ;doprnt.c: 508: unsigned short flag;
  2811                           ;doprnt.c: 515: char d;
  2812                           ;doprnt.c: 516: double fval;
  2813                           ;doprnt.c: 517: int exp;
  2814                           ;doprnt.c: 523: union {
  2815                           ;doprnt.c: 524: unsigned long vd;
  2816                           ;doprnt.c: 525: double integ;
  2817                           ;doprnt.c: 526: } tmpval;
  2818                           ;doprnt.c: 528: unsigned long val;
  2819                           ;doprnt.c: 529: unsigned len;
  2820                           ;doprnt.c: 530: const char * cp;
  2821                           ;doprnt.c: 533: *ap = __va_start();
  2822                           
  2823                           ; BSR set to: 0
  2824                           ;incstack = 0
  2825  000012  0EE5               	movlw	low (?_printf+2)
  2826  000014  0101               	movlb	1	; () banked
  2827  000016  6F3D               	movwf	printf@ap& (0+255),b
  2828  000018  0E00               	movlw	high (?_printf+2)
  2829  00001A  0101               	movlb	1	; () banked
  2830  00001C  6F3E               	movwf	(printf@ap+1)& (0+255),b
  2831                           
  2832                           ;doprnt.c: 536: while(c = *f++) {
  2833  00001E  EFA2  F004         	goto	l6730
  2834  000022                     l6512:
  2835                           
  2836                           ; BSR set to: 1
  2837                           ;doprnt.c: 538: if(c != '%')
  2838  000022  0E25               	movlw	37
  2839  000024  0101               	movlb	1	; () banked
  2840  000026  1950               	xorwf	printf@c& (0+255),w,b
  2841  000028  B4D8               	btfsc	status,2,c
  2842  00002A  D006               	goto	l6516
  2843                           
  2844                           ; BSR set to: 1
  2845                           ;doprnt.c: 540: {
  2846                           ;doprnt.c: 541: (putch(c) );
  2847  00002C  0101               	movlb	1	; () banked
  2848  00002E  5150               	movf	printf@c& (0+255),w,b
  2849  000030  ECD2  F025         	call	_putch
  2850                           
  2851                           ;doprnt.c: 542: continue;
  2852  000034  EFA2  F004         	goto	l6730
  2853  000038                     l6516:
  2854                           
  2855                           ;doprnt.c: 543: }
  2856                           ;doprnt.c: 548: flag = 0;
  2857  000038  0E00               	movlw	0
  2858  00003A  0101               	movlb	1	; () banked
  2859  00003C  6F40               	movwf	(printf@flag+1)& (0+255),b
  2860  00003E  0E00               	movlw	0
  2861  000040  6F3F               	movwf	printf@flag& (0+255),b
  2862                           
  2863                           ;doprnt.c: 635: switch(c = *f++) {
  2864  000042  D018               	goto	l6530
  2865  000044                     l6518:
  2866                           
  2867                           ; BSR set to: 1
  2868                           ;doprnt.c: 663: flag |= 0x400;
  2869  000044  0101               	movlb	1	; () banked
  2870  000046  8540               	bsf	(printf@flag+1)& (0+255),2,b
  2871                           
  2872                           ; BSR set to: 1
  2873                           ;doprnt.c: 698: case 'i':
  2874                           ;doprnt.c: 699: break;
  2875                           
  2876                           ; BSR set to: 1
  2877                           
  2878                           ;doprnt.c: 697: case 'd':
  2879                           
  2880                           ;doprnt.c: 664: break;
  2881  000048  D034               	goto	l6532
  2882  00004A                     l6520:
  2883                           
  2884                           ; BSR set to: 1
  2885                           ;doprnt.c: 721: flag |= 0x80;
  2886  00004A  0101               	movlb	1	; () banked
  2887  00004C  8F3F               	bsf	printf@flag& (0+255),7,b
  2888                           
  2889                           ;doprnt.c: 723: break;
  2890  00004E  D031               	goto	l6532
  2891  000050                     l6522:
  2892                           
  2893                           ; BSR set to: 1
  2894                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2895  000050  C13D  FFD9         	movff	printf@ap,fsr2l
  2896  000054  C13E  FFDA         	movff	printf@ap+1,fsr2h
  2897  000058  50DF               	movf	indf2,w,c
  2898  00005A  0101               	movlb	1	; () banked
  2899  00005C  6F50               	movwf	printf@c& (0+255),b
  2900                           
  2901                           ; BSR set to: 1
  2902  00005E  0E02               	movlw	2
  2903  000060  0101               	movlb	1	; () banked
  2904  000062  273D               	addwf	printf@ap& (0+255),f,b
  2905  000064  0E00               	movlw	0
  2906  000066  233E               	addwfc	(printf@ap+1)& (0+255),f,b
  2907  000068                     l6526:
  2908                           
  2909                           ; BSR set to: 1
  2910                           ;doprnt.c: 809: (putch(c) );
  2911  000068  0101               	movlb	1	; () banked
  2912  00006A  5150               	movf	printf@c& (0+255),w,b
  2913  00006C  ECD2  F025         	call	_putch
  2914                           
  2915                           ;doprnt.c: 810: continue;
  2916  000070  EFA2  F004         	goto	l6730
  2917  000074                     l6530:
  2918  000074  C0E3  FFF6         	movff	printf@f,tblptrl
  2919  000078  C0E4  FFF7         	movff	printf@f+1,tblptrh
  2920  00007C  0100               	movlb	0	; () banked
  2921  00007E  4BE3               	infsnz	printf@f& (0+255),f,b
  2922  000080  2BE4               	incf	(printf@f+1)& (0+255),f,b
  2923  000082                     	if	0	;tblptru may be non-zero
  2924  000082                     	endif
  2925  000082                     	if	0	;tblptru may be non-zero
  2926  000082                     	endif
  2927  000082  0008               	tblrd		*
  2928  000084  CFF5 F150          	movff	tablat,printf@c
  2929  000088  0101               	movlb	1	; () banked
  2930  00008A  5150               	movf	printf@c& (0+255),w,b
  2931                           
  2932                           ; Switch size 1, requested type "space"
  2933                           ; Number of cases is 6, Range of values is 0 to 120
  2934                           ; switch strategies available:
  2935                           ; Name         Instructions Cycles
  2936                           ; simple_byte           19    10 (average)
  2937                           ;	Chosen strategy is simple_byte
  2938  00008C  0A00               	xorlw	0	; case 0
  2939  00008E  B4D8               	btfsc	status,2,c
  2940  000090  0012               	return	
  2941  000092  0A63               	xorlw	99	; case 99
  2942  000094  B4D8               	btfsc	status,2,c
  2943  000096  D7DC               	goto	l6522
  2944  000098  0A07               	xorlw	7	; case 100
  2945  00009A  B4D8               	btfsc	status,2,c
  2946  00009C  D00A               	goto	l6532
  2947  00009E  0A02               	xorlw	2	; case 102
  2948  0000A0  B4D8               	btfsc	status,2,c
  2949  0000A2  D7D0               	goto	l6518
  2950  0000A4  0A0F               	xorlw	15	; case 105
  2951  0000A6  B4D8               	btfsc	status,2,c
  2952  0000A8  D004               	goto	l6532
  2953  0000AA  0A11               	xorlw	17	; case 120
  2954  0000AC  B4D8               	btfsc	status,2,c
  2955  0000AE  D7CD               	goto	l6520
  2956  0000B0  D7DB               	goto	l6526
  2957  0000B2                     l6532:
  2958                           
  2959                           ;doprnt.c: 825: if(flag & (0x700)) {
  2960  0000B2  0E07               	movlw	7
  2961  0000B4  0101               	movlb	1	; () banked
  2962  0000B6  1540               	andwf	(printf@flag+1)& (0+255),w,b
  2963  0000B8  B4D8               	btfsc	status,2,c
  2964  0000BA  D304               	goto	l657
  2965                           
  2966                           ; BSR set to: 1
  2967                           ;doprnt.c: 829: prec = 6;
  2968  0000BC  0E00               	movlw	0
  2969  0000BE  0101               	movlb	1	; () banked
  2970  0000C0  6F42               	movwf	(printf@prec+1)& (0+255),b
  2971  0000C2  0E06               	movlw	6
  2972  0000C4  6F41               	movwf	printf@prec& (0+255),b
  2973                           
  2974                           ; BSR set to: 1
  2975                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2976  0000C6  C13D  FFD9         	movff	printf@ap,fsr2l
  2977  0000CA  C13E  FFDA         	movff	printf@ap+1,fsr2h
  2978  0000CE  CFDE F14D          	movff	postinc2,printf@fval
  2979  0000D2  CFDE F14E          	movff	postinc2,printf@fval+1
  2980  0000D6  CFDD F14F          	movff	postdec2,printf@fval+2
  2981                           
  2982                           ; BSR set to: 1
  2983  0000DA  0E03               	movlw	3
  2984  0000DC  0101               	movlb	1	; () banked
  2985  0000DE  273D               	addwf	printf@ap& (0+255),f,b
  2986  0000E0  0E00               	movlw	0
  2987  0000E2  233E               	addwfc	(printf@ap+1)& (0+255),f,b
  2988                           
  2989                           ; BSR set to: 1
  2990                           ;doprnt.c: 831: if(fval < 0.0) {
  2991  0000E4  0101               	movlb	1	; () banked
  2992  0000E6  AF4F               	btfss	(printf@fval+2)& (0+255),7,b
  2993  0000E8  D011               	goto	l6546
  2994                           
  2995                           ; BSR set to: 1
  2996                           ;doprnt.c: 832: fval = -fval;
  2997  0000EA  C14D  F08E         	movff	printf@fval,___ftneg@f1
  2998  0000EE  C14E  F08F         	movff	printf@fval+1,___ftneg@f1+1
  2999  0000F2  C14F  F090         	movff	printf@fval+2,___ftneg@f1+2
  3000  0000F6  EC90  F025         	call	___ftneg	;wreg free
  3001  0000FA  C08E  F14D         	movff	?___ftneg,printf@fval
  3002  0000FE  C08F  F14E         	movff	?___ftneg+1,printf@fval+1
  3003  000102  C090  F14F         	movff	?___ftneg+2,printf@fval+2
  3004                           
  3005                           ;doprnt.c: 833: flag |= 0x03;
  3006  000106  0E03               	movlw	3
  3007  000108  0101               	movlb	1	; () banked
  3008  00010A  133F               	iorwf	printf@flag& (0+255),f,b
  3009  00010C                     l6546:
  3010                           
  3011                           ; BSR set to: 1
  3012                           ;doprnt.c: 834: }
  3013                           ;doprnt.c: 835: exp = 0;
  3014  00010C  0E00               	movlw	0
  3015  00010E  0101               	movlb	1	; () banked
  3016  000110  6F44               	movwf	(printf@exp+1)& (0+255),b
  3017  000112  0E00               	movlw	0
  3018  000114  6F43               	movwf	printf@exp& (0+255),b
  3019                           
  3020                           ; BSR set to: 1
  3021                           ;doprnt.c: 836: if( fval!=0) {
  3022  000116  0101               	movlb	1	; () banked
  3023  000118  514D               	movf	printf@fval& (0+255),w,b
  3024  00011A  0101               	movlb	1	; () banked
  3025  00011C  114E               	iorwf	(printf@fval+1)& (0+255),w,b
  3026  00011E  0101               	movlb	1	; () banked
  3027  000120  114F               	iorwf	(printf@fval+2)& (0+255),w,b
  3028  000122  B4D8               	btfsc	status,2,c
  3029  000124  D09B               	goto	l6574
  3030                           
  3031                           ; BSR set to: 1
  3032                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3033  000126  0E82               	movlw	130
  3034  000128  0101               	movlb	1	; () banked
  3035  00012A  6F33               	movwf	??_printf& (0+255),b
  3036  00012C  0EFF               	movlw	255
  3037  00012E  0101               	movlb	1	; () banked
  3038  000130  6F34               	movwf	(??_printf+1)& (0+255),b
  3039  000132  C14D  F135         	movff	printf@fval,??_printf+2
  3040  000136  C14E  F136         	movff	printf@fval+1,??_printf+3
  3041  00013A  C14F  F137         	movff	printf@fval+2,??_printf+4
  3042  00013E  C150  F138         	movff	printf@fval+3,??_printf+5
  3043  000142  0E10               	movlw	16
  3044  000144  D006               	goto	u6820
  3045  000146                     u6825:
  3046  000146  0101               	movlb	1	; () banked
  3047  000148  90D8               	bcf	status,0,c
  3048  00014A  3338               	rrcf	(??_printf+5)& (0+255),f,b
  3049  00014C  3337               	rrcf	(??_printf+4)& (0+255),f,b
  3050  00014E  3336               	rrcf	(??_printf+3)& (0+255),f,b
  3051  000150  3335               	rrcf	(??_printf+2)& (0+255),f,b
  3052  000152                     u6820:
  3053  000152  2EE8               	decfsz	wreg,f,c
  3054  000154  D7F8               	goto	u6825
  3055  000156  0101               	movlb	1	; () banked
  3056  000158  5135               	movf	(??_printf+2)& (0+255),w,b
  3057  00015A  0101               	movlb	1	; () banked
  3058  00015C  2533               	addwf	??_printf& (0+255),w,b
  3059  00015E  0101               	movlb	1	; () banked
  3060  000160  6F43               	movwf	printf@exp& (0+255),b
  3061  000162  0E00               	movlw	0
  3062  000164  0101               	movlb	1	; () banked
  3063  000166  2134               	addwfc	(??_printf+1)& (0+255),w,b
  3064  000168  0101               	movlb	1	; () banked
  3065  00016A  6F44               	movwf	(printf@exp+1)& (0+255),b
  3066                           
  3067                           ; BSR set to: 1
  3068                           ;doprnt.c: 838: exp--;
  3069  00016C  0101               	movlb	1	; () banked
  3070  00016E  0743               	decf	printf@exp& (0+255),f,b
  3071  000170  A0D8               	btfss	status,0,c
  3072  000172  0744               	decf	(printf@exp+1)& (0+255),f,b
  3073                           
  3074                           ; BSR set to: 1
  3075                           ;doprnt.c: 839: exp *= 3;
  3076  000174  C143  F09C         	movff	printf@exp,___wmul@multiplier
  3077  000178  C144  F09D         	movff	printf@exp+1,___wmul@multiplier+1
  3078  00017C  0E00               	movlw	0
  3079  00017E  0100               	movlb	0	; () banked
  3080  000180  6F9F               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3081  000182  0E03               	movlw	3
  3082  000184  6F9E               	movwf	___wmul@multiplicand& (0+255),b
  3083  000186  EC5B  F025         	call	___wmul	;wreg free
  3084  00018A  C09C  F143         	movff	?___wmul,printf@exp
  3085  00018E  C09D  F144         	movff	?___wmul+1,printf@exp+1
  3086                           
  3087                           ;doprnt.c: 840: exp /= 10;
  3088  000192  C143  F094         	movff	printf@exp,___awdiv@dividend
  3089  000196  C144  F095         	movff	printf@exp+1,___awdiv@dividend+1
  3090  00019A  0E00               	movlw	0
  3091  00019C  0100               	movlb	0	; () banked
  3092  00019E  6F97               	movwf	(___awdiv@divisor+1)& (0+255),b
  3093  0001A0  0E0A               	movlw	10
  3094  0001A2  6F96               	movwf	___awdiv@divisor& (0+255),b
  3095  0001A4  EC91  F01E         	call	___awdiv	;wreg free
  3096  0001A8  C094  F143         	movff	?___awdiv,printf@exp
  3097  0001AC  C095  F144         	movff	?___awdiv+1,printf@exp+1
  3098                           
  3099                           ;doprnt.c: 841: if(exp < 0)
  3100  0001B0  0101               	movlb	1	; () banked
  3101  0001B2  AF44               	btfss	(printf@exp+1)& (0+255),7,b
  3102  0001B4  D004               	goto	l6562
  3103                           
  3104                           ; BSR set to: 1
  3105                           ;doprnt.c: 842: exp--;
  3106  0001B6  0101               	movlb	1	; () banked
  3107  0001B8  0743               	decf	printf@exp& (0+255),f,b
  3108  0001BA  A0D8               	btfss	status,0,c
  3109  0001BC  0744               	decf	(printf@exp+1)& (0+255),f,b
  3110  0001BE                     l6562:
  3111                           
  3112                           ; BSR set to: 1
  3113                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3114  0001BE  0101               	movlb	1	; () banked
  3115  0001C0  5143               	movf	printf@exp& (0+255),w,b
  3116  0001C2  0800               	sublw	0
  3117  0001C4  ECAE  F008         	call	_scale
  3118  0001C8  C0BE  F145         	movff	?_scale,printf@tmpval
  3119  0001CC  C0BF  F146         	movff	?_scale+1,printf@tmpval+1
  3120  0001D0  C0C0  F147         	movff	?_scale+2,printf@tmpval+2
  3121                           
  3122                           ;doprnt.c: 847: tmpval.integ *= fval;
  3123  0001D4  C145  F0AF         	movff	printf@tmpval,___ftmul@f1
  3124  0001D8  C146  F0B0         	movff	printf@tmpval+1,___ftmul@f1+1
  3125  0001DC  C147  F0B1         	movff	printf@tmpval+2,___ftmul@f1+2
  3126  0001E0  C14D  F0B2         	movff	printf@fval,___ftmul@f2
  3127  0001E4  C14E  F0B3         	movff	printf@fval+1,___ftmul@f2+1
  3128  0001E8  C14F  F0B4         	movff	printf@fval+2,___ftmul@f2+2
  3129  0001EC  ECA3  F015         	call	___ftmul	;wreg free
  3130  0001F0  C0AF  F145         	movff	?___ftmul,printf@tmpval
  3131  0001F4  C0B0  F146         	movff	?___ftmul+1,printf@tmpval+1
  3132  0001F8  C0B1  F147         	movff	?___ftmul+2,printf@tmpval+2
  3133                           
  3134                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3135  0001FC  C145  F08E         	movff	printf@tmpval,___ftge@ff1
  3136  000200  C146  F08F         	movff	printf@tmpval+1,___ftge@ff1+1
  3137  000204  C147  F090         	movff	printf@tmpval+2,___ftge@ff1+2
  3138  000208  0E00               	movlw	0
  3139  00020A  0100               	movlb	0	; () banked
  3140  00020C  6F91               	movwf	___ftge@ff2& (0+255),b
  3141  00020E  0E80               	movlw	128
  3142  000210  0100               	movlb	0	; () banked
  3143  000212  6F92               	movwf	(___ftge@ff2+1)& (0+255),b
  3144  000214  0E3F               	movlw	63
  3145  000216  0100               	movlb	0	; () banked
  3146  000218  6F93               	movwf	(___ftge@ff2+2)& (0+255),b
  3147  00021A  ECC9  F01D         	call	___ftge	;wreg free
  3148  00021E  0100               	movlb	0	; () banked
  3149  000220  B0D8               	btfsc	status,0,c
  3150  000222  D005               	goto	l6570
  3151                           
  3152                           ; BSR set to: 0
  3153                           ;doprnt.c: 849: exp--;
  3154  000224  0101               	movlb	1	; () banked
  3155  000226  0743               	decf	printf@exp& (0+255),f,b
  3156  000228  A0D8               	btfss	status,0,c
  3157  00022A  0744               	decf	(printf@exp+1)& (0+255),f,b
  3158  00022C  D017               	goto	l6574
  3159  00022E                     l6570:
  3160                           
  3161                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3162  00022E  C145  F08E         	movff	printf@tmpval,___ftge@ff1
  3163  000232  C146  F08F         	movff	printf@tmpval+1,___ftge@ff1+1
  3164  000236  C147  F090         	movff	printf@tmpval+2,___ftge@ff1+2
  3165  00023A  0E00               	movlw	0
  3166  00023C  0100               	movlb	0	; () banked
  3167  00023E  6F91               	movwf	___ftge@ff2& (0+255),b
  3168  000240  0E20               	movlw	32
  3169  000242  0100               	movlb	0	; () banked
  3170  000244  6F92               	movwf	(___ftge@ff2+1)& (0+255),b
  3171  000246  0E41               	movlw	65
  3172  000248  0100               	movlb	0	; () banked
  3173  00024A  6F93               	movwf	(___ftge@ff2+2)& (0+255),b
  3174  00024C  ECC9  F01D         	call	___ftge	;wreg free
  3175  000250  0100               	movlb	0	; () banked
  3176  000252  A0D8               	btfss	status,0,c
  3177  000254  D003               	goto	l6574
  3178                           
  3179                           ; BSR set to: 0
  3180                           ;doprnt.c: 851: exp++;
  3181  000256  0101               	movlb	1	; () banked
  3182  000258  4B43               	infsnz	printf@exp& (0+255),f,b
  3183  00025A  2B44               	incf	(printf@exp+1)& (0+255),f,b
  3184  00025C                     l6574:
  3185                           
  3186                           ;doprnt.c: 852: }
  3187                           ;doprnt.c: 1112: if(prec <= 12)
  3188  00025C  0101               	movlb	1	; () banked
  3189  00025E  BF42               	btfsc	(printf@prec+1)& (0+255),7,b
  3190  000260  D008               	goto	l6576
  3191  000262  0101               	movlb	1	; () banked
  3192  000264  5142               	movf	(printf@prec+1)& (0+255),w,b
  3193  000266  E11D               	bnz	l6578
  3194  000268  0E0D               	movlw	13
  3195  00026A  0101               	movlb	1	; () banked
  3196  00026C  5D41               	subwf	printf@prec& (0+255),w,b
  3197  00026E  B0D8               	btfsc	status,0,c
  3198  000270  D018               	goto	l6578
  3199  000272                     l6576:
  3200                           
  3201                           ; BSR set to: 1
  3202                           ;doprnt.c: 1113: fval += fround(prec);
  3203  000272  C14D  F0C8         	movff	printf@fval,___ftadd@f1
  3204  000276  C14E  F0C9         	movff	printf@fval+1,___ftadd@f1+1
  3205  00027A  C14F  F0CA         	movff	printf@fval+2,___ftadd@f1+2
  3206  00027E  0101               	movlb	1	; () banked
  3207  000280  5141               	movf	printf@prec& (0+255),w,b
  3208  000282  ECDA  F00E         	call	_fround
  3209  000286  C0BE  F0CB         	movff	?_fround,___ftadd@f2
  3210  00028A  C0BF  F0CC         	movff	?_fround+1,___ftadd@f2+1
  3211  00028E  C0C0  F0CD         	movff	?_fround+2,___ftadd@f2+2
  3212  000292  EC30  F010         	call	___ftadd	;wreg free
  3213  000296  C0C8  F14D         	movff	?___ftadd,printf@fval
  3214  00029A  C0C9  F14E         	movff	?___ftadd+1,printf@fval+1
  3215  00029E  C0CA  F14F         	movff	?___ftadd+2,printf@fval+2
  3216  0002A2                     l6578:
  3217                           
  3218                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3219  0002A2  0101               	movlb	1	; () banked
  3220  0002A4  BF44               	btfsc	(printf@exp+1)& (0+255),7,b
  3221  0002A6  D008               	goto	l6580
  3222  0002A8  0101               	movlb	1	; () banked
  3223  0002AA  5144               	movf	(printf@exp+1)& (0+255),w,b
  3224  0002AC  E12A               	bnz	l6586
  3225  0002AE  0E0A               	movlw	10
  3226  0002B0  0101               	movlb	1	; () banked
  3227  0002B2  5D43               	subwf	printf@exp& (0+255),w,b
  3228  0002B4  B0D8               	btfsc	status,0,c
  3229  0002B6  D025               	goto	l6586
  3230  0002B8                     l6580:
  3231                           
  3232                           ; BSR set to: 1
  3233  0002B8  0101               	movlb	1	; () banked
  3234  0002BA  514D               	movf	printf@fval& (0+255),w,b
  3235  0002BC  0101               	movlb	1	; () banked
  3236  0002BE  114E               	iorwf	(printf@fval+1)& (0+255),w,b
  3237  0002C0  0101               	movlb	1	; () banked
  3238  0002C2  114F               	iorwf	(printf@fval+2)& (0+255),w,b
  3239  0002C4  B4D8               	btfsc	status,2,c
  3240  0002C6  D063               	goto	l6600
  3241                           
  3242                           ; BSR set to: 1
  3243  0002C8  C14D  F0D4         	movff	printf@fval,___fttol@f1
  3244  0002CC  C14E  F0D5         	movff	printf@fval+1,___fttol@f1+1
  3245  0002D0  C14F  F0D6         	movff	printf@fval+2,___fttol@f1+2
  3246  0002D4  ECF8  F016         	call	___fttol	;wreg free
  3247  0002D8  0100               	movlb	0	; () banked
  3248  0002DA  51D4               	movf	?___fttol& (0+255),w,b
  3249  0002DC  0100               	movlb	0	; () banked
  3250  0002DE  11D5               	iorwf	(?___fttol+1)& (0+255),w,b
  3251  0002E0  0100               	movlb	0	; () banked
  3252  0002E2  11D6               	iorwf	(?___fttol+2)& (0+255),w,b
  3253  0002E4  0100               	movlb	0	; () banked
  3254  0002E6  11D7               	iorwf	(?___fttol+3)& (0+255),w,b
  3255  0002E8  A4D8               	btfss	status,2,c
  3256  0002EA  D051               	goto	l6600
  3257                           
  3258                           ; BSR set to: 0
  3259  0002EC  0101               	movlb	1	; () banked
  3260  0002EE  BF44               	btfsc	(printf@exp+1)& (0+255),7,b
  3261  0002F0  D04E               	goto	l6600
  3262  0002F2  0101               	movlb	1	; () banked
  3263  0002F4  5144               	movf	(printf@exp+1)& (0+255),w,b
  3264  0002F6  E105               	bnz	l6586
  3265  0002F8  0E02               	movlw	2
  3266  0002FA  0101               	movlb	1	; () banked
  3267  0002FC  5D43               	subwf	printf@exp& (0+255),w,b
  3268  0002FE  A0D8               	btfss	status,0,c
  3269  000300  D046               	goto	l6600
  3270  000302                     l6586:
  3271                           
  3272                           ; BSR set to: 1
  3273                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3274  000302  C145  F08E         	movff	printf@tmpval,___ftge@ff1
  3275  000306  C146  F08F         	movff	printf@tmpval+1,___ftge@ff1+1
  3276  00030A  C147  F090         	movff	printf@tmpval+2,___ftge@ff1+2
  3277  00030E  0E70               	movlw	112
  3278  000310  0100               	movlb	0	; () banked
  3279  000312  6F91               	movwf	___ftge@ff2& (0+255),b
  3280  000314  0E89               	movlw	137
  3281  000316  0100               	movlb	0	; () banked
  3282  000318  6F92               	movwf	(___ftge@ff2+1)& (0+255),b
  3283  00031A  0E40               	movlw	64
  3284  00031C  0100               	movlb	0	; () banked
  3285  00031E  6F93               	movwf	(___ftge@ff2+2)& (0+255),b
  3286  000320  ECC9  F01D         	call	___ftge	;wreg free
  3287  000324  0100               	movlb	0	; () banked
  3288  000326  B0D8               	btfsc	status,0,c
  3289  000328  D003               	goto	l6590
  3290                           
  3291                           ; BSR set to: 0
  3292                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3293  00032A  0101               	movlb	1	; () banked
  3294  00032C  0EF7               	movlw	247
  3295  00032E  D002               	goto	L1
  3296  000330                     l6590:
  3297                           
  3298                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3299  000330  0101               	movlb	1	; () banked
  3300  000332  0EF8               	movlw	248
  3301  000334                     L1:
  3302  000334  2743               	addwf	printf@exp& (0+255),f,b
  3303  000336  0EFF               	movlw	255
  3304  000338  2344               	addwfc	(printf@exp+1)& (0+255),f,b
  3305                           
  3306                           ; BSR set to: 1
  3307                           ;doprnt.c: 1124: }
  3308                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3309                           
  3310                           ; BSR set to: 1
  3311  00033A  0101               	movlb	1	; () banked
  3312  00033C  5143               	movf	printf@exp& (0+255),w,b
  3313  00033E  ECAE  F008         	call	_scale
  3314  000342  C0BE  F145         	movff	?_scale,printf@tmpval
  3315  000346  C0BF  F146         	movff	?_scale+1,printf@tmpval+1
  3316  00034A  C0C0  F147         	movff	?_scale+2,printf@tmpval+2
  3317                           
  3318                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3319  00034E  C14D  F08E         	movff	printf@fval,__tdiv_to_l_@f1
  3320  000352  C14E  F08F         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  3321  000356  C14F  F090         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  3322  00035A  C145  F091         	movff	printf@tmpval,__tdiv_to_l_@f2
  3323  00035E  C146  F092         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  3324  000362  C147  F093         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  3325  000366  EC5D  F013         	call	__tdiv_to_l_	;wreg free
  3326  00036A  C08E  F149         	movff	?__tdiv_to_l_,printf@val
  3327  00036E  C08F  F14A         	movff	?__tdiv_to_l_+1,printf@val+1
  3328  000372  C090  F14B         	movff	?__tdiv_to_l_+2,printf@val+2
  3329  000376  C091  F14C         	movff	?__tdiv_to_l_+3,printf@val+3
  3330                           
  3331                           ;doprnt.c: 1129: fval = 0.0;
  3332  00037A  0E00               	movlw	0
  3333  00037C  0101               	movlb	1	; () banked
  3334  00037E  6F4D               	movwf	printf@fval& (0+255),b
  3335  000380  0E00               	movlw	0
  3336  000382  0101               	movlb	1	; () banked
  3337  000384  6F4E               	movwf	(printf@fval+1)& (0+255),b
  3338  000386  0E00               	movlw	0
  3339  000388  0101               	movlb	1	; () banked
  3340  00038A  6F4F               	movwf	(printf@fval+2)& (0+255),b
  3341                           
  3342                           ;doprnt.c: 1130: } else {
  3343  00038C  D033               	goto	l6604
  3344  00038E                     l6600:
  3345                           
  3346                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3347  00038E  C14D  F0D4         	movff	printf@fval,___fttol@f1
  3348  000392  C14E  F0D5         	movff	printf@fval+1,___fttol@f1+1
  3349  000396  C14F  F0D6         	movff	printf@fval+2,___fttol@f1+2
  3350  00039A  ECF8  F016         	call	___fttol	;wreg free
  3351  00039E  C0D4  F149         	movff	?___fttol,printf@val
  3352  0003A2  C0D5  F14A         	movff	?___fttol+1,printf@val+1
  3353  0003A6  C0D6  F14B         	movff	?___fttol+2,printf@val+2
  3354  0003AA  C0D7  F14C         	movff	?___fttol+3,printf@val+3
  3355                           
  3356                           ;doprnt.c: 1132: fval -= (double)val;
  3357  0003AE  C14D  F0D4         	movff	printf@fval,___ftsub@f1
  3358  0003B2  C14E  F0D5         	movff	printf@fval+1,___ftsub@f1+1
  3359  0003B6  C14F  F0D6         	movff	printf@fval+2,___ftsub@f1+2
  3360  0003BA  C149  F096         	movff	printf@val,___lltoft@c
  3361  0003BE  C14A  F097         	movff	printf@val+1,___lltoft@c+1
  3362  0003C2  C14B  F098         	movff	printf@val+2,___lltoft@c+2
  3363  0003C6  C14C  F099         	movff	printf@val+3,___lltoft@c+3
  3364  0003CA  EC48  F022         	call	___lltoft	;wreg free
  3365  0003CE  C096  F0D7         	movff	?___lltoft,___ftsub@f2
  3366  0003D2  C097  F0D8         	movff	?___lltoft+1,___ftsub@f2+1
  3367  0003D6  C098  F0D9         	movff	?___lltoft+2,___ftsub@f2+2
  3368  0003DA  EC27  F024         	call	___ftsub	;wreg free
  3369  0003DE  C0D4  F14D         	movff	?___ftsub,printf@fval
  3370  0003E2  C0D5  F14E         	movff	?___ftsub+1,printf@fval+1
  3371  0003E6  C0D6  F14F         	movff	?___ftsub+2,printf@fval+2
  3372                           
  3373                           ;doprnt.c: 1133: exp = 0;
  3374  0003EA  0E00               	movlw	0
  3375  0003EC  0101               	movlb	1	; () banked
  3376  0003EE  6F44               	movwf	(printf@exp+1)& (0+255),b
  3377  0003F0  0E00               	movlw	0
  3378  0003F2  6F43               	movwf	printf@exp& (0+255),b
  3379  0003F4                     l6604:
  3380                           
  3381                           ; BSR set to: 1
  3382                           ;doprnt.c: 1134: }
  3383                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3384  0003F4  0E01               	movlw	1
  3385  0003F6  0101               	movlb	1	; () banked
  3386  0003F8  6F50               	movwf	printf@c& (0+255),b
  3387  0003FA                     l6606:
  3388                           
  3389                           ; BSR set to: 1
  3390  0003FA  0E0A               	movlw	10
  3391  0003FC  0101               	movlb	1	; () banked
  3392  0003FE  1950               	xorwf	printf@c& (0+255),w,b
  3393  000400  B4D8               	btfsc	status,2,c
  3394  000402  D01E               	goto	l6618
  3395                           
  3396                           ; BSR set to: 1
  3397                           ;doprnt.c: 1137: if(val < dpowers[c])
  3398                           
  3399                           ; BSR set to: 1
  3400                           
  3401                           ; BSR set to: 1
  3402  000404  0101               	movlb	1	; () banked
  3403  000406  5150               	movf	printf@c& (0+255),w,b
  3404  000408  0D04               	mullw	4
  3405  00040A  0E31               	movlw	low _dpowers
  3406  00040C  24F3               	addwf	prodl,w,c
  3407  00040E  6EF6               	movwf	tblptrl,c
  3408  000410  0EFE               	movlw	high _dpowers
  3409  000412  20F4               	addwfc	prodh,w,c
  3410  000414  6EF7               	movwf	tblptrh,c
  3411  000416                     	if	0	;There are less than 3 active tblptr bytes
  3412  000416                     	endif
  3413  000416  0009               	tblrd		*+
  3414  000418  50F5               	movf	tablat,w,c
  3415  00041A  0101               	movlb	1	; () banked
  3416  00041C  5D49               	subwf	printf@val& (0+255),w,b
  3417  00041E  0009               	tblrd		*+
  3418  000420  50F5               	movf	tablat,w,c
  3419  000422  0101               	movlb	1	; () banked
  3420  000424  594A               	subwfb	(printf@val+1)& (0+255),w,b
  3421  000426  0009               	tblrd		*+
  3422  000428  50F5               	movf	tablat,w,c
  3423  00042A  0101               	movlb	1	; () banked
  3424  00042C  594B               	subwfb	(printf@val+2)& (0+255),w,b
  3425  00042E  0009               	tblrd		*+
  3426  000430  50F5               	movf	tablat,w,c
  3427  000432  0101               	movlb	1	; () banked
  3428  000434  594C               	subwfb	(printf@val+3)& (0+255),w,b
  3429  000436  A0D8               	btfss	status,0,c
  3430  000438  D003               	goto	l6618
  3431                           
  3432                           ; BSR set to: 1
  3433                           
  3434                           ; BSR set to: 1
  3435                           
  3436                           ; BSR set to: 1
  3437                           ;doprnt.c: 1138: break;
  3438  00043A  0101               	movlb	1	; () banked
  3439  00043C  2B50               	incf	printf@c& (0+255),f,b
  3440  00043E  D7DD               	goto	l6606
  3441  000440                     l6618:
  3442                           
  3443                           ; BSR set to: 1
  3444                           ;doprnt.c: 1175: {
  3445                           ;doprnt.c: 1188: if(flag & 0x03)
  3446  000440  0E03               	movlw	3
  3447  000442  0101               	movlb	1	; () banked
  3448  000444  153F               	andwf	printf@flag& (0+255),w,b
  3449  000446  0101               	movlb	1	; () banked
  3450  000448  6F33               	movwf	??_printf& (0+255),b
  3451  00044A  0E00               	movlw	0
  3452  00044C  0101               	movlb	1	; () banked
  3453  00044E  1540               	andwf	(printf@flag+1)& (0+255),w,b
  3454  000450  0101               	movlb	1	; () banked
  3455  000452  6F34               	movwf	(??_printf+1)& (0+255),b
  3456  000454  0101               	movlb	1	; () banked
  3457  000456  5133               	movf	??_printf& (0+255),w,b
  3458  000458  0101               	movlb	1	; () banked
  3459  00045A  1134               	iorwf	(??_printf+1)& (0+255),w,b
  3460  00045C  B4D8               	btfsc	status,2,c
  3461  00045E  D04B               	goto	l6628
  3462                           
  3463                           ; BSR set to: 1
  3464                           ;doprnt.c: 1190: (putch('-') );
  3465  000460  0E2D               	movlw	45
  3466  000462  ECD2  F025         	call	_putch
  3467                           
  3468                           ;doprnt.c: 1195: }
  3469                           ;doprnt.c: 1196: while(c--) {
  3470  000466  D047               	goto	l6628
  3471  000468                     l6622:
  3472                           
  3473                           ;doprnt.c: 1200: {
  3474                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3475  000468  C149  F08E         	movff	printf@val,___lldiv@dividend
  3476  00046C  C14A  F08F         	movff	printf@val+1,___lldiv@dividend+1
  3477  000470  C14B  F090         	movff	printf@val+2,___lldiv@dividend+2
  3478  000474  C14C  F091         	movff	printf@val+3,___lldiv@dividend+3
  3479  000478  0101               	movlb	1	; () banked
  3480  00047A  5150               	movf	printf@c& (0+255),w,b
  3481  00047C  0D04               	mullw	4
  3482  00047E  0E31               	movlw	low _dpowers
  3483  000480  24F3               	addwf	prodl,w,c
  3484  000482  6EF6               	movwf	tblptrl,c
  3485  000484  0EFE               	movlw	high _dpowers
  3486  000486  20F4               	addwfc	prodh,w,c
  3487  000488  6EF7               	movwf	tblptrh,c
  3488  00048A                     	if	0	;There are less than 3 active tblptr bytes
  3489  00048A                     	endif
  3490  00048A  0009               	tblrd		*+
  3491  00048C  CFF5 F092          	movff	tablat,___lldiv@divisor
  3492  000490  0009               	tblrd		*+
  3493  000492  CFF5 F093          	movff	tablat,___lldiv@divisor+1
  3494  000496  0009               	tblrd		*+
  3495  000498  CFF5 F094          	movff	tablat,___lldiv@divisor+2
  3496  00049C  000A               	tblrd		*-
  3497  00049E  CFF5 F095          	movff	tablat,___lldiv@divisor+3
  3498  0004A2  ECF0  F01E         	call	___lldiv	;wreg free
  3499  0004A6  C08E  F145         	movff	?___lldiv,printf@tmpval
  3500  0004AA  C08F  F146         	movff	?___lldiv+1,printf@tmpval+1
  3501  0004AE  C090  F147         	movff	?___lldiv+2,printf@tmpval+2
  3502  0004B2  C091  F148         	movff	?___lldiv+3,printf@tmpval+3
  3503                           
  3504                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3505  0004B6  C145  F09B         	movff	printf@tmpval,___llmod@dividend
  3506  0004BA  C146  F09C         	movff	printf@tmpval+1,___llmod@dividend+1
  3507  0004BE  C147  F09D         	movff	printf@tmpval+2,___llmod@dividend+2
  3508  0004C2  C148  F09E         	movff	printf@tmpval+3,___llmod@dividend+3
  3509  0004C6  0E0A               	movlw	10
  3510  0004C8  0100               	movlb	0	; () banked
  3511  0004CA  6F9F               	movwf	___llmod@divisor& (0+255),b
  3512  0004CC  0E00               	movlw	0
  3513  0004CE  6FA0               	movwf	(___llmod@divisor+1)& (0+255),b
  3514  0004D0  0E00               	movlw	0
  3515  0004D2  6FA1               	movwf	(___llmod@divisor+2)& (0+255),b
  3516  0004D4  0E00               	movlw	0
  3517  0004D6  6FA2               	movwf	(___llmod@divisor+3)& (0+255),b
  3518  0004D8  ECE9  F020         	call	___llmod	;wreg free
  3519  0004DC  C09B  F145         	movff	?___llmod,printf@tmpval
  3520  0004E0  C09C  F146         	movff	?___llmod+1,printf@tmpval+1
  3521  0004E4  C09D  F147         	movff	?___llmod+2,printf@tmpval+2
  3522  0004E8  C09E  F148         	movff	?___llmod+3,printf@tmpval+3
  3523                           
  3524                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  3525  0004EC  0101               	movlb	1	; () banked
  3526  0004EE  5145               	movf	printf@tmpval& (0+255),w,b
  3527  0004F0  0F30               	addlw	48
  3528  0004F2  ECD2  F025         	call	_putch
  3529  0004F6                     l6628:
  3530  0004F6  0101               	movlb	1	; () banked
  3531  0004F8  0750               	decf	printf@c& (0+255),f,b
  3532  0004FA  0101               	movlb	1	; () banked
  3533  0004FC  2950               	incf	printf@c& (0+255),w,b
  3534  0004FE  B4D8               	btfsc	status,2,c
  3535  000500  D008               	goto	l6634
  3536  000502  D7B2               	goto	l6622
  3537  000504                     l6630:
  3538                           
  3539                           ; BSR set to: 1
  3540                           ;doprnt.c: 1208: (putch('0') );
  3541  000504  0E30               	movlw	48
  3542  000506  ECD2  F025         	call	_putch
  3543                           
  3544                           ;doprnt.c: 1209: exp--;
  3545  00050A  0101               	movlb	1	; () banked
  3546  00050C  0743               	decf	printf@exp& (0+255),f,b
  3547  00050E  A0D8               	btfss	status,0,c
  3548  000510  0744               	decf	(printf@exp+1)& (0+255),f,b
  3549  000512                     l6634:
  3550                           
  3551                           ; BSR set to: 1
  3552  000512  0101               	movlb	1	; () banked
  3553  000514  BF44               	btfsc	(printf@exp+1)& (0+255),7,b
  3554  000516  D007               	goto	l6636
  3555  000518  0101               	movlb	1	; () banked
  3556  00051A  5144               	movf	(printf@exp+1)& (0+255),w,b
  3557  00051C  E1F3               	bnz	l6630
  3558  00051E  0101               	movlb	1	; () banked
  3559  000520  0543               	decf	printf@exp& (0+255),w,b
  3560  000522  B0D8               	btfsc	status,0,c
  3561  000524  D7EF               	goto	l6630
  3562  000526                     l6636:
  3563                           
  3564                           ; BSR set to: 1
  3565                           ;doprnt.c: 1210: }
  3566                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3567  000526  0101               	movlb	1	; () banked
  3568  000528  BF42               	btfsc	(printf@prec+1)& (0+255),7,b
  3569  00052A  D00C               	goto	l685
  3570  00052C  0101               	movlb	1	; () banked
  3571  00052E  5142               	movf	(printf@prec+1)& (0+255),w,b
  3572  000530  E105               	bnz	u6980
  3573  000532  0E09               	movlw	9
  3574  000534  0101               	movlb	1	; () banked
  3575  000536  5D41               	subwf	printf@prec& (0+255),w,b
  3576  000538  A0D8               	btfss	status,0,c
  3577  00053A  D004               	goto	l685
  3578  00053C                     u6980:
  3579                           
  3580                           ; BSR set to: 1
  3581                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3582  00053C  0E08               	movlw	8
  3583  00053E  0101               	movlb	1	; () banked
  3584  000540  6F50               	movwf	printf@c& (0+255),b
  3585  000542  D002               	goto	l6640
  3586  000544                     l685:
  3587                           
  3588                           ; BSR set to: 1
  3589                           ;doprnt.c: 1213: else
  3590                           ;doprnt.c: 1214: c = prec;
  3591  000544  C141  F150         	movff	printf@prec,printf@c
  3592  000548                     l6640:
  3593                           
  3594                           ; BSR set to: 1
  3595                           ;doprnt.c: 1215: prec -= c;
  3596  000548  0101               	movlb	1	; () banked
  3597  00054A  5150               	movf	printf@c& (0+255),w,b
  3598  00054C  0101               	movlb	1	; () banked
  3599  00054E  5F41               	subwf	printf@prec& (0+255),f,b
  3600  000550  0E00               	movlw	0
  3601  000552  0101               	movlb	1	; () banked
  3602  000554  BF50               	btfsc	printf@c& (0+255),7,b
  3603  000556  0EFF               	movlw	255
  3604  000558  0101               	movlb	1	; () banked
  3605  00055A  5B42               	subwfb	(printf@prec+1)& (0+255),f,b
  3606                           
  3607                           ; BSR set to: 1
  3608                           ;doprnt.c: 1219: if(c)
  3609  00055C  0101               	movlb	1	; () banked
  3610  00055E  5150               	movf	printf@c& (0+255),w,b
  3611  000560  0101               	movlb	1	; () banked
  3612  000562  B4D8               	btfsc	status,2,c
  3613  000564  D003               	goto	l6646
  3614                           
  3615                           ; BSR set to: 1
  3616                           ;doprnt.c: 1221: (putch('.') );
  3617  000566  0E2E               	movlw	46
  3618  000568  ECD2  F025         	call	_putch
  3619  00056C                     l6646:
  3620                           
  3621                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3622  00056C  0101               	movlb	1	; () banked
  3623  00056E  5150               	movf	printf@c& (0+255),w,b
  3624  000570  ECAE  F008         	call	_scale
  3625  000574  C0BE  F139         	movff	?_scale,_printf$1315
  3626  000578  C0BF  F13A         	movff	?_scale+1,_printf$1315+1
  3627  00057C  C0C0  F13B         	movff	?_scale+2,_printf$1315+2
  3628                           
  3629                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3630  000580  C14D  F0B2         	movff	printf@fval,___ftmul@f2
  3631  000584  C14E  F0B3         	movff	printf@fval+1,___ftmul@f2+1
  3632  000588  C14F  F0B4         	movff	printf@fval+2,___ftmul@f2+2
  3633  00058C  C139  F0AF         	movff	_printf$1315,___ftmul@f1
  3634  000590  C13A  F0B0         	movff	_printf$1315+1,___ftmul@f1+1
  3635  000594  C13B  F0B1         	movff	_printf$1315+2,___ftmul@f1+2
  3636  000598  ECA3  F015         	call	___ftmul	;wreg free
  3637  00059C  C0AF  F0D4         	movff	?___ftmul,___fttol@f1
  3638  0005A0  C0B0  F0D5         	movff	?___ftmul+1,___fttol@f1+1
  3639  0005A4  C0B1  F0D6         	movff	?___ftmul+2,___fttol@f1+2
  3640  0005A8  ECF8  F016         	call	___fttol	;wreg free
  3641  0005AC  C0D4  F149         	movff	?___fttol,printf@val
  3642  0005B0  C0D5  F14A         	movff	?___fttol+1,printf@val+1
  3643  0005B4  C0D6  F14B         	movff	?___fttol+2,printf@val+2
  3644  0005B8  C0D7  F14C         	movff	?___fttol+3,printf@val+3
  3645                           
  3646                           ;doprnt.c: 1228: while(c--) {
  3647  0005BC  D06E               	goto	l6656
  3648  0005BE                     l6650:
  3649                           
  3650                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3651  0005BE  C149  F08E         	movff	printf@val,___lldiv@dividend
  3652  0005C2  C14A  F08F         	movff	printf@val+1,___lldiv@dividend+1
  3653  0005C6  C14B  F090         	movff	printf@val+2,___lldiv@dividend+2
  3654  0005CA  C14C  F091         	movff	printf@val+3,___lldiv@dividend+3
  3655  0005CE  0101               	movlb	1	; () banked
  3656  0005D0  5150               	movf	printf@c& (0+255),w,b
  3657  0005D2  0D04               	mullw	4
  3658  0005D4  0E31               	movlw	low _dpowers
  3659  0005D6  24F3               	addwf	prodl,w,c
  3660  0005D8  6EF6               	movwf	tblptrl,c
  3661  0005DA  0EFE               	movlw	high _dpowers
  3662  0005DC  20F4               	addwfc	prodh,w,c
  3663  0005DE  6EF7               	movwf	tblptrh,c
  3664  0005E0                     	if	0	;There are less than 3 active tblptr bytes
  3665  0005E0                     	endif
  3666  0005E0  0009               	tblrd		*+
  3667  0005E2  CFF5 F092          	movff	tablat,___lldiv@divisor
  3668  0005E6  0009               	tblrd		*+
  3669  0005E8  CFF5 F093          	movff	tablat,___lldiv@divisor+1
  3670  0005EC  0009               	tblrd		*+
  3671  0005EE  CFF5 F094          	movff	tablat,___lldiv@divisor+2
  3672  0005F2  000A               	tblrd		*-
  3673  0005F4  CFF5 F095          	movff	tablat,___lldiv@divisor+3
  3674  0005F8  ECF0  F01E         	call	___lldiv	;wreg free
  3675  0005FC  C08E  F145         	movff	?___lldiv,printf@tmpval
  3676  000600  C08F  F146         	movff	?___lldiv+1,printf@tmpval+1
  3677  000604  C090  F147         	movff	?___lldiv+2,printf@tmpval+2
  3678  000608  C091  F148         	movff	?___lldiv+3,printf@tmpval+3
  3679                           
  3680                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3681  00060C  C145  F09B         	movff	printf@tmpval,___llmod@dividend
  3682  000610  C146  F09C         	movff	printf@tmpval+1,___llmod@dividend+1
  3683  000614  C147  F09D         	movff	printf@tmpval+2,___llmod@dividend+2
  3684  000618  C148  F09E         	movff	printf@tmpval+3,___llmod@dividend+3
  3685  00061C  0E0A               	movlw	10
  3686  00061E  0100               	movlb	0	; () banked
  3687  000620  6F9F               	movwf	___llmod@divisor& (0+255),b
  3688  000622  0E00               	movlw	0
  3689  000624  6FA0               	movwf	(___llmod@divisor+1)& (0+255),b
  3690  000626  0E00               	movlw	0
  3691  000628  6FA1               	movwf	(___llmod@divisor+2)& (0+255),b
  3692  00062A  0E00               	movlw	0
  3693  00062C  6FA2               	movwf	(___llmod@divisor+3)& (0+255),b
  3694  00062E  ECE9  F020         	call	___llmod	;wreg free
  3695  000632  C09B  F145         	movff	?___llmod,printf@tmpval
  3696  000636  C09C  F146         	movff	?___llmod+1,printf@tmpval+1
  3697  00063A  C09D  F147         	movff	?___llmod+2,printf@tmpval+2
  3698  00063E  C09E  F148         	movff	?___llmod+3,printf@tmpval+3
  3699                           
  3700                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  3701  000642  0101               	movlb	1	; () banked
  3702  000644  5145               	movf	printf@tmpval& (0+255),w,b
  3703  000646  0F30               	addlw	48
  3704  000648  ECD2  F025         	call	_putch
  3705                           
  3706                           ;doprnt.c: 1232: val %= dpowers[c];
  3707  00064C  C149  F09B         	movff	printf@val,___llmod@dividend
  3708  000650  C14A  F09C         	movff	printf@val+1,___llmod@dividend+1
  3709  000654  C14B  F09D         	movff	printf@val+2,___llmod@dividend+2
  3710  000658  C14C  F09E         	movff	printf@val+3,___llmod@dividend+3
  3711  00065C  0101               	movlb	1	; () banked
  3712  00065E  5150               	movf	printf@c& (0+255),w,b
  3713  000660  0D04               	mullw	4
  3714  000662  0E31               	movlw	low _dpowers
  3715  000664  24F3               	addwf	prodl,w,c
  3716  000666  6EF6               	movwf	tblptrl,c
  3717  000668  0EFE               	movlw	high _dpowers
  3718  00066A  20F4               	addwfc	prodh,w,c
  3719  00066C  6EF7               	movwf	tblptrh,c
  3720  00066E                     	if	0	;There are less than 3 active tblptr bytes
  3721  00066E                     	endif
  3722  00066E  0009               	tblrd		*+
  3723  000670  CFF5 F09F          	movff	tablat,___llmod@divisor
  3724  000674  0009               	tblrd		*+
  3725  000676  CFF5 F0A0          	movff	tablat,___llmod@divisor+1
  3726  00067A  0009               	tblrd		*+
  3727  00067C  CFF5 F0A1          	movff	tablat,___llmod@divisor+2
  3728  000680  000A               	tblrd		*-
  3729  000682  CFF5 F0A2          	movff	tablat,___llmod@divisor+3
  3730  000686  ECE9  F020         	call	___llmod	;wreg free
  3731  00068A  C09B  F149         	movff	?___llmod,printf@val
  3732  00068E  C09C  F14A         	movff	?___llmod+1,printf@val+1
  3733  000692  C09D  F14B         	movff	?___llmod+2,printf@val+2
  3734  000696  C09E  F14C         	movff	?___llmod+3,printf@val+3
  3735  00069A                     l6656:
  3736  00069A  0101               	movlb	1	; () banked
  3737  00069C  0750               	decf	printf@c& (0+255),f,b
  3738  00069E  0101               	movlb	1	; () banked
  3739  0006A0  2950               	incf	printf@c& (0+255),w,b
  3740  0006A2  B4D8               	btfsc	status,2,c
  3741  0006A4  D008               	goto	l6662
  3742  0006A6  D78B               	goto	l6650
  3743  0006A8                     l6658:
  3744                           
  3745                           ; BSR set to: 1
  3746                           ;doprnt.c: 1236: (putch('0') );
  3747  0006A8  0E30               	movlw	48
  3748  0006AA  ECD2  F025         	call	_putch
  3749                           
  3750                           ;doprnt.c: 1237: prec--;
  3751  0006AE  0101               	movlb	1	; () banked
  3752  0006B0  0741               	decf	printf@prec& (0+255),f,b
  3753  0006B2  A0D8               	btfss	status,0,c
  3754  0006B4  0742               	decf	(printf@prec+1)& (0+255),f,b
  3755  0006B6                     l6662:
  3756                           
  3757                           ; BSR set to: 1
  3758  0006B6  0101               	movlb	1	; () banked
  3759  0006B8  5141               	movf	printf@prec& (0+255),w,b
  3760  0006BA  0101               	movlb	1	; () banked
  3761  0006BC  1142               	iorwf	(printf@prec+1)& (0+255),w,b
  3762  0006BE  B4D8               	btfsc	status,2,c
  3763  0006C0  D141               	goto	l6730
  3764  0006C2  D7F2               	goto	l6658
  3765  0006C4                     l657:
  3766                           
  3767                           ; BSR set to: 1
  3768                           ;doprnt.c: 1246: }
  3769                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3770  0006C4  0101               	movlb	1	; () banked
  3771  0006C6  BF3F               	btfsc	printf@flag& (0+255),7,b
  3772  0006C8  D023               	goto	l6674
  3773                           
  3774                           ; BSR set to: 1
  3775                           ;doprnt.c: 1253: {
  3776                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3777  0006CA  C13D  FFD9         	movff	printf@ap,fsr2l
  3778  0006CE  C13E  FFDA         	movff	printf@ap+1,fsr2h
  3779  0006D2  CFDE F149          	movff	postinc2,printf@val
  3780  0006D6  CFDD F14A          	movff	postdec2,printf@val+1
  3781  0006DA  0101               	movlb	1	; () banked
  3782  0006DC  0E00               	movlw	0
  3783  0006DE  BF4A               	btfsc	(printf@val+1)& (0+255),7,b
  3784  0006E0  0EFF               	movlw	-1
  3785  0006E2  6F4B               	movwf	(printf@val+2)& (0+255),b
  3786  0006E4  6F4C               	movwf	(printf@val+3)& (0+255),b
  3787                           
  3788                           ; BSR set to: 1
  3789  0006E6  0E02               	movlw	2
  3790  0006E8  0101               	movlb	1	; () banked
  3791  0006EA  273D               	addwf	printf@ap& (0+255),f,b
  3792  0006EC  0E00               	movlw	0
  3793  0006EE  233E               	addwfc	(printf@ap+1)& (0+255),f,b
  3794                           
  3795                           ; BSR set to: 1
  3796                           ;doprnt.c: 1261: if((long)val < 0) {
  3797  0006F0  0101               	movlb	1	; () banked
  3798  0006F2  AF4C               	btfss	(printf@val+3)& (0+255),7,b
  3799  0006F4  D06E               	goto	l6708
  3800                           
  3801                           ; BSR set to: 1
  3802                           ;doprnt.c: 1262: flag |= 0x03;
  3803  0006F6  0E03               	movlw	3
  3804  0006F8  0101               	movlb	1	; () banked
  3805  0006FA  133F               	iorwf	printf@flag& (0+255),f,b
  3806                           
  3807                           ; BSR set to: 1
  3808                           ;doprnt.c: 1263: val = -val;
  3809  0006FC  0101               	movlb	1	; () banked
  3810  0006FE  1F4C               	comf	(printf@val+3)& (0+255),f,b
  3811  000700  1F4B               	comf	(printf@val+2)& (0+255),f,b
  3812  000702  1F4A               	comf	(printf@val+1)& (0+255),f,b
  3813  000704  6D49               	negf	printf@val& (0+255),b
  3814  000706  0E00               	movlw	0
  3815  000708  234A               	addwfc	(printf@val+1)& (0+255),f,b
  3816  00070A  234B               	addwfc	(printf@val+2)& (0+255),f,b
  3817  00070C  234C               	addwfc	(printf@val+3)& (0+255),f,b
  3818                           
  3819                           ; BSR set to: 1
  3820                           ;doprnt.c: 1264: }
  3821                           ;doprnt.c: 1266: }
  3822  00070E  D061               	goto	l6708
  3823  000710                     l6674:
  3824                           
  3825                           ; BSR set to: 1
  3826                           ;doprnt.c: 1268: else
  3827                           ;doprnt.c: 1273: {
  3828                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3829  000710  C13D  FFD9         	movff	printf@ap,fsr2l
  3830  000714  C13E  FFDA         	movff	printf@ap+1,fsr2h
  3831  000718  CFDE F133          	movff	postinc2,??_printf
  3832  00071C  CFDD F134          	movff	postdec2,??_printf+1
  3833  000720  C133  F149         	movff	??_printf,printf@val
  3834  000724  C134  F14A         	movff	??_printf+1,printf@val+1
  3835  000728  0101               	movlb	1	; () banked
  3836  00072A  6B4B               	clrf	(printf@val+2)& (0+255),b
  3837  00072C  6B4C               	clrf	(printf@val+3)& (0+255),b
  3838                           
  3839                           ; BSR set to: 1
  3840  00072E  0E02               	movlw	2
  3841  000730  0101               	movlb	1	; () banked
  3842  000732  273D               	addwf	printf@ap& (0+255),f,b
  3843  000734  0E00               	movlw	0
  3844  000736  233E               	addwfc	(printf@ap+1)& (0+255),f,b
  3845                           
  3846                           ; BSR set to: 1
  3847                           ;doprnt.c: 1287: }
  3848                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3849  000738  D04C               	goto	l6708
  3850  00073A                     l6678:
  3851                           
  3852                           ; BSR set to: 1
  3853                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3854  00073A  0E01               	movlw	1
  3855  00073C  0101               	movlb	1	; () banked
  3856  00073E  6F50               	movwf	printf@c& (0+255),b
  3857  000740                     l6680:
  3858                           
  3859                           ; BSR set to: 1
  3860  000740  0E0A               	movlw	10
  3861  000742  0101               	movlb	1	; () banked
  3862  000744  1950               	xorwf	printf@c& (0+255),w,b
  3863  000746  B4D8               	btfsc	status,2,c
  3864  000748  D04D               	goto	l6710
  3865                           
  3866                           ; BSR set to: 1
  3867                           ;doprnt.c: 1306: if(val < dpowers[c])
  3868                           
  3869                           ; BSR set to: 1
  3870                           
  3871                           ; BSR set to: 1
  3872  00074A  0101               	movlb	1	; () banked
  3873  00074C  5150               	movf	printf@c& (0+255),w,b
  3874  00074E  0D04               	mullw	4
  3875  000750  0E31               	movlw	low _dpowers
  3876  000752  24F3               	addwf	prodl,w,c
  3877  000754  6EF6               	movwf	tblptrl,c
  3878  000756  0EFE               	movlw	high _dpowers
  3879  000758  20F4               	addwfc	prodh,w,c
  3880  00075A  6EF7               	movwf	tblptrh,c
  3881  00075C                     	if	0	;There are less than 3 active tblptr bytes
  3882  00075C                     	endif
  3883  00075C  0009               	tblrd		*+
  3884  00075E  50F5               	movf	tablat,w,c
  3885  000760  0101               	movlb	1	; () banked
  3886  000762  5D49               	subwf	printf@val& (0+255),w,b
  3887  000764  0009               	tblrd		*+
  3888  000766  50F5               	movf	tablat,w,c
  3889  000768  0101               	movlb	1	; () banked
  3890  00076A  594A               	subwfb	(printf@val+1)& (0+255),w,b
  3891  00076C  0009               	tblrd		*+
  3892  00076E  50F5               	movf	tablat,w,c
  3893  000770  0101               	movlb	1	; () banked
  3894  000772  594B               	subwfb	(printf@val+2)& (0+255),w,b
  3895  000774  0009               	tblrd		*+
  3896  000776  50F5               	movf	tablat,w,c
  3897  000778  0101               	movlb	1	; () banked
  3898  00077A  594C               	subwfb	(printf@val+3)& (0+255),w,b
  3899  00077C  A0D8               	btfss	status,0,c
  3900  00077E  D032               	goto	l6710
  3901                           
  3902                           ; BSR set to: 1
  3903                           
  3904                           ; BSR set to: 1
  3905                           
  3906                           ; BSR set to: 1
  3907                           ;doprnt.c: 1307: break;
  3908  000780  0101               	movlb	1	; () banked
  3909  000782  2B50               	incf	printf@c& (0+255),f,b
  3910  000784  D7DD               	goto	l6680
  3911  000786                     l6692:
  3912                           
  3913                           ; BSR set to: 1
  3914                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3915  000786  0E01               	movlw	1
  3916  000788  0101               	movlb	1	; () banked
  3917  00078A  6F50               	movwf	printf@c& (0+255),b
  3918  00078C                     l6694:
  3919                           
  3920                           ; BSR set to: 1
  3921  00078C  0E08               	movlw	8
  3922  00078E  0101               	movlb	1	; () banked
  3923  000790  1950               	xorwf	printf@c& (0+255),w,b
  3924  000792  B4D8               	btfsc	status,2,c
  3925  000794  D027               	goto	l6710
  3926                           
  3927                           ; BSR set to: 1
  3928                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3929                           
  3930                           ; BSR set to: 1
  3931                           
  3932                           ; BSR set to: 1
  3933  000796  0101               	movlb	1	; () banked
  3934  000798  5150               	movf	printf@c& (0+255),w,b
  3935  00079A  0D04               	mullw	4
  3936  00079C  0EA7               	movlw	low _hexpowers
  3937  00079E  24F3               	addwf	prodl,w,c
  3938  0007A0  6EF6               	movwf	tblptrl,c
  3939  0007A2  0EFE               	movlw	high _hexpowers
  3940  0007A4  20F4               	addwfc	prodh,w,c
  3941  0007A6  6EF7               	movwf	tblptrh,c
  3942  0007A8                     	if	0	;There are less than 3 active tblptr bytes
  3943  0007A8                     	endif
  3944  0007A8  0009               	tblrd		*+
  3945  0007AA  50F5               	movf	tablat,w,c
  3946  0007AC  0101               	movlb	1	; () banked
  3947  0007AE  5D49               	subwf	printf@val& (0+255),w,b
  3948  0007B0  0009               	tblrd		*+
  3949  0007B2  50F5               	movf	tablat,w,c
  3950  0007B4  0101               	movlb	1	; () banked
  3951  0007B6  594A               	subwfb	(printf@val+1)& (0+255),w,b
  3952  0007B8  0009               	tblrd		*+
  3953  0007BA  50F5               	movf	tablat,w,c
  3954  0007BC  0101               	movlb	1	; () banked
  3955  0007BE  594B               	subwfb	(printf@val+2)& (0+255),w,b
  3956  0007C0  0009               	tblrd		*+
  3957  0007C2  50F5               	movf	tablat,w,c
  3958  0007C4  0101               	movlb	1	; () banked
  3959  0007C6  594C               	subwfb	(printf@val+3)& (0+255),w,b
  3960  0007C8  A0D8               	btfss	status,0,c
  3961  0007CA  D00C               	goto	l6710
  3962                           
  3963                           ; BSR set to: 1
  3964                           
  3965                           ; BSR set to: 1
  3966                           
  3967                           ; BSR set to: 1
  3968                           ;doprnt.c: 1318: break;
  3969  0007CC  0101               	movlb	1	; () banked
  3970  0007CE  2B50               	incf	printf@c& (0+255),f,b
  3971  0007D0  D7DD               	goto	l6694
  3972  0007D2                     l6708:
  3973                           
  3974                           ; BSR set to: 1
  3975  0007D2  0101               	movlb	1	; () banked
  3976  0007D4  513F               	movf	printf@flag& (0+255),w,b
  3977  0007D6  0B80               	andlw	128
  3978                           
  3979                           ; Switch size 1, requested type "space"
  3980                           ; Number of cases is 2, Range of values is 0 to 128
  3981                           ; switch strategies available:
  3982                           ; Name         Instructions Cycles
  3983                           ; simple_byte            7     4 (average)
  3984                           ;	Chosen strategy is simple_byte
  3985  0007D8  0A00               	xorlw	0	; case 0
  3986  0007DA  B4D8               	btfsc	status,2,c
  3987  0007DC  D7AE               	goto	l6678
  3988  0007DE  0A80               	xorlw	128	; case 128
  3989  0007E0  B4D8               	btfsc	status,2,c
  3990  0007E2  D7D1               	goto	l6692
  3991  0007E4                     l6710:
  3992                           
  3993                           ; BSR set to: 1
  3994                           ;doprnt.c: 1422: {
  3995                           ;doprnt.c: 1438: if(flag & 0x03)
  3996  0007E4  0E03               	movlw	3
  3997  0007E6  0101               	movlb	1	; () banked
  3998  0007E8  153F               	andwf	printf@flag& (0+255),w,b
  3999  0007EA  0101               	movlb	1	; () banked
  4000  0007EC  6F33               	movwf	??_printf& (0+255),b
  4001  0007EE  0E00               	movlw	0
  4002  0007F0  0101               	movlb	1	; () banked
  4003  0007F2  1540               	andwf	(printf@flag+1)& (0+255),w,b
  4004  0007F4  0101               	movlb	1	; () banked
  4005  0007F6  6F34               	movwf	(??_printf+1)& (0+255),b
  4006  0007F8  0101               	movlb	1	; () banked
  4007  0007FA  5133               	movf	??_printf& (0+255),w,b
  4008  0007FC  0101               	movlb	1	; () banked
  4009  0007FE  1134               	iorwf	(??_printf+1)& (0+255),w,b
  4010  000800  B4D8               	btfsc	status,2,c
  4011  000802  D003               	goto	l6714
  4012                           
  4013                           ; BSR set to: 1
  4014                           ;doprnt.c: 1439: (putch('-') );
  4015  000804  0E2D               	movlw	45
  4016  000806  ECD2  F025         	call	_putch
  4017  00080A                     l6714:
  4018                           
  4019                           ;doprnt.c: 1469: }
  4020                           ;doprnt.c: 1472: prec = c;
  4021  00080A  0101               	movlb	1	; () banked
  4022  00080C  5150               	movf	printf@c& (0+255),w,b
  4023  00080E  0101               	movlb	1	; () banked
  4024  000810  6F41               	movwf	printf@prec& (0+255),b
  4025  000812  6B42               	clrf	(printf@prec+1)& (0+255),b
  4026  000814  BF41               	btfsc	printf@prec& (0+255),7,b
  4027  000816  0742               	decf	(printf@prec+1)& (0+255),f,b
  4028                           
  4029                           ;doprnt.c: 1474: while(prec--) {
  4030  000818  D08A               	goto	l6728
  4031  00081A                     l6716:
  4032                           
  4033                           ; BSR set to: 1
  4034                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4035  00081A  C141  F133         	movff	printf@prec,??_printf
  4036  00081E  C142  F134         	movff	printf@prec+1,??_printf+1
  4037  000822  0101               	movlb	1	; () banked
  4038  000824  90D8               	bcf	status,0,c
  4039  000826  3733               	rlcf	??_printf& (0+255),f,b
  4040  000828  3734               	rlcf	(??_printf+1)& (0+255),f,b
  4041  00082A  0101               	movlb	1	; () banked
  4042  00082C  90D8               	bcf	status,0,c
  4043  00082E  3733               	rlcf	??_printf& (0+255),f,b
  4044  000830  3734               	rlcf	(??_printf+1)& (0+255),f,b
  4045  000832  0E31               	movlw	low _dpowers
  4046  000834  0101               	movlb	1	; () banked
  4047  000836  2533               	addwf	??_printf& (0+255),w,b
  4048  000838  6EF6               	movwf	tblptrl,c
  4049  00083A  0EFE               	movlw	high _dpowers
  4050  00083C  2134               	addwfc	(??_printf+1)& (0+255),w,b
  4051  00083E  6EF7               	movwf	tblptrh,c
  4052  000840                     	if	0	;There are less than 3 active tblptr bytes
  4053  000840                     	endif
  4054  000840  0009               	tblrd		*+
  4055  000842  CFF5 F092          	movff	tablat,___lldiv@divisor
  4056  000846  0009               	tblrd		*+
  4057  000848  CFF5 F093          	movff	tablat,___lldiv@divisor+1
  4058  00084C  0009               	tblrd		*+
  4059  00084E  CFF5 F094          	movff	tablat,___lldiv@divisor+2
  4060  000852  000A               	tblrd		*-
  4061  000854  CFF5 F095          	movff	tablat,___lldiv@divisor+3
  4062  000858  C149  F08E         	movff	printf@val,___lldiv@dividend
  4063  00085C  C14A  F08F         	movff	printf@val+1,___lldiv@dividend+1
  4064  000860  C14B  F090         	movff	printf@val+2,___lldiv@dividend+2
  4065  000864  C14C  F091         	movff	printf@val+3,___lldiv@dividend+3
  4066  000868  ECF0  F01E         	call	___lldiv	;wreg free
  4067  00086C  C08E  F09B         	movff	?___lldiv,___llmod@dividend
  4068  000870  C08F  F09C         	movff	?___lldiv+1,___llmod@dividend+1
  4069  000874  C090  F09D         	movff	?___lldiv+2,___llmod@dividend+2
  4070  000878  C091  F09E         	movff	?___lldiv+3,___llmod@dividend+3
  4071  00087C  0E0A               	movlw	10
  4072  00087E  0100               	movlb	0	; () banked
  4073  000880  6F9F               	movwf	___llmod@divisor& (0+255),b
  4074  000882  0E00               	movlw	0
  4075  000884  6FA0               	movwf	(___llmod@divisor+1)& (0+255),b
  4076  000886  0E00               	movlw	0
  4077  000888  6FA1               	movwf	(___llmod@divisor+2)& (0+255),b
  4078  00088A  0E00               	movlw	0
  4079  00088C  6FA2               	movwf	(___llmod@divisor+3)& (0+255),b
  4080  00088E  ECE9  F020         	call	___llmod	;wreg free
  4081  000892  0100               	movlb	0	; () banked
  4082  000894  519B               	movf	?___llmod& (0+255),w,b
  4083  000896  0F30               	addlw	48
  4084  000898  0101               	movlb	1	; () banked
  4085  00089A  6F50               	movwf	printf@c& (0+255),b
  4086                           
  4087                           ;doprnt.c: 1491: break;
  4088  00089C  D044               	goto	l6726
  4089  00089E                     l6718:
  4090                           
  4091                           ; BSR set to: 1
  4092                           ;doprnt.c: 1499: {
  4093                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4094  00089E  C149  F08E         	movff	printf@val,___lldiv@dividend
  4095  0008A2  C14A  F08F         	movff	printf@val+1,___lldiv@dividend+1
  4096  0008A6  C14B  F090         	movff	printf@val+2,___lldiv@dividend+2
  4097  0008AA  C14C  F091         	movff	printf@val+3,___lldiv@dividend+3
  4098  0008AE  C141  F133         	movff	printf@prec,??_printf
  4099  0008B2  C142  F134         	movff	printf@prec+1,??_printf+1
  4100  0008B6  0101               	movlb	1	; () banked
  4101  0008B8  90D8               	bcf	status,0,c
  4102  0008BA  3733               	rlcf	??_printf& (0+255),f,b
  4103  0008BC  3734               	rlcf	(??_printf+1)& (0+255),f,b
  4104  0008BE  0101               	movlb	1	; () banked
  4105  0008C0  90D8               	bcf	status,0,c
  4106  0008C2  3733               	rlcf	??_printf& (0+255),f,b
  4107  0008C4  3734               	rlcf	(??_printf+1)& (0+255),f,b
  4108  0008C6  0EA7               	movlw	low _hexpowers
  4109  0008C8  0101               	movlb	1	; () banked
  4110  0008CA  2533               	addwf	??_printf& (0+255),w,b
  4111  0008CC  6EF6               	movwf	tblptrl,c
  4112  0008CE  0EFE               	movlw	high _hexpowers
  4113  0008D0  2134               	addwfc	(??_printf+1)& (0+255),w,b
  4114  0008D2  6EF7               	movwf	tblptrh,c
  4115  0008D4                     	if	0	;There are less than 3 active tblptr bytes
  4116  0008D4                     	endif
  4117  0008D4  0009               	tblrd		*+
  4118  0008D6  CFF5 F092          	movff	tablat,___lldiv@divisor
  4119  0008DA  0009               	tblrd		*+
  4120  0008DC  CFF5 F093          	movff	tablat,___lldiv@divisor+1
  4121  0008E0  0009               	tblrd		*+
  4122  0008E2  CFF5 F094          	movff	tablat,___lldiv@divisor+2
  4123  0008E6  000A               	tblrd		*-
  4124  0008E8  CFF5 F095          	movff	tablat,___lldiv@divisor+3
  4125  0008EC  ECF0  F01E         	call	___lldiv	;wreg free
  4126  0008F0  0100               	movlb	0	; () banked
  4127  0008F2  518E               	movf	?___lldiv& (0+255),w,b
  4128  0008F4  0B0F               	andlw	15
  4129  0008F6  0101               	movlb	1	; () banked
  4130  0008F8  6F3C               	movwf	printf@idx& (0+255),b
  4131                           
  4132                           ; BSR set to: 1
  4133                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4134  0008FA  0101               	movlb	1	; () banked
  4135  0008FC  513C               	movf	printf@idx& (0+255),w,b
  4136  0008FE  0D01               	mullw	1
  4137  000900  0E64               	movlw	low STR_18
  4138  000902  24F3               	addwf	prodl,w,c
  4139  000904  6EF6               	movwf	tblptrl,c
  4140  000906  0EFF               	movlw	high STR_18
  4141  000908  20F4               	addwfc	prodh,w,c
  4142  00090A  6EF7               	movwf	tblptrh,c
  4143  00090C                     	if	0	;There are less than 3 active tblptr bytes
  4144  00090C                     	endif
  4145  00090C  0008               	tblrd		*
  4146  00090E  CFF5 F150          	movff	tablat,printf@c
  4147                           
  4148                           ; BSR set to: 1
  4149                           ;doprnt.c: 1523: }
  4150                           
  4151                           ;doprnt.c: 1508: }
  4152                           ;doprnt.c: 1510: break;
  4153  000912  D009               	goto	l6726
  4154  000914                     l6724:
  4155                           
  4156                           ; BSR set to: 1
  4157  000914  0101               	movlb	1	; () banked
  4158  000916  513F               	movf	printf@flag& (0+255),w,b
  4159  000918  0B80               	andlw	128
  4160                           
  4161                           ; Switch size 1, requested type "space"
  4162                           ; Number of cases is 2, Range of values is 0 to 128
  4163                           ; switch strategies available:
  4164                           ; Name         Instructions Cycles
  4165                           ; simple_byte            7     4 (average)
  4166                           ;	Chosen strategy is simple_byte
  4167  00091A  0A00               	xorlw	0	; case 0
  4168  00091C  B4D8               	btfsc	status,2,c
  4169  00091E  D77D               	goto	l6716
  4170  000920  0A80               	xorlw	128	; case 128
  4171  000922  B4D8               	btfsc	status,2,c
  4172  000924  D7BC               	goto	l6718
  4173  000926                     l6726:
  4174                           
  4175                           ; BSR set to: 1
  4176                           ;doprnt.c: 1524: (putch(c) );
  4177  000926  0101               	movlb	1	; () banked
  4178  000928  5150               	movf	printf@c& (0+255),w,b
  4179  00092A  ECD2  F025         	call	_putch
  4180  00092E                     l6728:
  4181  00092E  0101               	movlb	1	; () banked
  4182  000930  0741               	decf	printf@prec& (0+255),f,b
  4183  000932  A0D8               	btfss	status,0,c
  4184  000934  0742               	decf	(printf@prec+1)& (0+255),f,b
  4185  000936  0101               	movlb	1	; () banked
  4186  000938  2941               	incf	printf@prec& (0+255),w,b
  4187  00093A  E1EC               	bnz	l6724
  4188  00093C  0101               	movlb	1	; () banked
  4189  00093E  2942               	incf	(printf@prec+1)& (0+255),w,b
  4190  000940  A4D8               	btfss	status,2,c
  4191  000942  D7E8               	goto	l6724
  4192  000944                     l6730:
  4193  000944  C0E3  FFF6         	movff	printf@f,tblptrl
  4194  000948  C0E4  FFF7         	movff	printf@f+1,tblptrh
  4195  00094C  0100               	movlb	0	; () banked
  4196  00094E  4BE3               	infsnz	printf@f& (0+255),f,b
  4197  000950  2BE4               	incf	(printf@f+1)& (0+255),f,b
  4198  000952                     	if	0	;tblptru may be non-zero
  4199  000952                     	endif
  4200  000952                     	if	0	;tblptru may be non-zero
  4201  000952                     	endif
  4202  000952  0008               	tblrd		*
  4203  000954  CFF5 F150          	movff	tablat,printf@c
  4204  000958  0101               	movlb	1	; () banked
  4205  00095A  5150               	movf	printf@c& (0+255),w,b
  4206  00095C  B4D8               	btfsc	status,2,c
  4207  00095E  0012               	return	
  4208  000960  EF11  F000         	goto	l6512
  4209  000964                     __end_of_printf:
  4210                           	opt stack 0
  4211                           tblptru	equ	0xFF8
  4212                           tblptrh	equ	0xFF7
  4213                           tblptrl	equ	0xFF6
  4214                           tablat	equ	0xFF5
  4215                           prodh	equ	0xFF4
  4216                           prodl	equ	0xFF3
  4217                           postinc0	equ	0xFEE
  4218                           wreg	equ	0xFE8
  4219                           postdec1	equ	0xFE5
  4220                           fsr1l	equ	0xFE1
  4221                           indf2	equ	0xFDF
  4222                           postinc2	equ	0xFDE
  4223                           postdec2	equ	0xFDD
  4224                           fsr2h	equ	0xFDA
  4225                           fsr2l	equ	0xFD9
  4226                           status	equ	0xFD8
  4227                           
  4228 ;; *************** function _scale *****************
  4229 ;; Defined at:
  4230 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4231 ;; Parameters:    Size  Location     Type
  4232 ;;  scl             1    wreg     char 
  4233 ;; Auto vars:     Size  Location     Type
  4234 ;;  scl             1   68[BANK0 ] char 
  4235 ;; Return value:  Size  Location     Type
  4236 ;;                  3   62[BANK0 ] char 
  4237 ;; Registers used:
  4238 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4239 ;; Tracked objects:
  4240 ;;		On entry : 0/0
  4241 ;;		On exit  : 0/0
  4242 ;;		Unchanged: 0/0
  4243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4244 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4245 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4247 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4248 ;;Total ram usage:        7 bytes
  4249 ;; Hardware stack levels used:    1
  4250 ;; Hardware stack levels required when called:    8
  4251 ;; This function calls:
  4252 ;;		___awdiv
  4253 ;;		___awmod
  4254 ;;		___ftmul
  4255 ;;		___wmul
  4256 ;; This function is called by:
  4257 ;;		_printf
  4258 ;; This function uses a non-reentrant model
  4259 ;;
  4260                           
  4261                           	psect	text4
  4262  00115C                     __ptext4:
  4263                           	opt stack 0
  4264  00115C                     _scale:
  4265                           	opt stack 20
  4266                           
  4267                           ; BSR set to: 1
  4268                           ;incstack = 0
  4269                           ;scale@scl stored from wreg
  4270  00115C  0100               	movlb	0	; () banked
  4271  00115E  6FC4               	movwf	scale@scl& (0+255),b
  4272                           
  4273                           ;doprnt.c: 428: if(scl < 0) {
  4274  001160  0100               	movlb	0	; () banked
  4275  001162  AFC4               	btfss	scale@scl& (0+255),7,b
  4276  001164  D12A               	goto	l4562
  4277                           
  4278                           ; BSR set to: 0
  4279                           ;doprnt.c: 429: scl = -scl;
  4280  001166  0100               	movlb	0	; () banked
  4281  001168  6DC4               	negf	scale@scl& (0+255),b
  4282                           
  4283                           ;doprnt.c: 430: if(scl>=110)
  4284  00116A  0100               	movlb	0	; () banked
  4285  00116C  51C4               	movf	scale@scl& (0+255),w,b
  4286  00116E  0A80               	xorlw	128
  4287  001170  0F12               	addlw	-238
  4288  001172  A0D8               	btfss	status,0,c
  4289  001174  D0AC               	goto	l4552
  4290                           
  4291                           ; BSR set to: 0
  4292                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4293  001176  0E00               	movlw	0
  4294  001178  0100               	movlb	0	; () banked
  4295  00117A  6F9F               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4296  00117C  0E03               	movlw	3
  4297  00117E  6F9E               	movwf	___wmul@multiplicand& (0+255),b
  4298  001180  0E00               	movlw	0
  4299  001182  0100               	movlb	0	; () banked
  4300  001184  6F97               	movwf	(___awdiv@divisor+1)& (0+255),b
  4301  001186  0E0A               	movlw	10
  4302  001188  6F96               	movwf	___awdiv@divisor& (0+255),b
  4303  00118A  0E00               	movlw	0
  4304  00118C  0100               	movlb	0	; () banked
  4305  00118E  6F91               	movwf	(___awmod@divisor+1)& (0+255),b
  4306  001190  0E64               	movlw	100
  4307  001192  6F90               	movwf	___awmod@divisor& (0+255),b
  4308  001194  0100               	movlb	0	; () banked
  4309  001196  51C4               	movf	scale@scl& (0+255),w,b
  4310  001198  0100               	movlb	0	; () banked
  4311  00119A  6F8E               	movwf	___awmod@dividend& (0+255),b
  4312  00119C  6B8F               	clrf	(___awmod@dividend+1)& (0+255),b
  4313  00119E  BF8E               	btfsc	___awmod@dividend& (0+255),7,b
  4314  0011A0  078F               	decf	(___awmod@dividend+1)& (0+255),f,b
  4315  0011A2  ECFC  F01F         	call	___awmod	;wreg free
  4316  0011A6  C08E  F094         	movff	?___awmod,___awdiv@dividend
  4317  0011AA  C08F  F095         	movff	?___awmod+1,___awdiv@dividend+1
  4318  0011AE  EC91  F01E         	call	___awdiv	;wreg free
  4319  0011B2  0E09               	movlw	9
  4320  0011B4  0100               	movlb	0	; () banked
  4321  0011B6  2594               	addwf	?___awdiv& (0+255),w,b
  4322  0011B8  0100               	movlb	0	; () banked
  4323  0011BA  6F9C               	movwf	___wmul@multiplier& (0+255),b
  4324  0011BC  0E00               	movlw	0
  4325  0011BE  0100               	movlb	0	; () banked
  4326  0011C0  2195               	addwfc	(?___awdiv+1)& (0+255),w,b
  4327  0011C2  0100               	movlb	0	; () banked
  4328  0011C4  6F9D               	movwf	(___wmul@multiplier+1)& (0+255),b
  4329  0011C6  EC5B  F025         	call	___wmul	;wreg free
  4330  0011CA  0E59               	movlw	low __npowers_
  4331  0011CC  0100               	movlb	0	; () banked
  4332  0011CE  259C               	addwf	?___wmul& (0+255),w,b
  4333  0011D0  6EF6               	movwf	tblptrl,c
  4334  0011D2  0EFE               	movlw	high __npowers_
  4335  0011D4  0100               	movlb	0	; () banked
  4336  0011D6  219D               	addwfc	(?___wmul+1)& (0+255),w,b
  4337  0011D8  6EF7               	movwf	tblptrh,c
  4338  0011DA                     	if	0	;There are less than 3 active tblptr bytes
  4339  0011DA                     	endif
  4340  0011DA  0009               	tblrd		*+
  4341  0011DC  CFF5 F0B2          	movff	tablat,___ftmul@f2
  4342  0011E0  0009               	tblrd		*+
  4343  0011E2  CFF5 F0B3          	movff	tablat,___ftmul@f2+1
  4344  0011E6  000A               	tblrd		*-
  4345  0011E8  CFF5 F0B4          	movff	tablat,___ftmul@f2+2
  4346  0011EC  0E00               	movlw	0
  4347  0011EE  0100               	movlb	0	; () banked
  4348  0011F0  6F97               	movwf	(___awdiv@divisor+1)& (0+255),b
  4349  0011F2  0E64               	movlw	100
  4350  0011F4  6F96               	movwf	___awdiv@divisor& (0+255),b
  4351  0011F6  0100               	movlb	0	; () banked
  4352  0011F8  51C4               	movf	scale@scl& (0+255),w,b
  4353  0011FA  0100               	movlb	0	; () banked
  4354  0011FC  6F94               	movwf	___awdiv@dividend& (0+255),b
  4355  0011FE  6B95               	clrf	(___awdiv@dividend+1)& (0+255),b
  4356  001200  BF94               	btfsc	___awdiv@dividend& (0+255),7,b
  4357  001202  0795               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4358  001204  EC91  F01E         	call	___awdiv	;wreg free
  4359  001208  0E12               	movlw	18
  4360  00120A  0100               	movlb	0	; () banked
  4361  00120C  2594               	addwf	?___awdiv& (0+255),w,b
  4362  00120E  0100               	movlb	0	; () banked
  4363  001210  6F9C               	movwf	___wmul@multiplier& (0+255),b
  4364  001212  0E00               	movlw	0
  4365  001214  0100               	movlb	0	; () banked
  4366  001216  2195               	addwfc	(?___awdiv+1)& (0+255),w,b
  4367  001218  0100               	movlb	0	; () banked
  4368  00121A  6F9D               	movwf	(___wmul@multiplier+1)& (0+255),b
  4369  00121C  0E00               	movlw	0
  4370  00121E  0100               	movlb	0	; () banked
  4371  001220  6F9F               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4372  001222  0E03               	movlw	3
  4373  001224  6F9E               	movwf	___wmul@multiplicand& (0+255),b
  4374  001226  EC5B  F025         	call	___wmul	;wreg free
  4375  00122A  0E59               	movlw	low __npowers_
  4376  00122C  0100               	movlb	0	; () banked
  4377  00122E  259C               	addwf	?___wmul& (0+255),w,b
  4378  001230  6EF6               	movwf	tblptrl,c
  4379  001232  0EFE               	movlw	high __npowers_
  4380  001234  0100               	movlb	0	; () banked
  4381  001236  219D               	addwfc	(?___wmul+1)& (0+255),w,b
  4382  001238  6EF7               	movwf	tblptrh,c
  4383  00123A                     	if	0	;There are less than 3 active tblptr bytes
  4384  00123A                     	endif
  4385  00123A  0009               	tblrd		*+
  4386  00123C  CFF5 F0AF          	movff	tablat,___ftmul@f1
  4387  001240  0009               	tblrd		*+
  4388  001242  CFF5 F0B0          	movff	tablat,___ftmul@f1+1
  4389  001246  000A               	tblrd		*-
  4390  001248  CFF5 F0B1          	movff	tablat,___ftmul@f1+2
  4391  00124C  ECA3  F015         	call	___ftmul	;wreg free
  4392  001250  C0AF  F0C1         	movff	?___ftmul,_scale$1314
  4393  001254  C0B0  F0C2         	movff	?___ftmul+1,_scale$1314+1
  4394  001258  C0B1  F0C3         	movff	?___ftmul+2,_scale$1314+2
  4395                           
  4396                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4397  00125C  C0C1  F0AF         	movff	_scale$1314,___ftmul@f1
  4398  001260  C0C2  F0B0         	movff	_scale$1314+1,___ftmul@f1+1
  4399  001264  C0C3  F0B1         	movff	_scale$1314+2,___ftmul@f1+2
  4400  001268  0E00               	movlw	0
  4401  00126A  0100               	movlb	0	; () banked
  4402  00126C  6F9F               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4403  00126E  0E03               	movlw	3
  4404  001270  6F9E               	movwf	___wmul@multiplicand& (0+255),b
  4405  001272  0E00               	movlw	0
  4406  001274  0100               	movlb	0	; () banked
  4407  001276  6F91               	movwf	(___awmod@divisor+1)& (0+255),b
  4408  001278  0E0A               	movlw	10
  4409  00127A  6F90               	movwf	___awmod@divisor& (0+255),b
  4410  00127C  0100               	movlb	0	; () banked
  4411  00127E  51C4               	movf	scale@scl& (0+255),w,b
  4412  001280  0100               	movlb	0	; () banked
  4413  001282  6F8E               	movwf	___awmod@dividend& (0+255),b
  4414  001284  6B8F               	clrf	(___awmod@dividend+1)& (0+255),b
  4415  001286  BF8E               	btfsc	___awmod@dividend& (0+255),7,b
  4416  001288  078F               	decf	(___awmod@dividend+1)& (0+255),f,b
  4417  00128A  ECFC  F01F         	call	___awmod	;wreg free
  4418  00128E  C08E  F09C         	movff	?___awmod,___wmul@multiplier
  4419  001292  C08F  F09D         	movff	?___awmod+1,___wmul@multiplier+1
  4420  001296  EC5B  F025         	call	___wmul	;wreg free
  4421  00129A  0E59               	movlw	low __npowers_
  4422  00129C  0100               	movlb	0	; () banked
  4423  00129E  259C               	addwf	?___wmul& (0+255),w,b
  4424  0012A0  6EF6               	movwf	tblptrl,c
  4425  0012A2  0EFE               	movlw	high __npowers_
  4426  0012A4  0100               	movlb	0	; () banked
  4427  0012A6  219D               	addwfc	(?___wmul+1)& (0+255),w,b
  4428  0012A8  6EF7               	movwf	tblptrh,c
  4429  0012AA                     	if	0	;There are less than 3 active tblptr bytes
  4430  0012AA                     	endif
  4431  0012AA  0009               	tblrd		*+
  4432  0012AC  CFF5 F0B2          	movff	tablat,___ftmul@f2
  4433  0012B0  0009               	tblrd		*+
  4434  0012B2  CFF5 F0B3          	movff	tablat,___ftmul@f2+1
  4435  0012B6  000A               	tblrd		*-
  4436  0012B8  CFF5 F0B4          	movff	tablat,___ftmul@f2+2
  4437  0012BC  ECA3  F015         	call	___ftmul	;wreg free
  4438  0012C0  C0AF  F0BE         	movff	?___ftmul,?_scale
  4439  0012C4  C0B0  F0BF         	movff	?___ftmul+1,?_scale+1
  4440  0012C8  C0B1  F0C0         	movff	?___ftmul+2,?_scale+2
  4441  0012CC  0012               	return	
  4442  0012CE                     l4552:
  4443                           
  4444                           ;doprnt.c: 432: else if(scl > 10)
  4445  0012CE  0100               	movlb	0	; () banked
  4446  0012D0  51C4               	movf	scale@scl& (0+255),w,b
  4447  0012D2  0A80               	xorlw	128
  4448  0012D4  0F75               	addlw	-139
  4449  0012D6  A0D8               	btfss	status,0,c
  4450  0012D8  D05D               	goto	l4558
  4451                           
  4452                           ; BSR set to: 0
  4453                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4454  0012DA  0E00               	movlw	0
  4455  0012DC  0100               	movlb	0	; () banked
  4456  0012DE  6F97               	movwf	(___awdiv@divisor+1)& (0+255),b
  4457  0012E0  0E0A               	movlw	10
  4458  0012E2  6F96               	movwf	___awdiv@divisor& (0+255),b
  4459  0012E4  0100               	movlb	0	; () banked
  4460  0012E6  51C4               	movf	scale@scl& (0+255),w,b
  4461  0012E8  0100               	movlb	0	; () banked
  4462  0012EA  6F94               	movwf	___awdiv@dividend& (0+255),b
  4463  0012EC  6B95               	clrf	(___awdiv@dividend+1)& (0+255),b
  4464  0012EE  BF94               	btfsc	___awdiv@dividend& (0+255),7,b
  4465  0012F0  0795               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4466  0012F2  EC91  F01E         	call	___awdiv	;wreg free
  4467  0012F6  0E09               	movlw	9
  4468  0012F8  0100               	movlb	0	; () banked
  4469  0012FA  2594               	addwf	?___awdiv& (0+255),w,b
  4470  0012FC  0100               	movlb	0	; () banked
  4471  0012FE  6F9C               	movwf	___wmul@multiplier& (0+255),b
  4472  001300  0E00               	movlw	0
  4473  001302  0100               	movlb	0	; () banked
  4474  001304  2195               	addwfc	(?___awdiv+1)& (0+255),w,b
  4475  001306  0100               	movlb	0	; () banked
  4476  001308  6F9D               	movwf	(___wmul@multiplier+1)& (0+255),b
  4477  00130A  0E00               	movlw	0
  4478  00130C  0100               	movlb	0	; () banked
  4479  00130E  6F9F               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4480  001310  0E03               	movlw	3
  4481  001312  6F9E               	movwf	___wmul@multiplicand& (0+255),b
  4482  001314  EC5B  F025         	call	___wmul	;wreg free
  4483  001318  0E59               	movlw	low __npowers_
  4484  00131A  0100               	movlb	0	; () banked
  4485  00131C  259C               	addwf	?___wmul& (0+255),w,b
  4486  00131E  6EF6               	movwf	tblptrl,c
  4487  001320  0EFE               	movlw	high __npowers_
  4488  001322  0100               	movlb	0	; () banked
  4489  001324  219D               	addwfc	(?___wmul+1)& (0+255),w,b
  4490  001326  6EF7               	movwf	tblptrh,c
  4491  001328                     	if	0	;There are less than 3 active tblptr bytes
  4492  001328                     	endif
  4493  001328  0009               	tblrd		*+
  4494  00132A  CFF5 F0AF          	movff	tablat,___ftmul@f1
  4495  00132E  0009               	tblrd		*+
  4496  001330  CFF5 F0B0          	movff	tablat,___ftmul@f1+1
  4497  001334  000A               	tblrd		*-
  4498  001336  CFF5 F0B1          	movff	tablat,___ftmul@f1+2
  4499  00133A  0E00               	movlw	0
  4500  00133C  0100               	movlb	0	; () banked
  4501  00133E  6F9F               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4502  001340  0E03               	movlw	3
  4503  001342  6F9E               	movwf	___wmul@multiplicand& (0+255),b
  4504  001344  0E00               	movlw	0
  4505  001346  0100               	movlb	0	; () banked
  4506  001348  6F91               	movwf	(___awmod@divisor+1)& (0+255),b
  4507  00134A  0E0A               	movlw	10
  4508  00134C  6F90               	movwf	___awmod@divisor& (0+255),b
  4509  00134E  0100               	movlb	0	; () banked
  4510  001350  51C4               	movf	scale@scl& (0+255),w,b
  4511  001352  0100               	movlb	0	; () banked
  4512  001354  6F8E               	movwf	___awmod@dividend& (0+255),b
  4513  001356  6B8F               	clrf	(___awmod@dividend+1)& (0+255),b
  4514  001358  BF8E               	btfsc	___awmod@dividend& (0+255),7,b
  4515  00135A  078F               	decf	(___awmod@dividend+1)& (0+255),f,b
  4516  00135C  ECFC  F01F         	call	___awmod	;wreg free
  4517  001360  C08E  F09C         	movff	?___awmod,___wmul@multiplier
  4518  001364  C08F  F09D         	movff	?___awmod+1,___wmul@multiplier+1
  4519  001368  EC5B  F025         	call	___wmul	;wreg free
  4520  00136C  0E59               	movlw	low __npowers_
  4521  00136E  0100               	movlb	0	; () banked
  4522  001370  259C               	addwf	?___wmul& (0+255),w,b
  4523  001372  6EF6               	movwf	tblptrl,c
  4524  001374  0EFE               	movlw	high __npowers_
  4525  001376  0100               	movlb	0	; () banked
  4526  001378  219D               	addwfc	(?___wmul+1)& (0+255),w,b
  4527  00137A  6EF7               	movwf	tblptrh,c
  4528  00137C                     	if	0	;There are less than 3 active tblptr bytes
  4529  00137C                     	endif
  4530  00137C  0009               	tblrd		*+
  4531  00137E  CFF5 F0B2          	movff	tablat,___ftmul@f2
  4532  001382  0009               	tblrd		*+
  4533  001384  CFF5 F0B3          	movff	tablat,___ftmul@f2+1
  4534  001388  000A               	tblrd		*-
  4535  00138A  CFF5 F0B4          	movff	tablat,___ftmul@f2+2
  4536  00138E  ECA3  F015         	call	___ftmul	;wreg free
  4537  001392  D796               	goto	L2
  4538  001394                     l4558:
  4539                           
  4540                           ;doprnt.c: 434: return _npowers_[scl];
  4541  001394  0100               	movlb	0	; () banked
  4542  001396  51C4               	movf	scale@scl& (0+255),w,b
  4543  001398  0D03               	mullw	3
  4544  00139A  0E59               	movlw	low __npowers_
  4545  00139C  24F3               	addwf	prodl,w,c
  4546  00139E  6EF6               	movwf	tblptrl,c
  4547  0013A0  0EFE               	movlw	high __npowers_
  4548  0013A2  20F4               	addwfc	prodh,w,c
  4549  0013A4  6EF7               	movwf	tblptrh,c
  4550  0013A6                     	if	0	;There are less than 3 active tblptr bytes
  4551  0013A6                     	endif
  4552  0013A6  0009               	tblrd		*+
  4553  0013A8  CFF5 F0BE          	movff	tablat,?_scale
  4554  0013AC  0009               	tblrd		*+
  4555  0013AE  CFF5 F0BF          	movff	tablat,?_scale+1
  4556  0013B2  000A               	tblrd		*-
  4557  0013B4  CFF5 F0C0          	movff	tablat,?_scale+2
  4558                           
  4559                           ; BSR set to: 0
  4560  0013B8  0012               	return	
  4561  0013BA                     l4562:
  4562                           
  4563                           ; BSR set to: 0
  4564                           ;doprnt.c: 435: }
  4565                           ;doprnt.c: 436: if(scl>=110)
  4566  0013BA  0100               	movlb	0	; () banked
  4567  0013BC  51C4               	movf	scale@scl& (0+255),w,b
  4568  0013BE  0A80               	xorlw	128
  4569  0013C0  0F12               	addlw	-238
  4570  0013C2  A0D8               	btfss	status,0,c
  4571  0013C4  D0AC               	goto	l4570
  4572                           
  4573                           ; BSR set to: 0
  4574                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4575  0013C6  0E00               	movlw	0
  4576  0013C8  0100               	movlb	0	; () banked
  4577  0013CA  6F9F               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4578  0013CC  0E03               	movlw	3
  4579  0013CE  6F9E               	movwf	___wmul@multiplicand& (0+255),b
  4580  0013D0  0E00               	movlw	0
  4581  0013D2  0100               	movlb	0	; () banked
  4582  0013D4  6F97               	movwf	(___awdiv@divisor+1)& (0+255),b
  4583  0013D6  0E0A               	movlw	10
  4584  0013D8  6F96               	movwf	___awdiv@divisor& (0+255),b
  4585  0013DA  0E00               	movlw	0
  4586  0013DC  0100               	movlb	0	; () banked
  4587  0013DE  6F91               	movwf	(___awmod@divisor+1)& (0+255),b
  4588  0013E0  0E64               	movlw	100
  4589  0013E2  6F90               	movwf	___awmod@divisor& (0+255),b
  4590  0013E4  0100               	movlb	0	; () banked
  4591  0013E6  51C4               	movf	scale@scl& (0+255),w,b
  4592  0013E8  0100               	movlb	0	; () banked
  4593  0013EA  6F8E               	movwf	___awmod@dividend& (0+255),b
  4594  0013EC  6B8F               	clrf	(___awmod@dividend+1)& (0+255),b
  4595  0013EE  BF8E               	btfsc	___awmod@dividend& (0+255),7,b
  4596  0013F0  078F               	decf	(___awmod@dividend+1)& (0+255),f,b
  4597  0013F2  ECFC  F01F         	call	___awmod	;wreg free
  4598  0013F6  C08E  F094         	movff	?___awmod,___awdiv@dividend
  4599  0013FA  C08F  F095         	movff	?___awmod+1,___awdiv@dividend+1
  4600  0013FE  EC91  F01E         	call	___awdiv	;wreg free
  4601  001402  0E09               	movlw	9
  4602  001404  0100               	movlb	0	; () banked
  4603  001406  2594               	addwf	?___awdiv& (0+255),w,b
  4604  001408  0100               	movlb	0	; () banked
  4605  00140A  6F9C               	movwf	___wmul@multiplier& (0+255),b
  4606  00140C  0E00               	movlw	0
  4607  00140E  0100               	movlb	0	; () banked
  4608  001410  2195               	addwfc	(?___awdiv+1)& (0+255),w,b
  4609  001412  0100               	movlb	0	; () banked
  4610  001414  6F9D               	movwf	(___wmul@multiplier+1)& (0+255),b
  4611  001416  EC5B  F025         	call	___wmul	;wreg free
  4612  00141A  0E80               	movlw	low __powers_
  4613  00141C  0100               	movlb	0	; () banked
  4614  00141E  259C               	addwf	?___wmul& (0+255),w,b
  4615  001420  6EF6               	movwf	tblptrl,c
  4616  001422  0EFE               	movlw	high __powers_
  4617  001424  0100               	movlb	0	; () banked
  4618  001426  219D               	addwfc	(?___wmul+1)& (0+255),w,b
  4619  001428  6EF7               	movwf	tblptrh,c
  4620  00142A                     	if	0	;There are less than 3 active tblptr bytes
  4621  00142A                     	endif
  4622  00142A  0009               	tblrd		*+
  4623  00142C  CFF5 F0B2          	movff	tablat,___ftmul@f2
  4624  001430  0009               	tblrd		*+
  4625  001432  CFF5 F0B3          	movff	tablat,___ftmul@f2+1
  4626  001436  000A               	tblrd		*-
  4627  001438  CFF5 F0B4          	movff	tablat,___ftmul@f2+2
  4628  00143C  0E00               	movlw	0
  4629  00143E  0100               	movlb	0	; () banked
  4630  001440  6F97               	movwf	(___awdiv@divisor+1)& (0+255),b
  4631  001442  0E64               	movlw	100
  4632  001444  6F96               	movwf	___awdiv@divisor& (0+255),b
  4633  001446  0100               	movlb	0	; () banked
  4634  001448  51C4               	movf	scale@scl& (0+255),w,b
  4635  00144A  0100               	movlb	0	; () banked
  4636  00144C  6F94               	movwf	___awdiv@dividend& (0+255),b
  4637  00144E  6B95               	clrf	(___awdiv@dividend+1)& (0+255),b
  4638  001450  BF94               	btfsc	___awdiv@dividend& (0+255),7,b
  4639  001452  0795               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4640  001454  EC91  F01E         	call	___awdiv	;wreg free
  4641  001458  0E12               	movlw	18
  4642  00145A  0100               	movlb	0	; () banked
  4643  00145C  2594               	addwf	?___awdiv& (0+255),w,b
  4644  00145E  0100               	movlb	0	; () banked
  4645  001460  6F9C               	movwf	___wmul@multiplier& (0+255),b
  4646  001462  0E00               	movlw	0
  4647  001464  0100               	movlb	0	; () banked
  4648  001466  2195               	addwfc	(?___awdiv+1)& (0+255),w,b
  4649  001468  0100               	movlb	0	; () banked
  4650  00146A  6F9D               	movwf	(___wmul@multiplier+1)& (0+255),b
  4651  00146C  0E00               	movlw	0
  4652  00146E  0100               	movlb	0	; () banked
  4653  001470  6F9F               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4654  001472  0E03               	movlw	3
  4655  001474  6F9E               	movwf	___wmul@multiplicand& (0+255),b
  4656  001476  EC5B  F025         	call	___wmul	;wreg free
  4657  00147A  0E80               	movlw	low __powers_
  4658  00147C  0100               	movlb	0	; () banked
  4659  00147E  259C               	addwf	?___wmul& (0+255),w,b
  4660  001480  6EF6               	movwf	tblptrl,c
  4661  001482  0EFE               	movlw	high __powers_
  4662  001484  0100               	movlb	0	; () banked
  4663  001486  219D               	addwfc	(?___wmul+1)& (0+255),w,b
  4664  001488  6EF7               	movwf	tblptrh,c
  4665  00148A                     	if	0	;There are less than 3 active tblptr bytes
  4666  00148A                     	endif
  4667  00148A  0009               	tblrd		*+
  4668  00148C  CFF5 F0AF          	movff	tablat,___ftmul@f1
  4669  001490  0009               	tblrd		*+
  4670  001492  CFF5 F0B0          	movff	tablat,___ftmul@f1+1
  4671  001496  000A               	tblrd		*-
  4672  001498  CFF5 F0B1          	movff	tablat,___ftmul@f1+2
  4673  00149C  ECA3  F015         	call	___ftmul	;wreg free
  4674  0014A0  C0AF  F0C1         	movff	?___ftmul,_scale$1314
  4675  0014A4  C0B0  F0C2         	movff	?___ftmul+1,_scale$1314+1
  4676  0014A8  C0B1  F0C3         	movff	?___ftmul+2,_scale$1314+2
  4677                           
  4678                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4679  0014AC  C0C1  F0AF         	movff	_scale$1314,___ftmul@f1
  4680  0014B0  C0C2  F0B0         	movff	_scale$1314+1,___ftmul@f1+1
  4681  0014B4  C0C3  F0B1         	movff	_scale$1314+2,___ftmul@f1+2
  4682  0014B8  0E00               	movlw	0
  4683  0014BA  0100               	movlb	0	; () banked
  4684  0014BC  6F9F               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4685  0014BE  0E03               	movlw	3
  4686  0014C0  6F9E               	movwf	___wmul@multiplicand& (0+255),b
  4687  0014C2  0E00               	movlw	0
  4688  0014C4  0100               	movlb	0	; () banked
  4689  0014C6  6F91               	movwf	(___awmod@divisor+1)& (0+255),b
  4690  0014C8  0E0A               	movlw	10
  4691  0014CA  6F90               	movwf	___awmod@divisor& (0+255),b
  4692  0014CC  0100               	movlb	0	; () banked
  4693  0014CE  51C4               	movf	scale@scl& (0+255),w,b
  4694  0014D0  0100               	movlb	0	; () banked
  4695  0014D2  6F8E               	movwf	___awmod@dividend& (0+255),b
  4696  0014D4  6B8F               	clrf	(___awmod@dividend+1)& (0+255),b
  4697  0014D6  BF8E               	btfsc	___awmod@dividend& (0+255),7,b
  4698  0014D8  078F               	decf	(___awmod@dividend+1)& (0+255),f,b
  4699  0014DA  ECFC  F01F         	call	___awmod	;wreg free
  4700  0014DE  C08E  F09C         	movff	?___awmod,___wmul@multiplier
  4701  0014E2  C08F  F09D         	movff	?___awmod+1,___wmul@multiplier+1
  4702  0014E6  EC5B  F025         	call	___wmul	;wreg free
  4703  0014EA  0E80               	movlw	low __powers_
  4704  0014EC  0100               	movlb	0	; () banked
  4705  0014EE  259C               	addwf	?___wmul& (0+255),w,b
  4706  0014F0  6EF6               	movwf	tblptrl,c
  4707  0014F2  0EFE               	movlw	high __powers_
  4708  0014F4  0100               	movlb	0	; () banked
  4709  0014F6  219D               	addwfc	(?___wmul+1)& (0+255),w,b
  4710  0014F8  6EF7               	movwf	tblptrh,c
  4711  0014FA                     	if	0	;There are less than 3 active tblptr bytes
  4712  0014FA                     	endif
  4713  0014FA  0009               	tblrd		*+
  4714  0014FC  CFF5 F0B2          	movff	tablat,___ftmul@f2
  4715  001500  0009               	tblrd		*+
  4716  001502  CFF5 F0B3          	movff	tablat,___ftmul@f2+1
  4717  001506  000A               	tblrd		*-
  4718  001508  CFF5 F0B4          	movff	tablat,___ftmul@f2+2
  4719  00150C  ECA3  F015         	call	___ftmul	;wreg free
  4720  001510  C0AF  F0BE         	movff	?___ftmul,?_scale
  4721  001514  C0B0  F0BF         	movff	?___ftmul+1,?_scale+1
  4722  001518  C0B1  F0C0         	movff	?___ftmul+2,?_scale+2
  4723  00151C  0012               	return	
  4724  00151E                     l4570:
  4725                           
  4726                           ;doprnt.c: 438: else if(scl > 10)
  4727  00151E  0100               	movlb	0	; () banked
  4728  001520  51C4               	movf	scale@scl& (0+255),w,b
  4729  001522  0A80               	xorlw	128
  4730  001524  0F75               	addlw	-139
  4731  001526  A0D8               	btfss	status,0,c
  4732  001528  D05D               	goto	l4576
  4733                           
  4734                           ; BSR set to: 0
  4735                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4736  00152A  0E00               	movlw	0
  4737  00152C  0100               	movlb	0	; () banked
  4738  00152E  6F97               	movwf	(___awdiv@divisor+1)& (0+255),b
  4739  001530  0E0A               	movlw	10
  4740  001532  6F96               	movwf	___awdiv@divisor& (0+255),b
  4741  001534  0100               	movlb	0	; () banked
  4742  001536  51C4               	movf	scale@scl& (0+255),w,b
  4743  001538  0100               	movlb	0	; () banked
  4744  00153A  6F94               	movwf	___awdiv@dividend& (0+255),b
  4745  00153C  6B95               	clrf	(___awdiv@dividend+1)& (0+255),b
  4746  00153E  BF94               	btfsc	___awdiv@dividend& (0+255),7,b
  4747  001540  0795               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4748  001542  EC91  F01E         	call	___awdiv	;wreg free
  4749  001546  0E09               	movlw	9
  4750  001548  0100               	movlb	0	; () banked
  4751  00154A  2594               	addwf	?___awdiv& (0+255),w,b
  4752  00154C  0100               	movlb	0	; () banked
  4753  00154E  6F9C               	movwf	___wmul@multiplier& (0+255),b
  4754  001550  0E00               	movlw	0
  4755  001552  0100               	movlb	0	; () banked
  4756  001554  2195               	addwfc	(?___awdiv+1)& (0+255),w,b
  4757  001556  0100               	movlb	0	; () banked
  4758  001558  6F9D               	movwf	(___wmul@multiplier+1)& (0+255),b
  4759  00155A  0E00               	movlw	0
  4760  00155C  0100               	movlb	0	; () banked
  4761  00155E  6F9F               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4762  001560  0E03               	movlw	3
  4763  001562  6F9E               	movwf	___wmul@multiplicand& (0+255),b
  4764  001564  EC5B  F025         	call	___wmul	;wreg free
  4765  001568  0E80               	movlw	low __powers_
  4766  00156A  0100               	movlb	0	; () banked
  4767  00156C  259C               	addwf	?___wmul& (0+255),w,b
  4768  00156E  6EF6               	movwf	tblptrl,c
  4769  001570  0EFE               	movlw	high __powers_
  4770  001572  0100               	movlb	0	; () banked
  4771  001574  219D               	addwfc	(?___wmul+1)& (0+255),w,b
  4772  001576  6EF7               	movwf	tblptrh,c
  4773  001578                     	if	0	;There are less than 3 active tblptr bytes
  4774  001578                     	endif
  4775  001578  0009               	tblrd		*+
  4776  00157A  CFF5 F0AF          	movff	tablat,___ftmul@f1
  4777  00157E  0009               	tblrd		*+
  4778  001580  CFF5 F0B0          	movff	tablat,___ftmul@f1+1
  4779  001584  000A               	tblrd		*-
  4780  001586  CFF5 F0B1          	movff	tablat,___ftmul@f1+2
  4781  00158A  0E00               	movlw	0
  4782  00158C  0100               	movlb	0	; () banked
  4783  00158E  6F9F               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4784  001590  0E03               	movlw	3
  4785  001592  6F9E               	movwf	___wmul@multiplicand& (0+255),b
  4786  001594  0E00               	movlw	0
  4787  001596  0100               	movlb	0	; () banked
  4788  001598  6F91               	movwf	(___awmod@divisor+1)& (0+255),b
  4789  00159A  0E0A               	movlw	10
  4790  00159C  6F90               	movwf	___awmod@divisor& (0+255),b
  4791  00159E  0100               	movlb	0	; () banked
  4792  0015A0  51C4               	movf	scale@scl& (0+255),w,b
  4793  0015A2  0100               	movlb	0	; () banked
  4794  0015A4  6F8E               	movwf	___awmod@dividend& (0+255),b
  4795  0015A6  6B8F               	clrf	(___awmod@dividend+1)& (0+255),b
  4796  0015A8  BF8E               	btfsc	___awmod@dividend& (0+255),7,b
  4797  0015AA  078F               	decf	(___awmod@dividend+1)& (0+255),f,b
  4798  0015AC  ECFC  F01F         	call	___awmod	;wreg free
  4799  0015B0  C08E  F09C         	movff	?___awmod,___wmul@multiplier
  4800  0015B4  C08F  F09D         	movff	?___awmod+1,___wmul@multiplier+1
  4801  0015B8  EC5B  F025         	call	___wmul	;wreg free
  4802  0015BC  0E80               	movlw	low __powers_
  4803  0015BE  0100               	movlb	0	; () banked
  4804  0015C0  259C               	addwf	?___wmul& (0+255),w,b
  4805  0015C2  6EF6               	movwf	tblptrl,c
  4806  0015C4  0EFE               	movlw	high __powers_
  4807  0015C6  0100               	movlb	0	; () banked
  4808  0015C8  219D               	addwfc	(?___wmul+1)& (0+255),w,b
  4809  0015CA  6EF7               	movwf	tblptrh,c
  4810  0015CC                     	if	0	;There are less than 3 active tblptr bytes
  4811  0015CC                     	endif
  4812  0015CC  0009               	tblrd		*+
  4813  0015CE  CFF5 F0B2          	movff	tablat,___ftmul@f2
  4814  0015D2  0009               	tblrd		*+
  4815  0015D4  CFF5 F0B3          	movff	tablat,___ftmul@f2+1
  4816  0015D8  000A               	tblrd		*-
  4817  0015DA  CFF5 F0B4          	movff	tablat,___ftmul@f2+2
  4818  0015DE  ECA3  F015         	call	___ftmul	;wreg free
  4819  0015E2  D796               	goto	L3
  4820  0015E4                     l4576:
  4821                           
  4822                           ;doprnt.c: 440: return _powers_[scl];
  4823  0015E4  0100               	movlb	0	; () banked
  4824  0015E6  51C4               	movf	scale@scl& (0+255),w,b
  4825  0015E8  0D03               	mullw	3
  4826  0015EA  0E80               	movlw	low __powers_
  4827  0015EC  24F3               	addwf	prodl,w,c
  4828  0015EE  6EF6               	movwf	tblptrl,c
  4829  0015F0  0EFE               	movlw	high __powers_
  4830  0015F2  20F4               	addwfc	prodh,w,c
  4831  0015F4  6EF7               	movwf	tblptrh,c
  4832  0015F6                     	if	0	;There are less than 3 active tblptr bytes
  4833  0015F6                     	endif
  4834  0015F6  0009               	tblrd		*+
  4835  0015F8  CFF5 F0BE          	movff	tablat,?_scale
  4836  0015FC  0009               	tblrd		*+
  4837  0015FE  CFF5 F0BF          	movff	tablat,?_scale+1
  4838  001602  000A               	tblrd		*-
  4839  001604  CFF5 F0C0          	movff	tablat,?_scale+2
  4840  001608  0012               	return	
  4841  00160A                     __end_of_scale:
  4842                           	opt stack 0
  4843                           tblptru	equ	0xFF8
  4844                           tblptrh	equ	0xFF7
  4845                           tblptrl	equ	0xFF6
  4846                           tablat	equ	0xFF5
  4847                           prodh	equ	0xFF4
  4848                           prodl	equ	0xFF3
  4849                           postinc0	equ	0xFEE
  4850                           wreg	equ	0xFE8
  4851                           postdec1	equ	0xFE5
  4852                           fsr1l	equ	0xFE1
  4853                           indf2	equ	0xFDF
  4854                           postinc2	equ	0xFDE
  4855                           postdec2	equ	0xFDD
  4856                           fsr2h	equ	0xFDA
  4857                           fsr2l	equ	0xFD9
  4858                           status	equ	0xFD8
  4859                           
  4860 ;; *************** function _putch *****************
  4861 ;; Defined at:
  4862 ;;		line 35 in file "lcd.c"
  4863 ;; Parameters:    Size  Location     Type
  4864 ;;  data            1    wreg     unsigned char 
  4865 ;; Auto vars:     Size  Location     Type
  4866 ;;  data            1   18[BANK0 ] unsigned char 
  4867 ;; Return value:  Size  Location     Type
  4868 ;;                  1    wreg      void 
  4869 ;; Registers used:
  4870 ;;		wreg, status,2, status,0, cstack
  4871 ;; Tracked objects:
  4872 ;;		On entry : 0/0
  4873 ;;		On exit  : 0/0
  4874 ;;		Unchanged: 0/0
  4875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4877 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4879 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4880 ;;Total ram usage:        1 bytes
  4881 ;; Hardware stack levels used:    1
  4882 ;; Hardware stack levels required when called:    9
  4883 ;; This function calls:
  4884 ;;		_lcdNewline
  4885 ;;		_lcdNibble
  4886 ;; This function is called by:
  4887 ;;		_printf
  4888 ;; This function uses a non-reentrant model
  4889 ;;
  4890                           
  4891                           	psect	text5
  4892  004BA4                     __ptext5:
  4893                           	opt stack 0
  4894  004BA4                     _putch:
  4895                           	opt stack 19
  4896                           
  4897                           ;incstack = 0
  4898                           ;putch@data stored from wreg
  4899  004BA4  0100               	movlb	0	; () banked
  4900  004BA6  6F92               	movwf	putch@data& (0+255),b
  4901                           
  4902                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  4903  004BA8  0E0A               	movlw	10
  4904  004BAA  0100               	movlb	0	; () banked
  4905  004BAC  1992               	xorwf	putch@data& (0+255),w,b
  4906  004BAE  A4D8               	btfss	status,2,c
  4907  004BB0  D003               	goto	l168
  4908                           
  4909                           ; BSR set to: 0
  4910  004BB2  EC2D  F026         	call	_lcdNewline	;wreg free
  4911  004BB6  0012               	return	
  4912  004BB8                     l168:
  4913                           
  4914                           ; BSR set to: 0
  4915                           ;lcd.c: 37: else
  4916                           ;lcd.c: 38: {
  4917                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  4918  004BB8  848C               	bsf	3980,2,c	;volatile
  4919                           
  4920                           ; BSR set to: 0
  4921                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  4922  004BBA  0E74               	movlw	116
  4923  004BBC                     u7497:
  4924  004BBC  2EE8               	decfsz	wreg,f,c
  4925  004BBE  D7FE               	bra	u7497
  4926  004BC0  D000               	nop2	
  4927                           
  4928                           ;lcd.c: 41: lcdNibble(data);
  4929  004BC2  0100               	movlb	0	; () banked
  4930  004BC4  5192               	movf	putch@data& (0+255),w,b
  4931  004BC6  EC86  F022         	call	_lcdNibble
  4932  004BCA  0012               	return	
  4933  004BCC                     __end_of_putch:
  4934                           	opt stack 0
  4935                           tblptru	equ	0xFF8
  4936                           tblptrh	equ	0xFF7
  4937                           tblptrl	equ	0xFF6
  4938                           tablat	equ	0xFF5
  4939                           prodh	equ	0xFF4
  4940                           prodl	equ	0xFF3
  4941                           postinc0	equ	0xFEE
  4942                           wreg	equ	0xFE8
  4943                           postdec1	equ	0xFE5
  4944                           fsr1l	equ	0xFE1
  4945                           indf2	equ	0xFDF
  4946                           postinc2	equ	0xFDE
  4947                           postdec2	equ	0xFDD
  4948                           fsr2h	equ	0xFDA
  4949                           fsr2l	equ	0xFD9
  4950                           status	equ	0xFD8
  4951                           
  4952 ;; *************** function _lcdNewline *****************
  4953 ;; Defined at:
  4954 ;;		line 78 in file "lcd.c"
  4955 ;; Parameters:    Size  Location     Type
  4956 ;;		None
  4957 ;; Auto vars:     Size  Location     Type
  4958 ;;		None
  4959 ;; Return value:  Size  Location     Type
  4960 ;;                  1    wreg      void 
  4961 ;; Registers used:
  4962 ;;		wreg, status,2, status,0, cstack
  4963 ;; Tracked objects:
  4964 ;;		On entry : 0/0
  4965 ;;		On exit  : 0/0
  4966 ;;		Unchanged: 0/0
  4967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4971 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4972 ;;Total ram usage:        0 bytes
  4973 ;; Hardware stack levels used:    1
  4974 ;; Hardware stack levels required when called:    8
  4975 ;; This function calls:
  4976 ;;		_lcdInst
  4977 ;; This function is called by:
  4978 ;;		_putch
  4979 ;; This function uses a non-reentrant model
  4980 ;;
  4981                           
  4982                           	psect	text6
  4983  004C5A                     __ptext6:
  4984                           	opt stack 0
  4985  004C5A                     _lcdNewline:
  4986                           	opt stack 19
  4987                           
  4988                           ;lcd.c: 79: lcdInst(0b11000000);
  4989                           
  4990                           ;incstack = 0
  4991  004C5A  0EC0               	movlw	192
  4992  004C5C  ECBD  F025         	call	_lcdInst
  4993  004C60  0012               	return		;funcret
  4994  004C62                     __end_of_lcdNewline:
  4995                           	opt stack 0
  4996                           tblptru	equ	0xFF8
  4997                           tblptrh	equ	0xFF7
  4998                           tblptrl	equ	0xFF6
  4999                           tablat	equ	0xFF5
  5000                           prodh	equ	0xFF4
  5001                           prodl	equ	0xFF3
  5002                           postinc0	equ	0xFEE
  5003                           wreg	equ	0xFE8
  5004                           postdec1	equ	0xFE5
  5005                           fsr1l	equ	0xFE1
  5006                           indf2	equ	0xFDF
  5007                           postinc2	equ	0xFDE
  5008                           postdec2	equ	0xFDD
  5009                           fsr2h	equ	0xFDA
  5010                           fsr2l	equ	0xFD9
  5011                           status	equ	0xFD8
  5012                           
  5013 ;; *************** function _fround *****************
  5014 ;; Defined at:
  5015 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  5016 ;; Parameters:    Size  Location     Type
  5017 ;;  prec            1    wreg     unsigned char 
  5018 ;; Auto vars:     Size  Location     Type
  5019 ;;  prec            1   71[BANK0 ] unsigned char 
  5020 ;; Return value:  Size  Location     Type
  5021 ;;                  3   62[BANK0 ] unsigned char 
  5022 ;; Registers used:
  5023 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5024 ;; Tracked objects:
  5025 ;;		On entry : 0/0
  5026 ;;		On exit  : 0/0
  5027 ;;		Unchanged: 0/0
  5028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5029 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5030 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5032 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5033 ;;Total ram usage:       10 bytes
  5034 ;; Hardware stack levels used:    1
  5035 ;; Hardware stack levels required when called:    8
  5036 ;; This function calls:
  5037 ;;		___awdiv
  5038 ;;		___awmod
  5039 ;;		___ftmul
  5040 ;;		___wmul
  5041 ;; This function is called by:
  5042 ;;		_printf
  5043 ;; This function uses a non-reentrant model
  5044 ;;
  5045                           
  5046                           	psect	text7
  5047  001DB4                     __ptext7:
  5048                           	opt stack 0
  5049  001DB4                     _fround:
  5050                           	opt stack 20
  5051                           
  5052                           ;incstack = 0
  5053                           ;fround@prec stored from wreg
  5054  001DB4  0100               	movlb	0	; () banked
  5055  001DB6  6FC7               	movwf	fround@prec& (0+255),b
  5056                           
  5057                           ;doprnt.c: 413: if(prec>=110)
  5058  001DB8  0E6D               	movlw	109
  5059  001DBA  0100               	movlb	0	; () banked
  5060  001DBC  65C7               	cpfsgt	fround@prec& (0+255),b
  5061  001DBE  D0BA               	goto	l4530
  5062                           
  5063                           ; BSR set to: 0
  5064                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5065  001DC0  0E00               	movlw	0
  5066  001DC2  0100               	movlb	0	; () banked
  5067  001DC4  6F9F               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5068  001DC6  0E03               	movlw	3
  5069  001DC8  6F9E               	movwf	___wmul@multiplicand& (0+255),b
  5070  001DCA  0E00               	movlw	0
  5071  001DCC  0100               	movlb	0	; () banked
  5072  001DCE  6F97               	movwf	(___awdiv@divisor+1)& (0+255),b
  5073  001DD0  0E0A               	movlw	10
  5074  001DD2  6F96               	movwf	___awdiv@divisor& (0+255),b
  5075  001DD4  0E00               	movlw	0
  5076  001DD6  0100               	movlb	0	; () banked
  5077  001DD8  6F91               	movwf	(___awmod@divisor+1)& (0+255),b
  5078  001DDA  0E64               	movlw	100
  5079  001DDC  6F90               	movwf	___awmod@divisor& (0+255),b
  5080  001DDE  C0C7  F08E         	movff	fround@prec,___awmod@dividend
  5081  001DE2  0100               	movlb	0	; () banked
  5082  001DE4  6B8F               	clrf	(___awmod@dividend+1)& (0+255),b
  5083  001DE6  ECFC  F01F         	call	___awmod	;wreg free
  5084  001DEA  C08E  F094         	movff	?___awmod,___awdiv@dividend
  5085  001DEE  C08F  F095         	movff	?___awmod+1,___awdiv@dividend+1
  5086  001DF2  EC91  F01E         	call	___awdiv	;wreg free
  5087  001DF6  0E09               	movlw	9
  5088  001DF8  0100               	movlb	0	; () banked
  5089  001DFA  2594               	addwf	?___awdiv& (0+255),w,b
  5090  001DFC  0100               	movlb	0	; () banked
  5091  001DFE  6F9C               	movwf	___wmul@multiplier& (0+255),b
  5092  001E00  0E00               	movlw	0
  5093  001E02  0100               	movlb	0	; () banked
  5094  001E04  2195               	addwfc	(?___awdiv+1)& (0+255),w,b
  5095  001E06  0100               	movlb	0	; () banked
  5096  001E08  6F9D               	movwf	(___wmul@multiplier+1)& (0+255),b
  5097  001E0A  EC5B  F025         	call	___wmul	;wreg free
  5098  001E0E  0E59               	movlw	low __npowers_
  5099  001E10  0100               	movlb	0	; () banked
  5100  001E12  259C               	addwf	?___wmul& (0+255),w,b
  5101  001E14  6EF6               	movwf	tblptrl,c
  5102  001E16  0EFE               	movlw	high __npowers_
  5103  001E18  0100               	movlb	0	; () banked
  5104  001E1A  219D               	addwfc	(?___wmul+1)& (0+255),w,b
  5105  001E1C  6EF7               	movwf	tblptrh,c
  5106  001E1E                     	if	0	;There are less than 3 active tblptr bytes
  5107  001E1E                     	endif
  5108  001E1E  0009               	tblrd		*+
  5109  001E20  CFF5 F0B2          	movff	tablat,___ftmul@f2
  5110  001E24  0009               	tblrd		*+
  5111  001E26  CFF5 F0B3          	movff	tablat,___ftmul@f2+1
  5112  001E2A  000A               	tblrd		*-
  5113  001E2C  CFF5 F0B4          	movff	tablat,___ftmul@f2+2
  5114  001E30  0E00               	movlw	0
  5115  001E32  0100               	movlb	0	; () banked
  5116  001E34  6F97               	movwf	(___awdiv@divisor+1)& (0+255),b
  5117  001E36  0E64               	movlw	100
  5118  001E38  6F96               	movwf	___awdiv@divisor& (0+255),b
  5119  001E3A  C0C7  F094         	movff	fround@prec,___awdiv@dividend
  5120  001E3E  0100               	movlb	0	; () banked
  5121  001E40  6B95               	clrf	(___awdiv@dividend+1)& (0+255),b
  5122  001E42  EC91  F01E         	call	___awdiv	;wreg free
  5123  001E46  0E12               	movlw	18
  5124  001E48  0100               	movlb	0	; () banked
  5125  001E4A  2594               	addwf	?___awdiv& (0+255),w,b
  5126  001E4C  0100               	movlb	0	; () banked
  5127  001E4E  6F9C               	movwf	___wmul@multiplier& (0+255),b
  5128  001E50  0E00               	movlw	0
  5129  001E52  0100               	movlb	0	; () banked
  5130  001E54  2195               	addwfc	(?___awdiv+1)& (0+255),w,b
  5131  001E56  0100               	movlb	0	; () banked
  5132  001E58  6F9D               	movwf	(___wmul@multiplier+1)& (0+255),b
  5133  001E5A  0E00               	movlw	0
  5134  001E5C  0100               	movlb	0	; () banked
  5135  001E5E  6F9F               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5136  001E60  0E03               	movlw	3
  5137  001E62  6F9E               	movwf	___wmul@multiplicand& (0+255),b
  5138  001E64  EC5B  F025         	call	___wmul	;wreg free
  5139  001E68  0E59               	movlw	low __npowers_
  5140  001E6A  0100               	movlb	0	; () banked
  5141  001E6C  259C               	addwf	?___wmul& (0+255),w,b
  5142  001E6E  6EF6               	movwf	tblptrl,c
  5143  001E70  0EFE               	movlw	high __npowers_
  5144  001E72  0100               	movlb	0	; () banked
  5145  001E74  219D               	addwfc	(?___wmul+1)& (0+255),w,b
  5146  001E76  6EF7               	movwf	tblptrh,c
  5147  001E78                     	if	0	;There are less than 3 active tblptr bytes
  5148  001E78                     	endif
  5149  001E78  0009               	tblrd		*+
  5150  001E7A  CFF5 F0AF          	movff	tablat,___ftmul@f1
  5151  001E7E  0009               	tblrd		*+
  5152  001E80  CFF5 F0B0          	movff	tablat,___ftmul@f1+1
  5153  001E84  000A               	tblrd		*-
  5154  001E86  CFF5 F0B1          	movff	tablat,___ftmul@f1+2
  5155  001E8A  ECA3  F015         	call	___ftmul	;wreg free
  5156  001E8E  C0AF  F0C4         	movff	?___ftmul,_fround$1312
  5157  001E92  C0B0  F0C5         	movff	?___ftmul+1,_fround$1312+1
  5158  001E96  C0B1  F0C6         	movff	?___ftmul+2,_fround$1312+2
  5159                           
  5160                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5161  001E9A  0E00               	movlw	0
  5162  001E9C  0100               	movlb	0	; () banked
  5163  001E9E  6F9F               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5164  001EA0  0E03               	movlw	3
  5165  001EA2  6F9E               	movwf	___wmul@multiplicand& (0+255),b
  5166  001EA4  0E00               	movlw	0
  5167  001EA6  0100               	movlb	0	; () banked
  5168  001EA8  6F91               	movwf	(___awmod@divisor+1)& (0+255),b
  5169  001EAA  0E0A               	movlw	10
  5170  001EAC  6F90               	movwf	___awmod@divisor& (0+255),b
  5171  001EAE  C0C7  F08E         	movff	fround@prec,___awmod@dividend
  5172  001EB2  0100               	movlb	0	; () banked
  5173  001EB4  6B8F               	clrf	(___awmod@dividend+1)& (0+255),b
  5174  001EB6  ECFC  F01F         	call	___awmod	;wreg free
  5175  001EBA  C08E  F09C         	movff	?___awmod,___wmul@multiplier
  5176  001EBE  C08F  F09D         	movff	?___awmod+1,___wmul@multiplier+1
  5177  001EC2  EC5B  F025         	call	___wmul	;wreg free
  5178  001EC6  0E59               	movlw	low __npowers_
  5179  001EC8  0100               	movlb	0	; () banked
  5180  001ECA  259C               	addwf	?___wmul& (0+255),w,b
  5181  001ECC  6EF6               	movwf	tblptrl,c
  5182  001ECE  0EFE               	movlw	high __npowers_
  5183  001ED0  0100               	movlb	0	; () banked
  5184  001ED2  219D               	addwfc	(?___wmul+1)& (0+255),w,b
  5185  001ED4  6EF7               	movwf	tblptrh,c
  5186  001ED6                     	if	0	;There are less than 3 active tblptr bytes
  5187  001ED6                     	endif
  5188  001ED6  0009               	tblrd		*+
  5189  001ED8  CFF5 F0B2          	movff	tablat,___ftmul@f2
  5190  001EDC  0009               	tblrd		*+
  5191  001EDE  CFF5 F0B3          	movff	tablat,___ftmul@f2+1
  5192  001EE2  000A               	tblrd		*-
  5193  001EE4  CFF5 F0B4          	movff	tablat,___ftmul@f2+2
  5194  001EE8  C0C4  F0AF         	movff	_fround$1312,___ftmul@f1
  5195  001EEC  C0C5  F0B0         	movff	_fround$1312+1,___ftmul@f1+1
  5196  001EF0  C0C6  F0B1         	movff	_fround$1312+2,___ftmul@f1+2
  5197  001EF4  ECA3  F015         	call	___ftmul	;wreg free
  5198  001EF8  C0AF  F0C1         	movff	?___ftmul,_fround$1313
  5199  001EFC  C0B0  F0C2         	movff	?___ftmul+1,_fround$1313+1
  5200  001F00  C0B1  F0C3         	movff	?___ftmul+2,_fround$1313+2
  5201                           
  5202                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5203  001F04  C0C1  F0AF         	movff	_fround$1313,___ftmul@f1
  5204  001F08  C0C2  F0B0         	movff	_fround$1313+1,___ftmul@f1+1
  5205  001F0C  C0C3  F0B1         	movff	_fround$1313+2,___ftmul@f1+2
  5206  001F10  0E00               	movlw	0
  5207  001F12  0100               	movlb	0	; () banked
  5208  001F14  6FB2               	movwf	___ftmul@f2& (0+255),b
  5209  001F16  0E00               	movlw	0
  5210  001F18  0100               	movlb	0	; () banked
  5211  001F1A  6FB3               	movwf	(___ftmul@f2+1)& (0+255),b
  5212  001F1C  0E3F               	movlw	63
  5213  001F1E  0100               	movlb	0	; () banked
  5214  001F20  6FB4               	movwf	(___ftmul@f2+2)& (0+255),b
  5215  001F22  ECA3  F015         	call	___ftmul	;wreg free
  5216  001F26  C0AF  F0BE         	movff	?___ftmul,?_fround
  5217  001F2A  C0B0  F0BF         	movff	?___ftmul+1,?_fround+1
  5218  001F2E  C0B1  F0C0         	movff	?___ftmul+2,?_fround+2
  5219  001F32  0012               	return	
  5220  001F34                     l4530:
  5221                           
  5222                           ;doprnt.c: 415: else if(prec > 10)
  5223  001F34  0E0A               	movlw	10
  5224  001F36  0100               	movlb	0	; () banked
  5225  001F38  65C7               	cpfsgt	fround@prec& (0+255),b
  5226  001F3A  D06E               	goto	l4538
  5227                           
  5228                           ; BSR set to: 0
  5229                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5230  001F3C  0E00               	movlw	0
  5231  001F3E  0100               	movlb	0	; () banked
  5232  001F40  6F9F               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5233  001F42  0E03               	movlw	3
  5234  001F44  6F9E               	movwf	___wmul@multiplicand& (0+255),b
  5235  001F46  0E00               	movlw	0
  5236  001F48  0100               	movlb	0	; () banked
  5237  001F4A  6F91               	movwf	(___awmod@divisor+1)& (0+255),b
  5238  001F4C  0E0A               	movlw	10
  5239  001F4E  6F90               	movwf	___awmod@divisor& (0+255),b
  5240  001F50  C0C7  F08E         	movff	fround@prec,___awmod@dividend
  5241  001F54  0100               	movlb	0	; () banked
  5242  001F56  6B8F               	clrf	(___awmod@dividend+1)& (0+255),b
  5243  001F58  ECFC  F01F         	call	___awmod	;wreg free
  5244  001F5C  C08E  F09C         	movff	?___awmod,___wmul@multiplier
  5245  001F60  C08F  F09D         	movff	?___awmod+1,___wmul@multiplier+1
  5246  001F64  EC5B  F025         	call	___wmul	;wreg free
  5247  001F68  0E59               	movlw	low __npowers_
  5248  001F6A  0100               	movlb	0	; () banked
  5249  001F6C  259C               	addwf	?___wmul& (0+255),w,b
  5250  001F6E  6EF6               	movwf	tblptrl,c
  5251  001F70  0EFE               	movlw	high __npowers_
  5252  001F72  0100               	movlb	0	; () banked
  5253  001F74  219D               	addwfc	(?___wmul+1)& (0+255),w,b
  5254  001F76  6EF7               	movwf	tblptrh,c
  5255  001F78                     	if	0	;There are less than 3 active tblptr bytes
  5256  001F78                     	endif
  5257  001F78  0009               	tblrd		*+
  5258  001F7A  CFF5 F0B2          	movff	tablat,___ftmul@f2
  5259  001F7E  0009               	tblrd		*+
  5260  001F80  CFF5 F0B3          	movff	tablat,___ftmul@f2+1
  5261  001F84  000A               	tblrd		*-
  5262  001F86  CFF5 F0B4          	movff	tablat,___ftmul@f2+2
  5263  001F8A  0E00               	movlw	0
  5264  001F8C  0100               	movlb	0	; () banked
  5265  001F8E  6F97               	movwf	(___awdiv@divisor+1)& (0+255),b
  5266  001F90  0E0A               	movlw	10
  5267  001F92  6F96               	movwf	___awdiv@divisor& (0+255),b
  5268  001F94  C0C7  F094         	movff	fround@prec,___awdiv@dividend
  5269  001F98  0100               	movlb	0	; () banked
  5270  001F9A  6B95               	clrf	(___awdiv@dividend+1)& (0+255),b
  5271  001F9C  EC91  F01E         	call	___awdiv	;wreg free
  5272  001FA0  0E09               	movlw	9
  5273  001FA2  0100               	movlb	0	; () banked
  5274  001FA4  2594               	addwf	?___awdiv& (0+255),w,b
  5275  001FA6  0100               	movlb	0	; () banked
  5276  001FA8  6F9C               	movwf	___wmul@multiplier& (0+255),b
  5277  001FAA  0E00               	movlw	0
  5278  001FAC  0100               	movlb	0	; () banked
  5279  001FAE  2195               	addwfc	(?___awdiv+1)& (0+255),w,b
  5280  001FB0  0100               	movlb	0	; () banked
  5281  001FB2  6F9D               	movwf	(___wmul@multiplier+1)& (0+255),b
  5282  001FB4  0E00               	movlw	0
  5283  001FB6  0100               	movlb	0	; () banked
  5284  001FB8  6F9F               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5285  001FBA  0E03               	movlw	3
  5286  001FBC  6F9E               	movwf	___wmul@multiplicand& (0+255),b
  5287  001FBE  EC5B  F025         	call	___wmul	;wreg free
  5288  001FC2  0E59               	movlw	low __npowers_
  5289  001FC4  0100               	movlb	0	; () banked
  5290  001FC6  259C               	addwf	?___wmul& (0+255),w,b
  5291  001FC8  6EF6               	movwf	tblptrl,c
  5292  001FCA  0EFE               	movlw	high __npowers_
  5293  001FCC  0100               	movlb	0	; () banked
  5294  001FCE  219D               	addwfc	(?___wmul+1)& (0+255),w,b
  5295  001FD0  6EF7               	movwf	tblptrh,c
  5296  001FD2                     	if	0	;There are less than 3 active tblptr bytes
  5297  001FD2                     	endif
  5298  001FD2  0009               	tblrd		*+
  5299  001FD4  CFF5 F0AF          	movff	tablat,___ftmul@f1
  5300  001FD8  0009               	tblrd		*+
  5301  001FDA  CFF5 F0B0          	movff	tablat,___ftmul@f1+1
  5302  001FDE  000A               	tblrd		*-
  5303  001FE0  CFF5 F0B1          	movff	tablat,___ftmul@f1+2
  5304  001FE4  ECA3  F015         	call	___ftmul	;wreg free
  5305  001FE8  C0AF  F0C4         	movff	?___ftmul,_fround$1312
  5306  001FEC  C0B0  F0C5         	movff	?___ftmul+1,_fround$1312+1
  5307  001FF0  C0B1  F0C6         	movff	?___ftmul+2,_fround$1312+2
  5308                           
  5309                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5310  001FF4  C0C4  F0AF         	movff	_fround$1312,___ftmul@f1
  5311  001FF8  C0C5  F0B0         	movff	_fround$1312+1,___ftmul@f1+1
  5312  001FFC  C0C6  F0B1         	movff	_fround$1312+2,___ftmul@f1+2
  5313  002000  0E00               	movlw	0
  5314  002002  0100               	movlb	0	; () banked
  5315  002004  6FB2               	movwf	___ftmul@f2& (0+255),b
  5316  002006  0E00               	movlw	0
  5317  002008  0100               	movlb	0	; () banked
  5318  00200A  6FB3               	movwf	(___ftmul@f2+1)& (0+255),b
  5319  00200C  0E3F               	movlw	63
  5320  00200E  0100               	movlb	0	; () banked
  5321  002010  6FB4               	movwf	(___ftmul@f2+2)& (0+255),b
  5322  002012  ECA3  F015         	call	___ftmul	;wreg free
  5323  002016  D787               	goto	L4
  5324  002018                     l4538:
  5325                           
  5326                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5327  002018  0100               	movlb	0	; () banked
  5328  00201A  51C7               	movf	fround@prec& (0+255),w,b
  5329  00201C  0D03               	mullw	3
  5330  00201E  0E59               	movlw	low __npowers_
  5331  002020  24F3               	addwf	prodl,w,c
  5332  002022  6EF6               	movwf	tblptrl,c
  5333  002024  0EFE               	movlw	high __npowers_
  5334  002026  20F4               	addwfc	prodh,w,c
  5335  002028  6EF7               	movwf	tblptrh,c
  5336  00202A                     	if	0	;There are less than 3 active tblptr bytes
  5337  00202A                     	endif
  5338  00202A  0009               	tblrd		*+
  5339  00202C  CFF5 F0AF          	movff	tablat,___ftmul@f1
  5340  002030  0009               	tblrd		*+
  5341  002032  CFF5 F0B0          	movff	tablat,___ftmul@f1+1
  5342  002036  000A               	tblrd		*-
  5343  002038  CFF5 F0B1          	movff	tablat,___ftmul@f1+2
  5344  00203C  0E00               	movlw	0
  5345  00203E  0100               	movlb	0	; () banked
  5346  002040  6FB2               	movwf	___ftmul@f2& (0+255),b
  5347  002042  0E00               	movlw	0
  5348  002044  0100               	movlb	0	; () banked
  5349  002046  6FB3               	movwf	(___ftmul@f2+1)& (0+255),b
  5350  002048  0E3F               	movlw	63
  5351  00204A  0100               	movlb	0	; () banked
  5352  00204C  6FB4               	movwf	(___ftmul@f2+2)& (0+255),b
  5353  00204E  ECA3  F015         	call	___ftmul	;wreg free
  5354  002052  C0AF  F0BE         	movff	?___ftmul,?_fround
  5355  002056  C0B0  F0BF         	movff	?___ftmul+1,?_fround+1
  5356  00205A  C0B1  F0C0         	movff	?___ftmul+2,?_fround+2
  5357  00205E  0012               	return	
  5358  002060                     __end_of_fround:
  5359                           	opt stack 0
  5360                           tblptru	equ	0xFF8
  5361                           tblptrh	equ	0xFF7
  5362                           tblptrl	equ	0xFF6
  5363                           tablat	equ	0xFF5
  5364                           prodh	equ	0xFF4
  5365                           prodl	equ	0xFF3
  5366                           postinc0	equ	0xFEE
  5367                           wreg	equ	0xFE8
  5368                           postdec1	equ	0xFE5
  5369                           fsr1l	equ	0xFE1
  5370                           indf2	equ	0xFDF
  5371                           postinc2	equ	0xFDE
  5372                           postdec2	equ	0xFDD
  5373                           fsr2h	equ	0xFDA
  5374                           fsr2l	equ	0xFD9
  5375                           status	equ	0xFD8
  5376                           
  5377 ;; *************** function ___wmul *****************
  5378 ;; Defined at:
  5379 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  5380 ;; Parameters:    Size  Location     Type
  5381 ;;  multiplier      2   28[BANK0 ] unsigned int 
  5382 ;;  multiplicand    2   30[BANK0 ] unsigned int 
  5383 ;; Auto vars:     Size  Location     Type
  5384 ;;  product         2   32[BANK0 ] unsigned int 
  5385 ;; Return value:  Size  Location     Type
  5386 ;;                  2   28[BANK0 ] unsigned int 
  5387 ;; Registers used:
  5388 ;;		wreg, status,2, status,0, prodl, prodh
  5389 ;; Tracked objects:
  5390 ;;		On entry : 0/0
  5391 ;;		On exit  : 0/0
  5392 ;;		Unchanged: 0/0
  5393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5394 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5395 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5397 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5398 ;;Total ram usage:        6 bytes
  5399 ;; Hardware stack levels used:    1
  5400 ;; Hardware stack levels required when called:    6
  5401 ;; This function calls:
  5402 ;;		Nothing
  5403 ;; This function is called by:
  5404 ;;		_fround
  5405 ;;		_scale
  5406 ;;		_printf
  5407 ;; This function uses a non-reentrant model
  5408 ;;
  5409                           
  5410                           	psect	text8
  5411  004AB6                     __ptext8:
  5412                           	opt stack 0
  5413  004AB6                     ___wmul:
  5414                           	opt stack 21
  5415                           
  5416                           ;incstack = 0
  5417  004AB6  0100               	movlb	0	; () banked
  5418  004AB8  519C               	movf	___wmul@multiplier& (0+255),w,b
  5419  004ABA  0100               	movlb	0	; () banked
  5420  004ABC  039E               	mulwf	___wmul@multiplicand& (0+255),b
  5421  004ABE  CFF3 F0A0          	movff	prodl,___wmul@product
  5422  004AC2  CFF4 F0A1          	movff	prodh,___wmul@product+1
  5423  004AC6  0100               	movlb	0	; () banked
  5424  004AC8  519C               	movf	___wmul@multiplier& (0+255),w,b
  5425  004ACA  0100               	movlb	0	; () banked
  5426  004ACC  039F               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  5427  004ACE  50F3               	movf	prodl,w,c
  5428  004AD0  0100               	movlb	0	; () banked
  5429  004AD2  27A1               	addwf	(___wmul@product+1)& (0+255),f,b
  5430  004AD4  0100               	movlb	0	; () banked
  5431  004AD6  519D               	movf	(___wmul@multiplier+1)& (0+255),w,b
  5432  004AD8  0100               	movlb	0	; () banked
  5433  004ADA  039E               	mulwf	___wmul@multiplicand& (0+255),b
  5434  004ADC  50F3               	movf	prodl,w,c
  5435  004ADE  0100               	movlb	0	; () banked
  5436  004AE0  27A1               	addwf	(___wmul@product+1)& (0+255),f,b
  5437                           
  5438                           ; BSR set to: 0
  5439  004AE2  C0A0  F09C         	movff	___wmul@product,?___wmul
  5440  004AE6  C0A1  F09D         	movff	___wmul@product+1,?___wmul+1
  5441  004AEA  0012               	return	
  5442  004AEC                     __end_of___wmul:
  5443                           	opt stack 0
  5444                           tblptru	equ	0xFF8
  5445                           tblptrh	equ	0xFF7
  5446                           tblptrl	equ	0xFF6
  5447                           tablat	equ	0xFF5
  5448                           prodh	equ	0xFF4
  5449                           prodl	equ	0xFF3
  5450                           postinc0	equ	0xFEE
  5451                           wreg	equ	0xFE8
  5452                           postdec1	equ	0xFE5
  5453                           fsr1l	equ	0xFE1
  5454                           indf2	equ	0xFDF
  5455                           postinc2	equ	0xFDE
  5456                           postdec2	equ	0xFDD
  5457                           fsr2h	equ	0xFDA
  5458                           fsr2l	equ	0xFD9
  5459                           status	equ	0xFD8
  5460                           
  5461 ;; *************** function ___awmod *****************
  5462 ;; Defined at:
  5463 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  5464 ;; Parameters:    Size  Location     Type
  5465 ;;  dividend        2   14[BANK0 ] int 
  5466 ;;  divisor         2   16[BANK0 ] int 
  5467 ;; Auto vars:     Size  Location     Type
  5468 ;;  sign            1   19[BANK0 ] unsigned char 
  5469 ;;  counter         1   18[BANK0 ] unsigned char 
  5470 ;; Return value:  Size  Location     Type
  5471 ;;                  2   14[BANK0 ] int 
  5472 ;; Registers used:
  5473 ;;		wreg, status,2, status,0
  5474 ;; Tracked objects:
  5475 ;;		On entry : 0/0
  5476 ;;		On exit  : 0/0
  5477 ;;		Unchanged: 0/0
  5478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5479 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5480 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5482 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5483 ;;Total ram usage:        6 bytes
  5484 ;; Hardware stack levels used:    1
  5485 ;; Hardware stack levels required when called:    6
  5486 ;; This function calls:
  5487 ;;		Nothing
  5488 ;; This function is called by:
  5489 ;;		_fround
  5490 ;;		_scale
  5491 ;; This function uses a non-reentrant model
  5492 ;;
  5493                           
  5494                           	psect	text9
  5495  003FF8                     __ptext9:
  5496                           	opt stack 0
  5497  003FF8                     ___awmod:
  5498                           	opt stack 21
  5499                           
  5500                           ; BSR set to: 0
  5501                           ;incstack = 0
  5502  003FF8  0E00               	movlw	0
  5503  003FFA  0100               	movlb	0	; () banked
  5504  003FFC  6F93               	movwf	___awmod@sign& (0+255),b
  5505                           
  5506                           ; BSR set to: 0
  5507  003FFE  0100               	movlb	0	; () banked
  5508  004000  AF8F               	btfss	(___awmod@dividend+1)& (0+255),7,b
  5509  004002  D008               	goto	l4374
  5510                           
  5511                           ; BSR set to: 0
  5512  004004  0100               	movlb	0	; () banked
  5513  004006  6D8E               	negf	___awmod@dividend& (0+255),b
  5514  004008  1F8F               	comf	(___awmod@dividend+1)& (0+255),f,b
  5515  00400A  B0D8               	btfsc	status,0,c
  5516  00400C  2B8F               	incf	(___awmod@dividend+1)& (0+255),f,b
  5517                           
  5518                           ; BSR set to: 0
  5519  00400E  0E01               	movlw	1
  5520  004010  0100               	movlb	0	; () banked
  5521  004012  6F93               	movwf	___awmod@sign& (0+255),b
  5522  004014                     l4374:
  5523                           
  5524                           ; BSR set to: 0
  5525  004014  0100               	movlb	0	; () banked
  5526  004016  AF91               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5527  004018  D005               	goto	l4378
  5528                           
  5529                           ; BSR set to: 0
  5530  00401A  0100               	movlb	0	; () banked
  5531  00401C  6D90               	negf	___awmod@divisor& (0+255),b
  5532  00401E  1F91               	comf	(___awmod@divisor+1)& (0+255),f,b
  5533  004020  B0D8               	btfsc	status,0,c
  5534  004022  2B91               	incf	(___awmod@divisor+1)& (0+255),f,b
  5535  004024                     l4378:
  5536                           
  5537                           ; BSR set to: 0
  5538  004024  0100               	movlb	0	; () banked
  5539  004026  5190               	movf	___awmod@divisor& (0+255),w,b
  5540  004028  0100               	movlb	0	; () banked
  5541  00402A  1191               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  5542  00402C  B4D8               	btfsc	status,2,c
  5543  00402E  D026               	goto	l4394
  5544                           
  5545                           ; BSR set to: 0
  5546  004030  0E01               	movlw	1
  5547  004032  0100               	movlb	0	; () banked
  5548  004034  6F92               	movwf	___awmod@counter& (0+255),b
  5549  004036  D006               	goto	l4384
  5550  004038                     l4382:
  5551                           
  5552                           ; BSR set to: 0
  5553  004038  0100               	movlb	0	; () banked
  5554  00403A  90D8               	bcf	status,0,c
  5555  00403C  3790               	rlcf	___awmod@divisor& (0+255),f,b
  5556  00403E  3791               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  5557  004040  0100               	movlb	0	; () banked
  5558  004042  2B92               	incf	___awmod@counter& (0+255),f,b
  5559  004044                     l4384:
  5560                           
  5561                           ; BSR set to: 0
  5562  004044  0100               	movlb	0	; () banked
  5563  004046  AF91               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5564  004048  D7F7               	goto	l4382
  5565  00404A                     l4386:
  5566                           
  5567                           ; BSR set to: 0
  5568  00404A  0100               	movlb	0	; () banked
  5569  00404C  5190               	movf	___awmod@divisor& (0+255),w,b
  5570  00404E  0100               	movlb	0	; () banked
  5571  004050  5D8E               	subwf	___awmod@dividend& (0+255),w,b
  5572  004052  0100               	movlb	0	; () banked
  5573  004054  5191               	movf	(___awmod@divisor+1)& (0+255),w,b
  5574  004056  0100               	movlb	0	; () banked
  5575  004058  598F               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  5576  00405A  A0D8               	btfss	status,0,c
  5577  00405C  D008               	goto	l4390
  5578                           
  5579                           ; BSR set to: 0
  5580  00405E  0100               	movlb	0	; () banked
  5581  004060  5190               	movf	___awmod@divisor& (0+255),w,b
  5582  004062  0100               	movlb	0	; () banked
  5583  004064  5F8E               	subwf	___awmod@dividend& (0+255),f,b
  5584  004066  0100               	movlb	0	; () banked
  5585  004068  5191               	movf	(___awmod@divisor+1)& (0+255),w,b
  5586  00406A  0100               	movlb	0	; () banked
  5587  00406C  5B8F               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  5588  00406E                     l4390:
  5589                           
  5590                           ; BSR set to: 0
  5591  00406E  0100               	movlb	0	; () banked
  5592  004070  90D8               	bcf	status,0,c
  5593  004072  3391               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  5594  004074  3390               	rrcf	___awmod@divisor& (0+255),f,b
  5595                           
  5596                           ; BSR set to: 0
  5597  004076  0100               	movlb	0	; () banked
  5598  004078  2F92               	decfsz	___awmod@counter& (0+255),f,b
  5599  00407A  D7E7               	goto	l4386
  5600  00407C                     l4394:
  5601                           
  5602                           ; BSR set to: 0
  5603  00407C  0100               	movlb	0	; () banked
  5604  00407E  5193               	movf	___awmod@sign& (0+255),w,b
  5605  004080  0100               	movlb	0	; () banked
  5606  004082  B4D8               	btfsc	status,2,c
  5607  004084  D005               	goto	l4398
  5608                           
  5609                           ; BSR set to: 0
  5610  004086  0100               	movlb	0	; () banked
  5611  004088  6D8E               	negf	___awmod@dividend& (0+255),b
  5612  00408A  1F8F               	comf	(___awmod@dividend+1)& (0+255),f,b
  5613  00408C  B0D8               	btfsc	status,0,c
  5614  00408E  2B8F               	incf	(___awmod@dividend+1)& (0+255),f,b
  5615  004090                     l4398:
  5616                           
  5617                           ; BSR set to: 0
  5618  004090  C08E  F08E         	movff	___awmod@dividend,?___awmod
  5619  004094  C08F  F08F         	movff	___awmod@dividend+1,?___awmod+1
  5620  004098  0012               	return	
  5621  00409A                     __end_of___awmod:
  5622                           	opt stack 0
  5623                           tblptru	equ	0xFF8
  5624                           tblptrh	equ	0xFF7
  5625                           tblptrl	equ	0xFF6
  5626                           tablat	equ	0xFF5
  5627                           prodh	equ	0xFF4
  5628                           prodl	equ	0xFF3
  5629                           postinc0	equ	0xFEE
  5630                           wreg	equ	0xFE8
  5631                           postdec1	equ	0xFE5
  5632                           fsr1l	equ	0xFE1
  5633                           indf2	equ	0xFDF
  5634                           postinc2	equ	0xFDE
  5635                           postdec2	equ	0xFDD
  5636                           fsr2h	equ	0xFDA
  5637                           fsr2l	equ	0xFD9
  5638                           status	equ	0xFD8
  5639                           
  5640 ;; *************** function ___awdiv *****************
  5641 ;; Defined at:
  5642 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  5643 ;; Parameters:    Size  Location     Type
  5644 ;;  dividend        2   20[BANK0 ] int 
  5645 ;;  divisor         2   22[BANK0 ] int 
  5646 ;; Auto vars:     Size  Location     Type
  5647 ;;  quotient        2   26[BANK0 ] int 
  5648 ;;  sign            1   25[BANK0 ] unsigned char 
  5649 ;;  counter         1   24[BANK0 ] unsigned char 
  5650 ;; Return value:  Size  Location     Type
  5651 ;;                  2   20[BANK0 ] int 
  5652 ;; Registers used:
  5653 ;;		wreg, status,2, status,0
  5654 ;; Tracked objects:
  5655 ;;		On entry : 0/0
  5656 ;;		On exit  : 0/0
  5657 ;;		Unchanged: 0/0
  5658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5659 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5660 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5662 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5663 ;;Total ram usage:        8 bytes
  5664 ;; Hardware stack levels used:    1
  5665 ;; Hardware stack levels required when called:    6
  5666 ;; This function calls:
  5667 ;;		Nothing
  5668 ;; This function is called by:
  5669 ;;		_fround
  5670 ;;		_scale
  5671 ;;		_printf
  5672 ;; This function uses a non-reentrant model
  5673 ;;
  5674                           
  5675                           	psect	text10
  5676  003D22                     __ptext10:
  5677                           	opt stack 0
  5678  003D22                     ___awdiv:
  5679                           	opt stack 21
  5680                           
  5681                           ; BSR set to: 0
  5682                           ;incstack = 0
  5683  003D22  0E00               	movlw	0
  5684  003D24  0100               	movlb	0	; () banked
  5685  003D26  6F99               	movwf	___awdiv@sign& (0+255),b
  5686                           
  5687                           ; BSR set to: 0
  5688  003D28  0100               	movlb	0	; () banked
  5689  003D2A  AF97               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5690  003D2C  D008               	goto	l4330
  5691                           
  5692                           ; BSR set to: 0
  5693  003D2E  0100               	movlb	0	; () banked
  5694  003D30  6D96               	negf	___awdiv@divisor& (0+255),b
  5695  003D32  1F97               	comf	(___awdiv@divisor+1)& (0+255),f,b
  5696  003D34  B0D8               	btfsc	status,0,c
  5697  003D36  2B97               	incf	(___awdiv@divisor+1)& (0+255),f,b
  5698                           
  5699                           ; BSR set to: 0
  5700  003D38  0E01               	movlw	1
  5701  003D3A  0100               	movlb	0	; () banked
  5702  003D3C  6F99               	movwf	___awdiv@sign& (0+255),b
  5703  003D3E                     l4330:
  5704                           
  5705                           ; BSR set to: 0
  5706  003D3E  0100               	movlb	0	; () banked
  5707  003D40  AF95               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  5708  003D42  D008               	goto	l4336
  5709                           
  5710                           ; BSR set to: 0
  5711  003D44  0100               	movlb	0	; () banked
  5712  003D46  6D94               	negf	___awdiv@dividend& (0+255),b
  5713  003D48  1F95               	comf	(___awdiv@dividend+1)& (0+255),f,b
  5714  003D4A  B0D8               	btfsc	status,0,c
  5715  003D4C  2B95               	incf	(___awdiv@dividend+1)& (0+255),f,b
  5716                           
  5717                           ; BSR set to: 0
  5718  003D4E  0E01               	movlw	1
  5719  003D50  0100               	movlb	0	; () banked
  5720  003D52  1B99               	xorwf	___awdiv@sign& (0+255),f,b
  5721  003D54                     l4336:
  5722                           
  5723                           ; BSR set to: 0
  5724  003D54  0E00               	movlw	0
  5725  003D56  0100               	movlb	0	; () banked
  5726  003D58  6F9B               	movwf	(___awdiv@quotient+1)& (0+255),b
  5727  003D5A  0E00               	movlw	0
  5728  003D5C  6F9A               	movwf	___awdiv@quotient& (0+255),b
  5729                           
  5730                           ; BSR set to: 0
  5731  003D5E  0100               	movlb	0	; () banked
  5732  003D60  5196               	movf	___awdiv@divisor& (0+255),w,b
  5733  003D62  0100               	movlb	0	; () banked
  5734  003D64  1197               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  5735  003D66  B4D8               	btfsc	status,2,c
  5736  003D68  D02C               	goto	l4358
  5737                           
  5738                           ; BSR set to: 0
  5739  003D6A  0E01               	movlw	1
  5740  003D6C  0100               	movlb	0	; () banked
  5741  003D6E  6F98               	movwf	___awdiv@counter& (0+255),b
  5742  003D70  D006               	goto	l4344
  5743  003D72                     l4342:
  5744                           
  5745                           ; BSR set to: 0
  5746  003D72  0100               	movlb	0	; () banked
  5747  003D74  90D8               	bcf	status,0,c
  5748  003D76  3796               	rlcf	___awdiv@divisor& (0+255),f,b
  5749  003D78  3797               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  5750  003D7A  0100               	movlb	0	; () banked
  5751  003D7C  2B98               	incf	___awdiv@counter& (0+255),f,b
  5752  003D7E                     l4344:
  5753                           
  5754                           ; BSR set to: 0
  5755  003D7E  0100               	movlb	0	; () banked
  5756  003D80  AF97               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5757  003D82  D7F7               	goto	l4342
  5758  003D84                     l4346:
  5759                           
  5760                           ; BSR set to: 0
  5761  003D84  0100               	movlb	0	; () banked
  5762  003D86  90D8               	bcf	status,0,c
  5763  003D88  379A               	rlcf	___awdiv@quotient& (0+255),f,b
  5764  003D8A  379B               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  5765                           
  5766                           ; BSR set to: 0
  5767  003D8C  0100               	movlb	0	; () banked
  5768  003D8E  5196               	movf	___awdiv@divisor& (0+255),w,b
  5769  003D90  0100               	movlb	0	; () banked
  5770  003D92  5D94               	subwf	___awdiv@dividend& (0+255),w,b
  5771  003D94  0100               	movlb	0	; () banked
  5772  003D96  5197               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5773  003D98  0100               	movlb	0	; () banked
  5774  003D9A  5995               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  5775  003D9C  A0D8               	btfss	status,0,c
  5776  003D9E  D00A               	goto	l4354
  5777                           
  5778                           ; BSR set to: 0
  5779  003DA0  0100               	movlb	0	; () banked
  5780  003DA2  5196               	movf	___awdiv@divisor& (0+255),w,b
  5781  003DA4  0100               	movlb	0	; () banked
  5782  003DA6  5F94               	subwf	___awdiv@dividend& (0+255),f,b
  5783  003DA8  0100               	movlb	0	; () banked
  5784  003DAA  5197               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5785  003DAC  0100               	movlb	0	; () banked
  5786  003DAE  5B95               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  5787                           
  5788                           ; BSR set to: 0
  5789  003DB0  0100               	movlb	0	; () banked
  5790  003DB2  819A               	bsf	___awdiv@quotient& (0+255),0,b
  5791  003DB4                     l4354:
  5792                           
  5793                           ; BSR set to: 0
  5794  003DB4  0100               	movlb	0	; () banked
  5795  003DB6  90D8               	bcf	status,0,c
  5796  003DB8  3397               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  5797  003DBA  3396               	rrcf	___awdiv@divisor& (0+255),f,b
  5798                           
  5799                           ; BSR set to: 0
  5800  003DBC  0100               	movlb	0	; () banked
  5801  003DBE  2F98               	decfsz	___awdiv@counter& (0+255),f,b
  5802  003DC0  D7E1               	goto	l4346
  5803  003DC2                     l4358:
  5804                           
  5805                           ; BSR set to: 0
  5806  003DC2  0100               	movlb	0	; () banked
  5807  003DC4  5199               	movf	___awdiv@sign& (0+255),w,b
  5808  003DC6  0100               	movlb	0	; () banked
  5809  003DC8  B4D8               	btfsc	status,2,c
  5810  003DCA  D005               	goto	l4362
  5811                           
  5812                           ; BSR set to: 0
  5813  003DCC  0100               	movlb	0	; () banked
  5814  003DCE  6D9A               	negf	___awdiv@quotient& (0+255),b
  5815  003DD0  1F9B               	comf	(___awdiv@quotient+1)& (0+255),f,b
  5816  003DD2  B0D8               	btfsc	status,0,c
  5817  003DD4  2B9B               	incf	(___awdiv@quotient+1)& (0+255),f,b
  5818  003DD6                     l4362:
  5819                           
  5820                           ; BSR set to: 0
  5821  003DD6  C09A  F094         	movff	___awdiv@quotient,?___awdiv
  5822  003DDA  C09B  F095         	movff	___awdiv@quotient+1,?___awdiv+1
  5823  003DDE  0012               	return	
  5824  003DE0                     __end_of___awdiv:
  5825                           	opt stack 0
  5826                           tblptru	equ	0xFF8
  5827                           tblptrh	equ	0xFF7
  5828                           tblptrl	equ	0xFF6
  5829                           tablat	equ	0xFF5
  5830                           prodh	equ	0xFF4
  5831                           prodl	equ	0xFF3
  5832                           postinc0	equ	0xFEE
  5833                           wreg	equ	0xFE8
  5834                           postdec1	equ	0xFE5
  5835                           fsr1l	equ	0xFE1
  5836                           indf2	equ	0xFDF
  5837                           postinc2	equ	0xFDE
  5838                           postdec2	equ	0xFDD
  5839                           fsr2h	equ	0xFDA
  5840                           fsr2l	equ	0xFD9
  5841                           status	equ	0xFD8
  5842                           
  5843 ;; *************** function __tdiv_to_l_ *****************
  5844 ;; Defined at:
  5845 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  5846 ;; Parameters:    Size  Location     Type
  5847 ;;  f1              3   14[BANK0 ] float 
  5848 ;;  f2              3   17[BANK0 ] float 
  5849 ;; Auto vars:     Size  Location     Type
  5850 ;;  quot            4   23[BANK0 ] unsigned long 
  5851 ;;  exp1            1   28[BANK0 ] unsigned char 
  5852 ;;  cntr            1   27[BANK0 ] unsigned char 
  5853 ;; Return value:  Size  Location     Type
  5854 ;;                  4   14[BANK0 ] unsigned long 
  5855 ;; Registers used:
  5856 ;;		wreg, status,2, status,0
  5857 ;; Tracked objects:
  5858 ;;		On entry : 0/0
  5859 ;;		On exit  : 0/0
  5860 ;;		Unchanged: 0/0
  5861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5862 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5863 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5864 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5865 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5866 ;;Total ram usage:       15 bytes
  5867 ;; Hardware stack levels used:    1
  5868 ;; Hardware stack levels required when called:    6
  5869 ;; This function calls:
  5870 ;;		Nothing
  5871 ;; This function is called by:
  5872 ;;		_printf
  5873 ;; This function uses a non-reentrant model
  5874 ;;
  5875                           
  5876                           	psect	text11
  5877  0026BA                     __ptext11:
  5878                           	opt stack 0
  5879  0026BA                     __tdiv_to_l_:
  5880                           	opt stack 22
  5881                           
  5882                           ; BSR set to: 0
  5883                           ;incstack = 0
  5884  0026BA  C090  F094         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  5885  0026BE  0100               	movlb	0	; () banked
  5886  0026C0  6B95               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  5887  0026C2  6B96               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  5888  0026C4  0100               	movlb	0	; () banked
  5889  0026C6  358F               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
  5890  0026C8  0100               	movlb	0	; () banked
  5891  0026CA  3794               	rlcf	??__tdiv_to_l_& (0+255),f,b
  5892  0026CC  E301               	bnc	u4281
  5893  0026CE  8195               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  5894  0026D0                     u4281:
  5895  0026D0  0100               	movlb	0	; () banked
  5896  0026D2  5194               	movf	??__tdiv_to_l_& (0+255),w,b
  5897  0026D4  0100               	movlb	0	; () banked
  5898  0026D6  6F9C               	movwf	__tdiv_to_l_@exp1& (0+255),b
  5899  0026D8  0100               	movlb	0	; () banked
  5900  0026DA  519C               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  5901  0026DC  A4D8               	btfss	status,2,c
  5902  0026DE  D00A               	goto	l4586
  5903                           
  5904                           ; BSR set to: 0
  5905  0026E0  0E00               	movlw	0
  5906  0026E2  0100               	movlb	0	; () banked
  5907  0026E4  6F8E               	movwf	?__tdiv_to_l_& (0+255),b
  5908  0026E6  0E00               	movlw	0
  5909  0026E8  6F8F               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  5910  0026EA  0E00               	movlw	0
  5911  0026EC  6F90               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  5912  0026EE  0E00               	movlw	0
  5913  0026F0  6F91               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  5914                           
  5915                           ; BSR set to: 0
  5916  0026F2  0012               	return	
  5917  0026F4                     l4586:
  5918                           
  5919                           ; BSR set to: 0
  5920  0026F4  C093  F094         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  5921  0026F8  0100               	movlb	0	; () banked
  5922  0026FA  6B95               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  5923  0026FC  6B96               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  5924  0026FE  0100               	movlb	0	; () banked
  5925  002700  3592               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  5926  002702  0100               	movlb	0	; () banked
  5927  002704  3794               	rlcf	??__tdiv_to_l_& (0+255),f,b
  5928  002706  E301               	bnc	u4301
  5929  002708  8195               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  5930  00270A                     u4301:
  5931  00270A  0100               	movlb	0	; () banked
  5932  00270C  5194               	movf	??__tdiv_to_l_& (0+255),w,b
  5933  00270E  0100               	movlb	0	; () banked
  5934  002710  6F9B               	movwf	__tdiv_to_l_@cntr& (0+255),b
  5935  002712  0100               	movlb	0	; () banked
  5936  002714  519B               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  5937  002716  A4D8               	btfss	status,2,c
  5938  002718  D00A               	goto	l4592
  5939                           
  5940                           ; BSR set to: 0
  5941  00271A  0E00               	movlw	0
  5942  00271C  0100               	movlb	0	; () banked
  5943  00271E  6F8E               	movwf	?__tdiv_to_l_& (0+255),b
  5944  002720  0E00               	movlw	0
  5945  002722  6F8F               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  5946  002724  0E00               	movlw	0
  5947  002726  6F90               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  5948  002728  0E00               	movlw	0
  5949  00272A  6F91               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  5950                           
  5951                           ; BSR set to: 0
  5952  00272C  0012               	return	
  5953  00272E                     l4592:
  5954                           
  5955                           ; BSR set to: 0
  5956  00272E  0100               	movlb	0	; () banked
  5957  002730  8F8F               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
  5958                           
  5959                           ; BSR set to: 0
  5960  002732  0EFF               	movlw	255
  5961  002734  0100               	movlb	0	; () banked
  5962  002736  178E               	andwf	__tdiv_to_l_@f1& (0+255),f,b
  5963  002738  0EFF               	movlw	255
  5964  00273A  0100               	movlb	0	; () banked
  5965  00273C  178F               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  5966  00273E  0E00               	movlw	0
  5967  002740  0100               	movlb	0	; () banked
  5968  002742  1790               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  5969  002744  0100               	movlb	0	; () banked
  5970  002746  8F92               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
  5971                           
  5972                           ; BSR set to: 0
  5973  002748  0EFF               	movlw	255
  5974  00274A  0100               	movlb	0	; () banked
  5975  00274C  1791               	andwf	__tdiv_to_l_@f2& (0+255),f,b
  5976  00274E  0EFF               	movlw	255
  5977  002750  0100               	movlb	0	; () banked
  5978  002752  1792               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
  5979  002754  0E00               	movlw	0
  5980  002756  0100               	movlb	0	; () banked
  5981  002758  1793               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
  5982                           
  5983                           ; BSR set to: 0
  5984  00275A  0E00               	movlw	0
  5985  00275C  0100               	movlb	0	; () banked
  5986  00275E  6F97               	movwf	__tdiv_to_l_@quot& (0+255),b
  5987  002760  0E00               	movlw	0
  5988  002762  6F98               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  5989  002764  0E00               	movlw	0
  5990  002766  6F99               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  5991  002768  0E00               	movlw	0
  5992  00276A  6F9A               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  5993                           
  5994                           ; BSR set to: 0
  5995  00276C  0E7F               	movlw	127
  5996  00276E  0100               	movlb	0	; () banked
  5997  002770  5F9C               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  5998                           
  5999                           ; BSR set to: 0
  6000  002772  0100               	movlb	0	; () banked
  6001  002774  519B               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  6002  002776  0F98               	addlw	152
  6003  002778  0100               	movlb	0	; () banked
  6004  00277A  5F9C               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  6005                           
  6006                           ; BSR set to: 0
  6007  00277C  0E18               	movlw	24
  6008  00277E  0100               	movlb	0	; () banked
  6009  002780  6F9B               	movwf	__tdiv_to_l_@cntr& (0+255),b
  6010  002782                     l1023:
  6011                           
  6012                           ; BSR set to: 0
  6013  002782  0100               	movlb	0	; () banked
  6014  002784  90D8               	bcf	status,0,c
  6015  002786  3797               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  6016  002788  3798               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  6017  00278A  3799               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  6018  00278C  379A               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  6019                           
  6020                           ; BSR set to: 0
  6021  00278E  0100               	movlb	0	; () banked
  6022  002790  5191               	movf	__tdiv_to_l_@f2& (0+255),w,b
  6023  002792  0100               	movlb	0	; () banked
  6024  002794  5D8E               	subwf	__tdiv_to_l_@f1& (0+255),w,b
  6025  002796  0100               	movlb	0	; () banked
  6026  002798  5192               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  6027  00279A  0100               	movlb	0	; () banked
  6028  00279C  598F               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
  6029  00279E  0100               	movlb	0	; () banked
  6030  0027A0  5193               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  6031  0027A2  0100               	movlb	0	; () banked
  6032  0027A4  5990               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
  6033  0027A6  A0D8               	btfss	status,0,c
  6034  0027A8  D00E               	goto	l1024
  6035                           
  6036                           ; BSR set to: 0
  6037  0027AA  0100               	movlb	0	; () banked
  6038  0027AC  5191               	movf	__tdiv_to_l_@f2& (0+255),w,b
  6039  0027AE  0100               	movlb	0	; () banked
  6040  0027B0  5F8E               	subwf	__tdiv_to_l_@f1& (0+255),f,b
  6041  0027B2  0100               	movlb	0	; () banked
  6042  0027B4  5192               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  6043  0027B6  0100               	movlb	0	; () banked
  6044  0027B8  5B8F               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
  6045  0027BA  0100               	movlb	0	; () banked
  6046  0027BC  5193               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  6047  0027BE  0100               	movlb	0	; () banked
  6048  0027C0  5B90               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
  6049                           
  6050                           ; BSR set to: 0
  6051  0027C2  0100               	movlb	0	; () banked
  6052  0027C4  8197               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  6053  0027C6                     l1024:
  6054                           
  6055                           ; BSR set to: 0
  6056  0027C6  0100               	movlb	0	; () banked
  6057  0027C8  90D8               	bcf	status,0,c
  6058  0027CA  378E               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
  6059  0027CC  378F               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  6060  0027CE  3790               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  6061                           
  6062                           ; BSR set to: 0
  6063  0027D0  0100               	movlb	0	; () banked
  6064  0027D2  2F9B               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  6065  0027D4  D7D6               	goto	l1023
  6066                           
  6067                           ; BSR set to: 0
  6068                           
  6069                           ; BSR set to: 0
  6070  0027D6  0100               	movlb	0	; () banked
  6071  0027D8  AF9C               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  6072  0027DA  D01A               	goto	l4626
  6073                           
  6074                           ; BSR set to: 0
  6075  0027DC  0100               	movlb	0	; () banked
  6076  0027DE  519C               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  6077  0027E0  0A80               	xorlw	128
  6078  0027E2  0F97               	addlw	151
  6079  0027E4  B0D8               	btfsc	status,0,c
  6080  0027E6  D00A               	goto	l4622
  6081                           
  6082                           ; BSR set to: 0
  6083  0027E8  0E00               	movlw	0
  6084  0027EA  0100               	movlb	0	; () banked
  6085  0027EC  6F8E               	movwf	?__tdiv_to_l_& (0+255),b
  6086  0027EE  0E00               	movlw	0
  6087  0027F0  6F8F               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6088  0027F2  0E00               	movlw	0
  6089  0027F4  6F90               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6090  0027F6  0E00               	movlw	0
  6091  0027F8  6F91               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6092                           
  6093                           ; BSR set to: 0
  6094  0027FA  0012               	return	
  6095  0027FC                     l4622:
  6096                           
  6097                           ; BSR set to: 0
  6098  0027FC  0100               	movlb	0	; () banked
  6099  0027FE  90D8               	bcf	status,0,c
  6100  002800  339A               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  6101  002802  3399               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  6102  002804  3398               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  6103  002806  3397               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  6104                           
  6105                           ; BSR set to: 0
  6106  002808  0100               	movlb	0	; () banked
  6107  00280A  3F9C               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  6108  00280C  D7F7               	goto	l4622
  6109                           
  6110                           ; BSR set to: 0
  6111  00280E  D01B               	goto	l1030
  6112  002810                     l4626:
  6113                           
  6114                           ; BSR set to: 0
  6115  002810  0E17               	movlw	23
  6116  002812  0100               	movlb	0	; () banked
  6117  002814  659C               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  6118  002816  D012               	goto	l4634
  6119                           
  6120                           ; BSR set to: 0
  6121  002818  0E00               	movlw	0
  6122  00281A  0100               	movlb	0	; () banked
  6123  00281C  6F8E               	movwf	?__tdiv_to_l_& (0+255),b
  6124  00281E  0E00               	movlw	0
  6125  002820  6F8F               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6126  002822  0E00               	movlw	0
  6127  002824  6F90               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6128  002826  0E00               	movlw	0
  6129  002828  6F91               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6130                           
  6131                           ; BSR set to: 0
  6132  00282A  0012               	return	
  6133  00282C                     l4632:
  6134                           
  6135                           ; BSR set to: 0
  6136  00282C  0100               	movlb	0	; () banked
  6137  00282E  90D8               	bcf	status,0,c
  6138  002830  3797               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  6139  002832  3798               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  6140  002834  3799               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  6141  002836  379A               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  6142  002838  0100               	movlb	0	; () banked
  6143  00283A  079C               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  6144  00283C                     l4634:
  6145                           
  6146                           ; BSR set to: 0
  6147  00283C  0100               	movlb	0	; () banked
  6148  00283E  519C               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  6149  002840  0100               	movlb	0	; () banked
  6150  002842  A4D8               	btfss	status,2,c
  6151  002844  D7F3               	goto	l4632
  6152  002846                     l1030:
  6153                           
  6154                           ; BSR set to: 0
  6155  002846  C097  F08E         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  6156  00284A  C098  F08F         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  6157  00284E  C099  F090         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  6158  002852  C09A  F091         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  6159                           
  6160                           ; BSR set to: 0
  6161  002856  0012               	return		;funcret
  6162  002858                     __end_of__tdiv_to_l_:
  6163                           	opt stack 0
  6164                           tblptru	equ	0xFF8
  6165                           tblptrh	equ	0xFF7
  6166                           tblptrl	equ	0xFF6
  6167                           tablat	equ	0xFF5
  6168                           prodh	equ	0xFF4
  6169                           prodl	equ	0xFF3
  6170                           postinc0	equ	0xFEE
  6171                           wreg	equ	0xFE8
  6172                           postdec1	equ	0xFE5
  6173                           fsr1l	equ	0xFE1
  6174                           indf2	equ	0xFDF
  6175                           postinc2	equ	0xFDE
  6176                           postdec2	equ	0xFDD
  6177                           fsr2h	equ	0xFDA
  6178                           fsr2l	equ	0xFD9
  6179                           status	equ	0xFD8
  6180                           
  6181 ;; *************** function __div_to_l_ *****************
  6182 ;; Defined at:
  6183 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  6184 ;; Parameters:    Size  Location     Type
  6185 ;;  f1              3   14[BANK0 ] unsigned long 
  6186 ;;  f2              3   17[BANK0 ] unsigned long 
  6187 ;; Auto vars:     Size  Location     Type
  6188 ;;  quot            4   20[BANK0 ] unsigned long 
  6189 ;;  exp1            1   25[BANK0 ] unsigned char 
  6190 ;;  cntr            1   24[BANK0 ] unsigned char 
  6191 ;; Return value:  Size  Location     Type
  6192 ;;                  4   14[BANK0 ] unsigned long 
  6193 ;; Registers used:
  6194 ;;		wreg, status,2, status,0
  6195 ;; Tracked objects:
  6196 ;;		On entry : 0/0
  6197 ;;		On exit  : 0/0
  6198 ;;		Unchanged: 0/0
  6199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6200 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6201 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6203 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6204 ;;Total ram usage:       12 bytes
  6205 ;; Hardware stack levels used:    1
  6206 ;; Hardware stack levels required when called:    6
  6207 ;; This function calls:
  6208 ;;		Nothing
  6209 ;; This function is called by:
  6210 ;;		_printf
  6211 ;; This function uses a non-reentrant model
  6212 ;;
  6213                           
  6214                           	psect	text12
  6215  002858                     __ptext12:
  6216                           	opt stack 0
  6217  002858                     __div_to_l_:
  6218                           	opt stack 22
  6219                           
  6220                           ; BSR set to: 0
  6221                           ;incstack = 0
  6222  002858  0100               	movlb	0	; () banked
  6223  00285A  3590               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
  6224  00285C  3591               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
  6225  00285E  0100               	movlb	0	; () banked
  6226  002860  6F99               	movwf	__div_to_l_@exp1& (0+255),b
  6227  002862  0100               	movlb	0	; () banked
  6228  002864  5199               	movf	__div_to_l_@exp1& (0+255),w,b
  6229  002866  A4D8               	btfss	status,2,c
  6230  002868  D00A               	goto	l4642
  6231                           
  6232                           ; BSR set to: 0
  6233  00286A  0E00               	movlw	0
  6234  00286C  0100               	movlb	0	; () banked
  6235  00286E  6F8E               	movwf	?__div_to_l_& (0+255),b
  6236  002870  0E00               	movlw	0
  6237  002872  6F8F               	movwf	(?__div_to_l_+1)& (0+255),b
  6238  002874  0E00               	movlw	0
  6239  002876  6F90               	movwf	(?__div_to_l_+2)& (0+255),b
  6240  002878  0E00               	movlw	0
  6241  00287A  6F91               	movwf	(?__div_to_l_+3)& (0+255),b
  6242                           
  6243                           ; BSR set to: 0
  6244  00287C  0012               	return	
  6245  00287E                     l4642:
  6246                           
  6247                           ; BSR set to: 0
  6248  00287E  0100               	movlb	0	; () banked
  6249  002880  3593               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
  6250  002882  3594               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
  6251  002884  0100               	movlb	0	; () banked
  6252  002886  6F98               	movwf	__div_to_l_@cntr& (0+255),b
  6253  002888  0100               	movlb	0	; () banked
  6254  00288A  5198               	movf	__div_to_l_@cntr& (0+255),w,b
  6255  00288C  A4D8               	btfss	status,2,c
  6256  00288E  D00A               	goto	l4648
  6257                           
  6258                           ; BSR set to: 0
  6259  002890  0E00               	movlw	0
  6260  002892  0100               	movlb	0	; () banked
  6261  002894  6F8E               	movwf	?__div_to_l_& (0+255),b
  6262  002896  0E00               	movlw	0
  6263  002898  6F8F               	movwf	(?__div_to_l_+1)& (0+255),b
  6264  00289A  0E00               	movlw	0
  6265  00289C  6F90               	movwf	(?__div_to_l_+2)& (0+255),b
  6266  00289E  0E00               	movlw	0
  6267  0028A0  6F91               	movwf	(?__div_to_l_+3)& (0+255),b
  6268                           
  6269                           ; BSR set to: 0
  6270  0028A2  0012               	return	
  6271  0028A4                     l4648:
  6272                           
  6273                           ; BSR set to: 0
  6274  0028A4  0100               	movlb	0	; () banked
  6275  0028A6  8F90               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
  6276                           
  6277                           ; BSR set to: 0
  6278  0028A8  0EFF               	movlw	255
  6279  0028AA  0100               	movlb	0	; () banked
  6280  0028AC  178E               	andwf	__div_to_l_@f1& (0+255),f,b
  6281  0028AE  0EFF               	movlw	255
  6282  0028B0  178F               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
  6283  0028B2  0EFF               	movlw	255
  6284  0028B4  1790               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
  6285  0028B6  0E00               	movlw	0
  6286  0028B8  1791               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
  6287                           
  6288                           ; BSR set to: 0
  6289  0028BA  0100               	movlb	0	; () banked
  6290  0028BC  8F93               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
  6291  0028BE  0EFF               	movlw	255
  6292  0028C0  0100               	movlb	0	; () banked
  6293  0028C2  1791               	andwf	__div_to_l_@f2& (0+255),f,b
  6294  0028C4  0EFF               	movlw	255
  6295  0028C6  1792               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
  6296  0028C8  0EFF               	movlw	255
  6297  0028CA  1793               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
  6298  0028CC  0E00               	movlw	0
  6299  0028CE  1794               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
  6300                           
  6301                           ; BSR set to: 0
  6302  0028D0  0E00               	movlw	0
  6303  0028D2  0100               	movlb	0	; () banked
  6304  0028D4  6F94               	movwf	__div_to_l_@quot& (0+255),b
  6305  0028D6  0E00               	movlw	0
  6306  0028D8  6F95               	movwf	(__div_to_l_@quot+1)& (0+255),b
  6307  0028DA  0E00               	movlw	0
  6308  0028DC  6F96               	movwf	(__div_to_l_@quot+2)& (0+255),b
  6309  0028DE  0E00               	movlw	0
  6310  0028E0  6F97               	movwf	(__div_to_l_@quot+3)& (0+255),b
  6311                           
  6312                           ; BSR set to: 0
  6313  0028E2  0E7F               	movlw	127
  6314  0028E4  0100               	movlb	0	; () banked
  6315  0028E6  5F99               	subwf	__div_to_l_@exp1& (0+255),f,b
  6316                           
  6317                           ; BSR set to: 0
  6318  0028E8  0100               	movlb	0	; () banked
  6319  0028EA  5198               	movf	__div_to_l_@cntr& (0+255),w,b
  6320  0028EC  0FA0               	addlw	160
  6321  0028EE  0100               	movlb	0	; () banked
  6322  0028F0  5F99               	subwf	__div_to_l_@exp1& (0+255),f,b
  6323                           
  6324                           ; BSR set to: 0
  6325  0028F2  0E20               	movlw	32
  6326  0028F4  0100               	movlb	0	; () banked
  6327  0028F6  6F98               	movwf	__div_to_l_@cntr& (0+255),b
  6328  0028F8                     l4662:
  6329                           
  6330                           ; BSR set to: 0
  6331  0028F8  0100               	movlb	0	; () banked
  6332  0028FA  90D8               	bcf	status,0,c
  6333  0028FC  3794               	rlcf	__div_to_l_@quot& (0+255),f,b
  6334  0028FE  3795               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  6335  002900  3796               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  6336  002902  3797               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  6337                           
  6338                           ; BSR set to: 0
  6339  002904  0100               	movlb	0	; () banked
  6340  002906  5191               	movf	__div_to_l_@f2& (0+255),w,b
  6341  002908  0100               	movlb	0	; () banked
  6342  00290A  5D8E               	subwf	__div_to_l_@f1& (0+255),w,b
  6343  00290C  0100               	movlb	0	; () banked
  6344  00290E  5192               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  6345  002910  0100               	movlb	0	; () banked
  6346  002912  598F               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
  6347  002914  0100               	movlb	0	; () banked
  6348  002916  5193               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  6349  002918  0100               	movlb	0	; () banked
  6350  00291A  5990               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
  6351  00291C  0100               	movlb	0	; () banked
  6352  00291E  5194               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  6353  002920  0100               	movlb	0	; () banked
  6354  002922  5991               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
  6355  002924  A0D8               	btfss	status,0,c
  6356  002926  D012               	goto	l4670
  6357                           
  6358                           ; BSR set to: 0
  6359  002928  0100               	movlb	0	; () banked
  6360  00292A  5191               	movf	__div_to_l_@f2& (0+255),w,b
  6361  00292C  0100               	movlb	0	; () banked
  6362  00292E  5F8E               	subwf	__div_to_l_@f1& (0+255),f,b
  6363  002930  0100               	movlb	0	; () banked
  6364  002932  5192               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  6365  002934  0100               	movlb	0	; () banked
  6366  002936  5B8F               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
  6367  002938  0100               	movlb	0	; () banked
  6368  00293A  5193               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  6369  00293C  0100               	movlb	0	; () banked
  6370  00293E  5B90               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
  6371  002940  0100               	movlb	0	; () banked
  6372  002942  5194               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  6373  002944  0100               	movlb	0	; () banked
  6374  002946  5B91               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
  6375                           
  6376                           ; BSR set to: 0
  6377  002948  0100               	movlb	0	; () banked
  6378  00294A  8194               	bsf	__div_to_l_@quot& (0+255),0,b
  6379  00294C                     l4670:
  6380                           
  6381                           ; BSR set to: 0
  6382  00294C  0100               	movlb	0	; () banked
  6383  00294E  90D8               	bcf	status,0,c
  6384  002950  378E               	rlcf	__div_to_l_@f1& (0+255),f,b
  6385  002952  378F               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
  6386  002954  3790               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
  6387  002956  3791               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
  6388                           
  6389                           ; BSR set to: 0
  6390  002958  0100               	movlb	0	; () banked
  6391  00295A  2F98               	decfsz	__div_to_l_@cntr& (0+255),f,b
  6392  00295C  D7CD               	goto	l4662
  6393                           
  6394                           ; BSR set to: 0
  6395                           
  6396                           ; BSR set to: 0
  6397  00295E  0100               	movlb	0	; () banked
  6398  002960  AF99               	btfss	__div_to_l_@exp1& (0+255),7,b
  6399  002962  D01A               	goto	l4686
  6400                           
  6401                           ; BSR set to: 0
  6402  002964  0100               	movlb	0	; () banked
  6403  002966  5199               	movf	__div_to_l_@exp1& (0+255),w,b
  6404  002968  0A80               	xorlw	128
  6405  00296A  0F9F               	addlw	159
  6406  00296C  B0D8               	btfsc	status,0,c
  6407  00296E  D00A               	goto	l4682
  6408                           
  6409                           ; BSR set to: 0
  6410  002970  0E00               	movlw	0
  6411  002972  0100               	movlb	0	; () banked
  6412  002974  6F8E               	movwf	?__div_to_l_& (0+255),b
  6413  002976  0E00               	movlw	0
  6414  002978  6F8F               	movwf	(?__div_to_l_+1)& (0+255),b
  6415  00297A  0E00               	movlw	0
  6416  00297C  6F90               	movwf	(?__div_to_l_+2)& (0+255),b
  6417  00297E  0E00               	movlw	0
  6418  002980  6F91               	movwf	(?__div_to_l_+3)& (0+255),b
  6419                           
  6420                           ; BSR set to: 0
  6421  002982  0012               	return	
  6422  002984                     l4682:
  6423                           
  6424                           ; BSR set to: 0
  6425  002984  0100               	movlb	0	; () banked
  6426  002986  90D8               	bcf	status,0,c
  6427  002988  3397               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  6428  00298A  3396               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  6429  00298C  3395               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  6430  00298E  3394               	rrcf	__div_to_l_@quot& (0+255),f,b
  6431                           
  6432                           ; BSR set to: 0
  6433  002990  0100               	movlb	0	; () banked
  6434  002992  3F99               	incfsz	__div_to_l_@exp1& (0+255),f,b
  6435  002994  D7F7               	goto	l4682
  6436                           
  6437                           ; BSR set to: 0
  6438  002996  D01B               	goto	l926
  6439  002998                     l4686:
  6440                           
  6441                           ; BSR set to: 0
  6442  002998  0E1F               	movlw	31
  6443  00299A  0100               	movlb	0	; () banked
  6444  00299C  6599               	cpfsgt	__div_to_l_@exp1& (0+255),b
  6445  00299E  D012               	goto	l4694
  6446                           
  6447                           ; BSR set to: 0
  6448  0029A0  0E00               	movlw	0
  6449  0029A2  0100               	movlb	0	; () banked
  6450  0029A4  6F8E               	movwf	?__div_to_l_& (0+255),b
  6451  0029A6  0E00               	movlw	0
  6452  0029A8  6F8F               	movwf	(?__div_to_l_+1)& (0+255),b
  6453  0029AA  0E00               	movlw	0
  6454  0029AC  6F90               	movwf	(?__div_to_l_+2)& (0+255),b
  6455  0029AE  0E00               	movlw	0
  6456  0029B0  6F91               	movwf	(?__div_to_l_+3)& (0+255),b
  6457                           
  6458                           ; BSR set to: 0
  6459  0029B2  0012               	return	
  6460  0029B4                     l4692:
  6461                           
  6462                           ; BSR set to: 0
  6463  0029B4  0100               	movlb	0	; () banked
  6464  0029B6  90D8               	bcf	status,0,c
  6465  0029B8  3794               	rlcf	__div_to_l_@quot& (0+255),f,b
  6466  0029BA  3795               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  6467  0029BC  3796               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  6468  0029BE  3797               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  6469  0029C0  0100               	movlb	0	; () banked
  6470  0029C2  0799               	decf	__div_to_l_@exp1& (0+255),f,b
  6471  0029C4                     l4694:
  6472                           
  6473                           ; BSR set to: 0
  6474  0029C4  0100               	movlb	0	; () banked
  6475  0029C6  5199               	movf	__div_to_l_@exp1& (0+255),w,b
  6476  0029C8  0100               	movlb	0	; () banked
  6477  0029CA  A4D8               	btfss	status,2,c
  6478  0029CC  D7F3               	goto	l4692
  6479  0029CE                     l926:
  6480                           
  6481                           ; BSR set to: 0
  6482  0029CE  C094  F08E         	movff	__div_to_l_@quot,?__div_to_l_
  6483  0029D2  C095  F08F         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  6484  0029D6  C096  F090         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  6485  0029DA  C097  F091         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  6486                           
  6487                           ; BSR set to: 0
  6488  0029DE  0012               	return		;funcret
  6489  0029E0                     __end_of__div_to_l_:
  6490                           	opt stack 0
  6491                           tblptru	equ	0xFF8
  6492                           tblptrh	equ	0xFF7
  6493                           tblptrl	equ	0xFF6
  6494                           tablat	equ	0xFF5
  6495                           prodh	equ	0xFF4
  6496                           prodl	equ	0xFF3
  6497                           postinc0	equ	0xFEE
  6498                           wreg	equ	0xFE8
  6499                           postdec1	equ	0xFE5
  6500                           fsr1l	equ	0xFE1
  6501                           indf2	equ	0xFDF
  6502                           postinc2	equ	0xFDE
  6503                           postdec2	equ	0xFDD
  6504                           fsr2h	equ	0xFDA
  6505                           fsr2l	equ	0xFD9
  6506                           status	equ	0xFD8
  6507                           
  6508 ;; *************** function ___lltoft *****************
  6509 ;; Defined at:
  6510 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  6511 ;; Parameters:    Size  Location     Type
  6512 ;;  c               4   22[BANK0 ] unsigned long 
  6513 ;; Auto vars:     Size  Location     Type
  6514 ;;  exp             1   30[BANK0 ] unsigned char 
  6515 ;; Return value:  Size  Location     Type
  6516 ;;                  3   22[BANK0 ] float 
  6517 ;; Registers used:
  6518 ;;		wreg, status,2, status,0, cstack
  6519 ;; Tracked objects:
  6520 ;;		On entry : 0/0
  6521 ;;		On exit  : 0/0
  6522 ;;		Unchanged: 0/0
  6523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6524 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6525 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6526 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6527 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6528 ;;Total ram usage:        9 bytes
  6529 ;; Hardware stack levels used:    1
  6530 ;; Hardware stack levels required when called:    7
  6531 ;; This function calls:
  6532 ;;		___ftpack
  6533 ;; This function is called by:
  6534 ;;		_printf
  6535 ;; This function uses a non-reentrant model
  6536 ;;
  6537                           
  6538                           	psect	text13
  6539  004490                     __ptext13:
  6540                           	opt stack 0
  6541  004490                     ___lltoft:
  6542                           	opt stack 21
  6543                           
  6544                           ; BSR set to: 0
  6545                           ;incstack = 0
  6546  004490  0E8E               	movlw	142
  6547  004492  0100               	movlb	0	; () banked
  6548  004494  6F9E               	movwf	___lltoft@exp& (0+255),b
  6549  004496  D008               	goto	l4768
  6550  004498                     l4766:
  6551                           
  6552                           ; BSR set to: 0
  6553  004498  0100               	movlb	0	; () banked
  6554  00449A  90D8               	bcf	status,0,c
  6555  00449C  3399               	rrcf	(___lltoft@c+3)& (0+255),f,b
  6556  00449E  3398               	rrcf	(___lltoft@c+2)& (0+255),f,b
  6557  0044A0  3397               	rrcf	(___lltoft@c+1)& (0+255),f,b
  6558  0044A2  3396               	rrcf	___lltoft@c& (0+255),f,b
  6559  0044A4  0100               	movlb	0	; () banked
  6560  0044A6  2B9E               	incf	___lltoft@exp& (0+255),f,b
  6561  0044A8                     l4768:
  6562                           
  6563                           ; BSR set to: 0
  6564  0044A8  0E00               	movlw	0
  6565  0044AA  0100               	movlb	0	; () banked
  6566  0044AC  1596               	andwf	___lltoft@c& (0+255),w,b
  6567  0044AE  0100               	movlb	0	; () banked
  6568  0044B0  6F9A               	movwf	??___lltoft& (0+255),b
  6569  0044B2  0E00               	movlw	0
  6570  0044B4  0100               	movlb	0	; () banked
  6571  0044B6  1597               	andwf	(___lltoft@c+1)& (0+255),w,b
  6572  0044B8  0100               	movlb	0	; () banked
  6573  0044BA  6F9B               	movwf	(??___lltoft+1)& (0+255),b
  6574  0044BC  0E00               	movlw	0
  6575  0044BE  0100               	movlb	0	; () banked
  6576  0044C0  1598               	andwf	(___lltoft@c+2)& (0+255),w,b
  6577  0044C2  0100               	movlb	0	; () banked
  6578  0044C4  6F9C               	movwf	(??___lltoft+2)& (0+255),b
  6579  0044C6  0EFF               	movlw	255
  6580  0044C8  0100               	movlb	0	; () banked
  6581  0044CA  1599               	andwf	(___lltoft@c+3)& (0+255),w,b
  6582  0044CC  0100               	movlb	0	; () banked
  6583  0044CE  6F9D               	movwf	(??___lltoft+3)& (0+255),b
  6584  0044D0  0100               	movlb	0	; () banked
  6585  0044D2  519A               	movf	??___lltoft& (0+255),w,b
  6586  0044D4  0100               	movlb	0	; () banked
  6587  0044D6  119B               	iorwf	(??___lltoft+1)& (0+255),w,b
  6588  0044D8  0100               	movlb	0	; () banked
  6589  0044DA  119C               	iorwf	(??___lltoft+2)& (0+255),w,b
  6590  0044DC  0100               	movlb	0	; () banked
  6591  0044DE  119D               	iorwf	(??___lltoft+3)& (0+255),w,b
  6592  0044E0  A4D8               	btfss	status,2,c
  6593  0044E2  D7DA               	goto	l4766
  6594                           
  6595                           ; BSR set to: 0
  6596                           
  6597                           ; BSR set to: 0
  6598  0044E4  C096  F08E         	movff	___lltoft@c,___ftpack@arg
  6599  0044E8  C097  F08F         	movff	___lltoft@c+1,___ftpack@arg+1
  6600  0044EC  C098  F090         	movff	___lltoft@c+2,___ftpack@arg+2
  6601  0044F0  C09E  F091         	movff	___lltoft@exp,___ftpack@exp
  6602  0044F4  0E00               	movlw	0
  6603  0044F6  0100               	movlb	0	; () banked
  6604  0044F8  6F92               	movwf	___ftpack@sign& (0+255),b
  6605  0044FA  ECFF  F019         	call	___ftpack	;wreg free
  6606  0044FE  C08E  F096         	movff	?___ftpack,?___lltoft
  6607  004502  C08F  F097         	movff	?___ftpack+1,?___lltoft+1
  6608  004506  C090  F098         	movff	?___ftpack+2,?___lltoft+2
  6609  00450A  0012               	return	
  6610  00450C                     __end_of___lltoft:
  6611                           	opt stack 0
  6612                           tblptru	equ	0xFF8
  6613                           tblptrh	equ	0xFF7
  6614                           tblptrl	equ	0xFF6
  6615                           tablat	equ	0xFF5
  6616                           prodh	equ	0xFF4
  6617                           prodl	equ	0xFF3
  6618                           postinc0	equ	0xFEE
  6619                           wreg	equ	0xFE8
  6620                           postdec1	equ	0xFE5
  6621                           fsr1l	equ	0xFE1
  6622                           indf2	equ	0xFDF
  6623                           postinc2	equ	0xFDE
  6624                           postdec2	equ	0xFDD
  6625                           fsr2h	equ	0xFDA
  6626                           fsr2l	equ	0xFD9
  6627                           status	equ	0xFD8
  6628                           
  6629 ;; *************** function ___llmod *****************
  6630 ;; Defined at:
  6631 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  6632 ;; Parameters:    Size  Location     Type
  6633 ;;  dividend        4   27[BANK0 ] unsigned long 
  6634 ;;  divisor         4   31[BANK0 ] unsigned long 
  6635 ;; Auto vars:     Size  Location     Type
  6636 ;;  counter         1   35[BANK0 ] unsigned char 
  6637 ;; Return value:  Size  Location     Type
  6638 ;;                  4   27[BANK0 ] unsigned long 
  6639 ;; Registers used:
  6640 ;;		wreg, status,2, status,0
  6641 ;; Tracked objects:
  6642 ;;		On entry : 0/0
  6643 ;;		On exit  : 0/0
  6644 ;;		Unchanged: 0/0
  6645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6646 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6647 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6649 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6650 ;;Total ram usage:        9 bytes
  6651 ;; Hardware stack levels used:    1
  6652 ;; Hardware stack levels required when called:    6
  6653 ;; This function calls:
  6654 ;;		Nothing
  6655 ;; This function is called by:
  6656 ;;		_printf
  6657 ;; This function uses a non-reentrant model
  6658 ;;
  6659                           
  6660                           	psect	text14
  6661  0041D2                     __ptext14:
  6662                           	opt stack 0
  6663  0041D2                     ___llmod:
  6664                           	opt stack 22
  6665                           
  6666                           ;incstack = 0
  6667  0041D2  0100               	movlb	0	; () banked
  6668  0041D4  519F               	movf	___llmod@divisor& (0+255),w,b
  6669  0041D6  0100               	movlb	0	; () banked
  6670  0041D8  11A0               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  6671  0041DA  0100               	movlb	0	; () banked
  6672  0041DC  11A1               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  6673  0041DE  0100               	movlb	0	; () banked
  6674  0041E0  11A2               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  6675  0041E2  B4D8               	btfsc	status,2,c
  6676  0041E4  D03A               	goto	l1110
  6677                           
  6678                           ; BSR set to: 0
  6679  0041E6  0E01               	movlw	1
  6680  0041E8  0100               	movlb	0	; () banked
  6681  0041EA  6FA3               	movwf	___llmod@counter& (0+255),b
  6682  0041EC  D008               	goto	l4754
  6683  0041EE                     l4752:
  6684                           
  6685                           ; BSR set to: 0
  6686  0041EE  0100               	movlb	0	; () banked
  6687  0041F0  90D8               	bcf	status,0,c
  6688  0041F2  379F               	rlcf	___llmod@divisor& (0+255),f,b
  6689  0041F4  37A0               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  6690  0041F6  37A1               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  6691  0041F8  37A2               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  6692  0041FA  0100               	movlb	0	; () banked
  6693  0041FC  2BA3               	incf	___llmod@counter& (0+255),f,b
  6694  0041FE                     l4754:
  6695                           
  6696                           ; BSR set to: 0
  6697  0041FE  0100               	movlb	0	; () banked
  6698  004200  AFA2               	btfss	(___llmod@divisor+3)& (0+255),7,b
  6699  004202  D7F5               	goto	l4752
  6700  004204                     l4756:
  6701                           
  6702                           ; BSR set to: 0
  6703  004204  0100               	movlb	0	; () banked
  6704  004206  519F               	movf	___llmod@divisor& (0+255),w,b
  6705  004208  0100               	movlb	0	; () banked
  6706  00420A  5D9B               	subwf	___llmod@dividend& (0+255),w,b
  6707  00420C  0100               	movlb	0	; () banked
  6708  00420E  51A0               	movf	(___llmod@divisor+1)& (0+255),w,b
  6709  004210  0100               	movlb	0	; () banked
  6710  004212  599C               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  6711  004214  0100               	movlb	0	; () banked
  6712  004216  51A1               	movf	(___llmod@divisor+2)& (0+255),w,b
  6713  004218  0100               	movlb	0	; () banked
  6714  00421A  599D               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  6715  00421C  0100               	movlb	0	; () banked
  6716  00421E  51A2               	movf	(___llmod@divisor+3)& (0+255),w,b
  6717  004220  0100               	movlb	0	; () banked
  6718  004222  599E               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  6719  004224  A0D8               	btfss	status,0,c
  6720  004226  D010               	goto	l4760
  6721                           
  6722                           ; BSR set to: 0
  6723  004228  0100               	movlb	0	; () banked
  6724  00422A  519F               	movf	___llmod@divisor& (0+255),w,b
  6725  00422C  0100               	movlb	0	; () banked
  6726  00422E  5F9B               	subwf	___llmod@dividend& (0+255),f,b
  6727  004230  0100               	movlb	0	; () banked
  6728  004232  51A0               	movf	(___llmod@divisor+1)& (0+255),w,b
  6729  004234  0100               	movlb	0	; () banked
  6730  004236  5B9C               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  6731  004238  0100               	movlb	0	; () banked
  6732  00423A  51A1               	movf	(___llmod@divisor+2)& (0+255),w,b
  6733  00423C  0100               	movlb	0	; () banked
  6734  00423E  5B9D               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  6735  004240  0100               	movlb	0	; () banked
  6736  004242  51A2               	movf	(___llmod@divisor+3)& (0+255),w,b
  6737  004244  0100               	movlb	0	; () banked
  6738  004246  5B9E               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  6739  004248                     l4760:
  6740                           
  6741                           ; BSR set to: 0
  6742  004248  0100               	movlb	0	; () banked
  6743  00424A  90D8               	bcf	status,0,c
  6744  00424C  33A2               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  6745  00424E  33A1               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  6746  004250  33A0               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  6747  004252  339F               	rrcf	___llmod@divisor& (0+255),f,b
  6748                           
  6749                           ; BSR set to: 0
  6750  004254  0100               	movlb	0	; () banked
  6751  004256  2FA3               	decfsz	___llmod@counter& (0+255),f,b
  6752  004258  D7D5               	goto	l4756
  6753  00425A                     l1110:
  6754                           
  6755                           ; BSR set to: 0
  6756  00425A  C09B  F09B         	movff	___llmod@dividend,?___llmod
  6757  00425E  C09C  F09C         	movff	___llmod@dividend+1,?___llmod+1
  6758  004262  C09D  F09D         	movff	___llmod@dividend+2,?___llmod+2
  6759  004266  C09E  F09E         	movff	___llmod@dividend+3,?___llmod+3
  6760                           
  6761                           ; BSR set to: 0
  6762  00426A  0012               	return		;funcret
  6763  00426C                     __end_of___llmod:
  6764                           	opt stack 0
  6765                           tblptru	equ	0xFF8
  6766                           tblptrh	equ	0xFF7
  6767                           tblptrl	equ	0xFF6
  6768                           tablat	equ	0xFF5
  6769                           prodh	equ	0xFF4
  6770                           prodl	equ	0xFF3
  6771                           postinc0	equ	0xFEE
  6772                           wreg	equ	0xFE8
  6773                           postdec1	equ	0xFE5
  6774                           fsr1l	equ	0xFE1
  6775                           indf2	equ	0xFDF
  6776                           postinc2	equ	0xFDE
  6777                           postdec2	equ	0xFDD
  6778                           fsr2h	equ	0xFDA
  6779                           fsr2l	equ	0xFD9
  6780                           status	equ	0xFD8
  6781                           
  6782 ;; *************** function ___lldiv *****************
  6783 ;; Defined at:
  6784 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6785 ;; Parameters:    Size  Location     Type
  6786 ;;  dividend        4   14[BANK0 ] unsigned long 
  6787 ;;  divisor         4   18[BANK0 ] unsigned long 
  6788 ;; Auto vars:     Size  Location     Type
  6789 ;;  quotient        4   22[BANK0 ] unsigned long 
  6790 ;;  counter         1   26[BANK0 ] unsigned char 
  6791 ;; Return value:  Size  Location     Type
  6792 ;;                  4   14[BANK0 ] unsigned long 
  6793 ;; Registers used:
  6794 ;;		wreg, status,2, status,0
  6795 ;; Tracked objects:
  6796 ;;		On entry : 0/0
  6797 ;;		On exit  : 0/0
  6798 ;;		Unchanged: 0/0
  6799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6800 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6801 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6803 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6804 ;;Total ram usage:       13 bytes
  6805 ;; Hardware stack levels used:    1
  6806 ;; Hardware stack levels required when called:    6
  6807 ;; This function calls:
  6808 ;;		Nothing
  6809 ;; This function is called by:
  6810 ;;		_printf
  6811 ;;		_I2C_Master_Init
  6812 ;; This function uses a non-reentrant model
  6813 ;;
  6814                           
  6815                           	psect	text15
  6816  003DE0                     __ptext15:
  6817                           	opt stack 0
  6818  003DE0                     ___lldiv:
  6819                           	opt stack 22
  6820                           
  6821                           ; BSR set to: 0
  6822                           ;incstack = 0
  6823  003DE0  0E00               	movlw	0
  6824  003DE2  0100               	movlb	0	; () banked
  6825  003DE4  6F96               	movwf	___lldiv@quotient& (0+255),b
  6826  003DE6  0E00               	movlw	0
  6827  003DE8  6F97               	movwf	(___lldiv@quotient+1)& (0+255),b
  6828  003DEA  0E00               	movlw	0
  6829  003DEC  6F98               	movwf	(___lldiv@quotient+2)& (0+255),b
  6830  003DEE  0E00               	movlw	0
  6831  003DF0  6F99               	movwf	(___lldiv@quotient+3)& (0+255),b
  6832                           
  6833                           ; BSR set to: 0
  6834  003DF2  0100               	movlb	0	; () banked
  6835  003DF4  5192               	movf	___lldiv@divisor& (0+255),w,b
  6836  003DF6  0100               	movlb	0	; () banked
  6837  003DF8  1193               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6838  003DFA  0100               	movlb	0	; () banked
  6839  003DFC  1194               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6840  003DFE  0100               	movlb	0	; () banked
  6841  003E00  1195               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6842  003E02  B4D8               	btfsc	status,2,c
  6843  003E04  D042               	goto	l1100
  6844                           
  6845                           ; BSR set to: 0
  6846  003E06  0E01               	movlw	1
  6847  003E08  0100               	movlb	0	; () banked
  6848  003E0A  6F9A               	movwf	___lldiv@counter& (0+255),b
  6849  003E0C  D008               	goto	l4734
  6850  003E0E                     l4732:
  6851                           
  6852                           ; BSR set to: 0
  6853  003E0E  0100               	movlb	0	; () banked
  6854  003E10  90D8               	bcf	status,0,c
  6855  003E12  3792               	rlcf	___lldiv@divisor& (0+255),f,b
  6856  003E14  3793               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6857  003E16  3794               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6858  003E18  3795               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6859  003E1A  0100               	movlb	0	; () banked
  6860  003E1C  2B9A               	incf	___lldiv@counter& (0+255),f,b
  6861  003E1E                     l4734:
  6862                           
  6863                           ; BSR set to: 0
  6864  003E1E  0100               	movlb	0	; () banked
  6865  003E20  AF95               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6866  003E22  D7F5               	goto	l4732
  6867  003E24                     l4736:
  6868                           
  6869                           ; BSR set to: 0
  6870  003E24  0100               	movlb	0	; () banked
  6871  003E26  90D8               	bcf	status,0,c
  6872  003E28  3796               	rlcf	___lldiv@quotient& (0+255),f,b
  6873  003E2A  3797               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6874  003E2C  3798               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6875  003E2E  3799               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6876                           
  6877                           ; BSR set to: 0
  6878  003E30  0100               	movlb	0	; () banked
  6879  003E32  5192               	movf	___lldiv@divisor& (0+255),w,b
  6880  003E34  0100               	movlb	0	; () banked
  6881  003E36  5D8E               	subwf	___lldiv@dividend& (0+255),w,b
  6882  003E38  0100               	movlb	0	; () banked
  6883  003E3A  5193               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6884  003E3C  0100               	movlb	0	; () banked
  6885  003E3E  598F               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6886  003E40  0100               	movlb	0	; () banked
  6887  003E42  5194               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6888  003E44  0100               	movlb	0	; () banked
  6889  003E46  5990               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6890  003E48  0100               	movlb	0	; () banked
  6891  003E4A  5195               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6892  003E4C  0100               	movlb	0	; () banked
  6893  003E4E  5991               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6894  003E50  A0D8               	btfss	status,0,c
  6895  003E52  D012               	goto	l4744
  6896                           
  6897                           ; BSR set to: 0
  6898  003E54  0100               	movlb	0	; () banked
  6899  003E56  5192               	movf	___lldiv@divisor& (0+255),w,b
  6900  003E58  0100               	movlb	0	; () banked
  6901  003E5A  5F8E               	subwf	___lldiv@dividend& (0+255),f,b
  6902  003E5C  0100               	movlb	0	; () banked
  6903  003E5E  5193               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6904  003E60  0100               	movlb	0	; () banked
  6905  003E62  5B8F               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6906  003E64  0100               	movlb	0	; () banked
  6907  003E66  5194               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6908  003E68  0100               	movlb	0	; () banked
  6909  003E6A  5B90               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6910  003E6C  0100               	movlb	0	; () banked
  6911  003E6E  5195               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6912  003E70  0100               	movlb	0	; () banked
  6913  003E72  5B91               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6914                           
  6915                           ; BSR set to: 0
  6916  003E74  0100               	movlb	0	; () banked
  6917  003E76  8196               	bsf	___lldiv@quotient& (0+255),0,b
  6918  003E78                     l4744:
  6919                           
  6920                           ; BSR set to: 0
  6921  003E78  0100               	movlb	0	; () banked
  6922  003E7A  90D8               	bcf	status,0,c
  6923  003E7C  3395               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6924  003E7E  3394               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6925  003E80  3393               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6926  003E82  3392               	rrcf	___lldiv@divisor& (0+255),f,b
  6927                           
  6928                           ; BSR set to: 0
  6929  003E84  0100               	movlb	0	; () banked
  6930  003E86  2F9A               	decfsz	___lldiv@counter& (0+255),f,b
  6931  003E88  D7CD               	goto	l4736
  6932  003E8A                     l1100:
  6933                           
  6934                           ; BSR set to: 0
  6935  003E8A  C096  F08E         	movff	___lldiv@quotient,?___lldiv
  6936  003E8E  C097  F08F         	movff	___lldiv@quotient+1,?___lldiv+1
  6937  003E92  C098  F090         	movff	___lldiv@quotient+2,?___lldiv+2
  6938  003E96  C099  F091         	movff	___lldiv@quotient+3,?___lldiv+3
  6939                           
  6940                           ; BSR set to: 0
  6941  003E9A  0012               	return		;funcret
  6942  003E9C                     __end_of___lldiv:
  6943                           	opt stack 0
  6944                           tblptru	equ	0xFF8
  6945                           tblptrh	equ	0xFF7
  6946                           tblptrl	equ	0xFF6
  6947                           tablat	equ	0xFF5
  6948                           prodh	equ	0xFF4
  6949                           prodl	equ	0xFF3
  6950                           postinc0	equ	0xFEE
  6951                           wreg	equ	0xFE8
  6952                           postdec1	equ	0xFE5
  6953                           fsr1l	equ	0xFE1
  6954                           indf2	equ	0xFDF
  6955                           postinc2	equ	0xFDE
  6956                           postdec2	equ	0xFDD
  6957                           fsr2h	equ	0xFDA
  6958                           fsr2l	equ	0xFD9
  6959                           status	equ	0xFD8
  6960                           
  6961 ;; *************** function ___ftsub *****************
  6962 ;; Defined at:
  6963 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  6964 ;; Parameters:    Size  Location     Type
  6965 ;;  f1              3   84[BANK0 ] float 
  6966 ;;  f2              3   87[BANK0 ] float 
  6967 ;; Auto vars:     Size  Location     Type
  6968 ;;		None
  6969 ;; Return value:  Size  Location     Type
  6970 ;;                  3   84[BANK0 ] float 
  6971 ;; Registers used:
  6972 ;;		wreg, status,2, status,0, cstack
  6973 ;; Tracked objects:
  6974 ;;		On entry : 0/0
  6975 ;;		On exit  : 0/0
  6976 ;;		Unchanged: 0/0
  6977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6978 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6981 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6982 ;;Total ram usage:        6 bytes
  6983 ;; Hardware stack levels used:    1
  6984 ;; Hardware stack levels required when called:    8
  6985 ;; This function calls:
  6986 ;;		___ftadd
  6987 ;; This function is called by:
  6988 ;;		_printf
  6989 ;; This function uses a non-reentrant model
  6990 ;;
  6991                           
  6992                           	psect	text16
  6993  00484E                     __ptext16:
  6994                           	opt stack 0
  6995  00484E                     ___ftsub:
  6996                           	opt stack 20
  6997                           
  6998                           ; BSR set to: 0
  6999                           ;incstack = 0
  7000  00484E  0100               	movlb	0	; () banked
  7001  004850  51D7               	movf	___ftsub@f2& (0+255),w,b
  7002  004852  0100               	movlb	0	; () banked
  7003  004854  11D8               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  7004  004856  0100               	movlb	0	; () banked
  7005  004858  11D9               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  7006  00485A  B4D8               	btfsc	status,2,c
  7007  00485C  D009               	goto	l4700
  7008                           
  7009                           ; BSR set to: 0
  7010  00485E  0E00               	movlw	0
  7011  004860  0100               	movlb	0	; () banked
  7012  004862  1BD7               	xorwf	___ftsub@f2& (0+255),f,b
  7013  004864  0E00               	movlw	0
  7014  004866  0100               	movlb	0	; () banked
  7015  004868  1BD8               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  7016  00486A  0E80               	movlw	128
  7017  00486C  0100               	movlb	0	; () banked
  7018  00486E  1BD9               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  7019  004870                     l4700:
  7020                           
  7021                           ; BSR set to: 0
  7022  004870  C0D4  F0C8         	movff	___ftsub@f1,___ftadd@f1
  7023  004874  C0D5  F0C9         	movff	___ftsub@f1+1,___ftadd@f1+1
  7024  004878  C0D6  F0CA         	movff	___ftsub@f1+2,___ftadd@f1+2
  7025  00487C  C0D7  F0CB         	movff	___ftsub@f2,___ftadd@f2
  7026  004880  C0D8  F0CC         	movff	___ftsub@f2+1,___ftadd@f2+1
  7027  004884  C0D9  F0CD         	movff	___ftsub@f2+2,___ftadd@f2+2
  7028  004888  EC30  F010         	call	___ftadd	;wreg free
  7029  00488C  C0C8  F0D4         	movff	?___ftadd,?___ftsub
  7030  004890  C0C9  F0D5         	movff	?___ftadd+1,?___ftsub+1
  7031  004894  C0CA  F0D6         	movff	?___ftadd+2,?___ftsub+2
  7032  004898  0012               	return	
  7033  00489A                     __end_of___ftsub:
  7034                           	opt stack 0
  7035                           tblptru	equ	0xFF8
  7036                           tblptrh	equ	0xFF7
  7037                           tblptrl	equ	0xFF6
  7038                           tablat	equ	0xFF5
  7039                           prodh	equ	0xFF4
  7040                           prodl	equ	0xFF3
  7041                           postinc0	equ	0xFEE
  7042                           wreg	equ	0xFE8
  7043                           postdec1	equ	0xFE5
  7044                           fsr1l	equ	0xFE1
  7045                           indf2	equ	0xFDF
  7046                           postinc2	equ	0xFDE
  7047                           postdec2	equ	0xFDD
  7048                           fsr2h	equ	0xFDA
  7049                           fsr2l	equ	0xFD9
  7050                           status	equ	0xFD8
  7051                           
  7052 ;; *************** function ___ftneg *****************
  7053 ;; Defined at:
  7054 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  7055 ;; Parameters:    Size  Location     Type
  7056 ;;  f1              3   14[BANK0 ] float 
  7057 ;; Auto vars:     Size  Location     Type
  7058 ;;		None
  7059 ;; Return value:  Size  Location     Type
  7060 ;;                  3   14[BANK0 ] float 
  7061 ;; Registers used:
  7062 ;;		wreg, status,2, status,0
  7063 ;; Tracked objects:
  7064 ;;		On entry : 0/0
  7065 ;;		On exit  : 0/0
  7066 ;;		Unchanged: 0/0
  7067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7068 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7071 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7072 ;;Total ram usage:        3 bytes
  7073 ;; Hardware stack levels used:    1
  7074 ;; Hardware stack levels required when called:    6
  7075 ;; This function calls:
  7076 ;;		Nothing
  7077 ;; This function is called by:
  7078 ;;		_printf
  7079 ;; This function uses a non-reentrant model
  7080 ;;
  7081                           
  7082                           	psect	text17
  7083  004B20                     __ptext17:
  7084                           	opt stack 0
  7085  004B20                     ___ftneg:
  7086                           	opt stack 22
  7087                           
  7088                           ;incstack = 0
  7089  004B20  0100               	movlb	0	; () banked
  7090  004B22  518E               	movf	___ftneg@f1& (0+255),w,b
  7091  004B24  0100               	movlb	0	; () banked
  7092  004B26  118F               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  7093  004B28  0100               	movlb	0	; () banked
  7094  004B2A  1190               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  7095  004B2C  B4D8               	btfsc	status,2,c
  7096  004B2E  D009               	goto	l1055
  7097                           
  7098                           ; BSR set to: 0
  7099  004B30  0E00               	movlw	0
  7100  004B32  0100               	movlb	0	; () banked
  7101  004B34  1B8E               	xorwf	___ftneg@f1& (0+255),f,b
  7102  004B36  0E00               	movlw	0
  7103  004B38  0100               	movlb	0	; () banked
  7104  004B3A  1B8F               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  7105  004B3C  0E80               	movlw	128
  7106  004B3E  0100               	movlb	0	; () banked
  7107  004B40  1B90               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  7108  004B42                     l1055:
  7109                           
  7110                           ; BSR set to: 0
  7111  004B42  C08E  F08E         	movff	___ftneg@f1,?___ftneg
  7112  004B46  C08F  F08F         	movff	___ftneg@f1+1,?___ftneg+1
  7113  004B4A  C090  F090         	movff	___ftneg@f1+2,?___ftneg+2
  7114                           
  7115                           ; BSR set to: 0
  7116  004B4E  0012               	return		;funcret
  7117  004B50                     __end_of___ftneg:
  7118                           	opt stack 0
  7119                           tblptru	equ	0xFF8
  7120                           tblptrh	equ	0xFF7
  7121                           tblptrl	equ	0xFF6
  7122                           tablat	equ	0xFF5
  7123                           prodh	equ	0xFF4
  7124                           prodl	equ	0xFF3
  7125                           postinc0	equ	0xFEE
  7126                           wreg	equ	0xFE8
  7127                           postdec1	equ	0xFE5
  7128                           fsr1l	equ	0xFE1
  7129                           indf2	equ	0xFDF
  7130                           postinc2	equ	0xFDE
  7131                           postdec2	equ	0xFDD
  7132                           fsr2h	equ	0xFDA
  7133                           fsr2l	equ	0xFD9
  7134                           status	equ	0xFD8
  7135                           
  7136 ;; *************** function ___ftge *****************
  7137 ;; Defined at:
  7138 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  7139 ;; Parameters:    Size  Location     Type
  7140 ;;  ff1             3   14[BANK0 ] float 
  7141 ;;  ff2             3   17[BANK0 ] float 
  7142 ;; Auto vars:     Size  Location     Type
  7143 ;;		None
  7144 ;; Return value:  Size  Location     Type
  7145 ;;		None               void
  7146 ;; Registers used:
  7147 ;;		wreg, status,2, status,0
  7148 ;; Tracked objects:
  7149 ;;		On entry : 0/0
  7150 ;;		On exit  : 0/0
  7151 ;;		Unchanged: 0/0
  7152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7153 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7155 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7156 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7157 ;;Total ram usage:        9 bytes
  7158 ;; Hardware stack levels used:    1
  7159 ;; Hardware stack levels required when called:    6
  7160 ;; This function calls:
  7161 ;;		Nothing
  7162 ;; This function is called by:
  7163 ;;		_sortBattery
  7164 ;;		_printf
  7165 ;; This function uses a non-reentrant model
  7166 ;;
  7167                           
  7168                           	psect	text18
  7169  003B92                     __ptext18:
  7170                           	opt stack 0
  7171  003B92                     ___ftge:
  7172                           	opt stack 22
  7173                           
  7174                           ; BSR set to: 0
  7175                           ;incstack = 0
  7176  003B92  0100               	movlb	0	; () banked
  7177  003B94  AF90               	btfss	(___ftge@ff1+2)& (0+255),7,b
  7178  003B96  D01D               	goto	l4708
  7179                           
  7180                           ; BSR set to: 0
  7181  003B98  C08E  F094         	movff	___ftge@ff1,??___ftge
  7182  003B9C  C08F  F095         	movff	___ftge@ff1+1,??___ftge+1
  7183  003BA0  C090  F096         	movff	___ftge@ff1+2,??___ftge+2
  7184  003BA4  0100               	movlb	0	; () banked
  7185  003BA6  1F94               	comf	??___ftge& (0+255),f,b
  7186  003BA8  1F95               	comf	(??___ftge+1)& (0+255),f,b
  7187  003BAA  1F96               	comf	(??___ftge+2)& (0+255),f,b
  7188  003BAC  2B94               	incf	??___ftge& (0+255),f,b
  7189  003BAE  0E00               	movlw	0
  7190  003BB0  2395               	addwfc	(??___ftge+1)& (0+255),f,b
  7191  003BB2  2396               	addwfc	(??___ftge+2)& (0+255),f,b
  7192  003BB4  0E00               	movlw	0
  7193  003BB6  0100               	movlb	0	; () banked
  7194  003BB8  2594               	addwf	??___ftge& (0+255),w,b
  7195  003BBA  0100               	movlb	0	; () banked
  7196  003BBC  6F8E               	movwf	___ftge@ff1& (0+255),b
  7197  003BBE  0E00               	movlw	0
  7198  003BC0  0100               	movlb	0	; () banked
  7199  003BC2  2195               	addwfc	(??___ftge+1)& (0+255),w,b
  7200  003BC4  0100               	movlb	0	; () banked
  7201  003BC6  6F8F               	movwf	(___ftge@ff1+1)& (0+255),b
  7202  003BC8  0E80               	movlw	128
  7203  003BCA  0100               	movlb	0	; () banked
  7204  003BCC  2196               	addwfc	(??___ftge+2)& (0+255),w,b
  7205  003BCE  0100               	movlb	0	; () banked
  7206  003BD0  6F90               	movwf	(___ftge@ff1+2)& (0+255),b
  7207  003BD2                     l4708:
  7208                           
  7209                           ; BSR set to: 0
  7210  003BD2  0100               	movlb	0	; () banked
  7211  003BD4  AF93               	btfss	(___ftge@ff2+2)& (0+255),7,b
  7212  003BD6  D01D               	goto	l4712
  7213                           
  7214                           ; BSR set to: 0
  7215  003BD8  C091  F094         	movff	___ftge@ff2,??___ftge
  7216  003BDC  C092  F095         	movff	___ftge@ff2+1,??___ftge+1
  7217  003BE0  C093  F096         	movff	___ftge@ff2+2,??___ftge+2
  7218  003BE4  0100               	movlb	0	; () banked
  7219  003BE6  1F94               	comf	??___ftge& (0+255),f,b
  7220  003BE8  1F95               	comf	(??___ftge+1)& (0+255),f,b
  7221  003BEA  1F96               	comf	(??___ftge+2)& (0+255),f,b
  7222  003BEC  2B94               	incf	??___ftge& (0+255),f,b
  7223  003BEE  0E00               	movlw	0
  7224  003BF0  2395               	addwfc	(??___ftge+1)& (0+255),f,b
  7225  003BF2  2396               	addwfc	(??___ftge+2)& (0+255),f,b
  7226  003BF4  0E00               	movlw	0
  7227  003BF6  0100               	movlb	0	; () banked
  7228  003BF8  2594               	addwf	??___ftge& (0+255),w,b
  7229  003BFA  0100               	movlb	0	; () banked
  7230  003BFC  6F91               	movwf	___ftge@ff2& (0+255),b
  7231  003BFE  0E00               	movlw	0
  7232  003C00  0100               	movlb	0	; () banked
  7233  003C02  2195               	addwfc	(??___ftge+1)& (0+255),w,b
  7234  003C04  0100               	movlb	0	; () banked
  7235  003C06  6F92               	movwf	(___ftge@ff2+1)& (0+255),b
  7236  003C08  0E80               	movlw	128
  7237  003C0A  0100               	movlb	0	; () banked
  7238  003C0C  2196               	addwfc	(??___ftge+2)& (0+255),w,b
  7239  003C0E  0100               	movlb	0	; () banked
  7240  003C10  6F93               	movwf	(___ftge@ff2+2)& (0+255),b
  7241  003C12                     l4712:
  7242                           
  7243                           ; BSR set to: 0
  7244  003C12  0E00               	movlw	0
  7245  003C14  0100               	movlb	0	; () banked
  7246  003C16  1B8E               	xorwf	___ftge@ff1& (0+255),f,b
  7247  003C18  0E00               	movlw	0
  7248  003C1A  0100               	movlb	0	; () banked
  7249  003C1C  1B8F               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  7250  003C1E  0E80               	movlw	128
  7251  003C20  0100               	movlb	0	; () banked
  7252  003C22  1B90               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  7253                           
  7254                           ; BSR set to: 0
  7255  003C24  0E00               	movlw	0
  7256  003C26  0100               	movlb	0	; () banked
  7257  003C28  1B91               	xorwf	___ftge@ff2& (0+255),f,b
  7258  003C2A  0E00               	movlw	0
  7259  003C2C  0100               	movlb	0	; () banked
  7260  003C2E  1B92               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  7261  003C30  0E80               	movlw	128
  7262  003C32  0100               	movlb	0	; () banked
  7263  003C34  1B93               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  7264  003C36  0100               	movlb	0	; () banked
  7265  003C38  5191               	movf	___ftge@ff2& (0+255),w,b
  7266  003C3A  0100               	movlb	0	; () banked
  7267  003C3C  5D8E               	subwf	___ftge@ff1& (0+255),w,b
  7268  003C3E  0100               	movlb	0	; () banked
  7269  003C40  5192               	movf	(___ftge@ff2+1)& (0+255),w,b
  7270  003C42  0100               	movlb	0	; () banked
  7271  003C44  598F               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  7272  003C46  0100               	movlb	0	; () banked
  7273  003C48  5193               	movf	(___ftge@ff2+2)& (0+255),w,b
  7274  003C4A  0100               	movlb	0	; () banked
  7275  003C4C  5990               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  7276  003C4E  B0D8               	btfsc	status,0,c
  7277  003C50  D002               	goto	l4718
  7278                           
  7279                           ; BSR set to: 0
  7280  003C52  90D8               	bcf	status,0,c
  7281  003C54  0012               	return	
  7282  003C56                     l4718:
  7283                           
  7284                           ; BSR set to: 0
  7285  003C56  80D8               	bsf	status,0,c
  7286                           
  7287                           ; BSR set to: 0
  7288  003C58  0012               	return	
  7289  003C5A                     __end_of___ftge:
  7290                           	opt stack 0
  7291                           tblptru	equ	0xFF8
  7292                           tblptrh	equ	0xFF7
  7293                           tblptrl	equ	0xFF6
  7294                           tablat	equ	0xFF5
  7295                           prodh	equ	0xFF4
  7296                           prodl	equ	0xFF3
  7297                           postinc0	equ	0xFEE
  7298                           wreg	equ	0xFE8
  7299                           postdec1	equ	0xFE5
  7300                           fsr1l	equ	0xFE1
  7301                           indf2	equ	0xFDF
  7302                           postinc2	equ	0xFDE
  7303                           postdec2	equ	0xFDD
  7304                           fsr2h	equ	0xFDA
  7305                           fsr2l	equ	0xFD9
  7306                           status	equ	0xFD8
  7307                           
  7308 ;; *************** function _lcdClear *****************
  7309 ;; Defined at:
  7310 ;;		line 74 in file "lcd.c"
  7311 ;; Parameters:    Size  Location     Type
  7312 ;;		None
  7313 ;; Auto vars:     Size  Location     Type
  7314 ;;		None
  7315 ;; Return value:  Size  Location     Type
  7316 ;;                  1    wreg      void 
  7317 ;; Registers used:
  7318 ;;		wreg, status,2, status,0, cstack
  7319 ;; Tracked objects:
  7320 ;;		On entry : 0/0
  7321 ;;		On exit  : 0/0
  7322 ;;		Unchanged: 0/0
  7323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7327 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7328 ;;Total ram usage:        0 bytes
  7329 ;; Hardware stack levels used:    1
  7330 ;; Hardware stack levels required when called:    8
  7331 ;; This function calls:
  7332 ;;		_lcdInst
  7333 ;; This function is called by:
  7334 ;;		_sortBattery
  7335 ;;		_pause
  7336 ;;		_dateTime
  7337 ;;		_mainMenu
  7338 ;;		_runSelect
  7339 ;;		_runMenu
  7340 ;;		_runTime
  7341 ;;		_runStats
  7342 ;; This function uses a non-reentrant model
  7343 ;;
  7344                           
  7345                           	psect	text19
  7346  004C62                     __ptext19:
  7347                           	opt stack 0
  7348  004C62                     _lcdClear:
  7349                           	opt stack 21
  7350                           
  7351                           ;lcd.c: 75: lcdInst(0b00000001);
  7352                           
  7353                           ; BSR set to: 0
  7354                           ;incstack = 0
  7355  004C62  0E01               	movlw	1
  7356  004C64  ECBD  F025         	call	_lcdInst
  7357  004C68  0012               	return		;funcret
  7358  004C6A                     __end_of_lcdClear:
  7359                           	opt stack 0
  7360                           tblptru	equ	0xFF8
  7361                           tblptrh	equ	0xFF7
  7362                           tblptrl	equ	0xFF6
  7363                           tablat	equ	0xFF5
  7364                           prodh	equ	0xFF4
  7365                           prodl	equ	0xFF3
  7366                           postinc0	equ	0xFEE
  7367                           wreg	equ	0xFE8
  7368                           postdec1	equ	0xFE5
  7369                           fsr1l	equ	0xFE1
  7370                           indf2	equ	0xFDF
  7371                           postinc2	equ	0xFDE
  7372                           postdec2	equ	0xFDD
  7373                           fsr2h	equ	0xFDA
  7374                           fsr2l	equ	0xFD9
  7375                           status	equ	0xFD8
  7376                           
  7377 ;; *************** function _digitalWrite *****************
  7378 ;; Defined at:
  7379 ;;		line 53 in file "iopin.c"
  7380 ;; Parameters:    Size  Location     Type
  7381 ;;  pin             2   14[BANK0 ] PTR int 
  7382 ;;		 -> AA_float(4), redirectingServo(4), padServo(4), conveyorServo(4), 
  7383 ;;		 -> cylinderMotor(4), 
  7384 ;;  val             2   16[BANK0 ] int 
  7385 ;; Auto vars:     Size  Location     Type
  7386 ;;  p               2   21[BANK0 ] int 
  7387 ;; Return value:  Size  Location     Type
  7388 ;;                  1    wreg      void 
  7389 ;; Registers used:
  7390 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7391 ;; Tracked objects:
  7392 ;;		On entry : 0/0
  7393 ;;		On exit  : 0/0
  7394 ;;		Unchanged: 0/0
  7395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7396 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7397 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7398 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7399 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7400 ;;Total ram usage:        9 bytes
  7401 ;; Hardware stack levels used:    1
  7402 ;; Hardware stack levels required when called:    6
  7403 ;; This function calls:
  7404 ;;		Nothing
  7405 ;; This function is called by:
  7406 ;;		_main
  7407 ;;		_sortBattery
  7408 ;; This function uses a non-reentrant model
  7409 ;;
  7410                           
  7411                           	psect	text20
  7412  003610                     __ptext20:
  7413                           	opt stack 0
  7414  003610                     _digitalWrite:
  7415                           	opt stack 23
  7416                           
  7417                           ;iopin.c: 54: if(pin){
  7418                           
  7419                           ;incstack = 0
  7420  003610  0100               	movlb	0	; () banked
  7421  003612  518E               	movf	digitalWrite@pin& (0+255),w,b
  7422  003614  0100               	movlb	0	; () banked
  7423  003616  118F               	iorwf	(digitalWrite@pin+1)& (0+255),w,b
  7424  003618  B4D8               	btfsc	status,2,c
  7425  00361A  0012               	return	
  7426                           
  7427                           ; BSR set to: 0
  7428                           ;iopin.c: 55: int p = 1 << pin[1];
  7429  00361C  0100               	movlb	0	; () banked
  7430  00361E  EE20 F002          	lfsr	2,2
  7431  003622  518E               	movf	digitalWrite@pin& (0+255),w,b
  7432  003624  26D9               	addwf	fsr2l,f,c
  7433  003626  518F               	movf	(digitalWrite@pin+1)& (0+255),w,b
  7434  003628  22DA               	addwfc	fsr2h,f,c
  7435  00362A  50DF               	movf	indf2,w,c
  7436  00362C  0100               	movlb	0	; () banked
  7437  00362E  6F92               	movwf	??_digitalWrite& (0+255),b
  7438  003630  0E01               	movlw	1
  7439  003632  0100               	movlb	0	; () banked
  7440  003634  6F93               	movwf	(??_digitalWrite+1)& (0+255),b
  7441  003636  0E00               	movlw	0
  7442  003638  0100               	movlb	0	; () banked
  7443  00363A  6F94               	movwf	(??_digitalWrite+2)& (0+255),b
  7444  00363C  0100               	movlb	0	; () banked
  7445  00363E  2B92               	incf	??_digitalWrite& (0+255),f,b
  7446  003640  D004               	goto	u5124
  7447  003642                     u5125:
  7448  003642  90D8               	bcf	status,0,c
  7449  003644  0100               	movlb	0	; () banked
  7450  003646  3793               	rlcf	(??_digitalWrite+1)& (0+255),f,b
  7451  003648  3794               	rlcf	(??_digitalWrite+2)& (0+255),f,b
  7452  00364A                     u5124:
  7453  00364A  0100               	movlb	0	; () banked
  7454  00364C  2F92               	decfsz	??_digitalWrite& (0+255),f,b
  7455  00364E  D7F9               	goto	u5125
  7456  003650  C093  F095         	movff	??_digitalWrite+1,digitalWrite@p
  7457  003654  C094  F096         	movff	??_digitalWrite+2,digitalWrite@p+1
  7458                           
  7459                           ;iopin.c: 56: if(val == 0){
  7460  003658  0100               	movlb	0	; () banked
  7461  00365A  5190               	movf	digitalWrite@val& (0+255),w,b
  7462  00365C  0100               	movlb	0	; () banked
  7463  00365E  1191               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  7464  003660  A4D8               	btfss	status,2,c
  7465  003662  D03C               	goto	l5132
  7466                           
  7467                           ; BSR set to: 0
  7468                           ;iopin.c: 57: p ^= 0xff;
  7469  003664  0EFF               	movlw	255
  7470  003666  0100               	movlb	0	; () banked
  7471  003668  1B95               	xorwf	digitalWrite@p& (0+255),f,b
  7472                           
  7473                           ; BSR set to: 0
  7474                           ;iopin.c: 58: }
  7475                           ;iopin.c: 60: switch(pin[0]){
  7476  00366A  D038               	goto	l5132
  7477  00366C                     l5108:
  7478                           
  7479                           ; BSR set to: 0
  7480  00366C  0100               	movlb	0	; () banked
  7481  00366E  0590               	decf	digitalWrite@val& (0+255),w,b
  7482  003670  0100               	movlb	0	; () banked
  7483  003672  1191               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  7484  003674  A4D8               	btfss	status,2,c
  7485  003676  D004               	goto	l5112
  7486                           
  7487                           ; BSR set to: 0
  7488  003678  0100               	movlb	0	; () banked
  7489  00367A  5195               	movf	digitalWrite@p& (0+255),w,b
  7490  00367C  1289               	iorwf	3977,f,c	;volatile
  7491  00367E  0012               	return	
  7492  003680                     l5112:
  7493                           
  7494                           ; BSR set to: 0
  7495                           ;iopin.c: 62: else LATA &= p;
  7496  003680  0100               	movlb	0	; () banked
  7497  003682  5195               	movf	digitalWrite@p& (0+255),w,b
  7498  003684  1689               	andwf	3977,f,c	;volatile
  7499                           
  7500                           ; BSR set to: 0
  7501                           ;iopin.c: 63: break;
  7502  003686  0012               	return	
  7503  003688                     l5114:
  7504                           
  7505                           ; BSR set to: 0
  7506  003688  0100               	movlb	0	; () banked
  7507  00368A  0590               	decf	digitalWrite@val& (0+255),w,b
  7508  00368C  0100               	movlb	0	; () banked
  7509  00368E  1191               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  7510  003690  A4D8               	btfss	status,2,c
  7511  003692  D004               	goto	l5118
  7512                           
  7513                           ; BSR set to: 0
  7514  003694  0100               	movlb	0	; () banked
  7515  003696  5195               	movf	digitalWrite@p& (0+255),w,b
  7516  003698  128A               	iorwf	3978,f,c	;volatile
  7517  00369A  0012               	return	
  7518  00369C                     l5118:
  7519                           
  7520                           ; BSR set to: 0
  7521                           ;iopin.c: 65: else LATB &= p;
  7522  00369C  0100               	movlb	0	; () banked
  7523  00369E  5195               	movf	digitalWrite@p& (0+255),w,b
  7524  0036A0  168A               	andwf	3978,f,c	;volatile
  7525                           
  7526                           ; BSR set to: 0
  7527                           ;iopin.c: 66: break;
  7528  0036A2  0012               	return	
  7529  0036A4                     l5120:
  7530                           
  7531                           ; BSR set to: 0
  7532  0036A4  0100               	movlb	0	; () banked
  7533  0036A6  0590               	decf	digitalWrite@val& (0+255),w,b
  7534  0036A8  0100               	movlb	0	; () banked
  7535  0036AA  1191               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  7536  0036AC  A4D8               	btfss	status,2,c
  7537  0036AE  D004               	goto	l5124
  7538                           
  7539                           ; BSR set to: 0
  7540  0036B0  0100               	movlb	0	; () banked
  7541  0036B2  5195               	movf	digitalWrite@p& (0+255),w,b
  7542  0036B4  128B               	iorwf	3979,f,c	;volatile
  7543  0036B6  0012               	return	
  7544  0036B8                     l5124:
  7545                           
  7546                           ; BSR set to: 0
  7547                           ;iopin.c: 68: else LATC &= p;
  7548  0036B8  0100               	movlb	0	; () banked
  7549  0036BA  5195               	movf	digitalWrite@p& (0+255),w,b
  7550  0036BC  168B               	andwf	3979,f,c	;volatile
  7551                           
  7552                           ; BSR set to: 0
  7553                           ;iopin.c: 69: break;
  7554  0036BE  0012               	return	
  7555  0036C0                     l5126:
  7556                           
  7557                           ; BSR set to: 0
  7558  0036C0  0100               	movlb	0	; () banked
  7559  0036C2  0590               	decf	digitalWrite@val& (0+255),w,b
  7560  0036C4  0100               	movlb	0	; () banked
  7561  0036C6  1191               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  7562  0036C8  A4D8               	btfss	status,2,c
  7563  0036CA  D004               	goto	l5130
  7564                           
  7565                           ; BSR set to: 0
  7566  0036CC  0100               	movlb	0	; () banked
  7567  0036CE  5195               	movf	digitalWrite@p& (0+255),w,b
  7568  0036D0  128C               	iorwf	3980,f,c	;volatile
  7569  0036D2  0012               	return	
  7570  0036D4                     l5130:
  7571                           
  7572                           ; BSR set to: 0
  7573                           ;iopin.c: 71: else LATD &= p;
  7574  0036D4  0100               	movlb	0	; () banked
  7575  0036D6  5195               	movf	digitalWrite@p& (0+255),w,b
  7576  0036D8  168C               	andwf	3980,f,c	;volatile
  7577                           
  7578                           ; BSR set to: 0
  7579                           ;iopin.c: 72: }
  7580  0036DA  0012               	return	
  7581  0036DC                     l5132:
  7582                           
  7583                           ; BSR set to: 0
  7584  0036DC  C08E  FFD9         	movff	digitalWrite@pin,fsr2l
  7585  0036E0  C08F  FFDA         	movff	digitalWrite@pin+1,fsr2h
  7586  0036E4  CFDE F092          	movff	postinc2,??_digitalWrite
  7587  0036E8  CFDD F093          	movff	postdec2,??_digitalWrite+1
  7588                           
  7589                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7590                           ; Switch size 1, requested type "space"
  7591                           ; Number of cases is 1, Range of values is 0 to 0
  7592                           ; switch strategies available:
  7593                           ; Name         Instructions Cycles
  7594                           ; simple_byte            4     3 (average)
  7595                           ;	Chosen strategy is simple_byte
  7596  0036EC  0100               	movlb	0	; () banked
  7597  0036EE  5193               	movf	(??_digitalWrite+1)& (0+255),w,b
  7598  0036F0  0A00               	xorlw	0	; case 0
  7599  0036F2  A4D8               	btfss	status,2,c
  7600  0036F4  0012               	return	
  7601                           
  7602                           ; BSR set to: 0
  7603                           ; Switch size 1, requested type "space"
  7604                           ; Number of cases is 4, Range of values is 0 to 3
  7605                           ; switch strategies available:
  7606                           ; Name         Instructions Cycles
  7607                           ; simple_byte           13     7 (average)
  7608                           ;	Chosen strategy is simple_byte
  7609  0036F6  0100               	movlb	0	; () banked
  7610  0036F8  5192               	movf	??_digitalWrite& (0+255),w,b
  7611  0036FA  0A00               	xorlw	0	; case 0
  7612  0036FC  B4D8               	btfsc	status,2,c
  7613  0036FE  D7B6               	goto	l5108
  7614  003700  0A01               	xorlw	1	; case 1
  7615  003702  B4D8               	btfsc	status,2,c
  7616  003704  D7C1               	goto	l5114
  7617  003706  0A03               	xorlw	3	; case 2
  7618  003708  B4D8               	btfsc	status,2,c
  7619  00370A  D7CC               	goto	l5120
  7620  00370C  0A01               	xorlw	1	; case 3
  7621  00370E  A4D8               	btfss	status,2,c
  7622                           
  7623                           ; BSR set to: 0
  7624  003710  0012               	return	
  7625  003712  D7D6               	goto	l5126
  7626  003714                     __end_of_digitalWrite:
  7627                           	opt stack 0
  7628                           tblptru	equ	0xFF8
  7629                           tblptrh	equ	0xFF7
  7630                           tblptrl	equ	0xFF6
  7631                           tablat	equ	0xFF5
  7632                           prodh	equ	0xFF4
  7633                           prodl	equ	0xFF3
  7634                           postinc0	equ	0xFEE
  7635                           wreg	equ	0xFE8
  7636                           postdec1	equ	0xFE5
  7637                           fsr1l	equ	0xFE1
  7638                           indf2	equ	0xFDF
  7639                           postinc2	equ	0xFDE
  7640                           postdec2	equ	0xFDD
  7641                           fsr2h	equ	0xFDA
  7642                           fsr2l	equ	0xFD9
  7643                           status	equ	0xFD8
  7644                           
  7645 ;; *************** function _digitalRead *****************
  7646 ;; Defined at:
  7647 ;;		line 43 in file "iopin.c"
  7648 ;; Parameters:    Size  Location     Type
  7649 ;;  pin             2   14[BANK0 ] PTR int 
  7650 ;;		 -> padPin2(4), padPin1(4), 
  7651 ;; Auto vars:     Size  Location     Type
  7652 ;;		None
  7653 ;; Return value:  Size  Location     Type
  7654 ;;                  2   14[BANK0 ] int 
  7655 ;; Registers used:
  7656 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7657 ;; Tracked objects:
  7658 ;;		On entry : 0/0
  7659 ;;		On exit  : 0/0
  7660 ;;		Unchanged: 0/0
  7661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7662 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7664 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7665 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7666 ;;Total ram usage:        4 bytes
  7667 ;; Hardware stack levels used:    1
  7668 ;; Hardware stack levels required when called:    6
  7669 ;; This function calls:
  7670 ;;		Nothing
  7671 ;; This function is called by:
  7672 ;;		_sortBattery
  7673 ;; This function uses a non-reentrant model
  7674 ;;
  7675                           
  7676                           	psect	text21
  7677  0031A6                     __ptext21:
  7678                           	opt stack 0
  7679  0031A6                     _digitalRead:
  7680                           	opt stack 23
  7681                           
  7682                           ;iopin.c: 44: switch(pin[0]){
  7683                           
  7684                           ; BSR set to: 0
  7685                           ;incstack = 0
  7686  0031A6  D078               	goto	l5394
  7687  0031A8                     l5376:
  7688  0031A8  0100               	movlb	0	; () banked
  7689  0031AA  EE20 F002          	lfsr	2,2
  7690  0031AE  518E               	movf	digitalRead@pin& (0+255),w,b
  7691  0031B0  26D9               	addwf	fsr2l,f,c
  7692  0031B2  518F               	movf	(digitalRead@pin+1)& (0+255),w,b
  7693  0031B4  22DA               	addwfc	fsr2h,f,c
  7694  0031B6  50DF               	movf	indf2,w,c
  7695  0031B8  0100               	movlb	0	; () banked
  7696  0031BA  6F90               	movwf	??_digitalRead& (0+255),b
  7697  0031BC  CF80 F091          	movff	3968,??_digitalRead+1	;volatile
  7698  0031C0  0100               	movlb	0	; () banked
  7699  0031C2  2B90               	incf	??_digitalRead& (0+255),f,b
  7700  0031C4  D003               	goto	u5554
  7701  0031C6                     u5555:
  7702  0031C6  0100               	movlb	0	; () banked
  7703  0031C8  90D8               	bcf	status,0,c
  7704  0031CA  3391               	rrcf	(??_digitalRead+1)& (0+255),f,b
  7705  0031CC                     u5554:
  7706  0031CC  0100               	movlb	0	; () banked
  7707  0031CE  2F90               	decfsz	??_digitalRead& (0+255),f,b
  7708  0031D0  D7FA               	goto	u5555
  7709  0031D2  0E01               	movlw	1
  7710  0031D4  0100               	movlb	0	; () banked
  7711  0031D6  1791               	andwf	(??_digitalRead+1)& (0+255),f,b
  7712  0031D8  0100               	movlb	0	; () banked
  7713  0031DA  5191               	movf	(??_digitalRead+1)& (0+255),w,b
  7714  0031DC  0100               	movlb	0	; () banked
  7715  0031DE  6F8E               	movwf	?_digitalRead& (0+255),b
  7716  0031E0  6B8F               	clrf	(?_digitalRead+1)& (0+255),b
  7717                           
  7718                           ; BSR set to: 0
  7719  0031E2  0012               	return	
  7720  0031E4                     l5380:
  7721                           
  7722                           ; BSR set to: 0
  7723  0031E4  0100               	movlb	0	; () banked
  7724  0031E6  EE20 F002          	lfsr	2,2
  7725  0031EA  518E               	movf	digitalRead@pin& (0+255),w,b
  7726  0031EC  26D9               	addwf	fsr2l,f,c
  7727  0031EE  518F               	movf	(digitalRead@pin+1)& (0+255),w,b
  7728  0031F0  22DA               	addwfc	fsr2h,f,c
  7729  0031F2  50DF               	movf	indf2,w,c
  7730  0031F4  0100               	movlb	0	; () banked
  7731  0031F6  6F90               	movwf	??_digitalRead& (0+255),b
  7732  0031F8  CF81 F091          	movff	3969,??_digitalRead+1	;volatile
  7733  0031FC  0100               	movlb	0	; () banked
  7734  0031FE  2B90               	incf	??_digitalRead& (0+255),f,b
  7735  003200  D003               	goto	u5564
  7736  003202                     u5565:
  7737  003202  0100               	movlb	0	; () banked
  7738  003204  90D8               	bcf	status,0,c
  7739  003206  3391               	rrcf	(??_digitalRead+1)& (0+255),f,b
  7740  003208                     u5564:
  7741  003208  0100               	movlb	0	; () banked
  7742  00320A  2F90               	decfsz	??_digitalRead& (0+255),f,b
  7743  00320C  D7FA               	goto	u5565
  7744  00320E  0E01               	movlw	1
  7745  003210  0100               	movlb	0	; () banked
  7746  003212  1791               	andwf	(??_digitalRead+1)& (0+255),f,b
  7747  003214  0100               	movlb	0	; () banked
  7748  003216  5191               	movf	(??_digitalRead+1)& (0+255),w,b
  7749  003218  0100               	movlb	0	; () banked
  7750  00321A  6F8E               	movwf	?_digitalRead& (0+255),b
  7751  00321C  6B8F               	clrf	(?_digitalRead+1)& (0+255),b
  7752                           
  7753                           ; BSR set to: 0
  7754  00321E  0012               	return	
  7755  003220                     l5384:
  7756                           
  7757                           ; BSR set to: 0
  7758  003220  0100               	movlb	0	; () banked
  7759  003222  EE20 F002          	lfsr	2,2
  7760  003226  518E               	movf	digitalRead@pin& (0+255),w,b
  7761  003228  26D9               	addwf	fsr2l,f,c
  7762  00322A  518F               	movf	(digitalRead@pin+1)& (0+255),w,b
  7763  00322C  22DA               	addwfc	fsr2h,f,c
  7764  00322E  50DF               	movf	indf2,w,c
  7765  003230  0100               	movlb	0	; () banked
  7766  003232  6F90               	movwf	??_digitalRead& (0+255),b
  7767  003234  CF82 F091          	movff	3970,??_digitalRead+1	;volatile
  7768  003238  0100               	movlb	0	; () banked
  7769  00323A  2B90               	incf	??_digitalRead& (0+255),f,b
  7770  00323C  D003               	goto	u5574
  7771  00323E                     u5575:
  7772  00323E  0100               	movlb	0	; () banked
  7773  003240  90D8               	bcf	status,0,c
  7774  003242  3391               	rrcf	(??_digitalRead+1)& (0+255),f,b
  7775  003244                     u5574:
  7776  003244  0100               	movlb	0	; () banked
  7777  003246  2F90               	decfsz	??_digitalRead& (0+255),f,b
  7778  003248  D7FA               	goto	u5575
  7779  00324A  0E01               	movlw	1
  7780  00324C  0100               	movlb	0	; () banked
  7781  00324E  1791               	andwf	(??_digitalRead+1)& (0+255),f,b
  7782  003250  0100               	movlb	0	; () banked
  7783  003252  5191               	movf	(??_digitalRead+1)& (0+255),w,b
  7784  003254  0100               	movlb	0	; () banked
  7785  003256  6F8E               	movwf	?_digitalRead& (0+255),b
  7786  003258  6B8F               	clrf	(?_digitalRead+1)& (0+255),b
  7787                           
  7788                           ; BSR set to: 0
  7789  00325A  0012               	return	
  7790  00325C                     l5388:
  7791                           
  7792                           ; BSR set to: 0
  7793  00325C  0100               	movlb	0	; () banked
  7794  00325E  EE20 F002          	lfsr	2,2
  7795  003262  518E               	movf	digitalRead@pin& (0+255),w,b
  7796  003264  26D9               	addwf	fsr2l,f,c
  7797  003266  518F               	movf	(digitalRead@pin+1)& (0+255),w,b
  7798  003268  22DA               	addwfc	fsr2h,f,c
  7799  00326A  50DF               	movf	indf2,w,c
  7800  00326C  0100               	movlb	0	; () banked
  7801  00326E  6F90               	movwf	??_digitalRead& (0+255),b
  7802  003270  CF83 F091          	movff	3971,??_digitalRead+1	;volatile
  7803  003274  0100               	movlb	0	; () banked
  7804  003276  2B90               	incf	??_digitalRead& (0+255),f,b
  7805  003278  D003               	goto	u5584
  7806  00327A                     u5585:
  7807  00327A  0100               	movlb	0	; () banked
  7808  00327C  90D8               	bcf	status,0,c
  7809  00327E  3391               	rrcf	(??_digitalRead+1)& (0+255),f,b
  7810  003280                     u5584:
  7811  003280  0100               	movlb	0	; () banked
  7812  003282  2F90               	decfsz	??_digitalRead& (0+255),f,b
  7813  003284  D7FA               	goto	u5585
  7814  003286  0E01               	movlw	1
  7815  003288  0100               	movlb	0	; () banked
  7816  00328A  1791               	andwf	(??_digitalRead+1)& (0+255),f,b
  7817  00328C  0100               	movlb	0	; () banked
  7818  00328E  5191               	movf	(??_digitalRead+1)& (0+255),w,b
  7819  003290  0100               	movlb	0	; () banked
  7820  003292  6F8E               	movwf	?_digitalRead& (0+255),b
  7821  003294  6B8F               	clrf	(?_digitalRead+1)& (0+255),b
  7822                           
  7823                           ; BSR set to: 0
  7824  003296  0012               	return	
  7825  003298                     l5394:
  7826  003298  C08E  FFD9         	movff	digitalRead@pin,fsr2l
  7827  00329C  C08F  FFDA         	movff	digitalRead@pin+1,fsr2h
  7828  0032A0  CFDE F090          	movff	postinc2,??_digitalRead
  7829  0032A4  CFDD F091          	movff	postdec2,??_digitalRead+1
  7830                           
  7831                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7832                           ; Switch size 1, requested type "space"
  7833                           ; Number of cases is 1, Range of values is 0 to 0
  7834                           ; switch strategies available:
  7835                           ; Name         Instructions Cycles
  7836                           ; simple_byte            4     3 (average)
  7837                           ;	Chosen strategy is simple_byte
  7838  0032A8  0100               	movlb	0	; () banked
  7839  0032AA  5191               	movf	(??_digitalRead+1)& (0+255),w,b
  7840  0032AC  0A00               	xorlw	0	; case 0
  7841  0032AE  A4D8               	btfss	status,2,c
  7842  0032B0  D00E               	goto	l277
  7843                           
  7844                           ; BSR set to: 0
  7845                           ; Switch size 1, requested type "space"
  7846                           ; Number of cases is 4, Range of values is 0 to 3
  7847                           ; switch strategies available:
  7848                           ; Name         Instructions Cycles
  7849                           ; simple_byte           13     7 (average)
  7850                           ;	Chosen strategy is simple_byte
  7851  0032B2  0100               	movlb	0	; () banked
  7852  0032B4  5190               	movf	??_digitalRead& (0+255),w,b
  7853  0032B6  0A00               	xorlw	0	; case 0
  7854  0032B8  B4D8               	btfsc	status,2,c
  7855  0032BA  D776               	goto	l5376
  7856  0032BC  0A01               	xorlw	1	; case 1
  7857  0032BE  B4D8               	btfsc	status,2,c
  7858  0032C0  D791               	goto	l5380
  7859  0032C2  0A03               	xorlw	3	; case 2
  7860  0032C4  B4D8               	btfsc	status,2,c
  7861  0032C6  D7AC               	goto	l5384
  7862  0032C8  0A01               	xorlw	1	; case 3
  7863  0032CA  B4D8               	btfsc	status,2,c
  7864  0032CC  D7C7               	goto	l5388
  7865  0032CE                     l277:
  7866                           
  7867                           ; BSR set to: 0
  7868                           ;iopin.c: 50: return -1;
  7869  0032CE  0100               	movlb	0	; () banked
  7870  0032D0  698E               	setf	?_digitalRead& (0+255),b
  7871  0032D2  698F               	setf	(?_digitalRead+1)& (0+255),b
  7872                           
  7873                           ; BSR set to: 0
  7874  0032D4  0012               	return		;funcret
  7875  0032D6                     __end_of_digitalRead:
  7876                           	opt stack 0
  7877                           tblptru	equ	0xFF8
  7878                           tblptrh	equ	0xFF7
  7879                           tblptrl	equ	0xFF6
  7880                           tablat	equ	0xFF5
  7881                           prodh	equ	0xFF4
  7882                           prodl	equ	0xFF3
  7883                           postinc0	equ	0xFEE
  7884                           wreg	equ	0xFE8
  7885                           postdec1	equ	0xFE5
  7886                           fsr1l	equ	0xFE1
  7887                           indf2	equ	0xFDF
  7888                           postinc2	equ	0xFDE
  7889                           postdec2	equ	0xFDD
  7890                           fsr2h	equ	0xFDA
  7891                           fsr2l	equ	0xFD9
  7892                           status	equ	0xFD8
  7893                           
  7894 ;; *************** function _analogRead *****************
  7895 ;; Defined at:
  7896 ;;		line 90 in file "iopin.c"
  7897 ;; Parameters:    Size  Location     Type
  7898 ;;  channel         2   14[BANK0 ] int 
  7899 ;; Auto vars:     Size  Location     Type
  7900 ;;		None
  7901 ;; Return value:  Size  Location     Type
  7902 ;;                  4   14[BANK0 ] long 
  7903 ;; Registers used:
  7904 ;;		wreg, status,2, status,0
  7905 ;; Tracked objects:
  7906 ;;		On entry : 0/0
  7907 ;;		On exit  : 0/0
  7908 ;;		Unchanged: 0/0
  7909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7910 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7912 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7913 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7914 ;;Total ram usage:        6 bytes
  7915 ;; Hardware stack levels used:    1
  7916 ;; Hardware stack levels required when called:    6
  7917 ;; This function calls:
  7918 ;;		Nothing
  7919 ;; This function is called by:
  7920 ;;		_sortBattery
  7921 ;; This function uses a non-reentrant model
  7922 ;;
  7923                           
  7924                           	psect	text22
  7925  0049BE                     __ptext22:
  7926                           	opt stack 0
  7927  0049BE                     _analogRead:
  7928                           	opt stack 23
  7929                           
  7930                           ;iopin.c: 91: ADCON0 = channel<<2;
  7931                           
  7932                           ; BSR set to: 0
  7933                           ;incstack = 0
  7934  0049BE  0100               	movlb	0	; () banked
  7935  0049C0  458E               	rlncf	analogRead@channel& (0+255),w,b
  7936  0049C2  46E8               	rlncf	wreg,f,c
  7937  0049C4  0BFC               	andlw	252
  7938  0049C6  6EC2               	movwf	4034,c	;volatile
  7939                           
  7940                           ; BSR set to: 0
  7941                           ;iopin.c: 92: ADCON0 |= 1<<0;
  7942  0049C8  80C2               	bsf	4034,0,c	;volatile
  7943                           
  7944                           ; BSR set to: 0
  7945                           ;iopin.c: 93: ADCON0 |= 1<<1;
  7946  0049CA  82C2               	bsf	4034,1,c	;volatile
  7947  0049CC                     l302:
  7948  0049CC  B2C2               	btfsc	4034,1,c	;volatile
  7949  0049CE  D7FE               	goto	l302
  7950                           
  7951                           ;iopin.c: 97: return (ADRESH<<8) + ADRESL;
  7952  0049D0  50C3               	movf	4035,w,c	;volatile
  7953  0049D2  CFC4 F092          	movff	4036,??_analogRead	;volatile
  7954  0049D6  0100               	movlb	0	; () banked
  7955  0049D8  6B93               	clrf	(??_analogRead+1)& (0+255),b
  7956  0049DA  C092  F093         	movff	??_analogRead,??_analogRead+1
  7957  0049DE  0100               	movlb	0	; () banked
  7958  0049E0  6B92               	clrf	??_analogRead& (0+255),b
  7959  0049E2  0100               	movlb	0	; () banked
  7960  0049E4  2792               	addwf	??_analogRead& (0+255),f,b
  7961  0049E6  0E00               	movlw	0
  7962  0049E8  2393               	addwfc	(??_analogRead+1)& (0+255),f,b
  7963  0049EA  C092  F08E         	movff	??_analogRead,?_analogRead
  7964  0049EE  C093  F08F         	movff	??_analogRead+1,?_analogRead+1
  7965  0049F2  0100               	movlb	0	; () banked
  7966  0049F4  0E00               	movlw	0
  7967  0049F6  BF8F               	btfsc	(?_analogRead+1)& (0+255),7,b
  7968  0049F8  0EFF               	movlw	-1
  7969  0049FA  6F90               	movwf	(?_analogRead+2)& (0+255),b
  7970  0049FC  6F91               	movwf	(?_analogRead+3)& (0+255),b
  7971  0049FE  0012               	return	
  7972  004A00                     __end_of_analogRead:
  7973                           	opt stack 0
  7974                           tblptru	equ	0xFF8
  7975                           tblptrh	equ	0xFF7
  7976                           tblptrl	equ	0xFF6
  7977                           tablat	equ	0xFF5
  7978                           prodh	equ	0xFF4
  7979                           prodl	equ	0xFF3
  7980                           postinc0	equ	0xFEE
  7981                           wreg	equ	0xFE8
  7982                           postdec1	equ	0xFE5
  7983                           fsr1l	equ	0xFE1
  7984                           indf2	equ	0xFDF
  7985                           postinc2	equ	0xFDE
  7986                           postdec2	equ	0xFDD
  7987                           fsr2h	equ	0xFDA
  7988                           fsr2l	equ	0xFD9
  7989                           status	equ	0xFD8
  7990                           
  7991 ;; *************** function _pinSetup *****************
  7992 ;; Defined at:
  7993 ;;		line 197 in file "main.c"
  7994 ;; Parameters:    Size  Location     Type
  7995 ;;		None
  7996 ;; Auto vars:     Size  Location     Type
  7997 ;;		None
  7998 ;; Return value:  Size  Location     Type
  7999 ;;                  1    wreg      void 
  8000 ;; Registers used:
  8001 ;;		wreg, status,2, status,0
  8002 ;; Tracked objects:
  8003 ;;		On entry : 0/0
  8004 ;;		On exit  : 0/0
  8005 ;;		Unchanged: 0/0
  8006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8010 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8011 ;;Total ram usage:        0 bytes
  8012 ;; Hardware stack levels used:    1
  8013 ;; Hardware stack levels required when called:    6
  8014 ;; This function calls:
  8015 ;;		Nothing
  8016 ;; This function is called by:
  8017 ;;		_main
  8018 ;; This function uses a non-reentrant model
  8019 ;;
  8020                           
  8021                           	psect	text23
  8022  004A40                     __ptext23:
  8023                           	opt stack 0
  8024  004A40                     _pinSetup:
  8025                           	opt stack 24
  8026                           
  8027                           ;main.c: 203: TRISA = 0xFF;
  8028                           
  8029                           ; BSR set to: 0
  8030                           ;incstack = 0
  8031  004A40  6892               	setf	3986,c	;volatile
  8032                           
  8033                           ;main.c: 204: TRISB = 0xFF;
  8034  004A42  6893               	setf	3987,c	;volatile
  8035                           
  8036                           ;main.c: 205: TRISC = 0b11000000;
  8037  004A44  0EC0               	movlw	192
  8038  004A46  6E94               	movwf	3988,c	;volatile
  8039                           
  8040                           ;main.c: 206: TRISD = 0x00;
  8041  004A48  0E00               	movlw	0
  8042  004A4A  6E95               	movwf	3989,c	;volatile
  8043                           
  8044                           ;main.c: 207: TRISE = 0x00;
  8045  004A4C  0E00               	movlw	0
  8046  004A4E  6E96               	movwf	3990,c	;volatile
  8047                           
  8048                           ;main.c: 209: LATA = 0x00;
  8049  004A50  0E00               	movlw	0
  8050  004A52  6E89               	movwf	3977,c	;volatile
  8051                           
  8052                           ;main.c: 210: LATB = 0x00;
  8053  004A54  0E00               	movlw	0
  8054  004A56  6E8A               	movwf	3978,c	;volatile
  8055                           
  8056                           ;main.c: 211: LATC = 0x00;
  8057  004A58  0E00               	movlw	0
  8058  004A5A  6E8B               	movwf	3979,c	;volatile
  8059                           
  8060                           ;main.c: 212: LATD = 0x00;
  8061  004A5C  0E00               	movlw	0
  8062  004A5E  6E8C               	movwf	3980,c	;volatile
  8063                           
  8064                           ;main.c: 213: LATE = 0x00;
  8065  004A60  0E00               	movlw	0
  8066  004A62  6E8D               	movwf	3981,c	;volatile
  8067                           
  8068                           ;main.c: 215: ADCON0 = 0x00;
  8069  004A64  0E00               	movlw	0
  8070  004A66  6EC2               	movwf	4034,c	;volatile
  8071                           
  8072                           ;main.c: 217: ADCON1 |= 0x0B;
  8073  004A68  0E0B               	movlw	11
  8074  004A6A  12C1               	iorwf	4033,f,c	;volatile
  8075                           
  8076                           ;main.c: 222: ADCON2 = 0;
  8077  004A6C  0E00               	movlw	0
  8078  004A6E  6EC0               	movwf	4032,c	;volatile
  8079                           
  8080                           ;main.c: 223: ADCON2 |= 0b010;
  8081  004A70  82C0               	bsf	4032,1,c	;volatile
  8082                           
  8083                           ;main.c: 224: ADCON2 |= 0b110<<3;
  8084  004A72  0E30               	movlw	48
  8085  004A74  12C0               	iorwf	4032,f,c	;volatile
  8086                           
  8087                           ;main.c: 225: ADCON2 |= 1<<7;
  8088  004A76  8EC0               	bsf	4032,7,c	;volatile
  8089                           
  8090                           ;main.c: 229: INT0IE = 1;
  8091  004A78  88F2               	bsf	intcon,4,c	;volatile
  8092                           
  8093                           ;main.c: 230: (INTCONbits.GIE = 1);
  8094  004A7A  8EF2               	bsf	intcon,7,c	;volatile
  8095  004A7C  0012               	return		;funcret
  8096  004A7E                     __end_of_pinSetup:
  8097                           	opt stack 0
  8098                           tblptru	equ	0xFF8
  8099                           tblptrh	equ	0xFF7
  8100                           tblptrl	equ	0xFF6
  8101                           tablat	equ	0xFF5
  8102                           prodh	equ	0xFF4
  8103                           prodl	equ	0xFF3
  8104                           intcon	equ	0xFF2
  8105                           postinc0	equ	0xFEE
  8106                           wreg	equ	0xFE8
  8107                           postdec1	equ	0xFE5
  8108                           fsr1l	equ	0xFE1
  8109                           indf2	equ	0xFDF
  8110                           postinc2	equ	0xFDE
  8111                           postdec2	equ	0xFDD
  8112                           fsr2h	equ	0xFDA
  8113                           fsr2l	equ	0xFD9
  8114                           status	equ	0xFD8
  8115                           
  8116 ;; *************** function _initServo *****************
  8117 ;; Defined at:
  8118 ;;		line 21 in file "servo.c"
  8119 ;; Parameters:    Size  Location     Type
  8120 ;;  motor           2   27[BANK1 ] PTR int 
  8121 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
  8122 ;;  angle           2   29[BANK1 ] int 
  8123 ;; Auto vars:     Size  Location     Type
  8124 ;;		None
  8125 ;; Return value:  Size  Location     Type
  8126 ;;                  1    wreg      void 
  8127 ;; Registers used:
  8128 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8129 ;; Tracked objects:
  8130 ;;		On entry : 0/0
  8131 ;;		On exit  : 0/0
  8132 ;;		Unchanged: 0/0
  8133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8134 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8136 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8137 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8138 ;;Total ram usage:        8 bytes
  8139 ;; Hardware stack levels used:    1
  8140 ;; Hardware stack levels required when called:   10
  8141 ;; This function calls:
  8142 ;;		_initTimer
  8143 ;;		_setAngle
  8144 ;;		_startTimer
  8145 ;; This function is called by:
  8146 ;;		_main
  8147 ;; This function uses a non-reentrant model
  8148 ;;
  8149                           
  8150                           	psect	text24
  8151  0042FC                     __ptext24:
  8152                           	opt stack 0
  8153  0042FC                     _initServo:
  8154                           	opt stack 20
  8155                           
  8156                           ;servo.c: 22: n++;
  8157                           
  8158                           ;incstack = 0
  8159  0042FC  0101               	movlb	1	; () banked
  8160  0042FE  4B71               	infsnz	_n& (0+255),f,b
  8161  004300  2B72               	incf	(_n+1)& (0+255),f,b
  8162                           
  8163                           ; BSR set to: 1
  8164                           ;servo.c: 23: servos[n-1] = motor;
  8165  004302  0EFE               	movlw	254
  8166  004304  0101               	movlb	1	; () banked
  8167  004306  6F52               	movwf	??_initServo& (0+255),b
  8168  004308  0EFF               	movlw	255
  8169  00430A  0101               	movlb	1	; () banked
  8170  00430C  6F53               	movwf	(??_initServo+1)& (0+255),b
  8171  00430E  C171  F154         	movff	_n,??_initServo+2
  8172  004312  C172  F155         	movff	_n+1,??_initServo+3
  8173  004316  90D8               	bcf	status,0,c
  8174  004318  0101               	movlb	1	; () banked
  8175  00431A  3754               	rlcf	(??_initServo+2)& (0+255),f,b
  8176  00431C  3755               	rlcf	(??_initServo+3)& (0+255),f,b
  8177  00431E  0101               	movlb	1	; () banked
  8178  004320  5152               	movf	??_initServo& (0+255),w,b
  8179  004322  0101               	movlb	1	; () banked
  8180  004324  2754               	addwf	(??_initServo+2)& (0+255),f,b
  8181  004326  0101               	movlb	1	; () banked
  8182  004328  5153               	movf	(??_initServo+1)& (0+255),w,b
  8183  00432A  0101               	movlb	1	; () banked
  8184  00432C  2355               	addwfc	(??_initServo+3)& (0+255),f,b
  8185  00432E  0E63               	movlw	low _servos
  8186  004330  0101               	movlb	1	; () banked
  8187  004332  2554               	addwf	(??_initServo+2)& (0+255),w,b
  8188  004334  6ED9               	movwf	fsr2l,c
  8189  004336  0E01               	movlw	high _servos
  8190  004338  0101               	movlb	1	; () banked
  8191  00433A  2155               	addwfc	(??_initServo+3)& (0+255),w,b
  8192  00433C  6EDA               	movwf	fsr2h,c
  8193  00433E  C14E  FFDE         	movff	initServo@motor,postinc2
  8194  004342  C14F  FFDD         	movff	initServo@motor+1,postdec2
  8195                           
  8196                           ; BSR set to: 1
  8197                           ;servo.c: 24: setAngle(motor, angle);
  8198  004346  C14E  F146         	movff	initServo@motor,setAngle@motor
  8199  00434A  C14F  F147         	movff	initServo@motor+1,setAngle@motor+1
  8200  00434E  C150  F148         	movff	initServo@angle,setAngle@angle
  8201  004352  C151  F149         	movff	initServo@angle+1,setAngle@angle+1
  8202  004356  EC5F  F01D         	call	_setAngle	;wreg free
  8203                           
  8204                           ;servo.c: 26: initTimer(0);
  8205  00435A  0E00               	movlw	0
  8206  00435C  0100               	movlb	0	; () banked
  8207  00435E  6F8F               	movwf	(initTimer@timer+1)& (0+255),b
  8208  004360  0E00               	movlw	0
  8209  004362  6F8E               	movwf	initTimer@timer& (0+255),b
  8210  004364  EC73  F024         	call	_initTimer	;wreg free
  8211                           
  8212                           ;servo.c: 27: startTimer(0,0);
  8213  004368  0E00               	movlw	0
  8214  00436A  0100               	movlb	0	; () banked
  8215  00436C  6F8F               	movwf	(startTimer@timer+1)& (0+255),b
  8216  00436E  0E00               	movlw	0
  8217  004370  6F8E               	movwf	startTimer@timer& (0+255),b
  8218  004372  0E00               	movlw	0
  8219  004374  0100               	movlb	0	; () banked
  8220  004376  6F90               	movwf	startTimer@val& (0+255),b
  8221  004378  0E00               	movlw	0
  8222  00437A  6F91               	movwf	(startTimer@val+1)& (0+255),b
  8223  00437C  0E00               	movlw	0
  8224  00437E  6F92               	movwf	(startTimer@val+2)& (0+255),b
  8225  004380  0E00               	movlw	0
  8226  004382  6F93               	movwf	(startTimer@val+3)& (0+255),b
  8227  004384  ECFF  F023         	call	_startTimer	;wreg free
  8228  004388  0012               	return		;funcret
  8229  00438A                     __end_of_initServo:
  8230                           	opt stack 0
  8231                           tblptru	equ	0xFF8
  8232                           tblptrh	equ	0xFF7
  8233                           tblptrl	equ	0xFF6
  8234                           tablat	equ	0xFF5
  8235                           prodh	equ	0xFF4
  8236                           prodl	equ	0xFF3
  8237                           intcon	equ	0xFF2
  8238                           postinc0	equ	0xFEE
  8239                           wreg	equ	0xFE8
  8240                           postdec1	equ	0xFE5
  8241                           fsr1l	equ	0xFE1
  8242                           indf2	equ	0xFDF
  8243                           postinc2	equ	0xFDE
  8244                           postdec2	equ	0xFDD
  8245                           fsr2h	equ	0xFDA
  8246                           fsr2l	equ	0xFD9
  8247                           status	equ	0xFD8
  8248                           
  8249 ;; *************** function _startTimer *****************
  8250 ;; Defined at:
  8251 ;;		line 75 in file "timer.c"
  8252 ;; Parameters:    Size  Location     Type
  8253 ;;  timer           2   14[BANK0 ] int 
  8254 ;;  val             4   16[BANK0 ] long 
  8255 ;; Auto vars:     Size  Location     Type
  8256 ;;		None
  8257 ;; Return value:  Size  Location     Type
  8258 ;;                  1    wreg      void 
  8259 ;; Registers used:
  8260 ;;		wreg, status,2, status,0
  8261 ;; Tracked objects:
  8262 ;;		On entry : 0/0
  8263 ;;		On exit  : 0/0
  8264 ;;		Unchanged: 0/0
  8265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8266 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8268 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8269 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8270 ;;Total ram usage:        8 bytes
  8271 ;; Hardware stack levels used:    1
  8272 ;; Hardware stack levels required when called:    6
  8273 ;; This function calls:
  8274 ;;		Nothing
  8275 ;; This function is called by:
  8276 ;;		_initServo
  8277 ;;		_testFrequency
  8278 ;; This function uses a non-reentrant model
  8279 ;;
  8280                           
  8281                           	psect	text25
  8282  0047FE                     __ptext25:
  8283                           	opt stack 0
  8284  0047FE                     _startTimer:
  8285                           	opt stack 23
  8286                           
  8287                           ;timer.c: 76: switch(timer){
  8288                           
  8289                           ;incstack = 0
  8290  0047FE  D012               	goto	l5452
  8291  004800                     l383:
  8292                           
  8293                           ; BSR set to: 0
  8294                           ;timer.c: 78: TMR0H = val>>8;
  8295  004800  C091  FFD7         	movff	startTimer@val+1,4055	;volatile
  8296                           
  8297                           ;timer.c: 79: TMR0L = val;
  8298  004804  C090  FFD6         	movff	startTimer@val,4054	;volatile
  8299                           
  8300                           ; BSR set to: 0
  8301                           ;timer.c: 80: T0CON |= 1<<7;
  8302  004808  8ED5               	bsf	4053,7,c	;volatile
  8303                           
  8304                           ;timer.c: 81: break;
  8305  00480A  0012               	return	
  8306  00480C                     l385:
  8307                           
  8308                           ; BSR set to: 0
  8309                           ;timer.c: 83: TMR1H = val>>8;
  8310  00480C  C091  FFCF         	movff	startTimer@val+1,4047	;volatile
  8311                           
  8312                           ;timer.c: 84: TMR1L = val;
  8313  004810  C090  FFCE         	movff	startTimer@val,4046	;volatile
  8314                           
  8315                           ; BSR set to: 0
  8316                           ;timer.c: 85: T1CON |= 1<<0;
  8317  004814  80CD               	bsf	4045,0,c	;volatile
  8318                           
  8319                           ;timer.c: 86: break;
  8320  004816  0012               	return	
  8321  004818                     l386:
  8322                           
  8323                           ; BSR set to: 0
  8324                           ;timer.c: 88: TMR3H = val>>8;
  8325  004818  C091  FFB3         	movff	startTimer@val+1,4019	;volatile
  8326                           
  8327                           ;timer.c: 89: TMR3L = val;
  8328  00481C  C090  FFB2         	movff	startTimer@val,4018	;volatile
  8329                           
  8330                           ; BSR set to: 0
  8331                           ;timer.c: 90: T3CON |= 1<<0;
  8332  004820  80B1               	bsf	4017,0,c	;volatile
  8333                           
  8334                           ;timer.c: 91: }
  8335  004822  0012               	return	
  8336  004824                     l5452:
  8337  004824  C08E  F094         	movff	startTimer@timer,??_startTimer
  8338  004828  C08F  F095         	movff	startTimer@timer+1,??_startTimer+1
  8339                           
  8340                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8341                           ; Switch size 1, requested type "space"
  8342                           ; Number of cases is 1, Range of values is 0 to 0
  8343                           ; switch strategies available:
  8344                           ; Name         Instructions Cycles
  8345                           ; simple_byte            4     3 (average)
  8346                           ;	Chosen strategy is simple_byte
  8347  00482C  0100               	movlb	0	; () banked
  8348  00482E  5195               	movf	(??_startTimer+1)& (0+255),w,b
  8349  004830  0A00               	xorlw	0	; case 0
  8350  004832  A4D8               	btfss	status,2,c
  8351  004834  0012               	return	
  8352                           
  8353                           ; BSR set to: 0
  8354                           ; Switch size 1, requested type "space"
  8355                           ; Number of cases is 3, Range of values is 0 to 3
  8356                           ; switch strategies available:
  8357                           ; Name         Instructions Cycles
  8358                           ; simple_byte           10     6 (average)
  8359                           ;	Chosen strategy is simple_byte
  8360  004836  0100               	movlb	0	; () banked
  8361  004838  5194               	movf	??_startTimer& (0+255),w,b
  8362  00483A  0A00               	xorlw	0	; case 0
  8363  00483C  B4D8               	btfsc	status,2,c
  8364  00483E  D7E0               	goto	l383
  8365  004840  0A01               	xorlw	1	; case 1
  8366  004842  B4D8               	btfsc	status,2,c
  8367  004844  D7E3               	goto	l385
  8368  004846  0A02               	xorlw	2	; case 3
  8369  004848  A4D8               	btfss	status,2,c
  8370  00484A  0012               	return	
  8371  00484C  D7E5               	goto	l386
  8372  00484E                     __end_of_startTimer:
  8373                           	opt stack 0
  8374                           tblptru	equ	0xFF8
  8375                           tblptrh	equ	0xFF7
  8376                           tblptrl	equ	0xFF6
  8377                           tablat	equ	0xFF5
  8378                           prodh	equ	0xFF4
  8379                           prodl	equ	0xFF3
  8380                           intcon	equ	0xFF2
  8381                           postinc0	equ	0xFEE
  8382                           wreg	equ	0xFE8
  8383                           postdec1	equ	0xFE5
  8384                           fsr1l	equ	0xFE1
  8385                           indf2	equ	0xFDF
  8386                           postinc2	equ	0xFDE
  8387                           postdec2	equ	0xFDD
  8388                           fsr2h	equ	0xFDA
  8389                           fsr2l	equ	0xFD9
  8390                           status	equ	0xFD8
  8391                           
  8392 ;; *************** function _setAngle *****************
  8393 ;; Defined at:
  8394 ;;		line 41 in file "servo.c"
  8395 ;; Parameters:    Size  Location     Type
  8396 ;;  motor           2   19[BANK1 ] PTR int 
  8397 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
  8398 ;;  angle           2   21[BANK1 ] int 
  8399 ;; Auto vars:     Size  Location     Type
  8400 ;;  i               2   25[BANK1 ] int 
  8401 ;;  period          2   23[BANK1 ] unsigned int 
  8402 ;; Return value:  Size  Location     Type
  8403 ;;                  1    wreg      void 
  8404 ;; Registers used:
  8405 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8406 ;; Tracked objects:
  8407 ;;		On entry : 0/0
  8408 ;;		On exit  : 0/0
  8409 ;;		Unchanged: 0/0
  8410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8411 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8412 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8413 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8414 ;;      Totals:         0       2       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8415 ;;Total ram usage:       10 bytes
  8416 ;; Hardware stack levels used:    1
  8417 ;; Hardware stack levels required when called:    9
  8418 ;; This function calls:
  8419 ;;		_angleToPulse
  8420 ;; This function is called by:
  8421 ;;		_sortBattery
  8422 ;;		_initServo
  8423 ;; This function uses a non-reentrant model
  8424 ;;
  8425                           
  8426                           	psect	text26
  8427  003ABE                     __ptext26:
  8428                           	opt stack 0
  8429  003ABE                     _setAngle:
  8430                           	opt stack 20
  8431                           
  8432                           ;servo.c: 42: unsigned int period = 50000;
  8433                           
  8434                           ; BSR set to: 0
  8435                           ;incstack = 0
  8436  003ABE  0EC3               	movlw	195
  8437  003AC0  0101               	movlb	1	; () banked
  8438  003AC2  6F4B               	movwf	(setAngle@period+1)& (0+255),b
  8439  003AC4  0E50               	movlw	80
  8440  003AC6  6F4A               	movwf	setAngle@period& (0+255),b
  8441                           
  8442                           ;servo.c: 43: for(int i = 0; i < n; i++){
  8443  003AC8  0E00               	movlw	0
  8444  003ACA  0101               	movlb	1	; () banked
  8445  003ACC  6F4D               	movwf	(setAngle@i+1)& (0+255),b
  8446  003ACE  0E00               	movlw	0
  8447  003AD0  6F4C               	movwf	setAngle@i& (0+255),b
  8448  003AD2  D03F               	goto	l6742
  8449  003AD4                     l6734:
  8450                           
  8451                           ;servo.c: 44: if(servos[i] == motor){
  8452  003AD4  90D8               	bcf	status,0,c
  8453  003AD6  0101               	movlb	1	; () banked
  8454  003AD8  354C               	rlcf	setAngle@i& (0+255),w,b
  8455  003ADA  6ED9               	movwf	fsr2l,c
  8456  003ADC  0101               	movlb	1	; () banked
  8457  003ADE  354D               	rlcf	(setAngle@i+1)& (0+255),w,b
  8458  003AE0  6EDA               	movwf	fsr2h,c
  8459  003AE2  0E63               	movlw	low _servos
  8460  003AE4  26D9               	addwf	fsr2l,f,c
  8461  003AE6  0E01               	movlw	high _servos
  8462  003AE8  22DA               	addwfc	fsr2h,f,c
  8463  003AEA  0101               	movlb	1	; () banked
  8464  003AEC  5146               	movf	setAngle@motor& (0+255),w,b
  8465  003AEE  18DE               	xorwf	postinc2,w,c
  8466  003AF0  E11C               	bnz	l6738
  8467  003AF2  0101               	movlb	1	; () banked
  8468  003AF4  5147               	movf	(setAngle@motor+1)& (0+255),w,b
  8469  003AF6  18DE               	xorwf	postinc2,w,c
  8470  003AF8  A4D8               	btfss	status,2,c
  8471  003AFA  D017               	goto	l6738
  8472                           
  8473                           ; BSR set to: 1
  8474                           ;servo.c: 45: pulse[i] = angleToPulse(angle);
  8475  003AFC  C148  F0E3         	movff	setAngle@angle,angleToPulse@angle
  8476  003B00  C149  F0E4         	movff	setAngle@angle+1,angleToPulse@angle+1
  8477  003B04  ECF0  F014         	call	_angleToPulse	;wreg free
  8478  003B08  90D8               	bcf	status,0,c
  8479  003B0A  0101               	movlb	1	; () banked
  8480  003B0C  354C               	rlcf	setAngle@i& (0+255),w,b
  8481  003B0E  6ED9               	movwf	fsr2l,c
  8482  003B10  0101               	movlb	1	; () banked
  8483  003B12  354D               	rlcf	(setAngle@i+1)& (0+255),w,b
  8484  003B14  6EDA               	movwf	fsr2h,c
  8485  003B16  0EEA               	movlw	low _pulse
  8486  003B18  26D9               	addwf	fsr2l,f,c
  8487  003B1A  0E00               	movlw	high _pulse
  8488  003B1C  22DA               	addwfc	fsr2h,f,c
  8489  003B1E  0100               	movlb	0	; () banked
  8490  003B20  C0E3  FFDE         	movff	?_angleToPulse,postinc2
  8491  003B24  0100               	movlb	0	; () banked
  8492  003B26  C0E4  FFDD         	movff	?_angleToPulse+1,postdec2
  8493  003B2A                     l6738:
  8494                           
  8495                           ;servo.c: 46: }
  8496                           ;servo.c: 47: period-=pulse[i];
  8497  003B2A  90D8               	bcf	status,0,c
  8498  003B2C  0101               	movlb	1	; () banked
  8499  003B2E  354C               	rlcf	setAngle@i& (0+255),w,b
  8500  003B30  6ED9               	movwf	fsr2l,c
  8501  003B32  0101               	movlb	1	; () banked
  8502  003B34  354D               	rlcf	(setAngle@i+1)& (0+255),w,b
  8503  003B36  6EDA               	movwf	fsr2h,c
  8504  003B38  0EEA               	movlw	low _pulse
  8505  003B3A  26D9               	addwf	fsr2l,f,c
  8506  003B3C  0E00               	movlw	high _pulse
  8507  003B3E  22DA               	addwfc	fsr2h,f,c
  8508  003B40  50DE               	movf	postinc2,w,c
  8509  003B42  0101               	movlb	1	; () banked
  8510  003B44  5F4A               	subwf	setAngle@period& (0+255),f,b
  8511  003B46  50DD               	movf	postdec2,w,c
  8512  003B48  0101               	movlb	1	; () banked
  8513  003B4A  5B4B               	subwfb	(setAngle@period+1)& (0+255),f,b
  8514                           
  8515                           ; BSR set to: 1
  8516  003B4C  0101               	movlb	1	; () banked
  8517  003B4E  4B4C               	infsnz	setAngle@i& (0+255),f,b
  8518  003B50  2B4D               	incf	(setAngle@i+1)& (0+255),f,b
  8519  003B52                     l6742:
  8520                           
  8521                           ; BSR set to: 1
  8522  003B52  0101               	movlb	1	; () banked
  8523  003B54  5171               	movf	_n& (0+255),w,b
  8524  003B56  0101               	movlb	1	; () banked
  8525  003B58  5D4C               	subwf	setAngle@i& (0+255),w,b
  8526  003B5A  0101               	movlb	1	; () banked
  8527  003B5C  514D               	movf	(setAngle@i+1)& (0+255),w,b
  8528  003B5E  0A80               	xorlw	128
  8529  003B60  0100               	movlb	0	; () banked
  8530  003B62  6FE7               	movwf	??_setAngle& (0+255),b
  8531  003B64  0101               	movlb	1	; () banked
  8532  003B66  5172               	movf	(_n+1)& (0+255),w,b
  8533  003B68  0A80               	xorlw	128
  8534  003B6A  0100               	movlb	0	; () banked
  8535  003B6C  59E7               	subwfb	??_setAngle& (0+255),w,b
  8536  003B6E  A0D8               	btfss	status,0,c
  8537  003B70  D7B1               	goto	l6734
  8538                           
  8539                           ; BSR set to: 0
  8540                           ;servo.c: 48: }
  8541                           ;servo.c: 49: pulse[n] = period;
  8542                           
  8543                           ; BSR set to: 0
  8544  003B72  90D8               	bcf	status,0,c
  8545  003B74  0101               	movlb	1	; () banked
  8546  003B76  3571               	rlcf	_n& (0+255),w,b
  8547  003B78  6ED9               	movwf	fsr2l,c
  8548  003B7A  0101               	movlb	1	; () banked
  8549  003B7C  3572               	rlcf	(_n+1)& (0+255),w,b
  8550  003B7E  6EDA               	movwf	fsr2h,c
  8551  003B80  0EEA               	movlw	low _pulse
  8552  003B82  26D9               	addwf	fsr2l,f,c
  8553  003B84  0E00               	movlw	high _pulse
  8554  003B86  22DA               	addwfc	fsr2h,f,c
  8555  003B88  C14A  FFDE         	movff	setAngle@period,postinc2
  8556  003B8C  C14B  FFDD         	movff	setAngle@period+1,postdec2
  8557                           
  8558                           ; BSR set to: 1
  8559  003B90  0012               	return		;funcret
  8560  003B92                     __end_of_setAngle:
  8561                           	opt stack 0
  8562                           tblptru	equ	0xFF8
  8563                           tblptrh	equ	0xFF7
  8564                           tblptrl	equ	0xFF6
  8565                           tablat	equ	0xFF5
  8566                           prodh	equ	0xFF4
  8567                           prodl	equ	0xFF3
  8568                           intcon	equ	0xFF2
  8569                           postinc0	equ	0xFEE
  8570                           wreg	equ	0xFE8
  8571                           postdec1	equ	0xFE5
  8572                           fsr1l	equ	0xFE1
  8573                           indf2	equ	0xFDF
  8574                           postinc2	equ	0xFDE
  8575                           postdec2	equ	0xFDD
  8576                           fsr2h	equ	0xFDA
  8577                           fsr2l	equ	0xFD9
  8578                           status	equ	0xFD8
  8579                           
  8580 ;; *************** function _angleToPulse *****************
  8581 ;; Defined at:
  8582 ;;		line 33 in file "servo.c"
  8583 ;; Parameters:    Size  Location     Type
  8584 ;;  angle           2   99[BANK0 ] int 
  8585 ;; Auto vars:     Size  Location     Type
  8586 ;;  a000            4   15[BANK1 ] long 
  8587 ;;  a180            4    8[BANK1 ] long 
  8588 ;;  offset          4    4[BANK1 ] long 
  8589 ;; Return value:  Size  Location     Type
  8590 ;;                  4   99[BANK0 ] long 
  8591 ;; Registers used:
  8592 ;;		wreg, status,2, status,0, cstack
  8593 ;; Tracked objects:
  8594 ;;		On entry : 0/0
  8595 ;;		On exit  : 0/0
  8596 ;;		Unchanged: 0/0
  8597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8598 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8599 ;;      Locals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8600 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8601 ;;      Totals:         0       4      19       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8602 ;;Total ram usage:       23 bytes
  8603 ;; Hardware stack levels used:    1
  8604 ;; Hardware stack levels required when called:    8
  8605 ;; This function calls:
  8606 ;;		___altoft
  8607 ;;		___awtoft
  8608 ;;		___ftadd
  8609 ;;		___ftdiv
  8610 ;;		___ftmul
  8611 ;;		___fttol
  8612 ;; This function is called by:
  8613 ;;		_setAngle
  8614 ;; This function uses a non-reentrant model
  8615 ;;
  8616                           
  8617                           	psect	text27
  8618  0029E0                     __ptext27:
  8619                           	opt stack 0
  8620  0029E0                     _angleToPulse:
  8621                           	opt stack 20
  8622                           
  8623                           ;servo.c: 34: long offset = -600;
  8624                           
  8625                           ; BSR set to: 1
  8626                           ;incstack = 0
  8627  0029E0  0EA8               	movlw	168
  8628  0029E2  0101               	movlb	1	; () banked
  8629  0029E4  6F37               	movwf	angleToPulse@offset& (0+255),b
  8630  0029E6  0EFD               	movlw	253
  8631  0029E8  6F38               	movwf	(angleToPulse@offset+1)& (0+255),b
  8632  0029EA  0EFF               	movlw	255
  8633  0029EC  6F39               	movwf	(angleToPulse@offset+2)& (0+255),b
  8634  0029EE  0EFF               	movlw	255
  8635  0029F0  6F3A               	movwf	(angleToPulse@offset+3)& (0+255),b
  8636                           
  8637                           ;servo.c: 35: long a000 = 1250;
  8638  0029F2  0EE2               	movlw	226
  8639  0029F4  0101               	movlb	1	; () banked
  8640  0029F6  6F42               	movwf	angleToPulse@a000& (0+255),b
  8641  0029F8  0E04               	movlw	4
  8642  0029FA  6F43               	movwf	(angleToPulse@a000+1)& (0+255),b
  8643  0029FC  0E00               	movlw	0
  8644  0029FE  6F44               	movwf	(angleToPulse@a000+2)& (0+255),b
  8645  002A00  0E00               	movlw	0
  8646  002A02  6F45               	movwf	(angleToPulse@a000+3)& (0+255),b
  8647                           
  8648                           ;servo.c: 36: long a180 = 6250;
  8649  002A04  0E6A               	movlw	106
  8650  002A06  0101               	movlb	1	; () banked
  8651  002A08  6F3B               	movwf	angleToPulse@a180& (0+255),b
  8652  002A0A  0E18               	movlw	24
  8653  002A0C  6F3C               	movwf	(angleToPulse@a180+1)& (0+255),b
  8654  002A0E  0E00               	movlw	0
  8655  002A10  6F3D               	movwf	(angleToPulse@a180+2)& (0+255),b
  8656  002A12  0E00               	movlw	0
  8657  002A14  6F3E               	movwf	(angleToPulse@a180+3)& (0+255),b
  8658                           
  8659                           ; BSR set to: 1
  8660                           ;servo.c: 38: return a000 + angle/180.0*(a180-a000) + offset;
  8661  002A16  C142  F133         	movff	angleToPulse@a000,??_angleToPulse
  8662  002A1A  C143  F134         	movff	angleToPulse@a000+1,??_angleToPulse+1
  8663  002A1E  C144  F135         	movff	angleToPulse@a000+2,??_angleToPulse+2
  8664  002A22  C145  F136         	movff	angleToPulse@a000+3,??_angleToPulse+3
  8665  002A26  0101               	movlb	1	; () banked
  8666  002A28  1F33               	comf	??_angleToPulse& (0+255),f,b
  8667  002A2A  1F34               	comf	(??_angleToPulse+1)& (0+255),f,b
  8668  002A2C  1F35               	comf	(??_angleToPulse+2)& (0+255),f,b
  8669  002A2E  1F36               	comf	(??_angleToPulse+3)& (0+255),f,b
  8670  002A30  2B33               	incf	??_angleToPulse& (0+255),f,b
  8671  002A32  0E00               	movlw	0
  8672  002A34  2334               	addwfc	(??_angleToPulse+1)& (0+255),f,b
  8673  002A36  2335               	addwfc	(??_angleToPulse+2)& (0+255),f,b
  8674  002A38  2336               	addwfc	(??_angleToPulse+3)& (0+255),f,b
  8675  002A3A  0101               	movlb	1	; () banked
  8676  002A3C  513B               	movf	angleToPulse@a180& (0+255),w,b
  8677  002A3E  0101               	movlb	1	; () banked
  8678  002A40  2533               	addwf	??_angleToPulse& (0+255),w,b
  8679  002A42  0100               	movlb	0	; () banked
  8680  002A44  6F96               	movwf	___altoft@c& (0+255),b
  8681  002A46  0101               	movlb	1	; () banked
  8682  002A48  513C               	movf	(angleToPulse@a180+1)& (0+255),w,b
  8683  002A4A  0101               	movlb	1	; () banked
  8684  002A4C  2134               	addwfc	(??_angleToPulse+1)& (0+255),w,b
  8685  002A4E  0100               	movlb	0	; () banked
  8686  002A50  6F97               	movwf	(___altoft@c+1)& (0+255),b
  8687  002A52  0101               	movlb	1	; () banked
  8688  002A54  513D               	movf	(angleToPulse@a180+2)& (0+255),w,b
  8689  002A56  0101               	movlb	1	; () banked
  8690  002A58  2135               	addwfc	(??_angleToPulse+2)& (0+255),w,b
  8691  002A5A  0100               	movlb	0	; () banked
  8692  002A5C  6F98               	movwf	(___altoft@c+2)& (0+255),b
  8693  002A5E  0101               	movlb	1	; () banked
  8694  002A60  513E               	movf	(angleToPulse@a180+3)& (0+255),w,b
  8695  002A62  0101               	movlb	1	; () banked
  8696  002A64  2136               	addwfc	(??_angleToPulse+3)& (0+255),w,b
  8697  002A66  0100               	movlb	0	; () banked
  8698  002A68  6F99               	movwf	(___altoft@c+3)& (0+255),b
  8699  002A6A  EC4D  F020         	call	___altoft	;wreg free
  8700  002A6E  C096  F0B2         	movff	?___altoft,___ftmul@f2
  8701  002A72  C097  F0B3         	movff	?___altoft+1,___ftmul@f2+1
  8702  002A76  C098  F0B4         	movff	?___altoft+2,___ftmul@f2+2
  8703  002A7A  0E00               	movlw	0
  8704  002A7C  0100               	movlb	0	; () banked
  8705  002A7E  6FA3               	movwf	___ftdiv@f2& (0+255),b
  8706  002A80  0E34               	movlw	52
  8707  002A82  0100               	movlb	0	; () banked
  8708  002A84  6FA4               	movwf	(___ftdiv@f2+1)& (0+255),b
  8709  002A86  0E43               	movlw	67
  8710  002A88  0100               	movlb	0	; () banked
  8711  002A8A  6FA5               	movwf	(___ftdiv@f2+2)& (0+255),b
  8712  002A8C  C0E3  F096         	movff	angleToPulse@angle,___awtoft@c
  8713  002A90  C0E4  F097         	movff	angleToPulse@angle+1,___awtoft@c+1
  8714  002A94  ECBD  F024         	call	___awtoft	;wreg free
  8715  002A98  C096  F0A0         	movff	?___awtoft,___ftdiv@f1
  8716  002A9C  C097  F0A1         	movff	?___awtoft+1,___ftdiv@f1+1
  8717  002AA0  C098  F0A2         	movff	?___awtoft+2,___ftdiv@f1+2
  8718  002AA4  EC52  F016         	call	___ftdiv	;wreg free
  8719  002AA8  C0A0  F0AF         	movff	?___ftdiv,___ftmul@f1
  8720  002AAC  C0A1  F0B0         	movff	?___ftdiv+1,___ftmul@f1+1
  8721  002AB0  C0A2  F0B1         	movff	?___ftdiv+2,___ftmul@f1+2
  8722  002AB4  ECA3  F015         	call	___ftmul	;wreg free
  8723  002AB8  C0AF  F0CB         	movff	?___ftmul,___ftadd@f2
  8724  002ABC  C0B0  F0CC         	movff	?___ftmul+1,___ftadd@f2+1
  8725  002AC0  C0B1  F0CD         	movff	?___ftmul+2,___ftadd@f2+2
  8726  002AC4  C142  F096         	movff	angleToPulse@a000,___altoft@c
  8727  002AC8  C143  F097         	movff	angleToPulse@a000+1,___altoft@c+1
  8728  002ACC  C144  F098         	movff	angleToPulse@a000+2,___altoft@c+2
  8729  002AD0  C145  F099         	movff	angleToPulse@a000+3,___altoft@c+3
  8730  002AD4  EC4D  F020         	call	___altoft	;wreg free
  8731  002AD8  C096  F0C8         	movff	?___altoft,___ftadd@f1
  8732  002ADC  C097  F0C9         	movff	?___altoft+1,___ftadd@f1+1
  8733  002AE0  C098  F0CA         	movff	?___altoft+2,___ftadd@f1+2
  8734  002AE4  EC30  F010         	call	___ftadd	;wreg free
  8735  002AE8  C0C8  F13F         	movff	?___ftadd,_angleToPulse$1311
  8736  002AEC  C0C9  F140         	movff	?___ftadd+1,_angleToPulse$1311+1
  8737  002AF0  C0CA  F141         	movff	?___ftadd+2,_angleToPulse$1311+2
  8738                           
  8739                           ;servo.c: 38: return a000 + angle/180.0*(a180-a000) + offset;
  8740  002AF4  C137  F096         	movff	angleToPulse@offset,___altoft@c
  8741  002AF8  C138  F097         	movff	angleToPulse@offset+1,___altoft@c+1
  8742  002AFC  C139  F098         	movff	angleToPulse@offset+2,___altoft@c+2
  8743  002B00  C13A  F099         	movff	angleToPulse@offset+3,___altoft@c+3
  8744  002B04  EC4D  F020         	call	___altoft	;wreg free
  8745  002B08  C096  F0CB         	movff	?___altoft,___ftadd@f2
  8746  002B0C  C097  F0CC         	movff	?___altoft+1,___ftadd@f2+1
  8747  002B10  C098  F0CD         	movff	?___altoft+2,___ftadd@f2+2
  8748  002B14  C13F  F0C8         	movff	_angleToPulse$1311,___ftadd@f1
  8749  002B18  C140  F0C9         	movff	_angleToPulse$1311+1,___ftadd@f1+1
  8750  002B1C  C141  F0CA         	movff	_angleToPulse$1311+2,___ftadd@f1+2
  8751  002B20  EC30  F010         	call	___ftadd	;wreg free
  8752  002B24  C0C8  F0D4         	movff	?___ftadd,___fttol@f1
  8753  002B28  C0C9  F0D5         	movff	?___ftadd+1,___fttol@f1+1
  8754  002B2C  C0CA  F0D6         	movff	?___ftadd+2,___fttol@f1+2
  8755  002B30  ECF8  F016         	call	___fttol	;wreg free
  8756  002B34  C0D4  F0E3         	movff	?___fttol,?_angleToPulse
  8757  002B38  C0D5  F0E4         	movff	?___fttol+1,?_angleToPulse+1
  8758  002B3C  C0D6  F0E5         	movff	?___fttol+2,?_angleToPulse+2
  8759  002B40  C0D7  F0E6         	movff	?___fttol+3,?_angleToPulse+3
  8760  002B44  0012               	return	
  8761  002B46                     __end_of_angleToPulse:
  8762                           	opt stack 0
  8763                           tblptru	equ	0xFF8
  8764                           tblptrh	equ	0xFF7
  8765                           tblptrl	equ	0xFF6
  8766                           tablat	equ	0xFF5
  8767                           prodh	equ	0xFF4
  8768                           prodl	equ	0xFF3
  8769                           intcon	equ	0xFF2
  8770                           postinc0	equ	0xFEE
  8771                           wreg	equ	0xFE8
  8772                           postdec1	equ	0xFE5
  8773                           fsr1l	equ	0xFE1
  8774                           indf2	equ	0xFDF
  8775                           postinc2	equ	0xFDE
  8776                           postdec2	equ	0xFDD
  8777                           fsr2h	equ	0xFDA
  8778                           fsr2l	equ	0xFD9
  8779                           status	equ	0xFD8
  8780                           
  8781 ;; *************** function ___fttol *****************
  8782 ;; Defined at:
  8783 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  8784 ;; Parameters:    Size  Location     Type
  8785 ;;  f1              3   84[BANK0 ] float 
  8786 ;; Auto vars:     Size  Location     Type
  8787 ;;  lval            4   94[BANK0 ] unsigned long 
  8788 ;;  exp1            1   98[BANK0 ] unsigned char 
  8789 ;;  sign1           1   93[BANK0 ] unsigned char 
  8790 ;; Return value:  Size  Location     Type
  8791 ;;                  4   84[BANK0 ] long 
  8792 ;; Registers used:
  8793 ;;		wreg, status,2, status,0
  8794 ;; Tracked objects:
  8795 ;;		On entry : 0/0
  8796 ;;		On exit  : 0/0
  8797 ;;		Unchanged: 0/0
  8798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8799 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8800 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8801 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8802 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8803 ;;Total ram usage:       15 bytes
  8804 ;; Hardware stack levels used:    1
  8805 ;; Hardware stack levels required when called:    6
  8806 ;; This function calls:
  8807 ;;		Nothing
  8808 ;; This function is called by:
  8809 ;;		_angleToPulse
  8810 ;;		_printf
  8811 ;; This function uses a non-reentrant model
  8812 ;;
  8813                           
  8814                           	psect	text28
  8815  002DF0                     __ptext28:
  8816                           	opt stack 0
  8817  002DF0                     ___fttol:
  8818                           	opt stack 21
  8819                           
  8820                           ;incstack = 0
  8821  002DF0  C0D6  F0D8         	movff	___fttol@f1+2,??___fttol
  8822  002DF4  0100               	movlb	0	; () banked
  8823  002DF6  6BD9               	clrf	(??___fttol+1)& (0+255),b
  8824  002DF8  6BDA               	clrf	(??___fttol+2)& (0+255),b
  8825  002DFA  0100               	movlb	0	; () banked
  8826  002DFC  35D5               	rlcf	(___fttol@f1+1)& (0+255),w,b
  8827  002DFE  0100               	movlb	0	; () banked
  8828  002E00  37D8               	rlcf	??___fttol& (0+255),f,b
  8829  002E02  E301               	bnc	u4041
  8830  002E04  81D9               	bsf	(??___fttol+1)& (0+255),0,b
  8831  002E06                     u4041:
  8832  002E06  0100               	movlb	0	; () banked
  8833  002E08  51D8               	movf	??___fttol& (0+255),w,b
  8834  002E0A  0100               	movlb	0	; () banked
  8835  002E0C  6FE2               	movwf	___fttol@exp1& (0+255),b
  8836  002E0E  0100               	movlb	0	; () banked
  8837  002E10  51E2               	movf	___fttol@exp1& (0+255),w,b
  8838  002E12  A4D8               	btfss	status,2,c
  8839  002E14  D00A               	goto	l4420
  8840                           
  8841                           ; BSR set to: 0
  8842  002E16  0E00               	movlw	0
  8843  002E18  0100               	movlb	0	; () banked
  8844  002E1A  6FD4               	movwf	?___fttol& (0+255),b
  8845  002E1C  0E00               	movlw	0
  8846  002E1E  6FD5               	movwf	(?___fttol+1)& (0+255),b
  8847  002E20  0E00               	movlw	0
  8848  002E22  6FD6               	movwf	(?___fttol+2)& (0+255),b
  8849  002E24  0E00               	movlw	0
  8850  002E26  6FD7               	movwf	(?___fttol+3)& (0+255),b
  8851                           
  8852                           ; BSR set to: 0
  8853  002E28  0012               	return	
  8854  002E2A                     l4420:
  8855                           
  8856                           ; BSR set to: 0
  8857  002E2A  0E17               	movlw	23
  8858  002E2C  0100               	movlb	0	; () banked
  8859  002E2E  6FD8               	movwf	??___fttol& (0+255),b
  8860  002E30  C0D4  F0D9         	movff	___fttol@f1,??___fttol+1
  8861  002E34  C0D5  F0DA         	movff	___fttol@f1+1,??___fttol+2
  8862  002E38  C0D6  F0DB         	movff	___fttol@f1+2,??___fttol+3
  8863  002E3C  0100               	movlb	0	; () banked
  8864  002E3E  29D8               	incf	??___fttol& (0+255),w,b
  8865  002E40  0100               	movlb	0	; () banked
  8866  002E42  6FDC               	movwf	(??___fttol+4)& (0+255),b
  8867  002E44  D005               	goto	u4060
  8868  002E46                     u4065:
  8869  002E46  0100               	movlb	0	; () banked
  8870  002E48  90D8               	bcf	status,0,c
  8871  002E4A  33DB               	rrcf	(??___fttol+3)& (0+255),f,b
  8872  002E4C  33DA               	rrcf	(??___fttol+2)& (0+255),f,b
  8873  002E4E  33D9               	rrcf	(??___fttol+1)& (0+255),f,b
  8874  002E50                     u4060:
  8875  002E50  0100               	movlb	0	; () banked
  8876  002E52  2FDC               	decfsz	(??___fttol+4)& (0+255),f,b
  8877  002E54  D7F8               	goto	u4065
  8878  002E56  0100               	movlb	0	; () banked
  8879  002E58  51D9               	movf	(??___fttol+1)& (0+255),w,b
  8880  002E5A  0100               	movlb	0	; () banked
  8881  002E5C  6FDD               	movwf	___fttol@sign1& (0+255),b
  8882                           
  8883                           ; BSR set to: 0
  8884  002E5E  0100               	movlb	0	; () banked
  8885  002E60  8FD5               	bsf	(___fttol@f1+1)& (0+255),7,b
  8886                           
  8887                           ; BSR set to: 0
  8888  002E62  0EFF               	movlw	255
  8889  002E64  0100               	movlb	0	; () banked
  8890  002E66  17D4               	andwf	___fttol@f1& (0+255),f,b
  8891  002E68  0EFF               	movlw	255
  8892  002E6A  0100               	movlb	0	; () banked
  8893  002E6C  17D5               	andwf	(___fttol@f1+1)& (0+255),f,b
  8894  002E6E  0E00               	movlw	0
  8895  002E70  0100               	movlb	0	; () banked
  8896  002E72  17D6               	andwf	(___fttol@f1+2)& (0+255),f,b
  8897                           
  8898                           ; BSR set to: 0
  8899  002E74  0100               	movlb	0	; () banked
  8900  002E76  51D4               	movf	___fttol@f1& (0+255),w,b
  8901  002E78  0100               	movlb	0	; () banked
  8902  002E7A  6FDE               	movwf	___fttol@lval& (0+255),b
  8903  002E7C  0100               	movlb	0	; () banked
  8904  002E7E  51D5               	movf	(___fttol@f1+1)& (0+255),w,b
  8905  002E80  0100               	movlb	0	; () banked
  8906  002E82  6FDF               	movwf	(___fttol@lval+1)& (0+255),b
  8907  002E84  0100               	movlb	0	; () banked
  8908  002E86  51D6               	movf	(___fttol@f1+2)& (0+255),w,b
  8909  002E88  0100               	movlb	0	; () banked
  8910  002E8A  6FE0               	movwf	(___fttol@lval+2)& (0+255),b
  8911  002E8C  0100               	movlb	0	; () banked
  8912  002E8E  6BE1               	clrf	(___fttol@lval+3)& (0+255),b
  8913                           
  8914                           ; BSR set to: 0
  8915  002E90  0E8E               	movlw	142
  8916  002E92  0100               	movlb	0	; () banked
  8917  002E94  5FE2               	subwf	___fttol@exp1& (0+255),f,b
  8918                           
  8919                           ; BSR set to: 0
  8920  002E96  0100               	movlb	0	; () banked
  8921  002E98  AFE2               	btfss	___fttol@exp1& (0+255),7,b
  8922  002E9A  D01A               	goto	l4442
  8923                           
  8924                           ; BSR set to: 0
  8925  002E9C  0100               	movlb	0	; () banked
  8926  002E9E  51E2               	movf	___fttol@exp1& (0+255),w,b
  8927  002EA0  0A80               	xorlw	128
  8928  002EA2  0F8F               	addlw	143
  8929  002EA4  B0D8               	btfsc	status,0,c
  8930  002EA6  D00A               	goto	l4438
  8931                           
  8932                           ; BSR set to: 0
  8933  002EA8  0E00               	movlw	0
  8934  002EAA  0100               	movlb	0	; () banked
  8935  002EAC  6FD4               	movwf	?___fttol& (0+255),b
  8936  002EAE  0E00               	movlw	0
  8937  002EB0  6FD5               	movwf	(?___fttol+1)& (0+255),b
  8938  002EB2  0E00               	movlw	0
  8939  002EB4  6FD6               	movwf	(?___fttol+2)& (0+255),b
  8940  002EB6  0E00               	movlw	0
  8941  002EB8  6FD7               	movwf	(?___fttol+3)& (0+255),b
  8942                           
  8943                           ; BSR set to: 0
  8944  002EBA  0012               	return	
  8945  002EBC                     l4438:
  8946                           
  8947                           ; BSR set to: 0
  8948  002EBC  0100               	movlb	0	; () banked
  8949  002EBE  90D8               	bcf	status,0,c
  8950  002EC0  33E1               	rrcf	(___fttol@lval+3)& (0+255),f,b
  8951  002EC2  33E0               	rrcf	(___fttol@lval+2)& (0+255),f,b
  8952  002EC4  33DF               	rrcf	(___fttol@lval+1)& (0+255),f,b
  8953  002EC6  33DE               	rrcf	___fttol@lval& (0+255),f,b
  8954                           
  8955                           ; BSR set to: 0
  8956  002EC8  0100               	movlb	0	; () banked
  8957  002ECA  3FE2               	incfsz	___fttol@exp1& (0+255),f,b
  8958  002ECC  D7F7               	goto	l4438
  8959                           
  8960                           ; BSR set to: 0
  8961  002ECE  D01B               	goto	l4452
  8962  002ED0                     l4442:
  8963                           
  8964                           ; BSR set to: 0
  8965  002ED0  0E17               	movlw	23
  8966  002ED2  0100               	movlb	0	; () banked
  8967  002ED4  65E2               	cpfsgt	___fttol@exp1& (0+255),b
  8968  002ED6  D012               	goto	l4450
  8969                           
  8970                           ; BSR set to: 0
  8971  002ED8  0E00               	movlw	0
  8972  002EDA  0100               	movlb	0	; () banked
  8973  002EDC  6FD4               	movwf	?___fttol& (0+255),b
  8974  002EDE  0E00               	movlw	0
  8975  002EE0  6FD5               	movwf	(?___fttol+1)& (0+255),b
  8976  002EE2  0E00               	movlw	0
  8977  002EE4  6FD6               	movwf	(?___fttol+2)& (0+255),b
  8978  002EE6  0E00               	movlw	0
  8979  002EE8  6FD7               	movwf	(?___fttol+3)& (0+255),b
  8980                           
  8981                           ; BSR set to: 0
  8982  002EEA  0012               	return	
  8983  002EEC                     l4448:
  8984                           
  8985                           ; BSR set to: 0
  8986  002EEC  0100               	movlb	0	; () banked
  8987  002EEE  90D8               	bcf	status,0,c
  8988  002EF0  37DE               	rlcf	___fttol@lval& (0+255),f,b
  8989  002EF2  37DF               	rlcf	(___fttol@lval+1)& (0+255),f,b
  8990  002EF4  37E0               	rlcf	(___fttol@lval+2)& (0+255),f,b
  8991  002EF6  37E1               	rlcf	(___fttol@lval+3)& (0+255),f,b
  8992  002EF8  0100               	movlb	0	; () banked
  8993  002EFA  07E2               	decf	___fttol@exp1& (0+255),f,b
  8994  002EFC                     l4450:
  8995                           
  8996                           ; BSR set to: 0
  8997  002EFC  0100               	movlb	0	; () banked
  8998  002EFE  51E2               	movf	___fttol@exp1& (0+255),w,b
  8999  002F00  0100               	movlb	0	; () banked
  9000  002F02  A4D8               	btfss	status,2,c
  9001  002F04  D7F3               	goto	l4448
  9002  002F06                     l4452:
  9003                           
  9004                           ; BSR set to: 0
  9005  002F06  0100               	movlb	0	; () banked
  9006  002F08  51DD               	movf	___fttol@sign1& (0+255),w,b
  9007  002F0A  0100               	movlb	0	; () banked
  9008  002F0C  B4D8               	btfsc	status,2,c
  9009  002F0E  D009               	goto	l4456
  9010                           
  9011                           ; BSR set to: 0
  9012  002F10  0100               	movlb	0	; () banked
  9013  002F12  1FE1               	comf	(___fttol@lval+3)& (0+255),f,b
  9014  002F14  1FE0               	comf	(___fttol@lval+2)& (0+255),f,b
  9015  002F16  1FDF               	comf	(___fttol@lval+1)& (0+255),f,b
  9016  002F18  6DDE               	negf	___fttol@lval& (0+255),b
  9017  002F1A  0E00               	movlw	0
  9018  002F1C  23DF               	addwfc	(___fttol@lval+1)& (0+255),f,b
  9019  002F1E  23E0               	addwfc	(___fttol@lval+2)& (0+255),f,b
  9020  002F20  23E1               	addwfc	(___fttol@lval+3)& (0+255),f,b
  9021  002F22                     l4456:
  9022                           
  9023                           ; BSR set to: 0
  9024  002F22  C0DE  F0D4         	movff	___fttol@lval,?___fttol
  9025  002F26  C0DF  F0D5         	movff	___fttol@lval+1,?___fttol+1
  9026  002F2A  C0E0  F0D6         	movff	___fttol@lval+2,?___fttol+2
  9027  002F2E  C0E1  F0D7         	movff	___fttol@lval+3,?___fttol+3
  9028  002F32  0012               	return	
  9029  002F34                     __end_of___fttol:
  9030                           	opt stack 0
  9031                           tblptru	equ	0xFF8
  9032                           tblptrh	equ	0xFF7
  9033                           tblptrl	equ	0xFF6
  9034                           tablat	equ	0xFF5
  9035                           prodh	equ	0xFF4
  9036                           prodl	equ	0xFF3
  9037                           intcon	equ	0xFF2
  9038                           postinc0	equ	0xFEE
  9039                           wreg	equ	0xFE8
  9040                           postdec1	equ	0xFE5
  9041                           fsr1l	equ	0xFE1
  9042                           indf2	equ	0xFDF
  9043                           postinc2	equ	0xFDE
  9044                           postdec2	equ	0xFDD
  9045                           fsr2h	equ	0xFDA
  9046                           fsr2l	equ	0xFD9
  9047                           status	equ	0xFD8
  9048                           
  9049 ;; *************** function ___ftmul *****************
  9050 ;; Defined at:
  9051 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  9052 ;; Parameters:    Size  Location     Type
  9053 ;;  f1              3   47[BANK0 ] float 
  9054 ;;  f2              3   50[BANK0 ] float 
  9055 ;; Auto vars:     Size  Location     Type
  9056 ;;  f3_as_produc    3   57[BANK0 ] unsigned um
  9057 ;;  sign            1   61[BANK0 ] unsigned char 
  9058 ;;  cntr            1   60[BANK0 ] unsigned char 
  9059 ;;  exp             1   56[BANK0 ] unsigned char 
  9060 ;; Return value:  Size  Location     Type
  9061 ;;                  3   47[BANK0 ] float 
  9062 ;; Registers used:
  9063 ;;		wreg, status,2, status,0, cstack
  9064 ;; Tracked objects:
  9065 ;;		On entry : 0/0
  9066 ;;		On exit  : 0/0
  9067 ;;		Unchanged: 0/0
  9068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9069 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9070 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9071 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9072 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9073 ;;Total ram usage:       15 bytes
  9074 ;; Hardware stack levels used:    1
  9075 ;; Hardware stack levels required when called:    7
  9076 ;; This function calls:
  9077 ;;		___ftpack
  9078 ;; This function is called by:
  9079 ;;		_sortBattery
  9080 ;;		_angleToPulse
  9081 ;;		_fround
  9082 ;;		_scale
  9083 ;;		_printf
  9084 ;; This function uses a non-reentrant model
  9085 ;;
  9086                           
  9087                           	psect	text29
  9088  002B46                     __ptext29:
  9089                           	opt stack 0
  9090  002B46                     ___ftmul:
  9091                           	opt stack 20
  9092                           
  9093                           ; BSR set to: 0
  9094                           ;incstack = 0
  9095  002B46  C0B1  F0B5         	movff	___ftmul@f1+2,??___ftmul
  9096  002B4A  0100               	movlb	0	; () banked
  9097  002B4C  6BB6               	clrf	(??___ftmul+1)& (0+255),b
  9098  002B4E  6BB7               	clrf	(??___ftmul+2)& (0+255),b
  9099  002B50  0100               	movlb	0	; () banked
  9100  002B52  35B0               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  9101  002B54  0100               	movlb	0	; () banked
  9102  002B56  37B5               	rlcf	??___ftmul& (0+255),f,b
  9103  002B58  E301               	bnc	u3851
  9104  002B5A  81B6               	bsf	(??___ftmul+1)& (0+255),0,b
  9105  002B5C                     u3851:
  9106  002B5C  0100               	movlb	0	; () banked
  9107  002B5E  51B5               	movf	??___ftmul& (0+255),w,b
  9108  002B60  0100               	movlb	0	; () banked
  9109  002B62  6FB8               	movwf	___ftmul@exp& (0+255),b
  9110  002B64  0100               	movlb	0	; () banked
  9111  002B66  51B8               	movf	___ftmul@exp& (0+255),w,b
  9112  002B68  A4D8               	btfss	status,2,c
  9113  002B6A  D00A               	goto	l4280
  9114                           
  9115                           ; BSR set to: 0
  9116  002B6C  0E00               	movlw	0
  9117  002B6E  0100               	movlb	0	; () banked
  9118  002B70  6FAF               	movwf	?___ftmul& (0+255),b
  9119  002B72  0E00               	movlw	0
  9120  002B74  0100               	movlb	0	; () banked
  9121  002B76  6FB0               	movwf	(?___ftmul+1)& (0+255),b
  9122  002B78  0E00               	movlw	0
  9123  002B7A  0100               	movlb	0	; () banked
  9124  002B7C  6FB1               	movwf	(?___ftmul+2)& (0+255),b
  9125                           
  9126                           ; BSR set to: 0
  9127  002B7E  0012               	return	
  9128  002B80                     l4280:
  9129                           
  9130                           ; BSR set to: 0
  9131  002B80  C0B4  F0B5         	movff	___ftmul@f2+2,??___ftmul
  9132  002B84  0100               	movlb	0	; () banked
  9133  002B86  6BB6               	clrf	(??___ftmul+1)& (0+255),b
  9134  002B88  6BB7               	clrf	(??___ftmul+2)& (0+255),b
  9135  002B8A  0100               	movlb	0	; () banked
  9136  002B8C  35B3               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  9137  002B8E  0100               	movlb	0	; () banked
  9138  002B90  37B5               	rlcf	??___ftmul& (0+255),f,b
  9139  002B92  E301               	bnc	u3871
  9140  002B94  81B6               	bsf	(??___ftmul+1)& (0+255),0,b
  9141  002B96                     u3871:
  9142  002B96  0100               	movlb	0	; () banked
  9143  002B98  51B5               	movf	??___ftmul& (0+255),w,b
  9144  002B9A  0100               	movlb	0	; () banked
  9145  002B9C  6FBD               	movwf	___ftmul@sign& (0+255),b
  9146  002B9E  0100               	movlb	0	; () banked
  9147  002BA0  51BD               	movf	___ftmul@sign& (0+255),w,b
  9148  002BA2  A4D8               	btfss	status,2,c
  9149  002BA4  D00A               	goto	l4286
  9150                           
  9151                           ; BSR set to: 0
  9152  002BA6  0E00               	movlw	0
  9153  002BA8  0100               	movlb	0	; () banked
  9154  002BAA  6FAF               	movwf	?___ftmul& (0+255),b
  9155  002BAC  0E00               	movlw	0
  9156  002BAE  0100               	movlb	0	; () banked
  9157  002BB0  6FB0               	movwf	(?___ftmul+1)& (0+255),b
  9158  002BB2  0E00               	movlw	0
  9159  002BB4  0100               	movlb	0	; () banked
  9160  002BB6  6FB1               	movwf	(?___ftmul+2)& (0+255),b
  9161                           
  9162                           ; BSR set to: 0
  9163  002BB8  0012               	return	
  9164  002BBA                     l4286:
  9165                           
  9166                           ; BSR set to: 0
  9167  002BBA  0100               	movlb	0	; () banked
  9168  002BBC  51BD               	movf	___ftmul@sign& (0+255),w,b
  9169  002BBE  0F7B               	addlw	123
  9170  002BC0  0100               	movlb	0	; () banked
  9171  002BC2  27B8               	addwf	___ftmul@exp& (0+255),f,b
  9172                           
  9173                           ; BSR set to: 0
  9174  002BC4  C0B1  F0BD         	movff	___ftmul@f1+2,___ftmul@sign
  9175  002BC8  0100               	movlb	0	; () banked
  9176  002BCA  51B4               	movf	(___ftmul@f2+2)& (0+255),w,b
  9177  002BCC  0100               	movlb	0	; () banked
  9178  002BCE  1BBD               	xorwf	___ftmul@sign& (0+255),f,b
  9179  002BD0  0E80               	movlw	128
  9180  002BD2  0100               	movlb	0	; () banked
  9181  002BD4  17BD               	andwf	___ftmul@sign& (0+255),f,b
  9182                           
  9183                           ; BSR set to: 0
  9184  002BD6  0100               	movlb	0	; () banked
  9185  002BD8  8FB0               	bsf	(___ftmul@f1+1)& (0+255),7,b
  9186                           
  9187                           ; BSR set to: 0
  9188  002BDA  0100               	movlb	0	; () banked
  9189  002BDC  8FB3               	bsf	(___ftmul@f2+1)& (0+255),7,b
  9190                           
  9191                           ; BSR set to: 0
  9192  002BDE  0EFF               	movlw	255
  9193  002BE0  0100               	movlb	0	; () banked
  9194  002BE2  17B2               	andwf	___ftmul@f2& (0+255),f,b
  9195  002BE4  0EFF               	movlw	255
  9196  002BE6  0100               	movlb	0	; () banked
  9197  002BE8  17B3               	andwf	(___ftmul@f2+1)& (0+255),f,b
  9198  002BEA  0E00               	movlw	0
  9199  002BEC  0100               	movlb	0	; () banked
  9200  002BEE  17B4               	andwf	(___ftmul@f2+2)& (0+255),f,b
  9201                           
  9202                           ; BSR set to: 0
  9203  002BF0  0E00               	movlw	0
  9204  002BF2  0100               	movlb	0	; () banked
  9205  002BF4  6FB9               	movwf	___ftmul@f3_as_product& (0+255),b
  9206  002BF6  0E00               	movlw	0
  9207  002BF8  0100               	movlb	0	; () banked
  9208  002BFA  6FBA               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  9209  002BFC  0E00               	movlw	0
  9210  002BFE  0100               	movlb	0	; () banked
  9211  002C00  6FBB               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  9212                           
  9213                           ; BSR set to: 0
  9214  002C02  0E07               	movlw	7
  9215  002C04  0100               	movlb	0	; () banked
  9216  002C06  6FBC               	movwf	___ftmul@cntr& (0+255),b
  9217  002C08                     l4300:
  9218                           
  9219                           ; BSR set to: 0
  9220  002C08  0100               	movlb	0	; () banked
  9221  002C0A  A1AF               	btfss	___ftmul@f1& (0+255),0,b
  9222  002C0C  D00C               	goto	l4304
  9223                           
  9224                           ; BSR set to: 0
  9225  002C0E  0100               	movlb	0	; () banked
  9226  002C10  51B2               	movf	___ftmul@f2& (0+255),w,b
  9227  002C12  0100               	movlb	0	; () banked
  9228  002C14  27B9               	addwf	___ftmul@f3_as_product& (0+255),f,b
  9229  002C16  0100               	movlb	0	; () banked
  9230  002C18  51B3               	movf	(___ftmul@f2+1)& (0+255),w,b
  9231  002C1A  0100               	movlb	0	; () banked
  9232  002C1C  23BA               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  9233  002C1E  0100               	movlb	0	; () banked
  9234  002C20  51B4               	movf	(___ftmul@f2+2)& (0+255),w,b
  9235  002C22  0100               	movlb	0	; () banked
  9236  002C24  23BB               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  9237  002C26                     l4304:
  9238                           
  9239                           ; BSR set to: 0
  9240  002C26  0100               	movlb	0	; () banked
  9241  002C28  90D8               	bcf	status,0,c
  9242  002C2A  33B1               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  9243  002C2C  33B0               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  9244  002C2E  33AF               	rrcf	___ftmul@f1& (0+255),f,b
  9245  002C30  0100               	movlb	0	; () banked
  9246  002C32  90D8               	bcf	status,0,c
  9247  002C34  37B2               	rlcf	___ftmul@f2& (0+255),f,b
  9248  002C36  37B3               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  9249  002C38  37B4               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  9250                           
  9251                           ; BSR set to: 0
  9252  002C3A  0100               	movlb	0	; () banked
  9253  002C3C  2FBC               	decfsz	___ftmul@cntr& (0+255),f,b
  9254  002C3E  D7E4               	goto	l4300
  9255                           
  9256                           ; BSR set to: 0
  9257                           
  9258                           ; BSR set to: 0
  9259  002C40  0E09               	movlw	9
  9260  002C42  0100               	movlb	0	; () banked
  9261  002C44  6FBC               	movwf	___ftmul@cntr& (0+255),b
  9262  002C46                     l4310:
  9263                           
  9264                           ; BSR set to: 0
  9265  002C46  0100               	movlb	0	; () banked
  9266  002C48  A1AF               	btfss	___ftmul@f1& (0+255),0,b
  9267  002C4A  D00C               	goto	l4314
  9268                           
  9269                           ; BSR set to: 0
  9270  002C4C  0100               	movlb	0	; () banked
  9271  002C4E  51B2               	movf	___ftmul@f2& (0+255),w,b
  9272  002C50  0100               	movlb	0	; () banked
  9273  002C52  27B9               	addwf	___ftmul@f3_as_product& (0+255),f,b
  9274  002C54  0100               	movlb	0	; () banked
  9275  002C56  51B3               	movf	(___ftmul@f2+1)& (0+255),w,b
  9276  002C58  0100               	movlb	0	; () banked
  9277  002C5A  23BA               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  9278  002C5C  0100               	movlb	0	; () banked
  9279  002C5E  51B4               	movf	(___ftmul@f2+2)& (0+255),w,b
  9280  002C60  0100               	movlb	0	; () banked
  9281  002C62  23BB               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  9282  002C64                     l4314:
  9283                           
  9284                           ; BSR set to: 0
  9285  002C64  0100               	movlb	0	; () banked
  9286  002C66  90D8               	bcf	status,0,c
  9287  002C68  33B1               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  9288  002C6A  33B0               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  9289  002C6C  33AF               	rrcf	___ftmul@f1& (0+255),f,b
  9290  002C6E  0100               	movlb	0	; () banked
  9291  002C70  90D8               	bcf	status,0,c
  9292  002C72  33BB               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  9293  002C74  33BA               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  9294  002C76  33B9               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  9295                           
  9296                           ; BSR set to: 0
  9297  002C78  0100               	movlb	0	; () banked
  9298  002C7A  2FBC               	decfsz	___ftmul@cntr& (0+255),f,b
  9299  002C7C  D7E4               	goto	l4310
  9300                           
  9301                           ; BSR set to: 0
  9302                           
  9303                           ; BSR set to: 0
  9304  002C7E  C0B9  F08E         	movff	___ftmul@f3_as_product,___ftpack@arg
  9305  002C82  C0BA  F08F         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9306  002C86  C0BB  F090         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9307  002C8A  C0B8  F091         	movff	___ftmul@exp,___ftpack@exp
  9308  002C8E  C0BD  F092         	movff	___ftmul@sign,___ftpack@sign
  9309  002C92  ECFF  F019         	call	___ftpack	;wreg free
  9310  002C96  C08E  F0AF         	movff	?___ftpack,?___ftmul
  9311  002C9A  C08F  F0B0         	movff	?___ftpack+1,?___ftmul+1
  9312  002C9E  C090  F0B1         	movff	?___ftpack+2,?___ftmul+2
  9313  002CA2  0012               	return	
  9314  002CA4                     __end_of___ftmul:
  9315                           	opt stack 0
  9316                           tblptru	equ	0xFF8
  9317                           tblptrh	equ	0xFF7
  9318                           tblptrl	equ	0xFF6
  9319                           tablat	equ	0xFF5
  9320                           prodh	equ	0xFF4
  9321                           prodl	equ	0xFF3
  9322                           intcon	equ	0xFF2
  9323                           postinc0	equ	0xFEE
  9324                           wreg	equ	0xFE8
  9325                           postdec1	equ	0xFE5
  9326                           fsr1l	equ	0xFE1
  9327                           indf2	equ	0xFDF
  9328                           postinc2	equ	0xFDE
  9329                           postdec2	equ	0xFDD
  9330                           fsr2h	equ	0xFDA
  9331                           fsr2l	equ	0xFD9
  9332                           status	equ	0xFD8
  9333                           
  9334 ;; *************** function ___ftdiv *****************
  9335 ;; Defined at:
  9336 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  9337 ;; Parameters:    Size  Location     Type
  9338 ;;  f1              3   32[BANK0 ] float 
  9339 ;;  f2              3   35[BANK0 ] float 
  9340 ;; Auto vars:     Size  Location     Type
  9341 ;;  f3              3   42[BANK0 ] float 
  9342 ;;  sign            1   46[BANK0 ] unsigned char 
  9343 ;;  exp             1   45[BANK0 ] unsigned char 
  9344 ;;  cntr            1   41[BANK0 ] unsigned char 
  9345 ;; Return value:  Size  Location     Type
  9346 ;;                  3   32[BANK0 ] float 
  9347 ;; Registers used:
  9348 ;;		wreg, status,2, status,0, cstack
  9349 ;; Tracked objects:
  9350 ;;		On entry : 0/0
  9351 ;;		On exit  : 0/0
  9352 ;;		Unchanged: 0/0
  9353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9354 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9355 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9356 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9357 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9358 ;;Total ram usage:       15 bytes
  9359 ;; Hardware stack levels used:    1
  9360 ;; Hardware stack levels required when called:    7
  9361 ;; This function calls:
  9362 ;;		___ftpack
  9363 ;; This function is called by:
  9364 ;;		_sortBattery
  9365 ;;		_angleToPulse
  9366 ;;		_testFrequency
  9367 ;; This function uses a non-reentrant model
  9368 ;;
  9369                           
  9370                           	psect	text30
  9371  002CA4                     __ptext30:
  9372                           	opt stack 0
  9373  002CA4                     ___ftdiv:
  9374                           	opt stack 20
  9375                           
  9376                           ;incstack = 0
  9377  002CA4  C0A2  F0A6         	movff	___ftdiv@f1+2,??___ftdiv
  9378  002CA8  0100               	movlb	0	; () banked
  9379  002CAA  6BA7               	clrf	(??___ftdiv+1)& (0+255),b
  9380  002CAC  6BA8               	clrf	(??___ftdiv+2)& (0+255),b
  9381  002CAE  0100               	movlb	0	; () banked
  9382  002CB0  35A1               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  9383  002CB2  0100               	movlb	0	; () banked
  9384  002CB4  37A6               	rlcf	??___ftdiv& (0+255),f,b
  9385  002CB6  E301               	bnc	u3801
  9386  002CB8  81A7               	bsf	(??___ftdiv+1)& (0+255),0,b
  9387  002CBA                     u3801:
  9388  002CBA  0100               	movlb	0	; () banked
  9389  002CBC  51A6               	movf	??___ftdiv& (0+255),w,b
  9390  002CBE  0100               	movlb	0	; () banked
  9391  002CC0  6FAD               	movwf	___ftdiv@exp& (0+255),b
  9392  002CC2  0100               	movlb	0	; () banked
  9393  002CC4  51AD               	movf	___ftdiv@exp& (0+255),w,b
  9394  002CC6  A4D8               	btfss	status,2,c
  9395  002CC8  D00A               	goto	l4234
  9396                           
  9397                           ; BSR set to: 0
  9398  002CCA  0E00               	movlw	0
  9399  002CCC  0100               	movlb	0	; () banked
  9400  002CCE  6FA0               	movwf	?___ftdiv& (0+255),b
  9401  002CD0  0E00               	movlw	0
  9402  002CD2  0100               	movlb	0	; () banked
  9403  002CD4  6FA1               	movwf	(?___ftdiv+1)& (0+255),b
  9404  002CD6  0E00               	movlw	0
  9405  002CD8  0100               	movlb	0	; () banked
  9406  002CDA  6FA2               	movwf	(?___ftdiv+2)& (0+255),b
  9407                           
  9408                           ; BSR set to: 0
  9409  002CDC  0012               	return	
  9410  002CDE                     l4234:
  9411                           
  9412                           ; BSR set to: 0
  9413  002CDE  C0A5  F0A6         	movff	___ftdiv@f2+2,??___ftdiv
  9414  002CE2  0100               	movlb	0	; () banked
  9415  002CE4  6BA7               	clrf	(??___ftdiv+1)& (0+255),b
  9416  002CE6  6BA8               	clrf	(??___ftdiv+2)& (0+255),b
  9417  002CE8  0100               	movlb	0	; () banked
  9418  002CEA  35A4               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  9419  002CEC  0100               	movlb	0	; () banked
  9420  002CEE  37A6               	rlcf	??___ftdiv& (0+255),f,b
  9421  002CF0  E301               	bnc	u3821
  9422  002CF2  81A7               	bsf	(??___ftdiv+1)& (0+255),0,b
  9423  002CF4                     u3821:
  9424  002CF4  0100               	movlb	0	; () banked
  9425  002CF6  51A6               	movf	??___ftdiv& (0+255),w,b
  9426  002CF8  0100               	movlb	0	; () banked
  9427  002CFA  6FAE               	movwf	___ftdiv@sign& (0+255),b
  9428  002CFC  0100               	movlb	0	; () banked
  9429  002CFE  51AE               	movf	___ftdiv@sign& (0+255),w,b
  9430  002D00  A4D8               	btfss	status,2,c
  9431  002D02  D00A               	goto	l4240
  9432                           
  9433                           ; BSR set to: 0
  9434  002D04  0E00               	movlw	0
  9435  002D06  0100               	movlb	0	; () banked
  9436  002D08  6FA0               	movwf	?___ftdiv& (0+255),b
  9437  002D0A  0E00               	movlw	0
  9438  002D0C  0100               	movlb	0	; () banked
  9439  002D0E  6FA1               	movwf	(?___ftdiv+1)& (0+255),b
  9440  002D10  0E00               	movlw	0
  9441  002D12  0100               	movlb	0	; () banked
  9442  002D14  6FA2               	movwf	(?___ftdiv+2)& (0+255),b
  9443                           
  9444                           ; BSR set to: 0
  9445  002D16  0012               	return	
  9446  002D18                     l4240:
  9447                           
  9448                           ; BSR set to: 0
  9449  002D18  0E00               	movlw	0
  9450  002D1A  0100               	movlb	0	; () banked
  9451  002D1C  6FAA               	movwf	___ftdiv@f3& (0+255),b
  9452  002D1E  0E00               	movlw	0
  9453  002D20  0100               	movlb	0	; () banked
  9454  002D22  6FAB               	movwf	(___ftdiv@f3+1)& (0+255),b
  9455  002D24  0E00               	movlw	0
  9456  002D26  0100               	movlb	0	; () banked
  9457  002D28  6FAC               	movwf	(___ftdiv@f3+2)& (0+255),b
  9458                           
  9459                           ; BSR set to: 0
  9460  002D2A  0100               	movlb	0	; () banked
  9461  002D2C  51AE               	movf	___ftdiv@sign& (0+255),w,b
  9462  002D2E  0F89               	addlw	137
  9463  002D30  0100               	movlb	0	; () banked
  9464  002D32  5FAD               	subwf	___ftdiv@exp& (0+255),f,b
  9465                           
  9466                           ; BSR set to: 0
  9467  002D34  C0A2  F0AE         	movff	___ftdiv@f1+2,___ftdiv@sign
  9468                           
  9469                           ; BSR set to: 0
  9470  002D38  0100               	movlb	0	; () banked
  9471  002D3A  51A5               	movf	(___ftdiv@f2+2)& (0+255),w,b
  9472  002D3C  0100               	movlb	0	; () banked
  9473  002D3E  1BAE               	xorwf	___ftdiv@sign& (0+255),f,b
  9474                           
  9475                           ; BSR set to: 0
  9476  002D40  0E80               	movlw	128
  9477  002D42  0100               	movlb	0	; () banked
  9478  002D44  17AE               	andwf	___ftdiv@sign& (0+255),f,b
  9479                           
  9480                           ; BSR set to: 0
  9481  002D46  0100               	movlb	0	; () banked
  9482  002D48  8FA1               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  9483                           
  9484                           ; BSR set to: 0
  9485  002D4A  0EFF               	movlw	255
  9486  002D4C  0100               	movlb	0	; () banked
  9487  002D4E  17A0               	andwf	___ftdiv@f1& (0+255),f,b
  9488  002D50  0EFF               	movlw	255
  9489  002D52  0100               	movlb	0	; () banked
  9490  002D54  17A1               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  9491  002D56  0E00               	movlw	0
  9492  002D58  0100               	movlb	0	; () banked
  9493  002D5A  17A2               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  9494                           
  9495                           ; BSR set to: 0
  9496  002D5C  0100               	movlb	0	; () banked
  9497  002D5E  8FA4               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  9498                           
  9499                           ; BSR set to: 0
  9500  002D60  0EFF               	movlw	255
  9501  002D62  0100               	movlb	0	; () banked
  9502  002D64  17A3               	andwf	___ftdiv@f2& (0+255),f,b
  9503  002D66  0EFF               	movlw	255
  9504  002D68  0100               	movlb	0	; () banked
  9505  002D6A  17A4               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  9506  002D6C  0E00               	movlw	0
  9507  002D6E  0100               	movlb	0	; () banked
  9508  002D70  17A5               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  9509                           
  9510                           ; BSR set to: 0
  9511  002D72  0E18               	movlw	24
  9512  002D74  0100               	movlb	0	; () banked
  9513  002D76  6FA9               	movwf	___ftdiv@cntr& (0+255),b
  9514  002D78                     l4260:
  9515                           
  9516                           ; BSR set to: 0
  9517  002D78  0100               	movlb	0	; () banked
  9518  002D7A  90D8               	bcf	status,0,c
  9519  002D7C  37AA               	rlcf	___ftdiv@f3& (0+255),f,b
  9520  002D7E  37AB               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  9521  002D80  37AC               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  9522                           
  9523                           ; BSR set to: 0
  9524  002D82  0100               	movlb	0	; () banked
  9525  002D84  51A3               	movf	___ftdiv@f2& (0+255),w,b
  9526  002D86  0100               	movlb	0	; () banked
  9527  002D88  5DA0               	subwf	___ftdiv@f1& (0+255),w,b
  9528  002D8A  0100               	movlb	0	; () banked
  9529  002D8C  51A4               	movf	(___ftdiv@f2+1)& (0+255),w,b
  9530  002D8E  0100               	movlb	0	; () banked
  9531  002D90  59A1               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  9532  002D92  0100               	movlb	0	; () banked
  9533  002D94  51A5               	movf	(___ftdiv@f2+2)& (0+255),w,b
  9534  002D96  0100               	movlb	0	; () banked
  9535  002D98  59A2               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  9536  002D9A  A0D8               	btfss	status,0,c
  9537  002D9C  D00E               	goto	l1016
  9538                           
  9539                           ; BSR set to: 0
  9540  002D9E  0100               	movlb	0	; () banked
  9541  002DA0  51A3               	movf	___ftdiv@f2& (0+255),w,b
  9542  002DA2  0100               	movlb	0	; () banked
  9543  002DA4  5FA0               	subwf	___ftdiv@f1& (0+255),f,b
  9544  002DA6  0100               	movlb	0	; () banked
  9545  002DA8  51A4               	movf	(___ftdiv@f2+1)& (0+255),w,b
  9546  002DAA  0100               	movlb	0	; () banked
  9547  002DAC  5BA1               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  9548  002DAE  0100               	movlb	0	; () banked
  9549  002DB0  51A5               	movf	(___ftdiv@f2+2)& (0+255),w,b
  9550  002DB2  0100               	movlb	0	; () banked
  9551  002DB4  5BA2               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  9552                           
  9553                           ; BSR set to: 0
  9554  002DB6  0100               	movlb	0	; () banked
  9555  002DB8  81AA               	bsf	___ftdiv@f3& (0+255),0,b
  9556  002DBA                     l1016:
  9557                           
  9558                           ; BSR set to: 0
  9559  002DBA  0100               	movlb	0	; () banked
  9560  002DBC  90D8               	bcf	status,0,c
  9561  002DBE  37A0               	rlcf	___ftdiv@f1& (0+255),f,b
  9562  002DC0  37A1               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  9563  002DC2  37A2               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  9564                           
  9565                           ; BSR set to: 0
  9566  002DC4  0100               	movlb	0	; () banked
  9567  002DC6  2FA9               	decfsz	___ftdiv@cntr& (0+255),f,b
  9568  002DC8  D7D7               	goto	l4260
  9569                           
  9570                           ; BSR set to: 0
  9571                           
  9572                           ; BSR set to: 0
  9573  002DCA  C0AA  F08E         	movff	___ftdiv@f3,___ftpack@arg
  9574  002DCE  C0AB  F08F         	movff	___ftdiv@f3+1,___ftpack@arg+1
  9575  002DD2  C0AC  F090         	movff	___ftdiv@f3+2,___ftpack@arg+2
  9576  002DD6  C0AD  F091         	movff	___ftdiv@exp,___ftpack@exp
  9577  002DDA  C0AE  F092         	movff	___ftdiv@sign,___ftpack@sign
  9578  002DDE  ECFF  F019         	call	___ftpack	;wreg free
  9579  002DE2  C08E  F0A0         	movff	?___ftpack,?___ftdiv
  9580  002DE6  C08F  F0A1         	movff	?___ftpack+1,?___ftdiv+1
  9581  002DEA  C090  F0A2         	movff	?___ftpack+2,?___ftdiv+2
  9582  002DEE  0012               	return	
  9583  002DF0                     __end_of___ftdiv:
  9584                           	opt stack 0
  9585                           tblptru	equ	0xFF8
  9586                           tblptrh	equ	0xFF7
  9587                           tblptrl	equ	0xFF6
  9588                           tablat	equ	0xFF5
  9589                           prodh	equ	0xFF4
  9590                           prodl	equ	0xFF3
  9591                           intcon	equ	0xFF2
  9592                           postinc0	equ	0xFEE
  9593                           wreg	equ	0xFE8
  9594                           postdec1	equ	0xFE5
  9595                           fsr1l	equ	0xFE1
  9596                           indf2	equ	0xFDF
  9597                           postinc2	equ	0xFDE
  9598                           postdec2	equ	0xFDD
  9599                           fsr2h	equ	0xFDA
  9600                           fsr2l	equ	0xFD9
  9601                           status	equ	0xFD8
  9602                           
  9603 ;; *************** function ___ftadd *****************
  9604 ;; Defined at:
  9605 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  9606 ;; Parameters:    Size  Location     Type
  9607 ;;  f1              3   72[BANK0 ] float 
  9608 ;;  f2              3   75[BANK0 ] float 
  9609 ;; Auto vars:     Size  Location     Type
  9610 ;;  exp1            1   83[BANK0 ] unsigned char 
  9611 ;;  exp2            1   82[BANK0 ] unsigned char 
  9612 ;;  sign            1   81[BANK0 ] unsigned char 
  9613 ;; Return value:  Size  Location     Type
  9614 ;;                  3   72[BANK0 ] float 
  9615 ;; Registers used:
  9616 ;;		wreg, status,2, status,0, cstack
  9617 ;; Tracked objects:
  9618 ;;		On entry : 0/0
  9619 ;;		On exit  : 0/0
  9620 ;;		Unchanged: 0/0
  9621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9622 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9623 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9624 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9625 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9626 ;;Total ram usage:       12 bytes
  9627 ;; Hardware stack levels used:    1
  9628 ;; Hardware stack levels required when called:    7
  9629 ;; This function calls:
  9630 ;;		___ftpack
  9631 ;; This function is called by:
  9632 ;;		_angleToPulse
  9633 ;;		_printf
  9634 ;;		___ftsub
  9635 ;; This function uses a non-reentrant model
  9636 ;;
  9637                           
  9638                           	psect	text31
  9639  002060                     __ptext31:
  9640                           	opt stack 0
  9641  002060                     ___ftadd:
  9642                           	opt stack 20
  9643                           
  9644                           ;incstack = 0
  9645  002060  C0CA  F0CE         	movff	___ftadd@f1+2,??___ftadd
  9646  002064  0100               	movlb	0	; () banked
  9647  002066  6BCF               	clrf	(??___ftadd+1)& (0+255),b
  9648  002068  6BD0               	clrf	(??___ftadd+2)& (0+255),b
  9649  00206A  0100               	movlb	0	; () banked
  9650  00206C  35C9               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  9651  00206E  0100               	movlb	0	; () banked
  9652  002070  37CE               	rlcf	??___ftadd& (0+255),f,b
  9653  002072  E301               	bnc	u3591
  9654  002074  81CF               	bsf	(??___ftadd+1)& (0+255),0,b
  9655  002076                     u3591:
  9656  002076  0100               	movlb	0	; () banked
  9657  002078  51CE               	movf	??___ftadd& (0+255),w,b
  9658  00207A  0100               	movlb	0	; () banked
  9659  00207C  6FD3               	movwf	___ftadd@exp1& (0+255),b
  9660  00207E  C0CD  F0CE         	movff	___ftadd@f2+2,??___ftadd
  9661  002082  0100               	movlb	0	; () banked
  9662  002084  6BCF               	clrf	(??___ftadd+1)& (0+255),b
  9663  002086  6BD0               	clrf	(??___ftadd+2)& (0+255),b
  9664  002088  0100               	movlb	0	; () banked
  9665  00208A  35CC               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  9666  00208C  0100               	movlb	0	; () banked
  9667  00208E  37CE               	rlcf	??___ftadd& (0+255),f,b
  9668  002090  E301               	bnc	u3601
  9669  002092  81CF               	bsf	(??___ftadd+1)& (0+255),0,b
  9670  002094                     u3601:
  9671  002094  0100               	movlb	0	; () banked
  9672  002096  51CE               	movf	??___ftadd& (0+255),w,b
  9673  002098  0100               	movlb	0	; () banked
  9674  00209A  6FD2               	movwf	___ftadd@exp2& (0+255),b
  9675                           
  9676                           ; BSR set to: 0
  9677  00209C  0100               	movlb	0	; () banked
  9678  00209E  51D3               	movf	___ftadd@exp1& (0+255),w,b
  9679  0020A0  0100               	movlb	0	; () banked
  9680  0020A2  B4D8               	btfsc	status,2,c
  9681  0020A4  D011               	goto	l981
  9682                           
  9683                           ; BSR set to: 0
  9684  0020A6  0100               	movlb	0	; () banked
  9685  0020A8  51D2               	movf	___ftadd@exp2& (0+255),w,b
  9686  0020AA  0100               	movlb	0	; () banked
  9687  0020AC  5DD3               	subwf	___ftadd@exp1& (0+255),w,b
  9688  0020AE  B0D8               	btfsc	status,0,c
  9689  0020B0  D012               	goto	l4166
  9690                           
  9691                           ; BSR set to: 0
  9692  0020B2  0100               	movlb	0	; () banked
  9693  0020B4  51D3               	movf	___ftadd@exp1& (0+255),w,b
  9694  0020B6  0800               	sublw	0
  9695  0020B8  0100               	movlb	0	; () banked
  9696  0020BA  25D2               	addwf	___ftadd@exp2& (0+255),w,b
  9697  0020BC  0100               	movlb	0	; () banked
  9698  0020BE  6FCE               	movwf	??___ftadd& (0+255),b
  9699  0020C0  0E18               	movlw	24
  9700  0020C2  0100               	movlb	0	; () banked
  9701  0020C4  65CE               	cpfsgt	??___ftadd& (0+255),b
  9702  0020C6  D007               	goto	l4166
  9703  0020C8                     l981:
  9704                           
  9705                           ; BSR set to: 0
  9706  0020C8  C0CB  F0C8         	movff	___ftadd@f2,?___ftadd
  9707  0020CC  C0CC  F0C9         	movff	___ftadd@f2+1,?___ftadd+1
  9708  0020D0  C0CD  F0CA         	movff	___ftadd@f2+2,?___ftadd+2
  9709  0020D4  0012               	return	
  9710  0020D6                     l4166:
  9711                           
  9712                           ; BSR set to: 0
  9713  0020D6  0100               	movlb	0	; () banked
  9714  0020D8  51D2               	movf	___ftadd@exp2& (0+255),w,b
  9715  0020DA  0100               	movlb	0	; () banked
  9716  0020DC  B4D8               	btfsc	status,2,c
  9717  0020DE  D011               	goto	l985
  9718                           
  9719                           ; BSR set to: 0
  9720  0020E0  0100               	movlb	0	; () banked
  9721  0020E2  51D3               	movf	___ftadd@exp1& (0+255),w,b
  9722  0020E4  0100               	movlb	0	; () banked
  9723  0020E6  5DD2               	subwf	___ftadd@exp2& (0+255),w,b
  9724  0020E8  B0D8               	btfsc	status,0,c
  9725  0020EA  D012               	goto	l4172
  9726                           
  9727                           ; BSR set to: 0
  9728  0020EC  0100               	movlb	0	; () banked
  9729  0020EE  51D2               	movf	___ftadd@exp2& (0+255),w,b
  9730  0020F0  0800               	sublw	0
  9731  0020F2  0100               	movlb	0	; () banked
  9732  0020F4  25D3               	addwf	___ftadd@exp1& (0+255),w,b
  9733  0020F6  0100               	movlb	0	; () banked
  9734  0020F8  6FCE               	movwf	??___ftadd& (0+255),b
  9735  0020FA  0E18               	movlw	24
  9736  0020FC  0100               	movlb	0	; () banked
  9737  0020FE  65CE               	cpfsgt	??___ftadd& (0+255),b
  9738  002100  D007               	goto	l4172
  9739  002102                     l985:
  9740                           
  9741                           ; BSR set to: 0
  9742  002102  C0C8  F0C8         	movff	___ftadd@f1,?___ftadd
  9743  002106  C0C9  F0C9         	movff	___ftadd@f1+1,?___ftadd+1
  9744  00210A  C0CA  F0CA         	movff	___ftadd@f1+2,?___ftadd+2
  9745  00210E  0012               	return	
  9746  002110                     l4172:
  9747                           
  9748                           ; BSR set to: 0
  9749  002110  0E06               	movlw	6
  9750  002112  0100               	movlb	0	; () banked
  9751  002114  6FD1               	movwf	___ftadd@sign& (0+255),b
  9752                           
  9753                           ; BSR set to: 0
  9754  002116  0100               	movlb	0	; () banked
  9755  002118  AFCA               	btfss	(___ftadd@f1+2)& (0+255),7,b
  9756  00211A  D002               	goto	l4178
  9757                           
  9758                           ; BSR set to: 0
  9759  00211C  0100               	movlb	0	; () banked
  9760  00211E  8FD1               	bsf	___ftadd@sign& (0+255),7,b
  9761  002120                     l4178:
  9762                           
  9763                           ; BSR set to: 0
  9764  002120  0100               	movlb	0	; () banked
  9765  002122  AFCD               	btfss	(___ftadd@f2+2)& (0+255),7,b
  9766  002124  D002               	goto	l987
  9767                           
  9768                           ; BSR set to: 0
  9769  002126  0100               	movlb	0	; () banked
  9770  002128  8DD1               	bsf	___ftadd@sign& (0+255),6,b
  9771  00212A                     l987:
  9772                           
  9773                           ; BSR set to: 0
  9774  00212A  0100               	movlb	0	; () banked
  9775  00212C  8FC9               	bsf	(___ftadd@f1+1)& (0+255),7,b
  9776                           
  9777                           ; BSR set to: 0
  9778  00212E  0EFF               	movlw	255
  9779  002130  0100               	movlb	0	; () banked
  9780  002132  17C8               	andwf	___ftadd@f1& (0+255),f,b
  9781  002134  0EFF               	movlw	255
  9782  002136  0100               	movlb	0	; () banked
  9783  002138  17C9               	andwf	(___ftadd@f1+1)& (0+255),f,b
  9784  00213A  0E00               	movlw	0
  9785  00213C  0100               	movlb	0	; () banked
  9786  00213E  17CA               	andwf	(___ftadd@f1+2)& (0+255),f,b
  9787  002140  0100               	movlb	0	; () banked
  9788  002142  8FCC               	bsf	(___ftadd@f2+1)& (0+255),7,b
  9789                           
  9790                           ; BSR set to: 0
  9791  002144  0EFF               	movlw	255
  9792  002146  0100               	movlb	0	; () banked
  9793  002148  17CB               	andwf	___ftadd@f2& (0+255),f,b
  9794  00214A  0EFF               	movlw	255
  9795  00214C  0100               	movlb	0	; () banked
  9796  00214E  17CC               	andwf	(___ftadd@f2+1)& (0+255),f,b
  9797  002150  0E00               	movlw	0
  9798  002152  0100               	movlb	0	; () banked
  9799  002154  17CD               	andwf	(___ftadd@f2+2)& (0+255),f,b
  9800                           
  9801                           ; BSR set to: 0
  9802  002156  0100               	movlb	0	; () banked
  9803  002158  51D2               	movf	___ftadd@exp2& (0+255),w,b
  9804  00215A  0100               	movlb	0	; () banked
  9805  00215C  5DD3               	subwf	___ftadd@exp1& (0+255),w,b
  9806  00215E  B0D8               	btfsc	status,0,c
  9807  002160  D025               	goto	l4198
  9808  002162                     l4188:
  9809                           
  9810                           ; BSR set to: 0
  9811  002162  0100               	movlb	0	; () banked
  9812  002164  90D8               	bcf	status,0,c
  9813  002166  37CB               	rlcf	___ftadd@f2& (0+255),f,b
  9814  002168  37CC               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  9815  00216A  37CD               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  9816  00216C  0100               	movlb	0	; () banked
  9817  00216E  07D2               	decf	___ftadd@exp2& (0+255),f,b
  9818                           
  9819                           ; BSR set to: 0
  9820  002170  0100               	movlb	0	; () banked
  9821  002172  51D3               	movf	___ftadd@exp1& (0+255),w,b
  9822  002174  0100               	movlb	0	; () banked
  9823  002176  19D2               	xorwf	___ftadd@exp2& (0+255),w,b
  9824  002178  B4D8               	btfsc	status,2,c
  9825  00217A  D011               	goto	l4196
  9826                           
  9827                           ; BSR set to: 0
  9828  00217C  0100               	movlb	0	; () banked
  9829  00217E  07D1               	decf	___ftadd@sign& (0+255),f,b
  9830  002180  C0D1  F0CE         	movff	___ftadd@sign,??___ftadd
  9831  002184  0E07               	movlw	7
  9832  002186  0100               	movlb	0	; () banked
  9833  002188  17CE               	andwf	??___ftadd& (0+255),f,b
  9834  00218A  B4D8               	btfsc	status,2,c
  9835  00218C  D008               	goto	l4196
  9836  00218E  D7E9               	goto	l4188
  9837  002190                     l4194:
  9838                           
  9839                           ; BSR set to: 0
  9840  002190  0100               	movlb	0	; () banked
  9841  002192  90D8               	bcf	status,0,c
  9842  002194  33CA               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  9843  002196  33C9               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  9844  002198  33C8               	rrcf	___ftadd@f1& (0+255),f,b
  9845  00219A  0100               	movlb	0	; () banked
  9846  00219C  2BD3               	incf	___ftadd@exp1& (0+255),f,b
  9847  00219E                     l4196:
  9848                           
  9849                           ; BSR set to: 0
  9850  00219E  0100               	movlb	0	; () banked
  9851  0021A0  51D2               	movf	___ftadd@exp2& (0+255),w,b
  9852  0021A2  0100               	movlb	0	; () banked
  9853  0021A4  19D3               	xorwf	___ftadd@exp1& (0+255),w,b
  9854  0021A6  B4D8               	btfsc	status,2,c
  9855  0021A8  D02B               	goto	l996
  9856  0021AA  D7F2               	goto	l4194
  9857  0021AC                     l4198:
  9858                           
  9859                           ; BSR set to: 0
  9860  0021AC  0100               	movlb	0	; () banked
  9861  0021AE  51D3               	movf	___ftadd@exp1& (0+255),w,b
  9862  0021B0  0100               	movlb	0	; () banked
  9863  0021B2  5DD2               	subwf	___ftadd@exp2& (0+255),w,b
  9864  0021B4  B0D8               	btfsc	status,0,c
  9865  0021B6  D024               	goto	l996
  9866  0021B8                     l4200:
  9867                           
  9868                           ; BSR set to: 0
  9869  0021B8  0100               	movlb	0	; () banked
  9870  0021BA  90D8               	bcf	status,0,c
  9871  0021BC  37C8               	rlcf	___ftadd@f1& (0+255),f,b
  9872  0021BE  37C9               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  9873  0021C0  37CA               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  9874  0021C2  0100               	movlb	0	; () banked
  9875  0021C4  07D3               	decf	___ftadd@exp1& (0+255),f,b
  9876                           
  9877                           ; BSR set to: 0
  9878  0021C6  0100               	movlb	0	; () banked
  9879  0021C8  51D3               	movf	___ftadd@exp1& (0+255),w,b
  9880  0021CA  0100               	movlb	0	; () banked
  9881  0021CC  19D2               	xorwf	___ftadd@exp2& (0+255),w,b
  9882  0021CE  B4D8               	btfsc	status,2,c
  9883  0021D0  D011               	goto	l4208
  9884                           
  9885                           ; BSR set to: 0
  9886  0021D2  0100               	movlb	0	; () banked
  9887  0021D4  07D1               	decf	___ftadd@sign& (0+255),f,b
  9888  0021D6  C0D1  F0CE         	movff	___ftadd@sign,??___ftadd
  9889  0021DA  0E07               	movlw	7
  9890  0021DC  0100               	movlb	0	; () banked
  9891  0021DE  17CE               	andwf	??___ftadd& (0+255),f,b
  9892  0021E0  B4D8               	btfsc	status,2,c
  9893  0021E2  D008               	goto	l4208
  9894  0021E4  D7E9               	goto	l4200
  9895  0021E6                     l4206:
  9896                           
  9897                           ; BSR set to: 0
  9898  0021E6  0100               	movlb	0	; () banked
  9899  0021E8  90D8               	bcf	status,0,c
  9900  0021EA  33CD               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  9901  0021EC  33CC               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  9902  0021EE  33CB               	rrcf	___ftadd@f2& (0+255),f,b
  9903  0021F0  0100               	movlb	0	; () banked
  9904  0021F2  2BD2               	incf	___ftadd@exp2& (0+255),f,b
  9905  0021F4                     l4208:
  9906                           
  9907                           ; BSR set to: 0
  9908  0021F4  0100               	movlb	0	; () banked
  9909  0021F6  51D2               	movf	___ftadd@exp2& (0+255),w,b
  9910  0021F8  0100               	movlb	0	; () banked
  9911  0021FA  19D3               	xorwf	___ftadd@exp1& (0+255),w,b
  9912  0021FC  A4D8               	btfss	status,2,c
  9913  0021FE  D7F3               	goto	l4206
  9914  002200                     l996:
  9915                           
  9916                           ; BSR set to: 0
  9917  002200  0100               	movlb	0	; () banked
  9918  002202  AFD1               	btfss	___ftadd@sign& (0+255),7,b
  9919  002204  D012               	goto	l1005
  9920                           
  9921                           ; BSR set to: 0
  9922  002206  0EFF               	movlw	255
  9923  002208  0100               	movlb	0	; () banked
  9924  00220A  1BC8               	xorwf	___ftadd@f1& (0+255),f,b
  9925  00220C  0EFF               	movlw	255
  9926  00220E  0100               	movlb	0	; () banked
  9927  002210  1BC9               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  9928  002212  0EFF               	movlw	255
  9929  002214  0100               	movlb	0	; () banked
  9930  002216  1BCA               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  9931  002218  0E01               	movlw	1
  9932  00221A  0100               	movlb	0	; () banked
  9933  00221C  27C8               	addwf	___ftadd@f1& (0+255),f,b
  9934  00221E  0E00               	movlw	0
  9935  002220  0100               	movlb	0	; () banked
  9936  002222  23C9               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  9937  002224  0E00               	movlw	0
  9938  002226  0100               	movlb	0	; () banked
  9939  002228  23CA               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  9940  00222A                     l1005:
  9941                           
  9942                           ; BSR set to: 0
  9943  00222A  0100               	movlb	0	; () banked
  9944  00222C  ADD1               	btfss	___ftadd@sign& (0+255),6,b
  9945  00222E  D012               	goto	l4214
  9946                           
  9947                           ; BSR set to: 0
  9948  002230  0EFF               	movlw	255
  9949  002232  0100               	movlb	0	; () banked
  9950  002234  1BCB               	xorwf	___ftadd@f2& (0+255),f,b
  9951  002236  0EFF               	movlw	255
  9952  002238  0100               	movlb	0	; () banked
  9953  00223A  1BCC               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  9954  00223C  0EFF               	movlw	255
  9955  00223E  0100               	movlb	0	; () banked
  9956  002240  1BCD               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  9957  002242  0E01               	movlw	1
  9958  002244  0100               	movlb	0	; () banked
  9959  002246  27CB               	addwf	___ftadd@f2& (0+255),f,b
  9960  002248  0E00               	movlw	0
  9961  00224A  0100               	movlb	0	; () banked
  9962  00224C  23CC               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9963  00224E  0E00               	movlw	0
  9964  002250  0100               	movlb	0	; () banked
  9965  002252  23CD               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9966  002254                     l4214:
  9967                           
  9968                           ; BSR set to: 0
  9969  002254  0E00               	movlw	0
  9970  002256  0100               	movlb	0	; () banked
  9971  002258  6FD1               	movwf	___ftadd@sign& (0+255),b
  9972                           
  9973                           ; BSR set to: 0
  9974  00225A  0100               	movlb	0	; () banked
  9975  00225C  51C8               	movf	___ftadd@f1& (0+255),w,b
  9976  00225E  0100               	movlb	0	; () banked
  9977  002260  27CB               	addwf	___ftadd@f2& (0+255),f,b
  9978  002262  0100               	movlb	0	; () banked
  9979  002264  51C9               	movf	(___ftadd@f1+1)& (0+255),w,b
  9980  002266  0100               	movlb	0	; () banked
  9981  002268  23CC               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9982  00226A  0100               	movlb	0	; () banked
  9983  00226C  51CA               	movf	(___ftadd@f1+2)& (0+255),w,b
  9984  00226E  0100               	movlb	0	; () banked
  9985  002270  23CD               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9986                           
  9987                           ; BSR set to: 0
  9988  002272  0100               	movlb	0	; () banked
  9989  002274  AFCD               	btfss	(___ftadd@f2+2)& (0+255),7,b
  9990  002276  D015               	goto	l4224
  9991                           
  9992                           ; BSR set to: 0
  9993  002278  0EFF               	movlw	255
  9994  00227A  0100               	movlb	0	; () banked
  9995  00227C  1BCB               	xorwf	___ftadd@f2& (0+255),f,b
  9996  00227E  0EFF               	movlw	255
  9997  002280  0100               	movlb	0	; () banked
  9998  002282  1BCC               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  9999  002284  0EFF               	movlw	255
 10000  002286  0100               	movlb	0	; () banked
 10001  002288  1BCD               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10002  00228A  0E01               	movlw	1
 10003  00228C  0100               	movlb	0	; () banked
 10004  00228E  27CB               	addwf	___ftadd@f2& (0+255),f,b
 10005  002290  0E00               	movlw	0
 10006  002292  0100               	movlb	0	; () banked
 10007  002294  23CC               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10008  002296  0E00               	movlw	0
 10009  002298  0100               	movlb	0	; () banked
 10010  00229A  23CD               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10011                           
 10012                           ; BSR set to: 0
 10013  00229C  0E01               	movlw	1
 10014  00229E  0100               	movlb	0	; () banked
 10015  0022A0  6FD1               	movwf	___ftadd@sign& (0+255),b
 10016  0022A2                     l4224:
 10017                           
 10018                           ; BSR set to: 0
 10019  0022A2  C0CB  F08E         	movff	___ftadd@f2,___ftpack@arg
 10020  0022A6  C0CC  F08F         	movff	___ftadd@f2+1,___ftpack@arg+1
 10021  0022AA  C0CD  F090         	movff	___ftadd@f2+2,___ftpack@arg+2
 10022  0022AE  C0D3  F091         	movff	___ftadd@exp1,___ftpack@exp
 10023  0022B2  C0D1  F092         	movff	___ftadd@sign,___ftpack@sign
 10024  0022B6  ECFF  F019         	call	___ftpack	;wreg free
 10025  0022BA  C08E  F0C8         	movff	?___ftpack,?___ftadd
 10026  0022BE  C08F  F0C9         	movff	?___ftpack+1,?___ftadd+1
 10027  0022C2  C090  F0CA         	movff	?___ftpack+2,?___ftadd+2
 10028  0022C6  0012               	return	
 10029  0022C8                     __end_of___ftadd:
 10030                           	opt stack 0
 10031                           tblptru	equ	0xFF8
 10032                           tblptrh	equ	0xFF7
 10033                           tblptrl	equ	0xFF6
 10034                           tablat	equ	0xFF5
 10035                           prodh	equ	0xFF4
 10036                           prodl	equ	0xFF3
 10037                           intcon	equ	0xFF2
 10038                           postinc0	equ	0xFEE
 10039                           wreg	equ	0xFE8
 10040                           postdec1	equ	0xFE5
 10041                           fsr1l	equ	0xFE1
 10042                           indf2	equ	0xFDF
 10043                           postinc2	equ	0xFDE
 10044                           postdec2	equ	0xFDD
 10045                           fsr2h	equ	0xFDA
 10046                           fsr2l	equ	0xFD9
 10047                           status	equ	0xFD8
 10048                           
 10049 ;; *************** function ___awtoft *****************
 10050 ;; Defined at:
 10051 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 10052 ;; Parameters:    Size  Location     Type
 10053 ;;  c               2   22[BANK0 ] int 
 10054 ;; Auto vars:     Size  Location     Type
 10055 ;;  sign            1   25[BANK0 ] unsigned char 
 10056 ;; Return value:  Size  Location     Type
 10057 ;;                  3   22[BANK0 ] float 
 10058 ;; Registers used:
 10059 ;;		wreg, status,2, status,0, cstack
 10060 ;; Tracked objects:
 10061 ;;		On entry : 0/0
 10062 ;;		On exit  : 0/0
 10063 ;;		Unchanged: 0/0
 10064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10065 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10066 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10068 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10069 ;;Total ram usage:        4 bytes
 10070 ;; Hardware stack levels used:    1
 10071 ;; Hardware stack levels required when called:    7
 10072 ;; This function calls:
 10073 ;;		___ftpack
 10074 ;; This function is called by:
 10075 ;;		_angleToPulse
 10076 ;; This function uses a non-reentrant model
 10077 ;;
 10078                           
 10079                           	psect	text32
 10080  00497A                     __ptext32:
 10081                           	opt stack 0
 10082  00497A                     ___awtoft:
 10083                           	opt stack 20
 10084                           
 10085                           ;incstack = 0
 10086  00497A  0E00               	movlw	0
 10087  00497C  0100               	movlb	0	; () banked
 10088  00497E  6F99               	movwf	___awtoft@sign& (0+255),b
 10089                           
 10090                           ; BSR set to: 0
 10091  004980  0100               	movlb	0	; () banked
 10092  004982  AF97               	btfss	(___awtoft@c+1)& (0+255),7,b
 10093  004984  D008               	goto	l4410
 10094                           
 10095                           ; BSR set to: 0
 10096  004986  0100               	movlb	0	; () banked
 10097  004988  6D96               	negf	___awtoft@c& (0+255),b
 10098  00498A  1F97               	comf	(___awtoft@c+1)& (0+255),f,b
 10099  00498C  B0D8               	btfsc	status,0,c
 10100  00498E  2B97               	incf	(___awtoft@c+1)& (0+255),f,b
 10101                           
 10102                           ; BSR set to: 0
 10103  004990  0E01               	movlw	1
 10104  004992  0100               	movlb	0	; () banked
 10105  004994  6F99               	movwf	___awtoft@sign& (0+255),b
 10106  004996                     l4410:
 10107                           
 10108                           ; BSR set to: 0
 10109  004996  C096  F08E         	movff	___awtoft@c,___ftpack@arg
 10110  00499A  C097  F08F         	movff	___awtoft@c+1,___ftpack@arg+1
 10111  00499E  0100               	movlb	0	; () banked
 10112  0049A0  6B90               	clrf	(___ftpack@arg+2)& (0+255),b
 10113  0049A2  0E8E               	movlw	142
 10114  0049A4  0100               	movlb	0	; () banked
 10115  0049A6  6F91               	movwf	___ftpack@exp& (0+255),b
 10116  0049A8  C099  F092         	movff	___awtoft@sign,___ftpack@sign
 10117  0049AC  ECFF  F019         	call	___ftpack	;wreg free
 10118  0049B0  C08E  F096         	movff	?___ftpack,?___awtoft
 10119  0049B4  C08F  F097         	movff	?___ftpack+1,?___awtoft+1
 10120  0049B8  C090  F098         	movff	?___ftpack+2,?___awtoft+2
 10121  0049BC  0012               	return	
 10122  0049BE                     __end_of___awtoft:
 10123                           	opt stack 0
 10124                           tblptru	equ	0xFF8
 10125                           tblptrh	equ	0xFF7
 10126                           tblptrl	equ	0xFF6
 10127                           tablat	equ	0xFF5
 10128                           prodh	equ	0xFF4
 10129                           prodl	equ	0xFF3
 10130                           intcon	equ	0xFF2
 10131                           postinc0	equ	0xFEE
 10132                           wreg	equ	0xFE8
 10133                           postdec1	equ	0xFE5
 10134                           fsr1l	equ	0xFE1
 10135                           indf2	equ	0xFDF
 10136                           postinc2	equ	0xFDE
 10137                           postdec2	equ	0xFDD
 10138                           fsr2h	equ	0xFDA
 10139                           fsr2l	equ	0xFD9
 10140                           status	equ	0xFD8
 10141                           
 10142 ;; *************** function ___altoft *****************
 10143 ;; Defined at:
 10144 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 10145 ;; Parameters:    Size  Location     Type
 10146 ;;  c               4   22[BANK0 ] long 
 10147 ;; Auto vars:     Size  Location     Type
 10148 ;;  sign            1   31[BANK0 ] unsigned char 
 10149 ;;  exp             1   30[BANK0 ] unsigned char 
 10150 ;; Return value:  Size  Location     Type
 10151 ;;                  3   22[BANK0 ] float 
 10152 ;; Registers used:
 10153 ;;		wreg, status,2, status,0, cstack
 10154 ;; Tracked objects:
 10155 ;;		On entry : 0/0
 10156 ;;		On exit  : 0/0
 10157 ;;		Unchanged: 0/0
 10158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10159 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10160 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10161 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10162 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10163 ;;Total ram usage:       10 bytes
 10164 ;; Hardware stack levels used:    1
 10165 ;; Hardware stack levels required when called:    7
 10166 ;; This function calls:
 10167 ;;		___ftpack
 10168 ;; This function is called by:
 10169 ;;		_sortBattery
 10170 ;;		_angleToPulse
 10171 ;;		_testFrequency
 10172 ;; This function uses a non-reentrant model
 10173 ;;
 10174                           
 10175                           	psect	text33
 10176  00409A                     __ptext33:
 10177                           	opt stack 0
 10178  00409A                     ___altoft:
 10179                           	opt stack 20
 10180                           
 10181                           ;incstack = 0
 10182  00409A  0E00               	movlw	0
 10183  00409C  0100               	movlb	0	; () banked
 10184  00409E  6F9F               	movwf	___altoft@sign& (0+255),b
 10185  0040A0  0E8E               	movlw	142
 10186  0040A2  0100               	movlb	0	; () banked
 10187  0040A4  6F9E               	movwf	___altoft@exp& (0+255),b
 10188                           
 10189                           ; BSR set to: 0
 10190  0040A6  0100               	movlb	0	; () banked
 10191  0040A8  AF99               	btfss	(___altoft@c+3)& (0+255),7,b
 10192  0040AA  D015               	goto	l4152
 10193                           
 10194                           ; BSR set to: 0
 10195  0040AC  0100               	movlb	0	; () banked
 10196  0040AE  1F99               	comf	(___altoft@c+3)& (0+255),f,b
 10197  0040B0  1F98               	comf	(___altoft@c+2)& (0+255),f,b
 10198  0040B2  1F97               	comf	(___altoft@c+1)& (0+255),f,b
 10199  0040B4  6D96               	negf	___altoft@c& (0+255),b
 10200  0040B6  0E00               	movlw	0
 10201  0040B8  2397               	addwfc	(___altoft@c+1)& (0+255),f,b
 10202  0040BA  2398               	addwfc	(___altoft@c+2)& (0+255),f,b
 10203  0040BC  2399               	addwfc	(___altoft@c+3)& (0+255),f,b
 10204                           
 10205                           ; BSR set to: 0
 10206  0040BE  0E01               	movlw	1
 10207  0040C0  0100               	movlb	0	; () banked
 10208  0040C2  6F9F               	movwf	___altoft@sign& (0+255),b
 10209                           
 10210                           ; BSR set to: 0
 10211  0040C4  D008               	goto	l4152
 10212  0040C6                     l4150:
 10213                           
 10214                           ; BSR set to: 0
 10215  0040C6  0100               	movlb	0	; () banked
 10216  0040C8  90D8               	bcf	status,0,c
 10217  0040CA  3399               	rrcf	(___altoft@c+3)& (0+255),f,b
 10218  0040CC  3398               	rrcf	(___altoft@c+2)& (0+255),f,b
 10219  0040CE  3397               	rrcf	(___altoft@c+1)& (0+255),f,b
 10220  0040D0  3396               	rrcf	___altoft@c& (0+255),f,b
 10221  0040D2  0100               	movlb	0	; () banked
 10222  0040D4  2B9E               	incf	___altoft@exp& (0+255),f,b
 10223  0040D6                     l4152:
 10224                           
 10225                           ; BSR set to: 0
 10226  0040D6  0E00               	movlw	0
 10227  0040D8  0100               	movlb	0	; () banked
 10228  0040DA  1596               	andwf	___altoft@c& (0+255),w,b
 10229  0040DC  0100               	movlb	0	; () banked
 10230  0040DE  6F9A               	movwf	??___altoft& (0+255),b
 10231  0040E0  0E00               	movlw	0
 10232  0040E2  0100               	movlb	0	; () banked
 10233  0040E4  1597               	andwf	(___altoft@c+1)& (0+255),w,b
 10234  0040E6  0100               	movlb	0	; () banked
 10235  0040E8  6F9B               	movwf	(??___altoft+1)& (0+255),b
 10236  0040EA  0E00               	movlw	0
 10237  0040EC  0100               	movlb	0	; () banked
 10238  0040EE  1598               	andwf	(___altoft@c+2)& (0+255),w,b
 10239  0040F0  0100               	movlb	0	; () banked
 10240  0040F2  6F9C               	movwf	(??___altoft+2)& (0+255),b
 10241  0040F4  0EFF               	movlw	255
 10242  0040F6  0100               	movlb	0	; () banked
 10243  0040F8  1599               	andwf	(___altoft@c+3)& (0+255),w,b
 10244  0040FA  0100               	movlb	0	; () banked
 10245  0040FC  6F9D               	movwf	(??___altoft+3)& (0+255),b
 10246  0040FE  0100               	movlb	0	; () banked
 10247  004100  519A               	movf	??___altoft& (0+255),w,b
 10248  004102  0100               	movlb	0	; () banked
 10249  004104  119B               	iorwf	(??___altoft+1)& (0+255),w,b
 10250  004106  0100               	movlb	0	; () banked
 10251  004108  119C               	iorwf	(??___altoft+2)& (0+255),w,b
 10252  00410A  0100               	movlb	0	; () banked
 10253  00410C  119D               	iorwf	(??___altoft+3)& (0+255),w,b
 10254  00410E  A4D8               	btfss	status,2,c
 10255  004110  D7DA               	goto	l4150
 10256                           
 10257                           ; BSR set to: 0
 10258                           
 10259                           ; BSR set to: 0
 10260  004112  C096  F08E         	movff	___altoft@c,___ftpack@arg
 10261  004116  C097  F08F         	movff	___altoft@c+1,___ftpack@arg+1
 10262  00411A  C098  F090         	movff	___altoft@c+2,___ftpack@arg+2
 10263  00411E  C09E  F091         	movff	___altoft@exp,___ftpack@exp
 10264  004122  C09F  F092         	movff	___altoft@sign,___ftpack@sign
 10265  004126  ECFF  F019         	call	___ftpack	;wreg free
 10266  00412A  C08E  F096         	movff	?___ftpack,?___altoft
 10267  00412E  C08F  F097         	movff	?___ftpack+1,?___altoft+1
 10268  004132  C090  F098         	movff	?___ftpack+2,?___altoft+2
 10269  004136  0012               	return	
 10270  004138                     __end_of___altoft:
 10271                           	opt stack 0
 10272                           tblptru	equ	0xFF8
 10273                           tblptrh	equ	0xFF7
 10274                           tblptrl	equ	0xFF6
 10275                           tablat	equ	0xFF5
 10276                           prodh	equ	0xFF4
 10277                           prodl	equ	0xFF3
 10278                           intcon	equ	0xFF2
 10279                           postinc0	equ	0xFEE
 10280                           wreg	equ	0xFE8
 10281                           postdec1	equ	0xFE5
 10282                           fsr1l	equ	0xFE1
 10283                           indf2	equ	0xFDF
 10284                           postinc2	equ	0xFDE
 10285                           postdec2	equ	0xFDD
 10286                           fsr2h	equ	0xFDA
 10287                           fsr2l	equ	0xFD9
 10288                           status	equ	0xFD8
 10289                           
 10290 ;; *************** function ___ftpack *****************
 10291 ;; Defined at:
 10292 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 10293 ;; Parameters:    Size  Location     Type
 10294 ;;  arg             3   14[BANK0 ] unsigned um
 10295 ;;  exp             1   17[BANK0 ] unsigned char 
 10296 ;;  sign            1   18[BANK0 ] unsigned char 
 10297 ;; Auto vars:     Size  Location     Type
 10298 ;;		None
 10299 ;; Return value:  Size  Location     Type
 10300 ;;                  3   14[BANK0 ] float 
 10301 ;; Registers used:
 10302 ;;		wreg, status,2, status,0
 10303 ;; Tracked objects:
 10304 ;;		On entry : 0/0
 10305 ;;		On exit  : 0/0
 10306 ;;		Unchanged: 0/0
 10307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10308 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10310 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10311 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10312 ;;Total ram usage:        8 bytes
 10313 ;; Hardware stack levels used:    1
 10314 ;; Hardware stack levels required when called:    6
 10315 ;; This function calls:
 10316 ;;		Nothing
 10317 ;; This function is called by:
 10318 ;;		___altoft
 10319 ;;		___awtoft
 10320 ;;		___ftadd
 10321 ;;		___ftdiv
 10322 ;;		___ftmul
 10323 ;;		___lltoft
 10324 ;; This function uses a non-reentrant model
 10325 ;;
 10326                           
 10327                           	psect	text34
 10328  0033FE                     __ptext34:
 10329                           	opt stack 0
 10330  0033FE                     ___ftpack:
 10331                           	opt stack 20
 10332                           
 10333                           ;incstack = 0
 10334  0033FE  0100               	movlb	0	; () banked
 10335  003400  5191               	movf	___ftpack@exp& (0+255),w,b
 10336  003402  0100               	movlb	0	; () banked
 10337  003404  B4D8               	btfsc	status,2,c
 10338  003406  D008               	goto	l4084
 10339                           
 10340                           ; BSR set to: 0
 10341  003408  0100               	movlb	0	; () banked
 10342  00340A  518E               	movf	___ftpack@arg& (0+255),w,b
 10343  00340C  0100               	movlb	0	; () banked
 10344  00340E  118F               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 10345  003410  0100               	movlb	0	; () banked
 10346  003412  1190               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 10347  003414  A4D8               	btfss	status,2,c
 10348  003416  D011               	goto	l4090
 10349  003418                     l4084:
 10350                           
 10351                           ; BSR set to: 0
 10352  003418  0E00               	movlw	0
 10353  00341A  0100               	movlb	0	; () banked
 10354  00341C  6F8E               	movwf	?___ftpack& (0+255),b
 10355  00341E  0E00               	movlw	0
 10356  003420  0100               	movlb	0	; () banked
 10357  003422  6F8F               	movwf	(?___ftpack+1)& (0+255),b
 10358  003424  0E00               	movlw	0
 10359  003426  0100               	movlb	0	; () banked
 10360  003428  6F90               	movwf	(?___ftpack+2)& (0+255),b
 10361                           
 10362                           ; BSR set to: 0
 10363  00342A  0012               	return	
 10364  00342C                     l4088:
 10365                           
 10366                           ; BSR set to: 0
 10367  00342C  0100               	movlb	0	; () banked
 10368  00342E  2B91               	incf	___ftpack@exp& (0+255),f,b
 10369  003430  0100               	movlb	0	; () banked
 10370  003432  90D8               	bcf	status,0,c
 10371  003434  3390               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 10372  003436  338F               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 10373  003438  338E               	rrcf	___ftpack@arg& (0+255),f,b
 10374  00343A                     l4090:
 10375                           
 10376                           ; BSR set to: 0
 10377  00343A  0E00               	movlw	0
 10378  00343C  0100               	movlb	0	; () banked
 10379  00343E  158E               	andwf	___ftpack@arg& (0+255),w,b
 10380  003440  0100               	movlb	0	; () banked
 10381  003442  6F93               	movwf	??___ftpack& (0+255),b
 10382  003444  0E00               	movlw	0
 10383  003446  0100               	movlb	0	; () banked
 10384  003448  158F               	andwf	(___ftpack@arg+1)& (0+255),w,b
 10385  00344A  0100               	movlb	0	; () banked
 10386  00344C  6F94               	movwf	(??___ftpack+1)& (0+255),b
 10387  00344E  0EFE               	movlw	254
 10388  003450  0100               	movlb	0	; () banked
 10389  003452  1590               	andwf	(___ftpack@arg+2)& (0+255),w,b
 10390  003454  0100               	movlb	0	; () banked
 10391  003456  6F95               	movwf	(??___ftpack+2)& (0+255),b
 10392  003458  0100               	movlb	0	; () banked
 10393  00345A  5193               	movf	??___ftpack& (0+255),w,b
 10394  00345C  0100               	movlb	0	; () banked
 10395  00345E  1194               	iorwf	(??___ftpack+1)& (0+255),w,b
 10396  003460  0100               	movlb	0	; () banked
 10397  003462  1195               	iorwf	(??___ftpack+2)& (0+255),w,b
 10398  003464  B4D8               	btfsc	status,2,c
 10399  003466  D011               	goto	l4096
 10400  003468  D7E1               	goto	l4088
 10401  00346A                     l4092:
 10402                           
 10403                           ; BSR set to: 0
 10404  00346A  0100               	movlb	0	; () banked
 10405  00346C  2B91               	incf	___ftpack@exp& (0+255),f,b
 10406                           
 10407                           ; BSR set to: 0
 10408  00346E  0E01               	movlw	1
 10409  003470  0100               	movlb	0	; () banked
 10410  003472  278E               	addwf	___ftpack@arg& (0+255),f,b
 10411  003474  0E00               	movlw	0
 10412  003476  0100               	movlb	0	; () banked
 10413  003478  238F               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 10414  00347A  0E00               	movlw	0
 10415  00347C  0100               	movlb	0	; () banked
 10416  00347E  2390               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 10417  003480  0100               	movlb	0	; () banked
 10418  003482  90D8               	bcf	status,0,c
 10419  003484  3390               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 10420  003486  338F               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 10421  003488  338E               	rrcf	___ftpack@arg& (0+255),f,b
 10422  00348A                     l4096:
 10423                           
 10424                           ; BSR set to: 0
 10425  00348A  0E00               	movlw	0
 10426  00348C  0100               	movlb	0	; () banked
 10427  00348E  158E               	andwf	___ftpack@arg& (0+255),w,b
 10428  003490  0100               	movlb	0	; () banked
 10429  003492  6F93               	movwf	??___ftpack& (0+255),b
 10430  003494  0E00               	movlw	0
 10431  003496  0100               	movlb	0	; () banked
 10432  003498  158F               	andwf	(___ftpack@arg+1)& (0+255),w,b
 10433  00349A  0100               	movlb	0	; () banked
 10434  00349C  6F94               	movwf	(??___ftpack+1)& (0+255),b
 10435  00349E  0EFF               	movlw	255
 10436  0034A0  0100               	movlb	0	; () banked
 10437  0034A2  1590               	andwf	(___ftpack@arg+2)& (0+255),w,b
 10438  0034A4  0100               	movlb	0	; () banked
 10439  0034A6  6F95               	movwf	(??___ftpack+2)& (0+255),b
 10440  0034A8  0100               	movlb	0	; () banked
 10441  0034AA  5193               	movf	??___ftpack& (0+255),w,b
 10442  0034AC  0100               	movlb	0	; () banked
 10443  0034AE  1194               	iorwf	(??___ftpack+1)& (0+255),w,b
 10444  0034B0  0100               	movlb	0	; () banked
 10445  0034B2  1195               	iorwf	(??___ftpack+2)& (0+255),w,b
 10446  0034B4  B4D8               	btfsc	status,2,c
 10447  0034B6  D008               	goto	l4100
 10448  0034B8  D7D8               	goto	l4092
 10449  0034BA                     l4098:
 10450                           
 10451                           ; BSR set to: 0
 10452  0034BA  0100               	movlb	0	; () banked
 10453  0034BC  0791               	decf	___ftpack@exp& (0+255),f,b
 10454  0034BE  0100               	movlb	0	; () banked
 10455  0034C0  90D8               	bcf	status,0,c
 10456  0034C2  378E               	rlcf	___ftpack@arg& (0+255),f,b
 10457  0034C4  378F               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 10458  0034C6  3790               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 10459  0034C8                     l4100:
 10460                           
 10461                           ; BSR set to: 0
 10462  0034C8  0100               	movlb	0	; () banked
 10463  0034CA  BF8F               	btfsc	(___ftpack@arg+1)& (0+255),7,b
 10464  0034CC  D004               	goto	l958
 10465                           
 10466                           ; BSR set to: 0
 10467  0034CE  0E02               	movlw	2
 10468  0034D0  0100               	movlb	0	; () banked
 10469  0034D2  6191               	cpfslt	___ftpack@exp& (0+255),b
 10470  0034D4  D7F2               	goto	l4098
 10471  0034D6                     l958:
 10472                           
 10473                           ; BSR set to: 0
 10474  0034D6  0100               	movlb	0	; () banked
 10475  0034D8  B191               	btfsc	___ftpack@exp& (0+255),0,b
 10476  0034DA  D002               	goto	l4106
 10477                           
 10478                           ; BSR set to: 0
 10479  0034DC  0100               	movlb	0	; () banked
 10480  0034DE  9F8F               	bcf	(___ftpack@arg+1)& (0+255),7,b
 10481  0034E0                     l4106:
 10482                           
 10483                           ; BSR set to: 0
 10484  0034E0  0100               	movlb	0	; () banked
 10485  0034E2  90D8               	bcf	status,0,c
 10486  0034E4  3391               	rrcf	___ftpack@exp& (0+255),f,b
 10487  0034E6  0100               	movlb	0	; () banked
 10488  0034E8  5191               	movf	___ftpack@exp& (0+255),w,b
 10489  0034EA  0100               	movlb	0	; () banked
 10490  0034EC  1390               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 10491                           
 10492                           ; BSR set to: 0
 10493  0034EE  0100               	movlb	0	; () banked
 10494  0034F0  5192               	movf	___ftpack@sign& (0+255),w,b
 10495  0034F2  0100               	movlb	0	; () banked
 10496  0034F4  B4D8               	btfsc	status,2,c
 10497  0034F6  D002               	goto	l4112
 10498                           
 10499                           ; BSR set to: 0
 10500  0034F8  0100               	movlb	0	; () banked
 10501  0034FA  8F90               	bsf	(___ftpack@arg+2)& (0+255),7,b
 10502  0034FC                     l4112:
 10503                           
 10504                           ; BSR set to: 0
 10505  0034FC  C08E  F08E         	movff	___ftpack@arg,?___ftpack
 10506  003500  C08F  F08F         	movff	___ftpack@arg+1,?___ftpack+1
 10507  003504  C090  F090         	movff	___ftpack@arg+2,?___ftpack+2
 10508  003508  0012               	return	
 10509  00350A                     __end_of___ftpack:
 10510                           	opt stack 0
 10511                           tblptru	equ	0xFF8
 10512                           tblptrh	equ	0xFF7
 10513                           tblptrl	equ	0xFF6
 10514                           tablat	equ	0xFF5
 10515                           prodh	equ	0xFF4
 10516                           prodl	equ	0xFF3
 10517                           intcon	equ	0xFF2
 10518                           postinc0	equ	0xFEE
 10519                           wreg	equ	0xFE8
 10520                           postdec1	equ	0xFE5
 10521                           fsr1l	equ	0xFE1
 10522                           indf2	equ	0xFDF
 10523                           postinc2	equ	0xFDE
 10524                           postdec2	equ	0xFDD
 10525                           fsr2h	equ	0xFDA
 10526                           fsr2l	equ	0xFD9
 10527                           status	equ	0xFD8
 10528                           
 10529 ;; *************** function _initTimer *****************
 10530 ;; Defined at:
 10531 ;;		line 52 in file "timer.c"
 10532 ;; Parameters:    Size  Location     Type
 10533 ;;  timer           2   14[BANK0 ] int 
 10534 ;; Auto vars:     Size  Location     Type
 10535 ;;		None
 10536 ;; Return value:  Size  Location     Type
 10537 ;;                  1    wreg      void 
 10538 ;; Registers used:
 10539 ;;		wreg, status,2, status,0
 10540 ;; Tracked objects:
 10541 ;;		On entry : 0/0
 10542 ;;		On exit  : 0/0
 10543 ;;		Unchanged: 0/0
 10544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10545 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10547 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10548 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10549 ;;Total ram usage:        4 bytes
 10550 ;; Hardware stack levels used:    1
 10551 ;; Hardware stack levels required when called:    6
 10552 ;; This function calls:
 10553 ;;		Nothing
 10554 ;; This function is called by:
 10555 ;;		_initServo
 10556 ;;		_testFrequency
 10557 ;; This function uses a non-reentrant model
 10558 ;;
 10559                           
 10560                           	psect	text35
 10561  0048E6                     __ptext35:
 10562                           	opt stack 0
 10563  0048E6                     _initTimer:
 10564                           	opt stack 23
 10565                           
 10566                           ;timer.c: 53: switch(timer){
 10567                           
 10568                           ; BSR set to: 0
 10569                           ;incstack = 0
 10570  0048E6  D00D               	goto	l5438
 10571  0048E8                     l5422:
 10572                           
 10573                           ;timer.c: 55: T0CON = 0;
 10574  0048E8  0E00               	movlw	0
 10575  0048EA  6ED5               	movwf	4053,c	;volatile
 10576                           
 10577                           ;timer.c: 56: T0CON |= 1<<3;
 10578  0048EC  86D5               	bsf	4053,3,c	;volatile
 10579                           
 10580                           ;timer.c: 58: TMR0IE = 1;
 10581  0048EE  8AF2               	bsf	intcon,5,c	;volatile
 10582                           
 10583                           ;timer.c: 59: break;
 10584  0048F0  D01C               	goto	l376
 10585  0048F2                     l5428:
 10586                           
 10587                           ;timer.c: 61: T1CON = 0;
 10588  0048F2  0E00               	movlw	0
 10589  0048F4  6ECD               	movwf	4045,c	;volatile
 10590                           
 10591                           ;timer.c: 63: TMR1IE = 1;
 10592  0048F6  809D               	bsf	3997,0,c	;volatile
 10593                           
 10594                           ;timer.c: 64: break;
 10595  0048F8  D018               	goto	l376
 10596  0048FA                     l5432:
 10597                           
 10598                           ;timer.c: 66: T3CON = 0;
 10599  0048FA  0E00               	movlw	0
 10600  0048FC  6EB1               	movwf	4017,c	;volatile
 10601                           
 10602                           ;timer.c: 67: TMR3IE = 1;
 10603  0048FE  82A0               	bsf	4000,1,c	;volatile
 10604                           
 10605                           ;timer.c: 69: }
 10606                           
 10607                           ;timer.c: 68: break;
 10608  004900  D014               	goto	l376
 10609  004902                     l5438:
 10610  004902  C08E  F090         	movff	initTimer@timer,??_initTimer
 10611  004906  C08F  F091         	movff	initTimer@timer+1,??_initTimer+1
 10612                           
 10613                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10614                           ; Switch size 1, requested type "space"
 10615                           ; Number of cases is 1, Range of values is 0 to 0
 10616                           ; switch strategies available:
 10617                           ; Name         Instructions Cycles
 10618                           ; simple_byte            4     3 (average)
 10619                           ;	Chosen strategy is simple_byte
 10620  00490A  0100               	movlb	0	; () banked
 10621  00490C  5191               	movf	(??_initTimer+1)& (0+255),w,b
 10622  00490E  0A00               	xorlw	0	; case 0
 10623  004910  A4D8               	btfss	status,2,c
 10624  004912  D00B               	goto	l376
 10625                           
 10626                           ; BSR set to: 0
 10627                           ; Switch size 1, requested type "space"
 10628                           ; Number of cases is 3, Range of values is 0 to 3
 10629                           ; switch strategies available:
 10630                           ; Name         Instructions Cycles
 10631                           ; simple_byte           10     6 (average)
 10632                           ;	Chosen strategy is simple_byte
 10633  004914  0100               	movlb	0	; () banked
 10634  004916  5190               	movf	??_initTimer& (0+255),w,b
 10635  004918  0A00               	xorlw	0	; case 0
 10636  00491A  B4D8               	btfsc	status,2,c
 10637  00491C  D7E5               	goto	l5422
 10638  00491E  0A01               	xorlw	1	; case 1
 10639  004920  B4D8               	btfsc	status,2,c
 10640  004922  D7E7               	goto	l5428
 10641  004924  0A02               	xorlw	2	; case 3
 10642  004926  B4D8               	btfsc	status,2,c
 10643  004928  D7E8               	goto	l5432
 10644  00492A                     l376:
 10645                           
 10646                           ;timer.c: 70: PEIE = 1;
 10647  00492A  8CF2               	bsf	intcon,6,c	;volatile
 10648                           
 10649                           ;timer.c: 71: (INTCONbits.GIE = 1);
 10650  00492C  8EF2               	bsf	intcon,7,c	;volatile
 10651  00492E  0012               	return		;funcret
 10652  004930                     __end_of_initTimer:
 10653                           	opt stack 0
 10654                           tblptru	equ	0xFF8
 10655                           tblptrh	equ	0xFF7
 10656                           tblptrl	equ	0xFF6
 10657                           tablat	equ	0xFF5
 10658                           prodh	equ	0xFF4
 10659                           prodl	equ	0xFF3
 10660                           intcon	equ	0xFF2
 10661                           postinc0	equ	0xFEE
 10662                           wreg	equ	0xFE8
 10663                           postdec1	equ	0xFE5
 10664                           fsr1l	equ	0xFE1
 10665                           indf2	equ	0xFDF
 10666                           postinc2	equ	0xFDE
 10667                           postdec2	equ	0xFDD
 10668                           fsr2h	equ	0xFDA
 10669                           fsr2l	equ	0xFD9
 10670                           status	equ	0xFD8
 10671                           
 10672 ;; *************** function _initLCD *****************
 10673 ;; Defined at:
 10674 ;;		line 15 in file "lcd.c"
 10675 ;; Parameters:    Size  Location     Type
 10676 ;;		None
 10677 ;; Auto vars:     Size  Location     Type
 10678 ;;		None
 10679 ;; Return value:  Size  Location     Type
 10680 ;;                  1    wreg      void 
 10681 ;; Registers used:
 10682 ;;		wreg, status,2, status,0, cstack
 10683 ;; Tracked objects:
 10684 ;;		On entry : 0/0
 10685 ;;		On exit  : 0/0
 10686 ;;		Unchanged: 0/0
 10687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10690 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10691 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10692 ;;Total ram usage:        1 bytes
 10693 ;; Hardware stack levels used:    1
 10694 ;; Hardware stack levels required when called:    8
 10695 ;; This function calls:
 10696 ;;		_lcdInst
 10697 ;; This function is called by:
 10698 ;;		_main
 10699 ;; This function uses a non-reentrant model
 10700 ;;
 10701                           
 10702                           	psect	text36
 10703  004930                     __ptext36:
 10704                           	opt stack 0
 10705  004930                     _initLCD:
 10706                           	opt stack 22
 10707                           
 10708                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
 10709                           
 10710                           ;incstack = 0
 10711  004930  0E31               	movlw	49
 10712  004932  0100               	movlb	0	; () banked
 10713  004934  6F92               	movwf	??_initLCD& (0+255),b
 10714  004936  0EB2               	movlw	178
 10715  004938                     u7507:
 10716  004938  2EE8               	decfsz	wreg,f,c
 10717  00493A  D7FE               	bra	u7507
 10718  00493C  2F92               	decfsz	??_initLCD& (0+255),f,b
 10719  00493E  D7FC               	bra	u7507
 10720  004940  F000               	nop	
 10721                           
 10722                           ;lcd.c: 18: lcdInst(0b00110011);
 10723  004942  0E33               	movlw	51
 10724  004944  ECBD  F025         	call	_lcdInst
 10725                           
 10726                           ;lcd.c: 19: lcdInst(0b00110010);
 10727  004948  0E32               	movlw	50
 10728  00494A  ECBD  F025         	call	_lcdInst
 10729                           
 10730                           ;lcd.c: 20: lcdInst(0b00101000);
 10731  00494E  0E28               	movlw	40
 10732  004950  ECBD  F025         	call	_lcdInst
 10733                           
 10734                           ;lcd.c: 21: lcdInst(0b00001111);
 10735  004954  0E0F               	movlw	15
 10736  004956  ECBD  F025         	call	_lcdInst
 10737                           
 10738                           ;lcd.c: 22: lcdInst(0b00000110);
 10739  00495A  0E06               	movlw	6
 10740  00495C  ECBD  F025         	call	_lcdInst
 10741                           
 10742                           ;lcd.c: 23: lcdInst(0b00000001);
 10743  004960  0E01               	movlw	1
 10744  004962  ECBD  F025         	call	_lcdInst
 10745                           
 10746                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
 10747  004966  0E31               	movlw	49
 10748  004968  0100               	movlb	0	; () banked
 10749  00496A  6F92               	movwf	??_initLCD& (0+255),b
 10750  00496C  0EB2               	movlw	178
 10751  00496E                     u7517:
 10752  00496E  2EE8               	decfsz	wreg,f,c
 10753  004970  D7FE               	bra	u7517
 10754  004972  2F92               	decfsz	??_initLCD& (0+255),f,b
 10755  004974  D7FC               	bra	u7517
 10756  004976  F000               	nop	
 10757  004978  0012               	return		;funcret
 10758  00497A                     __end_of_initLCD:
 10759                           	opt stack 0
 10760                           tblptru	equ	0xFF8
 10761                           tblptrh	equ	0xFF7
 10762                           tblptrl	equ	0xFF6
 10763                           tablat	equ	0xFF5
 10764                           prodh	equ	0xFF4
 10765                           prodl	equ	0xFF3
 10766                           intcon	equ	0xFF2
 10767                           postinc0	equ	0xFEE
 10768                           wreg	equ	0xFE8
 10769                           postdec1	equ	0xFE5
 10770                           fsr1l	equ	0xFE1
 10771                           indf2	equ	0xFDF
 10772                           postinc2	equ	0xFDE
 10773                           postdec2	equ	0xFDD
 10774                           fsr2h	equ	0xFDA
 10775                           fsr2l	equ	0xFD9
 10776                           status	equ	0xFD8
 10777                           
 10778 ;; *************** function _lcdInst *****************
 10779 ;; Defined at:
 10780 ;;		line 27 in file "lcd.c"
 10781 ;; Parameters:    Size  Location     Type
 10782 ;;  data            1    wreg     unsigned char 
 10783 ;; Auto vars:     Size  Location     Type
 10784 ;;  data            1   17[BANK0 ] unsigned char 
 10785 ;; Return value:  Size  Location     Type
 10786 ;;                  1    wreg      void 
 10787 ;; Registers used:
 10788 ;;		wreg, status,2, status,0, cstack
 10789 ;; Tracked objects:
 10790 ;;		On entry : 0/0
 10791 ;;		On exit  : 0/0
 10792 ;;		Unchanged: 0/0
 10793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10795 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10796 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10797 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10798 ;;Total ram usage:        2 bytes
 10799 ;; Hardware stack levels used:    1
 10800 ;; Hardware stack levels required when called:    7
 10801 ;; This function calls:
 10802 ;;		_lcdNibble
 10803 ;; This function is called by:
 10804 ;;		_initLCD
 10805 ;;		_lcdClear
 10806 ;;		_lcdNewline
 10807 ;;		_lcdHome
 10808 ;; This function uses a non-reentrant model
 10809 ;;
 10810                           
 10811                           	psect	text37
 10812  004B7A                     __ptext37:
 10813                           	opt stack 0
 10814  004B7A                     _lcdInst:
 10815                           	opt stack 19
 10816                           
 10817                           ;incstack = 0
 10818                           ;lcdInst@data stored from wreg
 10819  004B7A  0100               	movlb	0	; () banked
 10820  004B7C  6F91               	movwf	lcdInst@data& (0+255),b
 10821                           
 10822                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 10823  004B7E  948C               	bcf	3980,2,c	;volatile
 10824                           
 10825                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 10826  004B80  0E74               	movlw	116
 10827  004B82                     u7527:
 10828  004B82  2EE8               	decfsz	wreg,f,c
 10829  004B84  D7FE               	bra	u7527
 10830  004B86  D000               	nop2	
 10831                           
 10832                           ;lcd.c: 30: lcdNibble(data);
 10833  004B88  0100               	movlb	0	; () banked
 10834  004B8A  5191               	movf	lcdInst@data& (0+255),w,b
 10835  004B8C  EC86  F022         	call	_lcdNibble
 10836                           
 10837                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 10838  004B90  0E04               	movlw	4
 10839  004B92  0100               	movlb	0	; () banked
 10840  004B94  6F90               	movwf	??_lcdInst& (0+255),b
 10841  004B96  0E3D               	movlw	61
 10842  004B98                     u7537:
 10843  004B98  2EE8               	decfsz	wreg,f,c
 10844  004B9A  D7FE               	bra	u7537
 10845  004B9C  2F90               	decfsz	??_lcdInst& (0+255),f,b
 10846  004B9E  D7FC               	bra	u7537
 10847  004BA0  D000               	nop2	
 10848  004BA2  0012               	return		;funcret
 10849  004BA4                     __end_of_lcdInst:
 10850                           	opt stack 0
 10851                           tblptru	equ	0xFF8
 10852                           tblptrh	equ	0xFF7
 10853                           tblptrl	equ	0xFF6
 10854                           tablat	equ	0xFF5
 10855                           prodh	equ	0xFF4
 10856                           prodl	equ	0xFF3
 10857                           intcon	equ	0xFF2
 10858                           postinc0	equ	0xFEE
 10859                           wreg	equ	0xFE8
 10860                           postdec1	equ	0xFE5
 10861                           fsr1l	equ	0xFE1
 10862                           indf2	equ	0xFDF
 10863                           postinc2	equ	0xFDE
 10864                           postdec2	equ	0xFDD
 10865                           fsr2h	equ	0xFDA
 10866                           fsr2l	equ	0xFD9
 10867                           status	equ	0xFD8
 10868                           
 10869 ;; *************** function _lcdNibble *****************
 10870 ;; Defined at:
 10871 ;;		line 46 in file "lcd.c"
 10872 ;; Parameters:    Size  Location     Type
 10873 ;;  data            1    wreg     unsigned char 
 10874 ;; Auto vars:     Size  Location     Type
 10875 ;;  data            1   15[BANK0 ] unsigned char 
 10876 ;;  temp            1   14[BANK0 ] unsigned char 
 10877 ;; Return value:  Size  Location     Type
 10878 ;;                  1    wreg      void 
 10879 ;; Registers used:
 10880 ;;		wreg, status,2, status,0
 10881 ;; Tracked objects:
 10882 ;;		On entry : 0/0
 10883 ;;		On exit  : 0/0
 10884 ;;		Unchanged: 0/0
 10885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10887 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10889 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10890 ;;Total ram usage:        2 bytes
 10891 ;; Hardware stack levels used:    1
 10892 ;; Hardware stack levels required when called:    6
 10893 ;; This function calls:
 10894 ;;		Nothing
 10895 ;; This function is called by:
 10896 ;;		_lcdInst
 10897 ;;		_putch
 10898 ;; This function uses a non-reentrant model
 10899 ;;
 10900                           
 10901                           	psect	text38
 10902  00450C                     __ptext38:
 10903                           	opt stack 0
 10904  00450C                     _lcdNibble:
 10905                           	opt stack 21
 10906                           
 10907                           ;incstack = 0
 10908                           ;lcdNibble@data stored from wreg
 10909  00450C  0100               	movlb	0	; () banked
 10910  00450E  6F8F               	movwf	lcdNibble@data& (0+255),b
 10911                           
 10912                           ;lcd.c: 48: char temp = data & 0xF0;
 10913  004510  0100               	movlb	0	; () banked
 10914  004512  518F               	movf	lcdNibble@data& (0+255),w,b
 10915  004514  0BF0               	andlw	240
 10916  004516  0100               	movlb	0	; () banked
 10917  004518  6F8E               	movwf	lcdNibble@temp& (0+255),b
 10918                           
 10919                           ;lcd.c: 49: LATD = LATD & 0x0F;
 10920  00451A  508C               	movf	3980,w,c	;volatile
 10921  00451C  0B0F               	andlw	15
 10922  00451E  6E8C               	movwf	3980,c	;volatile
 10923                           
 10924                           ;lcd.c: 50: LATD = temp | LATD;
 10925  004520  0100               	movlb	0	; () banked
 10926  004522  518E               	movf	lcdNibble@temp& (0+255),w,b
 10927  004524  108C               	iorwf	3980,w,c	;volatile
 10928  004526  6E8C               	movwf	3980,c	;volatile
 10929                           
 10930                           ; BSR set to: 0
 10931                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 10932  004528  968C               	bcf	3980,3,c	;volatile
 10933                           
 10934                           ; BSR set to: 0
 10935                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 10936  00452A  0ED6               	movlw	214
 10937  00452C                     u7547:
 10938  00452C  D000               	nop2	
 10939  00452E  D000               	nop2	
 10940  004530  2EE8               	decfsz	wreg,f,c
 10941  004532  D7FC               	bra	u7547
 10942  004534  D000               	nop2	
 10943                           
 10944                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 10945  004536  868C               	bsf	3980,3,c	;volatile
 10946                           
 10947                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 10948  004538  0ED6               	movlw	214
 10949  00453A                     u7557:
 10950  00453A  D000               	nop2	
 10951  00453C  D000               	nop2	
 10952  00453E  2EE8               	decfsz	wreg,f,c
 10953  004540  D7FC               	bra	u7557
 10954  004542  D000               	nop2	
 10955                           
 10956                           ;lcd.c: 58: data = data << 4;
 10957  004544  0100               	movlb	0	; () banked
 10958  004546  398F               	swapf	lcdNibble@data& (0+255),w,b
 10959  004548  0BF0               	andlw	240
 10960  00454A  0100               	movlb	0	; () banked
 10961  00454C  6F8F               	movwf	lcdNibble@data& (0+255),b
 10962                           
 10963                           ;lcd.c: 60: temp = data & 0xF0;
 10964  00454E  0100               	movlb	0	; () banked
 10965  004550  518F               	movf	lcdNibble@data& (0+255),w,b
 10966  004552  0BF0               	andlw	240
 10967  004554  0100               	movlb	0	; () banked
 10968  004556  6F8E               	movwf	lcdNibble@temp& (0+255),b
 10969                           
 10970                           ;lcd.c: 61: LATD = LATD & 0x0F;
 10971  004558  508C               	movf	3980,w,c	;volatile
 10972  00455A  0B0F               	andlw	15
 10973  00455C  6E8C               	movwf	3980,c	;volatile
 10974                           
 10975                           ;lcd.c: 62: LATD = temp | LATD;
 10976  00455E  0100               	movlb	0	; () banked
 10977  004560  518E               	movf	lcdNibble@temp& (0+255),w,b
 10978  004562  108C               	iorwf	3980,w,c	;volatile
 10979  004564  6E8C               	movwf	3980,c	;volatile
 10980                           
 10981                           ; BSR set to: 0
 10982                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 10983  004566  968C               	bcf	3980,3,c	;volatile
 10984                           
 10985                           ; BSR set to: 0
 10986                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 10987  004568  0ED6               	movlw	214
 10988  00456A                     u7567:
 10989  00456A  D000               	nop2	
 10990  00456C  D000               	nop2	
 10991  00456E  2EE8               	decfsz	wreg,f,c
 10992  004570  D7FC               	bra	u7567
 10993  004572  D000               	nop2	
 10994                           
 10995                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 10996  004574  868C               	bsf	3980,3,c	;volatile
 10997                           
 10998                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 10999  004576  0ED6               	movlw	214
 11000  004578                     u7577:
 11001  004578  D000               	nop2	
 11002  00457A  D000               	nop2	
 11003  00457C  2EE8               	decfsz	wreg,f,c
 11004  00457E  D7FC               	bra	u7577
 11005  004580  D000               	nop2	
 11006  004582  0012               	return		;funcret
 11007  004584                     __end_of_lcdNibble:
 11008                           	opt stack 0
 11009                           tblptru	equ	0xFF8
 11010                           tblptrh	equ	0xFF7
 11011                           tblptrl	equ	0xFF6
 11012                           tablat	equ	0xFF5
 11013                           prodh	equ	0xFF4
 11014                           prodl	equ	0xFF3
 11015                           intcon	equ	0xFF2
 11016                           postinc0	equ	0xFEE
 11017                           wreg	equ	0xFE8
 11018                           postdec1	equ	0xFE5
 11019                           fsr1l	equ	0xFE1
 11020                           indf2	equ	0xFDF
 11021                           postinc2	equ	0xFDE
 11022                           postdec2	equ	0xFDD
 11023                           fsr2h	equ	0xFDA
 11024                           fsr2l	equ	0xFD9
 11025                           status	equ	0xFD8
 11026                           
 11027 ;; *************** function _service *****************
 11028 ;; Defined at:
 11029 ;;		line 233 in file "main.c"
 11030 ;; Parameters:    Size  Location     Type
 11031 ;;		None
 11032 ;; Auto vars:     Size  Location     Type
 11033 ;;  key             1  113[COMRAM] unsigned char 
 11034 ;; Return value:  Size  Location     Type
 11035 ;;                  1    wreg      void 
 11036 ;; Registers used:
 11037 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11038 ;; Tracked objects:
 11039 ;;		On entry : 0/0
 11040 ;;		On exit  : 0/0
 11041 ;;		Unchanged: 0/0
 11042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11044 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11045 ;;      Temps:          0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11046 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11047 ;;Total ram usage:       15 bytes
 11048 ;; Hardware stack levels used:    1
 11049 ;; Hardware stack levels required when called:    5
 11050 ;; This function calls:
 11051 ;;		_servoInterruptService
 11052 ;;		i2_lcdClear
 11053 ;;		i2_printf
 11054 ;;		i2_setAngle
 11055 ;; This function is called by:
 11056 ;;		Interrupt level 2
 11057 ;; This function uses a non-reentrant model
 11058 ;;
 11059                           
 11060                           	psect	intcode
 11061  000008                     __pintcode:
 11062                           	opt stack 0
 11063  000008                     _service:
 11064                           	opt stack 19
 11065                           
 11066                           ;incstack = 0
 11067  000008  827C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11068  00000A  EDF1  F01C         	call	int_func,f	;refresh shadow registers
 11069                           tblptru	equ	0xFF8
 11070                           tblptrh	equ	0xFF7
 11071                           tblptrl	equ	0xFF6
 11072                           tablat	equ	0xFF5
 11073                           prodh	equ	0xFF4
 11074                           prodl	equ	0xFF3
 11075                           intcon	equ	0xFF2
 11076                           postinc0	equ	0xFEE
 11077                           wreg	equ	0xFE8
 11078                           postdec1	equ	0xFE5
 11079                           fsr1l	equ	0xFE1
 11080                           indf2	equ	0xFDF
 11081                           postinc2	equ	0xFDE
 11082                           postdec2	equ	0xFDD
 11083                           fsr2h	equ	0xFDA
 11084                           fsr2l	equ	0xFD9
 11085                           status	equ	0xFD8
 11086                           
 11087                           	psect	intcode_body
 11088  0039E2                     __pintcode_body:
 11089                           	opt stack 19
 11090  0039E2                     int_func:
 11091                           	opt stack 19
 11092  0039E2  0006               	pop		; remove dummy address from shadow register refresh
 11093  0039E4  CFFA F080          	movff	pclath,??_service
 11094  0039E8  CFFB F081          	movff	pclatu,??_service+1
 11095  0039EC  CFE9 F082          	movff	fsr0l,??_service+2
 11096  0039F0  CFEA F083          	movff	fsr0h,??_service+3
 11097  0039F4  CFE1 F084          	movff	fsr1l,??_service+4
 11098  0039F8  CFE2 F085          	movff	fsr1h,??_service+5
 11099  0039FC  CFD9 F086          	movff	fsr2l,??_service+6
 11100  003A00  CFDA F087          	movff	fsr2h,??_service+7
 11101  003A04  CFF3 F088          	movff	prodl,??_service+8
 11102  003A08  CFF4 F089          	movff	prodh,??_service+9
 11103  003A0C  CFF6 F08A          	movff	tblptrl,??_service+10
 11104  003A10  CFF7 F08B          	movff	tblptrh,??_service+11
 11105  003A14  CFF8 F08C          	movff	tblptru,??_service+12
 11106  003A18  CFF5 F08D          	movff	tablat,??_service+13
 11107                           
 11108                           ;main.c: 235: servoInterruptService();
 11109  003A1C  EC85  F01A         	call	_servoInterruptService	;wreg free
 11110                           
 11111                           ;main.c: 238: if(INT0IF){ INT0IF = 0;
 11112  003A20  A2F2               	btfss	intcon,1,c	;volatile
 11113  003A22  D006               	goto	i2l6166
 11114  003A24  92F2               	bcf	intcon,1,c	;volatile
 11115                           
 11116                           ;main.c: 239: batteryDetected = 1;
 11117  003A26  0E00               	movlw	0
 11118  003A28  0101               	movlb	1	; () banked
 11119  003A2A  6F70               	movwf	(_batteryDetected+1)& (0+255),b
 11120  003A2C  0E01               	movlw	1
 11121  003A2E  6F6F               	movwf	_batteryDetected& (0+255),b
 11122  003A30                     i2l6166:
 11123                           
 11124                           ;main.c: 240: }
 11125                           ;main.c: 243: if(INT1IF && INT1IE){INT1IF = 0;
 11126  003A30  B0F0               	btfsc	intcon3,0,c	;volatile
 11127  003A32  A6F0               	btfss	intcon3,3,c	;volatile
 11128  003A34  D026               	goto	i2l144
 11129  003A36  90F0               	bcf	intcon3,0,c	;volatile
 11130                           
 11131                           ;main.c: 246: char key = (PORTB & 0xF0) >> 4;
 11132  003A38  3881               	swapf	3969,w,c	;volatile
 11133  003A3A  0B0F               	andlw	15
 11134  003A3C  0B0F               	andlw	15
 11135  003A3E  6E72               	movwf	service@key,c
 11136                           
 11137                           ;main.c: 247: if(key == 0)angle+=1;
 11138  003A40  5072               	movf	service@key,w,c
 11139  003A42  A4D8               	btfss	status,2,c
 11140  003A44  D002               	goto	i2l6178
 11141  003A46  4A7A               	infsnz	_angle,f,c
 11142  003A48  2A7B               	incf	_angle+1,f,c
 11143  003A4A                     i2l6178:
 11144                           
 11145                           ;main.c: 248: if(key == 1)angle-=1;
 11146  003A4A  0472               	decf	service@key,w,c
 11147  003A4C  A4D8               	btfss	status,2,c
 11148  003A4E  D003               	goto	i2l6182
 11149  003A50  067A               	decf	_angle,f,c
 11150  003A52  A0D8               	btfss	status,0,c
 11151  003A54  067B               	decf	_angle+1,f,c
 11152  003A56                     i2l6182:
 11153                           
 11154                           ;main.c: 249: lcdClear();
 11155  003A56  EC39  F026         	call	i2_lcdClear	;wreg free
 11156                           
 11157                           ;main.c: 250: printf("angle: %d",angle);
 11158  003A5A  0EDB               	movlw	low STR_3
 11159  003A5C  6E50               	movwf	i2printf@f,c
 11160  003A5E  0EFF               	movlw	high STR_3
 11161  003A60  6E51               	movwf	i2printf@f+1,c
 11162  003A62  C07A  F052         	movff	_angle,?i2_printf+2
 11163  003A66  C07B  F053         	movff	_angle+1,?i2_printf+3
 11164  003A6A  ECB2  F004         	call	i2_printf	;wreg free
 11165                           
 11166                           ;main.c: 251: setAngle(redirectingServo, angle);
 11167  003A6E  0E2F               	movlw	low _redirectingServo
 11168  003A70  6E67               	movwf	i2setAngle@motor,c
 11169  003A72  0E01               	movlw	high _redirectingServo
 11170  003A74  6E68               	movwf	i2setAngle@motor+1,c
 11171  003A76  C07A  F069         	movff	_angle,i2setAngle@angle
 11172  003A7A  C07B  F06A         	movff	_angle+1,i2setAngle@angle+1
 11173  003A7E  EC4E  F01F         	call	i2_setAngle	;wreg free
 11174  003A82                     i2l144:
 11175  003A82  C08D  FFF5         	movff	??_service+13,tablat
 11176  003A86  C08C  FFF8         	movff	??_service+12,tblptru
 11177  003A8A  C08B  FFF7         	movff	??_service+11,tblptrh
 11178  003A8E  C08A  FFF6         	movff	??_service+10,tblptrl
 11179  003A92  C089  FFF4         	movff	??_service+9,prodh
 11180  003A96  C088  FFF3         	movff	??_service+8,prodl
 11181  003A9A  C087  FFDA         	movff	??_service+7,fsr2h
 11182  003A9E  C086  FFD9         	movff	??_service+6,fsr2l
 11183  003AA2  C085  FFE2         	movff	??_service+5,fsr1h
 11184  003AA6  C084  FFE1         	movff	??_service+4,fsr1l
 11185  003AAA  C083  FFEA         	movff	??_service+3,fsr0h
 11186  003AAE  C082  FFE9         	movff	??_service+2,fsr0l
 11187  003AB2  C081  FFFB         	movff	??_service+1,pclatu
 11188  003AB6  C080  FFFA         	movff	??_service,pclath
 11189  003ABA  927C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11190  003ABC  0011               	retfie		f
 11191  003ABE                     __end_of_service:
 11192                           	opt stack 0
 11193                           pclatu	equ	0xFFB
 11194                           pclath	equ	0xFFA
 11195                           tblptru	equ	0xFF8
 11196                           tblptrh	equ	0xFF7
 11197                           tblptrl	equ	0xFF6
 11198                           tablat	equ	0xFF5
 11199                           prodh	equ	0xFF4
 11200                           prodl	equ	0xFF3
 11201                           intcon	equ	0xFF2
 11202                           intcon3	equ	0xFF0
 11203                           postinc0	equ	0xFEE
 11204                           fsr0h	equ	0xFEA
 11205                           fsr0l	equ	0xFE9
 11206                           wreg	equ	0xFE8
 11207                           postdec1	equ	0xFE5
 11208                           fsr1h	equ	0xFE2
 11209                           fsr1l	equ	0xFE1
 11210                           indf2	equ	0xFDF
 11211                           postinc2	equ	0xFDE
 11212                           postdec2	equ	0xFDD
 11213                           fsr2h	equ	0xFDA
 11214                           fsr2l	equ	0xFD9
 11215                           status	equ	0xFD8
 11216                           
 11217 ;; *************** function i2_setAngle *****************
 11218 ;; Defined at:
 11219 ;;		line 41 in file "servo.c"
 11220 ;; Parameters:    Size  Location     Type
 11221 ;;  motor           2  102[COMRAM] PTR int 
 11222 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
 11223 ;;  angle           2  104[COMRAM] int 
 11224 ;; Auto vars:     Size  Location     Type
 11225 ;;  setAngle        2  110[COMRAM] int 
 11226 ;;  setAngle        2  108[COMRAM] unsigned int 
 11227 ;; Return value:  Size  Location     Type
 11228 ;;                  1    wreg      void 
 11229 ;; Registers used:
 11230 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11231 ;; Tracked objects:
 11232 ;;		On entry : 0/0
 11233 ;;		On exit  : 0/0
 11234 ;;		Unchanged: 0/0
 11235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11236 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11237 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11238 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11239 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11240 ;;Total ram usage:       10 bytes
 11241 ;; Hardware stack levels used:    1
 11242 ;; Hardware stack levels required when called:    3
 11243 ;; This function calls:
 11244 ;;		i2_angleToPulse
 11245 ;; This function is called by:
 11246 ;;		_service
 11247 ;; This function uses a non-reentrant model
 11248 ;;
 11249                           
 11250                           	psect	text40
 11251  003E9C                     __ptext40:
 11252                           	opt stack 0
 11253  003E9C                     i2_setAngle:
 11254                           	opt stack 20
 11255                           
 11256                           ;servo.c: 42: unsigned int period = 50000;
 11257                           
 11258                           ;incstack = 0
 11259  003E9C  0EC3               	movlw	195
 11260  003E9E  6E6E               	movwf	i2setAngle@period+1,c
 11261  003EA0  0E50               	movlw	80
 11262  003EA2  6E6D               	movwf	i2setAngle@period,c
 11263                           
 11264                           ;servo.c: 43: for(int i = 0; i < n; i++){
 11265  003EA4  0E00               	movlw	0
 11266  003EA6  6E70               	movwf	i2setAngle@i+1,c
 11267  003EA8  0E00               	movlw	0
 11268  003EAA  6E6F               	movwf	i2setAngle@i,c
 11269  003EAC  D032               	goto	i2l5914
 11270  003EAE                     i2l5906:
 11271                           
 11272                           ;servo.c: 44: if(servos[i] == motor){
 11273  003EAE  90D8               	bcf	status,0,c
 11274  003EB0  346F               	rlcf	i2setAngle@i,w,c
 11275  003EB2  6ED9               	movwf	fsr2l,c
 11276  003EB4  3470               	rlcf	i2setAngle@i+1,w,c
 11277  003EB6  6EDA               	movwf	fsr2h,c
 11278  003EB8  0E63               	movlw	low _servos
 11279  003EBA  26D9               	addwf	fsr2l,f,c
 11280  003EBC  0E01               	movlw	high _servos
 11281  003EBE  22DA               	addwfc	fsr2h,f,c
 11282  003EC0  5067               	movf	i2setAngle@motor,w,c
 11283  003EC2  18DE               	xorwf	postinc2,w,c
 11284  003EC4  E117               	bnz	i2l5910
 11285  003EC6  5068               	movf	i2setAngle@motor+1,w,c
 11286  003EC8  18DE               	xorwf	postinc2,w,c
 11287  003ECA  A4D8               	btfss	status,2,c
 11288  003ECC  D013               	goto	i2l5910
 11289                           
 11290                           ;servo.c: 45: pulse[i] = angleToPulse(angle);
 11291  003ECE  C069  F050         	movff	i2setAngle@angle,i2angleToPulse@angle
 11292  003ED2  C06A  F051         	movff	i2setAngle@angle+1,i2angleToPulse@angle+1
 11293  003ED6  EC9A  F017         	call	i2_angleToPulse	;wreg free
 11294  003EDA  90D8               	bcf	status,0,c
 11295  003EDC  346F               	rlcf	i2setAngle@i,w,c
 11296  003EDE  6ED9               	movwf	fsr2l,c
 11297  003EE0  3470               	rlcf	i2setAngle@i+1,w,c
 11298  003EE2  6EDA               	movwf	fsr2h,c
 11299  003EE4  0EEA               	movlw	low _pulse
 11300  003EE6  26D9               	addwf	fsr2l,f,c
 11301  003EE8  0E00               	movlw	high _pulse
 11302  003EEA  22DA               	addwfc	fsr2h,f,c
 11303  003EEC  C050  FFDE         	movff	?i2_angleToPulse,postinc2
 11304  003EF0  C051  FFDD         	movff	?i2_angleToPulse+1,postdec2
 11305  003EF4                     i2l5910:
 11306                           
 11307                           ;servo.c: 46: }
 11308                           ;servo.c: 47: period-=pulse[i];
 11309  003EF4  90D8               	bcf	status,0,c
 11310  003EF6  346F               	rlcf	i2setAngle@i,w,c
 11311  003EF8  6ED9               	movwf	fsr2l,c
 11312  003EFA  3470               	rlcf	i2setAngle@i+1,w,c
 11313  003EFC  6EDA               	movwf	fsr2h,c
 11314  003EFE  0EEA               	movlw	low _pulse
 11315  003F00  26D9               	addwf	fsr2l,f,c
 11316  003F02  0E00               	movlw	high _pulse
 11317  003F04  22DA               	addwfc	fsr2h,f,c
 11318  003F06  50DE               	movf	postinc2,w,c
 11319  003F08  5E6D               	subwf	i2setAngle@period,f,c
 11320  003F0A  50DD               	movf	postdec2,w,c
 11321  003F0C  5A6E               	subwfb	i2setAngle@period+1,f,c
 11322  003F0E  4A6F               	infsnz	i2setAngle@i,f,c
 11323  003F10  2A70               	incf	i2setAngle@i+1,f,c
 11324  003F12                     i2l5914:
 11325  003F12  0101               	movlb	1	; () banked
 11326  003F14  5171               	movf	_n& (0+255),w,b
 11327  003F16  5C6F               	subwf	i2setAngle@i,w,c
 11328  003F18  5070               	movf	i2setAngle@i+1,w,c
 11329  003F1A  0A80               	xorlw	128
 11330  003F1C  6E6B               	movwf	??i2_setAngle& (0+255),c
 11331  003F1E  0101               	movlb	1	; () banked
 11332  003F20  5172               	movf	(_n+1)& (0+255),w,b
 11333  003F22  0A80               	xorlw	128
 11334  003F24  586B               	subwfb	??i2_setAngle& (0+255),w,c
 11335  003F26  A0D8               	btfss	status,0,c
 11336  003F28  D7C2               	goto	i2l5906
 11337                           
 11338                           ; BSR set to: 1
 11339                           ;servo.c: 48: }
 11340                           ;servo.c: 49: pulse[n] = period;
 11341                           
 11342                           ; BSR set to: 1
 11343  003F2A  90D8               	bcf	status,0,c
 11344  003F2C  0101               	movlb	1	; () banked
 11345  003F2E  3571               	rlcf	_n& (0+255),w,b
 11346  003F30  6ED9               	movwf	fsr2l,c
 11347  003F32  0101               	movlb	1	; () banked
 11348  003F34  3572               	rlcf	(_n+1)& (0+255),w,b
 11349  003F36  6EDA               	movwf	fsr2h,c
 11350  003F38  0EEA               	movlw	low _pulse
 11351  003F3A  26D9               	addwf	fsr2l,f,c
 11352  003F3C  0E00               	movlw	high _pulse
 11353  003F3E  22DA               	addwfc	fsr2h,f,c
 11354  003F40  C06D  FFDE         	movff	i2setAngle@period,postinc2
 11355  003F44  C06E  FFDD         	movff	i2setAngle@period+1,postdec2
 11356                           
 11357                           ; BSR set to: 1
 11358  003F48  0012               	return		;funcret
 11359  003F4A                     __end_ofi2_setAngle:
 11360                           	opt stack 0
 11361                           pclatu	equ	0xFFB
 11362                           pclath	equ	0xFFA
 11363                           tblptru	equ	0xFF8
 11364                           tblptrh	equ	0xFF7
 11365                           tblptrl	equ	0xFF6
 11366                           tablat	equ	0xFF5
 11367                           prodh	equ	0xFF4
 11368                           prodl	equ	0xFF3
 11369                           intcon	equ	0xFF2
 11370                           intcon3	equ	0xFF0
 11371                           postinc0	equ	0xFEE
 11372                           fsr0h	equ	0xFEA
 11373                           fsr0l	equ	0xFE9
 11374                           wreg	equ	0xFE8
 11375                           postdec1	equ	0xFE5
 11376                           fsr1h	equ	0xFE2
 11377                           fsr1l	equ	0xFE1
 11378                           indf2	equ	0xFDF
 11379                           postinc2	equ	0xFDE
 11380                           postdec2	equ	0xFDD
 11381                           fsr2h	equ	0xFDA
 11382                           fsr2l	equ	0xFD9
 11383                           status	equ	0xFD8
 11384                           
 11385 ;; *************** function i2_angleToPulse *****************
 11386 ;; Defined at:
 11387 ;;		line 33 in file "servo.c"
 11388 ;; Parameters:    Size  Location     Type
 11389 ;;  angle           2   79[COMRAM] int 
 11390 ;; Auto vars:     Size  Location     Type
 11391 ;;  angleToPulse    4   98[COMRAM] long 
 11392 ;;  angleToPulse    4   91[COMRAM] long 
 11393 ;;  angleToPulse    4   87[COMRAM] long 
 11394 ;; Return value:  Size  Location     Type
 11395 ;;                  4   79[COMRAM] long 
 11396 ;; Registers used:
 11397 ;;		wreg, status,2, status,0, cstack
 11398 ;; Tracked objects:
 11399 ;;		On entry : 0/0
 11400 ;;		On exit  : 0/0
 11401 ;;		Unchanged: 0/0
 11402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11403 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11404 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11405 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11406 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11407 ;;Total ram usage:       23 bytes
 11408 ;; Hardware stack levels used:    1
 11409 ;; Hardware stack levels required when called:    2
 11410 ;; This function calls:
 11411 ;;		i2___altoft
 11412 ;;		i2___awtoft
 11413 ;;		i2___ftadd
 11414 ;;		i2___ftdiv
 11415 ;;		i2___ftmul
 11416 ;;		i2___fttol
 11417 ;; This function is called by:
 11418 ;;		i2_setAngle
 11419 ;; This function uses a non-reentrant model
 11420 ;;
 11421                           
 11422                           	psect	text41
 11423  002F34                     __ptext41:
 11424                           	opt stack 0
 11425  002F34                     i2_angleToPulse:
 11426                           	opt stack 20
 11427                           
 11428                           ;servo.c: 34: long offset = -600;
 11429                           
 11430                           ; BSR set to: 1
 11431                           ;incstack = 0
 11432  002F34  0EA8               	movlw	168
 11433  002F36  6E58               	movwf	i2angleToPulse@offset,c
 11434  002F38  0EFD               	movlw	253
 11435  002F3A  6E59               	movwf	i2angleToPulse@offset+1,c
 11436  002F3C  0EFF               	movlw	255
 11437  002F3E  6E5A               	movwf	i2angleToPulse@offset+2,c
 11438  002F40  0EFF               	movlw	255
 11439  002F42  6E5B               	movwf	i2angleToPulse@offset+3,c
 11440                           
 11441                           ;servo.c: 35: long a000 = 1250;
 11442  002F44  0EE2               	movlw	226
 11443  002F46  6E63               	movwf	i2angleToPulse@a000,c
 11444  002F48  0E04               	movlw	4
 11445  002F4A  6E64               	movwf	i2angleToPulse@a000+1,c
 11446  002F4C  0E00               	movlw	0
 11447  002F4E  6E65               	movwf	i2angleToPulse@a000+2,c
 11448  002F50  0E00               	movlw	0
 11449  002F52  6E66               	movwf	i2angleToPulse@a000+3,c
 11450                           
 11451                           ;servo.c: 36: long a180 = 6250;
 11452  002F54  0E6A               	movlw	106
 11453  002F56  6E5C               	movwf	i2angleToPulse@a180,c
 11454  002F58  0E18               	movlw	24
 11455  002F5A  6E5D               	movwf	i2angleToPulse@a180+1,c
 11456  002F5C  0E00               	movlw	0
 11457  002F5E  6E5E               	movwf	i2angleToPulse@a180+2,c
 11458  002F60  0E00               	movlw	0
 11459  002F62  6E5F               	movwf	i2angleToPulse@a180+3,c
 11460                           
 11461                           ;servo.c: 38: return a000 + angle/180.0*(a180-a000) + offset;
 11462  002F64  C063  F054         	movff	i2angleToPulse@a000,??i2_angleToPulse
 11463  002F68  C064  F055         	movff	i2angleToPulse@a000+1,??i2_angleToPulse+1
 11464  002F6C  C065  F056         	movff	i2angleToPulse@a000+2,??i2_angleToPulse+2
 11465  002F70  C066  F057         	movff	i2angleToPulse@a000+3,??i2_angleToPulse+3
 11466  002F74  1E54               	comf	??i2_angleToPulse,f,c
 11467  002F76  1E55               	comf	??i2_angleToPulse+1,f,c
 11468  002F78  1E56               	comf	??i2_angleToPulse+2,f,c
 11469  002F7A  1E57               	comf	??i2_angleToPulse+3,f,c
 11470  002F7C  2A54               	incf	??i2_angleToPulse,f,c
 11471  002F7E  0E00               	movlw	0
 11472  002F80  2255               	addwfc	??i2_angleToPulse+1,f,c
 11473  002F82  2256               	addwfc	??i2_angleToPulse+2,f,c
 11474  002F84  2257               	addwfc	??i2_angleToPulse+3,f,c
 11475  002F86  505C               	movf	i2angleToPulse@a180,w,c
 11476  002F88  2454               	addwf	??i2_angleToPulse,w,c
 11477  002F8A  6E09               	movwf	i2___altoft@c,c
 11478  002F8C  505D               	movf	i2angleToPulse@a180+1,w,c
 11479  002F8E  2055               	addwfc	??i2_angleToPulse+1,w,c
 11480  002F90  6E0A               	movwf	i2___altoft@c+1,c
 11481  002F92  505E               	movf	i2angleToPulse@a180+2,w,c
 11482  002F94  2056               	addwfc	??i2_angleToPulse+2,w,c
 11483  002F96  6E0B               	movwf	i2___altoft@c+2,c
 11484  002F98  505F               	movf	i2angleToPulse@a180+3,w,c
 11485  002F9A  2057               	addwfc	??i2_angleToPulse+3,w,c
 11486  002F9C  6E0C               	movwf	i2___altoft@c+3,c
 11487  002F9E  ECC2  F022         	call	i2___altoft	;wreg free
 11488  002FA2  C009  F01F         	movff	?i2___altoft,i2___ftmul@f2
 11489  002FA6  C00A  F020         	movff	?i2___altoft+1,i2___ftmul@f2+1
 11490  002FAA  C00B  F021         	movff	?i2___altoft+2,i2___ftmul@f2+2
 11491  002FAE  0E00               	movlw	0
 11492  002FB0  6E10               	movwf	i2___ftdiv@f2,c
 11493  002FB2  0E34               	movlw	52
 11494  002FB4  6E11               	movwf	i2___ftdiv@f2+1,c
 11495  002FB6  0E43               	movlw	67
 11496  002FB8  6E12               	movwf	i2___ftdiv@f2+2,c
 11497  002FBA  C050  F009         	movff	i2angleToPulse@angle,i2___awtoft@c
 11498  002FBE  C051  F00A         	movff	i2angleToPulse@angle+1,i2___awtoft@c+1
 11499  002FC2  EC3F  F025         	call	i2___awtoft	;wreg free
 11500  002FC6  C009  F00D         	movff	?i2___awtoft,i2___ftdiv@f1
 11501  002FCA  C00A  F00E         	movff	?i2___awtoft+1,i2___ftdiv@f1+1
 11502  002FCE  C00B  F00F         	movff	?i2___awtoft+2,i2___ftdiv@f1+2
 11503  002FD2  EC7E  F01C         	call	i2___ftdiv	;wreg free
 11504  002FD6  C00D  F01C         	movff	?i2___ftdiv,i2___ftmul@f1
 11505  002FDA  C00E  F01D         	movff	?i2___ftdiv+1,i2___ftmul@f1+1
 11506  002FDE  C00F  F01E         	movff	?i2___ftdiv+2,i2___ftmul@f1+2
 11507  002FE2  EC8A  F01B         	call	i2___ftmul	;wreg free
 11508  002FE6  C01C  F038         	movff	?i2___ftmul,i2___ftadd@f2
 11509  002FEA  C01D  F039         	movff	?i2___ftmul+1,i2___ftadd@f2+1
 11510  002FEE  C01E  F03A         	movff	?i2___ftmul+2,i2___ftadd@f2+2
 11511  002FF2  C063  F009         	movff	i2angleToPulse@a000,i2___altoft@c
 11512  002FF6  C064  F00A         	movff	i2angleToPulse@a000+1,i2___altoft@c+1
 11513  002FFA  C065  F00B         	movff	i2angleToPulse@a000+2,i2___altoft@c+2
 11514  002FFE  C066  F00C         	movff	i2angleToPulse@a000+3,i2___altoft@c+3
 11515  003002  ECC2  F022         	call	i2___altoft	;wreg free
 11516  003006  C009  F035         	movff	?i2___altoft,i2___ftadd@f1
 11517  00300A  C00A  F036         	movff	?i2___altoft+1,i2___ftadd@f1+1
 11518  00300E  C00B  F037         	movff	?i2___altoft+2,i2___ftadd@f1+2
 11519  003012  EC87  F012         	call	i2___ftadd	;wreg free
 11520  003016  C035  F060         	movff	?i2___ftadd,i2_angleToPulse$1541
 11521  00301A  C036  F061         	movff	?i2___ftadd+1,i2_angleToPulse$1541+1
 11522  00301E  C037  F062         	movff	?i2___ftadd+2,i2_angleToPulse$1541+2
 11523                           
 11524                           ;servo.c: 38: return a000 + angle/180.0*(a180-a000) + offset;
 11525  003022  C058  F009         	movff	i2angleToPulse@offset,i2___altoft@c
 11526  003026  C059  F00A         	movff	i2angleToPulse@offset+1,i2___altoft@c+1
 11527  00302A  C05A  F00B         	movff	i2angleToPulse@offset+2,i2___altoft@c+2
 11528  00302E  C05B  F00C         	movff	i2angleToPulse@offset+3,i2___altoft@c+3
 11529  003032  ECC2  F022         	call	i2___altoft	;wreg free
 11530  003036  C009  F038         	movff	?i2___altoft,i2___ftadd@f2
 11531  00303A  C00A  F039         	movff	?i2___altoft+1,i2___ftadd@f2+1
 11532  00303E  C00B  F03A         	movff	?i2___altoft+2,i2___ftadd@f2+2
 11533  003042  C060  F035         	movff	i2_angleToPulse$1541,i2___ftadd@f1
 11534  003046  C061  F036         	movff	i2_angleToPulse$1541+1,i2___ftadd@f1+1
 11535  00304A  C062  F037         	movff	i2_angleToPulse$1541+2,i2___ftadd@f1+2
 11536  00304E  EC87  F012         	call	i2___ftadd	;wreg free
 11537  003052  C035  F041         	movff	?i2___ftadd,i2___fttol@f1
 11538  003056  C036  F042         	movff	?i2___ftadd+1,i2___fttol@f1+1
 11539  00305A  C037  F043         	movff	?i2___ftadd+2,i2___fttol@f1+2
 11540  00305E  EC04  F01C         	call	i2___fttol	;wreg free
 11541  003062  C041  F050         	movff	?i2___fttol,?i2_angleToPulse
 11542  003066  C042  F051         	movff	?i2___fttol+1,?i2_angleToPulse+1
 11543  00306A  C043  F052         	movff	?i2___fttol+2,?i2_angleToPulse+2
 11544  00306E  C044  F053         	movff	?i2___fttol+3,?i2_angleToPulse+3
 11545  003072  0012               	return	
 11546  003074                     __end_ofi2_angleToPulse:
 11547                           	opt stack 0
 11548                           pclatu	equ	0xFFB
 11549                           pclath	equ	0xFFA
 11550                           tblptru	equ	0xFF8
 11551                           tblptrh	equ	0xFF7
 11552                           tblptrl	equ	0xFF6
 11553                           tablat	equ	0xFF5
 11554                           prodh	equ	0xFF4
 11555                           prodl	equ	0xFF3
 11556                           intcon	equ	0xFF2
 11557                           intcon3	equ	0xFF0
 11558                           postinc0	equ	0xFEE
 11559                           fsr0h	equ	0xFEA
 11560                           fsr0l	equ	0xFE9
 11561                           wreg	equ	0xFE8
 11562                           postdec1	equ	0xFE5
 11563                           fsr1h	equ	0xFE2
 11564                           fsr1l	equ	0xFE1
 11565                           indf2	equ	0xFDF
 11566                           postinc2	equ	0xFDE
 11567                           postdec2	equ	0xFDD
 11568                           fsr2h	equ	0xFDA
 11569                           fsr2l	equ	0xFD9
 11570                           status	equ	0xFD8
 11571                           
 11572 ;; *************** function i2___ftdiv *****************
 11573 ;; Defined at:
 11574 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 11575 ;; Parameters:    Size  Location     Type
 11576 ;;  f1              3   12[COMRAM] float 
 11577 ;;  f2              3   15[COMRAM] float 
 11578 ;; Auto vars:     Size  Location     Type
 11579 ;;  __ftdiv         3   22[COMRAM] float 
 11580 ;;  __ftdiv         1   26[COMRAM] unsigned char 
 11581 ;;  __ftdiv         1   25[COMRAM] unsigned char 
 11582 ;;  __ftdiv         1   21[COMRAM] unsigned char 
 11583 ;; Return value:  Size  Location     Type
 11584 ;;                  3   12[COMRAM] float 
 11585 ;; Registers used:
 11586 ;;		wreg, status,2, status,0, cstack
 11587 ;; Tracked objects:
 11588 ;;		On entry : 0/0
 11589 ;;		On exit  : 0/0
 11590 ;;		Unchanged: 0/0
 11591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11592 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11593 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11594 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11595 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11596 ;;Total ram usage:       15 bytes
 11597 ;; Hardware stack levels used:    1
 11598 ;; Hardware stack levels required when called:    1
 11599 ;; This function calls:
 11600 ;;		i2___ftpack
 11601 ;; This function is called by:
 11602 ;;		i2_angleToPulse
 11603 ;; This function uses a non-reentrant model
 11604 ;;
 11605                           
 11606                           	psect	text42
 11607  0038FC                     __ptext42:
 11608                           	opt stack 0
 11609  0038FC                     i2___ftdiv:
 11610                           	opt stack 20
 11611                           
 11612                           ;incstack = 0
 11613  0038FC  C00F  F013         	movff	i2___ftdiv@f1+2,??i2___ftdiv
 11614  003900  6A14               	clrf	(??i2___ftdiv+1)& (0+255),c
 11615  003902  6A15               	clrf	(??i2___ftdiv+2)& (0+255),c
 11616  003904  340E               	rlcf	i2___ftdiv@f1+1,w,c
 11617  003906  3613               	rlcf	??i2___ftdiv& (0+255),f,c
 11618  003908  E301               	bnc	u492_41
 11619  00390A  8014               	bsf	(??i2___ftdiv+1)& (0+255),0,c
 11620  00390C                     u492_41:
 11621  00390C  5013               	movf	??i2___ftdiv,w,c
 11622  00390E  6E1A               	movwf	i2___ftdiv@exp,c
 11623  003910  501A               	movf	i2___ftdiv@exp,w,c
 11624  003912  A4D8               	btfss	status,2,c
 11625  003914  D007               	goto	i2l4966
 11626  003916  0E00               	movlw	0
 11627  003918  6E0D               	movwf	?i2___ftdiv,c
 11628  00391A  0E00               	movlw	0
 11629  00391C  6E0E               	movwf	?i2___ftdiv+1,c
 11630  00391E  0E00               	movlw	0
 11631  003920  6E0F               	movwf	?i2___ftdiv+2,c
 11632  003922  0012               	return	
 11633  003924                     i2l4966:
 11634  003924  C012  F013         	movff	i2___ftdiv@f2+2,??i2___ftdiv
 11635  003928  6A14               	clrf	(??i2___ftdiv+1)& (0+255),c
 11636  00392A  6A15               	clrf	(??i2___ftdiv+2)& (0+255),c
 11637  00392C  3411               	rlcf	i2___ftdiv@f2+1,w,c
 11638  00392E  3613               	rlcf	??i2___ftdiv& (0+255),f,c
 11639  003930  E301               	bnc	u494_41
 11640  003932  8014               	bsf	(??i2___ftdiv+1)& (0+255),0,c
 11641  003934                     u494_41:
 11642  003934  5013               	movf	??i2___ftdiv,w,c
 11643  003936  6E1B               	movwf	i2___ftdiv@sign,c
 11644  003938  501B               	movf	i2___ftdiv@sign,w,c
 11645  00393A  A4D8               	btfss	status,2,c
 11646  00393C  D007               	goto	i2l4972
 11647  00393E  0E00               	movlw	0
 11648  003940  6E0D               	movwf	?i2___ftdiv,c
 11649  003942  0E00               	movlw	0
 11650  003944  6E0E               	movwf	?i2___ftdiv+1,c
 11651  003946  0E00               	movlw	0
 11652  003948  6E0F               	movwf	?i2___ftdiv+2,c
 11653  00394A  0012               	return	
 11654  00394C                     i2l4972:
 11655  00394C  0E00               	movlw	0
 11656  00394E  6E17               	movwf	i2___ftdiv@f3,c
 11657  003950  0E00               	movlw	0
 11658  003952  6E18               	movwf	i2___ftdiv@f3+1,c
 11659  003954  0E00               	movlw	0
 11660  003956  6E19               	movwf	i2___ftdiv@f3+2,c
 11661  003958  501B               	movf	i2___ftdiv@sign,w,c
 11662  00395A  0F89               	addlw	137
 11663  00395C  5E1A               	subwf	i2___ftdiv@exp,f,c
 11664  00395E  C00F  F01B         	movff	i2___ftdiv@f1+2,i2___ftdiv@sign
 11665  003962  5012               	movf	i2___ftdiv@f2+2,w,c
 11666  003964  1A1B               	xorwf	i2___ftdiv@sign,f,c
 11667  003966  0E80               	movlw	128
 11668  003968  161B               	andwf	i2___ftdiv@sign,f,c
 11669  00396A  8E0E               	bsf	i2___ftdiv@f1+1,7,c
 11670  00396C  0EFF               	movlw	255
 11671  00396E  160D               	andwf	i2___ftdiv@f1,f,c
 11672  003970  0EFF               	movlw	255
 11673  003972  160E               	andwf	i2___ftdiv@f1+1,f,c
 11674  003974  0E00               	movlw	0
 11675  003976  160F               	andwf	i2___ftdiv@f1+2,f,c
 11676  003978  8E11               	bsf	i2___ftdiv@f2+1,7,c
 11677  00397A  0EFF               	movlw	255
 11678  00397C  1610               	andwf	i2___ftdiv@f2,f,c
 11679  00397E  0EFF               	movlw	255
 11680  003980  1611               	andwf	i2___ftdiv@f2+1,f,c
 11681  003982  0E00               	movlw	0
 11682  003984  1612               	andwf	i2___ftdiv@f2+2,f,c
 11683  003986  0E18               	movlw	24
 11684  003988  6E16               	movwf	i2___ftdiv@cntr,c
 11685  00398A                     i2l4992:
 11686  00398A  90D8               	bcf	status,0,c
 11687  00398C  3617               	rlcf	i2___ftdiv@f3,f,c
 11688  00398E  3618               	rlcf	i2___ftdiv@f3+1,f,c
 11689  003990  3619               	rlcf	i2___ftdiv@f3+2,f,c
 11690  003992  5010               	movf	i2___ftdiv@f2,w,c
 11691  003994  5C0D               	subwf	i2___ftdiv@f1,w,c
 11692  003996  5011               	movf	i2___ftdiv@f2+1,w,c
 11693  003998  580E               	subwfb	i2___ftdiv@f1+1,w,c
 11694  00399A  5012               	movf	i2___ftdiv@f2+2,w,c
 11695  00399C  580F               	subwfb	i2___ftdiv@f1+2,w,c
 11696  00399E  A0D8               	btfss	status,0,c
 11697  0039A0  D007               	goto	i2l1016
 11698  0039A2  5010               	movf	i2___ftdiv@f2,w,c
 11699  0039A4  5E0D               	subwf	i2___ftdiv@f1,f,c
 11700  0039A6  5011               	movf	i2___ftdiv@f2+1,w,c
 11701  0039A8  5A0E               	subwfb	i2___ftdiv@f1+1,f,c
 11702  0039AA  5012               	movf	i2___ftdiv@f2+2,w,c
 11703  0039AC  5A0F               	subwfb	i2___ftdiv@f1+2,f,c
 11704  0039AE  8017               	bsf	i2___ftdiv@f3,0,c
 11705  0039B0                     i2l1016:
 11706  0039B0  90D8               	bcf	status,0,c
 11707  0039B2  360D               	rlcf	i2___ftdiv@f1,f,c
 11708  0039B4  360E               	rlcf	i2___ftdiv@f1+1,f,c
 11709  0039B6  360F               	rlcf	i2___ftdiv@f1+2,f,c
 11710  0039B8  2E16               	decfsz	i2___ftdiv@cntr,f,c
 11711  0039BA  D7E7               	goto	i2l4992
 11712  0039BC  C017  F001         	movff	i2___ftdiv@f3,i2___ftpack@arg
 11713  0039C0  C018  F002         	movff	i2___ftdiv@f3+1,i2___ftpack@arg+1
 11714  0039C4  C019  F003         	movff	i2___ftdiv@f3+2,i2___ftpack@arg+2
 11715  0039C8  C01A  F004         	movff	i2___ftdiv@exp,i2___ftpack@exp
 11716  0039CC  C01B  F005         	movff	i2___ftdiv@sign,i2___ftpack@sign
 11717  0039D0  ECA5  F01F         	call	i2___ftpack	;wreg free
 11718  0039D4  C001  F00D         	movff	?i2___ftpack,?i2___ftdiv
 11719  0039D8  C002  F00E         	movff	?i2___ftpack+1,?i2___ftdiv+1
 11720  0039DC  C003  F00F         	movff	?i2___ftpack+2,?i2___ftdiv+2
 11721  0039E0  0012               	return	
 11722  0039E2                     __end_ofi2___ftdiv:
 11723                           	opt stack 0
 11724                           pclatu	equ	0xFFB
 11725                           pclath	equ	0xFFA
 11726                           tblptru	equ	0xFF8
 11727                           tblptrh	equ	0xFF7
 11728                           tblptrl	equ	0xFF6
 11729                           tablat	equ	0xFF5
 11730                           prodh	equ	0xFF4
 11731                           prodl	equ	0xFF3
 11732                           intcon	equ	0xFF2
 11733                           intcon3	equ	0xFF0
 11734                           postinc0	equ	0xFEE
 11735                           fsr0h	equ	0xFEA
 11736                           fsr0l	equ	0xFE9
 11737                           wreg	equ	0xFE8
 11738                           postdec1	equ	0xFE5
 11739                           fsr1h	equ	0xFE2
 11740                           fsr1l	equ	0xFE1
 11741                           indf2	equ	0xFDF
 11742                           postinc2	equ	0xFDE
 11743                           postdec2	equ	0xFDD
 11744                           fsr2h	equ	0xFDA
 11745                           fsr2l	equ	0xFD9
 11746                           status	equ	0xFD8
 11747                           
 11748 ;; *************** function i2___awtoft *****************
 11749 ;; Defined at:
 11750 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 11751 ;; Parameters:    Size  Location     Type
 11752 ;;  c               2    8[COMRAM] int 
 11753 ;; Auto vars:     Size  Location     Type
 11754 ;;  __awtoft        1   11[COMRAM] unsigned char 
 11755 ;; Return value:  Size  Location     Type
 11756 ;;                  3    8[COMRAM] float 
 11757 ;; Registers used:
 11758 ;;		wreg, status,2, status,0, cstack
 11759 ;; Tracked objects:
 11760 ;;		On entry : 0/0
 11761 ;;		On exit  : 0/0
 11762 ;;		Unchanged: 0/0
 11763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11764 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11765 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11767 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11768 ;;Total ram usage:        4 bytes
 11769 ;; Hardware stack levels used:    1
 11770 ;; Hardware stack levels required when called:    1
 11771 ;; This function calls:
 11772 ;;		i2___ftpack
 11773 ;; This function is called by:
 11774 ;;		i2_angleToPulse
 11775 ;; This function uses a non-reentrant model
 11776 ;;
 11777                           
 11778                           	psect	text43
 11779  004A7E                     __ptext43:
 11780                           	opt stack 0
 11781  004A7E                     i2___awtoft:
 11782                           	opt stack 20
 11783                           
 11784                           ;incstack = 0
 11785  004A7E  0E00               	movlw	0
 11786  004A80  6E0C               	movwf	i2___awtoft@sign,c
 11787  004A82  AE0A               	btfss	i2___awtoft@c+1,7,c
 11788  004A84  D006               	goto	i2l4886
 11789  004A86  6C09               	negf	i2___awtoft@c,c
 11790  004A88  1E0A               	comf	i2___awtoft@c+1,f,c
 11791  004A8A  B0D8               	btfsc	status,0,c
 11792  004A8C  2A0A               	incf	i2___awtoft@c+1,f,c
 11793  004A8E  0E01               	movlw	1
 11794  004A90  6E0C               	movwf	i2___awtoft@sign,c
 11795  004A92                     i2l4886:
 11796  004A92  C009  F001         	movff	i2___awtoft@c,i2___ftpack@arg
 11797  004A96  C00A  F002         	movff	i2___awtoft@c+1,i2___ftpack@arg+1
 11798  004A9A  6A03               	clrf	i2___ftpack@arg+2,c
 11799  004A9C  0E8E               	movlw	142
 11800  004A9E  6E04               	movwf	i2___ftpack@exp,c
 11801  004AA0  C00C  F005         	movff	i2___awtoft@sign,i2___ftpack@sign
 11802  004AA4  ECA5  F01F         	call	i2___ftpack	;wreg free
 11803  004AA8  C001  F009         	movff	?i2___ftpack,?i2___awtoft
 11804  004AAC  C002  F00A         	movff	?i2___ftpack+1,?i2___awtoft+1
 11805  004AB0  C003  F00B         	movff	?i2___ftpack+2,?i2___awtoft+2
 11806  004AB4  0012               	return	
 11807  004AB6                     __end_ofi2___awtoft:
 11808                           	opt stack 0
 11809                           pclatu	equ	0xFFB
 11810                           pclath	equ	0xFFA
 11811                           tblptru	equ	0xFF8
 11812                           tblptrh	equ	0xFF7
 11813                           tblptrl	equ	0xFF6
 11814                           tablat	equ	0xFF5
 11815                           prodh	equ	0xFF4
 11816                           prodl	equ	0xFF3
 11817                           intcon	equ	0xFF2
 11818                           intcon3	equ	0xFF0
 11819                           postinc0	equ	0xFEE
 11820                           fsr0h	equ	0xFEA
 11821                           fsr0l	equ	0xFE9
 11822                           wreg	equ	0xFE8
 11823                           postdec1	equ	0xFE5
 11824                           fsr1h	equ	0xFE2
 11825                           fsr1l	equ	0xFE1
 11826                           indf2	equ	0xFDF
 11827                           postinc2	equ	0xFDE
 11828                           postdec2	equ	0xFDD
 11829                           fsr2h	equ	0xFDA
 11830                           fsr2l	equ	0xFD9
 11831                           status	equ	0xFD8
 11832                           
 11833 ;; *************** function i2___altoft *****************
 11834 ;; Defined at:
 11835 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 11836 ;; Parameters:    Size  Location     Type
 11837 ;;  c               4    8[COMRAM] long 
 11838 ;; Auto vars:     Size  Location     Type
 11839 ;;  __altoft        1   17[COMRAM] unsigned char 
 11840 ;;  __altoft        1   16[COMRAM] unsigned char 
 11841 ;; Return value:  Size  Location     Type
 11842 ;;                  3    8[COMRAM] float 
 11843 ;; Registers used:
 11844 ;;		wreg, status,2, status,0, cstack
 11845 ;; Tracked objects:
 11846 ;;		On entry : 0/0
 11847 ;;		On exit  : 0/0
 11848 ;;		Unchanged: 0/0
 11849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11850 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11851 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11852 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11853 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11854 ;;Total ram usage:       10 bytes
 11855 ;; Hardware stack levels used:    1
 11856 ;; Hardware stack levels required when called:    1
 11857 ;; This function calls:
 11858 ;;		i2___ftpack
 11859 ;; This function is called by:
 11860 ;;		i2_angleToPulse
 11861 ;; This function uses a non-reentrant model
 11862 ;;
 11863                           
 11864                           	psect	text44
 11865  004584                     __ptext44:
 11866                           	opt stack 0
 11867  004584                     i2___altoft:
 11868                           	opt stack 20
 11869                           
 11870                           ;incstack = 0
 11871  004584  0E00               	movlw	0
 11872  004586  6E12               	movwf	i2___altoft@sign,c
 11873  004588  0E8E               	movlw	142
 11874  00458A  6E11               	movwf	i2___altoft@exp,c
 11875  00458C  AE0C               	btfss	i2___altoft@c+3,7,c
 11876  00458E  D011               	goto	i2l4792
 11877  004590  1E0C               	comf	i2___altoft@c+3,f,c
 11878  004592  1E0B               	comf	i2___altoft@c+2,f,c
 11879  004594  1E0A               	comf	i2___altoft@c+1,f,c
 11880  004596  6C09               	negf	i2___altoft@c,c
 11881  004598  0E00               	movlw	0
 11882  00459A  220A               	addwfc	i2___altoft@c+1,f,c
 11883  00459C  220B               	addwfc	i2___altoft@c+2,f,c
 11884  00459E  220C               	addwfc	i2___altoft@c+3,f,c
 11885  0045A0  0E01               	movlw	1
 11886  0045A2  6E12               	movwf	i2___altoft@sign,c
 11887  0045A4  D006               	goto	i2l4792
 11888  0045A6                     i2l4790:
 11889  0045A6  90D8               	bcf	status,0,c
 11890  0045A8  320C               	rrcf	i2___altoft@c+3,f,c
 11891  0045AA  320B               	rrcf	i2___altoft@c+2,f,c
 11892  0045AC  320A               	rrcf	i2___altoft@c+1,f,c
 11893  0045AE  3209               	rrcf	i2___altoft@c,f,c
 11894  0045B0  2A11               	incf	i2___altoft@exp,f,c
 11895  0045B2                     i2l4792:
 11896  0045B2  0E00               	movlw	0
 11897  0045B4  1409               	andwf	i2___altoft@c,w,c
 11898  0045B6  6E0D               	movwf	??i2___altoft& (0+255),c
 11899  0045B8  0E00               	movlw	0
 11900  0045BA  140A               	andwf	i2___altoft@c+1,w,c
 11901  0045BC  6E0E               	movwf	(??i2___altoft+1)& (0+255),c
 11902  0045BE  0E00               	movlw	0
 11903  0045C0  140B               	andwf	i2___altoft@c+2,w,c
 11904  0045C2  6E0F               	movwf	(??i2___altoft+2)& (0+255),c
 11905  0045C4  0EFF               	movlw	255
 11906  0045C6  140C               	andwf	i2___altoft@c+3,w,c
 11907  0045C8  6E10               	movwf	(??i2___altoft+3)& (0+255),c
 11908  0045CA  500D               	movf	??i2___altoft,w,c
 11909  0045CC  100E               	iorwf	??i2___altoft+1,w,c
 11910  0045CE  100F               	iorwf	??i2___altoft+2,w,c
 11911  0045D0  1010               	iorwf	??i2___altoft+3,w,c
 11912  0045D2  A4D8               	btfss	status,2,c
 11913  0045D4  D7E8               	goto	i2l4790
 11914  0045D6  C009  F001         	movff	i2___altoft@c,i2___ftpack@arg
 11915  0045DA  C00A  F002         	movff	i2___altoft@c+1,i2___ftpack@arg+1
 11916  0045DE  C00B  F003         	movff	i2___altoft@c+2,i2___ftpack@arg+2
 11917  0045E2  C011  F004         	movff	i2___altoft@exp,i2___ftpack@exp
 11918  0045E6  C012  F005         	movff	i2___altoft@sign,i2___ftpack@sign
 11919  0045EA  ECA5  F01F         	call	i2___ftpack	;wreg free
 11920  0045EE  C001  F009         	movff	?i2___ftpack,?i2___altoft
 11921  0045F2  C002  F00A         	movff	?i2___ftpack+1,?i2___altoft+1
 11922  0045F6  C003  F00B         	movff	?i2___ftpack+2,?i2___altoft+2
 11923  0045FA  0012               	return	
 11924  0045FC                     __end_ofi2___altoft:
 11925                           	opt stack 0
 11926                           pclatu	equ	0xFFB
 11927                           pclath	equ	0xFFA
 11928                           tblptru	equ	0xFF8
 11929                           tblptrh	equ	0xFF7
 11930                           tblptrl	equ	0xFF6
 11931                           tablat	equ	0xFF5
 11932                           prodh	equ	0xFF4
 11933                           prodl	equ	0xFF3
 11934                           intcon	equ	0xFF2
 11935                           intcon3	equ	0xFF0
 11936                           postinc0	equ	0xFEE
 11937                           fsr0h	equ	0xFEA
 11938                           fsr0l	equ	0xFE9
 11939                           wreg	equ	0xFE8
 11940                           postdec1	equ	0xFE5
 11941                           fsr1h	equ	0xFE2
 11942                           fsr1l	equ	0xFE1
 11943                           indf2	equ	0xFDF
 11944                           postinc2	equ	0xFDE
 11945                           postdec2	equ	0xFDD
 11946                           fsr2h	equ	0xFDA
 11947                           fsr2l	equ	0xFD9
 11948                           status	equ	0xFD8
 11949                           
 11950 ;; *************** function i2_printf *****************
 11951 ;; Defined at:
 11952 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 11953 ;; Parameters:    Size  Location     Type
 11954 ;;  f               2   79[COMRAM] PTR const unsigned char 
 11955 ;;		 -> STR_17(17), STR_16(18), STR_15(17), STR_14(18), 
 11956 ;;		 -> STR_13(17), STR_12(19), STR_11(17), STR_10(18), 
 11957 ;;		 -> STR_9(17), STR_8(18), STR_7(17), STR_6(18), 
 11958 ;;		 -> STR_5(9), STR_4(8), STR_3(10), STR_2(24), 
 11959 ;;		 -> STR_1(8), 
 11960 ;; Auto vars:     Size  Location     Type
 11961 ;;  printf          4  105[COMRAM] unsigned long 
 11962 ;;  printf          4  101[COMRAM] struct .
 11963 ;;  printf          3  109[COMRAM] struct .
 11964 ;;  printf          3    0        PTR const unsigned char 
 11965 ;;  printf          2   99[COMRAM] int 
 11966 ;;  printf          2   97[COMRAM] int 
 11967 ;;  printf          2   95[COMRAM] unsigned short 
 11968 ;;  printf          2   93[COMRAM] PTR void [1]
 11969 ;;		 -> ?i2_printf(2), ?_printf(2), 
 11970 ;;  printf          2    0        unsigned int 
 11971 ;;  printf          2    0        int 
 11972 ;;  printf          1  112[COMRAM] char 
 11973 ;;  printf          1   92[COMRAM] unsigned char 
 11974 ;;  printf          1    0        unsigned char 
 11975 ;; Return value:  Size  Location     Type
 11976 ;;                  2   79[COMRAM] int 
 11977 ;; Registers used:
 11978 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11979 ;; Tracked objects:
 11980 ;;		On entry : 0/0
 11981 ;;		On exit  : 0/0
 11982 ;;		Unchanged: 0/0
 11983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11984 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11985 ;;      Locals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11986 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11987 ;;      Totals:        34       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11988 ;;Total ram usage:       34 bytes
 11989 ;; Hardware stack levels used:    1
 11990 ;; Hardware stack levels required when called:    4
 11991 ;; This function calls:
 11992 ;;		i2___awdiv
 11993 ;;		i2___ftadd
 11994 ;;		i2___ftge
 11995 ;;		i2___ftmul
 11996 ;;		i2___ftneg
 11997 ;;		i2___ftsub
 11998 ;;		i2___fttol
 11999 ;;		i2___lldiv
 12000 ;;		i2___llmod
 12001 ;;		i2___lltoft
 12002 ;;		i2___wmul
 12003 ;;		i2__div_to_l_
 12004 ;;		i2__tdiv_to_l_
 12005 ;;		i2_fround
 12006 ;;		i2_putch
 12007 ;;		i2_scale
 12008 ;; This function is called by:
 12009 ;;		_service
 12010 ;; This function uses a non-reentrant model
 12011 ;;
 12012                           
 12013                           	psect	text45
 12014  000964                     __ptext45:
 12015                           	opt stack 0
 12016  000964                     i2_printf:
 12017                           	opt stack 19
 12018                           
 12019                           ;doprnt.c: 466: va_list ap;
 12020                           ;doprnt.c: 499: signed char c;
 12021                           ;doprnt.c: 501: int width;
 12022                           ;doprnt.c: 504: int prec;
 12023                           ;doprnt.c: 508: unsigned short flag;
 12024                           ;doprnt.c: 515: char d;
 12025                           ;doprnt.c: 516: double fval;
 12026                           ;doprnt.c: 517: int exp;
 12027                           ;doprnt.c: 523: union {
 12028                           ;doprnt.c: 524: unsigned long vd;
 12029                           ;doprnt.c: 525: double integ;
 12030                           ;doprnt.c: 526: } tmpval;
 12031                           ;doprnt.c: 528: unsigned long val;
 12032                           ;doprnt.c: 529: unsigned len;
 12033                           ;doprnt.c: 530: const char * cp;
 12034                           ;doprnt.c: 533: *ap = __va_start();
 12035                           
 12036                           ;incstack = 0
 12037  000964  0E52               	movlw	low (?i2_printf+2)
 12038  000966  6E5E               	movwf	i2printf@ap,c
 12039  000968  0E00               	movlw	high (?i2_printf+2)
 12040  00096A  6E5F               	movwf	i2printf@ap+1,c
 12041                           
 12042                           ;doprnt.c: 536: while(c = *f++) {
 12043  00096C  D3EA               	goto	i2l6138
 12044  00096E                     i2l5920:
 12045                           
 12046                           ;doprnt.c: 538: if(c != '%')
 12047  00096E  0E25               	movlw	37
 12048  000970  1871               	xorwf	i2printf@c,w,c
 12049  000972  B4D8               	btfsc	status,2,c
 12050  000974  D004               	goto	i2l5924
 12051                           
 12052                           ;doprnt.c: 540: {
 12053                           ;doprnt.c: 541: (putch(c) );
 12054  000976  5071               	movf	i2printf@c,w,c
 12055  000978  EC0B  F026         	call	i2_putch
 12056                           
 12057                           ;doprnt.c: 542: continue;
 12058  00097C  D3E2               	goto	i2l6138
 12059  00097E                     i2l5924:
 12060                           
 12061                           ;doprnt.c: 543: }
 12062                           ;doprnt.c: 548: flag = 0;
 12063  00097E  0E00               	movlw	0
 12064  000980  6E61               	movwf	i2printf@flag+1,c
 12065  000982  0E00               	movlw	0
 12066  000984  6E60               	movwf	i2printf@flag,c
 12067                           
 12068                           ;doprnt.c: 635: switch(c = *f++) {
 12069  000986  D012               	goto	i2l5938
 12070  000988                     i2l5926:
 12071                           
 12072                           ;doprnt.c: 663: flag |= 0x400;
 12073  000988  8461               	bsf	i2printf@flag+1,2,c
 12074                           
 12075                           ;doprnt.c: 698: case 'i':
 12076                           ;doprnt.c: 699: break;
 12077                           
 12078                           ;doprnt.c: 697: case 'd':
 12079                           
 12080                           ;doprnt.c: 664: break;
 12081  00098A  D02D               	goto	i2l5940
 12082  00098C                     i2l5928:
 12083                           
 12084                           ;doprnt.c: 721: flag |= 0x80;
 12085  00098C  8E60               	bsf	i2printf@flag,7,c
 12086                           
 12087                           ;doprnt.c: 723: break;
 12088  00098E  D02B               	goto	i2l5940
 12089  000990                     i2l5930:
 12090                           
 12091                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 12092  000990  C05E  FFD9         	movff	i2printf@ap,fsr2l
 12093  000994  C05F  FFDA         	movff	i2printf@ap+1,fsr2h
 12094  000998  50DF               	movf	indf2,w,c
 12095  00099A  6E71               	movwf	i2printf@c,c
 12096  00099C  0E02               	movlw	2
 12097  00099E  265E               	addwf	i2printf@ap,f,c
 12098  0009A0  0E00               	movlw	0
 12099  0009A2  225F               	addwfc	i2printf@ap+1,f,c
 12100  0009A4                     i2l5934:
 12101                           
 12102                           ;doprnt.c: 809: (putch(c) );
 12103  0009A4  5071               	movf	i2printf@c,w,c
 12104  0009A6  EC0B  F026         	call	i2_putch
 12105                           
 12106                           ;doprnt.c: 810: continue;
 12107  0009AA  D3CB               	goto	i2l6138
 12108  0009AC                     i2l5938:
 12109  0009AC  C050  FFF6         	movff	i2printf@f,tblptrl
 12110  0009B0  C051  FFF7         	movff	i2printf@f+1,tblptrh
 12111  0009B4  4A50               	infsnz	i2printf@f,f,c
 12112  0009B6  2A51               	incf	i2printf@f+1,f,c
 12113  0009B8                     	if	0	;tblptru may be non-zero
 12114  0009B8                     	endif
 12115  0009B8                     	if	0	;tblptru may be non-zero
 12116  0009B8                     	endif
 12117  0009B8  0008               	tblrd		*
 12118  0009BA  CFF5 F071          	movff	tablat,i2printf@c
 12119  0009BE  5071               	movf	i2printf@c,w,c
 12120                           
 12121                           ; Switch size 1, requested type "space"
 12122                           ; Number of cases is 6, Range of values is 0 to 120
 12123                           ; switch strategies available:
 12124                           ; Name         Instructions Cycles
 12125                           ; simple_byte           19    10 (average)
 12126                           ;	Chosen strategy is simple_byte
 12127  0009C0  0A00               	xorlw	0	; case 0
 12128  0009C2  B4D8               	btfsc	status,2,c
 12129  0009C4  0012               	return	
 12130  0009C6  0A63               	xorlw	99	; case 99
 12131  0009C8  B4D8               	btfsc	status,2,c
 12132  0009CA  D7E2               	goto	i2l5930
 12133  0009CC  0A07               	xorlw	7	; case 100
 12134  0009CE  B4D8               	btfsc	status,2,c
 12135  0009D0  D00A               	goto	i2l5940
 12136  0009D2  0A02               	xorlw	2	; case 102
 12137  0009D4  B4D8               	btfsc	status,2,c
 12138  0009D6  D7D8               	goto	i2l5926
 12139  0009D8  0A0F               	xorlw	15	; case 105
 12140  0009DA  B4D8               	btfsc	status,2,c
 12141  0009DC  D004               	goto	i2l5940
 12142  0009DE  0A11               	xorlw	17	; case 120
 12143  0009E0  B4D8               	btfsc	status,2,c
 12144  0009E2  D7D4               	goto	i2l5928
 12145  0009E4  D7DF               	goto	i2l5934
 12146  0009E6                     i2l5940:
 12147                           
 12148                           ;doprnt.c: 825: if(flag & (0x700)) {
 12149  0009E6  0E07               	movlw	7
 12150  0009E8  1461               	andwf	i2printf@flag+1,w,c
 12151  0009EA  B4D8               	btfsc	status,2,c
 12152  0009EC  D29C               	goto	i2l657
 12153                           
 12154                           ;doprnt.c: 829: prec = 6;
 12155  0009EE  0E00               	movlw	0
 12156  0009F0  6E63               	movwf	i2printf@prec+1,c
 12157  0009F2  0E06               	movlw	6
 12158  0009F4  6E62               	movwf	i2printf@prec,c
 12159                           
 12160                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 12161  0009F6  C05E  FFD9         	movff	i2printf@ap,fsr2l
 12162  0009FA  C05F  FFDA         	movff	i2printf@ap+1,fsr2h
 12163  0009FE  CFDE F06E          	movff	postinc2,i2printf@fval
 12164  000A02  CFDE F06F          	movff	postinc2,i2printf@fval+1
 12165  000A06  CFDD F070          	movff	postdec2,i2printf@fval+2
 12166  000A0A  0E03               	movlw	3
 12167  000A0C  265E               	addwf	i2printf@ap,f,c
 12168  000A0E  0E00               	movlw	0
 12169  000A10  225F               	addwfc	i2printf@ap+1,f,c
 12170                           
 12171                           ;doprnt.c: 831: if(fval < 0.0) {
 12172  000A12  AE70               	btfss	i2printf@fval+2,7,c
 12173  000A14  D010               	goto	i2l5954
 12174                           
 12175                           ;doprnt.c: 832: fval = -fval;
 12176  000A16  C06E  F001         	movff	i2printf@fval,i2___ftneg@f1
 12177  000A1A  C06F  F002         	movff	i2printf@fval+1,i2___ftneg@f1+1
 12178  000A1E  C070  F003         	movff	i2printf@fval+2,i2___ftneg@f1+2
 12179  000A22  ECF9  F025         	call	i2___ftneg	;wreg free
 12180  000A26  C001  F06E         	movff	?i2___ftneg,i2printf@fval
 12181  000A2A  C002  F06F         	movff	?i2___ftneg+1,i2printf@fval+1
 12182  000A2E  C003  F070         	movff	?i2___ftneg+2,i2printf@fval+2
 12183                           
 12184                           ;doprnt.c: 833: flag |= 0x03;
 12185  000A32  0E03               	movlw	3
 12186  000A34  1260               	iorwf	i2printf@flag,f,c
 12187  000A36                     i2l5954:
 12188                           
 12189                           ;doprnt.c: 834: }
 12190                           ;doprnt.c: 835: exp = 0;
 12191  000A36  0E00               	movlw	0
 12192  000A38  6E65               	movwf	i2printf@exp+1,c
 12193  000A3A  0E00               	movlw	0
 12194  000A3C  6E64               	movwf	i2printf@exp,c
 12195                           
 12196                           ;doprnt.c: 836: if( fval!=0) {
 12197  000A3E  506E               	movf	i2printf@fval,w,c
 12198  000A40  106F               	iorwf	i2printf@fval+1,w,c
 12199  000A42  1070               	iorwf	i2printf@fval+2,w,c
 12200  000A44  B4D8               	btfsc	status,2,c
 12201  000A46  D083               	goto	i2l5982
 12202                           
 12203                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 12204  000A48  0E82               	movlw	130
 12205  000A4A  6E54               	movwf	??i2_printf& (0+255),c
 12206  000A4C  0EFF               	movlw	255
 12207  000A4E  6E55               	movwf	(??i2_printf+1)& (0+255),c
 12208  000A50  C06E  F056         	movff	i2printf@fval,??i2_printf+2
 12209  000A54  C06F  F057         	movff	i2printf@fval+1,??i2_printf+3
 12210  000A58  C070  F058         	movff	i2printf@fval+2,??i2_printf+4
 12211  000A5C  C071  F059         	movff	i2printf@fval+3,??i2_printf+5
 12212  000A60  0E10               	movlw	16
 12213  000A62  D005               	goto	i2u617_40
 12214  000A64                     i2u617_45:
 12215  000A64  90D8               	bcf	status,0,c
 12216  000A66  3259               	rrcf	??i2_printf+5,f,c
 12217  000A68  3258               	rrcf	??i2_printf+4,f,c
 12218  000A6A  3257               	rrcf	??i2_printf+3,f,c
 12219  000A6C  3256               	rrcf	??i2_printf+2,f,c
 12220  000A6E                     i2u617_40:
 12221  000A6E  2EE8               	decfsz	wreg,f,c
 12222  000A70  D7F9               	goto	i2u617_45
 12223  000A72  5056               	movf	??i2_printf+2,w,c
 12224  000A74  2454               	addwf	??i2_printf,w,c
 12225  000A76  6E64               	movwf	i2printf@exp,c
 12226  000A78  0E00               	movlw	0
 12227  000A7A  2055               	addwfc	??i2_printf+1,w,c
 12228  000A7C  6E65               	movwf	i2printf@exp+1,c
 12229                           
 12230                           ;doprnt.c: 838: exp--;
 12231  000A7E  0664               	decf	i2printf@exp,f,c
 12232  000A80  A0D8               	btfss	status,0,c
 12233  000A82  0665               	decf	i2printf@exp+1,f,c
 12234                           
 12235                           ;doprnt.c: 839: exp *= 3;
 12236  000A84  C064  F00F         	movff	i2printf@exp,i2___wmul@multiplier
 12237  000A88  C065  F010         	movff	i2printf@exp+1,i2___wmul@multiplier+1
 12238  000A8C  0E00               	movlw	0
 12239  000A8E  6E12               	movwf	i2___wmul@multiplicand+1,c
 12240  000A90  0E03               	movlw	3
 12241  000A92  6E11               	movwf	i2___wmul@multiplicand,c
 12242  000A94  ECE6  F025         	call	i2___wmul	;wreg free
 12243  000A98  C00F  F064         	movff	?i2___wmul,i2printf@exp
 12244  000A9C  C010  F065         	movff	?i2___wmul+1,i2printf@exp+1
 12245                           
 12246                           ;doprnt.c: 840: exp /= 10;
 12247  000AA0  C064  F007         	movff	i2printf@exp,i2___awdiv@dividend
 12248  000AA4  C065  F008         	movff	i2printf@exp+1,i2___awdiv@dividend+1
 12249  000AA8  0E00               	movlw	0
 12250  000AAA  6E0A               	movwf	i2___awdiv@divisor+1,c
 12251  000AAC  0E0A               	movlw	10
 12252  000AAE  6E09               	movwf	i2___awdiv@divisor,c
 12253  000AB0  ECC5  F021         	call	i2___awdiv	;wreg free
 12254  000AB4  C007  F064         	movff	?i2___awdiv,i2printf@exp
 12255  000AB8  C008  F065         	movff	?i2___awdiv+1,i2printf@exp+1
 12256                           
 12257                           ;doprnt.c: 841: if(exp < 0)
 12258  000ABC  AE65               	btfss	i2printf@exp+1,7,c
 12259  000ABE  D003               	goto	i2l5970
 12260                           
 12261                           ;doprnt.c: 842: exp--;
 12262  000AC0  0664               	decf	i2printf@exp,f,c
 12263  000AC2  A0D8               	btfss	status,0,c
 12264  000AC4  0665               	decf	i2printf@exp+1,f,c
 12265  000AC6                     i2l5970:
 12266                           
 12267                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 12268  000AC6  5064               	movf	i2printf@exp,w,c
 12269  000AC8  0800               	sublw	0
 12270  000ACA  EC05  F00B         	call	i2_scale
 12271  000ACE  C02B  F066         	movff	?i2_scale,i2printf@tmpval
 12272  000AD2  C02C  F067         	movff	?i2_scale+1,i2printf@tmpval+1
 12273  000AD6  C02D  F068         	movff	?i2_scale+2,i2printf@tmpval+2
 12274                           
 12275                           ;doprnt.c: 847: tmpval.integ *= fval;
 12276  000ADA  C066  F01C         	movff	i2printf@tmpval,i2___ftmul@f1
 12277  000ADE  C067  F01D         	movff	i2printf@tmpval+1,i2___ftmul@f1+1
 12278  000AE2  C068  F01E         	movff	i2printf@tmpval+2,i2___ftmul@f1+2
 12279  000AE6  C06E  F01F         	movff	i2printf@fval,i2___ftmul@f2
 12280  000AEA  C06F  F020         	movff	i2printf@fval+1,i2___ftmul@f2+1
 12281  000AEE  C070  F021         	movff	i2printf@fval+2,i2___ftmul@f2+2
 12282  000AF2  EC8A  F01B         	call	i2___ftmul	;wreg free
 12283  000AF6  C01C  F066         	movff	?i2___ftmul,i2printf@tmpval
 12284  000AFA  C01D  F067         	movff	?i2___ftmul+1,i2printf@tmpval+1
 12285  000AFE  C01E  F068         	movff	?i2___ftmul+2,i2printf@tmpval+2
 12286                           
 12287                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 12288  000B02  C066  F001         	movff	i2printf@tmpval,i2___ftge@ff1
 12289  000B06  C067  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 12290  000B0A  C068  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 12291  000B0E  0E00               	movlw	0
 12292  000B10  6E04               	movwf	i2___ftge@ff2,c
 12293  000B12  0E80               	movlw	128
 12294  000B14  6E05               	movwf	i2___ftge@ff2+1,c
 12295  000B16  0E3F               	movlw	63
 12296  000B18  6E06               	movwf	i2___ftge@ff2+2,c
 12297  000B1A  EC36  F021         	call	i2___ftge	;wreg free
 12298  000B1E  B0D8               	btfsc	status,0,c
 12299  000B20  D004               	goto	i2l5978
 12300                           
 12301                           ;doprnt.c: 849: exp--;
 12302  000B22  0664               	decf	i2printf@exp,f,c
 12303  000B24  A0D8               	btfss	status,0,c
 12304  000B26  0665               	decf	i2printf@exp+1,f,c
 12305  000B28  D012               	goto	i2l5982
 12306  000B2A                     i2l5978:
 12307                           
 12308                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 12309  000B2A  C066  F001         	movff	i2printf@tmpval,i2___ftge@ff1
 12310  000B2E  C067  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 12311  000B32  C068  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 12312  000B36  0E00               	movlw	0
 12313  000B38  6E04               	movwf	i2___ftge@ff2,c
 12314  000B3A  0E20               	movlw	32
 12315  000B3C  6E05               	movwf	i2___ftge@ff2+1,c
 12316  000B3E  0E41               	movlw	65
 12317  000B40  6E06               	movwf	i2___ftge@ff2+2,c
 12318  000B42  EC36  F021         	call	i2___ftge	;wreg free
 12319  000B46  A0D8               	btfss	status,0,c
 12320  000B48  D002               	goto	i2l5982
 12321                           
 12322                           ;doprnt.c: 851: exp++;
 12323  000B4A  4A64               	infsnz	i2printf@exp,f,c
 12324  000B4C  2A65               	incf	i2printf@exp+1,f,c
 12325  000B4E                     i2l5982:
 12326                           
 12327                           ;doprnt.c: 852: }
 12328                           ;doprnt.c: 1112: if(prec <= 12)
 12329  000B4E  BE63               	btfsc	i2printf@prec+1,7,c
 12330  000B50  D006               	goto	i2l5984
 12331  000B52  5063               	movf	i2printf@prec+1,w,c
 12332  000B54  E11B               	bnz	i2l5986
 12333  000B56  0E0D               	movlw	13
 12334  000B58  5C62               	subwf	i2printf@prec,w,c
 12335  000B5A  B0D8               	btfsc	status,0,c
 12336  000B5C  D017               	goto	i2l5986
 12337  000B5E                     i2l5984:
 12338                           
 12339                           ;doprnt.c: 1113: fval += fround(prec);
 12340  000B5E  C06E  F035         	movff	i2printf@fval,i2___ftadd@f1
 12341  000B62  C06F  F036         	movff	i2printf@fval+1,i2___ftadd@f1+1
 12342  000B66  C070  F037         	movff	i2printf@fval+2,i2___ftadd@f1+2
 12343  000B6A  5062               	movf	i2printf@prec,w,c
 12344  000B6C  EC64  F011         	call	i2_fround
 12345  000B70  C02B  F038         	movff	?i2_fround,i2___ftadd@f2
 12346  000B74  C02C  F039         	movff	?i2_fround+1,i2___ftadd@f2+1
 12347  000B78  C02D  F03A         	movff	?i2_fround+2,i2___ftadd@f2+2
 12348  000B7C  EC87  F012         	call	i2___ftadd	;wreg free
 12349  000B80  C035  F06E         	movff	?i2___ftadd,i2printf@fval
 12350  000B84  C036  F06F         	movff	?i2___ftadd+1,i2printf@fval+1
 12351  000B88  C037  F070         	movff	?i2___ftadd+2,i2printf@fval+2
 12352  000B8C                     i2l5986:
 12353                           
 12354                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 12355  000B8C  BE65               	btfsc	i2printf@exp+1,7,c
 12356  000B8E  D006               	goto	i2l5988
 12357  000B90  5065               	movf	i2printf@exp+1,w,c
 12358  000B92  E11E               	bnz	i2l5994
 12359  000B94  0E0A               	movlw	10
 12360  000B96  5C64               	subwf	i2printf@exp,w,c
 12361  000B98  B0D8               	btfsc	status,0,c
 12362  000B9A  D01A               	goto	i2l5994
 12363  000B9C                     i2l5988:
 12364  000B9C  506E               	movf	i2printf@fval,w,c
 12365  000B9E  106F               	iorwf	i2printf@fval+1,w,c
 12366  000BA0  1070               	iorwf	i2printf@fval+2,w,c
 12367  000BA2  B4D8               	btfsc	status,2,c
 12368  000BA4  D051               	goto	i2l6008
 12369  000BA6  C06E  F041         	movff	i2printf@fval,i2___fttol@f1
 12370  000BAA  C06F  F042         	movff	i2printf@fval+1,i2___fttol@f1+1
 12371  000BAE  C070  F043         	movff	i2printf@fval+2,i2___fttol@f1+2
 12372  000BB2  EC04  F01C         	call	i2___fttol	;wreg free
 12373  000BB6  5041               	movf	?i2___fttol,w,c
 12374  000BB8  1042               	iorwf	?i2___fttol+1,w,c
 12375  000BBA  1043               	iorwf	?i2___fttol+2,w,c
 12376  000BBC  1044               	iorwf	?i2___fttol+3,w,c
 12377  000BBE  B4D8               	btfsc	status,2,c
 12378  000BC0  BE65               	btfsc	i2printf@exp+1,7,c
 12379  000BC2  D042               	goto	i2l6008
 12380  000BC4  5065               	movf	i2printf@exp+1,w,c
 12381  000BC6  E104               	bnz	i2l5994
 12382  000BC8  0E02               	movlw	2
 12383  000BCA  5C64               	subwf	i2printf@exp,w,c
 12384  000BCC  A0D8               	btfss	status,0,c
 12385  000BCE  D03C               	goto	i2l6008
 12386  000BD0                     i2l5994:
 12387                           
 12388                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 12389  000BD0  C066  F001         	movff	i2printf@tmpval,i2___ftge@ff1
 12390  000BD4  C067  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 12391  000BD8  C068  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 12392  000BDC  0E70               	movlw	112
 12393  000BDE  6E04               	movwf	i2___ftge@ff2,c
 12394  000BE0  0E89               	movlw	137
 12395  000BE2  6E05               	movwf	i2___ftge@ff2+1,c
 12396  000BE4  0E40               	movlw	64
 12397  000BE6  6E06               	movwf	i2___ftge@ff2+2,c
 12398  000BE8  EC36  F021         	call	i2___ftge	;wreg free
 12399  000BEC  B0D8               	btfsc	status,0,c
 12400  000BEE  D002               	goto	i2l5998
 12401                           
 12402                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 12403  000BF0  0EF7               	movlw	247
 12404  000BF2  D001               	goto	L5
 12405  000BF4                     i2l5998:
 12406                           
 12407                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 12408  000BF4  0EF8               	movlw	248
 12409  000BF6                     L5:
 12410  000BF6  2664               	addwf	i2printf@exp,f,c
 12411  000BF8  0EFF               	movlw	255
 12412  000BFA  2265               	addwfc	i2printf@exp+1,f,c
 12413                           
 12414                           ;doprnt.c: 1124: }
 12415                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
 12416  000BFC  5064               	movf	i2printf@exp,w,c
 12417  000BFE  EC05  F00B         	call	i2_scale
 12418  000C02  C02B  F066         	movff	?i2_scale,i2printf@tmpval
 12419  000C06  C02C  F067         	movff	?i2_scale+1,i2printf@tmpval+1
 12420  000C0A  C02D  F068         	movff	?i2_scale+2,i2printf@tmpval+2
 12421                           
 12422                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 12423  000C0E  C06E  F001         	movff	i2printf@fval,i2__tdiv_to_l_@f1
 12424  000C12  C06F  F002         	movff	i2printf@fval+1,i2__tdiv_to_l_@f1+1
 12425  000C16  C070  F003         	movff	i2printf@fval+2,i2__tdiv_to_l_@f1+2
 12426  000C1A  C066  F004         	movff	i2printf@tmpval,i2__tdiv_to_l_@f2
 12427  000C1E  C067  F005         	movff	i2printf@tmpval+1,i2__tdiv_to_l_@f2+1
 12428  000C22  C068  F006         	movff	i2printf@tmpval+2,i2__tdiv_to_l_@f2+2
 12429  000C26  EC3A  F018         	call	i2__tdiv_to_l_	;wreg free
 12430  000C2A  C001  F06A         	movff	?i2__tdiv_to_l_,i2printf@val
 12431  000C2E  C002  F06B         	movff	?i2__tdiv_to_l_+1,i2printf@val+1
 12432  000C32  C003  F06C         	movff	?i2__tdiv_to_l_+2,i2printf@val+2
 12433  000C36  C004  F06D         	movff	?i2__tdiv_to_l_+3,i2printf@val+3
 12434                           
 12435                           ;doprnt.c: 1129: fval = 0.0;
 12436  000C3A  0E00               	movlw	0
 12437  000C3C  6E6E               	movwf	i2printf@fval,c
 12438  000C3E  0E00               	movlw	0
 12439  000C40  6E6F               	movwf	i2printf@fval+1,c
 12440  000C42  0E00               	movlw	0
 12441  000C44  6E70               	movwf	i2printf@fval+2,c
 12442                           
 12443                           ;doprnt.c: 1130: } else {
 12444  000C46  D032               	goto	i2l6012
 12445  000C48                     i2l6008:
 12446                           
 12447                           ;doprnt.c: 1131: val = (unsigned long)fval;
 12448  000C48  C06E  F041         	movff	i2printf@fval,i2___fttol@f1
 12449  000C4C  C06F  F042         	movff	i2printf@fval+1,i2___fttol@f1+1
 12450  000C50  C070  F043         	movff	i2printf@fval+2,i2___fttol@f1+2
 12451  000C54  EC04  F01C         	call	i2___fttol	;wreg free
 12452  000C58  C041  F06A         	movff	?i2___fttol,i2printf@val
 12453  000C5C  C042  F06B         	movff	?i2___fttol+1,i2printf@val+1
 12454  000C60  C043  F06C         	movff	?i2___fttol+2,i2printf@val+2
 12455  000C64  C044  F06D         	movff	?i2___fttol+3,i2printf@val+3
 12456                           
 12457                           ;doprnt.c: 1132: fval -= (double)val;
 12458  000C68  C06E  F041         	movff	i2printf@fval,i2___ftsub@f1
 12459  000C6C  C06F  F042         	movff	i2printf@fval+1,i2___ftsub@f1+1
 12460  000C70  C070  F043         	movff	i2printf@fval+2,i2___ftsub@f1+2
 12461  000C74  C06A  F009         	movff	i2printf@val,i2___lltoft@c
 12462  000C78  C06B  F00A         	movff	i2printf@val+1,i2___lltoft@c+1
 12463  000C7C  C06C  F00B         	movff	i2printf@val+2,i2___lltoft@c+2
 12464  000C80  C06D  F00C         	movff	i2printf@val+3,i2___lltoft@c+3
 12465  000C84  ECD1  F023         	call	i2___lltoft	;wreg free
 12466  000C88  C009  F044         	movff	?i2___lltoft,i2___ftsub@f2
 12467  000C8C  C00A  F045         	movff	?i2___lltoft+1,i2___ftsub@f2+1
 12468  000C90  C00B  F046         	movff	?i2___lltoft+2,i2___ftsub@f2+2
 12469  000C94  EC00  F025         	call	i2___ftsub	;wreg free
 12470  000C98  C041  F06E         	movff	?i2___ftsub,i2printf@fval
 12471  000C9C  C042  F06F         	movff	?i2___ftsub+1,i2printf@fval+1
 12472  000CA0  C043  F070         	movff	?i2___ftsub+2,i2printf@fval+2
 12473                           
 12474                           ;doprnt.c: 1133: exp = 0;
 12475  000CA4  0E00               	movlw	0
 12476  000CA6  6E65               	movwf	i2printf@exp+1,c
 12477  000CA8  0E00               	movlw	0
 12478  000CAA  6E64               	movwf	i2printf@exp,c
 12479  000CAC                     i2l6012:
 12480                           
 12481                           ;doprnt.c: 1134: }
 12482                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 12483  000CAC  0E01               	movlw	1
 12484  000CAE  6E71               	movwf	i2printf@c,c
 12485  000CB0                     i2l6014:
 12486  000CB0  0E0A               	movlw	10
 12487  000CB2  1871               	xorwf	i2printf@c,w,c
 12488  000CB4  B4D8               	btfsc	status,2,c
 12489  000CB6  D018               	goto	i2l6026
 12490                           
 12491                           ;doprnt.c: 1137: if(val < dpowers[c])
 12492  000CB8  5071               	movf	i2printf@c,w,c
 12493  000CBA  0D04               	mullw	4
 12494  000CBC  0E31               	movlw	low _dpowers
 12495  000CBE  24F3               	addwf	prodl,w,c
 12496  000CC0  6EF6               	movwf	tblptrl,c
 12497  000CC2  0EFE               	movlw	high _dpowers
 12498  000CC4  20F4               	addwfc	prodh,w,c
 12499  000CC6  6EF7               	movwf	tblptrh,c
 12500  000CC8                     	if	0	;There are less than 3 active tblptr bytes
 12501  000CC8                     	endif
 12502  000CC8  0009               	tblrd		*+
 12503  000CCA  50F5               	movf	tablat,w,c
 12504  000CCC  5C6A               	subwf	i2printf@val,w,c
 12505  000CCE  0009               	tblrd		*+
 12506  000CD0  50F5               	movf	tablat,w,c
 12507  000CD2  586B               	subwfb	i2printf@val+1,w,c
 12508  000CD4  0009               	tblrd		*+
 12509  000CD6  50F5               	movf	tablat,w,c
 12510  000CD8  586C               	subwfb	i2printf@val+2,w,c
 12511  000CDA  0009               	tblrd		*+
 12512  000CDC  50F5               	movf	tablat,w,c
 12513  000CDE  586D               	subwfb	i2printf@val+3,w,c
 12514  000CE0  A0D8               	btfss	status,0,c
 12515  000CE2  D002               	goto	i2l6026
 12516                           
 12517                           ;doprnt.c: 1138: break;
 12518  000CE4  2A71               	incf	i2printf@c,f,c
 12519  000CE6  D7E4               	goto	i2l6014
 12520  000CE8                     i2l6026:
 12521                           
 12522                           ;doprnt.c: 1175: {
 12523                           ;doprnt.c: 1188: if(flag & 0x03)
 12524  000CE8  0E03               	movlw	3
 12525  000CEA  1460               	andwf	i2printf@flag,w,c
 12526  000CEC  6E54               	movwf	??i2_printf& (0+255),c
 12527  000CEE  0E00               	movlw	0
 12528  000CF0  1461               	andwf	i2printf@flag+1,w,c
 12529  000CF2  6E55               	movwf	(??i2_printf+1)& (0+255),c
 12530  000CF4  5054               	movf	??i2_printf,w,c
 12531  000CF6  1055               	iorwf	??i2_printf+1,w,c
 12532  000CF8  B4D8               	btfsc	status,2,c
 12533  000CFA  D048               	goto	i2l6036
 12534                           
 12535                           ;doprnt.c: 1190: (putch('-') );
 12536  000CFC  0E2D               	movlw	45
 12537  000CFE  EC0B  F026         	call	i2_putch
 12538                           
 12539                           ;doprnt.c: 1195: }
 12540                           ;doprnt.c: 1196: while(c--) {
 12541  000D02  D044               	goto	i2l6036
 12542  000D04                     i2l6030:
 12543                           
 12544                           ;doprnt.c: 1200: {
 12545                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 12546  000D04  C06A  F001         	movff	i2printf@val,i2___lldiv@dividend
 12547  000D08  C06B  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 12548  000D0C  C06C  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 12549  000D10  C06D  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 12550  000D14  5071               	movf	i2printf@c,w,c
 12551  000D16  0D04               	mullw	4
 12552  000D18  0E31               	movlw	low _dpowers
 12553  000D1A  24F3               	addwf	prodl,w,c
 12554  000D1C  6EF6               	movwf	tblptrl,c
 12555  000D1E  0EFE               	movlw	high _dpowers
 12556  000D20  20F4               	addwfc	prodh,w,c
 12557  000D22  6EF7               	movwf	tblptrh,c
 12558  000D24                     	if	0	;There are less than 3 active tblptr bytes
 12559  000D24                     	endif
 12560  000D24  0009               	tblrd		*+
 12561  000D26  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 12562  000D2A  0009               	tblrd		*+
 12563  000D2C  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 12564  000D30  0009               	tblrd		*+
 12565  000D32  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 12566  000D36  000A               	tblrd		*-
 12567  000D38  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 12568  000D3C  EC07  F022         	call	i2___lldiv	;wreg free
 12569  000D40  C001  F066         	movff	?i2___lldiv,i2printf@tmpval
 12570  000D44  C002  F067         	movff	?i2___lldiv+1,i2printf@tmpval+1
 12571  000D48  C003  F068         	movff	?i2___lldiv+2,i2printf@tmpval+2
 12572  000D4C  C004  F069         	movff	?i2___lldiv+3,i2printf@tmpval+3
 12573                           
 12574                           ;doprnt.c: 1202: tmpval.vd %= 10;
 12575  000D50  C066  F00E         	movff	i2printf@tmpval,i2___llmod@dividend
 12576  000D54  C067  F00F         	movff	i2printf@tmpval+1,i2___llmod@dividend+1
 12577  000D58  C068  F010         	movff	i2printf@tmpval+2,i2___llmod@dividend+2
 12578  000D5C  C069  F011         	movff	i2printf@tmpval+3,i2___llmod@dividend+3
 12579  000D60  0E0A               	movlw	10
 12580  000D62  6E12               	movwf	i2___llmod@divisor,c
 12581  000D64  0E00               	movlw	0
 12582  000D66  6E13               	movwf	i2___llmod@divisor+1,c
 12583  000D68  0E00               	movlw	0
 12584  000D6A  6E14               	movwf	i2___llmod@divisor+2,c
 12585  000D6C  0E00               	movlw	0
 12586  000D6E  6E15               	movwf	i2___llmod@divisor+3,c
 12587  000D70  EC6B  F023         	call	i2___llmod	;wreg free
 12588  000D74  C00E  F066         	movff	?i2___llmod,i2printf@tmpval
 12589  000D78  C00F  F067         	movff	?i2___llmod+1,i2printf@tmpval+1
 12590  000D7C  C010  F068         	movff	?i2___llmod+2,i2printf@tmpval+2
 12591  000D80  C011  F069         	movff	?i2___llmod+3,i2printf@tmpval+3
 12592                           
 12593                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
 12594  000D84  5066               	movf	i2printf@tmpval,w,c
 12595  000D86  0F30               	addlw	48
 12596  000D88  EC0B  F026         	call	i2_putch
 12597  000D8C                     i2l6036:
 12598  000D8C  0671               	decf	i2printf@c,f,c
 12599  000D8E  2871               	incf	i2printf@c,w,c
 12600  000D90  B4D8               	btfsc	status,2,c
 12601  000D92  D007               	goto	i2l6042
 12602  000D94  D7B7               	goto	i2l6030
 12603  000D96                     i2l6038:
 12604                           
 12605                           ;doprnt.c: 1208: (putch('0') );
 12606  000D96  0E30               	movlw	48
 12607  000D98  EC0B  F026         	call	i2_putch
 12608                           
 12609                           ;doprnt.c: 1209: exp--;
 12610  000D9C  0664               	decf	i2printf@exp,f,c
 12611  000D9E  A0D8               	btfss	status,0,c
 12612  000DA0  0665               	decf	i2printf@exp+1,f,c
 12613  000DA2                     i2l6042:
 12614  000DA2  BE65               	btfsc	i2printf@exp+1,7,c
 12615  000DA4  D005               	goto	i2l6044
 12616  000DA6  5065               	movf	i2printf@exp+1,w,c
 12617  000DA8  E1F6               	bnz	i2l6038
 12618  000DAA  0464               	decf	i2printf@exp,w,c
 12619  000DAC  B0D8               	btfsc	status,0,c
 12620  000DAE  D7F3               	goto	i2l6038
 12621  000DB0                     i2l6044:
 12622                           
 12623                           ;doprnt.c: 1210: }
 12624                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 12625  000DB0  BE63               	btfsc	i2printf@prec+1,7,c
 12626  000DB2  D009               	goto	i2l685
 12627  000DB4  5063               	movf	i2printf@prec+1,w,c
 12628  000DB6  E104               	bnz	i2u633_40
 12629  000DB8  0E09               	movlw	9
 12630  000DBA  5C62               	subwf	i2printf@prec,w,c
 12631  000DBC  A0D8               	btfss	status,0,c
 12632  000DBE  D003               	goto	i2l685
 12633  000DC0                     i2u633_40:
 12634                           
 12635                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 12636  000DC0  0E08               	movlw	8
 12637  000DC2  6E71               	movwf	i2printf@c,c
 12638  000DC4  D002               	goto	i2l6048
 12639  000DC6                     i2l685:
 12640                           
 12641                           ;doprnt.c: 1213: else
 12642                           ;doprnt.c: 1214: c = prec;
 12643  000DC6  C062  F071         	movff	i2printf@prec,i2printf@c
 12644  000DCA                     i2l6048:
 12645                           
 12646                           ;doprnt.c: 1215: prec -= c;
 12647  000DCA  5071               	movf	i2printf@c,w,c
 12648  000DCC  5E62               	subwf	i2printf@prec,f,c
 12649  000DCE  0E00               	movlw	0
 12650  000DD0  BE71               	btfsc	i2printf@c,7,c
 12651  000DD2  0EFF               	movlw	255
 12652  000DD4  5A63               	subwfb	i2printf@prec+1,f,c
 12653                           
 12654                           ;doprnt.c: 1219: if(c)
 12655  000DD6  5071               	movf	i2printf@c,w,c
 12656  000DD8  B4D8               	btfsc	status,2,c
 12657  000DDA  D003               	goto	i2l6054
 12658                           
 12659                           ;doprnt.c: 1221: (putch('.') );
 12660  000DDC  0E2E               	movlw	46
 12661  000DDE  EC0B  F026         	call	i2_putch
 12662  000DE2                     i2l6054:
 12663                           
 12664                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 12665  000DE2  5071               	movf	i2printf@c,w,c
 12666  000DE4  EC05  F00B         	call	i2_scale
 12667  000DE8  C02B  F05A         	movff	?i2_scale,i2_printf$1545
 12668  000DEC  C02C  F05B         	movff	?i2_scale+1,i2_printf$1545+1
 12669  000DF0  C02D  F05C         	movff	?i2_scale+2,i2_printf$1545+2
 12670                           
 12671                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 12672  000DF4  C06E  F01F         	movff	i2printf@fval,i2___ftmul@f2
 12673  000DF8  C06F  F020         	movff	i2printf@fval+1,i2___ftmul@f2+1
 12674  000DFC  C070  F021         	movff	i2printf@fval+2,i2___ftmul@f2+2
 12675  000E00  C05A  F01C         	movff	i2_printf$1545,i2___ftmul@f1
 12676  000E04  C05B  F01D         	movff	i2_printf$1545+1,i2___ftmul@f1+1
 12677  000E08  C05C  F01E         	movff	i2_printf$1545+2,i2___ftmul@f1+2
 12678  000E0C  EC8A  F01B         	call	i2___ftmul	;wreg free
 12679  000E10  C01C  F041         	movff	?i2___ftmul,i2___fttol@f1
 12680  000E14  C01D  F042         	movff	?i2___ftmul+1,i2___fttol@f1+1
 12681  000E18  C01E  F043         	movff	?i2___ftmul+2,i2___fttol@f1+2
 12682  000E1C  EC04  F01C         	call	i2___fttol	;wreg free
 12683  000E20  C041  F06A         	movff	?i2___fttol,i2printf@val
 12684  000E24  C042  F06B         	movff	?i2___fttol+1,i2printf@val+1
 12685  000E28  C043  F06C         	movff	?i2___fttol+2,i2printf@val+2
 12686  000E2C  C044  F06D         	movff	?i2___fttol+3,i2printf@val+3
 12687                           
 12688                           ;doprnt.c: 1228: while(c--) {
 12689  000E30  D06A               	goto	i2l6064
 12690  000E32                     i2l6058:
 12691                           
 12692                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 12693  000E32  C06A  F001         	movff	i2printf@val,i2___lldiv@dividend
 12694  000E36  C06B  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 12695  000E3A  C06C  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 12696  000E3E  C06D  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 12697  000E42  5071               	movf	i2printf@c,w,c
 12698  000E44  0D04               	mullw	4
 12699  000E46  0E31               	movlw	low _dpowers
 12700  000E48  24F3               	addwf	prodl,w,c
 12701  000E4A  6EF6               	movwf	tblptrl,c
 12702  000E4C  0EFE               	movlw	high _dpowers
 12703  000E4E  20F4               	addwfc	prodh,w,c
 12704  000E50  6EF7               	movwf	tblptrh,c
 12705  000E52                     	if	0	;There are less than 3 active tblptr bytes
 12706  000E52                     	endif
 12707  000E52  0009               	tblrd		*+
 12708  000E54  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 12709  000E58  0009               	tblrd		*+
 12710  000E5A  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 12711  000E5E  0009               	tblrd		*+
 12712  000E60  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 12713  000E64  000A               	tblrd		*-
 12714  000E66  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 12715  000E6A  EC07  F022         	call	i2___lldiv	;wreg free
 12716  000E6E  C001  F066         	movff	?i2___lldiv,i2printf@tmpval
 12717  000E72  C002  F067         	movff	?i2___lldiv+1,i2printf@tmpval+1
 12718  000E76  C003  F068         	movff	?i2___lldiv+2,i2printf@tmpval+2
 12719  000E7A  C004  F069         	movff	?i2___lldiv+3,i2printf@tmpval+3
 12720                           
 12721                           ;doprnt.c: 1230: tmpval.vd %= 10;
 12722  000E7E  C066  F00E         	movff	i2printf@tmpval,i2___llmod@dividend
 12723  000E82  C067  F00F         	movff	i2printf@tmpval+1,i2___llmod@dividend+1
 12724  000E86  C068  F010         	movff	i2printf@tmpval+2,i2___llmod@dividend+2
 12725  000E8A  C069  F011         	movff	i2printf@tmpval+3,i2___llmod@dividend+3
 12726  000E8E  0E0A               	movlw	10
 12727  000E90  6E12               	movwf	i2___llmod@divisor,c
 12728  000E92  0E00               	movlw	0
 12729  000E94  6E13               	movwf	i2___llmod@divisor+1,c
 12730  000E96  0E00               	movlw	0
 12731  000E98  6E14               	movwf	i2___llmod@divisor+2,c
 12732  000E9A  0E00               	movlw	0
 12733  000E9C  6E15               	movwf	i2___llmod@divisor+3,c
 12734  000E9E  EC6B  F023         	call	i2___llmod	;wreg free
 12735  000EA2  C00E  F066         	movff	?i2___llmod,i2printf@tmpval
 12736  000EA6  C00F  F067         	movff	?i2___llmod+1,i2printf@tmpval+1
 12737  000EAA  C010  F068         	movff	?i2___llmod+2,i2printf@tmpval+2
 12738  000EAE  C011  F069         	movff	?i2___llmod+3,i2printf@tmpval+3
 12739                           
 12740                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
 12741  000EB2  5066               	movf	i2printf@tmpval,w,c
 12742  000EB4  0F30               	addlw	48
 12743  000EB6  EC0B  F026         	call	i2_putch
 12744                           
 12745                           ;doprnt.c: 1232: val %= dpowers[c];
 12746  000EBA  C06A  F00E         	movff	i2printf@val,i2___llmod@dividend
 12747  000EBE  C06B  F00F         	movff	i2printf@val+1,i2___llmod@dividend+1
 12748  000EC2  C06C  F010         	movff	i2printf@val+2,i2___llmod@dividend+2
 12749  000EC6  C06D  F011         	movff	i2printf@val+3,i2___llmod@dividend+3
 12750  000ECA  5071               	movf	i2printf@c,w,c
 12751  000ECC  0D04               	mullw	4
 12752  000ECE  0E31               	movlw	low _dpowers
 12753  000ED0  24F3               	addwf	prodl,w,c
 12754  000ED2  6EF6               	movwf	tblptrl,c
 12755  000ED4  0EFE               	movlw	high _dpowers
 12756  000ED6  20F4               	addwfc	prodh,w,c
 12757  000ED8  6EF7               	movwf	tblptrh,c
 12758  000EDA                     	if	0	;There are less than 3 active tblptr bytes
 12759  000EDA                     	endif
 12760  000EDA  0009               	tblrd		*+
 12761  000EDC  CFF5 F012          	movff	tablat,i2___llmod@divisor
 12762  000EE0  0009               	tblrd		*+
 12763  000EE2  CFF5 F013          	movff	tablat,i2___llmod@divisor+1
 12764  000EE6  0009               	tblrd		*+
 12765  000EE8  CFF5 F014          	movff	tablat,i2___llmod@divisor+2
 12766  000EEC  000A               	tblrd		*-
 12767  000EEE  CFF5 F015          	movff	tablat,i2___llmod@divisor+3
 12768  000EF2  EC6B  F023         	call	i2___llmod	;wreg free
 12769  000EF6  C00E  F06A         	movff	?i2___llmod,i2printf@val
 12770  000EFA  C00F  F06B         	movff	?i2___llmod+1,i2printf@val+1
 12771  000EFE  C010  F06C         	movff	?i2___llmod+2,i2printf@val+2
 12772  000F02  C011  F06D         	movff	?i2___llmod+3,i2printf@val+3
 12773  000F06                     i2l6064:
 12774  000F06  0671               	decf	i2printf@c,f,c
 12775  000F08  2871               	incf	i2printf@c,w,c
 12776  000F0A  B4D8               	btfsc	status,2,c
 12777  000F0C  D007               	goto	i2l6070
 12778  000F0E  D791               	goto	i2l6058
 12779  000F10                     i2l6066:
 12780                           
 12781                           ;doprnt.c: 1236: (putch('0') );
 12782  000F10  0E30               	movlw	48
 12783  000F12  EC0B  F026         	call	i2_putch
 12784                           
 12785                           ;doprnt.c: 1237: prec--;
 12786  000F16  0662               	decf	i2printf@prec,f,c
 12787  000F18  A0D8               	btfss	status,0,c
 12788  000F1A  0663               	decf	i2printf@prec+1,f,c
 12789  000F1C                     i2l6070:
 12790  000F1C  5062               	movf	i2printf@prec,w,c
 12791  000F1E  1063               	iorwf	i2printf@prec+1,w,c
 12792  000F20  B4D8               	btfsc	status,2,c
 12793  000F22  D10F               	goto	i2l6138
 12794  000F24  D7F5               	goto	i2l6066
 12795  000F26                     i2l657:
 12796                           
 12797                           ;doprnt.c: 1246: }
 12798                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 12799  000F26  BE60               	btfsc	i2printf@flag,7,c
 12800  000F28  D01E               	goto	i2l6082
 12801                           
 12802                           ;doprnt.c: 1253: {
 12803                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 12804  000F2A  C05E  FFD9         	movff	i2printf@ap,fsr2l
 12805  000F2E  C05F  FFDA         	movff	i2printf@ap+1,fsr2h
 12806  000F32  CFDE F06A          	movff	postinc2,i2printf@val
 12807  000F36  CFDD F06B          	movff	postdec2,i2printf@val+1
 12808  000F3A  0E00               	movlw	0
 12809  000F3C  BE6B               	btfsc	i2printf@val+1,7,c
 12810  000F3E  0EFF               	movlw	-1
 12811  000F40  6E6C               	movwf	i2printf@val+2,c
 12812  000F42  6E6D               	movwf	i2printf@val+3,c
 12813  000F44  0E02               	movlw	2
 12814  000F46  265E               	addwf	i2printf@ap,f,c
 12815  000F48  0E00               	movlw	0
 12816  000F4A  225F               	addwfc	i2printf@ap+1,f,c
 12817                           
 12818                           ;doprnt.c: 1261: if((long)val < 0) {
 12819  000F4C  AE6D               	btfss	i2printf@val+3,7,c
 12820  000F4E  D05A               	goto	i2l6116
 12821                           
 12822                           ;doprnt.c: 1262: flag |= 0x03;
 12823  000F50  0E03               	movlw	3
 12824  000F52  1260               	iorwf	i2printf@flag,f,c
 12825                           
 12826                           ;doprnt.c: 1263: val = -val;
 12827  000F54  1E6D               	comf	i2printf@val+3,f,c
 12828  000F56  1E6C               	comf	i2printf@val+2,f,c
 12829  000F58  1E6B               	comf	i2printf@val+1,f,c
 12830  000F5A  6C6A               	negf	i2printf@val,c
 12831  000F5C  0E00               	movlw	0
 12832  000F5E  226B               	addwfc	i2printf@val+1,f,c
 12833  000F60  226C               	addwfc	i2printf@val+2,f,c
 12834  000F62  226D               	addwfc	i2printf@val+3,f,c
 12835                           
 12836                           ;doprnt.c: 1264: }
 12837                           ;doprnt.c: 1266: }
 12838  000F64  D04F               	goto	i2l6116
 12839  000F66                     i2l6082:
 12840                           
 12841                           ;doprnt.c: 1268: else
 12842                           ;doprnt.c: 1273: {
 12843                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 12844  000F66  C05E  FFD9         	movff	i2printf@ap,fsr2l
 12845  000F6A  C05F  FFDA         	movff	i2printf@ap+1,fsr2h
 12846  000F6E  CFDE F054          	movff	postinc2,??i2_printf
 12847  000F72  CFDD F055          	movff	postdec2,??i2_printf+1
 12848  000F76  C054  F06A         	movff	??i2_printf,i2printf@val
 12849  000F7A  C055  F06B         	movff	??i2_printf+1,i2printf@val+1
 12850  000F7E  6A6C               	clrf	i2printf@val+2,c
 12851  000F80  6A6D               	clrf	i2printf@val+3,c
 12852  000F82  0E02               	movlw	2
 12853  000F84  265E               	addwf	i2printf@ap,f,c
 12854  000F86  0E00               	movlw	0
 12855  000F88  225F               	addwfc	i2printf@ap+1,f,c
 12856                           
 12857                           ;doprnt.c: 1287: }
 12858                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 12859  000F8A  D03C               	goto	i2l6116
 12860  000F8C                     i2l6086:
 12861                           
 12862                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12863  000F8C  0E01               	movlw	1
 12864  000F8E  6E71               	movwf	i2printf@c,c
 12865  000F90                     i2l6088:
 12866  000F90  0E0A               	movlw	10
 12867  000F92  1871               	xorwf	i2printf@c,w,c
 12868  000F94  B4D8               	btfsc	status,2,c
 12869  000F96  D03E               	goto	i2l6118
 12870                           
 12871                           ;doprnt.c: 1306: if(val < dpowers[c])
 12872  000F98  5071               	movf	i2printf@c,w,c
 12873  000F9A  0D04               	mullw	4
 12874  000F9C  0E31               	movlw	low _dpowers
 12875  000F9E  24F3               	addwf	prodl,w,c
 12876  000FA0  6EF6               	movwf	tblptrl,c
 12877  000FA2  0EFE               	movlw	high _dpowers
 12878  000FA4  20F4               	addwfc	prodh,w,c
 12879  000FA6  6EF7               	movwf	tblptrh,c
 12880  000FA8                     	if	0	;There are less than 3 active tblptr bytes
 12881  000FA8                     	endif
 12882  000FA8  0009               	tblrd		*+
 12883  000FAA  50F5               	movf	tablat,w,c
 12884  000FAC  5C6A               	subwf	i2printf@val,w,c
 12885  000FAE  0009               	tblrd		*+
 12886  000FB0  50F5               	movf	tablat,w,c
 12887  000FB2  586B               	subwfb	i2printf@val+1,w,c
 12888  000FB4  0009               	tblrd		*+
 12889  000FB6  50F5               	movf	tablat,w,c
 12890  000FB8  586C               	subwfb	i2printf@val+2,w,c
 12891  000FBA  0009               	tblrd		*+
 12892  000FBC  50F5               	movf	tablat,w,c
 12893  000FBE  586D               	subwfb	i2printf@val+3,w,c
 12894  000FC0  A0D8               	btfss	status,0,c
 12895  000FC2  D028               	goto	i2l6118
 12896                           
 12897                           ;doprnt.c: 1307: break;
 12898  000FC4  2A71               	incf	i2printf@c,f,c
 12899  000FC6  D7E4               	goto	i2l6088
 12900  000FC8                     i2l6100:
 12901                           
 12902                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 12903  000FC8  0E01               	movlw	1
 12904  000FCA  6E71               	movwf	i2printf@c,c
 12905  000FCC                     i2l6102:
 12906  000FCC  0E08               	movlw	8
 12907  000FCE  1871               	xorwf	i2printf@c,w,c
 12908  000FD0  B4D8               	btfsc	status,2,c
 12909  000FD2  D020               	goto	i2l6118
 12910                           
 12911                           ;doprnt.c: 1317: if(val < hexpowers[c])
 12912  000FD4  5071               	movf	i2printf@c,w,c
 12913  000FD6  0D04               	mullw	4
 12914  000FD8  0EA7               	movlw	low _hexpowers
 12915  000FDA  24F3               	addwf	prodl,w,c
 12916  000FDC  6EF6               	movwf	tblptrl,c
 12917  000FDE  0EFE               	movlw	high _hexpowers
 12918  000FE0  20F4               	addwfc	prodh,w,c
 12919  000FE2  6EF7               	movwf	tblptrh,c
 12920  000FE4                     	if	0	;There are less than 3 active tblptr bytes
 12921  000FE4                     	endif
 12922  000FE4  0009               	tblrd		*+
 12923  000FE6  50F5               	movf	tablat,w,c
 12924  000FE8  5C6A               	subwf	i2printf@val,w,c
 12925  000FEA  0009               	tblrd		*+
 12926  000FEC  50F5               	movf	tablat,w,c
 12927  000FEE  586B               	subwfb	i2printf@val+1,w,c
 12928  000FF0  0009               	tblrd		*+
 12929  000FF2  50F5               	movf	tablat,w,c
 12930  000FF4  586C               	subwfb	i2printf@val+2,w,c
 12931  000FF6  0009               	tblrd		*+
 12932  000FF8  50F5               	movf	tablat,w,c
 12933  000FFA  586D               	subwfb	i2printf@val+3,w,c
 12934  000FFC  A0D8               	btfss	status,0,c
 12935  000FFE  D00A               	goto	i2l6118
 12936                           
 12937                           ;doprnt.c: 1318: break;
 12938  001000  2A71               	incf	i2printf@c,f,c
 12939  001002  D7E4               	goto	i2l6102
 12940  001004                     i2l6116:
 12941  001004  5060               	movf	i2printf@flag,w,c
 12942  001006  0B80               	andlw	128
 12943                           
 12944                           ; Switch size 1, requested type "space"
 12945                           ; Number of cases is 2, Range of values is 0 to 128
 12946                           ; switch strategies available:
 12947                           ; Name         Instructions Cycles
 12948                           ; simple_byte            7     4 (average)
 12949                           ;	Chosen strategy is simple_byte
 12950  001008  0A00               	xorlw	0	; case 0
 12951  00100A  B4D8               	btfsc	status,2,c
 12952  00100C  D7BF               	goto	i2l6086
 12953  00100E  0A80               	xorlw	128	; case 128
 12954  001010  B4D8               	btfsc	status,2,c
 12955  001012  D7DA               	goto	i2l6100
 12956  001014                     i2l6118:
 12957                           
 12958                           ;doprnt.c: 1422: {
 12959                           ;doprnt.c: 1438: if(flag & 0x03)
 12960  001014  0E03               	movlw	3
 12961  001016  1460               	andwf	i2printf@flag,w,c
 12962  001018  6E54               	movwf	??i2_printf& (0+255),c
 12963  00101A  0E00               	movlw	0
 12964  00101C  1461               	andwf	i2printf@flag+1,w,c
 12965  00101E  6E55               	movwf	(??i2_printf+1)& (0+255),c
 12966  001020  5054               	movf	??i2_printf,w,c
 12967  001022  1055               	iorwf	??i2_printf+1,w,c
 12968  001024  B4D8               	btfsc	status,2,c
 12969  001026  D003               	goto	i2l6122
 12970                           
 12971                           ;doprnt.c: 1439: (putch('-') );
 12972  001028  0E2D               	movlw	45
 12973  00102A  EC0B  F026         	call	i2_putch
 12974  00102E                     i2l6122:
 12975                           
 12976                           ;doprnt.c: 1469: }
 12977                           ;doprnt.c: 1472: prec = c;
 12978  00102E  5071               	movf	i2printf@c,w,c
 12979  001030  6E62               	movwf	i2printf@prec,c
 12980  001032  6A63               	clrf	i2printf@prec+1,c
 12981  001034  BE62               	btfsc	i2printf@prec,7,c
 12982  001036  0663               	decf	i2printf@prec+1,f,c
 12983                           
 12984                           ;doprnt.c: 1474: while(prec--) {
 12985  001038  D07C               	goto	i2l6136
 12986  00103A                     i2l6124:
 12987                           
 12988                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 12989  00103A  C062  F054         	movff	i2printf@prec,??i2_printf
 12990  00103E  C063  F055         	movff	i2printf@prec+1,??i2_printf+1
 12991  001042  90D8               	bcf	status,0,c
 12992  001044  3654               	rlcf	??i2_printf,f,c
 12993  001046  3655               	rlcf	??i2_printf+1,f,c
 12994  001048  90D8               	bcf	status,0,c
 12995  00104A  3654               	rlcf	??i2_printf,f,c
 12996  00104C  3655               	rlcf	??i2_printf+1,f,c
 12997  00104E  0E31               	movlw	low _dpowers
 12998  001050  2454               	addwf	??i2_printf,w,c
 12999  001052  6EF6               	movwf	tblptrl,c
 13000  001054  0EFE               	movlw	high _dpowers
 13001  001056  2055               	addwfc	??i2_printf+1,w,c
 13002  001058  6EF7               	movwf	tblptrh,c
 13003  00105A                     	if	0	;There are less than 3 active tblptr bytes
 13004  00105A                     	endif
 13005  00105A  0009               	tblrd		*+
 13006  00105C  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 13007  001060  0009               	tblrd		*+
 13008  001062  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 13009  001066  0009               	tblrd		*+
 13010  001068  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 13011  00106C  000A               	tblrd		*-
 13012  00106E  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 13013  001072  C06A  F001         	movff	i2printf@val,i2___lldiv@dividend
 13014  001076  C06B  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 13015  00107A  C06C  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 13016  00107E  C06D  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 13017  001082  EC07  F022         	call	i2___lldiv	;wreg free
 13018  001086  C001  F00E         	movff	?i2___lldiv,i2___llmod@dividend
 13019  00108A  C002  F00F         	movff	?i2___lldiv+1,i2___llmod@dividend+1
 13020  00108E  C003  F010         	movff	?i2___lldiv+2,i2___llmod@dividend+2
 13021  001092  C004  F011         	movff	?i2___lldiv+3,i2___llmod@dividend+3
 13022  001096  0E0A               	movlw	10
 13023  001098  6E12               	movwf	i2___llmod@divisor,c
 13024  00109A  0E00               	movlw	0
 13025  00109C  6E13               	movwf	i2___llmod@divisor+1,c
 13026  00109E  0E00               	movlw	0
 13027  0010A0  6E14               	movwf	i2___llmod@divisor+2,c
 13028  0010A2  0E00               	movlw	0
 13029  0010A4  6E15               	movwf	i2___llmod@divisor+3,c
 13030  0010A6  EC6B  F023         	call	i2___llmod	;wreg free
 13031  0010AA  500E               	movf	?i2___llmod,w,c
 13032  0010AC  0F30               	addlw	48
 13033  0010AE  6E71               	movwf	i2printf@c,c
 13034                           
 13035                           ;doprnt.c: 1491: break;
 13036  0010B0  D03D               	goto	i2l6134
 13037  0010B2                     i2l6126:
 13038                           
 13039                           ;doprnt.c: 1499: {
 13040                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 13041  0010B2  C06A  F001         	movff	i2printf@val,i2___lldiv@dividend
 13042  0010B6  C06B  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 13043  0010BA  C06C  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 13044  0010BE  C06D  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 13045  0010C2  C062  F054         	movff	i2printf@prec,??i2_printf
 13046  0010C6  C063  F055         	movff	i2printf@prec+1,??i2_printf+1
 13047  0010CA  90D8               	bcf	status,0,c
 13048  0010CC  3654               	rlcf	??i2_printf,f,c
 13049  0010CE  3655               	rlcf	??i2_printf+1,f,c
 13050  0010D0  90D8               	bcf	status,0,c
 13051  0010D2  3654               	rlcf	??i2_printf,f,c
 13052  0010D4  3655               	rlcf	??i2_printf+1,f,c
 13053  0010D6  0EA7               	movlw	low _hexpowers
 13054  0010D8  2454               	addwf	??i2_printf,w,c
 13055  0010DA  6EF6               	movwf	tblptrl,c
 13056  0010DC  0EFE               	movlw	high _hexpowers
 13057  0010DE  2055               	addwfc	??i2_printf+1,w,c
 13058  0010E0  6EF7               	movwf	tblptrh,c
 13059  0010E2                     	if	0	;There are less than 3 active tblptr bytes
 13060  0010E2                     	endif
 13061  0010E2  0009               	tblrd		*+
 13062  0010E4  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 13063  0010E8  0009               	tblrd		*+
 13064  0010EA  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 13065  0010EE  0009               	tblrd		*+
 13066  0010F0  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 13067  0010F4  000A               	tblrd		*-
 13068  0010F6  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 13069  0010FA  EC07  F022         	call	i2___lldiv	;wreg free
 13070  0010FE  5001               	movf	?i2___lldiv,w,c
 13071  001100  0B0F               	andlw	15
 13072  001102  6E5D               	movwf	i2printf@idx,c
 13073                           
 13074                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 13075  001104  505D               	movf	i2printf@idx,w,c
 13076  001106  0D01               	mullw	1
 13077  001108  0E64               	movlw	low STR_18
 13078  00110A  24F3               	addwf	prodl,w,c
 13079  00110C  6EF6               	movwf	tblptrl,c
 13080  00110E  0EFF               	movlw	high STR_18
 13081  001110  20F4               	addwfc	prodh,w,c
 13082  001112  6EF7               	movwf	tblptrh,c
 13083  001114                     	if	0	;There are less than 3 active tblptr bytes
 13084  001114                     	endif
 13085  001114  0008               	tblrd		*
 13086  001116  CFF5 F071          	movff	tablat,i2printf@c
 13087                           
 13088                           ;doprnt.c: 1523: }
 13089                           
 13090                           ;doprnt.c: 1508: }
 13091                           ;doprnt.c: 1510: break;
 13092  00111A  D008               	goto	i2l6134
 13093  00111C                     i2l6132:
 13094  00111C  5060               	movf	i2printf@flag,w,c
 13095  00111E  0B80               	andlw	128
 13096                           
 13097                           ; Switch size 1, requested type "space"
 13098                           ; Number of cases is 2, Range of values is 0 to 128
 13099                           ; switch strategies available:
 13100                           ; Name         Instructions Cycles
 13101                           ; simple_byte            7     4 (average)
 13102                           ;	Chosen strategy is simple_byte
 13103  001120  0A00               	xorlw	0	; case 0
 13104  001122  B4D8               	btfsc	status,2,c
 13105  001124  D78A               	goto	i2l6124
 13106  001126  0A80               	xorlw	128	; case 128
 13107  001128  B4D8               	btfsc	status,2,c
 13108  00112A  D7C3               	goto	i2l6126
 13109  00112C                     i2l6134:
 13110                           
 13111                           ;doprnt.c: 1524: (putch(c) );
 13112  00112C  5071               	movf	i2printf@c,w,c
 13113  00112E  EC0B  F026         	call	i2_putch
 13114  001132                     i2l6136:
 13115  001132  0662               	decf	i2printf@prec,f,c
 13116  001134  A0D8               	btfss	status,0,c
 13117  001136  0663               	decf	i2printf@prec+1,f,c
 13118  001138  2862               	incf	i2printf@prec,w,c
 13119  00113A  E1F0               	bnz	i2l6132
 13120  00113C  2863               	incf	i2printf@prec+1,w,c
 13121  00113E  A4D8               	btfss	status,2,c
 13122  001140  D7ED               	goto	i2l6132
 13123  001142                     i2l6138:
 13124  001142  C050  FFF6         	movff	i2printf@f,tblptrl
 13125  001146  C051  FFF7         	movff	i2printf@f+1,tblptrh
 13126  00114A  4A50               	infsnz	i2printf@f,f,c
 13127  00114C  2A51               	incf	i2printf@f+1,f,c
 13128  00114E                     	if	0	;tblptru may be non-zero
 13129  00114E                     	endif
 13130  00114E                     	if	0	;tblptru may be non-zero
 13131  00114E                     	endif
 13132  00114E  0008               	tblrd		*
 13133  001150  CFF5 F071          	movff	tablat,i2printf@c
 13134  001154  5071               	movf	i2printf@c,w,c
 13135  001156  B4D8               	btfsc	status,2,c
 13136  001158  0012               	return	
 13137  00115A  D409               	goto	i2l5920
 13138  00115C                     __end_ofi2_printf:
 13139                           	opt stack 0
 13140                           pclatu	equ	0xFFB
 13141                           pclath	equ	0xFFA
 13142                           tblptru	equ	0xFF8
 13143                           tblptrh	equ	0xFF7
 13144                           tblptrl	equ	0xFF6
 13145                           tablat	equ	0xFF5
 13146                           prodh	equ	0xFF4
 13147                           prodl	equ	0xFF3
 13148                           intcon	equ	0xFF2
 13149                           intcon3	equ	0xFF0
 13150                           postinc0	equ	0xFEE
 13151                           fsr0h	equ	0xFEA
 13152                           fsr0l	equ	0xFE9
 13153                           wreg	equ	0xFE8
 13154                           postdec1	equ	0xFE5
 13155                           fsr1h	equ	0xFE2
 13156                           fsr1l	equ	0xFE1
 13157                           indf2	equ	0xFDF
 13158                           postinc2	equ	0xFDE
 13159                           postdec2	equ	0xFDD
 13160                           fsr2h	equ	0xFDA
 13161                           fsr2l	equ	0xFD9
 13162                           status	equ	0xFD8
 13163                           
 13164 ;; *************** function i2_scale *****************
 13165 ;; Defined at:
 13166 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 13167 ;; Parameters:    Size  Location     Type
 13168 ;;  scl             1    wreg     char 
 13169 ;; Auto vars:     Size  Location     Type
 13170 ;;  scl             1   48[COMRAM] char 
 13171 ;; Return value:  Size  Location     Type
 13172 ;;                  3   42[COMRAM] char 
 13173 ;; Registers used:
 13174 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13175 ;; Tracked objects:
 13176 ;;		On entry : 0/0
 13177 ;;		On exit  : 0/0
 13178 ;;		Unchanged: 0/0
 13179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13180 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13181 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13183 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13184 ;;Total ram usage:        7 bytes
 13185 ;; Hardware stack levels used:    1
 13186 ;; Hardware stack levels required when called:    2
 13187 ;; This function calls:
 13188 ;;		i2___awdiv
 13189 ;;		i2___awmod
 13190 ;;		i2___ftmul
 13191 ;;		i2___wmul
 13192 ;; This function is called by:
 13193 ;;		i2_printf
 13194 ;; This function uses a non-reentrant model
 13195 ;;
 13196                           
 13197                           	psect	text46
 13198  00160A                     __ptext46:
 13199                           	opt stack 0
 13200  00160A                     i2_scale:
 13201                           	opt stack 20
 13202                           
 13203                           ;incstack = 0
 13204                           ;i2scale@scl stored from wreg
 13205  00160A  6E31               	movwf	i2scale@scl,c
 13206                           
 13207                           ;doprnt.c: 428: if(scl < 0) {
 13208  00160C  AE31               	btfss	i2scale@scl,7,c
 13209  00160E  D0FB               	goto	i2l5570
 13210                           
 13211                           ;doprnt.c: 429: scl = -scl;
 13212  001610  6C31               	negf	i2scale@scl,c
 13213                           
 13214                           ;doprnt.c: 430: if(scl>=110)
 13215  001612  5031               	movf	i2scale@scl,w,c
 13216  001614  0A80               	xorlw	128
 13217  001616  0F12               	addlw	-238
 13218  001618  A0D8               	btfss	status,0,c
 13219  00161A  D091               	goto	i2l5560
 13220                           
 13221                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 13222  00161C  0E00               	movlw	0
 13223  00161E  6E12               	movwf	i2___wmul@multiplicand+1,c
 13224  001620  0E03               	movlw	3
 13225  001622  6E11               	movwf	i2___wmul@multiplicand,c
 13226  001624  0E00               	movlw	0
 13227  001626  6E0A               	movwf	i2___awdiv@divisor+1,c
 13228  001628  0E0A               	movlw	10
 13229  00162A  6E09               	movwf	i2___awdiv@divisor,c
 13230  00162C  0E00               	movlw	0
 13231  00162E  6E04               	movwf	i2___awmod@divisor+1,c
 13232  001630  0E64               	movlw	100
 13233  001632  6E03               	movwf	i2___awmod@divisor,c
 13234  001634  5031               	movf	i2scale@scl,w,c
 13235  001636  6E01               	movwf	i2___awmod@dividend,c
 13236  001638  6A02               	clrf	i2___awmod@dividend+1,c
 13237  00163A  BE01               	btfsc	i2___awmod@dividend,7,c
 13238  00163C  0602               	decf	i2___awmod@dividend+1,f,c
 13239  00163E  ECFE  F022         	call	i2___awmod	;wreg free
 13240  001642  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 13241  001646  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 13242  00164A  ECC5  F021         	call	i2___awdiv	;wreg free
 13243  00164E  0E09               	movlw	9
 13244  001650  2407               	addwf	?i2___awdiv,w,c
 13245  001652  6E0F               	movwf	i2___wmul@multiplier,c
 13246  001654  0E00               	movlw	0
 13247  001656  2008               	addwfc	?i2___awdiv+1,w,c
 13248  001658  6E10               	movwf	i2___wmul@multiplier+1,c
 13249  00165A  ECE6  F025         	call	i2___wmul	;wreg free
 13250  00165E  0E59               	movlw	low __npowers_
 13251  001660  240F               	addwf	?i2___wmul,w,c
 13252  001662  6EF6               	movwf	tblptrl,c
 13253  001664  0EFE               	movlw	high __npowers_
 13254  001666  2010               	addwfc	?i2___wmul+1,w,c
 13255  001668  6EF7               	movwf	tblptrh,c
 13256  00166A                     	if	0	;There are less than 3 active tblptr bytes
 13257  00166A                     	endif
 13258  00166A  0009               	tblrd		*+
 13259  00166C  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 13260  001670  0009               	tblrd		*+
 13261  001672  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 13262  001676  000A               	tblrd		*-
 13263  001678  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 13264  00167C  0E00               	movlw	0
 13265  00167E  6E0A               	movwf	i2___awdiv@divisor+1,c
 13266  001680  0E64               	movlw	100
 13267  001682  6E09               	movwf	i2___awdiv@divisor,c
 13268  001684  5031               	movf	i2scale@scl,w,c
 13269  001686  6E07               	movwf	i2___awdiv@dividend,c
 13270  001688  6A08               	clrf	i2___awdiv@dividend+1,c
 13271  00168A  BE07               	btfsc	i2___awdiv@dividend,7,c
 13272  00168C  0608               	decf	i2___awdiv@dividend+1,f,c
 13273  00168E  ECC5  F021         	call	i2___awdiv	;wreg free
 13274  001692  0E12               	movlw	18
 13275  001694  2407               	addwf	?i2___awdiv,w,c
 13276  001696  6E0F               	movwf	i2___wmul@multiplier,c
 13277  001698  0E00               	movlw	0
 13278  00169A  2008               	addwfc	?i2___awdiv+1,w,c
 13279  00169C  6E10               	movwf	i2___wmul@multiplier+1,c
 13280  00169E  0E00               	movlw	0
 13281  0016A0  6E12               	movwf	i2___wmul@multiplicand+1,c
 13282  0016A2  0E03               	movlw	3
 13283  0016A4  6E11               	movwf	i2___wmul@multiplicand,c
 13284  0016A6  ECE6  F025         	call	i2___wmul	;wreg free
 13285  0016AA  0E59               	movlw	low __npowers_
 13286  0016AC  240F               	addwf	?i2___wmul,w,c
 13287  0016AE  6EF6               	movwf	tblptrl,c
 13288  0016B0  0EFE               	movlw	high __npowers_
 13289  0016B2  2010               	addwfc	?i2___wmul+1,w,c
 13290  0016B4  6EF7               	movwf	tblptrh,c
 13291  0016B6                     	if	0	;There are less than 3 active tblptr bytes
 13292  0016B6                     	endif
 13293  0016B6  0009               	tblrd		*+
 13294  0016B8  CFF5 F01C          	movff	tablat,i2___ftmul@f1
 13295  0016BC  0009               	tblrd		*+
 13296  0016BE  CFF5 F01D          	movff	tablat,i2___ftmul@f1+1
 13297  0016C2  000A               	tblrd		*-
 13298  0016C4  CFF5 F01E          	movff	tablat,i2___ftmul@f1+2
 13299  0016C8  EC8A  F01B         	call	i2___ftmul	;wreg free
 13300  0016CC  C01C  F02E         	movff	?i2___ftmul,i2_scale$1544
 13301  0016D0  C01D  F02F         	movff	?i2___ftmul+1,i2_scale$1544+1
 13302  0016D4  C01E  F030         	movff	?i2___ftmul+2,i2_scale$1544+2
 13303                           
 13304                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 13305  0016D8  C02E  F01C         	movff	i2_scale$1544,i2___ftmul@f1
 13306  0016DC  C02F  F01D         	movff	i2_scale$1544+1,i2___ftmul@f1+1
 13307  0016E0  C030  F01E         	movff	i2_scale$1544+2,i2___ftmul@f1+2
 13308  0016E4  0E00               	movlw	0
 13309  0016E6  6E12               	movwf	i2___wmul@multiplicand+1,c
 13310  0016E8  0E03               	movlw	3
 13311  0016EA  6E11               	movwf	i2___wmul@multiplicand,c
 13312  0016EC  0E00               	movlw	0
 13313  0016EE  6E04               	movwf	i2___awmod@divisor+1,c
 13314  0016F0  0E0A               	movlw	10
 13315  0016F2  6E03               	movwf	i2___awmod@divisor,c
 13316  0016F4  5031               	movf	i2scale@scl,w,c
 13317  0016F6  6E01               	movwf	i2___awmod@dividend,c
 13318  0016F8  6A02               	clrf	i2___awmod@dividend+1,c
 13319  0016FA  BE01               	btfsc	i2___awmod@dividend,7,c
 13320  0016FC  0602               	decf	i2___awmod@dividend+1,f,c
 13321  0016FE  ECFE  F022         	call	i2___awmod	;wreg free
 13322  001702  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 13323  001706  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 13324  00170A  ECE6  F025         	call	i2___wmul	;wreg free
 13325  00170E  0E59               	movlw	low __npowers_
 13326  001710  240F               	addwf	?i2___wmul,w,c
 13327  001712  6EF6               	movwf	tblptrl,c
 13328  001714  0EFE               	movlw	high __npowers_
 13329  001716  2010               	addwfc	?i2___wmul+1,w,c
 13330  001718  6EF7               	movwf	tblptrh,c
 13331  00171A                     	if	0	;There are less than 3 active tblptr bytes
 13332  00171A                     	endif
 13333  00171A  0009               	tblrd		*+
 13334  00171C  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 13335  001720  0009               	tblrd		*+
 13336  001722  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 13337  001726  000A               	tblrd		*-
 13338  001728  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 13339  00172C  EC8A  F01B         	call	i2___ftmul	;wreg free
 13340  001730  C01C  F02B         	movff	?i2___ftmul,?i2_scale
 13341  001734  C01D  F02C         	movff	?i2___ftmul+1,?i2_scale+1
 13342  001738  C01E  F02D         	movff	?i2___ftmul+2,?i2_scale+2
 13343  00173C  0012               	return	
 13344  00173E                     i2l5560:
 13345                           
 13346                           ;doprnt.c: 432: else if(scl > 10)
 13347  00173E  5031               	movf	i2scale@scl,w,c
 13348  001740  0A80               	xorlw	128
 13349  001742  0F75               	addlw	-139
 13350  001744  A0D8               	btfss	status,0,c
 13351  001746  D04D               	goto	i2l5566
 13352                           
 13353                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 13354  001748  0E00               	movlw	0
 13355  00174A  6E0A               	movwf	i2___awdiv@divisor+1,c
 13356  00174C  0E0A               	movlw	10
 13357  00174E  6E09               	movwf	i2___awdiv@divisor,c
 13358  001750  5031               	movf	i2scale@scl,w,c
 13359  001752  6E07               	movwf	i2___awdiv@dividend,c
 13360  001754  6A08               	clrf	i2___awdiv@dividend+1,c
 13361  001756  BE07               	btfsc	i2___awdiv@dividend,7,c
 13362  001758  0608               	decf	i2___awdiv@dividend+1,f,c
 13363  00175A  ECC5  F021         	call	i2___awdiv	;wreg free
 13364  00175E  0E09               	movlw	9
 13365  001760  2407               	addwf	?i2___awdiv,w,c
 13366  001762  6E0F               	movwf	i2___wmul@multiplier,c
 13367  001764  0E00               	movlw	0
 13368  001766  2008               	addwfc	?i2___awdiv+1,w,c
 13369  001768  6E10               	movwf	i2___wmul@multiplier+1,c
 13370  00176A  0E00               	movlw	0
 13371  00176C  6E12               	movwf	i2___wmul@multiplicand+1,c
 13372  00176E  0E03               	movlw	3
 13373  001770  6E11               	movwf	i2___wmul@multiplicand,c
 13374  001772  ECE6  F025         	call	i2___wmul	;wreg free
 13375  001776  0E59               	movlw	low __npowers_
 13376  001778  240F               	addwf	?i2___wmul,w,c
 13377  00177A  6EF6               	movwf	tblptrl,c
 13378  00177C  0EFE               	movlw	high __npowers_
 13379  00177E  2010               	addwfc	?i2___wmul+1,w,c
 13380  001780  6EF7               	movwf	tblptrh,c
 13381  001782                     	if	0	;There are less than 3 active tblptr bytes
 13382  001782                     	endif
 13383  001782  0009               	tblrd		*+
 13384  001784  CFF5 F01C          	movff	tablat,i2___ftmul@f1
 13385  001788  0009               	tblrd		*+
 13386  00178A  CFF5 F01D          	movff	tablat,i2___ftmul@f1+1
 13387  00178E  000A               	tblrd		*-
 13388  001790  CFF5 F01E          	movff	tablat,i2___ftmul@f1+2
 13389  001794  0E00               	movlw	0
 13390  001796  6E12               	movwf	i2___wmul@multiplicand+1,c
 13391  001798  0E03               	movlw	3
 13392  00179A  6E11               	movwf	i2___wmul@multiplicand,c
 13393  00179C  0E00               	movlw	0
 13394  00179E  6E04               	movwf	i2___awmod@divisor+1,c
 13395  0017A0  0E0A               	movlw	10
 13396  0017A2  6E03               	movwf	i2___awmod@divisor,c
 13397  0017A4  5031               	movf	i2scale@scl,w,c
 13398  0017A6  6E01               	movwf	i2___awmod@dividend,c
 13399  0017A8  6A02               	clrf	i2___awmod@dividend+1,c
 13400  0017AA  BE01               	btfsc	i2___awmod@dividend,7,c
 13401  0017AC  0602               	decf	i2___awmod@dividend+1,f,c
 13402  0017AE  ECFE  F022         	call	i2___awmod	;wreg free
 13403  0017B2  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 13404  0017B6  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 13405  0017BA  ECE6  F025         	call	i2___wmul	;wreg free
 13406  0017BE  0E59               	movlw	low __npowers_
 13407  0017C0  240F               	addwf	?i2___wmul,w,c
 13408  0017C2  6EF6               	movwf	tblptrl,c
 13409  0017C4  0EFE               	movlw	high __npowers_
 13410  0017C6  2010               	addwfc	?i2___wmul+1,w,c
 13411  0017C8  6EF7               	movwf	tblptrh,c
 13412  0017CA                     	if	0	;There are less than 3 active tblptr bytes
 13413  0017CA                     	endif
 13414  0017CA  0009               	tblrd		*+
 13415  0017CC  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 13416  0017D0  0009               	tblrd		*+
 13417  0017D2  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 13418  0017D6  000A               	tblrd		*-
 13419  0017D8  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 13420  0017DC  EC8A  F01B         	call	i2___ftmul	;wreg free
 13421  0017E0  D7A7               	goto	L6
 13422  0017E2                     i2l5566:
 13423                           
 13424                           ;doprnt.c: 434: return _npowers_[scl];
 13425  0017E2  5031               	movf	i2scale@scl,w,c
 13426  0017E4  0D03               	mullw	3
 13427  0017E6  0E59               	movlw	low __npowers_
 13428  0017E8  24F3               	addwf	prodl,w,c
 13429  0017EA  6EF6               	movwf	tblptrl,c
 13430  0017EC  0EFE               	movlw	high __npowers_
 13431  0017EE  20F4               	addwfc	prodh,w,c
 13432  0017F0  6EF7               	movwf	tblptrh,c
 13433  0017F2                     	if	0	;There are less than 3 active tblptr bytes
 13434  0017F2                     	endif
 13435  0017F2  0009               	tblrd		*+
 13436  0017F4  CFF5 F02B          	movff	tablat,?i2_scale
 13437  0017F8  0009               	tblrd		*+
 13438  0017FA  CFF5 F02C          	movff	tablat,?i2_scale+1
 13439  0017FE  000A               	tblrd		*-
 13440  001800  CFF5 F02D          	movff	tablat,?i2_scale+2
 13441  001804  0012               	return	
 13442  001806                     i2l5570:
 13443                           
 13444                           ;doprnt.c: 435: }
 13445                           ;doprnt.c: 436: if(scl>=110)
 13446  001806  5031               	movf	i2scale@scl,w,c
 13447  001808  0A80               	xorlw	128
 13448  00180A  0F12               	addlw	-238
 13449  00180C  A0D8               	btfss	status,0,c
 13450  00180E  D091               	goto	i2l5578
 13451                           
 13452                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 13453  001810  0E00               	movlw	0
 13454  001812  6E12               	movwf	i2___wmul@multiplicand+1,c
 13455  001814  0E03               	movlw	3
 13456  001816  6E11               	movwf	i2___wmul@multiplicand,c
 13457  001818  0E00               	movlw	0
 13458  00181A  6E0A               	movwf	i2___awdiv@divisor+1,c
 13459  00181C  0E0A               	movlw	10
 13460  00181E  6E09               	movwf	i2___awdiv@divisor,c
 13461  001820  0E00               	movlw	0
 13462  001822  6E04               	movwf	i2___awmod@divisor+1,c
 13463  001824  0E64               	movlw	100
 13464  001826  6E03               	movwf	i2___awmod@divisor,c
 13465  001828  5031               	movf	i2scale@scl,w,c
 13466  00182A  6E01               	movwf	i2___awmod@dividend,c
 13467  00182C  6A02               	clrf	i2___awmod@dividend+1,c
 13468  00182E  BE01               	btfsc	i2___awmod@dividend,7,c
 13469  001830  0602               	decf	i2___awmod@dividend+1,f,c
 13470  001832  ECFE  F022         	call	i2___awmod	;wreg free
 13471  001836  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 13472  00183A  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 13473  00183E  ECC5  F021         	call	i2___awdiv	;wreg free
 13474  001842  0E09               	movlw	9
 13475  001844  2407               	addwf	?i2___awdiv,w,c
 13476  001846  6E0F               	movwf	i2___wmul@multiplier,c
 13477  001848  0E00               	movlw	0
 13478  00184A  2008               	addwfc	?i2___awdiv+1,w,c
 13479  00184C  6E10               	movwf	i2___wmul@multiplier+1,c
 13480  00184E  ECE6  F025         	call	i2___wmul	;wreg free
 13481  001852  0E80               	movlw	low __powers_
 13482  001854  240F               	addwf	?i2___wmul,w,c
 13483  001856  6EF6               	movwf	tblptrl,c
 13484  001858  0EFE               	movlw	high __powers_
 13485  00185A  2010               	addwfc	?i2___wmul+1,w,c
 13486  00185C  6EF7               	movwf	tblptrh,c
 13487  00185E                     	if	0	;There are less than 3 active tblptr bytes
 13488  00185E                     	endif
 13489  00185E  0009               	tblrd		*+
 13490  001860  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 13491  001864  0009               	tblrd		*+
 13492  001866  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 13493  00186A  000A               	tblrd		*-
 13494  00186C  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 13495  001870  0E00               	movlw	0
 13496  001872  6E0A               	movwf	i2___awdiv@divisor+1,c
 13497  001874  0E64               	movlw	100
 13498  001876  6E09               	movwf	i2___awdiv@divisor,c
 13499  001878  5031               	movf	i2scale@scl,w,c
 13500  00187A  6E07               	movwf	i2___awdiv@dividend,c
 13501  00187C  6A08               	clrf	i2___awdiv@dividend+1,c
 13502  00187E  BE07               	btfsc	i2___awdiv@dividend,7,c
 13503  001880  0608               	decf	i2___awdiv@dividend+1,f,c
 13504  001882  ECC5  F021         	call	i2___awdiv	;wreg free
 13505  001886  0E12               	movlw	18
 13506  001888  2407               	addwf	?i2___awdiv,w,c
 13507  00188A  6E0F               	movwf	i2___wmul@multiplier,c
 13508  00188C  0E00               	movlw	0
 13509  00188E  2008               	addwfc	?i2___awdiv+1,w,c
 13510  001890  6E10               	movwf	i2___wmul@multiplier+1,c
 13511  001892  0E00               	movlw	0
 13512  001894  6E12               	movwf	i2___wmul@multiplicand+1,c
 13513  001896  0E03               	movlw	3
 13514  001898  6E11               	movwf	i2___wmul@multiplicand,c
 13515  00189A  ECE6  F025         	call	i2___wmul	;wreg free
 13516  00189E  0E80               	movlw	low __powers_
 13517  0018A0  240F               	addwf	?i2___wmul,w,c
 13518  0018A2  6EF6               	movwf	tblptrl,c
 13519  0018A4  0EFE               	movlw	high __powers_
 13520  0018A6  2010               	addwfc	?i2___wmul+1,w,c
 13521  0018A8  6EF7               	movwf	tblptrh,c
 13522  0018AA                     	if	0	;There are less than 3 active tblptr bytes
 13523  0018AA                     	endif
 13524  0018AA  0009               	tblrd		*+
 13525  0018AC  CFF5 F01C          	movff	tablat,i2___ftmul@f1
 13526  0018B0  0009               	tblrd		*+
 13527  0018B2  CFF5 F01D          	movff	tablat,i2___ftmul@f1+1
 13528  0018B6  000A               	tblrd		*-
 13529  0018B8  CFF5 F01E          	movff	tablat,i2___ftmul@f1+2
 13530  0018BC  EC8A  F01B         	call	i2___ftmul	;wreg free
 13531  0018C0  C01C  F02E         	movff	?i2___ftmul,i2_scale$1544
 13532  0018C4  C01D  F02F         	movff	?i2___ftmul+1,i2_scale$1544+1
 13533  0018C8  C01E  F030         	movff	?i2___ftmul+2,i2_scale$1544+2
 13534                           
 13535                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 13536  0018CC  C02E  F01C         	movff	i2_scale$1544,i2___ftmul@f1
 13537  0018D0  C02F  F01D         	movff	i2_scale$1544+1,i2___ftmul@f1+1
 13538  0018D4  C030  F01E         	movff	i2_scale$1544+2,i2___ftmul@f1+2
 13539  0018D8  0E00               	movlw	0
 13540  0018DA  6E12               	movwf	i2___wmul@multiplicand+1,c
 13541  0018DC  0E03               	movlw	3
 13542  0018DE  6E11               	movwf	i2___wmul@multiplicand,c
 13543  0018E0  0E00               	movlw	0
 13544  0018E2  6E04               	movwf	i2___awmod@divisor+1,c
 13545  0018E4  0E0A               	movlw	10
 13546  0018E6  6E03               	movwf	i2___awmod@divisor,c
 13547  0018E8  5031               	movf	i2scale@scl,w,c
 13548  0018EA  6E01               	movwf	i2___awmod@dividend,c
 13549  0018EC  6A02               	clrf	i2___awmod@dividend+1,c
 13550  0018EE  BE01               	btfsc	i2___awmod@dividend,7,c
 13551  0018F0  0602               	decf	i2___awmod@dividend+1,f,c
 13552  0018F2  ECFE  F022         	call	i2___awmod	;wreg free
 13553  0018F6  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 13554  0018FA  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 13555  0018FE  ECE6  F025         	call	i2___wmul	;wreg free
 13556  001902  0E80               	movlw	low __powers_
 13557  001904  240F               	addwf	?i2___wmul,w,c
 13558  001906  6EF6               	movwf	tblptrl,c
 13559  001908  0EFE               	movlw	high __powers_
 13560  00190A  2010               	addwfc	?i2___wmul+1,w,c
 13561  00190C  6EF7               	movwf	tblptrh,c
 13562  00190E                     	if	0	;There are less than 3 active tblptr bytes
 13563  00190E                     	endif
 13564  00190E  0009               	tblrd		*+
 13565  001910  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 13566  001914  0009               	tblrd		*+
 13567  001916  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 13568  00191A  000A               	tblrd		*-
 13569  00191C  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 13570  001920  EC8A  F01B         	call	i2___ftmul	;wreg free
 13571  001924  C01C  F02B         	movff	?i2___ftmul,?i2_scale
 13572  001928  C01D  F02C         	movff	?i2___ftmul+1,?i2_scale+1
 13573  00192C  C01E  F02D         	movff	?i2___ftmul+2,?i2_scale+2
 13574  001930  0012               	return	
 13575  001932                     i2l5578:
 13576                           
 13577                           ;doprnt.c: 438: else if(scl > 10)
 13578  001932  5031               	movf	i2scale@scl,w,c
 13579  001934  0A80               	xorlw	128
 13580  001936  0F75               	addlw	-139
 13581  001938  A0D8               	btfss	status,0,c
 13582  00193A  D04D               	goto	i2l5584
 13583                           
 13584                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 13585  00193C  0E00               	movlw	0
 13586  00193E  6E0A               	movwf	i2___awdiv@divisor+1,c
 13587  001940  0E0A               	movlw	10
 13588  001942  6E09               	movwf	i2___awdiv@divisor,c
 13589  001944  5031               	movf	i2scale@scl,w,c
 13590  001946  6E07               	movwf	i2___awdiv@dividend,c
 13591  001948  6A08               	clrf	i2___awdiv@dividend+1,c
 13592  00194A  BE07               	btfsc	i2___awdiv@dividend,7,c
 13593  00194C  0608               	decf	i2___awdiv@dividend+1,f,c
 13594  00194E  ECC5  F021         	call	i2___awdiv	;wreg free
 13595  001952  0E09               	movlw	9
 13596  001954  2407               	addwf	?i2___awdiv,w,c
 13597  001956  6E0F               	movwf	i2___wmul@multiplier,c
 13598  001958  0E00               	movlw	0
 13599  00195A  2008               	addwfc	?i2___awdiv+1,w,c
 13600  00195C  6E10               	movwf	i2___wmul@multiplier+1,c
 13601  00195E  0E00               	movlw	0
 13602  001960  6E12               	movwf	i2___wmul@multiplicand+1,c
 13603  001962  0E03               	movlw	3
 13604  001964  6E11               	movwf	i2___wmul@multiplicand,c
 13605  001966  ECE6  F025         	call	i2___wmul	;wreg free
 13606  00196A  0E80               	movlw	low __powers_
 13607  00196C  240F               	addwf	?i2___wmul,w,c
 13608  00196E  6EF6               	movwf	tblptrl,c
 13609  001970  0EFE               	movlw	high __powers_
 13610  001972  2010               	addwfc	?i2___wmul+1,w,c
 13611  001974  6EF7               	movwf	tblptrh,c
 13612  001976                     	if	0	;There are less than 3 active tblptr bytes
 13613  001976                     	endif
 13614  001976  0009               	tblrd		*+
 13615  001978  CFF5 F01C          	movff	tablat,i2___ftmul@f1
 13616  00197C  0009               	tblrd		*+
 13617  00197E  CFF5 F01D          	movff	tablat,i2___ftmul@f1+1
 13618  001982  000A               	tblrd		*-
 13619  001984  CFF5 F01E          	movff	tablat,i2___ftmul@f1+2
 13620  001988  0E00               	movlw	0
 13621  00198A  6E12               	movwf	i2___wmul@multiplicand+1,c
 13622  00198C  0E03               	movlw	3
 13623  00198E  6E11               	movwf	i2___wmul@multiplicand,c
 13624  001990  0E00               	movlw	0
 13625  001992  6E04               	movwf	i2___awmod@divisor+1,c
 13626  001994  0E0A               	movlw	10
 13627  001996  6E03               	movwf	i2___awmod@divisor,c
 13628  001998  5031               	movf	i2scale@scl,w,c
 13629  00199A  6E01               	movwf	i2___awmod@dividend,c
 13630  00199C  6A02               	clrf	i2___awmod@dividend+1,c
 13631  00199E  BE01               	btfsc	i2___awmod@dividend,7,c
 13632  0019A0  0602               	decf	i2___awmod@dividend+1,f,c
 13633  0019A2  ECFE  F022         	call	i2___awmod	;wreg free
 13634  0019A6  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 13635  0019AA  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 13636  0019AE  ECE6  F025         	call	i2___wmul	;wreg free
 13637  0019B2  0E80               	movlw	low __powers_
 13638  0019B4  240F               	addwf	?i2___wmul,w,c
 13639  0019B6  6EF6               	movwf	tblptrl,c
 13640  0019B8  0EFE               	movlw	high __powers_
 13641  0019BA  2010               	addwfc	?i2___wmul+1,w,c
 13642  0019BC  6EF7               	movwf	tblptrh,c
 13643  0019BE                     	if	0	;There are less than 3 active tblptr bytes
 13644  0019BE                     	endif
 13645  0019BE  0009               	tblrd		*+
 13646  0019C0  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 13647  0019C4  0009               	tblrd		*+
 13648  0019C6  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 13649  0019CA  000A               	tblrd		*-
 13650  0019CC  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 13651  0019D0  EC8A  F01B         	call	i2___ftmul	;wreg free
 13652  0019D4  D7A7               	goto	L7
 13653  0019D6                     i2l5584:
 13654                           
 13655                           ;doprnt.c: 440: return _powers_[scl];
 13656  0019D6  5031               	movf	i2scale@scl,w,c
 13657  0019D8  0D03               	mullw	3
 13658  0019DA  0E80               	movlw	low __powers_
 13659  0019DC  24F3               	addwf	prodl,w,c
 13660  0019DE  6EF6               	movwf	tblptrl,c
 13661  0019E0  0EFE               	movlw	high __powers_
 13662  0019E2  20F4               	addwfc	prodh,w,c
 13663  0019E4  6EF7               	movwf	tblptrh,c
 13664  0019E6                     	if	0	;There are less than 3 active tblptr bytes
 13665  0019E6                     	endif
 13666  0019E6  0009               	tblrd		*+
 13667  0019E8  CFF5 F02B          	movff	tablat,?i2_scale
 13668  0019EC  0009               	tblrd		*+
 13669  0019EE  CFF5 F02C          	movff	tablat,?i2_scale+1
 13670  0019F2  000A               	tblrd		*-
 13671  0019F4  CFF5 F02D          	movff	tablat,?i2_scale+2
 13672  0019F8  0012               	return	
 13673  0019FA                     __end_ofi2_scale:
 13674                           	opt stack 0
 13675                           pclatu	equ	0xFFB
 13676                           pclath	equ	0xFFA
 13677                           tblptru	equ	0xFF8
 13678                           tblptrh	equ	0xFF7
 13679                           tblptrl	equ	0xFF6
 13680                           tablat	equ	0xFF5
 13681                           prodh	equ	0xFF4
 13682                           prodl	equ	0xFF3
 13683                           intcon	equ	0xFF2
 13684                           intcon3	equ	0xFF0
 13685                           postinc0	equ	0xFEE
 13686                           fsr0h	equ	0xFEA
 13687                           fsr0l	equ	0xFE9
 13688                           wreg	equ	0xFE8
 13689                           postdec1	equ	0xFE5
 13690                           fsr1h	equ	0xFE2
 13691                           fsr1l	equ	0xFE1
 13692                           indf2	equ	0xFDF
 13693                           postinc2	equ	0xFDE
 13694                           postdec2	equ	0xFDD
 13695                           fsr2h	equ	0xFDA
 13696                           fsr2l	equ	0xFD9
 13697                           status	equ	0xFD8
 13698                           
 13699 ;; *************** function i2_putch *****************
 13700 ;; Defined at:
 13701 ;;		line 35 in file "lcd.c"
 13702 ;; Parameters:    Size  Location     Type
 13703 ;;  data            1    wreg     unsigned char 
 13704 ;; Auto vars:     Size  Location     Type
 13705 ;;  data            1    4[COMRAM] unsigned char 
 13706 ;; Return value:  Size  Location     Type
 13707 ;;                  1    wreg      void 
 13708 ;; Registers used:
 13709 ;;		wreg, status,2, status,0, cstack
 13710 ;; Tracked objects:
 13711 ;;		On entry : 0/0
 13712 ;;		On exit  : 0/0
 13713 ;;		Unchanged: 0/0
 13714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13716 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13718 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13719 ;;Total ram usage:        1 bytes
 13720 ;; Hardware stack levels used:    1
 13721 ;; Hardware stack levels required when called:    3
 13722 ;; This function calls:
 13723 ;;		i2_lcdNewline
 13724 ;;		i2_lcdNibble
 13725 ;; This function is called by:
 13726 ;;		i2_printf
 13727 ;; This function uses a non-reentrant model
 13728 ;;
 13729                           
 13730                           	psect	text47
 13731  004C16                     __ptext47:
 13732                           	opt stack 0
 13733  004C16                     i2_putch:
 13734                           	opt stack 19
 13735                           
 13736                           ;incstack = 0
 13737                           ;i2putch@data stored from wreg
 13738  004C16  6E05               	movwf	i2putch@data,c
 13739                           
 13740                           ;lcd.c: 36: if(data == '\n')lcdNewline();
 13741  004C18  0E0A               	movlw	10
 13742  004C1A  1805               	xorwf	i2putch@data,w,c
 13743  004C1C  A4D8               	btfss	status,2,c
 13744  004C1E  D003               	goto	i2l168
 13745  004C20  EC35  F026         	call	i2_lcdNewline	;wreg free
 13746  004C24  0012               	return	
 13747  004C26                     i2l168:
 13748                           
 13749                           ;lcd.c: 37: else
 13750                           ;lcd.c: 38: {
 13751                           ;lcd.c: 39: LATDbits.LATD2 = 1;
 13752  004C26  848C               	bsf	3980,2,c	;volatile
 13753                           
 13754                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
 13755  004C28  0E74               	movlw	116
 13756  004C2A                     i2u758_47:
 13757  004C2A  2EE8               	decfsz	wreg,f,c
 13758  004C2C  D7FE               	bra	i2u758_47
 13759  004C2E  D000               	nop2	
 13760                           
 13761                           ;lcd.c: 41: lcdNibble(data);
 13762  004C30  5005               	movf	i2putch@data,w,c
 13763  004C32  EC9E  F023         	call	i2_lcdNibble
 13764  004C36  0012               	return	
 13765  004C38                     __end_ofi2_putch:
 13766                           	opt stack 0
 13767                           pclatu	equ	0xFFB
 13768                           pclath	equ	0xFFA
 13769                           tblptru	equ	0xFF8
 13770                           tblptrh	equ	0xFF7
 13771                           tblptrl	equ	0xFF6
 13772                           tablat	equ	0xFF5
 13773                           prodh	equ	0xFF4
 13774                           prodl	equ	0xFF3
 13775                           intcon	equ	0xFF2
 13776                           intcon3	equ	0xFF0
 13777                           postinc0	equ	0xFEE
 13778                           fsr0h	equ	0xFEA
 13779                           fsr0l	equ	0xFE9
 13780                           wreg	equ	0xFE8
 13781                           postdec1	equ	0xFE5
 13782                           fsr1h	equ	0xFE2
 13783                           fsr1l	equ	0xFE1
 13784                           indf2	equ	0xFDF
 13785                           postinc2	equ	0xFDE
 13786                           postdec2	equ	0xFDD
 13787                           fsr2h	equ	0xFDA
 13788                           fsr2l	equ	0xFD9
 13789                           status	equ	0xFD8
 13790                           
 13791 ;; *************** function i2_lcdNewline *****************
 13792 ;; Defined at:
 13793 ;;		line 78 in file "lcd.c"
 13794 ;; Parameters:    Size  Location     Type
 13795 ;;		None
 13796 ;; Auto vars:     Size  Location     Type
 13797 ;;		None
 13798 ;; Return value:  Size  Location     Type
 13799 ;;                  1    wreg      void 
 13800 ;; Registers used:
 13801 ;;		wreg, status,2, status,0, cstack
 13802 ;; Tracked objects:
 13803 ;;		On entry : 0/0
 13804 ;;		On exit  : 0/0
 13805 ;;		Unchanged: 0/0
 13806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13811 ;;Total ram usage:        0 bytes
 13812 ;; Hardware stack levels used:    1
 13813 ;; Hardware stack levels required when called:    2
 13814 ;; This function calls:
 13815 ;;		i2_lcdInst
 13816 ;; This function is called by:
 13817 ;;		i2_putch
 13818 ;; This function uses a non-reentrant model
 13819 ;;
 13820                           
 13821                           	psect	text48
 13822  004C6A                     __ptext48:
 13823                           	opt stack 0
 13824  004C6A                     i2_lcdNewline:
 13825                           	opt stack 19
 13826                           
 13827                           ;lcd.c: 79: lcdInst(0b11000000);
 13828                           
 13829                           ;incstack = 0
 13830  004C6A  0EC0               	movlw	192
 13831  004C6C  EC1C  F026         	call	i2_lcdInst
 13832  004C70  0012               	return		;funcret
 13833  004C72                     __end_ofi2_lcdNewline:
 13834                           	opt stack 0
 13835                           pclatu	equ	0xFFB
 13836                           pclath	equ	0xFFA
 13837                           tblptru	equ	0xFF8
 13838                           tblptrh	equ	0xFF7
 13839                           tblptrl	equ	0xFF6
 13840                           tablat	equ	0xFF5
 13841                           prodh	equ	0xFF4
 13842                           prodl	equ	0xFF3
 13843                           intcon	equ	0xFF2
 13844                           intcon3	equ	0xFF0
 13845                           postinc0	equ	0xFEE
 13846                           fsr0h	equ	0xFEA
 13847                           fsr0l	equ	0xFE9
 13848                           wreg	equ	0xFE8
 13849                           postdec1	equ	0xFE5
 13850                           fsr1h	equ	0xFE2
 13851                           fsr1l	equ	0xFE1
 13852                           indf2	equ	0xFDF
 13853                           postinc2	equ	0xFDE
 13854                           postdec2	equ	0xFDD
 13855                           fsr2h	equ	0xFDA
 13856                           fsr2l	equ	0xFD9
 13857                           status	equ	0xFD8
 13858                           
 13859 ;; *************** function i2_fround *****************
 13860 ;; Defined at:
 13861 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 13862 ;; Parameters:    Size  Location     Type
 13863 ;;  prec            1    wreg     unsigned char 
 13864 ;; Auto vars:     Size  Location     Type
 13865 ;;  prec            1   51[COMRAM] unsigned char 
 13866 ;; Return value:  Size  Location     Type
 13867 ;;                  3   42[COMRAM] unsigned char 
 13868 ;; Registers used:
 13869 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13870 ;; Tracked objects:
 13871 ;;		On entry : 0/0
 13872 ;;		On exit  : 0/0
 13873 ;;		Unchanged: 0/0
 13874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13875 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13876 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13878 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13879 ;;Total ram usage:       10 bytes
 13880 ;; Hardware stack levels used:    1
 13881 ;; Hardware stack levels required when called:    2
 13882 ;; This function calls:
 13883 ;;		i2___awdiv
 13884 ;;		i2___awmod
 13885 ;;		i2___ftmul
 13886 ;;		i2___wmul
 13887 ;; This function is called by:
 13888 ;;		i2_printf
 13889 ;; This function uses a non-reentrant model
 13890 ;;
 13891                           
 13892                           	psect	text49
 13893  0022C8                     __ptext49:
 13894                           	opt stack 0
 13895  0022C8                     i2_fround:
 13896                           	opt stack 20
 13897                           
 13898                           ;incstack = 0
 13899                           ;i2fround@prec stored from wreg
 13900  0022C8  6E34               	movwf	i2fround@prec,c
 13901                           
 13902                           ;doprnt.c: 413: if(prec>=110)
 13903  0022CA  0E6D               	movlw	109
 13904  0022CC  6434               	cpfsgt	i2fround@prec,c
 13905  0022CE  D09F               	goto	i2l5538
 13906                           
 13907                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 13908  0022D0  0E00               	movlw	0
 13909  0022D2  6E12               	movwf	i2___wmul@multiplicand+1,c
 13910  0022D4  0E03               	movlw	3
 13911  0022D6  6E11               	movwf	i2___wmul@multiplicand,c
 13912  0022D8  0E00               	movlw	0
 13913  0022DA  6E0A               	movwf	i2___awdiv@divisor+1,c
 13914  0022DC  0E0A               	movlw	10
 13915  0022DE  6E09               	movwf	i2___awdiv@divisor,c
 13916  0022E0  0E00               	movlw	0
 13917  0022E2  6E04               	movwf	i2___awmod@divisor+1,c
 13918  0022E4  0E64               	movlw	100
 13919  0022E6  6E03               	movwf	i2___awmod@divisor,c
 13920  0022E8  C034  F001         	movff	i2fround@prec,i2___awmod@dividend
 13921  0022EC  6A02               	clrf	i2___awmod@dividend+1,c
 13922  0022EE  ECFE  F022         	call	i2___awmod	;wreg free
 13923  0022F2  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 13924  0022F6  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 13925  0022FA  ECC5  F021         	call	i2___awdiv	;wreg free
 13926  0022FE  0E09               	movlw	9
 13927  002300  2407               	addwf	?i2___awdiv,w,c
 13928  002302  6E0F               	movwf	i2___wmul@multiplier,c
 13929  002304  0E00               	movlw	0
 13930  002306  2008               	addwfc	?i2___awdiv+1,w,c
 13931  002308  6E10               	movwf	i2___wmul@multiplier+1,c
 13932  00230A  ECE6  F025         	call	i2___wmul	;wreg free
 13933  00230E  0E59               	movlw	low __npowers_
 13934  002310  240F               	addwf	?i2___wmul,w,c
 13935  002312  6EF6               	movwf	tblptrl,c
 13936  002314  0EFE               	movlw	high __npowers_
 13937  002316  2010               	addwfc	?i2___wmul+1,w,c
 13938  002318  6EF7               	movwf	tblptrh,c
 13939  00231A                     	if	0	;There are less than 3 active tblptr bytes
 13940  00231A                     	endif
 13941  00231A  0009               	tblrd		*+
 13942  00231C  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 13943  002320  0009               	tblrd		*+
 13944  002322  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 13945  002326  000A               	tblrd		*-
 13946  002328  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 13947  00232C  0E00               	movlw	0
 13948  00232E  6E0A               	movwf	i2___awdiv@divisor+1,c
 13949  002330  0E64               	movlw	100
 13950  002332  6E09               	movwf	i2___awdiv@divisor,c
 13951  002334  C034  F007         	movff	i2fround@prec,i2___awdiv@dividend
 13952  002338  6A08               	clrf	i2___awdiv@dividend+1,c
 13953  00233A  ECC5  F021         	call	i2___awdiv	;wreg free
 13954  00233E  0E12               	movlw	18
 13955  002340  2407               	addwf	?i2___awdiv,w,c
 13956  002342  6E0F               	movwf	i2___wmul@multiplier,c
 13957  002344  0E00               	movlw	0
 13958  002346  2008               	addwfc	?i2___awdiv+1,w,c
 13959  002348  6E10               	movwf	i2___wmul@multiplier+1,c
 13960  00234A  0E00               	movlw	0
 13961  00234C  6E12               	movwf	i2___wmul@multiplicand+1,c
 13962  00234E  0E03               	movlw	3
 13963  002350  6E11               	movwf	i2___wmul@multiplicand,c
 13964  002352  ECE6  F025         	call	i2___wmul	;wreg free
 13965  002356  0E59               	movlw	low __npowers_
 13966  002358  240F               	addwf	?i2___wmul,w,c
 13967  00235A  6EF6               	movwf	tblptrl,c
 13968  00235C  0EFE               	movlw	high __npowers_
 13969  00235E  2010               	addwfc	?i2___wmul+1,w,c
 13970  002360  6EF7               	movwf	tblptrh,c
 13971  002362                     	if	0	;There are less than 3 active tblptr bytes
 13972  002362                     	endif
 13973  002362  0009               	tblrd		*+
 13974  002364  CFF5 F01C          	movff	tablat,i2___ftmul@f1
 13975  002368  0009               	tblrd		*+
 13976  00236A  CFF5 F01D          	movff	tablat,i2___ftmul@f1+1
 13977  00236E  000A               	tblrd		*-
 13978  002370  CFF5 F01E          	movff	tablat,i2___ftmul@f1+2
 13979  002374  EC8A  F01B         	call	i2___ftmul	;wreg free
 13980  002378  C01C  F031         	movff	?i2___ftmul,i2_fround$1542
 13981  00237C  C01D  F032         	movff	?i2___ftmul+1,i2_fround$1542+1
 13982  002380  C01E  F033         	movff	?i2___ftmul+2,i2_fround$1542+2
 13983                           
 13984                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 13985  002384  0E00               	movlw	0
 13986  002386  6E12               	movwf	i2___wmul@multiplicand+1,c
 13987  002388  0E03               	movlw	3
 13988  00238A  6E11               	movwf	i2___wmul@multiplicand,c
 13989  00238C  0E00               	movlw	0
 13990  00238E  6E04               	movwf	i2___awmod@divisor+1,c
 13991  002390  0E0A               	movlw	10
 13992  002392  6E03               	movwf	i2___awmod@divisor,c
 13993  002394  C034  F001         	movff	i2fround@prec,i2___awmod@dividend
 13994  002398  6A02               	clrf	i2___awmod@dividend+1,c
 13995  00239A  ECFE  F022         	call	i2___awmod	;wreg free
 13996  00239E  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 13997  0023A2  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 13998  0023A6  ECE6  F025         	call	i2___wmul	;wreg free
 13999  0023AA  0E59               	movlw	low __npowers_
 14000  0023AC  240F               	addwf	?i2___wmul,w,c
 14001  0023AE  6EF6               	movwf	tblptrl,c
 14002  0023B0  0EFE               	movlw	high __npowers_
 14003  0023B2  2010               	addwfc	?i2___wmul+1,w,c
 14004  0023B4  6EF7               	movwf	tblptrh,c
 14005  0023B6                     	if	0	;There are less than 3 active tblptr bytes
 14006  0023B6                     	endif
 14007  0023B6  0009               	tblrd		*+
 14008  0023B8  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 14009  0023BC  0009               	tblrd		*+
 14010  0023BE  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 14011  0023C2  000A               	tblrd		*-
 14012  0023C4  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 14013  0023C8  C031  F01C         	movff	i2_fround$1542,i2___ftmul@f1
 14014  0023CC  C032  F01D         	movff	i2_fround$1542+1,i2___ftmul@f1+1
 14015  0023D0  C033  F01E         	movff	i2_fround$1542+2,i2___ftmul@f1+2
 14016  0023D4  EC8A  F01B         	call	i2___ftmul	;wreg free
 14017  0023D8  C01C  F02E         	movff	?i2___ftmul,i2_fround$1543
 14018  0023DC  C01D  F02F         	movff	?i2___ftmul+1,i2_fround$1543+1
 14019  0023E0  C01E  F030         	movff	?i2___ftmul+2,i2_fround$1543+2
 14020                           
 14021                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 14022  0023E4  C02E  F01C         	movff	i2_fround$1543,i2___ftmul@f1
 14023  0023E8  C02F  F01D         	movff	i2_fround$1543+1,i2___ftmul@f1+1
 14024  0023EC  C030  F01E         	movff	i2_fround$1543+2,i2___ftmul@f1+2
 14025  0023F0  0E00               	movlw	0
 14026  0023F2  6E1F               	movwf	i2___ftmul@f2,c
 14027  0023F4  0E00               	movlw	0
 14028  0023F6  6E20               	movwf	i2___ftmul@f2+1,c
 14029  0023F8  0E3F               	movlw	63
 14030  0023FA  6E21               	movwf	i2___ftmul@f2+2,c
 14031  0023FC  EC8A  F01B         	call	i2___ftmul	;wreg free
 14032  002400  C01C  F02B         	movff	?i2___ftmul,?i2_fround
 14033  002404  C01D  F02C         	movff	?i2___ftmul+1,?i2_fround+1
 14034  002408  C01E  F02D         	movff	?i2___ftmul+2,?i2_fround+2
 14035  00240C  0012               	return	
 14036  00240E                     i2l5538:
 14037                           
 14038                           ;doprnt.c: 415: else if(prec > 10)
 14039  00240E  0E0A               	movlw	10
 14040  002410  6434               	cpfsgt	i2fround@prec,c
 14041  002412  D05D               	goto	i2l5546
 14042                           
 14043                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 14044  002414  0E00               	movlw	0
 14045  002416  6E12               	movwf	i2___wmul@multiplicand+1,c
 14046  002418  0E03               	movlw	3
 14047  00241A  6E11               	movwf	i2___wmul@multiplicand,c
 14048  00241C  0E00               	movlw	0
 14049  00241E  6E04               	movwf	i2___awmod@divisor+1,c
 14050  002420  0E0A               	movlw	10
 14051  002422  6E03               	movwf	i2___awmod@divisor,c
 14052  002424  C034  F001         	movff	i2fround@prec,i2___awmod@dividend
 14053  002428  6A02               	clrf	i2___awmod@dividend+1,c
 14054  00242A  ECFE  F022         	call	i2___awmod	;wreg free
 14055  00242E  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 14056  002432  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 14057  002436  ECE6  F025         	call	i2___wmul	;wreg free
 14058  00243A  0E59               	movlw	low __npowers_
 14059  00243C  240F               	addwf	?i2___wmul,w,c
 14060  00243E  6EF6               	movwf	tblptrl,c
 14061  002440  0EFE               	movlw	high __npowers_
 14062  002442  2010               	addwfc	?i2___wmul+1,w,c
 14063  002444  6EF7               	movwf	tblptrh,c
 14064  002446                     	if	0	;There are less than 3 active tblptr bytes
 14065  002446                     	endif
 14066  002446  0009               	tblrd		*+
 14067  002448  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 14068  00244C  0009               	tblrd		*+
 14069  00244E  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 14070  002452  000A               	tblrd		*-
 14071  002454  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 14072  002458  0E00               	movlw	0
 14073  00245A  6E0A               	movwf	i2___awdiv@divisor+1,c
 14074  00245C  0E0A               	movlw	10
 14075  00245E  6E09               	movwf	i2___awdiv@divisor,c
 14076  002460  C034  F007         	movff	i2fround@prec,i2___awdiv@dividend
 14077  002464  6A08               	clrf	i2___awdiv@dividend+1,c
 14078  002466  ECC5  F021         	call	i2___awdiv	;wreg free
 14079  00246A  0E09               	movlw	9
 14080  00246C  2407               	addwf	?i2___awdiv,w,c
 14081  00246E  6E0F               	movwf	i2___wmul@multiplier,c
 14082  002470  0E00               	movlw	0
 14083  002472  2008               	addwfc	?i2___awdiv+1,w,c
 14084  002474  6E10               	movwf	i2___wmul@multiplier+1,c
 14085  002476  0E00               	movlw	0
 14086  002478  6E12               	movwf	i2___wmul@multiplicand+1,c
 14087  00247A  0E03               	movlw	3
 14088  00247C  6E11               	movwf	i2___wmul@multiplicand,c
 14089  00247E  ECE6  F025         	call	i2___wmul	;wreg free
 14090  002482  0E59               	movlw	low __npowers_
 14091  002484  240F               	addwf	?i2___wmul,w,c
 14092  002486  6EF6               	movwf	tblptrl,c
 14093  002488  0EFE               	movlw	high __npowers_
 14094  00248A  2010               	addwfc	?i2___wmul+1,w,c
 14095  00248C  6EF7               	movwf	tblptrh,c
 14096  00248E                     	if	0	;There are less than 3 active tblptr bytes
 14097  00248E                     	endif
 14098  00248E  0009               	tblrd		*+
 14099  002490  CFF5 F01C          	movff	tablat,i2___ftmul@f1
 14100  002494  0009               	tblrd		*+
 14101  002496  CFF5 F01D          	movff	tablat,i2___ftmul@f1+1
 14102  00249A  000A               	tblrd		*-
 14103  00249C  CFF5 F01E          	movff	tablat,i2___ftmul@f1+2
 14104  0024A0  EC8A  F01B         	call	i2___ftmul	;wreg free
 14105  0024A4  C01C  F031         	movff	?i2___ftmul,i2_fround$1542
 14106  0024A8  C01D  F032         	movff	?i2___ftmul+1,i2_fround$1542+1
 14107  0024AC  C01E  F033         	movff	?i2___ftmul+2,i2_fround$1542+2
 14108                           
 14109                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 14110  0024B0  C031  F01C         	movff	i2_fround$1542,i2___ftmul@f1
 14111  0024B4  C032  F01D         	movff	i2_fround$1542+1,i2___ftmul@f1+1
 14112  0024B8  C033  F01E         	movff	i2_fround$1542+2,i2___ftmul@f1+2
 14113  0024BC  0E00               	movlw	0
 14114  0024BE  6E1F               	movwf	i2___ftmul@f2,c
 14115  0024C0  0E00               	movlw	0
 14116  0024C2  6E20               	movwf	i2___ftmul@f2+1,c
 14117  0024C4  0E3F               	movlw	63
 14118  0024C6  6E21               	movwf	i2___ftmul@f2+2,c
 14119  0024C8  EC8A  F01B         	call	i2___ftmul	;wreg free
 14120  0024CC  D799               	goto	L8
 14121  0024CE                     i2l5546:
 14122                           
 14123                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 14124  0024CE  5034               	movf	i2fround@prec,w,c
 14125  0024D0  0D03               	mullw	3
 14126  0024D2  0E59               	movlw	low __npowers_
 14127  0024D4  24F3               	addwf	prodl,w,c
 14128  0024D6  6EF6               	movwf	tblptrl,c
 14129  0024D8  0EFE               	movlw	high __npowers_
 14130  0024DA  20F4               	addwfc	prodh,w,c
 14131  0024DC  6EF7               	movwf	tblptrh,c
 14132  0024DE                     	if	0	;There are less than 3 active tblptr bytes
 14133  0024DE                     	endif
 14134  0024DE  0009               	tblrd		*+
 14135  0024E0  CFF5 F01C          	movff	tablat,i2___ftmul@f1
 14136  0024E4  0009               	tblrd		*+
 14137  0024E6  CFF5 F01D          	movff	tablat,i2___ftmul@f1+1
 14138  0024EA  000A               	tblrd		*-
 14139  0024EC  CFF5 F01E          	movff	tablat,i2___ftmul@f1+2
 14140  0024F0  0E00               	movlw	0
 14141  0024F2  6E1F               	movwf	i2___ftmul@f2,c
 14142  0024F4  0E00               	movlw	0
 14143  0024F6  6E20               	movwf	i2___ftmul@f2+1,c
 14144  0024F8  0E3F               	movlw	63
 14145  0024FA  6E21               	movwf	i2___ftmul@f2+2,c
 14146  0024FC  EC8A  F01B         	call	i2___ftmul	;wreg free
 14147  002500  C01C  F02B         	movff	?i2___ftmul,?i2_fround
 14148  002504  C01D  F02C         	movff	?i2___ftmul+1,?i2_fround+1
 14149  002508  C01E  F02D         	movff	?i2___ftmul+2,?i2_fround+2
 14150  00250C  0012               	return	
 14151  00250E                     __end_ofi2_fround:
 14152                           	opt stack 0
 14153                           pclatu	equ	0xFFB
 14154                           pclath	equ	0xFFA
 14155                           tblptru	equ	0xFF8
 14156                           tblptrh	equ	0xFF7
 14157                           tblptrl	equ	0xFF6
 14158                           tablat	equ	0xFF5
 14159                           prodh	equ	0xFF4
 14160                           prodl	equ	0xFF3
 14161                           intcon	equ	0xFF2
 14162                           intcon3	equ	0xFF0
 14163                           postinc0	equ	0xFEE
 14164                           fsr0h	equ	0xFEA
 14165                           fsr0l	equ	0xFE9
 14166                           wreg	equ	0xFE8
 14167                           postdec1	equ	0xFE5
 14168                           fsr1h	equ	0xFE2
 14169                           fsr1l	equ	0xFE1
 14170                           indf2	equ	0xFDF
 14171                           postinc2	equ	0xFDE
 14172                           postdec2	equ	0xFDD
 14173                           fsr2h	equ	0xFDA
 14174                           fsr2l	equ	0xFD9
 14175                           status	equ	0xFD8
 14176                           
 14177 ;; *************** function i2___wmul *****************
 14178 ;; Defined at:
 14179 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 14180 ;; Parameters:    Size  Location     Type
 14181 ;;  multiplier      2   14[COMRAM] unsigned int 
 14182 ;;  multiplicand    2   16[COMRAM] unsigned int 
 14183 ;; Auto vars:     Size  Location     Type
 14184 ;;  __wmul          2   18[COMRAM] unsigned int 
 14185 ;; Return value:  Size  Location     Type
 14186 ;;                  2   14[COMRAM] unsigned int 
 14187 ;; Registers used:
 14188 ;;		wreg, status,2, status,0, prodl, prodh
 14189 ;; Tracked objects:
 14190 ;;		On entry : 0/0
 14191 ;;		On exit  : 0/0
 14192 ;;		Unchanged: 0/0
 14193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14194 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14195 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14197 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14198 ;;Total ram usage:        6 bytes
 14199 ;; Hardware stack levels used:    1
 14200 ;; This function calls:
 14201 ;;		Nothing
 14202 ;; This function is called by:
 14203 ;;		i2_fround
 14204 ;;		i2_scale
 14205 ;;		i2_printf
 14206 ;; This function uses a non-reentrant model
 14207 ;;
 14208                           
 14209                           	psect	text50
 14210  004BCC                     __ptext50:
 14211                           	opt stack 0
 14212  004BCC                     i2___wmul:
 14213                           	opt stack 21
 14214                           
 14215                           ;incstack = 0
 14216  004BCC  500F               	movf	i2___wmul@multiplier,w,c
 14217  004BCE  0211               	mulwf	i2___wmul@multiplicand,c
 14218  004BD0  CFF3 F013          	movff	prodl,i2___wmul@product
 14219  004BD4  CFF4 F014          	movff	prodh,i2___wmul@product+1
 14220  004BD8  500F               	movf	i2___wmul@multiplier,w,c
 14221  004BDA  0212               	mulwf	i2___wmul@multiplicand+1,c
 14222  004BDC  50F3               	movf	prodl,w,c
 14223  004BDE  2614               	addwf	i2___wmul@product+1,f,c
 14224  004BE0  5010               	movf	i2___wmul@multiplier+1,w,c
 14225  004BE2  0211               	mulwf	i2___wmul@multiplicand,c
 14226  004BE4  50F3               	movf	prodl,w,c
 14227  004BE6  2614               	addwf	i2___wmul@product+1,f,c
 14228  004BE8  C013  F00F         	movff	i2___wmul@product,?i2___wmul
 14229  004BEC  C014  F010         	movff	i2___wmul@product+1,?i2___wmul+1
 14230  004BF0  0012               	return	
 14231  004BF2                     __end_ofi2___wmul:
 14232                           	opt stack 0
 14233                           pclatu	equ	0xFFB
 14234                           pclath	equ	0xFFA
 14235                           tblptru	equ	0xFF8
 14236                           tblptrh	equ	0xFF7
 14237                           tblptrl	equ	0xFF6
 14238                           tablat	equ	0xFF5
 14239                           prodh	equ	0xFF4
 14240                           prodl	equ	0xFF3
 14241                           intcon	equ	0xFF2
 14242                           intcon3	equ	0xFF0
 14243                           postinc0	equ	0xFEE
 14244                           fsr0h	equ	0xFEA
 14245                           fsr0l	equ	0xFE9
 14246                           wreg	equ	0xFE8
 14247                           postdec1	equ	0xFE5
 14248                           fsr1h	equ	0xFE2
 14249                           fsr1l	equ	0xFE1
 14250                           indf2	equ	0xFDF
 14251                           postinc2	equ	0xFDE
 14252                           postdec2	equ	0xFDD
 14253                           fsr2h	equ	0xFDA
 14254                           fsr2l	equ	0xFD9
 14255                           status	equ	0xFD8
 14256                           
 14257 ;; *************** function i2___ftmul *****************
 14258 ;; Defined at:
 14259 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 14260 ;; Parameters:    Size  Location     Type
 14261 ;;  f1              3   27[COMRAM] float 
 14262 ;;  f2              3   30[COMRAM] float 
 14263 ;; Auto vars:     Size  Location     Type
 14264 ;;  __ftmul         3   37[COMRAM] unsigned um
 14265 ;;  __ftmul         1   41[COMRAM] unsigned char 
 14266 ;;  __ftmul         1   40[COMRAM] unsigned char 
 14267 ;;  __ftmul         1   36[COMRAM] unsigned char 
 14268 ;; Return value:  Size  Location     Type
 14269 ;;                  3   27[COMRAM] float 
 14270 ;; Registers used:
 14271 ;;		wreg, status,2, status,0, cstack
 14272 ;; Tracked objects:
 14273 ;;		On entry : 0/0
 14274 ;;		On exit  : 0/0
 14275 ;;		Unchanged: 0/0
 14276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14277 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14278 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14279 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14280 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14281 ;;Total ram usage:       15 bytes
 14282 ;; Hardware stack levels used:    1
 14283 ;; Hardware stack levels required when called:    1
 14284 ;; This function calls:
 14285 ;;		i2___ftpack
 14286 ;; This function is called by:
 14287 ;;		i2_angleToPulse
 14288 ;;		i2_fround
 14289 ;;		i2_scale
 14290 ;;		i2_printf
 14291 ;; This function uses a non-reentrant model
 14292 ;;
 14293                           
 14294                           	psect	text51
 14295  003714                     __ptext51:
 14296                           	opt stack 0
 14297  003714                     i2___ftmul:
 14298                           	opt stack 20
 14299                           
 14300                           ;incstack = 0
 14301  003714  C01E  F022         	movff	i2___ftmul@f1+2,??i2___ftmul
 14302  003718  6A23               	clrf	(??i2___ftmul+1)& (0+255),c
 14303  00371A  6A24               	clrf	(??i2___ftmul+2)& (0+255),c
 14304  00371C  341D               	rlcf	i2___ftmul@f1+1,w,c
 14305  00371E  3622               	rlcf	??i2___ftmul& (0+255),f,c
 14306  003720  E301               	bnc	u497_41
 14307  003722  8023               	bsf	(??i2___ftmul+1)& (0+255),0,c
 14308  003724                     u497_41:
 14309  003724  5022               	movf	??i2___ftmul,w,c
 14310  003726  6E25               	movwf	i2___ftmul@exp,c
 14311  003728  5025               	movf	i2___ftmul@exp,w,c
 14312  00372A  A4D8               	btfss	status,2,c
 14313  00372C  D007               	goto	i2l5012
 14314  00372E  0E00               	movlw	0
 14315  003730  6E1C               	movwf	?i2___ftmul,c
 14316  003732  0E00               	movlw	0
 14317  003734  6E1D               	movwf	?i2___ftmul+1,c
 14318  003736  0E00               	movlw	0
 14319  003738  6E1E               	movwf	?i2___ftmul+2,c
 14320  00373A  0012               	return	
 14321  00373C                     i2l5012:
 14322  00373C  C021  F022         	movff	i2___ftmul@f2+2,??i2___ftmul
 14323  003740  6A23               	clrf	(??i2___ftmul+1)& (0+255),c
 14324  003742  6A24               	clrf	(??i2___ftmul+2)& (0+255),c
 14325  003744  3420               	rlcf	i2___ftmul@f2+1,w,c
 14326  003746  3622               	rlcf	??i2___ftmul& (0+255),f,c
 14327  003748  E301               	bnc	u499_41
 14328  00374A  8023               	bsf	(??i2___ftmul+1)& (0+255),0,c
 14329  00374C                     u499_41:
 14330  00374C  5022               	movf	??i2___ftmul,w,c
 14331  00374E  6E2A               	movwf	i2___ftmul@sign,c
 14332  003750  502A               	movf	i2___ftmul@sign,w,c
 14333  003752  A4D8               	btfss	status,2,c
 14334  003754  D007               	goto	i2l5018
 14335  003756  0E00               	movlw	0
 14336  003758  6E1C               	movwf	?i2___ftmul,c
 14337  00375A  0E00               	movlw	0
 14338  00375C  6E1D               	movwf	?i2___ftmul+1,c
 14339  00375E  0E00               	movlw	0
 14340  003760  6E1E               	movwf	?i2___ftmul+2,c
 14341  003762  0012               	return	
 14342  003764                     i2l5018:
 14343  003764  502A               	movf	i2___ftmul@sign,w,c
 14344  003766  0F7B               	addlw	123
 14345  003768  2625               	addwf	i2___ftmul@exp,f,c
 14346  00376A  C01E  F02A         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 14347  00376E  5021               	movf	i2___ftmul@f2+2,w,c
 14348  003770  1A2A               	xorwf	i2___ftmul@sign,f,c
 14349  003772  0E80               	movlw	128
 14350  003774  162A               	andwf	i2___ftmul@sign,f,c
 14351  003776  8E1D               	bsf	i2___ftmul@f1+1,7,c
 14352  003778  8E20               	bsf	i2___ftmul@f2+1,7,c
 14353  00377A  0EFF               	movlw	255
 14354  00377C  161F               	andwf	i2___ftmul@f2,f,c
 14355  00377E  0EFF               	movlw	255
 14356  003780  1620               	andwf	i2___ftmul@f2+1,f,c
 14357  003782  0E00               	movlw	0
 14358  003784  1621               	andwf	i2___ftmul@f2+2,f,c
 14359  003786  0E00               	movlw	0
 14360  003788  6E26               	movwf	i2___ftmul@f3_as_product,c
 14361  00378A  0E00               	movlw	0
 14362  00378C  6E27               	movwf	i2___ftmul@f3_as_product+1,c
 14363  00378E  0E00               	movlw	0
 14364  003790  6E28               	movwf	i2___ftmul@f3_as_product+2,c
 14365  003792  0E07               	movlw	7
 14366  003794  6E29               	movwf	i2___ftmul@cntr,c
 14367  003796                     i2l5032:
 14368  003796  A01C               	btfss	i2___ftmul@f1,0,c
 14369  003798  D006               	goto	i2l5036
 14370  00379A  501F               	movf	i2___ftmul@f2,w,c
 14371  00379C  2626               	addwf	i2___ftmul@f3_as_product,f,c
 14372  00379E  5020               	movf	i2___ftmul@f2+1,w,c
 14373  0037A0  2227               	addwfc	i2___ftmul@f3_as_product+1,f,c
 14374  0037A2  5021               	movf	i2___ftmul@f2+2,w,c
 14375  0037A4  2228               	addwfc	i2___ftmul@f3_as_product+2,f,c
 14376  0037A6                     i2l5036:
 14377  0037A6  90D8               	bcf	status,0,c
 14378  0037A8  321E               	rrcf	i2___ftmul@f1+2,f,c
 14379  0037AA  321D               	rrcf	i2___ftmul@f1+1,f,c
 14380  0037AC  321C               	rrcf	i2___ftmul@f1,f,c
 14381  0037AE  90D8               	bcf	status,0,c
 14382  0037B0  361F               	rlcf	i2___ftmul@f2,f,c
 14383  0037B2  3620               	rlcf	i2___ftmul@f2+1,f,c
 14384  0037B4  3621               	rlcf	i2___ftmul@f2+2,f,c
 14385  0037B6  2E29               	decfsz	i2___ftmul@cntr,f,c
 14386  0037B8  D7EE               	goto	i2l5032
 14387  0037BA  0E09               	movlw	9
 14388  0037BC  6E29               	movwf	i2___ftmul@cntr,c
 14389  0037BE                     i2l5042:
 14390  0037BE  A01C               	btfss	i2___ftmul@f1,0,c
 14391  0037C0  D006               	goto	i2l5046
 14392  0037C2  501F               	movf	i2___ftmul@f2,w,c
 14393  0037C4  2626               	addwf	i2___ftmul@f3_as_product,f,c
 14394  0037C6  5020               	movf	i2___ftmul@f2+1,w,c
 14395  0037C8  2227               	addwfc	i2___ftmul@f3_as_product+1,f,c
 14396  0037CA  5021               	movf	i2___ftmul@f2+2,w,c
 14397  0037CC  2228               	addwfc	i2___ftmul@f3_as_product+2,f,c
 14398  0037CE                     i2l5046:
 14399  0037CE  90D8               	bcf	status,0,c
 14400  0037D0  321E               	rrcf	i2___ftmul@f1+2,f,c
 14401  0037D2  321D               	rrcf	i2___ftmul@f1+1,f,c
 14402  0037D4  321C               	rrcf	i2___ftmul@f1,f,c
 14403  0037D6  90D8               	bcf	status,0,c
 14404  0037D8  3228               	rrcf	i2___ftmul@f3_as_product+2,f,c
 14405  0037DA  3227               	rrcf	i2___ftmul@f3_as_product+1,f,c
 14406  0037DC  3226               	rrcf	i2___ftmul@f3_as_product,f,c
 14407  0037DE  2E29               	decfsz	i2___ftmul@cntr,f,c
 14408  0037E0  D7EE               	goto	i2l5042
 14409  0037E2  C026  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 14410  0037E6  C027  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 14411  0037EA  C028  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 14412  0037EE  C025  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
 14413  0037F2  C02A  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
 14414  0037F6  ECA5  F01F         	call	i2___ftpack	;wreg free
 14415  0037FA  C001  F01C         	movff	?i2___ftpack,?i2___ftmul
 14416  0037FE  C002  F01D         	movff	?i2___ftpack+1,?i2___ftmul+1
 14417  003802  C003  F01E         	movff	?i2___ftpack+2,?i2___ftmul+2
 14418  003806  0012               	return	
 14419  003808                     __end_ofi2___ftmul:
 14420                           	opt stack 0
 14421                           pclatu	equ	0xFFB
 14422                           pclath	equ	0xFFA
 14423                           tblptru	equ	0xFF8
 14424                           tblptrh	equ	0xFF7
 14425                           tblptrl	equ	0xFF6
 14426                           tablat	equ	0xFF5
 14427                           prodh	equ	0xFF4
 14428                           prodl	equ	0xFF3
 14429                           intcon	equ	0xFF2
 14430                           intcon3	equ	0xFF0
 14431                           postinc0	equ	0xFEE
 14432                           fsr0h	equ	0xFEA
 14433                           fsr0l	equ	0xFE9
 14434                           wreg	equ	0xFE8
 14435                           postdec1	equ	0xFE5
 14436                           fsr1h	equ	0xFE2
 14437                           fsr1l	equ	0xFE1
 14438                           indf2	equ	0xFDF
 14439                           postinc2	equ	0xFDE
 14440                           postdec2	equ	0xFDD
 14441                           fsr2h	equ	0xFDA
 14442                           fsr2l	equ	0xFD9
 14443                           status	equ	0xFD8
 14444                           
 14445 ;; *************** function i2___awdiv *****************
 14446 ;; Defined at:
 14447 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 14448 ;; Parameters:    Size  Location     Type
 14449 ;;  dividend        2    6[COMRAM] int 
 14450 ;;  divisor         2    8[COMRAM] int 
 14451 ;; Auto vars:     Size  Location     Type
 14452 ;;  __awdiv         2   12[COMRAM] int 
 14453 ;;  __awdiv         1   11[COMRAM] unsigned char 
 14454 ;;  __awdiv         1   10[COMRAM] unsigned char 
 14455 ;; Return value:  Size  Location     Type
 14456 ;;                  2    6[COMRAM] int 
 14457 ;; Registers used:
 14458 ;;		wreg, status,2, status,0
 14459 ;; Tracked objects:
 14460 ;;		On entry : 0/0
 14461 ;;		On exit  : 0/0
 14462 ;;		Unchanged: 0/0
 14463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14464 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14465 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14467 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14468 ;;Total ram usage:        8 bytes
 14469 ;; Hardware stack levels used:    1
 14470 ;; This function calls:
 14471 ;;		Nothing
 14472 ;; This function is called by:
 14473 ;;		i2_fround
 14474 ;;		i2_scale
 14475 ;;		i2_printf
 14476 ;; This function uses a non-reentrant model
 14477 ;;
 14478                           
 14479                           	psect	text52
 14480  00438A                     __ptext52:
 14481                           	opt stack 0
 14482  00438A                     i2___awdiv:
 14483                           	opt stack 21
 14484                           
 14485                           ;incstack = 0
 14486  00438A  0E00               	movlw	0
 14487  00438C  6E0C               	movwf	i2___awdiv@sign,c
 14488  00438E  AE0A               	btfss	i2___awdiv@divisor+1,7,c
 14489  004390  D006               	goto	i2l4806
 14490  004392  6C09               	negf	i2___awdiv@divisor,c
 14491  004394  1E0A               	comf	i2___awdiv@divisor+1,f,c
 14492  004396  B0D8               	btfsc	status,0,c
 14493  004398  2A0A               	incf	i2___awdiv@divisor+1,f,c
 14494  00439A  0E01               	movlw	1
 14495  00439C  6E0C               	movwf	i2___awdiv@sign,c
 14496  00439E                     i2l4806:
 14497  00439E  AE08               	btfss	i2___awdiv@dividend+1,7,c
 14498  0043A0  D006               	goto	i2l4812
 14499  0043A2  6C07               	negf	i2___awdiv@dividend,c
 14500  0043A4  1E08               	comf	i2___awdiv@dividend+1,f,c
 14501  0043A6  B0D8               	btfsc	status,0,c
 14502  0043A8  2A08               	incf	i2___awdiv@dividend+1,f,c
 14503  0043AA  0E01               	movlw	1
 14504  0043AC  1A0C               	xorwf	i2___awdiv@sign,f,c
 14505  0043AE                     i2l4812:
 14506  0043AE  0E00               	movlw	0
 14507  0043B0  6E0E               	movwf	i2___awdiv@quotient+1,c
 14508  0043B2  0E00               	movlw	0
 14509  0043B4  6E0D               	movwf	i2___awdiv@quotient,c
 14510  0043B6  5009               	movf	i2___awdiv@divisor,w,c
 14511  0043B8  100A               	iorwf	i2___awdiv@divisor+1,w,c
 14512  0043BA  B4D8               	btfsc	status,2,c
 14513  0043BC  D01C               	goto	i2l4834
 14514  0043BE  0E01               	movlw	1
 14515  0043C0  6E0B               	movwf	i2___awdiv@counter,c
 14516  0043C2  D004               	goto	i2l4820
 14517  0043C4                     i2l4818:
 14518  0043C4  90D8               	bcf	status,0,c
 14519  0043C6  3609               	rlcf	i2___awdiv@divisor,f,c
 14520  0043C8  360A               	rlcf	i2___awdiv@divisor+1,f,c
 14521  0043CA  2A0B               	incf	i2___awdiv@counter,f,c
 14522  0043CC                     i2l4820:
 14523  0043CC  AE0A               	btfss	i2___awdiv@divisor+1,7,c
 14524  0043CE  D7FA               	goto	i2l4818
 14525  0043D0                     i2l4822:
 14526  0043D0  90D8               	bcf	status,0,c
 14527  0043D2  360D               	rlcf	i2___awdiv@quotient,f,c
 14528  0043D4  360E               	rlcf	i2___awdiv@quotient+1,f,c
 14529  0043D6  5009               	movf	i2___awdiv@divisor,w,c
 14530  0043D8  5C07               	subwf	i2___awdiv@dividend,w,c
 14531  0043DA  500A               	movf	i2___awdiv@divisor+1,w,c
 14532  0043DC  5808               	subwfb	i2___awdiv@dividend+1,w,c
 14533  0043DE  A0D8               	btfss	status,0,c
 14534  0043E0  D005               	goto	i2l4830
 14535  0043E2  5009               	movf	i2___awdiv@divisor,w,c
 14536  0043E4  5E07               	subwf	i2___awdiv@dividend,f,c
 14537  0043E6  500A               	movf	i2___awdiv@divisor+1,w,c
 14538  0043E8  5A08               	subwfb	i2___awdiv@dividend+1,f,c
 14539  0043EA  800D               	bsf	i2___awdiv@quotient,0,c
 14540  0043EC                     i2l4830:
 14541  0043EC  90D8               	bcf	status,0,c
 14542  0043EE  320A               	rrcf	i2___awdiv@divisor+1,f,c
 14543  0043F0  3209               	rrcf	i2___awdiv@divisor,f,c
 14544  0043F2  2E0B               	decfsz	i2___awdiv@counter,f,c
 14545  0043F4  D7ED               	goto	i2l4822
 14546  0043F6                     i2l4834:
 14547  0043F6  500C               	movf	i2___awdiv@sign,w,c
 14548  0043F8  B4D8               	btfsc	status,2,c
 14549  0043FA  D004               	goto	i2l4838
 14550  0043FC  6C0D               	negf	i2___awdiv@quotient,c
 14551  0043FE  1E0E               	comf	i2___awdiv@quotient+1,f,c
 14552  004400  B0D8               	btfsc	status,0,c
 14553  004402  2A0E               	incf	i2___awdiv@quotient+1,f,c
 14554  004404                     i2l4838:
 14555  004404  C00D  F007         	movff	i2___awdiv@quotient,?i2___awdiv
 14556  004408  C00E  F008         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 14557  00440C  0012               	return	
 14558  00440E                     __end_ofi2___awdiv:
 14559                           	opt stack 0
 14560                           pclatu	equ	0xFFB
 14561                           pclath	equ	0xFFA
 14562                           tblptru	equ	0xFF8
 14563                           tblptrh	equ	0xFF7
 14564                           tblptrl	equ	0xFF6
 14565                           tablat	equ	0xFF5
 14566                           prodh	equ	0xFF4
 14567                           prodl	equ	0xFF3
 14568                           intcon	equ	0xFF2
 14569                           intcon3	equ	0xFF0
 14570                           postinc0	equ	0xFEE
 14571                           fsr0h	equ	0xFEA
 14572                           fsr0l	equ	0xFE9
 14573                           wreg	equ	0xFE8
 14574                           postdec1	equ	0xFE5
 14575                           fsr1h	equ	0xFE2
 14576                           fsr1l	equ	0xFE1
 14577                           indf2	equ	0xFDF
 14578                           postinc2	equ	0xFDE
 14579                           postdec2	equ	0xFDD
 14580                           fsr2h	equ	0xFDA
 14581                           fsr2l	equ	0xFD9
 14582                           status	equ	0xFD8
 14583                           
 14584 ;; *************** function i2__tdiv_to_l_ *****************
 14585 ;; Defined at:
 14586 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
 14587 ;; Parameters:    Size  Location     Type
 14588 ;;  f1              3    0[COMRAM] float 
 14589 ;;  f2              3    3[COMRAM] float 
 14590 ;; Auto vars:     Size  Location     Type
 14591 ;;  _tdiv_to_l_     4    9[COMRAM] unsigned long 
 14592 ;;  _tdiv_to_l_     1   14[COMRAM] unsigned char 
 14593 ;;  _tdiv_to_l_     1   13[COMRAM] unsigned char 
 14594 ;; Return value:  Size  Location     Type
 14595 ;;                  4    0[COMRAM] unsigned long 
 14596 ;; Registers used:
 14597 ;;		wreg, status,2, status,0
 14598 ;; Tracked objects:
 14599 ;;		On entry : 0/0
 14600 ;;		On exit  : 0/0
 14601 ;;		Unchanged: 0/0
 14602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14603 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14604 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14605 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14606 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14607 ;;Total ram usage:       15 bytes
 14608 ;; Hardware stack levels used:    1
 14609 ;; This function calls:
 14610 ;;		Nothing
 14611 ;; This function is called by:
 14612 ;;		i2_printf
 14613 ;; This function uses a non-reentrant model
 14614 ;;
 14615                           
 14616                           	psect	text53
 14617  003074                     __ptext53:
 14618                           	opt stack 0
 14619  003074                     i2__tdiv_to_l_:
 14620                           	opt stack 22
 14621                           
 14622                           ;incstack = 0
 14623  003074  C003  F007         	movff	i2__tdiv_to_l_@f1+2,??i2__tdiv_to_l_
 14624  003078  6A08               	clrf	(??i2__tdiv_to_l_+1)& (0+255),c
 14625  00307A  6A09               	clrf	(??i2__tdiv_to_l_+2)& (0+255),c
 14626  00307C  3402               	rlcf	i2__tdiv_to_l_@f1+1,w,c
 14627  00307E  3607               	rlcf	??i2__tdiv_to_l_& (0+255),f,c
 14628  003080  E301               	bnc	u584_41
 14629  003082  8008               	bsf	(??i2__tdiv_to_l_+1)& (0+255),0,c
 14630  003084                     u584_41:
 14631  003084  5007               	movf	??i2__tdiv_to_l_,w,c
 14632  003086  6E0F               	movwf	i2__tdiv_to_l_@exp1,c
 14633  003088  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 14634  00308A  A4D8               	btfss	status,2,c
 14635  00308C  D009               	goto	i2l5654
 14636  00308E  0E00               	movlw	0
 14637  003090  6E01               	movwf	?i2__tdiv_to_l_,c
 14638  003092  0E00               	movlw	0
 14639  003094  6E02               	movwf	?i2__tdiv_to_l_+1,c
 14640  003096  0E00               	movlw	0
 14641  003098  6E03               	movwf	?i2__tdiv_to_l_+2,c
 14642  00309A  0E00               	movlw	0
 14643  00309C  6E04               	movwf	?i2__tdiv_to_l_+3,c
 14644  00309E  0012               	return	
 14645  0030A0                     i2l5654:
 14646  0030A0  C006  F007         	movff	i2__tdiv_to_l_@f2+2,??i2__tdiv_to_l_
 14647  0030A4  6A08               	clrf	(??i2__tdiv_to_l_+1)& (0+255),c
 14648  0030A6  6A09               	clrf	(??i2__tdiv_to_l_+2)& (0+255),c
 14649  0030A8  3405               	rlcf	i2__tdiv_to_l_@f2+1,w,c
 14650  0030AA  3607               	rlcf	??i2__tdiv_to_l_& (0+255),f,c
 14651  0030AC  E301               	bnc	u586_41
 14652  0030AE  8008               	bsf	(??i2__tdiv_to_l_+1)& (0+255),0,c
 14653  0030B0                     u586_41:
 14654  0030B0  5007               	movf	??i2__tdiv_to_l_,w,c
 14655  0030B2  6E0E               	movwf	i2__tdiv_to_l_@cntr,c
 14656  0030B4  500E               	movf	i2__tdiv_to_l_@cntr,w,c
 14657  0030B6  A4D8               	btfss	status,2,c
 14658  0030B8  D009               	goto	i2l5660
 14659  0030BA  0E00               	movlw	0
 14660  0030BC  6E01               	movwf	?i2__tdiv_to_l_,c
 14661  0030BE  0E00               	movlw	0
 14662  0030C0  6E02               	movwf	?i2__tdiv_to_l_+1,c
 14663  0030C2  0E00               	movlw	0
 14664  0030C4  6E03               	movwf	?i2__tdiv_to_l_+2,c
 14665  0030C6  0E00               	movlw	0
 14666  0030C8  6E04               	movwf	?i2__tdiv_to_l_+3,c
 14667  0030CA  0012               	return	
 14668  0030CC                     i2l5660:
 14669  0030CC  8E02               	bsf	i2__tdiv_to_l_@f1+1,7,c
 14670  0030CE  0EFF               	movlw	255
 14671  0030D0  1601               	andwf	i2__tdiv_to_l_@f1,f,c
 14672  0030D2  0EFF               	movlw	255
 14673  0030D4  1602               	andwf	i2__tdiv_to_l_@f1+1,f,c
 14674  0030D6  0E00               	movlw	0
 14675  0030D8  1603               	andwf	i2__tdiv_to_l_@f1+2,f,c
 14676  0030DA  8E05               	bsf	i2__tdiv_to_l_@f2+1,7,c
 14677  0030DC  0EFF               	movlw	255
 14678  0030DE  1604               	andwf	i2__tdiv_to_l_@f2,f,c
 14679  0030E0  0EFF               	movlw	255
 14680  0030E2  1605               	andwf	i2__tdiv_to_l_@f2+1,f,c
 14681  0030E4  0E00               	movlw	0
 14682  0030E6  1606               	andwf	i2__tdiv_to_l_@f2+2,f,c
 14683  0030E8  0E00               	movlw	0
 14684  0030EA  6E0A               	movwf	i2__tdiv_to_l_@quot,c
 14685  0030EC  0E00               	movlw	0
 14686  0030EE  6E0B               	movwf	i2__tdiv_to_l_@quot+1,c
 14687  0030F0  0E00               	movlw	0
 14688  0030F2  6E0C               	movwf	i2__tdiv_to_l_@quot+2,c
 14689  0030F4  0E00               	movlw	0
 14690  0030F6  6E0D               	movwf	i2__tdiv_to_l_@quot+3,c
 14691  0030F8  0E7F               	movlw	127
 14692  0030FA  5E0F               	subwf	i2__tdiv_to_l_@exp1,f,c
 14693  0030FC  500E               	movf	i2__tdiv_to_l_@cntr,w,c
 14694  0030FE  0F98               	addlw	152
 14695  003100  5E0F               	subwf	i2__tdiv_to_l_@exp1,f,c
 14696  003102  0E18               	movlw	24
 14697  003104  6E0E               	movwf	i2__tdiv_to_l_@cntr,c
 14698  003106                     i2l1023:
 14699  003106  90D8               	bcf	status,0,c
 14700  003108  360A               	rlcf	i2__tdiv_to_l_@quot,f,c
 14701  00310A  360B               	rlcf	i2__tdiv_to_l_@quot+1,f,c
 14702  00310C  360C               	rlcf	i2__tdiv_to_l_@quot+2,f,c
 14703  00310E  360D               	rlcf	i2__tdiv_to_l_@quot+3,f,c
 14704  003110  5004               	movf	i2__tdiv_to_l_@f2,w,c
 14705  003112  5C01               	subwf	i2__tdiv_to_l_@f1,w,c
 14706  003114  5005               	movf	i2__tdiv_to_l_@f2+1,w,c
 14707  003116  5802               	subwfb	i2__tdiv_to_l_@f1+1,w,c
 14708  003118  5006               	movf	i2__tdiv_to_l_@f2+2,w,c
 14709  00311A  5803               	subwfb	i2__tdiv_to_l_@f1+2,w,c
 14710  00311C  A0D8               	btfss	status,0,c
 14711  00311E  D007               	goto	i2l1024
 14712  003120  5004               	movf	i2__tdiv_to_l_@f2,w,c
 14713  003122  5E01               	subwf	i2__tdiv_to_l_@f1,f,c
 14714  003124  5005               	movf	i2__tdiv_to_l_@f2+1,w,c
 14715  003126  5A02               	subwfb	i2__tdiv_to_l_@f1+1,f,c
 14716  003128  5006               	movf	i2__tdiv_to_l_@f2+2,w,c
 14717  00312A  5A03               	subwfb	i2__tdiv_to_l_@f1+2,f,c
 14718  00312C  800A               	bsf	i2__tdiv_to_l_@quot,0,c
 14719  00312E                     i2l1024:
 14720  00312E  90D8               	bcf	status,0,c
 14721  003130  3601               	rlcf	i2__tdiv_to_l_@f1,f,c
 14722  003132  3602               	rlcf	i2__tdiv_to_l_@f1+1,f,c
 14723  003134  3603               	rlcf	i2__tdiv_to_l_@f1+2,f,c
 14724  003136  2E0E               	decfsz	i2__tdiv_to_l_@cntr,f,c
 14725  003138  D7E6               	goto	i2l1023
 14726  00313A  AE0F               	btfss	i2__tdiv_to_l_@exp1,7,c
 14727  00313C  D016               	goto	i2l5694
 14728  00313E  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 14729  003140  0A80               	xorlw	128
 14730  003142  0F97               	addlw	151
 14731  003144  B0D8               	btfsc	status,0,c
 14732  003146  D009               	goto	i2l5690
 14733  003148  0E00               	movlw	0
 14734  00314A  6E01               	movwf	?i2__tdiv_to_l_,c
 14735  00314C  0E00               	movlw	0
 14736  00314E  6E02               	movwf	?i2__tdiv_to_l_+1,c
 14737  003150  0E00               	movlw	0
 14738  003152  6E03               	movwf	?i2__tdiv_to_l_+2,c
 14739  003154  0E00               	movlw	0
 14740  003156  6E04               	movwf	?i2__tdiv_to_l_+3,c
 14741  003158  0012               	return	
 14742  00315A                     i2l5690:
 14743  00315A  90D8               	bcf	status,0,c
 14744  00315C  320D               	rrcf	i2__tdiv_to_l_@quot+3,f,c
 14745  00315E  320C               	rrcf	i2__tdiv_to_l_@quot+2,f,c
 14746  003160  320B               	rrcf	i2__tdiv_to_l_@quot+1,f,c
 14747  003162  320A               	rrcf	i2__tdiv_to_l_@quot,f,c
 14748  003164  3E0F               	incfsz	i2__tdiv_to_l_@exp1,f,c
 14749  003166  D7F9               	goto	i2l5690
 14750  003168  D015               	goto	i2l1030
 14751  00316A                     i2l5694:
 14752  00316A  0E17               	movlw	23
 14753  00316C  640F               	cpfsgt	i2__tdiv_to_l_@exp1,c
 14754  00316E  D00F               	goto	i2l5702
 14755  003170  0E00               	movlw	0
 14756  003172  6E01               	movwf	?i2__tdiv_to_l_,c
 14757  003174  0E00               	movlw	0
 14758  003176  6E02               	movwf	?i2__tdiv_to_l_+1,c
 14759  003178  0E00               	movlw	0
 14760  00317A  6E03               	movwf	?i2__tdiv_to_l_+2,c
 14761  00317C  0E00               	movlw	0
 14762  00317E  6E04               	movwf	?i2__tdiv_to_l_+3,c
 14763  003180  0012               	return	
 14764  003182                     i2l5700:
 14765  003182  90D8               	bcf	status,0,c
 14766  003184  360A               	rlcf	i2__tdiv_to_l_@quot,f,c
 14767  003186  360B               	rlcf	i2__tdiv_to_l_@quot+1,f,c
 14768  003188  360C               	rlcf	i2__tdiv_to_l_@quot+2,f,c
 14769  00318A  360D               	rlcf	i2__tdiv_to_l_@quot+3,f,c
 14770  00318C  060F               	decf	i2__tdiv_to_l_@exp1,f,c
 14771  00318E                     i2l5702:
 14772  00318E  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 14773  003190  A4D8               	btfss	status,2,c
 14774  003192  D7F7               	goto	i2l5700
 14775  003194                     i2l1030:
 14776  003194  C00A  F001         	movff	i2__tdiv_to_l_@quot,?i2__tdiv_to_l_
 14777  003198  C00B  F002         	movff	i2__tdiv_to_l_@quot+1,?i2__tdiv_to_l_+1
 14778  00319C  C00C  F003         	movff	i2__tdiv_to_l_@quot+2,?i2__tdiv_to_l_+2
 14779  0031A0  C00D  F004         	movff	i2__tdiv_to_l_@quot+3,?i2__tdiv_to_l_+3
 14780  0031A4  0012               	return		;funcret
 14781  0031A6                     __end_ofi2__tdiv_to_l_:
 14782                           	opt stack 0
 14783                           pclatu	equ	0xFFB
 14784                           pclath	equ	0xFFA
 14785                           tblptru	equ	0xFF8
 14786                           tblptrh	equ	0xFF7
 14787                           tblptrl	equ	0xFF6
 14788                           tablat	equ	0xFF5
 14789                           prodh	equ	0xFF4
 14790                           prodl	equ	0xFF3
 14791                           intcon	equ	0xFF2
 14792                           intcon3	equ	0xFF0
 14793                           postinc0	equ	0xFEE
 14794                           fsr0h	equ	0xFEA
 14795                           fsr0l	equ	0xFE9
 14796                           wreg	equ	0xFE8
 14797                           postdec1	equ	0xFE5
 14798                           fsr1h	equ	0xFE2
 14799                           fsr1l	equ	0xFE1
 14800                           indf2	equ	0xFDF
 14801                           postinc2	equ	0xFDE
 14802                           postdec2	equ	0xFDD
 14803                           fsr2h	equ	0xFDA
 14804                           fsr2l	equ	0xFD9
 14805                           status	equ	0xFD8
 14806                           
 14807 ;; *************** function i2__div_to_l_ *****************
 14808 ;; Defined at:
 14809 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
 14810 ;; Parameters:    Size  Location     Type
 14811 ;;  f1              3    0[COMRAM] unsigned long 
 14812 ;;  f2              3    3[COMRAM] unsigned long 
 14813 ;; Auto vars:     Size  Location     Type
 14814 ;;  _div_to_l_      4    6[COMRAM] unsigned long 
 14815 ;;  _div_to_l_      1   11[COMRAM] unsigned char 
 14816 ;;  _div_to_l_      1   10[COMRAM] unsigned char 
 14817 ;; Return value:  Size  Location     Type
 14818 ;;                  4    0[COMRAM] unsigned long 
 14819 ;; Registers used:
 14820 ;;		wreg, status,2, status,0
 14821 ;; Tracked objects:
 14822 ;;		On entry : 0/0
 14823 ;;		On exit  : 0/0
 14824 ;;		Unchanged: 0/0
 14825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14826 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14827 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14829 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14830 ;;Total ram usage:       12 bytes
 14831 ;; Hardware stack levels used:    1
 14832 ;; This function calls:
 14833 ;;		Nothing
 14834 ;; This function is called by:
 14835 ;;		i2_printf
 14836 ;; This function uses a non-reentrant model
 14837 ;;
 14838                           
 14839                           	psect	text54
 14840  0032D6                     __ptext54:
 14841                           	opt stack 0
 14842  0032D6                     i2__div_to_l_:
 14843                           	opt stack 22
 14844                           
 14845                           ;incstack = 0
 14846  0032D6  3403               	rlcf	i2__div_to_l_@f1+2,w,c
 14847  0032D8  3404               	rlcf	i2__div_to_l_@f1+3,w,c
 14848  0032DA  6E0C               	movwf	i2__div_to_l_@exp1,c
 14849  0032DC  500C               	movf	i2__div_to_l_@exp1,w,c
 14850  0032DE  A4D8               	btfss	status,2,c
 14851  0032E0  D009               	goto	i2l5594
 14852  0032E2  0E00               	movlw	0
 14853  0032E4  6E01               	movwf	?i2__div_to_l_,c
 14854  0032E6  0E00               	movlw	0
 14855  0032E8  6E02               	movwf	?i2__div_to_l_+1,c
 14856  0032EA  0E00               	movlw	0
 14857  0032EC  6E03               	movwf	?i2__div_to_l_+2,c
 14858  0032EE  0E00               	movlw	0
 14859  0032F0  6E04               	movwf	?i2__div_to_l_+3,c
 14860  0032F2  0012               	return	
 14861  0032F4                     i2l5594:
 14862  0032F4  3406               	rlcf	i2__div_to_l_@f2+2,w,c
 14863  0032F6  3407               	rlcf	i2__div_to_l_@f2+3,w,c
 14864  0032F8  6E0B               	movwf	i2__div_to_l_@cntr,c
 14865  0032FA  500B               	movf	i2__div_to_l_@cntr,w,c
 14866  0032FC  A4D8               	btfss	status,2,c
 14867  0032FE  D009               	goto	i2l5600
 14868  003300  0E00               	movlw	0
 14869  003302  6E01               	movwf	?i2__div_to_l_,c
 14870  003304  0E00               	movlw	0
 14871  003306  6E02               	movwf	?i2__div_to_l_+1,c
 14872  003308  0E00               	movlw	0
 14873  00330A  6E03               	movwf	?i2__div_to_l_+2,c
 14874  00330C  0E00               	movlw	0
 14875  00330E  6E04               	movwf	?i2__div_to_l_+3,c
 14876  003310  0012               	return	
 14877  003312                     i2l5600:
 14878  003312  8E03               	bsf	i2__div_to_l_@f1+2,7,c
 14879  003314  0EFF               	movlw	255
 14880  003316  1601               	andwf	i2__div_to_l_@f1,f,c
 14881  003318  0EFF               	movlw	255
 14882  00331A  1602               	andwf	i2__div_to_l_@f1+1,f,c
 14883  00331C  0EFF               	movlw	255
 14884  00331E  1603               	andwf	i2__div_to_l_@f1+2,f,c
 14885  003320  0E00               	movlw	0
 14886  003322  1604               	andwf	i2__div_to_l_@f1+3,f,c
 14887  003324  8E06               	bsf	i2__div_to_l_@f2+2,7,c
 14888  003326  0EFF               	movlw	255
 14889  003328  1604               	andwf	i2__div_to_l_@f2,f,c
 14890  00332A  0EFF               	movlw	255
 14891  00332C  1605               	andwf	i2__div_to_l_@f2+1,f,c
 14892  00332E  0EFF               	movlw	255
 14893  003330  1606               	andwf	i2__div_to_l_@f2+2,f,c
 14894  003332  0E00               	movlw	0
 14895  003334  1607               	andwf	i2__div_to_l_@f2+3,f,c
 14896  003336  0E00               	movlw	0
 14897  003338  6E07               	movwf	i2__div_to_l_@quot,c
 14898  00333A  0E00               	movlw	0
 14899  00333C  6E08               	movwf	i2__div_to_l_@quot+1,c
 14900  00333E  0E00               	movlw	0
 14901  003340  6E09               	movwf	i2__div_to_l_@quot+2,c
 14902  003342  0E00               	movlw	0
 14903  003344  6E0A               	movwf	i2__div_to_l_@quot+3,c
 14904  003346  0E7F               	movlw	127
 14905  003348  5E0C               	subwf	i2__div_to_l_@exp1,f,c
 14906  00334A  500B               	movf	i2__div_to_l_@cntr,w,c
 14907  00334C  0FA0               	addlw	160
 14908  00334E  5E0C               	subwf	i2__div_to_l_@exp1,f,c
 14909  003350  0E20               	movlw	32
 14910  003352  6E0B               	movwf	i2__div_to_l_@cntr,c
 14911  003354                     i2l5614:
 14912  003354  90D8               	bcf	status,0,c
 14913  003356  3607               	rlcf	i2__div_to_l_@quot,f,c
 14914  003358  3608               	rlcf	i2__div_to_l_@quot+1,f,c
 14915  00335A  3609               	rlcf	i2__div_to_l_@quot+2,f,c
 14916  00335C  360A               	rlcf	i2__div_to_l_@quot+3,f,c
 14917  00335E  5004               	movf	i2__div_to_l_@f2,w,c
 14918  003360  5C01               	subwf	i2__div_to_l_@f1,w,c
 14919  003362  5005               	movf	i2__div_to_l_@f2+1,w,c
 14920  003364  5802               	subwfb	i2__div_to_l_@f1+1,w,c
 14921  003366  5006               	movf	i2__div_to_l_@f2+2,w,c
 14922  003368  5803               	subwfb	i2__div_to_l_@f1+2,w,c
 14923  00336A  5007               	movf	i2__div_to_l_@f2+3,w,c
 14924  00336C  5804               	subwfb	i2__div_to_l_@f1+3,w,c
 14925  00336E  A0D8               	btfss	status,0,c
 14926  003370  D009               	goto	i2l5622
 14927  003372  5004               	movf	i2__div_to_l_@f2,w,c
 14928  003374  5E01               	subwf	i2__div_to_l_@f1,f,c
 14929  003376  5005               	movf	i2__div_to_l_@f2+1,w,c
 14930  003378  5A02               	subwfb	i2__div_to_l_@f1+1,f,c
 14931  00337A  5006               	movf	i2__div_to_l_@f2+2,w,c
 14932  00337C  5A03               	subwfb	i2__div_to_l_@f1+2,f,c
 14933  00337E  5007               	movf	i2__div_to_l_@f2+3,w,c
 14934  003380  5A04               	subwfb	i2__div_to_l_@f1+3,f,c
 14935  003382  8007               	bsf	i2__div_to_l_@quot,0,c
 14936  003384                     i2l5622:
 14937  003384  90D8               	bcf	status,0,c
 14938  003386  3601               	rlcf	i2__div_to_l_@f1,f,c
 14939  003388  3602               	rlcf	i2__div_to_l_@f1+1,f,c
 14940  00338A  3603               	rlcf	i2__div_to_l_@f1+2,f,c
 14941  00338C  3604               	rlcf	i2__div_to_l_@f1+3,f,c
 14942  00338E  2E0B               	decfsz	i2__div_to_l_@cntr,f,c
 14943  003390  D7E1               	goto	i2l5614
 14944  003392  AE0C               	btfss	i2__div_to_l_@exp1,7,c
 14945  003394  D016               	goto	i2l5638
 14946  003396  500C               	movf	i2__div_to_l_@exp1,w,c
 14947  003398  0A80               	xorlw	128
 14948  00339A  0F9F               	addlw	159
 14949  00339C  B0D8               	btfsc	status,0,c
 14950  00339E  D009               	goto	i2l5634
 14951  0033A0  0E00               	movlw	0
 14952  0033A2  6E01               	movwf	?i2__div_to_l_,c
 14953  0033A4  0E00               	movlw	0
 14954  0033A6  6E02               	movwf	?i2__div_to_l_+1,c
 14955  0033A8  0E00               	movlw	0
 14956  0033AA  6E03               	movwf	?i2__div_to_l_+2,c
 14957  0033AC  0E00               	movlw	0
 14958  0033AE  6E04               	movwf	?i2__div_to_l_+3,c
 14959  0033B0  0012               	return	
 14960  0033B2                     i2l5634:
 14961  0033B2  90D8               	bcf	status,0,c
 14962  0033B4  320A               	rrcf	i2__div_to_l_@quot+3,f,c
 14963  0033B6  3209               	rrcf	i2__div_to_l_@quot+2,f,c
 14964  0033B8  3208               	rrcf	i2__div_to_l_@quot+1,f,c
 14965  0033BA  3207               	rrcf	i2__div_to_l_@quot,f,c
 14966  0033BC  3E0C               	incfsz	i2__div_to_l_@exp1,f,c
 14967  0033BE  D7F9               	goto	i2l5634
 14968  0033C0  D015               	goto	i2l926
 14969  0033C2                     i2l5638:
 14970  0033C2  0E1F               	movlw	31
 14971  0033C4  640C               	cpfsgt	i2__div_to_l_@exp1,c
 14972  0033C6  D00F               	goto	i2l5646
 14973  0033C8  0E00               	movlw	0
 14974  0033CA  6E01               	movwf	?i2__div_to_l_,c
 14975  0033CC  0E00               	movlw	0
 14976  0033CE  6E02               	movwf	?i2__div_to_l_+1,c
 14977  0033D0  0E00               	movlw	0
 14978  0033D2  6E03               	movwf	?i2__div_to_l_+2,c
 14979  0033D4  0E00               	movlw	0
 14980  0033D6  6E04               	movwf	?i2__div_to_l_+3,c
 14981  0033D8  0012               	return	
 14982  0033DA                     i2l5644:
 14983  0033DA  90D8               	bcf	status,0,c
 14984  0033DC  3607               	rlcf	i2__div_to_l_@quot,f,c
 14985  0033DE  3608               	rlcf	i2__div_to_l_@quot+1,f,c
 14986  0033E0  3609               	rlcf	i2__div_to_l_@quot+2,f,c
 14987  0033E2  360A               	rlcf	i2__div_to_l_@quot+3,f,c
 14988  0033E4  060C               	decf	i2__div_to_l_@exp1,f,c
 14989  0033E6                     i2l5646:
 14990  0033E6  500C               	movf	i2__div_to_l_@exp1,w,c
 14991  0033E8  A4D8               	btfss	status,2,c
 14992  0033EA  D7F7               	goto	i2l5644
 14993  0033EC                     i2l926:
 14994  0033EC  C007  F001         	movff	i2__div_to_l_@quot,?i2__div_to_l_
 14995  0033F0  C008  F002         	movff	i2__div_to_l_@quot+1,?i2__div_to_l_+1
 14996  0033F4  C009  F003         	movff	i2__div_to_l_@quot+2,?i2__div_to_l_+2
 14997  0033F8  C00A  F004         	movff	i2__div_to_l_@quot+3,?i2__div_to_l_+3
 14998  0033FC  0012               	return		;funcret
 14999  0033FE                     __end_ofi2__div_to_l_:
 15000                           	opt stack 0
 15001                           pclatu	equ	0xFFB
 15002                           pclath	equ	0xFFA
 15003                           tblptru	equ	0xFF8
 15004                           tblptrh	equ	0xFF7
 15005                           tblptrl	equ	0xFF6
 15006                           tablat	equ	0xFF5
 15007                           prodh	equ	0xFF4
 15008                           prodl	equ	0xFF3
 15009                           intcon	equ	0xFF2
 15010                           intcon3	equ	0xFF0
 15011                           postinc0	equ	0xFEE
 15012                           fsr0h	equ	0xFEA
 15013                           fsr0l	equ	0xFE9
 15014                           wreg	equ	0xFE8
 15015                           postdec1	equ	0xFE5
 15016                           fsr1h	equ	0xFE2
 15017                           fsr1l	equ	0xFE1
 15018                           indf2	equ	0xFDF
 15019                           postinc2	equ	0xFDE
 15020                           postdec2	equ	0xFDD
 15021                           fsr2h	equ	0xFDA
 15022                           fsr2l	equ	0xFD9
 15023                           status	equ	0xFD8
 15024                           
 15025 ;; *************** function i2___lltoft *****************
 15026 ;; Defined at:
 15027 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 15028 ;; Parameters:    Size  Location     Type
 15029 ;;  c               4    8[COMRAM] unsigned long 
 15030 ;; Auto vars:     Size  Location     Type
 15031 ;;  __lltoft        1   16[COMRAM] unsigned char 
 15032 ;; Return value:  Size  Location     Type
 15033 ;;                  3    8[COMRAM] float 
 15034 ;; Registers used:
 15035 ;;		wreg, status,2, status,0, cstack
 15036 ;; Tracked objects:
 15037 ;;		On entry : 0/0
 15038 ;;		On exit  : 0/0
 15039 ;;		Unchanged: 0/0
 15040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15041 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15042 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15043 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15044 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15045 ;;Total ram usage:        9 bytes
 15046 ;; Hardware stack levels used:    1
 15047 ;; Hardware stack levels required when called:    1
 15048 ;; This function calls:
 15049 ;;		i2___ftpack
 15050 ;; This function is called by:
 15051 ;;		i2_printf
 15052 ;; This function uses a non-reentrant model
 15053 ;;
 15054                           
 15055                           	psect	text55
 15056  0047A2                     __ptext55:
 15057                           	opt stack 0
 15058  0047A2                     i2___lltoft:
 15059                           	opt stack 21
 15060                           
 15061                           ;incstack = 0
 15062  0047A2  0E8E               	movlw	142
 15063  0047A4  6E11               	movwf	i2___lltoft@exp,c
 15064  0047A6  D006               	goto	i2l5776
 15065  0047A8                     i2l5774:
 15066  0047A8  90D8               	bcf	status,0,c
 15067  0047AA  320C               	rrcf	i2___lltoft@c+3,f,c
 15068  0047AC  320B               	rrcf	i2___lltoft@c+2,f,c
 15069  0047AE  320A               	rrcf	i2___lltoft@c+1,f,c
 15070  0047B0  3209               	rrcf	i2___lltoft@c,f,c
 15071  0047B2  2A11               	incf	i2___lltoft@exp,f,c
 15072  0047B4                     i2l5776:
 15073  0047B4  0E00               	movlw	0
 15074  0047B6  1409               	andwf	i2___lltoft@c,w,c
 15075  0047B8  6E0D               	movwf	??i2___lltoft& (0+255),c
 15076  0047BA  0E00               	movlw	0
 15077  0047BC  140A               	andwf	i2___lltoft@c+1,w,c
 15078  0047BE  6E0E               	movwf	(??i2___lltoft+1)& (0+255),c
 15079  0047C0  0E00               	movlw	0
 15080  0047C2  140B               	andwf	i2___lltoft@c+2,w,c
 15081  0047C4  6E0F               	movwf	(??i2___lltoft+2)& (0+255),c
 15082  0047C6  0EFF               	movlw	255
 15083  0047C8  140C               	andwf	i2___lltoft@c+3,w,c
 15084  0047CA  6E10               	movwf	(??i2___lltoft+3)& (0+255),c
 15085  0047CC  500D               	movf	??i2___lltoft,w,c
 15086  0047CE  100E               	iorwf	??i2___lltoft+1,w,c
 15087  0047D0  100F               	iorwf	??i2___lltoft+2,w,c
 15088  0047D2  1010               	iorwf	??i2___lltoft+3,w,c
 15089  0047D4  A4D8               	btfss	status,2,c
 15090  0047D6  D7E8               	goto	i2l5774
 15091  0047D8  C009  F001         	movff	i2___lltoft@c,i2___ftpack@arg
 15092  0047DC  C00A  F002         	movff	i2___lltoft@c+1,i2___ftpack@arg+1
 15093  0047E0  C00B  F003         	movff	i2___lltoft@c+2,i2___ftpack@arg+2
 15094  0047E4  C011  F004         	movff	i2___lltoft@exp,i2___ftpack@exp
 15095  0047E8  0E00               	movlw	0
 15096  0047EA  6E05               	movwf	i2___ftpack@sign,c
 15097  0047EC  ECA5  F01F         	call	i2___ftpack	;wreg free
 15098  0047F0  C001  F009         	movff	?i2___ftpack,?i2___lltoft
 15099  0047F4  C002  F00A         	movff	?i2___ftpack+1,?i2___lltoft+1
 15100  0047F8  C003  F00B         	movff	?i2___ftpack+2,?i2___lltoft+2
 15101  0047FC  0012               	return	
 15102  0047FE                     __end_ofi2___lltoft:
 15103                           	opt stack 0
 15104                           pclatu	equ	0xFFB
 15105                           pclath	equ	0xFFA
 15106                           tblptru	equ	0xFF8
 15107                           tblptrh	equ	0xFF7
 15108                           tblptrl	equ	0xFF6
 15109                           tablat	equ	0xFF5
 15110                           prodh	equ	0xFF4
 15111                           prodl	equ	0xFF3
 15112                           intcon	equ	0xFF2
 15113                           intcon3	equ	0xFF0
 15114                           postinc0	equ	0xFEE
 15115                           fsr0h	equ	0xFEA
 15116                           fsr0l	equ	0xFE9
 15117                           wreg	equ	0xFE8
 15118                           postdec1	equ	0xFE5
 15119                           fsr1h	equ	0xFE2
 15120                           fsr1l	equ	0xFE1
 15121                           indf2	equ	0xFDF
 15122                           postinc2	equ	0xFDE
 15123                           postdec2	equ	0xFDD
 15124                           fsr2h	equ	0xFDA
 15125                           fsr2l	equ	0xFD9
 15126                           status	equ	0xFD8
 15127                           
 15128 ;; *************** function i2___llmod *****************
 15129 ;; Defined at:
 15130 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
 15131 ;; Parameters:    Size  Location     Type
 15132 ;;  dividend        4   13[COMRAM] unsigned long 
 15133 ;;  divisor         4   17[COMRAM] unsigned long 
 15134 ;; Auto vars:     Size  Location     Type
 15135 ;;  __llmod         1   21[COMRAM] unsigned char 
 15136 ;; Return value:  Size  Location     Type
 15137 ;;                  4   13[COMRAM] unsigned long 
 15138 ;; Registers used:
 15139 ;;		wreg, status,2, status,0
 15140 ;; Tracked objects:
 15141 ;;		On entry : 0/0
 15142 ;;		On exit  : 0/0
 15143 ;;		Unchanged: 0/0
 15144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15145 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15146 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15148 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15149 ;;Total ram usage:        9 bytes
 15150 ;; Hardware stack levels used:    1
 15151 ;; This function calls:
 15152 ;;		Nothing
 15153 ;; This function is called by:
 15154 ;;		i2_printf
 15155 ;; This function uses a non-reentrant model
 15156 ;;
 15157                           
 15158                           	psect	text56
 15159  0046D6                     __ptext56:
 15160                           	opt stack 0
 15161  0046D6                     i2___llmod:
 15162                           	opt stack 22
 15163                           
 15164                           ;incstack = 0
 15165  0046D6  5012               	movf	i2___llmod@divisor,w,c
 15166  0046D8  1013               	iorwf	i2___llmod@divisor+1,w,c
 15167  0046DA  1014               	iorwf	i2___llmod@divisor+2,w,c
 15168  0046DC  1015               	iorwf	i2___llmod@divisor+3,w,c
 15169  0046DE  B4D8               	btfsc	status,2,c
 15170  0046E0  D024               	goto	i2l1110
 15171  0046E2  0E01               	movlw	1
 15172  0046E4  6E16               	movwf	i2___llmod@counter,c
 15173  0046E6  D006               	goto	i2l5762
 15174  0046E8                     i2l5760:
 15175  0046E8  90D8               	bcf	status,0,c
 15176  0046EA  3612               	rlcf	i2___llmod@divisor,f,c
 15177  0046EC  3613               	rlcf	i2___llmod@divisor+1,f,c
 15178  0046EE  3614               	rlcf	i2___llmod@divisor+2,f,c
 15179  0046F0  3615               	rlcf	i2___llmod@divisor+3,f,c
 15180  0046F2  2A16               	incf	i2___llmod@counter,f,c
 15181  0046F4                     i2l5762:
 15182  0046F4  AE15               	btfss	i2___llmod@divisor+3,7,c
 15183  0046F6  D7F8               	goto	i2l5760
 15184  0046F8                     i2l5764:
 15185  0046F8  5012               	movf	i2___llmod@divisor,w,c
 15186  0046FA  5C0E               	subwf	i2___llmod@dividend,w,c
 15187  0046FC  5013               	movf	i2___llmod@divisor+1,w,c
 15188  0046FE  580F               	subwfb	i2___llmod@dividend+1,w,c
 15189  004700  5014               	movf	i2___llmod@divisor+2,w,c
 15190  004702  5810               	subwfb	i2___llmod@dividend+2,w,c
 15191  004704  5015               	movf	i2___llmod@divisor+3,w,c
 15192  004706  5811               	subwfb	i2___llmod@dividend+3,w,c
 15193  004708  A0D8               	btfss	status,0,c
 15194  00470A  D008               	goto	i2l5768
 15195  00470C  5012               	movf	i2___llmod@divisor,w,c
 15196  00470E  5E0E               	subwf	i2___llmod@dividend,f,c
 15197  004710  5013               	movf	i2___llmod@divisor+1,w,c
 15198  004712  5A0F               	subwfb	i2___llmod@dividend+1,f,c
 15199  004714  5014               	movf	i2___llmod@divisor+2,w,c
 15200  004716  5A10               	subwfb	i2___llmod@dividend+2,f,c
 15201  004718  5015               	movf	i2___llmod@divisor+3,w,c
 15202  00471A  5A11               	subwfb	i2___llmod@dividend+3,f,c
 15203  00471C                     i2l5768:
 15204  00471C  90D8               	bcf	status,0,c
 15205  00471E  3215               	rrcf	i2___llmod@divisor+3,f,c
 15206  004720  3214               	rrcf	i2___llmod@divisor+2,f,c
 15207  004722  3213               	rrcf	i2___llmod@divisor+1,f,c
 15208  004724  3212               	rrcf	i2___llmod@divisor,f,c
 15209  004726  2E16               	decfsz	i2___llmod@counter,f,c
 15210  004728  D7E7               	goto	i2l5764
 15211  00472A                     i2l1110:
 15212  00472A  C00E  F00E         	movff	i2___llmod@dividend,?i2___llmod
 15213  00472E  C00F  F00F         	movff	i2___llmod@dividend+1,?i2___llmod+1
 15214  004732  C010  F010         	movff	i2___llmod@dividend+2,?i2___llmod+2
 15215  004736  C011  F011         	movff	i2___llmod@dividend+3,?i2___llmod+3
 15216  00473A  0012               	return		;funcret
 15217  00473C                     __end_ofi2___llmod:
 15218                           	opt stack 0
 15219                           pclatu	equ	0xFFB
 15220                           pclath	equ	0xFFA
 15221                           tblptru	equ	0xFF8
 15222                           tblptrh	equ	0xFF7
 15223                           tblptrl	equ	0xFF6
 15224                           tablat	equ	0xFF5
 15225                           prodh	equ	0xFF4
 15226                           prodl	equ	0xFF3
 15227                           intcon	equ	0xFF2
 15228                           intcon3	equ	0xFF0
 15229                           postinc0	equ	0xFEE
 15230                           fsr0h	equ	0xFEA
 15231                           fsr0l	equ	0xFE9
 15232                           wreg	equ	0xFE8
 15233                           postdec1	equ	0xFE5
 15234                           fsr1h	equ	0xFE2
 15235                           fsr1l	equ	0xFE1
 15236                           indf2	equ	0xFDF
 15237                           postinc2	equ	0xFDE
 15238                           postdec2	equ	0xFDD
 15239                           fsr2h	equ	0xFDA
 15240                           fsr2l	equ	0xFD9
 15241                           status	equ	0xFD8
 15242                           
 15243 ;; *************** function i2___lldiv *****************
 15244 ;; Defined at:
 15245 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
 15246 ;; Parameters:    Size  Location     Type
 15247 ;;  dividend        4    0[COMRAM] unsigned long 
 15248 ;;  divisor         4    4[COMRAM] unsigned long 
 15249 ;; Auto vars:     Size  Location     Type
 15250 ;;  __lldiv         4    8[COMRAM] unsigned long 
 15251 ;;  __lldiv         1   12[COMRAM] unsigned char 
 15252 ;; Return value:  Size  Location     Type
 15253 ;;                  4    0[COMRAM] unsigned long 
 15254 ;; Registers used:
 15255 ;;		wreg, status,2, status,0
 15256 ;; Tracked objects:
 15257 ;;		On entry : 0/0
 15258 ;;		On exit  : 0/0
 15259 ;;		Unchanged: 0/0
 15260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15261 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15262 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15264 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15265 ;;Total ram usage:       13 bytes
 15266 ;; Hardware stack levels used:    1
 15267 ;; This function calls:
 15268 ;;		Nothing
 15269 ;; This function is called by:
 15270 ;;		i2_printf
 15271 ;; This function uses a non-reentrant model
 15272 ;;
 15273                           
 15274                           	psect	text57
 15275  00440E                     __ptext57:
 15276                           	opt stack 0
 15277  00440E                     i2___lldiv:
 15278                           	opt stack 22
 15279                           
 15280                           ;incstack = 0
 15281  00440E  0E00               	movlw	0
 15282  004410  6E09               	movwf	i2___lldiv@quotient,c
 15283  004412  0E00               	movlw	0
 15284  004414  6E0A               	movwf	i2___lldiv@quotient+1,c
 15285  004416  0E00               	movlw	0
 15286  004418  6E0B               	movwf	i2___lldiv@quotient+2,c
 15287  00441A  0E00               	movlw	0
 15288  00441C  6E0C               	movwf	i2___lldiv@quotient+3,c
 15289  00441E  5005               	movf	i2___lldiv@divisor,w,c
 15290  004420  1006               	iorwf	i2___lldiv@divisor+1,w,c
 15291  004422  1007               	iorwf	i2___lldiv@divisor+2,w,c
 15292  004424  1008               	iorwf	i2___lldiv@divisor+3,w,c
 15293  004426  B4D8               	btfsc	status,2,c
 15294  004428  D02A               	goto	i2l1100
 15295  00442A  0E01               	movlw	1
 15296  00442C  6E0D               	movwf	i2___lldiv@counter,c
 15297  00442E  D006               	goto	i2l5742
 15298  004430                     i2l5740:
 15299  004430  90D8               	bcf	status,0,c
 15300  004432  3605               	rlcf	i2___lldiv@divisor,f,c
 15301  004434  3606               	rlcf	i2___lldiv@divisor+1,f,c
 15302  004436  3607               	rlcf	i2___lldiv@divisor+2,f,c
 15303  004438  3608               	rlcf	i2___lldiv@divisor+3,f,c
 15304  00443A  2A0D               	incf	i2___lldiv@counter,f,c
 15305  00443C                     i2l5742:
 15306  00443C  AE08               	btfss	i2___lldiv@divisor+3,7,c
 15307  00443E  D7F8               	goto	i2l5740
 15308  004440                     i2l5744:
 15309  004440  90D8               	bcf	status,0,c
 15310  004442  3609               	rlcf	i2___lldiv@quotient,f,c
 15311  004444  360A               	rlcf	i2___lldiv@quotient+1,f,c
 15312  004446  360B               	rlcf	i2___lldiv@quotient+2,f,c
 15313  004448  360C               	rlcf	i2___lldiv@quotient+3,f,c
 15314  00444A  5005               	movf	i2___lldiv@divisor,w,c
 15315  00444C  5C01               	subwf	i2___lldiv@dividend,w,c
 15316  00444E  5006               	movf	i2___lldiv@divisor+1,w,c
 15317  004450  5802               	subwfb	i2___lldiv@dividend+1,w,c
 15318  004452  5007               	movf	i2___lldiv@divisor+2,w,c
 15319  004454  5803               	subwfb	i2___lldiv@dividend+2,w,c
 15320  004456  5008               	movf	i2___lldiv@divisor+3,w,c
 15321  004458  5804               	subwfb	i2___lldiv@dividend+3,w,c
 15322  00445A  A0D8               	btfss	status,0,c
 15323  00445C  D009               	goto	i2l5752
 15324  00445E  5005               	movf	i2___lldiv@divisor,w,c
 15325  004460  5E01               	subwf	i2___lldiv@dividend,f,c
 15326  004462  5006               	movf	i2___lldiv@divisor+1,w,c
 15327  004464  5A02               	subwfb	i2___lldiv@dividend+1,f,c
 15328  004466  5007               	movf	i2___lldiv@divisor+2,w,c
 15329  004468  5A03               	subwfb	i2___lldiv@dividend+2,f,c
 15330  00446A  5008               	movf	i2___lldiv@divisor+3,w,c
 15331  00446C  5A04               	subwfb	i2___lldiv@dividend+3,f,c
 15332  00446E  8009               	bsf	i2___lldiv@quotient,0,c
 15333  004470                     i2l5752:
 15334  004470  90D8               	bcf	status,0,c
 15335  004472  3208               	rrcf	i2___lldiv@divisor+3,f,c
 15336  004474  3207               	rrcf	i2___lldiv@divisor+2,f,c
 15337  004476  3206               	rrcf	i2___lldiv@divisor+1,f,c
 15338  004478  3205               	rrcf	i2___lldiv@divisor,f,c
 15339  00447A  2E0D               	decfsz	i2___lldiv@counter,f,c
 15340  00447C  D7E1               	goto	i2l5744
 15341  00447E                     i2l1100:
 15342  00447E  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
 15343  004482  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
 15344  004486  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
 15345  00448A  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
 15346  00448E  0012               	return		;funcret
 15347  004490                     __end_ofi2___lldiv:
 15348                           	opt stack 0
 15349                           pclatu	equ	0xFFB
 15350                           pclath	equ	0xFFA
 15351                           tblptru	equ	0xFF8
 15352                           tblptrh	equ	0xFF7
 15353                           tblptrl	equ	0xFF6
 15354                           tablat	equ	0xFF5
 15355                           prodh	equ	0xFF4
 15356                           prodl	equ	0xFF3
 15357                           intcon	equ	0xFF2
 15358                           intcon3	equ	0xFF0
 15359                           postinc0	equ	0xFEE
 15360                           fsr0h	equ	0xFEA
 15361                           fsr0l	equ	0xFE9
 15362                           wreg	equ	0xFE8
 15363                           postdec1	equ	0xFE5
 15364                           fsr1h	equ	0xFE2
 15365                           fsr1l	equ	0xFE1
 15366                           indf2	equ	0xFDF
 15367                           postinc2	equ	0xFDE
 15368                           postdec2	equ	0xFDD
 15369                           fsr2h	equ	0xFDA
 15370                           fsr2l	equ	0xFD9
 15371                           status	equ	0xFD8
 15372                           
 15373 ;; *************** function i2___fttol *****************
 15374 ;; Defined at:
 15375 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 15376 ;; Parameters:    Size  Location     Type
 15377 ;;  f1              3   64[COMRAM] float 
 15378 ;; Auto vars:     Size  Location     Type
 15379 ;;  __fttol         4   74[COMRAM] unsigned long 
 15380 ;;  __fttol         1   78[COMRAM] unsigned char 
 15381 ;;  __fttol         1   73[COMRAM] unsigned char 
 15382 ;; Return value:  Size  Location     Type
 15383 ;;                  4   64[COMRAM] long 
 15384 ;; Registers used:
 15385 ;;		wreg, status,2, status,0
 15386 ;; Tracked objects:
 15387 ;;		On entry : 0/0
 15388 ;;		On exit  : 0/0
 15389 ;;		Unchanged: 0/0
 15390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15391 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15392 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15393 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15394 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15395 ;;Total ram usage:       15 bytes
 15396 ;; Hardware stack levels used:    1
 15397 ;; This function calls:
 15398 ;;		Nothing
 15399 ;; This function is called by:
 15400 ;;		i2_angleToPulse
 15401 ;;		i2_printf
 15402 ;; This function uses a non-reentrant model
 15403 ;;
 15404                           
 15405                           	psect	text58
 15406  003808                     __ptext58:
 15407                           	opt stack 0
 15408  003808                     i2___fttol:
 15409                           	opt stack 21
 15410                           
 15411                           ;incstack = 0
 15412  003808  C043  F045         	movff	i2___fttol@f1+2,??i2___fttol
 15413  00380C  6A46               	clrf	(??i2___fttol+1)& (0+255),c
 15414  00380E  6A47               	clrf	(??i2___fttol+2)& (0+255),c
 15415  003810  3442               	rlcf	i2___fttol@f1+1,w,c
 15416  003812  3645               	rlcf	??i2___fttol& (0+255),f,c
 15417  003814  E301               	bnc	u503_41
 15418  003816  8046               	bsf	(??i2___fttol+1)& (0+255),0,c
 15419  003818                     u503_41:
 15420  003818  5045               	movf	??i2___fttol,w,c
 15421  00381A  6E4F               	movwf	i2___fttol@exp1,c
 15422  00381C  504F               	movf	i2___fttol@exp1,w,c
 15423  00381E  A4D8               	btfss	status,2,c
 15424  003820  D009               	goto	i2l5060
 15425  003822  0E00               	movlw	0
 15426  003824  6E41               	movwf	?i2___fttol,c
 15427  003826  0E00               	movlw	0
 15428  003828  6E42               	movwf	?i2___fttol+1,c
 15429  00382A  0E00               	movlw	0
 15430  00382C  6E43               	movwf	?i2___fttol+2,c
 15431  00382E  0E00               	movlw	0
 15432  003830  6E44               	movwf	?i2___fttol+3,c
 15433  003832  0012               	return	
 15434  003834                     i2l5060:
 15435  003834  0E17               	movlw	23
 15436  003836  6E45               	movwf	??i2___fttol& (0+255),c
 15437  003838  C041  F046         	movff	i2___fttol@f1,??i2___fttol+1
 15438  00383C  C042  F047         	movff	i2___fttol@f1+1,??i2___fttol+2
 15439  003840  C043  F048         	movff	i2___fttol@f1+2,??i2___fttol+3
 15440  003844  2845               	incf	??i2___fttol,w,c
 15441  003846  6E49               	movwf	(??i2___fttol+4)& (0+255),c
 15442  003848  D004               	goto	i2u505_40
 15443  00384A                     i2u505_45:
 15444  00384A  90D8               	bcf	status,0,c
 15445  00384C  3248               	rrcf	??i2___fttol+3,f,c
 15446  00384E  3247               	rrcf	??i2___fttol+2,f,c
 15447  003850  3246               	rrcf	??i2___fttol+1,f,c
 15448  003852                     i2u505_40:
 15449  003852  2E49               	decfsz	(??i2___fttol+4)& (0+255),f,c
 15450  003854  D7FA               	goto	i2u505_45
 15451  003856  5046               	movf	??i2___fttol+1,w,c
 15452  003858  6E4A               	movwf	i2___fttol@sign1,c
 15453  00385A  8E42               	bsf	i2___fttol@f1+1,7,c
 15454  00385C  0EFF               	movlw	255
 15455  00385E  1641               	andwf	i2___fttol@f1,f,c
 15456  003860  0EFF               	movlw	255
 15457  003862  1642               	andwf	i2___fttol@f1+1,f,c
 15458  003864  0E00               	movlw	0
 15459  003866  1643               	andwf	i2___fttol@f1+2,f,c
 15460  003868  5041               	movf	i2___fttol@f1,w,c
 15461  00386A  6E4B               	movwf	i2___fttol@lval,c
 15462  00386C  5042               	movf	i2___fttol@f1+1,w,c
 15463  00386E  6E4C               	movwf	i2___fttol@lval+1,c
 15464  003870  5043               	movf	i2___fttol@f1+2,w,c
 15465  003872  6E4D               	movwf	i2___fttol@lval+2,c
 15466  003874  6A4E               	clrf	i2___fttol@lval+3,c
 15467  003876  0E8E               	movlw	142
 15468  003878  5E4F               	subwf	i2___fttol@exp1,f,c
 15469  00387A  AE4F               	btfss	i2___fttol@exp1,7,c
 15470  00387C  D016               	goto	i2l5082
 15471  00387E  504F               	movf	i2___fttol@exp1,w,c
 15472  003880  0A80               	xorlw	128
 15473  003882  0F8F               	addlw	143
 15474  003884  B0D8               	btfsc	status,0,c
 15475  003886  D009               	goto	i2l5078
 15476  003888  0E00               	movlw	0
 15477  00388A  6E41               	movwf	?i2___fttol,c
 15478  00388C  0E00               	movlw	0
 15479  00388E  6E42               	movwf	?i2___fttol+1,c
 15480  003890  0E00               	movlw	0
 15481  003892  6E43               	movwf	?i2___fttol+2,c
 15482  003894  0E00               	movlw	0
 15483  003896  6E44               	movwf	?i2___fttol+3,c
 15484  003898  0012               	return	
 15485  00389A                     i2l5078:
 15486  00389A  90D8               	bcf	status,0,c
 15487  00389C  324E               	rrcf	i2___fttol@lval+3,f,c
 15488  00389E  324D               	rrcf	i2___fttol@lval+2,f,c
 15489  0038A0  324C               	rrcf	i2___fttol@lval+1,f,c
 15490  0038A2  324B               	rrcf	i2___fttol@lval,f,c
 15491  0038A4  3E4F               	incfsz	i2___fttol@exp1,f,c
 15492  0038A6  D7F9               	goto	i2l5078
 15493  0038A8  D015               	goto	i2l5092
 15494  0038AA                     i2l5082:
 15495  0038AA  0E17               	movlw	23
 15496  0038AC  644F               	cpfsgt	i2___fttol@exp1,c
 15497  0038AE  D00F               	goto	i2l5090
 15498  0038B0  0E00               	movlw	0
 15499  0038B2  6E41               	movwf	?i2___fttol,c
 15500  0038B4  0E00               	movlw	0
 15501  0038B6  6E42               	movwf	?i2___fttol+1,c
 15502  0038B8  0E00               	movlw	0
 15503  0038BA  6E43               	movwf	?i2___fttol+2,c
 15504  0038BC  0E00               	movlw	0
 15505  0038BE  6E44               	movwf	?i2___fttol+3,c
 15506  0038C0  0012               	return	
 15507  0038C2                     i2l5088:
 15508  0038C2  90D8               	bcf	status,0,c
 15509  0038C4  364B               	rlcf	i2___fttol@lval,f,c
 15510  0038C6  364C               	rlcf	i2___fttol@lval+1,f,c
 15511  0038C8  364D               	rlcf	i2___fttol@lval+2,f,c
 15512  0038CA  364E               	rlcf	i2___fttol@lval+3,f,c
 15513  0038CC  064F               	decf	i2___fttol@exp1,f,c
 15514  0038CE                     i2l5090:
 15515  0038CE  504F               	movf	i2___fttol@exp1,w,c
 15516  0038D0  A4D8               	btfss	status,2,c
 15517  0038D2  D7F7               	goto	i2l5088
 15518  0038D4                     i2l5092:
 15519  0038D4  504A               	movf	i2___fttol@sign1,w,c
 15520  0038D6  B4D8               	btfsc	status,2,c
 15521  0038D8  D008               	goto	i2l5096
 15522  0038DA  1E4E               	comf	i2___fttol@lval+3,f,c
 15523  0038DC  1E4D               	comf	i2___fttol@lval+2,f,c
 15524  0038DE  1E4C               	comf	i2___fttol@lval+1,f,c
 15525  0038E0  6C4B               	negf	i2___fttol@lval,c
 15526  0038E2  0E00               	movlw	0
 15527  0038E4  224C               	addwfc	i2___fttol@lval+1,f,c
 15528  0038E6  224D               	addwfc	i2___fttol@lval+2,f,c
 15529  0038E8  224E               	addwfc	i2___fttol@lval+3,f,c
 15530  0038EA                     i2l5096:
 15531  0038EA  C04B  F041         	movff	i2___fttol@lval,?i2___fttol
 15532  0038EE  C04C  F042         	movff	i2___fttol@lval+1,?i2___fttol+1
 15533  0038F2  C04D  F043         	movff	i2___fttol@lval+2,?i2___fttol+2
 15534  0038F6  C04E  F044         	movff	i2___fttol@lval+3,?i2___fttol+3
 15535  0038FA  0012               	return	
 15536  0038FC                     __end_ofi2___fttol:
 15537                           	opt stack 0
 15538                           pclatu	equ	0xFFB
 15539                           pclath	equ	0xFFA
 15540                           tblptru	equ	0xFF8
 15541                           tblptrh	equ	0xFF7
 15542                           tblptrl	equ	0xFF6
 15543                           tablat	equ	0xFF5
 15544                           prodh	equ	0xFF4
 15545                           prodl	equ	0xFF3
 15546                           intcon	equ	0xFF2
 15547                           intcon3	equ	0xFF0
 15548                           postinc0	equ	0xFEE
 15549                           fsr0h	equ	0xFEA
 15550                           fsr0l	equ	0xFE9
 15551                           wreg	equ	0xFE8
 15552                           postdec1	equ	0xFE5
 15553                           fsr1h	equ	0xFE2
 15554                           fsr1l	equ	0xFE1
 15555                           indf2	equ	0xFDF
 15556                           postinc2	equ	0xFDE
 15557                           postdec2	equ	0xFDD
 15558                           fsr2h	equ	0xFDA
 15559                           fsr2l	equ	0xFD9
 15560                           status	equ	0xFD8
 15561                           
 15562 ;; *************** function i2___ftsub *****************
 15563 ;; Defined at:
 15564 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 15565 ;; Parameters:    Size  Location     Type
 15566 ;;  f1              3   64[COMRAM] float 
 15567 ;;  f2              3   67[COMRAM] float 
 15568 ;; Auto vars:     Size  Location     Type
 15569 ;;		None
 15570 ;; Return value:  Size  Location     Type
 15571 ;;                  3   64[COMRAM] float 
 15572 ;; Registers used:
 15573 ;;		wreg, status,2, status,0, cstack
 15574 ;; Tracked objects:
 15575 ;;		On entry : 0/0
 15576 ;;		On exit  : 0/0
 15577 ;;		Unchanged: 0/0
 15578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15579 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15582 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15583 ;;Total ram usage:        6 bytes
 15584 ;; Hardware stack levels used:    1
 15585 ;; Hardware stack levels required when called:    2
 15586 ;; This function calls:
 15587 ;;		i2___ftadd
 15588 ;; This function is called by:
 15589 ;;		i2_printf
 15590 ;; This function uses a non-reentrant model
 15591 ;;
 15592                           
 15593                           	psect	text59
 15594  004A00                     __ptext59:
 15595                           	opt stack 0
 15596  004A00                     i2___ftsub:
 15597                           	opt stack 20
 15598                           
 15599                           ;incstack = 0
 15600  004A00  5044               	movf	i2___ftsub@f2,w,c
 15601  004A02  1045               	iorwf	i2___ftsub@f2+1,w,c
 15602  004A04  1046               	iorwf	i2___ftsub@f2+2,w,c
 15603  004A06  B4D8               	btfsc	status,2,c
 15604  004A08  D006               	goto	i2l5730
 15605  004A0A  0E00               	movlw	0
 15606  004A0C  1A44               	xorwf	i2___ftsub@f2,f,c
 15607  004A0E  0E00               	movlw	0
 15608  004A10  1A45               	xorwf	i2___ftsub@f2+1,f,c
 15609  004A12  0E80               	movlw	128
 15610  004A14  1A46               	xorwf	i2___ftsub@f2+2,f,c
 15611  004A16                     i2l5730:
 15612  004A16  C041  F035         	movff	i2___ftsub@f1,i2___ftadd@f1
 15613  004A1A  C042  F036         	movff	i2___ftsub@f1+1,i2___ftadd@f1+1
 15614  004A1E  C043  F037         	movff	i2___ftsub@f1+2,i2___ftadd@f1+2
 15615  004A22  C044  F038         	movff	i2___ftsub@f2,i2___ftadd@f2
 15616  004A26  C045  F039         	movff	i2___ftsub@f2+1,i2___ftadd@f2+1
 15617  004A2A  C046  F03A         	movff	i2___ftsub@f2+2,i2___ftadd@f2+2
 15618  004A2E  EC87  F012         	call	i2___ftadd	;wreg free
 15619  004A32  C035  F041         	movff	?i2___ftadd,?i2___ftsub
 15620  004A36  C036  F042         	movff	?i2___ftadd+1,?i2___ftsub+1
 15621  004A3A  C037  F043         	movff	?i2___ftadd+2,?i2___ftsub+2
 15622  004A3E  0012               	return	
 15623  004A40                     __end_ofi2___ftsub:
 15624                           	opt stack 0
 15625                           pclatu	equ	0xFFB
 15626                           pclath	equ	0xFFA
 15627                           tblptru	equ	0xFF8
 15628                           tblptrh	equ	0xFF7
 15629                           tblptrl	equ	0xFF6
 15630                           tablat	equ	0xFF5
 15631                           prodh	equ	0xFF4
 15632                           prodl	equ	0xFF3
 15633                           intcon	equ	0xFF2
 15634                           intcon3	equ	0xFF0
 15635                           postinc0	equ	0xFEE
 15636                           fsr0h	equ	0xFEA
 15637                           fsr0l	equ	0xFE9
 15638                           wreg	equ	0xFE8
 15639                           postdec1	equ	0xFE5
 15640                           fsr1h	equ	0xFE2
 15641                           fsr1l	equ	0xFE1
 15642                           indf2	equ	0xFDF
 15643                           postinc2	equ	0xFDE
 15644                           postdec2	equ	0xFDD
 15645                           fsr2h	equ	0xFDA
 15646                           fsr2l	equ	0xFD9
 15647                           status	equ	0xFD8
 15648                           
 15649 ;; *************** function i2___ftadd *****************
 15650 ;; Defined at:
 15651 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 15652 ;; Parameters:    Size  Location     Type
 15653 ;;  f1              3   52[COMRAM] float 
 15654 ;;  f2              3   55[COMRAM] float 
 15655 ;; Auto vars:     Size  Location     Type
 15656 ;;  __ftadd         1   63[COMRAM] unsigned char 
 15657 ;;  __ftadd         1   62[COMRAM] unsigned char 
 15658 ;;  __ftadd         1   61[COMRAM] unsigned char 
 15659 ;; Return value:  Size  Location     Type
 15660 ;;                  3   52[COMRAM] float 
 15661 ;; Registers used:
 15662 ;;		wreg, status,2, status,0, cstack
 15663 ;; Tracked objects:
 15664 ;;		On entry : 0/0
 15665 ;;		On exit  : 0/0
 15666 ;;		Unchanged: 0/0
 15667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15668 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15669 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15670 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15671 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15672 ;;Total ram usage:       12 bytes
 15673 ;; Hardware stack levels used:    1
 15674 ;; Hardware stack levels required when called:    1
 15675 ;; This function calls:
 15676 ;;		i2___ftpack
 15677 ;; This function is called by:
 15678 ;;		i2_angleToPulse
 15679 ;;		i2_printf
 15680 ;;		i2___ftsub
 15681 ;; This function uses a non-reentrant model
 15682 ;;
 15683                           
 15684                           	psect	text60
 15685  00250E                     __ptext60:
 15686                           	opt stack 0
 15687  00250E                     i2___ftadd:
 15688                           	opt stack 20
 15689                           
 15690                           ;incstack = 0
 15691  00250E  C037  F03B         	movff	i2___ftadd@f1+2,??i2___ftadd
 15692  002512  6A3C               	clrf	(??i2___ftadd+1)& (0+255),c
 15693  002514  6A3D               	clrf	(??i2___ftadd+2)& (0+255),c
 15694  002516  3436               	rlcf	i2___ftadd@f1+1,w,c
 15695  002518  363B               	rlcf	??i2___ftadd& (0+255),f,c
 15696  00251A  E301               	bnc	u471_41
 15697  00251C  803C               	bsf	(??i2___ftadd+1)& (0+255),0,c
 15698  00251E                     u471_41:
 15699  00251E  503B               	movf	??i2___ftadd,w,c
 15700  002520  6E40               	movwf	i2___ftadd@exp1,c
 15701  002522  C03A  F03B         	movff	i2___ftadd@f2+2,??i2___ftadd
 15702  002526  6A3C               	clrf	(??i2___ftadd+1)& (0+255),c
 15703  002528  6A3D               	clrf	(??i2___ftadd+2)& (0+255),c
 15704  00252A  3439               	rlcf	i2___ftadd@f2+1,w,c
 15705  00252C  363B               	rlcf	??i2___ftadd& (0+255),f,c
 15706  00252E  E301               	bnc	u472_41
 15707  002530  803C               	bsf	(??i2___ftadd+1)& (0+255),0,c
 15708  002532                     u472_41:
 15709  002532  503B               	movf	??i2___ftadd,w,c
 15710  002534  6E3F               	movwf	i2___ftadd@exp2,c
 15711  002536  5040               	movf	i2___ftadd@exp1,w,c
 15712  002538  B4D8               	btfsc	status,2,c
 15713  00253A  D00B               	goto	i2l981
 15714  00253C  503F               	movf	i2___ftadd@exp2,w,c
 15715  00253E  5C40               	subwf	i2___ftadd@exp1,w,c
 15716  002540  B0D8               	btfsc	status,0,c
 15717  002542  D00E               	goto	i2l4898
 15718  002544  5040               	movf	i2___ftadd@exp1,w,c
 15719  002546  0800               	sublw	0
 15720  002548  243F               	addwf	i2___ftadd@exp2,w,c
 15721  00254A  6E3B               	movwf	??i2___ftadd& (0+255),c
 15722  00254C  0E18               	movlw	24
 15723  00254E  643B               	cpfsgt	??i2___ftadd,c
 15724  002550  D007               	goto	i2l4898
 15725  002552                     i2l981:
 15726  002552  C038  F035         	movff	i2___ftadd@f2,?i2___ftadd
 15727  002556  C039  F036         	movff	i2___ftadd@f2+1,?i2___ftadd+1
 15728  00255A  C03A  F037         	movff	i2___ftadd@f2+2,?i2___ftadd+2
 15729  00255E  0012               	return	
 15730  002560                     i2l4898:
 15731  002560  503F               	movf	i2___ftadd@exp2,w,c
 15732  002562  B4D8               	btfsc	status,2,c
 15733  002564  D00B               	goto	i2l985
 15734  002566  5040               	movf	i2___ftadd@exp1,w,c
 15735  002568  5C3F               	subwf	i2___ftadd@exp2,w,c
 15736  00256A  B0D8               	btfsc	status,0,c
 15737  00256C  D00E               	goto	i2l4904
 15738  00256E  503F               	movf	i2___ftadd@exp2,w,c
 15739  002570  0800               	sublw	0
 15740  002572  2440               	addwf	i2___ftadd@exp1,w,c
 15741  002574  6E3B               	movwf	??i2___ftadd& (0+255),c
 15742  002576  0E18               	movlw	24
 15743  002578  643B               	cpfsgt	??i2___ftadd,c
 15744  00257A  D007               	goto	i2l4904
 15745  00257C                     i2l985:
 15746  00257C  C035  F035         	movff	i2___ftadd@f1,?i2___ftadd
 15747  002580  C036  F036         	movff	i2___ftadd@f1+1,?i2___ftadd+1
 15748  002584  C037  F037         	movff	i2___ftadd@f1+2,?i2___ftadd+2
 15749  002588  0012               	return	
 15750  00258A                     i2l4904:
 15751  00258A  0E06               	movlw	6
 15752  00258C  6E3E               	movwf	i2___ftadd@sign,c
 15753  00258E  BE37               	btfsc	i2___ftadd@f1+2,7,c
 15754  002590  8E3E               	bsf	i2___ftadd@sign,7,c
 15755  002592  BE3A               	btfsc	i2___ftadd@f2+2,7,c
 15756  002594  8C3E               	bsf	i2___ftadd@sign,6,c
 15757  002596  8E36               	bsf	i2___ftadd@f1+1,7,c
 15758  002598  0EFF               	movlw	255
 15759  00259A  1635               	andwf	i2___ftadd@f1,f,c
 15760  00259C  0EFF               	movlw	255
 15761  00259E  1636               	andwf	i2___ftadd@f1+1,f,c
 15762  0025A0  0E00               	movlw	0
 15763  0025A2  1637               	andwf	i2___ftadd@f1+2,f,c
 15764  0025A4  8E39               	bsf	i2___ftadd@f2+1,7,c
 15765  0025A6  0EFF               	movlw	255
 15766  0025A8  1638               	andwf	i2___ftadd@f2,f,c
 15767  0025AA  0EFF               	movlw	255
 15768  0025AC  1639               	andwf	i2___ftadd@f2+1,f,c
 15769  0025AE  0E00               	movlw	0
 15770  0025B0  163A               	andwf	i2___ftadd@f2+2,f,c
 15771  0025B2  503F               	movf	i2___ftadd@exp2,w,c
 15772  0025B4  5C40               	subwf	i2___ftadd@exp1,w,c
 15773  0025B6  B0D8               	btfsc	status,0,c
 15774  0025B8  D01B               	goto	i2l4930
 15775  0025BA                     i2l4920:
 15776  0025BA  90D8               	bcf	status,0,c
 15777  0025BC  3638               	rlcf	i2___ftadd@f2,f,c
 15778  0025BE  3639               	rlcf	i2___ftadd@f2+1,f,c
 15779  0025C0  363A               	rlcf	i2___ftadd@f2+2,f,c
 15780  0025C2  063F               	decf	i2___ftadd@exp2,f,c
 15781  0025C4  5040               	movf	i2___ftadd@exp1,w,c
 15782  0025C6  183F               	xorwf	i2___ftadd@exp2,w,c
 15783  0025C8  B4D8               	btfsc	status,2,c
 15784  0025CA  D00D               	goto	i2l4928
 15785  0025CC  063E               	decf	i2___ftadd@sign,f,c
 15786  0025CE  C03E  F03B         	movff	i2___ftadd@sign,??i2___ftadd
 15787  0025D2  0E07               	movlw	7
 15788  0025D4  163B               	andwf	??i2___ftadd,f,c
 15789  0025D6  B4D8               	btfsc	status,2,c
 15790  0025D8  D006               	goto	i2l4928
 15791  0025DA  D7EF               	goto	i2l4920
 15792  0025DC                     i2l4926:
 15793  0025DC  90D8               	bcf	status,0,c
 15794  0025DE  3237               	rrcf	i2___ftadd@f1+2,f,c
 15795  0025E0  3236               	rrcf	i2___ftadd@f1+1,f,c
 15796  0025E2  3235               	rrcf	i2___ftadd@f1,f,c
 15797  0025E4  2A40               	incf	i2___ftadd@exp1,f,c
 15798  0025E6                     i2l4928:
 15799  0025E6  503F               	movf	i2___ftadd@exp2,w,c
 15800  0025E8  1840               	xorwf	i2___ftadd@exp1,w,c
 15801  0025EA  B4D8               	btfsc	status,2,c
 15802  0025EC  D01F               	goto	i2l996
 15803  0025EE  D7F6               	goto	i2l4926
 15804  0025F0                     i2l4930:
 15805  0025F0  5040               	movf	i2___ftadd@exp1,w,c
 15806  0025F2  5C3F               	subwf	i2___ftadd@exp2,w,c
 15807  0025F4  B0D8               	btfsc	status,0,c
 15808  0025F6  D01A               	goto	i2l996
 15809  0025F8                     i2l4932:
 15810  0025F8  90D8               	bcf	status,0,c
 15811  0025FA  3635               	rlcf	i2___ftadd@f1,f,c
 15812  0025FC  3636               	rlcf	i2___ftadd@f1+1,f,c
 15813  0025FE  3637               	rlcf	i2___ftadd@f1+2,f,c
 15814  002600  0640               	decf	i2___ftadd@exp1,f,c
 15815  002602  5040               	movf	i2___ftadd@exp1,w,c
 15816  002604  183F               	xorwf	i2___ftadd@exp2,w,c
 15817  002606  B4D8               	btfsc	status,2,c
 15818  002608  D00D               	goto	i2l4940
 15819  00260A  063E               	decf	i2___ftadd@sign,f,c
 15820  00260C  C03E  F03B         	movff	i2___ftadd@sign,??i2___ftadd
 15821  002610  0E07               	movlw	7
 15822  002612  163B               	andwf	??i2___ftadd,f,c
 15823  002614  B4D8               	btfsc	status,2,c
 15824  002616  D006               	goto	i2l4940
 15825  002618  D7EF               	goto	i2l4932
 15826  00261A                     i2l4938:
 15827  00261A  90D8               	bcf	status,0,c
 15828  00261C  323A               	rrcf	i2___ftadd@f2+2,f,c
 15829  00261E  3239               	rrcf	i2___ftadd@f2+1,f,c
 15830  002620  3238               	rrcf	i2___ftadd@f2,f,c
 15831  002622  2A3F               	incf	i2___ftadd@exp2,f,c
 15832  002624                     i2l4940:
 15833  002624  503F               	movf	i2___ftadd@exp2,w,c
 15834  002626  1840               	xorwf	i2___ftadd@exp1,w,c
 15835  002628  A4D8               	btfss	status,2,c
 15836  00262A  D7F7               	goto	i2l4938
 15837  00262C                     i2l996:
 15838  00262C  AE3E               	btfss	i2___ftadd@sign,7,c
 15839  00262E  D00C               	goto	i2l1005
 15840  002630  0EFF               	movlw	255
 15841  002632  1A35               	xorwf	i2___ftadd@f1,f,c
 15842  002634  0EFF               	movlw	255
 15843  002636  1A36               	xorwf	i2___ftadd@f1+1,f,c
 15844  002638  0EFF               	movlw	255
 15845  00263A  1A37               	xorwf	i2___ftadd@f1+2,f,c
 15846  00263C  0E01               	movlw	1
 15847  00263E  2635               	addwf	i2___ftadd@f1,f,c
 15848  002640  0E00               	movlw	0
 15849  002642  2236               	addwfc	i2___ftadd@f1+1,f,c
 15850  002644  0E00               	movlw	0
 15851  002646  2237               	addwfc	i2___ftadd@f1+2,f,c
 15852  002648                     i2l1005:
 15853  002648  AC3E               	btfss	i2___ftadd@sign,6,c
 15854  00264A  D00C               	goto	i2l4946
 15855  00264C  0EFF               	movlw	255
 15856  00264E  1A38               	xorwf	i2___ftadd@f2,f,c
 15857  002650  0EFF               	movlw	255
 15858  002652  1A39               	xorwf	i2___ftadd@f2+1,f,c
 15859  002654  0EFF               	movlw	255
 15860  002656  1A3A               	xorwf	i2___ftadd@f2+2,f,c
 15861  002658  0E01               	movlw	1
 15862  00265A  2638               	addwf	i2___ftadd@f2,f,c
 15863  00265C  0E00               	movlw	0
 15864  00265E  2239               	addwfc	i2___ftadd@f2+1,f,c
 15865  002660  0E00               	movlw	0
 15866  002662  223A               	addwfc	i2___ftadd@f2+2,f,c
 15867  002664                     i2l4946:
 15868  002664  0E00               	movlw	0
 15869  002666  6E3E               	movwf	i2___ftadd@sign,c
 15870  002668  5035               	movf	i2___ftadd@f1,w,c
 15871  00266A  2638               	addwf	i2___ftadd@f2,f,c
 15872  00266C  5036               	movf	i2___ftadd@f1+1,w,c
 15873  00266E  2239               	addwfc	i2___ftadd@f2+1,f,c
 15874  002670  5037               	movf	i2___ftadd@f1+2,w,c
 15875  002672  223A               	addwfc	i2___ftadd@f2+2,f,c
 15876  002674  AE3A               	btfss	i2___ftadd@f2+2,7,c
 15877  002676  D00E               	goto	i2l4956
 15878  002678  0EFF               	movlw	255
 15879  00267A  1A38               	xorwf	i2___ftadd@f2,f,c
 15880  00267C  0EFF               	movlw	255
 15881  00267E  1A39               	xorwf	i2___ftadd@f2+1,f,c
 15882  002680  0EFF               	movlw	255
 15883  002682  1A3A               	xorwf	i2___ftadd@f2+2,f,c
 15884  002684  0E01               	movlw	1
 15885  002686  2638               	addwf	i2___ftadd@f2,f,c
 15886  002688  0E00               	movlw	0
 15887  00268A  2239               	addwfc	i2___ftadd@f2+1,f,c
 15888  00268C  0E00               	movlw	0
 15889  00268E  223A               	addwfc	i2___ftadd@f2+2,f,c
 15890  002690  0E01               	movlw	1
 15891  002692  6E3E               	movwf	i2___ftadd@sign,c
 15892  002694                     i2l4956:
 15893  002694  C038  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
 15894  002698  C039  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
 15895  00269C  C03A  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
 15896  0026A0  C040  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
 15897  0026A4  C03E  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
 15898  0026A8  ECA5  F01F         	call	i2___ftpack	;wreg free
 15899  0026AC  C001  F035         	movff	?i2___ftpack,?i2___ftadd
 15900  0026B0  C002  F036         	movff	?i2___ftpack+1,?i2___ftadd+1
 15901  0026B4  C003  F037         	movff	?i2___ftpack+2,?i2___ftadd+2
 15902  0026B8  0012               	return	
 15903  0026BA                     __end_ofi2___ftadd:
 15904                           	opt stack 0
 15905                           pclatu	equ	0xFFB
 15906                           pclath	equ	0xFFA
 15907                           tblptru	equ	0xFF8
 15908                           tblptrh	equ	0xFF7
 15909                           tblptrl	equ	0xFF6
 15910                           tablat	equ	0xFF5
 15911                           prodh	equ	0xFF4
 15912                           prodl	equ	0xFF3
 15913                           intcon	equ	0xFF2
 15914                           intcon3	equ	0xFF0
 15915                           postinc0	equ	0xFEE
 15916                           fsr0h	equ	0xFEA
 15917                           fsr0l	equ	0xFE9
 15918                           wreg	equ	0xFE8
 15919                           postdec1	equ	0xFE5
 15920                           fsr1h	equ	0xFE2
 15921                           fsr1l	equ	0xFE1
 15922                           indf2	equ	0xFDF
 15923                           postinc2	equ	0xFDE
 15924                           postdec2	equ	0xFDD
 15925                           fsr2h	equ	0xFDA
 15926                           fsr2l	equ	0xFD9
 15927                           status	equ	0xFD8
 15928                           
 15929 ;; *************** function i2___ftpack *****************
 15930 ;; Defined at:
 15931 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 15932 ;; Parameters:    Size  Location     Type
 15933 ;;  arg             3    0[COMRAM] unsigned um
 15934 ;;  exp             1    3[COMRAM] unsigned char 
 15935 ;;  sign            1    4[COMRAM] unsigned char 
 15936 ;; Auto vars:     Size  Location     Type
 15937 ;;		None
 15938 ;; Return value:  Size  Location     Type
 15939 ;;                  3    0[COMRAM] float 
 15940 ;; Registers used:
 15941 ;;		wreg, status,2, status,0
 15942 ;; Tracked objects:
 15943 ;;		On entry : 0/0
 15944 ;;		On exit  : 0/0
 15945 ;;		Unchanged: 0/0
 15946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15947 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15949 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15950 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15951 ;;Total ram usage:        8 bytes
 15952 ;; Hardware stack levels used:    1
 15953 ;; This function calls:
 15954 ;;		Nothing
 15955 ;; This function is called by:
 15956 ;;		i2___altoft
 15957 ;;		i2___awtoft
 15958 ;;		i2___ftadd
 15959 ;;		i2___ftdiv
 15960 ;;		i2___ftmul
 15961 ;;		i2___lltoft
 15962 ;; This function uses a non-reentrant model
 15963 ;;
 15964                           
 15965                           	psect	text61
 15966  003F4A                     __ptext61:
 15967                           	opt stack 0
 15968  003F4A                     i2___ftpack:
 15969                           	opt stack 20
 15970                           
 15971                           ;incstack = 0
 15972  003F4A  5004               	movf	i2___ftpack@exp,w,c
 15973  003F4C  B4D8               	btfsc	status,2,c
 15974  003F4E  D005               	goto	i2l4472
 15975  003F50  5001               	movf	i2___ftpack@arg,w,c
 15976  003F52  1002               	iorwf	i2___ftpack@arg+1,w,c
 15977  003F54  1003               	iorwf	i2___ftpack@arg+2,w,c
 15978  003F56  A4D8               	btfss	status,2,c
 15979  003F58  D00C               	goto	i2l4478
 15980  003F5A                     i2l4472:
 15981  003F5A  0E00               	movlw	0
 15982  003F5C  6E01               	movwf	?i2___ftpack,c
 15983  003F5E  0E00               	movlw	0
 15984  003F60  6E02               	movwf	?i2___ftpack+1,c
 15985  003F62  0E00               	movlw	0
 15986  003F64  6E03               	movwf	?i2___ftpack+2,c
 15987  003F66  0012               	return	
 15988  003F68                     i2l4476:
 15989  003F68  2A04               	incf	i2___ftpack@exp,f,c
 15990  003F6A  90D8               	bcf	status,0,c
 15991  003F6C  3203               	rrcf	i2___ftpack@arg+2,f,c
 15992  003F6E  3202               	rrcf	i2___ftpack@arg+1,f,c
 15993  003F70  3201               	rrcf	i2___ftpack@arg,f,c
 15994  003F72                     i2l4478:
 15995  003F72  0E00               	movlw	0
 15996  003F74  1401               	andwf	i2___ftpack@arg,w,c
 15997  003F76  6E06               	movwf	??i2___ftpack& (0+255),c
 15998  003F78  0E00               	movlw	0
 15999  003F7A  1402               	andwf	i2___ftpack@arg+1,w,c
 16000  003F7C  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 16001  003F7E  0EFE               	movlw	254
 16002  003F80  1403               	andwf	i2___ftpack@arg+2,w,c
 16003  003F82  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 16004  003F84  5006               	movf	??i2___ftpack,w,c
 16005  003F86  1007               	iorwf	??i2___ftpack+1,w,c
 16006  003F88  1008               	iorwf	??i2___ftpack+2,w,c
 16007  003F8A  B4D8               	btfsc	status,2,c
 16008  003F8C  D00C               	goto	i2l4484
 16009  003F8E  D7EC               	goto	i2l4476
 16010  003F90                     i2l4480:
 16011  003F90  2A04               	incf	i2___ftpack@exp,f,c
 16012  003F92  0E01               	movlw	1
 16013  003F94  2601               	addwf	i2___ftpack@arg,f,c
 16014  003F96  0E00               	movlw	0
 16015  003F98  2202               	addwfc	i2___ftpack@arg+1,f,c
 16016  003F9A  0E00               	movlw	0
 16017  003F9C  2203               	addwfc	i2___ftpack@arg+2,f,c
 16018  003F9E  90D8               	bcf	status,0,c
 16019  003FA0  3203               	rrcf	i2___ftpack@arg+2,f,c
 16020  003FA2  3202               	rrcf	i2___ftpack@arg+1,f,c
 16021  003FA4  3201               	rrcf	i2___ftpack@arg,f,c
 16022  003FA6                     i2l4484:
 16023  003FA6  0E00               	movlw	0
 16024  003FA8  1401               	andwf	i2___ftpack@arg,w,c
 16025  003FAA  6E06               	movwf	??i2___ftpack& (0+255),c
 16026  003FAC  0E00               	movlw	0
 16027  003FAE  1402               	andwf	i2___ftpack@arg+1,w,c
 16028  003FB0  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 16029  003FB2  0EFF               	movlw	255
 16030  003FB4  1403               	andwf	i2___ftpack@arg+2,w,c
 16031  003FB6  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 16032  003FB8  5006               	movf	??i2___ftpack,w,c
 16033  003FBA  1007               	iorwf	??i2___ftpack+1,w,c
 16034  003FBC  1008               	iorwf	??i2___ftpack+2,w,c
 16035  003FBE  B4D8               	btfsc	status,2,c
 16036  003FC0  D006               	goto	i2l4488
 16037  003FC2  D7E6               	goto	i2l4480
 16038  003FC4                     i2l4486:
 16039  003FC4  0604               	decf	i2___ftpack@exp,f,c
 16040  003FC6  90D8               	bcf	status,0,c
 16041  003FC8  3601               	rlcf	i2___ftpack@arg,f,c
 16042  003FCA  3602               	rlcf	i2___ftpack@arg+1,f,c
 16043  003FCC  3603               	rlcf	i2___ftpack@arg+2,f,c
 16044  003FCE                     i2l4488:
 16045  003FCE  BE02               	btfsc	i2___ftpack@arg+1,7,c
 16046  003FD0  D003               	goto	i2l958
 16047  003FD2  0E02               	movlw	2
 16048  003FD4  6004               	cpfslt	i2___ftpack@exp,c
 16049  003FD6  D7F6               	goto	i2l4486
 16050  003FD8                     i2l958:
 16051  003FD8  A004               	btfss	i2___ftpack@exp,0,c
 16052  003FDA  9E02               	bcf	i2___ftpack@arg+1,7,c
 16053  003FDC  90D8               	bcf	status,0,c
 16054  003FDE  3204               	rrcf	i2___ftpack@exp,f,c
 16055  003FE0  5004               	movf	i2___ftpack@exp,w,c
 16056  003FE2  1203               	iorwf	i2___ftpack@arg+2,f,c
 16057  003FE4  5005               	movf	i2___ftpack@sign,w,c
 16058  003FE6  A4D8               	btfss	status,2,c
 16059  003FE8  8E03               	bsf	i2___ftpack@arg+2,7,c
 16060  003FEA  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 16061  003FEE  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 16062  003FF2  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 16063  003FF6  0012               	return	
 16064  003FF8                     __end_ofi2___ftpack:
 16065                           	opt stack 0
 16066                           pclatu	equ	0xFFB
 16067                           pclath	equ	0xFFA
 16068                           tblptru	equ	0xFF8
 16069                           tblptrh	equ	0xFF7
 16070                           tblptrl	equ	0xFF6
 16071                           tablat	equ	0xFF5
 16072                           prodh	equ	0xFF4
 16073                           prodl	equ	0xFF3
 16074                           intcon	equ	0xFF2
 16075                           intcon3	equ	0xFF0
 16076                           postinc0	equ	0xFEE
 16077                           fsr0h	equ	0xFEA
 16078                           fsr0l	equ	0xFE9
 16079                           wreg	equ	0xFE8
 16080                           postdec1	equ	0xFE5
 16081                           fsr1h	equ	0xFE2
 16082                           fsr1l	equ	0xFE1
 16083                           indf2	equ	0xFDF
 16084                           postinc2	equ	0xFDE
 16085                           postdec2	equ	0xFDD
 16086                           fsr2h	equ	0xFDA
 16087                           fsr2l	equ	0xFD9
 16088                           status	equ	0xFD8
 16089                           
 16090 ;; *************** function i2___ftneg *****************
 16091 ;; Defined at:
 16092 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 16093 ;; Parameters:    Size  Location     Type
 16094 ;;  f1              3    0[COMRAM] float 
 16095 ;; Auto vars:     Size  Location     Type
 16096 ;;		None
 16097 ;; Return value:  Size  Location     Type
 16098 ;;                  3    0[COMRAM] float 
 16099 ;; Registers used:
 16100 ;;		wreg, status,2, status,0
 16101 ;; Tracked objects:
 16102 ;;		On entry : 0/0
 16103 ;;		On exit  : 0/0
 16104 ;;		Unchanged: 0/0
 16105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16106 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16109 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16110 ;;Total ram usage:        3 bytes
 16111 ;; Hardware stack levels used:    1
 16112 ;; This function calls:
 16113 ;;		Nothing
 16114 ;; This function is called by:
 16115 ;;		i2_printf
 16116 ;; This function uses a non-reentrant model
 16117 ;;
 16118                           
 16119                           	psect	text62
 16120  004BF2                     __ptext62:
 16121                           	opt stack 0
 16122  004BF2                     i2___ftneg:
 16123                           	opt stack 22
 16124                           
 16125                           ;incstack = 0
 16126  004BF2  5001               	movf	i2___ftneg@f1,w,c
 16127  004BF4  1002               	iorwf	i2___ftneg@f1+1,w,c
 16128  004BF6  1003               	iorwf	i2___ftneg@f1+2,w,c
 16129  004BF8  B4D8               	btfsc	status,2,c
 16130  004BFA  D006               	goto	i2l1055
 16131  004BFC  0E00               	movlw	0
 16132  004BFE  1A01               	xorwf	i2___ftneg@f1,f,c
 16133  004C00  0E00               	movlw	0
 16134  004C02  1A02               	xorwf	i2___ftneg@f1+1,f,c
 16135  004C04  0E80               	movlw	128
 16136  004C06  1A03               	xorwf	i2___ftneg@f1+2,f,c
 16137  004C08                     i2l1055:
 16138  004C08  C001  F001         	movff	i2___ftneg@f1,?i2___ftneg
 16139  004C0C  C002  F002         	movff	i2___ftneg@f1+1,?i2___ftneg+1
 16140  004C10  C003  F003         	movff	i2___ftneg@f1+2,?i2___ftneg+2
 16141  004C14  0012               	return		;funcret
 16142  004C16                     __end_ofi2___ftneg:
 16143                           	opt stack 0
 16144                           pclatu	equ	0xFFB
 16145                           pclath	equ	0xFFA
 16146                           tblptru	equ	0xFF8
 16147                           tblptrh	equ	0xFF7
 16148                           tblptrl	equ	0xFF6
 16149                           tablat	equ	0xFF5
 16150                           prodh	equ	0xFF4
 16151                           prodl	equ	0xFF3
 16152                           intcon	equ	0xFF2
 16153                           intcon3	equ	0xFF0
 16154                           postinc0	equ	0xFEE
 16155                           fsr0h	equ	0xFEA
 16156                           fsr0l	equ	0xFE9
 16157                           wreg	equ	0xFE8
 16158                           postdec1	equ	0xFE5
 16159                           fsr1h	equ	0xFE2
 16160                           fsr1l	equ	0xFE1
 16161                           indf2	equ	0xFDF
 16162                           postinc2	equ	0xFDE
 16163                           postdec2	equ	0xFDD
 16164                           fsr2h	equ	0xFDA
 16165                           fsr2l	equ	0xFD9
 16166                           status	equ	0xFD8
 16167                           
 16168 ;; *************** function i2___ftge *****************
 16169 ;; Defined at:
 16170 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 16171 ;; Parameters:    Size  Location     Type
 16172 ;;  ff1             3    0[COMRAM] float 
 16173 ;;  ff2             3    3[COMRAM] float 
 16174 ;; Auto vars:     Size  Location     Type
 16175 ;;		None
 16176 ;; Return value:  Size  Location     Type
 16177 ;;		None               void
 16178 ;; Registers used:
 16179 ;;		wreg, status,2, status,0
 16180 ;; Tracked objects:
 16181 ;;		On entry : 0/0
 16182 ;;		On exit  : 0/0
 16183 ;;		Unchanged: 0/0
 16184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16185 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16187 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16188 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16189 ;;Total ram usage:        9 bytes
 16190 ;; Hardware stack levels used:    1
 16191 ;; This function calls:
 16192 ;;		Nothing
 16193 ;; This function is called by:
 16194 ;;		i2_printf
 16195 ;; This function uses a non-reentrant model
 16196 ;;
 16197                           
 16198                           	psect	text63
 16199  00426C                     __ptext63:
 16200                           	opt stack 0
 16201  00426C                     i2___ftge:
 16202                           	opt stack 22
 16203                           
 16204                           ;incstack = 0
 16205  00426C  AE03               	btfss	i2___ftge@ff1+2,7,c
 16206  00426E  D016               	goto	i2l5708
 16207  004270  C001  F007         	movff	i2___ftge@ff1,??i2___ftge
 16208  004274  C002  F008         	movff	i2___ftge@ff1+1,??i2___ftge+1
 16209  004278  C003  F009         	movff	i2___ftge@ff1+2,??i2___ftge+2
 16210  00427C  1E07               	comf	??i2___ftge,f,c
 16211  00427E  1E08               	comf	??i2___ftge+1,f,c
 16212  004280  1E09               	comf	??i2___ftge+2,f,c
 16213  004282  2A07               	incf	??i2___ftge,f,c
 16214  004284  0E00               	movlw	0
 16215  004286  2208               	addwfc	??i2___ftge+1,f,c
 16216  004288  2209               	addwfc	??i2___ftge+2,f,c
 16217  00428A  0E00               	movlw	0
 16218  00428C  2407               	addwf	??i2___ftge,w,c
 16219  00428E  6E01               	movwf	i2___ftge@ff1,c
 16220  004290  0E00               	movlw	0
 16221  004292  2008               	addwfc	??i2___ftge+1,w,c
 16222  004294  6E02               	movwf	i2___ftge@ff1+1,c
 16223  004296  0E80               	movlw	128
 16224  004298  2009               	addwfc	??i2___ftge+2,w,c
 16225  00429A  6E03               	movwf	i2___ftge@ff1+2,c
 16226  00429C                     i2l5708:
 16227  00429C  AE06               	btfss	i2___ftge@ff2+2,7,c
 16228  00429E  D016               	goto	i2l5712
 16229  0042A0  C004  F007         	movff	i2___ftge@ff2,??i2___ftge
 16230  0042A4  C005  F008         	movff	i2___ftge@ff2+1,??i2___ftge+1
 16231  0042A8  C006  F009         	movff	i2___ftge@ff2+2,??i2___ftge+2
 16232  0042AC  1E07               	comf	??i2___ftge,f,c
 16233  0042AE  1E08               	comf	??i2___ftge+1,f,c
 16234  0042B0  1E09               	comf	??i2___ftge+2,f,c
 16235  0042B2  2A07               	incf	??i2___ftge,f,c
 16236  0042B4  0E00               	movlw	0
 16237  0042B6  2208               	addwfc	??i2___ftge+1,f,c
 16238  0042B8  2209               	addwfc	??i2___ftge+2,f,c
 16239  0042BA  0E00               	movlw	0
 16240  0042BC  2407               	addwf	??i2___ftge,w,c
 16241  0042BE  6E04               	movwf	i2___ftge@ff2,c
 16242  0042C0  0E00               	movlw	0
 16243  0042C2  2008               	addwfc	??i2___ftge+1,w,c
 16244  0042C4  6E05               	movwf	i2___ftge@ff2+1,c
 16245  0042C6  0E80               	movlw	128
 16246  0042C8  2009               	addwfc	??i2___ftge+2,w,c
 16247  0042CA  6E06               	movwf	i2___ftge@ff2+2,c
 16248  0042CC                     i2l5712:
 16249  0042CC  0E00               	movlw	0
 16250  0042CE  1A01               	xorwf	i2___ftge@ff1,f,c
 16251  0042D0  0E00               	movlw	0
 16252  0042D2  1A02               	xorwf	i2___ftge@ff1+1,f,c
 16253  0042D4  0E80               	movlw	128
 16254  0042D6  1A03               	xorwf	i2___ftge@ff1+2,f,c
 16255  0042D8  0E00               	movlw	0
 16256  0042DA  1A04               	xorwf	i2___ftge@ff2,f,c
 16257  0042DC  0E00               	movlw	0
 16258  0042DE  1A05               	xorwf	i2___ftge@ff2+1,f,c
 16259  0042E0  0E80               	movlw	128
 16260  0042E2  1A06               	xorwf	i2___ftge@ff2+2,f,c
 16261  0042E4  5004               	movf	i2___ftge@ff2,w,c
 16262  0042E6  5C01               	subwf	i2___ftge@ff1,w,c
 16263  0042E8  5005               	movf	i2___ftge@ff2+1,w,c
 16264  0042EA  5802               	subwfb	i2___ftge@ff1+1,w,c
 16265  0042EC  5006               	movf	i2___ftge@ff2+2,w,c
 16266  0042EE  5803               	subwfb	i2___ftge@ff1+2,w,c
 16267  0042F0  B0D8               	btfsc	status,0,c
 16268  0042F2  D002               	goto	i2l5718
 16269  0042F4  90D8               	bcf	status,0,c
 16270  0042F6  0012               	return	
 16271  0042F8                     i2l5718:
 16272  0042F8  80D8               	bsf	status,0,c
 16273  0042FA  0012               	return	
 16274  0042FC                     __end_ofi2___ftge:
 16275                           	opt stack 0
 16276                           pclatu	equ	0xFFB
 16277                           pclath	equ	0xFFA
 16278                           tblptru	equ	0xFF8
 16279                           tblptrh	equ	0xFF7
 16280                           tblptrl	equ	0xFF6
 16281                           tablat	equ	0xFF5
 16282                           prodh	equ	0xFF4
 16283                           prodl	equ	0xFF3
 16284                           intcon	equ	0xFF2
 16285                           intcon3	equ	0xFF0
 16286                           postinc0	equ	0xFEE
 16287                           fsr0h	equ	0xFEA
 16288                           fsr0l	equ	0xFE9
 16289                           wreg	equ	0xFE8
 16290                           postdec1	equ	0xFE5
 16291                           fsr1h	equ	0xFE2
 16292                           fsr1l	equ	0xFE1
 16293                           indf2	equ	0xFDF
 16294                           postinc2	equ	0xFDE
 16295                           postdec2	equ	0xFDD
 16296                           fsr2h	equ	0xFDA
 16297                           fsr2l	equ	0xFD9
 16298                           status	equ	0xFD8
 16299                           
 16300 ;; *************** function i2_lcdClear *****************
 16301 ;; Defined at:
 16302 ;;		line 74 in file "lcd.c"
 16303 ;; Parameters:    Size  Location     Type
 16304 ;;		None
 16305 ;; Auto vars:     Size  Location     Type
 16306 ;;		None
 16307 ;; Return value:  Size  Location     Type
 16308 ;;                  1    wreg      void 
 16309 ;; Registers used:
 16310 ;;		wreg, status,2, status,0, cstack
 16311 ;; Tracked objects:
 16312 ;;		On entry : 0/0
 16313 ;;		On exit  : 0/0
 16314 ;;		Unchanged: 0/0
 16315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16319 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16320 ;;Total ram usage:        0 bytes
 16321 ;; Hardware stack levels used:    1
 16322 ;; Hardware stack levels required when called:    2
 16323 ;; This function calls:
 16324 ;;		i2_lcdInst
 16325 ;; This function is called by:
 16326 ;;		_service
 16327 ;; This function uses a non-reentrant model
 16328 ;;
 16329                           
 16330                           	psect	text64
 16331  004C72                     __ptext64:
 16332                           	opt stack 0
 16333  004C72                     i2_lcdClear:
 16334                           	opt stack 21
 16335                           
 16336                           ;lcd.c: 75: lcdInst(0b00000001);
 16337                           
 16338                           ;incstack = 0
 16339  004C72  0E01               	movlw	1
 16340  004C74  EC1C  F026         	call	i2_lcdInst
 16341  004C78  0012               	return		;funcret
 16342  004C7A                     __end_ofi2_lcdClear:
 16343                           	opt stack 0
 16344                           pclatu	equ	0xFFB
 16345                           pclath	equ	0xFFA
 16346                           tblptru	equ	0xFF8
 16347                           tblptrh	equ	0xFF7
 16348                           tblptrl	equ	0xFF6
 16349                           tablat	equ	0xFF5
 16350                           prodh	equ	0xFF4
 16351                           prodl	equ	0xFF3
 16352                           intcon	equ	0xFF2
 16353                           intcon3	equ	0xFF0
 16354                           postinc0	equ	0xFEE
 16355                           fsr0h	equ	0xFEA
 16356                           fsr0l	equ	0xFE9
 16357                           wreg	equ	0xFE8
 16358                           postdec1	equ	0xFE5
 16359                           fsr1h	equ	0xFE2
 16360                           fsr1l	equ	0xFE1
 16361                           indf2	equ	0xFDF
 16362                           postinc2	equ	0xFDE
 16363                           postdec2	equ	0xFDD
 16364                           fsr2h	equ	0xFDA
 16365                           fsr2l	equ	0xFD9
 16366                           status	equ	0xFD8
 16367                           
 16368 ;; *************** function i2_lcdInst *****************
 16369 ;; Defined at:
 16370 ;;		line 27 in file "lcd.c"
 16371 ;; Parameters:    Size  Location     Type
 16372 ;;  data            1    wreg     unsigned char 
 16373 ;; Auto vars:     Size  Location     Type
 16374 ;;  data            1    3[COMRAM] unsigned char 
 16375 ;; Return value:  Size  Location     Type
 16376 ;;                  1    wreg      void 
 16377 ;; Registers used:
 16378 ;;		wreg, status,2, status,0, cstack
 16379 ;; Tracked objects:
 16380 ;;		On entry : 0/0
 16381 ;;		On exit  : 0/0
 16382 ;;		Unchanged: 0/0
 16383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16385 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16386 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16387 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16388 ;;Total ram usage:        2 bytes
 16389 ;; Hardware stack levels used:    1
 16390 ;; Hardware stack levels required when called:    1
 16391 ;; This function calls:
 16392 ;;		i2_lcdNibble
 16393 ;; This function is called by:
 16394 ;;		i2_lcdClear
 16395 ;;		i2_lcdNewline
 16396 ;; This function uses a non-reentrant model
 16397 ;;
 16398                           
 16399                           	psect	text65
 16400  004C38                     __ptext65:
 16401                           	opt stack 0
 16402  004C38                     i2_lcdInst:
 16403                           	opt stack 19
 16404                           
 16405                           ;incstack = 0
 16406                           ;i2lcdInst@data stored from wreg
 16407  004C38  6E04               	movwf	i2lcdInst@data,c
 16408                           
 16409                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 16410  004C3A  948C               	bcf	3980,2,c	;volatile
 16411                           
 16412                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 16413  004C3C  0E74               	movlw	116
 16414  004C3E                     i2u759_47:
 16415  004C3E  2EE8               	decfsz	wreg,f,c
 16416  004C40  D7FE               	bra	i2u759_47
 16417  004C42  D000               	nop2	
 16418                           
 16419                           ;lcd.c: 30: lcdNibble(data);
 16420  004C44  5004               	movf	i2lcdInst@data,w,c
 16421  004C46  EC9E  F023         	call	i2_lcdNibble
 16422                           
 16423                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 16424  004C4A  0E04               	movlw	4
 16425  004C4C  6E03               	movwf	??i2_lcdInst& (0+255),c
 16426  004C4E  0E3E               	movlw	62
 16427  004C50                     i2u760_47:
 16428  004C50  2EE8               	decfsz	wreg,f,c
 16429  004C52  D7FE               	bra	i2u760_47
 16430  004C54  2E03               	decfsz	??i2_lcdInst& (0+255),f,c
 16431  004C56  D7FC               	bra	i2u760_47
 16432  004C58  0012               	return		;funcret
 16433  004C5A                     __end_ofi2_lcdInst:
 16434                           	opt stack 0
 16435                           pclatu	equ	0xFFB
 16436                           pclath	equ	0xFFA
 16437                           tblptru	equ	0xFF8
 16438                           tblptrh	equ	0xFF7
 16439                           tblptrl	equ	0xFF6
 16440                           tablat	equ	0xFF5
 16441                           prodh	equ	0xFF4
 16442                           prodl	equ	0xFF3
 16443                           intcon	equ	0xFF2
 16444                           intcon3	equ	0xFF0
 16445                           postinc0	equ	0xFEE
 16446                           fsr0h	equ	0xFEA
 16447                           fsr0l	equ	0xFE9
 16448                           wreg	equ	0xFE8
 16449                           postdec1	equ	0xFE5
 16450                           fsr1h	equ	0xFE2
 16451                           fsr1l	equ	0xFE1
 16452                           indf2	equ	0xFDF
 16453                           postinc2	equ	0xFDE
 16454                           postdec2	equ	0xFDD
 16455                           fsr2h	equ	0xFDA
 16456                           fsr2l	equ	0xFD9
 16457                           status	equ	0xFD8
 16458                           
 16459 ;; *************** function i2_lcdNibble *****************
 16460 ;; Defined at:
 16461 ;;		line 46 in file "lcd.c"
 16462 ;; Parameters:    Size  Location     Type
 16463 ;;  data            1    wreg     unsigned char 
 16464 ;; Auto vars:     Size  Location     Type
 16465 ;;  data            1    1[COMRAM] unsigned char 
 16466 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 16467 ;; Return value:  Size  Location     Type
 16468 ;;                  1    wreg      void 
 16469 ;; Registers used:
 16470 ;;		wreg, status,2, status,0
 16471 ;; Tracked objects:
 16472 ;;		On entry : 0/0
 16473 ;;		On exit  : 0/0
 16474 ;;		Unchanged: 0/0
 16475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16477 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16479 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16480 ;;Total ram usage:        2 bytes
 16481 ;; Hardware stack levels used:    1
 16482 ;; This function calls:
 16483 ;;		Nothing
 16484 ;; This function is called by:
 16485 ;;		i2_lcdInst
 16486 ;;		i2_putch
 16487 ;; This function uses a non-reentrant model
 16488 ;;
 16489                           
 16490                           	psect	text66
 16491  00473C                     __ptext66:
 16492                           	opt stack 0
 16493  00473C                     i2_lcdNibble:
 16494                           	opt stack 21
 16495                           
 16496                           ;incstack = 0
 16497                           ;i2lcdNibble@data stored from wreg
 16498  00473C  6E02               	movwf	i2lcdNibble@data,c
 16499                           
 16500                           ;lcd.c: 48: char temp = data & 0xF0;
 16501  00473E  5002               	movf	i2lcdNibble@data,w,c
 16502  004740  0BF0               	andlw	240
 16503  004742  6E01               	movwf	i2lcdNibble@temp,c
 16504                           
 16505                           ;lcd.c: 49: LATD = LATD & 0x0F;
 16506  004744  508C               	movf	3980,w,c	;volatile
 16507  004746  0B0F               	andlw	15
 16508  004748  6E8C               	movwf	3980,c	;volatile
 16509                           
 16510                           ;lcd.c: 50: LATD = temp | LATD;
 16511  00474A  5001               	movf	i2lcdNibble@temp,w,c
 16512  00474C  108C               	iorwf	3980,w,c	;volatile
 16513  00474E  6E8C               	movwf	3980,c	;volatile
 16514                           
 16515                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 16516  004750  968C               	bcf	3980,3,c	;volatile
 16517                           
 16518                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 16519  004752  0ED6               	movlw	214
 16520  004754                     i2u761_47:
 16521  004754  D000               	nop2	
 16522  004756  D000               	nop2	
 16523  004758  2EE8               	decfsz	wreg,f,c
 16524  00475A  D7FC               	bra	i2u761_47
 16525  00475C  D000               	nop2	
 16526                           
 16527                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 16528  00475E  868C               	bsf	3980,3,c	;volatile
 16529                           
 16530                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 16531  004760  0ED6               	movlw	214
 16532  004762                     i2u762_47:
 16533  004762  D000               	nop2	
 16534  004764  D000               	nop2	
 16535  004766  2EE8               	decfsz	wreg,f,c
 16536  004768  D7FC               	bra	i2u762_47
 16537  00476A  D000               	nop2	
 16538                           
 16539                           ;lcd.c: 58: data = data << 4;
 16540  00476C  3802               	swapf	i2lcdNibble@data,w,c
 16541  00476E  0BF0               	andlw	240
 16542  004770  6E02               	movwf	i2lcdNibble@data,c
 16543                           
 16544                           ;lcd.c: 60: temp = data & 0xF0;
 16545  004772  5002               	movf	i2lcdNibble@data,w,c
 16546  004774  0BF0               	andlw	240
 16547  004776  6E01               	movwf	i2lcdNibble@temp,c
 16548                           
 16549                           ;lcd.c: 61: LATD = LATD & 0x0F;
 16550  004778  508C               	movf	3980,w,c	;volatile
 16551  00477A  0B0F               	andlw	15
 16552  00477C  6E8C               	movwf	3980,c	;volatile
 16553                           
 16554                           ;lcd.c: 62: LATD = temp | LATD;
 16555  00477E  5001               	movf	i2lcdNibble@temp,w,c
 16556  004780  108C               	iorwf	3980,w,c	;volatile
 16557  004782  6E8C               	movwf	3980,c	;volatile
 16558                           
 16559                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 16560  004784  968C               	bcf	3980,3,c	;volatile
 16561                           
 16562                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 16563  004786  0ED6               	movlw	214
 16564  004788                     i2u763_47:
 16565  004788  D000               	nop2	
 16566  00478A  D000               	nop2	
 16567  00478C  2EE8               	decfsz	wreg,f,c
 16568  00478E  D7FC               	bra	i2u763_47
 16569  004790  D000               	nop2	
 16570                           
 16571                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 16572  004792  868C               	bsf	3980,3,c	;volatile
 16573                           
 16574                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 16575  004794  0ED6               	movlw	214
 16576  004796                     i2u764_47:
 16577  004796  D000               	nop2	
 16578  004798  D000               	nop2	
 16579  00479A  2EE8               	decfsz	wreg,f,c
 16580  00479C  D7FC               	bra	i2u764_47
 16581  00479E  D000               	nop2	
 16582  0047A0  0012               	return		;funcret
 16583  0047A2                     __end_ofi2_lcdNibble:
 16584                           	opt stack 0
 16585                           pclatu	equ	0xFFB
 16586                           pclath	equ	0xFFA
 16587                           tblptru	equ	0xFF8
 16588                           tblptrh	equ	0xFF7
 16589                           tblptrl	equ	0xFF6
 16590                           tablat	equ	0xFF5
 16591                           prodh	equ	0xFF4
 16592                           prodl	equ	0xFF3
 16593                           intcon	equ	0xFF2
 16594                           intcon3	equ	0xFF0
 16595                           postinc0	equ	0xFEE
 16596                           fsr0h	equ	0xFEA
 16597                           fsr0l	equ	0xFE9
 16598                           wreg	equ	0xFE8
 16599                           postdec1	equ	0xFE5
 16600                           fsr1h	equ	0xFE2
 16601                           fsr1l	equ	0xFE1
 16602                           indf2	equ	0xFDF
 16603                           postinc2	equ	0xFDE
 16604                           postdec2	equ	0xFDD
 16605                           fsr2h	equ	0xFDA
 16606                           fsr2l	equ	0xFD9
 16607                           status	equ	0xFD8
 16608                           
 16609 ;; *************** function _servoInterruptService *****************
 16610 ;; Defined at:
 16611 ;;		line 52 in file "servo.c"
 16612 ;; Parameters:    Size  Location     Type
 16613 ;;		None
 16614 ;; Auto vars:     Size  Location     Type
 16615 ;;		None
 16616 ;; Return value:  Size  Location     Type
 16617 ;;                  1    wreg      void 
 16618 ;; Registers used:
 16619 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16620 ;; Tracked objects:
 16621 ;;		On entry : 0/0
 16622 ;;		On exit  : 0/0
 16623 ;;		Unchanged: 0/0
 16624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16627 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16628 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16629 ;;Total ram usage:        4 bytes
 16630 ;; Hardware stack levels used:    1
 16631 ;; Hardware stack levels required when called:    1
 16632 ;; This function calls:
 16633 ;;		i2___awmod
 16634 ;;		i2_digitalWrite
 16635 ;;		i2_startTimer
 16636 ;; This function is called by:
 16637 ;;		_service
 16638 ;; This function uses a non-reentrant model
 16639 ;;
 16640                           
 16641                           	psect	text67
 16642  00350A                     __ptext67:
 16643                           	opt stack 0
 16644  00350A                     _servoInterruptService:
 16645                           	opt stack 22
 16646                           
 16647                           ;servo.c: 54: if(TMR0IF){TMR0IF = 0;
 16648                           
 16649                           ;incstack = 0
 16650  00350A  A4F2               	btfss	intcon,2,c	;volatile
 16651  00350C  0012               	return	
 16652  00350E  94F2               	bcf	intcon,2,c	;volatile
 16653                           
 16654                           ;servo.c: 55: digitalWrite(servos[curr],0);
 16655  003510  90D8               	bcf	status,0,c
 16656  003512  3475               	rlcf	_curr,w,c
 16657  003514  6ED9               	movwf	fsr2l,c
 16658  003516  3476               	rlcf	_curr+1,w,c
 16659  003518  6EDA               	movwf	fsr2h,c
 16660  00351A  0E63               	movlw	low _servos
 16661  00351C  26D9               	addwf	fsr2l,f,c
 16662  00351E  0E01               	movlw	high _servos
 16663  003520  22DA               	addwfc	fsr2h,f,c
 16664  003522  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 16665  003526  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 16666  00352A  0E00               	movlw	0
 16667  00352C  6E0A               	movwf	i2digitalWrite@val+1,c
 16668  00352E  0E00               	movlw	0
 16669  003530  6E09               	movwf	i2digitalWrite@val,c
 16670  003532  EC2D  F01E         	call	i2_digitalWrite	;wreg free
 16671                           
 16672                           ;servo.c: 56: digitalWrite(servos[ (curr+1)%(n+1) ],1);
 16673  003536  0E01               	movlw	1
 16674  003538  2475               	addwf	_curr,w,c
 16675  00353A  6E01               	movwf	i2___awmod@dividend,c
 16676  00353C  0E00               	movlw	0
 16677  00353E  2076               	addwfc	_curr+1,w,c
 16678  003540  6E02               	movwf	i2___awmod@dividend+1,c
 16679  003542  0E01               	movlw	1
 16680  003544  0101               	movlb	1	; () banked
 16681  003546  2571               	addwf	_n& (0+255),w,b
 16682  003548  6E03               	movwf	i2___awmod@divisor,c
 16683  00354A  0E00               	movlw	0
 16684  00354C  0101               	movlb	1	; () banked
 16685  00354E  2172               	addwfc	(_n+1)& (0+255),w,b
 16686  003550  6E04               	movwf	i2___awmod@divisor+1,c
 16687  003552  ECFE  F022         	call	i2___awmod	;wreg free
 16688  003556  90D8               	bcf	status,0,c
 16689  003558  3601               	rlcf	?i2___awmod,f,c
 16690  00355A  3602               	rlcf	?i2___awmod+1,f,c
 16691  00355C  0E63               	movlw	low _servos
 16692  00355E  2401               	addwf	?i2___awmod,w,c
 16693  003560  6ED9               	movwf	fsr2l,c
 16694  003562  0E01               	movlw	high _servos
 16695  003564  2002               	addwfc	?i2___awmod+1,w,c
 16696  003566  6EDA               	movwf	fsr2h,c
 16697  003568  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 16698  00356C  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 16699  003570  0E00               	movlw	0
 16700  003572  6E0A               	movwf	i2digitalWrite@val+1,c
 16701  003574  0E01               	movlw	1
 16702  003576  6E09               	movwf	i2digitalWrite@val,c
 16703  003578  EC2D  F01E         	call	i2_digitalWrite	;wreg free
 16704                           
 16705                           ;servo.c: 57: startTimer(0, 0xFFFF - pulse[ (curr+1)%(n+1) ]);
 16706  00357C  0E00               	movlw	0
 16707  00357E  6E08               	movwf	i2startTimer@timer+1,c
 16708  003580  0E00               	movlw	0
 16709  003582  6E07               	movwf	i2startTimer@timer,c
 16710  003584  0EFF               	movlw	255
 16711  003586  6E10               	movwf	??_servoInterruptService& (0+255),c
 16712  003588  0EFF               	movlw	255
 16713  00358A  6E11               	movwf	(??_servoInterruptService+1)& (0+255),c
 16714  00358C  0E01               	movlw	1
 16715  00358E  2475               	addwf	_curr,w,c
 16716  003590  6E01               	movwf	i2___awmod@dividend,c
 16717  003592  0E00               	movlw	0
 16718  003594  2076               	addwfc	_curr+1,w,c
 16719  003596  6E02               	movwf	i2___awmod@dividend+1,c
 16720  003598  0E01               	movlw	1
 16721  00359A  0101               	movlb	1	; () banked
 16722  00359C  2571               	addwf	_n& (0+255),w,b
 16723  00359E  6E03               	movwf	i2___awmod@divisor,c
 16724  0035A0  0E00               	movlw	0
 16725  0035A2  0101               	movlb	1	; () banked
 16726  0035A4  2172               	addwfc	(_n+1)& (0+255),w,b
 16727  0035A6  6E04               	movwf	i2___awmod@divisor+1,c
 16728  0035A8  ECFE  F022         	call	i2___awmod	;wreg free
 16729  0035AC  90D8               	bcf	status,0,c
 16730  0035AE  3601               	rlcf	?i2___awmod,f,c
 16731  0035B0  3602               	rlcf	?i2___awmod+1,f,c
 16732  0035B2  0EEA               	movlw	low _pulse
 16733  0035B4  2401               	addwf	?i2___awmod,w,c
 16734  0035B6  6ED9               	movwf	fsr2l,c
 16735  0035B8  0E00               	movlw	high _pulse
 16736  0035BA  2002               	addwfc	?i2___awmod+1,w,c
 16737  0035BC  6EDA               	movwf	fsr2h,c
 16738  0035BE  CFDE F012          	movff	postinc2,??_servoInterruptService+2
 16739  0035C2  CFDD F013          	movff	postdec2,??_servoInterruptService+3
 16740  0035C6  1E12               	comf	??_servoInterruptService+2,f,c
 16741  0035C8  1E13               	comf	??_servoInterruptService+3,f,c
 16742  0035CA  4A12               	infsnz	??_servoInterruptService+2,f,c
 16743  0035CC  2A13               	incf	??_servoInterruptService+3,f,c
 16744  0035CE  5010               	movf	??_servoInterruptService,w,c
 16745  0035D0  2612               	addwf	??_servoInterruptService+2,f,c
 16746  0035D2  5011               	movf	??_servoInterruptService+1,w,c
 16747  0035D4  2213               	addwfc	??_servoInterruptService+3,f,c
 16748  0035D6  C012  F009         	movff	??_servoInterruptService+2,i2startTimer@val
 16749  0035DA  C013  F00A         	movff	??_servoInterruptService+3,i2startTimer@val+1
 16750  0035DE  6A0B               	clrf	i2startTimer@val+2,c
 16751  0035E0  6A0C               	clrf	i2startTimer@val+3,c
 16752  0035E2  EC4D  F024         	call	i2_startTimer	;wreg free
 16753                           
 16754                           ;servo.c: 59: curr = (curr+1)%(n+1);
 16755  0035E6  0E01               	movlw	1
 16756  0035E8  2475               	addwf	_curr,w,c
 16757  0035EA  6E01               	movwf	i2___awmod@dividend,c
 16758  0035EC  0E00               	movlw	0
 16759  0035EE  2076               	addwfc	_curr+1,w,c
 16760  0035F0  6E02               	movwf	i2___awmod@dividend+1,c
 16761  0035F2  0E01               	movlw	1
 16762  0035F4  0101               	movlb	1	; () banked
 16763  0035F6  2571               	addwf	_n& (0+255),w,b
 16764  0035F8  6E03               	movwf	i2___awmod@divisor,c
 16765  0035FA  0E00               	movlw	0
 16766  0035FC  0101               	movlb	1	; () banked
 16767  0035FE  2172               	addwfc	(_n+1)& (0+255),w,b
 16768  003600  6E04               	movwf	i2___awmod@divisor+1,c
 16769  003602  ECFE  F022         	call	i2___awmod	;wreg free
 16770  003606  C001  F075         	movff	?i2___awmod,_curr
 16771  00360A  C002  F076         	movff	?i2___awmod+1,_curr+1
 16772  00360E  0012               	return	
 16773  003610                     __end_of_servoInterruptService:
 16774                           	opt stack 0
 16775                           pclatu	equ	0xFFB
 16776                           pclath	equ	0xFFA
 16777                           tblptru	equ	0xFF8
 16778                           tblptrh	equ	0xFF7
 16779                           tblptrl	equ	0xFF6
 16780                           tablat	equ	0xFF5
 16781                           prodh	equ	0xFF4
 16782                           prodl	equ	0xFF3
 16783                           intcon	equ	0xFF2
 16784                           intcon3	equ	0xFF0
 16785                           postinc0	equ	0xFEE
 16786                           fsr0h	equ	0xFEA
 16787                           fsr0l	equ	0xFE9
 16788                           wreg	equ	0xFE8
 16789                           postdec1	equ	0xFE5
 16790                           fsr1h	equ	0xFE2
 16791                           fsr1l	equ	0xFE1
 16792                           indf2	equ	0xFDF
 16793                           postinc2	equ	0xFDE
 16794                           postdec2	equ	0xFDD
 16795                           fsr2h	equ	0xFDA
 16796                           fsr2l	equ	0xFD9
 16797                           status	equ	0xFD8
 16798                           
 16799 ;; *************** function i2_startTimer *****************
 16800 ;; Defined at:
 16801 ;;		line 75 in file "timer.c"
 16802 ;; Parameters:    Size  Location     Type
 16803 ;;  timer           2    6[COMRAM] int 
 16804 ;;  val             4    8[COMRAM] long 
 16805 ;; Auto vars:     Size  Location     Type
 16806 ;;		None
 16807 ;; Return value:  Size  Location     Type
 16808 ;;                  1    wreg      void 
 16809 ;; Registers used:
 16810 ;;		wreg, status,2, status,0
 16811 ;; Tracked objects:
 16812 ;;		On entry : 0/0
 16813 ;;		On exit  : 0/0
 16814 ;;		Unchanged: 0/0
 16815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16816 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16818 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16819 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16820 ;;Total ram usage:        8 bytes
 16821 ;; Hardware stack levels used:    1
 16822 ;; This function calls:
 16823 ;;		Nothing
 16824 ;; This function is called by:
 16825 ;;		_servoInterruptService
 16826 ;; This function uses a non-reentrant model
 16827 ;;
 16828                           
 16829                           	psect	text68
 16830  00489A                     __ptext68:
 16831                           	opt stack 0
 16832  00489A                     i2_startTimer:
 16833                           	opt stack 22
 16834                           
 16835                           ;timer.c: 76: switch(timer){
 16836                           
 16837                           ;incstack = 0
 16838  00489A  D012               	goto	i2l5514
 16839  00489C                     i2l383:
 16840                           
 16841                           ;timer.c: 78: TMR0H = val>>8;
 16842  00489C  C00A  FFD7         	movff	i2startTimer@val+1,4055	;volatile
 16843                           
 16844                           ;timer.c: 79: TMR0L = val;
 16845  0048A0  C009  FFD6         	movff	i2startTimer@val,4054	;volatile
 16846                           
 16847                           ;timer.c: 80: T0CON |= 1<<7;
 16848  0048A4  8ED5               	bsf	4053,7,c	;volatile
 16849                           
 16850                           ;timer.c: 81: break;
 16851  0048A6  0012               	return	
 16852  0048A8                     i2l385:
 16853                           
 16854                           ;timer.c: 83: TMR1H = val>>8;
 16855  0048A8  C00A  FFCF         	movff	i2startTimer@val+1,4047	;volatile
 16856                           
 16857                           ;timer.c: 84: TMR1L = val;
 16858  0048AC  C009  FFCE         	movff	i2startTimer@val,4046	;volatile
 16859                           
 16860                           ;timer.c: 85: T1CON |= 1<<0;
 16861  0048B0  80CD               	bsf	4045,0,c	;volatile
 16862                           
 16863                           ;timer.c: 86: break;
 16864  0048B2  0012               	return	
 16865  0048B4                     i2l386:
 16866                           
 16867                           ;timer.c: 88: TMR3H = val>>8;
 16868  0048B4  C00A  FFB3         	movff	i2startTimer@val+1,4019	;volatile
 16869                           
 16870                           ;timer.c: 89: TMR3L = val;
 16871  0048B8  C009  FFB2         	movff	i2startTimer@val,4018	;volatile
 16872                           
 16873                           ;timer.c: 90: T3CON |= 1<<0;
 16874  0048BC  80B1               	bsf	4017,0,c	;volatile
 16875                           
 16876                           ;timer.c: 91: }
 16877  0048BE  0012               	return	
 16878  0048C0                     i2l5514:
 16879  0048C0  C007  F00D         	movff	i2startTimer@timer,??i2_startTimer
 16880  0048C4  C008  F00E         	movff	i2startTimer@timer+1,??i2_startTimer+1
 16881                           
 16882                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16883                           ; Switch size 1, requested type "space"
 16884                           ; Number of cases is 1, Range of values is 0 to 0
 16885                           ; switch strategies available:
 16886                           ; Name         Instructions Cycles
 16887                           ; simple_byte            4     3 (average)
 16888                           ;	Chosen strategy is simple_byte
 16889  0048C8  500E               	movf	??i2_startTimer+1,w,c
 16890  0048CA  0A00               	xorlw	0	; case 0
 16891  0048CC  A4D8               	btfss	status,2,c
 16892  0048CE  0012               	return	
 16893                           
 16894                           ; Switch size 1, requested type "space"
 16895                           ; Number of cases is 3, Range of values is 0 to 3
 16896                           ; switch strategies available:
 16897                           ; Name         Instructions Cycles
 16898                           ; simple_byte           10     6 (average)
 16899                           ;	Chosen strategy is simple_byte
 16900  0048D0  500D               	movf	??i2_startTimer,w,c
 16901  0048D2  0A00               	xorlw	0	; case 0
 16902  0048D4  B4D8               	btfsc	status,2,c
 16903  0048D6  D7E2               	goto	i2l383
 16904  0048D8  0A01               	xorlw	1	; case 1
 16905  0048DA  B4D8               	btfsc	status,2,c
 16906  0048DC  D7E5               	goto	i2l385
 16907  0048DE  0A02               	xorlw	2	; case 3
 16908  0048E0  A4D8               	btfss	status,2,c
 16909  0048E2  0012               	return	
 16910  0048E4  D7E7               	goto	i2l386
 16911  0048E6                     __end_ofi2_startTimer:
 16912                           	opt stack 0
 16913                           pclatu	equ	0xFFB
 16914                           pclath	equ	0xFFA
 16915                           tblptru	equ	0xFF8
 16916                           tblptrh	equ	0xFF7
 16917                           tblptrl	equ	0xFF6
 16918                           tablat	equ	0xFF5
 16919                           prodh	equ	0xFF4
 16920                           prodl	equ	0xFF3
 16921                           intcon	equ	0xFF2
 16922                           intcon3	equ	0xFF0
 16923                           postinc0	equ	0xFEE
 16924                           fsr0h	equ	0xFEA
 16925                           fsr0l	equ	0xFE9
 16926                           wreg	equ	0xFE8
 16927                           postdec1	equ	0xFE5
 16928                           fsr1h	equ	0xFE2
 16929                           fsr1l	equ	0xFE1
 16930                           indf2	equ	0xFDF
 16931                           postinc2	equ	0xFDE
 16932                           postdec2	equ	0xFDD
 16933                           fsr2h	equ	0xFDA
 16934                           fsr2l	equ	0xFD9
 16935                           status	equ	0xFD8
 16936                           
 16937 ;; *************** function i2_digitalWrite *****************
 16938 ;; Defined at:
 16939 ;;		line 53 in file "iopin.c"
 16940 ;; Parameters:    Size  Location     Type
 16941 ;;  pin             2    6[COMRAM] PTR int 
 16942 ;;		 -> AA_float(4), redirectingServo(4), padServo(4), conveyorServo(4), 
 16943 ;;		 -> cylinderMotor(4), 
 16944 ;;  val             2    8[COMRAM] int 
 16945 ;; Auto vars:     Size  Location     Type
 16946 ;;  digitalWrite    2   13[COMRAM] int 
 16947 ;; Return value:  Size  Location     Type
 16948 ;;                  1    wreg      void 
 16949 ;; Registers used:
 16950 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16951 ;; Tracked objects:
 16952 ;;		On entry : 0/0
 16953 ;;		On exit  : 0/0
 16954 ;;		Unchanged: 0/0
 16955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16956 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16957 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16958 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16959 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16960 ;;Total ram usage:        9 bytes
 16961 ;; Hardware stack levels used:    1
 16962 ;; This function calls:
 16963 ;;		Nothing
 16964 ;; This function is called by:
 16965 ;;		_servoInterruptService
 16966 ;; This function uses a non-reentrant model
 16967 ;;
 16968                           
 16969                           	psect	text69
 16970  003C5A                     __ptext69:
 16971                           	opt stack 0
 16972  003C5A                     i2_digitalWrite:
 16973                           	opt stack 22
 16974                           
 16975                           ;iopin.c: 54: if(pin){
 16976                           
 16977                           ;incstack = 0
 16978  003C5A  5007               	movf	i2digitalWrite@pin,w,c
 16979  003C5C  1008               	iorwf	i2digitalWrite@pin+1,w,c
 16980  003C5E  B4D8               	btfsc	status,2,c
 16981  003C60  0012               	return	
 16982                           
 16983                           ;iopin.c: 55: int p = 1 << pin[1];
 16984  003C62  EE20 F002          	lfsr	2,2
 16985  003C66  5007               	movf	i2digitalWrite@pin,w,c
 16986  003C68  26D9               	addwf	fsr2l,f,c
 16987  003C6A  5008               	movf	i2digitalWrite@pin+1,w,c
 16988  003C6C  22DA               	addwfc	fsr2h,f,c
 16989  003C6E  50DF               	movf	indf2,w,c
 16990  003C70  6E0B               	movwf	??i2_digitalWrite& (0+255),c
 16991  003C72  0E01               	movlw	1
 16992  003C74  6E0C               	movwf	(??i2_digitalWrite+1)& (0+255),c
 16993  003C76  0E00               	movlw	0
 16994  003C78  6E0D               	movwf	(??i2_digitalWrite+2)& (0+255),c
 16995  003C7A  2A0B               	incf	??i2_digitalWrite,f,c
 16996  003C7C  D003               	goto	i2u564_44
 16997  003C7E                     i2u564_45:
 16998  003C7E  90D8               	bcf	status,0,c
 16999  003C80  360C               	rlcf	??i2_digitalWrite+1,f,c
 17000  003C82  360D               	rlcf	??i2_digitalWrite+2,f,c
 17001  003C84                     i2u564_44:
 17002  003C84  2E0B               	decfsz	??i2_digitalWrite,f,c
 17003  003C86  D7FB               	goto	i2u564_45
 17004  003C88  C00C  F00E         	movff	??i2_digitalWrite+1,i2digitalWrite@p
 17005  003C8C  C00D  F00F         	movff	??i2_digitalWrite+2,i2digitalWrite@p+1
 17006                           
 17007                           ;iopin.c: 56: if(val == 0){
 17008  003C90  5009               	movf	i2digitalWrite@val,w,c
 17009  003C92  100A               	iorwf	i2digitalWrite@val+1,w,c
 17010  003C94  A4D8               	btfss	status,2,c
 17011  003C96  D02B               	goto	i2l5500
 17012                           
 17013                           ;iopin.c: 57: p ^= 0xff;
 17014  003C98  0EFF               	movlw	255
 17015  003C9A  1A0E               	xorwf	i2digitalWrite@p,f,c
 17016                           
 17017                           ;iopin.c: 58: }
 17018                           ;iopin.c: 60: switch(pin[0]){
 17019  003C9C  D028               	goto	i2l5500
 17020  003C9E                     i2l5476:
 17021  003C9E  0409               	decf	i2digitalWrite@val,w,c
 17022  003CA0  100A               	iorwf	i2digitalWrite@val+1,w,c
 17023  003CA2  A4D8               	btfss	status,2,c
 17024  003CA4  D003               	goto	i2l5480
 17025  003CA6  500E               	movf	i2digitalWrite@p,w,c
 17026  003CA8  1289               	iorwf	3977,f,c	;volatile
 17027  003CAA  0012               	return	
 17028  003CAC                     i2l5480:
 17029                           
 17030                           ;iopin.c: 62: else LATA &= p;
 17031  003CAC  500E               	movf	i2digitalWrite@p,w,c
 17032  003CAE  1689               	andwf	3977,f,c	;volatile
 17033                           
 17034                           ;iopin.c: 63: break;
 17035  003CB0  0012               	return	
 17036  003CB2                     i2l5482:
 17037  003CB2  0409               	decf	i2digitalWrite@val,w,c
 17038  003CB4  100A               	iorwf	i2digitalWrite@val+1,w,c
 17039  003CB6  A4D8               	btfss	status,2,c
 17040  003CB8  D003               	goto	i2l5486
 17041  003CBA  500E               	movf	i2digitalWrite@p,w,c
 17042  003CBC  128A               	iorwf	3978,f,c	;volatile
 17043  003CBE  0012               	return	
 17044  003CC0                     i2l5486:
 17045                           
 17046                           ;iopin.c: 65: else LATB &= p;
 17047  003CC0  500E               	movf	i2digitalWrite@p,w,c
 17048  003CC2  168A               	andwf	3978,f,c	;volatile
 17049                           
 17050                           ;iopin.c: 66: break;
 17051  003CC4  0012               	return	
 17052  003CC6                     i2l5488:
 17053  003CC6  0409               	decf	i2digitalWrite@val,w,c
 17054  003CC8  100A               	iorwf	i2digitalWrite@val+1,w,c
 17055  003CCA  A4D8               	btfss	status,2,c
 17056  003CCC  D003               	goto	i2l5492
 17057  003CCE  500E               	movf	i2digitalWrite@p,w,c
 17058  003CD0  128B               	iorwf	3979,f,c	;volatile
 17059  003CD2  0012               	return	
 17060  003CD4                     i2l5492:
 17061                           
 17062                           ;iopin.c: 68: else LATC &= p;
 17063  003CD4  500E               	movf	i2digitalWrite@p,w,c
 17064  003CD6  168B               	andwf	3979,f,c	;volatile
 17065                           
 17066                           ;iopin.c: 69: break;
 17067  003CD8  0012               	return	
 17068  003CDA                     i2l5494:
 17069  003CDA  0409               	decf	i2digitalWrite@val,w,c
 17070  003CDC  100A               	iorwf	i2digitalWrite@val+1,w,c
 17071  003CDE  A4D8               	btfss	status,2,c
 17072  003CE0  D003               	goto	i2l5498
 17073  003CE2  500E               	movf	i2digitalWrite@p,w,c
 17074  003CE4  128C               	iorwf	3980,f,c	;volatile
 17075  003CE6  0012               	return	
 17076  003CE8                     i2l5498:
 17077                           
 17078                           ;iopin.c: 71: else LATD &= p;
 17079  003CE8  500E               	movf	i2digitalWrite@p,w,c
 17080  003CEA  168C               	andwf	3980,f,c	;volatile
 17081                           
 17082                           ;iopin.c: 72: }
 17083  003CEC  0012               	return	
 17084  003CEE                     i2l5500:
 17085  003CEE  C007  FFD9         	movff	i2digitalWrite@pin,fsr2l
 17086  003CF2  C008  FFDA         	movff	i2digitalWrite@pin+1,fsr2h
 17087  003CF6  CFDE F00B          	movff	postinc2,??i2_digitalWrite
 17088  003CFA  CFDD F00C          	movff	postdec2,??i2_digitalWrite+1
 17089                           
 17090                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17091                           ; Switch size 1, requested type "space"
 17092                           ; Number of cases is 1, Range of values is 0 to 0
 17093                           ; switch strategies available:
 17094                           ; Name         Instructions Cycles
 17095                           ; simple_byte            4     3 (average)
 17096                           ;	Chosen strategy is simple_byte
 17097  003CFE  500C               	movf	??i2_digitalWrite+1,w,c
 17098  003D00  0A00               	xorlw	0	; case 0
 17099  003D02  A4D8               	btfss	status,2,c
 17100  003D04  0012               	return	
 17101                           
 17102                           ; Switch size 1, requested type "space"
 17103                           ; Number of cases is 4, Range of values is 0 to 3
 17104                           ; switch strategies available:
 17105                           ; Name         Instructions Cycles
 17106                           ; simple_byte           13     7 (average)
 17107                           ;	Chosen strategy is simple_byte
 17108  003D06  500B               	movf	??i2_digitalWrite,w,c
 17109  003D08  0A00               	xorlw	0	; case 0
 17110  003D0A  B4D8               	btfsc	status,2,c
 17111  003D0C  D7C8               	goto	i2l5476
 17112  003D0E  0A01               	xorlw	1	; case 1
 17113  003D10  B4D8               	btfsc	status,2,c
 17114  003D12  D7CF               	goto	i2l5482
 17115  003D14  0A03               	xorlw	3	; case 2
 17116  003D16  B4D8               	btfsc	status,2,c
 17117  003D18  D7D6               	goto	i2l5488
 17118  003D1A  0A01               	xorlw	1	; case 3
 17119  003D1C  A4D8               	btfss	status,2,c
 17120  003D1E  0012               	return	
 17121  003D20  D7DC               	goto	i2l5494
 17122  003D22                     __end_ofi2_digitalWrite:
 17123                           	opt stack 0
 17124                           pclatu	equ	0xFFB
 17125                           pclath	equ	0xFFA
 17126                           tblptru	equ	0xFF8
 17127                           tblptrh	equ	0xFF7
 17128                           tblptrl	equ	0xFF6
 17129                           tablat	equ	0xFF5
 17130                           prodh	equ	0xFF4
 17131                           prodl	equ	0xFF3
 17132                           intcon	equ	0xFF2
 17133                           intcon3	equ	0xFF0
 17134                           postinc0	equ	0xFEE
 17135                           fsr0h	equ	0xFEA
 17136                           fsr0l	equ	0xFE9
 17137                           wreg	equ	0xFE8
 17138                           postdec1	equ	0xFE5
 17139                           fsr1h	equ	0xFE2
 17140                           fsr1l	equ	0xFE1
 17141                           indf2	equ	0xFDF
 17142                           postinc2	equ	0xFDE
 17143                           postdec2	equ	0xFDD
 17144                           fsr2h	equ	0xFDA
 17145                           fsr2l	equ	0xFD9
 17146                           status	equ	0xFD8
 17147                           
 17148 ;; *************** function i2___awmod *****************
 17149 ;; Defined at:
 17150 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 17151 ;; Parameters:    Size  Location     Type
 17152 ;;  dividend        2    0[COMRAM] int 
 17153 ;;  divisor         2    2[COMRAM] int 
 17154 ;; Auto vars:     Size  Location     Type
 17155 ;;  __awmod         1    5[COMRAM] unsigned char 
 17156 ;;  __awmod         1    4[COMRAM] unsigned char 
 17157 ;; Return value:  Size  Location     Type
 17158 ;;                  2    0[COMRAM] int 
 17159 ;; Registers used:
 17160 ;;		wreg, status,2, status,0
 17161 ;; Tracked objects:
 17162 ;;		On entry : 0/0
 17163 ;;		On exit  : 0/0
 17164 ;;		Unchanged: 0/0
 17165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17166 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17167 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17169 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17170 ;;Total ram usage:        6 bytes
 17171 ;; Hardware stack levels used:    1
 17172 ;; This function calls:
 17173 ;;		Nothing
 17174 ;; This function is called by:
 17175 ;;		_servoInterruptService
 17176 ;;		i2_fround
 17177 ;;		i2_scale
 17178 ;; This function uses a non-reentrant model
 17179 ;;
 17180                           
 17181                           	psect	text70
 17182  0045FC                     __ptext70:
 17183                           	opt stack 0
 17184  0045FC                     i2___awmod:
 17185                           	opt stack 21
 17186                           
 17187                           ;incstack = 0
 17188  0045FC  0E00               	movlw	0
 17189  0045FE  6E06               	movwf	i2___awmod@sign,c
 17190  004600  AE02               	btfss	i2___awmod@dividend+1,7,c
 17191  004602  D006               	goto	i2l4850
 17192  004604  6C01               	negf	i2___awmod@dividend,c
 17193  004606  1E02               	comf	i2___awmod@dividend+1,f,c
 17194  004608  B0D8               	btfsc	status,0,c
 17195  00460A  2A02               	incf	i2___awmod@dividend+1,f,c
 17196  00460C  0E01               	movlw	1
 17197  00460E  6E06               	movwf	i2___awmod@sign,c
 17198  004610                     i2l4850:
 17199  004610  AE04               	btfss	i2___awmod@divisor+1,7,c
 17200  004612  D004               	goto	i2l4854
 17201  004614  6C03               	negf	i2___awmod@divisor,c
 17202  004616  1E04               	comf	i2___awmod@divisor+1,f,c
 17203  004618  B0D8               	btfsc	status,0,c
 17204  00461A  2A04               	incf	i2___awmod@divisor+1,f,c
 17205  00461C                     i2l4854:
 17206  00461C  5003               	movf	i2___awmod@divisor,w,c
 17207  00461E  1004               	iorwf	i2___awmod@divisor+1,w,c
 17208  004620  B4D8               	btfsc	status,2,c
 17209  004622  D018               	goto	i2l4870
 17210  004624  0E01               	movlw	1
 17211  004626  6E05               	movwf	i2___awmod@counter,c
 17212  004628  D004               	goto	i2l4860
 17213  00462A                     i2l4858:
 17214  00462A  90D8               	bcf	status,0,c
 17215  00462C  3603               	rlcf	i2___awmod@divisor,f,c
 17216  00462E  3604               	rlcf	i2___awmod@divisor+1,f,c
 17217  004630  2A05               	incf	i2___awmod@counter,f,c
 17218  004632                     i2l4860:
 17219  004632  AE04               	btfss	i2___awmod@divisor+1,7,c
 17220  004634  D7FA               	goto	i2l4858
 17221  004636                     i2l4862:
 17222  004636  5003               	movf	i2___awmod@divisor,w,c
 17223  004638  5C01               	subwf	i2___awmod@dividend,w,c
 17224  00463A  5004               	movf	i2___awmod@divisor+1,w,c
 17225  00463C  5802               	subwfb	i2___awmod@dividend+1,w,c
 17226  00463E  A0D8               	btfss	status,0,c
 17227  004640  D004               	goto	i2l4866
 17228  004642  5003               	movf	i2___awmod@divisor,w,c
 17229  004644  5E01               	subwf	i2___awmod@dividend,f,c
 17230  004646  5004               	movf	i2___awmod@divisor+1,w,c
 17231  004648  5A02               	subwfb	i2___awmod@dividend+1,f,c
 17232  00464A                     i2l4866:
 17233  00464A  90D8               	bcf	status,0,c
 17234  00464C  3204               	rrcf	i2___awmod@divisor+1,f,c
 17235  00464E  3203               	rrcf	i2___awmod@divisor,f,c
 17236  004650  2E05               	decfsz	i2___awmod@counter,f,c
 17237  004652  D7F1               	goto	i2l4862
 17238  004654                     i2l4870:
 17239  004654  5006               	movf	i2___awmod@sign,w,c
 17240  004656  B4D8               	btfsc	status,2,c
 17241  004658  D004               	goto	i2l4874
 17242  00465A  6C01               	negf	i2___awmod@dividend,c
 17243  00465C  1E02               	comf	i2___awmod@dividend+1,f,c
 17244  00465E  B0D8               	btfsc	status,0,c
 17245  004660  2A02               	incf	i2___awmod@dividend+1,f,c
 17246  004662                     i2l4874:
 17247  004662  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 17248  004666  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 17249  00466A  0012               	return	
 17250  00466C                     __end_ofi2___awmod:
 17251                           	opt stack 0
 17252                           pclatu	equ	0xFFB
 17253                           pclath	equ	0xFFA
 17254                           tblptru	equ	0xFF8
 17255                           tblptrh	equ	0xFF7
 17256                           tblptrl	equ	0xFF6
 17257                           tablat	equ	0xFF5
 17258                           prodh	equ	0xFF4
 17259                           prodl	equ	0xFF3
 17260                           intcon	equ	0xFF2
 17261                           intcon3	equ	0xFF0
 17262                           postinc0	equ	0xFEE
 17263                           fsr0h	equ	0xFEA
 17264                           fsr0l	equ	0xFE9
 17265                           wreg	equ	0xFE8
 17266                           postdec1	equ	0xFE5
 17267                           fsr1h	equ	0xFE2
 17268                           fsr1l	equ	0xFE1
 17269                           indf2	equ	0xFDF
 17270                           postinc2	equ	0xFDE
 17271                           postdec2	equ	0xFDD
 17272                           fsr2h	equ	0xFDA
 17273                           fsr2l	equ	0xFD9
 17274                           status	equ	0xFD8
 17275                           pclatu	equ	0xFFB
 17276                           pclath	equ	0xFFA
 17277                           tblptru	equ	0xFF8
 17278                           tblptrh	equ	0xFF7
 17279                           tblptrl	equ	0xFF6
 17280                           tablat	equ	0xFF5
 17281                           prodh	equ	0xFF4
 17282                           prodl	equ	0xFF3
 17283                           intcon	equ	0xFF2
 17284                           intcon3	equ	0xFF0
 17285                           postinc0	equ	0xFEE
 17286                           fsr0h	equ	0xFEA
 17287                           fsr0l	equ	0xFE9
 17288                           wreg	equ	0xFE8
 17289                           postdec1	equ	0xFE5
 17290                           fsr1h	equ	0xFE2
 17291                           fsr1l	equ	0xFE1
 17292                           indf2	equ	0xFDF
 17293                           postinc2	equ	0xFDE
 17294                           postdec2	equ	0xFDD
 17295                           fsr2h	equ	0xFDA
 17296                           fsr2l	equ	0xFD9
 17297                           status	equ	0xFD8
 17298                           
 17299                           	psect	rparam
 17300  0000                     pclatu	equ	0xFFB
 17301                           pclath	equ	0xFFA
 17302                           tblptru	equ	0xFF8
 17303                           tblptrh	equ	0xFF7
 17304                           tblptrl	equ	0xFF6
 17305                           tablat	equ	0xFF5
 17306                           prodh	equ	0xFF4
 17307                           prodl	equ	0xFF3
 17308                           intcon	equ	0xFF2
 17309                           intcon3	equ	0xFF0
 17310                           postinc0	equ	0xFEE
 17311                           fsr0h	equ	0xFEA
 17312                           fsr0l	equ	0xFE9
 17313                           wreg	equ	0xFE8
 17314                           postdec1	equ	0xFE5
 17315                           fsr1h	equ	0xFE2
 17316                           fsr1l	equ	0xFE1
 17317                           indf2	equ	0xFDF
 17318                           postinc2	equ	0xFDE
 17319                           postdec2	equ	0xFDD
 17320                           fsr2h	equ	0xFDA
 17321                           fsr2l	equ	0xFD9
 17322                           status	equ	0xFD8
 17323                           
 17324                           	psect	temp
 17325  00007C                     btemp:
 17326                           	opt stack 0
 17327  00007C                     	ds	1
 17328  0000                     int$flags	set	btemp
 17329                           pclatu	equ	0xFFB
 17330                           pclath	equ	0xFFA
 17331                           tblptru	equ	0xFF8
 17332                           tblptrh	equ	0xFF7
 17333                           tblptrl	equ	0xFF6
 17334                           tablat	equ	0xFF5
 17335                           prodh	equ	0xFF4
 17336                           prodl	equ	0xFF3
 17337                           intcon	equ	0xFF2
 17338                           intcon3	equ	0xFF0
 17339                           postinc0	equ	0xFEE
 17340                           fsr0h	equ	0xFEA
 17341                           fsr0l	equ	0xFE9
 17342                           wreg	equ	0xFE8
 17343                           postdec1	equ	0xFE5
 17344                           fsr1h	equ	0xFE2
 17345                           fsr1l	equ	0xFE1
 17346                           indf2	equ	0xFDF
 17347                           postinc2	equ	0xFDE
 17348                           postdec2	equ	0xFDD
 17349                           fsr2h	equ	0xFDA
 17350                           fsr2l	equ	0xFD9
 17351                           status	equ	0xFD8


Data Sizes:
    Strings     287
    Constant    174
    Data        53
    BSS         31
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    114     123
    BANK0           128    106     114
    BANK1           256     48     115
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_17(CODE[17]), STR_16(CODE[18]), STR_15(CODE[17]), STR_14(CODE[18]), 
		 -> STR_13(CODE[17]), STR_12(CODE[19]), STR_11(CODE[17]), STR_10(CODE[18]), 
		 -> STR_9(CODE[17]), STR_8(CODE[18]), STR_7(CODE[17]), STR_6(CODE[18]), 
		 -> STR_5(CODE[9]), STR_4(CODE[8]), STR_3(CODE[10]), STR_2(CODE[24]), 
		 -> STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 

    setAngle@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    initServo@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    servos	PTR int [4] size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    digitalWrite@pin	PTR int  size(2) Largest target is 4
		 -> AA_float(BANK1[4]), redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 
		 -> cylinderMotor(BANK1[4]), 

    digitalRead@pin	PTR int  size(2) Largest target is 4
		 -> padPin2(BANK1[4]), padPin1(BANK1[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _service in COMRAM

    _service->i2_printf
    i2_setAngle->i2_angleToPulse
    i2_angleToPulse->i2___fttol
    i2___ftdiv->i2___awtoft
    i2___awtoft->i2___ftpack
    i2___altoft->i2___ftpack
    i2_printf->i2___fttol
    i2_scale->i2___ftmul
    i2_lcdNewline->i2_lcdInst
    i2_fround->i2___ftmul
    i2___wmul->i2___awdiv
    i2___ftmul->i2___ftdiv
    i2___awdiv->i2___awmod
    i2___lltoft->i2___ftpack
    i2___llmod->i2___lldiv
    i2___fttol->i2___ftadd
    i2___ftsub->i2___ftadd
    i2___ftadd->i2_fround
    i2_lcdClear->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    _servoInterruptService->i2_digitalWrite
    i2_startTimer->i2___awmod
    i2_digitalWrite->i2___awmod

Critical Paths under _main in BANK0

    _main->_printf
    _sortBattery->_printf
    _printf->___fttol
    _scale->___ftmul
    _lcdNewline->_lcdInst
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___ftadd
    _lcdClear->_lcdInst
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    ___fttol->___ftadd
    ___ftmul->___ftdiv
    ___ftdiv->___altoft
    ___ftadd->_fround
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sortBattery
    _sortBattery->_printf
    _initServo->_setAngle
    _setAngle->_angleToPulse

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  151336
                       _digitalWrite
                            _initLCD
                          _initServo
                           _pinSetup
                             _printf
                        _sortBattery
 ---------------------------------------------------------------------------------
 (1) _sortBattery                                         18    18      0   81230
                                             30 BANK1     18    18      0
                           ___altoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                         _analogRead
                        _digitalRead
                       _digitalWrite
                           _lcdClear
                             _printf
                         _readKeypad
                           _setAngle
 ---------------------------------------------------------------------------------
 (2) _readKeypad                                           1     1      0      23
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _printf                                              45    38      7   49091
                                             99 BANK0      7     0      7
                                              0 BANK1     30    30      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   11010
                                             62 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     292
                                             18 BANK0      1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   10812
                                             62 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2513
                                             28 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1676
                                             14 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1580
                                             20 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     431
                                             14 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     591
                                             14 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2281
                                             22 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     671
                                             27 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     802
                                             14 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    3899
                                             84 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     109
                                             14 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1032
                                             14 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) _lcdClear                                             0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                         9     5      4    1146
                                             14 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) _digitalRead                                          4     2      2     238
                                             14 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           6     2      4     150
                                             14 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initServo                                            8     4      4   19734
                                             27 BANK1      8     4      4
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (2) _startTimer                                           8     2      6     486
                                             14 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            10     6      4   18543
                                            103 BANK0      2     2      0
                                             19 BANK1      8     4      4
                       _angleToPulse
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        23    19      4   17152
                                             99 BANK0      4     0      4
                                              0 BANK1     19    19      0
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     508
                                             84 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    4752
                                             47 BANK0     15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3042
                                             32 BANK0     15     9      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    3602
                                             72 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2303
                                             22 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2670
                                             22 BANK0     10     6      4
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2148
                                             14 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _initTimer                                            4     2      2     150
                                             14 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             18 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     135
                                             16 BANK0      2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             14 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _service                                             15    15      0   31238
                                            113 COMRAM     1     1      0
                                              0 BANK0     14    14      0
              _servoInterruptService
                         i2_lcdClear
                           i2_printf
                         i2_setAngle
 ---------------------------------------------------------------------------------
 (8) i2_setAngle                                          10     6      4    7042
                                            102 COMRAM    10     6      4
                     i2_angleToPulse
 ---------------------------------------------------------------------------------
 (9) i2_angleToPulse                                      23    19      4    6832
                                             79 COMRAM    23    19      4
                         i2___altoft
                         i2___awtoft
                          i2___ftadd
                          i2___ftdiv
                          i2___ftmul
                          i2___fttol
 ---------------------------------------------------------------------------------
 (10) i2___ftdiv                                          15     9      6    1031
                                             12 COMRAM    15     9      6
                         i2___awtoft (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (10) i2___awtoft                                          4     1      3     816
                                              8 COMRAM     4     1      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (10) i2___altoft                                         10     6      4     915
                                              8 COMRAM    10     6      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (8) i2_printf                                            42    38      4   22432
                                             79 COMRAM    34    30      4
                          i2___awdiv
                          i2___ftadd
                           i2___ftge
                          i2___ftmul
                          i2___ftneg
                          i2___ftsub
                          i2___fttol
                          i2___lldiv
                          i2___llmod
                         i2___lltoft
                           i2___wmul
                       i2__div_to_l_
                      i2__tdiv_to_l_
                           i2_fround
                            i2_putch
                            i2_scale
 ---------------------------------------------------------------------------------
 (9) i2_scale                                             13    10      3    5023
                                             42 COMRAM     7     4      3
                          i2___awdiv
                          i2___awmod
                          i2___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (9) i2_putch                                              1     1      0     292
                                              4 COMRAM     1     1      0
                       i2_lcdNewline
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_lcdNewline                                        0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (9) i2_fround                                            16    13      3    4825
                                             42 COMRAM    10     7      3
                          i2___awdiv
                          i2___awmod
                          i2___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     989
                                             14 COMRAM     6     2      4
                          i2___awdiv (ARG)
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___ftmul                                          15     9      6    1805
                                             27 COMRAM    15     9      6
                         i2___altoft (ARG)
                          i2___awdiv (ARG)
                          i2___awmod (ARG)
                         i2___awtoft (ARG)
                          i2___ftdiv (ARG)
                         i2___ftpack
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___awdiv                                           8     4      4     820
                                              6 COMRAM     8     4      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (9) i2__tdiv_to_l_                                       15     9      6     355
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (9) i2__div_to_l_                                        12     6      6     481
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (9) i2___lltoft                                           9     5      4     794
                                              8 COMRAM     9     5      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) i2___llmod                                            9     1      8     367
                                             13 COMRAM     9     1      8
                          i2___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___lldiv                                           13     5      8     370
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (10) i2___fttol                                          15    11      4     356
                                             64 COMRAM    15    11      4
                         i2___altoft (ARG)
                          i2___ftadd (ARG)
                          i2___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___ftsub                                            6     0      6    1866
                                             64 COMRAM     6     0      6
                          i2___ftadd
                         i2___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___ftadd                                          12     6      6    1747
                                             52 COMRAM    12     6      6
                         i2___altoft (ARG)
                         i2___awtoft (ARG)
                          i2___ftdiv (ARG)
                          i2___ftmul (ARG)
                         i2___ftpack
                           i2_fround (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___ftpack                                          8     3      5     699
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) i2___ftneg                                            3     0      3      71
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) i2___ftge                                             9     3      6     292
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (8) i2_lcdClear                                           0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           2     2      0     135
                                              2 COMRAM     2     2      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _servoInterruptService                                4     4      0    1584
                                             15 COMRAM     4     4      0
                          i2___awmod
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) i2_startTimer                                         8     2      6     206
                                              6 COMRAM     8     2      6
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (9) i2_digitalWrite                                       9     5      4     458
                                              6 COMRAM     9     5      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___awmod                                           6     2      4     920
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _digitalWrite
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _startTimer
   _pinSetup
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _putch
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _sortBattery
     ___altoft
       ___ftpack
       _analogRead (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftge
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     _analogRead
     _digitalRead
     _digitalWrite
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _putch
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)

 _service (ROOT)
   _servoInterruptService
     i2___awmod
     i2_digitalWrite
       i2___awmod (ARG)
     i2_startTimer
       i2___awmod (ARG)
   i2_lcdClear
     i2_lcdInst
       i2_lcdNibble
   i2_printf
     i2___awdiv
       i2___awmod (ARG)
     i2___ftadd
       i2___altoft (ARG)
         i2___ftpack
       i2___awtoft (ARG)
         i2___ftpack
       i2___ftdiv (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
       i2___ftmul (ARG)
         i2___altoft (ARG)
           i2___ftpack
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___ftpack (ARG)
       i2_fround (ARG)
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           i2___altoft (ARG)
             i2___ftpack
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftdiv (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
     i2___ftge
     i2___ftmul
       i2___altoft (ARG)
         i2___ftpack
       i2___awdiv (ARG)
         i2___awmod (ARG)
       i2___awmod (ARG)
       i2___awtoft (ARG)
         i2___ftpack
       i2___ftdiv (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
       i2___ftpack (ARG)
       i2___wmul (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
     i2___ftneg
     i2___ftsub
       i2___ftadd
         i2___altoft (ARG)
           i2___ftpack
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftmul (ARG)
           i2___altoft (ARG)
             i2___ftpack
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftdiv (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___ftpack (ARG)
         i2_fround (ARG)
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             i2___altoft (ARG)
               i2___ftpack
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftdiv (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___lltoft (ARG)
         i2___ftpack
     i2___fttol
       i2___altoft (ARG)
         i2___ftpack
       i2___ftadd (ARG)
         i2___altoft (ARG)
           i2___ftpack
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftmul (ARG)
           i2___altoft (ARG)
             i2___ftpack
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftdiv (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___ftpack (ARG)
         i2_fround (ARG)
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             i2___altoft (ARG)
               i2___ftpack
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftdiv (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___ftmul (ARG)
         i2___altoft (ARG)
           i2___ftpack
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
     i2___lldiv
     i2___llmod
       i2___lldiv (ARG)
     i2___lltoft
       i2___ftpack
     i2___wmul
       i2___awdiv (ARG)
         i2___awmod (ARG)
       i2___awmod (ARG)
     i2__div_to_l_
     i2__tdiv_to_l_
     i2_fround
       i2___awdiv
         i2___awmod (ARG)
       i2___awmod
       i2___ftmul
         i2___altoft (ARG)
           i2___ftpack
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___wmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
     i2_putch
       i2_lcdNewline
         i2_lcdInst
           i2_lcdNibble
       i2_lcdNibble
     i2_scale
       i2___awdiv
         i2___awmod (ARG)
       i2___awmod
       i2___ftmul
         i2___altoft (ARG)
           i2___ftpack
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___wmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
   i2_setAngle
     i2_angleToPulse
       i2___altoft
         i2___ftpack
       i2___awtoft
         i2___ftpack
       i2___ftadd
         i2___altoft (ARG)
           i2___ftpack
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftmul (ARG)
           i2___altoft (ARG)
             i2___ftpack
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftdiv (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___ftpack (ARG)
         i2_fround (ARG)
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             i2___altoft (ARG)
               i2___ftpack
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftdiv (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___ftdiv
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
       i2___ftmul
         i2___altoft (ARG)
           i2___ftpack
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___fttol
         i2___altoft (ARG)
           i2___ftpack
         i2___ftadd (ARG)
           i2___altoft (ARG)
             i2___ftpack
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftdiv (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftmul (ARG)
             i2___altoft (ARG)
               i2___ftpack
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftdiv (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___ftpack (ARG)
           i2_fround (ARG)
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               i2___altoft (ARG)
                 i2___ftpack
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftdiv (ARG)
                 i2___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftmul (ARG)
           i2___altoft (ARG)
             i2___ftpack
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftdiv (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     30      73       7       44.9%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     6A      72       5       89.1%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     72      7B       1       97.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     160      34        0.0%
DATA                 0      0     160       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Mar 25 21:54:41 2017

                  ___altoft@exp 009E                               _n 0171                   ___altoft@sign 009F  
                   _sortBattery 19FA                    ___awdiv@sign 0099                      i2___altoft 4584  
           ___wmul@multiplicand 009E                     __CFG_BORV$3 000000                      i2___awtoft 4A7E  
                    i2___ftpack 3F4A                    __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000  
                  __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000                     __CFG_OSC$HS 000000  
              _redirectingServo 012F                    ___ftadd@exp1 00D3                    ___ftadd@exp2 00D2  
                    i2___lltoft 47A2                    ___ftadd@sign 00D1                             l130 1CCC  
                           l114 41D0                             l204 4B50                             l302 49CC  
                           l207 4B5E                             l168 4BB8                             l277 32CE  
                           l383 4800                             l376 492A                             l385 480C  
                           l386 4818                             l657 06C4                             l685 0544  
                           l926 29CE                             l981 20C8                             l958 34D6  
                           l985 2102                             l987 212A                             l996 2200  
                  __CFG_CPB$OFF 000000                             _PEN 007E2A                    __CFG_CPD$OFF 000000  
                           _SEN 007E28                    ___awmod@sign 0093                             wreg 000FE8  
                    i2_lcdClear 4C72                    __CFG_LVP$OFF 000000                    ___ftdiv@cntr 00A9  
                  ___ftdiv@sign 00AE                    __CFG_WDT$OFF 000000                            l1100 3E8A  
                          l1005 222A                            l1110 425A                            l1030 2846  
                          l1023 2782                            l1016 2DBA                            l1024 27C6  
                          l1055 4B42                            l4100 34C8                            l4112 34FC  
                          l4200 21B8                            l4106 34E0                            l4300 2C08  
                          l4150 40C6                            l4214 2254                            l4206 21E6  
                          l4310 2C46                            l4152 40D6                            l4224 22A2  
                          l4208 21F4                            l4240 2D18                            l4304 2C26  
                          l5120 36A4                            l5112 3680                            l4090 343A  
                          l4410 4996                            l4234 2CDE                            l4314 2C64  
                          l5130 36D4                            l5114 3688                            l4330 3D3E  
                          l4092 346A                            l4084 3418                            l4172 2110  
                          l4260 2D78                            l4420 2E2A                            l5124 36B8  
                          l5108 366C                            l5132 36DC                            l4166 20D6  
                          l5126 36C0                            l5118 369C                            l4342 3D72  
                          l4096 348A                            l4088 342C                            l4280 2B80  
                          l4344 3D7E                            l4336 3D54                            l4098 34BA  
                          l4194 2190                            l4178 2120                            l4450 2EFC  
                          l4442 2ED0                            l4362 3DD6                            l4354 3DB4  
                          l4346 3D84                            l4530 1F34                            l4196 219E  
                          l4188 2162                            l4452 2F06                            l4700 4870  
                          l5422 48E8                            l4198 21AC                            l4286 2BBA  
                          l4438 2EBC                            l4622 27FC                            l4358 3DC2  
                          l4390 406E                            l4382 4038                            l4374 4014  
                          l5432 48FA                            l4456 2F22                            l4448 2EEC  
                          l4712 3C12                            l4632 282C                            l4384 4044  
                          l4552 12CE                            l4642 287E                            l4634 283C  
                          l4626 2810                            l4386 404A                            l4394 407C  
                          l4378 4024                            l4538 2018                            l4570 151E  
                          l4562 13BA                            l5428 48F2                            l5452 4824  
                          l5380 31E4                            l4708 3BD2                            l4732 3E0E  
                          l5438 4902                            l4718 3C56                            l4734 3E1E  
                          l4670 294C                            l4662 28F8                            l4398 4090  
                          l4558 1394                            l5384 3220                            l5376 31A8  
                          l4744 3E78                            l4736 3E24                            l4760 4248  
                          l4752 41EE                            l4648 28A4                            l4592 272E  
                          l4576 15E4                            l6600 038E                            l6520 004A  
                          l6512 0022                            l5394 3298                            l4754 41FE  
                          l4682 2984                            l4586 26F4                            l6522 0050  
                          l6530 0074                            l5388 325C                            l4756 4204  
                          l4692 29B4                            l6604 03F4                            l6532 00B2  
                          l6516 0038                            l4766 4498                            l4694 29C4  
                          l4686 2998                            l6710 07E4                            l6630 0504  
                          l6622 0468                            l6606 03FA                            l6526 0068  
                          l6518 0044                            l4768 44A8                            l6640 0548  
                          l6714 080A                            l6650 05BE                            l6634 0512  
                          l6618 0440                            l6570 022E                            l6562 01BE  
                          l6546 010C                            l6730 0944                            l6802 1CD6  
                          l6716 081A                            l6724 0914                            l6708 07D2  
                          l6636 0526                            l6628 04F6                            l6580 02B8  
                          l6804 1CFE                            l6734 3AD4                            l6742 3B52  
                          l6718 089E                            l6726 0926                            l6662 06B6  
                          l6646 056C                            l6590 0330                            l6574 025C  
                          l6830 41A4                            l6728 092E                            l6680 0740  
                          l6656 069A                            l6576 0272                            l6832 41B4  
                          l6738 3B2A                            l6674 0710                            l6658 06A8  
                          l6586 0302                            l6578 02A2                            l6692 0786  
                          l6780 1B90                            l6694 078C                            l6678 073A  
                          l6792 1C74                            l6796 1CA0                            _EEIF 007D0C  
         __size_ofi2__div_to_l_ 0128                            STR_1 FFF6                            STR_2 FEDF  
                          STR_3 FFDB                            STR_4 FFEE                            STR_5 FFE5  
                          STR_6 FF1C                            STR_7 FFCA                            STR_8 FF0A  
                          STR_9 FF97                            _LATA 000F89                            _LATB 000F8A  
                          _LATC 000F8B                            _LATD 000F8C                            _LATE 000F8D  
                          u4041 2E06                            u4060 2E50                            u4301 270A  
                          u3601 2094                            u4065 2E46                    printf@tmpval 0145  
                          u5124 364A                            u5125 3642                            u3801 2CBA  
                          u4281 26D0                            _PEIE 007F96                            u3821 2CF4  
                          u3591 2076                            u3851 2B5C                            _RCEN 007E2B  
                          u3871 2B96                            u5554 31CC                            u5555 31C6  
                          u5564 3208                            u5565 3202                            u5574 3244  
                          u5575 323E                            u5584 3280                            u5585 327A  
                          u7507 4938                            u6820 0152                            u7517 496E  
                          u7527 4B82                            u7447 1A3C                            u7537 4B98  
                          u6825 0146                            u7457 1A70                            u7547 452C  
                          u7467 1BB2                            u7557 453A                            u7477 1D24  
                          u7567 456A                            u7487 1D58                            u7577 4578  
                          u7497 4BBC                            u6980 053C                            _RSEN 007E29  
                          _main 4138                            _curr 0075                    ___ftpack@arg 008E  
                  i2___altoft@c 0009                            _keys FEC7                    ___ftpack@exp 0091  
                          fsr0h 000FEA                            fsr1h 000FE2                            fsr2h 000FDA  
                          fsr0l 000FE9                            indf2 000FDF                            fsr1l 000FE1  
                          fsr2l 000FD9                            btemp 007C                    i2___ftadd@f1 0035  
                  i2___ftadd@f2 0038                    i2___ftge@ff1 0001                    i2___ftge@ff2 0004  
                          prodh 000FF4                            prodl 000FF3                            start 000E  
                    i2_setAngle 3E9C                   __CFG_IESO$OFF 000000                    i2___ftdiv@f1 000D  
                  i2___ftdiv@f2 0010                    i2___ftdiv@f3 0017                 __end_ofi2_scale 19FA  
                  i2___ftneg@f1 0001                 __end_ofi2_putch 4C38                    i2___awtoft@c 0009  
                 __CFG_MCLRE$ON 000000                    ___ftmul@cntr 00BC                    i2___ftmul@f1 001C  
                  i2___ftmul@f2 001F                    ___param_bank 000000                    ___ftmul@sign 00BD  
                  i2___ftsub@f1 0041                    i2___ftsub@f2 0044                    i2___fttol@f1 0041  
                   i2_lcdNibble 473C                    ___fttol@exp1 00E2                    i2___lltoft@c 0009  
                  ___fttol@lval 00DE            __end_ofi2_startTimer 48E6            __end_of_angleToPulse 2B46  
                         ?_main 0001                           _ACKEN 007E2C                           _ACKDT 007E2D  
               __end_of___awdiv 3DE0                           _EEADR 000FA9                 __end_of___ftadd 22C8  
                         STR_10 FF2E                           STR_11 FF86                           STR_12 FEF7  
                         STR_13 FFA8                           STR_14 FF40                           STR_15 FF75  
                         STR_16 FF52                           STR_17 FFB9                           STR_18 FF64  
               __end_of___awmod 409A                 __end_of___ftdiv 2DF0         ??_servoInterruptService 0010  
               __end_of___ftneg 4B50                 __end_of___lldiv 3E9C                 __end_of___ftmul 2CA4  
                         _T0CON 000FD5                 ___awdiv@divisor 0096                           _T1CON 000FCD  
               __end_of___llmod 426C                 __end_of___ftsub 489A                 __end_of___fttol 2F34  
                         _T3CON 000FB1                           i2l144 3A82                           i2l168 4C26  
                         i2l383 489C                           i2l385 48A8                           i2l386 48B4  
                         i2l657 0F26                           i2l685 0DC6                           i2l926 33EC  
               ___awdiv@counter 0098                           i2l981 2552                           i2l958 3FD8  
                         i2l985 257C                           i2l996 262C                           _TMR0H 000FD7  
                         _TMR1H 000FCF                           _TMR0L 000FD6                           _TMR3H 000FB3  
                         _TMR1L 000FCE                           _TMR3L 000FB2                           _PORTA 000F80  
                         _PORTB 000F81                           _PORTC 000F82                           _PORTD 000F83  
                  i2__div_to_l_ 32D6                           _TRISA 000F92                           _TRISB 000F93  
                         _TRISC 000F94                           _TRISD 000F95                           _TRISE 000F96  
                 __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000  
                 __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000                    ___lltoft@exp 009E  
                 _conveyorServo 011B                 __end_of_lcdInst 4BA4                  __CFG_EBTR0$OFF 000000  
                __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000  
                __CFG_EBTR3$OFF 000000           __size_ofi2_lcdNewline 0008                   __CFG_WRTB$OFF 000000  
                 __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000                 __end_of_initLCD 497A  
                __CFG_EBTRB$OFF 000000                   ___awtoft@sign 0099                           _angle 007A  
               __end_of_dpowers FE59                      i2scale@scl 0031                           _count 0073  
                         _scale 115C                   ___ftpack@sign 0092                           _pulse 00EA  
                         _putch 4BA4                           pclath 000FFA                           tablat 000FF5  
              __end_ofi2___ftge 42FC                 __end_of_service 3ABE                __end_ofi2___wmul 4BF2  
                         status 000FD8                __end_ofi2_fround 250E                   i2___ftdiv@exp 001A  
            __size_ofi2___awdiv 0084              __size_ofi2___ftadd 01AC              __size_ofi2___awmod 0070  
                __CFG_PBADEN$ON 000000              __size_ofi2___ftdiv 00E6              __size_ofi2___ftneg 0024  
            __size_ofi2___lldiv 0082              __size_ofi2___ftmul 00F4              __size_ofi2___llmod 0066  
            __size_ofi2___ftsub 0040              __size_ofi2___fttol 00F4                __end_ofi2_printf 115C  
          __end_of_digitalWrite 3714                 __initialization 466C               i2___lldiv@divisor 0005  
            __size_ofi2_lcdInst 0022                    __end_of_main 41D2               i2___lldiv@counter 000D  
                  __end_of_keys FED8                   i2___ftmul@exp 0025                      i2printf@ap 005E  
                   ?i2___altoft 0009                     ?i2___awtoft 0009                     ?i2___ftpack 0001  
                  i2_lcdNewline 4C6A                     ?i2___lltoft 0009                          ??_main 00EA  
                 ___fttol@sign1 00DD                   __activetblptr 000002            __size_of_digitalRead 0130  
          __size_of__tdiv_to_l_ 019E                 i2digitalWrite@p 000E                     ?i2_lcdClear 0001  
                        _ADCON0 000FC2                          _ADCON1 000FC1                          _ADCON2 000FC0  
              __end_of___altoft 4138                ___llmod@dividend 009B                          ?_scale 00BE  
                        _ADRESH 000FC4                          _EEADRH 000FAA                          _ADRESL 000FC3  
                        _EEDATA 000FA8                          _EECON1 000FA6                          _EECON2 000FA7  
              ___awdiv@dividend 0094                 i2lcdNibble@data 0002                __end_of___awtoft 49BE  
                        ?_putch 0001                __end_of___ftpack 350A                 i2lcdNibble@temp 0001  
              __end_of___lltoft 450C                          _INT0IE 007F94                          _INT0IF 007F91  
                        _INT1IE 007F83                          _INT1IF 007F80                    sortBattery@V 0160  
                        i2l1100 447E                          i2l1005 2648                          i2l1110 472A  
                        i2l1030 3194                          i2l1023 3106                          i2l1024 312E  
                        i2l1016 39B0                          i2l1055 4C08                          i2l5012 373C  
                        i2l5032 3796                          i2l5042 37BE                          i2l5018 3764  
                        i2l5060 3834                          i2l5036 37A6                          i2l6100 0FC8  
                        i2l6012 0CAC                          i2l5046 37CE                          i2l6102 0FCC  
                        i2l6030 0D04                          i2l6014 0CB0                          i2l6008 0C48  
                        i2l5090 38CE                          i2l5082 38AA                          i2l6122 102E  
                        i2l6042 0DA2                          i2l6026 0CE8                          i2l5500 3CEE  
                        i2l5092 38D4                          i2l6124 103A                          i2l6132 111C  
                        i2l6116 1004                          i2l6044 0DB0                          i2l6036 0D8C  
                        i2l5078 389A                          i2l6126 10B2                          i2l6134 112C  
                        i2l6118 1014                          i2l6070 0F1C                          i2l6054 0DE2  
                        i2l6038 0D96                          i2l4480 3F90                          i2l4472 3F5A  
                        i2l5096 38EA                          i2l5088 38C2                          i2l5600 3312  
                        i2l6136 1132                          i2l6064 0F06                          i2l6048 0DCA  
                        i2l5514 48C0                          i2l6082 0F66                          i2l6066 0F10  
                        i2l6058 0E32                          i2l6138 1142                          i2l4484 3FA6  
                        i2l4476 3F68                          i2l5700 3182                          i2l4820 43CC  
                        i2l4812 43AE                          i2l4486 3FC4                          i2l4478 3F72  
                        i2l5622 3384                          i2l5614 3354                          i2l5702 318E  
                        i2l4830 43EC                          i2l4822 43D0                          i2l4806 439E  
                        i2l6086 0F8C                          i2l6182 3A56                          i2l6166 3A30  
                        i2l5480 3CAC                          i2l5712 42CC                          i2l4488 3FCE  
                        i2l4920 25BA                          i2l4904 258A                          i2l5560 173E  
                        i2l6088 0F90                          i2l4850 4610                          i2l5482 3CB2  
                        i2l4930 25F0                          i2l5730 4A16                          i2l5634 33B2  
                        i2l4818 43C4                          i2l4834 43F6                          i2l5546 24CE  
                        i2l5538 240E                          i2l5570 1806                          i2l6178 3A4A  
                        i2l4860 4632                          i2l5492 3CD4                          i2l5476 3C9E  
                        i2l5708 429C                          i2l4940 2624                          i2l4932 25F8  
                        i2l5740 4430                          i2l5644 33DA                          i2l5660 30CC  
                        i2l4862 4636                          i2l4870 4654                          i2l4854 461C  
                        i2l5494 3CDA                          i2l5486 3CC0                          i2l5718 42F8  
                        i2l4926 25DC                          i2l5742 443C                          i2l5646 33E6  
                        i2l5638 33C2                          i2l5654 30A0                          i2l4838 4404  
                        i2l5566 17E2                          i2l4790 45A6                          i2l5910 3EF4  
                        i2l5488 3CC6                          i2l4928 25E6                          i2l5752 4470  
                        i2l5744 4440                          i2l5760 46E8                          i2l5584 19D6  
                        i2l5920 096E                          i2l4792 45B2                          i2l4874 4662  
                        i2l4866 464A                          i2l4858 462A                          i2l5498 3CE8  
                        i2l4946 2664                          i2l4938 261A                          i2l5762 46F4  
                        i2l5594 32F4                          i2l5690 315A                          i2l5578 1932  
                        i2l5930 0990                          i2l5906 3EAE                          i2l5914 3F12  
                        i2l4956 2694                          i2l5764 46F8                          i2l5940 09E6  
                        i2l5924 097E                          i2l4972 394C                          i2l5774 47A8  
                        i2l5694 316A                          i2l5934 09A4                          i2l5926 0988  
                        i2l4886 4A92                          i2l4966 3924                          i2l5768 471C  
                        i2l5776 47B4                          i2l5928 098C                          i2l4992 398A  
                        i2l4898 2560                          i2l5970 0AC6                          i2l5954 0A36  
                        i2l5938 09AC                          i2l5982 0B4E                          i2l5984 0B5E  
                        i2l5994 0BD0                          i2l5986 0B8C                          i2l5978 0B2A  
                        i2l5988 0B9C                          i2l5998 0BF4                          u503_41 3818  
                     ??i2_scale 002E                          u471_41 251E                          u472_41 2532  
                        u492_41 390C                          u494_41 3934                          u584_41 3084  
                        u497_41 3724                          u586_41 30B0                          u499_41 374C  
                        _TMR0IE 007F95                          _TMR0IF 007F92                       ??i2_putch 0005  
                        _TMR1IE 007CE8                          _TMR3IE 007D01                          _SSPADD 000FC8  
                        _TRISC3 007CA3                          _TRISC4 007CA4                          _SSPBUF 000FC9  
        __size_ofi2__tdiv_to_l_ 0132                     ?i2_setAngle 0067               _angleToPulse$1311 013F  
              __end_of_lcdClear 4C6A                  __CFG_XINST$OFF 000000                    i2_scale$1544 002E  
              __end_of__powers_ FEA7                          ___ftge 3B92                          ___wmul 4AB6  
                     ??___awdiv 0098                       ??___ftadd 00CE                  __CFG_STVREN$ON 000000  
                     ??___awmod 0092                       ??___ftdiv 00A6                       ??___ftneg 0091  
                     ??___lldiv 0096                       ??___ftmul 00B5                       ??___llmod 00A3  
                     ??___ftsub 00DA                       ??___fttol 00D8                          _fround 1DB4  
                i2___altoft@exp 0011                          clear_0 46AA                          clear_1 46B6  
                        clear_2 46C2                ___awdiv@quotient 009A                 ___awmod@divisor 0090  
               ___awmod@counter 0092                          _servos 0163                       ??_lcdInst 0090  
                        _printf 0012                __end_of_pinSetup 4A7E                __end_of_setAngle 3B92  
                i2___awdiv@sign 000C               analogRead@channel 008E           ___ftmul@f3_as_product 00B9  
                     ??_initLCD 0092                    __pdataCOMRAM 007A               __end_ofi2___awdiv 440E  
             __end_ofi2___ftadd 26BA                     i2setAngle@i 006F               __end_ofi2___awmod 466C  
             __end_ofi2___ftdiv 39E2                  i2___ftadd@exp1 0040                  i2___ftadd@exp2 003F  
             __end_ofi2___ftneg 4C16               __end_ofi2___lldiv 4490               __end_ofi2___ftmul 3808  
                 setAngle@angle 0148               __end_ofi2___llmod 473C               __end_ofi2___ftsub 4A40  
             __end_ofi2___fttol 38FC                  i2___ftadd@sign 003E                    __mediumconst FE30  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
                 setAngle@motor 0146                       ??_service 0080                  i2___awmod@sign 0006  
             __end_ofi2_lcdInst 4C5A                  i2___ftdiv@cntr 0016                      __accesstop 0080  
       __end_of__initialization 46C8                      ___altoft@c 0096             __size_ofi2___altoft 0078  
                i2___ftdiv@sign 001B                      ___ftadd@f1 00C8                      ___ftadd@f2 00CB  
           __size_ofi2___awtoft 0038             __size_ofi2___ftpack 00AE                  i2printf@tmpval 0066  
                    ___ftge@ff1 008E                      ___ftge@ff2 0091             __size_ofi2___lltoft 005C  
                 ___rparam_used 000001                      ___ftdiv@f1 00A0                      ___ftdiv@f2 00A3  
                    ___ftdiv@f3 00AA                      ___ftneg@f1 008E                      ___awtoft@c 0096  
                i2___ftpack@arg 0001           __size_ofi2_startTimer 004C              i2__tdiv_to_l_@exp1 000F  
             i2___llmod@divisor 0012                  i2___ftpack@exp 0004              i2__tdiv_to_l_@cntr 000E  
             i2___llmod@counter 0016              i2__tdiv_to_l_@quot 000A                      ___ftmul@f1 00AF  
                    ___ftmul@f2 00B2                      ___ftsub@f1 00D4                      ___ftsub@f2 00D7  
                    ___fttol@f1 00D4            __end_of_happynewyear FEDF                  __pcstackCOMRAM 0001  
            i2___lldiv@dividend 0001           __size_of_angleToPulse 0166             __size_ofi2_lcdClear 0008  
                  __pidataBANK1 4AEC                      ___lltoft@c 0096                   _cylinderMotor 011F  
                i2___ftmul@cntr 0029                   __end_of_scale 160A                    ?_sortBattery 0001  
                i2___ftmul@sign 002A                   __end_of_putch 4BCC                     i2printf@idx 005D  
                   i2printf@exp 0064                     i2printf@val 006A                  i2___fttol@exp1 004F  
                i2___fttol@lval 004B                       ?i2___ftge 0001                       ?i2___wmul 000F  
                 i2__tdiv_to_l_ 3074              __size_of_lcdNibble 0078                      __div_to_l_ 2858  
                   i2putch@data 0005             __size_ofi2_setAngle 00AE                       ?i2_fround 002B  
                     ?i2_printf 0050                i2setAngle@period 006D                 __div_to_l_@exp1 0099  
               __div_to_l_@cntr 0098                         ??_scale 00C1                  i2___lltoft@exp 0011  
               __div_to_l_@quot 0094                         ??_putch 0092              i2___lldiv@quotient 0009  
                  i2_startTimer 489A                      __pbssBANK0 00EA                      __pbssBANK1 0163  
              i2__tdiv_to_l_@f1 0001                i2__tdiv_to_l_@f2 0004                    _angleToPulse 29E0  
         __size_of_digitalWrite 0104              __size_of_initTimer 004A              __size_of_initServo 008E  
                    _analogRead 49BE                   __div_to_l_@f1 008E                   __div_to_l_@f2 0091  
       __size_ofi2_angleToPulse 0140                         ?___ftge 008E                    ?i2_lcdNibble 0001  
                       ?___wmul 009C           sortBattery@resolution 0159                       ?___altoft 0096  
                       ?_fround 00BE                      _lcdNewline 4C5A                       ?___awtoft 0096  
                     ?___ftpack 008E                         ?_printf 00E3                       ?___lltoft 0096  
                ?i2__tdiv_to_l_ 0001                      ??i2___ftge 0007                      ??i2___wmul 0013  
__size_of_servoInterruptService 0106   __end_of_servoInterruptService 3610                      ??i2_fround 002E  
             i2startTimer@timer 0007                       ?_lcdClear 0001                angleToPulse@a000 0142  
                    ??i2_printf 0054                angleToPulse@a180 013B                    _digitalWrite 3610  
                       _SSPCON1 000FC6                         _SSPCON2 000FC5                         _SSPSTAT 000FC7  
       __size_ofi2_digitalWrite 00C8                         i2_scale 160A                         _V_LIM_C 0106  
                       i2_putch 4C16                       ?_pinSetup 0001                       ?_setAngle 0146  
             __end_of_lcdNibble 4584               __end_of__npowers_ FE80                         __Hparam 0000  
                    _scale$1314 00C1                         __Lparam 0000                 __size_of___ftge 00C8  
                       ___awdiv 3D22                         ___ftadd 2060                         ___awmod 3FF8  
                    _readKeypad 4B50                         ___ftdiv 2CA4                         ___ftneg 4B20  
                       ___lldiv 3DE0                 __size_of___wmul 0036                         ___ftmul 2B46  
                       ___llmod 41D2                         ___ftsub 484E                         ___fttol 2DF0  
                  ??i2___altoft 000D                      ??___altoft 009A                         __pcinit 466C  
                  ??i2___awtoft 000C                    ??i2___ftpack 0006                      ??___awtoft 0099  
                    ??___ftpack 0093                 __size_of_fround 02AC         i2___ftmul@f3_as_product 0026  
                       __ramtop 1000                    ??i2___lltoft 000D                         _lcdInst 4B7A  
                    ??___lltoft 009A                         __ptext0 4138                         __ptext1 19FA  
                       __ptext2 4B50                         __ptext3 0012                         __ptext4 115C  
                       __ptext5 4BA4                         __ptext6 4C5A                         __ptext7 1DB4  
                       __ptext8 4AB6                         __ptext9 3FF8                 __size_of_printf 0952  
                       _padPin1 0123                         _padPin2 0127                         _padPin3 016B  
                 i2_fround$1542 0031                   i2_fround$1543 002E                   startTimer@val 0090  
                       _initLCD 4930               __end_of_hexpowers FEC7                     ?__div_to_l_ 008E  
                       _lastKey 0079               __end_of_initTimer 4930               __end_of_initServo 438A  
                       _dpowers FE31                    i2fround@prec 0034                ___awmod@dividend 008E  
               i2___altoft@sign 0012                    ??i2_lcdClear 0005                      ??_lcdClear 0092  
                       _service 0008                  __pintcode_body 39E2            end_of_initialization 46C8  
           i2angleToPulse@angle 0050                   __Lmediumconst FE30                         int_func 39E2  
           i2___wmul@multiplier 000F              __end_ofi2___altoft 45FC                  digitalRead@pin 008E  
                   ?_analogRead 008E              __end_ofi2___awtoft 4AB6              __end_ofi2___ftpack 3FF8  
                  ??i2_setAngle 006B                      ??_pinSetup 008E                      ??_setAngle 00E7  
            __end_ofi2___lltoft 47FE                 ___lldiv@divisor 0092                 ___lldiv@counter 009A  
                setAngle@period 014A                         printf@c 0150                         printf@f 00E3  
                       postdec1 000FE5                         postdec2 000FDD                 _batteryDetected 016F  
                       postinc0 000FEE                         postinc2 000FDE              __end_ofi2_lcdClear 4C7A  
                __tdiv_to_l_@f1 008E                  __tdiv_to_l_@f2 0091                 ??i2__tdiv_to_l_ 0007  
                 ??_digitalRead 0090                     ?_lcdNewline 0001                   ??__tdiv_to_l_ 0094  
                     _PORTBbits 000F81            __size_of_sortBattery 03BA              __end_ofi2_setAngle 3F4A  
           _redirectAngle_OTHER 0115                    _happynewyear FED8              angleToPulse@offset 0137  
            sortBattery@V_float 0153                       i2___awdiv 438A                       i2___ftadd 250E  
                     i2___awmod 45FC                       i2___ftdiv 38FC                       i2___ftneg 4BF2  
                     i2___lldiv 440E                       i2___ftmul 3714                       i2___llmod 46D6  
                     i2___ftsub 4A00                       i2___fttol 3808                      _startTimer 47FE  
                     i2_lcdInst 4C38                     ___ftdiv@exp 00AD                 i2___awtoft@sign 000C  
            i2___llmod@dividend 000E              i2___awdiv@dividend 0007                 i2___ftpack@sign 0005  
           __size_of__div_to_l_ 0188                  i2_angleToPulse 2F34                     ___ftmul@exp 00B8  
                   ?_readKeypad 0001                  __end_of___ftge 3C5A                  __end_of___wmul 4AEC  
          __size_ofi2_lcdNibble 0066                   __pidataCOMRAM 4C7A                   i2lcdInst@data 0004  
                __end_of_fround 2060                i2___wmul@product 0013                  __end_of_printf 0964  
                 i2_printf$1545 005A                    i2printf@flag 0060                    i2printf@fval 006E  
           __size_of_analogRead 0042                    i2printf@prec 0062             start_initialization 466C  
             __size_ofi2___ftge 0090             __end_of_digitalRead 32D6              i2___awdiv@quotient 000D  
             __size_ofi2___wmul 0026             __end_of__tdiv_to_l_ 2858                  initServo@angle 0150  
                     i2printf@c 0071                       i2printf@f 0050                  initTimer@timer 008E  
               i2___fttol@sign1 004A                  initServo@motor 014E               __size_ofi2_fround 0246  
                    ?i2___awdiv 0007                      ?i2___ftadd 0035                      ?i2___awmod 0001  
                    ?i2___ftdiv 000D                      ?i2___ftneg 0001                      ?i2___lldiv 0001  
                    ?i2___ftmul 001C                      ?i2___llmod 000E                      ?i2___ftsub 0041  
                    ?i2___fttol 0041               __size_ofi2_printf 07F8                  i2_digitalWrite 3C5A  
                    ?i2_lcdInst 0001             __size_of_lcdNewline 0008          __end_ofi2_angleToPulse 3074  
               ___llmod@divisor 009F                 ___llmod@counter 00A3                        ??___ftge 0094  
                      ??___wmul 00A0                     __pdataBANK1 0100                __CFG_LPT1OSC$OFF 000000  
                      ??_fround 00C1                        ??_printf 0133               __size_of___altoft 009E  
                    fround@prec 00C7                   ?i2__div_to_l_ 0001               __size_of___awtoft 0044  
             __size_of___ftpack 010C               __size_of___lltoft 007C                     __pbssCOMRAM 0073  
                 __pcstackBANK0 0080                   __pcstackBANK1 0133          __end_ofi2_digitalWrite 3D22  
        sortBattery@targetAngle 015E                     ?_startTimer 008E               __size_of_lcdClear 0008  
           __size_of_readKeypad 002A                 i2setAngle@angle 0069                        ?i2_scale 002B  
                      ?i2_putch 0001                 i2setAngle@motor 0067               i2digitalWrite@pin 0007  
             i2digitalWrite@val 0009                 ?i2_angleToPulse 0050               __CFG_CCP2MX$PORTC 000000  
             __size_of_pinSetup 003E               __size_of_setAngle 00D4                       __pintcode 0008  
                 __pmediumconst FE30                       _lcdNibble 450C                        ?___awdiv 0094  
                      ?___ftadd 00C8                        ?___awmod 008E                        ?___ftdiv 00A0  
                      ?___ftneg 008E                        ?___lldiv 008E                        ?___ftmul 00AF  
                      ?___llmod 009B                        ?___ftsub 00D4                       __npowers_ FE59  
                      ?___fttol 00D4                   ?i2_lcdNewline 0001                     _digitalRead 31A6  
                      ?_lcdInst 0001                     __tdiv_to_l_ 26BA                  ??i2__div_to_l_ 0007  
                  ??__div_to_l_ 0094                        ?_initLCD 0001                 startTimer@timer 008E  
                      ?_service 0001                       _hexpowers FEA7                       _initTimer 48E6  
                     _initServo 42FC                 ?i2_digitalWrite 0007           _servoInterruptService 350A  
                   ??i2___awdiv 000B                     ??i2___ftadd 003B                     ??i2___awmod 0005  
                   ??i2___ftdiv 0013                     ??i2___ftneg 0004                     ??i2___lldiv 0009  
                   ??i2___ftmul 0022                  __size_of_scale 04AE                     ??i2___llmod 0016  
                   ??i2___ftsub 0047                     ??i2___fttol 0045                  __size_of_putch 0028  
                      _AA_float 0117              i2angleToPulse@a000 0063                     ??i2_lcdInst 0003  
            i2angleToPulse@a180 005C                  sortBattery@Vcc 0156                  ___wmul@product 00A0  
                      _LATDbits 000F8C                    ??_analogRead 0092                        i2u505_40 3852  
                      i2u505_45 384A              __end_of__div_to_l_ 29E0                        i2u633_40 0DC0  
                      i2u617_40 0A6E                        i2u617_45 0A64                        i2u564_44 3C84  
                      i2u564_45 3C7E                        i2u760_47 4C50                        i2u761_47 4754  
                      i2u762_47 4762                        i2u763_47 4788                        i2u764_47 4796  
                      i2u758_47 4C2A                        i2u759_47 4C3E                __CFG_WDTPS$32768 000000  
                    ?_lcdNibble 0001                  _padAngle_CLOSE 0109                 i2__div_to_l_@f1 0001  
               i2__div_to_l_@f2 0004                   digitalWrite@p 0095                  ??i2_lcdNewline 0005  
                    service@key 0072                    ??_lcdNewline 0092             __size_of_startTimer 0050  
             angleToPulse@angle 00E3               ___wmul@multiplier 009C                        i2___ftge 426C  
                      i2___wmul 4BCC                   lcdNibble@data 008F                      printf@flag 013F  
                 lcdNibble@temp 008E                      printf@fval 014D                      printf@prec 0141  
             i2___awdiv@divisor 0009                        i2_fround 22C8              __end_of_analogRead 4A00  
                      _V_LIM_AA 0103                        _V_LIM_9V 0100               i2___awdiv@counter 000B  
                      i2_printf 0964                      ?_initTimer 008E                      ?_initServo 014E  
             sortBattery@signal 015C                       copy_data0 4680              i2___awmod@dividend 0001  
              __size_ofi2_scale 03F0                __size_ofi2_putch 0022              __end_of_lcdNewline 4C62  
                 readKeypad@key 008E                        __Hrparam 0000                        __Lrparam 0000  
            __CFG_BOREN$SBORDIS 000000                    ??_readKeypad 008E                   ??_sortBattery 0151  
              __size_of___awdiv 00BE                __size_of___ftadd 0268                __size_of___awmod 00A2  
              __size_of___ftdiv 014C                __size_of___ftneg 0030           i2___wmul@multiplicand 0011  
              __size_of___lldiv 00BC                        ___altoft 409A                __size_of___ftmul 015E  
              __size_of___llmod 009A                __size_of___ftsub 004C                __size_of___fttol 0144  
                      ___awtoft 497A                        ___ftpack 33FE                     _fround$1312 00C4  
                   _fround$1313 00C1                        ___lltoft 4490           __end_ofi2__tdiv_to_l_ 31A6  
              __size_of_lcdInst 002A                       setAngle@i 014C                __size_of_initLCD 004A  
        ?_servoInterruptService 0001                        _lcdClear 4C62                        __ptext10 3D22  
                      __ptext11 26BA                        __ptext20 3610                        __ptext12 2858  
                      __ptext21 31A6                        __ptext13 4490                        __ptext30 2CA4  
                      __ptext22 49BE                        __ptext14 41D2                        __ptext31 2060  
                      __ptext23 4A40                        __ptext15 3DE0                        __ptext40 3E9C  
                      __ptext32 497A                        __ptext24 42FC                        __ptext16 484E  
                      __ptext41 2F34                        __ptext33 409A                        __ptext25 47FE  
                      __ptext17 4B20                        __ptext50 4BCC                        __ptext42 38FC  
                      __ptext34 33FE                        __ptext26 3ABE                        __ptext18 3B92  
                      __ptext51 3714                        __ptext43 4A7E                        __ptext35 48E6  
                      __ptext27 29E0                        __ptext19 4C62                        __ptext60 250E  
                      __ptext52 438A                        __ptext44 4584                        __ptext36 4930  
                      __ptext28 2DF0                        __ptext61 3F4A                        __ptext53 3074  
                      __ptext45 0964                        __ptext37 4B7A                        __ptext29 2B46  
                      __ptext70 45FC                        __ptext62 4BF2                        __ptext54 32D6  
                      __ptext46 160A                        __ptext38 450C                        __ptext63 426C  
                      __ptext55 47A2                        __ptext47 4C16                        __ptext64 4C72  
                      __ptext56 46D6                        __ptext48 4C6A                        __ptext65 4C38  
                      __ptext57 440E                        __ptext49 22C8                        __ptext66 473C  
                      __ptext58 3808                        __ptext67 350A                        __ptext59 4A00  
                      __ptext68 489A                        __ptext69 3C5A                        __powers_ FE80  
              __size_of_service 3AB6                 i2startTimer@val 0009                   ?i2_startTimer 0007  
                      _padServo 012B              __end_of_readKeypad 4B7A                   ?_angleToPulse 00E3  
                 __size_of_main 009A            __end_ofi2__div_to_l_ 33FE                        _pinSetup 4A40  
                      _setAngle 3ABE                        _prevTime 0077                   ??i2_lcdNibble 0001  
                   ??_lcdNibble 008E                   _padAngle_OPEN 010D                        int$flags 007C  
                     printf@idx 013C                       printf@exp 0143                       printf@val 0149  
             i2___awmod@divisor 0003                       putch@data 0092               i2___awmod@counter 0005  
           i2_angleToPulse$1541 0060             __end_of_sortBattery 1DB4                      _INTCONbits 000FF2  
                 ?_digitalWrite 008E                     ??_initTimer 0090                     ??_initServo 0152  
          i2angleToPulse@offset 0058                        scale@scl 00C4                  ??i2_startTimer 000D  
              ??i2_angleToPulse 0054                    ??_startTimer 0094                        intlevel2 0000  
              __tdiv_to_l_@exp1 009C                __tdiv_to_l_@cntr 009B                  ??_angleToPulse 0133  
          __end_ofi2_lcdNewline 4C72                __tdiv_to_l_@quot 0097                ___lldiv@dividend 008E  
              _redirectAngle_AA 0111                _redirectAngle_9V 010F                        printf@ap 013D  
                   lcdInst@data 0091                    ?_digitalRead 008E                    ?__tdiv_to_l_ 008E  
            __end_of_startTimer 484E                     _printf$1315 0139             __end_ofi2_lcdNibble 47A2  
              ??i2_digitalWrite 000B                ___lldiv@quotient 0096                  ??_digitalWrite 0092  
               _redirectAngle_C 0113                _padAngle_NEUTRAL 010B                 digitalWrite@pin 008E  
               digitalWrite@val 0090               i2__div_to_l_@exp1 000C               i2__div_to_l_@cntr 000B  
             i2__div_to_l_@quot 0007  
