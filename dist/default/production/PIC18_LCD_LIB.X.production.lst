

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Feb 20 13:33:42 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20  0000                     
    21                           ; Version 1.40
    22                           ; Generated 01/12/2016 GMT
    23                           ; 
    24                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC18F4620 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     
    56                           	psect	smallconst
    57  001000                     __psmallconst:
    58                           	opt stack 0
    59  001000  00                 	db	0
    60  001001                     _keys:
    61                           	opt stack 0
    62  001001  31                 	db	49
    63  001002  32                 	db	50
    64  001003  33                 	db	51
    65  001004  41                 	db	65
    66  001005  34                 	db	52
    67  001006  35                 	db	53
    68  001007  36                 	db	54
    69  001008  42                 	db	66
    70  001009  37                 	db	55
    71  00100A  38                 	db	56
    72  00100B  39                 	db	57
    73  00100C  43                 	db	67
    74  00100D  2A                 	db	42
    75  00100E  30                 	db	48
    76  00100F  23                 	db	35
    77  001010  44                 	db	68
    78  001011  00                 	db	0
    79  001012                     __end_of_keys:
    80                           	opt stack 0
    81  0000                     _ADCON0	set	4034
    82  0000                     _ADCON1	set	4033
    83  0000                     _LATB	set	3978
    84  0000                     _LATD	set	3980
    85  0000                     _LATDbits	set	3980
    86  0000                     _PORTB	set	3969
    87  0000                     _PORTBbits	set	3969
    88  0000                     _TRISB	set	3987
    89  0000                     _TRISD	set	3989
    90  001012                     STR_2:
    91  001012  25                 	db	37
    92  001013  63                 	db	99	;'c'
    93  001014  20                 	db	32
    94  001015  77                 	db	119	;'w'
    95  001016  61                 	db	97	;'a'
    96  001017  73                 	db	115	;'s'
    97  001018  20                 	db	32
    98  001019  70                 	db	112	;'p'
    99  00101A  72                 	db	114	;'r'
   100  00101B  65                 	db	101	;'e'
   101  00101C  73                 	db	115	;'s'
   102  00101D  73                 	db	115	;'s'
   103  00101E  65                 	db	101	;'e'
   104  00101F  64                 	db	100	;'d'
   105  001020  00                 	db	0
   106  001021                     STR_1:
   107  001021  48                 	db	72	;'H'
   108  001022  65                 	db	101	;'e'
   109  001023  6C                 	db	108	;'l'
   110  001024  6C                 	db	108	;'l'
   111  001025  6F                 	db	111	;'o'
   112  001026  20                 	db	32
   113  001027  77                 	db	119	;'w'
   114  001028  6F                 	db	111	;'o'
   115  001029  72                 	db	114	;'r'
   116  00102A  6C                 	db	108	;'l'
   117  00102B  64                 	db	100	;'d'
   118  00102C  21                 	db	33
   119  00102D  0A                 	db	10
   120  00102E  00                 	db	0
   121                           
   122                           ; #config settings
   123  00102F  00                 	db	0	; dummy byte at the end
   124  0000                     
   125                           	psect	cinit
   126  0011FE                     __pcinit:
   127                           	opt stack 0
   128  0011FE                     start_initialization:
   129                           	opt stack 0
   130  0011FE                     __initialization:
   131                           	opt stack 0
   132  0011FE                     end_of_initialization:
   133                           	opt stack 0
   134  0011FE                     __end_of__initialization:
   135                           	opt stack 0
   136  0011FE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   137  001200  6EF8               	movwf	tblptru,c
   138  001202  0100               	movlb	0
   139  001204  EF7F  F008         	goto	_main	;jump to C main() function
   140                           tblptru	equ	0xFF8
   141                           
   142                           	psect	cstackCOMRAM
   143  000001                     __pcstackCOMRAM:
   144                           	opt stack 0
   145  000001                     lcdNibble@temp:
   146                           	opt stack 0
   147  000001                     read@key:
   148                           	opt stack 0
   149                           
   150                           ; 1 bytes @ 0x0
   151  000001                     	ds	1
   152  000002                     lcdNibble@data:
   153                           	opt stack 0
   154                           
   155                           ; 1 bytes @ 0x1
   156  000002                     	ds	1
   157  000003                     ??_lcdInst:
   158                           
   159                           ; 1 bytes @ 0x2
   160  000003                     	ds	1
   161  000004                     lcdInst@data:
   162                           	opt stack 0
   163                           
   164                           ; 1 bytes @ 0x3
   165  000004                     	ds	1
   166  000005                     ??_initLCD:
   167  000005                     putch@data:
   168                           	opt stack 0
   169                           
   170                           ; 1 bytes @ 0x4
   171  000005                     	ds	1
   172  000006                     ?_printf:
   173                           	opt stack 0
   174  000006                     printf@f:
   175                           	opt stack 0
   176                           
   177                           ; 2 bytes @ 0x5
   178  000006                     	ds	4
   179  00000A                     printf@flag:
   180                           	opt stack 0
   181                           
   182                           ; 1 bytes @ 0x9
   183  00000A                     	ds	1
   184  00000B                     printf@ap:
   185                           	opt stack 0
   186                           
   187                           ; 2 bytes @ 0xA
   188  00000B                     	ds	2
   189  00000D                     printf@c:
   190                           	opt stack 0
   191                           
   192                           ; 1 bytes @ 0xC
   193  00000D                     	ds	1
   194  00000E                     ??_main:
   195                           
   196                           ; 1 bytes @ 0xD
   197  00000E                     	ds	2
   198  000010                     main@c:
   199                           	opt stack 0
   200                           
   201                           ; 1 bytes @ 0xF
   202  000010                     	ds	1
   203                           tblptru	equ	0xFF8
   204                           
   205 ;;
   206 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   207 ;;
   208 ;; *************** function _main *****************
   209 ;; Defined at:
   210 ;;		line 20 in file "main.c"
   211 ;; Parameters:    Size  Location     Type
   212 ;;		None
   213 ;; Auto vars:     Size  Location     Type
   214 ;;  c               1   15[COMRAM] unsigned char 
   215 ;; Return value:  Size  Location     Type
   216 ;;                  1    wreg      void 
   217 ;; Registers used:
   218 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   219 ;; Tracked objects:
   220 ;;		On entry : 0/0
   221 ;;		On exit  : 0/0
   222 ;;		Unchanged: 0/0
   223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   225 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   226 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   227 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   228 ;;Total ram usage:        3 bytes
   229 ;; Hardware stack levels required when called:    5
   230 ;; This function calls:
   231 ;;		_initKeypad
   232 ;;		_initLCD
   233 ;;		_lcdClear
   234 ;;		_printf
   235 ;;		_read
   236 ;; This function is called by:
   237 ;;		Startup code after reset
   238 ;; This function uses a non-reentrant model
   239 ;;
   240                           
   241                           	psect	text0
   242  0010FE                     __ptext0:
   243                           	opt stack 0
   244  0010FE                     _main:
   245                           	opt stack 26
   246                           
   247                           ;main.c: 22: initLCD();
   248                           
   249                           ;incstack = 0
   250  0010FE  ECA5  F008         	call	_initLCD	;wreg free
   251                           
   252                           ;main.c: 23: initKeypad();
   253  001102  ECF8  F008         	call	_initKeypad	;wreg free
   254  001106                     l837:
   255                           
   256                           ;main.c: 27: lcdClear();
   257  001106  EC08  F009         	call	_lcdClear	;wreg free
   258                           
   259                           ;main.c: 28: printf("Hello world!\n");
   260  00110A  0E21               	movlw	low STR_1
   261  00110C  6E06               	movwf	printf@f,c
   262  00110E  0E10               	movlw	high STR_1
   263  001110  6E07               	movwf	printf@f+1,c
   264  001112  EC18  F008         	call	_printf	;wreg free
   265                           
   266                           ;main.c: 29: char c = read();
   267  001116  ECCA  F008         	call	_read	;wreg free
   268  00111A  6E10               	movwf	main@c,c
   269                           
   270                           ;main.c: 30: lcdClear();
   271  00111C  EC08  F009         	call	_lcdClear	;wreg free
   272                           
   273                           ;main.c: 31: printf("%c was pressed",c);
   274  001120  0E12               	movlw	low STR_2
   275  001122  6E06               	movwf	printf@f,c
   276  001124  0E10               	movlw	high STR_2
   277  001126  6E07               	movwf	printf@f+1,c
   278  001128  C010  F008         	movff	main@c,?_printf+2
   279  00112C  6A09               	clrf	?_printf+3,c
   280  00112E  EC18  F008         	call	_printf	;wreg free
   281                           
   282                           ;main.c: 33: _delay((unsigned long)((1000)*(8000000/4000.0)));
   283  001132  0E0B               	movlw	11
   284  001134  6E0F               	movwf	(??_main+1)& (0+255),c
   285  001136  0E26               	movlw	38
   286  001138  6E0E               	movwf	??_main& (0+255),c
   287  00113A  0E5E               	movlw	94
   288  00113C                     u87:
   289  00113C  2EE8               	decfsz	wreg,f,c
   290  00113E  D7FE               	bra	u87
   291  001140  2E0E               	decfsz	??_main& (0+255),f,c
   292  001142  D7FC               	bra	u87
   293  001144  2E0F               	decfsz	(??_main+1)& (0+255),f,c
   294  001146  D7FA               	bra	u87
   295  001148  D7DE               	goto	l837
   296  00114A                     __end_of_main:
   297                           	opt stack 0
   298                           tblptru	equ	0xFF8
   299                           wreg	equ	0xFE8
   300                           
   301 ;; *************** function _read *****************
   302 ;; Defined at:
   303 ;;		line 34 in file "keypad.c"
   304 ;; Parameters:    Size  Location     Type
   305 ;;		None
   306 ;; Auto vars:     Size  Location     Type
   307 ;;  key             1    0[COMRAM] unsigned char 
   308 ;; Return value:  Size  Location     Type
   309 ;;                  1    wreg      unsigned char 
   310 ;; Registers used:
   311 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
   312 ;; Tracked objects:
   313 ;;		On entry : 0/0
   314 ;;		On exit  : 0/0
   315 ;;		Unchanged: 0/0
   316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   318 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   320 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   321 ;;Total ram usage:        1 bytes
   322 ;; Hardware stack levels used:    1
   323 ;; This function calls:
   324 ;;		Nothing
   325 ;; This function is called by:
   326 ;;		_main
   327 ;; This function uses a non-reentrant model
   328 ;;
   329                           
   330                           	psect	text1
   331  001194                     __ptext1:
   332                           	opt stack 0
   333  001194                     _read:
   334                           	opt stack 30
   335  001194                     l72:
   336  001194  A281               	btfss	3969,1,c	;volatile
   337  001196  D7FE               	goto	l72
   338                           
   339                           ;keypad.c: 36: char key = (PORTB & 0xF0) >> 4;
   340  001198  3881               	swapf	3969,w,c	;volatile
   341  00119A  0B0F               	andlw	15
   342  00119C  0B0F               	andlw	15
   343  00119E  6E01               	movwf	read@key,c
   344  0011A0                     l75:
   345  0011A0  B281               	btfsc	3969,1,c	;volatile
   346  0011A2  D7FE               	goto	l75
   347                           
   348                           ;keypad.c: 38: return keys[key];
   349  0011A4  5001               	movf	read@key,w,c
   350  0011A6  0D01               	mullw	1
   351  0011A8  0E01               	movlw	low _keys
   352  0011AA  24F3               	addwf	prodl,w,c
   353  0011AC  6EF6               	movwf	tblptrl,c
   354  0011AE  0E10               	movlw	high _keys
   355  0011B0  20F4               	addwfc	prodh,w,c
   356  0011B2  6EF7               	movwf	tblptrh,c
   357  0011B4                     	if	0	;There are less than 3 active tblptr bytes
   358  0011B4                     	endif
   359  0011B4  0008               	tblrd		*
   360  0011B6  50F5               	movf	tablat,w,c
   361  0011B8  0012               	return	
   362  0011BA                     __end_of_read:
   363                           	opt stack 0
   364                           tblptru	equ	0xFF8
   365                           tblptrh	equ	0xFF7
   366                           tblptrl	equ	0xFF6
   367                           tablat	equ	0xFF5
   368                           prodh	equ	0xFF4
   369                           prodl	equ	0xFF3
   370                           wreg	equ	0xFE8
   371                           
   372 ;; *************** function _printf *****************
   373 ;; Defined at:
   374 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
   375 ;; Parameters:    Size  Location     Type
   376 ;;  f               2    5[COMRAM] PTR const unsigned char 
   377 ;;		 -> STR_2(15), STR_1(14), 
   378 ;; Auto vars:     Size  Location     Type
   379 ;;  tmpval          4    0        struct .
   380 ;;  cp              3    0        PTR const unsigned char 
   381 ;;  ap              2   10[COMRAM] PTR void [1]
   382 ;;		 -> ?_printf(2), 
   383 ;;  len             2    0        unsigned int 
   384 ;;  val             2    0        unsigned int 
   385 ;;  c               1   12[COMRAM] char 
   386 ;;  flag            1    9[COMRAM] unsigned char 
   387 ;;  prec            1    0        char 
   388 ;; Return value:  Size  Location     Type
   389 ;;                  2    5[COMRAM] int 
   390 ;; Registers used:
   391 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   392 ;; Tracked objects:
   393 ;;		On entry : 0/0
   394 ;;		On exit  : 0/0
   395 ;;		Unchanged: 0/0
   396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   397 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   398 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   400 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   401 ;;Total ram usage:        8 bytes
   402 ;; Hardware stack levels used:    1
   403 ;; Hardware stack levels required when called:    4
   404 ;; This function calls:
   405 ;;		_putch
   406 ;; This function is called by:
   407 ;;		_main
   408 ;; This function uses a non-reentrant model
   409 ;;
   410                           
   411                           	psect	text2
   412  001030                     __ptext2:
   413                           	opt stack 0
   414  001030                     _printf:
   415                           	opt stack 26
   416                           
   417                           ;doprnt.c: 466: va_list ap;
   418                           ;doprnt.c: 499: signed char c;
   419                           ;doprnt.c: 506: signed char prec;
   420                           ;doprnt.c: 508: unsigned char flag;
   421                           ;doprnt.c: 523: union {
   422                           ;doprnt.c: 524: unsigned long vd;
   423                           ;doprnt.c: 525: double integ;
   424                           ;doprnt.c: 526: } tmpval;
   425                           ;doprnt.c: 528: unsigned int val;
   426                           ;doprnt.c: 529: unsigned len;
   427                           ;doprnt.c: 530: const char * cp;
   428                           ;doprnt.c: 533: *ap = __va_start();
   429                           
   430                           ;incstack = 0
   431  001030  0E08               	movlw	low (?_printf+2)
   432  001032  6E0B               	movwf	printf@ap,c
   433  001034  0E00               	movlw	high (?_printf+2)
   434  001036  6E0C               	movwf	printf@ap+1,c
   435                           
   436                           ;doprnt.c: 536: while(c = *f++) {
   437  001038  D02A               	goto	l831
   438  00103A                     l815:
   439                           
   440                           ;doprnt.c: 538: if(c != '%')
   441  00103A  0E25               	movlw	37
   442  00103C  180D               	xorwf	printf@c,w,c
   443  00103E  B4D8               	btfsc	status,2,c
   444  001040  D004               	goto	l819
   445                           
   446                           ;doprnt.c: 540: {
   447                           ;doprnt.c: 541: (putch(c) );
   448  001042  500D               	movf	printf@c,w,c
   449  001044  ECEB  F008         	call	_putch
   450                           
   451                           ;doprnt.c: 542: continue;
   452  001048  D022               	goto	l831
   453  00104A                     l819:
   454                           
   455                           ;doprnt.c: 543: }
   456                           ;doprnt.c: 548: flag = 0;
   457  00104A  0E00               	movlw	0
   458  00104C  6E0A               	movwf	printf@flag,c
   459                           
   460                           ;doprnt.c: 635: switch(c = *f++) {
   461  00104E  D00E               	goto	l829
   462  001050                     l821:
   463                           
   464                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
   465  001050  C00B  FFD9         	movff	printf@ap,fsr2l
   466  001054  C00C  FFDA         	movff	printf@ap+1,fsr2h
   467  001058  50DF               	movf	indf2,w,c
   468  00105A  6E0D               	movwf	printf@c,c
   469  00105C  0E02               	movlw	2
   470  00105E  260B               	addwf	printf@ap,f,c
   471  001060  0E00               	movlw	0
   472  001062  220C               	addwfc	printf@ap+1,f,c
   473  001064                     l825:
   474                           
   475                           ;doprnt.c: 809: (putch(c) );
   476  001064  500D               	movf	printf@c,w,c
   477  001066  ECEB  F008         	call	_putch
   478                           
   479                           ;doprnt.c: 822: }
   480                           
   481                           ;doprnt.c: 810: continue;
   482  00106A  D011               	goto	l831
   483  00106C                     l829:
   484  00106C  C006  FFF6         	movff	printf@f,tblptrl
   485  001070  C007  FFF7         	movff	printf@f+1,tblptrh
   486  001074  4A06               	infsnz	printf@f,f,c
   487  001076  2A07               	incf	printf@f+1,f,c
   488  001078                     	if	0	;tblptru may be non-zero
   489  001078                     	endif
   490  001078                     	if	0	;tblptru may be non-zero
   491  001078                     	endif
   492  001078  0008               	tblrd		*
   493  00107A  CFF5 F00D          	movff	tablat,printf@c
   494  00107E  500D               	movf	printf@c,w,c
   495                           
   496                           ; Switch size 1, requested type "space"
   497                           ; Number of cases is 2, Range of values is 0 to 99
   498                           ; switch strategies available:
   499                           ; Name         Instructions Cycles
   500                           ; simple_byte            7     4 (average)
   501                           ;	Chosen strategy is simple_byte
   502  001080  0A00               	xorlw	0	; case 0
   503  001082  B4D8               	btfsc	status,2,c
   504  001084  0012               	return	
   505  001086  0A63               	xorlw	99	; case 99
   506  001088  B4D8               	btfsc	status,2,c
   507  00108A  D7E2               	goto	l821
   508  00108C  D7EB               	goto	l825
   509  00108E                     l831:
   510  00108E  C006  FFF6         	movff	printf@f,tblptrl
   511  001092  C007  FFF7         	movff	printf@f+1,tblptrh
   512  001096  4A06               	infsnz	printf@f,f,c
   513  001098  2A07               	incf	printf@f+1,f,c
   514  00109A                     	if	0	;tblptru may be non-zero
   515  00109A                     	endif
   516  00109A                     	if	0	;tblptru may be non-zero
   517  00109A                     	endif
   518  00109A  0008               	tblrd		*
   519  00109C  CFF5 F00D          	movff	tablat,printf@c
   520  0010A0  500D               	movf	printf@c,w,c
   521  0010A2  B4D8               	btfsc	status,2,c
   522  0010A4  0012               	return	
   523  0010A6  D7C9               	goto	l815
   524  0010A8                     __end_of_printf:
   525                           	opt stack 0
   526                           tblptru	equ	0xFF8
   527                           tblptrh	equ	0xFF7
   528                           tblptrl	equ	0xFF6
   529                           tablat	equ	0xFF5
   530                           prodh	equ	0xFF4
   531                           prodl	equ	0xFF3
   532                           wreg	equ	0xFE8
   533                           indf2	equ	0xFDF
   534                           fsr2h	equ	0xFDA
   535                           fsr2l	equ	0xFD9
   536                           status	equ	0xFD8
   537                           
   538 ;; *************** function _putch *****************
   539 ;; Defined at:
   540 ;;		line 37 in file "lcd.c"
   541 ;; Parameters:    Size  Location     Type
   542 ;;  data            1    wreg     unsigned char 
   543 ;; Auto vars:     Size  Location     Type
   544 ;;  data            1    4[COMRAM] unsigned char 
   545 ;; Return value:  Size  Location     Type
   546 ;;                  1    wreg      void 
   547 ;; Registers used:
   548 ;;		wreg, status,2, status,0, cstack
   549 ;; Tracked objects:
   550 ;;		On entry : 0/0
   551 ;;		On exit  : 0/0
   552 ;;		Unchanged: 0/0
   553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   555 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   557 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   558 ;;Total ram usage:        1 bytes
   559 ;; Hardware stack levels used:    1
   560 ;; Hardware stack levels required when called:    3
   561 ;; This function calls:
   562 ;;		_lcdNewline
   563 ;;		_lcdNibble
   564 ;; This function is called by:
   565 ;;		_printf
   566 ;; This function uses a non-reentrant model
   567 ;;
   568                           
   569                           	psect	text3
   570  0011D6                     __ptext3:
   571                           	opt stack 0
   572  0011D6                     _putch:
   573                           	opt stack 26
   574                           
   575                           ;incstack = 0
   576                           ;putch@data stored from wreg
   577  0011D6  6E05               	movwf	putch@data,c
   578                           
   579                           ;lcd.c: 38: if(data == '\n')lcdNewline();
   580  0011D8  0E0A               	movlw	10
   581  0011DA  1805               	xorwf	putch@data,w,c
   582  0011DC  A4D8               	btfss	status,2,c
   583  0011DE  D003               	goto	l41
   584  0011E0  EC04  F009         	call	_lcdNewline	;wreg free
   585  0011E4  0012               	return	
   586  0011E6                     l41:
   587                           
   588                           ;lcd.c: 39: else
   589                           ;lcd.c: 40: {
   590                           ;lcd.c: 41: LATDbits.LATD2 = 1;
   591  0011E6  848C               	bsf	3980,2,c	;volatile
   592                           
   593                           ;lcd.c: 42: lcdNibble(data);
   594  0011E8  5005               	movf	putch@data,w,c
   595  0011EA  EC54  F008         	call	_lcdNibble
   596  0011EE  0012               	return	
   597  0011F0                     __end_of_putch:
   598                           	opt stack 0
   599                           tblptru	equ	0xFF8
   600                           tblptrh	equ	0xFF7
   601                           tblptrl	equ	0xFF6
   602                           tablat	equ	0xFF5
   603                           prodh	equ	0xFF4
   604                           prodl	equ	0xFF3
   605                           wreg	equ	0xFE8
   606                           indf2	equ	0xFDF
   607                           fsr2h	equ	0xFDA
   608                           fsr2l	equ	0xFD9
   609                           status	equ	0xFD8
   610                           
   611 ;; *************** function _lcdNewline *****************
   612 ;; Defined at:
   613 ;;		line 75 in file "lcd.c"
   614 ;; Parameters:    Size  Location     Type
   615 ;;		None
   616 ;; Auto vars:     Size  Location     Type
   617 ;;		None
   618 ;; Return value:  Size  Location     Type
   619 ;;                  1    wreg      void 
   620 ;; Registers used:
   621 ;;		wreg, status,2, status,0, cstack
   622 ;; Tracked objects:
   623 ;;		On entry : 0/0
   624 ;;		On exit  : 0/0
   625 ;;		Unchanged: 0/0
   626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   631 ;;Total ram usage:        0 bytes
   632 ;; Hardware stack levels used:    1
   633 ;; Hardware stack levels required when called:    2
   634 ;; This function calls:
   635 ;;		_lcdInst
   636 ;; This function is called by:
   637 ;;		_putch
   638 ;; This function uses a non-reentrant model
   639 ;;
   640                           
   641                           	psect	text4
   642  001208                     __ptext4:
   643                           	opt stack 0
   644  001208                     _lcdNewline:
   645                           	opt stack 26
   646                           
   647                           ;lcd.c: 76: lcdInst(0b11000000);
   648                           
   649                           ;incstack = 0
   650  001208  0EC0               	movlw	192
   651  00120A  ECDD  F008         	call	_lcdInst
   652  00120E  0012               	return		;funcret
   653  001210                     __end_of_lcdNewline:
   654                           	opt stack 0
   655                           tblptru	equ	0xFF8
   656                           tblptrh	equ	0xFF7
   657                           tblptrl	equ	0xFF6
   658                           tablat	equ	0xFF5
   659                           prodh	equ	0xFF4
   660                           prodl	equ	0xFF3
   661                           wreg	equ	0xFE8
   662                           indf2	equ	0xFDF
   663                           fsr2h	equ	0xFDA
   664                           fsr2l	equ	0xFD9
   665                           status	equ	0xFD8
   666                           
   667 ;; *************** function _lcdClear *****************
   668 ;; Defined at:
   669 ;;		line 71 in file "lcd.c"
   670 ;; Parameters:    Size  Location     Type
   671 ;;		None
   672 ;; Auto vars:     Size  Location     Type
   673 ;;		None
   674 ;; Return value:  Size  Location     Type
   675 ;;                  1    wreg      void 
   676 ;; Registers used:
   677 ;;		wreg, status,2, status,0, cstack
   678 ;; Tracked objects:
   679 ;;		On entry : 0/0
   680 ;;		On exit  : 0/0
   681 ;;		Unchanged: 0/0
   682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   686 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   687 ;;Total ram usage:        0 bytes
   688 ;; Hardware stack levels used:    1
   689 ;; Hardware stack levels required when called:    2
   690 ;; This function calls:
   691 ;;		_lcdInst
   692 ;; This function is called by:
   693 ;;		_main
   694 ;; This function uses a non-reentrant model
   695 ;;
   696                           
   697                           	psect	text5
   698  001210                     __ptext5:
   699                           	opt stack 0
   700  001210                     _lcdClear:
   701                           	opt stack 28
   702                           
   703                           ;lcd.c: 72: lcdInst(0b00000001);
   704                           
   705                           ;incstack = 0
   706  001210  0E01               	movlw	1
   707  001212  ECDD  F008         	call	_lcdInst
   708  001216  0012               	return		;funcret
   709  001218                     __end_of_lcdClear:
   710                           	opt stack 0
   711                           tblptru	equ	0xFF8
   712                           tblptrh	equ	0xFF7
   713                           tblptrl	equ	0xFF6
   714                           tablat	equ	0xFF5
   715                           prodh	equ	0xFF4
   716                           prodl	equ	0xFF3
   717                           wreg	equ	0xFE8
   718                           indf2	equ	0xFDF
   719                           fsr2h	equ	0xFDA
   720                           fsr2l	equ	0xFD9
   721                           status	equ	0xFD8
   722                           
   723 ;; *************** function _initLCD *****************
   724 ;; Defined at:
   725 ;;		line 16 in file "lcd.c"
   726 ;; Parameters:    Size  Location     Type
   727 ;;		None
   728 ;; Auto vars:     Size  Location     Type
   729 ;;		None
   730 ;; Return value:  Size  Location     Type
   731 ;;                  1    wreg      void 
   732 ;; Registers used:
   733 ;;		wreg, status,2, status,0, cstack
   734 ;; Tracked objects:
   735 ;;		On entry : 0/0
   736 ;;		On exit  : 0/0
   737 ;;		Unchanged: 0/0
   738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   741 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   742 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   743 ;;Total ram usage:        1 bytes
   744 ;; Hardware stack levels used:    1
   745 ;; Hardware stack levels required when called:    2
   746 ;; This function calls:
   747 ;;		_lcdInst
   748 ;; This function is called by:
   749 ;;		_main
   750 ;; This function uses a non-reentrant model
   751 ;;
   752                           
   753                           	psect	text6
   754  00114A                     __ptext6:
   755                           	opt stack 0
   756  00114A                     _initLCD:
   757                           	opt stack 28
   758                           
   759                           ;lcd.c: 18: TRISD = 0x00;
   760                           
   761                           ;incstack = 0
   762  00114A  0E00               	movlw	0
   763  00114C  6E95               	movwf	3989,c	;volatile
   764                           
   765                           ;lcd.c: 20: _delay((unsigned long)((15)*(8000000/4000.0)));
   766  00114E  0E27               	movlw	39
   767  001150  6E05               	movwf	??_initLCD& (0+255),c
   768  001152  0EF5               	movlw	245
   769  001154                     u97:
   770  001154  2EE8               	decfsz	wreg,f,c
   771  001156  D7FE               	bra	u97
   772  001158  2E05               	decfsz	??_initLCD& (0+255),f,c
   773  00115A  D7FC               	bra	u97
   774  00115C  F000               	nop	
   775                           
   776                           ;lcd.c: 21: lcdInst(0b00110011);
   777  00115E  0E33               	movlw	51
   778  001160  ECDD  F008         	call	_lcdInst
   779                           
   780                           ;lcd.c: 22: lcdInst(0b00110010);
   781  001164  0E32               	movlw	50
   782  001166  ECDD  F008         	call	_lcdInst
   783                           
   784                           ;lcd.c: 23: lcdInst(0b00101000);
   785  00116A  0E28               	movlw	40
   786  00116C  ECDD  F008         	call	_lcdInst
   787                           
   788                           ;lcd.c: 24: lcdInst(0b00001111);
   789  001170  0E0F               	movlw	15
   790  001172  ECDD  F008         	call	_lcdInst
   791                           
   792                           ;lcd.c: 25: lcdInst(0b00000110);
   793  001176  0E06               	movlw	6
   794  001178  ECDD  F008         	call	_lcdInst
   795                           
   796                           ;lcd.c: 26: lcdInst(0b00000001);
   797  00117C  0E01               	movlw	1
   798  00117E  ECDD  F008         	call	_lcdInst
   799                           
   800                           ;lcd.c: 27: _delay((unsigned long)((15)*(8000000/4000.0)));
   801  001182  0E27               	movlw	39
   802  001184  6E05               	movwf	??_initLCD& (0+255),c
   803  001186  0EF5               	movlw	245
   804  001188                     u107:
   805  001188  2EE8               	decfsz	wreg,f,c
   806  00118A  D7FE               	bra	u107
   807  00118C  2E05               	decfsz	??_initLCD& (0+255),f,c
   808  00118E  D7FC               	bra	u107
   809  001190  F000               	nop	
   810  001192  0012               	return		;funcret
   811  001194                     __end_of_initLCD:
   812                           	opt stack 0
   813                           tblptru	equ	0xFF8
   814                           tblptrh	equ	0xFF7
   815                           tblptrl	equ	0xFF6
   816                           tablat	equ	0xFF5
   817                           prodh	equ	0xFF4
   818                           prodl	equ	0xFF3
   819                           wreg	equ	0xFE8
   820                           indf2	equ	0xFDF
   821                           fsr2h	equ	0xFDA
   822                           fsr2l	equ	0xFD9
   823                           status	equ	0xFD8
   824                           
   825 ;; *************** function _lcdInst *****************
   826 ;; Defined at:
   827 ;;		line 30 in file "lcd.c"
   828 ;; Parameters:    Size  Location     Type
   829 ;;  data            1    wreg     unsigned char 
   830 ;; Auto vars:     Size  Location     Type
   831 ;;  data            1    3[COMRAM] unsigned char 
   832 ;; Return value:  Size  Location     Type
   833 ;;                  1    wreg      void 
   834 ;; Registers used:
   835 ;;		wreg, status,2, status,0, cstack
   836 ;; Tracked objects:
   837 ;;		On entry : 0/0
   838 ;;		On exit  : 0/0
   839 ;;		Unchanged: 0/0
   840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   842 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   843 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   844 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   845 ;;Total ram usage:        2 bytes
   846 ;; Hardware stack levels used:    1
   847 ;; Hardware stack levels required when called:    1
   848 ;; This function calls:
   849 ;;		_lcdNibble
   850 ;; This function is called by:
   851 ;;		_initLCD
   852 ;;		_lcdClear
   853 ;;		_lcdNewline
   854 ;; This function uses a non-reentrant model
   855 ;;
   856                           
   857                           	psect	text7
   858  0011BA                     __ptext7:
   859                           	opt stack 0
   860  0011BA                     _lcdInst:
   861                           	opt stack 26
   862                           
   863                           ;incstack = 0
   864                           ;lcdInst@data stored from wreg
   865  0011BA  6E04               	movwf	lcdInst@data,c
   866                           
   867                           ;lcd.c: 31: LATDbits.LATD2 = 0;
   868  0011BC  948C               	bcf	3980,2,c	;volatile
   869                           
   870                           ;lcd.c: 32: lcdNibble(data);
   871  0011BE  5004               	movf	lcdInst@data,w,c
   872  0011C0  EC54  F008         	call	_lcdNibble
   873                           
   874                           ;lcd.c: 33: _delay((unsigned long)((10)*(8000000/4000.0)));
   875  0011C4  0E1A               	movlw	26
   876  0011C6  6E03               	movwf	??_lcdInst& (0+255),c
   877  0011C8  0EF8               	movlw	248
   878  0011CA                     u117:
   879  0011CA  2EE8               	decfsz	wreg,f,c
   880  0011CC  D7FE               	bra	u117
   881  0011CE  2E03               	decfsz	??_lcdInst& (0+255),f,c
   882  0011D0  D7FC               	bra	u117
   883  0011D2  D000               	nop2	
   884  0011D4  0012               	return		;funcret
   885  0011D6                     __end_of_lcdInst:
   886                           	opt stack 0
   887                           tblptru	equ	0xFF8
   888                           tblptrh	equ	0xFF7
   889                           tblptrl	equ	0xFF6
   890                           tablat	equ	0xFF5
   891                           prodh	equ	0xFF4
   892                           prodl	equ	0xFF3
   893                           wreg	equ	0xFE8
   894                           indf2	equ	0xFDF
   895                           fsr2h	equ	0xFDA
   896                           fsr2l	equ	0xFD9
   897                           status	equ	0xFD8
   898                           
   899 ;; *************** function _lcdNibble *****************
   900 ;; Defined at:
   901 ;;		line 47 in file "lcd.c"
   902 ;; Parameters:    Size  Location     Type
   903 ;;  data            1    wreg     unsigned char 
   904 ;; Auto vars:     Size  Location     Type
   905 ;;  data            1    1[COMRAM] unsigned char 
   906 ;;  temp            1    0[COMRAM] unsigned char 
   907 ;; Return value:  Size  Location     Type
   908 ;;                  1    wreg      void 
   909 ;; Registers used:
   910 ;;		wreg, status,2, status,0
   911 ;; Tracked objects:
   912 ;;		On entry : 0/0
   913 ;;		On exit  : 0/0
   914 ;;		Unchanged: 0/0
   915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   917 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   919 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   920 ;;Total ram usage:        2 bytes
   921 ;; Hardware stack levels used:    1
   922 ;; This function calls:
   923 ;;		Nothing
   924 ;; This function is called by:
   925 ;;		_lcdInst
   926 ;;		_putch
   927 ;; This function uses a non-reentrant model
   928 ;;
   929                           
   930                           	psect	text8
   931  0010A8                     __ptext8:
   932                           	opt stack 0
   933  0010A8                     _lcdNibble:
   934                           	opt stack 28
   935                           
   936                           ;incstack = 0
   937                           ;lcdNibble@data stored from wreg
   938  0010A8  6E02               	movwf	lcdNibble@data,c
   939                           
   940                           ;lcd.c: 49: char temp = data & 0xF0;
   941  0010AA  5002               	movf	lcdNibble@data,w,c
   942  0010AC  0BF0               	andlw	240
   943  0010AE  6E01               	movwf	lcdNibble@temp,c
   944                           
   945                           ;lcd.c: 50: LATD = LATD & 0x0F;
   946  0010B0  508C               	movf	3980,w,c	;volatile
   947  0010B2  0B0F               	andlw	15
   948  0010B4  6E8C               	movwf	3980,c	;volatile
   949                           
   950                           ;lcd.c: 51: LATD = temp | LATD;
   951  0010B6  5001               	movf	lcdNibble@temp,w,c
   952  0010B8  108C               	iorwf	3980,w,c	;volatile
   953  0010BA  6E8C               	movwf	3980,c	;volatile
   954                           
   955                           ;lcd.c: 53: LATDbits.LATD3 = 0;
   956  0010BC  968C               	bcf	3980,3,c	;volatile
   957                           
   958                           ;lcd.c: 54: _delay((unsigned long)((25)*(8000000/4000000.0)));
   959  0010BE  0E10               	movlw	16
   960  0010C0                     u127:
   961  0010C0  2EE8               	decfsz	wreg,f,c
   962  0010C2  D7FE               	bra	u127
   963  0010C4  D000               	nop2	
   964                           
   965                           ;lcd.c: 55: LATDbits.LATD3 = 1;
   966  0010C6  868C               	bsf	3980,3,c	;volatile
   967                           
   968                           ;lcd.c: 56: _delay((unsigned long)((25)*(8000000/4000000.0)));
   969  0010C8  0E10               	movlw	16
   970  0010CA                     u137:
   971  0010CA  2EE8               	decfsz	wreg,f,c
   972  0010CC  D7FE               	bra	u137
   973  0010CE  D000               	nop2	
   974                           
   975                           ;lcd.c: 59: data = data << 4;
   976  0010D0  3802               	swapf	lcdNibble@data,w,c
   977  0010D2  0BF0               	andlw	240
   978  0010D4  6E02               	movwf	lcdNibble@data,c
   979                           
   980                           ;lcd.c: 61: temp = data & 0xF0;
   981  0010D6  5002               	movf	lcdNibble@data,w,c
   982  0010D8  0BF0               	andlw	240
   983  0010DA  6E01               	movwf	lcdNibble@temp,c
   984                           
   985                           ;lcd.c: 62: LATD = LATD & 0x0F;
   986  0010DC  508C               	movf	3980,w,c	;volatile
   987  0010DE  0B0F               	andlw	15
   988  0010E0  6E8C               	movwf	3980,c	;volatile
   989                           
   990                           ;lcd.c: 63: LATD = temp | LATD;
   991  0010E2  5001               	movf	lcdNibble@temp,w,c
   992  0010E4  108C               	iorwf	3980,w,c	;volatile
   993  0010E6  6E8C               	movwf	3980,c	;volatile
   994                           
   995                           ;lcd.c: 65: LATDbits.LATD3 = 0;
   996  0010E8  968C               	bcf	3980,3,c	;volatile
   997                           
   998                           ;lcd.c: 66: _delay((unsigned long)((25)*(8000000/4000000.0)));
   999  0010EA  0E10               	movlw	16
  1000  0010EC                     u147:
  1001  0010EC  2EE8               	decfsz	wreg,f,c
  1002  0010EE  D7FE               	bra	u147
  1003  0010F0  D000               	nop2	
  1004                           
  1005                           ;lcd.c: 67: LATDbits.LATD3 = 1;
  1006  0010F2  868C               	bsf	3980,3,c	;volatile
  1007                           
  1008                           ;lcd.c: 68: _delay((unsigned long)((25)*(8000000/4000000.0)));
  1009  0010F4  0E10               	movlw	16
  1010  0010F6                     u157:
  1011  0010F6  2EE8               	decfsz	wreg,f,c
  1012  0010F8  D7FE               	bra	u157
  1013  0010FA  D000               	nop2	
  1014  0010FC  0012               	return		;funcret
  1015  0010FE                     __end_of_lcdNibble:
  1016                           	opt stack 0
  1017                           tblptru	equ	0xFF8
  1018                           tblptrh	equ	0xFF7
  1019                           tblptrl	equ	0xFF6
  1020                           tablat	equ	0xFF5
  1021                           prodh	equ	0xFF4
  1022                           prodl	equ	0xFF3
  1023                           wreg	equ	0xFE8
  1024                           indf2	equ	0xFDF
  1025                           fsr2h	equ	0xFDA
  1026                           fsr2l	equ	0xFD9
  1027                           status	equ	0xFD8
  1028                           
  1029 ;; *************** function _initKeypad *****************
  1030 ;; Defined at:
  1031 ;;		line 26 in file "keypad.c"
  1032 ;; Parameters:    Size  Location     Type
  1033 ;;		None
  1034 ;; Auto vars:     Size  Location     Type
  1035 ;;		None
  1036 ;; Return value:  Size  Location     Type
  1037 ;;                  1    wreg      void 
  1038 ;; Registers used:
  1039 ;;		wreg, status,2
  1040 ;; Tracked objects:
  1041 ;;		On entry : 0/0
  1042 ;;		On exit  : 0/0
  1043 ;;		Unchanged: 0/0
  1044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1048 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1049 ;;Total ram usage:        0 bytes
  1050 ;; Hardware stack levels used:    1
  1051 ;; This function calls:
  1052 ;;		Nothing
  1053 ;; This function is called by:
  1054 ;;		_main
  1055 ;; This function uses a non-reentrant model
  1056 ;;
  1057                           
  1058                           	psect	text9
  1059  0011F0                     __ptext9:
  1060                           	opt stack 0
  1061  0011F0                     _initKeypad:
  1062                           	opt stack 30
  1063                           
  1064                           ;keypad.c: 27: TRISB = 0xFF;
  1065                           
  1066                           ;incstack = 0
  1067  0011F0  6893               	setf	3987,c	;volatile
  1068                           
  1069                           ;keypad.c: 28: LATB = 0x00;
  1070  0011F2  0E00               	movlw	0
  1071  0011F4  6E8A               	movwf	3978,c	;volatile
  1072                           
  1073                           ;keypad.c: 29: ADCON0 = 0x00;
  1074  0011F6  0E00               	movlw	0
  1075  0011F8  6EC2               	movwf	4034,c	;volatile
  1076                           
  1077                           ;keypad.c: 30: ADCON1 = 0xFF;
  1078  0011FA  68C1               	setf	4033,c	;volatile
  1079  0011FC  0012               	return		;funcret
  1080  0011FE                     __end_of_initKeypad:
  1081                           	opt stack 0
  1082                           tblptru	equ	0xFF8
  1083                           tblptrh	equ	0xFF7
  1084                           tblptrl	equ	0xFF6
  1085                           tablat	equ	0xFF5
  1086                           prodh	equ	0xFF4
  1087                           prodl	equ	0xFF3
  1088                           wreg	equ	0xFE8
  1089                           indf2	equ	0xFDF
  1090                           fsr2h	equ	0xFDA
  1091                           fsr2l	equ	0xFD9
  1092                           status	equ	0xFD8
  1093                           tblptru	equ	0xFF8
  1094                           tblptrh	equ	0xFF7
  1095                           tblptrl	equ	0xFF6
  1096                           tablat	equ	0xFF5
  1097                           prodh	equ	0xFF4
  1098                           prodl	equ	0xFF3
  1099                           wreg	equ	0xFE8
  1100                           indf2	equ	0xFDF
  1101                           fsr2h	equ	0xFDA
  1102                           fsr2l	equ	0xFD9
  1103                           status	equ	0xFD8
  1104                           
  1105                           	psect	rparam
  1106  0000                     tblptru	equ	0xFF8
  1107                           tblptrh	equ	0xFF7
  1108                           tblptrl	equ	0xFF6
  1109                           tablat	equ	0xFF5
  1110                           prodh	equ	0xFF4
  1111                           prodl	equ	0xFF3
  1112                           wreg	equ	0xFE8
  1113                           indf2	equ	0xFDF
  1114                           fsr2h	equ	0xFDA
  1115                           fsr2l	equ	0xFD9
  1116                           status	equ	0xFD8


Data Sizes:
    Strings     29
    Constant    17
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     16      16
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->_putch
    _lcdNewline->_lcdInst
    _lcdClear->_lcdInst
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     679
                                             13 COMRAM     3     3      0
                         _initKeypad
                            _initLCD
                           _lcdClear
                             _printf
                               _read
 ---------------------------------------------------------------------------------
 (1) _read                                                 1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _printf                                              20    16      4     461
                                              5 COMRAM     8     4      4
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     195
                                              4 COMRAM     1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNewline                                           0     0      0      90
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdClear                                             0     0      0      90
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              4 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (4) _lcdInst                                              2     2      0      90
                                              2 COMRAM     2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initKeypad                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initKeypad
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdClear
     _lcdInst
       _lcdNibble
   _printf
     _putch
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
   _read

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F     10      10       1       12.6%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
ABS                  0      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BIGRAM             F7F      0       0      37        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Feb 20 13:33:42 2017

                     l41 11E6                       l72 1194                       l75 11A0  
                     u87 113C                       u97 1154              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000              __CFG_OSC$HS 000000                      l821 1050  
                    l815 103A                      l831 108E                      l825 1064  
                    l819 104A                      l829 106C                      l837 1106  
           __CFG_CPB$OFF 000000                      u107 1188                      u117 11CA  
                    u127 10C0                      u137 10CA                      u147 10EC  
                    u157 10F6             __CFG_CPD$OFF 000000                      wreg 000FE8  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000                     STR_1 1021  
                   STR_2 1012                     _LATB 000F8A                     _LATD 000F8C  
                   _main 10FE                     _read 1194                     _keys 1001  
                   fsr2h 000FDA                     indf2 000FDF                     fsr2l 000FD9  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
                  ?_main 0001                    ?_read 0001                    _PORTB 000F81  
                  _TRISB 000F93                    _TRISD 000F95            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000          __end_of_lcdInst 11D6           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000          __end_of_initLCD 1194           __CFG_EBTRB$OFF 000000  
                  _putch 11D6                    main@c 0010                    tablat 000FF5  
                  status 000FD8           __CFG_PBADEN$ON 000000          __initialization 11FE  
           __end_of_main 114A             __end_of_read 11BA             __end_of_keys 1012  
                 ??_main 000E                   ??_read 0001            __activetblptr 000002  
                 _ADCON0 000FC2                   _ADCON1 000FC1                   ?_putch 0001  
       __end_of_lcdClear 1218           __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000  
              ??_lcdInst 0003                   _printf 1030                ??_initLCD 0005  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0080  __end_of__initialization 11FE  
          ___rparam_used 000001           __pcstackCOMRAM 0001            __end_of_putch 11F0  
     __size_of_lcdNibble 0056                  ??_putch 0005               _lcdNewline 1208  
                ?_printf 0006                ?_lcdClear 0001        __end_of_lcdNibble 10FE  
                __Hparam 0000                  __Lparam 0000               _initKeypad 11F0  
           __psmallconst 1000                  __pcinit 11FE                  __ramtop 1000  
                _lcdInst 11BA                  __ptext0 10FE                  __ptext1 1194  
                __ptext2 1030                  __ptext3 11D6                  __ptext4 1208  
                __ptext5 1210                  __ptext6 114A                  __ptext7 11BA  
                __ptext8 10A8                  __ptext9 11F0          __size_of_printf 0078  
                _initLCD 114A               ??_lcdClear 0005     end_of_initialization 11FE  
                read@key 0001            __Lmediumconst 0000                  printf@c 000D  
                printf@f 0006              ?_lcdNewline 0001                _PORTBbits 000F81  
            ?_initKeypad 0001           __end_of_printf 10A8      start_initialization 11FE  
    __size_of_lcdNewline 0008         __CFG_LPT1OSC$OFF 000000                 ??_printf 000A  
    __size_of_initKeypad 000E        __size_of_lcdClear 0008        __CFG_CCP2MX$PORTC 000000  
              _lcdNibble 10A8                 ?_lcdInst 0001                 ?_initLCD 0001  
            __smallconst 1000           __size_of_putch 001A                 _LATDbits 000F8C  
       __CFG_WDTPS$32768 000000               ?_lcdNibble 0001             ??_lcdNewline 0005  
          lcdNibble@data 0002               printf@flag 000A            lcdNibble@temp 0001  
     __end_of_lcdNewline 1210                 __Hrparam 0000                 __Lrparam 0000  
     __CFG_BOREN$SBORDIS 000000             ??_initKeypad 0001         __size_of_lcdInst 001C  
       __size_of_initLCD 004A                 _lcdClear 1210       __end_of_initKeypad 11FE  
          __size_of_main 004C            __size_of_read 0026              ??_lcdNibble 0001  
              putch@data 0005                 printf@ap 000B              lcdInst@data 0004  
