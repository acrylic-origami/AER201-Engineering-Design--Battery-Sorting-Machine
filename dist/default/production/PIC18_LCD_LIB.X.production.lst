

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Mar 18 22:07:28 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    68                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    75                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    76                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    77  0000                     
    78                           ; Version 1.40
    79                           ; Generated 01/12/2016 GMT
    80                           ; 
    81                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    82                           ; All rights reserved.
    83                           ; 
    84                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    85                           ; 
    86                           ; Redistribution and use in source and binary forms, with or without modification, are
    87                           ; permitted provided that the following conditions are met:
    88                           ; 
    89                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    90                           ;        conditions and the following disclaimer.
    91                           ; 
    92                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    93                           ;        of conditions and the following disclaimer in the documentation and/or other
    94                           ;        materials provided with the distribution.
    95                           ; 
    96                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    97                           ;        software without specific prior written permission.
    98                           ; 
    99                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   100                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   101                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   102                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   103                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   104                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   105                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   106                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   107                           ; 
   108                           ; 
   109                           ; Code-generator required, PIC18F4620 Definitions
   110                           ; 
   111                           ; SFR Addresses
   112  0000                     
   113                           	psect	idataCOMRAM
   114  002E8E                     __pidataCOMRAM:
   115                           	opt stack 0
   116                           
   117                           ;initializer for _redirectAngle_C
   118  002E8E  0050               	dw	80
   119                           
   120                           ;initializer for _conveyorServo
   121  002E90  0000               	dw	0
   122  002E92  0002               	dw	2
   123  002E94  0001               	dw	1
   124                           
   125                           ;initializer for _padServo
   126  002E96  0003               	dw	3
   127  002E98  0002               	dw	2
   128  002E9A  0002               	dw	2
   129                           
   130                           ;initializer for _padPin1
   131  002E9C  0000               	dw	0
   132  002E9E  0001               	dw	1
   133                           
   134                           ;initializer for _padPin2
   135  002EA0  0000               	dw	0
   136  002EA2  0002               	dw	2
   137                           
   138                           	psect	idataBANK0
   139  002EBA                     __pidataBANK0:
   140                           	opt stack 0
   141                           
   142                           ;initializer for _padAngle_CLOSE
   143  002EBA  0046               	dw	70
   144                           
   145                           ;initializer for _padAngle_NEUTRAL
   146  002EBC  005A               	dw	90
   147                           
   148                           ;initializer for _padAngle_OPEN
   149  002EBE  00B4               	dw	180
   150                           
   151                           ;initializer for _redirectAngle_9V
   152  002EC0  0064               	dw	100
   153                           
   154                           ;initializer for _redirectAngle_AA
   155  002EC2  003C               	dw	60
   156                           
   157                           ;initializer for _redirectAngle_OTHER
   158  002EC4  0078               	dw	120
   159                           
   160                           ;initializer for _AA_float
   161  002EC6  0000               	dw	0
   162  002EC8  0003               	dw	3
   163                           
   164                           ;initializer for _cylinderMotor
   165  002ECA  0002               	dw	2
   166  002ECC  0000               	dw	0
   167                           
   168                           	psect	idataBANK1
   169  002EDE                     __pidataBANK1:
   170                           	opt stack 0
   171                           
   172                           ;initializer for _redirectingServo
   173  002EDE  0001               	dw	1
   174  002EE0  0002               	dw	2
   175  002EE2  0003               	dw	3
   176                           
   177                           	psect	mediumconst
   178  00FDCC                     __pmediumconst:
   179                           	opt stack 0
   180  00FDCC  00                 	db	0
   181  00FDCD                     _dpowers:
   182                           	opt stack 0
   183  00FDCD  0001               	dw	1
   184  00FDCF  0000               	dw	0
   185  00FDD1  000A               	dw	10
   186  00FDD3  0000               	dw	0
   187  00FDD5  0064               	dw	100
   188  00FDD7  0000               	dw	0
   189  00FDD9  03E8               	dw	1000
   190  00FDDB  0000               	dw	0
   191  00FDDD  2710               	dw	10000
   192  00FDDF  0000               	dw	0
   193  00FDE1  86A0               	dw	34464
   194  00FDE3  0001               	dw	1
   195  00FDE5  4240               	dw	16960
   196  00FDE7  000F               	dw	15
   197  00FDE9  9680               	dw	38528
   198  00FDEB  0098               	dw	152
   199  00FDED  E100               	dw	57600
   200  00FDEF  05F5               	dw	1525
   201  00FDF1  CA00               	dw	51712
   202  00FDF3  3B9A               	dw	15258
   203  00FDF5                     __end_of_dpowers:
   204                           	opt stack 0
   205  00FDF5                     __npowers_:
   206                           	opt stack 0
   207  00FDF5  00                 	db	0
   208  00FDF6  80                 	db	128
   209  00FDF7  3F                 	db	63
   210  00FDF8  CD                 	db	205
   211  00FDF9  CC                 	db	204
   212  00FDFA  3D                 	db	61
   213  00FDFB  D7                 	db	215
   214  00FDFC  23                 	db	35
   215  00FDFD  3C                 	db	60
   216  00FDFE  12                 	db	18
   217  00FDFF  83                 	db	131
   218  00FE00  3A                 	db	58
   219  00FE01  B7                 	db	183
   220  00FE02  D1                 	db	209
   221  00FE03  38                 	db	56
   222  00FE04  C6                 	db	198
   223  00FE05  27                 	db	39
   224  00FE06  37                 	db	55
   225  00FE07  38                 	db	56
   226  00FE08  86                 	db	134
   227  00FE09  35                 	db	53
   228  00FE0A  C0                 	db	192
   229  00FE0B  D6                 	db	214
   230  00FE0C  33                 	db	51
   231  00FE0D  CC                 	db	204
   232  00FE0E  2B                 	db	43
   233  00FE0F  32                 	db	50
   234  00FE10  70                 	db	112
   235  00FE11  89                 	db	137
   236  00FE12  30                 	db	48
   237  00FE13  E7                 	db	231
   238  00FE14  DB                 	db	219
   239  00FE15  2E                 	db	46
   240  00FE16  E5                 	db	229
   241  00FE17  3C                 	db	60
   242  00FE18  1E                 	db	30
   243  00FE19  42                 	db	66
   244  00FE1A  A2                 	db	162
   245  00FE1B  0D                 	db	13
   246  00FE1C                     __end_of__npowers_:
   247                           	opt stack 0
   248  00FE1C                     __powers_:
   249                           	opt stack 0
   250  00FE1C  00                 	db	0
   251  00FE1D  80                 	db	128
   252  00FE1E  3F                 	db	63
   253  00FE1F  00                 	db	0
   254  00FE20  20                 	db	32
   255  00FE21  41                 	db	65
   256  00FE22  00                 	db	0
   257  00FE23  C8                 	db	200
   258  00FE24  42                 	db	66
   259  00FE25  00                 	db	0
   260  00FE26  7A                 	db	122
   261  00FE27  44                 	db	68
   262  00FE28  40                 	db	64
   263  00FE29  1C                 	db	28
   264  00FE2A  46                 	db	70
   265  00FE2B  50                 	db	80
   266  00FE2C  C3                 	db	195
   267  00FE2D  47                 	db	71
   268  00FE2E  24                 	db	36
   269  00FE2F  74                 	db	116
   270  00FE30  49                 	db	73
   271  00FE31  97                 	db	151
   272  00FE32  18                 	db	24
   273  00FE33  4B                 	db	75
   274  00FE34  BC                 	db	188
   275  00FE35  BE                 	db	190
   276  00FE36  4C                 	db	76
   277  00FE37  6B                 	db	107
   278  00FE38  6E                 	db	110
   279  00FE39  4E                 	db	78
   280  00FE3A  03                 	db	3
   281  00FE3B  15                 	db	21
   282  00FE3C  50                 	db	80
   283  00FE3D  79                 	db	121
   284  00FE3E  AD                 	db	173
   285  00FE3F  60                 	db	96
   286  00FE40  F3                 	db	243
   287  00FE41  49                 	db	73
   288  00FE42  71                 	db	113
   289  00FE43                     __end_of__powers_:
   290                           	opt stack 0
   291  00FE43                     _hexpowers:
   292                           	opt stack 0
   293  00FE43  0001               	dw	1
   294  00FE45  0000               	dw	0
   295  00FE47  0010               	dw	16
   296  00FE49  0000               	dw	0
   297  00FE4B  0100               	dw	256
   298  00FE4D  0000               	dw	0
   299  00FE4F  1000               	dw	4096
   300  00FE51  0000               	dw	0
   301  00FE53  0000               	dw	0
   302  00FE55  0001               	dw	1
   303  00FE57  0000               	dw	0
   304  00FE59  0010               	dw	16
   305  00FE5B  0000               	dw	0
   306  00FE5D  0100               	dw	256
   307  00FE5F  0000               	dw	0
   308  00FE61  1000               	dw	4096
   309  00FE63                     __end_of_hexpowers:
   310                           	opt stack 0
   311  00FE63                     _keys:
   312                           	opt stack 0
   313  00FE63  31                 	db	49
   314  00FE64  32                 	db	50
   315  00FE65  33                 	db	51
   316  00FE66  41                 	db	65
   317  00FE67  34                 	db	52
   318  00FE68  35                 	db	53
   319  00FE69  36                 	db	54
   320  00FE6A  42                 	db	66
   321  00FE6B  37                 	db	55
   322  00FE6C  38                 	db	56
   323  00FE6D  39                 	db	57
   324  00FE6E  43                 	db	67
   325  00FE6F  2A                 	db	42
   326  00FE70  30                 	db	48
   327  00FE71  23                 	db	35
   328  00FE72  44                 	db	68
   329  00FE73  00                 	db	0
   330  00FE74                     __end_of_keys:
   331                           	opt stack 0
   332  00FE74                     _happynewyear:
   333                           	opt stack 0
   334  00FE74  00                 	db	0
   335  00FE75  59                 	db	89
   336  00FE76  03                 	db	3
   337  00FE77  01                 	db	1
   338  00FE78  13                 	db	19
   339  00FE79  04                 	db	4
   340  00FE7A  17                 	db	23
   341  00FE7B                     __end_of_happynewyear:
   342                           	opt stack 0
   343  0000                     _ADCON0	set	4034
   344  0000                     _ADCON1	set	4033
   345  0000                     _ADCON2	set	4032
   346  0000                     _ADRESH	set	4036
   347  0000                     _ADRESL	set	4035
   348  0000                     _EEADR	set	4009
   349  0000                     _EEADRH	set	4010
   350  0000                     _EECON1	set	4006
   351  0000                     _EECON2	set	4007
   352  0000                     _EEDATA	set	4008
   353  0000                     _INTCONbits	set	4082
   354  0000                     _LATA	set	3977
   355  0000                     _LATB	set	3978
   356  0000                     _LATC	set	3979
   357  0000                     _LATD	set	3980
   358  0000                     _LATDbits	set	3980
   359  0000                     _LATE	set	3981
   360  0000                     _PORTA	set	3968
   361  0000                     _PORTB	set	3969
   362  0000                     _PORTBbits	set	3969
   363  0000                     _PORTC	set	3970
   364  0000                     _PORTD	set	3971
   365  0000                     _SSPADD	set	4040
   366  0000                     _SSPBUF	set	4041
   367  0000                     _SSPCON1	set	4038
   368  0000                     _SSPCON2	set	4037
   369  0000                     _SSPSTAT	set	4039
   370  0000                     _T0CON	set	4053
   371  0000                     _T1CON	set	4045
   372  0000                     _T2CON	set	4042
   373  0000                     _T3CON	set	4017
   374  0000                     _TMR0H	set	4055
   375  0000                     _TMR0L	set	4054
   376  0000                     _TMR1H	set	4047
   377  0000                     _TMR1L	set	4046
   378  0000                     _TMR3H	set	4019
   379  0000                     _TMR3L	set	4018
   380  0000                     _TRISA	set	3986
   381  0000                     _TRISB	set	3987
   382  0000                     _TRISC	set	3988
   383  0000                     _TRISD	set	3989
   384  0000                     _TRISE	set	3990
   385  0000                     _ACKDT	set	32301
   386  0000                     _ACKEN	set	32300
   387  0000                     _EEIF	set	32012
   388  0000                     _INT0IE	set	32660
   389  0000                     _INT0IF	set	32657
   390  0000                     _INT1IE	set	32643
   391  0000                     _INT1IF	set	32640
   392  0000                     _PEIE	set	32662
   393  0000                     _PEN	set	32298
   394  0000                     _RCEN	set	32299
   395  0000                     _RSEN	set	32297
   396  0000                     _SEN	set	32296
   397  0000                     _TMR0IE	set	32661
   398  0000                     _TMR0IF	set	32658
   399  0000                     _TMR1IE	set	31976
   400  0000                     _TMR1IF	set	31984
   401  0000                     _TMR2IF	set	31985
   402  0000                     _TMR3IE	set	32001
   403  0000                     _TMR3IF	set	32009
   404  0000                     _TRISC3	set	31907
   405  0000                     _TRISC4	set	31908
   406  00FE7B                     STR_8:
   407  00FE7B  63                 	db	99	;'c'
   408  00FE7C  6F                 	db	111	;'o'
   409  00FE7D  6E                 	db	110	;'n'
   410  00FE7E  76                 	db	118	;'v'
   411  00FE7F  65                 	db	101	;'e'
   412  00FE80  79                 	db	121	;'y'
   413  00FE81  6F                 	db	111	;'o'
   414  00FE82  72                 	db	114	;'r'
   415  00FE83  20                 	db	32
   416  00FE84  26                 	db	38
   417  00FE85  20                 	db	32
   418  00FE86  0A                 	db	10
   419  00FE87  63                 	db	99	;'c'
   420  00FE88  79                 	db	121	;'y'
   421  00FE89  6C                 	db	108	;'l'
   422  00FE8A  69                 	db	105	;'i'
   423  00FE8B  6E                 	db	110	;'n'
   424  00FE8C  64                 	db	100	;'d'
   425  00FE8D  65                 	db	101	;'e'
   426  00FE8E  72                 	db	114	;'r'
   427  00FE8F  20                 	db	32
   428  00FE90  6F                 	db	111	;'o'
   429  00FE91  6E                 	db	110	;'n'
   430  00FE92  3F                 	db	63	;'?'
   431  00FE93  00                 	db	0
   432  00FE94                     STR_4:
   433  00FE94  73                 	db	115	;'s'
   434  00FE95  69                 	db	105	;'i'
   435  00FE96  67                 	db	103	;'g'
   436  00FE97  6E                 	db	110	;'n'
   437  00FE98  61                 	db	97	;'a'
   438  00FE99  6C                 	db	108	;'l'
   439  00FE9A  3A                 	db	58	;':'
   440  00FE9B  20                 	db	32
   441  00FE9C  25                 	db	37
   442  00FE9D  64                 	db	100	;'d'
   443  00FE9E  20                 	db	32
   444  00FE9F  0A                 	db	10
   445  00FEA0  56                 	db	86	;'V'
   446  00FEA1  6F                 	db	111	;'o'
   447  00FEA2  6C                 	db	108	;'l'
   448  00FEA3  74                 	db	116	;'t'
   449  00FEA4  61                 	db	97	;'a'
   450  00FEA5  67                 	db	103	;'g'
   451  00FEA6  65                 	db	101	;'e'
   452  00FEA7  3A                 	db	58	;':'
   453  00FEA8  20                 	db	32
   454  00FEA9  25                 	db	37
   455  00FEAA  66                 	db	102	;'f'
   456  00FEAB  00                 	db	0
   457  00FEAC                     STR_5:
   458  00FEAC  73                 	db	115	;'s'
   459  00FEAD  65                 	db	101	;'e'
   460  00FEAE  74                 	db	116	;'t'
   461  00FEAF  20                 	db	32
   462  00FEB0  72                 	db	114	;'r'
   463  00FEB1  65                 	db	101	;'e'
   464  00FEB2  64                 	db	100	;'d'
   465  00FEB3  69                 	db	105	;'i'
   466  00FEB4  72                 	db	114	;'r'
   467  00FEB5  65                 	db	101	;'e'
   468  00FEB6  63                 	db	99	;'c'
   469  00FEB7  74                 	db	116	;'t'
   470  00FEB8  20                 	db	32
   471  00FEB9  61                 	db	97	;'a'
   472  00FEBA  6E                 	db	110	;'n'
   473  00FEBB  67                 	db	103	;'g'
   474  00FEBC  6C                 	db	108	;'l'
   475  00FEBD  65                 	db	101	;'e'
   476  00FEBE  3F                 	db	63	;'?'
   477  00FEBF  00                 	db	0
   478  00FEC0                     STR_2:
   479  00FEC0  69                 	db	105	;'i'
   480  00FEC1  6E                 	db	110	;'n'
   481  00FEC2  74                 	db	116	;'t'
   482  00FEC3  65                 	db	101	;'e'
   483  00FEC4  72                 	db	114	;'r'
   484  00FEC5  72                 	db	114	;'r'
   485  00FEC6  75                 	db	117	;'u'
   486  00FEC7  70                 	db	112	;'p'
   487  00FEC8  74                 	db	116	;'t'
   488  00FEC9  21                 	db	33
   489  00FECA  21                 	db	33
   490  00FECB  21                 	db	33
   491  00FECC  0A                 	db	10
   492  00FECD  63                 	db	99	;'c'
   493  00FECE  6C                 	db	108	;'l'
   494  00FECF  6F                 	db	111	;'o'
   495  00FED0  73                 	db	115	;'s'
   496  00FED1  65                 	db	101	;'e'
   497  00FED2  3F                 	db	63	;'?'
   498  00FED3  00                 	db	0
   499  00FED4                     STR_17:
   500  00FED4  25                 	db	37
   501  00FED5  63                 	db	99	;'c'
   502  00FED6  29                 	db	41
   503  00FED7  20                 	db	32
   504  00FED8  74                 	db	116	;'t'
   505  00FED9  69                 	db	105	;'i'
   506  00FEDA  6D                 	db	109	;'m'
   507  00FEDB  65                 	db	101	;'e'
   508  00FEDC  20                 	db	32
   509  00FEDD  20                 	db	32
   510  00FEDE  3C                 	db	60	;'<'
   511  00FEDF  41                 	db	65	;'A'
   512  00FEE0  20                 	db	32
   513  00FEE1  20                 	db	32
   514  00FEE2  20                 	db	32
   515  00FEE3  20                 	db	32
   516  00FEE4  20                 	db	32
   517  00FEE5  0A                 	db	10
   518  00FEE6  00                 	db	0
   519  00FEE7                     STR_13:
   520  00FEE7  73                 	db	115	;'s'
   521  00FEE8  74                 	db	116	;'t'
   522  00FEE9  61                 	db	97	;'a'
   523  00FEEA  72                 	db	114	;'r'
   524  00FEEB  74                 	db	116	;'t'
   525  00FEEC  20                 	db	32
   526  00FEED  20                 	db	32
   527  00FEEE  20                 	db	32
   528  00FEEF  3C                 	db	60	;'<'
   529  00FEF0  42                 	db	66	;'B'
   530  00FEF1  20                 	db	32
   531  00FEF2  20                 	db	32
   532  00FEF3  20                 	db	32
   533  00FEF4  20                 	db	32
   534  00FEF5  20                 	db	32
   535  00FEF6  20                 	db	32
   536  00FEF7  0A                 	db	10
   537  00FEF8  00                 	db	0
   538  00FEF9                     STR_11:
   539  00FEF9  20                 	db	32
   540  00FEFA  20                 	db	32
   541  00FEFB  68                 	db	104	;'h'
   542  00FEFC  68                 	db	104	;'h'
   543  00FEFD  3A                 	db	58	;':'
   544  00FEFE  6D                 	db	109	;'m'
   545  00FEFF  6D                 	db	109	;'m'
   546  00FF00  3A                 	db	58	;':'
   547  00FF01  73                 	db	115	;'s'
   548  00FF02  73                 	db	115	;'s'
   549  00FF03  20                 	db	32
   550  00FF04  20                 	db	32
   551  00FF05  20                 	db	32
   552  00FF06  20                 	db	32
   553  00FF07  20                 	db	32
   554  00FF08  20                 	db	32
   555  00FF09  0A                 	db	10
   556  00FF0A  00                 	db	0
   557  00FF0B                     STR_15:
   558  00FF0B  73                 	db	115	;'s'
   559  00FF0C  65                 	db	101	;'e'
   560  00FF0D  6C                 	db	108	;'l'
   561  00FF0E  65                 	db	101	;'e'
   562  00FF0F  63                 	db	99	;'c'
   563  00FF10  74                 	db	116	;'t'
   564  00FF11  20                 	db	32
   565  00FF12  72                 	db	114	;'r'
   566  00FF13  75                 	db	117	;'u'
   567  00FF14  6E                 	db	110	;'n'
   568  00FF15  3A                 	db	58	;':'
   569  00FF16  20                 	db	32
   570  00FF17  20                 	db	32
   571  00FF18  20                 	db	32
   572  00FF19  20                 	db	32
   573  00FF1A  20                 	db	32
   574  00FF1B  0A                 	db	10
   575  00FF1C  00                 	db	0
   576  00FF1D                     STR_19:
   577  00FF1D  74                 	db	116	;'t'
   578  00FF1E  69                 	db	105	;'i'
   579  00FF1F  6D                 	db	109	;'m'
   580  00FF20  65                 	db	101	;'e'
   581  00FF21  3A                 	db	58	;':'
   582  00FF22  20                 	db	32
   583  00FF23  6E                 	db	110	;'n'
   584  00FF24  6E                 	db	110	;'n'
   585  00FF25  6E                 	db	110	;'n'
   586  00FF26  20                 	db	32
   587  00FF27  73                 	db	115	;'s'
   588  00FF28  65                 	db	101	;'e'
   589  00FF29  63                 	db	99	;'c'
   590  00FF2A  20                 	db	32
   591  00FF2B  20                 	db	32
   592  00FF2C  20                 	db	32
   593  00FF2D  0A                 	db	10
   594  00FF2E  00                 	db	0
   595  00FF2F                     STR_21:
   596  00FF2F  5B                 	db	91	;'['
   597  00FF30  41                 	db	65	;'A'
   598  00FF31  41                 	db	65	;'A'
   599  00FF32  2C                 	db	44
   600  00FF33  39                 	db	57	;'9'
   601  00FF34  56                 	db	86	;'V'
   602  00FF35  2C                 	db	44
   603  00FF36  43                 	db	67	;'C'
   604  00FF37  2C                 	db	44
   605  00FF38  6F                 	db	111	;'o'
   606  00FF39  74                 	db	116	;'t'
   607  00FF3A  68                 	db	104	;'h'
   608  00FF3B  65                 	db	101	;'e'
   609  00FF3C  72                 	db	114	;'r'
   610  00FF3D  5D                 	db	93	;']'
   611  00FF3E  20                 	db	32
   612  00FF3F  0A                 	db	10
   613  00FF40  00                 	db	0
   614  00FF41                     STR_23:
   615  00FF41  30                 	db	48	;'0'
   616  00FF42  31                 	db	49	;'1'
   617  00FF43  32                 	db	50	;'2'
   618  00FF44  33                 	db	51	;'3'
   619  00FF45  34                 	db	52	;'4'
   620  00FF46  35                 	db	53	;'5'
   621  00FF47  36                 	db	54	;'6'
   622  00FF48  37                 	db	55	;'7'
   623  00FF49  38                 	db	56	;'8'
   624  00FF4A  39                 	db	57	;'9'
   625  00FF4B  61                 	db	97	;'a'
   626  00FF4C  62                 	db	98	;'b'
   627  00FF4D  63                 	db	99	;'c'
   628  00FF4E  64                 	db	100	;'d'
   629  00FF4F  65                 	db	101	;'e'
   630  00FF50  66                 	db	102	;'f'
   631  00FF51  00                 	db	0
   632  00FF52                     STR_20:
   633  00FF52  20                 	db	32
   634  00FF53  20                 	db	32
   635  00FF54  20                 	db	32
   636  00FF55  20                 	db	32
   637  00FF56  20                 	db	32
   638  00FF57  20                 	db	32
   639  00FF58  20                 	db	32
   640  00FF59  20                 	db	32
   641  00FF5A  20                 	db	32
   642  00FF5B  20                 	db	32
   643  00FF5C  20                 	db	32
   644  00FF5D  20                 	db	32
   645  00FF5E  20                 	db	32
   646  00FF5F  20                 	db	32
   647  00FF60  2A                 	db	42
   648  00FF61  3E                 	db	62	;'>'
   649  00FF62  00                 	db	0
   650  00FF63                     STR_16:
   651  00FF63  5B                 	db	91	;'['
   652  00FF64  31                 	db	49	;'1'
   653  00FF65  2C                 	db	44
   654  00FF66  32                 	db	50	;'2'
   655  00FF67  2C                 	db	44
   656  00FF68  33                 	db	51	;'3'
   657  00FF69  2C                 	db	44
   658  00FF6A  34                 	db	52	;'4'
   659  00FF6B  5D                 	db	93	;']'
   660  00FF6C  20                 	db	32
   661  00FF6D  20                 	db	32
   662  00FF6E  20                 	db	32
   663  00FF6F  20                 	db	32
   664  00FF70  20                 	db	32
   665  00FF71  2A                 	db	42
   666  00FF72  3E                 	db	62	;'>'
   667  00FF73  00                 	db	0
   668  00FF74                     STR_14:
   669  00FF74  68                 	db	104	;'h'
   670  00FF75  69                 	db	105	;'i'
   671  00FF76  73                 	db	115	;'s'
   672  00FF77  74                 	db	116	;'t'
   673  00FF78  6F                 	db	111	;'o'
   674  00FF79  72                 	db	114	;'r'
   675  00FF7A  79                 	db	121	;'y'
   676  00FF7B  20                 	db	32
   677  00FF7C  3C                 	db	60	;'<'
   678  00FF7D  43                 	db	67	;'C'
   679  00FF7E  20                 	db	32
   680  00FF7F  20                 	db	32
   681  00FF80  20                 	db	32
   682  00FF81  20                 	db	32
   683  00FF82  2A                 	db	42
   684  00FF83  3E                 	db	62	;'>'
   685  00FF84  00                 	db	0
   686  00FF85                     STR_18:
   687  00FF85  20                 	db	32
   688  00FF86  20                 	db	32
   689  00FF87  20                 	db	32
   690  00FF88  73                 	db	115	;'s'
   691  00FF89  74                 	db	116	;'t'
   692  00FF8A  61                 	db	97	;'a'
   693  00FF8B  74                 	db	116	;'t'
   694  00FF8C  73                 	db	115	;'s'
   695  00FF8D  20                 	db	32
   696  00FF8E  3C                 	db	60	;'<'
   697  00FF8F  42                 	db	66	;'B'
   698  00FF90  20                 	db	32
   699  00FF91  20                 	db	32
   700  00FF92  20                 	db	32
   701  00FF93  2A                 	db	42
   702  00FF94  3E                 	db	62	;'>'
   703  00FF95  00                 	db	0
   704  00FF96                     STR_22:
   705  00FF96  5B                 	db	91	;'['
   706  00FF97  6E                 	db	110	;'n'
   707  00FF98  6E                 	db	110	;'n'
   708  00FF99  2C                 	db	44
   709  00FF9A  6E                 	db	110	;'n'
   710  00FF9B  2C                 	db	44
   711  00FF9C  6E                 	db	110	;'n'
   712  00FF9D  2C                 	db	44
   713  00FF9E  6E                 	db	110	;'n'
   714  00FF9F  6E                 	db	110	;'n'
   715  00FFA0  5D                 	db	93	;']'
   716  00FFA1  20                 	db	32
   717  00FFA2  20                 	db	32
   718  00FFA3  20                 	db	32
   719  00FFA4  2A                 	db	42
   720  00FFA5  3E                 	db	62	;'>'
   721  00FFA6  00                 	db	0
   722  00FFA7                     STR_12:
   723  00FFA7  20                 	db	32
   724  00FFA8  20                 	db	32
   725  00FFA9  6D                 	db	109	;'m'
   726  00FFAA  6D                 	db	109	;'m'
   727  00FFAB  3A                 	db	58	;':'
   728  00FFAC  64                 	db	100	;'d'
   729  00FFAD  64                 	db	100	;'d'
   730  00FFAE  3A                 	db	58	;':'
   731  00FFAF  79                 	db	121	;'y'
   732  00FFB0  79                 	db	121	;'y'
   733  00FFB1  20                 	db	32
   734  00FFB2  20                 	db	32
   735  00FFB3  20                 	db	32
   736  00FFB4  20                 	db	32
   737  00FFB5  41                 	db	65	;'A'
   738  00FFB6  3E                 	db	62	;'>'
   739  00FFB7  00                 	db	0
   740  00FFB8                     STR_6:
   741  00FFB8  72                 	db	114	;'r'
   742  00FFB9  65                 	db	101	;'e'
   743  00FFBA  6C                 	db	108	;'l'
   744  00FFBB  65                 	db	101	;'e'
   745  00FFBC  61                 	db	97	;'a'
   746  00FFBD  73                 	db	115	;'s'
   747  00FFBE  65                 	db	101	;'e'
   748  00FFBF  20                 	db	32
   749  00FFC0  62                 	db	98	;'b'
   750  00FFC1  61                 	db	97	;'a'
   751  00FFC2  74                 	db	116	;'t'
   752  00FFC3  74                 	db	116	;'t'
   753  00FFC4  65                 	db	101	;'e'
   754  00FFC5  72                 	db	114	;'r'
   755  00FFC6  79                 	db	121	;'y'
   756  00FFC7  3F                 	db	63	;'?'
   757  00FFC8  00                 	db	0
   758  00FFC9                     STR_7:
   759  00FFC9  72                 	db	114	;'r'
   760  00FFCA  65                 	db	101	;'e'
   761  00FFCB  73                 	db	115	;'s'
   762  00FFCC  65                 	db	101	;'e'
   763  00FFCD  74                 	db	116	;'t'
   764  00FFCE  20                 	db	32
   765  00FFCF  74                 	db	116	;'t'
   766  00FFD0  68                 	db	104	;'h'
   767  00FFD1  65                 	db	101	;'e'
   768  00FFD2  20                 	db	32
   769  00FFD3  70                 	db	112	;'p'
   770  00FFD4  61                 	db	97	;'a'
   771  00FFD5  64                 	db	100	;'d'
   772  00FFD6  3F                 	db	63	;'?'
   773  00FFD7  00                 	db	0
   774  00FFD8                     STR_3:
   775  00FFD8  72                 	db	114	;'r'
   776  00FFD9  65                 	db	101	;'e'
   777  00FFDA  61                 	db	97	;'a'
   778  00FFDB  64                 	db	100	;'d'
   779  00FFDC  20                 	db	32
   780  00FFDD  76                 	db	118	;'v'
   781  00FFDE  6F                 	db	111	;'o'
   782  00FFDF  6C                 	db	108	;'l'
   783  00FFE0  74                 	db	116	;'t'
   784  00FFE1  61                 	db	97	;'a'
   785  00FFE2  67                 	db	103	;'g'
   786  00FFE3  65                 	db	101	;'e'
   787  00FFE4  3F                 	db	63	;'?'
   788  00FFE5  00                 	db	0
   789  00FFE6  5B                 	db	91	;'['
   790  00FFE7  25                 	db	37
   791  00FFE8  78                 	db	120	;'x'
   792  00FFE9  20                 	db	32
   793  00FFEA  25                 	db	37
   794  00FFEB  78                 	db	120	;'x'
   795  00FFEC  5D                 	db	93	;']'
   796  00FFED  0A                 	db	10
   797  00FFEE  00                 	db	0
   798  00FFEF  74                 	db	116	;'t'
   799  00FFF0  31                 	db	49	;'1'
   800  00FFF1  3A                 	db	58	;':'
   801  00FFF2  20                 	db	32
   802  00FFF3  25                 	db	37
   803  00FFF4  78                 	db	120	;'x'
   804  00FFF5  20                 	db	32
   805  00FFF6  00                 	db	0
   806  00FFF7                     STR_1:
   807  00FFF7  72                 	db	114	;'r'
   808  00FFF8  75                 	db	117	;'u'
   809  00FFF9  6E                 	db	110	;'n'
   810  00FFFA  6E                 	db	110	;'n'
   811  00FFFB  69                 	db	105	;'i'
   812  00FFFC  6E                 	db	110	;'n'
   813  00FFFD  67                 	db	103	;'g'
   814  00FFFE  00                 	db	0
   815                           
   816                           ; #config settings
   817  00FFFF  00                 	db	0	; dummy byte at the end
   818  0000                     
   819                           	psect	cinit
   820  00262C                     __pcinit:
   821                           	opt stack 0
   822  00262C                     start_initialization:
   823                           	opt stack 0
   824  00262C                     __initialization:
   825                           	opt stack 0
   826                           
   827                           ; Initialize objects allocated to BANK1 (6 bytes)
   828                           ; load TBLPTR registers with __pidataBANK1
   829  00262C  0EDE               	movlw	low __pidataBANK1
   830  00262E  6EF6               	movwf	tblptrl,c
   831  002630  0E2E               	movlw	high __pidataBANK1
   832  002632  6EF7               	movwf	tblptrh,c
   833  002634  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   834  002636  6EF8               	movwf	tblptru,c
   835  002638  EE01  F04A         	lfsr	0,__pdataBANK1
   836  00263C  EE10 F006          	lfsr	1,6
   837  002640                     copy_data0:
   838  002640  0009               	tblrd		*+
   839  002642  CFF5 FFEE          	movff	tablat,postinc0
   840  002646  50E5               	movf	postdec1,w,c
   841  002648  50E1               	movf	fsr1l,w,c
   842  00264A  E1FA               	bnz	copy_data0
   843                           
   844                           ; Initialize objects allocated to BANK0 (20 bytes)
   845                           ; load TBLPTR registers with __pidataBANK0
   846  00264C  0EBA               	movlw	low __pidataBANK0
   847  00264E  6EF6               	movwf	tblptrl,c
   848  002650  0E2E               	movlw	high __pidataBANK0
   849  002652  6EF7               	movwf	tblptrh,c
   850  002654  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   851  002656  6EF8               	movwf	tblptru,c
   852  002658  EE00  F0E0         	lfsr	0,__pdataBANK0
   853  00265C  EE10 F014          	lfsr	1,20
   854  002660                     copy_data1:
   855  002660  0009               	tblrd		*+
   856  002662  CFF5 FFEE          	movff	tablat,postinc0
   857  002666  50E5               	movf	postdec1,w,c
   858  002668  50E1               	movf	fsr1l,w,c
   859  00266A  E1FA               	bnz	copy_data1
   860                           
   861                           ; Initialize objects allocated to COMRAM (22 bytes)
   862                           ; load TBLPTR registers with __pidataCOMRAM
   863  00266C  0E8E               	movlw	low __pidataCOMRAM
   864  00266E  6EF6               	movwf	tblptrl,c
   865  002670  0E2E               	movlw	high __pidataCOMRAM
   866  002672  6EF7               	movwf	tblptrh,c
   867  002674  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   868  002676  6EF8               	movwf	tblptru,c
   869  002678  EE00  F03D         	lfsr	0,__pdataCOMRAM
   870  00267C  EE10 F016          	lfsr	1,22
   871  002680                     copy_data2:
   872  002680  0009               	tblrd		*+
   873  002682  CFF5 FFEE          	movff	tablat,postinc0
   874  002686  50E5               	movf	postdec1,w,c
   875  002688  50E1               	movf	fsr1l,w,c
   876  00268A  E1FA               	bnz	copy_data2
   877                           
   878                           ; Clear objects allocated to BANK1 (32 bytes)
   879  00268C  EE01  F02A         	lfsr	0,__pbssBANK1
   880  002690  0E20               	movlw	32
   881  002692                     clear_0:
   882  002692  6AEE               	clrf	postinc0,c
   883  002694  06E8               	decf	wreg,f,c
   884  002696  E1FD               	bnz	clear_0
   885                           
   886                           ; Clear objects allocated to BANK0 (11 bytes)
   887  002698  EE00  F0F4         	lfsr	0,__pbssBANK0
   888  00269C  0E0B               	movlw	11
   889  00269E                     clear_1:
   890  00269E  6AEE               	clrf	postinc0,c
   891  0026A0  06E8               	decf	wreg,f,c
   892  0026A2  E1FD               	bnz	clear_1
   893                           
   894                           ; Clear objects allocated to COMRAM (9 bytes)
   895  0026A4  EE00  F053         	lfsr	0,__pbssCOMRAM
   896  0026A8  0E09               	movlw	9
   897  0026AA                     clear_2:
   898  0026AA  6AEE               	clrf	postinc0,c
   899  0026AC  06E8               	decf	wreg,f,c
   900  0026AE  E1FD               	bnz	clear_2
   901  0026B0                     end_of_initialization:
   902                           	opt stack 0
   903  0026B0                     __end_of__initialization:
   904                           	opt stack 0
   905  0026B0  905C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   906  0026B2  925C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   907  0026B4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   908  0026B6  6EF8               	movwf	tblptru,c
   909  0026B8  0100               	movlb	0
   910  0026BA  EF32  F012         	goto	_main	;jump to C main() function
   911                           tblptru	equ	0xFF8
   912                           tblptrh	equ	0xFF7
   913                           tblptrl	equ	0xFF6
   914                           tablat	equ	0xFF5
   915                           postinc0	equ	0xFEE
   916                           wreg	equ	0xFE8
   917                           postdec1	equ	0xFE5
   918                           fsr1l	equ	0xFE1
   919                           
   920                           	psect	bssCOMRAM
   921  000053                     __pbssCOMRAM:
   922                           	opt stack 0
   923  000053                     _padPin3:
   924                           	opt stack 0
   925  000053                     	ds	4
   926  000057                     _count:
   927                           	opt stack 0
   928  000057                     	ds	2
   929  000059                     _prevTime:
   930                           	opt stack 0
   931  000059                     	ds	2
   932  00005B                     _lastKey:
   933                           	opt stack 0
   934  00005B                     	ds	1
   935                           tblptru	equ	0xFF8
   936                           tblptrh	equ	0xFF7
   937                           tblptrl	equ	0xFF6
   938                           tablat	equ	0xFF5
   939                           postinc0	equ	0xFEE
   940                           wreg	equ	0xFE8
   941                           postdec1	equ	0xFE5
   942                           fsr1l	equ	0xFE1
   943                           
   944                           	psect	dataCOMRAM
   945  00003D                     __pdataCOMRAM:
   946                           	opt stack 0
   947  00003D                     _redirectAngle_C:
   948                           	opt stack 0
   949  00003D                     	ds	2
   950  00003F                     _conveyorServo:
   951                           	opt stack 0
   952  00003F                     	ds	6
   953  000045                     _padServo:
   954                           	opt stack 0
   955  000045                     	ds	6
   956  00004B                     _padPin1:
   957                           	opt stack 0
   958  00004B                     	ds	4
   959  00004F                     _padPin2:
   960                           	opt stack 0
   961  00004F                     	ds	4
   962                           tblptru	equ	0xFF8
   963                           tblptrh	equ	0xFF7
   964                           tblptrl	equ	0xFF6
   965                           tablat	equ	0xFF5
   966                           postinc0	equ	0xFEE
   967                           wreg	equ	0xFE8
   968                           postdec1	equ	0xFE5
   969                           fsr1l	equ	0xFE1
   970                           
   971                           	psect	bssBANK0
   972  0000F4                     __pbssBANK0:
   973                           	opt stack 0
   974  0000F4                     _V_LIM_9V:
   975                           	opt stack 0
   976  0000F4                     	ds	3
   977  0000F7                     _V_LIM_AA:
   978                           	opt stack 0
   979  0000F7                     	ds	3
   980  0000FA                     _V_LIM_C:
   981                           	opt stack 0
   982  0000FA                     	ds	3
   983  0000FD                     _batteryDetected:
   984                           	opt stack 0
   985  0000FD                     	ds	2
   986                           tblptru	equ	0xFF8
   987                           tblptrh	equ	0xFF7
   988                           tblptrl	equ	0xFF6
   989                           tablat	equ	0xFF5
   990                           postinc0	equ	0xFEE
   991                           wreg	equ	0xFE8
   992                           postdec1	equ	0xFE5
   993                           fsr1l	equ	0xFE1
   994                           
   995                           	psect	dataBANK0
   996  0000E0                     __pdataBANK0:
   997                           	opt stack 0
   998  0000E0                     _padAngle_CLOSE:
   999                           	opt stack 0
  1000  0000E0                     	ds	2
  1001  0000E2                     _padAngle_NEUTRAL:
  1002                           	opt stack 0
  1003  0000E2                     	ds	2
  1004  0000E4                     _padAngle_OPEN:
  1005                           	opt stack 0
  1006  0000E4                     	ds	2
  1007  0000E6                     _redirectAngle_9V:
  1008                           	opt stack 0
  1009  0000E6                     	ds	2
  1010  0000E8                     _redirectAngle_AA:
  1011                           	opt stack 0
  1012  0000E8                     	ds	2
  1013  0000EA                     _redirectAngle_OTHER:
  1014                           	opt stack 0
  1015  0000EA                     	ds	2
  1016  0000EC                     _AA_float:
  1017                           	opt stack 0
  1018  0000EC                     	ds	4
  1019  0000F0                     _cylinderMotor:
  1020                           	opt stack 0
  1021  0000F0                     	ds	4
  1022                           tblptru	equ	0xFF8
  1023                           tblptrh	equ	0xFF7
  1024                           tblptrl	equ	0xFF6
  1025                           tablat	equ	0xFF5
  1026                           postinc0	equ	0xFEE
  1027                           wreg	equ	0xFE8
  1028                           postdec1	equ	0xFE5
  1029                           fsr1l	equ	0xFE1
  1030                           
  1031                           	psect	bssBANK1
  1032  00012A                     __pbssBANK1:
  1033                           	opt stack 0
  1034  00012A                     _pulse:
  1035                           	opt stack 0
  1036  00012A                     	ds	16
  1037  00013A                     _servo:
  1038                           	opt stack 0
  1039  00013A                     	ds	16
  1040                           tblptru	equ	0xFF8
  1041                           tblptrh	equ	0xFF7
  1042                           tblptrl	equ	0xFF6
  1043                           tablat	equ	0xFF5
  1044                           postinc0	equ	0xFEE
  1045                           wreg	equ	0xFE8
  1046                           postdec1	equ	0xFE5
  1047                           fsr1l	equ	0xFE1
  1048                           
  1049                           	psect	dataBANK1
  1050  00014A                     __pdataBANK1:
  1051                           	opt stack 0
  1052  00014A                     _redirectingServo:
  1053                           	opt stack 0
  1054  00014A                     	ds	6
  1055                           tblptru	equ	0xFF8
  1056                           tblptrh	equ	0xFF7
  1057                           tblptrl	equ	0xFF6
  1058                           tablat	equ	0xFF5
  1059                           postinc0	equ	0xFEE
  1060                           wreg	equ	0xFE8
  1061                           postdec1	equ	0xFE5
  1062                           fsr1l	equ	0xFE1
  1063                           
  1064                           	psect	cstackBANK1
  1065  000100                     __pcstackBANK1:
  1066                           	opt stack 0
  1067  000100                     initServo@motor:
  1068                           	opt stack 0
  1069  000100                     _printf$1337:
  1070                           	opt stack 0
  1071                           
  1072                           ; 3 bytes @ 0x0
  1073  000100                     	ds	2
  1074  000102                     initServo@angle:
  1075                           	opt stack 0
  1076                           
  1077                           ; 2 bytes @ 0x2
  1078  000102                     	ds	1
  1079  000103                     printf@idx:
  1080                           	opt stack 0
  1081                           
  1082                           ; 1 bytes @ 0x3
  1083  000103                     	ds	1
  1084  000104                     initServo@port:
  1085                           	opt stack 0
  1086  000104                     printf@ap:
  1087                           	opt stack 0
  1088                           
  1089                           ; 2 bytes @ 0x4
  1090  000104                     	ds	2
  1091  000106                     initServo@pin:
  1092                           	opt stack 0
  1093  000106                     printf@flag:
  1094                           	opt stack 0
  1095                           
  1096                           ; 2 bytes @ 0x6
  1097  000106                     	ds	2
  1098  000108                     initServo@timer:
  1099                           	opt stack 0
  1100  000108                     printf@prec:
  1101                           	opt stack 0
  1102                           
  1103                           ; 2 bytes @ 0x8
  1104  000108                     	ds	2
  1105  00010A                     printf@exp:
  1106                           	opt stack 0
  1107                           
  1108                           ; 2 bytes @ 0xA
  1109  00010A                     	ds	2
  1110  00010C                     printf@tmpval:
  1111                           	opt stack 0
  1112                           
  1113                           ; 4 bytes @ 0xC
  1114  00010C                     	ds	4
  1115  000110                     printf@val:
  1116                           	opt stack 0
  1117                           
  1118                           ; 4 bytes @ 0x10
  1119  000110                     	ds	4
  1120  000114                     printf@fval:
  1121                           	opt stack 0
  1122                           
  1123                           ; 3 bytes @ 0x14
  1124  000114                     	ds	3
  1125  000117                     printf@c:
  1126                           	opt stack 0
  1127                           
  1128                           ; 1 bytes @ 0x17
  1129  000117                     	ds	1
  1130  000118                     ??_sortBattery:
  1131                           
  1132                           ; 1 bytes @ 0x18
  1133  000118                     	ds	2
  1134  00011A                     sortBattery@V_float:
  1135                           	opt stack 0
  1136                           
  1137                           ; 3 bytes @ 0x1A
  1138  00011A                     	ds	3
  1139  00011D                     sortBattery@Vcc:
  1140                           	opt stack 0
  1141                           
  1142                           ; 3 bytes @ 0x1D
  1143  00011D                     	ds	3
  1144  000120                     sortBattery@resolution:
  1145                           	opt stack 0
  1146                           
  1147                           ; 3 bytes @ 0x20
  1148  000120                     	ds	3
  1149  000123                     sortBattery@signal:
  1150                           	opt stack 0
  1151                           
  1152                           ; 2 bytes @ 0x23
  1153  000123                     	ds	2
  1154  000125                     sortBattery@targetAngle:
  1155                           	opt stack 0
  1156                           
  1157                           ; 2 bytes @ 0x25
  1158  000125                     	ds	2
  1159  000127                     sortBattery@V:
  1160                           	opt stack 0
  1161                           
  1162                           ; 3 bytes @ 0x27
  1163  000127                     	ds	3
  1164                           tblptru	equ	0xFF8
  1165                           tblptrh	equ	0xFF7
  1166                           tblptrl	equ	0xFF6
  1167                           tablat	equ	0xFF5
  1168                           postinc0	equ	0xFEE
  1169                           wreg	equ	0xFE8
  1170                           postdec1	equ	0xFE5
  1171                           fsr1l	equ	0xFE1
  1172                           
  1173                           	psect	cstackBANK0
  1174  000080                     __pcstackBANK0:
  1175                           	opt stack 0
  1176  000080                     ??___ftdiv:
  1177                           
  1178                           ; 1 bytes @ 0x0
  1179  000080                     	ds	3
  1180  000083                     ___ftdiv@cntr:
  1181                           	opt stack 0
  1182                           
  1183                           ; 1 bytes @ 0x3
  1184  000083                     	ds	1
  1185  000084                     ___ftdiv@f3:
  1186                           	opt stack 0
  1187                           
  1188                           ; 3 bytes @ 0x4
  1189  000084                     	ds	3
  1190  000087                     ___ftdiv@exp:
  1191                           	opt stack 0
  1192                           
  1193                           ; 1 bytes @ 0x7
  1194  000087                     	ds	1
  1195  000088                     ___ftdiv@sign:
  1196                           	opt stack 0
  1197                           
  1198                           ; 1 bytes @ 0x8
  1199  000088                     	ds	1
  1200  000089                     ?___ftmul:
  1201                           	opt stack 0
  1202  000089                     ___ftmul@f1:
  1203                           	opt stack 0
  1204                           
  1205                           ; 3 bytes @ 0x9
  1206  000089                     	ds	3
  1207  00008C                     ___ftmul@f2:
  1208                           	opt stack 0
  1209                           
  1210                           ; 3 bytes @ 0xC
  1211  00008C                     	ds	3
  1212  00008F                     ??___ftmul:
  1213                           
  1214                           ; 1 bytes @ 0xF
  1215  00008F                     	ds	3
  1216  000092                     ___ftmul@exp:
  1217                           	opt stack 0
  1218                           
  1219                           ; 1 bytes @ 0x12
  1220  000092                     	ds	1
  1221  000093                     ___ftmul@f3_as_product:
  1222                           	opt stack 0
  1223                           
  1224                           ; 3 bytes @ 0x13
  1225  000093                     	ds	3
  1226  000096                     ___ftmul@cntr:
  1227                           	opt stack 0
  1228                           
  1229                           ; 1 bytes @ 0x16
  1230  000096                     	ds	1
  1231  000097                     ___ftmul@sign:
  1232                           	opt stack 0
  1233                           
  1234                           ; 1 bytes @ 0x17
  1235  000097                     	ds	1
  1236  000098                     ?_fround:
  1237                           	opt stack 0
  1238  000098                     ?_scale:
  1239                           	opt stack 0
  1240                           
  1241                           ; 3 bytes @ 0x18
  1242  000098                     	ds	3
  1243  00009B                     _fround$1335:
  1244                           	opt stack 0
  1245  00009B                     _scale$1336:
  1246                           	opt stack 0
  1247                           
  1248                           ; 3 bytes @ 0x1B
  1249  00009B                     	ds	3
  1250  00009E                     scale@scl:
  1251                           	opt stack 0
  1252  00009E                     _fround$1334:
  1253                           	opt stack 0
  1254                           
  1255                           ; 3 bytes @ 0x1E
  1256  00009E                     	ds	3
  1257  0000A1                     fround@prec:
  1258                           	opt stack 0
  1259                           
  1260                           ; 1 bytes @ 0x21
  1261  0000A1                     	ds	1
  1262  0000A2                     ?___ftadd:
  1263                           	opt stack 0
  1264  0000A2                     ___ftadd@f1:
  1265                           	opt stack 0
  1266                           
  1267                           ; 3 bytes @ 0x22
  1268  0000A2                     	ds	3
  1269  0000A5                     ___ftadd@f2:
  1270                           	opt stack 0
  1271                           
  1272                           ; 3 bytes @ 0x25
  1273  0000A5                     	ds	3
  1274  0000A8                     ??___ftadd:
  1275                           
  1276                           ; 1 bytes @ 0x28
  1277  0000A8                     	ds	3
  1278  0000AB                     ___ftadd@sign:
  1279                           	opt stack 0
  1280                           
  1281                           ; 1 bytes @ 0x2B
  1282  0000AB                     	ds	1
  1283  0000AC                     ___ftadd@exp2:
  1284                           	opt stack 0
  1285                           
  1286                           ; 1 bytes @ 0x2C
  1287  0000AC                     	ds	1
  1288  0000AD                     ___ftadd@exp1:
  1289                           	opt stack 0
  1290                           
  1291                           ; 1 bytes @ 0x2D
  1292  0000AD                     	ds	1
  1293  0000AE                     ?___ftsub:
  1294                           	opt stack 0
  1295  0000AE                     ?___fttol:
  1296                           	opt stack 0
  1297  0000AE                     ___ftsub@f1:
  1298                           	opt stack 0
  1299  0000AE                     ___fttol@f1:
  1300                           	opt stack 0
  1301                           
  1302                           ; 3 bytes @ 0x2E
  1303  0000AE                     	ds	3
  1304  0000B1                     ___ftsub@f2:
  1305                           	opt stack 0
  1306                           
  1307                           ; 3 bytes @ 0x31
  1308  0000B1                     	ds	1
  1309  0000B2                     ??___fttol:
  1310                           
  1311                           ; 1 bytes @ 0x32
  1312  0000B2                     	ds	5
  1313  0000B7                     ___fttol@sign1:
  1314                           	opt stack 0
  1315                           
  1316                           ; 1 bytes @ 0x37
  1317  0000B7                     	ds	1
  1318  0000B8                     ___fttol@lval:
  1319                           	opt stack 0
  1320                           
  1321                           ; 4 bytes @ 0x38
  1322  0000B8                     	ds	4
  1323  0000BC                     ___fttol@exp1:
  1324                           	opt stack 0
  1325                           
  1326                           ; 1 bytes @ 0x3C
  1327  0000BC                     	ds	1
  1328  0000BD                     ?_printf:
  1329                           	opt stack 0
  1330  0000BD                     ?_angleToPulse:
  1331                           	opt stack 0
  1332  0000BD                     angleToPulse@angle:
  1333                           	opt stack 0
  1334  0000BD                     printf@f:
  1335                           	opt stack 0
  1336                           
  1337                           ; 2 bytes @ 0x3D
  1338  0000BD                     	ds	4
  1339  0000C1                     ??_angleToPulse:
  1340                           
  1341                           ; 1 bytes @ 0x41
  1342  0000C1                     	ds	3
  1343  0000C4                     ??_printf:
  1344                           
  1345                           ; 1 bytes @ 0x44
  1346  0000C4                     	ds	1
  1347  0000C5                     angleToPulse@offset:
  1348                           	opt stack 0
  1349                           
  1350                           ; 4 bytes @ 0x45
  1351  0000C5                     	ds	4
  1352  0000C9                     angleToPulse@a180:
  1353                           	opt stack 0
  1354                           
  1355                           ; 4 bytes @ 0x49
  1356  0000C9                     	ds	1
  1357  0000CA                     showInterface@key:
  1358                           	opt stack 0
  1359  0000CA                     pause@message:
  1360                           	opt stack 0
  1361                           
  1362                           ; 2 bytes @ 0x4A
  1363  0000CA                     	ds	3
  1364  0000CD                     _angleToPulse$1333:
  1365                           	opt stack 0
  1366                           
  1367                           ; 3 bytes @ 0x4D
  1368  0000CD                     	ds	3
  1369  0000D0                     angleToPulse@a000:
  1370                           	opt stack 0
  1371                           
  1372                           ; 4 bytes @ 0x50
  1373  0000D0                     	ds	4
  1374  0000D4                     setAngle@motor:
  1375                           	opt stack 0
  1376                           
  1377                           ; 2 bytes @ 0x54
  1378  0000D4                     	ds	2
  1379  0000D6                     setAngle@angle:
  1380                           	opt stack 0
  1381                           
  1382                           ; 2 bytes @ 0x56
  1383  0000D6                     	ds	2
  1384  0000D8                     ??_setAngle:
  1385                           
  1386                           ; 1 bytes @ 0x58
  1387  0000D8                     	ds	6
  1388  0000DE                     ??_initServo:
  1389                           
  1390                           ; 1 bytes @ 0x5E
  1391  0000DE                     	ds	2
  1392                           tblptru	equ	0xFF8
  1393                           tblptrh	equ	0xFF7
  1394                           tblptrl	equ	0xFF6
  1395                           tablat	equ	0xFF5
  1396                           postinc0	equ	0xFEE
  1397                           wreg	equ	0xFE8
  1398                           postdec1	equ	0xFE5
  1399                           fsr1l	equ	0xFE1
  1400                           
  1401                           	psect	cstackCOMRAM
  1402  000001                     __pcstackCOMRAM:
  1403                           	opt stack 0
  1404  000001                     ?i2_digitalRead:
  1405                           	opt stack 0
  1406  000001                     keyPressedInterruptService@key:
  1407                           	opt stack 0
  1408  000001                     i2digitalRead@pin:
  1409                           	opt stack 0
  1410  000001                     i2digitalWrite@pin:
  1411                           	opt stack 0
  1412  000001                     i2startTimer@timer:
  1413                           	opt stack 0
  1414                           
  1415                           ; 2 bytes @ 0x0
  1416  000001                     	ds	2
  1417  000003                     ??i2_digitalRead:
  1418  000003                     i2digitalWrite@val:
  1419                           	opt stack 0
  1420  000003                     i2startTimer@val:
  1421                           	opt stack 0
  1422                           
  1423                           ; 4 bytes @ 0x2
  1424  000003                     	ds	2
  1425  000005                     ??i2_digitalWrite:
  1426                           
  1427                           ; 1 bytes @ 0x4
  1428  000005                     	ds	2
  1429  000007                     ??i2_startTimer:
  1430                           
  1431                           ; 1 bytes @ 0x6
  1432  000007                     	ds	1
  1433  000008                     i2digitalWrite@p:
  1434                           	opt stack 0
  1435                           
  1436                           ; 2 bytes @ 0x7
  1437  000008                     	ds	2
  1438  00000A                     ??_servoInterruptService:
  1439                           
  1440                           ; 1 bytes @ 0x9
  1441  00000A                     	ds	2
  1442  00000C                     servoInterruptService@flags:
  1443                           	opt stack 0
  1444                           
  1445                           ; 8 bytes @ 0xB
  1446  00000C                     	ds	8
  1447  000014                     servoInterruptService@i:
  1448                           	opt stack 0
  1449                           
  1450                           ; 2 bytes @ 0x13
  1451  000014                     	ds	2
  1452  000016                     ??_service:
  1453                           
  1454                           ; 1 bytes @ 0x15
  1455  000016                     	ds	14
  1456  000024                     ?_digitalRead:
  1457                           	opt stack 0
  1458  000024                     ?___awmod:
  1459                           	opt stack 0
  1460  000024                     ?___ftpack:
  1461                           	opt stack 0
  1462  000024                     ?___ftneg:
  1463                           	opt stack 0
  1464  000024                     ?_analogRead:
  1465                           	opt stack 0
  1466  000024                     ?__tdiv_to_l_:
  1467                           	opt stack 0
  1468  000024                     ?__div_to_l_:
  1469                           	opt stack 0
  1470  000024                     ?___lldiv:
  1471                           	opt stack 0
  1472  000024                     lcdNibble@temp:
  1473                           	opt stack 0
  1474  000024                     readKeypad@key:
  1475                           	opt stack 0
  1476  000024                     digitalRead@pin:
  1477                           	opt stack 0
  1478  000024                     digitalWrite@pin:
  1479                           	opt stack 0
  1480  000024                     analogRead@channel:
  1481                           	opt stack 0
  1482  000024                     initTimer@timer:
  1483                           	opt stack 0
  1484  000024                     startTimer@timer:
  1485                           	opt stack 0
  1486  000024                     stopServo@timer:
  1487                           	opt stack 0
  1488  000024                     ___awmod@dividend:
  1489                           	opt stack 0
  1490  000024                     __div_to_l_@f1:
  1491                           	opt stack 0
  1492  000024                     ___ftpack@arg:
  1493                           	opt stack 0
  1494  000024                     __tdiv_to_l_@f1:
  1495                           	opt stack 0
  1496  000024                     ___ftge@ff1:
  1497                           	opt stack 0
  1498  000024                     ___ftneg@f1:
  1499                           	opt stack 0
  1500  000024                     ___lldiv@dividend:
  1501                           	opt stack 0
  1502                           
  1503                           ; 4 bytes @ 0x23
  1504  000024                     	ds	1
  1505  000025                     lcdNibble@data:
  1506                           	opt stack 0
  1507                           
  1508                           ; 1 bytes @ 0x24
  1509  000025                     	ds	1
  1510  000026                     ??_stopServo:
  1511  000026                     ??_digitalRead:
  1512  000026                     ??_lcdInst:
  1513  000026                     ??_initTimer:
  1514  000026                     digitalWrite@val:
  1515                           	opt stack 0
  1516  000026                     ___awmod@divisor:
  1517                           	opt stack 0
  1518  000026                     startTimer@val:
  1519                           	opt stack 0
  1520                           
  1521                           ; 4 bytes @ 0x25
  1522  000026                     	ds	1
  1523  000027                     lcdInst@data:
  1524                           	opt stack 0
  1525  000027                     ___ftpack@exp:
  1526                           	opt stack 0
  1527  000027                     __div_to_l_@f2:
  1528                           	opt stack 0
  1529  000027                     __tdiv_to_l_@f2:
  1530                           	opt stack 0
  1531  000027                     ___ftge@ff2:
  1532                           	opt stack 0
  1533                           
  1534                           ; 3 bytes @ 0x26
  1535  000027                     	ds	1
  1536  000028                     ??_initLCD:
  1537  000028                     ??_digitalWrite:
  1538  000028                     ??_analogRead:
  1539  000028                     putch@data:
  1540                           	opt stack 0
  1541  000028                     ___awmod@counter:
  1542                           	opt stack 0
  1543  000028                     ___ftpack@sign:
  1544                           	opt stack 0
  1545  000028                     ___lldiv@divisor:
  1546                           	opt stack 0
  1547                           
  1548                           ; 4 bytes @ 0x27
  1549  000028                     	ds	1
  1550  000029                     ??___ftpack:
  1551  000029                     ___awmod@sign:
  1552                           	opt stack 0
  1553                           
  1554                           ; 1 bytes @ 0x28
  1555  000029                     	ds	1
  1556  00002A                     ??__tdiv_to_l_:
  1557  00002A                     ??_startTimer:
  1558  00002A                     ??___ftge:
  1559  00002A                     ?___awdiv:
  1560                           	opt stack 0
  1561  00002A                     ___awdiv@dividend:
  1562                           	opt stack 0
  1563  00002A                     __div_to_l_@quot:
  1564                           	opt stack 0
  1565                           
  1566                           ; 4 bytes @ 0x29
  1567  00002A                     	ds	1
  1568  00002B                     digitalWrite@p:
  1569                           	opt stack 0
  1570                           
  1571                           ; 2 bytes @ 0x2A
  1572  00002B                     	ds	1
  1573  00002C                     ?___altoft:
  1574                           	opt stack 0
  1575  00002C                     ?___awtoft:
  1576                           	opt stack 0
  1577  00002C                     ?___lltoft:
  1578                           	opt stack 0
  1579  00002C                     ___awdiv@divisor:
  1580                           	opt stack 0
  1581  00002C                     ___awtoft@c:
  1582                           	opt stack 0
  1583  00002C                     ___altoft@c:
  1584                           	opt stack 0
  1585  00002C                     ___lldiv@quotient:
  1586                           	opt stack 0
  1587  00002C                     ___lltoft@c:
  1588                           	opt stack 0
  1589                           
  1590                           ; 4 bytes @ 0x2B
  1591  00002C                     	ds	1
  1592  00002D                     __tdiv_to_l_@quot:
  1593                           	opt stack 0
  1594                           
  1595                           ; 4 bytes @ 0x2C
  1596  00002D                     	ds	1
  1597  00002E                     ___awdiv@counter:
  1598                           	opt stack 0
  1599  00002E                     __div_to_l_@cntr:
  1600                           	opt stack 0
  1601                           
  1602                           ; 1 bytes @ 0x2D
  1603  00002E                     	ds	1
  1604  00002F                     ___awdiv@sign:
  1605                           	opt stack 0
  1606  00002F                     ___awtoft@sign:
  1607                           	opt stack 0
  1608  00002F                     __div_to_l_@exp1:
  1609                           	opt stack 0
  1610                           
  1611                           ; 1 bytes @ 0x2E
  1612  00002F                     	ds	1
  1613  000030                     ??___altoft:
  1614  000030                     ??___lltoft:
  1615  000030                     ___lldiv@counter:
  1616                           	opt stack 0
  1617  000030                     ___awdiv@quotient:
  1618                           	opt stack 0
  1619                           
  1620                           ; 2 bytes @ 0x2F
  1621  000030                     	ds	1
  1622  000031                     ?___llmod:
  1623                           	opt stack 0
  1624  000031                     __tdiv_to_l_@cntr:
  1625                           	opt stack 0
  1626  000031                     ___llmod@dividend:
  1627                           	opt stack 0
  1628                           
  1629                           ; 4 bytes @ 0x30
  1630  000031                     	ds	1
  1631  000032                     ?___wmul:
  1632                           	opt stack 0
  1633  000032                     __tdiv_to_l_@exp1:
  1634                           	opt stack 0
  1635  000032                     ___wmul@multiplier:
  1636                           	opt stack 0
  1637                           
  1638                           ; 2 bytes @ 0x31
  1639  000032                     	ds	2
  1640  000034                     ___altoft@exp:
  1641                           	opt stack 0
  1642  000034                     ___lltoft@exp:
  1643                           	opt stack 0
  1644  000034                     ___wmul@multiplicand:
  1645                           	opt stack 0
  1646                           
  1647                           ; 2 bytes @ 0x33
  1648  000034                     	ds	1
  1649  000035                     ___altoft@sign:
  1650                           	opt stack 0
  1651  000035                     ___llmod@divisor:
  1652                           	opt stack 0
  1653                           
  1654                           ; 4 bytes @ 0x34
  1655  000035                     	ds	1
  1656  000036                     ?___ftdiv:
  1657                           	opt stack 0
  1658  000036                     ___wmul@product:
  1659                           	opt stack 0
  1660  000036                     ___ftdiv@f1:
  1661                           	opt stack 0
  1662                           
  1663                           ; 3 bytes @ 0x35
  1664  000036                     	ds	3
  1665  000039                     ___llmod@counter:
  1666                           	opt stack 0
  1667  000039                     ___ftdiv@f2:
  1668                           	opt stack 0
  1669                           
  1670                           ; 3 bytes @ 0x38
  1671  000039                     	ds	3
  1672  00003C                     runMenu@key:
  1673                           	opt stack 0
  1674                           
  1675                           ; 1 bytes @ 0x3B
  1676  00003C                     	ds	1
  1677  00003D                     tblptru	equ	0xFF8
  1678                           tblptrh	equ	0xFF7
  1679                           tblptrl	equ	0xFF6
  1680                           tablat	equ	0xFF5
  1681                           postinc0	equ	0xFEE
  1682                           wreg	equ	0xFE8
  1683                           postdec1	equ	0xFE5
  1684                           fsr1l	equ	0xFE1
  1685                           
  1686                           ; 1 bytes @ 0x3C
  1687 ;;
  1688 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1689 ;;
  1690 ;; *************** function _main *****************
  1691 ;; Defined at:
  1692 ;;		line 90 in file "main.c"
  1693 ;; Parameters:    Size  Location     Type
  1694 ;;		None
  1695 ;; Auto vars:     Size  Location     Type
  1696 ;;		None
  1697 ;; Return value:  Size  Location     Type
  1698 ;;                  1    wreg      void 
  1699 ;; Registers used:
  1700 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1701 ;; Tracked objects:
  1702 ;;		On entry : 0/0
  1703 ;;		On exit  : 0/0
  1704 ;;		Unchanged: 0/0
  1705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1710 ;;Total ram usage:        0 bytes
  1711 ;; Hardware stack levels required when called:   10
  1712 ;; This function calls:
  1713 ;;		_digitalWrite
  1714 ;;		_initLCD
  1715 ;;		_initServo
  1716 ;;		_lcdClear
  1717 ;;		_pinSetup
  1718 ;;		_printf
  1719 ;;		_showInterface
  1720 ;;		_sortBattery
  1721 ;; This function is called by:
  1722 ;;		Startup code after reset
  1723 ;; This function uses a non-reentrant model
  1724 ;;
  1725                           
  1726                           	psect	text0
  1727  002464                     __ptext0:
  1728                           	opt stack 0
  1729  002464                     _main:
  1730                           	opt stack 21
  1731                           
  1732                           ;main.c: 91: pinSetup();
  1733                           
  1734                           ;incstack = 0
  1735  002464  EC0D  F016         	call	_pinSetup	;wreg free
  1736                           
  1737                           ;main.c: 92: initLCD();
  1738  002468  ECEA  F015         	call	_initLCD	;wreg free
  1739                           
  1740                           ;main.c: 95: showInterface();
  1741                           
  1742                           ;main.c: 94: while(1){
  1743  00246C  EC39  F00F         	call	_showInterface	;wreg free
  1744                           
  1745                           ;main.c: 98: digitalWrite(cylinderMotor, 1);
  1746  002470  0EF0               	movlw	low _cylinderMotor
  1747  002472  6E24               	movwf	digitalWrite@pin,c
  1748  002474  0E00               	movlw	high _cylinderMotor
  1749  002476  6E25               	movwf	digitalWrite@pin+1,c
  1750  002478  0E00               	movlw	0
  1751  00247A  6E27               	movwf	digitalWrite@val+1,c
  1752  00247C  0E01               	movlw	1
  1753  00247E  6E26               	movwf	digitalWrite@val,c
  1754  002480  EC1B  F011         	call	_digitalWrite	;wreg free
  1755                           
  1756                           ;main.c: 99: initServo(conveyorServo, 90);
  1757  002484  0E3F               	movlw	low _conveyorServo
  1758  002486  0101               	movlb	1	; () banked
  1759  002488  6F00               	movwf	initServo@motor& (0+255),b
  1760  00248A  0E00               	movlw	high _conveyorServo
  1761  00248C  0101               	movlb	1	; () banked
  1762  00248E  6F01               	movwf	(initServo@motor+1)& (0+255),b
  1763  002490  0E00               	movlw	0
  1764  002492  0101               	movlb	1	; () banked
  1765  002494  6F03               	movwf	(initServo@angle+1)& (0+255),b
  1766  002496  0E5A               	movlw	90
  1767  002498  6F02               	movwf	initServo@angle& (0+255),b
  1768  00249A  ECBB  F00F         	call	_initServo	;wreg free
  1769                           
  1770                           ;main.c: 100: initServo(padServo, padAngle_NEUTRAL);
  1771  00249E  0E45               	movlw	low _padServo
  1772  0024A0  0101               	movlb	1	; () banked
  1773  0024A2  6F00               	movwf	initServo@motor& (0+255),b
  1774  0024A4  0E00               	movlw	high _padServo
  1775  0024A6  0101               	movlb	1	; () banked
  1776  0024A8  6F01               	movwf	(initServo@motor+1)& (0+255),b
  1777  0024AA  C0E2  F102         	movff	_padAngle_NEUTRAL,initServo@angle
  1778  0024AE  C0E3  F103         	movff	_padAngle_NEUTRAL+1,initServo@angle+1
  1779  0024B2  ECBB  F00F         	call	_initServo	;wreg free
  1780                           
  1781                           ;main.c: 101: initServo(redirectingServo, 90);
  1782  0024B6  0E4A               	movlw	low _redirectingServo
  1783  0024B8  0101               	movlb	1	; () banked
  1784  0024BA  6F00               	movwf	initServo@motor& (0+255),b
  1785  0024BC  0E01               	movlw	high _redirectingServo
  1786  0024BE  0101               	movlb	1	; () banked
  1787  0024C0  6F01               	movwf	(initServo@motor+1)& (0+255),b
  1788  0024C2  0E00               	movlw	0
  1789  0024C4  0101               	movlb	1	; () banked
  1790  0024C6  6F03               	movwf	(initServo@angle+1)& (0+255),b
  1791  0024C8  0E5A               	movlw	90
  1792  0024CA  6F02               	movwf	initServo@angle& (0+255),b
  1793  0024CC  ECBB  F00F         	call	_initServo	;wreg free
  1794  0024D0                     l6141:
  1795                           
  1796                           ;main.c: 105: lcdClear();
  1797  0024D0  EC6B  F017         	call	_lcdClear	;wreg free
  1798                           
  1799                           ;main.c: 106: printf("running");
  1800  0024D4  0EF7               	movlw	low STR_1
  1801  0024D6  0100               	movlb	0	; () banked
  1802  0024D8  6FBD               	movwf	printf@f& (0+255),b
  1803  0024DA  0EFF               	movlw	high STR_1
  1804  0024DC  0100               	movlb	0	; () banked
  1805  0024DE  6FBE               	movwf	(printf@f+1)& (0+255),b
  1806  0024E0  EC09  F000         	call	_printf	;wreg free
  1807  0024E4                     l6143:
  1808  0024E4  0100               	movlb	0	; () banked
  1809  0024E6  51FD               	movf	_batteryDetected& (0+255),w,b
  1810  0024E8  0100               	movlb	0	; () banked
  1811  0024EA  11FE               	iorwf	(_batteryDetected+1)& (0+255),w,b
  1812  0024EC  B4D8               	btfsc	status,2,c
  1813  0024EE  D7FA               	goto	l6143
  1814                           
  1815                           ; BSR set to: 0
  1816                           ;main.c: 110: }
  1817                           ;main.c: 112: sortBattery();
  1818                           
  1819                           ; BSR set to: 0
  1820  0024F0  ECAA  F006         	call	_sortBattery	;wreg free
  1821                           
  1822                           ;main.c: 115: batteryDetected = 0;
  1823  0024F4  0E00               	movlw	0
  1824  0024F6  0100               	movlb	0	; () banked
  1825  0024F8  6FFE               	movwf	(_batteryDetected+1)& (0+255),b
  1826  0024FA  0E00               	movlw	0
  1827  0024FC  6FFD               	movwf	_batteryDetected& (0+255),b
  1828                           
  1829                           ; BSR set to: 0
  1830  0024FE  D7E8               	goto	l6141
  1831  002500                     __end_of_main:
  1832                           	opt stack 0
  1833                           tblptru	equ	0xFF8
  1834                           tblptrh	equ	0xFF7
  1835                           tblptrl	equ	0xFF6
  1836                           tablat	equ	0xFF5
  1837                           postinc0	equ	0xFEE
  1838                           wreg	equ	0xFE8
  1839                           postdec1	equ	0xFE5
  1840                           fsr1l	equ	0xFE1
  1841                           status	equ	0xFD8
  1842                           
  1843 ;; *************** function _sortBattery *****************
  1844 ;; Defined at:
  1845 ;;		line 124 in file "main.c"
  1846 ;; Parameters:    Size  Location     Type
  1847 ;;		None
  1848 ;; Auto vars:     Size  Location     Type
  1849 ;;  V_float         3   26[BANK1 ] float 
  1850 ;;  V               3   39[BANK1 ] float 
  1851 ;;  resolution      3   32[BANK1 ] float 
  1852 ;;  Vcc             3   29[BANK1 ] float 
  1853 ;;  targetAngle     2   37[BANK1 ] int 
  1854 ;;  signal          2   35[BANK1 ] int 
  1855 ;; Return value:  Size  Location     Type
  1856 ;;                  1    wreg      void 
  1857 ;; Registers used:
  1858 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1859 ;; Tracked objects:
  1860 ;;		On entry : 0/0
  1861 ;;		On exit  : 0/0
  1862 ;;		Unchanged: 0/0
  1863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1865 ;;      Locals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1866 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1867 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1868 ;;Total ram usage:       18 bytes
  1869 ;; Hardware stack levels used:    1
  1870 ;; Hardware stack levels required when called:    9
  1871 ;; This function calls:
  1872 ;;		___altoft
  1873 ;;		___ftdiv
  1874 ;;		___ftge
  1875 ;;		___ftmul
  1876 ;;		_analogRead
  1877 ;;		_digitalRead
  1878 ;;		_digitalWrite
  1879 ;;		_initServo
  1880 ;;		_lcdClear
  1881 ;;		_pause
  1882 ;;		_printf
  1883 ;;		_readKeypad
  1884 ;;		_setAngle
  1885 ;;		_stopServo
  1886 ;; This function is called by:
  1887 ;;		_main
  1888 ;; This function uses a non-reentrant model
  1889 ;;
  1890                           
  1891                           	psect	text1
  1892  000D54                     __ptext1:
  1893                           	opt stack 0
  1894  000D54                     _sortBattery:
  1895                           	opt stack 21
  1896                           
  1897                           ;main.c: 127: stopServo(conveyorServo[0]);
  1898                           
  1899                           ; BSR set to: 0
  1900                           ;incstack = 0
  1901  000D54  C03F  F024         	movff	_conveyorServo,stopServo@timer
  1902  000D58  C040  F025         	movff	_conveyorServo+1,stopServo@timer+1
  1903  000D5C  ECA4  F015         	call	_stopServo	;wreg free
  1904                           
  1905                           ;main.c: 128: digitalWrite(cylinderMotor, 0);
  1906  000D60  0EF0               	movlw	low _cylinderMotor
  1907  000D62  6E24               	movwf	digitalWrite@pin,c
  1908  000D64  0E00               	movlw	high _cylinderMotor
  1909  000D66  6E25               	movwf	digitalWrite@pin+1,c
  1910  000D68  0E00               	movlw	0
  1911  000D6A  6E27               	movwf	digitalWrite@val+1,c
  1912  000D6C  0E00               	movlw	0
  1913  000D6E  6E26               	movwf	digitalWrite@val,c
  1914  000D70  EC1B  F011         	call	_digitalWrite	;wreg free
  1915                           
  1916                           ;main.c: 134: pause("interrupt!!!\nclose?");
  1917  000D74  0EC0               	movlw	low STR_2
  1918  000D76  0100               	movlb	0	; () banked
  1919  000D78  6FCA               	movwf	pause@message& (0+255),b
  1920  000D7A  0EFE               	movlw	high STR_2
  1921  000D7C  0100               	movlb	0	; () banked
  1922  000D7E  6FCB               	movwf	(pause@message+1)& (0+255),b
  1923  000D80  EC52  F017         	call	_pause	;wreg free
  1924                           
  1925                           ;main.c: 135: setAngle(padServo, padAngle_CLOSE);
  1926  000D84  0E45               	movlw	low _padServo
  1927  000D86  0100               	movlb	0	; () banked
  1928  000D88  6FD4               	movwf	setAngle@motor& (0+255),b
  1929  000D8A  0E00               	movlw	high _padServo
  1930  000D8C  0100               	movlb	0	; () banked
  1931  000D8E  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  1932  000D90  C0E0  F0D6         	movff	_padAngle_CLOSE,setAngle@angle
  1933  000D94  C0E1  F0D7         	movff	_padAngle_CLOSE+1,setAngle@angle+1
  1934  000D98  EC80  F012         	call	_setAngle	;wreg free
  1935                           
  1936                           ;main.c: 138: pause("read voltage?");
  1937  000D9C  0ED8               	movlw	low STR_3
  1938  000D9E  0100               	movlb	0	; () banked
  1939  000DA0  6FCA               	movwf	pause@message& (0+255),b
  1940  000DA2  0EFF               	movlw	high STR_3
  1941  000DA4  0100               	movlb	0	; () banked
  1942  000DA6  6FCB               	movwf	(pause@message+1)& (0+255),b
  1943  000DA8  EC52  F017         	call	_pause	;wreg free
  1944                           
  1945                           ;main.c: 139: float Vcc = 3.9;
  1946  000DAC  0E9A               	movlw	154
  1947  000DAE  0101               	movlb	1	; () banked
  1948  000DB0  6F1D               	movwf	sortBattery@Vcc& (0+255),b
  1949  000DB2  0E79               	movlw	121
  1950  000DB4  0101               	movlb	1	; () banked
  1951  000DB6  6F1E               	movwf	(sortBattery@Vcc+1)& (0+255),b
  1952  000DB8  0E40               	movlw	64
  1953  000DBA  0101               	movlb	1	; () banked
  1954  000DBC  6F1F               	movwf	(sortBattery@Vcc+2)& (0+255),b
  1955                           
  1956                           ; BSR set to: 1
  1957                           ;main.c: 140: float resolution = (1<<10) - 1;
  1958  000DBE  0EC0               	movlw	192
  1959  000DC0  0101               	movlb	1	; () banked
  1960  000DC2  6F20               	movwf	sortBattery@resolution& (0+255),b
  1961  000DC4  0E7F               	movlw	127
  1962  000DC6  0101               	movlb	1	; () banked
  1963  000DC8  6F21               	movwf	(sortBattery@resolution+1)& (0+255),b
  1964  000DCA  0E44               	movlw	68
  1965  000DCC  0101               	movlb	1	; () banked
  1966  000DCE  6F22               	movwf	(sortBattery@resolution+2)& (0+255),b
  1967                           
  1968                           ; BSR set to: 1
  1969                           ;main.c: 142: int targetAngle;
  1970                           ;main.c: 143: int signal = digitalRead(padPin1)<<1;
  1971  000DD0  0E4B               	movlw	low _padPin1
  1972  000DD2  6E24               	movwf	digitalRead@pin,c
  1973  000DD4  0E00               	movlw	high _padPin1
  1974  000DD6  6E25               	movwf	digitalRead@pin+1,c
  1975  000DD8  EC31  F010         	call	_digitalRead	;wreg free
  1976  000DDC  90D8               	bcf	status,0,c
  1977  000DDE  3424               	rlcf	?_digitalRead,w,c
  1978  000DE0  0101               	movlb	1	; () banked
  1979  000DE2  6F23               	movwf	sortBattery@signal& (0+255),b
  1980  000DE4  3425               	rlcf	?_digitalRead+1,w,c
  1981  000DE6  0101               	movlb	1	; () banked
  1982  000DE8  6F24               	movwf	(sortBattery@signal+1)& (0+255),b
  1983                           
  1984                           ; BSR set to: 1
  1985                           ;main.c: 144: signal |= digitalRead(padPin2);
  1986  000DEA  0E4F               	movlw	low _padPin2
  1987  000DEC  6E24               	movwf	digitalRead@pin,c
  1988  000DEE  0E00               	movlw	high _padPin2
  1989  000DF0  6E25               	movwf	digitalRead@pin+1,c
  1990  000DF2  EC31  F010         	call	_digitalRead	;wreg free
  1991  000DF6  5024               	movf	?_digitalRead,w,c
  1992  000DF8  0101               	movlb	1	; () banked
  1993  000DFA  1323               	iorwf	sortBattery@signal& (0+255),f,b
  1994  000DFC  5025               	movf	?_digitalRead+1,w,c
  1995  000DFE  0101               	movlb	1	; () banked
  1996  000E00  1324               	iorwf	(sortBattery@signal+1)& (0+255),f,b
  1997                           
  1998                           ; BSR set to: 1
  1999                           ;main.c: 146: digitalWrite(AA_float, 1);
  2000  000E02  0EEC               	movlw	low _AA_float
  2001  000E04  6E24               	movwf	digitalWrite@pin,c
  2002  000E06  0E00               	movlw	high _AA_float
  2003  000E08  6E25               	movwf	digitalWrite@pin+1,c
  2004  000E0A  0E00               	movlw	0
  2005  000E0C  6E27               	movwf	digitalWrite@val+1,c
  2006  000E0E  0E01               	movlw	1
  2007  000E10  6E26               	movwf	digitalWrite@val,c
  2008  000E12  EC1B  F011         	call	_digitalWrite	;wreg free
  2009                           
  2010                           ;main.c: 147: float V = analogRead(padPin3[1]) / resolution * Vcc;
  2011  000E16  C120  F039         	movff	sortBattery@resolution,___ftdiv@f2
  2012  000E1A  C121  F03A         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2013  000E1E  C122  F03B         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2014  000E22  C055  F024         	movff	_padPin3+2,analogRead@channel
  2015  000E26  C056  F025         	movff	_padPin3+3,analogRead@channel+1
  2016  000E2A  EC4A  F016         	call	_analogRead	;wreg free
  2017  000E2E  C024  F02C         	movff	?_analogRead,___altoft@c
  2018  000E32  C025  F02D         	movff	?_analogRead+1,___altoft@c+1
  2019  000E36  C026  F02E         	movff	?_analogRead+2,___altoft@c+2
  2020  000E3A  C027  F02F         	movff	?_analogRead+3,___altoft@c+3
  2021  000E3E  EC2A  F014         	call	___altoft	;wreg free
  2022  000E42  C02C  F036         	movff	?___altoft,___ftdiv@f1
  2023  000E46  C02D  F037         	movff	?___altoft+1,___ftdiv@f1+1
  2024  000E4A  C02E  F038         	movff	?___altoft+2,___ftdiv@f1+2
  2025  000E4E  ECB1  F00E         	call	___ftdiv	;wreg free
  2026  000E52  C036  F089         	movff	?___ftdiv,___ftmul@f1
  2027  000E56  C037  F08A         	movff	?___ftdiv+1,___ftmul@f1+1
  2028  000E5A  C038  F08B         	movff	?___ftdiv+2,___ftmul@f1+2
  2029  000E5E  C11D  F08C         	movff	sortBattery@Vcc,___ftmul@f2
  2030  000E62  C11E  F08D         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2031  000E66  C11F  F08E         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2032  000E6A  EC87  F00B         	call	___ftmul	;wreg free
  2033  000E6E  C089  F127         	movff	?___ftmul,sortBattery@V
  2034  000E72  C08A  F128         	movff	?___ftmul+1,sortBattery@V+1
  2035  000E76  C08B  F129         	movff	?___ftmul+2,sortBattery@V+2
  2036                           
  2037                           ;main.c: 149: lcdClear();
  2038  000E7A  EC6B  F017         	call	_lcdClear	;wreg free
  2039                           
  2040                           ;main.c: 150: printf("signal: %d \nVoltage: %f",signal,V);
  2041  000E7E  0E94               	movlw	low STR_4
  2042  000E80  0100               	movlb	0	; () banked
  2043  000E82  6FBD               	movwf	printf@f& (0+255),b
  2044  000E84  0EFE               	movlw	high STR_4
  2045  000E86  0100               	movlb	0	; () banked
  2046  000E88  6FBE               	movwf	(printf@f+1)& (0+255),b
  2047  000E8A  C123  F0BF         	movff	sortBattery@signal,?_printf+2
  2048  000E8E  C124  F0C0         	movff	sortBattery@signal+1,?_printf+3
  2049  000E92  C127  F0C1         	movff	sortBattery@V,?_printf+4
  2050  000E96  C128  F0C2         	movff	sortBattery@V+1,?_printf+5
  2051  000E9A  C129  F0C3         	movff	sortBattery@V+2,?_printf+6
  2052  000E9E  EC09  F000         	call	_printf	;wreg free
  2053                           
  2054                           ;main.c: 151: readKeypad();
  2055  000EA2  ECB7  F016         	call	_readKeypad	;wreg free
  2056                           
  2057                           ;main.c: 154: pause("set redirect angle?");
  2058  000EA6  0EAC               	movlw	low STR_5
  2059  000EA8  0100               	movlb	0	; () banked
  2060  000EAA  6FCA               	movwf	pause@message& (0+255),b
  2061  000EAC  0EFE               	movlw	high STR_5
  2062  000EAE  0100               	movlb	0	; () banked
  2063  000EB0  6FCB               	movwf	(pause@message+1)& (0+255),b
  2064  000EB2  EC52  F017         	call	_pause	;wreg free
  2065                           
  2066                           ;main.c: 155: switch(signal){
  2067  000EB6  D093               	goto	l6105
  2068  000EB8                     l6083:
  2069                           
  2070                           ;main.c: 158: digitalWrite(AA_float, 0);
  2071  000EB8  0EEC               	movlw	low _AA_float
  2072  000EBA  6E24               	movwf	digitalWrite@pin,c
  2073  000EBC  0E00               	movlw	high _AA_float
  2074  000EBE  6E25               	movwf	digitalWrite@pin+1,c
  2075  000EC0  0E00               	movlw	0
  2076  000EC2  6E27               	movwf	digitalWrite@val+1,c
  2077  000EC4  0E00               	movlw	0
  2078  000EC6  6E26               	movwf	digitalWrite@val,c
  2079  000EC8  EC1B  F011         	call	_digitalWrite	;wreg free
  2080                           
  2081                           ;main.c: 159: _delay((unsigned long)((1)*(10000000/4000.0)));
  2082  000ECC  0E04               	movlw	4
  2083  000ECE  0101               	movlb	1	; () banked
  2084  000ED0  6F18               	movwf	??_sortBattery& (0+255),b
  2085  000ED2  0E3D               	movlw	61
  2086  000ED4                     u5997:
  2087  000ED4  2EE8               	decfsz	wreg,f,c
  2088  000ED6  D7FE               	bra	u5997
  2089  000ED8  2F18               	decfsz	??_sortBattery& (0+255),f,b
  2090  000EDA  D7FC               	bra	u5997
  2091  000EDC  D000               	nop2	
  2092                           
  2093                           ;main.c: 160: float V_float = analogRead(padPin3[1]) / resolution * Vcc;
  2094  000EDE  C120  F039         	movff	sortBattery@resolution,___ftdiv@f2
  2095  000EE2  C121  F03A         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2096  000EE6  C122  F03B         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2097  000EEA  C055  F024         	movff	_padPin3+2,analogRead@channel
  2098  000EEE  C056  F025         	movff	_padPin3+3,analogRead@channel+1
  2099  000EF2  EC4A  F016         	call	_analogRead	;wreg free
  2100  000EF6  C024  F02C         	movff	?_analogRead,___altoft@c
  2101  000EFA  C025  F02D         	movff	?_analogRead+1,___altoft@c+1
  2102  000EFE  C026  F02E         	movff	?_analogRead+2,___altoft@c+2
  2103  000F02  C027  F02F         	movff	?_analogRead+3,___altoft@c+3
  2104  000F06  EC2A  F014         	call	___altoft	;wreg free
  2105  000F0A  C02C  F036         	movff	?___altoft,___ftdiv@f1
  2106  000F0E  C02D  F037         	movff	?___altoft+1,___ftdiv@f1+1
  2107  000F12  C02E  F038         	movff	?___altoft+2,___ftdiv@f1+2
  2108  000F16  ECB1  F00E         	call	___ftdiv	;wreg free
  2109  000F1A  C036  F089         	movff	?___ftdiv,___ftmul@f1
  2110  000F1E  C037  F08A         	movff	?___ftdiv+1,___ftmul@f1+1
  2111  000F22  C038  F08B         	movff	?___ftdiv+2,___ftmul@f1+2
  2112  000F26  C11D  F08C         	movff	sortBattery@Vcc,___ftmul@f2
  2113  000F2A  C11E  F08D         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2114  000F2E  C11F  F08E         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2115  000F32  EC87  F00B         	call	___ftmul	;wreg free
  2116  000F36  C089  F11A         	movff	?___ftmul,sortBattery@V_float
  2117  000F3A  C08A  F11B         	movff	?___ftmul+1,sortBattery@V_float+1
  2118  000F3E  C08B  F11C         	movff	?___ftmul+2,sortBattery@V_float+2
  2119                           
  2120                           ;main.c: 161: if(V_float < 0.1){
  2121  000F42  C11A  F024         	movff	sortBattery@V_float,___ftge@ff1
  2122  000F46  C11B  F025         	movff	sortBattery@V_float+1,___ftge@ff1+1
  2123  000F4A  C11C  F026         	movff	sortBattery@V_float+2,___ftge@ff1+2
  2124  000F4E  0ECD               	movlw	205
  2125  000F50  6E27               	movwf	___ftge@ff2,c
  2126  000F52  0ECC               	movlw	204
  2127  000F54  6E28               	movwf	___ftge@ff2+1,c
  2128  000F56  0E3D               	movlw	61
  2129  000F58  6E29               	movwf	___ftge@ff2+2,c
  2130  000F5A  EC5F  F013         	call	___ftge	;wreg free
  2131  000F5E  B0D8               	btfsc	status,0,c
  2132  000F60  D00F               	goto	l6095
  2133                           
  2134                           ;main.c: 162: if(V > V_LIM_AA) targetAngle = redirectAngle_AA;
  2135  000F62  C0F7  F024         	movff	_V_LIM_AA,___ftge@ff1
  2136  000F66  C0F8  F025         	movff	_V_LIM_AA+1,___ftge@ff1+1
  2137  000F6A  C0F9  F026         	movff	_V_LIM_AA+2,___ftge@ff1+2
  2138  000F6E  C127  F027         	movff	sortBattery@V,___ftge@ff2
  2139  000F72  C128  F028         	movff	sortBattery@V+1,___ftge@ff2+1
  2140  000F76  C129  F029         	movff	sortBattery@V+2,___ftge@ff2+2
  2141  000F7A  EC5F  F013         	call	___ftge	;wreg free
  2142  000F7E  D023               	goto	L6
  2143  000F80                     l6095:
  2144                           
  2145                           ;main.c: 168: if(V > V_LIM_9V) targetAngle = redirectAngle_9V;
  2146  000F80  C0F4  F024         	movff	_V_LIM_9V,___ftge@ff1
  2147  000F84  C0F5  F025         	movff	_V_LIM_9V+1,___ftge@ff1+1
  2148  000F88  C0F6  F026         	movff	_V_LIM_9V+2,___ftge@ff1+2
  2149  000F8C  C127  F027         	movff	sortBattery@V,___ftge@ff2
  2150  000F90  C128  F028         	movff	sortBattery@V+1,___ftge@ff2+1
  2151  000F94  C129  F029         	movff	sortBattery@V+2,___ftge@ff2+2
  2152  000F98  EC5F  F013         	call	___ftge	;wreg free
  2153  000F9C  B0D8               	btfsc	status,0,c
  2154  000F9E  D01A               	goto	l133
  2155  000FA0  C0E6  F125         	movff	_redirectAngle_9V,sortBattery@targetAngle
  2156  000FA4  C0E7  F126         	movff	_redirectAngle_9V+1,sortBattery@targetAngle+1
  2157  000FA8  D02E               	goto	l6107
  2158  000FAA                     l6099:
  2159                           
  2160                           ;main.c: 172: if(V > V_LIM_C) targetAngle = redirectAngle_AA;
  2161  000FAA  C0FA  F024         	movff	_V_LIM_C,___ftge@ff1
  2162  000FAE  C0FB  F025         	movff	_V_LIM_C+1,___ftge@ff1+1
  2163  000FB2  C0FC  F026         	movff	_V_LIM_C+2,___ftge@ff1+2
  2164  000FB6  C127  F027         	movff	sortBattery@V,___ftge@ff2
  2165  000FBA  C128  F028         	movff	sortBattery@V+1,___ftge@ff2+1
  2166  000FBE  C129  F029         	movff	sortBattery@V+2,___ftge@ff2+2
  2167  000FC2  EC5F  F013         	call	___ftge	;wreg free
  2168  000FC6                     L6:
  2169  000FC6  B0D8               	btfsc	status,0,c
  2170  000FC8  D005               	goto	l133
  2171  000FCA  C0E8  F125         	movff	_redirectAngle_AA,sortBattery@targetAngle
  2172  000FCE  C0E9  F126         	movff	_redirectAngle_AA+1,sortBattery@targetAngle+1
  2173  000FD2  D019               	goto	l6107
  2174  000FD4                     l133:
  2175                           
  2176                           ;main.c: 173: else targetAngle = redirectAngle_OTHER;
  2177  000FD4  C0EA  F125         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  2178  000FD8  C0EB  F126         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  2179                           
  2180                           ;main.c: 175: }
  2181                           
  2182                           ;main.c: 174: break;
  2183  000FDC  D014               	goto	l6107
  2184  000FDE                     l6105:
  2185  000FDE  C123  F118         	movff	sortBattery@signal,??_sortBattery
  2186  000FE2  C124  F119         	movff	sortBattery@signal+1,??_sortBattery+1
  2187                           
  2188                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2189                           ; Switch size 1, requested type "space"
  2190                           ; Number of cases is 1, Range of values is 0 to 0
  2191                           ; switch strategies available:
  2192                           ; Name         Instructions Cycles
  2193                           ; simple_byte            4     3 (average)
  2194                           ;	Chosen strategy is simple_byte
  2195  000FE6  0101               	movlb	1	; () banked
  2196  000FE8  5119               	movf	(??_sortBattery+1)& (0+255),w,b
  2197  000FEA  0A00               	xorlw	0	; case 0
  2198  000FEC  A4D8               	btfss	status,2,c
  2199  000FEE  D00B               	goto	l6107
  2200                           
  2201                           ; BSR set to: 1
  2202                           ; Switch size 1, requested type "space"
  2203                           ; Number of cases is 3, Range of values is 0 to 2
  2204                           ; switch strategies available:
  2205                           ; Name         Instructions Cycles
  2206                           ; simple_byte           10     6 (average)
  2207                           ;	Chosen strategy is simple_byte
  2208  000FF0  0101               	movlb	1	; () banked
  2209  000FF2  5118               	movf	??_sortBattery& (0+255),w,b
  2210  000FF4  0A00               	xorlw	0	; case 0
  2211  000FF6  B4D8               	btfsc	status,2,c
  2212  000FF8  D75F               	goto	l6083
  2213  000FFA  0A01               	xorlw	1	; case 1
  2214  000FFC  B4D8               	btfsc	status,2,c
  2215  000FFE  D7C0               	goto	l6095
  2216  001000  0A03               	xorlw	3	; case 2
  2217  001002  B4D8               	btfsc	status,2,c
  2218  001004  D7D2               	goto	l6099
  2219  001006                     l6107:
  2220                           
  2221                           ;main.c: 177: setAngle(redirectingServo, targetAngle);
  2222  001006  0E4A               	movlw	low _redirectingServo
  2223  001008  0100               	movlb	0	; () banked
  2224  00100A  6FD4               	movwf	setAngle@motor& (0+255),b
  2225  00100C  0E01               	movlw	high _redirectingServo
  2226  00100E  0100               	movlb	0	; () banked
  2227  001010  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2228  001012  C125  F0D6         	movff	sortBattery@targetAngle,setAngle@angle
  2229  001016  C126  F0D7         	movff	sortBattery@targetAngle+1,setAngle@angle+1
  2230  00101A  EC80  F012         	call	_setAngle	;wreg free
  2231                           
  2232                           ;main.c: 180: pause("release battery?");
  2233  00101E  0EB8               	movlw	low STR_6
  2234  001020  0100               	movlb	0	; () banked
  2235  001022  6FCA               	movwf	pause@message& (0+255),b
  2236  001024  0EFF               	movlw	high STR_6
  2237  001026  0100               	movlb	0	; () banked
  2238  001028  6FCB               	movwf	(pause@message+1)& (0+255),b
  2239  00102A  EC52  F017         	call	_pause	;wreg free
  2240                           
  2241                           ;main.c: 181: setAngle(padServo, padAngle_OPEN);
  2242  00102E  0E45               	movlw	low _padServo
  2243  001030  0100               	movlb	0	; () banked
  2244  001032  6FD4               	movwf	setAngle@motor& (0+255),b
  2245  001034  0E00               	movlw	high _padServo
  2246  001036  0100               	movlb	0	; () banked
  2247  001038  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2248  00103A  C0E4  F0D6         	movff	_padAngle_OPEN,setAngle@angle
  2249  00103E  C0E5  F0D7         	movff	_padAngle_OPEN+1,setAngle@angle+1
  2250  001042  EC80  F012         	call	_setAngle	;wreg free
  2251                           
  2252                           ;main.c: 184: pause("reset the pad?");
  2253  001046  0EC9               	movlw	low STR_7
  2254  001048  0100               	movlb	0	; () banked
  2255  00104A  6FCA               	movwf	pause@message& (0+255),b
  2256  00104C  0EFF               	movlw	high STR_7
  2257  00104E  0100               	movlb	0	; () banked
  2258  001050  6FCB               	movwf	(pause@message+1)& (0+255),b
  2259  001052  EC52  F017         	call	_pause	;wreg free
  2260                           
  2261                           ;main.c: 185: setAngle(padServo, padAngle_NEUTRAL);
  2262  001056  0E45               	movlw	low _padServo
  2263  001058  0100               	movlb	0	; () banked
  2264  00105A  6FD4               	movwf	setAngle@motor& (0+255),b
  2265  00105C  0E00               	movlw	high _padServo
  2266  00105E  0100               	movlb	0	; () banked
  2267  001060  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2268  001062  C0E2  F0D6         	movff	_padAngle_NEUTRAL,setAngle@angle
  2269  001066  C0E3  F0D7         	movff	_padAngle_NEUTRAL+1,setAngle@angle+1
  2270  00106A  EC80  F012         	call	_setAngle	;wreg free
  2271                           
  2272                           ;main.c: 188: pause("conveyor & \ncylinder on?");
  2273  00106E  0E7B               	movlw	low STR_8
  2274  001070  0100               	movlb	0	; () banked
  2275  001072  6FCA               	movwf	pause@message& (0+255),b
  2276  001074  0EFE               	movlw	high STR_8
  2277  001076  0100               	movlb	0	; () banked
  2278  001078  6FCB               	movwf	(pause@message+1)& (0+255),b
  2279  00107A  EC52  F017         	call	_pause	;wreg free
  2280                           
  2281                           ;main.c: 189: initServo(conveyorServo, 90);
  2282  00107E  0E3F               	movlw	low _conveyorServo
  2283  001080  0101               	movlb	1	; () banked
  2284  001082  6F00               	movwf	initServo@motor& (0+255),b
  2285  001084  0E00               	movlw	high _conveyorServo
  2286  001086  0101               	movlb	1	; () banked
  2287  001088  6F01               	movwf	(initServo@motor+1)& (0+255),b
  2288  00108A  0E00               	movlw	0
  2289  00108C  0101               	movlb	1	; () banked
  2290  00108E  6F03               	movwf	(initServo@angle+1)& (0+255),b
  2291  001090  0E5A               	movlw	90
  2292  001092  6F02               	movwf	initServo@angle& (0+255),b
  2293  001094  ECBB  F00F         	call	_initServo	;wreg free
  2294                           
  2295                           ;main.c: 190: digitalWrite(cylinderMotor, 1);
  2296  001098  0EF0               	movlw	low _cylinderMotor
  2297  00109A  6E24               	movwf	digitalWrite@pin,c
  2298  00109C  0E00               	movlw	high _cylinderMotor
  2299  00109E  6E25               	movwf	digitalWrite@pin+1,c
  2300  0010A0  0E00               	movlw	0
  2301  0010A2  6E27               	movwf	digitalWrite@val+1,c
  2302  0010A4  0E01               	movlw	1
  2303  0010A6  6E26               	movwf	digitalWrite@val,c
  2304  0010A8  EC1B  F011         	call	_digitalWrite	;wreg free
  2305  0010AC  0012               	return		;funcret
  2306  0010AE                     __end_of_sortBattery:
  2307                           	opt stack 0
  2308                           tblptru	equ	0xFF8
  2309                           tblptrh	equ	0xFF7
  2310                           tblptrl	equ	0xFF6
  2311                           tablat	equ	0xFF5
  2312                           postinc0	equ	0xFEE
  2313                           wreg	equ	0xFE8
  2314                           postdec1	equ	0xFE5
  2315                           fsr1l	equ	0xFE1
  2316                           status	equ	0xFD8
  2317                           
  2318 ;; *************** function _stopServo *****************
  2319 ;; Defined at:
  2320 ;;		line 32 in file "servo.c"
  2321 ;; Parameters:    Size  Location     Type
  2322 ;;  timer           2   35[COMRAM] int 
  2323 ;; Auto vars:     Size  Location     Type
  2324 ;;		None
  2325 ;; Return value:  Size  Location     Type
  2326 ;;                  1    wreg      void 
  2327 ;; Registers used:
  2328 ;;		wreg, status,2, status,0
  2329 ;; Tracked objects:
  2330 ;;		On entry : 0/0
  2331 ;;		On exit  : 0/0
  2332 ;;		Unchanged: 0/0
  2333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2334 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2336 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2337 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2338 ;;Total ram usage:        4 bytes
  2339 ;; Hardware stack levels used:    1
  2340 ;; Hardware stack levels required when called:    3
  2341 ;; This function calls:
  2342 ;;		Nothing
  2343 ;; This function is called by:
  2344 ;;		_sortBattery
  2345 ;; This function uses a non-reentrant model
  2346 ;;
  2347                           
  2348                           	psect	text2
  2349  002B48                     __ptext2:
  2350                           	opt stack 0
  2351  002B48                     _stopServo:
  2352                           	opt stack 26
  2353                           
  2354                           ;servo.c: 33: switch(timer){
  2355                           
  2356                           ;incstack = 0
  2357  002B48  D00C               	goto	l5889
  2358  002B4A                     l5879:
  2359  002B4A  0E00               	movlw	0
  2360  002B4C  6ED5               	movwf	4053,c	;volatile
  2361  002B4E  0012               	return	
  2362  002B50                     l5881:
  2363  002B50  0E00               	movlw	0
  2364  002B52  6ECD               	movwf	4045,c	;volatile
  2365  002B54  0012               	return	
  2366  002B56                     l5883:
  2367  002B56  0E00               	movlw	0
  2368  002B58  6ECA               	movwf	4042,c	;volatile
  2369  002B5A  0012               	return	
  2370  002B5C                     l5885:
  2371  002B5C  0E00               	movlw	0
  2372  002B5E  6EB1               	movwf	4017,c	;volatile
  2373                           
  2374                           ;servo.c: 38: }
  2375  002B60  0012               	return	
  2376  002B62                     l5889:
  2377  002B62  C024  F026         	movff	stopServo@timer,??_stopServo
  2378  002B66  C025  F027         	movff	stopServo@timer+1,??_stopServo+1
  2379                           
  2380                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2381                           ; Switch size 1, requested type "space"
  2382                           ; Number of cases is 1, Range of values is 0 to 0
  2383                           ; switch strategies available:
  2384                           ; Name         Instructions Cycles
  2385                           ; simple_byte            4     3 (average)
  2386                           ;	Chosen strategy is simple_byte
  2387  002B6A  5027               	movf	??_stopServo+1,w,c
  2388  002B6C  0A00               	xorlw	0	; case 0
  2389  002B6E  A4D8               	btfss	status,2,c
  2390  002B70  0012               	return	
  2391                           
  2392                           ; Switch size 1, requested type "space"
  2393                           ; Number of cases is 4, Range of values is 0 to 3
  2394                           ; switch strategies available:
  2395                           ; Name         Instructions Cycles
  2396                           ; simple_byte           13     7 (average)
  2397                           ;	Chosen strategy is simple_byte
  2398  002B72  5026               	movf	??_stopServo,w,c
  2399  002B74  0A00               	xorlw	0	; case 0
  2400  002B76  B4D8               	btfsc	status,2,c
  2401  002B78  D7E8               	goto	l5879
  2402  002B7A  0A01               	xorlw	1	; case 1
  2403  002B7C  B4D8               	btfsc	status,2,c
  2404  002B7E  D7E8               	goto	l5881
  2405  002B80  0A03               	xorlw	3	; case 2
  2406  002B82  B4D8               	btfsc	status,2,c
  2407  002B84  D7E8               	goto	l5883
  2408  002B86  0A01               	xorlw	1	; case 3
  2409  002B88  A4D8               	btfss	status,2,c
  2410  002B8A  0012               	return	
  2411  002B8C  D7E7               	goto	l5885
  2412  002B8E                     __end_of_stopServo:
  2413                           	opt stack 0
  2414                           tblptru	equ	0xFF8
  2415                           tblptrh	equ	0xFF7
  2416                           tblptrl	equ	0xFF6
  2417                           tablat	equ	0xFF5
  2418                           postinc0	equ	0xFEE
  2419                           wreg	equ	0xFE8
  2420                           postdec1	equ	0xFE5
  2421                           fsr1l	equ	0xFE1
  2422                           status	equ	0xFD8
  2423                           
  2424 ;; *************** function _pause *****************
  2425 ;; Defined at:
  2426 ;;		line 244 in file "main.c"
  2427 ;; Parameters:    Size  Location     Type
  2428 ;;  message         2   74[BANK0 ] PTR unsigned char 
  2429 ;;		 -> STR_8(25), STR_7(15), STR_6(17), STR_5(20), 
  2430 ;;		 -> STR_3(14), STR_2(20), 
  2431 ;; Auto vars:     Size  Location     Type
  2432 ;;		None
  2433 ;; Return value:  Size  Location     Type
  2434 ;;                  1    wreg      void 
  2435 ;; Registers used:
  2436 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2437 ;; Tracked objects:
  2438 ;;		On entry : 0/0
  2439 ;;		On exit  : 0/0
  2440 ;;		Unchanged: 0/0
  2441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2442 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2445 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2446 ;;Total ram usage:        2 bytes
  2447 ;; Hardware stack levels used:    1
  2448 ;; Hardware stack levels required when called:    8
  2449 ;; This function calls:
  2450 ;;		_lcdClear
  2451 ;;		_printf
  2452 ;;		_readKeypad
  2453 ;; This function is called by:
  2454 ;;		_sortBattery
  2455 ;; This function uses a non-reentrant model
  2456 ;;
  2457                           
  2458                           	psect	text3
  2459  002EA4                     __ptext3:
  2460                           	opt stack 0
  2461  002EA4                     _pause:
  2462                           	opt stack 21
  2463                           
  2464                           ;main.c: 245: lcdClear();
  2465                           
  2466                           ;incstack = 0
  2467  002EA4  EC6B  F017         	call	_lcdClear	;wreg free
  2468                           
  2469                           ;main.c: 246: printf(message);
  2470  002EA8  C0CA  F0BD         	movff	pause@message,printf@f
  2471  002EAC  C0CB  F0BE         	movff	pause@message+1,printf@f+1
  2472  002EB0  EC09  F000         	call	_printf	;wreg free
  2473                           
  2474                           ;main.c: 247: readKeypad();
  2475  002EB4  ECB7  F016         	call	_readKeypad	;wreg free
  2476  002EB8  0012               	return		;funcret
  2477  002EBA                     __end_of_pause:
  2478                           	opt stack 0
  2479                           tblptru	equ	0xFF8
  2480                           tblptrh	equ	0xFF7
  2481                           tblptrl	equ	0xFF6
  2482                           tablat	equ	0xFF5
  2483                           postinc0	equ	0xFEE
  2484                           wreg	equ	0xFE8
  2485                           postdec1	equ	0xFE5
  2486                           fsr1l	equ	0xFE1
  2487                           status	equ	0xFD8
  2488                           
  2489 ;; *************** function _initServo *****************
  2490 ;; Defined at:
  2491 ;;		line 19 in file "servo.c"
  2492 ;; Parameters:    Size  Location     Type
  2493 ;;  motor           2    0[BANK1 ] PTR int 
  2494 ;;		 -> redirectingServo(6), padServo(6), conveyorServo(6), 
  2495 ;;  angle           2    2[BANK1 ] int 
  2496 ;; Auto vars:     Size  Location     Type
  2497 ;;  timer           2    8[BANK1 ] int 
  2498 ;;  pin             2    6[BANK1 ] int 
  2499 ;;  port            2    4[BANK1 ] int 
  2500 ;; Return value:  Size  Location     Type
  2501 ;;                  1    wreg      void 
  2502 ;; Registers used:
  2503 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2504 ;; Tracked objects:
  2505 ;;		On entry : 0/0
  2506 ;;		On exit  : 0/0
  2507 ;;		Unchanged: 0/0
  2508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2509 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2510 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2511 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2512 ;;      Totals:         0       2      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2513 ;;Total ram usage:       12 bytes
  2514 ;; Hardware stack levels used:    1
  2515 ;; Hardware stack levels required when called:    7
  2516 ;; This function calls:
  2517 ;;		_initTimer
  2518 ;;		_setAngle
  2519 ;;		_startTimer
  2520 ;; This function is called by:
  2521 ;;		_main
  2522 ;;		_sortBattery
  2523 ;; This function uses a non-reentrant model
  2524 ;;
  2525                           
  2526                           	psect	text4
  2527  001F76                     __ptext4:
  2528                           	opt stack 0
  2529  001F76                     _initServo:
  2530                           	opt stack 22
  2531                           
  2532                           ;servo.c: 20: int timer = motor[0];
  2533                           
  2534                           ;incstack = 0
  2535  001F76  C100  FFD9         	movff	initServo@motor,fsr2l
  2536  001F7A  C101  FFDA         	movff	initServo@motor+1,fsr2h
  2537  001F7E  CFDE F108          	movff	postinc2,initServo@timer
  2538  001F82  CFDD F109          	movff	postdec2,initServo@timer+1
  2539                           
  2540                           ;servo.c: 21: int port = motor[1];
  2541  001F86  0101               	movlb	1	; () banked
  2542  001F88  EE20 F002          	lfsr	2,2
  2543  001F8C  5100               	movf	initServo@motor& (0+255),w,b
  2544  001F8E  26D9               	addwf	fsr2l,f,c
  2545  001F90  5101               	movf	(initServo@motor+1)& (0+255),w,b
  2546  001F92  22DA               	addwfc	fsr2h,f,c
  2547  001F94  CFDE F104          	movff	postinc2,initServo@port
  2548  001F98  CFDD F105          	movff	postdec2,initServo@port+1
  2549                           
  2550                           ; BSR set to: 1
  2551                           ;servo.c: 22: int pin = motor[2];
  2552  001F9C  0101               	movlb	1	; () banked
  2553  001F9E  EE20 F004          	lfsr	2,4
  2554  001FA2  5100               	movf	initServo@motor& (0+255),w,b
  2555  001FA4  26D9               	addwf	fsr2l,f,c
  2556  001FA6  5101               	movf	(initServo@motor+1)& (0+255),w,b
  2557  001FA8  22DA               	addwfc	fsr2h,f,c
  2558  001FAA  CFDE F106          	movff	postinc2,initServo@pin
  2559  001FAE  CFDD F107          	movff	postdec2,initServo@pin+1
  2560                           
  2561                           ; BSR set to: 1
  2562                           ;servo.c: 24: servo[timer][0] = port;
  2563  001FB2  0E3A               	movlw	low _servo
  2564  001FB4  0100               	movlb	0	; () banked
  2565  001FB6  6FDE               	movwf	??_initServo& (0+255),b
  2566  001FB8  0E01               	movlw	high _servo
  2567  001FBA  0100               	movlb	0	; () banked
  2568  001FBC  6FDF               	movwf	(??_initServo+1)& (0+255),b
  2569  001FBE  90D8               	bcf	status,0,c
  2570  001FC0  0101               	movlb	1	; () banked
  2571  001FC2  3508               	rlcf	initServo@timer& (0+255),w,b
  2572  001FC4  6ED9               	movwf	fsr2l,c
  2573  001FC6  0101               	movlb	1	; () banked
  2574  001FC8  3509               	rlcf	(initServo@timer+1)& (0+255),w,b
  2575  001FCA  6EDA               	movwf	fsr2h,c
  2576  001FCC  90D8               	bcf	status,0,c
  2577  001FCE  36D9               	rlcf	fsr2l,f,c
  2578  001FD0  36DA               	rlcf	fsr2h,f,c
  2579  001FD2  0100               	movlb	0	; () banked
  2580  001FD4  51DE               	movf	??_initServo& (0+255),w,b
  2581  001FD6  26D9               	addwf	fsr2l,f,c
  2582  001FD8  0100               	movlb	0	; () banked
  2583  001FDA  51DF               	movf	(??_initServo+1)& (0+255),w,b
  2584  001FDC  22DA               	addwfc	fsr2h,f,c
  2585  001FDE  C104  FFDE         	movff	initServo@port,postinc2
  2586  001FE2  C105  FFDD         	movff	initServo@port+1,postdec2
  2587                           
  2588                           ; BSR set to: 0
  2589                           ;servo.c: 25: servo[timer][1] = pin;
  2590  001FE6  C108  F0DE         	movff	initServo@timer,??_initServo
  2591  001FEA  C109  F0DF         	movff	initServo@timer+1,??_initServo+1
  2592  001FEE  0100               	movlb	0	; () banked
  2593  001FF0  90D8               	bcf	status,0,c
  2594  001FF2  37DE               	rlcf	??_initServo& (0+255),f,b
  2595  001FF4  37DF               	rlcf	(??_initServo+1)& (0+255),f,b
  2596  001FF6  0100               	movlb	0	; () banked
  2597  001FF8  90D8               	bcf	status,0,c
  2598  001FFA  37DE               	rlcf	??_initServo& (0+255),f,b
  2599  001FFC  37DF               	rlcf	(??_initServo+1)& (0+255),f,b
  2600  001FFE  0E02               	movlw	2
  2601  002000  0100               	movlb	0	; () banked
  2602  002002  27DE               	addwf	??_initServo& (0+255),f,b
  2603  002004  0E00               	movlw	0
  2604  002006  23DF               	addwfc	(??_initServo+1)& (0+255),f,b
  2605  002008  0E3A               	movlw	low _servo
  2606  00200A  0100               	movlb	0	; () banked
  2607  00200C  25DE               	addwf	??_initServo& (0+255),w,b
  2608  00200E  6ED9               	movwf	fsr2l,c
  2609  002010  0E01               	movlw	high _servo
  2610  002012  0100               	movlb	0	; () banked
  2611  002014  21DF               	addwfc	(??_initServo+1)& (0+255),w,b
  2612  002016  6EDA               	movwf	fsr2h,c
  2613  002018  C106  FFDE         	movff	initServo@pin,postinc2
  2614  00201C  C107  FFDD         	movff	initServo@pin+1,postdec2
  2615                           
  2616                           ; BSR set to: 0
  2617                           ;servo.c: 26: setAngle(&timer, angle);
  2618  002020  0E08               	movlw	low initServo@timer
  2619  002022  0100               	movlb	0	; () banked
  2620  002024  6FD4               	movwf	setAngle@motor& (0+255),b
  2621  002026  0E01               	movlw	high initServo@timer
  2622  002028  0100               	movlb	0	; () banked
  2623  00202A  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2624  00202C  C102  F0D6         	movff	initServo@angle,setAngle@angle
  2625  002030  C103  F0D7         	movff	initServo@angle+1,setAngle@angle+1
  2626  002034  EC80  F012         	call	_setAngle	;wreg free
  2627                           
  2628                           ;servo.c: 28: initTimer(timer);
  2629  002038  C108  F024         	movff	initServo@timer,initTimer@timer
  2630  00203C  C109  F025         	movff	initServo@timer+1,initTimer@timer+1
  2631  002040  ECC7  F015         	call	_initTimer	;wreg free
  2632                           
  2633                           ;servo.c: 29: startTimer(timer,0);
  2634  002044  C108  F024         	movff	initServo@timer,startTimer@timer
  2635  002048  C109  F025         	movff	initServo@timer+1,startTimer@timer+1
  2636  00204C  0E00               	movlw	0
  2637  00204E  6E26               	movwf	startTimer@val,c
  2638  002050  0E00               	movlw	0
  2639  002052  6E27               	movwf	startTimer@val+1,c
  2640  002054  0E00               	movlw	0
  2641  002056  6E28               	movwf	startTimer@val+2,c
  2642  002058  0E00               	movlw	0
  2643  00205A  6E29               	movwf	startTimer@val+3,c
  2644  00205C  EC32  F015         	call	_startTimer	;wreg free
  2645  002060  0012               	return		;funcret
  2646  002062                     __end_of_initServo:
  2647                           	opt stack 0
  2648                           tblptru	equ	0xFF8
  2649                           tblptrh	equ	0xFF7
  2650                           tblptrl	equ	0xFF6
  2651                           tablat	equ	0xFF5
  2652                           postinc0	equ	0xFEE
  2653                           wreg	equ	0xFE8
  2654                           postdec1	equ	0xFE5
  2655                           fsr1l	equ	0xFE1
  2656                           postinc2	equ	0xFDE
  2657                           postdec2	equ	0xFDD
  2658                           fsr2h	equ	0xFDA
  2659                           fsr2l	equ	0xFD9
  2660                           status	equ	0xFD8
  2661                           
  2662 ;; *************** function _startTimer *****************
  2663 ;; Defined at:
  2664 ;;		line 75 in file "timer.c"
  2665 ;; Parameters:    Size  Location     Type
  2666 ;;  timer           2   35[COMRAM] int 
  2667 ;;  val             4   37[COMRAM] long 
  2668 ;; Auto vars:     Size  Location     Type
  2669 ;;		None
  2670 ;; Return value:  Size  Location     Type
  2671 ;;                  1    wreg      void 
  2672 ;; Registers used:
  2673 ;;		wreg, status,2, status,0
  2674 ;; Tracked objects:
  2675 ;;		On entry : 0/0
  2676 ;;		On exit  : 0/0
  2677 ;;		Unchanged: 0/0
  2678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2679 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2681 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2682 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2683 ;;Total ram usage:        8 bytes
  2684 ;; Hardware stack levels used:    1
  2685 ;; Hardware stack levels required when called:    3
  2686 ;; This function calls:
  2687 ;;		Nothing
  2688 ;; This function is called by:
  2689 ;;		_initServo
  2690 ;;		_testFrequency
  2691 ;; This function uses a non-reentrant model
  2692 ;;
  2693                           
  2694                           	psect	text5
  2695  002A64                     __ptext5:
  2696                           	opt stack 0
  2697  002A64                     _startTimer:
  2698                           	opt stack 25
  2699                           
  2700                           ;timer.c: 76: switch(timer){
  2701                           
  2702                           ;incstack = 0
  2703  002A64  D012               	goto	l5823
  2704  002A66                     l381:
  2705                           
  2706                           ;timer.c: 78: TMR0H = val>>8;
  2707  002A66  C027  FFD7         	movff	startTimer@val+1,4055	;volatile
  2708                           
  2709                           ;timer.c: 79: TMR0L = val;
  2710  002A6A  C026  FFD6         	movff	startTimer@val,4054	;volatile
  2711                           
  2712                           ;timer.c: 80: T0CON |= 1<<7;
  2713  002A6E  8ED5               	bsf	4053,7,c	;volatile
  2714                           
  2715                           ;timer.c: 81: break;
  2716  002A70  0012               	return	
  2717  002A72                     l383:
  2718                           
  2719                           ;timer.c: 83: TMR1H = val>>8;
  2720  002A72  C027  FFCF         	movff	startTimer@val+1,4047	;volatile
  2721                           
  2722                           ;timer.c: 84: TMR1L = val;
  2723  002A76  C026  FFCE         	movff	startTimer@val,4046	;volatile
  2724                           
  2725                           ;timer.c: 85: T1CON |= 1<<0;
  2726  002A7A  80CD               	bsf	4045,0,c	;volatile
  2727                           
  2728                           ;timer.c: 86: break;
  2729  002A7C  0012               	return	
  2730  002A7E                     l384:
  2731                           
  2732                           ;timer.c: 88: TMR3H = val>>8;
  2733  002A7E  C027  FFB3         	movff	startTimer@val+1,4019	;volatile
  2734                           
  2735                           ;timer.c: 89: TMR3L = val;
  2736  002A82  C026  FFB2         	movff	startTimer@val,4018	;volatile
  2737                           
  2738                           ;timer.c: 90: T3CON |= 1<<0;
  2739  002A86  80B1               	bsf	4017,0,c	;volatile
  2740                           
  2741                           ;timer.c: 91: }
  2742  002A88  0012               	return	
  2743  002A8A                     l5823:
  2744  002A8A  C024  F02A         	movff	startTimer@timer,??_startTimer
  2745  002A8E  C025  F02B         	movff	startTimer@timer+1,??_startTimer+1
  2746                           
  2747                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2748                           ; Switch size 1, requested type "space"
  2749                           ; Number of cases is 1, Range of values is 0 to 0
  2750                           ; switch strategies available:
  2751                           ; Name         Instructions Cycles
  2752                           ; simple_byte            4     3 (average)
  2753                           ;	Chosen strategy is simple_byte
  2754  002A92  502B               	movf	??_startTimer+1,w,c
  2755  002A94  0A00               	xorlw	0	; case 0
  2756  002A96  A4D8               	btfss	status,2,c
  2757  002A98  0012               	return	
  2758                           
  2759                           ; Switch size 1, requested type "space"
  2760                           ; Number of cases is 3, Range of values is 0 to 3
  2761                           ; switch strategies available:
  2762                           ; Name         Instructions Cycles
  2763                           ; simple_byte           10     6 (average)
  2764                           ;	Chosen strategy is simple_byte
  2765  002A9A  502A               	movf	??_startTimer,w,c
  2766  002A9C  0A00               	xorlw	0	; case 0
  2767  002A9E  B4D8               	btfsc	status,2,c
  2768  002AA0  D7E2               	goto	l381
  2769  002AA2  0A01               	xorlw	1	; case 1
  2770  002AA4  B4D8               	btfsc	status,2,c
  2771  002AA6  D7E5               	goto	l383
  2772  002AA8  0A02               	xorlw	2	; case 3
  2773  002AAA  A4D8               	btfss	status,2,c
  2774  002AAC  0012               	return	
  2775  002AAE  D7E7               	goto	l384
  2776  002AB0                     __end_of_startTimer:
  2777                           	opt stack 0
  2778                           tblptru	equ	0xFF8
  2779                           tblptrh	equ	0xFF7
  2780                           tblptrl	equ	0xFF6
  2781                           tablat	equ	0xFF5
  2782                           postinc0	equ	0xFEE
  2783                           wreg	equ	0xFE8
  2784                           postdec1	equ	0xFE5
  2785                           fsr1l	equ	0xFE1
  2786                           postinc2	equ	0xFDE
  2787                           postdec2	equ	0xFDD
  2788                           fsr2h	equ	0xFDA
  2789                           fsr2l	equ	0xFD9
  2790                           status	equ	0xFD8
  2791                           
  2792 ;; *************** function _setAngle *****************
  2793 ;; Defined at:
  2794 ;;		line 49 in file "servo.c"
  2795 ;; Parameters:    Size  Location     Type
  2796 ;;  motor           2   84[BANK0 ] PTR int 
  2797 ;;		 -> initServo@timer(2), redirectingServo(6), padServo(6), 
  2798 ;;  angle           2   86[BANK0 ] int 
  2799 ;; Auto vars:     Size  Location     Type
  2800 ;;		None
  2801 ;; Return value:  Size  Location     Type
  2802 ;;                  1    wreg      void 
  2803 ;; Registers used:
  2804 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2805 ;; Tracked objects:
  2806 ;;		On entry : 0/0
  2807 ;;		On exit  : 0/0
  2808 ;;		Unchanged: 0/0
  2809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2810 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2812 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2813 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2814 ;;Total ram usage:       10 bytes
  2815 ;; Hardware stack levels used:    1
  2816 ;; Hardware stack levels required when called:    6
  2817 ;; This function calls:
  2818 ;;		_angleToPulse
  2819 ;; This function is called by:
  2820 ;;		_sortBattery
  2821 ;;		_initServo
  2822 ;; This function uses a non-reentrant model
  2823 ;;
  2824                           
  2825                           	psect	text6
  2826  002500                     __ptext6:
  2827                           	opt stack 0
  2828  002500                     _setAngle:
  2829                           	opt stack 23
  2830                           
  2831                           ;servo.c: 50: pulse[motor[0]] = 0xffff - angleToPulse(angle);
  2832                           
  2833                           ;incstack = 0
  2834  002500  C0D6  F0BD         	movff	setAngle@angle,angleToPulse@angle
  2835  002504  C0D7  F0BE         	movff	setAngle@angle+1,angleToPulse@angle+1
  2836  002508  EC36  F00C         	call	_angleToPulse	;wreg free
  2837  00250C  0100               	movlb	0	; () banked
  2838  00250E  1FBD               	comf	?_angleToPulse& (0+255),f,b
  2839  002510  0100               	movlb	0	; () banked
  2840  002512  1FBE               	comf	(?_angleToPulse+1)& (0+255),f,b
  2841  002514  0100               	movlb	0	; () banked
  2842  002516  1FBF               	comf	(?_angleToPulse+2)& (0+255),f,b
  2843  002518  0100               	movlb	0	; () banked
  2844  00251A  1FC0               	comf	(?_angleToPulse+3)& (0+255),f,b
  2845  00251C  0100               	movlb	0	; () banked
  2846  00251E  2BBD               	incf	?_angleToPulse& (0+255),f,b
  2847  002520  0E00               	movlw	0
  2848  002522  0100               	movlb	0	; () banked
  2849  002524  23BE               	addwfc	(?_angleToPulse+1)& (0+255),f,b
  2850  002526  0100               	movlb	0	; () banked
  2851  002528  23BF               	addwfc	(?_angleToPulse+2)& (0+255),f,b
  2852  00252A  0100               	movlb	0	; () banked
  2853  00252C  23C0               	addwfc	(?_angleToPulse+3)& (0+255),f,b
  2854  00252E  0EFF               	movlw	255
  2855  002530  0100               	movlb	0	; () banked
  2856  002532  25BD               	addwf	?_angleToPulse& (0+255),w,b
  2857  002534  0100               	movlb	0	; () banked
  2858  002536  6FD8               	movwf	??_setAngle& (0+255),b
  2859  002538  0EFF               	movlw	255
  2860  00253A  0100               	movlb	0	; () banked
  2861  00253C  21BE               	addwfc	(?_angleToPulse+1)& (0+255),w,b
  2862  00253E  0100               	movlb	0	; () banked
  2863  002540  6FD9               	movwf	(??_setAngle+1)& (0+255),b
  2864  002542  0E00               	movlw	0
  2865  002544  0100               	movlb	0	; () banked
  2866  002546  21BF               	addwfc	(?_angleToPulse+2)& (0+255),w,b
  2867  002548  0100               	movlb	0	; () banked
  2868  00254A  6FDA               	movwf	(??_setAngle+2)& (0+255),b
  2869  00254C  0E00               	movlw	0
  2870  00254E  0100               	movlb	0	; () banked
  2871  002550  21C0               	addwfc	(?_angleToPulse+3)& (0+255),w,b
  2872  002552  0100               	movlb	0	; () banked
  2873  002554  6FDB               	movwf	(??_setAngle+3)& (0+255),b
  2874  002556  C0D4  FFD9         	movff	setAngle@motor,fsr2l
  2875  00255A  C0D5  FFDA         	movff	setAngle@motor+1,fsr2h
  2876  00255E  CFDE F0DC          	movff	postinc2,??_setAngle+4
  2877  002562  CFDD F0DD          	movff	postdec2,??_setAngle+5
  2878  002566  0100               	movlb	0	; () banked
  2879  002568  90D8               	bcf	status,0,c
  2880  00256A  37DC               	rlcf	(??_setAngle+4)& (0+255),f,b
  2881  00256C  37DD               	rlcf	(??_setAngle+5)& (0+255),f,b
  2882  00256E  0100               	movlb	0	; () banked
  2883  002570  90D8               	bcf	status,0,c
  2884  002572  37DC               	rlcf	(??_setAngle+4)& (0+255),f,b
  2885  002574  37DD               	rlcf	(??_setAngle+5)& (0+255),f,b
  2886  002576  0E2A               	movlw	low _pulse
  2887  002578  0100               	movlb	0	; () banked
  2888  00257A  25DC               	addwf	(??_setAngle+4)& (0+255),w,b
  2889  00257C  6ED9               	movwf	fsr2l,c
  2890  00257E  0E01               	movlw	high _pulse
  2891  002580  0100               	movlb	0	; () banked
  2892  002582  21DD               	addwfc	(??_setAngle+5)& (0+255),w,b
  2893  002584  6EDA               	movwf	fsr2h,c
  2894  002586  C0D8  FFDE         	movff	??_setAngle,postinc2
  2895  00258A  C0D9  FFDE         	movff	??_setAngle+1,postinc2
  2896  00258E  C0DA  FFDE         	movff	??_setAngle+2,postinc2
  2897  002592  C0DB  FFDE         	movff	??_setAngle+3,postinc2
  2898                           
  2899                           ; BSR set to: 0
  2900  002596  0012               	return		;funcret
  2901  002598                     __end_of_setAngle:
  2902                           	opt stack 0
  2903                           tblptru	equ	0xFF8
  2904                           tblptrh	equ	0xFF7
  2905                           tblptrl	equ	0xFF6
  2906                           tablat	equ	0xFF5
  2907                           postinc0	equ	0xFEE
  2908                           wreg	equ	0xFE8
  2909                           postdec1	equ	0xFE5
  2910                           fsr1l	equ	0xFE1
  2911                           postinc2	equ	0xFDE
  2912                           postdec2	equ	0xFDD
  2913                           fsr2h	equ	0xFDA
  2914                           fsr2l	equ	0xFD9
  2915                           status	equ	0xFD8
  2916                           
  2917 ;; *************** function _angleToPulse *****************
  2918 ;; Defined at:
  2919 ;;		line 41 in file "servo.c"
  2920 ;; Parameters:    Size  Location     Type
  2921 ;;  angle           2   61[BANK0 ] int 
  2922 ;; Auto vars:     Size  Location     Type
  2923 ;;  a000            4   80[BANK0 ] long 
  2924 ;;  a180            4   73[BANK0 ] long 
  2925 ;;  offset          4   69[BANK0 ] long 
  2926 ;; Return value:  Size  Location     Type
  2927 ;;                  4   61[BANK0 ] long 
  2928 ;; Registers used:
  2929 ;;		wreg, status,2, status,0, cstack
  2930 ;; Tracked objects:
  2931 ;;		On entry : 0/0
  2932 ;;		On exit  : 0/0
  2933 ;;		Unchanged: 0/0
  2934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2935 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2936 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2937 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2938 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2939 ;;Total ram usage:       23 bytes
  2940 ;; Hardware stack levels used:    1
  2941 ;; Hardware stack levels required when called:    5
  2942 ;; This function calls:
  2943 ;;		___altoft
  2944 ;;		___awtoft
  2945 ;;		___ftadd
  2946 ;;		___ftdiv
  2947 ;;		___ftmul
  2948 ;;		___fttol
  2949 ;; This function is called by:
  2950 ;;		_setAngle
  2951 ;; This function uses a non-reentrant model
  2952 ;;
  2953                           
  2954                           	psect	text7
  2955  00186C                     __ptext7:
  2956                           	opt stack 0
  2957  00186C                     _angleToPulse:
  2958                           	opt stack 23
  2959                           
  2960                           ;servo.c: 42: long offset = 0;
  2961                           
  2962                           ; BSR set to: 0
  2963                           ;incstack = 0
  2964  00186C  0E00               	movlw	0
  2965  00186E  0100               	movlb	0	; () banked
  2966  001870  6FC5               	movwf	angleToPulse@offset& (0+255),b
  2967  001872  0E00               	movlw	0
  2968  001874  6FC6               	movwf	(angleToPulse@offset+1)& (0+255),b
  2969  001876  0E00               	movlw	0
  2970  001878  6FC7               	movwf	(angleToPulse@offset+2)& (0+255),b
  2971  00187A  0E00               	movlw	0
  2972  00187C  6FC8               	movwf	(angleToPulse@offset+3)& (0+255),b
  2973                           
  2974                           ;servo.c: 43: long a000 = 1250;
  2975  00187E  0EE2               	movlw	226
  2976  001880  0100               	movlb	0	; () banked
  2977  001882  6FD0               	movwf	angleToPulse@a000& (0+255),b
  2978  001884  0E04               	movlw	4
  2979  001886  6FD1               	movwf	(angleToPulse@a000+1)& (0+255),b
  2980  001888  0E00               	movlw	0
  2981  00188A  6FD2               	movwf	(angleToPulse@a000+2)& (0+255),b
  2982  00188C  0E00               	movlw	0
  2983  00188E  6FD3               	movwf	(angleToPulse@a000+3)& (0+255),b
  2984                           
  2985                           ;servo.c: 44: long a180 = 6250;
  2986  001890  0E6A               	movlw	106
  2987  001892  0100               	movlb	0	; () banked
  2988  001894  6FC9               	movwf	angleToPulse@a180& (0+255),b
  2989  001896  0E18               	movlw	24
  2990  001898  6FCA               	movwf	(angleToPulse@a180+1)& (0+255),b
  2991  00189A  0E00               	movlw	0
  2992  00189C  6FCB               	movwf	(angleToPulse@a180+2)& (0+255),b
  2993  00189E  0E00               	movlw	0
  2994  0018A0  6FCC               	movwf	(angleToPulse@a180+3)& (0+255),b
  2995                           
  2996                           ; BSR set to: 0
  2997                           ;servo.c: 46: return a000 + angle/180.0*(a180-a000) + offset;
  2998  0018A2  C0D0  F0C1         	movff	angleToPulse@a000,??_angleToPulse
  2999  0018A6  C0D1  F0C2         	movff	angleToPulse@a000+1,??_angleToPulse+1
  3000  0018AA  C0D2  F0C3         	movff	angleToPulse@a000+2,??_angleToPulse+2
  3001  0018AE  C0D3  F0C4         	movff	angleToPulse@a000+3,??_angleToPulse+3
  3002  0018B2  0100               	movlb	0	; () banked
  3003  0018B4  1FC1               	comf	??_angleToPulse& (0+255),f,b
  3004  0018B6  1FC2               	comf	(??_angleToPulse+1)& (0+255),f,b
  3005  0018B8  1FC3               	comf	(??_angleToPulse+2)& (0+255),f,b
  3006  0018BA  1FC4               	comf	(??_angleToPulse+3)& (0+255),f,b
  3007  0018BC  2BC1               	incf	??_angleToPulse& (0+255),f,b
  3008  0018BE  0E00               	movlw	0
  3009  0018C0  23C2               	addwfc	(??_angleToPulse+1)& (0+255),f,b
  3010  0018C2  23C3               	addwfc	(??_angleToPulse+2)& (0+255),f,b
  3011  0018C4  23C4               	addwfc	(??_angleToPulse+3)& (0+255),f,b
  3012  0018C6  0100               	movlb	0	; () banked
  3013  0018C8  51C9               	movf	angleToPulse@a180& (0+255),w,b
  3014  0018CA  0100               	movlb	0	; () banked
  3015  0018CC  25C1               	addwf	??_angleToPulse& (0+255),w,b
  3016  0018CE  6E2C               	movwf	___altoft@c,c
  3017  0018D0  0100               	movlb	0	; () banked
  3018  0018D2  51CA               	movf	(angleToPulse@a180+1)& (0+255),w,b
  3019  0018D4  0100               	movlb	0	; () banked
  3020  0018D6  21C2               	addwfc	(??_angleToPulse+1)& (0+255),w,b
  3021  0018D8  6E2D               	movwf	___altoft@c+1,c
  3022  0018DA  0100               	movlb	0	; () banked
  3023  0018DC  51CB               	movf	(angleToPulse@a180+2)& (0+255),w,b
  3024  0018DE  0100               	movlb	0	; () banked
  3025  0018E0  21C3               	addwfc	(??_angleToPulse+2)& (0+255),w,b
  3026  0018E2  6E2E               	movwf	___altoft@c+2,c
  3027  0018E4  0100               	movlb	0	; () banked
  3028  0018E6  51CC               	movf	(angleToPulse@a180+3)& (0+255),w,b
  3029  0018E8  0100               	movlb	0	; () banked
  3030  0018EA  21C4               	addwfc	(??_angleToPulse+3)& (0+255),w,b
  3031  0018EC  6E2F               	movwf	___altoft@c+3,c
  3032  0018EE  EC2A  F014         	call	___altoft	;wreg free
  3033  0018F2  C02C  F08C         	movff	?___altoft,___ftmul@f2
  3034  0018F6  C02D  F08D         	movff	?___altoft+1,___ftmul@f2+1
  3035  0018FA  C02E  F08E         	movff	?___altoft+2,___ftmul@f2+2
  3036  0018FE  0E00               	movlw	0
  3037  001900  6E39               	movwf	___ftdiv@f2,c
  3038  001902  0E34               	movlw	52
  3039  001904  6E3A               	movwf	___ftdiv@f2+1,c
  3040  001906  0E43               	movlw	67
  3041  001908  6E3B               	movwf	___ftdiv@f2+2,c
  3042  00190A  C0BD  F02C         	movff	angleToPulse@angle,___awtoft@c
  3043  00190E  C0BE  F02D         	movff	angleToPulse@angle+1,___awtoft@c+1
  3044  001912  EC2E  F016         	call	___awtoft	;wreg free
  3045  001916  C02C  F036         	movff	?___awtoft,___ftdiv@f1
  3046  00191A  C02D  F037         	movff	?___awtoft+1,___ftdiv@f1+1
  3047  00191E  C02E  F038         	movff	?___awtoft+2,___ftdiv@f1+2
  3048  001922  ECB1  F00E         	call	___ftdiv	;wreg free
  3049  001926  C036  F089         	movff	?___ftdiv,___ftmul@f1
  3050  00192A  C037  F08A         	movff	?___ftdiv+1,___ftmul@f1+1
  3051  00192E  C038  F08B         	movff	?___ftdiv+2,___ftmul@f1+2
  3052  001932  EC87  F00B         	call	___ftmul	;wreg free
  3053  001936  C089  F0A5         	movff	?___ftmul,___ftadd@f2
  3054  00193A  C08A  F0A6         	movff	?___ftmul+1,___ftadd@f2+1
  3055  00193E  C08B  F0A7         	movff	?___ftmul+2,___ftadd@f2+2
  3056  001942  C0D0  F02C         	movff	angleToPulse@a000,___altoft@c
  3057  001946  C0D1  F02D         	movff	angleToPulse@a000+1,___altoft@c+1
  3058  00194A  C0D2  F02E         	movff	angleToPulse@a000+2,___altoft@c+2
  3059  00194E  C0D3  F02F         	movff	angleToPulse@a000+3,___altoft@c+3
  3060  001952  EC2A  F014         	call	___altoft	;wreg free
  3061  001956  C02C  F0A2         	movff	?___altoft,___ftadd@f1
  3062  00195A  C02D  F0A3         	movff	?___altoft+1,___ftadd@f1+1
  3063  00195E  C02E  F0A4         	movff	?___altoft+2,___ftadd@f1+2
  3064  001962  EC57  F008         	call	___ftadd	;wreg free
  3065  001966  C0A2  F0CD         	movff	?___ftadd,_angleToPulse$1333
  3066  00196A  C0A3  F0CE         	movff	?___ftadd+1,_angleToPulse$1333+1
  3067  00196E  C0A4  F0CF         	movff	?___ftadd+2,_angleToPulse$1333+2
  3068                           
  3069                           ;servo.c: 46: return a000 + angle/180.0*(a180-a000) + offset;
  3070  001972  C0C5  F02C         	movff	angleToPulse@offset,___altoft@c
  3071  001976  C0C6  F02D         	movff	angleToPulse@offset+1,___altoft@c+1
  3072  00197A  C0C7  F02E         	movff	angleToPulse@offset+2,___altoft@c+2
  3073  00197E  C0C8  F02F         	movff	angleToPulse@offset+3,___altoft@c+3
  3074  001982  EC2A  F014         	call	___altoft	;wreg free
  3075  001986  C02C  F0A5         	movff	?___altoft,___ftadd@f2
  3076  00198A  C02D  F0A6         	movff	?___altoft+1,___ftadd@f2+1
  3077  00198E  C02E  F0A7         	movff	?___altoft+2,___ftadd@f2+2
  3078  001992  C0CD  F0A2         	movff	_angleToPulse$1333,___ftadd@f1
  3079  001996  C0CE  F0A3         	movff	_angleToPulse$1333+1,___ftadd@f1+1
  3080  00199A  C0CF  F0A4         	movff	_angleToPulse$1333+2,___ftadd@f1+2
  3081  00199E  EC57  F008         	call	___ftadd	;wreg free
  3082  0019A2  C0A2  F0AE         	movff	?___ftadd,___fttol@f1
  3083  0019A6  C0A3  F0AF         	movff	?___ftadd+1,___fttol@f1+1
  3084  0019AA  C0A4  F0B0         	movff	?___ftadd+2,___fttol@f1+2
  3085  0019AE  ECE2  F00C         	call	___fttol	;wreg free
  3086  0019B2  C0AE  F0BD         	movff	?___fttol,?_angleToPulse
  3087  0019B6  C0AF  F0BE         	movff	?___fttol+1,?_angleToPulse+1
  3088  0019BA  C0B0  F0BF         	movff	?___fttol+2,?_angleToPulse+2
  3089  0019BE  C0B1  F0C0         	movff	?___fttol+3,?_angleToPulse+3
  3090  0019C2  0012               	return	
  3091  0019C4                     __end_of_angleToPulse:
  3092                           	opt stack 0
  3093                           tblptru	equ	0xFF8
  3094                           tblptrh	equ	0xFF7
  3095                           tblptrl	equ	0xFF6
  3096                           tablat	equ	0xFF5
  3097                           postinc0	equ	0xFEE
  3098                           wreg	equ	0xFE8
  3099                           postdec1	equ	0xFE5
  3100                           fsr1l	equ	0xFE1
  3101                           postinc2	equ	0xFDE
  3102                           postdec2	equ	0xFDD
  3103                           fsr2h	equ	0xFDA
  3104                           fsr2l	equ	0xFD9
  3105                           status	equ	0xFD8
  3106                           
  3107 ;; *************** function ___ftdiv *****************
  3108 ;; Defined at:
  3109 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  3110 ;; Parameters:    Size  Location     Type
  3111 ;;  f1              3   53[COMRAM] float 
  3112 ;;  f2              3   56[COMRAM] float 
  3113 ;; Auto vars:     Size  Location     Type
  3114 ;;  f3              3    4[BANK0 ] float 
  3115 ;;  sign            1    8[BANK0 ] unsigned char 
  3116 ;;  exp             1    7[BANK0 ] unsigned char 
  3117 ;;  cntr            1    3[BANK0 ] unsigned char 
  3118 ;; Return value:  Size  Location     Type
  3119 ;;                  3   53[COMRAM] float 
  3120 ;; Registers used:
  3121 ;;		wreg, status,2, status,0, cstack
  3122 ;; Tracked objects:
  3123 ;;		On entry : 0/0
  3124 ;;		On exit  : 0/0
  3125 ;;		Unchanged: 0/0
  3126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3127 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3128 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3129 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3130 ;;      Totals:         6       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3131 ;;Total ram usage:       15 bytes
  3132 ;; Hardware stack levels used:    1
  3133 ;; Hardware stack levels required when called:    4
  3134 ;; This function calls:
  3135 ;;		___ftpack
  3136 ;; This function is called by:
  3137 ;;		_sortBattery
  3138 ;;		_angleToPulse
  3139 ;;		_testFrequency
  3140 ;; This function uses a non-reentrant model
  3141 ;;
  3142                           
  3143                           	psect	text8
  3144  001D62                     __ptext8:
  3145                           	opt stack 0
  3146  001D62                     ___ftdiv:
  3147                           	opt stack 23
  3148                           
  3149                           ;incstack = 0
  3150  001D62  C038  F080         	movff	___ftdiv@f1+2,??___ftdiv
  3151  001D66  0100               	movlb	0	; () banked
  3152  001D68  6B81               	clrf	(??___ftdiv+1)& (0+255),b
  3153  001D6A  6B82               	clrf	(??___ftdiv+2)& (0+255),b
  3154  001D6C  3437               	rlcf	___ftdiv@f1+1,w,c
  3155  001D6E  0100               	movlb	0	; () banked
  3156  001D70  3780               	rlcf	??___ftdiv& (0+255),f,b
  3157  001D72  E301               	bnc	u4531
  3158  001D74  8181               	bsf	(??___ftdiv+1)& (0+255),0,b
  3159  001D76                     u4531:
  3160  001D76  0100               	movlb	0	; () banked
  3161  001D78  5180               	movf	??___ftdiv& (0+255),w,b
  3162  001D7A  0100               	movlb	0	; () banked
  3163  001D7C  6F87               	movwf	___ftdiv@exp& (0+255),b
  3164  001D7E  0100               	movlb	0	; () banked
  3165  001D80  5187               	movf	___ftdiv@exp& (0+255),w,b
  3166  001D82  A4D8               	btfss	status,2,c
  3167  001D84  D007               	goto	l5061
  3168                           
  3169                           ; BSR set to: 0
  3170  001D86  0E00               	movlw	0
  3171  001D88  6E36               	movwf	?___ftdiv,c
  3172  001D8A  0E00               	movlw	0
  3173  001D8C  6E37               	movwf	?___ftdiv+1,c
  3174  001D8E  0E00               	movlw	0
  3175  001D90  6E38               	movwf	?___ftdiv+2,c
  3176                           
  3177                           ; BSR set to: 0
  3178  001D92  0012               	return	
  3179  001D94                     l5061:
  3180                           
  3181                           ; BSR set to: 0
  3182  001D94  C03B  F080         	movff	___ftdiv@f2+2,??___ftdiv
  3183  001D98  0100               	movlb	0	; () banked
  3184  001D9A  6B81               	clrf	(??___ftdiv+1)& (0+255),b
  3185  001D9C  6B82               	clrf	(??___ftdiv+2)& (0+255),b
  3186  001D9E  343A               	rlcf	___ftdiv@f2+1,w,c
  3187  001DA0  0100               	movlb	0	; () banked
  3188  001DA2  3780               	rlcf	??___ftdiv& (0+255),f,b
  3189  001DA4  E301               	bnc	u4551
  3190  001DA6  8181               	bsf	(??___ftdiv+1)& (0+255),0,b
  3191  001DA8                     u4551:
  3192  001DA8  0100               	movlb	0	; () banked
  3193  001DAA  5180               	movf	??___ftdiv& (0+255),w,b
  3194  001DAC  0100               	movlb	0	; () banked
  3195  001DAE  6F88               	movwf	___ftdiv@sign& (0+255),b
  3196  001DB0  0100               	movlb	0	; () banked
  3197  001DB2  5188               	movf	___ftdiv@sign& (0+255),w,b
  3198  001DB4  A4D8               	btfss	status,2,c
  3199  001DB6  D007               	goto	l5067
  3200                           
  3201                           ; BSR set to: 0
  3202  001DB8  0E00               	movlw	0
  3203  001DBA  6E36               	movwf	?___ftdiv,c
  3204  001DBC  0E00               	movlw	0
  3205  001DBE  6E37               	movwf	?___ftdiv+1,c
  3206  001DC0  0E00               	movlw	0
  3207  001DC2  6E38               	movwf	?___ftdiv+2,c
  3208                           
  3209                           ; BSR set to: 0
  3210  001DC4  0012               	return	
  3211  001DC6                     l5067:
  3212                           
  3213                           ; BSR set to: 0
  3214  001DC6  0E00               	movlw	0
  3215  001DC8  0100               	movlb	0	; () banked
  3216  001DCA  6F84               	movwf	___ftdiv@f3& (0+255),b
  3217  001DCC  0E00               	movlw	0
  3218  001DCE  0100               	movlb	0	; () banked
  3219  001DD0  6F85               	movwf	(___ftdiv@f3+1)& (0+255),b
  3220  001DD2  0E00               	movlw	0
  3221  001DD4  0100               	movlb	0	; () banked
  3222  001DD6  6F86               	movwf	(___ftdiv@f3+2)& (0+255),b
  3223                           
  3224                           ; BSR set to: 0
  3225  001DD8  0100               	movlb	0	; () banked
  3226  001DDA  5188               	movf	___ftdiv@sign& (0+255),w,b
  3227  001DDC  0F89               	addlw	137
  3228  001DDE  0100               	movlb	0	; () banked
  3229  001DE0  5F87               	subwf	___ftdiv@exp& (0+255),f,b
  3230                           
  3231                           ; BSR set to: 0
  3232  001DE2  C038  F088         	movff	___ftdiv@f1+2,___ftdiv@sign
  3233                           
  3234                           ; BSR set to: 0
  3235  001DE6  503B               	movf	___ftdiv@f2+2,w,c
  3236  001DE8  0100               	movlb	0	; () banked
  3237  001DEA  1B88               	xorwf	___ftdiv@sign& (0+255),f,b
  3238                           
  3239                           ; BSR set to: 0
  3240  001DEC  0E80               	movlw	128
  3241  001DEE  0100               	movlb	0	; () banked
  3242  001DF0  1788               	andwf	___ftdiv@sign& (0+255),f,b
  3243                           
  3244                           ; BSR set to: 0
  3245  001DF2  8E37               	bsf	___ftdiv@f1+1,7,c
  3246                           
  3247                           ; BSR set to: 0
  3248  001DF4  0EFF               	movlw	255
  3249  001DF6  1636               	andwf	___ftdiv@f1,f,c
  3250  001DF8  0EFF               	movlw	255
  3251  001DFA  1637               	andwf	___ftdiv@f1+1,f,c
  3252  001DFC  0E00               	movlw	0
  3253  001DFE  1638               	andwf	___ftdiv@f1+2,f,c
  3254                           
  3255                           ; BSR set to: 0
  3256  001E00  8E3A               	bsf	___ftdiv@f2+1,7,c
  3257                           
  3258                           ; BSR set to: 0
  3259  001E02  0EFF               	movlw	255
  3260  001E04  1639               	andwf	___ftdiv@f2,f,c
  3261  001E06  0EFF               	movlw	255
  3262  001E08  163A               	andwf	___ftdiv@f2+1,f,c
  3263  001E0A  0E00               	movlw	0
  3264  001E0C  163B               	andwf	___ftdiv@f2+2,f,c
  3265                           
  3266                           ; BSR set to: 0
  3267  001E0E  0E18               	movlw	24
  3268  001E10  0100               	movlb	0	; () banked
  3269  001E12  6F83               	movwf	___ftdiv@cntr& (0+255),b
  3270  001E14                     l5087:
  3271                           
  3272                           ; BSR set to: 0
  3273  001E14  0100               	movlb	0	; () banked
  3274  001E16  90D8               	bcf	status,0,c
  3275  001E18  3784               	rlcf	___ftdiv@f3& (0+255),f,b
  3276  001E1A  3785               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  3277  001E1C  3786               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  3278                           
  3279                           ; BSR set to: 0
  3280  001E1E  5039               	movf	___ftdiv@f2,w,c
  3281  001E20  5C36               	subwf	___ftdiv@f1,w,c
  3282  001E22  503A               	movf	___ftdiv@f2+1,w,c
  3283  001E24  5837               	subwfb	___ftdiv@f1+1,w,c
  3284  001E26  503B               	movf	___ftdiv@f2+2,w,c
  3285  001E28  5838               	subwfb	___ftdiv@f1+2,w,c
  3286  001E2A  A0D8               	btfss	status,0,c
  3287  001E2C  D008               	goto	l1041
  3288                           
  3289                           ; BSR set to: 0
  3290  001E2E  5039               	movf	___ftdiv@f2,w,c
  3291  001E30  5E36               	subwf	___ftdiv@f1,f,c
  3292  001E32  503A               	movf	___ftdiv@f2+1,w,c
  3293  001E34  5A37               	subwfb	___ftdiv@f1+1,f,c
  3294  001E36  503B               	movf	___ftdiv@f2+2,w,c
  3295  001E38  5A38               	subwfb	___ftdiv@f1+2,f,c
  3296                           
  3297                           ; BSR set to: 0
  3298  001E3A  0100               	movlb	0	; () banked
  3299  001E3C  8184               	bsf	___ftdiv@f3& (0+255),0,b
  3300  001E3E                     l1041:
  3301                           
  3302                           ; BSR set to: 0
  3303  001E3E  90D8               	bcf	status,0,c
  3304  001E40  3636               	rlcf	___ftdiv@f1,f,c
  3305  001E42  3637               	rlcf	___ftdiv@f1+1,f,c
  3306  001E44  3638               	rlcf	___ftdiv@f1+2,f,c
  3307                           
  3308                           ; BSR set to: 0
  3309  001E46  0100               	movlb	0	; () banked
  3310  001E48  2F83               	decfsz	___ftdiv@cntr& (0+255),f,b
  3311  001E4A  D7E4               	goto	l5087
  3312                           
  3313                           ; BSR set to: 0
  3314                           
  3315                           ; BSR set to: 0
  3316  001E4C  C084  F024         	movff	___ftdiv@f3,___ftpack@arg
  3317  001E50  C085  F025         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3318  001E54  C086  F026         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3319  001E58  C087  F027         	movff	___ftdiv@exp,___ftpack@exp
  3320  001E5C  C088  F028         	movff	___ftdiv@sign,___ftpack@sign
  3321  001E60  ECDB  F011         	call	___ftpack	;wreg free
  3322  001E64  C024  F036         	movff	?___ftpack,?___ftdiv
  3323  001E68  C025  F037         	movff	?___ftpack+1,?___ftdiv+1
  3324  001E6C  C026  F038         	movff	?___ftpack+2,?___ftdiv+2
  3325  001E70  0012               	return	
  3326  001E72                     __end_of___ftdiv:
  3327                           	opt stack 0
  3328                           tblptru	equ	0xFF8
  3329                           tblptrh	equ	0xFF7
  3330                           tblptrl	equ	0xFF6
  3331                           tablat	equ	0xFF5
  3332                           postinc0	equ	0xFEE
  3333                           wreg	equ	0xFE8
  3334                           postdec1	equ	0xFE5
  3335                           fsr1l	equ	0xFE1
  3336                           postinc2	equ	0xFDE
  3337                           postdec2	equ	0xFDD
  3338                           fsr2h	equ	0xFDA
  3339                           fsr2l	equ	0xFD9
  3340                           status	equ	0xFD8
  3341                           
  3342 ;; *************** function ___awtoft *****************
  3343 ;; Defined at:
  3344 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  3345 ;; Parameters:    Size  Location     Type
  3346 ;;  c               2   43[COMRAM] int 
  3347 ;; Auto vars:     Size  Location     Type
  3348 ;;  sign            1   46[COMRAM] unsigned char 
  3349 ;; Return value:  Size  Location     Type
  3350 ;;                  3   43[COMRAM] float 
  3351 ;; Registers used:
  3352 ;;		wreg, status,2, status,0, cstack
  3353 ;; Tracked objects:
  3354 ;;		On entry : 0/0
  3355 ;;		On exit  : 0/0
  3356 ;;		Unchanged: 0/0
  3357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3358 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3359 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3361 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3362 ;;Total ram usage:        4 bytes
  3363 ;; Hardware stack levels used:    1
  3364 ;; Hardware stack levels required when called:    4
  3365 ;; This function calls:
  3366 ;;		___ftpack
  3367 ;; This function is called by:
  3368 ;;		_angleToPulse
  3369 ;; This function uses a non-reentrant model
  3370 ;;
  3371                           
  3372                           	psect	text9
  3373  002C5C                     __ptext9:
  3374                           	opt stack 0
  3375  002C5C                     ___awtoft:
  3376                           	opt stack 23
  3377                           
  3378                           ;incstack = 0
  3379  002C5C  0E00               	movlw	0
  3380  002C5E  6E2F               	movwf	___awtoft@sign,c
  3381  002C60  AE2D               	btfss	___awtoft@c+1,7,c
  3382  002C62  D006               	goto	l5237
  3383  002C64  6C2C               	negf	___awtoft@c,c
  3384  002C66  1E2D               	comf	___awtoft@c+1,f,c
  3385  002C68  B0D8               	btfsc	status,0,c
  3386  002C6A  2A2D               	incf	___awtoft@c+1,f,c
  3387  002C6C  0E01               	movlw	1
  3388  002C6E  6E2F               	movwf	___awtoft@sign,c
  3389  002C70                     l5237:
  3390  002C70  C02C  F024         	movff	___awtoft@c,___ftpack@arg
  3391  002C74  C02D  F025         	movff	___awtoft@c+1,___ftpack@arg+1
  3392  002C78  6A26               	clrf	___ftpack@arg+2,c
  3393  002C7A  0E8E               	movlw	142
  3394  002C7C  6E27               	movwf	___ftpack@exp,c
  3395  002C7E  C02F  F028         	movff	___awtoft@sign,___ftpack@sign
  3396  002C82  ECDB  F011         	call	___ftpack	;wreg free
  3397  002C86  C024  F02C         	movff	?___ftpack,?___awtoft
  3398  002C8A  C025  F02D         	movff	?___ftpack+1,?___awtoft+1
  3399  002C8E  C026  F02E         	movff	?___ftpack+2,?___awtoft+2
  3400  002C92  0012               	return	
  3401  002C94                     __end_of___awtoft:
  3402                           	opt stack 0
  3403                           tblptru	equ	0xFF8
  3404                           tblptrh	equ	0xFF7
  3405                           tblptrl	equ	0xFF6
  3406                           tablat	equ	0xFF5
  3407                           postinc0	equ	0xFEE
  3408                           wreg	equ	0xFE8
  3409                           postdec1	equ	0xFE5
  3410                           fsr1l	equ	0xFE1
  3411                           postinc2	equ	0xFDE
  3412                           postdec2	equ	0xFDD
  3413                           fsr2h	equ	0xFDA
  3414                           fsr2l	equ	0xFD9
  3415                           status	equ	0xFD8
  3416                           
  3417 ;; *************** function ___altoft *****************
  3418 ;; Defined at:
  3419 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  3420 ;; Parameters:    Size  Location     Type
  3421 ;;  c               4   43[COMRAM] long 
  3422 ;; Auto vars:     Size  Location     Type
  3423 ;;  sign            1   52[COMRAM] unsigned char 
  3424 ;;  exp             1   51[COMRAM] unsigned char 
  3425 ;; Return value:  Size  Location     Type
  3426 ;;                  3   43[COMRAM] float 
  3427 ;; Registers used:
  3428 ;;		wreg, status,2, status,0, cstack
  3429 ;; Tracked objects:
  3430 ;;		On entry : 0/0
  3431 ;;		On exit  : 0/0
  3432 ;;		Unchanged: 0/0
  3433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3434 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3435 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3436 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3437 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3438 ;;Total ram usage:       10 bytes
  3439 ;; Hardware stack levels used:    1
  3440 ;; Hardware stack levels required when called:    4
  3441 ;; This function calls:
  3442 ;;		___ftpack
  3443 ;; This function is called by:
  3444 ;;		_sortBattery
  3445 ;;		_angleToPulse
  3446 ;;		_testFrequency
  3447 ;; This function uses a non-reentrant model
  3448 ;;
  3449                           
  3450                           	psect	text10
  3451  002854                     __ptext10:
  3452                           	opt stack 0
  3453  002854                     ___altoft:
  3454                           	opt stack 23
  3455                           
  3456                           ;incstack = 0
  3457  002854  0E00               	movlw	0
  3458  002856  6E35               	movwf	___altoft@sign,c
  3459  002858  0E8E               	movlw	142
  3460  00285A  6E34               	movwf	___altoft@exp,c
  3461  00285C  AE2F               	btfss	___altoft@c+3,7,c
  3462  00285E  D011               	goto	l4979
  3463  002860  1E2F               	comf	___altoft@c+3,f,c
  3464  002862  1E2E               	comf	___altoft@c+2,f,c
  3465  002864  1E2D               	comf	___altoft@c+1,f,c
  3466  002866  6C2C               	negf	___altoft@c,c
  3467  002868  0E00               	movlw	0
  3468  00286A  222D               	addwfc	___altoft@c+1,f,c
  3469  00286C  222E               	addwfc	___altoft@c+2,f,c
  3470  00286E  222F               	addwfc	___altoft@c+3,f,c
  3471  002870  0E01               	movlw	1
  3472  002872  6E35               	movwf	___altoft@sign,c
  3473  002874  D006               	goto	l4979
  3474  002876                     l4977:
  3475  002876  90D8               	bcf	status,0,c
  3476  002878  322F               	rrcf	___altoft@c+3,f,c
  3477  00287A  322E               	rrcf	___altoft@c+2,f,c
  3478  00287C  322D               	rrcf	___altoft@c+1,f,c
  3479  00287E  322C               	rrcf	___altoft@c,f,c
  3480  002880  2A34               	incf	___altoft@exp,f,c
  3481  002882                     l4979:
  3482  002882  0E00               	movlw	0
  3483  002884  142C               	andwf	___altoft@c,w,c
  3484  002886  6E30               	movwf	??___altoft& (0+255),c
  3485  002888  0E00               	movlw	0
  3486  00288A  142D               	andwf	___altoft@c+1,w,c
  3487  00288C  6E31               	movwf	(??___altoft+1)& (0+255),c
  3488  00288E  0E00               	movlw	0
  3489  002890  142E               	andwf	___altoft@c+2,w,c
  3490  002892  6E32               	movwf	(??___altoft+2)& (0+255),c
  3491  002894  0EFF               	movlw	255
  3492  002896  142F               	andwf	___altoft@c+3,w,c
  3493  002898  6E33               	movwf	(??___altoft+3)& (0+255),c
  3494  00289A  5030               	movf	??___altoft,w,c
  3495  00289C  1031               	iorwf	??___altoft+1,w,c
  3496  00289E  1032               	iorwf	??___altoft+2,w,c
  3497  0028A0  1033               	iorwf	??___altoft+3,w,c
  3498  0028A2  A4D8               	btfss	status,2,c
  3499  0028A4  D7E8               	goto	l4977
  3500  0028A6  C02C  F024         	movff	___altoft@c,___ftpack@arg
  3501  0028AA  C02D  F025         	movff	___altoft@c+1,___ftpack@arg+1
  3502  0028AE  C02E  F026         	movff	___altoft@c+2,___ftpack@arg+2
  3503  0028B2  C034  F027         	movff	___altoft@exp,___ftpack@exp
  3504  0028B6  C035  F028         	movff	___altoft@sign,___ftpack@sign
  3505  0028BA  ECDB  F011         	call	___ftpack	;wreg free
  3506  0028BE  C024  F02C         	movff	?___ftpack,?___altoft
  3507  0028C2  C025  F02D         	movff	?___ftpack+1,?___altoft+1
  3508  0028C6  C026  F02E         	movff	?___ftpack+2,?___altoft+2
  3509  0028CA  0012               	return	
  3510  0028CC                     __end_of___altoft:
  3511                           	opt stack 0
  3512                           tblptru	equ	0xFF8
  3513                           tblptrh	equ	0xFF7
  3514                           tblptrl	equ	0xFF6
  3515                           tablat	equ	0xFF5
  3516                           postinc0	equ	0xFEE
  3517                           wreg	equ	0xFE8
  3518                           postdec1	equ	0xFE5
  3519                           fsr1l	equ	0xFE1
  3520                           postinc2	equ	0xFDE
  3521                           postdec2	equ	0xFDD
  3522                           fsr2h	equ	0xFDA
  3523                           fsr2l	equ	0xFD9
  3524                           status	equ	0xFD8
  3525                           
  3526 ;; *************** function _initTimer *****************
  3527 ;; Defined at:
  3528 ;;		line 52 in file "timer.c"
  3529 ;; Parameters:    Size  Location     Type
  3530 ;;  timer           2   35[COMRAM] int 
  3531 ;; Auto vars:     Size  Location     Type
  3532 ;;		None
  3533 ;; Return value:  Size  Location     Type
  3534 ;;                  1    wreg      void 
  3535 ;; Registers used:
  3536 ;;		wreg, status,2, status,0
  3537 ;; Tracked objects:
  3538 ;;		On entry : 0/0
  3539 ;;		On exit  : 0/0
  3540 ;;		Unchanged: 0/0
  3541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3542 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3544 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3545 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3546 ;;Total ram usage:        4 bytes
  3547 ;; Hardware stack levels used:    1
  3548 ;; Hardware stack levels required when called:    3
  3549 ;; This function calls:
  3550 ;;		Nothing
  3551 ;; This function is called by:
  3552 ;;		_initServo
  3553 ;;		_testFrequency
  3554 ;; This function uses a non-reentrant model
  3555 ;;
  3556                           
  3557                           	psect	text11
  3558  002B8E                     __ptext11:
  3559                           	opt stack 0
  3560  002B8E                     _initTimer:
  3561                           	opt stack 25
  3562                           
  3563                           ;timer.c: 53: switch(timer){
  3564                           
  3565                           ;incstack = 0
  3566  002B8E  D00D               	goto	l5809
  3567  002B90                     l5793:
  3568                           
  3569                           ;timer.c: 55: T0CON = 0;
  3570  002B90  0E00               	movlw	0
  3571  002B92  6ED5               	movwf	4053,c	;volatile
  3572                           
  3573                           ;timer.c: 56: T0CON |= 1<<3;
  3574  002B94  86D5               	bsf	4053,3,c	;volatile
  3575                           
  3576                           ;timer.c: 58: TMR0IE = 1;
  3577  002B96  8AF2               	bsf	intcon,5,c	;volatile
  3578                           
  3579                           ;timer.c: 59: break;
  3580  002B98  D01A               	goto	l374
  3581  002B9A                     l5799:
  3582                           
  3583                           ;timer.c: 61: T1CON = 0;
  3584  002B9A  0E00               	movlw	0
  3585  002B9C  6ECD               	movwf	4045,c	;volatile
  3586                           
  3587                           ;timer.c: 63: TMR1IE = 1;
  3588  002B9E  809D               	bsf	3997,0,c	;volatile
  3589                           
  3590                           ;timer.c: 64: break;
  3591  002BA0  D016               	goto	l374
  3592  002BA2                     l5803:
  3593                           
  3594                           ;timer.c: 66: T3CON = 0;
  3595  002BA2  0E00               	movlw	0
  3596  002BA4  6EB1               	movwf	4017,c	;volatile
  3597                           
  3598                           ;timer.c: 67: TMR3IE = 1;
  3599  002BA6  82A0               	bsf	4000,1,c	;volatile
  3600                           
  3601                           ;timer.c: 69: }
  3602                           
  3603                           ;timer.c: 68: break;
  3604  002BA8  D012               	goto	l374
  3605  002BAA                     l5809:
  3606  002BAA  C024  F026         	movff	initTimer@timer,??_initTimer
  3607  002BAE  C025  F027         	movff	initTimer@timer+1,??_initTimer+1
  3608                           
  3609                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3610                           ; Switch size 1, requested type "space"
  3611                           ; Number of cases is 1, Range of values is 0 to 0
  3612                           ; switch strategies available:
  3613                           ; Name         Instructions Cycles
  3614                           ; simple_byte            4     3 (average)
  3615                           ;	Chosen strategy is simple_byte
  3616  002BB2  5027               	movf	??_initTimer+1,w,c
  3617  002BB4  0A00               	xorlw	0	; case 0
  3618  002BB6  A4D8               	btfss	status,2,c
  3619  002BB8  D00A               	goto	l374
  3620                           
  3621                           ; Switch size 1, requested type "space"
  3622                           ; Number of cases is 3, Range of values is 0 to 3
  3623                           ; switch strategies available:
  3624                           ; Name         Instructions Cycles
  3625                           ; simple_byte           10     6 (average)
  3626                           ;	Chosen strategy is simple_byte
  3627  002BBA  5026               	movf	??_initTimer,w,c
  3628  002BBC  0A00               	xorlw	0	; case 0
  3629  002BBE  B4D8               	btfsc	status,2,c
  3630  002BC0  D7E7               	goto	l5793
  3631  002BC2  0A01               	xorlw	1	; case 1
  3632  002BC4  B4D8               	btfsc	status,2,c
  3633  002BC6  D7E9               	goto	l5799
  3634  002BC8  0A02               	xorlw	2	; case 3
  3635  002BCA  B4D8               	btfsc	status,2,c
  3636  002BCC  D7EA               	goto	l5803
  3637  002BCE                     l374:
  3638                           
  3639                           ;timer.c: 70: PEIE = 1;
  3640  002BCE  8CF2               	bsf	intcon,6,c	;volatile
  3641                           
  3642                           ;timer.c: 71: (INTCONbits.GIE = 1);
  3643  002BD0  8EF2               	bsf	intcon,7,c	;volatile
  3644  002BD2  0012               	return		;funcret
  3645  002BD4                     __end_of_initTimer:
  3646                           	opt stack 0
  3647                           tblptru	equ	0xFF8
  3648                           tblptrh	equ	0xFF7
  3649                           tblptrl	equ	0xFF6
  3650                           tablat	equ	0xFF5
  3651                           intcon	equ	0xFF2
  3652                           postinc0	equ	0xFEE
  3653                           wreg	equ	0xFE8
  3654                           postdec1	equ	0xFE5
  3655                           fsr1l	equ	0xFE1
  3656                           postinc2	equ	0xFDE
  3657                           postdec2	equ	0xFDD
  3658                           fsr2h	equ	0xFDA
  3659                           fsr2l	equ	0xFD9
  3660                           status	equ	0xFD8
  3661                           
  3662 ;; *************** function _digitalWrite *****************
  3663 ;; Defined at:
  3664 ;;		line 53 in file "iopin.c"
  3665 ;; Parameters:    Size  Location     Type
  3666 ;;  pin             2   35[COMRAM] PTR int 
  3667 ;;		 -> servo(16), AA_float(4), cylinderMotor(4), 
  3668 ;;  val             2   37[COMRAM] int 
  3669 ;; Auto vars:     Size  Location     Type
  3670 ;;  p               2   42[COMRAM] int 
  3671 ;; Return value:  Size  Location     Type
  3672 ;;                  1    wreg      void 
  3673 ;; Registers used:
  3674 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3675 ;; Tracked objects:
  3676 ;;		On entry : 0/0
  3677 ;;		On exit  : 0/0
  3678 ;;		Unchanged: 0/0
  3679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3680 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3681 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3682 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3683 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3684 ;;Total ram usage:        9 bytes
  3685 ;; Hardware stack levels used:    1
  3686 ;; Hardware stack levels required when called:    3
  3687 ;; This function calls:
  3688 ;;		Nothing
  3689 ;; This function is called by:
  3690 ;;		_main
  3691 ;;		_sortBattery
  3692 ;; This function uses a non-reentrant model
  3693 ;;
  3694                           
  3695                           	psect	text12
  3696  002236                     __ptext12:
  3697                           	opt stack 0
  3698  002236                     _digitalWrite:
  3699                           	opt stack 26
  3700                           
  3701                           ;iopin.c: 54: int p = 1 << pin[1];
  3702                           
  3703                           ;incstack = 0
  3704  002236  EE20 F002          	lfsr	2,2
  3705  00223A  5024               	movf	digitalWrite@pin,w,c
  3706  00223C  26D9               	addwf	fsr2l,f,c
  3707  00223E  5025               	movf	digitalWrite@pin+1,w,c
  3708  002240  22DA               	addwfc	fsr2h,f,c
  3709  002242  50DF               	movf	indf2,w,c
  3710  002244  6E28               	movwf	??_digitalWrite& (0+255),c
  3711  002246  0E01               	movlw	1
  3712  002248  6E29               	movwf	(??_digitalWrite+1)& (0+255),c
  3713  00224A  0E00               	movlw	0
  3714  00224C  6E2A               	movwf	(??_digitalWrite+2)& (0+255),c
  3715  00224E  2A28               	incf	??_digitalWrite,f,c
  3716  002250  D003               	goto	u5584
  3717  002252                     u5585:
  3718  002252  90D8               	bcf	status,0,c
  3719  002254  3629               	rlcf	??_digitalWrite+1,f,c
  3720  002256  362A               	rlcf	??_digitalWrite+2,f,c
  3721  002258                     u5584:
  3722  002258  2E28               	decfsz	??_digitalWrite,f,c
  3723  00225A  D7FB               	goto	u5585
  3724  00225C  C029  F02B         	movff	??_digitalWrite+1,digitalWrite@p
  3725  002260  C02A  F02C         	movff	??_digitalWrite+2,digitalWrite@p+1
  3726                           
  3727                           ;iopin.c: 55: if(val == 0){
  3728  002264  5026               	movf	digitalWrite@val,w,c
  3729  002266  1027               	iorwf	digitalWrite@val+1,w,c
  3730  002268  A4D8               	btfss	status,2,c
  3731  00226A  D02B               	goto	l5859
  3732                           
  3733                           ;iopin.c: 56: p ^= 0xff;
  3734  00226C  0EFF               	movlw	255
  3735  00226E  1A2B               	xorwf	digitalWrite@p,f,c
  3736                           
  3737                           ;iopin.c: 57: }
  3738                           ;iopin.c: 59: switch(pin[0]){
  3739  002270  D028               	goto	l5859
  3740  002272                     l5835:
  3741  002272  0426               	decf	digitalWrite@val,w,c
  3742  002274  1027               	iorwf	digitalWrite@val+1,w,c
  3743  002276  A4D8               	btfss	status,2,c
  3744  002278  D003               	goto	l5839
  3745  00227A  502B               	movf	digitalWrite@p,w,c
  3746  00227C  1289               	iorwf	3977,f,c	;volatile
  3747  00227E  0012               	return	
  3748  002280                     l5839:
  3749                           
  3750                           ;iopin.c: 61: else LATA &= p;
  3751  002280  502B               	movf	digitalWrite@p,w,c
  3752  002282  1689               	andwf	3977,f,c	;volatile
  3753                           
  3754                           ;iopin.c: 62: break;
  3755  002284  0012               	return	
  3756  002286                     l5841:
  3757  002286  0426               	decf	digitalWrite@val,w,c
  3758  002288  1027               	iorwf	digitalWrite@val+1,w,c
  3759  00228A  A4D8               	btfss	status,2,c
  3760  00228C  D003               	goto	l5845
  3761  00228E  502B               	movf	digitalWrite@p,w,c
  3762  002290  128A               	iorwf	3978,f,c	;volatile
  3763  002292  0012               	return	
  3764  002294                     l5845:
  3765                           
  3766                           ;iopin.c: 64: else LATB &= p;
  3767  002294  502B               	movf	digitalWrite@p,w,c
  3768  002296  168A               	andwf	3978,f,c	;volatile
  3769                           
  3770                           ;iopin.c: 65: break;
  3771  002298  0012               	return	
  3772  00229A                     l5847:
  3773  00229A  0426               	decf	digitalWrite@val,w,c
  3774  00229C  1027               	iorwf	digitalWrite@val+1,w,c
  3775  00229E  A4D8               	btfss	status,2,c
  3776  0022A0  D003               	goto	l5851
  3777  0022A2  502B               	movf	digitalWrite@p,w,c
  3778  0022A4  128B               	iorwf	3979,f,c	;volatile
  3779  0022A6  0012               	return	
  3780  0022A8                     l5851:
  3781                           
  3782                           ;iopin.c: 67: else LATC &= p;
  3783  0022A8  502B               	movf	digitalWrite@p,w,c
  3784  0022AA  168B               	andwf	3979,f,c	;volatile
  3785                           
  3786                           ;iopin.c: 68: break;
  3787  0022AC  0012               	return	
  3788  0022AE                     l5853:
  3789  0022AE  0426               	decf	digitalWrite@val,w,c
  3790  0022B0  1027               	iorwf	digitalWrite@val+1,w,c
  3791  0022B2  A4D8               	btfss	status,2,c
  3792  0022B4  D003               	goto	l5857
  3793  0022B6  502B               	movf	digitalWrite@p,w,c
  3794  0022B8  128C               	iorwf	3980,f,c	;volatile
  3795  0022BA  0012               	return	
  3796  0022BC                     l5857:
  3797                           
  3798                           ;iopin.c: 70: else LATD &= p;
  3799  0022BC  502B               	movf	digitalWrite@p,w,c
  3800  0022BE  168C               	andwf	3980,f,c	;volatile
  3801                           
  3802                           ;iopin.c: 71: }
  3803  0022C0  0012               	return	
  3804  0022C2                     l5859:
  3805  0022C2  C024  FFD9         	movff	digitalWrite@pin,fsr2l
  3806  0022C6  C025  FFDA         	movff	digitalWrite@pin+1,fsr2h
  3807  0022CA  CFDE F028          	movff	postinc2,??_digitalWrite
  3808  0022CE  CFDD F029          	movff	postdec2,??_digitalWrite+1
  3809                           
  3810                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3811                           ; Switch size 1, requested type "space"
  3812                           ; Number of cases is 1, Range of values is 0 to 0
  3813                           ; switch strategies available:
  3814                           ; Name         Instructions Cycles
  3815                           ; simple_byte            4     3 (average)
  3816                           ;	Chosen strategy is simple_byte
  3817  0022D2  5029               	movf	??_digitalWrite+1,w,c
  3818  0022D4  0A00               	xorlw	0	; case 0
  3819  0022D6  A4D8               	btfss	status,2,c
  3820  0022D8  0012               	return	
  3821                           
  3822                           ; Switch size 1, requested type "space"
  3823                           ; Number of cases is 4, Range of values is 0 to 3
  3824                           ; switch strategies available:
  3825                           ; Name         Instructions Cycles
  3826                           ; simple_byte           13     7 (average)
  3827                           ;	Chosen strategy is simple_byte
  3828  0022DA  5028               	movf	??_digitalWrite,w,c
  3829  0022DC  0A00               	xorlw	0	; case 0
  3830  0022DE  B4D8               	btfsc	status,2,c
  3831  0022E0  D7C8               	goto	l5835
  3832  0022E2  0A01               	xorlw	1	; case 1
  3833  0022E4  B4D8               	btfsc	status,2,c
  3834  0022E6  D7CF               	goto	l5841
  3835  0022E8  0A03               	xorlw	3	; case 2
  3836  0022EA  B4D8               	btfsc	status,2,c
  3837  0022EC  D7D6               	goto	l5847
  3838  0022EE  0A01               	xorlw	1	; case 3
  3839  0022F0  A4D8               	btfss	status,2,c
  3840  0022F2  0012               	return	
  3841  0022F4  D7DC               	goto	l5853
  3842  0022F6                     __end_of_digitalWrite:
  3843                           	opt stack 0
  3844                           tblptru	equ	0xFF8
  3845                           tblptrh	equ	0xFF7
  3846                           tblptrl	equ	0xFF6
  3847                           tablat	equ	0xFF5
  3848                           intcon	equ	0xFF2
  3849                           postinc0	equ	0xFEE
  3850                           wreg	equ	0xFE8
  3851                           postdec1	equ	0xFE5
  3852                           fsr1l	equ	0xFE1
  3853                           indf2	equ	0xFDF
  3854                           postinc2	equ	0xFDE
  3855                           postdec2	equ	0xFDD
  3856                           fsr2h	equ	0xFDA
  3857                           fsr2l	equ	0xFD9
  3858                           status	equ	0xFD8
  3859                           
  3860 ;; *************** function _digitalRead *****************
  3861 ;; Defined at:
  3862 ;;		line 43 in file "iopin.c"
  3863 ;; Parameters:    Size  Location     Type
  3864 ;;  pin             2   35[COMRAM] PTR int 
  3865 ;;		 -> servo(16), padPin2(4), padPin1(4), 
  3866 ;; Auto vars:     Size  Location     Type
  3867 ;;		None
  3868 ;; Return value:  Size  Location     Type
  3869 ;;                  2   35[COMRAM] int 
  3870 ;; Registers used:
  3871 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3872 ;; Tracked objects:
  3873 ;;		On entry : 0/0
  3874 ;;		On exit  : 0/0
  3875 ;;		Unchanged: 0/0
  3876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3877 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3879 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3880 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3881 ;;Total ram usage:        4 bytes
  3882 ;; Hardware stack levels used:    1
  3883 ;; Hardware stack levels required when called:    3
  3884 ;; This function calls:
  3885 ;;		Nothing
  3886 ;; This function is called by:
  3887 ;;		_sortBattery
  3888 ;; This function uses a non-reentrant model
  3889 ;;
  3890                           
  3891                           	psect	text13
  3892  002062                     __ptext13:
  3893                           	opt stack 0
  3894  002062                     _digitalRead:
  3895                           	opt stack 26
  3896                           
  3897                           ;iopin.c: 44: switch(pin[0]){
  3898                           
  3899                           ;incstack = 0
  3900  002062  D058               	goto	l5921
  3901  002064                     l5903:
  3902  002064  EE20 F002          	lfsr	2,2
  3903  002068  5024               	movf	digitalRead@pin,w,c
  3904  00206A  26D9               	addwf	fsr2l,f,c
  3905  00206C  5025               	movf	digitalRead@pin+1,w,c
  3906  00206E  22DA               	addwfc	fsr2h,f,c
  3907  002070  50DF               	movf	indf2,w,c
  3908  002072  6E26               	movwf	??_digitalRead& (0+255),c
  3909  002074  CF80 F027          	movff	3968,??_digitalRead+1	;volatile
  3910  002078  2A26               	incf	??_digitalRead,f,c
  3911  00207A  D002               	goto	u5644
  3912  00207C                     u5645:
  3913  00207C  90D8               	bcf	status,0,c
  3914  00207E  3227               	rrcf	??_digitalRead+1,f,c
  3915  002080                     u5644:
  3916  002080  2E26               	decfsz	??_digitalRead,f,c
  3917  002082  D7FC               	goto	u5645
  3918  002084  0E01               	movlw	1
  3919  002086  1627               	andwf	??_digitalRead+1,f,c
  3920  002088  5027               	movf	??_digitalRead+1,w,c
  3921  00208A  6E24               	movwf	?_digitalRead,c
  3922  00208C  6A25               	clrf	?_digitalRead+1,c
  3923  00208E  0012               	return	
  3924  002090                     l5907:
  3925  002090  EE20 F002          	lfsr	2,2
  3926  002094  5024               	movf	digitalRead@pin,w,c
  3927  002096  26D9               	addwf	fsr2l,f,c
  3928  002098  5025               	movf	digitalRead@pin+1,w,c
  3929  00209A  22DA               	addwfc	fsr2h,f,c
  3930  00209C  50DF               	movf	indf2,w,c
  3931  00209E  6E26               	movwf	??_digitalRead& (0+255),c
  3932  0020A0  CF81 F027          	movff	3969,??_digitalRead+1	;volatile
  3933  0020A4  2A26               	incf	??_digitalRead,f,c
  3934  0020A6  D002               	goto	u5654
  3935  0020A8                     u5655:
  3936  0020A8  90D8               	bcf	status,0,c
  3937  0020AA  3227               	rrcf	??_digitalRead+1,f,c
  3938  0020AC                     u5654:
  3939  0020AC  2E26               	decfsz	??_digitalRead,f,c
  3940  0020AE  D7FC               	goto	u5655
  3941  0020B0  0E01               	movlw	1
  3942  0020B2  1627               	andwf	??_digitalRead+1,f,c
  3943  0020B4  5027               	movf	??_digitalRead+1,w,c
  3944  0020B6  6E24               	movwf	?_digitalRead,c
  3945  0020B8  6A25               	clrf	?_digitalRead+1,c
  3946  0020BA  0012               	return	
  3947  0020BC                     l5911:
  3948  0020BC  EE20 F002          	lfsr	2,2
  3949  0020C0  5024               	movf	digitalRead@pin,w,c
  3950  0020C2  26D9               	addwf	fsr2l,f,c
  3951  0020C4  5025               	movf	digitalRead@pin+1,w,c
  3952  0020C6  22DA               	addwfc	fsr2h,f,c
  3953  0020C8  50DF               	movf	indf2,w,c
  3954  0020CA  6E26               	movwf	??_digitalRead& (0+255),c
  3955  0020CC  CF82 F027          	movff	3970,??_digitalRead+1	;volatile
  3956  0020D0  2A26               	incf	??_digitalRead,f,c
  3957  0020D2  D002               	goto	u5664
  3958  0020D4                     u5665:
  3959  0020D4  90D8               	bcf	status,0,c
  3960  0020D6  3227               	rrcf	??_digitalRead+1,f,c
  3961  0020D8                     u5664:
  3962  0020D8  2E26               	decfsz	??_digitalRead,f,c
  3963  0020DA  D7FC               	goto	u5665
  3964  0020DC  0E01               	movlw	1
  3965  0020DE  1627               	andwf	??_digitalRead+1,f,c
  3966  0020E0  5027               	movf	??_digitalRead+1,w,c
  3967  0020E2  6E24               	movwf	?_digitalRead,c
  3968  0020E4  6A25               	clrf	?_digitalRead+1,c
  3969  0020E6  0012               	return	
  3970  0020E8                     l5915:
  3971  0020E8  EE20 F002          	lfsr	2,2
  3972  0020EC  5024               	movf	digitalRead@pin,w,c
  3973  0020EE  26D9               	addwf	fsr2l,f,c
  3974  0020F0  5025               	movf	digitalRead@pin+1,w,c
  3975  0020F2  22DA               	addwfc	fsr2h,f,c
  3976  0020F4  50DF               	movf	indf2,w,c
  3977  0020F6  6E26               	movwf	??_digitalRead& (0+255),c
  3978  0020F8  CF83 F027          	movff	3971,??_digitalRead+1	;volatile
  3979  0020FC  2A26               	incf	??_digitalRead,f,c
  3980  0020FE  D002               	goto	u5674
  3981  002100                     u5675:
  3982  002100  90D8               	bcf	status,0,c
  3983  002102  3227               	rrcf	??_digitalRead+1,f,c
  3984  002104                     u5674:
  3985  002104  2E26               	decfsz	??_digitalRead,f,c
  3986  002106  D7FC               	goto	u5675
  3987  002108  0E01               	movlw	1
  3988  00210A  1627               	andwf	??_digitalRead+1,f,c
  3989  00210C  5027               	movf	??_digitalRead+1,w,c
  3990  00210E  6E24               	movwf	?_digitalRead,c
  3991  002110  6A25               	clrf	?_digitalRead+1,c
  3992  002112  0012               	return	
  3993  002114                     l5921:
  3994  002114  C024  FFD9         	movff	digitalRead@pin,fsr2l
  3995  002118  C025  FFDA         	movff	digitalRead@pin+1,fsr2h
  3996  00211C  CFDE F026          	movff	postinc2,??_digitalRead
  3997  002120  CFDD F027          	movff	postdec2,??_digitalRead+1
  3998                           
  3999                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4000                           ; Switch size 1, requested type "space"
  4001                           ; Number of cases is 1, Range of values is 0 to 0
  4002                           ; switch strategies available:
  4003                           ; Name         Instructions Cycles
  4004                           ; simple_byte            4     3 (average)
  4005                           ;	Chosen strategy is simple_byte
  4006  002124  5027               	movf	??_digitalRead+1,w,c
  4007  002126  0A00               	xorlw	0	; case 0
  4008  002128  A4D8               	btfss	status,2,c
  4009  00212A  D00D               	goto	l276
  4010                           
  4011                           ; Switch size 1, requested type "space"
  4012                           ; Number of cases is 4, Range of values is 0 to 3
  4013                           ; switch strategies available:
  4014                           ; Name         Instructions Cycles
  4015                           ; simple_byte           13     7 (average)
  4016                           ;	Chosen strategy is simple_byte
  4017  00212C  5026               	movf	??_digitalRead,w,c
  4018  00212E  0A00               	xorlw	0	; case 0
  4019  002130  B4D8               	btfsc	status,2,c
  4020  002132  D798               	goto	l5903
  4021  002134  0A01               	xorlw	1	; case 1
  4022  002136  B4D8               	btfsc	status,2,c
  4023  002138  D7AB               	goto	l5907
  4024  00213A  0A03               	xorlw	3	; case 2
  4025  00213C  B4D8               	btfsc	status,2,c
  4026  00213E  D7BE               	goto	l5911
  4027  002140  0A01               	xorlw	1	; case 3
  4028  002142  B4D8               	btfsc	status,2,c
  4029  002144  D7D1               	goto	l5915
  4030  002146                     l276:
  4031                           
  4032                           ;iopin.c: 50: return -1;
  4033  002146  6824               	setf	?_digitalRead,c
  4034  002148  6825               	setf	?_digitalRead+1,c
  4035  00214A  0012               	return		;funcret
  4036  00214C                     __end_of_digitalRead:
  4037                           	opt stack 0
  4038                           tblptru	equ	0xFF8
  4039                           tblptrh	equ	0xFF7
  4040                           tblptrl	equ	0xFF6
  4041                           tablat	equ	0xFF5
  4042                           intcon	equ	0xFF2
  4043                           postinc0	equ	0xFEE
  4044                           wreg	equ	0xFE8
  4045                           postdec1	equ	0xFE5
  4046                           fsr1l	equ	0xFE1
  4047                           indf2	equ	0xFDF
  4048                           postinc2	equ	0xFDE
  4049                           postdec2	equ	0xFDD
  4050                           fsr2h	equ	0xFDA
  4051                           fsr2l	equ	0xFD9
  4052                           status	equ	0xFD8
  4053                           
  4054 ;; *************** function _analogRead *****************
  4055 ;; Defined at:
  4056 ;;		line 88 in file "iopin.c"
  4057 ;; Parameters:    Size  Location     Type
  4058 ;;  channel         2   35[COMRAM] int 
  4059 ;; Auto vars:     Size  Location     Type
  4060 ;;		None
  4061 ;; Return value:  Size  Location     Type
  4062 ;;                  4   35[COMRAM] long 
  4063 ;; Registers used:
  4064 ;;		wreg, status,2, status,0
  4065 ;; Tracked objects:
  4066 ;;		On entry : 0/0
  4067 ;;		On exit  : 0/0
  4068 ;;		Unchanged: 0/0
  4069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4070 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4072 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4073 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4074 ;;Total ram usage:        6 bytes
  4075 ;; Hardware stack levels used:    1
  4076 ;; Hardware stack levels required when called:    3
  4077 ;; This function calls:
  4078 ;;		Nothing
  4079 ;; This function is called by:
  4080 ;;		_sortBattery
  4081 ;; This function uses a non-reentrant model
  4082 ;;
  4083                           
  4084                           	psect	text14
  4085  002C94                     __ptext14:
  4086                           	opt stack 0
  4087  002C94                     _analogRead:
  4088                           	opt stack 26
  4089                           
  4090                           ;iopin.c: 89: ADCON0 = channel<<2;
  4091                           
  4092                           ;incstack = 0
  4093  002C94  4424               	rlncf	analogRead@channel,w,c
  4094  002C96  46E8               	rlncf	wreg,f,c
  4095  002C98  0BFC               	andlw	252
  4096  002C9A  6EC2               	movwf	4034,c	;volatile
  4097                           
  4098                           ;iopin.c: 90: ADCON0 |= 1<<0;
  4099  002C9C  80C2               	bsf	4034,0,c	;volatile
  4100                           
  4101                           ;iopin.c: 91: ADCON0 |= 1<<1;
  4102  002C9E  82C2               	bsf	4034,1,c	;volatile
  4103  002CA0                     l300:
  4104  002CA0  B2C2               	btfsc	4034,1,c	;volatile
  4105  002CA2  D7FE               	goto	l300
  4106                           
  4107                           ;iopin.c: 95: return (ADRESH<<8) + ADRESL;
  4108  002CA4  50C3               	movf	4035,w,c	;volatile
  4109  002CA6  CFC4 F028          	movff	4036,??_analogRead	;volatile
  4110  002CAA  6A29               	clrf	(??_analogRead+1)& (0+255),c
  4111  002CAC  C028  F029         	movff	??_analogRead,??_analogRead+1
  4112  002CB0  6A28               	clrf	??_analogRead,c
  4113  002CB2  2628               	addwf	??_analogRead,f,c
  4114  002CB4  0E00               	movlw	0
  4115  002CB6  2229               	addwfc	??_analogRead+1,f,c
  4116  002CB8  C028  F024         	movff	??_analogRead,?_analogRead
  4117  002CBC  C029  F025         	movff	??_analogRead+1,?_analogRead+1
  4118  002CC0  0E00               	movlw	0
  4119  002CC2  BE25               	btfsc	?_analogRead+1,7,c
  4120  002CC4  0EFF               	movlw	-1
  4121  002CC6  6E26               	movwf	?_analogRead+2,c
  4122  002CC8  6E27               	movwf	?_analogRead+3,c
  4123  002CCA  0012               	return	
  4124  002CCC                     __end_of_analogRead:
  4125                           	opt stack 0
  4126                           tblptru	equ	0xFF8
  4127                           tblptrh	equ	0xFF7
  4128                           tblptrl	equ	0xFF6
  4129                           tablat	equ	0xFF5
  4130                           intcon	equ	0xFF2
  4131                           postinc0	equ	0xFEE
  4132                           wreg	equ	0xFE8
  4133                           postdec1	equ	0xFE5
  4134                           fsr1l	equ	0xFE1
  4135                           indf2	equ	0xFDF
  4136                           postinc2	equ	0xFDE
  4137                           postdec2	equ	0xFDD
  4138                           fsr2h	equ	0xFDA
  4139                           fsr2l	equ	0xFD9
  4140                           status	equ	0xFD8
  4141                           
  4142 ;; *************** function _showInterface *****************
  4143 ;; Defined at:
  4144 ;;		line 16 in file "interface.c"
  4145 ;; Parameters:    Size  Location     Type
  4146 ;;		None
  4147 ;; Auto vars:     Size  Location     Type
  4148 ;;  key             1   74[BANK0 ] unsigned char 
  4149 ;; Return value:  Size  Location     Type
  4150 ;;                  1    wreg      void 
  4151 ;; Registers used:
  4152 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4153 ;; Tracked objects:
  4154 ;;		On entry : 0/0
  4155 ;;		On exit  : 0/0
  4156 ;;		Unchanged: 0/0
  4157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4159 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4161 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4162 ;;Total ram usage:        1 bytes
  4163 ;; Hardware stack levels used:    1
  4164 ;; Hardware stack levels required when called:    9
  4165 ;; This function calls:
  4166 ;;		_dateTime
  4167 ;;		_mainMenu
  4168 ;;		_readKeypad
  4169 ;;		_runMenu
  4170 ;;		_runSelect
  4171 ;;		_runStats
  4172 ;;		_runTime
  4173 ;; This function is called by:
  4174 ;;		_main
  4175 ;; This function uses a non-reentrant model
  4176 ;;
  4177                           
  4178                           	psect	text15
  4179  001E72                     __ptext15:
  4180                           	opt stack 0
  4181  001E72                     _showInterface:
  4182                           	opt stack 21
  4183  001E72                     
  4184                           ;interface.c: 23: dateTime();
  4185  001E72  ECDD  F016         	call	_dateTime	;wreg free
  4186  001E76                     l5989:
  4187  001E76  ECB7  F016         	call	_readKeypad	;wreg free
  4188  001E7A  0A41               	xorlw	65
  4189  001E7C  A4D8               	btfss	status,2,c
  4190  001E7E  D7FB               	goto	l5989
  4191  001E80                     l5991:
  4192                           
  4193                           ;interface.c: 28: mainMenu();
  4194  001E80  ECCA  F016         	call	_mainMenu	;wreg free
  4195  001E84                     l5993:
  4196  001E84  ECB7  F016         	call	_readKeypad	;wreg free
  4197  001E88  0100               	movlb	0	; () banked
  4198  001E8A  6FCA               	movwf	showInterface@key& (0+255),b
  4199                           
  4200                           ; BSR set to: 0
  4201                           ;interface.c: 32: while(key != 'B' && key != 'C' && key != '*');
  4202  001E8C  0E42               	movlw	66
  4203  001E8E  0100               	movlb	0	; () banked
  4204  001E90  19CA               	xorwf	showInterface@key& (0+255),w,b
  4205  001E92  B4D8               	btfsc	status,2,c
  4206  001E94  D00A               	goto	l6001
  4207                           
  4208                           ; BSR set to: 0
  4209  001E96  0E43               	movlw	67
  4210  001E98  0100               	movlb	0	; () banked
  4211  001E9A  19CA               	xorwf	showInterface@key& (0+255),w,b
  4212  001E9C  B4D8               	btfsc	status,2,c
  4213  001E9E  D005               	goto	l6001
  4214                           
  4215                           ; BSR set to: 0
  4216  001EA0  0E2A               	movlw	42
  4217  001EA2  0100               	movlb	0	; () banked
  4218  001EA4  19CA               	xorwf	showInterface@key& (0+255),w,b
  4219  001EA6  A4D8               	btfss	status,2,c
  4220  001EA8  D7ED               	goto	l5993
  4221  001EAA                     l6001:
  4222                           
  4223                           ; BSR set to: 0
  4224                           ;interface.c: 34: if(key == 'C'){
  4225  001EAA  0E43               	movlw	67
  4226  001EAC  0100               	movlb	0	; () banked
  4227  001EAE  19CA               	xorwf	showInterface@key& (0+255),w,b
  4228  001EB0  A4D8               	btfss	status,2,c
  4229  001EB2  D056               	goto	l6045
  4230                           
  4231                           ; BSR set to: 0
  4232                           ;interface.c: 36: runSelect();
  4233  001EB4  ECA4  F016         	call	_runSelect	;wreg free
  4234  001EB8                     l6005:
  4235  001EB8  ECB7  F016         	call	_readKeypad	;wreg free
  4236  001EBC  0100               	movlb	0	; () banked
  4237  001EBE  6FCA               	movwf	showInterface@key& (0+255),b
  4238                           
  4239                           ; BSR set to: 0
  4240                           ;interface.c: 42: while(key != '1' && key != '2' && key != '3' && key != '4' && key != '
      +                          *');
  4241  001EC0  0E31               	movlw	49
  4242  001EC2  0100               	movlb	0	; () banked
  4243  001EC4  19CA               	xorwf	showInterface@key& (0+255),w,b
  4244  001EC6  B4D8               	btfsc	status,2,c
  4245  001EC8  D014               	goto	l6017
  4246                           
  4247                           ; BSR set to: 0
  4248  001ECA  0E32               	movlw	50
  4249  001ECC  0100               	movlb	0	; () banked
  4250  001ECE  19CA               	xorwf	showInterface@key& (0+255),w,b
  4251  001ED0  B4D8               	btfsc	status,2,c
  4252  001ED2  D00F               	goto	l6017
  4253                           
  4254                           ; BSR set to: 0
  4255  001ED4  0E33               	movlw	51
  4256  001ED6  0100               	movlb	0	; () banked
  4257  001ED8  19CA               	xorwf	showInterface@key& (0+255),w,b
  4258  001EDA  B4D8               	btfsc	status,2,c
  4259  001EDC  D00A               	goto	l6017
  4260                           
  4261                           ; BSR set to: 0
  4262  001EDE  0E34               	movlw	52
  4263  001EE0  0100               	movlb	0	; () banked
  4264  001EE2  19CA               	xorwf	showInterface@key& (0+255),w,b
  4265  001EE4  B4D8               	btfsc	status,2,c
  4266  001EE6  D005               	goto	l6017
  4267                           
  4268                           ; BSR set to: 0
  4269  001EE8  0E2A               	movlw	42
  4270  001EEA  0100               	movlb	0	; () banked
  4271  001EEC  19CA               	xorwf	showInterface@key& (0+255),w,b
  4272  001EEE  A4D8               	btfss	status,2,c
  4273  001EF0  D7E3               	goto	l6005
  4274  001EF2                     l6017:
  4275                           
  4276                           ; BSR set to: 0
  4277                           ;interface.c: 44: if(key == '*')continue;
  4278  001EF2  0E2A               	movlw	42
  4279  001EF4  0100               	movlb	0	; () banked
  4280  001EF6  19CA               	xorwf	showInterface@key& (0+255),w,b
  4281  001EF8  B4D8               	btfsc	status,2,c
  4282  001EFA  D7C2               	goto	l5991
  4283  001EFC                     l6021:
  4284                           
  4285                           ;interface.c: 50: runMenu(key);
  4286  001EFC  0100               	movlb	0	; () banked
  4287  001EFE  51CA               	movf	showInterface@key& (0+255),w,b
  4288  001F00  EC66  F016         	call	_runMenu
  4289  001F04                     l6023:
  4290  001F04  ECB7  F016         	call	_readKeypad	;wreg free
  4291  001F08  0100               	movlb	0	; () banked
  4292  001F0A  6FCA               	movwf	showInterface@key& (0+255),b
  4293                           
  4294                           ; BSR set to: 0
  4295                           ;interface.c: 54: while(key != 'A' && key != 'B' && key != '*');
  4296  001F0C  0E41               	movlw	65
  4297  001F0E  0100               	movlb	0	; () banked
  4298  001F10  19CA               	xorwf	showInterface@key& (0+255),w,b
  4299  001F12  B4D8               	btfsc	status,2,c
  4300  001F14  D00A               	goto	l6031
  4301                           
  4302                           ; BSR set to: 0
  4303  001F16  0E42               	movlw	66
  4304  001F18  0100               	movlb	0	; () banked
  4305  001F1A  19CA               	xorwf	showInterface@key& (0+255),w,b
  4306  001F1C  B4D8               	btfsc	status,2,c
  4307  001F1E  D005               	goto	l6031
  4308                           
  4309                           ; BSR set to: 0
  4310  001F20  0E2A               	movlw	42
  4311  001F22  0100               	movlb	0	; () banked
  4312  001F24  19CA               	xorwf	showInterface@key& (0+255),w,b
  4313  001F26  A4D8               	btfss	status,2,c
  4314  001F28  D7ED               	goto	l6023
  4315  001F2A                     l6031:
  4316                           
  4317                           ; BSR set to: 0
  4318                           ;interface.c: 56: if(key == 'A'){
  4319  001F2A  0E41               	movlw	65
  4320  001F2C  0100               	movlb	0	; () banked
  4321  001F2E  19CA               	xorwf	showInterface@key& (0+255),w,b
  4322  001F30  A4D8               	btfss	status,2,c
  4323  001F32  D003               	goto	l6035
  4324                           
  4325                           ; BSR set to: 0
  4326                           ;interface.c: 58: runTime();
  4327  001F34  EC7E  F016         	call	_runTime	;wreg free
  4328                           
  4329                           ;interface.c: 60: }
  4330  001F38  D00D               	goto	l6043
  4331  001F3A                     l6035:
  4332                           
  4333                           ;interface.c: 61: else if(key == 'B'){
  4334  001F3A  0E42               	movlw	66
  4335  001F3C  0100               	movlb	0	; () banked
  4336  001F3E  19CA               	xorwf	showInterface@key& (0+255),w,b
  4337  001F40  A4D8               	btfss	status,2,c
  4338  001F42  D003               	goto	l6039
  4339                           
  4340                           ; BSR set to: 0
  4341                           ;interface.c: 63: runStats();
  4342  001F44  EC91  F016         	call	_runStats	;wreg free
  4343                           
  4344                           ;interface.c: 65: }
  4345  001F48  D005               	goto	l6043
  4346  001F4A                     l6039:
  4347                           
  4348                           ;interface.c: 66: else if(key == '*')break;
  4349  001F4A  0E2A               	movlw	42
  4350  001F4C  0100               	movlb	0	; () banked
  4351  001F4E  19CA               	xorwf	showInterface@key& (0+255),w,b
  4352  001F50  B4D8               	btfsc	status,2,c
  4353  001F52  D796               	goto	l5991
  4354  001F54                     l6043:
  4355  001F54  ECB7  F016         	call	_readKeypad	;wreg free
  4356  001F58  0A2A               	xorlw	42
  4357  001F5A  B4D8               	btfsc	status,2,c
  4358  001F5C  D7CF               	goto	l6021
  4359  001F5E  D7FA               	goto	l6043
  4360  001F60                     l6045:
  4361                           
  4362                           ;interface.c: 72: else if(key == 'B'){
  4363  001F60  0E42               	movlw	66
  4364  001F62  0100               	movlb	0	; () banked
  4365  001F64  19CA               	xorwf	showInterface@key& (0+255),w,b
  4366  001F66  B4D8               	btfsc	status,2,c
  4367  001F68  0012               	return	
  4368                           
  4369                           ; BSR set to: 0
  4370                           ;interface.c: 75: else if(key == '*')
  4371                           
  4372                           ; BSR set to: 0
  4373                           
  4374                           ; BSR set to: 0
  4375                           ;interface.c: 74: }
  4376                           
  4377                           ; BSR set to: 0
  4378                           ;interface.c: 73: return;
  4379  001F6A  0E2A               	movlw	42
  4380  001F6C  0100               	movlb	0	; () banked
  4381  001F6E  19CA               	xorwf	showInterface@key& (0+255),w,b
  4382  001F70  B4D8               	btfsc	status,2,c
  4383  001F72  D77F               	goto	l5987
  4384  001F74  D785               	goto	l5991
  4385  001F76                     __end_of_showInterface:
  4386                           	opt stack 0
  4387                           tblptru	equ	0xFF8
  4388                           tblptrh	equ	0xFF7
  4389                           tblptrl	equ	0xFF6
  4390                           tablat	equ	0xFF5
  4391                           intcon	equ	0xFF2
  4392                           postinc0	equ	0xFEE
  4393                           wreg	equ	0xFE8
  4394                           postdec1	equ	0xFE5
  4395                           fsr1l	equ	0xFE1
  4396                           indf2	equ	0xFDF
  4397                           postinc2	equ	0xFDE
  4398                           postdec2	equ	0xFDD
  4399                           fsr2h	equ	0xFDA
  4400                           fsr2l	equ	0xFD9
  4401                           status	equ	0xFD8
  4402                           
  4403 ;; *************** function _runTime *****************
  4404 ;; Defined at:
  4405 ;;		line 117 in file "interface.c"
  4406 ;; Parameters:    Size  Location     Type
  4407 ;;		None
  4408 ;; Auto vars:     Size  Location     Type
  4409 ;;		None
  4410 ;; Return value:  Size  Location     Type
  4411 ;;                  1    wreg      void 
  4412 ;; Registers used:
  4413 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4414 ;; Tracked objects:
  4415 ;;		On entry : 0/0
  4416 ;;		On exit  : 0/0
  4417 ;;		Unchanged: 0/0
  4418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4422 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4423 ;;Total ram usage:        0 bytes
  4424 ;; Hardware stack levels used:    1
  4425 ;; Hardware stack levels required when called:    8
  4426 ;; This function calls:
  4427 ;;		_lcdClear
  4428 ;;		_printf
  4429 ;; This function is called by:
  4430 ;;		_showInterface
  4431 ;; This function uses a non-reentrant model
  4432 ;;
  4433                           
  4434                           	psect	text16
  4435  002CFC                     __ptext16:
  4436                           	opt stack 0
  4437  002CFC                     _runTime:
  4438                           	opt stack 21
  4439                           
  4440                           ;interface.c: 118: lcdClear();
  4441                           
  4442                           ; BSR set to: 0
  4443                           ;incstack = 0
  4444  002CFC  EC6B  F017         	call	_lcdClear	;wreg free
  4445                           
  4446                           ;interface.c: 119: printf("time: nnn sec   \n");
  4447  002D00  0E1D               	movlw	low STR_19
  4448  002D02  0100               	movlb	0	; () banked
  4449  002D04  6FBD               	movwf	printf@f& (0+255),b
  4450  002D06  0EFF               	movlw	high STR_19
  4451  002D08  0100               	movlb	0	; () banked
  4452  002D0A  6FBE               	movwf	(printf@f+1)& (0+255),b
  4453  002D0C  EC09  F000         	call	_printf	;wreg free
  4454                           
  4455                           ;interface.c: 120: printf("              *>");
  4456  002D10  0E52               	movlw	low STR_20
  4457  002D12  0100               	movlb	0	; () banked
  4458  002D14  6FBD               	movwf	printf@f& (0+255),b
  4459  002D16  0EFF               	movlw	high STR_20
  4460  002D18  0100               	movlb	0	; () banked
  4461  002D1A  6FBE               	movwf	(printf@f+1)& (0+255),b
  4462  002D1C  EC09  F000         	call	_printf	;wreg free
  4463  002D20  0012               	return		;funcret
  4464  002D22                     __end_of_runTime:
  4465                           	opt stack 0
  4466                           tblptru	equ	0xFF8
  4467                           tblptrh	equ	0xFF7
  4468                           tblptrl	equ	0xFF6
  4469                           tablat	equ	0xFF5
  4470                           intcon	equ	0xFF2
  4471                           postinc0	equ	0xFEE
  4472                           wreg	equ	0xFE8
  4473                           postdec1	equ	0xFE5
  4474                           fsr1l	equ	0xFE1
  4475                           indf2	equ	0xFDF
  4476                           postinc2	equ	0xFDE
  4477                           postdec2	equ	0xFDD
  4478                           fsr2h	equ	0xFDA
  4479                           fsr2l	equ	0xFD9
  4480                           status	equ	0xFD8
  4481                           
  4482 ;; *************** function _runStats *****************
  4483 ;; Defined at:
  4484 ;;		line 123 in file "interface.c"
  4485 ;; Parameters:    Size  Location     Type
  4486 ;;		None
  4487 ;; Auto vars:     Size  Location     Type
  4488 ;;		None
  4489 ;; Return value:  Size  Location     Type
  4490 ;;                  1    wreg      void 
  4491 ;; Registers used:
  4492 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4493 ;; Tracked objects:
  4494 ;;		On entry : 0/0
  4495 ;;		On exit  : 0/0
  4496 ;;		Unchanged: 0/0
  4497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4502 ;;Total ram usage:        0 bytes
  4503 ;; Hardware stack levels used:    1
  4504 ;; Hardware stack levels required when called:    8
  4505 ;; This function calls:
  4506 ;;		_lcdClear
  4507 ;;		_printf
  4508 ;; This function is called by:
  4509 ;;		_showInterface
  4510 ;; This function uses a non-reentrant model
  4511 ;;
  4512                           
  4513                           	psect	text17
  4514  002D22                     __ptext17:
  4515                           	opt stack 0
  4516  002D22                     _runStats:
  4517                           	opt stack 21
  4518                           
  4519                           ;interface.c: 124: lcdClear();
  4520                           
  4521                           ;incstack = 0
  4522  002D22  EC6B  F017         	call	_lcdClear	;wreg free
  4523                           
  4524                           ;interface.c: 125: printf("[AA,9V,C,other] \n");
  4525  002D26  0E2F               	movlw	low STR_21
  4526  002D28  0100               	movlb	0	; () banked
  4527  002D2A  6FBD               	movwf	printf@f& (0+255),b
  4528  002D2C  0EFF               	movlw	high STR_21
  4529  002D2E  0100               	movlb	0	; () banked
  4530  002D30  6FBE               	movwf	(printf@f+1)& (0+255),b
  4531  002D32  EC09  F000         	call	_printf	;wreg free
  4532                           
  4533                           ;interface.c: 126: printf("[nn,n,n,nn]   *>");
  4534  002D36  0E96               	movlw	low STR_22
  4535  002D38  0100               	movlb	0	; () banked
  4536  002D3A  6FBD               	movwf	printf@f& (0+255),b
  4537  002D3C  0EFF               	movlw	high STR_22
  4538  002D3E  0100               	movlb	0	; () banked
  4539  002D40  6FBE               	movwf	(printf@f+1)& (0+255),b
  4540  002D42  EC09  F000         	call	_printf	;wreg free
  4541  002D46  0012               	return		;funcret
  4542  002D48                     __end_of_runStats:
  4543                           	opt stack 0
  4544                           tblptru	equ	0xFF8
  4545                           tblptrh	equ	0xFF7
  4546                           tblptrl	equ	0xFF6
  4547                           tablat	equ	0xFF5
  4548                           intcon	equ	0xFF2
  4549                           postinc0	equ	0xFEE
  4550                           wreg	equ	0xFE8
  4551                           postdec1	equ	0xFE5
  4552                           fsr1l	equ	0xFE1
  4553                           indf2	equ	0xFDF
  4554                           postinc2	equ	0xFDE
  4555                           postdec2	equ	0xFDD
  4556                           fsr2h	equ	0xFDA
  4557                           fsr2l	equ	0xFD9
  4558                           status	equ	0xFD8
  4559                           
  4560 ;; *************** function _runSelect *****************
  4561 ;; Defined at:
  4562 ;;		line 105 in file "interface.c"
  4563 ;; Parameters:    Size  Location     Type
  4564 ;;		None
  4565 ;; Auto vars:     Size  Location     Type
  4566 ;;		None
  4567 ;; Return value:  Size  Location     Type
  4568 ;;                  1    wreg      void 
  4569 ;; Registers used:
  4570 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4571 ;; Tracked objects:
  4572 ;;		On entry : 0/0
  4573 ;;		On exit  : 0/0
  4574 ;;		Unchanged: 0/0
  4575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4580 ;;Total ram usage:        0 bytes
  4581 ;; Hardware stack levels used:    1
  4582 ;; Hardware stack levels required when called:    8
  4583 ;; This function calls:
  4584 ;;		_lcdClear
  4585 ;;		_printf
  4586 ;; This function is called by:
  4587 ;;		_showInterface
  4588 ;; This function uses a non-reentrant model
  4589 ;;
  4590                           
  4591                           	psect	text18
  4592  002D48                     __ptext18:
  4593                           	opt stack 0
  4594  002D48                     _runSelect:
  4595                           	opt stack 21
  4596                           
  4597                           ;interface.c: 106: lcdClear();
  4598                           
  4599                           ;incstack = 0
  4600  002D48  EC6B  F017         	call	_lcdClear	;wreg free
  4601                           
  4602                           ;interface.c: 107: printf("select run:     \n");
  4603  002D4C  0E0B               	movlw	low STR_15
  4604  002D4E  0100               	movlb	0	; () banked
  4605  002D50  6FBD               	movwf	printf@f& (0+255),b
  4606  002D52  0EFF               	movlw	high STR_15
  4607  002D54  0100               	movlb	0	; () banked
  4608  002D56  6FBE               	movwf	(printf@f+1)& (0+255),b
  4609  002D58  EC09  F000         	call	_printf	;wreg free
  4610                           
  4611                           ;interface.c: 108: printf("[1,2,3,4]     *>");
  4612  002D5C  0E63               	movlw	low STR_16
  4613  002D5E  0100               	movlb	0	; () banked
  4614  002D60  6FBD               	movwf	printf@f& (0+255),b
  4615  002D62  0EFF               	movlw	high STR_16
  4616  002D64  0100               	movlb	0	; () banked
  4617  002D66  6FBE               	movwf	(printf@f+1)& (0+255),b
  4618  002D68  EC09  F000         	call	_printf	;wreg free
  4619  002D6C  0012               	return		;funcret
  4620  002D6E                     __end_of_runSelect:
  4621                           	opt stack 0
  4622                           tblptru	equ	0xFF8
  4623                           tblptrh	equ	0xFF7
  4624                           tblptrl	equ	0xFF6
  4625                           tablat	equ	0xFF5
  4626                           intcon	equ	0xFF2
  4627                           postinc0	equ	0xFEE
  4628                           wreg	equ	0xFE8
  4629                           postdec1	equ	0xFE5
  4630                           fsr1l	equ	0xFE1
  4631                           indf2	equ	0xFDF
  4632                           postinc2	equ	0xFDE
  4633                           postdec2	equ	0xFDD
  4634                           fsr2h	equ	0xFDA
  4635                           fsr2l	equ	0xFD9
  4636                           status	equ	0xFD8
  4637                           
  4638 ;; *************** function _runMenu *****************
  4639 ;; Defined at:
  4640 ;;		line 111 in file "interface.c"
  4641 ;; Parameters:    Size  Location     Type
  4642 ;;  key             1    wreg     unsigned char 
  4643 ;; Auto vars:     Size  Location     Type
  4644 ;;  key             1   59[COMRAM] unsigned char 
  4645 ;; Return value:  Size  Location     Type
  4646 ;;                  1    wreg      void 
  4647 ;; Registers used:
  4648 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4649 ;; Tracked objects:
  4650 ;;		On entry : 0/0
  4651 ;;		On exit  : 0/0
  4652 ;;		Unchanged: 0/0
  4653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4655 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4657 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4658 ;;Total ram usage:        1 bytes
  4659 ;; Hardware stack levels used:    1
  4660 ;; Hardware stack levels required when called:    8
  4661 ;; This function calls:
  4662 ;;		_lcdClear
  4663 ;;		_printf
  4664 ;; This function is called by:
  4665 ;;		_showInterface
  4666 ;; This function uses a non-reentrant model
  4667 ;;
  4668                           
  4669                           	psect	text19
  4670  002CCC                     __ptext19:
  4671                           	opt stack 0
  4672  002CCC                     _runMenu:
  4673                           	opt stack 21
  4674                           
  4675                           ;incstack = 0
  4676                           ;runMenu@key stored from wreg
  4677  002CCC  6E3C               	movwf	runMenu@key,c
  4678                           
  4679                           ;interface.c: 112: lcdClear();
  4680  002CCE  EC6B  F017         	call	_lcdClear	;wreg free
  4681                           
  4682                           ;interface.c: 113: printf("%c) time  <A     \n",key);
  4683  002CD2  0ED4               	movlw	low STR_17
  4684  002CD4  0100               	movlb	0	; () banked
  4685  002CD6  6FBD               	movwf	printf@f& (0+255),b
  4686  002CD8  0EFE               	movlw	high STR_17
  4687  002CDA  0100               	movlb	0	; () banked
  4688  002CDC  6FBE               	movwf	(printf@f+1)& (0+255),b
  4689  002CDE  C03C  F0BF         	movff	runMenu@key,?_printf+2
  4690  002CE2  0100               	movlb	0	; () banked
  4691  002CE4  6BC0               	clrf	(?_printf+3)& (0+255),b
  4692  002CE6  EC09  F000         	call	_printf	;wreg free
  4693                           
  4694                           ;interface.c: 114: printf( "   stats <B   *>");
  4695  002CEA  0E85               	movlw	low STR_18
  4696  002CEC  0100               	movlb	0	; () banked
  4697  002CEE  6FBD               	movwf	printf@f& (0+255),b
  4698  002CF0  0EFF               	movlw	high STR_18
  4699  002CF2  0100               	movlb	0	; () banked
  4700  002CF4  6FBE               	movwf	(printf@f+1)& (0+255),b
  4701  002CF6  EC09  F000         	call	_printf	;wreg free
  4702  002CFA  0012               	return		;funcret
  4703  002CFC                     __end_of_runMenu:
  4704                           	opt stack 0
  4705                           tblptru	equ	0xFF8
  4706                           tblptrh	equ	0xFF7
  4707                           tblptrl	equ	0xFF6
  4708                           tablat	equ	0xFF5
  4709                           intcon	equ	0xFF2
  4710                           postinc0	equ	0xFEE
  4711                           wreg	equ	0xFE8
  4712                           postdec1	equ	0xFE5
  4713                           fsr1l	equ	0xFE1
  4714                           indf2	equ	0xFDF
  4715                           postinc2	equ	0xFDE
  4716                           postdec2	equ	0xFDD
  4717                           fsr2h	equ	0xFDA
  4718                           fsr2l	equ	0xFD9
  4719                           status	equ	0xFD8
  4720                           
  4721 ;; *************** function _readKeypad *****************
  4722 ;; Defined at:
  4723 ;;		line 36 in file "keypad.c"
  4724 ;; Parameters:    Size  Location     Type
  4725 ;;		None
  4726 ;; Auto vars:     Size  Location     Type
  4727 ;;  key             1   35[COMRAM] unsigned char 
  4728 ;; Return value:  Size  Location     Type
  4729 ;;                  1    wreg      unsigned char 
  4730 ;; Registers used:
  4731 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4732 ;; Tracked objects:
  4733 ;;		On entry : 0/0
  4734 ;;		On exit  : 0/0
  4735 ;;		Unchanged: 0/0
  4736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4738 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4740 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4741 ;;Total ram usage:        1 bytes
  4742 ;; Hardware stack levels used:    1
  4743 ;; Hardware stack levels required when called:    3
  4744 ;; This function calls:
  4745 ;;		Nothing
  4746 ;; This function is called by:
  4747 ;;		_sortBattery
  4748 ;;		_pause
  4749 ;;		_showInterface
  4750 ;; This function uses a non-reentrant model
  4751 ;;
  4752                           
  4753                           	psect	text20
  4754  002D6E                     __ptext20:
  4755                           	opt stack 0
  4756  002D6E                     _readKeypad:
  4757                           	opt stack 26
  4758  002D6E                     l203:
  4759  002D6E  A281               	btfss	3969,1,c	;volatile
  4760  002D70  D7FE               	goto	l203
  4761                           
  4762                           ;keypad.c: 38: char key = (PORTB & 0xF0) >> 4;
  4763  002D72  3881               	swapf	3969,w,c	;volatile
  4764  002D74  0B0F               	andlw	15
  4765  002D76  0B0F               	andlw	15
  4766  002D78  6E24               	movwf	readKeypad@key,c
  4767  002D7A                     l206:
  4768  002D7A  B281               	btfsc	3969,1,c	;volatile
  4769  002D7C  D7FE               	goto	l206
  4770                           
  4771                           ;keypad.c: 40: return keys[key];
  4772  002D7E  5024               	movf	readKeypad@key,w,c
  4773  002D80  0D01               	mullw	1
  4774  002D82  0E63               	movlw	low _keys
  4775  002D84  24F3               	addwf	prodl,w,c
  4776  002D86  6EF6               	movwf	tblptrl,c
  4777  002D88  0EFE               	movlw	high _keys
  4778  002D8A  20F4               	addwfc	prodh,w,c
  4779  002D8C  6EF7               	movwf	tblptrh,c
  4780  002D8E                     	if	0	;There are less than 3 active tblptr bytes
  4781  002D8E                     	endif
  4782  002D8E  0008               	tblrd		*
  4783  002D90  50F5               	movf	tablat,w,c
  4784  002D92  0012               	return	
  4785  002D94                     __end_of_readKeypad:
  4786                           	opt stack 0
  4787                           tblptru	equ	0xFF8
  4788                           tblptrh	equ	0xFF7
  4789                           tblptrl	equ	0xFF6
  4790                           tablat	equ	0xFF5
  4791                           prodh	equ	0xFF4
  4792                           prodl	equ	0xFF3
  4793                           intcon	equ	0xFF2
  4794                           postinc0	equ	0xFEE
  4795                           wreg	equ	0xFE8
  4796                           postdec1	equ	0xFE5
  4797                           fsr1l	equ	0xFE1
  4798                           indf2	equ	0xFDF
  4799                           postinc2	equ	0xFDE
  4800                           postdec2	equ	0xFDD
  4801                           fsr2h	equ	0xFDA
  4802                           fsr2l	equ	0xFD9
  4803                           status	equ	0xFD8
  4804                           
  4805 ;; *************** function _mainMenu *****************
  4806 ;; Defined at:
  4807 ;;		line 99 in file "interface.c"
  4808 ;; Parameters:    Size  Location     Type
  4809 ;;		None
  4810 ;; Auto vars:     Size  Location     Type
  4811 ;;		None
  4812 ;; Return value:  Size  Location     Type
  4813 ;;                  1    wreg      void 
  4814 ;; Registers used:
  4815 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4816 ;; Tracked objects:
  4817 ;;		On entry : 0/0
  4818 ;;		On exit  : 0/0
  4819 ;;		Unchanged: 0/0
  4820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4824 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4825 ;;Total ram usage:        0 bytes
  4826 ;; Hardware stack levels used:    1
  4827 ;; Hardware stack levels required when called:    8
  4828 ;; This function calls:
  4829 ;;		_lcdClear
  4830 ;;		_printf
  4831 ;; This function is called by:
  4832 ;;		_showInterface
  4833 ;; This function uses a non-reentrant model
  4834 ;;
  4835                           
  4836                           	psect	text21
  4837  002D94                     __ptext21:
  4838                           	opt stack 0
  4839  002D94                     _mainMenu:
  4840                           	opt stack 21
  4841                           
  4842                           ;interface.c: 100: lcdClear();
  4843                           
  4844                           ;incstack = 0
  4845  002D94  EC6B  F017         	call	_lcdClear	;wreg free
  4846                           
  4847                           ;interface.c: 101: printf("start   <B      \n");
  4848  002D98  0EE7               	movlw	low STR_13
  4849  002D9A  0100               	movlb	0	; () banked
  4850  002D9C  6FBD               	movwf	printf@f& (0+255),b
  4851  002D9E  0EFE               	movlw	high STR_13
  4852  002DA0  0100               	movlb	0	; () banked
  4853  002DA2  6FBE               	movwf	(printf@f+1)& (0+255),b
  4854  002DA4  EC09  F000         	call	_printf	;wreg free
  4855                           
  4856                           ;interface.c: 102: printf("history <C    *>");
  4857  002DA8  0E74               	movlw	low STR_14
  4858  002DAA  0100               	movlb	0	; () banked
  4859  002DAC  6FBD               	movwf	printf@f& (0+255),b
  4860  002DAE  0EFF               	movlw	high STR_14
  4861  002DB0  0100               	movlb	0	; () banked
  4862  002DB2  6FBE               	movwf	(printf@f+1)& (0+255),b
  4863  002DB4  EC09  F000         	call	_printf	;wreg free
  4864  002DB8  0012               	return		;funcret
  4865  002DBA                     __end_of_mainMenu:
  4866                           	opt stack 0
  4867                           tblptru	equ	0xFF8
  4868                           tblptrh	equ	0xFF7
  4869                           tblptrl	equ	0xFF6
  4870                           tablat	equ	0xFF5
  4871                           prodh	equ	0xFF4
  4872                           prodl	equ	0xFF3
  4873                           intcon	equ	0xFF2
  4874                           postinc0	equ	0xFEE
  4875                           wreg	equ	0xFE8
  4876                           postdec1	equ	0xFE5
  4877                           fsr1l	equ	0xFE1
  4878                           indf2	equ	0xFDF
  4879                           postinc2	equ	0xFDE
  4880                           postdec2	equ	0xFDD
  4881                           fsr2h	equ	0xFDA
  4882                           fsr2l	equ	0xFD9
  4883                           status	equ	0xFD8
  4884                           
  4885 ;; *************** function _dateTime *****************
  4886 ;; Defined at:
  4887 ;;		line 84 in file "interface.c"
  4888 ;; Parameters:    Size  Location     Type
  4889 ;;		None
  4890 ;; Auto vars:     Size  Location     Type
  4891 ;;		None
  4892 ;; Return value:  Size  Location     Type
  4893 ;;                  1    wreg      void 
  4894 ;; Registers used:
  4895 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4896 ;; Tracked objects:
  4897 ;;		On entry : 0/0
  4898 ;;		On exit  : 0/0
  4899 ;;		Unchanged: 0/0
  4900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4904 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4905 ;;Total ram usage:        0 bytes
  4906 ;; Hardware stack levels used:    1
  4907 ;; Hardware stack levels required when called:    8
  4908 ;; This function calls:
  4909 ;;		_lcdClear
  4910 ;;		_printf
  4911 ;; This function is called by:
  4912 ;;		_showInterface
  4913 ;; This function uses a non-reentrant model
  4914 ;;
  4915                           
  4916                           	psect	text22
  4917  002DBA                     __ptext22:
  4918                           	opt stack 0
  4919  002DBA                     _dateTime:
  4920                           	opt stack 21
  4921                           
  4922                           ;interface.c: 94: lcdClear();
  4923                           
  4924                           ;incstack = 0
  4925  002DBA  EC6B  F017         	call	_lcdClear	;wreg free
  4926                           
  4927                           ;interface.c: 95: printf("  hh:mm:ss      \n");
  4928  002DBE  0EF9               	movlw	low STR_11
  4929  002DC0  0100               	movlb	0	; () banked
  4930  002DC2  6FBD               	movwf	printf@f& (0+255),b
  4931  002DC4  0EFE               	movlw	high STR_11
  4932  002DC6  0100               	movlb	0	; () banked
  4933  002DC8  6FBE               	movwf	(printf@f+1)& (0+255),b
  4934  002DCA  EC09  F000         	call	_printf	;wreg free
  4935                           
  4936                           ;interface.c: 96: printf("  mm:dd:yy    A>");
  4937  002DCE  0EA7               	movlw	low STR_12
  4938  002DD0  0100               	movlb	0	; () banked
  4939  002DD2  6FBD               	movwf	printf@f& (0+255),b
  4940  002DD4  0EFF               	movlw	high STR_12
  4941  002DD6  0100               	movlb	0	; () banked
  4942  002DD8  6FBE               	movwf	(printf@f+1)& (0+255),b
  4943  002DDA  EC09  F000         	call	_printf	;wreg free
  4944  002DDE  0012               	return		;funcret
  4945  002DE0                     __end_of_dateTime:
  4946                           	opt stack 0
  4947                           tblptru	equ	0xFF8
  4948                           tblptrh	equ	0xFF7
  4949                           tblptrl	equ	0xFF6
  4950                           tablat	equ	0xFF5
  4951                           prodh	equ	0xFF4
  4952                           prodl	equ	0xFF3
  4953                           intcon	equ	0xFF2
  4954                           postinc0	equ	0xFEE
  4955                           wreg	equ	0xFE8
  4956                           postdec1	equ	0xFE5
  4957                           fsr1l	equ	0xFE1
  4958                           indf2	equ	0xFDF
  4959                           postinc2	equ	0xFDE
  4960                           postdec2	equ	0xFDD
  4961                           fsr2h	equ	0xFDA
  4962                           fsr2l	equ	0xFD9
  4963                           status	equ	0xFD8
  4964                           
  4965 ;; *************** function _printf *****************
  4966 ;; Defined at:
  4967 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4968 ;; Parameters:    Size  Location     Type
  4969 ;;  f               2   61[BANK0 ] PTR const unsigned char 
  4970 ;;		 -> STR_22(17), STR_21(18), STR_20(17), STR_19(18), 
  4971 ;;		 -> STR_18(17), STR_17(19), STR_16(17), STR_15(18), 
  4972 ;;		 -> STR_14(17), STR_13(18), STR_12(17), STR_11(18), 
  4973 ;;		 -> STR_10(9), STR_9(8), STR_8(25), STR_7(15), 
  4974 ;;		 -> STR_6(17), STR_5(20), STR_4(24), STR_3(14), 
  4975 ;;		 -> STR_2(20), STR_1(8), 
  4976 ;; Auto vars:     Size  Location     Type
  4977 ;;  idx             1    3[BANK1 ] unsigned char 
  4978 ;;  val             4   16[BANK1 ] unsigned long 
  4979 ;;  tmpval          4   12[BANK1 ] struct .
  4980 ;;  fval            3   20[BANK1 ] struct .
  4981 ;;  cp              3    0        PTR const unsigned char 
  4982 ;;  exp             2   10[BANK1 ] int 
  4983 ;;  prec            2    8[BANK1 ] int 
  4984 ;;  flag            2    6[BANK1 ] unsigned short 
  4985 ;;  ap              2    4[BANK1 ] PTR void [1]
  4986 ;;		 -> ?_printf(2), 
  4987 ;;  len             2    0        unsigned int 
  4988 ;;  width           2    0        int 
  4989 ;;  c               1   23[BANK1 ] char 
  4990 ;;  d               1    0        unsigned char 
  4991 ;; Return value:  Size  Location     Type
  4992 ;;                  2   61[BANK0 ] int 
  4993 ;; Registers used:
  4994 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4995 ;; Tracked objects:
  4996 ;;		On entry : 0/0
  4997 ;;		On exit  : 0/0
  4998 ;;		Unchanged: 0/0
  4999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5000 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5001 ;;      Locals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5002 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5003 ;;      Totals:         0      13      24       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5004 ;;Total ram usage:       37 bytes
  5005 ;; Hardware stack levels used:    1
  5006 ;; Hardware stack levels required when called:    7
  5007 ;; This function calls:
  5008 ;;		___awdiv
  5009 ;;		___ftadd
  5010 ;;		___ftge
  5011 ;;		___ftmul
  5012 ;;		___ftneg
  5013 ;;		___ftsub
  5014 ;;		___fttol
  5015 ;;		___lldiv
  5016 ;;		___llmod
  5017 ;;		___lltoft
  5018 ;;		___wmul
  5019 ;;		__div_to_l_
  5020 ;;		__tdiv_to_l_
  5021 ;;		_fround
  5022 ;;		_putch
  5023 ;;		_scale
  5024 ;; This function is called by:
  5025 ;;		_main
  5026 ;;		_sortBattery
  5027 ;;		_pause
  5028 ;;		_dateTime
  5029 ;;		_mainMenu
  5030 ;;		_runSelect
  5031 ;;		_runMenu
  5032 ;;		_runTime
  5033 ;;		_runStats
  5034 ;;		_testFrequency
  5035 ;; This function uses a non-reentrant model
  5036 ;;
  5037                           
  5038                           	psect	text23
  5039  000012                     __ptext23:
  5040                           	opt stack 0
  5041  000012                     _printf:
  5042                           	opt stack 22
  5043                           
  5044                           ;doprnt.c: 466: va_list ap;
  5045                           ;doprnt.c: 499: signed char c;
  5046                           ;doprnt.c: 501: int width;
  5047                           ;doprnt.c: 504: int prec;
  5048                           ;doprnt.c: 508: unsigned short flag;
  5049                           ;doprnt.c: 515: char d;
  5050                           ;doprnt.c: 516: double fval;
  5051                           ;doprnt.c: 517: int exp;
  5052                           ;doprnt.c: 523: union {
  5053                           ;doprnt.c: 524: unsigned long vd;
  5054                           ;doprnt.c: 525: double integ;
  5055                           ;doprnt.c: 526: } tmpval;
  5056                           ;doprnt.c: 528: unsigned long val;
  5057                           ;doprnt.c: 529: unsigned len;
  5058                           ;doprnt.c: 530: const char * cp;
  5059                           ;doprnt.c: 533: *ap = __va_start();
  5060                           
  5061                           ;incstack = 0
  5062  000012  0EBF               	movlw	low (?_printf+2)
  5063  000014  0101               	movlb	1	; () banked
  5064  000016  6F04               	movwf	printf@ap& (0+255),b
  5065  000018  0E00               	movlw	high (?_printf+2)
  5066  00001A  0101               	movlb	1	; () banked
  5067  00001C  6F05               	movwf	(printf@ap+1)& (0+255),b
  5068                           
  5069                           ;doprnt.c: 536: while(c = *f++) {
  5070  00001E  EF8F  F004         	goto	l5779
  5071  000022                     l5561:
  5072                           
  5073                           ; BSR set to: 1
  5074                           ;doprnt.c: 538: if(c != '%')
  5075  000022  0E25               	movlw	37
  5076  000024  0101               	movlb	1	; () banked
  5077  000026  1917               	xorwf	printf@c& (0+255),w,b
  5078  000028  B4D8               	btfsc	status,2,c
  5079  00002A  D006               	goto	l5565
  5080                           
  5081                           ; BSR set to: 1
  5082                           ;doprnt.c: 540: {
  5083                           ;doprnt.c: 541: (putch(c) );
  5084  00002C  0101               	movlb	1	; () banked
  5085  00002E  5117               	movf	printf@c& (0+255),w,b
  5086  000030  EC15  F017         	call	_putch
  5087                           
  5088                           ;doprnt.c: 542: continue;
  5089  000034  EF8F  F004         	goto	l5779
  5090  000038                     l5565:
  5091                           
  5092                           ;doprnt.c: 543: }
  5093                           ;doprnt.c: 548: flag = 0;
  5094  000038  0E00               	movlw	0
  5095  00003A  0101               	movlb	1	; () banked
  5096  00003C  6F07               	movwf	(printf@flag+1)& (0+255),b
  5097  00003E  0E00               	movlw	0
  5098  000040  6F06               	movwf	printf@flag& (0+255),b
  5099                           
  5100                           ;doprnt.c: 635: switch(c = *f++) {
  5101  000042  D018               	goto	l5579
  5102  000044                     l5567:
  5103                           
  5104                           ; BSR set to: 1
  5105                           ;doprnt.c: 663: flag |= 0x400;
  5106  000044  0101               	movlb	1	; () banked
  5107  000046  8507               	bsf	(printf@flag+1)& (0+255),2,b
  5108                           
  5109                           ; BSR set to: 1
  5110                           ;doprnt.c: 698: case 'i':
  5111                           ;doprnt.c: 699: break;
  5112                           
  5113                           ; BSR set to: 1
  5114                           
  5115                           ;doprnt.c: 697: case 'd':
  5116                           
  5117                           ;doprnt.c: 664: break;
  5118  000048  D034               	goto	l5581
  5119  00004A                     l5569:
  5120                           
  5121                           ; BSR set to: 1
  5122                           ;doprnt.c: 721: flag |= 0x80;
  5123  00004A  0101               	movlb	1	; () banked
  5124  00004C  8F06               	bsf	printf@flag& (0+255),7,b
  5125                           
  5126                           ;doprnt.c: 723: break;
  5127  00004E  D031               	goto	l5581
  5128  000050                     l5571:
  5129                           
  5130                           ; BSR set to: 1
  5131                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  5132  000050  C104  FFD9         	movff	printf@ap,fsr2l
  5133  000054  C105  FFDA         	movff	printf@ap+1,fsr2h
  5134  000058  50DF               	movf	indf2,w,c
  5135  00005A  0101               	movlb	1	; () banked
  5136  00005C  6F17               	movwf	printf@c& (0+255),b
  5137                           
  5138                           ; BSR set to: 1
  5139  00005E  0E02               	movlw	2
  5140  000060  0101               	movlb	1	; () banked
  5141  000062  2704               	addwf	printf@ap& (0+255),f,b
  5142  000064  0E00               	movlw	0
  5143  000066  2305               	addwfc	(printf@ap+1)& (0+255),f,b
  5144  000068                     l5575:
  5145                           
  5146                           ; BSR set to: 1
  5147                           ;doprnt.c: 809: (putch(c) );
  5148  000068  0101               	movlb	1	; () banked
  5149  00006A  5117               	movf	printf@c& (0+255),w,b
  5150  00006C  EC15  F017         	call	_putch
  5151                           
  5152                           ;doprnt.c: 810: continue;
  5153  000070  EF8F  F004         	goto	l5779
  5154  000074                     l5579:
  5155  000074  C0BD  FFF6         	movff	printf@f,tblptrl
  5156  000078  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5157  00007C  0100               	movlb	0	; () banked
  5158  00007E  4BBD               	infsnz	printf@f& (0+255),f,b
  5159  000080  2BBE               	incf	(printf@f+1)& (0+255),f,b
  5160  000082                     	if	0	;tblptru may be non-zero
  5161  000082                     	endif
  5162  000082                     	if	0	;tblptru may be non-zero
  5163  000082                     	endif
  5164  000082  0008               	tblrd		*
  5165  000084  CFF5 F117          	movff	tablat,printf@c
  5166  000088  0101               	movlb	1	; () banked
  5167  00008A  5117               	movf	printf@c& (0+255),w,b
  5168                           
  5169                           ; Switch size 1, requested type "space"
  5170                           ; Number of cases is 6, Range of values is 0 to 120
  5171                           ; switch strategies available:
  5172                           ; Name         Instructions Cycles
  5173                           ; simple_byte           19    10 (average)
  5174                           ;	Chosen strategy is simple_byte
  5175  00008C  0A00               	xorlw	0	; case 0
  5176  00008E  B4D8               	btfsc	status,2,c
  5177  000090  0012               	return	
  5178  000092  0A63               	xorlw	99	; case 99
  5179  000094  B4D8               	btfsc	status,2,c
  5180  000096  D7DC               	goto	l5571
  5181  000098  0A07               	xorlw	7	; case 100
  5182  00009A  B4D8               	btfsc	status,2,c
  5183  00009C  D00A               	goto	l5581
  5184  00009E  0A02               	xorlw	2	; case 102
  5185  0000A0  B4D8               	btfsc	status,2,c
  5186  0000A2  D7D0               	goto	l5567
  5187  0000A4  0A0F               	xorlw	15	; case 105
  5188  0000A6  B4D8               	btfsc	status,2,c
  5189  0000A8  D004               	goto	l5581
  5190  0000AA  0A11               	xorlw	17	; case 120
  5191  0000AC  B4D8               	btfsc	status,2,c
  5192  0000AE  D7CD               	goto	l5569
  5193  0000B0  D7DB               	goto	l5575
  5194  0000B2                     l5581:
  5195                           
  5196                           ;doprnt.c: 825: if(flag & (0x700)) {
  5197  0000B2  0E07               	movlw	7
  5198  0000B4  0101               	movlb	1	; () banked
  5199  0000B6  1507               	andwf	(printf@flag+1)& (0+255),w,b
  5200  0000B8  B4D8               	btfsc	status,2,c
  5201  0000BA  D2F4               	goto	l682
  5202                           
  5203                           ; BSR set to: 1
  5204                           ;doprnt.c: 829: prec = 6;
  5205  0000BC  0E00               	movlw	0
  5206  0000BE  0101               	movlb	1	; () banked
  5207  0000C0  6F09               	movwf	(printf@prec+1)& (0+255),b
  5208  0000C2  0E06               	movlw	6
  5209  0000C4  6F08               	movwf	printf@prec& (0+255),b
  5210                           
  5211                           ; BSR set to: 1
  5212                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  5213  0000C6  C104  FFD9         	movff	printf@ap,fsr2l
  5214  0000CA  C105  FFDA         	movff	printf@ap+1,fsr2h
  5215  0000CE  CFDE F114          	movff	postinc2,printf@fval
  5216  0000D2  CFDE F115          	movff	postinc2,printf@fval+1
  5217  0000D6  CFDD F116          	movff	postdec2,printf@fval+2
  5218                           
  5219                           ; BSR set to: 1
  5220  0000DA  0E03               	movlw	3
  5221  0000DC  0101               	movlb	1	; () banked
  5222  0000DE  2704               	addwf	printf@ap& (0+255),f,b
  5223  0000E0  0E00               	movlw	0
  5224  0000E2  2305               	addwfc	(printf@ap+1)& (0+255),f,b
  5225                           
  5226                           ; BSR set to: 1
  5227                           ;doprnt.c: 831: if(fval < 0.0) {
  5228  0000E4  0101               	movlb	1	; () banked
  5229  0000E6  AF16               	btfss	(printf@fval+2)& (0+255),7,b
  5230  0000E8  D011               	goto	l5595
  5231                           
  5232                           ; BSR set to: 1
  5233                           ;doprnt.c: 832: fval = -fval;
  5234  0000EA  C114  F024         	movff	printf@fval,___ftneg@f1
  5235  0000EE  C115  F025         	movff	printf@fval+1,___ftneg@f1+1
  5236  0000F2  C116  F026         	movff	printf@fval+2,___ftneg@f1+2
  5237  0000F6  EC03  F017         	call	___ftneg	;wreg free
  5238  0000FA  C024  F114         	movff	?___ftneg,printf@fval
  5239  0000FE  C025  F115         	movff	?___ftneg+1,printf@fval+1
  5240  000102  C026  F116         	movff	?___ftneg+2,printf@fval+2
  5241                           
  5242                           ;doprnt.c: 833: flag |= 0x03;
  5243  000106  0E03               	movlw	3
  5244  000108  0101               	movlb	1	; () banked
  5245  00010A  1306               	iorwf	printf@flag& (0+255),f,b
  5246  00010C                     l5595:
  5247                           
  5248                           ; BSR set to: 1
  5249                           ;doprnt.c: 834: }
  5250                           ;doprnt.c: 835: exp = 0;
  5251  00010C  0E00               	movlw	0
  5252  00010E  0101               	movlb	1	; () banked
  5253  000110  6F0B               	movwf	(printf@exp+1)& (0+255),b
  5254  000112  0E00               	movlw	0
  5255  000114  6F0A               	movwf	printf@exp& (0+255),b
  5256                           
  5257                           ; BSR set to: 1
  5258                           ;doprnt.c: 836: if( fval!=0) {
  5259  000116  0101               	movlb	1	; () banked
  5260  000118  5114               	movf	printf@fval& (0+255),w,b
  5261  00011A  0101               	movlb	1	; () banked
  5262  00011C  1115               	iorwf	(printf@fval+1)& (0+255),w,b
  5263  00011E  0101               	movlb	1	; () banked
  5264  000120  1116               	iorwf	(printf@fval+2)& (0+255),w,b
  5265  000122  B4D8               	btfsc	status,2,c
  5266  000124  D091               	goto	l5623
  5267                           
  5268                           ; BSR set to: 1
  5269                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  5270  000126  0E82               	movlw	130
  5271  000128  0100               	movlb	0	; () banked
  5272  00012A  6FC4               	movwf	??_printf& (0+255),b
  5273  00012C  0EFF               	movlw	255
  5274  00012E  0100               	movlb	0	; () banked
  5275  000130  6FC5               	movwf	(??_printf+1)& (0+255),b
  5276  000132  C114  F0C6         	movff	printf@fval,??_printf+2
  5277  000136  C115  F0C7         	movff	printf@fval+1,??_printf+3
  5278  00013A  C116  F0C8         	movff	printf@fval+2,??_printf+4
  5279  00013E  C117  F0C9         	movff	printf@fval+3,??_printf+5
  5280  000142  0E10               	movlw	16
  5281  000144  D006               	goto	u5250
  5282  000146                     u5255:
  5283  000146  0100               	movlb	0	; () banked
  5284  000148  90D8               	bcf	status,0,c
  5285  00014A  33C9               	rrcf	(??_printf+5)& (0+255),f,b
  5286  00014C  33C8               	rrcf	(??_printf+4)& (0+255),f,b
  5287  00014E  33C7               	rrcf	(??_printf+3)& (0+255),f,b
  5288  000150  33C6               	rrcf	(??_printf+2)& (0+255),f,b
  5289  000152                     u5250:
  5290  000152  2EE8               	decfsz	wreg,f,c
  5291  000154  D7F8               	goto	u5255
  5292  000156  0100               	movlb	0	; () banked
  5293  000158  51C6               	movf	(??_printf+2)& (0+255),w,b
  5294  00015A  0100               	movlb	0	; () banked
  5295  00015C  25C4               	addwf	??_printf& (0+255),w,b
  5296  00015E  0101               	movlb	1	; () banked
  5297  000160  6F0A               	movwf	printf@exp& (0+255),b
  5298  000162  0E00               	movlw	0
  5299  000164  0100               	movlb	0	; () banked
  5300  000166  21C5               	addwfc	(??_printf+1)& (0+255),w,b
  5301  000168  0101               	movlb	1	; () banked
  5302  00016A  6F0B               	movwf	(printf@exp+1)& (0+255),b
  5303                           
  5304                           ; BSR set to: 1
  5305                           ;doprnt.c: 838: exp--;
  5306  00016C  0101               	movlb	1	; () banked
  5307  00016E  070A               	decf	printf@exp& (0+255),f,b
  5308  000170  A0D8               	btfss	status,0,c
  5309  000172  070B               	decf	(printf@exp+1)& (0+255),f,b
  5310                           
  5311                           ; BSR set to: 1
  5312                           ;doprnt.c: 839: exp *= 3;
  5313  000174  C10A  F032         	movff	printf@exp,___wmul@multiplier
  5314  000178  C10B  F033         	movff	printf@exp+1,___wmul@multiplier+1
  5315  00017C  0E00               	movlw	0
  5316  00017E  6E35               	movwf	___wmul@multiplicand+1,c
  5317  000180  0E03               	movlw	3
  5318  000182  6E34               	movwf	___wmul@multiplicand,c
  5319  000184  ECF0  F016         	call	___wmul	;wreg free
  5320  000188  C032  F10A         	movff	?___wmul,printf@exp
  5321  00018C  C033  F10B         	movff	?___wmul+1,printf@exp+1
  5322                           
  5323                           ;doprnt.c: 840: exp /= 10;
  5324  000190  C10A  F02A         	movff	printf@exp,___awdiv@dividend
  5325  000194  C10B  F02B         	movff	printf@exp+1,___awdiv@dividend+1
  5326  000198  0E00               	movlw	0
  5327  00019A  6E2D               	movwf	___awdiv@divisor+1,c
  5328  00019C  0E0A               	movlw	10
  5329  00019E  6E2C               	movwf	___awdiv@divisor,c
  5330  0001A0  ECA7  F013         	call	___awdiv	;wreg free
  5331  0001A4  C02A  F10A         	movff	?___awdiv,printf@exp
  5332  0001A8  C02B  F10B         	movff	?___awdiv+1,printf@exp+1
  5333                           
  5334                           ;doprnt.c: 841: if(exp < 0)
  5335  0001AC  0101               	movlb	1	; () banked
  5336  0001AE  AF0B               	btfss	(printf@exp+1)& (0+255),7,b
  5337  0001B0  D004               	goto	l5611
  5338                           
  5339                           ; BSR set to: 1
  5340                           ;doprnt.c: 842: exp--;
  5341  0001B2  0101               	movlb	1	; () banked
  5342  0001B4  070A               	decf	printf@exp& (0+255),f,b
  5343  0001B6  A0D8               	btfss	status,0,c
  5344  0001B8  070B               	decf	(printf@exp+1)& (0+255),f,b
  5345  0001BA                     l5611:
  5346                           
  5347                           ; BSR set to: 1
  5348                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  5349  0001BA  0101               	movlb	1	; () banked
  5350  0001BC  510A               	movf	printf@exp& (0+255),w,b
  5351  0001BE  0800               	sublw	0
  5352  0001C0  EC9F  F004         	call	_scale
  5353  0001C4  C098  F10C         	movff	?_scale,printf@tmpval
  5354  0001C8  C099  F10D         	movff	?_scale+1,printf@tmpval+1
  5355  0001CC  C09A  F10E         	movff	?_scale+2,printf@tmpval+2
  5356                           
  5357                           ;doprnt.c: 847: tmpval.integ *= fval;
  5358  0001D0  C10C  F089         	movff	printf@tmpval,___ftmul@f1
  5359  0001D4  C10D  F08A         	movff	printf@tmpval+1,___ftmul@f1+1
  5360  0001D8  C10E  F08B         	movff	printf@tmpval+2,___ftmul@f1+2
  5361  0001DC  C114  F08C         	movff	printf@fval,___ftmul@f2
  5362  0001E0  C115  F08D         	movff	printf@fval+1,___ftmul@f2+1
  5363  0001E4  C116  F08E         	movff	printf@fval+2,___ftmul@f2+2
  5364  0001E8  EC87  F00B         	call	___ftmul	;wreg free
  5365  0001EC  C089  F10C         	movff	?___ftmul,printf@tmpval
  5366  0001F0  C08A  F10D         	movff	?___ftmul+1,printf@tmpval+1
  5367  0001F4  C08B  F10E         	movff	?___ftmul+2,printf@tmpval+2
  5368                           
  5369                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  5370  0001F8  C10C  F024         	movff	printf@tmpval,___ftge@ff1
  5371  0001FC  C10D  F025         	movff	printf@tmpval+1,___ftge@ff1+1
  5372  000200  C10E  F026         	movff	printf@tmpval+2,___ftge@ff1+2
  5373  000204  0E00               	movlw	0
  5374  000206  6E27               	movwf	___ftge@ff2,c
  5375  000208  0E80               	movlw	128
  5376  00020A  6E28               	movwf	___ftge@ff2+1,c
  5377  00020C  0E3F               	movlw	63
  5378  00020E  6E29               	movwf	___ftge@ff2+2,c
  5379  000210  EC5F  F013         	call	___ftge	;wreg free
  5380  000214  B0D8               	btfsc	status,0,c
  5381  000216  D005               	goto	l5619
  5382                           
  5383                           ;doprnt.c: 849: exp--;
  5384  000218  0101               	movlb	1	; () banked
  5385  00021A  070A               	decf	printf@exp& (0+255),f,b
  5386  00021C  A0D8               	btfss	status,0,c
  5387  00021E  070B               	decf	(printf@exp+1)& (0+255),f,b
  5388  000220  D013               	goto	l5623
  5389  000222                     l5619:
  5390                           
  5391                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  5392  000222  C10C  F024         	movff	printf@tmpval,___ftge@ff1
  5393  000226  C10D  F025         	movff	printf@tmpval+1,___ftge@ff1+1
  5394  00022A  C10E  F026         	movff	printf@tmpval+2,___ftge@ff1+2
  5395  00022E  0E00               	movlw	0
  5396  000230  6E27               	movwf	___ftge@ff2,c
  5397  000232  0E20               	movlw	32
  5398  000234  6E28               	movwf	___ftge@ff2+1,c
  5399  000236  0E41               	movlw	65
  5400  000238  6E29               	movwf	___ftge@ff2+2,c
  5401  00023A  EC5F  F013         	call	___ftge	;wreg free
  5402  00023E  A0D8               	btfss	status,0,c
  5403  000240  D003               	goto	l5623
  5404                           
  5405                           ;doprnt.c: 851: exp++;
  5406  000242  0101               	movlb	1	; () banked
  5407  000244  4B0A               	infsnz	printf@exp& (0+255),f,b
  5408  000246  2B0B               	incf	(printf@exp+1)& (0+255),f,b
  5409  000248                     l5623:
  5410                           
  5411                           ;doprnt.c: 852: }
  5412                           ;doprnt.c: 1112: if(prec <= 12)
  5413  000248  0101               	movlb	1	; () banked
  5414  00024A  BF09               	btfsc	(printf@prec+1)& (0+255),7,b
  5415  00024C  D008               	goto	l5625
  5416  00024E  0101               	movlb	1	; () banked
  5417  000250  5109               	movf	(printf@prec+1)& (0+255),w,b
  5418  000252  E11D               	bnz	l5627
  5419  000254  0E0D               	movlw	13
  5420  000256  0101               	movlb	1	; () banked
  5421  000258  5D08               	subwf	printf@prec& (0+255),w,b
  5422  00025A  B0D8               	btfsc	status,0,c
  5423  00025C  D018               	goto	l5627
  5424  00025E                     l5625:
  5425                           
  5426                           ; BSR set to: 1
  5427                           ;doprnt.c: 1113: fval += fround(prec);
  5428  00025E  C114  F0A2         	movff	printf@fval,___ftadd@f1
  5429  000262  C115  F0A3         	movff	printf@fval+1,___ftadd@f1+1
  5430  000266  C116  F0A4         	movff	printf@fval+2,___ftadd@f1+2
  5431  00026A  0101               	movlb	1	; () banked
  5432  00026C  5108               	movf	printf@prec& (0+255),w,b
  5433  00026E  EC8B  F009         	call	_fround
  5434  000272  C098  F0A5         	movff	?_fround,___ftadd@f2
  5435  000276  C099  F0A6         	movff	?_fround+1,___ftadd@f2+1
  5436  00027A  C09A  F0A7         	movff	?_fround+2,___ftadd@f2+2
  5437  00027E  EC57  F008         	call	___ftadd	;wreg free
  5438  000282  C0A2  F114         	movff	?___ftadd,printf@fval
  5439  000286  C0A3  F115         	movff	?___ftadd+1,printf@fval+1
  5440  00028A  C0A4  F116         	movff	?___ftadd+2,printf@fval+2
  5441  00028E                     l5627:
  5442                           
  5443                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  5444  00028E  0101               	movlb	1	; () banked
  5445  000290  BF0B               	btfsc	(printf@exp+1)& (0+255),7,b
  5446  000292  D008               	goto	l5629
  5447  000294  0101               	movlb	1	; () banked
  5448  000296  510B               	movf	(printf@exp+1)& (0+255),w,b
  5449  000298  E12A               	bnz	l5635
  5450  00029A  0E0A               	movlw	10
  5451  00029C  0101               	movlb	1	; () banked
  5452  00029E  5D0A               	subwf	printf@exp& (0+255),w,b
  5453  0002A0  B0D8               	btfsc	status,0,c
  5454  0002A2  D025               	goto	l5635
  5455  0002A4                     l5629:
  5456                           
  5457                           ; BSR set to: 1
  5458  0002A4  0101               	movlb	1	; () banked
  5459  0002A6  5114               	movf	printf@fval& (0+255),w,b
  5460  0002A8  0101               	movlb	1	; () banked
  5461  0002AA  1115               	iorwf	(printf@fval+1)& (0+255),w,b
  5462  0002AC  0101               	movlb	1	; () banked
  5463  0002AE  1116               	iorwf	(printf@fval+2)& (0+255),w,b
  5464  0002B0  B4D8               	btfsc	status,2,c
  5465  0002B2  D05F               	goto	l5649
  5466                           
  5467                           ; BSR set to: 1
  5468  0002B4  C114  F0AE         	movff	printf@fval,___fttol@f1
  5469  0002B8  C115  F0AF         	movff	printf@fval+1,___fttol@f1+1
  5470  0002BC  C116  F0B0         	movff	printf@fval+2,___fttol@f1+2
  5471  0002C0  ECE2  F00C         	call	___fttol	;wreg free
  5472  0002C4  0100               	movlb	0	; () banked
  5473  0002C6  51AE               	movf	?___fttol& (0+255),w,b
  5474  0002C8  0100               	movlb	0	; () banked
  5475  0002CA  11AF               	iorwf	(?___fttol+1)& (0+255),w,b
  5476  0002CC  0100               	movlb	0	; () banked
  5477  0002CE  11B0               	iorwf	(?___fttol+2)& (0+255),w,b
  5478  0002D0  0100               	movlb	0	; () banked
  5479  0002D2  11B1               	iorwf	(?___fttol+3)& (0+255),w,b
  5480  0002D4  A4D8               	btfss	status,2,c
  5481  0002D6  D04D               	goto	l5649
  5482                           
  5483                           ; BSR set to: 0
  5484  0002D8  0101               	movlb	1	; () banked
  5485  0002DA  BF0B               	btfsc	(printf@exp+1)& (0+255),7,b
  5486  0002DC  D04A               	goto	l5649
  5487  0002DE  0101               	movlb	1	; () banked
  5488  0002E0  510B               	movf	(printf@exp+1)& (0+255),w,b
  5489  0002E2  E105               	bnz	l5635
  5490  0002E4  0E02               	movlw	2
  5491  0002E6  0101               	movlb	1	; () banked
  5492  0002E8  5D0A               	subwf	printf@exp& (0+255),w,b
  5493  0002EA  A0D8               	btfss	status,0,c
  5494  0002EC  D042               	goto	l5649
  5495  0002EE                     l5635:
  5496                           
  5497                           ; BSR set to: 1
  5498                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  5499  0002EE  C10C  F024         	movff	printf@tmpval,___ftge@ff1
  5500  0002F2  C10D  F025         	movff	printf@tmpval+1,___ftge@ff1+1
  5501  0002F6  C10E  F026         	movff	printf@tmpval+2,___ftge@ff1+2
  5502  0002FA  0E70               	movlw	112
  5503  0002FC  6E27               	movwf	___ftge@ff2,c
  5504  0002FE  0E89               	movlw	137
  5505  000300  6E28               	movwf	___ftge@ff2+1,c
  5506  000302  0E40               	movlw	64
  5507  000304  6E29               	movwf	___ftge@ff2+2,c
  5508  000306  EC5F  F013         	call	___ftge	;wreg free
  5509  00030A  B0D8               	btfsc	status,0,c
  5510  00030C  D003               	goto	l5639
  5511                           
  5512                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5513  00030E  0101               	movlb	1	; () banked
  5514  000310  0EF7               	movlw	247
  5515  000312  D002               	goto	L1
  5516  000314                     l5639:
  5517                           
  5518                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5519  000314  0101               	movlb	1	; () banked
  5520  000316  0EF8               	movlw	248
  5521  000318                     L1:
  5522  000318  270A               	addwf	printf@exp& (0+255),f,b
  5523  00031A  0EFF               	movlw	255
  5524  00031C  230B               	addwfc	(printf@exp+1)& (0+255),f,b
  5525                           
  5526                           ; BSR set to: 1
  5527                           ;doprnt.c: 1124: }
  5528                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  5529                           
  5530                           ; BSR set to: 1
  5531  00031E  0101               	movlb	1	; () banked
  5532  000320  510A               	movf	printf@exp& (0+255),w,b
  5533  000322  EC9F  F004         	call	_scale
  5534  000326  C098  F10C         	movff	?_scale,printf@tmpval
  5535  00032A  C099  F10D         	movff	?_scale+1,printf@tmpval+1
  5536  00032E  C09A  F10E         	movff	?_scale+2,printf@tmpval+2
  5537                           
  5538                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  5539  000332  C114  F024         	movff	printf@fval,__tdiv_to_l_@f1
  5540  000336  C115  F025         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  5541  00033A  C116  F026         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  5542  00033E  C10C  F027         	movff	printf@tmpval,__tdiv_to_l_@f2
  5543  000342  C10D  F028         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  5544  000346  C10E  F029         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  5545  00034A  EC84  F00D         	call	__tdiv_to_l_	;wreg free
  5546  00034E  C024  F110         	movff	?__tdiv_to_l_,printf@val
  5547  000352  C025  F111         	movff	?__tdiv_to_l_+1,printf@val+1
  5548  000356  C026  F112         	movff	?__tdiv_to_l_+2,printf@val+2
  5549  00035A  C027  F113         	movff	?__tdiv_to_l_+3,printf@val+3
  5550                           
  5551                           ;doprnt.c: 1129: fval = 0.0;
  5552  00035E  0E00               	movlw	0
  5553  000360  0101               	movlb	1	; () banked
  5554  000362  6F14               	movwf	printf@fval& (0+255),b
  5555  000364  0E00               	movlw	0
  5556  000366  0101               	movlb	1	; () banked
  5557  000368  6F15               	movwf	(printf@fval+1)& (0+255),b
  5558  00036A  0E00               	movlw	0
  5559  00036C  0101               	movlb	1	; () banked
  5560  00036E  6F16               	movwf	(printf@fval+2)& (0+255),b
  5561                           
  5562                           ;doprnt.c: 1130: } else {
  5563  000370  D033               	goto	l5653
  5564  000372                     l5649:
  5565                           
  5566                           ;doprnt.c: 1131: val = (unsigned long)fval;
  5567  000372  C114  F0AE         	movff	printf@fval,___fttol@f1
  5568  000376  C115  F0AF         	movff	printf@fval+1,___fttol@f1+1
  5569  00037A  C116  F0B0         	movff	printf@fval+2,___fttol@f1+2
  5570  00037E  ECE2  F00C         	call	___fttol	;wreg free
  5571  000382  C0AE  F110         	movff	?___fttol,printf@val
  5572  000386  C0AF  F111         	movff	?___fttol+1,printf@val+1
  5573  00038A  C0B0  F112         	movff	?___fttol+2,printf@val+2
  5574  00038E  C0B1  F113         	movff	?___fttol+3,printf@val+3
  5575                           
  5576                           ;doprnt.c: 1132: fval -= (double)val;
  5577  000392  C114  F0AE         	movff	printf@fval,___ftsub@f1
  5578  000396  C115  F0AF         	movff	printf@fval+1,___ftsub@f1+1
  5579  00039A  C116  F0B0         	movff	printf@fval+2,___ftsub@f1+2
  5580  00039E  C110  F02C         	movff	printf@val,___lltoft@c
  5581  0003A2  C111  F02D         	movff	printf@val+1,___lltoft@c+1
  5582  0003A6  C112  F02E         	movff	printf@val+2,___lltoft@c+2
  5583  0003AA  C113  F02F         	movff	printf@val+3,___lltoft@c+3
  5584  0003AE  EC04  F015         	call	___lltoft	;wreg free
  5585  0003B2  C02C  F0B1         	movff	?___lltoft,___ftsub@f2
  5586  0003B6  C02D  F0B2         	movff	?___lltoft+1,___ftsub@f2+1
  5587  0003BA  C02E  F0B3         	movff	?___lltoft+2,___ftsub@f2+2
  5588  0003BE  EC58  F015         	call	___ftsub	;wreg free
  5589  0003C2  C0AE  F114         	movff	?___ftsub,printf@fval
  5590  0003C6  C0AF  F115         	movff	?___ftsub+1,printf@fval+1
  5591  0003CA  C0B0  F116         	movff	?___ftsub+2,printf@fval+2
  5592                           
  5593                           ;doprnt.c: 1133: exp = 0;
  5594  0003CE  0E00               	movlw	0
  5595  0003D0  0101               	movlb	1	; () banked
  5596  0003D2  6F0B               	movwf	(printf@exp+1)& (0+255),b
  5597  0003D4  0E00               	movlw	0
  5598  0003D6  6F0A               	movwf	printf@exp& (0+255),b
  5599  0003D8                     l5653:
  5600                           
  5601                           ; BSR set to: 1
  5602                           ;doprnt.c: 1134: }
  5603                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5604  0003D8  0E01               	movlw	1
  5605  0003DA  0101               	movlb	1	; () banked
  5606  0003DC  6F17               	movwf	printf@c& (0+255),b
  5607  0003DE                     l5655:
  5608                           
  5609                           ; BSR set to: 1
  5610  0003DE  0E0A               	movlw	10
  5611  0003E0  0101               	movlb	1	; () banked
  5612  0003E2  1917               	xorwf	printf@c& (0+255),w,b
  5613  0003E4  B4D8               	btfsc	status,2,c
  5614  0003E6  D01E               	goto	l5667
  5615                           
  5616                           ; BSR set to: 1
  5617                           ;doprnt.c: 1137: if(val < dpowers[c])
  5618                           
  5619                           ; BSR set to: 1
  5620                           
  5621                           ; BSR set to: 1
  5622  0003E8  0101               	movlb	1	; () banked
  5623  0003EA  5117               	movf	printf@c& (0+255),w,b
  5624  0003EC  0D04               	mullw	4
  5625  0003EE  0ECD               	movlw	low _dpowers
  5626  0003F0  24F3               	addwf	prodl,w,c
  5627  0003F2  6EF6               	movwf	tblptrl,c
  5628  0003F4  0EFD               	movlw	high _dpowers
  5629  0003F6  20F4               	addwfc	prodh,w,c
  5630  0003F8  6EF7               	movwf	tblptrh,c
  5631  0003FA                     	if	0	;There are less than 3 active tblptr bytes
  5632  0003FA                     	endif
  5633  0003FA  0009               	tblrd		*+
  5634  0003FC  50F5               	movf	tablat,w,c
  5635  0003FE  0101               	movlb	1	; () banked
  5636  000400  5D10               	subwf	printf@val& (0+255),w,b
  5637  000402  0009               	tblrd		*+
  5638  000404  50F5               	movf	tablat,w,c
  5639  000406  0101               	movlb	1	; () banked
  5640  000408  5911               	subwfb	(printf@val+1)& (0+255),w,b
  5641  00040A  0009               	tblrd		*+
  5642  00040C  50F5               	movf	tablat,w,c
  5643  00040E  0101               	movlb	1	; () banked
  5644  000410  5912               	subwfb	(printf@val+2)& (0+255),w,b
  5645  000412  0009               	tblrd		*+
  5646  000414  50F5               	movf	tablat,w,c
  5647  000416  0101               	movlb	1	; () banked
  5648  000418  5913               	subwfb	(printf@val+3)& (0+255),w,b
  5649  00041A  A0D8               	btfss	status,0,c
  5650  00041C  D003               	goto	l5667
  5651                           
  5652                           ; BSR set to: 1
  5653                           
  5654                           ; BSR set to: 1
  5655                           
  5656                           ; BSR set to: 1
  5657                           ;doprnt.c: 1138: break;
  5658  00041E  0101               	movlb	1	; () banked
  5659  000420  2B17               	incf	printf@c& (0+255),f,b
  5660  000422  D7DD               	goto	l5655
  5661  000424                     l5667:
  5662                           
  5663                           ; BSR set to: 1
  5664                           ;doprnt.c: 1175: {
  5665                           ;doprnt.c: 1188: if(flag & 0x03)
  5666  000424  0E03               	movlw	3
  5667  000426  0101               	movlb	1	; () banked
  5668  000428  1506               	andwf	printf@flag& (0+255),w,b
  5669  00042A  0100               	movlb	0	; () banked
  5670  00042C  6FC4               	movwf	??_printf& (0+255),b
  5671  00042E  0E00               	movlw	0
  5672  000430  0101               	movlb	1	; () banked
  5673  000432  1507               	andwf	(printf@flag+1)& (0+255),w,b
  5674  000434  0100               	movlb	0	; () banked
  5675  000436  6FC5               	movwf	(??_printf+1)& (0+255),b
  5676  000438  0100               	movlb	0	; () banked
  5677  00043A  51C4               	movf	??_printf& (0+255),w,b
  5678  00043C  0100               	movlb	0	; () banked
  5679  00043E  11C5               	iorwf	(??_printf+1)& (0+255),w,b
  5680  000440  B4D8               	btfsc	status,2,c
  5681  000442  D04A               	goto	l5677
  5682                           
  5683                           ; BSR set to: 0
  5684                           ;doprnt.c: 1190: (putch('-') );
  5685  000444  0E2D               	movlw	45
  5686  000446  EC15  F017         	call	_putch
  5687                           
  5688                           ;doprnt.c: 1195: }
  5689                           ;doprnt.c: 1196: while(c--) {
  5690  00044A  D046               	goto	l5677
  5691  00044C                     l5671:
  5692                           
  5693                           ;doprnt.c: 1200: {
  5694                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  5695  00044C  C110  F024         	movff	printf@val,___lldiv@dividend
  5696  000450  C111  F025         	movff	printf@val+1,___lldiv@dividend+1
  5697  000454  C112  F026         	movff	printf@val+2,___lldiv@dividend+2
  5698  000458  C113  F027         	movff	printf@val+3,___lldiv@dividend+3
  5699  00045C  0101               	movlb	1	; () banked
  5700  00045E  5117               	movf	printf@c& (0+255),w,b
  5701  000460  0D04               	mullw	4
  5702  000462  0ECD               	movlw	low _dpowers
  5703  000464  24F3               	addwf	prodl,w,c
  5704  000466  6EF6               	movwf	tblptrl,c
  5705  000468  0EFD               	movlw	high _dpowers
  5706  00046A  20F4               	addwfc	prodh,w,c
  5707  00046C  6EF7               	movwf	tblptrh,c
  5708  00046E                     	if	0	;There are less than 3 active tblptr bytes
  5709  00046E                     	endif
  5710  00046E  0009               	tblrd		*+
  5711  000470  CFF5 F028          	movff	tablat,___lldiv@divisor
  5712  000474  0009               	tblrd		*+
  5713  000476  CFF5 F029          	movff	tablat,___lldiv@divisor+1
  5714  00047A  0009               	tblrd		*+
  5715  00047C  CFF5 F02A          	movff	tablat,___lldiv@divisor+2
  5716  000480  000A               	tblrd		*-
  5717  000482  CFF5 F02B          	movff	tablat,___lldiv@divisor+3
  5718  000486  ECE9  F013         	call	___lldiv	;wreg free
  5719  00048A  C024  F10C         	movff	?___lldiv,printf@tmpval
  5720  00048E  C025  F10D         	movff	?___lldiv+1,printf@tmpval+1
  5721  000492  C026  F10E         	movff	?___lldiv+2,printf@tmpval+2
  5722  000496  C027  F10F         	movff	?___lldiv+3,printf@tmpval+3
  5723                           
  5724                           ;doprnt.c: 1202: tmpval.vd %= 10;
  5725  00049A  C10C  F031         	movff	printf@tmpval,___llmod@dividend
  5726  00049E  C10D  F032         	movff	printf@tmpval+1,___llmod@dividend+1
  5727  0004A2  C10E  F033         	movff	printf@tmpval+2,___llmod@dividend+2
  5728  0004A6  C10F  F034         	movff	printf@tmpval+3,___llmod@dividend+3
  5729  0004AA  0E0A               	movlw	10
  5730  0004AC  6E35               	movwf	___llmod@divisor,c
  5731  0004AE  0E00               	movlw	0
  5732  0004B0  6E36               	movwf	___llmod@divisor+1,c
  5733  0004B2  0E00               	movlw	0
  5734  0004B4  6E37               	movwf	___llmod@divisor+2,c
  5735  0004B6  0E00               	movlw	0
  5736  0004B8  6E38               	movwf	___llmod@divisor+3,c
  5737  0004BA  EC9E  F014         	call	___llmod	;wreg free
  5738  0004BE  C031  F10C         	movff	?___llmod,printf@tmpval
  5739  0004C2  C032  F10D         	movff	?___llmod+1,printf@tmpval+1
  5740  0004C6  C033  F10E         	movff	?___llmod+2,printf@tmpval+2
  5741  0004CA  C034  F10F         	movff	?___llmod+3,printf@tmpval+3
  5742                           
  5743                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  5744  0004CE  0101               	movlb	1	; () banked
  5745  0004D0  510C               	movf	printf@tmpval& (0+255),w,b
  5746  0004D2  0F30               	addlw	48
  5747  0004D4  EC15  F017         	call	_putch
  5748  0004D8                     l5677:
  5749  0004D8  0101               	movlb	1	; () banked
  5750  0004DA  0717               	decf	printf@c& (0+255),f,b
  5751  0004DC  0101               	movlb	1	; () banked
  5752  0004DE  2917               	incf	printf@c& (0+255),w,b
  5753  0004E0  B4D8               	btfsc	status,2,c
  5754  0004E2  D008               	goto	l5683
  5755  0004E4  D7B3               	goto	l5671
  5756  0004E6                     l5679:
  5757                           
  5758                           ; BSR set to: 1
  5759                           ;doprnt.c: 1208: (putch('0') );
  5760  0004E6  0E30               	movlw	48
  5761  0004E8  EC15  F017         	call	_putch
  5762                           
  5763                           ;doprnt.c: 1209: exp--;
  5764  0004EC  0101               	movlb	1	; () banked
  5765  0004EE  070A               	decf	printf@exp& (0+255),f,b
  5766  0004F0  A0D8               	btfss	status,0,c
  5767  0004F2  070B               	decf	(printf@exp+1)& (0+255),f,b
  5768  0004F4                     l5683:
  5769                           
  5770                           ; BSR set to: 1
  5771  0004F4  0101               	movlb	1	; () banked
  5772  0004F6  BF0B               	btfsc	(printf@exp+1)& (0+255),7,b
  5773  0004F8  D007               	goto	l5685
  5774  0004FA  0101               	movlb	1	; () banked
  5775  0004FC  510B               	movf	(printf@exp+1)& (0+255),w,b
  5776  0004FE  E1F3               	bnz	l5679
  5777  000500  0101               	movlb	1	; () banked
  5778  000502  050A               	decf	printf@exp& (0+255),w,b
  5779  000504  B0D8               	btfsc	status,0,c
  5780  000506  D7EF               	goto	l5679
  5781  000508                     l5685:
  5782                           
  5783                           ; BSR set to: 1
  5784                           ;doprnt.c: 1210: }
  5785                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5786  000508  0101               	movlb	1	; () banked
  5787  00050A  BF09               	btfsc	(printf@prec+1)& (0+255),7,b
  5788  00050C  D00C               	goto	l710
  5789  00050E  0101               	movlb	1	; () banked
  5790  000510  5109               	movf	(printf@prec+1)& (0+255),w,b
  5791  000512  E105               	bnz	u5410
  5792  000514  0E09               	movlw	9
  5793  000516  0101               	movlb	1	; () banked
  5794  000518  5D08               	subwf	printf@prec& (0+255),w,b
  5795  00051A  A0D8               	btfss	status,0,c
  5796  00051C  D004               	goto	l710
  5797  00051E                     u5410:
  5798                           
  5799                           ; BSR set to: 1
  5800                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5801  00051E  0E08               	movlw	8
  5802  000520  0101               	movlb	1	; () banked
  5803  000522  6F17               	movwf	printf@c& (0+255),b
  5804  000524  D002               	goto	l5689
  5805  000526                     l710:
  5806                           
  5807                           ; BSR set to: 1
  5808                           ;doprnt.c: 1213: else
  5809                           ;doprnt.c: 1214: c = prec;
  5810  000526  C108  F117         	movff	printf@prec,printf@c
  5811  00052A                     l5689:
  5812                           
  5813                           ; BSR set to: 1
  5814                           ;doprnt.c: 1215: prec -= c;
  5815  00052A  0101               	movlb	1	; () banked
  5816  00052C  5117               	movf	printf@c& (0+255),w,b
  5817  00052E  0101               	movlb	1	; () banked
  5818  000530  5F08               	subwf	printf@prec& (0+255),f,b
  5819  000532  0E00               	movlw	0
  5820  000534  0101               	movlb	1	; () banked
  5821  000536  BF17               	btfsc	printf@c& (0+255),7,b
  5822  000538  0EFF               	movlw	255
  5823  00053A  0101               	movlb	1	; () banked
  5824  00053C  5B09               	subwfb	(printf@prec+1)& (0+255),f,b
  5825                           
  5826                           ; BSR set to: 1
  5827                           ;doprnt.c: 1219: if(c)
  5828  00053E  0101               	movlb	1	; () banked
  5829  000540  5117               	movf	printf@c& (0+255),w,b
  5830  000542  0101               	movlb	1	; () banked
  5831  000544  B4D8               	btfsc	status,2,c
  5832  000546  D003               	goto	l5695
  5833                           
  5834                           ; BSR set to: 1
  5835                           ;doprnt.c: 1221: (putch('.') );
  5836  000548  0E2E               	movlw	46
  5837  00054A  EC15  F017         	call	_putch
  5838  00054E                     l5695:
  5839                           
  5840                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5841  00054E  0101               	movlb	1	; () banked
  5842  000550  5117               	movf	printf@c& (0+255),w,b
  5843  000552  EC9F  F004         	call	_scale
  5844  000556  C098  F100         	movff	?_scale,_printf$1337
  5845  00055A  C099  F101         	movff	?_scale+1,_printf$1337+1
  5846  00055E  C09A  F102         	movff	?_scale+2,_printf$1337+2
  5847                           
  5848                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5849  000562  C114  F08C         	movff	printf@fval,___ftmul@f2
  5850  000566  C115  F08D         	movff	printf@fval+1,___ftmul@f2+1
  5851  00056A  C116  F08E         	movff	printf@fval+2,___ftmul@f2+2
  5852  00056E  C100  F089         	movff	_printf$1337,___ftmul@f1
  5853  000572  C101  F08A         	movff	_printf$1337+1,___ftmul@f1+1
  5854  000576  C102  F08B         	movff	_printf$1337+2,___ftmul@f1+2
  5855  00057A  EC87  F00B         	call	___ftmul	;wreg free
  5856  00057E  C089  F0AE         	movff	?___ftmul,___fttol@f1
  5857  000582  C08A  F0AF         	movff	?___ftmul+1,___fttol@f1+1
  5858  000586  C08B  F0B0         	movff	?___ftmul+2,___fttol@f1+2
  5859  00058A  ECE2  F00C         	call	___fttol	;wreg free
  5860  00058E  C0AE  F110         	movff	?___fttol,printf@val
  5861  000592  C0AF  F111         	movff	?___fttol+1,printf@val+1
  5862  000596  C0B0  F112         	movff	?___fttol+2,printf@val+2
  5863  00059A  C0B1  F113         	movff	?___fttol+3,printf@val+3
  5864                           
  5865                           ;doprnt.c: 1228: while(c--) {
  5866  00059E  D06D               	goto	l5705
  5867  0005A0                     l5699:
  5868                           
  5869                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  5870  0005A0  C110  F024         	movff	printf@val,___lldiv@dividend
  5871  0005A4  C111  F025         	movff	printf@val+1,___lldiv@dividend+1
  5872  0005A8  C112  F026         	movff	printf@val+2,___lldiv@dividend+2
  5873  0005AC  C113  F027         	movff	printf@val+3,___lldiv@dividend+3
  5874  0005B0  0101               	movlb	1	; () banked
  5875  0005B2  5117               	movf	printf@c& (0+255),w,b
  5876  0005B4  0D04               	mullw	4
  5877  0005B6  0ECD               	movlw	low _dpowers
  5878  0005B8  24F3               	addwf	prodl,w,c
  5879  0005BA  6EF6               	movwf	tblptrl,c
  5880  0005BC  0EFD               	movlw	high _dpowers
  5881  0005BE  20F4               	addwfc	prodh,w,c
  5882  0005C0  6EF7               	movwf	tblptrh,c
  5883  0005C2                     	if	0	;There are less than 3 active tblptr bytes
  5884  0005C2                     	endif
  5885  0005C2  0009               	tblrd		*+
  5886  0005C4  CFF5 F028          	movff	tablat,___lldiv@divisor
  5887  0005C8  0009               	tblrd		*+
  5888  0005CA  CFF5 F029          	movff	tablat,___lldiv@divisor+1
  5889  0005CE  0009               	tblrd		*+
  5890  0005D0  CFF5 F02A          	movff	tablat,___lldiv@divisor+2
  5891  0005D4  000A               	tblrd		*-
  5892  0005D6  CFF5 F02B          	movff	tablat,___lldiv@divisor+3
  5893  0005DA  ECE9  F013         	call	___lldiv	;wreg free
  5894  0005DE  C024  F10C         	movff	?___lldiv,printf@tmpval
  5895  0005E2  C025  F10D         	movff	?___lldiv+1,printf@tmpval+1
  5896  0005E6  C026  F10E         	movff	?___lldiv+2,printf@tmpval+2
  5897  0005EA  C027  F10F         	movff	?___lldiv+3,printf@tmpval+3
  5898                           
  5899                           ;doprnt.c: 1230: tmpval.vd %= 10;
  5900  0005EE  C10C  F031         	movff	printf@tmpval,___llmod@dividend
  5901  0005F2  C10D  F032         	movff	printf@tmpval+1,___llmod@dividend+1
  5902  0005F6  C10E  F033         	movff	printf@tmpval+2,___llmod@dividend+2
  5903  0005FA  C10F  F034         	movff	printf@tmpval+3,___llmod@dividend+3
  5904  0005FE  0E0A               	movlw	10
  5905  000600  6E35               	movwf	___llmod@divisor,c
  5906  000602  0E00               	movlw	0
  5907  000604  6E36               	movwf	___llmod@divisor+1,c
  5908  000606  0E00               	movlw	0
  5909  000608  6E37               	movwf	___llmod@divisor+2,c
  5910  00060A  0E00               	movlw	0
  5911  00060C  6E38               	movwf	___llmod@divisor+3,c
  5912  00060E  EC9E  F014         	call	___llmod	;wreg free
  5913  000612  C031  F10C         	movff	?___llmod,printf@tmpval
  5914  000616  C032  F10D         	movff	?___llmod+1,printf@tmpval+1
  5915  00061A  C033  F10E         	movff	?___llmod+2,printf@tmpval+2
  5916  00061E  C034  F10F         	movff	?___llmod+3,printf@tmpval+3
  5917                           
  5918                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  5919  000622  0101               	movlb	1	; () banked
  5920  000624  510C               	movf	printf@tmpval& (0+255),w,b
  5921  000626  0F30               	addlw	48
  5922  000628  EC15  F017         	call	_putch
  5923                           
  5924                           ;doprnt.c: 1232: val %= dpowers[c];
  5925  00062C  C110  F031         	movff	printf@val,___llmod@dividend
  5926  000630  C111  F032         	movff	printf@val+1,___llmod@dividend+1
  5927  000634  C112  F033         	movff	printf@val+2,___llmod@dividend+2
  5928  000638  C113  F034         	movff	printf@val+3,___llmod@dividend+3
  5929  00063C  0101               	movlb	1	; () banked
  5930  00063E  5117               	movf	printf@c& (0+255),w,b
  5931  000640  0D04               	mullw	4
  5932  000642  0ECD               	movlw	low _dpowers
  5933  000644  24F3               	addwf	prodl,w,c
  5934  000646  6EF6               	movwf	tblptrl,c
  5935  000648  0EFD               	movlw	high _dpowers
  5936  00064A  20F4               	addwfc	prodh,w,c
  5937  00064C  6EF7               	movwf	tblptrh,c
  5938  00064E                     	if	0	;There are less than 3 active tblptr bytes
  5939  00064E                     	endif
  5940  00064E  0009               	tblrd		*+
  5941  000650  CFF5 F035          	movff	tablat,___llmod@divisor
  5942  000654  0009               	tblrd		*+
  5943  000656  CFF5 F036          	movff	tablat,___llmod@divisor+1
  5944  00065A  0009               	tblrd		*+
  5945  00065C  CFF5 F037          	movff	tablat,___llmod@divisor+2
  5946  000660  000A               	tblrd		*-
  5947  000662  CFF5 F038          	movff	tablat,___llmod@divisor+3
  5948  000666  EC9E  F014         	call	___llmod	;wreg free
  5949  00066A  C031  F110         	movff	?___llmod,printf@val
  5950  00066E  C032  F111         	movff	?___llmod+1,printf@val+1
  5951  000672  C033  F112         	movff	?___llmod+2,printf@val+2
  5952  000676  C034  F113         	movff	?___llmod+3,printf@val+3
  5953  00067A                     l5705:
  5954  00067A  0101               	movlb	1	; () banked
  5955  00067C  0717               	decf	printf@c& (0+255),f,b
  5956  00067E  0101               	movlb	1	; () banked
  5957  000680  2917               	incf	printf@c& (0+255),w,b
  5958  000682  B4D8               	btfsc	status,2,c
  5959  000684  D008               	goto	l5711
  5960  000686  D78C               	goto	l5699
  5961  000688                     l5707:
  5962                           
  5963                           ; BSR set to: 1
  5964                           ;doprnt.c: 1236: (putch('0') );
  5965  000688  0E30               	movlw	48
  5966  00068A  EC15  F017         	call	_putch
  5967                           
  5968                           ;doprnt.c: 1237: prec--;
  5969  00068E  0101               	movlb	1	; () banked
  5970  000690  0708               	decf	printf@prec& (0+255),f,b
  5971  000692  A0D8               	btfss	status,0,c
  5972  000694  0709               	decf	(printf@prec+1)& (0+255),f,b
  5973  000696                     l5711:
  5974                           
  5975                           ; BSR set to: 1
  5976  000696  0101               	movlb	1	; () banked
  5977  000698  5108               	movf	printf@prec& (0+255),w,b
  5978  00069A  0101               	movlb	1	; () banked
  5979  00069C  1109               	iorwf	(printf@prec+1)& (0+255),w,b
  5980  00069E  B4D8               	btfsc	status,2,c
  5981  0006A0  D13E               	goto	l5779
  5982  0006A2  D7F2               	goto	l5707
  5983  0006A4                     l682:
  5984                           
  5985                           ; BSR set to: 1
  5986                           ;doprnt.c: 1246: }
  5987                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  5988  0006A4  0101               	movlb	1	; () banked
  5989  0006A6  BF06               	btfsc	printf@flag& (0+255),7,b
  5990  0006A8  D023               	goto	l5723
  5991                           
  5992                           ; BSR set to: 1
  5993                           ;doprnt.c: 1253: {
  5994                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  5995  0006AA  C104  FFD9         	movff	printf@ap,fsr2l
  5996  0006AE  C105  FFDA         	movff	printf@ap+1,fsr2h
  5997  0006B2  CFDE F110          	movff	postinc2,printf@val
  5998  0006B6  CFDD F111          	movff	postdec2,printf@val+1
  5999  0006BA  0101               	movlb	1	; () banked
  6000  0006BC  0E00               	movlw	0
  6001  0006BE  BF11               	btfsc	(printf@val+1)& (0+255),7,b
  6002  0006C0  0EFF               	movlw	-1
  6003  0006C2  6F12               	movwf	(printf@val+2)& (0+255),b
  6004  0006C4  6F13               	movwf	(printf@val+3)& (0+255),b
  6005                           
  6006                           ; BSR set to: 1
  6007  0006C6  0E02               	movlw	2
  6008  0006C8  0101               	movlb	1	; () banked
  6009  0006CA  2704               	addwf	printf@ap& (0+255),f,b
  6010  0006CC  0E00               	movlw	0
  6011  0006CE  2305               	addwfc	(printf@ap+1)& (0+255),f,b
  6012                           
  6013                           ; BSR set to: 1
  6014                           ;doprnt.c: 1261: if((long)val < 0) {
  6015  0006D0  0101               	movlb	1	; () banked
  6016  0006D2  AF13               	btfss	(printf@val+3)& (0+255),7,b
  6017  0006D4  D06E               	goto	l5757
  6018                           
  6019                           ; BSR set to: 1
  6020                           ;doprnt.c: 1262: flag |= 0x03;
  6021  0006D6  0E03               	movlw	3
  6022  0006D8  0101               	movlb	1	; () banked
  6023  0006DA  1306               	iorwf	printf@flag& (0+255),f,b
  6024                           
  6025                           ; BSR set to: 1
  6026                           ;doprnt.c: 1263: val = -val;
  6027  0006DC  0101               	movlb	1	; () banked
  6028  0006DE  1F13               	comf	(printf@val+3)& (0+255),f,b
  6029  0006E0  1F12               	comf	(printf@val+2)& (0+255),f,b
  6030  0006E2  1F11               	comf	(printf@val+1)& (0+255),f,b
  6031  0006E4  6D10               	negf	printf@val& (0+255),b
  6032  0006E6  0E00               	movlw	0
  6033  0006E8  2311               	addwfc	(printf@val+1)& (0+255),f,b
  6034  0006EA  2312               	addwfc	(printf@val+2)& (0+255),f,b
  6035  0006EC  2313               	addwfc	(printf@val+3)& (0+255),f,b
  6036                           
  6037                           ; BSR set to: 1
  6038                           ;doprnt.c: 1264: }
  6039                           ;doprnt.c: 1266: }
  6040  0006EE  D061               	goto	l5757
  6041  0006F0                     l5723:
  6042                           
  6043                           ; BSR set to: 1
  6044                           ;doprnt.c: 1268: else
  6045                           ;doprnt.c: 1273: {
  6046                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6047  0006F0  C104  FFD9         	movff	printf@ap,fsr2l
  6048  0006F4  C105  FFDA         	movff	printf@ap+1,fsr2h
  6049  0006F8  CFDE F0C4          	movff	postinc2,??_printf
  6050  0006FC  CFDD F0C5          	movff	postdec2,??_printf+1
  6051  000700  C0C4  F110         	movff	??_printf,printf@val
  6052  000704  C0C5  F111         	movff	??_printf+1,printf@val+1
  6053  000708  0101               	movlb	1	; () banked
  6054  00070A  6B12               	clrf	(printf@val+2)& (0+255),b
  6055  00070C  6B13               	clrf	(printf@val+3)& (0+255),b
  6056                           
  6057                           ; BSR set to: 1
  6058  00070E  0E02               	movlw	2
  6059  000710  0101               	movlb	1	; () banked
  6060  000712  2704               	addwf	printf@ap& (0+255),f,b
  6061  000714  0E00               	movlw	0
  6062  000716  2305               	addwfc	(printf@ap+1)& (0+255),f,b
  6063                           
  6064                           ; BSR set to: 1
  6065                           ;doprnt.c: 1287: }
  6066                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6067  000718  D04C               	goto	l5757
  6068  00071A                     l5727:
  6069                           
  6070                           ; BSR set to: 1
  6071                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6072  00071A  0E01               	movlw	1
  6073  00071C  0101               	movlb	1	; () banked
  6074  00071E  6F17               	movwf	printf@c& (0+255),b
  6075  000720                     l5729:
  6076                           
  6077                           ; BSR set to: 1
  6078  000720  0E0A               	movlw	10
  6079  000722  0101               	movlb	1	; () banked
  6080  000724  1917               	xorwf	printf@c& (0+255),w,b
  6081  000726  B4D8               	btfsc	status,2,c
  6082  000728  D04D               	goto	l5759
  6083                           
  6084                           ; BSR set to: 1
  6085                           ;doprnt.c: 1306: if(val < dpowers[c])
  6086                           
  6087                           ; BSR set to: 1
  6088                           
  6089                           ; BSR set to: 1
  6090  00072A  0101               	movlb	1	; () banked
  6091  00072C  5117               	movf	printf@c& (0+255),w,b
  6092  00072E  0D04               	mullw	4
  6093  000730  0ECD               	movlw	low _dpowers
  6094  000732  24F3               	addwf	prodl,w,c
  6095  000734  6EF6               	movwf	tblptrl,c
  6096  000736  0EFD               	movlw	high _dpowers
  6097  000738  20F4               	addwfc	prodh,w,c
  6098  00073A  6EF7               	movwf	tblptrh,c
  6099  00073C                     	if	0	;There are less than 3 active tblptr bytes
  6100  00073C                     	endif
  6101  00073C  0009               	tblrd		*+
  6102  00073E  50F5               	movf	tablat,w,c
  6103  000740  0101               	movlb	1	; () banked
  6104  000742  5D10               	subwf	printf@val& (0+255),w,b
  6105  000744  0009               	tblrd		*+
  6106  000746  50F5               	movf	tablat,w,c
  6107  000748  0101               	movlb	1	; () banked
  6108  00074A  5911               	subwfb	(printf@val+1)& (0+255),w,b
  6109  00074C  0009               	tblrd		*+
  6110  00074E  50F5               	movf	tablat,w,c
  6111  000750  0101               	movlb	1	; () banked
  6112  000752  5912               	subwfb	(printf@val+2)& (0+255),w,b
  6113  000754  0009               	tblrd		*+
  6114  000756  50F5               	movf	tablat,w,c
  6115  000758  0101               	movlb	1	; () banked
  6116  00075A  5913               	subwfb	(printf@val+3)& (0+255),w,b
  6117  00075C  A0D8               	btfss	status,0,c
  6118  00075E  D032               	goto	l5759
  6119                           
  6120                           ; BSR set to: 1
  6121                           
  6122                           ; BSR set to: 1
  6123                           
  6124                           ; BSR set to: 1
  6125                           ;doprnt.c: 1307: break;
  6126  000760  0101               	movlb	1	; () banked
  6127  000762  2B17               	incf	printf@c& (0+255),f,b
  6128  000764  D7DD               	goto	l5729
  6129  000766                     l5741:
  6130                           
  6131                           ; BSR set to: 1
  6132                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6133  000766  0E01               	movlw	1
  6134  000768  0101               	movlb	1	; () banked
  6135  00076A  6F17               	movwf	printf@c& (0+255),b
  6136  00076C                     l5743:
  6137                           
  6138                           ; BSR set to: 1
  6139  00076C  0E08               	movlw	8
  6140  00076E  0101               	movlb	1	; () banked
  6141  000770  1917               	xorwf	printf@c& (0+255),w,b
  6142  000772  B4D8               	btfsc	status,2,c
  6143  000774  D027               	goto	l5759
  6144                           
  6145                           ; BSR set to: 1
  6146                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6147                           
  6148                           ; BSR set to: 1
  6149                           
  6150                           ; BSR set to: 1
  6151  000776  0101               	movlb	1	; () banked
  6152  000778  5117               	movf	printf@c& (0+255),w,b
  6153  00077A  0D04               	mullw	4
  6154  00077C  0E43               	movlw	low _hexpowers
  6155  00077E  24F3               	addwf	prodl,w,c
  6156  000780  6EF6               	movwf	tblptrl,c
  6157  000782  0EFE               	movlw	high _hexpowers
  6158  000784  20F4               	addwfc	prodh,w,c
  6159  000786  6EF7               	movwf	tblptrh,c
  6160  000788                     	if	0	;There are less than 3 active tblptr bytes
  6161  000788                     	endif
  6162  000788  0009               	tblrd		*+
  6163  00078A  50F5               	movf	tablat,w,c
  6164  00078C  0101               	movlb	1	; () banked
  6165  00078E  5D10               	subwf	printf@val& (0+255),w,b
  6166  000790  0009               	tblrd		*+
  6167  000792  50F5               	movf	tablat,w,c
  6168  000794  0101               	movlb	1	; () banked
  6169  000796  5911               	subwfb	(printf@val+1)& (0+255),w,b
  6170  000798  0009               	tblrd		*+
  6171  00079A  50F5               	movf	tablat,w,c
  6172  00079C  0101               	movlb	1	; () banked
  6173  00079E  5912               	subwfb	(printf@val+2)& (0+255),w,b
  6174  0007A0  0009               	tblrd		*+
  6175  0007A2  50F5               	movf	tablat,w,c
  6176  0007A4  0101               	movlb	1	; () banked
  6177  0007A6  5913               	subwfb	(printf@val+3)& (0+255),w,b
  6178  0007A8  A0D8               	btfss	status,0,c
  6179  0007AA  D00C               	goto	l5759
  6180                           
  6181                           ; BSR set to: 1
  6182                           
  6183                           ; BSR set to: 1
  6184                           
  6185                           ; BSR set to: 1
  6186                           ;doprnt.c: 1318: break;
  6187  0007AC  0101               	movlb	1	; () banked
  6188  0007AE  2B17               	incf	printf@c& (0+255),f,b
  6189  0007B0  D7DD               	goto	l5743
  6190  0007B2                     l5757:
  6191                           
  6192                           ; BSR set to: 1
  6193  0007B2  0101               	movlb	1	; () banked
  6194  0007B4  5106               	movf	printf@flag& (0+255),w,b
  6195  0007B6  0B80               	andlw	128
  6196                           
  6197                           ; Switch size 1, requested type "space"
  6198                           ; Number of cases is 2, Range of values is 0 to 128
  6199                           ; switch strategies available:
  6200                           ; Name         Instructions Cycles
  6201                           ; simple_byte            7     4 (average)
  6202                           ;	Chosen strategy is simple_byte
  6203  0007B8  0A00               	xorlw	0	; case 0
  6204  0007BA  B4D8               	btfsc	status,2,c
  6205  0007BC  D7AE               	goto	l5727
  6206  0007BE  0A80               	xorlw	128	; case 128
  6207  0007C0  B4D8               	btfsc	status,2,c
  6208  0007C2  D7D1               	goto	l5741
  6209  0007C4                     l5759:
  6210                           
  6211                           ; BSR set to: 1
  6212                           ;doprnt.c: 1422: {
  6213                           ;doprnt.c: 1438: if(flag & 0x03)
  6214  0007C4  0E03               	movlw	3
  6215  0007C6  0101               	movlb	1	; () banked
  6216  0007C8  1506               	andwf	printf@flag& (0+255),w,b
  6217  0007CA  0100               	movlb	0	; () banked
  6218  0007CC  6FC4               	movwf	??_printf& (0+255),b
  6219  0007CE  0E00               	movlw	0
  6220  0007D0  0101               	movlb	1	; () banked
  6221  0007D2  1507               	andwf	(printf@flag+1)& (0+255),w,b
  6222  0007D4  0100               	movlb	0	; () banked
  6223  0007D6  6FC5               	movwf	(??_printf+1)& (0+255),b
  6224  0007D8  0100               	movlb	0	; () banked
  6225  0007DA  51C4               	movf	??_printf& (0+255),w,b
  6226  0007DC  0100               	movlb	0	; () banked
  6227  0007DE  11C5               	iorwf	(??_printf+1)& (0+255),w,b
  6228  0007E0  B4D8               	btfsc	status,2,c
  6229  0007E2  D003               	goto	l5763
  6230                           
  6231                           ; BSR set to: 0
  6232                           ;doprnt.c: 1439: (putch('-') );
  6233  0007E4  0E2D               	movlw	45
  6234  0007E6  EC15  F017         	call	_putch
  6235  0007EA                     l5763:
  6236                           
  6237                           ;doprnt.c: 1469: }
  6238                           ;doprnt.c: 1472: prec = c;
  6239  0007EA  0101               	movlb	1	; () banked
  6240  0007EC  5117               	movf	printf@c& (0+255),w,b
  6241  0007EE  0101               	movlb	1	; () banked
  6242  0007F0  6F08               	movwf	printf@prec& (0+255),b
  6243  0007F2  6B09               	clrf	(printf@prec+1)& (0+255),b
  6244  0007F4  BF08               	btfsc	printf@prec& (0+255),7,b
  6245  0007F6  0709               	decf	(printf@prec+1)& (0+255),f,b
  6246                           
  6247                           ;doprnt.c: 1474: while(prec--) {
  6248  0007F8  D087               	goto	l5777
  6249  0007FA                     l5765:
  6250                           
  6251                           ; BSR set to: 1
  6252                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6253  0007FA  C108  F0C4         	movff	printf@prec,??_printf
  6254  0007FE  C109  F0C5         	movff	printf@prec+1,??_printf+1
  6255  000802  0100               	movlb	0	; () banked
  6256  000804  90D8               	bcf	status,0,c
  6257  000806  37C4               	rlcf	??_printf& (0+255),f,b
  6258  000808  37C5               	rlcf	(??_printf+1)& (0+255),f,b
  6259  00080A  0100               	movlb	0	; () banked
  6260  00080C  90D8               	bcf	status,0,c
  6261  00080E  37C4               	rlcf	??_printf& (0+255),f,b
  6262  000810  37C5               	rlcf	(??_printf+1)& (0+255),f,b
  6263  000812  0ECD               	movlw	low _dpowers
  6264  000814  0100               	movlb	0	; () banked
  6265  000816  25C4               	addwf	??_printf& (0+255),w,b
  6266  000818  6EF6               	movwf	tblptrl,c
  6267  00081A  0EFD               	movlw	high _dpowers
  6268  00081C  21C5               	addwfc	(??_printf+1)& (0+255),w,b
  6269  00081E  6EF7               	movwf	tblptrh,c
  6270  000820                     	if	0	;There are less than 3 active tblptr bytes
  6271  000820                     	endif
  6272  000820  0009               	tblrd		*+
  6273  000822  CFF5 F028          	movff	tablat,___lldiv@divisor
  6274  000826  0009               	tblrd		*+
  6275  000828  CFF5 F029          	movff	tablat,___lldiv@divisor+1
  6276  00082C  0009               	tblrd		*+
  6277  00082E  CFF5 F02A          	movff	tablat,___lldiv@divisor+2
  6278  000832  000A               	tblrd		*-
  6279  000834  CFF5 F02B          	movff	tablat,___lldiv@divisor+3
  6280  000838  C110  F024         	movff	printf@val,___lldiv@dividend
  6281  00083C  C111  F025         	movff	printf@val+1,___lldiv@dividend+1
  6282  000840  C112  F026         	movff	printf@val+2,___lldiv@dividend+2
  6283  000844  C113  F027         	movff	printf@val+3,___lldiv@dividend+3
  6284  000848  ECE9  F013         	call	___lldiv	;wreg free
  6285  00084C  C024  F031         	movff	?___lldiv,___llmod@dividend
  6286  000850  C025  F032         	movff	?___lldiv+1,___llmod@dividend+1
  6287  000854  C026  F033         	movff	?___lldiv+2,___llmod@dividend+2
  6288  000858  C027  F034         	movff	?___lldiv+3,___llmod@dividend+3
  6289  00085C  0E0A               	movlw	10
  6290  00085E  6E35               	movwf	___llmod@divisor,c
  6291  000860  0E00               	movlw	0
  6292  000862  6E36               	movwf	___llmod@divisor+1,c
  6293  000864  0E00               	movlw	0
  6294  000866  6E37               	movwf	___llmod@divisor+2,c
  6295  000868  0E00               	movlw	0
  6296  00086A  6E38               	movwf	___llmod@divisor+3,c
  6297  00086C  EC9E  F014         	call	___llmod	;wreg free
  6298  000870  5031               	movf	?___llmod,w,c
  6299  000872  0F30               	addlw	48
  6300  000874  0101               	movlb	1	; () banked
  6301  000876  6F17               	movwf	printf@c& (0+255),b
  6302                           
  6303                           ;doprnt.c: 1491: break;
  6304  000878  D043               	goto	l5775
  6305  00087A                     l5767:
  6306                           
  6307                           ; BSR set to: 1
  6308                           ;doprnt.c: 1499: {
  6309                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6310  00087A  C110  F024         	movff	printf@val,___lldiv@dividend
  6311  00087E  C111  F025         	movff	printf@val+1,___lldiv@dividend+1
  6312  000882  C112  F026         	movff	printf@val+2,___lldiv@dividend+2
  6313  000886  C113  F027         	movff	printf@val+3,___lldiv@dividend+3
  6314  00088A  C108  F0C4         	movff	printf@prec,??_printf
  6315  00088E  C109  F0C5         	movff	printf@prec+1,??_printf+1
  6316  000892  0100               	movlb	0	; () banked
  6317  000894  90D8               	bcf	status,0,c
  6318  000896  37C4               	rlcf	??_printf& (0+255),f,b
  6319  000898  37C5               	rlcf	(??_printf+1)& (0+255),f,b
  6320  00089A  0100               	movlb	0	; () banked
  6321  00089C  90D8               	bcf	status,0,c
  6322  00089E  37C4               	rlcf	??_printf& (0+255),f,b
  6323  0008A0  37C5               	rlcf	(??_printf+1)& (0+255),f,b
  6324  0008A2  0E43               	movlw	low _hexpowers
  6325  0008A4  0100               	movlb	0	; () banked
  6326  0008A6  25C4               	addwf	??_printf& (0+255),w,b
  6327  0008A8  6EF6               	movwf	tblptrl,c
  6328  0008AA  0EFE               	movlw	high _hexpowers
  6329  0008AC  21C5               	addwfc	(??_printf+1)& (0+255),w,b
  6330  0008AE  6EF7               	movwf	tblptrh,c
  6331  0008B0                     	if	0	;There are less than 3 active tblptr bytes
  6332  0008B0                     	endif
  6333  0008B0  0009               	tblrd		*+
  6334  0008B2  CFF5 F028          	movff	tablat,___lldiv@divisor
  6335  0008B6  0009               	tblrd		*+
  6336  0008B8  CFF5 F029          	movff	tablat,___lldiv@divisor+1
  6337  0008BC  0009               	tblrd		*+
  6338  0008BE  CFF5 F02A          	movff	tablat,___lldiv@divisor+2
  6339  0008C2  000A               	tblrd		*-
  6340  0008C4  CFF5 F02B          	movff	tablat,___lldiv@divisor+3
  6341  0008C8  ECE9  F013         	call	___lldiv	;wreg free
  6342  0008CC  5024               	movf	?___lldiv,w,c
  6343  0008CE  0B0F               	andlw	15
  6344  0008D0  0101               	movlb	1	; () banked
  6345  0008D2  6F03               	movwf	printf@idx& (0+255),b
  6346                           
  6347                           ; BSR set to: 1
  6348                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6349  0008D4  0101               	movlb	1	; () banked
  6350  0008D6  5103               	movf	printf@idx& (0+255),w,b
  6351  0008D8  0D01               	mullw	1
  6352  0008DA  0E41               	movlw	low STR_23
  6353  0008DC  24F3               	addwf	prodl,w,c
  6354  0008DE  6EF6               	movwf	tblptrl,c
  6355  0008E0  0EFF               	movlw	high STR_23
  6356  0008E2  20F4               	addwfc	prodh,w,c
  6357  0008E4  6EF7               	movwf	tblptrh,c
  6358  0008E6                     	if	0	;There are less than 3 active tblptr bytes
  6359  0008E6                     	endif
  6360  0008E6  0008               	tblrd		*
  6361  0008E8  CFF5 F117          	movff	tablat,printf@c
  6362                           
  6363                           ; BSR set to: 1
  6364                           ;doprnt.c: 1523: }
  6365                           
  6366                           ;doprnt.c: 1508: }
  6367                           ;doprnt.c: 1510: break;
  6368  0008EC  D009               	goto	l5775
  6369  0008EE                     l5773:
  6370                           
  6371                           ; BSR set to: 1
  6372  0008EE  0101               	movlb	1	; () banked
  6373  0008F0  5106               	movf	printf@flag& (0+255),w,b
  6374  0008F2  0B80               	andlw	128
  6375                           
  6376                           ; Switch size 1, requested type "space"
  6377                           ; Number of cases is 2, Range of values is 0 to 128
  6378                           ; switch strategies available:
  6379                           ; Name         Instructions Cycles
  6380                           ; simple_byte            7     4 (average)
  6381                           ;	Chosen strategy is simple_byte
  6382  0008F4  0A00               	xorlw	0	; case 0
  6383  0008F6  B4D8               	btfsc	status,2,c
  6384  0008F8  D780               	goto	l5765
  6385  0008FA  0A80               	xorlw	128	; case 128
  6386  0008FC  B4D8               	btfsc	status,2,c
  6387  0008FE  D7BD               	goto	l5767
  6388  000900                     l5775:
  6389                           
  6390                           ; BSR set to: 1
  6391                           ;doprnt.c: 1524: (putch(c) );
  6392  000900  0101               	movlb	1	; () banked
  6393  000902  5117               	movf	printf@c& (0+255),w,b
  6394  000904  EC15  F017         	call	_putch
  6395  000908                     l5777:
  6396  000908  0101               	movlb	1	; () banked
  6397  00090A  0708               	decf	printf@prec& (0+255),f,b
  6398  00090C  A0D8               	btfss	status,0,c
  6399  00090E  0709               	decf	(printf@prec+1)& (0+255),f,b
  6400  000910  0101               	movlb	1	; () banked
  6401  000912  2908               	incf	printf@prec& (0+255),w,b
  6402  000914  E1EC               	bnz	l5773
  6403  000916  0101               	movlb	1	; () banked
  6404  000918  2909               	incf	(printf@prec+1)& (0+255),w,b
  6405  00091A  A4D8               	btfss	status,2,c
  6406  00091C  D7E8               	goto	l5773
  6407  00091E                     l5779:
  6408  00091E  C0BD  FFF6         	movff	printf@f,tblptrl
  6409  000922  C0BE  FFF7         	movff	printf@f+1,tblptrh
  6410  000926  0100               	movlb	0	; () banked
  6411  000928  4BBD               	infsnz	printf@f& (0+255),f,b
  6412  00092A  2BBE               	incf	(printf@f+1)& (0+255),f,b
  6413  00092C                     	if	0	;tblptru may be non-zero
  6414  00092C                     	endif
  6415  00092C                     	if	0	;tblptru may be non-zero
  6416  00092C                     	endif
  6417  00092C  0008               	tblrd		*
  6418  00092E  CFF5 F117          	movff	tablat,printf@c
  6419  000932  0101               	movlb	1	; () banked
  6420  000934  5117               	movf	printf@c& (0+255),w,b
  6421  000936  B4D8               	btfsc	status,2,c
  6422  000938  0012               	return	
  6423  00093A  EF11  F000         	goto	l5561
  6424  00093E                     __end_of_printf:
  6425                           	opt stack 0
  6426                           tblptru	equ	0xFF8
  6427                           tblptrh	equ	0xFF7
  6428                           tblptrl	equ	0xFF6
  6429                           tablat	equ	0xFF5
  6430                           prodh	equ	0xFF4
  6431                           prodl	equ	0xFF3
  6432                           intcon	equ	0xFF2
  6433                           postinc0	equ	0xFEE
  6434                           wreg	equ	0xFE8
  6435                           postdec1	equ	0xFE5
  6436                           fsr1l	equ	0xFE1
  6437                           indf2	equ	0xFDF
  6438                           postinc2	equ	0xFDE
  6439                           postdec2	equ	0xFDD
  6440                           fsr2h	equ	0xFDA
  6441                           fsr2l	equ	0xFD9
  6442                           status	equ	0xFD8
  6443                           
  6444 ;; *************** function _scale *****************
  6445 ;; Defined at:
  6446 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6447 ;; Parameters:    Size  Location     Type
  6448 ;;  scl             1    wreg     char 
  6449 ;; Auto vars:     Size  Location     Type
  6450 ;;  scl             1   30[BANK0 ] char 
  6451 ;; Return value:  Size  Location     Type
  6452 ;;                  3   24[BANK0 ] char 
  6453 ;; Registers used:
  6454 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6455 ;; Tracked objects:
  6456 ;;		On entry : 0/0
  6457 ;;		On exit  : 0/0
  6458 ;;		Unchanged: 0/0
  6459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6460 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6461 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6463 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6464 ;;Total ram usage:        7 bytes
  6465 ;; Hardware stack levels used:    1
  6466 ;; Hardware stack levels required when called:    5
  6467 ;; This function calls:
  6468 ;;		___awdiv
  6469 ;;		___awmod
  6470 ;;		___ftmul
  6471 ;;		___wmul
  6472 ;; This function is called by:
  6473 ;;		_printf
  6474 ;; This function uses a non-reentrant model
  6475 ;;
  6476                           
  6477                           	psect	text24
  6478  00093E                     __ptext24:
  6479                           	opt stack 0
  6480  00093E                     _scale:
  6481                           	opt stack 23
  6482                           
  6483                           ; BSR set to: 1
  6484                           ;incstack = 0
  6485                           ;scale@scl stored from wreg
  6486  00093E  0100               	movlb	0	; () banked
  6487  000940  6F9E               	movwf	scale@scl& (0+255),b
  6488                           
  6489                           ;doprnt.c: 428: if(scl < 0) {
  6490  000942  0100               	movlb	0	; () banked
  6491  000944  AF9E               	btfss	scale@scl& (0+255),7,b
  6492  000946  D104               	goto	l5345
  6493                           
  6494                           ; BSR set to: 0
  6495                           ;doprnt.c: 429: scl = -scl;
  6496  000948  0100               	movlb	0	; () banked
  6497  00094A  6D9E               	negf	scale@scl& (0+255),b
  6498                           
  6499                           ;doprnt.c: 430: if(scl>=110)
  6500  00094C  0100               	movlb	0	; () banked
  6501  00094E  519E               	movf	scale@scl& (0+255),w,b
  6502  000950  0A80               	xorlw	128
  6503  000952  0F12               	addlw	-238
  6504  000954  A0D8               	btfss	status,0,c
  6505  000956  D094               	goto	l5335
  6506                           
  6507                           ; BSR set to: 0
  6508                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6509  000958  0E00               	movlw	0
  6510  00095A  6E35               	movwf	___wmul@multiplicand+1,c
  6511  00095C  0E03               	movlw	3
  6512  00095E  6E34               	movwf	___wmul@multiplicand,c
  6513  000960  0E00               	movlw	0
  6514  000962  6E2D               	movwf	___awdiv@divisor+1,c
  6515  000964  0E0A               	movlw	10
  6516  000966  6E2C               	movwf	___awdiv@divisor,c
  6517  000968  0E00               	movlw	0
  6518  00096A  6E27               	movwf	___awmod@divisor+1,c
  6519  00096C  0E64               	movlw	100
  6520  00096E  6E26               	movwf	___awmod@divisor,c
  6521  000970  0100               	movlb	0	; () banked
  6522  000972  519E               	movf	scale@scl& (0+255),w,b
  6523  000974  6E24               	movwf	___awmod@dividend,c
  6524  000976  6A25               	clrf	___awmod@dividend+1,c
  6525  000978  BE24               	btfsc	___awmod@dividend,7,c
  6526  00097A  0625               	decf	___awmod@dividend+1,f,c
  6527  00097C  EC66  F014         	call	___awmod	;wreg free
  6528  000980  C024  F02A         	movff	?___awmod,___awdiv@dividend
  6529  000984  C025  F02B         	movff	?___awmod+1,___awdiv@dividend+1
  6530  000988  ECA7  F013         	call	___awdiv	;wreg free
  6531  00098C  0E09               	movlw	9
  6532  00098E  242A               	addwf	?___awdiv,w,c
  6533  000990  6E32               	movwf	___wmul@multiplier,c
  6534  000992  0E00               	movlw	0
  6535  000994  202B               	addwfc	?___awdiv+1,w,c
  6536  000996  6E33               	movwf	___wmul@multiplier+1,c
  6537  000998  ECF0  F016         	call	___wmul	;wreg free
  6538  00099C  0EF5               	movlw	low __npowers_
  6539  00099E  2432               	addwf	?___wmul,w,c
  6540  0009A0  6EF6               	movwf	tblptrl,c
  6541  0009A2  0EFD               	movlw	high __npowers_
  6542  0009A4  2033               	addwfc	?___wmul+1,w,c
  6543  0009A6  6EF7               	movwf	tblptrh,c
  6544  0009A8                     	if	0	;There are less than 3 active tblptr bytes
  6545  0009A8                     	endif
  6546  0009A8  0009               	tblrd		*+
  6547  0009AA  CFF5 F08C          	movff	tablat,___ftmul@f2
  6548  0009AE  0009               	tblrd		*+
  6549  0009B0  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  6550  0009B4  000A               	tblrd		*-
  6551  0009B6  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  6552  0009BA  0E00               	movlw	0
  6553  0009BC  6E2D               	movwf	___awdiv@divisor+1,c
  6554  0009BE  0E64               	movlw	100
  6555  0009C0  6E2C               	movwf	___awdiv@divisor,c
  6556  0009C2  0100               	movlb	0	; () banked
  6557  0009C4  519E               	movf	scale@scl& (0+255),w,b
  6558  0009C6  6E2A               	movwf	___awdiv@dividend,c
  6559  0009C8  6A2B               	clrf	___awdiv@dividend+1,c
  6560  0009CA  BE2A               	btfsc	___awdiv@dividend,7,c
  6561  0009CC  062B               	decf	___awdiv@dividend+1,f,c
  6562  0009CE  ECA7  F013         	call	___awdiv	;wreg free
  6563  0009D2  0E12               	movlw	18
  6564  0009D4  242A               	addwf	?___awdiv,w,c
  6565  0009D6  6E32               	movwf	___wmul@multiplier,c
  6566  0009D8  0E00               	movlw	0
  6567  0009DA  202B               	addwfc	?___awdiv+1,w,c
  6568  0009DC  6E33               	movwf	___wmul@multiplier+1,c
  6569  0009DE  0E00               	movlw	0
  6570  0009E0  6E35               	movwf	___wmul@multiplicand+1,c
  6571  0009E2  0E03               	movlw	3
  6572  0009E4  6E34               	movwf	___wmul@multiplicand,c
  6573  0009E6  ECF0  F016         	call	___wmul	;wreg free
  6574  0009EA  0EF5               	movlw	low __npowers_
  6575  0009EC  2432               	addwf	?___wmul,w,c
  6576  0009EE  6EF6               	movwf	tblptrl,c
  6577  0009F0  0EFD               	movlw	high __npowers_
  6578  0009F2  2033               	addwfc	?___wmul+1,w,c
  6579  0009F4  6EF7               	movwf	tblptrh,c
  6580  0009F6                     	if	0	;There are less than 3 active tblptr bytes
  6581  0009F6                     	endif
  6582  0009F6  0009               	tblrd		*+
  6583  0009F8  CFF5 F089          	movff	tablat,___ftmul@f1
  6584  0009FC  0009               	tblrd		*+
  6585  0009FE  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  6586  000A02  000A               	tblrd		*-
  6587  000A04  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  6588  000A08  EC87  F00B         	call	___ftmul	;wreg free
  6589  000A0C  C089  F09B         	movff	?___ftmul,_scale$1336
  6590  000A10  C08A  F09C         	movff	?___ftmul+1,_scale$1336+1
  6591  000A14  C08B  F09D         	movff	?___ftmul+2,_scale$1336+2
  6592                           
  6593                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6594  000A18  C09B  F089         	movff	_scale$1336,___ftmul@f1
  6595  000A1C  C09C  F08A         	movff	_scale$1336+1,___ftmul@f1+1
  6596  000A20  C09D  F08B         	movff	_scale$1336+2,___ftmul@f1+2
  6597  000A24  0E00               	movlw	0
  6598  000A26  6E35               	movwf	___wmul@multiplicand+1,c
  6599  000A28  0E03               	movlw	3
  6600  000A2A  6E34               	movwf	___wmul@multiplicand,c
  6601  000A2C  0E00               	movlw	0
  6602  000A2E  6E27               	movwf	___awmod@divisor+1,c
  6603  000A30  0E0A               	movlw	10
  6604  000A32  6E26               	movwf	___awmod@divisor,c
  6605  000A34  0100               	movlb	0	; () banked
  6606  000A36  519E               	movf	scale@scl& (0+255),w,b
  6607  000A38  6E24               	movwf	___awmod@dividend,c
  6608  000A3A  6A25               	clrf	___awmod@dividend+1,c
  6609  000A3C  BE24               	btfsc	___awmod@dividend,7,c
  6610  000A3E  0625               	decf	___awmod@dividend+1,f,c
  6611  000A40  EC66  F014         	call	___awmod	;wreg free
  6612  000A44  C024  F032         	movff	?___awmod,___wmul@multiplier
  6613  000A48  C025  F033         	movff	?___awmod+1,___wmul@multiplier+1
  6614  000A4C  ECF0  F016         	call	___wmul	;wreg free
  6615  000A50  0EF5               	movlw	low __npowers_
  6616  000A52  2432               	addwf	?___wmul,w,c
  6617  000A54  6EF6               	movwf	tblptrl,c
  6618  000A56  0EFD               	movlw	high __npowers_
  6619  000A58  2033               	addwfc	?___wmul+1,w,c
  6620  000A5A  6EF7               	movwf	tblptrh,c
  6621  000A5C                     	if	0	;There are less than 3 active tblptr bytes
  6622  000A5C                     	endif
  6623  000A5C  0009               	tblrd		*+
  6624  000A5E  CFF5 F08C          	movff	tablat,___ftmul@f2
  6625  000A62  0009               	tblrd		*+
  6626  000A64  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  6627  000A68  000A               	tblrd		*-
  6628  000A6A  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  6629  000A6E  EC87  F00B         	call	___ftmul	;wreg free
  6630  000A72  C089  F098         	movff	?___ftmul,?_scale
  6631  000A76  C08A  F099         	movff	?___ftmul+1,?_scale+1
  6632  000A7A  C08B  F09A         	movff	?___ftmul+2,?_scale+2
  6633  000A7E  0012               	return	
  6634  000A80                     l5335:
  6635                           
  6636                           ;doprnt.c: 432: else if(scl > 10)
  6637  000A80  0100               	movlb	0	; () banked
  6638  000A82  519E               	movf	scale@scl& (0+255),w,b
  6639  000A84  0A80               	xorlw	128
  6640  000A86  0F75               	addlw	-139
  6641  000A88  A0D8               	btfss	status,0,c
  6642  000A8A  D04F               	goto	l5341
  6643                           
  6644                           ; BSR set to: 0
  6645                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6646  000A8C  0E00               	movlw	0
  6647  000A8E  6E2D               	movwf	___awdiv@divisor+1,c
  6648  000A90  0E0A               	movlw	10
  6649  000A92  6E2C               	movwf	___awdiv@divisor,c
  6650  000A94  0100               	movlb	0	; () banked
  6651  000A96  519E               	movf	scale@scl& (0+255),w,b
  6652  000A98  6E2A               	movwf	___awdiv@dividend,c
  6653  000A9A  6A2B               	clrf	___awdiv@dividend+1,c
  6654  000A9C  BE2A               	btfsc	___awdiv@dividend,7,c
  6655  000A9E  062B               	decf	___awdiv@dividend+1,f,c
  6656  000AA0  ECA7  F013         	call	___awdiv	;wreg free
  6657  000AA4  0E09               	movlw	9
  6658  000AA6  242A               	addwf	?___awdiv,w,c
  6659  000AA8  6E32               	movwf	___wmul@multiplier,c
  6660  000AAA  0E00               	movlw	0
  6661  000AAC  202B               	addwfc	?___awdiv+1,w,c
  6662  000AAE  6E33               	movwf	___wmul@multiplier+1,c
  6663  000AB0  0E00               	movlw	0
  6664  000AB2  6E35               	movwf	___wmul@multiplicand+1,c
  6665  000AB4  0E03               	movlw	3
  6666  000AB6  6E34               	movwf	___wmul@multiplicand,c
  6667  000AB8  ECF0  F016         	call	___wmul	;wreg free
  6668  000ABC  0EF5               	movlw	low __npowers_
  6669  000ABE  2432               	addwf	?___wmul,w,c
  6670  000AC0  6EF6               	movwf	tblptrl,c
  6671  000AC2  0EFD               	movlw	high __npowers_
  6672  000AC4  2033               	addwfc	?___wmul+1,w,c
  6673  000AC6  6EF7               	movwf	tblptrh,c
  6674  000AC8                     	if	0	;There are less than 3 active tblptr bytes
  6675  000AC8                     	endif
  6676  000AC8  0009               	tblrd		*+
  6677  000ACA  CFF5 F089          	movff	tablat,___ftmul@f1
  6678  000ACE  0009               	tblrd		*+
  6679  000AD0  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  6680  000AD4  000A               	tblrd		*-
  6681  000AD6  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  6682  000ADA  0E00               	movlw	0
  6683  000ADC  6E35               	movwf	___wmul@multiplicand+1,c
  6684  000ADE  0E03               	movlw	3
  6685  000AE0  6E34               	movwf	___wmul@multiplicand,c
  6686  000AE2  0E00               	movlw	0
  6687  000AE4  6E27               	movwf	___awmod@divisor+1,c
  6688  000AE6  0E0A               	movlw	10
  6689  000AE8  6E26               	movwf	___awmod@divisor,c
  6690  000AEA  0100               	movlb	0	; () banked
  6691  000AEC  519E               	movf	scale@scl& (0+255),w,b
  6692  000AEE  6E24               	movwf	___awmod@dividend,c
  6693  000AF0  6A25               	clrf	___awmod@dividend+1,c
  6694  000AF2  BE24               	btfsc	___awmod@dividend,7,c
  6695  000AF4  0625               	decf	___awmod@dividend+1,f,c
  6696  000AF6  EC66  F014         	call	___awmod	;wreg free
  6697  000AFA  C024  F032         	movff	?___awmod,___wmul@multiplier
  6698  000AFE  C025  F033         	movff	?___awmod+1,___wmul@multiplier+1
  6699  000B02  ECF0  F016         	call	___wmul	;wreg free
  6700  000B06  0EF5               	movlw	low __npowers_
  6701  000B08  2432               	addwf	?___wmul,w,c
  6702  000B0A  6EF6               	movwf	tblptrl,c
  6703  000B0C  0EFD               	movlw	high __npowers_
  6704  000B0E  2033               	addwfc	?___wmul+1,w,c
  6705  000B10  6EF7               	movwf	tblptrh,c
  6706  000B12                     	if	0	;There are less than 3 active tblptr bytes
  6707  000B12                     	endif
  6708  000B12  0009               	tblrd		*+
  6709  000B14  CFF5 F08C          	movff	tablat,___ftmul@f2
  6710  000B18  0009               	tblrd		*+
  6711  000B1A  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  6712  000B1E  000A               	tblrd		*-
  6713  000B20  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  6714  000B24  EC87  F00B         	call	___ftmul	;wreg free
  6715  000B28  D7A4               	goto	L2
  6716  000B2A                     l5341:
  6717                           
  6718                           ;doprnt.c: 434: return _npowers_[scl];
  6719  000B2A  0100               	movlb	0	; () banked
  6720  000B2C  519E               	movf	scale@scl& (0+255),w,b
  6721  000B2E  0D03               	mullw	3
  6722  000B30  0EF5               	movlw	low __npowers_
  6723  000B32  24F3               	addwf	prodl,w,c
  6724  000B34  6EF6               	movwf	tblptrl,c
  6725  000B36  0EFD               	movlw	high __npowers_
  6726  000B38  20F4               	addwfc	prodh,w,c
  6727  000B3A  6EF7               	movwf	tblptrh,c
  6728  000B3C                     	if	0	;There are less than 3 active tblptr bytes
  6729  000B3C                     	endif
  6730  000B3C  0009               	tblrd		*+
  6731  000B3E  CFF5 F098          	movff	tablat,?_scale
  6732  000B42  0009               	tblrd		*+
  6733  000B44  CFF5 F099          	movff	tablat,?_scale+1
  6734  000B48  000A               	tblrd		*-
  6735  000B4A  CFF5 F09A          	movff	tablat,?_scale+2
  6736                           
  6737                           ; BSR set to: 0
  6738  000B4E  0012               	return	
  6739  000B50                     l5345:
  6740                           
  6741                           ; BSR set to: 0
  6742                           ;doprnt.c: 435: }
  6743                           ;doprnt.c: 436: if(scl>=110)
  6744  000B50  0100               	movlb	0	; () banked
  6745  000B52  519E               	movf	scale@scl& (0+255),w,b
  6746  000B54  0A80               	xorlw	128
  6747  000B56  0F12               	addlw	-238
  6748  000B58  A0D8               	btfss	status,0,c
  6749  000B5A  D094               	goto	l5353
  6750                           
  6751                           ; BSR set to: 0
  6752                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6753  000B5C  0E00               	movlw	0
  6754  000B5E  6E35               	movwf	___wmul@multiplicand+1,c
  6755  000B60  0E03               	movlw	3
  6756  000B62  6E34               	movwf	___wmul@multiplicand,c
  6757  000B64  0E00               	movlw	0
  6758  000B66  6E2D               	movwf	___awdiv@divisor+1,c
  6759  000B68  0E0A               	movlw	10
  6760  000B6A  6E2C               	movwf	___awdiv@divisor,c
  6761  000B6C  0E00               	movlw	0
  6762  000B6E  6E27               	movwf	___awmod@divisor+1,c
  6763  000B70  0E64               	movlw	100
  6764  000B72  6E26               	movwf	___awmod@divisor,c
  6765  000B74  0100               	movlb	0	; () banked
  6766  000B76  519E               	movf	scale@scl& (0+255),w,b
  6767  000B78  6E24               	movwf	___awmod@dividend,c
  6768  000B7A  6A25               	clrf	___awmod@dividend+1,c
  6769  000B7C  BE24               	btfsc	___awmod@dividend,7,c
  6770  000B7E  0625               	decf	___awmod@dividend+1,f,c
  6771  000B80  EC66  F014         	call	___awmod	;wreg free
  6772  000B84  C024  F02A         	movff	?___awmod,___awdiv@dividend
  6773  000B88  C025  F02B         	movff	?___awmod+1,___awdiv@dividend+1
  6774  000B8C  ECA7  F013         	call	___awdiv	;wreg free
  6775  000B90  0E09               	movlw	9
  6776  000B92  242A               	addwf	?___awdiv,w,c
  6777  000B94  6E32               	movwf	___wmul@multiplier,c
  6778  000B96  0E00               	movlw	0
  6779  000B98  202B               	addwfc	?___awdiv+1,w,c
  6780  000B9A  6E33               	movwf	___wmul@multiplier+1,c
  6781  000B9C  ECF0  F016         	call	___wmul	;wreg free
  6782  000BA0  0E1C               	movlw	low __powers_
  6783  000BA2  2432               	addwf	?___wmul,w,c
  6784  000BA4  6EF6               	movwf	tblptrl,c
  6785  000BA6  0EFE               	movlw	high __powers_
  6786  000BA8  2033               	addwfc	?___wmul+1,w,c
  6787  000BAA  6EF7               	movwf	tblptrh,c
  6788  000BAC                     	if	0	;There are less than 3 active tblptr bytes
  6789  000BAC                     	endif
  6790  000BAC  0009               	tblrd		*+
  6791  000BAE  CFF5 F08C          	movff	tablat,___ftmul@f2
  6792  000BB2  0009               	tblrd		*+
  6793  000BB4  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  6794  000BB8  000A               	tblrd		*-
  6795  000BBA  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  6796  000BBE  0E00               	movlw	0
  6797  000BC0  6E2D               	movwf	___awdiv@divisor+1,c
  6798  000BC2  0E64               	movlw	100
  6799  000BC4  6E2C               	movwf	___awdiv@divisor,c
  6800  000BC6  0100               	movlb	0	; () banked
  6801  000BC8  519E               	movf	scale@scl& (0+255),w,b
  6802  000BCA  6E2A               	movwf	___awdiv@dividend,c
  6803  000BCC  6A2B               	clrf	___awdiv@dividend+1,c
  6804  000BCE  BE2A               	btfsc	___awdiv@dividend,7,c
  6805  000BD0  062B               	decf	___awdiv@dividend+1,f,c
  6806  000BD2  ECA7  F013         	call	___awdiv	;wreg free
  6807  000BD6  0E12               	movlw	18
  6808  000BD8  242A               	addwf	?___awdiv,w,c
  6809  000BDA  6E32               	movwf	___wmul@multiplier,c
  6810  000BDC  0E00               	movlw	0
  6811  000BDE  202B               	addwfc	?___awdiv+1,w,c
  6812  000BE0  6E33               	movwf	___wmul@multiplier+1,c
  6813  000BE2  0E00               	movlw	0
  6814  000BE4  6E35               	movwf	___wmul@multiplicand+1,c
  6815  000BE6  0E03               	movlw	3
  6816  000BE8  6E34               	movwf	___wmul@multiplicand,c
  6817  000BEA  ECF0  F016         	call	___wmul	;wreg free
  6818  000BEE  0E1C               	movlw	low __powers_
  6819  000BF0  2432               	addwf	?___wmul,w,c
  6820  000BF2  6EF6               	movwf	tblptrl,c
  6821  000BF4  0EFE               	movlw	high __powers_
  6822  000BF6  2033               	addwfc	?___wmul+1,w,c
  6823  000BF8  6EF7               	movwf	tblptrh,c
  6824  000BFA                     	if	0	;There are less than 3 active tblptr bytes
  6825  000BFA                     	endif
  6826  000BFA  0009               	tblrd		*+
  6827  000BFC  CFF5 F089          	movff	tablat,___ftmul@f1
  6828  000C00  0009               	tblrd		*+
  6829  000C02  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  6830  000C06  000A               	tblrd		*-
  6831  000C08  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  6832  000C0C  EC87  F00B         	call	___ftmul	;wreg free
  6833  000C10  C089  F09B         	movff	?___ftmul,_scale$1336
  6834  000C14  C08A  F09C         	movff	?___ftmul+1,_scale$1336+1
  6835  000C18  C08B  F09D         	movff	?___ftmul+2,_scale$1336+2
  6836                           
  6837                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6838  000C1C  C09B  F089         	movff	_scale$1336,___ftmul@f1
  6839  000C20  C09C  F08A         	movff	_scale$1336+1,___ftmul@f1+1
  6840  000C24  C09D  F08B         	movff	_scale$1336+2,___ftmul@f1+2
  6841  000C28  0E00               	movlw	0
  6842  000C2A  6E35               	movwf	___wmul@multiplicand+1,c
  6843  000C2C  0E03               	movlw	3
  6844  000C2E  6E34               	movwf	___wmul@multiplicand,c
  6845  000C30  0E00               	movlw	0
  6846  000C32  6E27               	movwf	___awmod@divisor+1,c
  6847  000C34  0E0A               	movlw	10
  6848  000C36  6E26               	movwf	___awmod@divisor,c
  6849  000C38  0100               	movlb	0	; () banked
  6850  000C3A  519E               	movf	scale@scl& (0+255),w,b
  6851  000C3C  6E24               	movwf	___awmod@dividend,c
  6852  000C3E  6A25               	clrf	___awmod@dividend+1,c
  6853  000C40  BE24               	btfsc	___awmod@dividend,7,c
  6854  000C42  0625               	decf	___awmod@dividend+1,f,c
  6855  000C44  EC66  F014         	call	___awmod	;wreg free
  6856  000C48  C024  F032         	movff	?___awmod,___wmul@multiplier
  6857  000C4C  C025  F033         	movff	?___awmod+1,___wmul@multiplier+1
  6858  000C50  ECF0  F016         	call	___wmul	;wreg free
  6859  000C54  0E1C               	movlw	low __powers_
  6860  000C56  2432               	addwf	?___wmul,w,c
  6861  000C58  6EF6               	movwf	tblptrl,c
  6862  000C5A  0EFE               	movlw	high __powers_
  6863  000C5C  2033               	addwfc	?___wmul+1,w,c
  6864  000C5E  6EF7               	movwf	tblptrh,c
  6865  000C60                     	if	0	;There are less than 3 active tblptr bytes
  6866  000C60                     	endif
  6867  000C60  0009               	tblrd		*+
  6868  000C62  CFF5 F08C          	movff	tablat,___ftmul@f2
  6869  000C66  0009               	tblrd		*+
  6870  000C68  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  6871  000C6C  000A               	tblrd		*-
  6872  000C6E  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  6873  000C72  EC87  F00B         	call	___ftmul	;wreg free
  6874  000C76  C089  F098         	movff	?___ftmul,?_scale
  6875  000C7A  C08A  F099         	movff	?___ftmul+1,?_scale+1
  6876  000C7E  C08B  F09A         	movff	?___ftmul+2,?_scale+2
  6877  000C82  0012               	return	
  6878  000C84                     l5353:
  6879                           
  6880                           ;doprnt.c: 438: else if(scl > 10)
  6881  000C84  0100               	movlb	0	; () banked
  6882  000C86  519E               	movf	scale@scl& (0+255),w,b
  6883  000C88  0A80               	xorlw	128
  6884  000C8A  0F75               	addlw	-139
  6885  000C8C  A0D8               	btfss	status,0,c
  6886  000C8E  D04F               	goto	l5359
  6887                           
  6888                           ; BSR set to: 0
  6889                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  6890  000C90  0E00               	movlw	0
  6891  000C92  6E2D               	movwf	___awdiv@divisor+1,c
  6892  000C94  0E0A               	movlw	10
  6893  000C96  6E2C               	movwf	___awdiv@divisor,c
  6894  000C98  0100               	movlb	0	; () banked
  6895  000C9A  519E               	movf	scale@scl& (0+255),w,b
  6896  000C9C  6E2A               	movwf	___awdiv@dividend,c
  6897  000C9E  6A2B               	clrf	___awdiv@dividend+1,c
  6898  000CA0  BE2A               	btfsc	___awdiv@dividend,7,c
  6899  000CA2  062B               	decf	___awdiv@dividend+1,f,c
  6900  000CA4  ECA7  F013         	call	___awdiv	;wreg free
  6901  000CA8  0E09               	movlw	9
  6902  000CAA  242A               	addwf	?___awdiv,w,c
  6903  000CAC  6E32               	movwf	___wmul@multiplier,c
  6904  000CAE  0E00               	movlw	0
  6905  000CB0  202B               	addwfc	?___awdiv+1,w,c
  6906  000CB2  6E33               	movwf	___wmul@multiplier+1,c
  6907  000CB4  0E00               	movlw	0
  6908  000CB6  6E35               	movwf	___wmul@multiplicand+1,c
  6909  000CB8  0E03               	movlw	3
  6910  000CBA  6E34               	movwf	___wmul@multiplicand,c
  6911  000CBC  ECF0  F016         	call	___wmul	;wreg free
  6912  000CC0  0E1C               	movlw	low __powers_
  6913  000CC2  2432               	addwf	?___wmul,w,c
  6914  000CC4  6EF6               	movwf	tblptrl,c
  6915  000CC6  0EFE               	movlw	high __powers_
  6916  000CC8  2033               	addwfc	?___wmul+1,w,c
  6917  000CCA  6EF7               	movwf	tblptrh,c
  6918  000CCC                     	if	0	;There are less than 3 active tblptr bytes
  6919  000CCC                     	endif
  6920  000CCC  0009               	tblrd		*+
  6921  000CCE  CFF5 F089          	movff	tablat,___ftmul@f1
  6922  000CD2  0009               	tblrd		*+
  6923  000CD4  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  6924  000CD8  000A               	tblrd		*-
  6925  000CDA  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  6926  000CDE  0E00               	movlw	0
  6927  000CE0  6E35               	movwf	___wmul@multiplicand+1,c
  6928  000CE2  0E03               	movlw	3
  6929  000CE4  6E34               	movwf	___wmul@multiplicand,c
  6930  000CE6  0E00               	movlw	0
  6931  000CE8  6E27               	movwf	___awmod@divisor+1,c
  6932  000CEA  0E0A               	movlw	10
  6933  000CEC  6E26               	movwf	___awmod@divisor,c
  6934  000CEE  0100               	movlb	0	; () banked
  6935  000CF0  519E               	movf	scale@scl& (0+255),w,b
  6936  000CF2  6E24               	movwf	___awmod@dividend,c
  6937  000CF4  6A25               	clrf	___awmod@dividend+1,c
  6938  000CF6  BE24               	btfsc	___awmod@dividend,7,c
  6939  000CF8  0625               	decf	___awmod@dividend+1,f,c
  6940  000CFA  EC66  F014         	call	___awmod	;wreg free
  6941  000CFE  C024  F032         	movff	?___awmod,___wmul@multiplier
  6942  000D02  C025  F033         	movff	?___awmod+1,___wmul@multiplier+1
  6943  000D06  ECF0  F016         	call	___wmul	;wreg free
  6944  000D0A  0E1C               	movlw	low __powers_
  6945  000D0C  2432               	addwf	?___wmul,w,c
  6946  000D0E  6EF6               	movwf	tblptrl,c
  6947  000D10  0EFE               	movlw	high __powers_
  6948  000D12  2033               	addwfc	?___wmul+1,w,c
  6949  000D14  6EF7               	movwf	tblptrh,c
  6950  000D16                     	if	0	;There are less than 3 active tblptr bytes
  6951  000D16                     	endif
  6952  000D16  0009               	tblrd		*+
  6953  000D18  CFF5 F08C          	movff	tablat,___ftmul@f2
  6954  000D1C  0009               	tblrd		*+
  6955  000D1E  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  6956  000D22  000A               	tblrd		*-
  6957  000D24  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  6958  000D28  EC87  F00B         	call	___ftmul	;wreg free
  6959  000D2C  D7A4               	goto	L3
  6960  000D2E                     l5359:
  6961                           
  6962                           ;doprnt.c: 440: return _powers_[scl];
  6963  000D2E  0100               	movlb	0	; () banked
  6964  000D30  519E               	movf	scale@scl& (0+255),w,b
  6965  000D32  0D03               	mullw	3
  6966  000D34  0E1C               	movlw	low __powers_
  6967  000D36  24F3               	addwf	prodl,w,c
  6968  000D38  6EF6               	movwf	tblptrl,c
  6969  000D3A  0EFE               	movlw	high __powers_
  6970  000D3C  20F4               	addwfc	prodh,w,c
  6971  000D3E  6EF7               	movwf	tblptrh,c
  6972  000D40                     	if	0	;There are less than 3 active tblptr bytes
  6973  000D40                     	endif
  6974  000D40  0009               	tblrd		*+
  6975  000D42  CFF5 F098          	movff	tablat,?_scale
  6976  000D46  0009               	tblrd		*+
  6977  000D48  CFF5 F099          	movff	tablat,?_scale+1
  6978  000D4C  000A               	tblrd		*-
  6979  000D4E  CFF5 F09A          	movff	tablat,?_scale+2
  6980  000D52  0012               	return	
  6981  000D54                     __end_of_scale:
  6982                           	opt stack 0
  6983                           tblptru	equ	0xFF8
  6984                           tblptrh	equ	0xFF7
  6985                           tblptrl	equ	0xFF6
  6986                           tablat	equ	0xFF5
  6987                           prodh	equ	0xFF4
  6988                           prodl	equ	0xFF3
  6989                           intcon	equ	0xFF2
  6990                           postinc0	equ	0xFEE
  6991                           wreg	equ	0xFE8
  6992                           postdec1	equ	0xFE5
  6993                           fsr1l	equ	0xFE1
  6994                           indf2	equ	0xFDF
  6995                           postinc2	equ	0xFDE
  6996                           postdec2	equ	0xFDD
  6997                           fsr2h	equ	0xFDA
  6998                           fsr2l	equ	0xFD9
  6999                           status	equ	0xFD8
  7000                           
  7001 ;; *************** function _putch *****************
  7002 ;; Defined at:
  7003 ;;		line 35 in file "lcd.c"
  7004 ;; Parameters:    Size  Location     Type
  7005 ;;  data            1    wreg     unsigned char 
  7006 ;; Auto vars:     Size  Location     Type
  7007 ;;  data            1   39[COMRAM] unsigned char 
  7008 ;; Return value:  Size  Location     Type
  7009 ;;                  1    wreg      void 
  7010 ;; Registers used:
  7011 ;;		wreg, status,2, status,0, cstack
  7012 ;; Tracked objects:
  7013 ;;		On entry : 0/0
  7014 ;;		On exit  : 0/0
  7015 ;;		Unchanged: 0/0
  7016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7018 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7020 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7021 ;;Total ram usage:        1 bytes
  7022 ;; Hardware stack levels used:    1
  7023 ;; Hardware stack levels required when called:    6
  7024 ;; This function calls:
  7025 ;;		_lcdNewline
  7026 ;;		_lcdNibble
  7027 ;; This function is called by:
  7028 ;;		_printf
  7029 ;; This function uses a non-reentrant model
  7030 ;;
  7031                           
  7032                           	psect	text25
  7033  002E2A                     __ptext25:
  7034                           	opt stack 0
  7035  002E2A                     _putch:
  7036                           	opt stack 22
  7037                           
  7038                           ;incstack = 0
  7039                           ;putch@data stored from wreg
  7040  002E2A  6E28               	movwf	putch@data,c
  7041                           
  7042                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  7043  002E2C  0E0A               	movlw	10
  7044  002E2E  1828               	xorwf	putch@data,w,c
  7045  002E30  A4D8               	btfss	status,2,c
  7046  002E32  D003               	goto	l167
  7047  002E34  EC67  F017         	call	_lcdNewline	;wreg free
  7048  002E38  0012               	return	
  7049  002E3A                     l167:
  7050                           
  7051                           ;lcd.c: 37: else
  7052                           ;lcd.c: 38: {
  7053                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  7054  002E3A  848C               	bsf	3980,2,c	;volatile
  7055                           
  7056                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  7057  002E3C  0E74               	movlw	116
  7058  002E3E                     u6007:
  7059  002E3E  2EE8               	decfsz	wreg,f,c
  7060  002E40  D7FE               	bra	u6007
  7061  002E42  D000               	nop2	
  7062                           
  7063                           ;lcd.c: 41: lcdNibble(data);
  7064  002E44  5028               	movf	putch@data,w,c
  7065  002E46  ECD1  F014         	call	_lcdNibble
  7066  002E4A  0012               	return	
  7067  002E4C                     __end_of_putch:
  7068                           	opt stack 0
  7069                           tblptru	equ	0xFF8
  7070                           tblptrh	equ	0xFF7
  7071                           tblptrl	equ	0xFF6
  7072                           tablat	equ	0xFF5
  7073                           prodh	equ	0xFF4
  7074                           prodl	equ	0xFF3
  7075                           intcon	equ	0xFF2
  7076                           postinc0	equ	0xFEE
  7077                           wreg	equ	0xFE8
  7078                           postdec1	equ	0xFE5
  7079                           fsr1l	equ	0xFE1
  7080                           indf2	equ	0xFDF
  7081                           postinc2	equ	0xFDE
  7082                           postdec2	equ	0xFDD
  7083                           fsr2h	equ	0xFDA
  7084                           fsr2l	equ	0xFD9
  7085                           status	equ	0xFD8
  7086                           
  7087 ;; *************** function _lcdNewline *****************
  7088 ;; Defined at:
  7089 ;;		line 78 in file "lcd.c"
  7090 ;; Parameters:    Size  Location     Type
  7091 ;;		None
  7092 ;; Auto vars:     Size  Location     Type
  7093 ;;		None
  7094 ;; Return value:  Size  Location     Type
  7095 ;;                  1    wreg      void 
  7096 ;; Registers used:
  7097 ;;		wreg, status,2, status,0, cstack
  7098 ;; Tracked objects:
  7099 ;;		On entry : 0/0
  7100 ;;		On exit  : 0/0
  7101 ;;		Unchanged: 0/0
  7102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7106 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7107 ;;Total ram usage:        0 bytes
  7108 ;; Hardware stack levels used:    1
  7109 ;; Hardware stack levels required when called:    5
  7110 ;; This function calls:
  7111 ;;		_lcdInst
  7112 ;; This function is called by:
  7113 ;;		_putch
  7114 ;; This function uses a non-reentrant model
  7115 ;;
  7116                           
  7117                           	psect	text26
  7118  002ECE                     __ptext26:
  7119                           	opt stack 0
  7120  002ECE                     _lcdNewline:
  7121                           	opt stack 22
  7122                           
  7123                           ;lcd.c: 79: lcdInst(0b11000000);
  7124                           
  7125                           ;incstack = 0
  7126  002ECE  0EC0               	movlw	192
  7127  002ED0  EC26  F017         	call	_lcdInst
  7128  002ED4  0012               	return		;funcret
  7129  002ED6                     __end_of_lcdNewline:
  7130                           	opt stack 0
  7131                           tblptru	equ	0xFF8
  7132                           tblptrh	equ	0xFF7
  7133                           tblptrl	equ	0xFF6
  7134                           tablat	equ	0xFF5
  7135                           prodh	equ	0xFF4
  7136                           prodl	equ	0xFF3
  7137                           intcon	equ	0xFF2
  7138                           postinc0	equ	0xFEE
  7139                           wreg	equ	0xFE8
  7140                           postdec1	equ	0xFE5
  7141                           fsr1l	equ	0xFE1
  7142                           indf2	equ	0xFDF
  7143                           postinc2	equ	0xFDE
  7144                           postdec2	equ	0xFDD
  7145                           fsr2h	equ	0xFDA
  7146                           fsr2l	equ	0xFD9
  7147                           status	equ	0xFD8
  7148                           
  7149 ;; *************** function _fround *****************
  7150 ;; Defined at:
  7151 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7152 ;; Parameters:    Size  Location     Type
  7153 ;;  prec            1    wreg     unsigned char 
  7154 ;; Auto vars:     Size  Location     Type
  7155 ;;  prec            1   33[BANK0 ] unsigned char 
  7156 ;; Return value:  Size  Location     Type
  7157 ;;                  3   24[BANK0 ] unsigned char 
  7158 ;; Registers used:
  7159 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7160 ;; Tracked objects:
  7161 ;;		On entry : 0/0
  7162 ;;		On exit  : 0/0
  7163 ;;		Unchanged: 0/0
  7164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7165 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7166 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7168 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7169 ;;Total ram usage:       10 bytes
  7170 ;; Hardware stack levels used:    1
  7171 ;; Hardware stack levels required when called:    5
  7172 ;; This function calls:
  7173 ;;		___awdiv
  7174 ;;		___awmod
  7175 ;;		___ftmul
  7176 ;;		___wmul
  7177 ;; This function is called by:
  7178 ;;		_printf
  7179 ;; This function uses a non-reentrant model
  7180 ;;
  7181                           
  7182                           	psect	text27
  7183  001316                     __ptext27:
  7184                           	opt stack 0
  7185  001316                     _fround:
  7186                           	opt stack 23
  7187                           
  7188                           ;incstack = 0
  7189                           ;fround@prec stored from wreg
  7190  001316  0100               	movlb	0	; () banked
  7191  001318  6FA1               	movwf	fround@prec& (0+255),b
  7192                           
  7193                           ;doprnt.c: 413: if(prec>=110)
  7194  00131A  0E6D               	movlw	109
  7195  00131C  0100               	movlb	0	; () banked
  7196  00131E  65A1               	cpfsgt	fround@prec& (0+255),b
  7197  001320  D0A2               	goto	l5313
  7198                           
  7199                           ; BSR set to: 0
  7200                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7201  001322  0E00               	movlw	0
  7202  001324  6E35               	movwf	___wmul@multiplicand+1,c
  7203  001326  0E03               	movlw	3
  7204  001328  6E34               	movwf	___wmul@multiplicand,c
  7205  00132A  0E00               	movlw	0
  7206  00132C  6E2D               	movwf	___awdiv@divisor+1,c
  7207  00132E  0E0A               	movlw	10
  7208  001330  6E2C               	movwf	___awdiv@divisor,c
  7209  001332  0E00               	movlw	0
  7210  001334  6E27               	movwf	___awmod@divisor+1,c
  7211  001336  0E64               	movlw	100
  7212  001338  6E26               	movwf	___awmod@divisor,c
  7213  00133A  C0A1  F024         	movff	fround@prec,___awmod@dividend
  7214  00133E  6A25               	clrf	___awmod@dividend+1,c
  7215  001340  EC66  F014         	call	___awmod	;wreg free
  7216  001344  C024  F02A         	movff	?___awmod,___awdiv@dividend
  7217  001348  C025  F02B         	movff	?___awmod+1,___awdiv@dividend+1
  7218  00134C  ECA7  F013         	call	___awdiv	;wreg free
  7219  001350  0E09               	movlw	9
  7220  001352  242A               	addwf	?___awdiv,w,c
  7221  001354  6E32               	movwf	___wmul@multiplier,c
  7222  001356  0E00               	movlw	0
  7223  001358  202B               	addwfc	?___awdiv+1,w,c
  7224  00135A  6E33               	movwf	___wmul@multiplier+1,c
  7225  00135C  ECF0  F016         	call	___wmul	;wreg free
  7226  001360  0EF5               	movlw	low __npowers_
  7227  001362  2432               	addwf	?___wmul,w,c
  7228  001364  6EF6               	movwf	tblptrl,c
  7229  001366  0EFD               	movlw	high __npowers_
  7230  001368  2033               	addwfc	?___wmul+1,w,c
  7231  00136A  6EF7               	movwf	tblptrh,c
  7232  00136C                     	if	0	;There are less than 3 active tblptr bytes
  7233  00136C                     	endif
  7234  00136C  0009               	tblrd		*+
  7235  00136E  CFF5 F08C          	movff	tablat,___ftmul@f2
  7236  001372  0009               	tblrd		*+
  7237  001374  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7238  001378  000A               	tblrd		*-
  7239  00137A  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7240  00137E  0E00               	movlw	0
  7241  001380  6E2D               	movwf	___awdiv@divisor+1,c
  7242  001382  0E64               	movlw	100
  7243  001384  6E2C               	movwf	___awdiv@divisor,c
  7244  001386  C0A1  F02A         	movff	fround@prec,___awdiv@dividend
  7245  00138A  6A2B               	clrf	___awdiv@dividend+1,c
  7246  00138C  ECA7  F013         	call	___awdiv	;wreg free
  7247  001390  0E12               	movlw	18
  7248  001392  242A               	addwf	?___awdiv,w,c
  7249  001394  6E32               	movwf	___wmul@multiplier,c
  7250  001396  0E00               	movlw	0
  7251  001398  202B               	addwfc	?___awdiv+1,w,c
  7252  00139A  6E33               	movwf	___wmul@multiplier+1,c
  7253  00139C  0E00               	movlw	0
  7254  00139E  6E35               	movwf	___wmul@multiplicand+1,c
  7255  0013A0  0E03               	movlw	3
  7256  0013A2  6E34               	movwf	___wmul@multiplicand,c
  7257  0013A4  ECF0  F016         	call	___wmul	;wreg free
  7258  0013A8  0EF5               	movlw	low __npowers_
  7259  0013AA  2432               	addwf	?___wmul,w,c
  7260  0013AC  6EF6               	movwf	tblptrl,c
  7261  0013AE  0EFD               	movlw	high __npowers_
  7262  0013B0  2033               	addwfc	?___wmul+1,w,c
  7263  0013B2  6EF7               	movwf	tblptrh,c
  7264  0013B4                     	if	0	;There are less than 3 active tblptr bytes
  7265  0013B4                     	endif
  7266  0013B4  0009               	tblrd		*+
  7267  0013B6  CFF5 F089          	movff	tablat,___ftmul@f1
  7268  0013BA  0009               	tblrd		*+
  7269  0013BC  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  7270  0013C0  000A               	tblrd		*-
  7271  0013C2  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  7272  0013C6  EC87  F00B         	call	___ftmul	;wreg free
  7273  0013CA  C089  F09E         	movff	?___ftmul,_fround$1334
  7274  0013CE  C08A  F09F         	movff	?___ftmul+1,_fround$1334+1
  7275  0013D2  C08B  F0A0         	movff	?___ftmul+2,_fround$1334+2
  7276                           
  7277                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7278  0013D6  0E00               	movlw	0
  7279  0013D8  6E35               	movwf	___wmul@multiplicand+1,c
  7280  0013DA  0E03               	movlw	3
  7281  0013DC  6E34               	movwf	___wmul@multiplicand,c
  7282  0013DE  0E00               	movlw	0
  7283  0013E0  6E27               	movwf	___awmod@divisor+1,c
  7284  0013E2  0E0A               	movlw	10
  7285  0013E4  6E26               	movwf	___awmod@divisor,c
  7286  0013E6  C0A1  F024         	movff	fround@prec,___awmod@dividend
  7287  0013EA  6A25               	clrf	___awmod@dividend+1,c
  7288  0013EC  EC66  F014         	call	___awmod	;wreg free
  7289  0013F0  C024  F032         	movff	?___awmod,___wmul@multiplier
  7290  0013F4  C025  F033         	movff	?___awmod+1,___wmul@multiplier+1
  7291  0013F8  ECF0  F016         	call	___wmul	;wreg free
  7292  0013FC  0EF5               	movlw	low __npowers_
  7293  0013FE  2432               	addwf	?___wmul,w,c
  7294  001400  6EF6               	movwf	tblptrl,c
  7295  001402  0EFD               	movlw	high __npowers_
  7296  001404  2033               	addwfc	?___wmul+1,w,c
  7297  001406  6EF7               	movwf	tblptrh,c
  7298  001408                     	if	0	;There are less than 3 active tblptr bytes
  7299  001408                     	endif
  7300  001408  0009               	tblrd		*+
  7301  00140A  CFF5 F08C          	movff	tablat,___ftmul@f2
  7302  00140E  0009               	tblrd		*+
  7303  001410  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7304  001414  000A               	tblrd		*-
  7305  001416  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7306  00141A  C09E  F089         	movff	_fround$1334,___ftmul@f1
  7307  00141E  C09F  F08A         	movff	_fround$1334+1,___ftmul@f1+1
  7308  001422  C0A0  F08B         	movff	_fround$1334+2,___ftmul@f1+2
  7309  001426  EC87  F00B         	call	___ftmul	;wreg free
  7310  00142A  C089  F09B         	movff	?___ftmul,_fround$1335
  7311  00142E  C08A  F09C         	movff	?___ftmul+1,_fround$1335+1
  7312  001432  C08B  F09D         	movff	?___ftmul+2,_fround$1335+2
  7313                           
  7314                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7315  001436  C09B  F089         	movff	_fround$1335,___ftmul@f1
  7316  00143A  C09C  F08A         	movff	_fround$1335+1,___ftmul@f1+1
  7317  00143E  C09D  F08B         	movff	_fround$1335+2,___ftmul@f1+2
  7318  001442  0E00               	movlw	0
  7319  001444  0100               	movlb	0	; () banked
  7320  001446  6F8C               	movwf	___ftmul@f2& (0+255),b
  7321  001448  0E00               	movlw	0
  7322  00144A  0100               	movlb	0	; () banked
  7323  00144C  6F8D               	movwf	(___ftmul@f2+1)& (0+255),b
  7324  00144E  0E3F               	movlw	63
  7325  001450  0100               	movlb	0	; () banked
  7326  001452  6F8E               	movwf	(___ftmul@f2+2)& (0+255),b
  7327  001454  EC87  F00B         	call	___ftmul	;wreg free
  7328  001458  C089  F098         	movff	?___ftmul,?_fround
  7329  00145C  C08A  F099         	movff	?___ftmul+1,?_fround+1
  7330  001460  C08B  F09A         	movff	?___ftmul+2,?_fround+2
  7331  001464  0012               	return	
  7332  001466                     l5313:
  7333                           
  7334                           ;doprnt.c: 415: else if(prec > 10)
  7335  001466  0E0A               	movlw	10
  7336  001468  0100               	movlb	0	; () banked
  7337  00146A  65A1               	cpfsgt	fround@prec& (0+255),b
  7338  00146C  D060               	goto	l5321
  7339                           
  7340                           ; BSR set to: 0
  7341                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7342  00146E  0E00               	movlw	0
  7343  001470  6E35               	movwf	___wmul@multiplicand+1,c
  7344  001472  0E03               	movlw	3
  7345  001474  6E34               	movwf	___wmul@multiplicand,c
  7346  001476  0E00               	movlw	0
  7347  001478  6E27               	movwf	___awmod@divisor+1,c
  7348  00147A  0E0A               	movlw	10
  7349  00147C  6E26               	movwf	___awmod@divisor,c
  7350  00147E  C0A1  F024         	movff	fround@prec,___awmod@dividend
  7351  001482  6A25               	clrf	___awmod@dividend+1,c
  7352  001484  EC66  F014         	call	___awmod	;wreg free
  7353  001488  C024  F032         	movff	?___awmod,___wmul@multiplier
  7354  00148C  C025  F033         	movff	?___awmod+1,___wmul@multiplier+1
  7355  001490  ECF0  F016         	call	___wmul	;wreg free
  7356  001494  0EF5               	movlw	low __npowers_
  7357  001496  2432               	addwf	?___wmul,w,c
  7358  001498  6EF6               	movwf	tblptrl,c
  7359  00149A  0EFD               	movlw	high __npowers_
  7360  00149C  2033               	addwfc	?___wmul+1,w,c
  7361  00149E  6EF7               	movwf	tblptrh,c
  7362  0014A0                     	if	0	;There are less than 3 active tblptr bytes
  7363  0014A0                     	endif
  7364  0014A0  0009               	tblrd		*+
  7365  0014A2  CFF5 F08C          	movff	tablat,___ftmul@f2
  7366  0014A6  0009               	tblrd		*+
  7367  0014A8  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7368  0014AC  000A               	tblrd		*-
  7369  0014AE  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7370  0014B2  0E00               	movlw	0
  7371  0014B4  6E2D               	movwf	___awdiv@divisor+1,c
  7372  0014B6  0E0A               	movlw	10
  7373  0014B8  6E2C               	movwf	___awdiv@divisor,c
  7374  0014BA  C0A1  F02A         	movff	fround@prec,___awdiv@dividend
  7375  0014BE  6A2B               	clrf	___awdiv@dividend+1,c
  7376  0014C0  ECA7  F013         	call	___awdiv	;wreg free
  7377  0014C4  0E09               	movlw	9
  7378  0014C6  242A               	addwf	?___awdiv,w,c
  7379  0014C8  6E32               	movwf	___wmul@multiplier,c
  7380  0014CA  0E00               	movlw	0
  7381  0014CC  202B               	addwfc	?___awdiv+1,w,c
  7382  0014CE  6E33               	movwf	___wmul@multiplier+1,c
  7383  0014D0  0E00               	movlw	0
  7384  0014D2  6E35               	movwf	___wmul@multiplicand+1,c
  7385  0014D4  0E03               	movlw	3
  7386  0014D6  6E34               	movwf	___wmul@multiplicand,c
  7387  0014D8  ECF0  F016         	call	___wmul	;wreg free
  7388  0014DC  0EF5               	movlw	low __npowers_
  7389  0014DE  2432               	addwf	?___wmul,w,c
  7390  0014E0  6EF6               	movwf	tblptrl,c
  7391  0014E2  0EFD               	movlw	high __npowers_
  7392  0014E4  2033               	addwfc	?___wmul+1,w,c
  7393  0014E6  6EF7               	movwf	tblptrh,c
  7394  0014E8                     	if	0	;There are less than 3 active tblptr bytes
  7395  0014E8                     	endif
  7396  0014E8  0009               	tblrd		*+
  7397  0014EA  CFF5 F089          	movff	tablat,___ftmul@f1
  7398  0014EE  0009               	tblrd		*+
  7399  0014F0  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  7400  0014F4  000A               	tblrd		*-
  7401  0014F6  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  7402  0014FA  EC87  F00B         	call	___ftmul	;wreg free
  7403  0014FE  C089  F09E         	movff	?___ftmul,_fround$1334
  7404  001502  C08A  F09F         	movff	?___ftmul+1,_fround$1334+1
  7405  001506  C08B  F0A0         	movff	?___ftmul+2,_fround$1334+2
  7406                           
  7407                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7408  00150A  C09E  F089         	movff	_fround$1334,___ftmul@f1
  7409  00150E  C09F  F08A         	movff	_fround$1334+1,___ftmul@f1+1
  7410  001512  C0A0  F08B         	movff	_fround$1334+2,___ftmul@f1+2
  7411  001516  0E00               	movlw	0
  7412  001518  0100               	movlb	0	; () banked
  7413  00151A  6F8C               	movwf	___ftmul@f2& (0+255),b
  7414  00151C  0E00               	movlw	0
  7415  00151E  0100               	movlb	0	; () banked
  7416  001520  6F8D               	movwf	(___ftmul@f2+1)& (0+255),b
  7417  001522  0E3F               	movlw	63
  7418  001524  0100               	movlb	0	; () banked
  7419  001526  6F8E               	movwf	(___ftmul@f2+2)& (0+255),b
  7420  001528  EC87  F00B         	call	___ftmul	;wreg free
  7421  00152C  D795               	goto	L4
  7422  00152E                     l5321:
  7423                           
  7424                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  7425  00152E  0100               	movlb	0	; () banked
  7426  001530  51A1               	movf	fround@prec& (0+255),w,b
  7427  001532  0D03               	mullw	3
  7428  001534  0EF5               	movlw	low __npowers_
  7429  001536  24F3               	addwf	prodl,w,c
  7430  001538  6EF6               	movwf	tblptrl,c
  7431  00153A  0EFD               	movlw	high __npowers_
  7432  00153C  20F4               	addwfc	prodh,w,c
  7433  00153E  6EF7               	movwf	tblptrh,c
  7434  001540                     	if	0	;There are less than 3 active tblptr bytes
  7435  001540                     	endif
  7436  001540  0009               	tblrd		*+
  7437  001542  CFF5 F089          	movff	tablat,___ftmul@f1
  7438  001546  0009               	tblrd		*+
  7439  001548  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  7440  00154C  000A               	tblrd		*-
  7441  00154E  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  7442  001552  0E00               	movlw	0
  7443  001554  0100               	movlb	0	; () banked
  7444  001556  6F8C               	movwf	___ftmul@f2& (0+255),b
  7445  001558  0E00               	movlw	0
  7446  00155A  0100               	movlb	0	; () banked
  7447  00155C  6F8D               	movwf	(___ftmul@f2+1)& (0+255),b
  7448  00155E  0E3F               	movlw	63
  7449  001560  0100               	movlb	0	; () banked
  7450  001562  6F8E               	movwf	(___ftmul@f2+2)& (0+255),b
  7451  001564  EC87  F00B         	call	___ftmul	;wreg free
  7452  001568  C089  F098         	movff	?___ftmul,?_fround
  7453  00156C  C08A  F099         	movff	?___ftmul+1,?_fround+1
  7454  001570  C08B  F09A         	movff	?___ftmul+2,?_fround+2
  7455  001574  0012               	return	
  7456  001576                     __end_of_fround:
  7457                           	opt stack 0
  7458                           tblptru	equ	0xFF8
  7459                           tblptrh	equ	0xFF7
  7460                           tblptrl	equ	0xFF6
  7461                           tablat	equ	0xFF5
  7462                           prodh	equ	0xFF4
  7463                           prodl	equ	0xFF3
  7464                           intcon	equ	0xFF2
  7465                           postinc0	equ	0xFEE
  7466                           wreg	equ	0xFE8
  7467                           postdec1	equ	0xFE5
  7468                           fsr1l	equ	0xFE1
  7469                           indf2	equ	0xFDF
  7470                           postinc2	equ	0xFDE
  7471                           postdec2	equ	0xFDD
  7472                           fsr2h	equ	0xFDA
  7473                           fsr2l	equ	0xFD9
  7474                           status	equ	0xFD8
  7475                           
  7476 ;; *************** function ___wmul *****************
  7477 ;; Defined at:
  7478 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7479 ;; Parameters:    Size  Location     Type
  7480 ;;  multiplier      2   49[COMRAM] unsigned int 
  7481 ;;  multiplicand    2   51[COMRAM] unsigned int 
  7482 ;; Auto vars:     Size  Location     Type
  7483 ;;  product         2   53[COMRAM] unsigned int 
  7484 ;; Return value:  Size  Location     Type
  7485 ;;                  2   49[COMRAM] unsigned int 
  7486 ;; Registers used:
  7487 ;;		wreg, status,2, status,0, prodl, prodh
  7488 ;; Tracked objects:
  7489 ;;		On entry : 0/0
  7490 ;;		On exit  : 0/0
  7491 ;;		Unchanged: 0/0
  7492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7493 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7494 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7496 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7497 ;;Total ram usage:        6 bytes
  7498 ;; Hardware stack levels used:    1
  7499 ;; Hardware stack levels required when called:    3
  7500 ;; This function calls:
  7501 ;;		Nothing
  7502 ;; This function is called by:
  7503 ;;		_fround
  7504 ;;		_scale
  7505 ;;		_printf
  7506 ;; This function uses a non-reentrant model
  7507 ;;
  7508                           
  7509                           	psect	text28
  7510  002DE0                     __ptext28:
  7511                           	opt stack 0
  7512  002DE0                     ___wmul:
  7513                           	opt stack 24
  7514                           
  7515                           ;incstack = 0
  7516  002DE0  5032               	movf	___wmul@multiplier,w,c
  7517  002DE2  0234               	mulwf	___wmul@multiplicand,c
  7518  002DE4  CFF3 F036          	movff	prodl,___wmul@product
  7519  002DE8  CFF4 F037          	movff	prodh,___wmul@product+1
  7520  002DEC  5032               	movf	___wmul@multiplier,w,c
  7521  002DEE  0235               	mulwf	___wmul@multiplicand+1,c
  7522  002DF0  50F3               	movf	prodl,w,c
  7523  002DF2  2637               	addwf	___wmul@product+1,f,c
  7524  002DF4  5033               	movf	___wmul@multiplier+1,w,c
  7525  002DF6  0234               	mulwf	___wmul@multiplicand,c
  7526  002DF8  50F3               	movf	prodl,w,c
  7527  002DFA  2637               	addwf	___wmul@product+1,f,c
  7528  002DFC  C036  F032         	movff	___wmul@product,?___wmul
  7529  002E00  C037  F033         	movff	___wmul@product+1,?___wmul+1
  7530  002E04  0012               	return	
  7531  002E06                     __end_of___wmul:
  7532                           	opt stack 0
  7533                           tblptru	equ	0xFF8
  7534                           tblptrh	equ	0xFF7
  7535                           tblptrl	equ	0xFF6
  7536                           tablat	equ	0xFF5
  7537                           prodh	equ	0xFF4
  7538                           prodl	equ	0xFF3
  7539                           intcon	equ	0xFF2
  7540                           postinc0	equ	0xFEE
  7541                           wreg	equ	0xFE8
  7542                           postdec1	equ	0xFE5
  7543                           fsr1l	equ	0xFE1
  7544                           indf2	equ	0xFDF
  7545                           postinc2	equ	0xFDE
  7546                           postdec2	equ	0xFDD
  7547                           fsr2h	equ	0xFDA
  7548                           fsr2l	equ	0xFD9
  7549                           status	equ	0xFD8
  7550                           
  7551 ;; *************** function ___ftmul *****************
  7552 ;; Defined at:
  7553 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  7554 ;; Parameters:    Size  Location     Type
  7555 ;;  f1              3    9[BANK0 ] float 
  7556 ;;  f2              3   12[BANK0 ] float 
  7557 ;; Auto vars:     Size  Location     Type
  7558 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
  7559 ;;  sign            1   23[BANK0 ] unsigned char 
  7560 ;;  cntr            1   22[BANK0 ] unsigned char 
  7561 ;;  exp             1   18[BANK0 ] unsigned char 
  7562 ;; Return value:  Size  Location     Type
  7563 ;;                  3    9[BANK0 ] float 
  7564 ;; Registers used:
  7565 ;;		wreg, status,2, status,0, cstack
  7566 ;; Tracked objects:
  7567 ;;		On entry : 0/0
  7568 ;;		On exit  : 0/0
  7569 ;;		Unchanged: 0/0
  7570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7571 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7572 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7573 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7574 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7575 ;;Total ram usage:       15 bytes
  7576 ;; Hardware stack levels used:    1
  7577 ;; Hardware stack levels required when called:    4
  7578 ;; This function calls:
  7579 ;;		___ftpack
  7580 ;; This function is called by:
  7581 ;;		_sortBattery
  7582 ;;		_angleToPulse
  7583 ;;		_fround
  7584 ;;		_scale
  7585 ;;		_printf
  7586 ;; This function uses a non-reentrant model
  7587 ;;
  7588                           
  7589                           	psect	text29
  7590  00170E                     __ptext29:
  7591                           	opt stack 0
  7592  00170E                     ___ftmul:
  7593                           	opt stack 23
  7594                           
  7595                           ;incstack = 0
  7596  00170E  C08B  F08F         	movff	___ftmul@f1+2,??___ftmul
  7597  001712  0100               	movlb	0	; () banked
  7598  001714  6B90               	clrf	(??___ftmul+1)& (0+255),b
  7599  001716  6B91               	clrf	(??___ftmul+2)& (0+255),b
  7600  001718  0100               	movlb	0	; () banked
  7601  00171A  358A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  7602  00171C  0100               	movlb	0	; () banked
  7603  00171E  378F               	rlcf	??___ftmul& (0+255),f,b
  7604  001720  E301               	bnc	u4581
  7605  001722  8190               	bsf	(??___ftmul+1)& (0+255),0,b
  7606  001724                     u4581:
  7607  001724  0100               	movlb	0	; () banked
  7608  001726  518F               	movf	??___ftmul& (0+255),w,b
  7609  001728  0100               	movlb	0	; () banked
  7610  00172A  6F92               	movwf	___ftmul@exp& (0+255),b
  7611  00172C  0100               	movlb	0	; () banked
  7612  00172E  5192               	movf	___ftmul@exp& (0+255),w,b
  7613  001730  A4D8               	btfss	status,2,c
  7614  001732  D00A               	goto	l5107
  7615                           
  7616                           ; BSR set to: 0
  7617  001734  0E00               	movlw	0
  7618  001736  0100               	movlb	0	; () banked
  7619  001738  6F89               	movwf	?___ftmul& (0+255),b
  7620  00173A  0E00               	movlw	0
  7621  00173C  0100               	movlb	0	; () banked
  7622  00173E  6F8A               	movwf	(?___ftmul+1)& (0+255),b
  7623  001740  0E00               	movlw	0
  7624  001742  0100               	movlb	0	; () banked
  7625  001744  6F8B               	movwf	(?___ftmul+2)& (0+255),b
  7626                           
  7627                           ; BSR set to: 0
  7628  001746  0012               	return	
  7629  001748                     l5107:
  7630                           
  7631                           ; BSR set to: 0
  7632  001748  C08E  F08F         	movff	___ftmul@f2+2,??___ftmul
  7633  00174C  0100               	movlb	0	; () banked
  7634  00174E  6B90               	clrf	(??___ftmul+1)& (0+255),b
  7635  001750  6B91               	clrf	(??___ftmul+2)& (0+255),b
  7636  001752  0100               	movlb	0	; () banked
  7637  001754  358D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  7638  001756  0100               	movlb	0	; () banked
  7639  001758  378F               	rlcf	??___ftmul& (0+255),f,b
  7640  00175A  E301               	bnc	u4601
  7641  00175C  8190               	bsf	(??___ftmul+1)& (0+255),0,b
  7642  00175E                     u4601:
  7643  00175E  0100               	movlb	0	; () banked
  7644  001760  518F               	movf	??___ftmul& (0+255),w,b
  7645  001762  0100               	movlb	0	; () banked
  7646  001764  6F97               	movwf	___ftmul@sign& (0+255),b
  7647  001766  0100               	movlb	0	; () banked
  7648  001768  5197               	movf	___ftmul@sign& (0+255),w,b
  7649  00176A  A4D8               	btfss	status,2,c
  7650  00176C  D00A               	goto	l5113
  7651                           
  7652                           ; BSR set to: 0
  7653  00176E  0E00               	movlw	0
  7654  001770  0100               	movlb	0	; () banked
  7655  001772  6F89               	movwf	?___ftmul& (0+255),b
  7656  001774  0E00               	movlw	0
  7657  001776  0100               	movlb	0	; () banked
  7658  001778  6F8A               	movwf	(?___ftmul+1)& (0+255),b
  7659  00177A  0E00               	movlw	0
  7660  00177C  0100               	movlb	0	; () banked
  7661  00177E  6F8B               	movwf	(?___ftmul+2)& (0+255),b
  7662                           
  7663                           ; BSR set to: 0
  7664  001780  0012               	return	
  7665  001782                     l5113:
  7666                           
  7667                           ; BSR set to: 0
  7668  001782  0100               	movlb	0	; () banked
  7669  001784  5197               	movf	___ftmul@sign& (0+255),w,b
  7670  001786  0F7B               	addlw	123
  7671  001788  0100               	movlb	0	; () banked
  7672  00178A  2792               	addwf	___ftmul@exp& (0+255),f,b
  7673                           
  7674                           ; BSR set to: 0
  7675  00178C  C08B  F097         	movff	___ftmul@f1+2,___ftmul@sign
  7676  001790  0100               	movlb	0	; () banked
  7677  001792  518E               	movf	(___ftmul@f2+2)& (0+255),w,b
  7678  001794  0100               	movlb	0	; () banked
  7679  001796  1B97               	xorwf	___ftmul@sign& (0+255),f,b
  7680  001798  0E80               	movlw	128
  7681  00179A  0100               	movlb	0	; () banked
  7682  00179C  1797               	andwf	___ftmul@sign& (0+255),f,b
  7683                           
  7684                           ; BSR set to: 0
  7685  00179E  0100               	movlb	0	; () banked
  7686  0017A0  8F8A               	bsf	(___ftmul@f1+1)& (0+255),7,b
  7687                           
  7688                           ; BSR set to: 0
  7689  0017A2  0100               	movlb	0	; () banked
  7690  0017A4  8F8D               	bsf	(___ftmul@f2+1)& (0+255),7,b
  7691                           
  7692                           ; BSR set to: 0
  7693  0017A6  0EFF               	movlw	255
  7694  0017A8  0100               	movlb	0	; () banked
  7695  0017AA  178C               	andwf	___ftmul@f2& (0+255),f,b
  7696  0017AC  0EFF               	movlw	255
  7697  0017AE  0100               	movlb	0	; () banked
  7698  0017B0  178D               	andwf	(___ftmul@f2+1)& (0+255),f,b
  7699  0017B2  0E00               	movlw	0
  7700  0017B4  0100               	movlb	0	; () banked
  7701  0017B6  178E               	andwf	(___ftmul@f2+2)& (0+255),f,b
  7702                           
  7703                           ; BSR set to: 0
  7704  0017B8  0E00               	movlw	0
  7705  0017BA  0100               	movlb	0	; () banked
  7706  0017BC  6F93               	movwf	___ftmul@f3_as_product& (0+255),b
  7707  0017BE  0E00               	movlw	0
  7708  0017C0  0100               	movlb	0	; () banked
  7709  0017C2  6F94               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  7710  0017C4  0E00               	movlw	0
  7711  0017C6  0100               	movlb	0	; () banked
  7712  0017C8  6F95               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  7713                           
  7714                           ; BSR set to: 0
  7715  0017CA  0E07               	movlw	7
  7716  0017CC  0100               	movlb	0	; () banked
  7717  0017CE  6F96               	movwf	___ftmul@cntr& (0+255),b
  7718  0017D0                     l5127:
  7719                           
  7720                           ; BSR set to: 0
  7721  0017D0  0100               	movlb	0	; () banked
  7722  0017D2  A189               	btfss	___ftmul@f1& (0+255),0,b
  7723  0017D4  D00C               	goto	l5131
  7724                           
  7725                           ; BSR set to: 0
  7726  0017D6  0100               	movlb	0	; () banked
  7727  0017D8  518C               	movf	___ftmul@f2& (0+255),w,b
  7728  0017DA  0100               	movlb	0	; () banked
  7729  0017DC  2793               	addwf	___ftmul@f3_as_product& (0+255),f,b
  7730  0017DE  0100               	movlb	0	; () banked
  7731  0017E0  518D               	movf	(___ftmul@f2+1)& (0+255),w,b
  7732  0017E2  0100               	movlb	0	; () banked
  7733  0017E4  2394               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  7734  0017E6  0100               	movlb	0	; () banked
  7735  0017E8  518E               	movf	(___ftmul@f2+2)& (0+255),w,b
  7736  0017EA  0100               	movlb	0	; () banked
  7737  0017EC  2395               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  7738  0017EE                     l5131:
  7739                           
  7740                           ; BSR set to: 0
  7741  0017EE  0100               	movlb	0	; () banked
  7742  0017F0  90D8               	bcf	status,0,c
  7743  0017F2  338B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  7744  0017F4  338A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  7745  0017F6  3389               	rrcf	___ftmul@f1& (0+255),f,b
  7746  0017F8  0100               	movlb	0	; () banked
  7747  0017FA  90D8               	bcf	status,0,c
  7748  0017FC  378C               	rlcf	___ftmul@f2& (0+255),f,b
  7749  0017FE  378D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  7750  001800  378E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  7751                           
  7752                           ; BSR set to: 0
  7753  001802  0100               	movlb	0	; () banked
  7754  001804  2F96               	decfsz	___ftmul@cntr& (0+255),f,b
  7755  001806  D7E4               	goto	l5127
  7756                           
  7757                           ; BSR set to: 0
  7758                           
  7759                           ; BSR set to: 0
  7760  001808  0E09               	movlw	9
  7761  00180A  0100               	movlb	0	; () banked
  7762  00180C  6F96               	movwf	___ftmul@cntr& (0+255),b
  7763  00180E                     l5137:
  7764                           
  7765                           ; BSR set to: 0
  7766  00180E  0100               	movlb	0	; () banked
  7767  001810  A189               	btfss	___ftmul@f1& (0+255),0,b
  7768  001812  D00C               	goto	l5141
  7769                           
  7770                           ; BSR set to: 0
  7771  001814  0100               	movlb	0	; () banked
  7772  001816  518C               	movf	___ftmul@f2& (0+255),w,b
  7773  001818  0100               	movlb	0	; () banked
  7774  00181A  2793               	addwf	___ftmul@f3_as_product& (0+255),f,b
  7775  00181C  0100               	movlb	0	; () banked
  7776  00181E  518D               	movf	(___ftmul@f2+1)& (0+255),w,b
  7777  001820  0100               	movlb	0	; () banked
  7778  001822  2394               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  7779  001824  0100               	movlb	0	; () banked
  7780  001826  518E               	movf	(___ftmul@f2+2)& (0+255),w,b
  7781  001828  0100               	movlb	0	; () banked
  7782  00182A  2395               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  7783  00182C                     l5141:
  7784                           
  7785                           ; BSR set to: 0
  7786  00182C  0100               	movlb	0	; () banked
  7787  00182E  90D8               	bcf	status,0,c
  7788  001830  338B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  7789  001832  338A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  7790  001834  3389               	rrcf	___ftmul@f1& (0+255),f,b
  7791  001836  0100               	movlb	0	; () banked
  7792  001838  90D8               	bcf	status,0,c
  7793  00183A  3395               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  7794  00183C  3394               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  7795  00183E  3393               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  7796                           
  7797                           ; BSR set to: 0
  7798  001840  0100               	movlb	0	; () banked
  7799  001842  2F96               	decfsz	___ftmul@cntr& (0+255),f,b
  7800  001844  D7E4               	goto	l5137
  7801                           
  7802                           ; BSR set to: 0
  7803                           
  7804                           ; BSR set to: 0
  7805  001846  C093  F024         	movff	___ftmul@f3_as_product,___ftpack@arg
  7806  00184A  C094  F025         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7807  00184E  C095  F026         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7808  001852  C092  F027         	movff	___ftmul@exp,___ftpack@exp
  7809  001856  C097  F028         	movff	___ftmul@sign,___ftpack@sign
  7810  00185A  ECDB  F011         	call	___ftpack	;wreg free
  7811  00185E  C024  F089         	movff	?___ftpack,?___ftmul
  7812  001862  C025  F08A         	movff	?___ftpack+1,?___ftmul+1
  7813  001866  C026  F08B         	movff	?___ftpack+2,?___ftmul+2
  7814  00186A  0012               	return	
  7815  00186C                     __end_of___ftmul:
  7816                           	opt stack 0
  7817                           tblptru	equ	0xFF8
  7818                           tblptrh	equ	0xFF7
  7819                           tblptrl	equ	0xFF6
  7820                           tablat	equ	0xFF5
  7821                           prodh	equ	0xFF4
  7822                           prodl	equ	0xFF3
  7823                           intcon	equ	0xFF2
  7824                           postinc0	equ	0xFEE
  7825                           wreg	equ	0xFE8
  7826                           postdec1	equ	0xFE5
  7827                           fsr1l	equ	0xFE1
  7828                           indf2	equ	0xFDF
  7829                           postinc2	equ	0xFDE
  7830                           postdec2	equ	0xFDD
  7831                           fsr2h	equ	0xFDA
  7832                           fsr2l	equ	0xFD9
  7833                           status	equ	0xFD8
  7834                           
  7835 ;; *************** function ___awmod *****************
  7836 ;; Defined at:
  7837 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  7838 ;; Parameters:    Size  Location     Type
  7839 ;;  dividend        2   35[COMRAM] int 
  7840 ;;  divisor         2   37[COMRAM] int 
  7841 ;; Auto vars:     Size  Location     Type
  7842 ;;  sign            1   40[COMRAM] unsigned char 
  7843 ;;  counter         1   39[COMRAM] unsigned char 
  7844 ;; Return value:  Size  Location     Type
  7845 ;;                  2   35[COMRAM] int 
  7846 ;; Registers used:
  7847 ;;		wreg, status,2, status,0
  7848 ;; Tracked objects:
  7849 ;;		On entry : 0/0
  7850 ;;		On exit  : 0/0
  7851 ;;		Unchanged: 0/0
  7852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7853 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7854 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7856 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7857 ;;Total ram usage:        6 bytes
  7858 ;; Hardware stack levels used:    1
  7859 ;; Hardware stack levels required when called:    3
  7860 ;; This function calls:
  7861 ;;		Nothing
  7862 ;; This function is called by:
  7863 ;;		_fround
  7864 ;;		_scale
  7865 ;; This function uses a non-reentrant model
  7866 ;;
  7867                           
  7868                           	psect	text30
  7869  0028CC                     __ptext30:
  7870                           	opt stack 0
  7871  0028CC                     ___awmod:
  7872                           	opt stack 24
  7873                           
  7874                           ;incstack = 0
  7875  0028CC  0E00               	movlw	0
  7876  0028CE  6E29               	movwf	___awmod@sign,c
  7877  0028D0  AE25               	btfss	___awmod@dividend+1,7,c
  7878  0028D2  D006               	goto	l5201
  7879  0028D4  6C24               	negf	___awmod@dividend,c
  7880  0028D6  1E25               	comf	___awmod@dividend+1,f,c
  7881  0028D8  B0D8               	btfsc	status,0,c
  7882  0028DA  2A25               	incf	___awmod@dividend+1,f,c
  7883  0028DC  0E01               	movlw	1
  7884  0028DE  6E29               	movwf	___awmod@sign,c
  7885  0028E0                     l5201:
  7886  0028E0  AE27               	btfss	___awmod@divisor+1,7,c
  7887  0028E2  D004               	goto	l5205
  7888  0028E4  6C26               	negf	___awmod@divisor,c
  7889  0028E6  1E27               	comf	___awmod@divisor+1,f,c
  7890  0028E8  B0D8               	btfsc	status,0,c
  7891  0028EA  2A27               	incf	___awmod@divisor+1,f,c
  7892  0028EC                     l5205:
  7893  0028EC  5026               	movf	___awmod@divisor,w,c
  7894  0028EE  1027               	iorwf	___awmod@divisor+1,w,c
  7895  0028F0  B4D8               	btfsc	status,2,c
  7896  0028F2  D018               	goto	l5221
  7897  0028F4  0E01               	movlw	1
  7898  0028F6  6E28               	movwf	___awmod@counter,c
  7899  0028F8  D004               	goto	l5211
  7900  0028FA                     l5209:
  7901  0028FA  90D8               	bcf	status,0,c
  7902  0028FC  3626               	rlcf	___awmod@divisor,f,c
  7903  0028FE  3627               	rlcf	___awmod@divisor+1,f,c
  7904  002900  2A28               	incf	___awmod@counter,f,c
  7905  002902                     l5211:
  7906  002902  AE27               	btfss	___awmod@divisor+1,7,c
  7907  002904  D7FA               	goto	l5209
  7908  002906                     l5213:
  7909  002906  5026               	movf	___awmod@divisor,w,c
  7910  002908  5C24               	subwf	___awmod@dividend,w,c
  7911  00290A  5027               	movf	___awmod@divisor+1,w,c
  7912  00290C  5825               	subwfb	___awmod@dividend+1,w,c
  7913  00290E  A0D8               	btfss	status,0,c
  7914  002910  D004               	goto	l5217
  7915  002912  5026               	movf	___awmod@divisor,w,c
  7916  002914  5E24               	subwf	___awmod@dividend,f,c
  7917  002916  5027               	movf	___awmod@divisor+1,w,c
  7918  002918  5A25               	subwfb	___awmod@dividend+1,f,c
  7919  00291A                     l5217:
  7920  00291A  90D8               	bcf	status,0,c
  7921  00291C  3227               	rrcf	___awmod@divisor+1,f,c
  7922  00291E  3226               	rrcf	___awmod@divisor,f,c
  7923  002920  2E28               	decfsz	___awmod@counter,f,c
  7924  002922  D7F1               	goto	l5213
  7925  002924                     l5221:
  7926  002924  5029               	movf	___awmod@sign,w,c
  7927  002926  B4D8               	btfsc	status,2,c
  7928  002928  D004               	goto	l5225
  7929  00292A  6C24               	negf	___awmod@dividend,c
  7930  00292C  1E25               	comf	___awmod@dividend+1,f,c
  7931  00292E  B0D8               	btfsc	status,0,c
  7932  002930  2A25               	incf	___awmod@dividend+1,f,c
  7933  002932                     l5225:
  7934  002932  C024  F024         	movff	___awmod@dividend,?___awmod
  7935  002936  C025  F025         	movff	___awmod@dividend+1,?___awmod+1
  7936  00293A  0012               	return	
  7937  00293C                     __end_of___awmod:
  7938                           	opt stack 0
  7939                           tblptru	equ	0xFF8
  7940                           tblptrh	equ	0xFF7
  7941                           tblptrl	equ	0xFF6
  7942                           tablat	equ	0xFF5
  7943                           prodh	equ	0xFF4
  7944                           prodl	equ	0xFF3
  7945                           intcon	equ	0xFF2
  7946                           postinc0	equ	0xFEE
  7947                           wreg	equ	0xFE8
  7948                           postdec1	equ	0xFE5
  7949                           fsr1l	equ	0xFE1
  7950                           indf2	equ	0xFDF
  7951                           postinc2	equ	0xFDE
  7952                           postdec2	equ	0xFDD
  7953                           fsr2h	equ	0xFDA
  7954                           fsr2l	equ	0xFD9
  7955                           status	equ	0xFD8
  7956                           
  7957 ;; *************** function ___awdiv *****************
  7958 ;; Defined at:
  7959 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  7960 ;; Parameters:    Size  Location     Type
  7961 ;;  dividend        2   41[COMRAM] int 
  7962 ;;  divisor         2   43[COMRAM] int 
  7963 ;; Auto vars:     Size  Location     Type
  7964 ;;  quotient        2   47[COMRAM] int 
  7965 ;;  sign            1   46[COMRAM] unsigned char 
  7966 ;;  counter         1   45[COMRAM] unsigned char 
  7967 ;; Return value:  Size  Location     Type
  7968 ;;                  2   41[COMRAM] int 
  7969 ;; Registers used:
  7970 ;;		wreg, status,2, status,0
  7971 ;; Tracked objects:
  7972 ;;		On entry : 0/0
  7973 ;;		On exit  : 0/0
  7974 ;;		Unchanged: 0/0
  7975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7976 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7977 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7979 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7980 ;;Total ram usage:        8 bytes
  7981 ;; Hardware stack levels used:    1
  7982 ;; Hardware stack levels required when called:    3
  7983 ;; This function calls:
  7984 ;;		Nothing
  7985 ;; This function is called by:
  7986 ;;		_fround
  7987 ;;		_scale
  7988 ;;		_printf
  7989 ;; This function uses a non-reentrant model
  7990 ;;
  7991                           
  7992                           	psect	text31
  7993  00274E                     __ptext31:
  7994                           	opt stack 0
  7995  00274E                     ___awdiv:
  7996                           	opt stack 24
  7997                           
  7998                           ;incstack = 0
  7999  00274E  0E00               	movlw	0
  8000  002750  6E2F               	movwf	___awdiv@sign,c
  8001  002752  AE2D               	btfss	___awdiv@divisor+1,7,c
  8002  002754  D006               	goto	l5157
  8003  002756  6C2C               	negf	___awdiv@divisor,c
  8004  002758  1E2D               	comf	___awdiv@divisor+1,f,c
  8005  00275A  B0D8               	btfsc	status,0,c
  8006  00275C  2A2D               	incf	___awdiv@divisor+1,f,c
  8007  00275E  0E01               	movlw	1
  8008  002760  6E2F               	movwf	___awdiv@sign,c
  8009  002762                     l5157:
  8010  002762  AE2B               	btfss	___awdiv@dividend+1,7,c
  8011  002764  D006               	goto	l5163
  8012  002766  6C2A               	negf	___awdiv@dividend,c
  8013  002768  1E2B               	comf	___awdiv@dividend+1,f,c
  8014  00276A  B0D8               	btfsc	status,0,c
  8015  00276C  2A2B               	incf	___awdiv@dividend+1,f,c
  8016  00276E  0E01               	movlw	1
  8017  002770  1A2F               	xorwf	___awdiv@sign,f,c
  8018  002772                     l5163:
  8019  002772  0E00               	movlw	0
  8020  002774  6E31               	movwf	___awdiv@quotient+1,c
  8021  002776  0E00               	movlw	0
  8022  002778  6E30               	movwf	___awdiv@quotient,c
  8023  00277A  502C               	movf	___awdiv@divisor,w,c
  8024  00277C  102D               	iorwf	___awdiv@divisor+1,w,c
  8025  00277E  B4D8               	btfsc	status,2,c
  8026  002780  D01C               	goto	l5185
  8027  002782  0E01               	movlw	1
  8028  002784  6E2E               	movwf	___awdiv@counter,c
  8029  002786  D004               	goto	l5171
  8030  002788                     l5169:
  8031  002788  90D8               	bcf	status,0,c
  8032  00278A  362C               	rlcf	___awdiv@divisor,f,c
  8033  00278C  362D               	rlcf	___awdiv@divisor+1,f,c
  8034  00278E  2A2E               	incf	___awdiv@counter,f,c
  8035  002790                     l5171:
  8036  002790  AE2D               	btfss	___awdiv@divisor+1,7,c
  8037  002792  D7FA               	goto	l5169
  8038  002794                     l5173:
  8039  002794  90D8               	bcf	status,0,c
  8040  002796  3630               	rlcf	___awdiv@quotient,f,c
  8041  002798  3631               	rlcf	___awdiv@quotient+1,f,c
  8042  00279A  502C               	movf	___awdiv@divisor,w,c
  8043  00279C  5C2A               	subwf	___awdiv@dividend,w,c
  8044  00279E  502D               	movf	___awdiv@divisor+1,w,c
  8045  0027A0  582B               	subwfb	___awdiv@dividend+1,w,c
  8046  0027A2  A0D8               	btfss	status,0,c
  8047  0027A4  D005               	goto	l5181
  8048  0027A6  502C               	movf	___awdiv@divisor,w,c
  8049  0027A8  5E2A               	subwf	___awdiv@dividend,f,c
  8050  0027AA  502D               	movf	___awdiv@divisor+1,w,c
  8051  0027AC  5A2B               	subwfb	___awdiv@dividend+1,f,c
  8052  0027AE  8030               	bsf	___awdiv@quotient,0,c
  8053  0027B0                     l5181:
  8054  0027B0  90D8               	bcf	status,0,c
  8055  0027B2  322D               	rrcf	___awdiv@divisor+1,f,c
  8056  0027B4  322C               	rrcf	___awdiv@divisor,f,c
  8057  0027B6  2E2E               	decfsz	___awdiv@counter,f,c
  8058  0027B8  D7ED               	goto	l5173
  8059  0027BA                     l5185:
  8060  0027BA  502F               	movf	___awdiv@sign,w,c
  8061  0027BC  B4D8               	btfsc	status,2,c
  8062  0027BE  D004               	goto	l5189
  8063  0027C0  6C30               	negf	___awdiv@quotient,c
  8064  0027C2  1E31               	comf	___awdiv@quotient+1,f,c
  8065  0027C4  B0D8               	btfsc	status,0,c
  8066  0027C6  2A31               	incf	___awdiv@quotient+1,f,c
  8067  0027C8                     l5189:
  8068  0027C8  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  8069  0027CC  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  8070  0027D0  0012               	return	
  8071  0027D2                     __end_of___awdiv:
  8072                           	opt stack 0
  8073                           tblptru	equ	0xFF8
  8074                           tblptrh	equ	0xFF7
  8075                           tblptrl	equ	0xFF6
  8076                           tablat	equ	0xFF5
  8077                           prodh	equ	0xFF4
  8078                           prodl	equ	0xFF3
  8079                           intcon	equ	0xFF2
  8080                           postinc0	equ	0xFEE
  8081                           wreg	equ	0xFE8
  8082                           postdec1	equ	0xFE5
  8083                           fsr1l	equ	0xFE1
  8084                           indf2	equ	0xFDF
  8085                           postinc2	equ	0xFDE
  8086                           postdec2	equ	0xFDD
  8087                           fsr2h	equ	0xFDA
  8088                           fsr2l	equ	0xFD9
  8089                           status	equ	0xFD8
  8090                           
  8091 ;; *************** function __tdiv_to_l_ *****************
  8092 ;; Defined at:
  8093 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  8094 ;; Parameters:    Size  Location     Type
  8095 ;;  f1              3   35[COMRAM] float 
  8096 ;;  f2              3   38[COMRAM] float 
  8097 ;; Auto vars:     Size  Location     Type
  8098 ;;  quot            4   44[COMRAM] unsigned long 
  8099 ;;  exp1            1   49[COMRAM] unsigned char 
  8100 ;;  cntr            1   48[COMRAM] unsigned char 
  8101 ;; Return value:  Size  Location     Type
  8102 ;;                  4   35[COMRAM] unsigned long 
  8103 ;; Registers used:
  8104 ;;		wreg, status,2, status,0
  8105 ;; Tracked objects:
  8106 ;;		On entry : 0/0
  8107 ;;		On exit  : 0/0
  8108 ;;		Unchanged: 0/0
  8109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8110 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8111 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8112 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8113 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8114 ;;Total ram usage:       15 bytes
  8115 ;; Hardware stack levels used:    1
  8116 ;; Hardware stack levels required when called:    3
  8117 ;; This function calls:
  8118 ;;		Nothing
  8119 ;; This function is called by:
  8120 ;;		_printf
  8121 ;; This function uses a non-reentrant model
  8122 ;;
  8123                           
  8124                           	psect	text32
  8125  001B08                     __ptext32:
  8126                           	opt stack 0
  8127  001B08                     __tdiv_to_l_:
  8128                           	opt stack 25
  8129                           
  8130                           ;incstack = 0
  8131  001B08  C026  F02A         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  8132  001B0C  6A2B               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8133  001B0E  6A2C               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8134  001B10  3425               	rlcf	__tdiv_to_l_@f1+1,w,c
  8135  001B12  362A               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8136  001B14  E301               	bnc	u4931
  8137  001B16  802B               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8138  001B18                     u4931:
  8139  001B18  502A               	movf	??__tdiv_to_l_,w,c
  8140  001B1A  6E32               	movwf	__tdiv_to_l_@exp1,c
  8141  001B1C  5032               	movf	__tdiv_to_l_@exp1,w,c
  8142  001B1E  A4D8               	btfss	status,2,c
  8143  001B20  D009               	goto	l5369
  8144  001B22  0E00               	movlw	0
  8145  001B24  6E24               	movwf	?__tdiv_to_l_,c
  8146  001B26  0E00               	movlw	0
  8147  001B28  6E25               	movwf	?__tdiv_to_l_+1,c
  8148  001B2A  0E00               	movlw	0
  8149  001B2C  6E26               	movwf	?__tdiv_to_l_+2,c
  8150  001B2E  0E00               	movlw	0
  8151  001B30  6E27               	movwf	?__tdiv_to_l_+3,c
  8152  001B32  0012               	return	
  8153  001B34                     l5369:
  8154  001B34  C029  F02A         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  8155  001B38  6A2B               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8156  001B3A  6A2C               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8157  001B3C  3428               	rlcf	__tdiv_to_l_@f2+1,w,c
  8158  001B3E  362A               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8159  001B40  E301               	bnc	u4951
  8160  001B42  802B               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8161  001B44                     u4951:
  8162  001B44  502A               	movf	??__tdiv_to_l_,w,c
  8163  001B46  6E31               	movwf	__tdiv_to_l_@cntr,c
  8164  001B48  5031               	movf	__tdiv_to_l_@cntr,w,c
  8165  001B4A  A4D8               	btfss	status,2,c
  8166  001B4C  D009               	goto	l5375
  8167  001B4E  0E00               	movlw	0
  8168  001B50  6E24               	movwf	?__tdiv_to_l_,c
  8169  001B52  0E00               	movlw	0
  8170  001B54  6E25               	movwf	?__tdiv_to_l_+1,c
  8171  001B56  0E00               	movlw	0
  8172  001B58  6E26               	movwf	?__tdiv_to_l_+2,c
  8173  001B5A  0E00               	movlw	0
  8174  001B5C  6E27               	movwf	?__tdiv_to_l_+3,c
  8175  001B5E  0012               	return	
  8176  001B60                     l5375:
  8177  001B60  8E25               	bsf	__tdiv_to_l_@f1+1,7,c
  8178  001B62  0EFF               	movlw	255
  8179  001B64  1624               	andwf	__tdiv_to_l_@f1,f,c
  8180  001B66  0EFF               	movlw	255
  8181  001B68  1625               	andwf	__tdiv_to_l_@f1+1,f,c
  8182  001B6A  0E00               	movlw	0
  8183  001B6C  1626               	andwf	__tdiv_to_l_@f1+2,f,c
  8184  001B6E  8E28               	bsf	__tdiv_to_l_@f2+1,7,c
  8185  001B70  0EFF               	movlw	255
  8186  001B72  1627               	andwf	__tdiv_to_l_@f2,f,c
  8187  001B74  0EFF               	movlw	255
  8188  001B76  1628               	andwf	__tdiv_to_l_@f2+1,f,c
  8189  001B78  0E00               	movlw	0
  8190  001B7A  1629               	andwf	__tdiv_to_l_@f2+2,f,c
  8191  001B7C  0E00               	movlw	0
  8192  001B7E  6E2D               	movwf	__tdiv_to_l_@quot,c
  8193  001B80  0E00               	movlw	0
  8194  001B82  6E2E               	movwf	__tdiv_to_l_@quot+1,c
  8195  001B84  0E00               	movlw	0
  8196  001B86  6E2F               	movwf	__tdiv_to_l_@quot+2,c
  8197  001B88  0E00               	movlw	0
  8198  001B8A  6E30               	movwf	__tdiv_to_l_@quot+3,c
  8199  001B8C  0E7F               	movlw	127
  8200  001B8E  5E32               	subwf	__tdiv_to_l_@exp1,f,c
  8201  001B90  5031               	movf	__tdiv_to_l_@cntr,w,c
  8202  001B92  0F98               	addlw	152
  8203  001B94  5E32               	subwf	__tdiv_to_l_@exp1,f,c
  8204  001B96  0E18               	movlw	24
  8205  001B98  6E31               	movwf	__tdiv_to_l_@cntr,c
  8206  001B9A                     l1048:
  8207  001B9A  90D8               	bcf	status,0,c
  8208  001B9C  362D               	rlcf	__tdiv_to_l_@quot,f,c
  8209  001B9E  362E               	rlcf	__tdiv_to_l_@quot+1,f,c
  8210  001BA0  362F               	rlcf	__tdiv_to_l_@quot+2,f,c
  8211  001BA2  3630               	rlcf	__tdiv_to_l_@quot+3,f,c
  8212  001BA4  5027               	movf	__tdiv_to_l_@f2,w,c
  8213  001BA6  5C24               	subwf	__tdiv_to_l_@f1,w,c
  8214  001BA8  5028               	movf	__tdiv_to_l_@f2+1,w,c
  8215  001BAA  5825               	subwfb	__tdiv_to_l_@f1+1,w,c
  8216  001BAC  5029               	movf	__tdiv_to_l_@f2+2,w,c
  8217  001BAE  5826               	subwfb	__tdiv_to_l_@f1+2,w,c
  8218  001BB0  A0D8               	btfss	status,0,c
  8219  001BB2  D007               	goto	l1049
  8220  001BB4  5027               	movf	__tdiv_to_l_@f2,w,c
  8221  001BB6  5E24               	subwf	__tdiv_to_l_@f1,f,c
  8222  001BB8  5028               	movf	__tdiv_to_l_@f2+1,w,c
  8223  001BBA  5A25               	subwfb	__tdiv_to_l_@f1+1,f,c
  8224  001BBC  5029               	movf	__tdiv_to_l_@f2+2,w,c
  8225  001BBE  5A26               	subwfb	__tdiv_to_l_@f1+2,f,c
  8226  001BC0  802D               	bsf	__tdiv_to_l_@quot,0,c
  8227  001BC2                     l1049:
  8228  001BC2  90D8               	bcf	status,0,c
  8229  001BC4  3624               	rlcf	__tdiv_to_l_@f1,f,c
  8230  001BC6  3625               	rlcf	__tdiv_to_l_@f1+1,f,c
  8231  001BC8  3626               	rlcf	__tdiv_to_l_@f1+2,f,c
  8232  001BCA  2E31               	decfsz	__tdiv_to_l_@cntr,f,c
  8233  001BCC  D7E6               	goto	l1048
  8234  001BCE  AE32               	btfss	__tdiv_to_l_@exp1,7,c
  8235  001BD0  D016               	goto	l5409
  8236  001BD2  5032               	movf	__tdiv_to_l_@exp1,w,c
  8237  001BD4  0A80               	xorlw	128
  8238  001BD6  0F97               	addlw	151
  8239  001BD8  B0D8               	btfsc	status,0,c
  8240  001BDA  D009               	goto	l5405
  8241  001BDC  0E00               	movlw	0
  8242  001BDE  6E24               	movwf	?__tdiv_to_l_,c
  8243  001BE0  0E00               	movlw	0
  8244  001BE2  6E25               	movwf	?__tdiv_to_l_+1,c
  8245  001BE4  0E00               	movlw	0
  8246  001BE6  6E26               	movwf	?__tdiv_to_l_+2,c
  8247  001BE8  0E00               	movlw	0
  8248  001BEA  6E27               	movwf	?__tdiv_to_l_+3,c
  8249  001BEC  0012               	return	
  8250  001BEE                     l5405:
  8251  001BEE  90D8               	bcf	status,0,c
  8252  001BF0  3230               	rrcf	__tdiv_to_l_@quot+3,f,c
  8253  001BF2  322F               	rrcf	__tdiv_to_l_@quot+2,f,c
  8254  001BF4  322E               	rrcf	__tdiv_to_l_@quot+1,f,c
  8255  001BF6  322D               	rrcf	__tdiv_to_l_@quot,f,c
  8256  001BF8  3E32               	incfsz	__tdiv_to_l_@exp1,f,c
  8257  001BFA  D7F9               	goto	l5405
  8258  001BFC  D015               	goto	l1055
  8259  001BFE                     l5409:
  8260  001BFE  0E17               	movlw	23
  8261  001C00  6432               	cpfsgt	__tdiv_to_l_@exp1,c
  8262  001C02  D00F               	goto	l5417
  8263  001C04  0E00               	movlw	0
  8264  001C06  6E24               	movwf	?__tdiv_to_l_,c
  8265  001C08  0E00               	movlw	0
  8266  001C0A  6E25               	movwf	?__tdiv_to_l_+1,c
  8267  001C0C  0E00               	movlw	0
  8268  001C0E  6E26               	movwf	?__tdiv_to_l_+2,c
  8269  001C10  0E00               	movlw	0
  8270  001C12  6E27               	movwf	?__tdiv_to_l_+3,c
  8271  001C14  0012               	return	
  8272  001C16                     l5415:
  8273  001C16  90D8               	bcf	status,0,c
  8274  001C18  362D               	rlcf	__tdiv_to_l_@quot,f,c
  8275  001C1A  362E               	rlcf	__tdiv_to_l_@quot+1,f,c
  8276  001C1C  362F               	rlcf	__tdiv_to_l_@quot+2,f,c
  8277  001C1E  3630               	rlcf	__tdiv_to_l_@quot+3,f,c
  8278  001C20  0632               	decf	__tdiv_to_l_@exp1,f,c
  8279  001C22                     l5417:
  8280  001C22  5032               	movf	__tdiv_to_l_@exp1,w,c
  8281  001C24  A4D8               	btfss	status,2,c
  8282  001C26  D7F7               	goto	l5415
  8283  001C28                     l1055:
  8284  001C28  C02D  F024         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  8285  001C2C  C02E  F025         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  8286  001C30  C02F  F026         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  8287  001C34  C030  F027         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  8288  001C38  0012               	return		;funcret
  8289  001C3A                     __end_of__tdiv_to_l_:
  8290                           	opt stack 0
  8291                           tblptru	equ	0xFF8
  8292                           tblptrh	equ	0xFF7
  8293                           tblptrl	equ	0xFF6
  8294                           tablat	equ	0xFF5
  8295                           prodh	equ	0xFF4
  8296                           prodl	equ	0xFF3
  8297                           intcon	equ	0xFF2
  8298                           postinc0	equ	0xFEE
  8299                           wreg	equ	0xFE8
  8300                           postdec1	equ	0xFE5
  8301                           fsr1l	equ	0xFE1
  8302                           indf2	equ	0xFDF
  8303                           postinc2	equ	0xFDE
  8304                           postdec2	equ	0xFDD
  8305                           fsr2h	equ	0xFDA
  8306                           fsr2l	equ	0xFD9
  8307                           status	equ	0xFD8
  8308                           
  8309 ;; *************** function __div_to_l_ *****************
  8310 ;; Defined at:
  8311 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  8312 ;; Parameters:    Size  Location     Type
  8313 ;;  f1              3   35[COMRAM] unsigned long 
  8314 ;;  f2              3   38[COMRAM] unsigned long 
  8315 ;; Auto vars:     Size  Location     Type
  8316 ;;  quot            4   41[COMRAM] unsigned long 
  8317 ;;  exp1            1   46[COMRAM] unsigned char 
  8318 ;;  cntr            1   45[COMRAM] unsigned char 
  8319 ;; Return value:  Size  Location     Type
  8320 ;;                  4   35[COMRAM] unsigned long 
  8321 ;; Registers used:
  8322 ;;		wreg, status,2, status,0
  8323 ;; Tracked objects:
  8324 ;;		On entry : 0/0
  8325 ;;		On exit  : 0/0
  8326 ;;		Unchanged: 0/0
  8327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8328 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8329 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8331 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8332 ;;Total ram usage:       12 bytes
  8333 ;; Hardware stack levels used:    1
  8334 ;; Hardware stack levels required when called:    3
  8335 ;; This function calls:
  8336 ;;		Nothing
  8337 ;; This function is called by:
  8338 ;;		_printf
  8339 ;; This function uses a non-reentrant model
  8340 ;;
  8341                           
  8342                           	psect	text33
  8343  001C3A                     __ptext33:
  8344                           	opt stack 0
  8345  001C3A                     __div_to_l_:
  8346                           	opt stack 25
  8347                           
  8348                           ;incstack = 0
  8349  001C3A  3426               	rlcf	__div_to_l_@f1+2,w,c
  8350  001C3C  3427               	rlcf	__div_to_l_@f1+3,w,c
  8351  001C3E  6E2F               	movwf	__div_to_l_@exp1,c
  8352  001C40  502F               	movf	__div_to_l_@exp1,w,c
  8353  001C42  A4D8               	btfss	status,2,c
  8354  001C44  D009               	goto	l5425
  8355  001C46  0E00               	movlw	0
  8356  001C48  6E24               	movwf	?__div_to_l_,c
  8357  001C4A  0E00               	movlw	0
  8358  001C4C  6E25               	movwf	?__div_to_l_+1,c
  8359  001C4E  0E00               	movlw	0
  8360  001C50  6E26               	movwf	?__div_to_l_+2,c
  8361  001C52  0E00               	movlw	0
  8362  001C54  6E27               	movwf	?__div_to_l_+3,c
  8363  001C56  0012               	return	
  8364  001C58                     l5425:
  8365  001C58  3429               	rlcf	__div_to_l_@f2+2,w,c
  8366  001C5A  342A               	rlcf	__div_to_l_@f2+3,w,c
  8367  001C5C  6E2E               	movwf	__div_to_l_@cntr,c
  8368  001C5E  502E               	movf	__div_to_l_@cntr,w,c
  8369  001C60  A4D8               	btfss	status,2,c
  8370  001C62  D009               	goto	l5431
  8371  001C64  0E00               	movlw	0
  8372  001C66  6E24               	movwf	?__div_to_l_,c
  8373  001C68  0E00               	movlw	0
  8374  001C6A  6E25               	movwf	?__div_to_l_+1,c
  8375  001C6C  0E00               	movlw	0
  8376  001C6E  6E26               	movwf	?__div_to_l_+2,c
  8377  001C70  0E00               	movlw	0
  8378  001C72  6E27               	movwf	?__div_to_l_+3,c
  8379  001C74  0012               	return	
  8380  001C76                     l5431:
  8381  001C76  8E26               	bsf	__div_to_l_@f1+2,7,c
  8382  001C78  0EFF               	movlw	255
  8383  001C7A  1624               	andwf	__div_to_l_@f1,f,c
  8384  001C7C  0EFF               	movlw	255
  8385  001C7E  1625               	andwf	__div_to_l_@f1+1,f,c
  8386  001C80  0EFF               	movlw	255
  8387  001C82  1626               	andwf	__div_to_l_@f1+2,f,c
  8388  001C84  0E00               	movlw	0
  8389  001C86  1627               	andwf	__div_to_l_@f1+3,f,c
  8390  001C88  8E29               	bsf	__div_to_l_@f2+2,7,c
  8391  001C8A  0EFF               	movlw	255
  8392  001C8C  1627               	andwf	__div_to_l_@f2,f,c
  8393  001C8E  0EFF               	movlw	255
  8394  001C90  1628               	andwf	__div_to_l_@f2+1,f,c
  8395  001C92  0EFF               	movlw	255
  8396  001C94  1629               	andwf	__div_to_l_@f2+2,f,c
  8397  001C96  0E00               	movlw	0
  8398  001C98  162A               	andwf	__div_to_l_@f2+3,f,c
  8399  001C9A  0E00               	movlw	0
  8400  001C9C  6E2A               	movwf	__div_to_l_@quot,c
  8401  001C9E  0E00               	movlw	0
  8402  001CA0  6E2B               	movwf	__div_to_l_@quot+1,c
  8403  001CA2  0E00               	movlw	0
  8404  001CA4  6E2C               	movwf	__div_to_l_@quot+2,c
  8405  001CA6  0E00               	movlw	0
  8406  001CA8  6E2D               	movwf	__div_to_l_@quot+3,c
  8407  001CAA  0E7F               	movlw	127
  8408  001CAC  5E2F               	subwf	__div_to_l_@exp1,f,c
  8409  001CAE  502E               	movf	__div_to_l_@cntr,w,c
  8410  001CB0  0FA0               	addlw	160
  8411  001CB2  5E2F               	subwf	__div_to_l_@exp1,f,c
  8412  001CB4  0E20               	movlw	32
  8413  001CB6  6E2E               	movwf	__div_to_l_@cntr,c
  8414  001CB8                     l5445:
  8415  001CB8  90D8               	bcf	status,0,c
  8416  001CBA  362A               	rlcf	__div_to_l_@quot,f,c
  8417  001CBC  362B               	rlcf	__div_to_l_@quot+1,f,c
  8418  001CBE  362C               	rlcf	__div_to_l_@quot+2,f,c
  8419  001CC0  362D               	rlcf	__div_to_l_@quot+3,f,c
  8420  001CC2  5027               	movf	__div_to_l_@f2,w,c
  8421  001CC4  5C24               	subwf	__div_to_l_@f1,w,c
  8422  001CC6  5028               	movf	__div_to_l_@f2+1,w,c
  8423  001CC8  5825               	subwfb	__div_to_l_@f1+1,w,c
  8424  001CCA  5029               	movf	__div_to_l_@f2+2,w,c
  8425  001CCC  5826               	subwfb	__div_to_l_@f1+2,w,c
  8426  001CCE  502A               	movf	__div_to_l_@f2+3,w,c
  8427  001CD0  5827               	subwfb	__div_to_l_@f1+3,w,c
  8428  001CD2  A0D8               	btfss	status,0,c
  8429  001CD4  D009               	goto	l5453
  8430  001CD6  5027               	movf	__div_to_l_@f2,w,c
  8431  001CD8  5E24               	subwf	__div_to_l_@f1,f,c
  8432  001CDA  5028               	movf	__div_to_l_@f2+1,w,c
  8433  001CDC  5A25               	subwfb	__div_to_l_@f1+1,f,c
  8434  001CDE  5029               	movf	__div_to_l_@f2+2,w,c
  8435  001CE0  5A26               	subwfb	__div_to_l_@f1+2,f,c
  8436  001CE2  502A               	movf	__div_to_l_@f2+3,w,c
  8437  001CE4  5A27               	subwfb	__div_to_l_@f1+3,f,c
  8438  001CE6  802A               	bsf	__div_to_l_@quot,0,c
  8439  001CE8                     l5453:
  8440  001CE8  90D8               	bcf	status,0,c
  8441  001CEA  3624               	rlcf	__div_to_l_@f1,f,c
  8442  001CEC  3625               	rlcf	__div_to_l_@f1+1,f,c
  8443  001CEE  3626               	rlcf	__div_to_l_@f1+2,f,c
  8444  001CF0  3627               	rlcf	__div_to_l_@f1+3,f,c
  8445  001CF2  2E2E               	decfsz	__div_to_l_@cntr,f,c
  8446  001CF4  D7E1               	goto	l5445
  8447  001CF6  AE2F               	btfss	__div_to_l_@exp1,7,c
  8448  001CF8  D016               	goto	l5469
  8449  001CFA  502F               	movf	__div_to_l_@exp1,w,c
  8450  001CFC  0A80               	xorlw	128
  8451  001CFE  0F9F               	addlw	159
  8452  001D00  B0D8               	btfsc	status,0,c
  8453  001D02  D009               	goto	l5465
  8454  001D04  0E00               	movlw	0
  8455  001D06  6E24               	movwf	?__div_to_l_,c
  8456  001D08  0E00               	movlw	0
  8457  001D0A  6E25               	movwf	?__div_to_l_+1,c
  8458  001D0C  0E00               	movlw	0
  8459  001D0E  6E26               	movwf	?__div_to_l_+2,c
  8460  001D10  0E00               	movlw	0
  8461  001D12  6E27               	movwf	?__div_to_l_+3,c
  8462  001D14  0012               	return	
  8463  001D16                     l5465:
  8464  001D16  90D8               	bcf	status,0,c
  8465  001D18  322D               	rrcf	__div_to_l_@quot+3,f,c
  8466  001D1A  322C               	rrcf	__div_to_l_@quot+2,f,c
  8467  001D1C  322B               	rrcf	__div_to_l_@quot+1,f,c
  8468  001D1E  322A               	rrcf	__div_to_l_@quot,f,c
  8469  001D20  3E2F               	incfsz	__div_to_l_@exp1,f,c
  8470  001D22  D7F9               	goto	l5465
  8471  001D24  D015               	goto	l951
  8472  001D26                     l5469:
  8473  001D26  0E1F               	movlw	31
  8474  001D28  642F               	cpfsgt	__div_to_l_@exp1,c
  8475  001D2A  D00F               	goto	l5477
  8476  001D2C  0E00               	movlw	0
  8477  001D2E  6E24               	movwf	?__div_to_l_,c
  8478  001D30  0E00               	movlw	0
  8479  001D32  6E25               	movwf	?__div_to_l_+1,c
  8480  001D34  0E00               	movlw	0
  8481  001D36  6E26               	movwf	?__div_to_l_+2,c
  8482  001D38  0E00               	movlw	0
  8483  001D3A  6E27               	movwf	?__div_to_l_+3,c
  8484  001D3C  0012               	return	
  8485  001D3E                     l5475:
  8486  001D3E  90D8               	bcf	status,0,c
  8487  001D40  362A               	rlcf	__div_to_l_@quot,f,c
  8488  001D42  362B               	rlcf	__div_to_l_@quot+1,f,c
  8489  001D44  362C               	rlcf	__div_to_l_@quot+2,f,c
  8490  001D46  362D               	rlcf	__div_to_l_@quot+3,f,c
  8491  001D48  062F               	decf	__div_to_l_@exp1,f,c
  8492  001D4A                     l5477:
  8493  001D4A  502F               	movf	__div_to_l_@exp1,w,c
  8494  001D4C  A4D8               	btfss	status,2,c
  8495  001D4E  D7F7               	goto	l5475
  8496  001D50                     l951:
  8497  001D50  C02A  F024         	movff	__div_to_l_@quot,?__div_to_l_
  8498  001D54  C02B  F025         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  8499  001D58  C02C  F026         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  8500  001D5C  C02D  F027         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  8501  001D60  0012               	return		;funcret
  8502  001D62                     __end_of__div_to_l_:
  8503                           	opt stack 0
  8504                           tblptru	equ	0xFF8
  8505                           tblptrh	equ	0xFF7
  8506                           tblptrl	equ	0xFF6
  8507                           tablat	equ	0xFF5
  8508                           prodh	equ	0xFF4
  8509                           prodl	equ	0xFF3
  8510                           intcon	equ	0xFF2
  8511                           postinc0	equ	0xFEE
  8512                           wreg	equ	0xFE8
  8513                           postdec1	equ	0xFE5
  8514                           fsr1l	equ	0xFE1
  8515                           indf2	equ	0xFDF
  8516                           postinc2	equ	0xFDE
  8517                           postdec2	equ	0xFDD
  8518                           fsr2h	equ	0xFDA
  8519                           fsr2l	equ	0xFD9
  8520                           status	equ	0xFD8
  8521                           
  8522 ;; *************** function ___lltoft *****************
  8523 ;; Defined at:
  8524 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  8525 ;; Parameters:    Size  Location     Type
  8526 ;;  c               4   43[COMRAM] unsigned long 
  8527 ;; Auto vars:     Size  Location     Type
  8528 ;;  exp             1   51[COMRAM] unsigned char 
  8529 ;; Return value:  Size  Location     Type
  8530 ;;                  3   43[COMRAM] float 
  8531 ;; Registers used:
  8532 ;;		wreg, status,2, status,0, cstack
  8533 ;; Tracked objects:
  8534 ;;		On entry : 0/0
  8535 ;;		On exit  : 0/0
  8536 ;;		Unchanged: 0/0
  8537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8538 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8539 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8540 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8541 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8542 ;;Total ram usage:        9 bytes
  8543 ;; Hardware stack levels used:    1
  8544 ;; Hardware stack levels required when called:    4
  8545 ;; This function calls:
  8546 ;;		___ftpack
  8547 ;; This function is called by:
  8548 ;;		_printf
  8549 ;; This function uses a non-reentrant model
  8550 ;;
  8551                           
  8552                           	psect	text34
  8553  002A08                     __ptext34:
  8554                           	opt stack 0
  8555  002A08                     ___lltoft:
  8556                           	opt stack 24
  8557                           
  8558                           ;incstack = 0
  8559  002A08  0E8E               	movlw	142
  8560  002A0A  6E34               	movwf	___lltoft@exp,c
  8561  002A0C  D006               	goto	l5551
  8562  002A0E                     l5549:
  8563  002A0E  90D8               	bcf	status,0,c
  8564  002A10  322F               	rrcf	___lltoft@c+3,f,c
  8565  002A12  322E               	rrcf	___lltoft@c+2,f,c
  8566  002A14  322D               	rrcf	___lltoft@c+1,f,c
  8567  002A16  322C               	rrcf	___lltoft@c,f,c
  8568  002A18  2A34               	incf	___lltoft@exp,f,c
  8569  002A1A                     l5551:
  8570  002A1A  0E00               	movlw	0
  8571  002A1C  142C               	andwf	___lltoft@c,w,c
  8572  002A1E  6E30               	movwf	??___lltoft& (0+255),c
  8573  002A20  0E00               	movlw	0
  8574  002A22  142D               	andwf	___lltoft@c+1,w,c
  8575  002A24  6E31               	movwf	(??___lltoft+1)& (0+255),c
  8576  002A26  0E00               	movlw	0
  8577  002A28  142E               	andwf	___lltoft@c+2,w,c
  8578  002A2A  6E32               	movwf	(??___lltoft+2)& (0+255),c
  8579  002A2C  0EFF               	movlw	255
  8580  002A2E  142F               	andwf	___lltoft@c+3,w,c
  8581  002A30  6E33               	movwf	(??___lltoft+3)& (0+255),c
  8582  002A32  5030               	movf	??___lltoft,w,c
  8583  002A34  1031               	iorwf	??___lltoft+1,w,c
  8584  002A36  1032               	iorwf	??___lltoft+2,w,c
  8585  002A38  1033               	iorwf	??___lltoft+3,w,c
  8586  002A3A  A4D8               	btfss	status,2,c
  8587  002A3C  D7E8               	goto	l5549
  8588  002A3E  C02C  F024         	movff	___lltoft@c,___ftpack@arg
  8589  002A42  C02D  F025         	movff	___lltoft@c+1,___ftpack@arg+1
  8590  002A46  C02E  F026         	movff	___lltoft@c+2,___ftpack@arg+2
  8591  002A4A  C034  F027         	movff	___lltoft@exp,___ftpack@exp
  8592  002A4E  0E00               	movlw	0
  8593  002A50  6E28               	movwf	___ftpack@sign,c
  8594  002A52  ECDB  F011         	call	___ftpack	;wreg free
  8595  002A56  C024  F02C         	movff	?___ftpack,?___lltoft
  8596  002A5A  C025  F02D         	movff	?___ftpack+1,?___lltoft+1
  8597  002A5E  C026  F02E         	movff	?___ftpack+2,?___lltoft+2
  8598  002A62  0012               	return	
  8599  002A64                     __end_of___lltoft:
  8600                           	opt stack 0
  8601                           tblptru	equ	0xFF8
  8602                           tblptrh	equ	0xFF7
  8603                           tblptrl	equ	0xFF6
  8604                           tablat	equ	0xFF5
  8605                           prodh	equ	0xFF4
  8606                           prodl	equ	0xFF3
  8607                           intcon	equ	0xFF2
  8608                           postinc0	equ	0xFEE
  8609                           wreg	equ	0xFE8
  8610                           postdec1	equ	0xFE5
  8611                           fsr1l	equ	0xFE1
  8612                           indf2	equ	0xFDF
  8613                           postinc2	equ	0xFDE
  8614                           postdec2	equ	0xFDD
  8615                           fsr2h	equ	0xFDA
  8616                           fsr2l	equ	0xFD9
  8617                           status	equ	0xFD8
  8618                           
  8619 ;; *************** function ___llmod *****************
  8620 ;; Defined at:
  8621 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  8622 ;; Parameters:    Size  Location     Type
  8623 ;;  dividend        4   48[COMRAM] unsigned long 
  8624 ;;  divisor         4   52[COMRAM] unsigned long 
  8625 ;; Auto vars:     Size  Location     Type
  8626 ;;  counter         1   56[COMRAM] unsigned char 
  8627 ;; Return value:  Size  Location     Type
  8628 ;;                  4   48[COMRAM] unsigned long 
  8629 ;; Registers used:
  8630 ;;		wreg, status,2, status,0
  8631 ;; Tracked objects:
  8632 ;;		On entry : 0/0
  8633 ;;		On exit  : 0/0
  8634 ;;		Unchanged: 0/0
  8635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8636 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8637 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8639 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8640 ;;Total ram usage:        9 bytes
  8641 ;; Hardware stack levels used:    1
  8642 ;; Hardware stack levels required when called:    3
  8643 ;; This function calls:
  8644 ;;		Nothing
  8645 ;; This function is called by:
  8646 ;;		_printf
  8647 ;; This function uses a non-reentrant model
  8648 ;;
  8649                           
  8650                           	psect	text35
  8651  00293C                     __ptext35:
  8652                           	opt stack 0
  8653  00293C                     ___llmod:
  8654                           	opt stack 25
  8655                           
  8656                           ;incstack = 0
  8657  00293C  5035               	movf	___llmod@divisor,w,c
  8658  00293E  1036               	iorwf	___llmod@divisor+1,w,c
  8659  002940  1037               	iorwf	___llmod@divisor+2,w,c
  8660  002942  1038               	iorwf	___llmod@divisor+3,w,c
  8661  002944  B4D8               	btfsc	status,2,c
  8662  002946  D024               	goto	l1135
  8663  002948  0E01               	movlw	1
  8664  00294A  6E39               	movwf	___llmod@counter,c
  8665  00294C  D006               	goto	l5537
  8666  00294E                     l5535:
  8667  00294E  90D8               	bcf	status,0,c
  8668  002950  3635               	rlcf	___llmod@divisor,f,c
  8669  002952  3636               	rlcf	___llmod@divisor+1,f,c
  8670  002954  3637               	rlcf	___llmod@divisor+2,f,c
  8671  002956  3638               	rlcf	___llmod@divisor+3,f,c
  8672  002958  2A39               	incf	___llmod@counter,f,c
  8673  00295A                     l5537:
  8674  00295A  AE38               	btfss	___llmod@divisor+3,7,c
  8675  00295C  D7F8               	goto	l5535
  8676  00295E                     l5539:
  8677  00295E  5035               	movf	___llmod@divisor,w,c
  8678  002960  5C31               	subwf	___llmod@dividend,w,c
  8679  002962  5036               	movf	___llmod@divisor+1,w,c
  8680  002964  5832               	subwfb	___llmod@dividend+1,w,c
  8681  002966  5037               	movf	___llmod@divisor+2,w,c
  8682  002968  5833               	subwfb	___llmod@dividend+2,w,c
  8683  00296A  5038               	movf	___llmod@divisor+3,w,c
  8684  00296C  5834               	subwfb	___llmod@dividend+3,w,c
  8685  00296E  A0D8               	btfss	status,0,c
  8686  002970  D008               	goto	l5543
  8687  002972  5035               	movf	___llmod@divisor,w,c
  8688  002974  5E31               	subwf	___llmod@dividend,f,c
  8689  002976  5036               	movf	___llmod@divisor+1,w,c
  8690  002978  5A32               	subwfb	___llmod@dividend+1,f,c
  8691  00297A  5037               	movf	___llmod@divisor+2,w,c
  8692  00297C  5A33               	subwfb	___llmod@dividend+2,f,c
  8693  00297E  5038               	movf	___llmod@divisor+3,w,c
  8694  002980  5A34               	subwfb	___llmod@dividend+3,f,c
  8695  002982                     l5543:
  8696  002982  90D8               	bcf	status,0,c
  8697  002984  3238               	rrcf	___llmod@divisor+3,f,c
  8698  002986  3237               	rrcf	___llmod@divisor+2,f,c
  8699  002988  3236               	rrcf	___llmod@divisor+1,f,c
  8700  00298A  3235               	rrcf	___llmod@divisor,f,c
  8701  00298C  2E39               	decfsz	___llmod@counter,f,c
  8702  00298E  D7E7               	goto	l5539
  8703  002990                     l1135:
  8704  002990  C031  F031         	movff	___llmod@dividend,?___llmod
  8705  002994  C032  F032         	movff	___llmod@dividend+1,?___llmod+1
  8706  002998  C033  F033         	movff	___llmod@dividend+2,?___llmod+2
  8707  00299C  C034  F034         	movff	___llmod@dividend+3,?___llmod+3
  8708  0029A0  0012               	return		;funcret
  8709  0029A2                     __end_of___llmod:
  8710                           	opt stack 0
  8711                           tblptru	equ	0xFF8
  8712                           tblptrh	equ	0xFF7
  8713                           tblptrl	equ	0xFF6
  8714                           tablat	equ	0xFF5
  8715                           prodh	equ	0xFF4
  8716                           prodl	equ	0xFF3
  8717                           intcon	equ	0xFF2
  8718                           postinc0	equ	0xFEE
  8719                           wreg	equ	0xFE8
  8720                           postdec1	equ	0xFE5
  8721                           fsr1l	equ	0xFE1
  8722                           indf2	equ	0xFDF
  8723                           postinc2	equ	0xFDE
  8724                           postdec2	equ	0xFDD
  8725                           fsr2h	equ	0xFDA
  8726                           fsr2l	equ	0xFD9
  8727                           status	equ	0xFD8
  8728                           
  8729 ;; *************** function ___lldiv *****************
  8730 ;; Defined at:
  8731 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  8732 ;; Parameters:    Size  Location     Type
  8733 ;;  dividend        4   35[COMRAM] unsigned long 
  8734 ;;  divisor         4   39[COMRAM] unsigned long 
  8735 ;; Auto vars:     Size  Location     Type
  8736 ;;  quotient        4   43[COMRAM] unsigned long 
  8737 ;;  counter         1   47[COMRAM] unsigned char 
  8738 ;; Return value:  Size  Location     Type
  8739 ;;                  4   35[COMRAM] unsigned long 
  8740 ;; Registers used:
  8741 ;;		wreg, status,2, status,0
  8742 ;; Tracked objects:
  8743 ;;		On entry : 0/0
  8744 ;;		On exit  : 0/0
  8745 ;;		Unchanged: 0/0
  8746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8747 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8748 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8750 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8751 ;;Total ram usage:       13 bytes
  8752 ;; Hardware stack levels used:    1
  8753 ;; Hardware stack levels required when called:    3
  8754 ;; This function calls:
  8755 ;;		Nothing
  8756 ;; This function is called by:
  8757 ;;		_printf
  8758 ;;		_I2C_Master_Init
  8759 ;; This function uses a non-reentrant model
  8760 ;;
  8761                           
  8762                           	psect	text36
  8763  0027D2                     __ptext36:
  8764                           	opt stack 0
  8765  0027D2                     ___lldiv:
  8766                           	opt stack 25
  8767                           
  8768                           ;incstack = 0
  8769  0027D2  0E00               	movlw	0
  8770  0027D4  6E2C               	movwf	___lldiv@quotient,c
  8771  0027D6  0E00               	movlw	0
  8772  0027D8  6E2D               	movwf	___lldiv@quotient+1,c
  8773  0027DA  0E00               	movlw	0
  8774  0027DC  6E2E               	movwf	___lldiv@quotient+2,c
  8775  0027DE  0E00               	movlw	0
  8776  0027E0  6E2F               	movwf	___lldiv@quotient+3,c
  8777  0027E2  5028               	movf	___lldiv@divisor,w,c
  8778  0027E4  1029               	iorwf	___lldiv@divisor+1,w,c
  8779  0027E6  102A               	iorwf	___lldiv@divisor+2,w,c
  8780  0027E8  102B               	iorwf	___lldiv@divisor+3,w,c
  8781  0027EA  B4D8               	btfsc	status,2,c
  8782  0027EC  D02A               	goto	l1125
  8783  0027EE  0E01               	movlw	1
  8784  0027F0  6E30               	movwf	___lldiv@counter,c
  8785  0027F2  D006               	goto	l5517
  8786  0027F4                     l5515:
  8787  0027F4  90D8               	bcf	status,0,c
  8788  0027F6  3628               	rlcf	___lldiv@divisor,f,c
  8789  0027F8  3629               	rlcf	___lldiv@divisor+1,f,c
  8790  0027FA  362A               	rlcf	___lldiv@divisor+2,f,c
  8791  0027FC  362B               	rlcf	___lldiv@divisor+3,f,c
  8792  0027FE  2A30               	incf	___lldiv@counter,f,c
  8793  002800                     l5517:
  8794  002800  AE2B               	btfss	___lldiv@divisor+3,7,c
  8795  002802  D7F8               	goto	l5515
  8796  002804                     l5519:
  8797  002804  90D8               	bcf	status,0,c
  8798  002806  362C               	rlcf	___lldiv@quotient,f,c
  8799  002808  362D               	rlcf	___lldiv@quotient+1,f,c
  8800  00280A  362E               	rlcf	___lldiv@quotient+2,f,c
  8801  00280C  362F               	rlcf	___lldiv@quotient+3,f,c
  8802  00280E  5028               	movf	___lldiv@divisor,w,c
  8803  002810  5C24               	subwf	___lldiv@dividend,w,c
  8804  002812  5029               	movf	___lldiv@divisor+1,w,c
  8805  002814  5825               	subwfb	___lldiv@dividend+1,w,c
  8806  002816  502A               	movf	___lldiv@divisor+2,w,c
  8807  002818  5826               	subwfb	___lldiv@dividend+2,w,c
  8808  00281A  502B               	movf	___lldiv@divisor+3,w,c
  8809  00281C  5827               	subwfb	___lldiv@dividend+3,w,c
  8810  00281E  A0D8               	btfss	status,0,c
  8811  002820  D009               	goto	l5527
  8812  002822  5028               	movf	___lldiv@divisor,w,c
  8813  002824  5E24               	subwf	___lldiv@dividend,f,c
  8814  002826  5029               	movf	___lldiv@divisor+1,w,c
  8815  002828  5A25               	subwfb	___lldiv@dividend+1,f,c
  8816  00282A  502A               	movf	___lldiv@divisor+2,w,c
  8817  00282C  5A26               	subwfb	___lldiv@dividend+2,f,c
  8818  00282E  502B               	movf	___lldiv@divisor+3,w,c
  8819  002830  5A27               	subwfb	___lldiv@dividend+3,f,c
  8820  002832  802C               	bsf	___lldiv@quotient,0,c
  8821  002834                     l5527:
  8822  002834  90D8               	bcf	status,0,c
  8823  002836  322B               	rrcf	___lldiv@divisor+3,f,c
  8824  002838  322A               	rrcf	___lldiv@divisor+2,f,c
  8825  00283A  3229               	rrcf	___lldiv@divisor+1,f,c
  8826  00283C  3228               	rrcf	___lldiv@divisor,f,c
  8827  00283E  2E30               	decfsz	___lldiv@counter,f,c
  8828  002840  D7E1               	goto	l5519
  8829  002842                     l1125:
  8830  002842  C02C  F024         	movff	___lldiv@quotient,?___lldiv
  8831  002846  C02D  F025         	movff	___lldiv@quotient+1,?___lldiv+1
  8832  00284A  C02E  F026         	movff	___lldiv@quotient+2,?___lldiv+2
  8833  00284E  C02F  F027         	movff	___lldiv@quotient+3,?___lldiv+3
  8834  002852  0012               	return		;funcret
  8835  002854                     __end_of___lldiv:
  8836                           	opt stack 0
  8837                           tblptru	equ	0xFF8
  8838                           tblptrh	equ	0xFF7
  8839                           tblptrl	equ	0xFF6
  8840                           tablat	equ	0xFF5
  8841                           prodh	equ	0xFF4
  8842                           prodl	equ	0xFF3
  8843                           intcon	equ	0xFF2
  8844                           postinc0	equ	0xFEE
  8845                           wreg	equ	0xFE8
  8846                           postdec1	equ	0xFE5
  8847                           fsr1l	equ	0xFE1
  8848                           indf2	equ	0xFDF
  8849                           postinc2	equ	0xFDE
  8850                           postdec2	equ	0xFDD
  8851                           fsr2h	equ	0xFDA
  8852                           fsr2l	equ	0xFD9
  8853                           status	equ	0xFD8
  8854                           
  8855 ;; *************** function ___fttol *****************
  8856 ;; Defined at:
  8857 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  8858 ;; Parameters:    Size  Location     Type
  8859 ;;  f1              3   46[BANK0 ] float 
  8860 ;; Auto vars:     Size  Location     Type
  8861 ;;  lval            4   56[BANK0 ] unsigned long 
  8862 ;;  exp1            1   60[BANK0 ] unsigned char 
  8863 ;;  sign1           1   55[BANK0 ] unsigned char 
  8864 ;; Return value:  Size  Location     Type
  8865 ;;                  4   46[BANK0 ] long 
  8866 ;; Registers used:
  8867 ;;		wreg, status,2, status,0
  8868 ;; Tracked objects:
  8869 ;;		On entry : 0/0
  8870 ;;		On exit  : 0/0
  8871 ;;		Unchanged: 0/0
  8872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8873 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8874 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8875 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8876 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8877 ;;Total ram usage:       15 bytes
  8878 ;; Hardware stack levels used:    1
  8879 ;; Hardware stack levels required when called:    3
  8880 ;; This function calls:
  8881 ;;		Nothing
  8882 ;; This function is called by:
  8883 ;;		_angleToPulse
  8884 ;;		_printf
  8885 ;; This function uses a non-reentrant model
  8886 ;;
  8887                           
  8888                           	psect	text37
  8889  0019C4                     __ptext37:
  8890                           	opt stack 0
  8891  0019C4                     ___fttol:
  8892                           	opt stack 24
  8893                           
  8894                           ;incstack = 0
  8895  0019C4  C0B0  F0B2         	movff	___fttol@f1+2,??___fttol
  8896  0019C8  0100               	movlb	0	; () banked
  8897  0019CA  6BB3               	clrf	(??___fttol+1)& (0+255),b
  8898  0019CC  6BB4               	clrf	(??___fttol+2)& (0+255),b
  8899  0019CE  0100               	movlb	0	; () banked
  8900  0019D0  35AF               	rlcf	(___fttol@f1+1)& (0+255),w,b
  8901  0019D2  0100               	movlb	0	; () banked
  8902  0019D4  37B2               	rlcf	??___fttol& (0+255),f,b
  8903  0019D6  E301               	bnc	u4771
  8904  0019D8  81B3               	bsf	(??___fttol+1)& (0+255),0,b
  8905  0019DA                     u4771:
  8906  0019DA  0100               	movlb	0	; () banked
  8907  0019DC  51B2               	movf	??___fttol& (0+255),w,b
  8908  0019DE  0100               	movlb	0	; () banked
  8909  0019E0  6FBC               	movwf	___fttol@exp1& (0+255),b
  8910  0019E2  0100               	movlb	0	; () banked
  8911  0019E4  51BC               	movf	___fttol@exp1& (0+255),w,b
  8912  0019E6  A4D8               	btfss	status,2,c
  8913  0019E8  D00A               	goto	l5247
  8914                           
  8915                           ; BSR set to: 0
  8916  0019EA  0E00               	movlw	0
  8917  0019EC  0100               	movlb	0	; () banked
  8918  0019EE  6FAE               	movwf	?___fttol& (0+255),b
  8919  0019F0  0E00               	movlw	0
  8920  0019F2  6FAF               	movwf	(?___fttol+1)& (0+255),b
  8921  0019F4  0E00               	movlw	0
  8922  0019F6  6FB0               	movwf	(?___fttol+2)& (0+255),b
  8923  0019F8  0E00               	movlw	0
  8924  0019FA  6FB1               	movwf	(?___fttol+3)& (0+255),b
  8925                           
  8926                           ; BSR set to: 0
  8927  0019FC  0012               	return	
  8928  0019FE                     l5247:
  8929                           
  8930                           ; BSR set to: 0
  8931  0019FE  0E17               	movlw	23
  8932  001A00  0100               	movlb	0	; () banked
  8933  001A02  6FB2               	movwf	??___fttol& (0+255),b
  8934  001A04  C0AE  F0B3         	movff	___fttol@f1,??___fttol+1
  8935  001A08  C0AF  F0B4         	movff	___fttol@f1+1,??___fttol+2
  8936  001A0C  C0B0  F0B5         	movff	___fttol@f1+2,??___fttol+3
  8937  001A10  0100               	movlb	0	; () banked
  8938  001A12  29B2               	incf	??___fttol& (0+255),w,b
  8939  001A14  0100               	movlb	0	; () banked
  8940  001A16  6FB6               	movwf	(??___fttol+4)& (0+255),b
  8941  001A18  D005               	goto	u4790
  8942  001A1A                     u4795:
  8943  001A1A  0100               	movlb	0	; () banked
  8944  001A1C  90D8               	bcf	status,0,c
  8945  001A1E  33B5               	rrcf	(??___fttol+3)& (0+255),f,b
  8946  001A20  33B4               	rrcf	(??___fttol+2)& (0+255),f,b
  8947  001A22  33B3               	rrcf	(??___fttol+1)& (0+255),f,b
  8948  001A24                     u4790:
  8949  001A24  0100               	movlb	0	; () banked
  8950  001A26  2FB6               	decfsz	(??___fttol+4)& (0+255),f,b
  8951  001A28  D7F8               	goto	u4795
  8952  001A2A  0100               	movlb	0	; () banked
  8953  001A2C  51B3               	movf	(??___fttol+1)& (0+255),w,b
  8954  001A2E  0100               	movlb	0	; () banked
  8955  001A30  6FB7               	movwf	___fttol@sign1& (0+255),b
  8956                           
  8957                           ; BSR set to: 0
  8958  001A32  0100               	movlb	0	; () banked
  8959  001A34  8FAF               	bsf	(___fttol@f1+1)& (0+255),7,b
  8960                           
  8961                           ; BSR set to: 0
  8962  001A36  0EFF               	movlw	255
  8963  001A38  0100               	movlb	0	; () banked
  8964  001A3A  17AE               	andwf	___fttol@f1& (0+255),f,b
  8965  001A3C  0EFF               	movlw	255
  8966  001A3E  0100               	movlb	0	; () banked
  8967  001A40  17AF               	andwf	(___fttol@f1+1)& (0+255),f,b
  8968  001A42  0E00               	movlw	0
  8969  001A44  0100               	movlb	0	; () banked
  8970  001A46  17B0               	andwf	(___fttol@f1+2)& (0+255),f,b
  8971                           
  8972                           ; BSR set to: 0
  8973  001A48  0100               	movlb	0	; () banked
  8974  001A4A  51AE               	movf	___fttol@f1& (0+255),w,b
  8975  001A4C  0100               	movlb	0	; () banked
  8976  001A4E  6FB8               	movwf	___fttol@lval& (0+255),b
  8977  001A50  0100               	movlb	0	; () banked
  8978  001A52  51AF               	movf	(___fttol@f1+1)& (0+255),w,b
  8979  001A54  0100               	movlb	0	; () banked
  8980  001A56  6FB9               	movwf	(___fttol@lval+1)& (0+255),b
  8981  001A58  0100               	movlb	0	; () banked
  8982  001A5A  51B0               	movf	(___fttol@f1+2)& (0+255),w,b
  8983  001A5C  0100               	movlb	0	; () banked
  8984  001A5E  6FBA               	movwf	(___fttol@lval+2)& (0+255),b
  8985  001A60  0100               	movlb	0	; () banked
  8986  001A62  6BBB               	clrf	(___fttol@lval+3)& (0+255),b
  8987                           
  8988                           ; BSR set to: 0
  8989  001A64  0E8E               	movlw	142
  8990  001A66  0100               	movlb	0	; () banked
  8991  001A68  5FBC               	subwf	___fttol@exp1& (0+255),f,b
  8992                           
  8993                           ; BSR set to: 0
  8994  001A6A  0100               	movlb	0	; () banked
  8995  001A6C  AFBC               	btfss	___fttol@exp1& (0+255),7,b
  8996  001A6E  D01A               	goto	l5269
  8997                           
  8998                           ; BSR set to: 0
  8999  001A70  0100               	movlb	0	; () banked
  9000  001A72  51BC               	movf	___fttol@exp1& (0+255),w,b
  9001  001A74  0A80               	xorlw	128
  9002  001A76  0F8F               	addlw	143
  9003  001A78  B0D8               	btfsc	status,0,c
  9004  001A7A  D00A               	goto	l5265
  9005                           
  9006                           ; BSR set to: 0
  9007  001A7C  0E00               	movlw	0
  9008  001A7E  0100               	movlb	0	; () banked
  9009  001A80  6FAE               	movwf	?___fttol& (0+255),b
  9010  001A82  0E00               	movlw	0
  9011  001A84  6FAF               	movwf	(?___fttol+1)& (0+255),b
  9012  001A86  0E00               	movlw	0
  9013  001A88  6FB0               	movwf	(?___fttol+2)& (0+255),b
  9014  001A8A  0E00               	movlw	0
  9015  001A8C  6FB1               	movwf	(?___fttol+3)& (0+255),b
  9016                           
  9017                           ; BSR set to: 0
  9018  001A8E  0012               	return	
  9019  001A90                     l5265:
  9020                           
  9021                           ; BSR set to: 0
  9022  001A90  0100               	movlb	0	; () banked
  9023  001A92  90D8               	bcf	status,0,c
  9024  001A94  33BB               	rrcf	(___fttol@lval+3)& (0+255),f,b
  9025  001A96  33BA               	rrcf	(___fttol@lval+2)& (0+255),f,b
  9026  001A98  33B9               	rrcf	(___fttol@lval+1)& (0+255),f,b
  9027  001A9A  33B8               	rrcf	___fttol@lval& (0+255),f,b
  9028                           
  9029                           ; BSR set to: 0
  9030  001A9C  0100               	movlb	0	; () banked
  9031  001A9E  3FBC               	incfsz	___fttol@exp1& (0+255),f,b
  9032  001AA0  D7F7               	goto	l5265
  9033                           
  9034                           ; BSR set to: 0
  9035  001AA2  D01B               	goto	l5279
  9036  001AA4                     l5269:
  9037                           
  9038                           ; BSR set to: 0
  9039  001AA4  0E17               	movlw	23
  9040  001AA6  0100               	movlb	0	; () banked
  9041  001AA8  65BC               	cpfsgt	___fttol@exp1& (0+255),b
  9042  001AAA  D012               	goto	l5277
  9043                           
  9044                           ; BSR set to: 0
  9045  001AAC  0E00               	movlw	0
  9046  001AAE  0100               	movlb	0	; () banked
  9047  001AB0  6FAE               	movwf	?___fttol& (0+255),b
  9048  001AB2  0E00               	movlw	0
  9049  001AB4  6FAF               	movwf	(?___fttol+1)& (0+255),b
  9050  001AB6  0E00               	movlw	0
  9051  001AB8  6FB0               	movwf	(?___fttol+2)& (0+255),b
  9052  001ABA  0E00               	movlw	0
  9053  001ABC  6FB1               	movwf	(?___fttol+3)& (0+255),b
  9054                           
  9055                           ; BSR set to: 0
  9056  001ABE  0012               	return	
  9057  001AC0                     l5275:
  9058                           
  9059                           ; BSR set to: 0
  9060  001AC0  0100               	movlb	0	; () banked
  9061  001AC2  90D8               	bcf	status,0,c
  9062  001AC4  37B8               	rlcf	___fttol@lval& (0+255),f,b
  9063  001AC6  37B9               	rlcf	(___fttol@lval+1)& (0+255),f,b
  9064  001AC8  37BA               	rlcf	(___fttol@lval+2)& (0+255),f,b
  9065  001ACA  37BB               	rlcf	(___fttol@lval+3)& (0+255),f,b
  9066  001ACC  0100               	movlb	0	; () banked
  9067  001ACE  07BC               	decf	___fttol@exp1& (0+255),f,b
  9068  001AD0                     l5277:
  9069                           
  9070                           ; BSR set to: 0
  9071  001AD0  0100               	movlb	0	; () banked
  9072  001AD2  51BC               	movf	___fttol@exp1& (0+255),w,b
  9073  001AD4  0100               	movlb	0	; () banked
  9074  001AD6  A4D8               	btfss	status,2,c
  9075  001AD8  D7F3               	goto	l5275
  9076  001ADA                     l5279:
  9077                           
  9078                           ; BSR set to: 0
  9079  001ADA  0100               	movlb	0	; () banked
  9080  001ADC  51B7               	movf	___fttol@sign1& (0+255),w,b
  9081  001ADE  0100               	movlb	0	; () banked
  9082  001AE0  B4D8               	btfsc	status,2,c
  9083  001AE2  D009               	goto	l5283
  9084                           
  9085                           ; BSR set to: 0
  9086  001AE4  0100               	movlb	0	; () banked
  9087  001AE6  1FBB               	comf	(___fttol@lval+3)& (0+255),f,b
  9088  001AE8  1FBA               	comf	(___fttol@lval+2)& (0+255),f,b
  9089  001AEA  1FB9               	comf	(___fttol@lval+1)& (0+255),f,b
  9090  001AEC  6DB8               	negf	___fttol@lval& (0+255),b
  9091  001AEE  0E00               	movlw	0
  9092  001AF0  23B9               	addwfc	(___fttol@lval+1)& (0+255),f,b
  9093  001AF2  23BA               	addwfc	(___fttol@lval+2)& (0+255),f,b
  9094  001AF4  23BB               	addwfc	(___fttol@lval+3)& (0+255),f,b
  9095  001AF6                     l5283:
  9096                           
  9097                           ; BSR set to: 0
  9098  001AF6  C0B8  F0AE         	movff	___fttol@lval,?___fttol
  9099  001AFA  C0B9  F0AF         	movff	___fttol@lval+1,?___fttol+1
  9100  001AFE  C0BA  F0B0         	movff	___fttol@lval+2,?___fttol+2
  9101  001B02  C0BB  F0B1         	movff	___fttol@lval+3,?___fttol+3
  9102  001B06  0012               	return	
  9103  001B08                     __end_of___fttol:
  9104                           	opt stack 0
  9105                           tblptru	equ	0xFF8
  9106                           tblptrh	equ	0xFF7
  9107                           tblptrl	equ	0xFF6
  9108                           tablat	equ	0xFF5
  9109                           prodh	equ	0xFF4
  9110                           prodl	equ	0xFF3
  9111                           intcon	equ	0xFF2
  9112                           postinc0	equ	0xFEE
  9113                           wreg	equ	0xFE8
  9114                           postdec1	equ	0xFE5
  9115                           fsr1l	equ	0xFE1
  9116                           indf2	equ	0xFDF
  9117                           postinc2	equ	0xFDE
  9118                           postdec2	equ	0xFDD
  9119                           fsr2h	equ	0xFDA
  9120                           fsr2l	equ	0xFD9
  9121                           status	equ	0xFD8
  9122                           
  9123 ;; *************** function ___ftsub *****************
  9124 ;; Defined at:
  9125 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  9126 ;; Parameters:    Size  Location     Type
  9127 ;;  f1              3   46[BANK0 ] float 
  9128 ;;  f2              3   49[BANK0 ] float 
  9129 ;; Auto vars:     Size  Location     Type
  9130 ;;		None
  9131 ;; Return value:  Size  Location     Type
  9132 ;;                  3   46[BANK0 ] float 
  9133 ;; Registers used:
  9134 ;;		wreg, status,2, status,0, cstack
  9135 ;; Tracked objects:
  9136 ;;		On entry : 0/0
  9137 ;;		On exit  : 0/0
  9138 ;;		Unchanged: 0/0
  9139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9140 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9143 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9144 ;;Total ram usage:        6 bytes
  9145 ;; Hardware stack levels used:    1
  9146 ;; Hardware stack levels required when called:    5
  9147 ;; This function calls:
  9148 ;;		___ftadd
  9149 ;; This function is called by:
  9150 ;;		_printf
  9151 ;; This function uses a non-reentrant model
  9152 ;;
  9153                           
  9154                           	psect	text38
  9155  002AB0                     __ptext38:
  9156                           	opt stack 0
  9157  002AB0                     ___ftsub:
  9158                           	opt stack 23
  9159                           
  9160                           ; BSR set to: 0
  9161                           ;incstack = 0
  9162  002AB0  0100               	movlb	0	; () banked
  9163  002AB2  51B1               	movf	___ftsub@f2& (0+255),w,b
  9164  002AB4  0100               	movlb	0	; () banked
  9165  002AB6  11B2               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  9166  002AB8  0100               	movlb	0	; () banked
  9167  002ABA  11B3               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  9168  002ABC  B4D8               	btfsc	status,2,c
  9169  002ABE  D009               	goto	l5483
  9170                           
  9171                           ; BSR set to: 0
  9172  002AC0  0E00               	movlw	0
  9173  002AC2  0100               	movlb	0	; () banked
  9174  002AC4  1BB1               	xorwf	___ftsub@f2& (0+255),f,b
  9175  002AC6  0E00               	movlw	0
  9176  002AC8  0100               	movlb	0	; () banked
  9177  002ACA  1BB2               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  9178  002ACC  0E80               	movlw	128
  9179  002ACE  0100               	movlb	0	; () banked
  9180  002AD0  1BB3               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  9181  002AD2                     l5483:
  9182                           
  9183                           ; BSR set to: 0
  9184  002AD2  C0AE  F0A2         	movff	___ftsub@f1,___ftadd@f1
  9185  002AD6  C0AF  F0A3         	movff	___ftsub@f1+1,___ftadd@f1+1
  9186  002ADA  C0B0  F0A4         	movff	___ftsub@f1+2,___ftadd@f1+2
  9187  002ADE  C0B1  F0A5         	movff	___ftsub@f2,___ftadd@f2
  9188  002AE2  C0B2  F0A6         	movff	___ftsub@f2+1,___ftadd@f2+1
  9189  002AE6  C0B3  F0A7         	movff	___ftsub@f2+2,___ftadd@f2+2
  9190  002AEA  EC57  F008         	call	___ftadd	;wreg free
  9191  002AEE  C0A2  F0AE         	movff	?___ftadd,?___ftsub
  9192  002AF2  C0A3  F0AF         	movff	?___ftadd+1,?___ftsub+1
  9193  002AF6  C0A4  F0B0         	movff	?___ftadd+2,?___ftsub+2
  9194  002AFA  0012               	return	
  9195  002AFC                     __end_of___ftsub:
  9196                           	opt stack 0
  9197                           tblptru	equ	0xFF8
  9198                           tblptrh	equ	0xFF7
  9199                           tblptrl	equ	0xFF6
  9200                           tablat	equ	0xFF5
  9201                           prodh	equ	0xFF4
  9202                           prodl	equ	0xFF3
  9203                           intcon	equ	0xFF2
  9204                           postinc0	equ	0xFEE
  9205                           wreg	equ	0xFE8
  9206                           postdec1	equ	0xFE5
  9207                           fsr1l	equ	0xFE1
  9208                           indf2	equ	0xFDF
  9209                           postinc2	equ	0xFDE
  9210                           postdec2	equ	0xFDD
  9211                           fsr2h	equ	0xFDA
  9212                           fsr2l	equ	0xFD9
  9213                           status	equ	0xFD8
  9214                           
  9215 ;; *************** function ___ftadd *****************
  9216 ;; Defined at:
  9217 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  9218 ;; Parameters:    Size  Location     Type
  9219 ;;  f1              3   34[BANK0 ] float 
  9220 ;;  f2              3   37[BANK0 ] float 
  9221 ;; Auto vars:     Size  Location     Type
  9222 ;;  exp1            1   45[BANK0 ] unsigned char 
  9223 ;;  exp2            1   44[BANK0 ] unsigned char 
  9224 ;;  sign            1   43[BANK0 ] unsigned char 
  9225 ;; Return value:  Size  Location     Type
  9226 ;;                  3   34[BANK0 ] float 
  9227 ;; Registers used:
  9228 ;;		wreg, status,2, status,0, cstack
  9229 ;; Tracked objects:
  9230 ;;		On entry : 0/0
  9231 ;;		On exit  : 0/0
  9232 ;;		Unchanged: 0/0
  9233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9234 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9235 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9236 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9237 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9238 ;;Total ram usage:       12 bytes
  9239 ;; Hardware stack levels used:    1
  9240 ;; Hardware stack levels required when called:    4
  9241 ;; This function calls:
  9242 ;;		___ftpack
  9243 ;; This function is called by:
  9244 ;;		_angleToPulse
  9245 ;;		_printf
  9246 ;;		___ftsub
  9247 ;; This function uses a non-reentrant model
  9248 ;;
  9249                           
  9250                           	psect	text39
  9251  0010AE                     __ptext39:
  9252                           	opt stack 0
  9253  0010AE                     ___ftadd:
  9254                           	opt stack 23
  9255                           
  9256                           ;incstack = 0
  9257  0010AE  C0A4  F0A8         	movff	___ftadd@f1+2,??___ftadd
  9258  0010B2  0100               	movlb	0	; () banked
  9259  0010B4  6BA9               	clrf	(??___ftadd+1)& (0+255),b
  9260  0010B6  6BAA               	clrf	(??___ftadd+2)& (0+255),b
  9261  0010B8  0100               	movlb	0	; () banked
  9262  0010BA  35A3               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  9263  0010BC  0100               	movlb	0	; () banked
  9264  0010BE  37A8               	rlcf	??___ftadd& (0+255),f,b
  9265  0010C0  E301               	bnc	u4321
  9266  0010C2  81A9               	bsf	(??___ftadd+1)& (0+255),0,b
  9267  0010C4                     u4321:
  9268  0010C4  0100               	movlb	0	; () banked
  9269  0010C6  51A8               	movf	??___ftadd& (0+255),w,b
  9270  0010C8  0100               	movlb	0	; () banked
  9271  0010CA  6FAD               	movwf	___ftadd@exp1& (0+255),b
  9272  0010CC  C0A7  F0A8         	movff	___ftadd@f2+2,??___ftadd
  9273  0010D0  0100               	movlb	0	; () banked
  9274  0010D2  6BA9               	clrf	(??___ftadd+1)& (0+255),b
  9275  0010D4  6BAA               	clrf	(??___ftadd+2)& (0+255),b
  9276  0010D6  0100               	movlb	0	; () banked
  9277  0010D8  35A6               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  9278  0010DA  0100               	movlb	0	; () banked
  9279  0010DC  37A8               	rlcf	??___ftadd& (0+255),f,b
  9280  0010DE  E301               	bnc	u4331
  9281  0010E0  81A9               	bsf	(??___ftadd+1)& (0+255),0,b
  9282  0010E2                     u4331:
  9283  0010E2  0100               	movlb	0	; () banked
  9284  0010E4  51A8               	movf	??___ftadd& (0+255),w,b
  9285  0010E6  0100               	movlb	0	; () banked
  9286  0010E8  6FAC               	movwf	___ftadd@exp2& (0+255),b
  9287                           
  9288                           ; BSR set to: 0
  9289  0010EA  0100               	movlb	0	; () banked
  9290  0010EC  51AD               	movf	___ftadd@exp1& (0+255),w,b
  9291  0010EE  0100               	movlb	0	; () banked
  9292  0010F0  B4D8               	btfsc	status,2,c
  9293  0010F2  D011               	goto	l1006
  9294                           
  9295                           ; BSR set to: 0
  9296  0010F4  0100               	movlb	0	; () banked
  9297  0010F6  51AC               	movf	___ftadd@exp2& (0+255),w,b
  9298  0010F8  0100               	movlb	0	; () banked
  9299  0010FA  5DAD               	subwf	___ftadd@exp1& (0+255),w,b
  9300  0010FC  B0D8               	btfsc	status,0,c
  9301  0010FE  D012               	goto	l4993
  9302                           
  9303                           ; BSR set to: 0
  9304  001100  0100               	movlb	0	; () banked
  9305  001102  51AD               	movf	___ftadd@exp1& (0+255),w,b
  9306  001104  0800               	sublw	0
  9307  001106  0100               	movlb	0	; () banked
  9308  001108  25AC               	addwf	___ftadd@exp2& (0+255),w,b
  9309  00110A  0100               	movlb	0	; () banked
  9310  00110C  6FA8               	movwf	??___ftadd& (0+255),b
  9311  00110E  0E18               	movlw	24
  9312  001110  0100               	movlb	0	; () banked
  9313  001112  65A8               	cpfsgt	??___ftadd& (0+255),b
  9314  001114  D007               	goto	l4993
  9315  001116                     l1006:
  9316                           
  9317                           ; BSR set to: 0
  9318  001116  C0A5  F0A2         	movff	___ftadd@f2,?___ftadd
  9319  00111A  C0A6  F0A3         	movff	___ftadd@f2+1,?___ftadd+1
  9320  00111E  C0A7  F0A4         	movff	___ftadd@f2+2,?___ftadd+2
  9321  001122  0012               	return	
  9322  001124                     l4993:
  9323                           
  9324                           ; BSR set to: 0
  9325  001124  0100               	movlb	0	; () banked
  9326  001126  51AC               	movf	___ftadd@exp2& (0+255),w,b
  9327  001128  0100               	movlb	0	; () banked
  9328  00112A  B4D8               	btfsc	status,2,c
  9329  00112C  D011               	goto	l1010
  9330                           
  9331                           ; BSR set to: 0
  9332  00112E  0100               	movlb	0	; () banked
  9333  001130  51AD               	movf	___ftadd@exp1& (0+255),w,b
  9334  001132  0100               	movlb	0	; () banked
  9335  001134  5DAC               	subwf	___ftadd@exp2& (0+255),w,b
  9336  001136  B0D8               	btfsc	status,0,c
  9337  001138  D012               	goto	l4999
  9338                           
  9339                           ; BSR set to: 0
  9340  00113A  0100               	movlb	0	; () banked
  9341  00113C  51AC               	movf	___ftadd@exp2& (0+255),w,b
  9342  00113E  0800               	sublw	0
  9343  001140  0100               	movlb	0	; () banked
  9344  001142  25AD               	addwf	___ftadd@exp1& (0+255),w,b
  9345  001144  0100               	movlb	0	; () banked
  9346  001146  6FA8               	movwf	??___ftadd& (0+255),b
  9347  001148  0E18               	movlw	24
  9348  00114A  0100               	movlb	0	; () banked
  9349  00114C  65A8               	cpfsgt	??___ftadd& (0+255),b
  9350  00114E  D007               	goto	l4999
  9351  001150                     l1010:
  9352                           
  9353                           ; BSR set to: 0
  9354  001150  C0A2  F0A2         	movff	___ftadd@f1,?___ftadd
  9355  001154  C0A3  F0A3         	movff	___ftadd@f1+1,?___ftadd+1
  9356  001158  C0A4  F0A4         	movff	___ftadd@f1+2,?___ftadd+2
  9357  00115C  0012               	return	
  9358  00115E                     l4999:
  9359                           
  9360                           ; BSR set to: 0
  9361  00115E  0E06               	movlw	6
  9362  001160  0100               	movlb	0	; () banked
  9363  001162  6FAB               	movwf	___ftadd@sign& (0+255),b
  9364                           
  9365                           ; BSR set to: 0
  9366  001164  0100               	movlb	0	; () banked
  9367  001166  AFA4               	btfss	(___ftadd@f1+2)& (0+255),7,b
  9368  001168  D002               	goto	l5005
  9369                           
  9370                           ; BSR set to: 0
  9371  00116A  0100               	movlb	0	; () banked
  9372  00116C  8FAB               	bsf	___ftadd@sign& (0+255),7,b
  9373  00116E                     l5005:
  9374                           
  9375                           ; BSR set to: 0
  9376  00116E  0100               	movlb	0	; () banked
  9377  001170  AFA7               	btfss	(___ftadd@f2+2)& (0+255),7,b
  9378  001172  D002               	goto	l1012
  9379                           
  9380                           ; BSR set to: 0
  9381  001174  0100               	movlb	0	; () banked
  9382  001176  8DAB               	bsf	___ftadd@sign& (0+255),6,b
  9383  001178                     l1012:
  9384                           
  9385                           ; BSR set to: 0
  9386  001178  0100               	movlb	0	; () banked
  9387  00117A  8FA3               	bsf	(___ftadd@f1+1)& (0+255),7,b
  9388                           
  9389                           ; BSR set to: 0
  9390  00117C  0EFF               	movlw	255
  9391  00117E  0100               	movlb	0	; () banked
  9392  001180  17A2               	andwf	___ftadd@f1& (0+255),f,b
  9393  001182  0EFF               	movlw	255
  9394  001184  0100               	movlb	0	; () banked
  9395  001186  17A3               	andwf	(___ftadd@f1+1)& (0+255),f,b
  9396  001188  0E00               	movlw	0
  9397  00118A  0100               	movlb	0	; () banked
  9398  00118C  17A4               	andwf	(___ftadd@f1+2)& (0+255),f,b
  9399  00118E  0100               	movlb	0	; () banked
  9400  001190  8FA6               	bsf	(___ftadd@f2+1)& (0+255),7,b
  9401                           
  9402                           ; BSR set to: 0
  9403  001192  0EFF               	movlw	255
  9404  001194  0100               	movlb	0	; () banked
  9405  001196  17A5               	andwf	___ftadd@f2& (0+255),f,b
  9406  001198  0EFF               	movlw	255
  9407  00119A  0100               	movlb	0	; () banked
  9408  00119C  17A6               	andwf	(___ftadd@f2+1)& (0+255),f,b
  9409  00119E  0E00               	movlw	0
  9410  0011A0  0100               	movlb	0	; () banked
  9411  0011A2  17A7               	andwf	(___ftadd@f2+2)& (0+255),f,b
  9412                           
  9413                           ; BSR set to: 0
  9414  0011A4  0100               	movlb	0	; () banked
  9415  0011A6  51AC               	movf	___ftadd@exp2& (0+255),w,b
  9416  0011A8  0100               	movlb	0	; () banked
  9417  0011AA  5DAD               	subwf	___ftadd@exp1& (0+255),w,b
  9418  0011AC  B0D8               	btfsc	status,0,c
  9419  0011AE  D025               	goto	l5025
  9420  0011B0                     l5015:
  9421                           
  9422                           ; BSR set to: 0
  9423  0011B0  0100               	movlb	0	; () banked
  9424  0011B2  90D8               	bcf	status,0,c
  9425  0011B4  37A5               	rlcf	___ftadd@f2& (0+255),f,b
  9426  0011B6  37A6               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  9427  0011B8  37A7               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  9428  0011BA  0100               	movlb	0	; () banked
  9429  0011BC  07AC               	decf	___ftadd@exp2& (0+255),f,b
  9430                           
  9431                           ; BSR set to: 0
  9432  0011BE  0100               	movlb	0	; () banked
  9433  0011C0  51AD               	movf	___ftadd@exp1& (0+255),w,b
  9434  0011C2  0100               	movlb	0	; () banked
  9435  0011C4  19AC               	xorwf	___ftadd@exp2& (0+255),w,b
  9436  0011C6  B4D8               	btfsc	status,2,c
  9437  0011C8  D011               	goto	l5023
  9438                           
  9439                           ; BSR set to: 0
  9440  0011CA  0100               	movlb	0	; () banked
  9441  0011CC  07AB               	decf	___ftadd@sign& (0+255),f,b
  9442  0011CE  C0AB  F0A8         	movff	___ftadd@sign,??___ftadd
  9443  0011D2  0E07               	movlw	7
  9444  0011D4  0100               	movlb	0	; () banked
  9445  0011D6  17A8               	andwf	??___ftadd& (0+255),f,b
  9446  0011D8  B4D8               	btfsc	status,2,c
  9447  0011DA  D008               	goto	l5023
  9448  0011DC  D7E9               	goto	l5015
  9449  0011DE                     l5021:
  9450                           
  9451                           ; BSR set to: 0
  9452  0011DE  0100               	movlb	0	; () banked
  9453  0011E0  90D8               	bcf	status,0,c
  9454  0011E2  33A4               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  9455  0011E4  33A3               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  9456  0011E6  33A2               	rrcf	___ftadd@f1& (0+255),f,b
  9457  0011E8  0100               	movlb	0	; () banked
  9458  0011EA  2BAD               	incf	___ftadd@exp1& (0+255),f,b
  9459  0011EC                     l5023:
  9460                           
  9461                           ; BSR set to: 0
  9462  0011EC  0100               	movlb	0	; () banked
  9463  0011EE  51AC               	movf	___ftadd@exp2& (0+255),w,b
  9464  0011F0  0100               	movlb	0	; () banked
  9465  0011F2  19AD               	xorwf	___ftadd@exp1& (0+255),w,b
  9466  0011F4  B4D8               	btfsc	status,2,c
  9467  0011F6  D02B               	goto	l1021
  9468  0011F8  D7F2               	goto	l5021
  9469  0011FA                     l5025:
  9470                           
  9471                           ; BSR set to: 0
  9472  0011FA  0100               	movlb	0	; () banked
  9473  0011FC  51AD               	movf	___ftadd@exp1& (0+255),w,b
  9474  0011FE  0100               	movlb	0	; () banked
  9475  001200  5DAC               	subwf	___ftadd@exp2& (0+255),w,b
  9476  001202  B0D8               	btfsc	status,0,c
  9477  001204  D024               	goto	l1021
  9478  001206                     l5027:
  9479                           
  9480                           ; BSR set to: 0
  9481  001206  0100               	movlb	0	; () banked
  9482  001208  90D8               	bcf	status,0,c
  9483  00120A  37A2               	rlcf	___ftadd@f1& (0+255),f,b
  9484  00120C  37A3               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  9485  00120E  37A4               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  9486  001210  0100               	movlb	0	; () banked
  9487  001212  07AD               	decf	___ftadd@exp1& (0+255),f,b
  9488                           
  9489                           ; BSR set to: 0
  9490  001214  0100               	movlb	0	; () banked
  9491  001216  51AD               	movf	___ftadd@exp1& (0+255),w,b
  9492  001218  0100               	movlb	0	; () banked
  9493  00121A  19AC               	xorwf	___ftadd@exp2& (0+255),w,b
  9494  00121C  B4D8               	btfsc	status,2,c
  9495  00121E  D011               	goto	l5035
  9496                           
  9497                           ; BSR set to: 0
  9498  001220  0100               	movlb	0	; () banked
  9499  001222  07AB               	decf	___ftadd@sign& (0+255),f,b
  9500  001224  C0AB  F0A8         	movff	___ftadd@sign,??___ftadd
  9501  001228  0E07               	movlw	7
  9502  00122A  0100               	movlb	0	; () banked
  9503  00122C  17A8               	andwf	??___ftadd& (0+255),f,b
  9504  00122E  B4D8               	btfsc	status,2,c
  9505  001230  D008               	goto	l5035
  9506  001232  D7E9               	goto	l5027
  9507  001234                     l5033:
  9508                           
  9509                           ; BSR set to: 0
  9510  001234  0100               	movlb	0	; () banked
  9511  001236  90D8               	bcf	status,0,c
  9512  001238  33A7               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  9513  00123A  33A6               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  9514  00123C  33A5               	rrcf	___ftadd@f2& (0+255),f,b
  9515  00123E  0100               	movlb	0	; () banked
  9516  001240  2BAC               	incf	___ftadd@exp2& (0+255),f,b
  9517  001242                     l5035:
  9518                           
  9519                           ; BSR set to: 0
  9520  001242  0100               	movlb	0	; () banked
  9521  001244  51AC               	movf	___ftadd@exp2& (0+255),w,b
  9522  001246  0100               	movlb	0	; () banked
  9523  001248  19AD               	xorwf	___ftadd@exp1& (0+255),w,b
  9524  00124A  A4D8               	btfss	status,2,c
  9525  00124C  D7F3               	goto	l5033
  9526  00124E                     l1021:
  9527                           
  9528                           ; BSR set to: 0
  9529  00124E  0100               	movlb	0	; () banked
  9530  001250  AFAB               	btfss	___ftadd@sign& (0+255),7,b
  9531  001252  D012               	goto	l1030
  9532                           
  9533                           ; BSR set to: 0
  9534  001254  0EFF               	movlw	255
  9535  001256  0100               	movlb	0	; () banked
  9536  001258  1BA2               	xorwf	___ftadd@f1& (0+255),f,b
  9537  00125A  0EFF               	movlw	255
  9538  00125C  0100               	movlb	0	; () banked
  9539  00125E  1BA3               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  9540  001260  0EFF               	movlw	255
  9541  001262  0100               	movlb	0	; () banked
  9542  001264  1BA4               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  9543  001266  0E01               	movlw	1
  9544  001268  0100               	movlb	0	; () banked
  9545  00126A  27A2               	addwf	___ftadd@f1& (0+255),f,b
  9546  00126C  0E00               	movlw	0
  9547  00126E  0100               	movlb	0	; () banked
  9548  001270  23A3               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  9549  001272  0E00               	movlw	0
  9550  001274  0100               	movlb	0	; () banked
  9551  001276  23A4               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  9552  001278                     l1030:
  9553                           
  9554                           ; BSR set to: 0
  9555  001278  0100               	movlb	0	; () banked
  9556  00127A  ADAB               	btfss	___ftadd@sign& (0+255),6,b
  9557  00127C  D012               	goto	l5041
  9558                           
  9559                           ; BSR set to: 0
  9560  00127E  0EFF               	movlw	255
  9561  001280  0100               	movlb	0	; () banked
  9562  001282  1BA5               	xorwf	___ftadd@f2& (0+255),f,b
  9563  001284  0EFF               	movlw	255
  9564  001286  0100               	movlb	0	; () banked
  9565  001288  1BA6               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  9566  00128A  0EFF               	movlw	255
  9567  00128C  0100               	movlb	0	; () banked
  9568  00128E  1BA7               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  9569  001290  0E01               	movlw	1
  9570  001292  0100               	movlb	0	; () banked
  9571  001294  27A5               	addwf	___ftadd@f2& (0+255),f,b
  9572  001296  0E00               	movlw	0
  9573  001298  0100               	movlb	0	; () banked
  9574  00129A  23A6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9575  00129C  0E00               	movlw	0
  9576  00129E  0100               	movlb	0	; () banked
  9577  0012A0  23A7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9578  0012A2                     l5041:
  9579                           
  9580                           ; BSR set to: 0
  9581  0012A2  0E00               	movlw	0
  9582  0012A4  0100               	movlb	0	; () banked
  9583  0012A6  6FAB               	movwf	___ftadd@sign& (0+255),b
  9584                           
  9585                           ; BSR set to: 0
  9586  0012A8  0100               	movlb	0	; () banked
  9587  0012AA  51A2               	movf	___ftadd@f1& (0+255),w,b
  9588  0012AC  0100               	movlb	0	; () banked
  9589  0012AE  27A5               	addwf	___ftadd@f2& (0+255),f,b
  9590  0012B0  0100               	movlb	0	; () banked
  9591  0012B2  51A3               	movf	(___ftadd@f1+1)& (0+255),w,b
  9592  0012B4  0100               	movlb	0	; () banked
  9593  0012B6  23A6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9594  0012B8  0100               	movlb	0	; () banked
  9595  0012BA  51A4               	movf	(___ftadd@f1+2)& (0+255),w,b
  9596  0012BC  0100               	movlb	0	; () banked
  9597  0012BE  23A7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9598                           
  9599                           ; BSR set to: 0
  9600  0012C0  0100               	movlb	0	; () banked
  9601  0012C2  AFA7               	btfss	(___ftadd@f2+2)& (0+255),7,b
  9602  0012C4  D015               	goto	l5051
  9603                           
  9604                           ; BSR set to: 0
  9605  0012C6  0EFF               	movlw	255
  9606  0012C8  0100               	movlb	0	; () banked
  9607  0012CA  1BA5               	xorwf	___ftadd@f2& (0+255),f,b
  9608  0012CC  0EFF               	movlw	255
  9609  0012CE  0100               	movlb	0	; () banked
  9610  0012D0  1BA6               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  9611  0012D2  0EFF               	movlw	255
  9612  0012D4  0100               	movlb	0	; () banked
  9613  0012D6  1BA7               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  9614  0012D8  0E01               	movlw	1
  9615  0012DA  0100               	movlb	0	; () banked
  9616  0012DC  27A5               	addwf	___ftadd@f2& (0+255),f,b
  9617  0012DE  0E00               	movlw	0
  9618  0012E0  0100               	movlb	0	; () banked
  9619  0012E2  23A6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9620  0012E4  0E00               	movlw	0
  9621  0012E6  0100               	movlb	0	; () banked
  9622  0012E8  23A7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9623                           
  9624                           ; BSR set to: 0
  9625  0012EA  0E01               	movlw	1
  9626  0012EC  0100               	movlb	0	; () banked
  9627  0012EE  6FAB               	movwf	___ftadd@sign& (0+255),b
  9628  0012F0                     l5051:
  9629                           
  9630                           ; BSR set to: 0
  9631  0012F0  C0A5  F024         	movff	___ftadd@f2,___ftpack@arg
  9632  0012F4  C0A6  F025         	movff	___ftadd@f2+1,___ftpack@arg+1
  9633  0012F8  C0A7  F026         	movff	___ftadd@f2+2,___ftpack@arg+2
  9634  0012FC  C0AD  F027         	movff	___ftadd@exp1,___ftpack@exp
  9635  001300  C0AB  F028         	movff	___ftadd@sign,___ftpack@sign
  9636  001304  ECDB  F011         	call	___ftpack	;wreg free
  9637  001308  C024  F0A2         	movff	?___ftpack,?___ftadd
  9638  00130C  C025  F0A3         	movff	?___ftpack+1,?___ftadd+1
  9639  001310  C026  F0A4         	movff	?___ftpack+2,?___ftadd+2
  9640  001314  0012               	return	
  9641  001316                     __end_of___ftadd:
  9642                           	opt stack 0
  9643                           tblptru	equ	0xFF8
  9644                           tblptrh	equ	0xFF7
  9645                           tblptrl	equ	0xFF6
  9646                           tablat	equ	0xFF5
  9647                           prodh	equ	0xFF4
  9648                           prodl	equ	0xFF3
  9649                           intcon	equ	0xFF2
  9650                           postinc0	equ	0xFEE
  9651                           wreg	equ	0xFE8
  9652                           postdec1	equ	0xFE5
  9653                           fsr1l	equ	0xFE1
  9654                           indf2	equ	0xFDF
  9655                           postinc2	equ	0xFDE
  9656                           postdec2	equ	0xFDD
  9657                           fsr2h	equ	0xFDA
  9658                           fsr2l	equ	0xFD9
  9659                           status	equ	0xFD8
  9660                           
  9661 ;; *************** function ___ftpack *****************
  9662 ;; Defined at:
  9663 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  9664 ;; Parameters:    Size  Location     Type
  9665 ;;  arg             3   35[COMRAM] unsigned um
  9666 ;;  exp             1   38[COMRAM] unsigned char 
  9667 ;;  sign            1   39[COMRAM] unsigned char 
  9668 ;; Auto vars:     Size  Location     Type
  9669 ;;		None
  9670 ;; Return value:  Size  Location     Type
  9671 ;;                  3   35[COMRAM] float 
  9672 ;; Registers used:
  9673 ;;		wreg, status,2, status,0
  9674 ;; Tracked objects:
  9675 ;;		On entry : 0/0
  9676 ;;		On exit  : 0/0
  9677 ;;		Unchanged: 0/0
  9678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9679 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9681 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9682 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9683 ;;Total ram usage:        8 bytes
  9684 ;; Hardware stack levels used:    1
  9685 ;; Hardware stack levels required when called:    3
  9686 ;; This function calls:
  9687 ;;		Nothing
  9688 ;; This function is called by:
  9689 ;;		___altoft
  9690 ;;		___awtoft
  9691 ;;		___ftadd
  9692 ;;		___ftdiv
  9693 ;;		___ftmul
  9694 ;;		___lltoft
  9695 ;; This function uses a non-reentrant model
  9696 ;;
  9697                           
  9698                           	psect	text40
  9699  0023B6                     __ptext40:
  9700                           	opt stack 0
  9701  0023B6                     ___ftpack:
  9702                           	opt stack 23
  9703                           
  9704                           ;incstack = 0
  9705  0023B6  5027               	movf	___ftpack@exp,w,c
  9706  0023B8  B4D8               	btfsc	status,2,c
  9707  0023BA  D005               	goto	l4929
  9708  0023BC  5024               	movf	___ftpack@arg,w,c
  9709  0023BE  1025               	iorwf	___ftpack@arg+1,w,c
  9710  0023C0  1026               	iorwf	___ftpack@arg+2,w,c
  9711  0023C2  A4D8               	btfss	status,2,c
  9712  0023C4  D00C               	goto	l4935
  9713  0023C6                     l4929:
  9714  0023C6  0E00               	movlw	0
  9715  0023C8  6E24               	movwf	?___ftpack,c
  9716  0023CA  0E00               	movlw	0
  9717  0023CC  6E25               	movwf	?___ftpack+1,c
  9718  0023CE  0E00               	movlw	0
  9719  0023D0  6E26               	movwf	?___ftpack+2,c
  9720  0023D2  0012               	return	
  9721  0023D4                     l4933:
  9722  0023D4  2A27               	incf	___ftpack@exp,f,c
  9723  0023D6  90D8               	bcf	status,0,c
  9724  0023D8  3226               	rrcf	___ftpack@arg+2,f,c
  9725  0023DA  3225               	rrcf	___ftpack@arg+1,f,c
  9726  0023DC  3224               	rrcf	___ftpack@arg,f,c
  9727  0023DE                     l4935:
  9728  0023DE  0E00               	movlw	0
  9729  0023E0  1424               	andwf	___ftpack@arg,w,c
  9730  0023E2  6E29               	movwf	??___ftpack& (0+255),c
  9731  0023E4  0E00               	movlw	0
  9732  0023E6  1425               	andwf	___ftpack@arg+1,w,c
  9733  0023E8  6E2A               	movwf	(??___ftpack+1)& (0+255),c
  9734  0023EA  0EFE               	movlw	254
  9735  0023EC  1426               	andwf	___ftpack@arg+2,w,c
  9736  0023EE  6E2B               	movwf	(??___ftpack+2)& (0+255),c
  9737  0023F0  5029               	movf	??___ftpack,w,c
  9738  0023F2  102A               	iorwf	??___ftpack+1,w,c
  9739  0023F4  102B               	iorwf	??___ftpack+2,w,c
  9740  0023F6  B4D8               	btfsc	status,2,c
  9741  0023F8  D00C               	goto	l4941
  9742  0023FA  D7EC               	goto	l4933
  9743  0023FC                     l4937:
  9744  0023FC  2A27               	incf	___ftpack@exp,f,c
  9745  0023FE  0E01               	movlw	1
  9746  002400  2624               	addwf	___ftpack@arg,f,c
  9747  002402  0E00               	movlw	0
  9748  002404  2225               	addwfc	___ftpack@arg+1,f,c
  9749  002406  0E00               	movlw	0
  9750  002408  2226               	addwfc	___ftpack@arg+2,f,c
  9751  00240A  90D8               	bcf	status,0,c
  9752  00240C  3226               	rrcf	___ftpack@arg+2,f,c
  9753  00240E  3225               	rrcf	___ftpack@arg+1,f,c
  9754  002410  3224               	rrcf	___ftpack@arg,f,c
  9755  002412                     l4941:
  9756  002412  0E00               	movlw	0
  9757  002414  1424               	andwf	___ftpack@arg,w,c
  9758  002416  6E29               	movwf	??___ftpack& (0+255),c
  9759  002418  0E00               	movlw	0
  9760  00241A  1425               	andwf	___ftpack@arg+1,w,c
  9761  00241C  6E2A               	movwf	(??___ftpack+1)& (0+255),c
  9762  00241E  0EFF               	movlw	255
  9763  002420  1426               	andwf	___ftpack@arg+2,w,c
  9764  002422  6E2B               	movwf	(??___ftpack+2)& (0+255),c
  9765  002424  5029               	movf	??___ftpack,w,c
  9766  002426  102A               	iorwf	??___ftpack+1,w,c
  9767  002428  102B               	iorwf	??___ftpack+2,w,c
  9768  00242A  B4D8               	btfsc	status,2,c
  9769  00242C  D006               	goto	l4945
  9770  00242E  D7E6               	goto	l4937
  9771  002430                     l4943:
  9772  002430  0627               	decf	___ftpack@exp,f,c
  9773  002432  90D8               	bcf	status,0,c
  9774  002434  3624               	rlcf	___ftpack@arg,f,c
  9775  002436  3625               	rlcf	___ftpack@arg+1,f,c
  9776  002438  3626               	rlcf	___ftpack@arg+2,f,c
  9777  00243A                     l4945:
  9778  00243A  BE25               	btfsc	___ftpack@arg+1,7,c
  9779  00243C  D003               	goto	l983
  9780  00243E  0E02               	movlw	2
  9781  002440  6027               	cpfslt	___ftpack@exp,c
  9782  002442  D7F6               	goto	l4943
  9783  002444                     l983:
  9784  002444  A027               	btfss	___ftpack@exp,0,c
  9785  002446  9E25               	bcf	___ftpack@arg+1,7,c
  9786  002448  90D8               	bcf	status,0,c
  9787  00244A  3227               	rrcf	___ftpack@exp,f,c
  9788  00244C  5027               	movf	___ftpack@exp,w,c
  9789  00244E  1226               	iorwf	___ftpack@arg+2,f,c
  9790  002450  5028               	movf	___ftpack@sign,w,c
  9791  002452  A4D8               	btfss	status,2,c
  9792  002454  8E26               	bsf	___ftpack@arg+2,7,c
  9793  002456  C024  F024         	movff	___ftpack@arg,?___ftpack
  9794  00245A  C025  F025         	movff	___ftpack@arg+1,?___ftpack+1
  9795  00245E  C026  F026         	movff	___ftpack@arg+2,?___ftpack+2
  9796  002462  0012               	return	
  9797  002464                     __end_of___ftpack:
  9798                           	opt stack 0
  9799                           tblptru	equ	0xFF8
  9800                           tblptrh	equ	0xFF7
  9801                           tblptrl	equ	0xFF6
  9802                           tablat	equ	0xFF5
  9803                           prodh	equ	0xFF4
  9804                           prodl	equ	0xFF3
  9805                           intcon	equ	0xFF2
  9806                           postinc0	equ	0xFEE
  9807                           wreg	equ	0xFE8
  9808                           postdec1	equ	0xFE5
  9809                           fsr1l	equ	0xFE1
  9810                           indf2	equ	0xFDF
  9811                           postinc2	equ	0xFDE
  9812                           postdec2	equ	0xFDD
  9813                           fsr2h	equ	0xFDA
  9814                           fsr2l	equ	0xFD9
  9815                           status	equ	0xFD8
  9816                           
  9817 ;; *************** function ___ftneg *****************
  9818 ;; Defined at:
  9819 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  9820 ;; Parameters:    Size  Location     Type
  9821 ;;  f1              3   35[COMRAM] float 
  9822 ;; Auto vars:     Size  Location     Type
  9823 ;;		None
  9824 ;; Return value:  Size  Location     Type
  9825 ;;                  3   35[COMRAM] float 
  9826 ;; Registers used:
  9827 ;;		wreg, status,2, status,0
  9828 ;; Tracked objects:
  9829 ;;		On entry : 0/0
  9830 ;;		On exit  : 0/0
  9831 ;;		Unchanged: 0/0
  9832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9833 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9836 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9837 ;;Total ram usage:        3 bytes
  9838 ;; Hardware stack levels used:    1
  9839 ;; Hardware stack levels required when called:    3
  9840 ;; This function calls:
  9841 ;;		Nothing
  9842 ;; This function is called by:
  9843 ;;		_printf
  9844 ;; This function uses a non-reentrant model
  9845 ;;
  9846                           
  9847                           	psect	text41
  9848  002E06                     __ptext41:
  9849                           	opt stack 0
  9850  002E06                     ___ftneg:
  9851                           	opt stack 25
  9852                           
  9853                           ;incstack = 0
  9854  002E06  5024               	movf	___ftneg@f1,w,c
  9855  002E08  1025               	iorwf	___ftneg@f1+1,w,c
  9856  002E0A  1026               	iorwf	___ftneg@f1+2,w,c
  9857  002E0C  B4D8               	btfsc	status,2,c
  9858  002E0E  D006               	goto	l1080
  9859  002E10  0E00               	movlw	0
  9860  002E12  1A24               	xorwf	___ftneg@f1,f,c
  9861  002E14  0E00               	movlw	0
  9862  002E16  1A25               	xorwf	___ftneg@f1+1,f,c
  9863  002E18  0E80               	movlw	128
  9864  002E1A  1A26               	xorwf	___ftneg@f1+2,f,c
  9865  002E1C                     l1080:
  9866  002E1C  C024  F024         	movff	___ftneg@f1,?___ftneg
  9867  002E20  C025  F025         	movff	___ftneg@f1+1,?___ftneg+1
  9868  002E24  C026  F026         	movff	___ftneg@f1+2,?___ftneg+2
  9869  002E28  0012               	return		;funcret
  9870  002E2A                     __end_of___ftneg:
  9871                           	opt stack 0
  9872                           tblptru	equ	0xFF8
  9873                           tblptrh	equ	0xFF7
  9874                           tblptrl	equ	0xFF6
  9875                           tablat	equ	0xFF5
  9876                           prodh	equ	0xFF4
  9877                           prodl	equ	0xFF3
  9878                           intcon	equ	0xFF2
  9879                           postinc0	equ	0xFEE
  9880                           wreg	equ	0xFE8
  9881                           postdec1	equ	0xFE5
  9882                           fsr1l	equ	0xFE1
  9883                           indf2	equ	0xFDF
  9884                           postinc2	equ	0xFDE
  9885                           postdec2	equ	0xFDD
  9886                           fsr2h	equ	0xFDA
  9887                           fsr2l	equ	0xFD9
  9888                           status	equ	0xFD8
  9889                           
  9890 ;; *************** function ___ftge *****************
  9891 ;; Defined at:
  9892 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  9893 ;; Parameters:    Size  Location     Type
  9894 ;;  ff1             3   35[COMRAM] float 
  9895 ;;  ff2             3   38[COMRAM] float 
  9896 ;; Auto vars:     Size  Location     Type
  9897 ;;		None
  9898 ;; Return value:  Size  Location     Type
  9899 ;;		None               void
  9900 ;; Registers used:
  9901 ;;		wreg, status,2, status,0
  9902 ;; Tracked objects:
  9903 ;;		On entry : 0/0
  9904 ;;		On exit  : 0/0
  9905 ;;		Unchanged: 0/0
  9906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9907 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9909 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9910 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9911 ;;Total ram usage:        9 bytes
  9912 ;; Hardware stack levels used:    1
  9913 ;; Hardware stack levels required when called:    3
  9914 ;; This function calls:
  9915 ;;		Nothing
  9916 ;; This function is called by:
  9917 ;;		_sortBattery
  9918 ;;		_printf
  9919 ;; This function uses a non-reentrant model
  9920 ;;
  9921                           
  9922                           	psect	text42
  9923  0026BE                     __ptext42:
  9924                           	opt stack 0
  9925  0026BE                     ___ftge:
  9926                           	opt stack 25
  9927                           
  9928                           ;incstack = 0
  9929  0026BE  AE26               	btfss	___ftge@ff1+2,7,c
  9930  0026C0  D016               	goto	l5491
  9931  0026C2  C024  F02A         	movff	___ftge@ff1,??___ftge
  9932  0026C6  C025  F02B         	movff	___ftge@ff1+1,??___ftge+1
  9933  0026CA  C026  F02C         	movff	___ftge@ff1+2,??___ftge+2
  9934  0026CE  1E2A               	comf	??___ftge,f,c
  9935  0026D0  1E2B               	comf	??___ftge+1,f,c
  9936  0026D2  1E2C               	comf	??___ftge+2,f,c
  9937  0026D4  2A2A               	incf	??___ftge,f,c
  9938  0026D6  0E00               	movlw	0
  9939  0026D8  222B               	addwfc	??___ftge+1,f,c
  9940  0026DA  222C               	addwfc	??___ftge+2,f,c
  9941  0026DC  0E00               	movlw	0
  9942  0026DE  242A               	addwf	??___ftge,w,c
  9943  0026E0  6E24               	movwf	___ftge@ff1,c
  9944  0026E2  0E00               	movlw	0
  9945  0026E4  202B               	addwfc	??___ftge+1,w,c
  9946  0026E6  6E25               	movwf	___ftge@ff1+1,c
  9947  0026E8  0E80               	movlw	128
  9948  0026EA  202C               	addwfc	??___ftge+2,w,c
  9949  0026EC  6E26               	movwf	___ftge@ff1+2,c
  9950  0026EE                     l5491:
  9951  0026EE  AE29               	btfss	___ftge@ff2+2,7,c
  9952  0026F0  D016               	goto	l5495
  9953  0026F2  C027  F02A         	movff	___ftge@ff2,??___ftge
  9954  0026F6  C028  F02B         	movff	___ftge@ff2+1,??___ftge+1
  9955  0026FA  C029  F02C         	movff	___ftge@ff2+2,??___ftge+2
  9956  0026FE  1E2A               	comf	??___ftge,f,c
  9957  002700  1E2B               	comf	??___ftge+1,f,c
  9958  002702  1E2C               	comf	??___ftge+2,f,c
  9959  002704  2A2A               	incf	??___ftge,f,c
  9960  002706  0E00               	movlw	0
  9961  002708  222B               	addwfc	??___ftge+1,f,c
  9962  00270A  222C               	addwfc	??___ftge+2,f,c
  9963  00270C  0E00               	movlw	0
  9964  00270E  242A               	addwf	??___ftge,w,c
  9965  002710  6E27               	movwf	___ftge@ff2,c
  9966  002712  0E00               	movlw	0
  9967  002714  202B               	addwfc	??___ftge+1,w,c
  9968  002716  6E28               	movwf	___ftge@ff2+1,c
  9969  002718  0E80               	movlw	128
  9970  00271A  202C               	addwfc	??___ftge+2,w,c
  9971  00271C  6E29               	movwf	___ftge@ff2+2,c
  9972  00271E                     l5495:
  9973  00271E  0E00               	movlw	0
  9974  002720  1A24               	xorwf	___ftge@ff1,f,c
  9975  002722  0E00               	movlw	0
  9976  002724  1A25               	xorwf	___ftge@ff1+1,f,c
  9977  002726  0E80               	movlw	128
  9978  002728  1A26               	xorwf	___ftge@ff1+2,f,c
  9979  00272A  0E00               	movlw	0
  9980  00272C  1A27               	xorwf	___ftge@ff2,f,c
  9981  00272E  0E00               	movlw	0
  9982  002730  1A28               	xorwf	___ftge@ff2+1,f,c
  9983  002732  0E80               	movlw	128
  9984  002734  1A29               	xorwf	___ftge@ff2+2,f,c
  9985  002736  5027               	movf	___ftge@ff2,w,c
  9986  002738  5C24               	subwf	___ftge@ff1,w,c
  9987  00273A  5028               	movf	___ftge@ff2+1,w,c
  9988  00273C  5825               	subwfb	___ftge@ff1+1,w,c
  9989  00273E  5029               	movf	___ftge@ff2+2,w,c
  9990  002740  5826               	subwfb	___ftge@ff1+2,w,c
  9991  002742  B0D8               	btfsc	status,0,c
  9992  002744  D002               	goto	l5501
  9993  002746  90D8               	bcf	status,0,c
  9994  002748  0012               	return	
  9995  00274A                     l5501:
  9996  00274A  80D8               	bsf	status,0,c
  9997  00274C  0012               	return	
  9998  00274E                     __end_of___ftge:
  9999                           	opt stack 0
 10000                           tblptru	equ	0xFF8
 10001                           tblptrh	equ	0xFF7
 10002                           tblptrl	equ	0xFF6
 10003                           tablat	equ	0xFF5
 10004                           prodh	equ	0xFF4
 10005                           prodl	equ	0xFF3
 10006                           intcon	equ	0xFF2
 10007                           postinc0	equ	0xFEE
 10008                           wreg	equ	0xFE8
 10009                           postdec1	equ	0xFE5
 10010                           fsr1l	equ	0xFE1
 10011                           indf2	equ	0xFDF
 10012                           postinc2	equ	0xFDE
 10013                           postdec2	equ	0xFDD
 10014                           fsr2h	equ	0xFDA
 10015                           fsr2l	equ	0xFD9
 10016                           status	equ	0xFD8
 10017                           
 10018 ;; *************** function _lcdClear *****************
 10019 ;; Defined at:
 10020 ;;		line 74 in file "lcd.c"
 10021 ;; Parameters:    Size  Location     Type
 10022 ;;		None
 10023 ;; Auto vars:     Size  Location     Type
 10024 ;;		None
 10025 ;; Return value:  Size  Location     Type
 10026 ;;                  1    wreg      void 
 10027 ;; Registers used:
 10028 ;;		wreg, status,2, status,0, cstack
 10029 ;; Tracked objects:
 10030 ;;		On entry : 0/0
 10031 ;;		On exit  : 0/0
 10032 ;;		Unchanged: 0/0
 10033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10037 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10038 ;;Total ram usage:        0 bytes
 10039 ;; Hardware stack levels used:    1
 10040 ;; Hardware stack levels required when called:    5
 10041 ;; This function calls:
 10042 ;;		_lcdInst
 10043 ;; This function is called by:
 10044 ;;		_main
 10045 ;;		_sortBattery
 10046 ;;		_pause
 10047 ;;		_dateTime
 10048 ;;		_mainMenu
 10049 ;;		_runSelect
 10050 ;;		_runMenu
 10051 ;;		_runTime
 10052 ;;		_runStats
 10053 ;; This function uses a non-reentrant model
 10054 ;;
 10055                           
 10056                           	psect	text43
 10057  002ED6                     __ptext43:
 10058                           	opt stack 0
 10059  002ED6                     _lcdClear:
 10060                           	opt stack 23
 10061                           
 10062                           ;lcd.c: 75: lcdInst(0b00000001);
 10063                           
 10064                           ;incstack = 0
 10065  002ED6  0E01               	movlw	1
 10066  002ED8  EC26  F017         	call	_lcdInst
 10067  002EDC  0012               	return		;funcret
 10068  002EDE                     __end_of_lcdClear:
 10069                           	opt stack 0
 10070                           tblptru	equ	0xFF8
 10071                           tblptrh	equ	0xFF7
 10072                           tblptrl	equ	0xFF6
 10073                           tablat	equ	0xFF5
 10074                           prodh	equ	0xFF4
 10075                           prodl	equ	0xFF3
 10076                           intcon	equ	0xFF2
 10077                           postinc0	equ	0xFEE
 10078                           wreg	equ	0xFE8
 10079                           postdec1	equ	0xFE5
 10080                           fsr1l	equ	0xFE1
 10081                           indf2	equ	0xFDF
 10082                           postinc2	equ	0xFDE
 10083                           postdec2	equ	0xFDD
 10084                           fsr2h	equ	0xFDA
 10085                           fsr2l	equ	0xFD9
 10086                           status	equ	0xFD8
 10087                           
 10088 ;; *************** function _pinSetup *****************
 10089 ;; Defined at:
 10090 ;;		line 193 in file "main.c"
 10091 ;; Parameters:    Size  Location     Type
 10092 ;;		None
 10093 ;; Auto vars:     Size  Location     Type
 10094 ;;		None
 10095 ;; Return value:  Size  Location     Type
 10096 ;;                  1    wreg      void 
 10097 ;; Registers used:
 10098 ;;		wreg, status,2, status,0
 10099 ;; Tracked objects:
 10100 ;;		On entry : 0/0
 10101 ;;		On exit  : 0/0
 10102 ;;		Unchanged: 0/0
 10103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10108 ;;Total ram usage:        0 bytes
 10109 ;; Hardware stack levels used:    1
 10110 ;; Hardware stack levels required when called:    3
 10111 ;; This function calls:
 10112 ;;		Nothing
 10113 ;; This function is called by:
 10114 ;;		_main
 10115 ;; This function uses a non-reentrant model
 10116 ;;
 10117                           
 10118                           	psect	text44
 10119  002C1A                     __ptext44:
 10120                           	opt stack 0
 10121  002C1A                     _pinSetup:
 10122                           	opt stack 27
 10123                           
 10124                           ;main.c: 199: TRISA = 0xFF;
 10125                           
 10126                           ;incstack = 0
 10127  002C1A  6892               	setf	3986,c	;volatile
 10128                           
 10129                           ;main.c: 200: TRISB = 0xFF;
 10130  002C1C  6893               	setf	3987,c	;volatile
 10131                           
 10132                           ;main.c: 201: TRISC = 0x00;
 10133  002C1E  0E00               	movlw	0
 10134  002C20  6E94               	movwf	3988,c	;volatile
 10135                           
 10136                           ;main.c: 202: TRISD = 0x00;
 10137  002C22  0E00               	movlw	0
 10138  002C24  6E95               	movwf	3989,c	;volatile
 10139                           
 10140                           ;main.c: 203: TRISE = 0x00;
 10141  002C26  0E00               	movlw	0
 10142  002C28  6E96               	movwf	3990,c	;volatile
 10143                           
 10144                           ;main.c: 205: LATA = 0x00;
 10145  002C2A  0E00               	movlw	0
 10146  002C2C  6E89               	movwf	3977,c	;volatile
 10147                           
 10148                           ;main.c: 206: LATB = 0x00;
 10149  002C2E  0E00               	movlw	0
 10150  002C30  6E8A               	movwf	3978,c	;volatile
 10151                           
 10152                           ;main.c: 207: LATC = 0x00;
 10153  002C32  0E00               	movlw	0
 10154  002C34  6E8B               	movwf	3979,c	;volatile
 10155                           
 10156                           ;main.c: 208: LATD = 0x00;
 10157  002C36  0E00               	movlw	0
 10158  002C38  6E8C               	movwf	3980,c	;volatile
 10159                           
 10160                           ;main.c: 209: LATE = 0x00;
 10161  002C3A  0E00               	movlw	0
 10162  002C3C  6E8D               	movwf	3981,c	;volatile
 10163                           
 10164                           ;main.c: 211: ADCON0 = 0x00;
 10165  002C3E  0E00               	movlw	0
 10166  002C40  6EC2               	movwf	4034,c	;volatile
 10167                           
 10168                           ;main.c: 212: ADCON1 |= 0x10;
 10169  002C42  88C1               	bsf	4033,4,c	;volatile
 10170                           
 10171                           ;main.c: 213: ADCON1 |= 0x0B;
 10172  002C44  0E0B               	movlw	11
 10173  002C46  12C1               	iorwf	4033,f,c	;volatile
 10174                           
 10175                           ;main.c: 218: ADCON2 = 0;
 10176  002C48  0E00               	movlw	0
 10177  002C4A  6EC0               	movwf	4032,c	;volatile
 10178                           
 10179                           ;main.c: 219: ADCON2 |= 0b010;
 10180  002C4C  82C0               	bsf	4032,1,c	;volatile
 10181                           
 10182                           ;main.c: 220: ADCON2 |= 0b110<<3;
 10183  002C4E  0E30               	movlw	48
 10184  002C50  12C0               	iorwf	4032,f,c	;volatile
 10185                           
 10186                           ;main.c: 221: ADCON2 |= 1<<7;
 10187  002C52  8EC0               	bsf	4032,7,c	;volatile
 10188                           
 10189                           ;main.c: 224: INT1IE = 1;
 10190  002C54  86F0               	bsf	intcon3,3,c	;volatile
 10191                           
 10192                           ;main.c: 225: INT0IE = 1;
 10193  002C56  88F2               	bsf	intcon,4,c	;volatile
 10194                           
 10195                           ;main.c: 226: (INTCONbits.GIE = 1);
 10196  002C58  8EF2               	bsf	intcon,7,c	;volatile
 10197  002C5A  0012               	return		;funcret
 10198  002C5C                     __end_of_pinSetup:
 10199                           	opt stack 0
 10200                           tblptru	equ	0xFF8
 10201                           tblptrh	equ	0xFF7
 10202                           tblptrl	equ	0xFF6
 10203                           tablat	equ	0xFF5
 10204                           prodh	equ	0xFF4
 10205                           prodl	equ	0xFF3
 10206                           intcon	equ	0xFF2
 10207                           intcon3	equ	0xFF0
 10208                           postinc0	equ	0xFEE
 10209                           wreg	equ	0xFE8
 10210                           postdec1	equ	0xFE5
 10211                           fsr1l	equ	0xFE1
 10212                           indf2	equ	0xFDF
 10213                           postinc2	equ	0xFDE
 10214                           postdec2	equ	0xFDD
 10215                           fsr2h	equ	0xFDA
 10216                           fsr2l	equ	0xFD9
 10217                           status	equ	0xFD8
 10218                           
 10219 ;; *************** function _initLCD *****************
 10220 ;; Defined at:
 10221 ;;		line 15 in file "lcd.c"
 10222 ;; Parameters:    Size  Location     Type
 10223 ;;		None
 10224 ;; Auto vars:     Size  Location     Type
 10225 ;;		None
 10226 ;; Return value:  Size  Location     Type
 10227 ;;                  1    wreg      void 
 10228 ;; Registers used:
 10229 ;;		wreg, status,2, status,0, cstack
 10230 ;; Tracked objects:
 10231 ;;		On entry : 0/0
 10232 ;;		On exit  : 0/0
 10233 ;;		Unchanged: 0/0
 10234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10237 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10238 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10239 ;;Total ram usage:        1 bytes
 10240 ;; Hardware stack levels used:    1
 10241 ;; Hardware stack levels required when called:    5
 10242 ;; This function calls:
 10243 ;;		_lcdInst
 10244 ;; This function is called by:
 10245 ;;		_main
 10246 ;; This function uses a non-reentrant model
 10247 ;;
 10248                           
 10249                           	psect	text45
 10250  002BD4                     __ptext45:
 10251                           	opt stack 0
 10252  002BD4                     _initLCD:
 10253                           	opt stack 25
 10254                           
 10255                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
 10256                           
 10257                           ;incstack = 0
 10258  002BD4  0E31               	movlw	49
 10259  002BD6  6E28               	movwf	??_initLCD& (0+255),c
 10260  002BD8  0EB2               	movlw	178
 10261  002BDA                     u6017:
 10262  002BDA  2EE8               	decfsz	wreg,f,c
 10263  002BDC  D7FE               	bra	u6017
 10264  002BDE  2E28               	decfsz	??_initLCD& (0+255),f,c
 10265  002BE0  D7FC               	bra	u6017
 10266  002BE2  D000               	nop2	
 10267                           
 10268                           ;lcd.c: 18: lcdInst(0b00110011);
 10269  002BE4  0E33               	movlw	51
 10270  002BE6  EC26  F017         	call	_lcdInst
 10271                           
 10272                           ;lcd.c: 19: lcdInst(0b00110010);
 10273  002BEA  0E32               	movlw	50
 10274  002BEC  EC26  F017         	call	_lcdInst
 10275                           
 10276                           ;lcd.c: 20: lcdInst(0b00101000);
 10277  002BF0  0E28               	movlw	40
 10278  002BF2  EC26  F017         	call	_lcdInst
 10279                           
 10280                           ;lcd.c: 21: lcdInst(0b00001111);
 10281  002BF6  0E0F               	movlw	15
 10282  002BF8  EC26  F017         	call	_lcdInst
 10283                           
 10284                           ;lcd.c: 22: lcdInst(0b00000110);
 10285  002BFC  0E06               	movlw	6
 10286  002BFE  EC26  F017         	call	_lcdInst
 10287                           
 10288                           ;lcd.c: 23: lcdInst(0b00000001);
 10289  002C02  0E01               	movlw	1
 10290  002C04  EC26  F017         	call	_lcdInst
 10291                           
 10292                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
 10293  002C08  0E31               	movlw	49
 10294  002C0A  6E28               	movwf	??_initLCD& (0+255),c
 10295  002C0C  0EB2               	movlw	178
 10296  002C0E                     u6027:
 10297  002C0E  2EE8               	decfsz	wreg,f,c
 10298  002C10  D7FE               	bra	u6027
 10299  002C12  2E28               	decfsz	??_initLCD& (0+255),f,c
 10300  002C14  D7FC               	bra	u6027
 10301  002C16  D000               	nop2	
 10302  002C18  0012               	return		;funcret
 10303  002C1A                     __end_of_initLCD:
 10304                           	opt stack 0
 10305                           tblptru	equ	0xFF8
 10306                           tblptrh	equ	0xFF7
 10307                           tblptrl	equ	0xFF6
 10308                           tablat	equ	0xFF5
 10309                           prodh	equ	0xFF4
 10310                           prodl	equ	0xFF3
 10311                           intcon	equ	0xFF2
 10312                           intcon3	equ	0xFF0
 10313                           postinc0	equ	0xFEE
 10314                           wreg	equ	0xFE8
 10315                           postdec1	equ	0xFE5
 10316                           fsr1l	equ	0xFE1
 10317                           indf2	equ	0xFDF
 10318                           postinc2	equ	0xFDE
 10319                           postdec2	equ	0xFDD
 10320                           fsr2h	equ	0xFDA
 10321                           fsr2l	equ	0xFD9
 10322                           status	equ	0xFD8
 10323                           
 10324 ;; *************** function _lcdInst *****************
 10325 ;; Defined at:
 10326 ;;		line 27 in file "lcd.c"
 10327 ;; Parameters:    Size  Location     Type
 10328 ;;  data            1    wreg     unsigned char 
 10329 ;; Auto vars:     Size  Location     Type
 10330 ;;  data            1   38[COMRAM] unsigned char 
 10331 ;; Return value:  Size  Location     Type
 10332 ;;                  1    wreg      void 
 10333 ;; Registers used:
 10334 ;;		wreg, status,2, status,0, cstack
 10335 ;; Tracked objects:
 10336 ;;		On entry : 0/0
 10337 ;;		On exit  : 0/0
 10338 ;;		Unchanged: 0/0
 10339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10341 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10342 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10343 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10344 ;;Total ram usage:        2 bytes
 10345 ;; Hardware stack levels used:    1
 10346 ;; Hardware stack levels required when called:    4
 10347 ;; This function calls:
 10348 ;;		_lcdNibble
 10349 ;; This function is called by:
 10350 ;;		_initLCD
 10351 ;;		_lcdClear
 10352 ;;		_lcdNewline
 10353 ;;		_lcdHome
 10354 ;; This function uses a non-reentrant model
 10355 ;;
 10356                           
 10357                           	psect	text46
 10358  002E4C                     __ptext46:
 10359                           	opt stack 0
 10360  002E4C                     _lcdInst:
 10361                           	opt stack 22
 10362                           
 10363                           ;incstack = 0
 10364                           ;lcdInst@data stored from wreg
 10365  002E4C  6E27               	movwf	lcdInst@data,c
 10366                           
 10367                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 10368  002E4E  948C               	bcf	3980,2,c	;volatile
 10369                           
 10370                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 10371  002E50  0E74               	movlw	116
 10372  002E52                     u6037:
 10373  002E52  2EE8               	decfsz	wreg,f,c
 10374  002E54  D7FE               	bra	u6037
 10375  002E56  D000               	nop2	
 10376                           
 10377                           ;lcd.c: 30: lcdNibble(data);
 10378  002E58  5027               	movf	lcdInst@data,w,c
 10379  002E5A  ECD1  F014         	call	_lcdNibble
 10380                           
 10381                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 10382  002E5E  0E04               	movlw	4
 10383  002E60  6E26               	movwf	??_lcdInst& (0+255),c
 10384  002E62  0E3E               	movlw	62
 10385  002E64                     u6047:
 10386  002E64  2EE8               	decfsz	wreg,f,c
 10387  002E66  D7FE               	bra	u6047
 10388  002E68  2E26               	decfsz	??_lcdInst& (0+255),f,c
 10389  002E6A  D7FC               	bra	u6047
 10390  002E6C  0012               	return		;funcret
 10391  002E6E                     __end_of_lcdInst:
 10392                           	opt stack 0
 10393                           tblptru	equ	0xFF8
 10394                           tblptrh	equ	0xFF7
 10395                           tblptrl	equ	0xFF6
 10396                           tablat	equ	0xFF5
 10397                           prodh	equ	0xFF4
 10398                           prodl	equ	0xFF3
 10399                           intcon	equ	0xFF2
 10400                           intcon3	equ	0xFF0
 10401                           postinc0	equ	0xFEE
 10402                           wreg	equ	0xFE8
 10403                           postdec1	equ	0xFE5
 10404                           fsr1l	equ	0xFE1
 10405                           indf2	equ	0xFDF
 10406                           postinc2	equ	0xFDE
 10407                           postdec2	equ	0xFDD
 10408                           fsr2h	equ	0xFDA
 10409                           fsr2l	equ	0xFD9
 10410                           status	equ	0xFD8
 10411                           
 10412 ;; *************** function _lcdNibble *****************
 10413 ;; Defined at:
 10414 ;;		line 46 in file "lcd.c"
 10415 ;; Parameters:    Size  Location     Type
 10416 ;;  data            1    wreg     unsigned char 
 10417 ;; Auto vars:     Size  Location     Type
 10418 ;;  data            1   36[COMRAM] unsigned char 
 10419 ;;  temp            1   35[COMRAM] unsigned char 
 10420 ;; Return value:  Size  Location     Type
 10421 ;;                  1    wreg      void 
 10422 ;; Registers used:
 10423 ;;		wreg, status,2, status,0
 10424 ;; Tracked objects:
 10425 ;;		On entry : 0/0
 10426 ;;		On exit  : 0/0
 10427 ;;		Unchanged: 0/0
 10428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10430 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10432 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10433 ;;Total ram usage:        2 bytes
 10434 ;; Hardware stack levels used:    1
 10435 ;; Hardware stack levels required when called:    3
 10436 ;; This function calls:
 10437 ;;		Nothing
 10438 ;; This function is called by:
 10439 ;;		_lcdInst
 10440 ;;		_putch
 10441 ;; This function uses a non-reentrant model
 10442 ;;
 10443                           
 10444                           	psect	text47
 10445  0029A2                     __ptext47:
 10446                           	opt stack 0
 10447  0029A2                     _lcdNibble:
 10448                           	opt stack 24
 10449                           
 10450                           ;incstack = 0
 10451                           ;lcdNibble@data stored from wreg
 10452  0029A2  6E25               	movwf	lcdNibble@data,c
 10453                           
 10454                           ;lcd.c: 48: char temp = data & 0xF0;
 10455  0029A4  5025               	movf	lcdNibble@data,w,c
 10456  0029A6  0BF0               	andlw	240
 10457  0029A8  6E24               	movwf	lcdNibble@temp,c
 10458                           
 10459                           ;lcd.c: 49: LATD = LATD & 0x0F;
 10460  0029AA  508C               	movf	3980,w,c	;volatile
 10461  0029AC  0B0F               	andlw	15
 10462  0029AE  6E8C               	movwf	3980,c	;volatile
 10463                           
 10464                           ;lcd.c: 50: LATD = temp | LATD;
 10465  0029B0  5024               	movf	lcdNibble@temp,w,c
 10466  0029B2  108C               	iorwf	3980,w,c	;volatile
 10467  0029B4  6E8C               	movwf	3980,c	;volatile
 10468                           
 10469                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 10470  0029B6  968C               	bcf	3980,3,c	;volatile
 10471                           
 10472                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 10473  0029B8  0ED6               	movlw	214
 10474  0029BA                     u6057:
 10475  0029BA  D000               	nop2	
 10476  0029BC  D000               	nop2	
 10477  0029BE  2EE8               	decfsz	wreg,f,c
 10478  0029C0  D7FC               	bra	u6057
 10479  0029C2  D000               	nop2	
 10480                           
 10481                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 10482  0029C4  868C               	bsf	3980,3,c	;volatile
 10483                           
 10484                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 10485  0029C6  0ED6               	movlw	214
 10486  0029C8                     u6067:
 10487  0029C8  D000               	nop2	
 10488  0029CA  D000               	nop2	
 10489  0029CC  2EE8               	decfsz	wreg,f,c
 10490  0029CE  D7FC               	bra	u6067
 10491  0029D0  D000               	nop2	
 10492                           
 10493                           ;lcd.c: 58: data = data << 4;
 10494  0029D2  3825               	swapf	lcdNibble@data,w,c
 10495  0029D4  0BF0               	andlw	240
 10496  0029D6  6E25               	movwf	lcdNibble@data,c
 10497                           
 10498                           ;lcd.c: 60: temp = data & 0xF0;
 10499  0029D8  5025               	movf	lcdNibble@data,w,c
 10500  0029DA  0BF0               	andlw	240
 10501  0029DC  6E24               	movwf	lcdNibble@temp,c
 10502                           
 10503                           ;lcd.c: 61: LATD = LATD & 0x0F;
 10504  0029DE  508C               	movf	3980,w,c	;volatile
 10505  0029E0  0B0F               	andlw	15
 10506  0029E2  6E8C               	movwf	3980,c	;volatile
 10507                           
 10508                           ;lcd.c: 62: LATD = temp | LATD;
 10509  0029E4  5024               	movf	lcdNibble@temp,w,c
 10510  0029E6  108C               	iorwf	3980,w,c	;volatile
 10511  0029E8  6E8C               	movwf	3980,c	;volatile
 10512                           
 10513                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 10514  0029EA  968C               	bcf	3980,3,c	;volatile
 10515                           
 10516                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 10517  0029EC  0ED6               	movlw	214
 10518  0029EE                     u6077:
 10519  0029EE  D000               	nop2	
 10520  0029F0  D000               	nop2	
 10521  0029F2  2EE8               	decfsz	wreg,f,c
 10522  0029F4  D7FC               	bra	u6077
 10523  0029F6  D000               	nop2	
 10524                           
 10525                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 10526  0029F8  868C               	bsf	3980,3,c	;volatile
 10527                           
 10528                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 10529  0029FA  0ED6               	movlw	214
 10530  0029FC                     u6087:
 10531  0029FC  D000               	nop2	
 10532  0029FE  D000               	nop2	
 10533  002A00  2EE8               	decfsz	wreg,f,c
 10534  002A02  D7FC               	bra	u6087
 10535  002A04  D000               	nop2	
 10536  002A06  0012               	return		;funcret
 10537  002A08                     __end_of_lcdNibble:
 10538                           	opt stack 0
 10539                           tblptru	equ	0xFF8
 10540                           tblptrh	equ	0xFF7
 10541                           tblptrl	equ	0xFF6
 10542                           tablat	equ	0xFF5
 10543                           prodh	equ	0xFF4
 10544                           prodl	equ	0xFF3
 10545                           intcon	equ	0xFF2
 10546                           intcon3	equ	0xFF0
 10547                           postinc0	equ	0xFEE
 10548                           wreg	equ	0xFE8
 10549                           postdec1	equ	0xFE5
 10550                           fsr1l	equ	0xFE1
 10551                           indf2	equ	0xFDF
 10552                           postinc2	equ	0xFDE
 10553                           postdec2	equ	0xFDD
 10554                           fsr2h	equ	0xFDA
 10555                           fsr2l	equ	0xFD9
 10556                           status	equ	0xFD8
 10557                           
 10558 ;; *************** function _service *****************
 10559 ;; Defined at:
 10560 ;;		line 229 in file "main.c"
 10561 ;; Parameters:    Size  Location     Type
 10562 ;;		None
 10563 ;; Auto vars:     Size  Location     Type
 10564 ;;		None
 10565 ;; Return value:  Size  Location     Type
 10566 ;;                  1    wreg      void 
 10567 ;; Registers used:
 10568 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10569 ;; Tracked objects:
 10570 ;;		On entry : 0/0
 10571 ;;		On exit  : 0/0
 10572 ;;		Unchanged: 0/0
 10573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10576 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10577 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10578 ;;Total ram usage:       14 bytes
 10579 ;; Hardware stack levels used:    1
 10580 ;; Hardware stack levels required when called:    2
 10581 ;; This function calls:
 10582 ;;		_keyPressedInterruptService
 10583 ;;		_servoInterruptService
 10584 ;; This function is called by:
 10585 ;;		Interrupt level 2
 10586 ;; This function uses a non-reentrant model
 10587 ;;
 10588                           
 10589                           	psect	intcode
 10590  000008                     __pintcode:
 10591                           	opt stack 0
 10592  000008                     _service:
 10593                           	opt stack 21
 10594                           
 10595                           ;incstack = 0
 10596  000008  825C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10597  00000A  EDCC  F012         	call	int_func,f	;refresh shadow registers
 10598                           tblptru	equ	0xFF8
 10599                           tblptrh	equ	0xFF7
 10600                           tblptrl	equ	0xFF6
 10601                           tablat	equ	0xFF5
 10602                           prodh	equ	0xFF4
 10603                           prodl	equ	0xFF3
 10604                           intcon	equ	0xFF2
 10605                           intcon3	equ	0xFF0
 10606                           postinc0	equ	0xFEE
 10607                           wreg	equ	0xFE8
 10608                           postdec1	equ	0xFE5
 10609                           fsr1l	equ	0xFE1
 10610                           indf2	equ	0xFDF
 10611                           postinc2	equ	0xFDE
 10612                           postdec2	equ	0xFDD
 10613                           fsr2h	equ	0xFDA
 10614                           fsr2l	equ	0xFD9
 10615                           status	equ	0xFD8
 10616                           
 10617                           	psect	intcode_body
 10618  002598                     __pintcode_body:
 10619                           	opt stack 21
 10620  002598                     int_func:
 10621                           	opt stack 21
 10622  002598  0006               	pop		; remove dummy address from shadow register refresh
 10623  00259A  CFFA F016          	movff	pclath,??_service
 10624  00259E  CFFB F017          	movff	pclatu,??_service+1
 10625  0025A2  CFE9 F018          	movff	fsr0l,??_service+2
 10626  0025A6  CFEA F019          	movff	fsr0h,??_service+3
 10627  0025AA  CFE1 F01A          	movff	fsr1l,??_service+4
 10628  0025AE  CFE2 F01B          	movff	fsr1h,??_service+5
 10629  0025B2  CFD9 F01C          	movff	fsr2l,??_service+6
 10630  0025B6  CFDA F01D          	movff	fsr2h,??_service+7
 10631  0025BA  CFF3 F01E          	movff	prodl,??_service+8
 10632  0025BE  CFF4 F01F          	movff	prodh,??_service+9
 10633  0025C2  CFF6 F020          	movff	tblptrl,??_service+10
 10634  0025C6  CFF7 F021          	movff	tblptrh,??_service+11
 10635  0025CA  CFF8 F022          	movff	tblptru,??_service+12
 10636  0025CE  CFF5 F023          	movff	tablat,??_service+13
 10637                           
 10638                           ;main.c: 231: servoInterruptService();
 10639  0025D2  ECBB  F00A         	call	_servoInterruptService	;wreg free
 10640                           
 10641                           ;main.c: 234: if(INT0IF){ INT0IF = 0;
 10642  0025D6  A2F2               	btfss	intcon,1,c	;volatile
 10643  0025D8  D006               	goto	i2l4635
 10644  0025DA  92F2               	bcf	intcon,1,c	;volatile
 10645                           
 10646                           ;main.c: 235: batteryDetected = 1;
 10647  0025DC  0E00               	movlw	0
 10648  0025DE  0100               	movlb	0	; () banked
 10649  0025E0  6FFE               	movwf	(_batteryDetected+1)& (0+255),b
 10650  0025E2  0E01               	movlw	1
 10651  0025E4  6FFD               	movwf	_batteryDetected& (0+255),b
 10652  0025E6                     i2l4635:
 10653                           
 10654                           ;main.c: 236: }
 10655                           ;main.c: 239: if(INT1IF){INT1IF = 0;
 10656  0025E6  A0F0               	btfss	intcon3,0,c	;volatile
 10657  0025E8  D003               	goto	i2l143
 10658  0025EA  90F0               	bcf	intcon3,0,c	;volatile
 10659                           
 10660                           ;main.c: 240: keyPressedInterruptService();
 10661  0025EC  EC37  F017         	call	_keyPressedInterruptService	;wreg free
 10662  0025F0                     i2l143:
 10663  0025F0  C023  FFF5         	movff	??_service+13,tablat
 10664  0025F4  C022  FFF8         	movff	??_service+12,tblptru
 10665  0025F8  C021  FFF7         	movff	??_service+11,tblptrh
 10666  0025FC  C020  FFF6         	movff	??_service+10,tblptrl
 10667  002600  C01F  FFF4         	movff	??_service+9,prodh
 10668  002604  C01E  FFF3         	movff	??_service+8,prodl
 10669  002608  C01D  FFDA         	movff	??_service+7,fsr2h
 10670  00260C  C01C  FFD9         	movff	??_service+6,fsr2l
 10671  002610  C01B  FFE2         	movff	??_service+5,fsr1h
 10672  002614  C01A  FFE1         	movff	??_service+4,fsr1l
 10673  002618  C019  FFEA         	movff	??_service+3,fsr0h
 10674  00261C  C018  FFE9         	movff	??_service+2,fsr0l
 10675  002620  C017  FFFB         	movff	??_service+1,pclatu
 10676  002624  C016  FFFA         	movff	??_service,pclath
 10677  002628  925C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10678  00262A  0011               	retfie		f
 10679  00262C                     __end_of_service:
 10680                           	opt stack 0
 10681                           pclatu	equ	0xFFB
 10682                           pclath	equ	0xFFA
 10683                           tblptru	equ	0xFF8
 10684                           tblptrh	equ	0xFF7
 10685                           tblptrl	equ	0xFF6
 10686                           tablat	equ	0xFF5
 10687                           prodh	equ	0xFF4
 10688                           prodl	equ	0xFF3
 10689                           intcon	equ	0xFF2
 10690                           intcon3	equ	0xFF0
 10691                           postinc0	equ	0xFEE
 10692                           fsr0h	equ	0xFEA
 10693                           fsr0l	equ	0xFE9
 10694                           wreg	equ	0xFE8
 10695                           postdec1	equ	0xFE5
 10696                           fsr1h	equ	0xFE2
 10697                           fsr1l	equ	0xFE1
 10698                           indf2	equ	0xFDF
 10699                           postinc2	equ	0xFDE
 10700                           postdec2	equ	0xFDD
 10701                           fsr2h	equ	0xFDA
 10702                           fsr2l	equ	0xFD9
 10703                           status	equ	0xFD8
 10704                           
 10705 ;; *************** function _servoInterruptService *****************
 10706 ;; Defined at:
 10707 ;;		line 53 in file "servo.c"
 10708 ;; Parameters:    Size  Location     Type
 10709 ;;		None
 10710 ;; Auto vars:     Size  Location     Type
 10711 ;;  i               2   19[COMRAM] int 
 10712 ;;  flags           8   11[COMRAM] int [4]
 10713 ;; Return value:  Size  Location     Type
 10714 ;;                  1    wreg      void 
 10715 ;; Registers used:
 10716 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10717 ;; Tracked objects:
 10718 ;;		On entry : 0/0
 10719 ;;		On exit  : 0/0
 10720 ;;		Unchanged: 0/0
 10721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10723 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10724 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10725 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10726 ;;Total ram usage:       12 bytes
 10727 ;; Hardware stack levels used:    1
 10728 ;; Hardware stack levels required when called:    1
 10729 ;; This function calls:
 10730 ;;		i2_digitalRead
 10731 ;;		i2_digitalWrite
 10732 ;;		i2_startTimer
 10733 ;; This function is called by:
 10734 ;;		_service
 10735 ;; This function uses a non-reentrant model
 10736 ;;
 10737                           
 10738                           	psect	text49
 10739  001576                     __ptext49:
 10740                           	opt stack 0
 10741  001576                     _servoInterruptService:
 10742                           	opt stack 21
 10743                           
 10744                           ;servo.c: 55: int flags[4];
 10745                           ;servo.c: 56: flags[0] = TMR0IF;
 10746                           
 10747                           ;incstack = 0
 10748  001576  A4F2               	btfss	intcon,2,c	;volatile
 10749  001578  D002               	goto	i2u402_40
 10750  00157A  0E01               	movlw	1
 10751  00157C  D001               	goto	i2u403_40
 10752  00157E                     i2u402_40:
 10753  00157E  0E00               	movlw	0
 10754  001580                     i2u403_40:
 10755  001580  6E0C               	movwf	servoInterruptService@flags,c
 10756  001582  6A0D               	clrf	servoInterruptService@flags+1,c
 10757                           
 10758                           ;servo.c: 57: flags[1] = TMR1IF;
 10759  001584  A09E               	btfss	3998,0,c	;volatile
 10760  001586  D002               	goto	i2u404_40
 10761  001588  0E01               	movlw	1
 10762  00158A  D001               	goto	i2u405_40
 10763  00158C                     i2u404_40:
 10764  00158C  0E00               	movlw	0
 10765  00158E                     i2u405_40:
 10766  00158E  6E0E               	movwf	servoInterruptService@flags+2,c
 10767  001590  6A0F               	clrf	servoInterruptService@flags+3,c
 10768                           
 10769                           ;servo.c: 58: flags[2] = TMR2IF;
 10770  001592  A29E               	btfss	3998,1,c	;volatile
 10771  001594  D002               	goto	i2u406_40
 10772  001596  0E01               	movlw	1
 10773  001598  D001               	goto	i2u407_40
 10774  00159A                     i2u406_40:
 10775  00159A  0E00               	movlw	0
 10776  00159C                     i2u407_40:
 10777  00159C  6E10               	movwf	servoInterruptService@flags+4,c
 10778  00159E  6A11               	clrf	servoInterruptService@flags+5,c
 10779                           
 10780                           ;servo.c: 59: flags[3] = TMR3IF;
 10781  0015A0  A2A1               	btfss	4001,1,c	;volatile
 10782  0015A2  D002               	goto	i2u408_40
 10783  0015A4  0E01               	movlw	1
 10784  0015A6  D001               	goto	i2u409_40
 10785  0015A8                     i2u408_40:
 10786  0015A8  0E00               	movlw	0
 10787  0015AA                     i2u409_40:
 10788  0015AA  6E12               	movwf	servoInterruptService@flags+6,c
 10789  0015AC  6A13               	clrf	servoInterruptService@flags+7,c
 10790                           
 10791                           ;servo.c: 61: for(int i = 0; i < 4; i++){
 10792  0015AE  0E00               	movlw	0
 10793  0015B0  6E15               	movwf	servoInterruptService@i+1,c
 10794  0015B2  0E00               	movlw	0
 10795  0015B4  6E14               	movwf	servoInterruptService@i,c
 10796  0015B6  BE15               	btfsc	servoInterruptService@i+1,7,c
 10797  0015B8  D008               	goto	i2l4573
 10798  0015BA  5015               	movf	servoInterruptService@i+1,w,c
 10799  0015BC  E105               	bnz	i2u410_40
 10800  0015BE  0E04               	movlw	4
 10801  0015C0  5C14               	subwf	servoInterruptService@i,w,c
 10802  0015C2  B0D8               	btfsc	status,0,c
 10803  0015C4  0012               	return	
 10804  0015C6  D001               	goto	i2l4573
 10805  0015C8                     i2u410_40:
 10806  0015C8  0012               	return	
 10807  0015CA                     i2l4573:
 10808                           
 10809                           ;servo.c: 62: if(flags[i]){
 10810  0015CA  90D8               	bcf	status,0,c
 10811  0015CC  3414               	rlcf	servoInterruptService@i,w,c
 10812  0015CE  6ED9               	movwf	fsr2l,c
 10813  0015D0  3415               	rlcf	servoInterruptService@i+1,w,c
 10814  0015D2  6EDA               	movwf	fsr2h,c
 10815  0015D4  0E0C               	movlw	low servoInterruptService@flags
 10816  0015D6  26D9               	addwf	fsr2l,f,c
 10817  0015D8  0E00               	movlw	high servoInterruptService@flags
 10818  0015DA  22DA               	addwfc	fsr2h,f,c
 10819  0015DC  50DE               	movf	postinc2,w,c
 10820  0015DE  10DE               	iorwf	postinc2,w,c
 10821  0015E0  B4D8               	btfsc	status,2,c
 10822  0015E2  D08D               	goto	i2l4587
 10823                           
 10824                           ;servo.c: 64: if(digitalRead(servo[i])){
 10825  0015E4  C014  F00A         	movff	servoInterruptService@i,??_servoInterruptService
 10826  0015E8  C015  F00B         	movff	servoInterruptService@i+1,??_servoInterruptService+1
 10827  0015EC  90D8               	bcf	status,0,c
 10828  0015EE  360A               	rlcf	??_servoInterruptService,f,c
 10829  0015F0  360B               	rlcf	??_servoInterruptService+1,f,c
 10830  0015F2  90D8               	bcf	status,0,c
 10831  0015F4  360A               	rlcf	??_servoInterruptService,f,c
 10832  0015F6  360B               	rlcf	??_servoInterruptService+1,f,c
 10833  0015F8  0E3A               	movlw	low _servo
 10834  0015FA  240A               	addwf	??_servoInterruptService,w,c
 10835  0015FC  6E01               	movwf	i2digitalRead@pin,c
 10836  0015FE  0E01               	movlw	high _servo
 10837  001600  200B               	addwfc	??_servoInterruptService+1,w,c
 10838  001602  6E02               	movwf	i2digitalRead@pin+1,c
 10839  001604  ECA6  F010         	call	i2_digitalRead	;wreg free
 10840  001608  5001               	movf	?i2_digitalRead,w,c
 10841  00160A  1002               	iorwf	?i2_digitalRead+1,w,c
 10842  00160C  B4D8               	btfsc	status,2,c
 10843  00160E  D025               	goto	i2l4581
 10844                           
 10845                           ;servo.c: 65: startTimer(i,15535);
 10846  001610  C014  F001         	movff	servoInterruptService@i,i2startTimer@timer
 10847  001614  C015  F002         	movff	servoInterruptService@i+1,i2startTimer@timer+1
 10848  001618  0EAF               	movlw	175
 10849  00161A  6E03               	movwf	i2startTimer@val,c
 10850  00161C  0E3C               	movlw	60
 10851  00161E  6E04               	movwf	i2startTimer@val+1,c
 10852  001620  0E00               	movlw	0
 10853  001622  6E05               	movwf	i2startTimer@val+2,c
 10854  001624  0E00               	movlw	0
 10855  001626  6E06               	movwf	i2startTimer@val+3,c
 10856  001628  EC7E  F015         	call	i2_startTimer	;wreg free
 10857                           
 10858                           ;servo.c: 66: digitalWrite(servo[i],0);
 10859  00162C  C014  F00A         	movff	servoInterruptService@i,??_servoInterruptService
 10860  001630  C015  F00B         	movff	servoInterruptService@i+1,??_servoInterruptService+1
 10861  001634  90D8               	bcf	status,0,c
 10862  001636  360A               	rlcf	??_servoInterruptService,f,c
 10863  001638  360B               	rlcf	??_servoInterruptService+1,f,c
 10864  00163A  90D8               	bcf	status,0,c
 10865  00163C  360A               	rlcf	??_servoInterruptService,f,c
 10866  00163E  360B               	rlcf	??_servoInterruptService+1,f,c
 10867  001640  0E3A               	movlw	low _servo
 10868  001642  240A               	addwf	??_servoInterruptService,w,c
 10869  001644  6E01               	movwf	i2digitalWrite@pin,c
 10870  001646  0E01               	movlw	high _servo
 10871  001648  200B               	addwfc	??_servoInterruptService+1,w,c
 10872  00164A  6E02               	movwf	i2digitalWrite@pin+1,c
 10873  00164C  0E00               	movlw	0
 10874  00164E  6E04               	movwf	i2digitalWrite@val+1,c
 10875  001650  0E00               	movlw	0
 10876  001652  6E03               	movwf	i2digitalWrite@val,c
 10877  001654  EC7B  F011         	call	i2_digitalWrite	;wreg free
 10878                           
 10879                           ;servo.c: 67: }
 10880  001658  D03D               	goto	i2l4585
 10881  00165A                     i2l4581:
 10882                           
 10883                           ;servo.c: 68: else{
 10884                           ;servo.c: 69: startTimer(i, pulse[i]);
 10885  00165A  C014  F001         	movff	servoInterruptService@i,i2startTimer@timer
 10886  00165E  C015  F002         	movff	servoInterruptService@i+1,i2startTimer@timer+1
 10887  001662  0E2A               	movlw	low _pulse
 10888  001664  6E0A               	movwf	??_servoInterruptService& (0+255),c
 10889  001666  0E01               	movlw	high _pulse
 10890  001668  6E0B               	movwf	(??_servoInterruptService+1)& (0+255),c
 10891  00166A  90D8               	bcf	status,0,c
 10892  00166C  3414               	rlcf	servoInterruptService@i,w,c
 10893  00166E  6ED9               	movwf	fsr2l,c
 10894  001670  3415               	rlcf	servoInterruptService@i+1,w,c
 10895  001672  6EDA               	movwf	fsr2h,c
 10896  001674  90D8               	bcf	status,0,c
 10897  001676  36D9               	rlcf	fsr2l,f,c
 10898  001678  36DA               	rlcf	fsr2h,f,c
 10899  00167A  500A               	movf	??_servoInterruptService,w,c
 10900  00167C  26D9               	addwf	fsr2l,f,c
 10901  00167E  500B               	movf	??_servoInterruptService+1,w,c
 10902  001680  22DA               	addwfc	fsr2h,f,c
 10903  001682  CFDE F003          	movff	postinc2,i2startTimer@val
 10904  001686  CFDE F004          	movff	postinc2,i2startTimer@val+1
 10905  00168A  CFDE F005          	movff	postinc2,i2startTimer@val+2
 10906  00168E  CFDE F006          	movff	postinc2,i2startTimer@val+3
 10907  001692  EC7E  F015         	call	i2_startTimer	;wreg free
 10908                           
 10909                           ;servo.c: 70: digitalWrite(servo[i],1);
 10910  001696  C014  F00A         	movff	servoInterruptService@i,??_servoInterruptService
 10911  00169A  C015  F00B         	movff	servoInterruptService@i+1,??_servoInterruptService+1
 10912  00169E  90D8               	bcf	status,0,c
 10913  0016A0  360A               	rlcf	??_servoInterruptService,f,c
 10914  0016A2  360B               	rlcf	??_servoInterruptService+1,f,c
 10915  0016A4  90D8               	bcf	status,0,c
 10916  0016A6  360A               	rlcf	??_servoInterruptService,f,c
 10917  0016A8  360B               	rlcf	??_servoInterruptService+1,f,c
 10918  0016AA  0E3A               	movlw	low _servo
 10919  0016AC  240A               	addwf	??_servoInterruptService,w,c
 10920  0016AE  6E01               	movwf	i2digitalWrite@pin,c
 10921  0016B0  0E01               	movlw	high _servo
 10922  0016B2  200B               	addwfc	??_servoInterruptService+1,w,c
 10923  0016B4  6E02               	movwf	i2digitalWrite@pin+1,c
 10924  0016B6  0E00               	movlw	0
 10925  0016B8  6E04               	movwf	i2digitalWrite@val+1,c
 10926  0016BA  0E01               	movlw	1
 10927  0016BC  6E03               	movwf	i2digitalWrite@val,c
 10928  0016BE  EC7B  F011         	call	i2_digitalWrite	;wreg free
 10929                           
 10930                           ;servo.c: 71: }
 10931                           ;servo.c: 74: switch(i){
 10932  0016C2  D008               	goto	i2l4585
 10933  0016C4                     i2l519:
 10934  0016C4  94F2               	bcf	intcon,2,c	;volatile
 10935  0016C6  D01B               	goto	i2l4587
 10936  0016C8                     i2l521:
 10937  0016C8  909E               	bcf	3998,0,c	;volatile
 10938  0016CA  D019               	goto	i2l4587
 10939  0016CC                     i2l522:
 10940  0016CC  929E               	bcf	3998,1,c	;volatile
 10941  0016CE  D017               	goto	i2l4587
 10942  0016D0                     i2l523:
 10943  0016D0  92A1               	bcf	4001,1,c	;volatile
 10944                           
 10945                           ;servo.c: 79: }
 10946  0016D2  D015               	goto	i2l4587
 10947  0016D4                     i2l4585:
 10948  0016D4  C014  F00A         	movff	servoInterruptService@i,??_servoInterruptService
 10949  0016D8  C015  F00B         	movff	servoInterruptService@i+1,??_servoInterruptService+1
 10950                           
 10951                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10952                           ; Switch size 1, requested type "space"
 10953                           ; Number of cases is 1, Range of values is 0 to 0
 10954                           ; switch strategies available:
 10955                           ; Name         Instructions Cycles
 10956                           ; simple_byte            4     3 (average)
 10957                           ;	Chosen strategy is simple_byte
 10958  0016DC  500B               	movf	??_servoInterruptService+1,w,c
 10959  0016DE  0A00               	xorlw	0	; case 0
 10960  0016E0  A4D8               	btfss	status,2,c
 10961  0016E2  D00D               	goto	i2l4587
 10962                           
 10963                           ; Switch size 1, requested type "space"
 10964                           ; Number of cases is 4, Range of values is 0 to 3
 10965                           ; switch strategies available:
 10966                           ; Name         Instructions Cycles
 10967                           ; simple_byte           13     7 (average)
 10968                           ;	Chosen strategy is simple_byte
 10969  0016E4  500A               	movf	??_servoInterruptService,w,c
 10970  0016E6  0A00               	xorlw	0	; case 0
 10971  0016E8  B4D8               	btfsc	status,2,c
 10972  0016EA  D7EC               	goto	i2l519
 10973  0016EC  0A01               	xorlw	1	; case 1
 10974  0016EE  B4D8               	btfsc	status,2,c
 10975  0016F0  D7EB               	goto	i2l521
 10976  0016F2  0A03               	xorlw	3	; case 2
 10977  0016F4  B4D8               	btfsc	status,2,c
 10978  0016F6  D7EA               	goto	i2l522
 10979  0016F8  0A01               	xorlw	1	; case 3
 10980  0016FA  B4D8               	btfsc	status,2,c
 10981  0016FC  D7E9               	goto	i2l523
 10982  0016FE                     i2l4587:
 10983  0016FE  4A14               	infsnz	servoInterruptService@i,f,c
 10984  001700  2A15               	incf	servoInterruptService@i+1,f,c
 10985  001702  BE15               	btfsc	servoInterruptService@i+1,7,c
 10986  001704  D762               	goto	i2l4573
 10987  001706  5015               	movf	servoInterruptService@i+1,w,c
 10988  001708  E101               	bnz	i2l524
 10989  00170A  D759               	goto	L5
 10990  00170C                     i2l524:
 10991  00170C  0012               	return		;funcret
 10992  00170E                     __end_of_servoInterruptService:
 10993                           	opt stack 0
 10994                           pclatu	equ	0xFFB
 10995                           pclath	equ	0xFFA
 10996                           tblptru	equ	0xFF8
 10997                           tblptrh	equ	0xFF7
 10998                           tblptrl	equ	0xFF6
 10999                           tablat	equ	0xFF5
 11000                           prodh	equ	0xFF4
 11001                           prodl	equ	0xFF3
 11002                           intcon	equ	0xFF2
 11003                           intcon3	equ	0xFF0
 11004                           postinc0	equ	0xFEE
 11005                           fsr0h	equ	0xFEA
 11006                           fsr0l	equ	0xFE9
 11007                           wreg	equ	0xFE8
 11008                           postdec1	equ	0xFE5
 11009                           fsr1h	equ	0xFE2
 11010                           fsr1l	equ	0xFE1
 11011                           indf2	equ	0xFDF
 11012                           postinc2	equ	0xFDE
 11013                           postdec2	equ	0xFDD
 11014                           fsr2h	equ	0xFDA
 11015                           fsr2l	equ	0xFD9
 11016                           status	equ	0xFD8
 11017                           
 11018 ;; *************** function i2_startTimer *****************
 11019 ;; Defined at:
 11020 ;;		line 75 in file "timer.c"
 11021 ;; Parameters:    Size  Location     Type
 11022 ;;  timer           2    0[COMRAM] int 
 11023 ;;  val             4    2[COMRAM] long 
 11024 ;; Auto vars:     Size  Location     Type
 11025 ;;		None
 11026 ;; Return value:  Size  Location     Type
 11027 ;;                  1    wreg      void 
 11028 ;; Registers used:
 11029 ;;		wreg, status,2, status,0
 11030 ;; Tracked objects:
 11031 ;;		On entry : 0/0
 11032 ;;		On exit  : 0/0
 11033 ;;		Unchanged: 0/0
 11034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11035 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11037 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11038 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11039 ;;Total ram usage:        8 bytes
 11040 ;; Hardware stack levels used:    1
 11041 ;; This function calls:
 11042 ;;		Nothing
 11043 ;; This function is called by:
 11044 ;;		_servoInterruptService
 11045 ;; This function uses a non-reentrant model
 11046 ;;
 11047                           
 11048                           	psect	text50
 11049  002AFC                     __ptext50:
 11050                           	opt stack 0
 11051  002AFC                     i2_startTimer:
 11052                           	opt stack 21
 11053                           
 11054                           ;timer.c: 76: switch(timer){
 11055                           
 11056                           ;incstack = 0
 11057  002AFC  D012               	goto	i2l4393
 11058  002AFE                     i2l381:
 11059                           
 11060                           ;timer.c: 78: TMR0H = val>>8;
 11061  002AFE  C004  FFD7         	movff	i2startTimer@val+1,4055	;volatile
 11062                           
 11063                           ;timer.c: 79: TMR0L = val;
 11064  002B02  C003  FFD6         	movff	i2startTimer@val,4054	;volatile
 11065                           
 11066                           ;timer.c: 80: T0CON |= 1<<7;
 11067  002B06  8ED5               	bsf	4053,7,c	;volatile
 11068                           
 11069                           ;timer.c: 81: break;
 11070  002B08  0012               	return	
 11071  002B0A                     i2l383:
 11072                           
 11073                           ;timer.c: 83: TMR1H = val>>8;
 11074  002B0A  C004  FFCF         	movff	i2startTimer@val+1,4047	;volatile
 11075                           
 11076                           ;timer.c: 84: TMR1L = val;
 11077  002B0E  C003  FFCE         	movff	i2startTimer@val,4046	;volatile
 11078                           
 11079                           ;timer.c: 85: T1CON |= 1<<0;
 11080  002B12  80CD               	bsf	4045,0,c	;volatile
 11081                           
 11082                           ;timer.c: 86: break;
 11083  002B14  0012               	return	
 11084  002B16                     i2l384:
 11085                           
 11086                           ;timer.c: 88: TMR3H = val>>8;
 11087  002B16  C004  FFB3         	movff	i2startTimer@val+1,4019	;volatile
 11088                           
 11089                           ;timer.c: 89: TMR3L = val;
 11090  002B1A  C003  FFB2         	movff	i2startTimer@val,4018	;volatile
 11091                           
 11092                           ;timer.c: 90: T3CON |= 1<<0;
 11093  002B1E  80B1               	bsf	4017,0,c	;volatile
 11094                           
 11095                           ;timer.c: 91: }
 11096  002B20  0012               	return	
 11097  002B22                     i2l4393:
 11098  002B22  C001  F007         	movff	i2startTimer@timer,??i2_startTimer
 11099  002B26  C002  F008         	movff	i2startTimer@timer+1,??i2_startTimer+1
 11100                           
 11101                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11102                           ; Switch size 1, requested type "space"
 11103                           ; Number of cases is 1, Range of values is 0 to 0
 11104                           ; switch strategies available:
 11105                           ; Name         Instructions Cycles
 11106                           ; simple_byte            4     3 (average)
 11107                           ;	Chosen strategy is simple_byte
 11108  002B2A  5008               	movf	??i2_startTimer+1,w,c
 11109  002B2C  0A00               	xorlw	0	; case 0
 11110  002B2E  A4D8               	btfss	status,2,c
 11111  002B30  0012               	return	
 11112                           
 11113                           ; Switch size 1, requested type "space"
 11114                           ; Number of cases is 3, Range of values is 0 to 3
 11115                           ; switch strategies available:
 11116                           ; Name         Instructions Cycles
 11117                           ; simple_byte           10     6 (average)
 11118                           ;	Chosen strategy is simple_byte
 11119  002B32  5007               	movf	??i2_startTimer,w,c
 11120  002B34  0A00               	xorlw	0	; case 0
 11121  002B36  B4D8               	btfsc	status,2,c
 11122  002B38  D7E2               	goto	i2l381
 11123  002B3A  0A01               	xorlw	1	; case 1
 11124  002B3C  B4D8               	btfsc	status,2,c
 11125  002B3E  D7E5               	goto	i2l383
 11126  002B40  0A02               	xorlw	2	; case 3
 11127  002B42  A4D8               	btfss	status,2,c
 11128  002B44  0012               	return	
 11129  002B46  D7E7               	goto	i2l384
 11130  002B48                     __end_ofi2_startTimer:
 11131                           	opt stack 0
 11132                           pclatu	equ	0xFFB
 11133                           pclath	equ	0xFFA
 11134                           tblptru	equ	0xFF8
 11135                           tblptrh	equ	0xFF7
 11136                           tblptrl	equ	0xFF6
 11137                           tablat	equ	0xFF5
 11138                           prodh	equ	0xFF4
 11139                           prodl	equ	0xFF3
 11140                           intcon	equ	0xFF2
 11141                           intcon3	equ	0xFF0
 11142                           postinc0	equ	0xFEE
 11143                           fsr0h	equ	0xFEA
 11144                           fsr0l	equ	0xFE9
 11145                           wreg	equ	0xFE8
 11146                           postdec1	equ	0xFE5
 11147                           fsr1h	equ	0xFE2
 11148                           fsr1l	equ	0xFE1
 11149                           indf2	equ	0xFDF
 11150                           postinc2	equ	0xFDE
 11151                           postdec2	equ	0xFDD
 11152                           fsr2h	equ	0xFDA
 11153                           fsr2l	equ	0xFD9
 11154                           status	equ	0xFD8
 11155                           
 11156 ;; *************** function i2_digitalWrite *****************
 11157 ;; Defined at:
 11158 ;;		line 53 in file "iopin.c"
 11159 ;; Parameters:    Size  Location     Type
 11160 ;;  pin             2    0[COMRAM] PTR int 
 11161 ;;		 -> servo(16), AA_float(4), cylinderMotor(4), 
 11162 ;;  val             2    2[COMRAM] int 
 11163 ;; Auto vars:     Size  Location     Type
 11164 ;;  digitalWrite    2    7[COMRAM] int 
 11165 ;; Return value:  Size  Location     Type
 11166 ;;                  1    wreg      void 
 11167 ;; Registers used:
 11168 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11169 ;; Tracked objects:
 11170 ;;		On entry : 0/0
 11171 ;;		On exit  : 0/0
 11172 ;;		Unchanged: 0/0
 11173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11174 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11175 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11176 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11177 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11178 ;;Total ram usage:        9 bytes
 11179 ;; Hardware stack levels used:    1
 11180 ;; This function calls:
 11181 ;;		Nothing
 11182 ;; This function is called by:
 11183 ;;		_servoInterruptService
 11184 ;; This function uses a non-reentrant model
 11185 ;;
 11186                           
 11187                           	psect	text51
 11188  0022F6                     __ptext51:
 11189                           	opt stack 0
 11190  0022F6                     i2_digitalWrite:
 11191                           	opt stack 21
 11192                           
 11193                           ;iopin.c: 54: int p = 1 << pin[1];
 11194                           
 11195                           ;incstack = 0
 11196  0022F6  EE20 F002          	lfsr	2,2
 11197  0022FA  5001               	movf	i2digitalWrite@pin,w,c
 11198  0022FC  26D9               	addwf	fsr2l,f,c
 11199  0022FE  5002               	movf	i2digitalWrite@pin+1,w,c
 11200  002300  22DA               	addwfc	fsr2h,f,c
 11201  002302  50DF               	movf	indf2,w,c
 11202  002304  6E05               	movwf	??i2_digitalWrite& (0+255),c
 11203  002306  0E01               	movlw	1
 11204  002308  6E06               	movwf	(??i2_digitalWrite+1)& (0+255),c
 11205  00230A  0E00               	movlw	0
 11206  00230C  6E07               	movwf	(??i2_digitalWrite+2)& (0+255),c
 11207  00230E  2A05               	incf	??i2_digitalWrite,f,c
 11208  002310  D003               	goto	i2u372_44
 11209  002312                     i2u372_45:
 11210  002312  90D8               	bcf	status,0,c
 11211  002314  3606               	rlcf	??i2_digitalWrite+1,f,c
 11212  002316  3607               	rlcf	??i2_digitalWrite+2,f,c
 11213  002318                     i2u372_44:
 11214  002318  2E05               	decfsz	??i2_digitalWrite,f,c
 11215  00231A  D7FB               	goto	i2u372_45
 11216  00231C  C006  F008         	movff	??i2_digitalWrite+1,i2digitalWrite@p
 11217  002320  C007  F009         	movff	??i2_digitalWrite+2,i2digitalWrite@p+1
 11218                           
 11219                           ;iopin.c: 55: if(val == 0){
 11220  002324  5003               	movf	i2digitalWrite@val,w,c
 11221  002326  1004               	iorwf	i2digitalWrite@val+1,w,c
 11222  002328  A4D8               	btfss	status,2,c
 11223  00232A  D02B               	goto	i2l4379
 11224                           
 11225                           ;iopin.c: 56: p ^= 0xff;
 11226  00232C  0EFF               	movlw	255
 11227  00232E  1A08               	xorwf	i2digitalWrite@p,f,c
 11228                           
 11229                           ;iopin.c: 57: }
 11230                           ;iopin.c: 59: switch(pin[0]){
 11231  002330  D028               	goto	i2l4379
 11232  002332                     i2l4355:
 11233  002332  0403               	decf	i2digitalWrite@val,w,c
 11234  002334  1004               	iorwf	i2digitalWrite@val+1,w,c
 11235  002336  A4D8               	btfss	status,2,c
 11236  002338  D003               	goto	i2l4359
 11237  00233A  5008               	movf	i2digitalWrite@p,w,c
 11238  00233C  1289               	iorwf	3977,f,c	;volatile
 11239  00233E  0012               	return	
 11240  002340                     i2l4359:
 11241                           
 11242                           ;iopin.c: 61: else LATA &= p;
 11243  002340  5008               	movf	i2digitalWrite@p,w,c
 11244  002342  1689               	andwf	3977,f,c	;volatile
 11245                           
 11246                           ;iopin.c: 62: break;
 11247  002344  0012               	return	
 11248  002346                     i2l4361:
 11249  002346  0403               	decf	i2digitalWrite@val,w,c
 11250  002348  1004               	iorwf	i2digitalWrite@val+1,w,c
 11251  00234A  A4D8               	btfss	status,2,c
 11252  00234C  D003               	goto	i2l4365
 11253  00234E  5008               	movf	i2digitalWrite@p,w,c
 11254  002350  128A               	iorwf	3978,f,c	;volatile
 11255  002352  0012               	return	
 11256  002354                     i2l4365:
 11257                           
 11258                           ;iopin.c: 64: else LATB &= p;
 11259  002354  5008               	movf	i2digitalWrite@p,w,c
 11260  002356  168A               	andwf	3978,f,c	;volatile
 11261                           
 11262                           ;iopin.c: 65: break;
 11263  002358  0012               	return	
 11264  00235A                     i2l4367:
 11265  00235A  0403               	decf	i2digitalWrite@val,w,c
 11266  00235C  1004               	iorwf	i2digitalWrite@val+1,w,c
 11267  00235E  A4D8               	btfss	status,2,c
 11268  002360  D003               	goto	i2l4371
 11269  002362  5008               	movf	i2digitalWrite@p,w,c
 11270  002364  128B               	iorwf	3979,f,c	;volatile
 11271  002366  0012               	return	
 11272  002368                     i2l4371:
 11273                           
 11274                           ;iopin.c: 67: else LATC &= p;
 11275  002368  5008               	movf	i2digitalWrite@p,w,c
 11276  00236A  168B               	andwf	3979,f,c	;volatile
 11277                           
 11278                           ;iopin.c: 68: break;
 11279  00236C  0012               	return	
 11280  00236E                     i2l4373:
 11281  00236E  0403               	decf	i2digitalWrite@val,w,c
 11282  002370  1004               	iorwf	i2digitalWrite@val+1,w,c
 11283  002372  A4D8               	btfss	status,2,c
 11284  002374  D003               	goto	i2l4377
 11285  002376  5008               	movf	i2digitalWrite@p,w,c
 11286  002378  128C               	iorwf	3980,f,c	;volatile
 11287  00237A  0012               	return	
 11288  00237C                     i2l4377:
 11289                           
 11290                           ;iopin.c: 70: else LATD &= p;
 11291  00237C  5008               	movf	i2digitalWrite@p,w,c
 11292  00237E  168C               	andwf	3980,f,c	;volatile
 11293                           
 11294                           ;iopin.c: 71: }
 11295  002380  0012               	return	
 11296  002382                     i2l4379:
 11297  002382  C001  FFD9         	movff	i2digitalWrite@pin,fsr2l
 11298  002386  C002  FFDA         	movff	i2digitalWrite@pin+1,fsr2h
 11299  00238A  CFDE F005          	movff	postinc2,??i2_digitalWrite
 11300  00238E  CFDD F006          	movff	postdec2,??i2_digitalWrite+1
 11301                           
 11302                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11303                           ; Switch size 1, requested type "space"
 11304                           ; Number of cases is 1, Range of values is 0 to 0
 11305                           ; switch strategies available:
 11306                           ; Name         Instructions Cycles
 11307                           ; simple_byte            4     3 (average)
 11308                           ;	Chosen strategy is simple_byte
 11309  002392  5006               	movf	??i2_digitalWrite+1,w,c
 11310  002394  0A00               	xorlw	0	; case 0
 11311  002396  A4D8               	btfss	status,2,c
 11312  002398  0012               	return	
 11313                           
 11314                           ; Switch size 1, requested type "space"
 11315                           ; Number of cases is 4, Range of values is 0 to 3
 11316                           ; switch strategies available:
 11317                           ; Name         Instructions Cycles
 11318                           ; simple_byte           13     7 (average)
 11319                           ;	Chosen strategy is simple_byte
 11320  00239A  5005               	movf	??i2_digitalWrite,w,c
 11321  00239C  0A00               	xorlw	0	; case 0
 11322  00239E  B4D8               	btfsc	status,2,c
 11323  0023A0  D7C8               	goto	i2l4355
 11324  0023A2  0A01               	xorlw	1	; case 1
 11325  0023A4  B4D8               	btfsc	status,2,c
 11326  0023A6  D7CF               	goto	i2l4361
 11327  0023A8  0A03               	xorlw	3	; case 2
 11328  0023AA  B4D8               	btfsc	status,2,c
 11329  0023AC  D7D6               	goto	i2l4367
 11330  0023AE  0A01               	xorlw	1	; case 3
 11331  0023B0  A4D8               	btfss	status,2,c
 11332  0023B2  0012               	return	
 11333  0023B4  D7DC               	goto	i2l4373
 11334  0023B6                     __end_ofi2_digitalWrite:
 11335                           	opt stack 0
 11336                           pclatu	equ	0xFFB
 11337                           pclath	equ	0xFFA
 11338                           tblptru	equ	0xFF8
 11339                           tblptrh	equ	0xFF7
 11340                           tblptrl	equ	0xFF6
 11341                           tablat	equ	0xFF5
 11342                           prodh	equ	0xFF4
 11343                           prodl	equ	0xFF3
 11344                           intcon	equ	0xFF2
 11345                           intcon3	equ	0xFF0
 11346                           postinc0	equ	0xFEE
 11347                           fsr0h	equ	0xFEA
 11348                           fsr0l	equ	0xFE9
 11349                           wreg	equ	0xFE8
 11350                           postdec1	equ	0xFE5
 11351                           fsr1h	equ	0xFE2
 11352                           fsr1l	equ	0xFE1
 11353                           indf2	equ	0xFDF
 11354                           postinc2	equ	0xFDE
 11355                           postdec2	equ	0xFDD
 11356                           fsr2h	equ	0xFDA
 11357                           fsr2l	equ	0xFD9
 11358                           status	equ	0xFD8
 11359                           
 11360 ;; *************** function i2_digitalRead *****************
 11361 ;; Defined at:
 11362 ;;		line 43 in file "iopin.c"
 11363 ;; Parameters:    Size  Location     Type
 11364 ;;  pin             2    0[COMRAM] PTR int 
 11365 ;;		 -> servo(16), padPin2(4), padPin1(4), 
 11366 ;; Auto vars:     Size  Location     Type
 11367 ;;		None
 11368 ;; Return value:  Size  Location     Type
 11369 ;;                  2    0[COMRAM] int 
 11370 ;; Registers used:
 11371 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11372 ;; Tracked objects:
 11373 ;;		On entry : 0/0
 11374 ;;		On exit  : 0/0
 11375 ;;		Unchanged: 0/0
 11376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11377 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11379 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11380 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11381 ;;Total ram usage:        4 bytes
 11382 ;; Hardware stack levels used:    1
 11383 ;; This function calls:
 11384 ;;		Nothing
 11385 ;; This function is called by:
 11386 ;;		_servoInterruptService
 11387 ;; This function uses a non-reentrant model
 11388 ;;
 11389                           
 11390                           	psect	text52
 11391  00214C                     __ptext52:
 11392                           	opt stack 0
 11393  00214C                     i2_digitalRead:
 11394                           	opt stack 21
 11395                           
 11396                           ;iopin.c: 44: switch(pin[0]){
 11397                           
 11398                           ;incstack = 0
 11399  00214C  D058               	goto	i2l4343
 11400  00214E                     i2l4325:
 11401  00214E  EE20 F002          	lfsr	2,2
 11402  002152  5001               	movf	i2digitalRead@pin,w,c
 11403  002154  26D9               	addwf	fsr2l,f,c
 11404  002156  5002               	movf	i2digitalRead@pin+1,w,c
 11405  002158  22DA               	addwfc	fsr2h,f,c
 11406  00215A  50DF               	movf	indf2,w,c
 11407  00215C  6E03               	movwf	??i2_digitalRead& (0+255),c
 11408  00215E  CF80 F004          	movff	3968,??i2_digitalRead+1	;volatile
 11409  002162  2A03               	incf	??i2_digitalRead,f,c
 11410  002164  D002               	goto	i2u368_44
 11411  002166                     i2u368_45:
 11412  002166  90D8               	bcf	status,0,c
 11413  002168  3204               	rrcf	??i2_digitalRead+1,f,c
 11414  00216A                     i2u368_44:
 11415  00216A  2E03               	decfsz	??i2_digitalRead,f,c
 11416  00216C  D7FC               	goto	i2u368_45
 11417  00216E  0E01               	movlw	1
 11418  002170  1604               	andwf	??i2_digitalRead+1,f,c
 11419  002172  5004               	movf	??i2_digitalRead+1,w,c
 11420  002174  6E01               	movwf	?i2_digitalRead,c
 11421  002176  6A02               	clrf	?i2_digitalRead+1,c
 11422  002178  0012               	return	
 11423  00217A                     i2l4329:
 11424  00217A  EE20 F002          	lfsr	2,2
 11425  00217E  5001               	movf	i2digitalRead@pin,w,c
 11426  002180  26D9               	addwf	fsr2l,f,c
 11427  002182  5002               	movf	i2digitalRead@pin+1,w,c
 11428  002184  22DA               	addwfc	fsr2h,f,c
 11429  002186  50DF               	movf	indf2,w,c
 11430  002188  6E03               	movwf	??i2_digitalRead& (0+255),c
 11431  00218A  CF81 F004          	movff	3969,??i2_digitalRead+1	;volatile
 11432  00218E  2A03               	incf	??i2_digitalRead,f,c
 11433  002190  D002               	goto	i2u369_44
 11434  002192                     i2u369_45:
 11435  002192  90D8               	bcf	status,0,c
 11436  002194  3204               	rrcf	??i2_digitalRead+1,f,c
 11437  002196                     i2u369_44:
 11438  002196  2E03               	decfsz	??i2_digitalRead,f,c
 11439  002198  D7FC               	goto	i2u369_45
 11440  00219A  0E01               	movlw	1
 11441  00219C  1604               	andwf	??i2_digitalRead+1,f,c
 11442  00219E  5004               	movf	??i2_digitalRead+1,w,c
 11443  0021A0  6E01               	movwf	?i2_digitalRead,c
 11444  0021A2  6A02               	clrf	?i2_digitalRead+1,c
 11445  0021A4  0012               	return	
 11446  0021A6                     i2l4333:
 11447  0021A6  EE20 F002          	lfsr	2,2
 11448  0021AA  5001               	movf	i2digitalRead@pin,w,c
 11449  0021AC  26D9               	addwf	fsr2l,f,c
 11450  0021AE  5002               	movf	i2digitalRead@pin+1,w,c
 11451  0021B0  22DA               	addwfc	fsr2h,f,c
 11452  0021B2  50DF               	movf	indf2,w,c
 11453  0021B4  6E03               	movwf	??i2_digitalRead& (0+255),c
 11454  0021B6  CF82 F004          	movff	3970,??i2_digitalRead+1	;volatile
 11455  0021BA  2A03               	incf	??i2_digitalRead,f,c
 11456  0021BC  D002               	goto	i2u370_44
 11457  0021BE                     i2u370_45:
 11458  0021BE  90D8               	bcf	status,0,c
 11459  0021C0  3204               	rrcf	??i2_digitalRead+1,f,c
 11460  0021C2                     i2u370_44:
 11461  0021C2  2E03               	decfsz	??i2_digitalRead,f,c
 11462  0021C4  D7FC               	goto	i2u370_45
 11463  0021C6  0E01               	movlw	1
 11464  0021C8  1604               	andwf	??i2_digitalRead+1,f,c
 11465  0021CA  5004               	movf	??i2_digitalRead+1,w,c
 11466  0021CC  6E01               	movwf	?i2_digitalRead,c
 11467  0021CE  6A02               	clrf	?i2_digitalRead+1,c
 11468  0021D0  0012               	return	
 11469  0021D2                     i2l4337:
 11470  0021D2  EE20 F002          	lfsr	2,2
 11471  0021D6  5001               	movf	i2digitalRead@pin,w,c
 11472  0021D8  26D9               	addwf	fsr2l,f,c
 11473  0021DA  5002               	movf	i2digitalRead@pin+1,w,c
 11474  0021DC  22DA               	addwfc	fsr2h,f,c
 11475  0021DE  50DF               	movf	indf2,w,c
 11476  0021E0  6E03               	movwf	??i2_digitalRead& (0+255),c
 11477  0021E2  CF83 F004          	movff	3971,??i2_digitalRead+1	;volatile
 11478  0021E6  2A03               	incf	??i2_digitalRead,f,c
 11479  0021E8  D002               	goto	i2u371_44
 11480  0021EA                     i2u371_45:
 11481  0021EA  90D8               	bcf	status,0,c
 11482  0021EC  3204               	rrcf	??i2_digitalRead+1,f,c
 11483  0021EE                     i2u371_44:
 11484  0021EE  2E03               	decfsz	??i2_digitalRead,f,c
 11485  0021F0  D7FC               	goto	i2u371_45
 11486  0021F2  0E01               	movlw	1
 11487  0021F4  1604               	andwf	??i2_digitalRead+1,f,c
 11488  0021F6  5004               	movf	??i2_digitalRead+1,w,c
 11489  0021F8  6E01               	movwf	?i2_digitalRead,c
 11490  0021FA  6A02               	clrf	?i2_digitalRead+1,c
 11491  0021FC  0012               	return	
 11492  0021FE                     i2l4343:
 11493  0021FE  C001  FFD9         	movff	i2digitalRead@pin,fsr2l
 11494  002202  C002  FFDA         	movff	i2digitalRead@pin+1,fsr2h
 11495  002206  CFDE F003          	movff	postinc2,??i2_digitalRead
 11496  00220A  CFDD F004          	movff	postdec2,??i2_digitalRead+1
 11497                           
 11498                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11499                           ; Switch size 1, requested type "space"
 11500                           ; Number of cases is 1, Range of values is 0 to 0
 11501                           ; switch strategies available:
 11502                           ; Name         Instructions Cycles
 11503                           ; simple_byte            4     3 (average)
 11504                           ;	Chosen strategy is simple_byte
 11505  00220E  5004               	movf	??i2_digitalRead+1,w,c
 11506  002210  0A00               	xorlw	0	; case 0
 11507  002212  A4D8               	btfss	status,2,c
 11508  002214  D00D               	goto	i2l276
 11509                           
 11510                           ; Switch size 1, requested type "space"
 11511                           ; Number of cases is 4, Range of values is 0 to 3
 11512                           ; switch strategies available:
 11513                           ; Name         Instructions Cycles
 11514                           ; simple_byte           13     7 (average)
 11515                           ;	Chosen strategy is simple_byte
 11516  002216  5003               	movf	??i2_digitalRead,w,c
 11517  002218  0A00               	xorlw	0	; case 0
 11518  00221A  B4D8               	btfsc	status,2,c
 11519  00221C  D798               	goto	i2l4325
 11520  00221E  0A01               	xorlw	1	; case 1
 11521  002220  B4D8               	btfsc	status,2,c
 11522  002222  D7AB               	goto	i2l4329
 11523  002224  0A03               	xorlw	3	; case 2
 11524  002226  B4D8               	btfsc	status,2,c
 11525  002228  D7BE               	goto	i2l4333
 11526  00222A  0A01               	xorlw	1	; case 3
 11527  00222C  B4D8               	btfsc	status,2,c
 11528  00222E  D7D1               	goto	i2l4337
 11529  002230                     i2l276:
 11530                           
 11531                           ;iopin.c: 50: return -1;
 11532  002230  6801               	setf	?i2_digitalRead,c
 11533  002232  6802               	setf	?i2_digitalRead+1,c
 11534  002234  0012               	return		;funcret
 11535  002236                     __end_ofi2_digitalRead:
 11536                           	opt stack 0
 11537                           pclatu	equ	0xFFB
 11538                           pclath	equ	0xFFA
 11539                           tblptru	equ	0xFF8
 11540                           tblptrh	equ	0xFF7
 11541                           tblptrl	equ	0xFF6
 11542                           tablat	equ	0xFF5
 11543                           prodh	equ	0xFF4
 11544                           prodl	equ	0xFF3
 11545                           intcon	equ	0xFF2
 11546                           intcon3	equ	0xFF0
 11547                           postinc0	equ	0xFEE
 11548                           fsr0h	equ	0xFEA
 11549                           fsr0l	equ	0xFE9
 11550                           wreg	equ	0xFE8
 11551                           postdec1	equ	0xFE5
 11552                           fsr1h	equ	0xFE2
 11553                           fsr1l	equ	0xFE1
 11554                           indf2	equ	0xFDF
 11555                           postinc2	equ	0xFDE
 11556                           postdec2	equ	0xFDD
 11557                           fsr2h	equ	0xFDA
 11558                           fsr2l	equ	0xFD9
 11559                           status	equ	0xFD8
 11560                           
 11561 ;; *************** function _keyPressedInterruptService *****************
 11562 ;; Defined at:
 11563 ;;		line 49 in file "keypad.c"
 11564 ;; Parameters:    Size  Location     Type
 11565 ;;		None
 11566 ;; Auto vars:     Size  Location     Type
 11567 ;;  key             1    0[COMRAM] unsigned char 
 11568 ;; Return value:  Size  Location     Type
 11569 ;;                  1    wreg      void 
 11570 ;; Registers used:
 11571 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 11572 ;; Tracked objects:
 11573 ;;		On entry : 0/0
 11574 ;;		On exit  : 0/0
 11575 ;;		Unchanged: 0/0
 11576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11578 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11580 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11581 ;;Total ram usage:        1 bytes
 11582 ;; Hardware stack levels used:    1
 11583 ;; This function calls:
 11584 ;;		Nothing
 11585 ;; This function is called by:
 11586 ;;		_service
 11587 ;; This function uses a non-reentrant model
 11588 ;;
 11589                           
 11590                           	psect	text53
 11591  002E6E                     __ptext53:
 11592                           	opt stack 0
 11593  002E6E                     _keyPressedInterruptService:
 11594                           	opt stack 22
 11595                           
 11596                           ;keypad.c: 50: char key = (PORTB & 0xF0) >> 4;
 11597                           
 11598                           ;incstack = 0
 11599  002E6E  3881               	swapf	3969,w,c	;volatile
 11600  002E70  0B0F               	andlw	15
 11601  002E72  0B0F               	andlw	15
 11602  002E74  6E01               	movwf	keyPressedInterruptService@key,c
 11603                           
 11604                           ;keypad.c: 51: lastKey = keys[key];
 11605  002E76  5001               	movf	keyPressedInterruptService@key,w,c
 11606  002E78  0D01               	mullw	1
 11607  002E7A  0E63               	movlw	low _keys
 11608  002E7C  24F3               	addwf	prodl,w,c
 11609  002E7E  6EF6               	movwf	tblptrl,c
 11610  002E80  0EFE               	movlw	high _keys
 11611  002E82  20F4               	addwfc	prodh,w,c
 11612  002E84  6EF7               	movwf	tblptrh,c
 11613  002E86                     	if	0	;There are less than 3 active tblptr bytes
 11614  002E86                     	endif
 11615  002E86  0008               	tblrd		*
 11616  002E88  CFF5 F05B          	movff	tablat,_lastKey
 11617  002E8C  0012               	return		;funcret
 11618  002E8E                     __end_of_keyPressedInterruptService:
 11619                           	opt stack 0
 11620                           pclatu	equ	0xFFB
 11621                           pclath	equ	0xFFA
 11622                           tblptru	equ	0xFF8
 11623                           tblptrh	equ	0xFF7
 11624                           tblptrl	equ	0xFF6
 11625                           tablat	equ	0xFF5
 11626                           prodh	equ	0xFF4
 11627                           prodl	equ	0xFF3
 11628                           intcon	equ	0xFF2
 11629                           intcon3	equ	0xFF0
 11630                           postinc0	equ	0xFEE
 11631                           fsr0h	equ	0xFEA
 11632                           fsr0l	equ	0xFE9
 11633                           wreg	equ	0xFE8
 11634                           postdec1	equ	0xFE5
 11635                           fsr1h	equ	0xFE2
 11636                           fsr1l	equ	0xFE1
 11637                           indf2	equ	0xFDF
 11638                           postinc2	equ	0xFDE
 11639                           postdec2	equ	0xFDD
 11640                           fsr2h	equ	0xFDA
 11641                           fsr2l	equ	0xFD9
 11642                           status	equ	0xFD8
 11643                           pclatu	equ	0xFFB
 11644                           pclath	equ	0xFFA
 11645                           tblptru	equ	0xFF8
 11646                           tblptrh	equ	0xFF7
 11647                           tblptrl	equ	0xFF6
 11648                           tablat	equ	0xFF5
 11649                           prodh	equ	0xFF4
 11650                           prodl	equ	0xFF3
 11651                           intcon	equ	0xFF2
 11652                           intcon3	equ	0xFF0
 11653                           postinc0	equ	0xFEE
 11654                           fsr0h	equ	0xFEA
 11655                           fsr0l	equ	0xFE9
 11656                           wreg	equ	0xFE8
 11657                           postdec1	equ	0xFE5
 11658                           fsr1h	equ	0xFE2
 11659                           fsr1l	equ	0xFE1
 11660                           indf2	equ	0xFDF
 11661                           postinc2	equ	0xFDE
 11662                           postdec2	equ	0xFDD
 11663                           fsr2h	equ	0xFDA
 11664                           fsr2l	equ	0xFD9
 11665                           status	equ	0xFD8
 11666                           
 11667                           	psect	rparam
 11668  0000                     pclatu	equ	0xFFB
 11669                           pclath	equ	0xFFA
 11670                           tblptru	equ	0xFF8
 11671                           tblptrh	equ	0xFF7
 11672                           tblptrl	equ	0xFF6
 11673                           tablat	equ	0xFF5
 11674                           prodh	equ	0xFF4
 11675                           prodl	equ	0xFF3
 11676                           intcon	equ	0xFF2
 11677                           intcon3	equ	0xFF0
 11678                           postinc0	equ	0xFEE
 11679                           fsr0h	equ	0xFEA
 11680                           fsr0l	equ	0xFE9
 11681                           wreg	equ	0xFE8
 11682                           postdec1	equ	0xFE5
 11683                           fsr1h	equ	0xFE2
 11684                           fsr1l	equ	0xFE1
 11685                           indf2	equ	0xFDF
 11686                           postinc2	equ	0xFDE
 11687                           postdec2	equ	0xFDD
 11688                           fsr2h	equ	0xFDA
 11689                           fsr2l	equ	0xFD9
 11690                           status	equ	0xFD8
 11691                           
 11692                           	psect	temp
 11693  00005C                     btemp:
 11694                           	opt stack 0
 11695  00005C                     	ds	1
 11696  0000                     int$flags	set	btemp
 11697                           pclatu	equ	0xFFB
 11698                           pclath	equ	0xFFA
 11699                           tblptru	equ	0xFF8
 11700                           tblptrh	equ	0xFF7
 11701                           tblptrl	equ	0xFF6
 11702                           tablat	equ	0xFF5
 11703                           prodh	equ	0xFF4
 11704                           prodl	equ	0xFF3
 11705                           intcon	equ	0xFF2
 11706                           intcon3	equ	0xFF0
 11707                           postinc0	equ	0xFEE
 11708                           fsr0h	equ	0xFEA
 11709                           fsr0l	equ	0xFE9
 11710                           wreg	equ	0xFE8
 11711                           postdec1	equ	0xFE5
 11712                           fsr1h	equ	0xFE2
 11713                           fsr1l	equ	0xFE1
 11714                           indf2	equ	0xFDF
 11715                           postinc2	equ	0xFDE
 11716                           postdec2	equ	0xFDD
 11717                           fsr2h	equ	0xFDA
 11718                           fsr2l	equ	0xFD9
 11719                           status	equ	0xFD8


Data Sizes:
    Strings     388
    Constant    174
    Data        48
    BSS         52
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     60      91
    BANK0           128     96     127
    BANK1           256     42      80
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_22(CODE[17]), STR_21(CODE[18]), STR_20(CODE[17]), STR_19(CODE[18]), 
		 -> STR_18(CODE[17]), STR_17(CODE[19]), STR_16(CODE[17]), STR_15(CODE[18]), 
		 -> STR_14(CODE[17]), STR_13(CODE[18]), STR_12(CODE[17]), STR_11(CODE[18]), 
		 -> STR_10(CODE[9]), STR_9(CODE[8]), STR_8(CODE[25]), STR_7(CODE[15]), 
		 -> STR_6(CODE[17]), STR_5(CODE[20]), STR_4(CODE[24]), STR_3(CODE[14]), 
		 -> STR_2(CODE[20]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 

    setAngle@motor	PTR int  size(2) Largest target is 6
		 -> initServo@timer(BANK1[2]), redirectingServo(BANK1[6]), padServo(COMRAM[6]), 

    initServo@motor	PTR int  size(2) Largest target is 6
		 -> redirectingServo(BANK1[6]), padServo(COMRAM[6]), conveyorServo(COMRAM[6]), 

    digitalWrite@pin	PTR int  size(2) Largest target is 16
		 -> servo(BANK1[16]), AA_float(BANK0[4]), cylinderMotor(BANK0[4]), 

    digitalRead@pin	PTR int  size(2) Largest target is 16
		 -> servo(BANK1[16]), padPin2(COMRAM[4]), padPin1(COMRAM[4]), 

    pause@message	PTR unsigned char  size(2) Largest target is 25
		 -> STR_8(CODE[25]), STR_7(CODE[15]), STR_6(CODE[17]), STR_5(CODE[20]), 
		 -> STR_3(CODE[14]), STR_2(CODE[20]), 


Critical Paths under _main in COMRAM

    _sortBattery->___ftdiv
    _angleToPulse->___ftdiv
    ___ftdiv->___altoft
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _showInterface->_runMenu
    _lcdNewline->_lcdInst
    ___wmul->___awdiv
    ___ftmul->___ftdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftdiv
    ___ftadd->___ftdiv
    _lcdClear->_lcdInst
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _service in COMRAM

    _service->_servoInterruptService
    _servoInterruptService->i2_digitalWrite

Critical Paths under _main in BANK0

    _main->_initServo
    _sortBattery->_initServo
    _pause->_printf
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    _runTime->_printf
    _runStats->_printf
    _runSelect->_printf
    _runMenu->_printf
    _mainMenu->_printf
    _dateTime->_printf
    _printf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___ftdiv
    ___fttol->___ftadd
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sortBattery
    _sortBattery->_printf
    _pause->_printf
    _runTime->_printf
    _runStats->_printf
    _runSelect->_printf
    _runMenu->_printf
    _mainMenu->_printf
    _dateTime->_printf

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  615997
                       _digitalWrite
                            _initLCD
                          _initServo
                           _lcdClear
                           _pinSetup
                             _printf
                      _showInterface
                        _sortBattery
 ---------------------------------------------------------------------------------
 (1) _sortBattery                                         18    18      0  179909
                                             24 BANK1     18    18      0
                           ___altoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                         _analogRead
                        _digitalRead
                       _digitalWrite
                          _initServo
                           _lcdClear
                              _pause
                             _printf
                         _readKeypad
                           _setAngle
                          _stopServo
 ---------------------------------------------------------------------------------
 (2) _stopServo                                            4     2      2     108
                                             35 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _pause                                                2     0      2   59108
                                             74 BANK0      2     0      2
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _initServo                                           12     8      4   23754
                                             94 BANK0      2     2      0
                                              0 BANK1     10     6      4
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (3) _startTimer                                           8     2      6     693
                                             35 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            10     6      4   21907
                                             84 BANK0     10     6      4
                       _angleToPulse
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        23    19      4   21075
                                             61 BANK0     23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3734
                                             53 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2794
                                             43 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    3250
                                             43 COMRAM    10     6      4
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (3) _initTimer                                            4     2      2     185
                                             35 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                         9     5      4    1409
                                             35 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _digitalRead                                          4     2      2     351
                                             35 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           6     2      4     185
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _showInterface                                        1     1      0  352149
                                             74 BANK0      1     1      0
                           _dateTime
                           _mainMenu
                         _readKeypad
                            _runMenu
                          _runSelect
                           _runStats
                            _runTime
 ---------------------------------------------------------------------------------
 (2) _runTime                                              0     0      0   58581
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runStats                                             0     0      0   58581
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runSelect                                            0     0      0   58581
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runMenu                                              1     1      0   58612
                                             59 COMRAM     1     1      0
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _readKeypad                                           1     1      0      34
                                             35 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _mainMenu                                             0     0      0   58581
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _dateTime                                             0     0      0   58581
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              45    38      7   58386
                                             61 BANK0     13     6      7
                                              0 BANK1     24    24      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   13001
                                             24 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     421
                                             39 COMRAM     1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   12722
                                             24 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2696
                                             49 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5804
                                              9 BANK0     15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1819
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1985
                                             41 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     608
                                             35 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     827
                                             35 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2763
                                             43 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     848
                                             48 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1011
                                             35 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     679
                                             46 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4903
                                             46 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4539
                                             34 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2584
                                             35 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     142
                                             35 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1276
                                             35 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) _lcdClear                                             0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             39 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     195
                                             37 COMRAM     2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                             35 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _service                                             14    14      0    1171
                                             21 COMRAM    14    14      0
         _keyPressedInterruptService
              _servoInterruptService
 ---------------------------------------------------------------------------------
 (9) _servoInterruptService                               12    12      0    1148
                                              9 COMRAM    12    12      0
                      i2_digitalRead
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (10) i2_startTimer                                        8     2      6     258
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (10) i2_digitalWrite                                      9     5      4     436
                                              0 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (10) i2_digitalRead                                       4     2      2     136
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) _keyPressedInterruptService                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _digitalWrite
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _startTimer
   _lcdClear
     _lcdInst
       _lcdNibble
   _pinSetup
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _putch
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _showInterface
     _dateTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _mainMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _readKeypad
     _runMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _runSelect
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _runStats
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _runTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _sortBattery
     ___altoft
       ___ftpack
       _analogRead (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftge
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     _analogRead
     _digitalRead
     _digitalWrite
     _initServo
       _initTimer
       _setAngle
         _angleToPulse
           ___altoft
             ___ftpack
             _analogRead (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___fttol
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                       _analogRead (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _analogRead (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _analogRead (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       _startTimer
     _lcdClear
       _lcdInst
         _lcdNibble
     _pause
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _putch
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _stopServo

 _service (ROOT)
   _keyPressedInterruptService
   _servoInterruptService
     i2_digitalRead
     i2_digitalWrite
     i2_startTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     2A      50       7       31.3%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     60      7F       5       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3C      5B       1       72.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     12A      34        0.0%
DATA                 0      0     12A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Mar 18 22:07:28 2017

                       ___altoft@exp 0034                        ___altoft@sign 0035  
                        _sortBattery 0D54                         ___awdiv@sign 002F  
                ___wmul@multiplicand 0034                          __CFG_BORV$3 000000  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                        __CFG_OSC$HS 000000                     _redirectingServo 014A  
                       ___ftadd@exp1 00AD                         ___ftadd@exp2 00AC  
                       ___ftadd@sign 00AB                                  l203 2D6E  
                                l300 2CA0                                  l133 0FD4  
                                l206 2D7A                                  l167 2E3A  
                                l276 2146                                  l381 2A66  
                                l710 0526                                  l374 2BCE  
                                l383 2A72                                  l384 2A7E  
                                l682 06A4                      ??_showInterface 003D  
                                l951 1D50                                  l983 2444  
                       __CFG_CPB$OFF 000000                                  _PEN 007E2A  
                       __CFG_CPD$OFF 000000                                  _SEN 007E28  
                       ___awmod@sign 0029                                  wreg 000FE8  
                       __CFG_LVP$OFF 000000                         ___ftdiv@cntr 0083  
                       ___ftdiv@sign 0088                         __CFG_WDT$OFF 000000  
                               l1010 1150                                 l1012 1178  
                               l1021 124E                                 l1030 1278  
                               l1006 1116                                 l1041 1E3E  
                               l1125 2842                                 l1135 2990  
                               l1055 1C28                                 l1080 2E1C  
                               l1048 1B9A                                 l1049 1BC2  
                               l5021 11DE                                 l5005 116E  
                               l5023 11EC                                 l5015 11B0  
                               l5041 12A2                                 l5033 1234  
                               l5025 11FA                                 l5201 28E0  
                               l5113 1782                                 l6001 1EAA  
                               l5051 12F0                                 l5035 1242  
                               l5027 1206                                 l5211 2902  
                               l5131 17EE                                 l5107 1748  
                               l5213 2906                                 l5221 2924  
                               l5205 28EC                                 l5141 182C  
                               l6021 1EFC                                 l6005 1EB8  
                               l5061 1D94                                 l5127 17D0  
                               l6031 1F2A                                 l6023 1F04  
                               l5225 2932                                 l5217 291A  
                               l5209 28FA                                 l5137 180E  
                               l5321 152E                                 l5313 1466  
                               l6017 1EF2                                 l6105 0FDE  
                               l5171 2790                                 l5163 2772  
                               l6043 1F54                                 l6035 1F3A  
                               l5067 1DC6                                 l6107 1006  
                               l5501 274A                                 l5405 1BEE  
                               l5181 27B0                                 l5173 2794  
                               l5157 2762                                 l5341 0B2A  
                               l6045 1F60                                 l5237 2C70  
                               l6141 24D0                                 l5247 19FE  
                               l5431 1C76                                 l5415 1C16  
                               l5335 0A80                                 l6039 1F4A  
                               l5087 1E14                                 l6143 24E4  
                               l5265 1A90                                 l5425 1C58  
                               l5417 1C22                                 l5409 1BFE  
                               l5169 2788                                 l5185 27BA  
                               l5353 0C84                                 l5345 0B50  
                               l5283 1AF6                                 l5275 1AC0  
                               l5515 27F4                                 l5611 01BA  
                               l6083 0EB8                                 l5277 1AD0  
                               l5269 1AA4                                 l5517 2800  
                               l5453 1CE8                                 l5445 1CB8  
                               l5189 27C8                                 l5279 1ADA  
                               l5527 2834                                 l5519 2804  
                               l5543 2982                                 l5535 294E  
                               l5551 2A1A                                 l5375 1B60  
                               l5359 0D2E                                 l5711 0696  
                               l5623 0248                                 l6095 0F80  
                               l5537 295A                                 l5465 1D16  
                               l5369 1B34                                 l5705 067A  
                               l5625 025E                                 l5561 0022  
                               l5491 26EE                                 l5483 2AD2  
                               l5539 295E                                 l5475 1D3E  
                               l5723 06F0                                 l5707 0688  
                               l5635 02EE                                 l5627 028E  
                               l5619 0222                                 l5571 0050  
                               l5803 2BA2                                 l6099 0FAA  
                               l4941 2412                                 l4933 23D4  
                               l5549 2A0E                                 l5477 1D4A  
                               l5469 1D26                                 l5741 0766  
                               l5653 03D8                                 l5629 02A4  
                               l5581 00B2                                 l5565 0038  
                               l5495 271E                                 l4943 2430  
                               l4935 23DE                                 l5743 076C  
                               l5727 071A                                 l5671 044C  
                               l5655 03DE                                 l5639 0314  
                               l5575 0068                                 l5567 0044  
                               l5911 20BC                                 l5903 2064  
                               l5823 2A8A                                 l4945 243A  
                               l4937 23FC                                 l4929 23C6  
                               l5729 0720                                 l5649 0372  
                               l5569 004A                                 l5921 2114  
                               l5841 2286                                 l5809 2BAA  
                               l5763 07EA                                 l5683 04F4  
                               l5667 0424                                 l5595 010C  
                               l5579 0074                                 l5915 20E8  
                               l5907 2090                                 l5851 22A8  
                               l5835 2272                                 l5765 07FA  
                               l5773 08EE                                 l5757 07B2  
                               l5685 0508                                 l5677 04D8  
                               l5853 22AE                                 l5845 2294  
                               l5767 087A                                 l5775 0900  
                               l5759 07C4                                 l5695 054E  
                               l5679 04E6                                 l5847 229A  
                               l5839 2280                                 l4993 1124  
                               l5777 0908                                 l5689 052A  
                               l5857 22BC                                 l5793 2B90  
                               l4977 2876                                 l5881 2B50  
                               l5699 05A0                                 l5779 091E  
                               l5859 22C2                                 l4979 2882  
                               l5883 2B56                                 l5885 2B5C  
                               l4999 115E                                 l5991 1E80  
                               l5799 2B9A                                 l5879 2B4A  
                               l5993 1E84                                 l5889 2B62  
                               l5987 1E72                                 l5989 1E76  
                               _EEIF 007D0C                                 STR_1 FFF7  
                               STR_2 FEC0                                 STR_3 FFD8  
                               STR_4 FE94                                 STR_5 FEAC  
                               STR_6 FFB8                                 STR_7 FFC9  
                               STR_8 FE7B                                 STR_9 FFEF  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               _LATE 000F8D                                 u4321 10C4  
                               u4331 10E2                         printf@tmpval 010C  
                               u6007 2E3E                                 u6017 2BDA  
                               u4601 175E                                 u5410 051E  
                               u5250 0152                                 u6027 2C0E  
                               u4531 1D76                                 _PEIE 007F96  
                               u6037 2E52                                 u6047 2E64  
                               u5255 0146                                 u4551 1DA8  
                               u6057 29BA                                 u6067 29C8  
                               _RCEN 007E2B                                 u6077 29EE  
                               u4581 1724                                 u6087 29FC  
                               u4771 19DA                                 u4931 1B18  
                               u5644 2080                                 u5645 207C  
                               u4790 1A24                                 u5654 20AC  
                               u4951 1B44                                 u5655 20A8  
                               u5664 20D8                                 u5584 2258  
                               u5665 20D4                                 u5585 2252  
                               u5674 2104                                 u4795 1A1A  
                               u5675 2100                                 u5997 0ED4  
                               _RSEN 007E29                                 _main 2464  
                       ___ftpack@arg 0024                                 _keys FE63  
                       ___ftpack@exp 0027                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr2h 000FDA  
                               fsr0l 000FE9                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 005C                                 prodh 000FF4  
                               prodl 000FF3                                 start 000E  
                      __CFG_IESO$OFF 000000                        __CFG_MCLRE$ON 000000  
                       ___ftmul@cntr 0096                         ___param_bank 000000  
                       ___ftmul@sign 0097                         ___fttol@exp1 00BC  
                       ___fttol@lval 00B8                 __end_ofi2_startTimer 2B48  
               __end_of_angleToPulse 19C4                                ?_main 0001  
                              _ACKEN 007E2C                                _ACKDT 007E2D  
                    __end_of___awdiv 27D2                                _EEADR 000FA9  
                    __end_of___ftadd 1316                                STR_10 FFE6  
                              STR_11 FEF9                                STR_12 FFA7  
                              STR_20 FF52                                STR_21 FF2F  
                              STR_13 FEE7                                STR_22 FF96  
                              STR_14 FF74                                STR_23 FF41  
                              STR_15 FF0B                                STR_16 FF63  
                              STR_17 FED4                                STR_18 FF85  
                              STR_19 FF1D                      __end_of___awmod 293C  
                    __end_of___ftdiv 1E72              ??_servoInterruptService 000A  
                    __end_of___ftneg 2E2A                      __end_of___lldiv 2854  
                    __end_of___ftmul 186C                                _T0CON 000FD5  
                    ___awdiv@divisor 002C                                _T1CON 000FCD  
                    __end_of___llmod 29A2                      __end_of___ftsub 2AFC  
                    __end_of___fttol 1B08                                _T2CON 000FCA  
                              _T3CON 000FB1                                i2l143 25F0  
                              i2l521 16C8                                i2l522 16CC  
                              i2l523 16D0                                i2l276 2230  
                              i2l524 170C                                i2l381 2AFE  
                              i2l383 2B0A                                i2l519 16C4  
                              i2l384 2B16                      ___awdiv@counter 002E  
                              _TMR0H 000FD7                                _TMR1H 000FCF  
                              _TMR0L 000FD6                                _TMR3H 000FB3  
                              _TMR1L 000FCE                                _TMR3L 000FB2  
                              _PORTA 000F80                                _PORTB 000F81  
                              _PORTC 000F82                                _PORTD 000F83  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96                        __CFG_PWRT$OFF 000000  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                        __CFG_WRT3$OFF 000000  
                       ___lltoft@exp 0034                        _conveyorServo 003F  
                    __end_of_lcdInst 2E6E                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000               servoInterruptService@i 0014  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                    __end_of_initLCD 2C1A                       __CFG_EBTRB$OFF 000000  
                      ___awtoft@sign 002F                      __end_of_dpowers FDF5  
                              _count 0057                                _scale 093E  
                              _pause 2EA4                        ___ftpack@sign 0028  
                              _servo 013A                                _pulse 012A  
                              _putch 2E2A                                pclath 000FFA  
                              tablat 000FF5                      __end_of_service 262C  
                    __end_of_runMenu 2CFC                      __end_of_runTime 2D22  
                              status 000FD8                       __CFG_PBADEN$ON 000000  
               __end_of_digitalWrite 22F6                      __initialization 262C  
                       __end_of_main 2500                         __end_of_keys FE74  
                             ??_main 003D                        ___fttol@sign1 00B7  
                      __activetblptr 000002                 __size_of_digitalRead 00EA  
               __size_of__tdiv_to_l_ 0132                      i2digitalWrite@p 0008  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                             _ADCON2 000FC0                     __end_of___altoft 28CC  
                   ___llmod@dividend 0031                               ?_scale 0098  
                             _ADRESH 000FC4                               _EEADRH 000FAA  
                             _ADRESL 000FC3                               _EEDATA 000FA8  
                             ?_pause 00CA                               _EECON1 000FA6  
                             _EECON2 000FA7        keyPressedInterruptService@key 0001  
                   ___awdiv@dividend 002A                     __end_of___awtoft 2C94  
                             ?_putch 0001                     __end_of___ftpack 2464  
                   __end_of___lltoft 2A64                               _INT0IE 007F94  
                             _INT0IF 007F91                               _INT1IE 007F83  
                             _INT1IF 007F80                         sortBattery@V 0127  
                             i2l4333 21A6                               i2l4325 214E  
                             i2l4343 21FE                               i2l4337 21D2  
                             i2l4329 217A                               i2l4361 2346  
                             i2l4371 2368                               i2l4355 2332  
                             i2l4373 236E                               i2l4365 2354  
                             i2l4367 235A                               i2l4359 2340  
                             i2l4377 237C                               i2l4393 2B22  
                             i2l4379 2382                               i2l4635 25E6  
                             i2l4581 165A                               i2l4573 15CA  
                             i2l4585 16D4                               i2l4587 16FE  
                             _TMR0IE 007F95                               _TMR0IF 007F92  
                             _TMR1IE 007CE8                               _TMR1IF 007CF0  
                             _TMR2IF 007CF1                               _TMR3IE 007D01  
                             _TMR3IF 007D09                               _SSPADD 000FC8  
                             _TRISC3 007CA3                               _TRISC4 007CA4  
                             _SSPBUF 000FC9               __size_ofi2_digitalRead 00EA  
                   __end_of_dateTime 2DE0                    _angleToPulse$1333 00CD  
                   __end_of_lcdClear 2EDE                       __CFG_XINST$OFF 000000  
                   __end_of__powers_ FE43                               ___ftge 26BE  
                   __end_of_mainMenu 2DBA                               ___wmul 2DE0  
                          ??___awdiv 002E                            ??___ftadd 00A8  
                     __CFG_STVREN$ON 000000                            ??___awmod 0028  
                          ??___ftdiv 0080                            ??___ftneg 0027  
                          ??___lldiv 002C                            ??___ftmul 008F  
                          ??___llmod 0039                            ??___ftsub 003C  
                          ??___fttol 00B2                               _fround 1316  
                             clear_0 2692                               clear_1 269E  
                             clear_2 26AA                     ___awdiv@quotient 0030  
                    ___awmod@divisor 0026                      ___awmod@counter 0028  
                          ??_lcdInst 0026                               _printf 0012  
                   __end_of_pinSetup 2C5C                     __end_of_setAngle 2598  
                  analogRead@channel 0024                ___ftmul@f3_as_product 0093  
                          ??_initLCD 0028                         __pdataCOMRAM 003D  
                      setAngle@angle 00D6                         __mediumconst FDCC  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                        setAngle@motor 00D4  
                          ??_service 0016                            ??_runMenu 003C  
                   __end_of_runStats 2D48                            ??_runTime 003C  
                         __accesstop 0080              __end_of__initialization 26B0  
                         ___altoft@c 002C                           ___ftadd@f1 00A2  
                         ___ftadd@f2 00A5                           ___ftge@ff1 0024  
                         ___ftge@ff2 0027                        ___rparam_used 000001  
                         ___ftdiv@f1 0036                           ___ftdiv@f2 0039  
                         ___ftdiv@f3 0084                           ___ftneg@f1 0024  
                         ___awtoft@c 002C                __size_ofi2_startTimer 004C  
                         ___ftmul@f1 0089                           ___ftmul@f2 008C  
                         ___ftsub@f1 00AE                           ___ftsub@f2 00B1  
                         ___fttol@f1 00AE                 __end_of_happynewyear FE7B  
                     __pcstackCOMRAM 0001                __size_of_angleToPulse 0158  
                       __pidataBANK0 2EBA                         __pidataBANK1 2EDE  
                         ___lltoft@c 002C                        _cylinderMotor 00F0  
                      __end_of_scale 0D54                         ?_sortBattery 0001  
                      __end_of_pause 2EBA                        __end_of_putch 2E4C  
                      i2_digitalRead 214C                   __size_of_lcdNibble 0066  
                         __div_to_l_ 1C3A                     i2digitalRead@pin 0001  
                    __div_to_l_@exp1 002F                      __div_to_l_@cntr 002E  
                            ??_scale 003C                              ??_pause 003C  
                    __div_to_l_@quot 002A                              ??_putch 0028  
                       i2_startTimer 2AFC                           __pbssBANK0 00F4  
                         __pbssBANK1 012A                         _angleToPulse 186C  
              __size_of_digitalWrite 00C0                   __size_of_initTimer 0046  
                 __size_of_initServo 00EC                           _analogRead 2C94  
                      __div_to_l_@f1 0024                        __div_to_l_@f2 0027  
                            ?___ftge 0024                              ?___wmul 0032  
              sortBattery@resolution 0120                            ?___altoft 002C  
                            ?_fround 0098                           _lcdNewline 2ECE  
                          ?___awtoft 002C                            ?___ftpack 0024  
                     ?i2_digitalRead 0001                              ?_printf 00BD  
                          ?___lltoft 002C           servoInterruptService@flags 000C  
     __size_of_servoInterruptService 0198        __end_of_servoInterruptService 170E  
              __end_of_showInterface 1F76                            ?_dateTime 0001  
                     stopServo@timer 0024                    i2startTimer@timer 0001  
                          ?_lcdClear 0001                   __size_of_runSelect 0026  
                   angleToPulse@a000 00D0                     angleToPulse@a180 00C9  
                       _digitalWrite 2236                              _SSPCON1 000FC6  
                            _SSPCON2 000FC5                              _SSPSTAT 000FC7  
                          ?_mainMenu 0001              __size_ofi2_digitalWrite 00C0  
                 __size_of_stopServo 0046                              _V_LIM_C 00FA  
                          ?_pinSetup 0001                            ?_setAngle 00D4  
                  __end_of_lcdNibble 2A08                         initServo@pin 0106  
                  __end_of__npowers_ FE1C                              __Hparam 0000  
                         _scale$1336 009B                              __Lparam 0000  
                    __size_of___ftge 0090                              ___awdiv 274E  
                            ___ftadd 10AE                              ___awmod 28CC  
                         _readKeypad 2D6E                              ___ftdiv 1D62  
                            ___ftneg 2E06                              ___lldiv 27D2  
                    __size_of___wmul 0026                              ___ftmul 170E  
                            ___llmod 293C                              ___ftsub 2AB0  
                            ___fttol 19C4                            ?_runStats 0001  
                         ??___altoft 0030                              __pcinit 262C  
                         ??___awtoft 002F                           ??___ftpack 0029  
                    __size_of_fround 0260                              __ramtop 1000  
                            _lcdInst 2E4C                           ??___lltoft 0030  
                            __ptext0 2464                              __ptext1 0D54  
                            __ptext2 2B48                              __ptext3 2EA4  
                            __ptext4 1F76                              __ptext5 2A64  
                            __ptext6 2500                              __ptext7 186C  
                            __ptext8 1D62                              __ptext9 2C5C  
                    __size_of_printf 092C                              _padPin1 004B  
                            _padPin2 004F                              _padPin3 0053  
                      startTimer@val 0026                              _initLCD 2BD4  
                  __end_of_hexpowers FE63                          ?__div_to_l_ 0024  
                            _lastKey 005B                    __end_of_initTimer 2BD4  
                  __end_of_initServo 2062                              _dpowers FDCD  
                   ___awmod@dividend 0024                           ??_dateTime 003C  
                         ??_lcdClear 0028                              _service 0008  
                            _runMenu 2CCC                              _runTime 2CFC  
                     __pintcode_body 2598                 end_of_initialization 26B0  
                         ??_mainMenu 003C                        __Lmediumconst FDCC  
                            int_func 2598                       digitalRead@pin 0024  
                        ?_analogRead 0024                           ??_pinSetup 0024  
                         ??_setAngle 00D8                      ___lldiv@divisor 0028  
                    ___lldiv@counter 0030                    __end_of_runSelect 2D6E  
                            printf@c 0117                              printf@f 00BD  
                            postdec1 000FE5                              postdec2 000FDD  
                    _batteryDetected 00FD                              postinc0 000FEE  
                            postinc2 000FDE                           ??_runStats 003C  
                    ??i2_digitalRead 0003                       __tdiv_to_l_@f1 0024  
                     __tdiv_to_l_@f2 0027                        ??_digitalRead 0026  
                        ?_lcdNewline 0001                        ??__tdiv_to_l_ 002A  
                  __end_of_stopServo 2B8E                            _PORTBbits 000F81  
               __size_of_sortBattery 035A                     showInterface@key 00CA  
       ??_keyPressedInterruptService 0001                  _redirectAngle_OTHER 00EA  
                       _happynewyear FE74                   angleToPulse@offset 00C5  
                 sortBattery@V_float 011A                           _startTimer 2A64  
                        ___ftdiv@exp 0087                  __size_of__div_to_l_ 0128  
                        ___ftmul@exp 0092                          ?_readKeypad 0001  
                     __end_of___ftge 274E                       __end_of___wmul 2E06  
                      __pidataCOMRAM 2E8E  __size_of_keyPressedInterruptService 0020  
                     __end_of_fround 1576                       __end_of_printf 093E  
                __size_of_analogRead 0038                  start_initialization 262C  
                __end_of_digitalRead 214C                  __end_of__tdiv_to_l_ 1C3A  
                     initServo@angle 0102                       initTimer@timer 0024  
                     initServo@motor 0100                       initServo@timer 0108  
                     i2_digitalWrite 22F6                  __size_of_lcdNewline 0008  
                    ___llmod@divisor 0035                      ___llmod@counter 0039  
                           ??___ftge 002A                             ??___wmul 0036  
                        __pdataBANK0 00E0                          __pdataBANK1 014A  
                       pause@message 00CA                     __CFG_LPT1OSC$OFF 000000  
                           ??_fround 003C                             ??_printf 00C4  
                  __size_of___altoft 0078                           fround@prec 00A1  
                  __size_of___awtoft 0038                    __size_of___ftpack 00AE  
                  __size_of___lltoft 005C                          __pbssCOMRAM 0053  
                      __pcstackBANK0 0080                        __pcstackBANK1 0100  
             __end_ofi2_digitalWrite 23B6               sortBattery@targetAngle 0125  
                  __size_of_dateTime 0026                          ?_startTimer 0024  
                  __size_of_lcdClear 0008                  __size_of_readKeypad 0026  
                  __size_of_mainMenu 0026                    i2digitalWrite@pin 0001  
                  i2digitalWrite@val 0003                    __CFG_CCP2MX$PORTC 000000  
                  __size_of_pinSetup 0042                    __size_of_setAngle 0098  
                          __pintcode 0008                        __pmediumconst FDCC  
                          _lcdNibble 29A2                             ?___awdiv 002A  
                           ?___ftadd 00A2                             ?___awmod 0024  
                           ?___ftdiv 0036                             ?___ftneg 0024  
                           ?___lldiv 0024                             ?___ftmul 0089  
                           ?___llmod 0031                             ?___ftsub 00AE  
                          __npowers_ FDF5                             ?___fttol 00AE  
                        _digitalRead 2062                             ?_lcdInst 0001  
                        __tdiv_to_l_ 1B08                    __size_of_runStats 0026  
                       ??__div_to_l_ 002A                             ?_initLCD 0001  
                    startTimer@timer 0024   __end_of_keyPressedInterruptService 2E8E  
         _keyPressedInterruptService 2E6E                             ?_service 0001  
                          _hexpowers FE43                             ?_runMenu 0001  
                          _initTimer 2B8E                            _initServo 1F76  
                           ?_runTime 0001                      ?i2_digitalWrite 0001  
              _servoInterruptService 1576                       __size_of_scale 0416  
                     __size_of_pause 0016                       __size_of_putch 0022  
                           _AA_float 00EC                       sortBattery@Vcc 011D  
                     ___wmul@product 0036                             _LATDbits 000F8C  
                       ??_analogRead 0028                             i2u410_40 15C8  
                           i2u402_40 157E                             i2u403_40 1580  
                           i2u404_40 158C                             i2u405_40 158E  
                           i2u406_40 159A                             i2u407_40 159C  
                           i2u408_40 15A8                             i2u409_40 15AA  
                 __end_of__div_to_l_ 1D62                             i2u370_44 21C2  
                           i2u370_45 21BE                             i2u371_44 21EE  
                           i2u371_45 21EA                             i2u372_44 2318  
                           i2u372_45 2312                             i2u368_44 216A  
                           i2u368_45 2166                             i2u369_44 2196  
                           i2u369_45 2192               __size_of_showInterface 0104  
                   __CFG_WDTPS$32768 000000                           ?_lcdNibble 0001  
                     _padAngle_CLOSE 00E0                        digitalWrite@p 002B  
                       ??_lcdNewline 0028                  __size_of_startTimer 004C  
                          _runSelect 2D48                    angleToPulse@angle 00BD  
                  ___wmul@multiplier 0032                        lcdNibble@data 0025  
                         printf@flag 0106                        lcdNibble@temp 0024  
                         printf@fval 0114                           printf@prec 0108  
                          _stopServo 2B48                   __end_of_analogRead 2CCC  
                           _V_LIM_AA 00F7                             _V_LIM_9V 00F4  
                         runMenu@key 003C                           ?_initTimer 0024  
                         ?_initServo 0100                    sortBattery@signal 0123  
                          copy_data0 2640                            copy_data1 2660  
                          copy_data2 2680                        initServo@port 0104  
                 __end_of_lcdNewline 2ED6                        readKeypad@key 0024  
                           __Hrparam 0000                             __Lrparam 0000  
                 __CFG_BOREN$SBORDIS 000000                         ??_readKeypad 0024  
                      ??_sortBattery 0118                     __size_of___awdiv 0084  
                   __size_of___ftadd 0268                     __size_of___awmod 0070  
                   __size_of___ftdiv 0110                     __size_of___ftneg 0024  
                   __size_of___lldiv 0082                             ___altoft 2854  
                   __size_of___ftmul 015E                     __size_of___llmod 0066  
                   __size_of___ftsub 004C                     __size_of___fttol 0144  
                         ?_runSelect 0001                             ___awtoft 2C5C  
                           ___ftpack 23B6                __end_ofi2_digitalRead 2236  
                        _fround$1334 009E                          _fround$1335 009B  
                           ___lltoft 2A08                     __size_of_lcdInst 0022  
                   __size_of_initLCD 0046                             _dateTime 2DBA  
                         ?_stopServo 0024               ?_servoInterruptService 0001  
                      _showInterface 1E72                             _lcdClear 2ED6  
                           __ptext10 2854                             __ptext11 2B8E  
                           __ptext20 2D6E                             __ptext12 2236  
                           __ptext21 2D94                             __ptext13 2062  
                           __ptext30 28CC                             __ptext22 2DBA  
                           __ptext14 2C94                             __ptext31 274E  
                           __ptext23 0012                             __ptext15 1E72  
                           __ptext40 23B6                             __ptext32 1B08  
                           __ptext24 093E                             __ptext16 2CFC  
                           __ptext41 2E06                             __ptext33 1C3A  
                           __ptext25 2E2A                             __ptext17 2D22  
                           __ptext50 2AFC                             __ptext42 26BE  
                           __ptext34 2A08                             __ptext26 2ECE  
                           __ptext18 2D48                             __ptext51 22F6  
                           __ptext43 2ED6                             __ptext35 293C  
                           __ptext27 1316                             __ptext19 2CCC  
                           __ptext52 214C                             __ptext44 2C1A  
                           __ptext36 27D2                             __ptext28 2DE0  
                           __ptext53 2E6E                             __ptext45 2BD4  
                           __ptext37 19C4                             __ptext29 170E  
                           __ptext46 2E4C                             __ptext38 2AB0  
                           __ptext47 29A2                             __ptext39 10AE  
                           __ptext49 1576                             __powers_ FE1C  
                   __size_of_service 2624                     __size_of_runMenu 0030  
                    i2startTimer@val 0003                     __size_of_runTime 0026  
                      ?i2_startTimer 0001                             _mainMenu 2D94  
                           _padServo 0045                   __end_of_readKeypad 2D94  
                      ?_angleToPulse 00BD                        __size_of_main 009C  
                           _pinSetup 2C1A                             _setAngle 2500  
                           _prevTime 0059                          ??_lcdNibble 0024  
                      _padAngle_OPEN 00E4                             int$flags 005C  
                           _runStats 2D22                            printf@idx 0103  
                          printf@exp 010A                            printf@val 0110  
                          putch@data 0028                  __end_of_sortBattery 10AE  
                         _INTCONbits 000FF2                       ?_showInterface 0001  
                      ?_digitalWrite 0024                          ??_initTimer 0026  
                        ??_initServo 00DE                             scale@scl 009E  
                     ??i2_startTimer 0007                         ??_startTimer 002A  
                           intlevel2 0000                     __tdiv_to_l_@exp1 0032  
                   __tdiv_to_l_@cntr 0031                       ??_angleToPulse 00C1  
                   __tdiv_to_l_@quot 002D                     ___lldiv@dividend 0024  
                   _redirectAngle_AA 00E8                     _redirectAngle_9V 00E6  
                           printf@ap 0104                          lcdInst@data 0027  
                       ?_digitalRead 0024                          ??_runSelect 003C  
                       ?__tdiv_to_l_ 0024                   __end_of_startTimer 2AB0  
                        _printf$1337 0100                     ??i2_digitalWrite 0005  
                   ___lldiv@quotient 002C                          ??_stopServo 0026  
                     ??_digitalWrite 0028          ?_keyPressedInterruptService 0001  
                    _redirectAngle_C 003D                     _padAngle_NEUTRAL 00E2  
                    digitalWrite@pin 0024                      digitalWrite@val 0026  
