

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Mar 13 14:21:18 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    64                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    79                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    80                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    81  0000                     
    82                           ; Version 1.40
    83                           ; Generated 01/12/2016 GMT
    84                           ; 
    85                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    86                           ; All rights reserved.
    87                           ; 
    88                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    89                           ; 
    90                           ; Redistribution and use in source and binary forms, with or without modification, are
    91                           ; permitted provided that the following conditions are met:
    92                           ; 
    93                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    94                           ;        conditions and the following disclaimer.
    95                           ; 
    96                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    97                           ;        of conditions and the following disclaimer in the documentation and/or other
    98                           ;        materials provided with the distribution.
    99                           ; 
   100                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   101                           ;        software without specific prior written permission.
   102                           ; 
   103                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   104                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   105                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   106                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   107                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   108                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   109                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   110                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   111                           ; 
   112                           ; 
   113                           ; Code-generator required, PIC18F4620 Definitions
   114                           ; 
   115                           ; SFR Addresses
   116  0000                     
   117                           	psect	idataCOMRAM
   118  003A64                     __pidataCOMRAM:
   119                           	opt stack 0
   120                           
   121                           ;initializer for _redirectAngle_C
   122  003A64  0050               	dw	80
   123                           
   124                           	psect	idataBANK1
   125  0038D6                     __pidataBANK1:
   126                           	opt stack 0
   127                           
   128                           ;initializer for _conveyorServo
   129  0038D6  0000               	dw	0
   130  0038D8  0002               	dw	2
   131  0038DA  0001               	dw	1
   132                           
   133                           ;initializer for _padServo
   134  0038DC  0001               	dw	1
   135  0038DE  0002               	dw	2
   136  0038E0  0002               	dw	2
   137                           
   138                           ;initializer for _redirectingServo
   139  0038E2  0003               	dw	3
   140  0038E4  0002               	dw	2
   141  0038E6  0003               	dw	3
   142                           
   143                           ;initializer for _AA_float
   144  0038E8  0000               	dw	0
   145  0038EA  0003               	dw	3
   146                           
   147                           ;initializer for _cylinderMotor
   148  0038EC  0002               	dw	2
   149  0038EE  0000               	dw	0
   150                           
   151                           ;initializer for _padPin1
   152  0038F0  0000               	dw	0
   153  0038F2  0001               	dw	1
   154                           
   155                           ;initializer for _padPin2
   156  0038F4  0000               	dw	0
   157  0038F6  0002               	dw	2
   158                           
   159                           ;initializer for _padAngle_CLOSE
   160  0038F8  0046               	dw	70
   161                           
   162                           ;initializer for _padAngle_NEUTRAL
   163  0038FA  005A               	dw	90
   164                           
   165                           ;initializer for _padAngle_OPEN
   166  0038FC  00B4               	dw	180
   167                           
   168                           ;initializer for _redirectAngle_9V
   169  0038FE  0064               	dw	100
   170                           
   171                           ;initializer for _redirectAngle_AA
   172  003900  003C               	dw	60
   173                           
   174                           ;initializer for _redirectAngle_OTHER
   175  003902  0078               	dw	120
   176                           
   177                           	psect	mediumconst
   178  00FDD2                     __pmediumconst:
   179                           	opt stack 0
   180  00FDD2  00                 	db	0
   181  00FDD3                     _dpowers:
   182                           	opt stack 0
   183  00FDD3  0001               	dw	1
   184  00FDD5  0000               	dw	0
   185  00FDD7  000A               	dw	10
   186  00FDD9  0000               	dw	0
   187  00FDDB  0064               	dw	100
   188  00FDDD  0000               	dw	0
   189  00FDDF  03E8               	dw	1000
   190  00FDE1  0000               	dw	0
   191  00FDE3  2710               	dw	10000
   192  00FDE5  0000               	dw	0
   193  00FDE7  86A0               	dw	34464
   194  00FDE9  0001               	dw	1
   195  00FDEB  4240               	dw	16960
   196  00FDED  000F               	dw	15
   197  00FDEF  9680               	dw	38528
   198  00FDF1  0098               	dw	152
   199  00FDF3  E100               	dw	57600
   200  00FDF5  05F5               	dw	1525
   201  00FDF7  CA00               	dw	51712
   202  00FDF9  3B9A               	dw	15258
   203  00FDFB                     __end_of_dpowers:
   204                           	opt stack 0
   205  00FDFB                     __npowers_:
   206                           	opt stack 0
   207  00FDFB  00                 	db	0
   208  00FDFC  80                 	db	128
   209  00FDFD  3F                 	db	63
   210  00FDFE  CD                 	db	205
   211  00FDFF  CC                 	db	204
   212  00FE00  3D                 	db	61
   213  00FE01  D7                 	db	215
   214  00FE02  23                 	db	35
   215  00FE03  3C                 	db	60
   216  00FE04  12                 	db	18
   217  00FE05  83                 	db	131
   218  00FE06  3A                 	db	58
   219  00FE07  B7                 	db	183
   220  00FE08  D1                 	db	209
   221  00FE09  38                 	db	56
   222  00FE0A  C6                 	db	198
   223  00FE0B  27                 	db	39
   224  00FE0C  37                 	db	55
   225  00FE0D  38                 	db	56
   226  00FE0E  86                 	db	134
   227  00FE0F  35                 	db	53
   228  00FE10  C0                 	db	192
   229  00FE11  D6                 	db	214
   230  00FE12  33                 	db	51
   231  00FE13  CC                 	db	204
   232  00FE14  2B                 	db	43
   233  00FE15  32                 	db	50
   234  00FE16  70                 	db	112
   235  00FE17  89                 	db	137
   236  00FE18  30                 	db	48
   237  00FE19  E7                 	db	231
   238  00FE1A  DB                 	db	219
   239  00FE1B  2E                 	db	46
   240  00FE1C  E5                 	db	229
   241  00FE1D  3C                 	db	60
   242  00FE1E  1E                 	db	30
   243  00FE1F  42                 	db	66
   244  00FE20  A2                 	db	162
   245  00FE21  0D                 	db	13
   246  00FE22                     __end_of__npowers_:
   247                           	opt stack 0
   248  00FE22                     __powers_:
   249                           	opt stack 0
   250  00FE22  00                 	db	0
   251  00FE23  80                 	db	128
   252  00FE24  3F                 	db	63
   253  00FE25  00                 	db	0
   254  00FE26  20                 	db	32
   255  00FE27  41                 	db	65
   256  00FE28  00                 	db	0
   257  00FE29  C8                 	db	200
   258  00FE2A  42                 	db	66
   259  00FE2B  00                 	db	0
   260  00FE2C  7A                 	db	122
   261  00FE2D  44                 	db	68
   262  00FE2E  40                 	db	64
   263  00FE2F  1C                 	db	28
   264  00FE30  46                 	db	70
   265  00FE31  50                 	db	80
   266  00FE32  C3                 	db	195
   267  00FE33  47                 	db	71
   268  00FE34  24                 	db	36
   269  00FE35  74                 	db	116
   270  00FE36  49                 	db	73
   271  00FE37  97                 	db	151
   272  00FE38  18                 	db	24
   273  00FE39  4B                 	db	75
   274  00FE3A  BC                 	db	188
   275  00FE3B  BE                 	db	190
   276  00FE3C  4C                 	db	76
   277  00FE3D  6B                 	db	107
   278  00FE3E  6E                 	db	110
   279  00FE3F  4E                 	db	78
   280  00FE40  03                 	db	3
   281  00FE41  15                 	db	21
   282  00FE42  50                 	db	80
   283  00FE43  79                 	db	121
   284  00FE44  AD                 	db	173
   285  00FE45  60                 	db	96
   286  00FE46  F3                 	db	243
   287  00FE47  49                 	db	73
   288  00FE48  71                 	db	113
   289  00FE49                     __end_of__powers_:
   290                           	opt stack 0
   291  00FE49                     _hexpowers:
   292                           	opt stack 0
   293  00FE49  0001               	dw	1
   294  00FE4B  0000               	dw	0
   295  00FE4D  0010               	dw	16
   296  00FE4F  0000               	dw	0
   297  00FE51  0100               	dw	256
   298  00FE53  0000               	dw	0
   299  00FE55  1000               	dw	4096
   300  00FE57  0000               	dw	0
   301  00FE59  0000               	dw	0
   302  00FE5B  0001               	dw	1
   303  00FE5D  0000               	dw	0
   304  00FE5F  0010               	dw	16
   305  00FE61  0000               	dw	0
   306  00FE63  0100               	dw	256
   307  00FE65  0000               	dw	0
   308  00FE67  1000               	dw	4096
   309  00FE69                     __end_of_hexpowers:
   310                           	opt stack 0
   311  00FE69                     _keys:
   312                           	opt stack 0
   313  00FE69  31                 	db	49
   314  00FE6A  32                 	db	50
   315  00FE6B  33                 	db	51
   316  00FE6C  41                 	db	65
   317  00FE6D  34                 	db	52
   318  00FE6E  35                 	db	53
   319  00FE6F  36                 	db	54
   320  00FE70  42                 	db	66
   321  00FE71  37                 	db	55
   322  00FE72  38                 	db	56
   323  00FE73  39                 	db	57
   324  00FE74  43                 	db	67
   325  00FE75  2A                 	db	42
   326  00FE76  30                 	db	48
   327  00FE77  23                 	db	35
   328  00FE78  44                 	db	68
   329  00FE79  00                 	db	0
   330  00FE7A                     __end_of_keys:
   331                           	opt stack 0
   332  00FE7A                     _happynewyear:
   333                           	opt stack 0
   334  00FE7A  45                 	db	69
   335  00FE7B  59                 	db	89
   336  00FE7C  23                 	db	35
   337  00FE7D  07                 	db	7
   338  00FE7E  31                 	db	49
   339  00FE7F  12                 	db	18
   340  00FE80  16                 	db	22
   341  00FE81                     __end_of_happynewyear:
   342                           	opt stack 0
   343  0000                     _ADCON0	set	4034
   344  0000                     _ADCON1	set	4033
   345  0000                     _ADCON2	set	4032
   346  0000                     _ADRESH	set	4036
   347  0000                     _ADRESL	set	4035
   348  0000                     _EEADR	set	4009
   349  0000                     _EEADRH	set	4010
   350  0000                     _EECON1	set	4006
   351  0000                     _EECON2	set	4007
   352  0000                     _EEDATA	set	4008
   353  0000                     _INTCONbits	set	4082
   354  0000                     _LATA	set	3977
   355  0000                     _LATB	set	3978
   356  0000                     _LATC	set	3979
   357  0000                     _LATD	set	3980
   358  0000                     _LATDbits	set	3980
   359  0000                     _LATE	set	3981
   360  0000                     _PORTA	set	3968
   361  0000                     _PORTB	set	3969
   362  0000                     _PORTBbits	set	3969
   363  0000                     _PORTC	set	3970
   364  0000                     _PORTD	set	3971
   365  0000                     _SSPADD	set	4040
   366  0000                     _SSPBUF	set	4041
   367  0000                     _SSPCON1	set	4038
   368  0000                     _SSPCON2	set	4037
   369  0000                     _SSPSTAT	set	4039
   370  0000                     _T0CON	set	4053
   371  0000                     _T1CON	set	4045
   372  0000                     _T2CON	set	4042
   373  0000                     _T3CON	set	4017
   374  0000                     _TMR0H	set	4055
   375  0000                     _TMR0L	set	4054
   376  0000                     _TMR1H	set	4047
   377  0000                     _TMR1L	set	4046
   378  0000                     _TMR3H	set	4019
   379  0000                     _TMR3L	set	4018
   380  0000                     _TRISA	set	3986
   381  0000                     _TRISB	set	3987
   382  0000                     _TRISC	set	3988
   383  0000                     _TRISD	set	3989
   384  0000                     _TRISE	set	3990
   385  0000                     _ACKDT	set	32301
   386  0000                     _ACKEN	set	32300
   387  0000                     _EEIF	set	32012
   388  0000                     _INT0IE	set	32660
   389  0000                     _INT0IF	set	32657
   390  0000                     _INT1IF	set	32640
   391  0000                     _PEIE	set	32662
   392  0000                     _PEN	set	32298
   393  0000                     _RCEN	set	32299
   394  0000                     _RSEN	set	32297
   395  0000                     _SEN	set	32296
   396  0000                     _TMR0IE	set	32661
   397  0000                     _TMR0IF	set	32658
   398  0000                     _TMR1IE	set	31976
   399  0000                     _TMR1IF	set	31984
   400  0000                     _TMR2IF	set	31985
   401  0000                     _TMR3IE	set	32001
   402  0000                     _TMR3IF	set	32009
   403  0000                     _TRISC3	set	31907
   404  0000                     _TRISC4	set	31908
   405  00FE81                     STR_8:
   406  00FE81  63                 	db	99	;'c'
   407  00FE82  6F                 	db	111	;'o'
   408  00FE83  6E                 	db	110	;'n'
   409  00FE84  76                 	db	118	;'v'
   410  00FE85  65                 	db	101	;'e'
   411  00FE86  79                 	db	121	;'y'
   412  00FE87  6F                 	db	111	;'o'
   413  00FE88  72                 	db	114	;'r'
   414  00FE89  20                 	db	32
   415  00FE8A  26                 	db	38
   416  00FE8B  20                 	db	32
   417  00FE8C  63                 	db	99	;'c'
   418  00FE8D  79                 	db	121	;'y'
   419  00FE8E  6C                 	db	108	;'l'
   420  00FE8F  69                 	db	105	;'i'
   421  00FE90  6E                 	db	110	;'n'
   422  00FE91  64                 	db	100	;'d'
   423  00FE92  65                 	db	101	;'e'
   424  00FE93  72                 	db	114	;'r'
   425  00FE94  20                 	db	32
   426  00FE95  6F                 	db	111	;'o'
   427  00FE96  6E                 	db	110	;'n'
   428  00FE97  3F                 	db	63	;'?'
   429  00FE98  00                 	db	0
   430  00FE99                     STR_5:
   431  00FE99  73                 	db	115	;'s'
   432  00FE9A  65                 	db	101	;'e'
   433  00FE9B  74                 	db	116	;'t'
   434  00FE9C  20                 	db	32
   435  00FE9D  72                 	db	114	;'r'
   436  00FE9E  65                 	db	101	;'e'
   437  00FE9F  64                 	db	100	;'d'
   438  00FEA0  69                 	db	105	;'i'
   439  00FEA1  72                 	db	114	;'r'
   440  00FEA2  65                 	db	101	;'e'
   441  00FEA3  63                 	db	99	;'c'
   442  00FEA4  74                 	db	116	;'t'
   443  00FEA5  20                 	db	32
   444  00FEA6  61                 	db	97	;'a'
   445  00FEA7  6E                 	db	110	;'n'
   446  00FEA8  67                 	db	103	;'g'
   447  00FEA9  6C                 	db	108	;'l'
   448  00FEAA  65                 	db	101	;'e'
   449  00FEAB  3F                 	db	63	;'?'
   450  00FEAC  00                 	db	0
   451  00FEAD                     STR_2:
   452  00FEAD  69                 	db	105	;'i'
   453  00FEAE  6E                 	db	110	;'n'
   454  00FEAF  74                 	db	116	;'t'
   455  00FEB0  65                 	db	101	;'e'
   456  00FEB1  72                 	db	114	;'r'
   457  00FEB2  72                 	db	114	;'r'
   458  00FEB3  75                 	db	117	;'u'
   459  00FEB4  70                 	db	112	;'p'
   460  00FEB5  74                 	db	116	;'t'
   461  00FEB6  21                 	db	33
   462  00FEB7  21                 	db	33
   463  00FEB8  21                 	db	33
   464  00FEB9  0A                 	db	10
   465  00FEBA  63                 	db	99	;'c'
   466  00FEBB  6C                 	db	108	;'l'
   467  00FEBC  6F                 	db	111	;'o'
   468  00FEBD  73                 	db	115	;'s'
   469  00FEBE  65                 	db	101	;'e'
   470  00FEBF  3F                 	db	63	;'?'
   471  00FEC0  00                 	db	0
   472  00FEC1                     STR_17:
   473  00FEC1  25                 	db	37
   474  00FEC2  63                 	db	99	;'c'
   475  00FEC3  29                 	db	41
   476  00FEC4  20                 	db	32
   477  00FEC5  74                 	db	116	;'t'
   478  00FEC6  69                 	db	105	;'i'
   479  00FEC7  6D                 	db	109	;'m'
   480  00FEC8  65                 	db	101	;'e'
   481  00FEC9  20                 	db	32
   482  00FECA  20                 	db	32
   483  00FECB  3C                 	db	60	;'<'
   484  00FECC  41                 	db	65	;'A'
   485  00FECD  20                 	db	32
   486  00FECE  20                 	db	32
   487  00FECF  20                 	db	32
   488  00FED0  20                 	db	32
   489  00FED1  20                 	db	32
   490  00FED2  0A                 	db	10
   491  00FED3  00                 	db	0
   492  00FED4                     STR_13:
   493  00FED4  73                 	db	115	;'s'
   494  00FED5  74                 	db	116	;'t'
   495  00FED6  61                 	db	97	;'a'
   496  00FED7  72                 	db	114	;'r'
   497  00FED8  74                 	db	116	;'t'
   498  00FED9  20                 	db	32
   499  00FEDA  20                 	db	32
   500  00FEDB  20                 	db	32
   501  00FEDC  3C                 	db	60	;'<'
   502  00FEDD  42                 	db	66	;'B'
   503  00FEDE  20                 	db	32
   504  00FEDF  20                 	db	32
   505  00FEE0  20                 	db	32
   506  00FEE1  20                 	db	32
   507  00FEE2  20                 	db	32
   508  00FEE3  20                 	db	32
   509  00FEE4  0A                 	db	10
   510  00FEE5  00                 	db	0
   511  00FEE6                     STR_11:
   512  00FEE6  20                 	db	32
   513  00FEE7  20                 	db	32
   514  00FEE8  68                 	db	104	;'h'
   515  00FEE9  68                 	db	104	;'h'
   516  00FEEA  3A                 	db	58	;':'
   517  00FEEB  6D                 	db	109	;'m'
   518  00FEEC  6D                 	db	109	;'m'
   519  00FEED  3A                 	db	58	;':'
   520  00FEEE  73                 	db	115	;'s'
   521  00FEEF  73                 	db	115	;'s'
   522  00FEF0  20                 	db	32
   523  00FEF1  20                 	db	32
   524  00FEF2  20                 	db	32
   525  00FEF3  20                 	db	32
   526  00FEF4  20                 	db	32
   527  00FEF5  20                 	db	32
   528  00FEF6  0A                 	db	10
   529  00FEF7  00                 	db	0
   530  00FEF8                     STR_15:
   531  00FEF8  73                 	db	115	;'s'
   532  00FEF9  65                 	db	101	;'e'
   533  00FEFA  6C                 	db	108	;'l'
   534  00FEFB  65                 	db	101	;'e'
   535  00FEFC  63                 	db	99	;'c'
   536  00FEFD  74                 	db	116	;'t'
   537  00FEFE  20                 	db	32
   538  00FEFF  72                 	db	114	;'r'
   539  00FF00  75                 	db	117	;'u'
   540  00FF01  6E                 	db	110	;'n'
   541  00FF02  3A                 	db	58	;':'
   542  00FF03  20                 	db	32
   543  00FF04  20                 	db	32
   544  00FF05  20                 	db	32
   545  00FF06  20                 	db	32
   546  00FF07  20                 	db	32
   547  00FF08  0A                 	db	10
   548  00FF09  00                 	db	0
   549  00FF0A                     STR_19:
   550  00FF0A  74                 	db	116	;'t'
   551  00FF0B  69                 	db	105	;'i'
   552  00FF0C  6D                 	db	109	;'m'
   553  00FF0D  65                 	db	101	;'e'
   554  00FF0E  3A                 	db	58	;':'
   555  00FF0F  20                 	db	32
   556  00FF10  6E                 	db	110	;'n'
   557  00FF11  6E                 	db	110	;'n'
   558  00FF12  6E                 	db	110	;'n'
   559  00FF13  20                 	db	32
   560  00FF14  73                 	db	115	;'s'
   561  00FF15  65                 	db	101	;'e'
   562  00FF16  63                 	db	99	;'c'
   563  00FF17  20                 	db	32
   564  00FF18  20                 	db	32
   565  00FF19  20                 	db	32
   566  00FF1A  0A                 	db	10
   567  00FF1B  00                 	db	0
   568  00FF1C                     STR_21:
   569  00FF1C  5B                 	db	91	;'['
   570  00FF1D  41                 	db	65	;'A'
   571  00FF1E  41                 	db	65	;'A'
   572  00FF1F  2C                 	db	44
   573  00FF20  39                 	db	57	;'9'
   574  00FF21  56                 	db	86	;'V'
   575  00FF22  2C                 	db	44
   576  00FF23  43                 	db	67	;'C'
   577  00FF24  2C                 	db	44
   578  00FF25  6F                 	db	111	;'o'
   579  00FF26  74                 	db	116	;'t'
   580  00FF27  68                 	db	104	;'h'
   581  00FF28  65                 	db	101	;'e'
   582  00FF29  72                 	db	114	;'r'
   583  00FF2A  5D                 	db	93	;']'
   584  00FF2B  20                 	db	32
   585  00FF2C  0A                 	db	10
   586  00FF2D  00                 	db	0
   587  00FF2E                     STR_4:
   588  00FF2E  74                 	db	116	;'t'
   589  00FF2F  61                 	db	97	;'a'
   590  00FF30  72                 	db	114	;'r'
   591  00FF31  67                 	db	103	;'g'
   592  00FF32  65                 	db	101	;'e'
   593  00FF33  74                 	db	116	;'t'
   594  00FF34  3A                 	db	58	;':'
   595  00FF35  20                 	db	32
   596  00FF36  25                 	db	37
   597  00FF37  64                 	db	100	;'d'
   598  00FF38  2C                 	db	44
   599  00FF39  20                 	db	32
   600  00FF3A  56                 	db	86	;'V'
   601  00FF3B  3A                 	db	58	;':'
   602  00FF3C  20                 	db	32
   603  00FF3D  25                 	db	37
   604  00FF3E  66                 	db	102	;'f'
   605  00FF3F  00                 	db	0
   606  00FF40                     STR_23:
   607  00FF40  30                 	db	48	;'0'
   608  00FF41  31                 	db	49	;'1'
   609  00FF42  32                 	db	50	;'2'
   610  00FF43  33                 	db	51	;'3'
   611  00FF44  34                 	db	52	;'4'
   612  00FF45  35                 	db	53	;'5'
   613  00FF46  36                 	db	54	;'6'
   614  00FF47  37                 	db	55	;'7'
   615  00FF48  38                 	db	56	;'8'
   616  00FF49  39                 	db	57	;'9'
   617  00FF4A  61                 	db	97	;'a'
   618  00FF4B  62                 	db	98	;'b'
   619  00FF4C  63                 	db	99	;'c'
   620  00FF4D  64                 	db	100	;'d'
   621  00FF4E  65                 	db	101	;'e'
   622  00FF4F  66                 	db	102	;'f'
   623  00FF50  00                 	db	0
   624  00FF51                     STR_20:
   625  00FF51  20                 	db	32
   626  00FF52  20                 	db	32
   627  00FF53  20                 	db	32
   628  00FF54  20                 	db	32
   629  00FF55  20                 	db	32
   630  00FF56  20                 	db	32
   631  00FF57  20                 	db	32
   632  00FF58  20                 	db	32
   633  00FF59  20                 	db	32
   634  00FF5A  20                 	db	32
   635  00FF5B  20                 	db	32
   636  00FF5C  20                 	db	32
   637  00FF5D  20                 	db	32
   638  00FF5E  20                 	db	32
   639  00FF5F  2A                 	db	42
   640  00FF60  3E                 	db	62	;'>'
   641  00FF61  00                 	db	0
   642  00FF62                     STR_16:
   643  00FF62  5B                 	db	91	;'['
   644  00FF63  31                 	db	49	;'1'
   645  00FF64  2C                 	db	44
   646  00FF65  32                 	db	50	;'2'
   647  00FF66  2C                 	db	44
   648  00FF67  33                 	db	51	;'3'
   649  00FF68  2C                 	db	44
   650  00FF69  34                 	db	52	;'4'
   651  00FF6A  5D                 	db	93	;']'
   652  00FF6B  20                 	db	32
   653  00FF6C  20                 	db	32
   654  00FF6D  20                 	db	32
   655  00FF6E  20                 	db	32
   656  00FF6F  20                 	db	32
   657  00FF70  2A                 	db	42
   658  00FF71  3E                 	db	62	;'>'
   659  00FF72  00                 	db	0
   660  00FF73                     STR_14:
   661  00FF73  68                 	db	104	;'h'
   662  00FF74  69                 	db	105	;'i'
   663  00FF75  73                 	db	115	;'s'
   664  00FF76  74                 	db	116	;'t'
   665  00FF77  6F                 	db	111	;'o'
   666  00FF78  72                 	db	114	;'r'
   667  00FF79  79                 	db	121	;'y'
   668  00FF7A  20                 	db	32
   669  00FF7B  3C                 	db	60	;'<'
   670  00FF7C  43                 	db	67	;'C'
   671  00FF7D  20                 	db	32
   672  00FF7E  20                 	db	32
   673  00FF7F  20                 	db	32
   674  00FF80  20                 	db	32
   675  00FF81  2A                 	db	42
   676  00FF82  3E                 	db	62	;'>'
   677  00FF83  00                 	db	0
   678  00FF84                     STR_18:
   679  00FF84  20                 	db	32
   680  00FF85  20                 	db	32
   681  00FF86  20                 	db	32
   682  00FF87  73                 	db	115	;'s'
   683  00FF88  74                 	db	116	;'t'
   684  00FF89  61                 	db	97	;'a'
   685  00FF8A  74                 	db	116	;'t'
   686  00FF8B  73                 	db	115	;'s'
   687  00FF8C  20                 	db	32
   688  00FF8D  3C                 	db	60	;'<'
   689  00FF8E  42                 	db	66	;'B'
   690  00FF8F  20                 	db	32
   691  00FF90  20                 	db	32
   692  00FF91  20                 	db	32
   693  00FF92  2A                 	db	42
   694  00FF93  3E                 	db	62	;'>'
   695  00FF94  00                 	db	0
   696  00FF95                     STR_22:
   697  00FF95  5B                 	db	91	;'['
   698  00FF96  6E                 	db	110	;'n'
   699  00FF97  6E                 	db	110	;'n'
   700  00FF98  2C                 	db	44
   701  00FF99  6E                 	db	110	;'n'
   702  00FF9A  2C                 	db	44
   703  00FF9B  6E                 	db	110	;'n'
   704  00FF9C  2C                 	db	44
   705  00FF9D  6E                 	db	110	;'n'
   706  00FF9E  6E                 	db	110	;'n'
   707  00FF9F  5D                 	db	93	;']'
   708  00FFA0  20                 	db	32
   709  00FFA1  20                 	db	32
   710  00FFA2  20                 	db	32
   711  00FFA3  2A                 	db	42
   712  00FFA4  3E                 	db	62	;'>'
   713  00FFA5  00                 	db	0
   714  00FFA6                     STR_12:
   715  00FFA6  20                 	db	32
   716  00FFA7  20                 	db	32
   717  00FFA8  6D                 	db	109	;'m'
   718  00FFA9  6D                 	db	109	;'m'
   719  00FFAA  3A                 	db	58	;':'
   720  00FFAB  64                 	db	100	;'d'
   721  00FFAC  64                 	db	100	;'d'
   722  00FFAD  3A                 	db	58	;':'
   723  00FFAE  79                 	db	121	;'y'
   724  00FFAF  79                 	db	121	;'y'
   725  00FFB0  20                 	db	32
   726  00FFB1  20                 	db	32
   727  00FFB2  20                 	db	32
   728  00FFB3  20                 	db	32
   729  00FFB4  41                 	db	65	;'A'
   730  00FFB5  3E                 	db	62	;'>'
   731  00FFB6  00                 	db	0
   732  00FFB7                     STR_6:
   733  00FFB7  72                 	db	114	;'r'
   734  00FFB8  65                 	db	101	;'e'
   735  00FFB9  6C                 	db	108	;'l'
   736  00FFBA  65                 	db	101	;'e'
   737  00FFBB  61                 	db	97	;'a'
   738  00FFBC  73                 	db	115	;'s'
   739  00FFBD  65                 	db	101	;'e'
   740  00FFBE  20                 	db	32
   741  00FFBF  62                 	db	98	;'b'
   742  00FFC0  61                 	db	97	;'a'
   743  00FFC1  74                 	db	116	;'t'
   744  00FFC2  74                 	db	116	;'t'
   745  00FFC3  65                 	db	101	;'e'
   746  00FFC4  72                 	db	114	;'r'
   747  00FFC5  79                 	db	121	;'y'
   748  00FFC6  3F                 	db	63	;'?'
   749  00FFC7  00                 	db	0
   750  00FFC8                     STR_7:
   751  00FFC8  72                 	db	114	;'r'
   752  00FFC9  65                 	db	101	;'e'
   753  00FFCA  73                 	db	115	;'s'
   754  00FFCB  65                 	db	101	;'e'
   755  00FFCC  74                 	db	116	;'t'
   756  00FFCD  20                 	db	32
   757  00FFCE  74                 	db	116	;'t'
   758  00FFCF  68                 	db	104	;'h'
   759  00FFD0  65                 	db	101	;'e'
   760  00FFD1  20                 	db	32
   761  00FFD2  70                 	db	112	;'p'
   762  00FFD3  61                 	db	97	;'a'
   763  00FFD4  64                 	db	100	;'d'
   764  00FFD5  3F                 	db	63	;'?'
   765  00FFD6  00                 	db	0
   766  00FFD7                     STR_3:
   767  00FFD7  72                 	db	114	;'r'
   768  00FFD8  65                 	db	101	;'e'
   769  00FFD9  61                 	db	97	;'a'
   770  00FFDA  64                 	db	100	;'d'
   771  00FFDB  20                 	db	32
   772  00FFDC  76                 	db	118	;'v'
   773  00FFDD  6F                 	db	111	;'o'
   774  00FFDE  6C                 	db	108	;'l'
   775  00FFDF  74                 	db	116	;'t'
   776  00FFE0  61                 	db	97	;'a'
   777  00FFE1  67                 	db	103	;'g'
   778  00FFE2  65                 	db	101	;'e'
   779  00FFE3  3F                 	db	63	;'?'
   780  00FFE4  00                 	db	0
   781  00FFE5  5B                 	db	91	;'['
   782  00FFE6  25                 	db	37
   783  00FFE7  78                 	db	120	;'x'
   784  00FFE8  20                 	db	32
   785  00FFE9  25                 	db	37
   786  00FFEA  78                 	db	120	;'x'
   787  00FFEB  5D                 	db	93	;']'
   788  00FFEC  0A                 	db	10
   789  00FFED  00                 	db	0
   790  00FFEE  74                 	db	116	;'t'
   791  00FFEF  31                 	db	49	;'1'
   792  00FFF0  3A                 	db	58	;':'
   793  00FFF1  20                 	db	32
   794  00FFF2  25                 	db	37
   795  00FFF3  78                 	db	120	;'x'
   796  00FFF4  20                 	db	32
   797  00FFF5  00                 	db	0
   798  00FFF6                     STR_1:
   799  00FFF6  72                 	db	114	;'r'
   800  00FFF7  75                 	db	117	;'u'
   801  00FFF8  6E                 	db	110	;'n'
   802  00FFF9  6E                 	db	110	;'n'
   803  00FFFA  69                 	db	105	;'i'
   804  00FFFB  6E                 	db	110	;'n'
   805  00FFFC  67                 	db	103	;'g'
   806  00FFFD  00                 	db	0
   807                           
   808                           ; #config settings
   809  00FFFE  00                 	db	0	; dummy byte at the end
   810  0000                     
   811                           	psect	cinit
   812  00352A                     __pcinit:
   813                           	opt stack 0
   814  00352A                     start_initialization:
   815                           	opt stack 0
   816  00352A                     __initialization:
   817                           	opt stack 0
   818                           
   819                           ; Initialize objects allocated to BANK1 (46 bytes)
   820                           ; load TBLPTR registers with __pidataBANK1
   821  00352A  0ED6               	movlw	low __pidataBANK1
   822  00352C  6EF6               	movwf	tblptrl,c
   823  00352E  0E38               	movlw	high __pidataBANK1
   824  003530  6EF7               	movwf	tblptrh,c
   825  003532  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   826  003534  6EF8               	movwf	tblptru,c
   827  003536  EE01  F02F         	lfsr	0,__pdataBANK1
   828  00353A  EE10 F02E          	lfsr	1,46
   829  00353E                     copy_data0:
   830  00353E  0009               	tblrd		*+
   831  003540  CFF5 FFEE          	movff	tablat,postinc0
   832  003544  50E5               	movf	postdec1,w,c
   833  003546  50E1               	movf	fsr1l,w,c
   834  003548  E1FA               	bnz	copy_data0
   835                           
   836                           ; Initialize objects allocated to COMRAM (2 bytes)
   837                           ; load TBLPTR registers with __pidataCOMRAM
   838  00354A  0E64               	movlw	low __pidataCOMRAM
   839  00354C  6EF6               	movwf	tblptrl,c
   840  00354E  0E3A               	movlw	high __pidataCOMRAM
   841  003550  6EF7               	movwf	tblptrh,c
   842  003552  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   843  003554  6EF8               	movwf	tblptru,c
   844  003556  0009               	tblrd		*+	;fetch initializer
   845  003558  CFF5 F076          	movff	tablat,__pdataCOMRAM
   846  00355C  0009               	tblrd		*+	;fetch initializer
   847  00355E  CFF5 F077          	movff	tablat,__pdataCOMRAM+1
   848                           
   849                           ; Clear objects allocated to BANK1 (47 bytes)
   850  003562  EE01  F000         	lfsr	0,__pbssBANK1
   851  003566  0E2F               	movlw	47
   852  003568                     clear_0:
   853  003568  6AEE               	clrf	postinc0,c
   854  00356A  06E8               	decf	wreg,f,c
   855  00356C  E1FD               	bnz	clear_0
   856  00356E                     end_of_initialization:
   857                           	opt stack 0
   858  00356E                     __end_of__initialization:
   859                           	opt stack 0
   860  00356E  9078               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   861  003570  9278               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   862  003572  0E00               	movlw	low (__Lmediumconst shr (0+16))
   863  003574  6EF8               	movwf	tblptru,c
   864  003576  0100               	movlb	0
   865  003578  EFD7  F016         	goto	_main	;jump to C main() function
   866                           tblptru	equ	0xFF8
   867                           tblptrh	equ	0xFF7
   868                           tblptrl	equ	0xFF6
   869                           tablat	equ	0xFF5
   870                           postinc0	equ	0xFEE
   871                           wreg	equ	0xFE8
   872                           postdec1	equ	0xFE5
   873                           fsr1l	equ	0xFE1
   874                           
   875                           	psect	dataCOMRAM
   876  000076                     __pdataCOMRAM:
   877                           	opt stack 0
   878  000076                     _redirectAngle_C:
   879                           	opt stack 0
   880  000076                     	ds	2
   881                           tblptru	equ	0xFF8
   882                           tblptrh	equ	0xFF7
   883                           tblptrl	equ	0xFF6
   884                           tablat	equ	0xFF5
   885                           postinc0	equ	0xFEE
   886                           wreg	equ	0xFE8
   887                           postdec1	equ	0xFE5
   888                           fsr1l	equ	0xFE1
   889                           
   890                           	psect	bssBANK1
   891  000100                     __pbssBANK1:
   892                           	opt stack 0
   893  000100                     _pulse:
   894                           	opt stack 0
   895  000100                     	ds	16
   896  000110                     _pin:
   897                           	opt stack 0
   898  000110                     	ds	8
   899  000118                     _port:
   900                           	opt stack 0
   901  000118                     	ds	8
   902  000120                     _padPin3:
   903                           	opt stack 0
   904  000120                     	ds	4
   905  000124                     _V_LIM_9V:
   906                           	opt stack 0
   907  000124                     	ds	3
   908  000127                     _V_LIM_AA:
   909                           	opt stack 0
   910  000127                     	ds	3
   911  00012A                     _V_LIM_C:
   912                           	opt stack 0
   913  00012A                     	ds	3
   914  00012D                     _switchFlag:
   915                           	opt stack 0
   916  00012D                     	ds	2
   917                           tblptru	equ	0xFF8
   918                           tblptrh	equ	0xFF7
   919                           tblptrl	equ	0xFF6
   920                           tablat	equ	0xFF5
   921                           postinc0	equ	0xFEE
   922                           wreg	equ	0xFE8
   923                           postdec1	equ	0xFE5
   924                           fsr1l	equ	0xFE1
   925                           
   926                           	psect	dataBANK1
   927  00012F                     __pdataBANK1:
   928                           	opt stack 0
   929  00012F                     _conveyorServo:
   930                           	opt stack 0
   931  00012F                     	ds	6
   932  000135                     _padServo:
   933                           	opt stack 0
   934  000135                     	ds	6
   935  00013B                     _redirectingServo:
   936                           	opt stack 0
   937  00013B                     	ds	6
   938  000141                     _AA_float:
   939                           	opt stack 0
   940  000141                     	ds	4
   941  000145                     _cylinderMotor:
   942                           	opt stack 0
   943  000145                     	ds	4
   944  000149                     _padPin1:
   945                           	opt stack 0
   946  000149                     	ds	4
   947  00014D                     _padPin2:
   948                           	opt stack 0
   949  00014D                     	ds	4
   950  000151                     _padAngle_CLOSE:
   951                           	opt stack 0
   952  000151                     	ds	2
   953  000153                     _padAngle_NEUTRAL:
   954                           	opt stack 0
   955  000153                     	ds	2
   956  000155                     _padAngle_OPEN:
   957                           	opt stack 0
   958  000155                     	ds	2
   959  000157                     _redirectAngle_9V:
   960                           	opt stack 0
   961  000157                     	ds	2
   962  000159                     _redirectAngle_AA:
   963                           	opt stack 0
   964  000159                     	ds	2
   965  00015B                     _redirectAngle_OTHER:
   966                           	opt stack 0
   967  00015B                     	ds	2
   968                           tblptru	equ	0xFF8
   969                           tblptrh	equ	0xFF7
   970                           tblptrl	equ	0xFF6
   971                           tablat	equ	0xFF5
   972                           postinc0	equ	0xFEE
   973                           wreg	equ	0xFE8
   974                           postdec1	equ	0xFE5
   975                           fsr1l	equ	0xFE1
   976                           
   977                           	psect	cstackBANK1
   978  00015D                     __pcstackBANK1:
   979                           	opt stack 0
   980  00015D                     sortBattery@V_float:
   981                           	opt stack 0
   982                           
   983                           ; 3 bytes @ 0x0
   984  00015D                     	ds	3
   985  000160                     sortBattery@Vcc:
   986                           	opt stack 0
   987                           
   988                           ; 3 bytes @ 0x3
   989  000160                     	ds	3
   990  000163                     sortBattery@resolution:
   991                           	opt stack 0
   992                           
   993                           ; 3 bytes @ 0x6
   994  000163                     	ds	3
   995  000166                     sortBattery@targetAngle:
   996                           	opt stack 0
   997                           
   998                           ; 2 bytes @ 0x9
   999  000166                     	ds	2
  1000  000168                     sortBattery@signal:
  1001                           	opt stack 0
  1002                           
  1003                           ; 2 bytes @ 0xB
  1004  000168                     	ds	2
  1005  00016A                     sortBattery@V:
  1006                           	opt stack 0
  1007                           
  1008                           ; 3 bytes @ 0xD
  1009  00016A                     	ds	3
  1010                           tblptru	equ	0xFF8
  1011                           tblptrh	equ	0xFF7
  1012                           tblptrl	equ	0xFF6
  1013                           tablat	equ	0xFF5
  1014                           postinc0	equ	0xFEE
  1015                           wreg	equ	0xFE8
  1016                           postdec1	equ	0xFE5
  1017                           fsr1l	equ	0xFE1
  1018                           
  1019                           	psect	cstackBANK0
  1020  000080                     __pcstackBANK0:
  1021                           	opt stack 0
  1022  000080                     ?_digitalRead:
  1023                           	opt stack 0
  1024  000080                     ?___awmod:
  1025                           	opt stack 0
  1026  000080                     ?___ftpack:
  1027                           	opt stack 0
  1028  000080                     ?___ftneg:
  1029                           	opt stack 0
  1030  000080                     ?_analogRead:
  1031                           	opt stack 0
  1032  000080                     ?__tdiv_to_l_:
  1033                           	opt stack 0
  1034  000080                     ?__div_to_l_:
  1035                           	opt stack 0
  1036  000080                     ?___lldiv:
  1037                           	opt stack 0
  1038  000080                     lcdNibble@temp:
  1039                           	opt stack 0
  1040  000080                     readKeypad@key:
  1041                           	opt stack 0
  1042  000080                     digitalRead@port:
  1043                           	opt stack 0
  1044  000080                     digitalWrite@port:
  1045                           	opt stack 0
  1046  000080                     analogRead@channel:
  1047                           	opt stack 0
  1048  000080                     initTimer@timer:
  1049                           	opt stack 0
  1050  000080                     startTimer@timer:
  1051                           	opt stack 0
  1052  000080                     stopServo@timer:
  1053                           	opt stack 0
  1054  000080                     ___awmod@dividend:
  1055                           	opt stack 0
  1056  000080                     __div_to_l_@f1:
  1057                           	opt stack 0
  1058  000080                     ___ftpack@arg:
  1059                           	opt stack 0
  1060  000080                     __tdiv_to_l_@f1:
  1061                           	opt stack 0
  1062  000080                     ___ftge@ff1:
  1063                           	opt stack 0
  1064  000080                     ___ftneg@f1:
  1065                           	opt stack 0
  1066  000080                     ___lldiv@dividend:
  1067                           	opt stack 0
  1068                           
  1069                           ; 4 bytes @ 0x0
  1070  000080                     	ds	1
  1071  000081                     lcdNibble@data:
  1072                           	opt stack 0
  1073                           
  1074                           ; 1 bytes @ 0x1
  1075  000081                     	ds	1
  1076  000082                     ??_stopServo:
  1077  000082                     ??_lcdInst:
  1078  000082                     ??_initTimer:
  1079  000082                     digitalRead@pin:
  1080                           	opt stack 0
  1081  000082                     digitalWrite@pin:
  1082                           	opt stack 0
  1083  000082                     ___awmod@divisor:
  1084                           	opt stack 0
  1085  000082                     startTimer@val:
  1086                           	opt stack 0
  1087                           
  1088                           ; 4 bytes @ 0x2
  1089  000082                     	ds	1
  1090  000083                     lcdInst@data:
  1091                           	opt stack 0
  1092  000083                     ___ftpack@exp:
  1093                           	opt stack 0
  1094  000083                     __div_to_l_@f2:
  1095                           	opt stack 0
  1096  000083                     __tdiv_to_l_@f2:
  1097                           	opt stack 0
  1098  000083                     ___ftge@ff2:
  1099                           	opt stack 0
  1100                           
  1101                           ; 3 bytes @ 0x3
  1102  000083                     	ds	1
  1103  000084                     ??_initLCD:
  1104  000084                     ??_digitalRead:
  1105  000084                     ??_analogRead:
  1106  000084                     putch@data:
  1107                           	opt stack 0
  1108  000084                     ___awmod@counter:
  1109                           	opt stack 0
  1110  000084                     ___ftpack@sign:
  1111                           	opt stack 0
  1112  000084                     digitalWrite@val:
  1113                           	opt stack 0
  1114  000084                     ___lldiv@divisor:
  1115                           	opt stack 0
  1116                           
  1117                           ; 4 bytes @ 0x4
  1118  000084                     	ds	1
  1119  000085                     ??___ftpack:
  1120  000085                     ___awmod@sign:
  1121                           	opt stack 0
  1122                           
  1123                           ; 1 bytes @ 0x5
  1124  000085                     	ds	1
  1125  000086                     ??_digitalWrite:
  1126  000086                     ??__tdiv_to_l_:
  1127  000086                     ??_startTimer:
  1128  000086                     ??___ftge:
  1129  000086                     ?___awdiv:
  1130                           	opt stack 0
  1131  000086                     ___awdiv@dividend:
  1132                           	opt stack 0
  1133  000086                     __div_to_l_@quot:
  1134                           	opt stack 0
  1135                           
  1136                           ; 4 bytes @ 0x6
  1137  000086                     	ds	2
  1138  000088                     ?___altoft:
  1139                           	opt stack 0
  1140  000088                     ?___awtoft:
  1141                           	opt stack 0
  1142  000088                     ?___lltoft:
  1143                           	opt stack 0
  1144  000088                     ___awdiv@divisor:
  1145                           	opt stack 0
  1146  000088                     ___awtoft@c:
  1147                           	opt stack 0
  1148  000088                     ___altoft@c:
  1149                           	opt stack 0
  1150  000088                     ___lldiv@quotient:
  1151                           	opt stack 0
  1152  000088                     ___lltoft@c:
  1153                           	opt stack 0
  1154                           
  1155                           ; 4 bytes @ 0x8
  1156  000088                     	ds	1
  1157  000089                     __tdiv_to_l_@quot:
  1158                           	opt stack 0
  1159                           
  1160                           ; 4 bytes @ 0x9
  1161  000089                     	ds	1
  1162  00008A                     ___awdiv@counter:
  1163                           	opt stack 0
  1164  00008A                     __div_to_l_@cntr:
  1165                           	opt stack 0
  1166                           
  1167                           ; 1 bytes @ 0xA
  1168  00008A                     	ds	1
  1169  00008B                     ___awdiv@sign:
  1170                           	opt stack 0
  1171  00008B                     ___awtoft@sign:
  1172                           	opt stack 0
  1173  00008B                     __div_to_l_@exp1:
  1174                           	opt stack 0
  1175                           
  1176                           ; 1 bytes @ 0xB
  1177  00008B                     	ds	1
  1178  00008C                     ??___altoft:
  1179  00008C                     ??___lltoft:
  1180  00008C                     ___lldiv@counter:
  1181                           	opt stack 0
  1182  00008C                     ___awdiv@quotient:
  1183                           	opt stack 0
  1184                           
  1185                           ; 2 bytes @ 0xC
  1186  00008C                     	ds	1
  1187  00008D                     ?___llmod:
  1188                           	opt stack 0
  1189  00008D                     __tdiv_to_l_@cntr:
  1190                           	opt stack 0
  1191  00008D                     ___llmod@dividend:
  1192                           	opt stack 0
  1193                           
  1194                           ; 4 bytes @ 0xD
  1195  00008D                     	ds	1
  1196  00008E                     ?___wmul:
  1197                           	opt stack 0
  1198  00008E                     __tdiv_to_l_@exp1:
  1199                           	opt stack 0
  1200  00008E                     ___wmul@multiplier:
  1201                           	opt stack 0
  1202                           
  1203                           ; 2 bytes @ 0xE
  1204  00008E                     	ds	2
  1205  000090                     ___altoft@exp:
  1206                           	opt stack 0
  1207  000090                     ___lltoft@exp:
  1208                           	opt stack 0
  1209  000090                     ___wmul@multiplicand:
  1210                           	opt stack 0
  1211                           
  1212                           ; 2 bytes @ 0x10
  1213  000090                     	ds	1
  1214  000091                     ___altoft@sign:
  1215                           	opt stack 0
  1216  000091                     ___llmod@divisor:
  1217                           	opt stack 0
  1218                           
  1219                           ; 4 bytes @ 0x11
  1220  000091                     	ds	1
  1221  000092                     ?___ftdiv:
  1222                           	opt stack 0
  1223  000092                     ___wmul@product:
  1224                           	opt stack 0
  1225  000092                     ___ftdiv@f1:
  1226                           	opt stack 0
  1227                           
  1228                           ; 3 bytes @ 0x12
  1229  000092                     	ds	3
  1230  000095                     ___llmod@counter:
  1231                           	opt stack 0
  1232  000095                     ___ftdiv@f2:
  1233                           	opt stack 0
  1234                           
  1235                           ; 3 bytes @ 0x15
  1236  000095                     	ds	3
  1237  000098                     ??___ftdiv:
  1238                           
  1239                           ; 1 bytes @ 0x18
  1240  000098                     	ds	3
  1241  00009B                     ___ftdiv@cntr:
  1242                           	opt stack 0
  1243                           
  1244                           ; 1 bytes @ 0x1B
  1245  00009B                     	ds	1
  1246  00009C                     ___ftdiv@f3:
  1247                           	opt stack 0
  1248                           
  1249                           ; 3 bytes @ 0x1C
  1250  00009C                     	ds	3
  1251  00009F                     ___ftdiv@exp:
  1252                           	opt stack 0
  1253                           
  1254                           ; 1 bytes @ 0x1F
  1255  00009F                     	ds	1
  1256  0000A0                     ___ftdiv@sign:
  1257                           	opt stack 0
  1258                           
  1259                           ; 1 bytes @ 0x20
  1260  0000A0                     	ds	1
  1261  0000A1                     ?___ftmul:
  1262                           	opt stack 0
  1263  0000A1                     ___ftmul@f1:
  1264                           	opt stack 0
  1265                           
  1266                           ; 3 bytes @ 0x21
  1267  0000A1                     	ds	3
  1268  0000A4                     ___ftmul@f2:
  1269                           	opt stack 0
  1270                           
  1271                           ; 3 bytes @ 0x24
  1272  0000A4                     	ds	3
  1273  0000A7                     ??___ftmul:
  1274                           
  1275                           ; 1 bytes @ 0x27
  1276  0000A7                     	ds	3
  1277  0000AA                     ___ftmul@exp:
  1278                           	opt stack 0
  1279                           
  1280                           ; 1 bytes @ 0x2A
  1281  0000AA                     	ds	1
  1282  0000AB                     ___ftmul@f3_as_product:
  1283                           	opt stack 0
  1284                           
  1285                           ; 3 bytes @ 0x2B
  1286  0000AB                     	ds	3
  1287  0000AE                     ___ftmul@cntr:
  1288                           	opt stack 0
  1289                           
  1290                           ; 1 bytes @ 0x2E
  1291  0000AE                     	ds	1
  1292  0000AF                     ___ftmul@sign:
  1293                           	opt stack 0
  1294                           
  1295                           ; 1 bytes @ 0x2F
  1296  0000AF                     	ds	1
  1297  0000B0                     ?_fround:
  1298                           	opt stack 0
  1299  0000B0                     ?_scale:
  1300                           	opt stack 0
  1301                           
  1302                           ; 3 bytes @ 0x30
  1303  0000B0                     	ds	3
  1304  0000B3                     _fround$1298:
  1305                           	opt stack 0
  1306  0000B3                     _scale$1299:
  1307                           	opt stack 0
  1308                           
  1309                           ; 3 bytes @ 0x33
  1310  0000B3                     	ds	3
  1311  0000B6                     scale@scl:
  1312                           	opt stack 0
  1313  0000B6                     _fround$1297:
  1314                           	opt stack 0
  1315                           
  1316                           ; 3 bytes @ 0x36
  1317  0000B6                     	ds	3
  1318  0000B9                     fround@prec:
  1319                           	opt stack 0
  1320                           
  1321                           ; 1 bytes @ 0x39
  1322  0000B9                     	ds	1
  1323  0000BA                     ?___ftadd:
  1324                           	opt stack 0
  1325  0000BA                     ___ftadd@f1:
  1326                           	opt stack 0
  1327                           
  1328                           ; 3 bytes @ 0x3A
  1329  0000BA                     	ds	3
  1330  0000BD                     ___ftadd@f2:
  1331                           	opt stack 0
  1332                           
  1333                           ; 3 bytes @ 0x3D
  1334  0000BD                     	ds	3
  1335  0000C0                     ??___ftadd:
  1336                           
  1337                           ; 1 bytes @ 0x40
  1338  0000C0                     	ds	3
  1339  0000C3                     ___ftadd@sign:
  1340                           	opt stack 0
  1341                           
  1342                           ; 1 bytes @ 0x43
  1343  0000C3                     	ds	1
  1344  0000C4                     ___ftadd@exp2:
  1345                           	opt stack 0
  1346                           
  1347                           ; 1 bytes @ 0x44
  1348  0000C4                     	ds	1
  1349  0000C5                     ___ftadd@exp1:
  1350                           	opt stack 0
  1351                           
  1352                           ; 1 bytes @ 0x45
  1353  0000C5                     	ds	1
  1354  0000C6                     ?___ftsub:
  1355                           	opt stack 0
  1356  0000C6                     ?___fttol:
  1357                           	opt stack 0
  1358  0000C6                     ___ftsub@f1:
  1359                           	opt stack 0
  1360  0000C6                     ___fttol@f1:
  1361                           	opt stack 0
  1362                           
  1363                           ; 3 bytes @ 0x46
  1364  0000C6                     	ds	3
  1365  0000C9                     ___ftsub@f2:
  1366                           	opt stack 0
  1367                           
  1368                           ; 3 bytes @ 0x49
  1369  0000C9                     	ds	1
  1370  0000CA                     ??___fttol:
  1371                           
  1372                           ; 1 bytes @ 0x4A
  1373  0000CA                     	ds	2
  1374  0000CC                     
  1375                           ; 1 bytes @ 0x4C
  1376  0000CC                     	ds	3
  1377  0000CF                     ___fttol@sign1:
  1378                           	opt stack 0
  1379                           
  1380                           ; 1 bytes @ 0x4F
  1381  0000CF                     	ds	1
  1382  0000D0                     ___fttol@lval:
  1383                           	opt stack 0
  1384                           
  1385                           ; 4 bytes @ 0x50
  1386  0000D0                     	ds	4
  1387  0000D4                     ___fttol@exp1:
  1388                           	opt stack 0
  1389                           
  1390                           ; 1 bytes @ 0x54
  1391  0000D4                     	ds	1
  1392  0000D5                     ?_printf:
  1393                           	opt stack 0
  1394  0000D5                     ?_angleToPulse:
  1395                           	opt stack 0
  1396  0000D5                     angleToPulse@angle:
  1397                           	opt stack 0
  1398  0000D5                     printf@f:
  1399                           	opt stack 0
  1400                           
  1401                           ; 2 bytes @ 0x55
  1402  0000D5                     	ds	4
  1403  0000D9                     ??_angleToPulse:
  1404                           
  1405                           ; 1 bytes @ 0x59
  1406  0000D9                     	ds	3
  1407  0000DC                     ??_printf:
  1408                           
  1409                           ; 1 bytes @ 0x5C
  1410  0000DC                     	ds	1
  1411  0000DD                     angleToPulse@offset:
  1412                           	opt stack 0
  1413                           
  1414                           ; 4 bytes @ 0x5D
  1415  0000DD                     	ds	4
  1416  0000E1                     angleToPulse@a180:
  1417                           	opt stack 0
  1418                           
  1419                           ; 4 bytes @ 0x61
  1420  0000E1                     	ds	1
  1421  0000E2                     _printf$1300:
  1422                           	opt stack 0
  1423                           
  1424                           ; 3 bytes @ 0x62
  1425  0000E2                     	ds	3
  1426  0000E5                     printf@idx:
  1427                           	opt stack 0
  1428  0000E5                     _angleToPulse$1296:
  1429                           	opt stack 0
  1430                           
  1431                           ; 3 bytes @ 0x65
  1432  0000E5                     	ds	1
  1433  0000E6                     printf@ap:
  1434                           	opt stack 0
  1435                           
  1436                           ; 2 bytes @ 0x66
  1437  0000E6                     	ds	2
  1438  0000E8                     printf@flag:
  1439                           	opt stack 0
  1440  0000E8                     angleToPulse@a000:
  1441                           	opt stack 0
  1442                           
  1443                           ; 4 bytes @ 0x68
  1444  0000E8                     	ds	2
  1445  0000EA                     printf@prec:
  1446                           	opt stack 0
  1447                           
  1448                           ; 2 bytes @ 0x6A
  1449  0000EA                     	ds	2
  1450  0000EC                     setAngle@timer:
  1451                           	opt stack 0
  1452  0000EC                     printf@exp:
  1453                           	opt stack 0
  1454                           
  1455                           ; 2 bytes @ 0x6C
  1456  0000EC                     	ds	2
  1457  0000EE                     setAngle@angle:
  1458                           	opt stack 0
  1459  0000EE                     printf@tmpval:
  1460                           	opt stack 0
  1461                           
  1462                           ; 4 bytes @ 0x6E
  1463  0000EE                     	ds	2
  1464  0000F0                     ??_setAngle:
  1465                           
  1466                           ; 1 bytes @ 0x70
  1467  0000F0                     	ds	2
  1468  0000F2                     printf@val:
  1469                           	opt stack 0
  1470                           
  1471                           ; 4 bytes @ 0x72
  1472  0000F2                     	ds	4
  1473  0000F6                     initServo@timer:
  1474                           	opt stack 0
  1475  0000F6                     printf@fval:
  1476                           	opt stack 0
  1477                           
  1478                           ; 3 bytes @ 0x76
  1479  0000F6                     	ds	2
  1480  0000F8                     initServo@po:
  1481                           	opt stack 0
  1482                           
  1483                           ; 2 bytes @ 0x78
  1484  0000F8                     	ds	1
  1485  0000F9                     printf@c:
  1486                           	opt stack 0
  1487                           
  1488                           ; 1 bytes @ 0x79
  1489  0000F9                     	ds	1
  1490  0000FA                     runMenu@key:
  1491                           	opt stack 0
  1492  0000FA                     pause@message:
  1493                           	opt stack 0
  1494  0000FA                     initServo@pi:
  1495                           	opt stack 0
  1496                           
  1497                           ; 2 bytes @ 0x7A
  1498  0000FA                     	ds	1
  1499  0000FB                     showInterface@key:
  1500                           	opt stack 0
  1501                           
  1502                           ; 1 bytes @ 0x7B
  1503  0000FB                     	ds	1
  1504  0000FC                     initServo@angle:
  1505                           	opt stack 0
  1506                           
  1507                           ; 2 bytes @ 0x7C
  1508  0000FC                     	ds	2
  1509  0000FE                     ??_sortBattery:
  1510                           
  1511                           ; 1 bytes @ 0x7E
  1512  0000FE                     	ds	2
  1513  000100                     tblptru	equ	0xFF8
  1514                           tblptrh	equ	0xFF7
  1515                           tblptrl	equ	0xFF6
  1516                           tablat	equ	0xFF5
  1517                           postinc0	equ	0xFEE
  1518                           wreg	equ	0xFE8
  1519                           postdec1	equ	0xFE5
  1520                           fsr1l	equ	0xFE1
  1521                           
  1522                           ; 1 bytes @ 0x80
  1523                           
  1524                           	psect	cstackCOMRAM
  1525  000001                     __pcstackCOMRAM:
  1526                           	opt stack 0
  1527  000001                     ?i2_digitalRead:
  1528                           	opt stack 0
  1529  000001                     ?i2___ftpack:
  1530                           	opt stack 0
  1531  000001                     i2digitalRead@port:
  1532                           	opt stack 0
  1533  000001                     i2digitalWrite@port:
  1534                           	opt stack 0
  1535  000001                     i2startTimer@timer:
  1536                           	opt stack 0
  1537  000001                     i2___ftpack@arg:
  1538                           	opt stack 0
  1539                           
  1540                           ; 3 bytes @ 0x0
  1541  000001                     	ds	2
  1542  000003                     i2digitalRead@pin:
  1543                           	opt stack 0
  1544  000003                     i2digitalWrite@pin:
  1545                           	opt stack 0
  1546  000003                     i2startTimer@val:
  1547                           	opt stack 0
  1548                           
  1549                           ; 4 bytes @ 0x2
  1550  000003                     	ds	1
  1551  000004                     i2___ftpack@exp:
  1552                           	opt stack 0
  1553                           
  1554                           ; 1 bytes @ 0x3
  1555  000004                     	ds	1
  1556  000005                     ??i2_digitalRead:
  1557  000005                     i2___ftpack@sign:
  1558                           	opt stack 0
  1559  000005                     i2digitalWrite@val:
  1560                           	opt stack 0
  1561                           
  1562                           ; 2 bytes @ 0x4
  1563  000005                     	ds	1
  1564  000006                     ??i2___ftpack:
  1565                           
  1566                           ; 1 bytes @ 0x5
  1567  000006                     	ds	1
  1568  000007                     ??i2_digitalWrite:
  1569  000007                     ??i2_startTimer:
  1570                           
  1571                           ; 1 bytes @ 0x6
  1572  000007                     	ds	2
  1573  000009                     ?i2___altoft:
  1574                           	opt stack 0
  1575  000009                     ?i2___awtoft:
  1576                           	opt stack 0
  1577  000009                     i2___awtoft@c:
  1578                           	opt stack 0
  1579  000009                     i2___altoft@c:
  1580                           	opt stack 0
  1581                           
  1582                           ; 4 bytes @ 0x8
  1583  000009                     	ds	1
  1584  00000A                     ??_servoInterruptService:
  1585                           
  1586                           ; 1 bytes @ 0x9
  1587  00000A                     	ds	2
  1588  00000C                     i2___awtoft@sign:
  1589                           	opt stack 0
  1590  00000C                     servoInterruptService@flags:
  1591                           	opt stack 0
  1592                           
  1593                           ; 8 bytes @ 0xB
  1594  00000C                     	ds	1
  1595  00000D                     ??i2___altoft:
  1596  00000D                     ?i2___ftdiv:
  1597                           	opt stack 0
  1598  00000D                     i2___ftdiv@f1:
  1599                           	opt stack 0
  1600                           
  1601                           ; 3 bytes @ 0xC
  1602  00000D                     	ds	3
  1603  000010                     i2___ftdiv@f2:
  1604                           	opt stack 0
  1605                           
  1606                           ; 3 bytes @ 0xF
  1607  000010                     	ds	1
  1608  000011                     i2___altoft@exp:
  1609                           	opt stack 0
  1610                           
  1611                           ; 1 bytes @ 0x10
  1612  000011                     	ds	1
  1613  000012                     i2___altoft@sign:
  1614                           	opt stack 0
  1615                           
  1616                           ; 1 bytes @ 0x11
  1617  000012                     	ds	1
  1618  000013                     ??i2___ftdiv:
  1619                           
  1620                           ; 1 bytes @ 0x12
  1621  000013                     	ds	1
  1622  000014                     servoInterruptService@i:
  1623                           	opt stack 0
  1624                           
  1625                           ; 2 bytes @ 0x13
  1626  000014                     	ds	2
  1627  000016                     i2___ftdiv@cntr:
  1628                           	opt stack 0
  1629                           
  1630                           ; 1 bytes @ 0x15
  1631  000016                     	ds	1
  1632  000017                     i2___ftdiv@f3:
  1633                           	opt stack 0
  1634                           
  1635                           ; 3 bytes @ 0x16
  1636  000017                     	ds	3
  1637  00001A                     i2___ftdiv@exp:
  1638                           	opt stack 0
  1639                           
  1640                           ; 1 bytes @ 0x19
  1641  00001A                     	ds	1
  1642  00001B                     i2___ftdiv@sign:
  1643                           	opt stack 0
  1644                           
  1645                           ; 1 bytes @ 0x1A
  1646  00001B                     	ds	1
  1647  00001C                     ?i2___ftmul:
  1648                           	opt stack 0
  1649  00001C                     i2___ftmul@f1:
  1650                           	opt stack 0
  1651                           
  1652                           ; 3 bytes @ 0x1B
  1653  00001C                     	ds	3
  1654  00001F                     i2___ftmul@f2:
  1655                           	opt stack 0
  1656                           
  1657                           ; 3 bytes @ 0x1E
  1658  00001F                     	ds	3
  1659  000022                     ??i2___ftmul:
  1660                           
  1661                           ; 1 bytes @ 0x21
  1662  000022                     	ds	3
  1663  000025                     i2___ftmul@exp:
  1664                           	opt stack 0
  1665                           
  1666                           ; 1 bytes @ 0x24
  1667  000025                     	ds	1
  1668  000026                     i2___ftmul@f3_as_product:
  1669                           	opt stack 0
  1670                           
  1671                           ; 3 bytes @ 0x25
  1672  000026                     	ds	3
  1673  000029                     i2___ftmul@cntr:
  1674                           	opt stack 0
  1675                           
  1676                           ; 1 bytes @ 0x28
  1677  000029                     	ds	1
  1678  00002A                     i2___ftmul@sign:
  1679                           	opt stack 0
  1680                           
  1681                           ; 1 bytes @ 0x29
  1682  00002A                     	ds	1
  1683  00002B                     ?i2___ftadd:
  1684                           	opt stack 0
  1685  00002B                     i2___ftadd@f1:
  1686                           	opt stack 0
  1687                           
  1688                           ; 3 bytes @ 0x2A
  1689  00002B                     	ds	3
  1690  00002E                     i2___ftadd@f2:
  1691                           	opt stack 0
  1692                           
  1693                           ; 3 bytes @ 0x2D
  1694  00002E                     	ds	3
  1695  000031                     ??i2___ftadd:
  1696                           
  1697                           ; 1 bytes @ 0x30
  1698  000031                     	ds	3
  1699  000034                     i2___ftadd@sign:
  1700                           	opt stack 0
  1701                           
  1702                           ; 1 bytes @ 0x33
  1703  000034                     	ds	1
  1704  000035                     i2___ftadd@exp2:
  1705                           	opt stack 0
  1706                           
  1707                           ; 1 bytes @ 0x34
  1708  000035                     	ds	1
  1709  000036                     i2___ftadd@exp1:
  1710                           	opt stack 0
  1711                           
  1712                           ; 1 bytes @ 0x35
  1713  000036                     	ds	1
  1714  000037                     ?i2___fttol:
  1715                           	opt stack 0
  1716  000037                     i2___fttol@f1:
  1717                           	opt stack 0
  1718                           
  1719                           ; 3 bytes @ 0x36
  1720  000037                     	ds	4
  1721  00003B                     ??i2___fttol:
  1722                           
  1723                           ; 1 bytes @ 0x3A
  1724  00003B                     	ds	5
  1725  000040                     i2___fttol@sign1:
  1726                           	opt stack 0
  1727                           
  1728                           ; 1 bytes @ 0x3F
  1729  000040                     	ds	1
  1730  000041                     i2___fttol@lval:
  1731                           	opt stack 0
  1732                           
  1733                           ; 4 bytes @ 0x40
  1734  000041                     	ds	4
  1735  000045                     i2___fttol@exp1:
  1736                           	opt stack 0
  1737                           
  1738                           ; 1 bytes @ 0x44
  1739  000045                     	ds	1
  1740  000046                     ?i2_angleToPulse:
  1741                           	opt stack 0
  1742  000046                     i2angleToPulse@angle:
  1743                           	opt stack 0
  1744                           
  1745                           ; 2 bytes @ 0x45
  1746  000046                     	ds	4
  1747  00004A                     ??i2_angleToPulse:
  1748                           
  1749                           ; 1 bytes @ 0x49
  1750  00004A                     	ds	4
  1751  00004E                     i2angleToPulse@offset:
  1752                           	opt stack 0
  1753                           
  1754                           ; 4 bytes @ 0x4D
  1755  00004E                     	ds	4
  1756  000052                     i2angleToPulse@a180:
  1757                           	opt stack 0
  1758                           
  1759                           ; 4 bytes @ 0x51
  1760  000052                     	ds	4
  1761  000056                     i2_angleToPulse$1392:
  1762                           	opt stack 0
  1763                           
  1764                           ; 3 bytes @ 0x55
  1765  000056                     	ds	3
  1766  000059                     i2angleToPulse@a000:
  1767                           	opt stack 0
  1768                           
  1769                           ; 4 bytes @ 0x58
  1770  000059                     	ds	4
  1771  00005D                     i2setAngle@timer:
  1772                           	opt stack 0
  1773                           
  1774                           ; 2 bytes @ 0x5C
  1775  00005D                     	ds	2
  1776  00005F                     i2setAngle@angle:
  1777                           	opt stack 0
  1778                           
  1779                           ; 2 bytes @ 0x5E
  1780  00005F                     	ds	2
  1781  000061                     ??i2_setAngle:
  1782                           
  1783                           ; 1 bytes @ 0x60
  1784  000061                     	ds	6
  1785  000067                     ??_service:
  1786                           
  1787                           ; 1 bytes @ 0x66
  1788  000067                     	ds	14
  1789  000075                     service@key:
  1790                           	opt stack 0
  1791                           
  1792                           ; 1 bytes @ 0x74
  1793  000075                     	ds	1
  1794                           tblptru	equ	0xFF8
  1795                           tblptrh	equ	0xFF7
  1796                           tblptrl	equ	0xFF6
  1797                           tablat	equ	0xFF5
  1798                           postinc0	equ	0xFEE
  1799                           wreg	equ	0xFE8
  1800                           postdec1	equ	0xFE5
  1801                           fsr1l	equ	0xFE1
  1802                           
  1803 ;;
  1804 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1805 ;;
  1806 ;; *************** function _main *****************
  1807 ;; Defined at:
  1808 ;;		line 57 in file "main.c"
  1809 ;; Parameters:    Size  Location     Type
  1810 ;;		None
  1811 ;; Auto vars:     Size  Location     Type
  1812 ;;		None
  1813 ;; Return value:  Size  Location     Type
  1814 ;;                  1    wreg      void 
  1815 ;; Registers used:
  1816 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1817 ;; Tracked objects:
  1818 ;;		On entry : 0/0
  1819 ;;		On exit  : 0/0
  1820 ;;		Unchanged: 0/0
  1821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1825 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1826 ;;Total ram usage:        0 bytes
  1827 ;; Hardware stack levels required when called:   12
  1828 ;; This function calls:
  1829 ;;		_initLCD
  1830 ;;		_initServo
  1831 ;;		_lcdClear
  1832 ;;		_pinSetup
  1833 ;;		_printf
  1834 ;;		_showInterface
  1835 ;;		_sortBattery
  1836 ;; This function is called by:
  1837 ;;		Startup code after reset
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           	psect	text0
  1842  002DAE                     __ptext0:
  1843                           	opt stack 0
  1844  002DAE                     _main:
  1845                           	opt stack 19
  1846                           
  1847                           ;main.c: 58: pinSetup();
  1848                           
  1849                           ;incstack = 0
  1850  002DAE  ECE4  F01B         	call	_pinSetup	;wreg free
  1851                           
  1852                           ;main.c: 59: initLCD();
  1853  002DB2  EC7C  F01B         	call	_initLCD	;wreg free
  1854                           
  1855                           ;main.c: 63: (INTCONbits.GIE = 0);
  1856                           
  1857                           ;main.c: 62: while(1){
  1858  002DB6  9EF2               	bcf	intcon,7,c	;volatile
  1859                           
  1860                           ;main.c: 64: showInterface();
  1861  002DB8  ECE9  F012         	call	_showInterface	;wreg free
  1862                           
  1863                           ;main.c: 65: (INTCONbits.GIE = 1);
  1864  002DBC  8EF2               	bsf	intcon,7,c	;volatile
  1865                           
  1866                           ;main.c: 68: initServo(conveyorServo[0], conveyorServo[1], conveyorServo[2], 90);
  1867  002DBE  C12F  F0F6         	movff	_conveyorServo,initServo@timer
  1868  002DC2  C130  F0F7         	movff	_conveyorServo+1,initServo@timer+1
  1869  002DC6  C131  F0F8         	movff	_conveyorServo+2,initServo@po
  1870  002DCA  C132  F0F9         	movff	_conveyorServo+3,initServo@po+1
  1871  002DCE  C133  F0FA         	movff	_conveyorServo+4,initServo@pi
  1872  002DD2  C134  F0FB         	movff	_conveyorServo+5,initServo@pi+1
  1873  002DD6  0E00               	movlw	0
  1874  002DD8  0100               	movlb	0	; () banked
  1875  002DDA  6FFD               	movwf	(initServo@angle+1)& (0+255),b
  1876  002DDC  0E5A               	movlw	90
  1877  002DDE  6FFC               	movwf	initServo@angle& (0+255),b
  1878  002DE0  EC6D  F019         	call	_initServo	;wreg free
  1879                           
  1880                           ;main.c: 69: initServo(padServo[0], padServo[1], padServo[2], padAngle_NEUTRAL);
  1881  002DE4  C135  F0F6         	movff	_padServo,initServo@timer
  1882  002DE8  C136  F0F7         	movff	_padServo+1,initServo@timer+1
  1883  002DEC  C137  F0F8         	movff	_padServo+2,initServo@po
  1884  002DF0  C138  F0F9         	movff	_padServo+3,initServo@po+1
  1885  002DF4  C139  F0FA         	movff	_padServo+4,initServo@pi
  1886  002DF8  C13A  F0FB         	movff	_padServo+5,initServo@pi+1
  1887  002DFC  C153  F0FC         	movff	_padAngle_NEUTRAL,initServo@angle
  1888  002E00  C154  F0FD         	movff	_padAngle_NEUTRAL+1,initServo@angle+1
  1889  002E04  EC6D  F019         	call	_initServo	;wreg free
  1890                           
  1891                           ;main.c: 70: initServo(redirectingServo[0], redirectingServo[1],redirectingServo[2], 90)
      +                          ;
  1892  002E08  C13B  F0F6         	movff	_redirectingServo,initServo@timer
  1893  002E0C  C13C  F0F7         	movff	_redirectingServo+1,initServo@timer+1
  1894  002E10  C13D  F0F8         	movff	_redirectingServo+2,initServo@po
  1895  002E14  C13E  F0F9         	movff	_redirectingServo+3,initServo@po+1
  1896  002E18  C13F  F0FA         	movff	_redirectingServo+4,initServo@pi
  1897  002E1C  C140  F0FB         	movff	_redirectingServo+5,initServo@pi+1
  1898  002E20  0E00               	movlw	0
  1899  002E22  0100               	movlb	0	; () banked
  1900  002E24  6FFD               	movwf	(initServo@angle+1)& (0+255),b
  1901  002E26  0E5A               	movlw	90
  1902  002E28  6FFC               	movwf	initServo@angle& (0+255),b
  1903  002E2A  EC6D  F019         	call	_initServo	;wreg free
  1904                           
  1905                           ;main.c: 72: lcdClear();
  1906  002E2E  EC2E  F01D         	call	_lcdClear	;wreg free
  1907                           
  1908                           ;main.c: 73: printf("running");
  1909  002E32  0EF6               	movlw	low STR_1
  1910  002E34  0100               	movlb	0	; () banked
  1911  002E36  6FD5               	movwf	printf@f& (0+255),b
  1912  002E38  0EFF               	movlw	high STR_1
  1913  002E3A  0100               	movlb	0	; () banked
  1914  002E3C  6FD6               	movwf	(printf@f+1)& (0+255),b
  1915  002E3E  EC09  F000         	call	_printf	;wreg free
  1916  002E42                     l5192:
  1917  002E42  0101               	movlb	1	; () banked
  1918  002E44  512D               	movf	_switchFlag& (0+255),w,b
  1919  002E46  0101               	movlb	1	; () banked
  1920  002E48  112E               	iorwf	(_switchFlag+1)& (0+255),w,b
  1921  002E4A  B4D8               	btfsc	status,2,c
  1922  002E4C  D7FA               	goto	l5192
  1923                           
  1924                           ; BSR set to: 1
  1925                           ;main.c: 79: }
  1926                           ;main.c: 81: sortBattery();
  1927                           
  1928                           ; BSR set to: 1
  1929  002E4E  EC09  F007         	call	_sortBattery	;wreg free
  1930                           
  1931                           ;main.c: 84: switchFlag = 0;
  1932  002E52  0E00               	movlw	0
  1933  002E54  0101               	movlb	1	; () banked
  1934  002E56  6F2E               	movwf	(_switchFlag+1)& (0+255),b
  1935  002E58  0E00               	movlw	0
  1936  002E5A  6F2D               	movwf	_switchFlag& (0+255),b
  1937                           
  1938                           ; BSR set to: 1
  1939  002E5C  D7F2               	goto	l5192
  1940  002E5E                     l128:
  1941  002E5E  D7FF               	goto	l128
  1942  002E60                     __end_of_main:
  1943                           	opt stack 0
  1944                           tblptru	equ	0xFF8
  1945                           tblptrh	equ	0xFF7
  1946                           tblptrl	equ	0xFF6
  1947                           tablat	equ	0xFF5
  1948                           intcon	equ	0xFF2
  1949                           postinc0	equ	0xFEE
  1950                           wreg	equ	0xFE8
  1951                           postdec1	equ	0xFE5
  1952                           fsr1l	equ	0xFE1
  1953                           status	equ	0xFD8
  1954                           
  1955 ;; *************** function _sortBattery *****************
  1956 ;; Defined at:
  1957 ;;		line 94 in file "main.c"
  1958 ;; Parameters:    Size  Location     Type
  1959 ;;		None
  1960 ;; Auto vars:     Size  Location     Type
  1961 ;;  V_float         3    0[BANK1 ] float 
  1962 ;;  V               3   13[BANK1 ] float 
  1963 ;;  resolution      3    6[BANK1 ] float 
  1964 ;;  Vcc             3    3[BANK1 ] float 
  1965 ;;  signal          2   11[BANK1 ] int 
  1966 ;;  targetAngle     2    9[BANK1 ] int 
  1967 ;; Return value:  Size  Location     Type
  1968 ;;                  1    wreg      void 
  1969 ;; Registers used:
  1970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1971 ;; Tracked objects:
  1972 ;;		On entry : 0/0
  1973 ;;		On exit  : 0/0
  1974 ;;		Unchanged: 0/0
  1975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1977 ;;      Locals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1978 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1979 ;;      Totals:         0       2      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1980 ;;Total ram usage:       18 bytes
  1981 ;; Hardware stack levels used:    1
  1982 ;; Hardware stack levels required when called:   11
  1983 ;; This function calls:
  1984 ;;		___altoft
  1985 ;;		___ftdiv
  1986 ;;		___ftge
  1987 ;;		___ftmul
  1988 ;;		_analogRead
  1989 ;;		_digitalRead
  1990 ;;		_digitalWrite
  1991 ;;		_initServo
  1992 ;;		_lcdClear
  1993 ;;		_pause
  1994 ;;		_printf
  1995 ;;		_setAngle
  1996 ;;		_stopServo
  1997 ;; This function is called by:
  1998 ;;		_main
  1999 ;; This function uses a non-reentrant model
  2000 ;;
  2001                           
  2002                           	psect	text1
  2003  000E12                     __ptext1:
  2004                           	opt stack 0
  2005  000E12                     _sortBattery:
  2006                           	opt stack 19
  2007                           
  2008                           ;main.c: 97: stopServo(conveyorServo[0]);
  2009                           
  2010                           ;incstack = 0
  2011  000E12  C12F  F080         	movff	_conveyorServo,stopServo@timer
  2012  000E16  C130  F081         	movff	_conveyorServo+1,stopServo@timer+1
  2013  000E1A  EC32  F01B         	call	_stopServo	;wreg free
  2014                           
  2015                           ;main.c: 98: digitalWrite(cylinderMotor[0], cylinderMotor[1], 0);
  2016  000E1E  C145  F080         	movff	_cylinderMotor,digitalWrite@port
  2017  000E22  C146  F081         	movff	_cylinderMotor+1,digitalWrite@port+1
  2018  000E26  C147  F082         	movff	_cylinderMotor+2,digitalWrite@pin
  2019  000E2A  C148  F083         	movff	_cylinderMotor+3,digitalWrite@pin+1
  2020  000E2E  0E00               	movlw	0
  2021  000E30  0100               	movlb	0	; () banked
  2022  000E32  6F85               	movwf	(digitalWrite@val+1)& (0+255),b
  2023  000E34  0E00               	movlw	0
  2024  000E36  6F84               	movwf	digitalWrite@val& (0+255),b
  2025  000E38  EC46  F015         	call	_digitalWrite	;wreg free
  2026                           
  2027                           ;main.c: 104: pause("interrupt!!!\nclose?");
  2028  000E3C  0EAD               	movlw	low STR_2
  2029  000E3E  0100               	movlb	0	; () banked
  2030  000E40  6FFA               	movwf	pause@message& (0+255),b
  2031  000E42  0EFE               	movlw	high STR_2
  2032  000E44  0100               	movlb	0	; () banked
  2033  000E46  6FFB               	movwf	(pause@message+1)& (0+255),b
  2034  000E48  EC1F  F01D         	call	_pause	;wreg free
  2035                           
  2036                           ;main.c: 105: setAngle(padServo[0], padAngle_CLOSE);
  2037  000E4C  C135  F0EC         	movff	_padServo,setAngle@timer
  2038  000E50  C136  F0ED         	movff	_padServo+1,setAngle@timer+1
  2039  000E54  C151  F0EE         	movff	_padAngle_CLOSE,setAngle@angle
  2040  000E58  C152  F0EF         	movff	_padAngle_CLOSE+1,setAngle@angle+1
  2041  000E5C  EC23  F019         	call	_setAngle	;wreg free
  2042                           
  2043                           ;main.c: 108: pause("read voltage?");
  2044  000E60  0ED7               	movlw	low STR_3
  2045  000E62  0100               	movlb	0	; () banked
  2046  000E64  6FFA               	movwf	pause@message& (0+255),b
  2047  000E66  0EFF               	movlw	high STR_3
  2048  000E68  0100               	movlb	0	; () banked
  2049  000E6A  6FFB               	movwf	(pause@message+1)& (0+255),b
  2050  000E6C  EC1F  F01D         	call	_pause	;wreg free
  2051                           
  2052                           ;main.c: 109: float Vcc = 4.8;
  2053  000E70  0E9A               	movlw	154
  2054  000E72  0101               	movlb	1	; () banked
  2055  000E74  6F60               	movwf	sortBattery@Vcc& (0+255),b
  2056  000E76  0E99               	movlw	153
  2057  000E78  0101               	movlb	1	; () banked
  2058  000E7A  6F61               	movwf	(sortBattery@Vcc+1)& (0+255),b
  2059  000E7C  0E40               	movlw	64
  2060  000E7E  0101               	movlb	1	; () banked
  2061  000E80  6F62               	movwf	(sortBattery@Vcc+2)& (0+255),b
  2062                           
  2063                           ; BSR set to: 1
  2064                           ;main.c: 110: float resolution = (1<<10) - 1;
  2065  000E82  0EC0               	movlw	192
  2066  000E84  0101               	movlb	1	; () banked
  2067  000E86  6F63               	movwf	sortBattery@resolution& (0+255),b
  2068  000E88  0E7F               	movlw	127
  2069  000E8A  0101               	movlb	1	; () banked
  2070  000E8C  6F64               	movwf	(sortBattery@resolution+1)& (0+255),b
  2071  000E8E  0E44               	movlw	68
  2072  000E90  0101               	movlb	1	; () banked
  2073  000E92  6F65               	movwf	(sortBattery@resolution+2)& (0+255),b
  2074                           
  2075                           ; BSR set to: 1
  2076                           ;main.c: 112: int targetAngle;
  2077                           ;main.c: 113: int signal = digitalRead(padPin1[0],padPin1[1])<<1;
  2078  000E94  C149  F080         	movff	_padPin1,digitalRead@port
  2079  000E98  C14A  F081         	movff	_padPin1+1,digitalRead@port+1
  2080  000E9C  C14B  F082         	movff	_padPin1+2,digitalRead@pin
  2081  000EA0  C14C  F083         	movff	_padPin1+3,digitalRead@pin+1
  2082  000EA4  EC5F  F014         	call	_digitalRead	;wreg free
  2083  000EA8  90D8               	bcf	status,0,c
  2084  000EAA  0100               	movlb	0	; () banked
  2085  000EAC  3580               	rlcf	?_digitalRead& (0+255),w,b
  2086  000EAE  0101               	movlb	1	; () banked
  2087  000EB0  6F68               	movwf	sortBattery@signal& (0+255),b
  2088  000EB2  0100               	movlb	0	; () banked
  2089  000EB4  3581               	rlcf	(?_digitalRead+1)& (0+255),w,b
  2090  000EB6  0101               	movlb	1	; () banked
  2091  000EB8  6F69               	movwf	(sortBattery@signal+1)& (0+255),b
  2092                           
  2093                           ; BSR set to: 1
  2094                           ;main.c: 114: signal |= digitalRead(padPin2[0],padPin2[1]);
  2095  000EBA  C14D  F080         	movff	_padPin2,digitalRead@port
  2096  000EBE  C14E  F081         	movff	_padPin2+1,digitalRead@port+1
  2097  000EC2  C14F  F082         	movff	_padPin2+2,digitalRead@pin
  2098  000EC6  C150  F083         	movff	_padPin2+3,digitalRead@pin+1
  2099  000ECA  EC5F  F014         	call	_digitalRead	;wreg free
  2100  000ECE  0100               	movlb	0	; () banked
  2101  000ED0  5180               	movf	?_digitalRead& (0+255),w,b
  2102  000ED2  0101               	movlb	1	; () banked
  2103  000ED4  1368               	iorwf	sortBattery@signal& (0+255),f,b
  2104  000ED6  0100               	movlb	0	; () banked
  2105  000ED8  5181               	movf	(?_digitalRead+1)& (0+255),w,b
  2106  000EDA  0101               	movlb	1	; () banked
  2107  000EDC  1369               	iorwf	(sortBattery@signal+1)& (0+255),f,b
  2108                           
  2109                           ; BSR set to: 1
  2110                           ;main.c: 116: digitalWrite(AA_float[0], AA_float[1], 1);
  2111  000EDE  C141  F080         	movff	_AA_float,digitalWrite@port
  2112  000EE2  C142  F081         	movff	_AA_float+1,digitalWrite@port+1
  2113  000EE6  C143  F082         	movff	_AA_float+2,digitalWrite@pin
  2114  000EEA  C144  F083         	movff	_AA_float+3,digitalWrite@pin+1
  2115  000EEE  0E00               	movlw	0
  2116  000EF0  0100               	movlb	0	; () banked
  2117  000EF2  6F85               	movwf	(digitalWrite@val+1)& (0+255),b
  2118  000EF4  0E01               	movlw	1
  2119  000EF6  6F84               	movwf	digitalWrite@val& (0+255),b
  2120  000EF8  EC46  F015         	call	_digitalWrite	;wreg free
  2121                           
  2122                           ;main.c: 117: float V = analogRead(padPin3[1]) / resolution * Vcc;
  2123  000EFC  C163  F095         	movff	sortBattery@resolution,___ftdiv@f2
  2124  000F00  C164  F096         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2125  000F04  C165  F097         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2126  000F08  C122  F080         	movff	_padPin3+2,analogRead@channel
  2127  000F0C  C123  F081         	movff	_padPin3+3,analogRead@channel+1
  2128  000F10  ECC3  F01B         	call	_analogRead	;wreg free
  2129  000F14  C080  F088         	movff	?_analogRead,___altoft@c
  2130  000F18  C081  F089         	movff	?_analogRead+1,___altoft@c+1
  2131  000F1C  C082  F08A         	movff	?_analogRead+2,___altoft@c+2
  2132  000F20  C083  F08B         	movff	?_analogRead+3,___altoft@c+3
  2133  000F24  EC87  F018         	call	___altoft	;wreg free
  2134  000F28  C088  F092         	movff	?___altoft,___ftdiv@f1
  2135  000F2C  C089  F093         	movff	?___altoft+1,___ftdiv@f1+1
  2136  000F30  C08A  F094         	movff	?___altoft+2,___ftdiv@f1+2
  2137  000F34  ECDD  F00F         	call	___ftdiv	;wreg free
  2138  000F38  C092  F0A1         	movff	?___ftdiv,___ftmul@f1
  2139  000F3C  C093  F0A2         	movff	?___ftdiv+1,___ftmul@f1+1
  2140  000F40  C094  F0A3         	movff	?___ftdiv+2,___ftmul@f1+2
  2141  000F44  C160  F0A4         	movff	sortBattery@Vcc,___ftmul@f2
  2142  000F48  C161  F0A5         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2143  000F4C  C162  F0A6         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2144  000F50  EC2E  F00F         	call	___ftmul	;wreg free
  2145  000F54  C0A1  F16A         	movff	?___ftmul,sortBattery@V
  2146  000F58  C0A2  F16B         	movff	?___ftmul+1,sortBattery@V+1
  2147  000F5C  C0A3  F16C         	movff	?___ftmul+2,sortBattery@V+2
  2148                           
  2149                           ;main.c: 119: lcdClear();
  2150  000F60  EC2E  F01D         	call	_lcdClear	;wreg free
  2151                           
  2152                           ;main.c: 120: printf("target: %d, V: %f",signal,V);
  2153  000F64  0E2E               	movlw	low STR_4
  2154  000F66  0100               	movlb	0	; () banked
  2155  000F68  6FD5               	movwf	printf@f& (0+255),b
  2156  000F6A  0EFF               	movlw	high STR_4
  2157  000F6C  0100               	movlb	0	; () banked
  2158  000F6E  6FD6               	movwf	(printf@f+1)& (0+255),b
  2159  000F70  C168  F0D7         	movff	sortBattery@signal,?_printf+2
  2160  000F74  C169  F0D8         	movff	sortBattery@signal+1,?_printf+3
  2161  000F78  C16A  F0D9         	movff	sortBattery@V,?_printf+4
  2162  000F7C  C16B  F0DA         	movff	sortBattery@V+1,?_printf+5
  2163  000F80  C16C  F0DB         	movff	sortBattery@V+2,?_printf+6
  2164  000F84  EC09  F000         	call	_printf	;wreg free
  2165  000F88                     l136:
  2166  000F88  D7FF               	goto	l136
  2167                           
  2168                           ;main.c: 129: _delay((unsigned long)((1)*(10000000/4000.0)));
  2169                           
  2170                           ;main.c: 128: digitalWrite(AA_float[0], AA_float[1], 0);
  2171                           
  2172                           ;main.c: 126: case 0b00:
  2173                           
  2174                           ;main.c: 125: switch(signal){
  2175                           
  2176                           ;main.c: 124: pause("set redirect angle?");
  2177  000F8A  0E04               	movlw	4
  2178  000F8C  0100               	movlb	0	; () banked
  2179  000F8E  6FFE               	movwf	??_sortBattery& (0+255),b
  2180  000F90  0E3D               	movlw	61
  2181  000F92                     u5367:
  2182  000F92  2EE8               	decfsz	wreg,f,c
  2183  000F94  D7FE               	bra	u5367
  2184  000F96  2FFE               	decfsz	??_sortBattery& (0+255),f,b
  2185  000F98  D7FC               	bra	u5367
  2186  000F9A  D000               	nop2	
  2187                           
  2188                           ;main.c: 130: float V_float = analogRead(padPin3[1]) / resolution * Vcc;
  2189  000F9C  C163  F095         	movff	sortBattery@resolution,___ftdiv@f2
  2190  000FA0  C164  F096         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2191  000FA4  C165  F097         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2192  000FA8  C122  F080         	movff	_padPin3+2,analogRead@channel
  2193  000FAC  C123  F081         	movff	_padPin3+3,analogRead@channel+1
  2194  000FB0  ECC3  F01B         	call	_analogRead	;wreg free
  2195  000FB4  C080  F088         	movff	?_analogRead,___altoft@c
  2196  000FB8  C081  F089         	movff	?_analogRead+1,___altoft@c+1
  2197  000FBC  C082  F08A         	movff	?_analogRead+2,___altoft@c+2
  2198  000FC0  C083  F08B         	movff	?_analogRead+3,___altoft@c+3
  2199  000FC4  EC87  F018         	call	___altoft	;wreg free
  2200  000FC8  C088  F092         	movff	?___altoft,___ftdiv@f1
  2201  000FCC  C089  F093         	movff	?___altoft+1,___ftdiv@f1+1
  2202  000FD0  C08A  F094         	movff	?___altoft+2,___ftdiv@f1+2
  2203  000FD4  ECDD  F00F         	call	___ftdiv	;wreg free
  2204  000FD8  C092  F0A1         	movff	?___ftdiv,___ftmul@f1
  2205  000FDC  C093  F0A2         	movff	?___ftdiv+1,___ftmul@f1+1
  2206  000FE0  C094  F0A3         	movff	?___ftdiv+2,___ftmul@f1+2
  2207  000FE4  C160  F0A4         	movff	sortBattery@Vcc,___ftmul@f2
  2208  000FE8  C161  F0A5         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2209  000FEC  C162  F0A6         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2210  000FF0  EC2E  F00F         	call	___ftmul	;wreg free
  2211  000FF4  C0A1  F15D         	movff	?___ftmul,sortBattery@V_float
  2212  000FF8  C0A2  F15E         	movff	?___ftmul+1,sortBattery@V_float+1
  2213  000FFC  C0A3  F15F         	movff	?___ftmul+2,sortBattery@V_float+2
  2214                           
  2215                           ;main.c: 131: if(V_float < 0.5){
  2216  001000  C15D  F080         	movff	sortBattery@V_float,___ftge@ff1
  2217  001004  C15E  F081         	movff	sortBattery@V_float+1,___ftge@ff1+1
  2218  001008  C15F  F082         	movff	sortBattery@V_float+2,___ftge@ff1+2
  2219  00100C  0E00               	movlw	0
  2220  00100E  0100               	movlb	0	; () banked
  2221  001010  6F83               	movwf	___ftge@ff2& (0+255),b
  2222  001012  0E00               	movlw	0
  2223  001014  0100               	movlb	0	; () banked
  2224  001016  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  2225  001018  0E3F               	movlw	63
  2226  00101A  0100               	movlb	0	; () banked
  2227  00101C  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  2228  00101E  ECB6  F015         	call	___ftge	;wreg free
  2229  001022  0100               	movlb	0	; () banked
  2230  001024  B0D8               	btfsc	status,0,c
  2231  001026  D00F               	goto	l5108
  2232                           
  2233                           ; BSR set to: 0
  2234                           ;main.c: 132: if(V > V_LIM_AA) targetAngle = redirectAngle_AA;
  2235  001028  C127  F080         	movff	_V_LIM_AA,___ftge@ff1
  2236  00102C  C128  F081         	movff	_V_LIM_AA+1,___ftge@ff1+1
  2237  001030  C129  F082         	movff	_V_LIM_AA+2,___ftge@ff1+2
  2238  001034  C16A  F083         	movff	sortBattery@V,___ftge@ff2
  2239  001038  C16B  F084         	movff	sortBattery@V+1,___ftge@ff2+1
  2240  00103C  C16C  F085         	movff	sortBattery@V+2,___ftge@ff2+2
  2241  001040  ECB6  F015         	call	___ftge	;wreg free
  2242  001044  D016               	goto	L6
  2243  001046                     l5108:
  2244                           
  2245                           ; BSR set to: 0
  2246                           ;main.c: 138: if(V > V_LIM_9V) targetAngle = redirectAngle_9V;
  2247  001046  C124  F080         	movff	_V_LIM_9V,___ftge@ff1
  2248  00104A  C125  F081         	movff	_V_LIM_9V+1,___ftge@ff1+1
  2249  00104E  C126  F082         	movff	_V_LIM_9V+2,___ftge@ff1+2
  2250  001052  C16A  F083         	movff	sortBattery@V,___ftge@ff2
  2251  001056  C16B  F084         	movff	sortBattery@V+1,___ftge@ff2+1
  2252  00105A  C16C  F085         	movff	sortBattery@V+2,___ftge@ff2+2
  2253  00105E  ECB6  F015         	call	___ftge	;wreg free
  2254  001062  0100               	movlb	0	; () banked
  2255  001064  B0D8               	btfsc	status,0,c
  2256  001066  D00D               	goto	l149
  2257                           
  2258                           ; BSR set to: 0
  2259  001068  C157  F166         	movff	_redirectAngle_9V,sortBattery@targetAngle
  2260  00106C  C158  F167         	movff	_redirectAngle_9V+1,sortBattery@targetAngle+1
  2261  001070  D00C               	goto	l5120
  2262  001072                     L6:
  2263  001072  0100               	movlb	0	; () banked
  2264  001074  B0D8               	btfsc	status,0,c
  2265  001076  D005               	goto	l149
  2266                           
  2267                           ; BSR set to: 0
  2268  001078  C159  F166         	movff	_redirectAngle_AA,sortBattery@targetAngle
  2269  00107C  C15A  F167         	movff	_redirectAngle_AA+1,sortBattery@targetAngle+1
  2270  001080  D004               	goto	l5120
  2271  001082                     l149:
  2272                           
  2273                           ; BSR set to: 0
  2274                           ;main.c: 143: else targetAngle = redirectAngle_OTHER;
  2275  001082  C15B  F166         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  2276  001086  C15C  F167         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  2277  00108A                     l5120:
  2278                           
  2279                           ; BSR set to: 0
  2280                           ;main.c: 147: setAngle(redirectingServo[0], targetAngle);
  2281  00108A  C13B  F0EC         	movff	_redirectingServo,setAngle@timer
  2282  00108E  C13C  F0ED         	movff	_redirectingServo+1,setAngle@timer+1
  2283  001092  C166  F0EE         	movff	sortBattery@targetAngle,setAngle@angle
  2284  001096  C167  F0EF         	movff	sortBattery@targetAngle+1,setAngle@angle+1
  2285  00109A  EC23  F019         	call	_setAngle	;wreg free
  2286                           
  2287                           ;main.c: 150: pause("release battery?");
  2288  00109E  0EB7               	movlw	low STR_6
  2289  0010A0  0100               	movlb	0	; () banked
  2290  0010A2  6FFA               	movwf	pause@message& (0+255),b
  2291  0010A4  0EFF               	movlw	high STR_6
  2292  0010A6  0100               	movlb	0	; () banked
  2293  0010A8  6FFB               	movwf	(pause@message+1)& (0+255),b
  2294  0010AA  EC1F  F01D         	call	_pause	;wreg free
  2295                           
  2296                           ;main.c: 151: setAngle(padServo[0], padAngle_OPEN);
  2297  0010AE  C135  F0EC         	movff	_padServo,setAngle@timer
  2298  0010B2  C136  F0ED         	movff	_padServo+1,setAngle@timer+1
  2299  0010B6  C155  F0EE         	movff	_padAngle_OPEN,setAngle@angle
  2300  0010BA  C156  F0EF         	movff	_padAngle_OPEN+1,setAngle@angle+1
  2301  0010BE  EC23  F019         	call	_setAngle	;wreg free
  2302                           
  2303                           ;main.c: 155: pause("reset the pad?");
  2304  0010C2  0EC8               	movlw	low STR_7
  2305  0010C4  0100               	movlb	0	; () banked
  2306  0010C6  6FFA               	movwf	pause@message& (0+255),b
  2307  0010C8  0EFF               	movlw	high STR_7
  2308  0010CA  0100               	movlb	0	; () banked
  2309  0010CC  6FFB               	movwf	(pause@message+1)& (0+255),b
  2310  0010CE  EC1F  F01D         	call	_pause	;wreg free
  2311                           
  2312                           ;main.c: 156: setAngle(padServo[0], padAngle_NEUTRAL);
  2313  0010D2  C135  F0EC         	movff	_padServo,setAngle@timer
  2314  0010D6  C136  F0ED         	movff	_padServo+1,setAngle@timer+1
  2315  0010DA  C153  F0EE         	movff	_padAngle_NEUTRAL,setAngle@angle
  2316  0010DE  C154  F0EF         	movff	_padAngle_NEUTRAL+1,setAngle@angle+1
  2317  0010E2  EC23  F019         	call	_setAngle	;wreg free
  2318                           
  2319                           ;main.c: 159: pause("conveyor & cylinder on?");
  2320  0010E6  0E81               	movlw	low STR_8
  2321  0010E8  0100               	movlb	0	; () banked
  2322  0010EA  6FFA               	movwf	pause@message& (0+255),b
  2323  0010EC  0EFE               	movlw	high STR_8
  2324  0010EE  0100               	movlb	0	; () banked
  2325  0010F0  6FFB               	movwf	(pause@message+1)& (0+255),b
  2326  0010F2  EC1F  F01D         	call	_pause	;wreg free
  2327                           
  2328                           ;main.c: 160: initServo(conveyorServo[0], conveyorServo[1], conveyorServo[2], 90);
  2329  0010F6  C12F  F0F6         	movff	_conveyorServo,initServo@timer
  2330  0010FA  C130  F0F7         	movff	_conveyorServo+1,initServo@timer+1
  2331  0010FE  C131  F0F8         	movff	_conveyorServo+2,initServo@po
  2332  001102  C132  F0F9         	movff	_conveyorServo+3,initServo@po+1
  2333  001106  C133  F0FA         	movff	_conveyorServo+4,initServo@pi
  2334  00110A  C134  F0FB         	movff	_conveyorServo+5,initServo@pi+1
  2335  00110E  0E00               	movlw	0
  2336  001110  0100               	movlb	0	; () banked
  2337  001112  6FFD               	movwf	(initServo@angle+1)& (0+255),b
  2338  001114  0E5A               	movlw	90
  2339  001116  6FFC               	movwf	initServo@angle& (0+255),b
  2340  001118  EC6D  F019         	call	_initServo	;wreg free
  2341                           
  2342                           ;main.c: 161: digitalWrite(cylinderMotor[0], cylinderMotor[1], 1);
  2343  00111C  C145  F080         	movff	_cylinderMotor,digitalWrite@port
  2344  001120  C146  F081         	movff	_cylinderMotor+1,digitalWrite@port+1
  2345  001124  C147  F082         	movff	_cylinderMotor+2,digitalWrite@pin
  2346  001128  C148  F083         	movff	_cylinderMotor+3,digitalWrite@pin+1
  2347  00112C  0E00               	movlw	0
  2348  00112E  0100               	movlb	0	; () banked
  2349  001130  6F85               	movwf	(digitalWrite@val+1)& (0+255),b
  2350  001132  0E01               	movlw	1
  2351  001134  6F84               	movwf	digitalWrite@val& (0+255),b
  2352  001136  EC46  F015         	call	_digitalWrite	;wreg free
  2353  00113A                     l151:
  2354  00113A  D7FF               	goto	l151
  2355  00113C                     __end_of_sortBattery:
  2356                           	opt stack 0
  2357                           tblptru	equ	0xFF8
  2358                           tblptrh	equ	0xFF7
  2359                           tblptrl	equ	0xFF6
  2360                           tablat	equ	0xFF5
  2361                           intcon	equ	0xFF2
  2362                           postinc0	equ	0xFEE
  2363                           wreg	equ	0xFE8
  2364                           postdec1	equ	0xFE5
  2365                           fsr1l	equ	0xFE1
  2366                           status	equ	0xFD8
  2367                           
  2368 ;; *************** function _stopServo *****************
  2369 ;; Defined at:
  2370 ;;		line 26 in file "servo.c"
  2371 ;; Parameters:    Size  Location     Type
  2372 ;;  timer           2    0[BANK0 ] int 
  2373 ;; Auto vars:     Size  Location     Type
  2374 ;;		None
  2375 ;; Return value:  Size  Location     Type
  2376 ;;                  1    wreg      void 
  2377 ;; Registers used:
  2378 ;;		wreg, status,2, status,0
  2379 ;; Tracked objects:
  2380 ;;		On entry : 0/0
  2381 ;;		On exit  : 0/0
  2382 ;;		Unchanged: 0/0
  2383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2384 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2386 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2387 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2388 ;;Total ram usage:        4 bytes
  2389 ;; Hardware stack levels used:    1
  2390 ;; Hardware stack levels required when called:    5
  2391 ;; This function calls:
  2392 ;;		Nothing
  2393 ;; This function is called by:
  2394 ;;		_sortBattery
  2395 ;; This function uses a non-reentrant model
  2396 ;;
  2397                           
  2398                           	psect	text2
  2399  003664                     __ptext2:
  2400                           	opt stack 0
  2401  003664                     _stopServo:
  2402                           	opt stack 24
  2403                           
  2404                           ;servo.c: 27: switch(timer){
  2405                           
  2406                           ;incstack = 0
  2407  003664  D00C               	goto	l4772
  2408  003666                     l4762:
  2409  003666  0E00               	movlw	0
  2410  003668  6ED5               	movwf	4053,c	;volatile
  2411  00366A  0012               	return	
  2412  00366C                     l4764:
  2413  00366C  0E00               	movlw	0
  2414  00366E  6ECD               	movwf	4045,c	;volatile
  2415  003670  0012               	return	
  2416  003672                     l4766:
  2417  003672  0E00               	movlw	0
  2418  003674  6ECA               	movwf	4042,c	;volatile
  2419  003676  0012               	return	
  2420  003678                     l4768:
  2421  003678  0E00               	movlw	0
  2422  00367A  6EB1               	movwf	4017,c	;volatile
  2423                           
  2424                           ;servo.c: 32: }
  2425  00367C  0012               	return	
  2426  00367E                     l4772:
  2427  00367E  C080  F082         	movff	stopServo@timer,??_stopServo
  2428  003682  C081  F083         	movff	stopServo@timer+1,??_stopServo+1
  2429                           
  2430                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2431                           ; Switch size 1, requested type "space"
  2432                           ; Number of cases is 1, Range of values is 0 to 0
  2433                           ; switch strategies available:
  2434                           ; Name         Instructions Cycles
  2435                           ; simple_byte            4     3 (average)
  2436                           ;	Chosen strategy is simple_byte
  2437  003686  0100               	movlb	0	; () banked
  2438  003688  5183               	movf	(??_stopServo+1)& (0+255),w,b
  2439  00368A  0A00               	xorlw	0	; case 0
  2440  00368C  A4D8               	btfss	status,2,c
  2441  00368E  0012               	return	
  2442                           
  2443                           ; BSR set to: 0
  2444                           ; Switch size 1, requested type "space"
  2445                           ; Number of cases is 4, Range of values is 0 to 3
  2446                           ; switch strategies available:
  2447                           ; Name         Instructions Cycles
  2448                           ; simple_byte           13     7 (average)
  2449                           ;	Chosen strategy is simple_byte
  2450  003690  0100               	movlb	0	; () banked
  2451  003692  5182               	movf	??_stopServo& (0+255),w,b
  2452  003694  0A00               	xorlw	0	; case 0
  2453  003696  B4D8               	btfsc	status,2,c
  2454  003698  D7E6               	goto	l4762
  2455  00369A  0A01               	xorlw	1	; case 1
  2456  00369C  B4D8               	btfsc	status,2,c
  2457  00369E  D7E6               	goto	l4764
  2458  0036A0  0A03               	xorlw	3	; case 2
  2459  0036A2  B4D8               	btfsc	status,2,c
  2460  0036A4  D7E6               	goto	l4766
  2461  0036A6  0A01               	xorlw	1	; case 3
  2462  0036A8  A4D8               	btfss	status,2,c
  2463  0036AA  0012               	return	
  2464  0036AC  D7E5               	goto	l4768
  2465  0036AE                     __end_of_stopServo:
  2466                           	opt stack 0
  2467                           tblptru	equ	0xFF8
  2468                           tblptrh	equ	0xFF7
  2469                           tblptrl	equ	0xFF6
  2470                           tablat	equ	0xFF5
  2471                           intcon	equ	0xFF2
  2472                           postinc0	equ	0xFEE
  2473                           wreg	equ	0xFE8
  2474                           postdec1	equ	0xFE5
  2475                           fsr1l	equ	0xFE1
  2476                           status	equ	0xFD8
  2477                           
  2478 ;; *************** function _pause *****************
  2479 ;; Defined at:
  2480 ;;		line 283 in file "main.c"
  2481 ;; Parameters:    Size  Location     Type
  2482 ;;  message         2  122[BANK0 ] PTR unsigned char 
  2483 ;;		 -> STR_8(24), STR_7(15), STR_6(17), STR_5(20), 
  2484 ;;		 -> STR_3(14), STR_2(20), 
  2485 ;; Auto vars:     Size  Location     Type
  2486 ;;		None
  2487 ;; Return value:  Size  Location     Type
  2488 ;;                  1    wreg      void 
  2489 ;; Registers used:
  2490 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2491 ;; Tracked objects:
  2492 ;;		On entry : 0/0
  2493 ;;		On exit  : 0/0
  2494 ;;		Unchanged: 0/0
  2495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2496 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2499 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2500 ;;Total ram usage:        2 bytes
  2501 ;; Hardware stack levels used:    1
  2502 ;; Hardware stack levels required when called:   10
  2503 ;; This function calls:
  2504 ;;		_lcdClear
  2505 ;;		_printf
  2506 ;;		_readKeypad
  2507 ;; This function is called by:
  2508 ;;		_sortBattery
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512                           	psect	text3
  2513  003A3E                     __ptext3:
  2514                           	opt stack 0
  2515  003A3E                     _pause:
  2516                           	opt stack 19
  2517                           
  2518                           ;main.c: 284: lcdClear();
  2519                           
  2520                           ;incstack = 0
  2521  003A3E  EC2E  F01D         	call	_lcdClear	;wreg free
  2522                           
  2523                           ;main.c: 285: printf(message);
  2524  003A42  C0FA  F0D5         	movff	pause@message,printf@f
  2525  003A46  C0FB  F0D6         	movff	pause@message+1,printf@f+1
  2526  003A4A  EC09  F000         	call	_printf	;wreg free
  2527                           
  2528                           ;main.c: 286: readKeypad();
  2529  003A4E  EC82  F01C         	call	_readKeypad	;wreg free
  2530  003A52  0012               	return		;funcret
  2531  003A54                     __end_of_pause:
  2532                           	opt stack 0
  2533                           tblptru	equ	0xFF8
  2534                           tblptrh	equ	0xFF7
  2535                           tblptrl	equ	0xFF6
  2536                           tablat	equ	0xFF5
  2537                           intcon	equ	0xFF2
  2538                           postinc0	equ	0xFEE
  2539                           wreg	equ	0xFE8
  2540                           postdec1	equ	0xFE5
  2541                           fsr1l	equ	0xFE1
  2542                           status	equ	0xFD8
  2543                           
  2544 ;; *************** function _initServo *****************
  2545 ;; Defined at:
  2546 ;;		line 17 in file "servo.c"
  2547 ;; Parameters:    Size  Location     Type
  2548 ;;  timer           2  118[BANK0 ] int 
  2549 ;;  po              2  120[BANK0 ] int 
  2550 ;;  pi              2  122[BANK0 ] int 
  2551 ;;  angle           2  124[BANK0 ] int 
  2552 ;; Auto vars:     Size  Location     Type
  2553 ;;		None
  2554 ;; Return value:  Size  Location     Type
  2555 ;;                  1    wreg      void 
  2556 ;; Registers used:
  2557 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2558 ;; Tracked objects:
  2559 ;;		On entry : 0/0
  2560 ;;		On exit  : 0/0
  2561 ;;		Unchanged: 0/0
  2562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2563 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2566 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2567 ;;Total ram usage:        8 bytes
  2568 ;; Hardware stack levels used:    1
  2569 ;; Hardware stack levels required when called:    9
  2570 ;; This function calls:
  2571 ;;		_initTimer
  2572 ;;		_setAngle
  2573 ;;		_startTimer
  2574 ;; This function is called by:
  2575 ;;		_main
  2576 ;;		_sortBattery
  2577 ;; This function uses a non-reentrant model
  2578 ;;
  2579                           
  2580                           	psect	text4
  2581  0032DA                     __ptext4:
  2582                           	opt stack 0
  2583  0032DA                     _initServo:
  2584                           	opt stack 20
  2585                           
  2586                           ;servo.c: 18: port[timer] = po;
  2587                           
  2588                           ;incstack = 0
  2589  0032DA  90D8               	bcf	status,0,c
  2590  0032DC  0100               	movlb	0	; () banked
  2591  0032DE  35F6               	rlcf	initServo@timer& (0+255),w,b
  2592  0032E0  6ED9               	movwf	fsr2l,c
  2593  0032E2  0100               	movlb	0	; () banked
  2594  0032E4  35F7               	rlcf	(initServo@timer+1)& (0+255),w,b
  2595  0032E6  6EDA               	movwf	fsr2h,c
  2596  0032E8  0E18               	movlw	low _port
  2597  0032EA  26D9               	addwf	fsr2l,f,c
  2598  0032EC  0E01               	movlw	high _port
  2599  0032EE  22DA               	addwfc	fsr2h,f,c
  2600  0032F0  C0F8  FFDE         	movff	initServo@po,postinc2
  2601  0032F4  C0F9  FFDD         	movff	initServo@po+1,postdec2
  2602                           
  2603                           ;servo.c: 19: pin[timer] = pi;
  2604  0032F8  90D8               	bcf	status,0,c
  2605  0032FA  0100               	movlb	0	; () banked
  2606  0032FC  35F6               	rlcf	initServo@timer& (0+255),w,b
  2607  0032FE  6ED9               	movwf	fsr2l,c
  2608  003300  0100               	movlb	0	; () banked
  2609  003302  35F7               	rlcf	(initServo@timer+1)& (0+255),w,b
  2610  003304  6EDA               	movwf	fsr2h,c
  2611  003306  0E10               	movlw	low _pin
  2612  003308  26D9               	addwf	fsr2l,f,c
  2613  00330A  0E01               	movlw	high _pin
  2614  00330C  22DA               	addwfc	fsr2h,f,c
  2615  00330E  C0FA  FFDE         	movff	initServo@pi,postinc2
  2616  003312  C0FB  FFDD         	movff	initServo@pi+1,postdec2
  2617                           
  2618                           ; BSR set to: 0
  2619                           ;servo.c: 20: setAngle(timer, angle);
  2620  003316  C0F6  F0EC         	movff	initServo@timer,setAngle@timer
  2621  00331A  C0F7  F0ED         	movff	initServo@timer+1,setAngle@timer+1
  2622  00331E  C0FC  F0EE         	movff	initServo@angle,setAngle@angle
  2623  003322  C0FD  F0EF         	movff	initServo@angle+1,setAngle@angle+1
  2624  003326  EC23  F019         	call	_setAngle	;wreg free
  2625                           
  2626                           ;servo.c: 22: initTimer(timer);
  2627  00332A  C0F6  F080         	movff	initServo@timer,initTimer@timer
  2628  00332E  C0F7  F081         	movff	initServo@timer+1,initTimer@timer+1
  2629  003332  EC57  F01B         	call	_initTimer	;wreg free
  2630                           
  2631                           ;servo.c: 23: startTimer(timer,0);
  2632  003336  C0F6  F080         	movff	initServo@timer,startTimer@timer
  2633  00333A  C0F7  F081         	movff	initServo@timer+1,startTimer@timer+1
  2634  00333E  0E00               	movlw	0
  2635  003340  0100               	movlb	0	; () banked
  2636  003342  6F82               	movwf	startTimer@val& (0+255),b
  2637  003344  0E00               	movlw	0
  2638  003346  6F83               	movwf	(startTimer@val+1)& (0+255),b
  2639  003348  0E00               	movlw	0
  2640  00334A  6F84               	movwf	(startTimer@val+2)& (0+255),b
  2641  00334C  0E00               	movlw	0
  2642  00334E  6F85               	movwf	(startTimer@val+3)& (0+255),b
  2643  003350  ECBE  F01A         	call	_startTimer	;wreg free
  2644  003354  0012               	return		;funcret
  2645  003356                     __end_of_initServo:
  2646                           	opt stack 0
  2647                           tblptru	equ	0xFF8
  2648                           tblptrh	equ	0xFF7
  2649                           tblptrl	equ	0xFF6
  2650                           tablat	equ	0xFF5
  2651                           intcon	equ	0xFF2
  2652                           postinc0	equ	0xFEE
  2653                           wreg	equ	0xFE8
  2654                           postdec1	equ	0xFE5
  2655                           fsr1l	equ	0xFE1
  2656                           postinc2	equ	0xFDE
  2657                           postdec2	equ	0xFDD
  2658                           fsr2h	equ	0xFDA
  2659                           fsr2l	equ	0xFD9
  2660                           status	equ	0xFD8
  2661                           
  2662 ;; *************** function _startTimer *****************
  2663 ;; Defined at:
  2664 ;;		line 75 in file "timer.c"
  2665 ;; Parameters:    Size  Location     Type
  2666 ;;  timer           2    0[BANK0 ] int 
  2667 ;;  val             4    2[BANK0 ] long 
  2668 ;; Auto vars:     Size  Location     Type
  2669 ;;		None
  2670 ;; Return value:  Size  Location     Type
  2671 ;;                  1    wreg      void 
  2672 ;; Registers used:
  2673 ;;		wreg, status,2, status,0
  2674 ;; Tracked objects:
  2675 ;;		On entry : 0/0
  2676 ;;		On exit  : 0/0
  2677 ;;		Unchanged: 0/0
  2678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2679 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2681 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2682 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2683 ;;Total ram usage:        8 bytes
  2684 ;; Hardware stack levels used:    1
  2685 ;; Hardware stack levels required when called:    5
  2686 ;; This function calls:
  2687 ;;		Nothing
  2688 ;; This function is called by:
  2689 ;;		_initServo
  2690 ;;		_testFrequency
  2691 ;; This function uses a non-reentrant model
  2692 ;;
  2693                           
  2694                           	psect	text5
  2695  00357C                     __ptext5:
  2696                           	opt stack 0
  2697  00357C                     _startTimer:
  2698                           	opt stack 23
  2699                           
  2700                           ;timer.c: 76: switch(timer){
  2701                           
  2702                           ;incstack = 0
  2703  00357C  D012               	goto	l4506
  2704  00357E                     l439:
  2705                           
  2706                           ; BSR set to: 0
  2707                           ;timer.c: 78: TMR0H = val>>8;
  2708  00357E  C083  FFD7         	movff	startTimer@val+1,4055	;volatile
  2709                           
  2710                           ;timer.c: 79: TMR0L = val;
  2711  003582  C082  FFD6         	movff	startTimer@val,4054	;volatile
  2712                           
  2713                           ; BSR set to: 0
  2714                           ;timer.c: 80: T0CON |= 1<<7;
  2715  003586  8ED5               	bsf	4053,7,c	;volatile
  2716                           
  2717                           ;timer.c: 81: break;
  2718  003588  0012               	return	
  2719  00358A                     l441:
  2720                           
  2721                           ; BSR set to: 0
  2722                           ;timer.c: 83: TMR1H = val>>8;
  2723  00358A  C083  FFCF         	movff	startTimer@val+1,4047	;volatile
  2724                           
  2725                           ;timer.c: 84: TMR1L = val;
  2726  00358E  C082  FFCE         	movff	startTimer@val,4046	;volatile
  2727                           
  2728                           ; BSR set to: 0
  2729                           ;timer.c: 85: T1CON |= 1<<0;
  2730  003592  80CD               	bsf	4045,0,c	;volatile
  2731                           
  2732                           ;timer.c: 86: break;
  2733  003594  0012               	return	
  2734  003596                     l442:
  2735                           
  2736                           ; BSR set to: 0
  2737                           ;timer.c: 88: TMR3H = val>>8;
  2738  003596  C083  FFB3         	movff	startTimer@val+1,4019	;volatile
  2739                           
  2740                           ;timer.c: 89: TMR3L = val;
  2741  00359A  C082  FFB2         	movff	startTimer@val,4018	;volatile
  2742                           
  2743                           ; BSR set to: 0
  2744                           ;timer.c: 90: T3CON |= 1<<0;
  2745  00359E  80B1               	bsf	4017,0,c	;volatile
  2746                           
  2747                           ;timer.c: 91: }
  2748  0035A0  0012               	return	
  2749  0035A2                     l4506:
  2750  0035A2  C080  F086         	movff	startTimer@timer,??_startTimer
  2751  0035A6  C081  F087         	movff	startTimer@timer+1,??_startTimer+1
  2752                           
  2753                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2754                           ; Switch size 1, requested type "space"
  2755                           ; Number of cases is 1, Range of values is 0 to 0
  2756                           ; switch strategies available:
  2757                           ; Name         Instructions Cycles
  2758                           ; simple_byte            4     3 (average)
  2759                           ;	Chosen strategy is simple_byte
  2760  0035AA  0100               	movlb	0	; () banked
  2761  0035AC  5187               	movf	(??_startTimer+1)& (0+255),w,b
  2762  0035AE  0A00               	xorlw	0	; case 0
  2763  0035B0  A4D8               	btfss	status,2,c
  2764  0035B2  0012               	return	
  2765                           
  2766                           ; BSR set to: 0
  2767                           ; Switch size 1, requested type "space"
  2768                           ; Number of cases is 3, Range of values is 0 to 3
  2769                           ; switch strategies available:
  2770                           ; Name         Instructions Cycles
  2771                           ; simple_byte           10     6 (average)
  2772                           ;	Chosen strategy is simple_byte
  2773  0035B4  0100               	movlb	0	; () banked
  2774  0035B6  5186               	movf	??_startTimer& (0+255),w,b
  2775  0035B8  0A00               	xorlw	0	; case 0
  2776  0035BA  B4D8               	btfsc	status,2,c
  2777  0035BC  D7E0               	goto	l439
  2778  0035BE  0A01               	xorlw	1	; case 1
  2779  0035C0  B4D8               	btfsc	status,2,c
  2780  0035C2  D7E3               	goto	l441
  2781  0035C4  0A02               	xorlw	2	; case 3
  2782  0035C6  A4D8               	btfss	status,2,c
  2783  0035C8  0012               	return	
  2784  0035CA  D7E5               	goto	l442
  2785  0035CC                     __end_of_startTimer:
  2786                           	opt stack 0
  2787                           tblptru	equ	0xFF8
  2788                           tblptrh	equ	0xFF7
  2789                           tblptrl	equ	0xFF6
  2790                           tablat	equ	0xFF5
  2791                           intcon	equ	0xFF2
  2792                           postinc0	equ	0xFEE
  2793                           wreg	equ	0xFE8
  2794                           postdec1	equ	0xFE5
  2795                           fsr1l	equ	0xFE1
  2796                           postinc2	equ	0xFDE
  2797                           postdec2	equ	0xFDD
  2798                           fsr2h	equ	0xFDA
  2799                           fsr2l	equ	0xFD9
  2800                           status	equ	0xFD8
  2801                           
  2802 ;; *************** function _setAngle *****************
  2803 ;; Defined at:
  2804 ;;		line 43 in file "servo.c"
  2805 ;; Parameters:    Size  Location     Type
  2806 ;;  timer           2  108[BANK0 ] int 
  2807 ;;  angle           2  110[BANK0 ] int 
  2808 ;; Auto vars:     Size  Location     Type
  2809 ;;		None
  2810 ;; Return value:  Size  Location     Type
  2811 ;;                  1    wreg      void 
  2812 ;; Registers used:
  2813 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2814 ;; Tracked objects:
  2815 ;;		On entry : 0/0
  2816 ;;		On exit  : 0/0
  2817 ;;		Unchanged: 0/0
  2818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2819 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2821 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2822 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2823 ;;Total ram usage:       10 bytes
  2824 ;; Hardware stack levels used:    1
  2825 ;; Hardware stack levels required when called:    8
  2826 ;; This function calls:
  2827 ;;		_angleToPulse
  2828 ;; This function is called by:
  2829 ;;		_sortBattery
  2830 ;;		_initServo
  2831 ;; This function uses a non-reentrant model
  2832 ;;
  2833                           
  2834                           	psect	text6
  2835  003246                     __ptext6:
  2836                           	opt stack 0
  2837  003246                     _setAngle:
  2838                           	opt stack 21
  2839                           
  2840                           ;servo.c: 44: pulse[timer] = 0xffff - angleToPulse(angle);
  2841                           
  2842                           ; BSR set to: 0
  2843                           ;incstack = 0
  2844  003246  C0EE  F0D5         	movff	setAngle@angle,angleToPulse@angle
  2845  00324A  C0EF  F0D6         	movff	setAngle@angle+1,angleToPulse@angle+1
  2846  00324E  EC7B  F00E         	call	_angleToPulse	;wreg free
  2847  003252  0100               	movlb	0	; () banked
  2848  003254  1FD5               	comf	?_angleToPulse& (0+255),f,b
  2849  003256  0100               	movlb	0	; () banked
  2850  003258  1FD6               	comf	(?_angleToPulse+1)& (0+255),f,b
  2851  00325A  0100               	movlb	0	; () banked
  2852  00325C  1FD7               	comf	(?_angleToPulse+2)& (0+255),f,b
  2853  00325E  0100               	movlb	0	; () banked
  2854  003260  1FD8               	comf	(?_angleToPulse+3)& (0+255),f,b
  2855  003262  0100               	movlb	0	; () banked
  2856  003264  2BD5               	incf	?_angleToPulse& (0+255),f,b
  2857  003266  0E00               	movlw	0
  2858  003268  0100               	movlb	0	; () banked
  2859  00326A  23D6               	addwfc	(?_angleToPulse+1)& (0+255),f,b
  2860  00326C  0100               	movlb	0	; () banked
  2861  00326E  23D7               	addwfc	(?_angleToPulse+2)& (0+255),f,b
  2862  003270  0100               	movlb	0	; () banked
  2863  003272  23D8               	addwfc	(?_angleToPulse+3)& (0+255),f,b
  2864  003274  0EFF               	movlw	255
  2865  003276  0100               	movlb	0	; () banked
  2866  003278  25D5               	addwf	?_angleToPulse& (0+255),w,b
  2867  00327A  0100               	movlb	0	; () banked
  2868  00327C  6FF0               	movwf	??_setAngle& (0+255),b
  2869  00327E  0EFF               	movlw	255
  2870  003280  0100               	movlb	0	; () banked
  2871  003282  21D6               	addwfc	(?_angleToPulse+1)& (0+255),w,b
  2872  003284  0100               	movlb	0	; () banked
  2873  003286  6FF1               	movwf	(??_setAngle+1)& (0+255),b
  2874  003288  0E00               	movlw	0
  2875  00328A  0100               	movlb	0	; () banked
  2876  00328C  21D7               	addwfc	(?_angleToPulse+2)& (0+255),w,b
  2877  00328E  0100               	movlb	0	; () banked
  2878  003290  6FF2               	movwf	(??_setAngle+2)& (0+255),b
  2879  003292  0E00               	movlw	0
  2880  003294  0100               	movlb	0	; () banked
  2881  003296  21D8               	addwfc	(?_angleToPulse+3)& (0+255),w,b
  2882  003298  0100               	movlb	0	; () banked
  2883  00329A  6FF3               	movwf	(??_setAngle+3)& (0+255),b
  2884  00329C  0E00               	movlw	low _pulse
  2885  00329E  0100               	movlb	0	; () banked
  2886  0032A0  6FF4               	movwf	(??_setAngle+4)& (0+255),b
  2887  0032A2  0E01               	movlw	high _pulse
  2888  0032A4  0100               	movlb	0	; () banked
  2889  0032A6  6FF5               	movwf	(??_setAngle+5)& (0+255),b
  2890  0032A8  90D8               	bcf	status,0,c
  2891  0032AA  0100               	movlb	0	; () banked
  2892  0032AC  35EC               	rlcf	setAngle@timer& (0+255),w,b
  2893  0032AE  6ED9               	movwf	fsr2l,c
  2894  0032B0  0100               	movlb	0	; () banked
  2895  0032B2  35ED               	rlcf	(setAngle@timer+1)& (0+255),w,b
  2896  0032B4  6EDA               	movwf	fsr2h,c
  2897  0032B6  90D8               	bcf	status,0,c
  2898  0032B8  36D9               	rlcf	fsr2l,f,c
  2899  0032BA  36DA               	rlcf	fsr2h,f,c
  2900  0032BC  0100               	movlb	0	; () banked
  2901  0032BE  51F4               	movf	(??_setAngle+4)& (0+255),w,b
  2902  0032C0  26D9               	addwf	fsr2l,f,c
  2903  0032C2  0100               	movlb	0	; () banked
  2904  0032C4  51F5               	movf	(??_setAngle+5)& (0+255),w,b
  2905  0032C6  22DA               	addwfc	fsr2h,f,c
  2906  0032C8  C0F0  FFDE         	movff	??_setAngle,postinc2
  2907  0032CC  C0F1  FFDE         	movff	??_setAngle+1,postinc2
  2908  0032D0  C0F2  FFDE         	movff	??_setAngle+2,postinc2
  2909  0032D4  C0F3  FFDE         	movff	??_setAngle+3,postinc2
  2910                           
  2911                           ; BSR set to: 0
  2912  0032D8  0012               	return		;funcret
  2913  0032DA                     __end_of_setAngle:
  2914                           	opt stack 0
  2915                           tblptru	equ	0xFF8
  2916                           tblptrh	equ	0xFF7
  2917                           tblptrl	equ	0xFF6
  2918                           tablat	equ	0xFF5
  2919                           intcon	equ	0xFF2
  2920                           postinc0	equ	0xFEE
  2921                           wreg	equ	0xFE8
  2922                           postdec1	equ	0xFE5
  2923                           fsr1l	equ	0xFE1
  2924                           postinc2	equ	0xFDE
  2925                           postdec2	equ	0xFDD
  2926                           fsr2h	equ	0xFDA
  2927                           fsr2l	equ	0xFD9
  2928                           status	equ	0xFD8
  2929                           
  2930 ;; *************** function _angleToPulse *****************
  2931 ;; Defined at:
  2932 ;;		line 35 in file "servo.c"
  2933 ;; Parameters:    Size  Location     Type
  2934 ;;  angle           2   85[BANK0 ] int 
  2935 ;; Auto vars:     Size  Location     Type
  2936 ;;  a000            4  104[BANK0 ] long 
  2937 ;;  a180            4   97[BANK0 ] long 
  2938 ;;  offset          4   93[BANK0 ] long 
  2939 ;; Return value:  Size  Location     Type
  2940 ;;                  4   85[BANK0 ] long 
  2941 ;; Registers used:
  2942 ;;		wreg, status,2, status,0, cstack
  2943 ;; Tracked objects:
  2944 ;;		On entry : 0/0
  2945 ;;		On exit  : 0/0
  2946 ;;		Unchanged: 0/0
  2947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2948 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2949 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2950 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2951 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2952 ;;Total ram usage:       23 bytes
  2953 ;; Hardware stack levels used:    1
  2954 ;; Hardware stack levels required when called:    7
  2955 ;; This function calls:
  2956 ;;		___altoft
  2957 ;;		___awtoft
  2958 ;;		___ftadd
  2959 ;;		___ftdiv
  2960 ;;		___ftmul
  2961 ;;		___fttol
  2962 ;; This function is called by:
  2963 ;;		_setAngle
  2964 ;; This function uses a non-reentrant model
  2965 ;;
  2966                           
  2967                           	psect	text7
  2968  001CF6                     __ptext7:
  2969                           	opt stack 0
  2970  001CF6                     _angleToPulse:
  2971                           	opt stack 21
  2972                           
  2973                           ;servo.c: 36: long offset = 0;
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;incstack = 0
  2977  001CF6  0E00               	movlw	0
  2978  001CF8  0100               	movlb	0	; () banked
  2979  001CFA  6FDD               	movwf	angleToPulse@offset& (0+255),b
  2980  001CFC  0E00               	movlw	0
  2981  001CFE  6FDE               	movwf	(angleToPulse@offset+1)& (0+255),b
  2982  001D00  0E00               	movlw	0
  2983  001D02  6FDF               	movwf	(angleToPulse@offset+2)& (0+255),b
  2984  001D04  0E00               	movlw	0
  2985  001D06  6FE0               	movwf	(angleToPulse@offset+3)& (0+255),b
  2986                           
  2987                           ;servo.c: 37: long a000 = 1250;
  2988  001D08  0EE2               	movlw	226
  2989  001D0A  0100               	movlb	0	; () banked
  2990  001D0C  6FE8               	movwf	angleToPulse@a000& (0+255),b
  2991  001D0E  0E04               	movlw	4
  2992  001D10  6FE9               	movwf	(angleToPulse@a000+1)& (0+255),b
  2993  001D12  0E00               	movlw	0
  2994  001D14  6FEA               	movwf	(angleToPulse@a000+2)& (0+255),b
  2995  001D16  0E00               	movlw	0
  2996  001D18  6FEB               	movwf	(angleToPulse@a000+3)& (0+255),b
  2997                           
  2998                           ;servo.c: 38: long a180 = 6250;
  2999  001D1A  0E6A               	movlw	106
  3000  001D1C  0100               	movlb	0	; () banked
  3001  001D1E  6FE1               	movwf	angleToPulse@a180& (0+255),b
  3002  001D20  0E18               	movlw	24
  3003  001D22  6FE2               	movwf	(angleToPulse@a180+1)& (0+255),b
  3004  001D24  0E00               	movlw	0
  3005  001D26  6FE3               	movwf	(angleToPulse@a180+2)& (0+255),b
  3006  001D28  0E00               	movlw	0
  3007  001D2A  6FE4               	movwf	(angleToPulse@a180+3)& (0+255),b
  3008                           
  3009                           ; BSR set to: 0
  3010                           ;servo.c: 40: return a000 + angle/180.0*(a180-a000) + offset;
  3011  001D2C  C0E8  F0D9         	movff	angleToPulse@a000,??_angleToPulse
  3012  001D30  C0E9  F0DA         	movff	angleToPulse@a000+1,??_angleToPulse+1
  3013  001D34  C0EA  F0DB         	movff	angleToPulse@a000+2,??_angleToPulse+2
  3014  001D38  C0EB  F0DC         	movff	angleToPulse@a000+3,??_angleToPulse+3
  3015  001D3C  0100               	movlb	0	; () banked
  3016  001D3E  1FD9               	comf	??_angleToPulse& (0+255),f,b
  3017  001D40  1FDA               	comf	(??_angleToPulse+1)& (0+255),f,b
  3018  001D42  1FDB               	comf	(??_angleToPulse+2)& (0+255),f,b
  3019  001D44  1FDC               	comf	(??_angleToPulse+3)& (0+255),f,b
  3020  001D46  2BD9               	incf	??_angleToPulse& (0+255),f,b
  3021  001D48  0E00               	movlw	0
  3022  001D4A  23DA               	addwfc	(??_angleToPulse+1)& (0+255),f,b
  3023  001D4C  23DB               	addwfc	(??_angleToPulse+2)& (0+255),f,b
  3024  001D4E  23DC               	addwfc	(??_angleToPulse+3)& (0+255),f,b
  3025  001D50  0100               	movlb	0	; () banked
  3026  001D52  51E1               	movf	angleToPulse@a180& (0+255),w,b
  3027  001D54  0100               	movlb	0	; () banked
  3028  001D56  25D9               	addwf	??_angleToPulse& (0+255),w,b
  3029  001D58  0100               	movlb	0	; () banked
  3030  001D5A  6F88               	movwf	___altoft@c& (0+255),b
  3031  001D5C  0100               	movlb	0	; () banked
  3032  001D5E  51E2               	movf	(angleToPulse@a180+1)& (0+255),w,b
  3033  001D60  0100               	movlb	0	; () banked
  3034  001D62  21DA               	addwfc	(??_angleToPulse+1)& (0+255),w,b
  3035  001D64  0100               	movlb	0	; () banked
  3036  001D66  6F89               	movwf	(___altoft@c+1)& (0+255),b
  3037  001D68  0100               	movlb	0	; () banked
  3038  001D6A  51E3               	movf	(angleToPulse@a180+2)& (0+255),w,b
  3039  001D6C  0100               	movlb	0	; () banked
  3040  001D6E  21DB               	addwfc	(??_angleToPulse+2)& (0+255),w,b
  3041  001D70  0100               	movlb	0	; () banked
  3042  001D72  6F8A               	movwf	(___altoft@c+2)& (0+255),b
  3043  001D74  0100               	movlb	0	; () banked
  3044  001D76  51E4               	movf	(angleToPulse@a180+3)& (0+255),w,b
  3045  001D78  0100               	movlb	0	; () banked
  3046  001D7A  21DC               	addwfc	(??_angleToPulse+3)& (0+255),w,b
  3047  001D7C  0100               	movlb	0	; () banked
  3048  001D7E  6F8B               	movwf	(___altoft@c+3)& (0+255),b
  3049  001D80  EC87  F018         	call	___altoft	;wreg free
  3050  001D84  C088  F0A4         	movff	?___altoft,___ftmul@f2
  3051  001D88  C089  F0A5         	movff	?___altoft+1,___ftmul@f2+1
  3052  001D8C  C08A  F0A6         	movff	?___altoft+2,___ftmul@f2+2
  3053  001D90  0E00               	movlw	0
  3054  001D92  0100               	movlb	0	; () banked
  3055  001D94  6F95               	movwf	___ftdiv@f2& (0+255),b
  3056  001D96  0E34               	movlw	52
  3057  001D98  0100               	movlb	0	; () banked
  3058  001D9A  6F96               	movwf	(___ftdiv@f2+1)& (0+255),b
  3059  001D9C  0E43               	movlw	67
  3060  001D9E  0100               	movlb	0	; () banked
  3061  001DA0  6F97               	movwf	(___ftdiv@f2+2)& (0+255),b
  3062  001DA2  C0D5  F088         	movff	angleToPulse@angle,___awtoft@c
  3063  001DA6  C0D6  F089         	movff	angleToPulse@angle+1,___awtoft@c+1
  3064  001DAA  ECA1  F01B         	call	___awtoft	;wreg free
  3065  001DAE  C088  F092         	movff	?___awtoft,___ftdiv@f1
  3066  001DB2  C089  F093         	movff	?___awtoft+1,___ftdiv@f1+1
  3067  001DB6  C08A  F094         	movff	?___awtoft+2,___ftdiv@f1+2
  3068  001DBA  ECDD  F00F         	call	___ftdiv	;wreg free
  3069  001DBE  C092  F0A1         	movff	?___ftdiv,___ftmul@f1
  3070  001DC2  C093  F0A2         	movff	?___ftdiv+1,___ftmul@f1+1
  3071  001DC6  C094  F0A3         	movff	?___ftdiv+2,___ftmul@f1+2
  3072  001DCA  EC2E  F00F         	call	___ftmul	;wreg free
  3073  001DCE  C0A1  F0BD         	movff	?___ftmul,___ftadd@f2
  3074  001DD2  C0A2  F0BE         	movff	?___ftmul+1,___ftadd@f2+1
  3075  001DD6  C0A3  F0BF         	movff	?___ftmul+2,___ftadd@f2+2
  3076  001DDA  C0E8  F088         	movff	angleToPulse@a000,___altoft@c
  3077  001DDE  C0E9  F089         	movff	angleToPulse@a000+1,___altoft@c+1
  3078  001DE2  C0EA  F08A         	movff	angleToPulse@a000+2,___altoft@c+2
  3079  001DE6  C0EB  F08B         	movff	angleToPulse@a000+3,___altoft@c+3
  3080  001DEA  EC87  F018         	call	___altoft	;wreg free
  3081  001DEE  C088  F0BA         	movff	?___altoft,___ftadd@f1
  3082  001DF2  C089  F0BB         	movff	?___altoft+1,___ftadd@f1+1
  3083  001DF6  C08A  F0BC         	movff	?___altoft+2,___ftadd@f1+2
  3084  001DFA  ECF4  F009         	call	___ftadd	;wreg free
  3085  001DFE  C0BA  F0E5         	movff	?___ftadd,_angleToPulse$1296
  3086  001E02  C0BB  F0E6         	movff	?___ftadd+1,_angleToPulse$1296+1
  3087  001E06  C0BC  F0E7         	movff	?___ftadd+2,_angleToPulse$1296+2
  3088                           
  3089                           ;servo.c: 40: return a000 + angle/180.0*(a180-a000) + offset;
  3090  001E0A  C0DD  F088         	movff	angleToPulse@offset,___altoft@c
  3091  001E0E  C0DE  F089         	movff	angleToPulse@offset+1,___altoft@c+1
  3092  001E12  C0DF  F08A         	movff	angleToPulse@offset+2,___altoft@c+2
  3093  001E16  C0E0  F08B         	movff	angleToPulse@offset+3,___altoft@c+3
  3094  001E1A  EC87  F018         	call	___altoft	;wreg free
  3095  001E1E  C088  F0BD         	movff	?___altoft,___ftadd@f2
  3096  001E22  C089  F0BE         	movff	?___altoft+1,___ftadd@f2+1
  3097  001E26  C08A  F0BF         	movff	?___altoft+2,___ftadd@f2+2
  3098  001E2A  C0E5  F0BA         	movff	_angleToPulse$1296,___ftadd@f1
  3099  001E2E  C0E6  F0BB         	movff	_angleToPulse$1296+1,___ftadd@f1+1
  3100  001E32  C0E7  F0BC         	movff	_angleToPulse$1296+2,___ftadd@f1+2
  3101  001E36  ECF4  F009         	call	___ftadd	;wreg free
  3102  001E3A  C0BA  F0C6         	movff	?___ftadd,___fttol@f1
  3103  001E3E  C0BB  F0C7         	movff	?___ftadd+1,___fttol@f1+1
  3104  001E42  C0BC  F0C8         	movff	?___ftadd+2,___fttol@f1+2
  3105  001E46  EC83  F010         	call	___fttol	;wreg free
  3106  001E4A  C0C6  F0D5         	movff	?___fttol,?_angleToPulse
  3107  001E4E  C0C7  F0D6         	movff	?___fttol+1,?_angleToPulse+1
  3108  001E52  C0C8  F0D7         	movff	?___fttol+2,?_angleToPulse+2
  3109  001E56  C0C9  F0D8         	movff	?___fttol+3,?_angleToPulse+3
  3110  001E5A  0012               	return	
  3111  001E5C                     __end_of_angleToPulse:
  3112                           	opt stack 0
  3113                           tblptru	equ	0xFF8
  3114                           tblptrh	equ	0xFF7
  3115                           tblptrl	equ	0xFF6
  3116                           tablat	equ	0xFF5
  3117                           intcon	equ	0xFF2
  3118                           postinc0	equ	0xFEE
  3119                           wreg	equ	0xFE8
  3120                           postdec1	equ	0xFE5
  3121                           fsr1l	equ	0xFE1
  3122                           postinc2	equ	0xFDE
  3123                           postdec2	equ	0xFDD
  3124                           fsr2h	equ	0xFDA
  3125                           fsr2l	equ	0xFD9
  3126                           status	equ	0xFD8
  3127                           
  3128 ;; *************** function ___ftdiv *****************
  3129 ;; Defined at:
  3130 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  3131 ;; Parameters:    Size  Location     Type
  3132 ;;  f1              3   18[BANK0 ] float 
  3133 ;;  f2              3   21[BANK0 ] float 
  3134 ;; Auto vars:     Size  Location     Type
  3135 ;;  f3              3   28[BANK0 ] float 
  3136 ;;  sign            1   32[BANK0 ] unsigned char 
  3137 ;;  exp             1   31[BANK0 ] unsigned char 
  3138 ;;  cntr            1   27[BANK0 ] unsigned char 
  3139 ;; Return value:  Size  Location     Type
  3140 ;;                  3   18[BANK0 ] float 
  3141 ;; Registers used:
  3142 ;;		wreg, status,2, status,0, cstack
  3143 ;; Tracked objects:
  3144 ;;		On entry : 0/0
  3145 ;;		On exit  : 0/0
  3146 ;;		Unchanged: 0/0
  3147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3148 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3149 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3150 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3151 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3152 ;;Total ram usage:       15 bytes
  3153 ;; Hardware stack levels used:    1
  3154 ;; Hardware stack levels required when called:    6
  3155 ;; This function calls:
  3156 ;;		___ftpack
  3157 ;; This function is called by:
  3158 ;;		_sortBattery
  3159 ;;		_angleToPulse
  3160 ;;		_testFrequency
  3161 ;; This function uses a non-reentrant model
  3162 ;;
  3163                           
  3164                           	psect	text8
  3165  001FBA                     __ptext8:
  3166                           	opt stack 0
  3167  001FBA                     ___ftdiv:
  3168                           	opt stack 21
  3169                           
  3170                           ;incstack = 0
  3171  001FBA  C094  F098         	movff	___ftdiv@f1+2,??___ftdiv
  3172  001FBE  0100               	movlb	0	; () banked
  3173  001FC0  6B99               	clrf	(??___ftdiv+1)& (0+255),b
  3174  001FC2  6B9A               	clrf	(??___ftdiv+2)& (0+255),b
  3175  001FC4  0100               	movlb	0	; () banked
  3176  001FC6  3593               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  3177  001FC8  0100               	movlb	0	; () banked
  3178  001FCA  3798               	rlcf	??___ftdiv& (0+255),f,b
  3179  001FCC  E301               	bnc	u3091
  3180  001FCE  8199               	bsf	(??___ftdiv+1)& (0+255),0,b
  3181  001FD0                     u3091:
  3182  001FD0  0100               	movlb	0	; () banked
  3183  001FD2  5198               	movf	??___ftdiv& (0+255),w,b
  3184  001FD4  0100               	movlb	0	; () banked
  3185  001FD6  6F9F               	movwf	___ftdiv@exp& (0+255),b
  3186  001FD8  0100               	movlb	0	; () banked
  3187  001FDA  519F               	movf	___ftdiv@exp& (0+255),w,b
  3188  001FDC  A4D8               	btfss	status,2,c
  3189  001FDE  D00A               	goto	l3708
  3190                           
  3191                           ; BSR set to: 0
  3192  001FE0  0E00               	movlw	0
  3193  001FE2  0100               	movlb	0	; () banked
  3194  001FE4  6F92               	movwf	?___ftdiv& (0+255),b
  3195  001FE6  0E00               	movlw	0
  3196  001FE8  0100               	movlb	0	; () banked
  3197  001FEA  6F93               	movwf	(?___ftdiv+1)& (0+255),b
  3198  001FEC  0E00               	movlw	0
  3199  001FEE  0100               	movlb	0	; () banked
  3200  001FF0  6F94               	movwf	(?___ftdiv+2)& (0+255),b
  3201                           
  3202                           ; BSR set to: 0
  3203  001FF2  0012               	return	
  3204  001FF4                     l3708:
  3205                           
  3206                           ; BSR set to: 0
  3207  001FF4  C097  F098         	movff	___ftdiv@f2+2,??___ftdiv
  3208  001FF8  0100               	movlb	0	; () banked
  3209  001FFA  6B99               	clrf	(??___ftdiv+1)& (0+255),b
  3210  001FFC  6B9A               	clrf	(??___ftdiv+2)& (0+255),b
  3211  001FFE  0100               	movlb	0	; () banked
  3212  002000  3596               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  3213  002002  0100               	movlb	0	; () banked
  3214  002004  3798               	rlcf	??___ftdiv& (0+255),f,b
  3215  002006  E301               	bnc	u3111
  3216  002008  8199               	bsf	(??___ftdiv+1)& (0+255),0,b
  3217  00200A                     u3111:
  3218  00200A  0100               	movlb	0	; () banked
  3219  00200C  5198               	movf	??___ftdiv& (0+255),w,b
  3220  00200E  0100               	movlb	0	; () banked
  3221  002010  6FA0               	movwf	___ftdiv@sign& (0+255),b
  3222  002012  0100               	movlb	0	; () banked
  3223  002014  51A0               	movf	___ftdiv@sign& (0+255),w,b
  3224  002016  A4D8               	btfss	status,2,c
  3225  002018  D00A               	goto	l3714
  3226                           
  3227                           ; BSR set to: 0
  3228  00201A  0E00               	movlw	0
  3229  00201C  0100               	movlb	0	; () banked
  3230  00201E  6F92               	movwf	?___ftdiv& (0+255),b
  3231  002020  0E00               	movlw	0
  3232  002022  0100               	movlb	0	; () banked
  3233  002024  6F93               	movwf	(?___ftdiv+1)& (0+255),b
  3234  002026  0E00               	movlw	0
  3235  002028  0100               	movlb	0	; () banked
  3236  00202A  6F94               	movwf	(?___ftdiv+2)& (0+255),b
  3237                           
  3238                           ; BSR set to: 0
  3239  00202C  0012               	return	
  3240  00202E                     l3714:
  3241                           
  3242                           ; BSR set to: 0
  3243  00202E  0E00               	movlw	0
  3244  002030  0100               	movlb	0	; () banked
  3245  002032  6F9C               	movwf	___ftdiv@f3& (0+255),b
  3246  002034  0E00               	movlw	0
  3247  002036  0100               	movlb	0	; () banked
  3248  002038  6F9D               	movwf	(___ftdiv@f3+1)& (0+255),b
  3249  00203A  0E00               	movlw	0
  3250  00203C  0100               	movlb	0	; () banked
  3251  00203E  6F9E               	movwf	(___ftdiv@f3+2)& (0+255),b
  3252                           
  3253                           ; BSR set to: 0
  3254  002040  0100               	movlb	0	; () banked
  3255  002042  51A0               	movf	___ftdiv@sign& (0+255),w,b
  3256  002044  0F89               	addlw	137
  3257  002046  0100               	movlb	0	; () banked
  3258  002048  5F9F               	subwf	___ftdiv@exp& (0+255),f,b
  3259                           
  3260                           ; BSR set to: 0
  3261  00204A  C094  F0A0         	movff	___ftdiv@f1+2,___ftdiv@sign
  3262                           
  3263                           ; BSR set to: 0
  3264  00204E  0100               	movlb	0	; () banked
  3265  002050  5197               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3266  002052  0100               	movlb	0	; () banked
  3267  002054  1BA0               	xorwf	___ftdiv@sign& (0+255),f,b
  3268                           
  3269                           ; BSR set to: 0
  3270  002056  0E80               	movlw	128
  3271  002058  0100               	movlb	0	; () banked
  3272  00205A  17A0               	andwf	___ftdiv@sign& (0+255),f,b
  3273                           
  3274                           ; BSR set to: 0
  3275  00205C  0100               	movlb	0	; () banked
  3276  00205E  8F93               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  3277                           
  3278                           ; BSR set to: 0
  3279  002060  0EFF               	movlw	255
  3280  002062  0100               	movlb	0	; () banked
  3281  002064  1792               	andwf	___ftdiv@f1& (0+255),f,b
  3282  002066  0EFF               	movlw	255
  3283  002068  0100               	movlb	0	; () banked
  3284  00206A  1793               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  3285  00206C  0E00               	movlw	0
  3286  00206E  0100               	movlb	0	; () banked
  3287  002070  1794               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  3288                           
  3289                           ; BSR set to: 0
  3290  002072  0100               	movlb	0	; () banked
  3291  002074  8F96               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  3292                           
  3293                           ; BSR set to: 0
  3294  002076  0EFF               	movlw	255
  3295  002078  0100               	movlb	0	; () banked
  3296  00207A  1795               	andwf	___ftdiv@f2& (0+255),f,b
  3297  00207C  0EFF               	movlw	255
  3298  00207E  0100               	movlb	0	; () banked
  3299  002080  1796               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  3300  002082  0E00               	movlw	0
  3301  002084  0100               	movlb	0	; () banked
  3302  002086  1797               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  3303                           
  3304                           ; BSR set to: 0
  3305  002088  0E18               	movlw	24
  3306  00208A  0100               	movlb	0	; () banked
  3307  00208C  6F9B               	movwf	___ftdiv@cntr& (0+255),b
  3308  00208E                     l3734:
  3309                           
  3310                           ; BSR set to: 0
  3311  00208E  0100               	movlb	0	; () banked
  3312  002090  90D8               	bcf	status,0,c
  3313  002092  379C               	rlcf	___ftdiv@f3& (0+255),f,b
  3314  002094  379D               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  3315  002096  379E               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  3316                           
  3317                           ; BSR set to: 0
  3318  002098  0100               	movlb	0	; () banked
  3319  00209A  5195               	movf	___ftdiv@f2& (0+255),w,b
  3320  00209C  0100               	movlb	0	; () banked
  3321  00209E  5D92               	subwf	___ftdiv@f1& (0+255),w,b
  3322  0020A0  0100               	movlb	0	; () banked
  3323  0020A2  5196               	movf	(___ftdiv@f2+1)& (0+255),w,b
  3324  0020A4  0100               	movlb	0	; () banked
  3325  0020A6  5993               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  3326  0020A8  0100               	movlb	0	; () banked
  3327  0020AA  5197               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3328  0020AC  0100               	movlb	0	; () banked
  3329  0020AE  5994               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  3330  0020B0  A0D8               	btfss	status,0,c
  3331  0020B2  D00E               	goto	l1040
  3332                           
  3333                           ; BSR set to: 0
  3334  0020B4  0100               	movlb	0	; () banked
  3335  0020B6  5195               	movf	___ftdiv@f2& (0+255),w,b
  3336  0020B8  0100               	movlb	0	; () banked
  3337  0020BA  5F92               	subwf	___ftdiv@f1& (0+255),f,b
  3338  0020BC  0100               	movlb	0	; () banked
  3339  0020BE  5196               	movf	(___ftdiv@f2+1)& (0+255),w,b
  3340  0020C0  0100               	movlb	0	; () banked
  3341  0020C2  5B93               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  3342  0020C4  0100               	movlb	0	; () banked
  3343  0020C6  5197               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3344  0020C8  0100               	movlb	0	; () banked
  3345  0020CA  5B94               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  3346                           
  3347                           ; BSR set to: 0
  3348  0020CC  0100               	movlb	0	; () banked
  3349  0020CE  819C               	bsf	___ftdiv@f3& (0+255),0,b
  3350  0020D0                     l1040:
  3351                           
  3352                           ; BSR set to: 0
  3353  0020D0  0100               	movlb	0	; () banked
  3354  0020D2  90D8               	bcf	status,0,c
  3355  0020D4  3792               	rlcf	___ftdiv@f1& (0+255),f,b
  3356  0020D6  3793               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  3357  0020D8  3794               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  3358                           
  3359                           ; BSR set to: 0
  3360  0020DA  0100               	movlb	0	; () banked
  3361  0020DC  2F9B               	decfsz	___ftdiv@cntr& (0+255),f,b
  3362  0020DE  D7D7               	goto	l3734
  3363                           
  3364                           ; BSR set to: 0
  3365                           
  3366                           ; BSR set to: 0
  3367  0020E0  C09C  F080         	movff	___ftdiv@f3,___ftpack@arg
  3368  0020E4  C09D  F081         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3369  0020E8  C09E  F082         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3370  0020EC  C09F  F083         	movff	___ftdiv@exp,___ftpack@exp
  3371  0020F0  C0A0  F084         	movff	___ftdiv@sign,___ftpack@sign
  3372  0020F4  EC63  F012         	call	___ftpack	;wreg free
  3373  0020F8  C080  F092         	movff	?___ftpack,?___ftdiv
  3374  0020FC  C081  F093         	movff	?___ftpack+1,?___ftdiv+1
  3375  002100  C082  F094         	movff	?___ftpack+2,?___ftdiv+2
  3376  002104  0012               	return	
  3377  002106                     __end_of___ftdiv:
  3378                           	opt stack 0
  3379                           tblptru	equ	0xFF8
  3380                           tblptrh	equ	0xFF7
  3381                           tblptrl	equ	0xFF6
  3382                           tablat	equ	0xFF5
  3383                           intcon	equ	0xFF2
  3384                           postinc0	equ	0xFEE
  3385                           wreg	equ	0xFE8
  3386                           postdec1	equ	0xFE5
  3387                           fsr1l	equ	0xFE1
  3388                           postinc2	equ	0xFDE
  3389                           postdec2	equ	0xFDD
  3390                           fsr2h	equ	0xFDA
  3391                           fsr2l	equ	0xFD9
  3392                           status	equ	0xFD8
  3393                           
  3394 ;; *************** function ___awtoft *****************
  3395 ;; Defined at:
  3396 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  3397 ;; Parameters:    Size  Location     Type
  3398 ;;  c               2    8[BANK0 ] int 
  3399 ;; Auto vars:     Size  Location     Type
  3400 ;;  sign            1   11[BANK0 ] unsigned char 
  3401 ;; Return value:  Size  Location     Type
  3402 ;;                  3    8[BANK0 ] float 
  3403 ;; Registers used:
  3404 ;;		wreg, status,2, status,0, cstack
  3405 ;; Tracked objects:
  3406 ;;		On entry : 0/0
  3407 ;;		On exit  : 0/0
  3408 ;;		Unchanged: 0/0
  3409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3410 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3411 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3413 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3414 ;;Total ram usage:        4 bytes
  3415 ;; Hardware stack levels used:    1
  3416 ;; Hardware stack levels required when called:    6
  3417 ;; This function calls:
  3418 ;;		___ftpack
  3419 ;; This function is called by:
  3420 ;;		_angleToPulse
  3421 ;; This function uses a non-reentrant model
  3422 ;;
  3423                           
  3424                           	psect	text9
  3425  003742                     __ptext9:
  3426                           	opt stack 0
  3427  003742                     ___awtoft:
  3428                           	opt stack 21
  3429                           
  3430                           ;incstack = 0
  3431  003742  0E00               	movlw	0
  3432  003744  0100               	movlb	0	; () banked
  3433  003746  6F8B               	movwf	___awtoft@sign& (0+255),b
  3434                           
  3435                           ; BSR set to: 0
  3436  003748  0100               	movlb	0	; () banked
  3437  00374A  AF89               	btfss	(___awtoft@c+1)& (0+255),7,b
  3438  00374C  D008               	goto	l3884
  3439                           
  3440                           ; BSR set to: 0
  3441  00374E  0100               	movlb	0	; () banked
  3442  003750  6D88               	negf	___awtoft@c& (0+255),b
  3443  003752  1F89               	comf	(___awtoft@c+1)& (0+255),f,b
  3444  003754  B0D8               	btfsc	status,0,c
  3445  003756  2B89               	incf	(___awtoft@c+1)& (0+255),f,b
  3446                           
  3447                           ; BSR set to: 0
  3448  003758  0E01               	movlw	1
  3449  00375A  0100               	movlb	0	; () banked
  3450  00375C  6F8B               	movwf	___awtoft@sign& (0+255),b
  3451  00375E                     l3884:
  3452                           
  3453                           ; BSR set to: 0
  3454  00375E  C088  F080         	movff	___awtoft@c,___ftpack@arg
  3455  003762  C089  F081         	movff	___awtoft@c+1,___ftpack@arg+1
  3456  003766  0100               	movlb	0	; () banked
  3457  003768  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
  3458  00376A  0E8E               	movlw	142
  3459  00376C  0100               	movlb	0	; () banked
  3460  00376E  6F83               	movwf	___ftpack@exp& (0+255),b
  3461  003770  C08B  F084         	movff	___awtoft@sign,___ftpack@sign
  3462  003774  EC63  F012         	call	___ftpack	;wreg free
  3463  003778  C080  F088         	movff	?___ftpack,?___awtoft
  3464  00377C  C081  F089         	movff	?___ftpack+1,?___awtoft+1
  3465  003780  C082  F08A         	movff	?___ftpack+2,?___awtoft+2
  3466  003784  0012               	return	
  3467  003786                     __end_of___awtoft:
  3468                           	opt stack 0
  3469                           tblptru	equ	0xFF8
  3470                           tblptrh	equ	0xFF7
  3471                           tblptrl	equ	0xFF6
  3472                           tablat	equ	0xFF5
  3473                           intcon	equ	0xFF2
  3474                           postinc0	equ	0xFEE
  3475                           wreg	equ	0xFE8
  3476                           postdec1	equ	0xFE5
  3477                           fsr1l	equ	0xFE1
  3478                           postinc2	equ	0xFDE
  3479                           postdec2	equ	0xFDD
  3480                           fsr2h	equ	0xFDA
  3481                           fsr2l	equ	0xFD9
  3482                           status	equ	0xFD8
  3483                           
  3484 ;; *************** function ___altoft *****************
  3485 ;; Defined at:
  3486 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  3487 ;; Parameters:    Size  Location     Type
  3488 ;;  c               4    8[BANK0 ] long 
  3489 ;; Auto vars:     Size  Location     Type
  3490 ;;  sign            1   17[BANK0 ] unsigned char 
  3491 ;;  exp             1   16[BANK0 ] unsigned char 
  3492 ;; Return value:  Size  Location     Type
  3493 ;;                  3    8[BANK0 ] float 
  3494 ;; Registers used:
  3495 ;;		wreg, status,2, status,0, cstack
  3496 ;; Tracked objects:
  3497 ;;		On entry : 0/0
  3498 ;;		On exit  : 0/0
  3499 ;;		Unchanged: 0/0
  3500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3501 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3502 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3503 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3504 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3505 ;;Total ram usage:       10 bytes
  3506 ;; Hardware stack levels used:    1
  3507 ;; Hardware stack levels required when called:    6
  3508 ;; This function calls:
  3509 ;;		___ftpack
  3510 ;; This function is called by:
  3511 ;;		_sortBattery
  3512 ;;		_angleToPulse
  3513 ;;		_testFrequency
  3514 ;; This function uses a non-reentrant model
  3515 ;;
  3516                           
  3517                           	psect	text10
  3518  00310E                     __ptext10:
  3519                           	opt stack 0
  3520  00310E                     ___altoft:
  3521                           	opt stack 21
  3522                           
  3523                           ;incstack = 0
  3524  00310E  0E00               	movlw	0
  3525  003110  0100               	movlb	0	; () banked
  3526  003112  6F91               	movwf	___altoft@sign& (0+255),b
  3527  003114  0E8E               	movlw	142
  3528  003116  0100               	movlb	0	; () banked
  3529  003118  6F90               	movwf	___altoft@exp& (0+255),b
  3530                           
  3531                           ; BSR set to: 0
  3532  00311A  0100               	movlb	0	; () banked
  3533  00311C  AF8B               	btfss	(___altoft@c+3)& (0+255),7,b
  3534  00311E  D015               	goto	l3626
  3535                           
  3536                           ; BSR set to: 0
  3537  003120  0100               	movlb	0	; () banked
  3538  003122  1F8B               	comf	(___altoft@c+3)& (0+255),f,b
  3539  003124  1F8A               	comf	(___altoft@c+2)& (0+255),f,b
  3540  003126  1F89               	comf	(___altoft@c+1)& (0+255),f,b
  3541  003128  6D88               	negf	___altoft@c& (0+255),b
  3542  00312A  0E00               	movlw	0
  3543  00312C  2389               	addwfc	(___altoft@c+1)& (0+255),f,b
  3544  00312E  238A               	addwfc	(___altoft@c+2)& (0+255),f,b
  3545  003130  238B               	addwfc	(___altoft@c+3)& (0+255),f,b
  3546                           
  3547                           ; BSR set to: 0
  3548  003132  0E01               	movlw	1
  3549  003134  0100               	movlb	0	; () banked
  3550  003136  6F91               	movwf	___altoft@sign& (0+255),b
  3551                           
  3552                           ; BSR set to: 0
  3553  003138  D008               	goto	l3626
  3554  00313A                     l3624:
  3555                           
  3556                           ; BSR set to: 0
  3557  00313A  0100               	movlb	0	; () banked
  3558  00313C  90D8               	bcf	status,0,c
  3559  00313E  338B               	rrcf	(___altoft@c+3)& (0+255),f,b
  3560  003140  338A               	rrcf	(___altoft@c+2)& (0+255),f,b
  3561  003142  3389               	rrcf	(___altoft@c+1)& (0+255),f,b
  3562  003144  3388               	rrcf	___altoft@c& (0+255),f,b
  3563  003146  0100               	movlb	0	; () banked
  3564  003148  2B90               	incf	___altoft@exp& (0+255),f,b
  3565  00314A                     l3626:
  3566                           
  3567                           ; BSR set to: 0
  3568  00314A  0E00               	movlw	0
  3569  00314C  0100               	movlb	0	; () banked
  3570  00314E  1588               	andwf	___altoft@c& (0+255),w,b
  3571  003150  0100               	movlb	0	; () banked
  3572  003152  6F8C               	movwf	??___altoft& (0+255),b
  3573  003154  0E00               	movlw	0
  3574  003156  0100               	movlb	0	; () banked
  3575  003158  1589               	andwf	(___altoft@c+1)& (0+255),w,b
  3576  00315A  0100               	movlb	0	; () banked
  3577  00315C  6F8D               	movwf	(??___altoft+1)& (0+255),b
  3578  00315E  0E00               	movlw	0
  3579  003160  0100               	movlb	0	; () banked
  3580  003162  158A               	andwf	(___altoft@c+2)& (0+255),w,b
  3581  003164  0100               	movlb	0	; () banked
  3582  003166  6F8E               	movwf	(??___altoft+2)& (0+255),b
  3583  003168  0EFF               	movlw	255
  3584  00316A  0100               	movlb	0	; () banked
  3585  00316C  158B               	andwf	(___altoft@c+3)& (0+255),w,b
  3586  00316E  0100               	movlb	0	; () banked
  3587  003170  6F8F               	movwf	(??___altoft+3)& (0+255),b
  3588  003172  0100               	movlb	0	; () banked
  3589  003174  518C               	movf	??___altoft& (0+255),w,b
  3590  003176  0100               	movlb	0	; () banked
  3591  003178  118D               	iorwf	(??___altoft+1)& (0+255),w,b
  3592  00317A  0100               	movlb	0	; () banked
  3593  00317C  118E               	iorwf	(??___altoft+2)& (0+255),w,b
  3594  00317E  0100               	movlb	0	; () banked
  3595  003180  118F               	iorwf	(??___altoft+3)& (0+255),w,b
  3596  003182  A4D8               	btfss	status,2,c
  3597  003184  D7DA               	goto	l3624
  3598                           
  3599                           ; BSR set to: 0
  3600                           
  3601                           ; BSR set to: 0
  3602  003186  C088  F080         	movff	___altoft@c,___ftpack@arg
  3603  00318A  C089  F081         	movff	___altoft@c+1,___ftpack@arg+1
  3604  00318E  C08A  F082         	movff	___altoft@c+2,___ftpack@arg+2
  3605  003192  C090  F083         	movff	___altoft@exp,___ftpack@exp
  3606  003196  C091  F084         	movff	___altoft@sign,___ftpack@sign
  3607  00319A  EC63  F012         	call	___ftpack	;wreg free
  3608  00319E  C080  F088         	movff	?___ftpack,?___altoft
  3609  0031A2  C081  F089         	movff	?___ftpack+1,?___altoft+1
  3610  0031A6  C082  F08A         	movff	?___ftpack+2,?___altoft+2
  3611  0031AA  0012               	return	
  3612  0031AC                     __end_of___altoft:
  3613                           	opt stack 0
  3614                           tblptru	equ	0xFF8
  3615                           tblptrh	equ	0xFF7
  3616                           tblptrl	equ	0xFF6
  3617                           tablat	equ	0xFF5
  3618                           intcon	equ	0xFF2
  3619                           postinc0	equ	0xFEE
  3620                           wreg	equ	0xFE8
  3621                           postdec1	equ	0xFE5
  3622                           fsr1l	equ	0xFE1
  3623                           postinc2	equ	0xFDE
  3624                           postdec2	equ	0xFDD
  3625                           fsr2h	equ	0xFDA
  3626                           fsr2l	equ	0xFD9
  3627                           status	equ	0xFD8
  3628                           
  3629 ;; *************** function _initTimer *****************
  3630 ;; Defined at:
  3631 ;;		line 52 in file "timer.c"
  3632 ;; Parameters:    Size  Location     Type
  3633 ;;  timer           2    0[BANK0 ] int 
  3634 ;; Auto vars:     Size  Location     Type
  3635 ;;		None
  3636 ;; Return value:  Size  Location     Type
  3637 ;;                  1    wreg      void 
  3638 ;; Registers used:
  3639 ;;		wreg, status,2, status,0
  3640 ;; Tracked objects:
  3641 ;;		On entry : 0/0
  3642 ;;		On exit  : 0/0
  3643 ;;		Unchanged: 0/0
  3644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3645 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3647 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3648 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3649 ;;Total ram usage:        4 bytes
  3650 ;; Hardware stack levels used:    1
  3651 ;; Hardware stack levels required when called:    5
  3652 ;; This function calls:
  3653 ;;		Nothing
  3654 ;; This function is called by:
  3655 ;;		_initServo
  3656 ;;		_testFrequency
  3657 ;; This function uses a non-reentrant model
  3658 ;;
  3659                           
  3660                           	psect	text11
  3661  0036AE                     __ptext11:
  3662                           	opt stack 0
  3663  0036AE                     _initTimer:
  3664                           	opt stack 23
  3665                           
  3666                           ;timer.c: 53: switch(timer){
  3667                           
  3668                           ;incstack = 0
  3669  0036AE  D00D               	goto	l4492
  3670  0036B0                     l4476:
  3671                           
  3672                           ;timer.c: 55: T0CON = 0;
  3673  0036B0  0E00               	movlw	0
  3674  0036B2  6ED5               	movwf	4053,c	;volatile
  3675                           
  3676                           ;timer.c: 56: T0CON |= 1<<3;
  3677  0036B4  86D5               	bsf	4053,3,c	;volatile
  3678                           
  3679                           ;timer.c: 58: TMR0IE = 1;
  3680  0036B6  8AF2               	bsf	intcon,5,c	;volatile
  3681                           
  3682                           ;timer.c: 59: break;
  3683  0036B8  D01C               	goto	l432
  3684  0036BA                     l4482:
  3685                           
  3686                           ;timer.c: 61: T1CON = 0;
  3687  0036BA  0E00               	movlw	0
  3688  0036BC  6ECD               	movwf	4045,c	;volatile
  3689                           
  3690                           ;timer.c: 63: TMR1IE = 1;
  3691  0036BE  809D               	bsf	3997,0,c	;volatile
  3692                           
  3693                           ;timer.c: 64: break;
  3694  0036C0  D018               	goto	l432
  3695  0036C2                     l4486:
  3696                           
  3697                           ;timer.c: 66: T3CON = 0;
  3698  0036C2  0E00               	movlw	0
  3699  0036C4  6EB1               	movwf	4017,c	;volatile
  3700                           
  3701                           ;timer.c: 67: TMR3IE = 1;
  3702  0036C6  82A0               	bsf	4000,1,c	;volatile
  3703                           
  3704                           ;timer.c: 69: }
  3705                           
  3706                           ;timer.c: 68: break;
  3707  0036C8  D014               	goto	l432
  3708  0036CA                     l4492:
  3709  0036CA  C080  F082         	movff	initTimer@timer,??_initTimer
  3710  0036CE  C081  F083         	movff	initTimer@timer+1,??_initTimer+1
  3711                           
  3712                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3713                           ; Switch size 1, requested type "space"
  3714                           ; Number of cases is 1, Range of values is 0 to 0
  3715                           ; switch strategies available:
  3716                           ; Name         Instructions Cycles
  3717                           ; simple_byte            4     3 (average)
  3718                           ;	Chosen strategy is simple_byte
  3719  0036D2  0100               	movlb	0	; () banked
  3720  0036D4  5183               	movf	(??_initTimer+1)& (0+255),w,b
  3721  0036D6  0A00               	xorlw	0	; case 0
  3722  0036D8  A4D8               	btfss	status,2,c
  3723  0036DA  D00B               	goto	l432
  3724                           
  3725                           ; BSR set to: 0
  3726                           ; Switch size 1, requested type "space"
  3727                           ; Number of cases is 3, Range of values is 0 to 3
  3728                           ; switch strategies available:
  3729                           ; Name         Instructions Cycles
  3730                           ; simple_byte           10     6 (average)
  3731                           ;	Chosen strategy is simple_byte
  3732  0036DC  0100               	movlb	0	; () banked
  3733  0036DE  5182               	movf	??_initTimer& (0+255),w,b
  3734  0036E0  0A00               	xorlw	0	; case 0
  3735  0036E2  B4D8               	btfsc	status,2,c
  3736  0036E4  D7E5               	goto	l4476
  3737  0036E6  0A01               	xorlw	1	; case 1
  3738  0036E8  B4D8               	btfsc	status,2,c
  3739  0036EA  D7E7               	goto	l4482
  3740  0036EC  0A02               	xorlw	2	; case 3
  3741  0036EE  B4D8               	btfsc	status,2,c
  3742  0036F0  D7E8               	goto	l4486
  3743  0036F2                     l432:
  3744                           
  3745                           ;timer.c: 70: PEIE = 1;
  3746  0036F2  8CF2               	bsf	intcon,6,c	;volatile
  3747                           
  3748                           ;timer.c: 71: (INTCONbits.GIE = 1);
  3749  0036F4  8EF2               	bsf	intcon,7,c	;volatile
  3750  0036F6  0012               	return		;funcret
  3751  0036F8                     __end_of_initTimer:
  3752                           	opt stack 0
  3753                           tblptru	equ	0xFF8
  3754                           tblptrh	equ	0xFF7
  3755                           tblptrl	equ	0xFF6
  3756                           tablat	equ	0xFF5
  3757                           intcon	equ	0xFF2
  3758                           postinc0	equ	0xFEE
  3759                           wreg	equ	0xFE8
  3760                           postdec1	equ	0xFE5
  3761                           fsr1l	equ	0xFE1
  3762                           postinc2	equ	0xFDE
  3763                           postdec2	equ	0xFDD
  3764                           fsr2h	equ	0xFDA
  3765                           fsr2l	equ	0xFD9
  3766                           status	equ	0xFD8
  3767                           
  3768 ;; *************** function _digitalWrite *****************
  3769 ;; Defined at:
  3770 ;;		line 53 in file "iopin.c"
  3771 ;; Parameters:    Size  Location     Type
  3772 ;;  port            2    0[BANK0 ] int 
  3773 ;;  pin             2    2[BANK0 ] int 
  3774 ;;  val             2    4[BANK0 ] int 
  3775 ;; Auto vars:     Size  Location     Type
  3776 ;;		None
  3777 ;; Return value:  Size  Location     Type
  3778 ;;                  1    wreg      void 
  3779 ;; Registers used:
  3780 ;;		wreg, status,2, status,0
  3781 ;; Tracked objects:
  3782 ;;		On entry : 0/0
  3783 ;;		On exit  : 0/0
  3784 ;;		Unchanged: 0/0
  3785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3786 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3788 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3789 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3790 ;;Total ram usage:        9 bytes
  3791 ;; Hardware stack levels used:    1
  3792 ;; Hardware stack levels required when called:    5
  3793 ;; This function calls:
  3794 ;;		Nothing
  3795 ;; This function is called by:
  3796 ;;		_sortBattery
  3797 ;; This function uses a non-reentrant model
  3798 ;;
  3799                           
  3800                           	psect	text12
  3801  002A8C                     __ptext12:
  3802                           	opt stack 0
  3803  002A8C                     _digitalWrite:
  3804                           	opt stack 24
  3805                           
  3806                           ;iopin.c: 54: pin = 1 << pin;
  3807                           
  3808                           ;incstack = 0
  3809  002A8C  C082  F086         	movff	digitalWrite@pin,??_digitalWrite
  3810  002A90  0E01               	movlw	1
  3811  002A92  0100               	movlb	0	; () banked
  3812  002A94  6F87               	movwf	(??_digitalWrite+1)& (0+255),b
  3813  002A96  0E00               	movlw	0
  3814  002A98  0100               	movlb	0	; () banked
  3815  002A9A  6F88               	movwf	(??_digitalWrite+2)& (0+255),b
  3816  002A9C  0100               	movlb	0	; () banked
  3817  002A9E  2B86               	incf	??_digitalWrite& (0+255),f,b
  3818  002AA0  D004               	goto	u4654
  3819  002AA2                     u4655:
  3820  002AA2  90D8               	bcf	status,0,c
  3821  002AA4  0100               	movlb	0	; () banked
  3822  002AA6  3787               	rlcf	(??_digitalWrite+1)& (0+255),f,b
  3823  002AA8  3788               	rlcf	(??_digitalWrite+2)& (0+255),f,b
  3824  002AAA                     u4654:
  3825  002AAA  0100               	movlb	0	; () banked
  3826  002AAC  2F86               	decfsz	??_digitalWrite& (0+255),f,b
  3827  002AAE  D7F9               	goto	u4655
  3828  002AB0  C087  F082         	movff	??_digitalWrite+1,digitalWrite@pin
  3829  002AB4  C088  F083         	movff	??_digitalWrite+2,digitalWrite@pin+1
  3830                           
  3831                           ;iopin.c: 55: if(val == 0){
  3832  002AB8  0100               	movlb	0	; () banked
  3833  002ABA  5184               	movf	digitalWrite@val& (0+255),w,b
  3834  002ABC  0100               	movlb	0	; () banked
  3835  002ABE  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  3836  002AC0  A4D8               	btfss	status,2,c
  3837  002AC2  D03C               	goto	l4806
  3838                           
  3839                           ; BSR set to: 0
  3840                           ;iopin.c: 56: pin ^= 0xff;
  3841  002AC4  0EFF               	movlw	255
  3842  002AC6  0100               	movlb	0	; () banked
  3843  002AC8  1B82               	xorwf	digitalWrite@pin& (0+255),f,b
  3844                           
  3845                           ; BSR set to: 0
  3846                           ;iopin.c: 57: }
  3847                           ;iopin.c: 59: switch(port){
  3848  002ACA  D038               	goto	l4806
  3849  002ACC                     l4782:
  3850                           
  3851                           ; BSR set to: 0
  3852  002ACC  0100               	movlb	0	; () banked
  3853  002ACE  0584               	decf	digitalWrite@val& (0+255),w,b
  3854  002AD0  0100               	movlb	0	; () banked
  3855  002AD2  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  3856  002AD4  A4D8               	btfss	status,2,c
  3857  002AD6  D004               	goto	l4786
  3858                           
  3859                           ; BSR set to: 0
  3860  002AD8  0100               	movlb	0	; () banked
  3861  002ADA  5182               	movf	digitalWrite@pin& (0+255),w,b
  3862  002ADC  1289               	iorwf	3977,f,c	;volatile
  3863  002ADE  0012               	return	
  3864  002AE0                     l4786:
  3865                           
  3866                           ; BSR set to: 0
  3867                           ;iopin.c: 61: else LATA &= pin;
  3868  002AE0  0100               	movlb	0	; () banked
  3869  002AE2  5182               	movf	digitalWrite@pin& (0+255),w,b
  3870  002AE4  1689               	andwf	3977,f,c	;volatile
  3871                           
  3872                           ; BSR set to: 0
  3873                           ;iopin.c: 62: break;
  3874  002AE6  0012               	return	
  3875  002AE8                     l4788:
  3876                           
  3877                           ; BSR set to: 0
  3878  002AE8  0100               	movlb	0	; () banked
  3879  002AEA  0584               	decf	digitalWrite@val& (0+255),w,b
  3880  002AEC  0100               	movlb	0	; () banked
  3881  002AEE  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  3882  002AF0  A4D8               	btfss	status,2,c
  3883  002AF2  D004               	goto	l4792
  3884                           
  3885                           ; BSR set to: 0
  3886  002AF4  0100               	movlb	0	; () banked
  3887  002AF6  5182               	movf	digitalWrite@pin& (0+255),w,b
  3888  002AF8  128A               	iorwf	3978,f,c	;volatile
  3889  002AFA  0012               	return	
  3890  002AFC                     l4792:
  3891                           
  3892                           ; BSR set to: 0
  3893                           ;iopin.c: 64: else LATB &= pin;
  3894  002AFC  0100               	movlb	0	; () banked
  3895  002AFE  5182               	movf	digitalWrite@pin& (0+255),w,b
  3896  002B00  168A               	andwf	3978,f,c	;volatile
  3897                           
  3898                           ; BSR set to: 0
  3899                           ;iopin.c: 65: break;
  3900  002B02  0012               	return	
  3901  002B04                     l4794:
  3902                           
  3903                           ; BSR set to: 0
  3904  002B04  0100               	movlb	0	; () banked
  3905  002B06  0584               	decf	digitalWrite@val& (0+255),w,b
  3906  002B08  0100               	movlb	0	; () banked
  3907  002B0A  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  3908  002B0C  A4D8               	btfss	status,2,c
  3909  002B0E  D004               	goto	l4798
  3910                           
  3911                           ; BSR set to: 0
  3912  002B10  0100               	movlb	0	; () banked
  3913  002B12  5182               	movf	digitalWrite@pin& (0+255),w,b
  3914  002B14  128B               	iorwf	3979,f,c	;volatile
  3915  002B16  0012               	return	
  3916  002B18                     l4798:
  3917                           
  3918                           ; BSR set to: 0
  3919                           ;iopin.c: 67: else LATC &= pin;
  3920  002B18  0100               	movlb	0	; () banked
  3921  002B1A  5182               	movf	digitalWrite@pin& (0+255),w,b
  3922  002B1C  168B               	andwf	3979,f,c	;volatile
  3923                           
  3924                           ; BSR set to: 0
  3925                           ;iopin.c: 68: break;
  3926  002B1E  0012               	return	
  3927  002B20                     l4800:
  3928                           
  3929                           ; BSR set to: 0
  3930  002B20  0100               	movlb	0	; () banked
  3931  002B22  0584               	decf	digitalWrite@val& (0+255),w,b
  3932  002B24  0100               	movlb	0	; () banked
  3933  002B26  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  3934  002B28  A4D8               	btfss	status,2,c
  3935  002B2A  D004               	goto	l4804
  3936                           
  3937                           ; BSR set to: 0
  3938  002B2C  0100               	movlb	0	; () banked
  3939  002B2E  5182               	movf	digitalWrite@pin& (0+255),w,b
  3940  002B30  128C               	iorwf	3980,f,c	;volatile
  3941  002B32  0012               	return	
  3942  002B34                     l4804:
  3943                           
  3944                           ; BSR set to: 0
  3945                           ;iopin.c: 70: else LATD &= pin;
  3946  002B34  0100               	movlb	0	; () banked
  3947  002B36  5182               	movf	digitalWrite@pin& (0+255),w,b
  3948  002B38  168C               	andwf	3980,f,c	;volatile
  3949                           
  3950                           ; BSR set to: 0
  3951                           ;iopin.c: 71: }
  3952  002B3A  0012               	return	
  3953  002B3C                     l4806:
  3954                           
  3955                           ; BSR set to: 0
  3956  002B3C  C080  F086         	movff	digitalWrite@port,??_digitalWrite
  3957  002B40  C081  F087         	movff	digitalWrite@port+1,??_digitalWrite+1
  3958                           
  3959                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3960                           ; Switch size 1, requested type "space"
  3961                           ; Number of cases is 1, Range of values is 0 to 0
  3962                           ; switch strategies available:
  3963                           ; Name         Instructions Cycles
  3964                           ; simple_byte            4     3 (average)
  3965                           ;	Chosen strategy is simple_byte
  3966  002B44  0100               	movlb	0	; () banked
  3967  002B46  5187               	movf	(??_digitalWrite+1)& (0+255),w,b
  3968  002B48  0A00               	xorlw	0	; case 0
  3969  002B4A  A4D8               	btfss	status,2,c
  3970  002B4C  0012               	return	
  3971                           
  3972                           ; BSR set to: 0
  3973                           ; Switch size 1, requested type "space"
  3974                           ; Number of cases is 4, Range of values is 0 to 3
  3975                           ; switch strategies available:
  3976                           ; Name         Instructions Cycles
  3977                           ; simple_byte           13     7 (average)
  3978                           ;	Chosen strategy is simple_byte
  3979  002B4E  0100               	movlb	0	; () banked
  3980  002B50  5186               	movf	??_digitalWrite& (0+255),w,b
  3981  002B52  0A00               	xorlw	0	; case 0
  3982  002B54  B4D8               	btfsc	status,2,c
  3983  002B56  D7BA               	goto	l4782
  3984  002B58  0A01               	xorlw	1	; case 1
  3985  002B5A  B4D8               	btfsc	status,2,c
  3986  002B5C  D7C5               	goto	l4788
  3987  002B5E  0A03               	xorlw	3	; case 2
  3988  002B60  B4D8               	btfsc	status,2,c
  3989  002B62  D7D0               	goto	l4794
  3990  002B64  0A01               	xorlw	1	; case 3
  3991  002B66  A4D8               	btfss	status,2,c
  3992  002B68  0012               	return	
  3993  002B6A  D7DA               	goto	l4800
  3994  002B6C                     __end_of_digitalWrite:
  3995                           	opt stack 0
  3996                           tblptru	equ	0xFF8
  3997                           tblptrh	equ	0xFF7
  3998                           tblptrl	equ	0xFF6
  3999                           tablat	equ	0xFF5
  4000                           intcon	equ	0xFF2
  4001                           postinc0	equ	0xFEE
  4002                           wreg	equ	0xFE8
  4003                           postdec1	equ	0xFE5
  4004                           fsr1l	equ	0xFE1
  4005                           postinc2	equ	0xFDE
  4006                           postdec2	equ	0xFDD
  4007                           fsr2h	equ	0xFDA
  4008                           fsr2l	equ	0xFD9
  4009                           status	equ	0xFD8
  4010                           
  4011 ;; *************** function _digitalRead *****************
  4012 ;; Defined at:
  4013 ;;		line 43 in file "iopin.c"
  4014 ;; Parameters:    Size  Location     Type
  4015 ;;  port            2    0[BANK0 ] int 
  4016 ;;  pin             2    2[BANK0 ] int 
  4017 ;; Auto vars:     Size  Location     Type
  4018 ;;		None
  4019 ;; Return value:  Size  Location     Type
  4020 ;;                  2    0[BANK0 ] int 
  4021 ;; Registers used:
  4022 ;;		wreg, status,2, status,0
  4023 ;; Tracked objects:
  4024 ;;		On entry : 0/0
  4025 ;;		On exit  : 0/0
  4026 ;;		Unchanged: 0/0
  4027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4028 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4030 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4031 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4032 ;;Total ram usage:        6 bytes
  4033 ;; Hardware stack levels used:    1
  4034 ;; Hardware stack levels required when called:    5
  4035 ;; This function calls:
  4036 ;;		Nothing
  4037 ;; This function is called by:
  4038 ;;		_sortBattery
  4039 ;; This function uses a non-reentrant model
  4040 ;;
  4041                           
  4042                           	psect	text13
  4043  0028BE                     __ptext13:
  4044                           	opt stack 0
  4045  0028BE                     _digitalRead:
  4046                           	opt stack 24
  4047                           
  4048                           ;iopin.c: 44: switch(port){
  4049                           
  4050                           ; BSR set to: 0
  4051                           ;incstack = 0
  4052  0028BE  D058               	goto	l4838
  4053  0028C0                     l4820:
  4054  0028C0  C082  F084         	movff	digitalRead@pin,??_digitalRead
  4055  0028C4  CF80 F085          	movff	3968,??_digitalRead+1	;volatile
  4056  0028C8  0100               	movlb	0	; () banked
  4057  0028CA  2B84               	incf	??_digitalRead& (0+255),f,b
  4058  0028CC  D003               	goto	u4714
  4059  0028CE                     u4715:
  4060  0028CE  0100               	movlb	0	; () banked
  4061  0028D0  90D8               	bcf	status,0,c
  4062  0028D2  3385               	rrcf	(??_digitalRead+1)& (0+255),f,b
  4063  0028D4                     u4714:
  4064  0028D4  0100               	movlb	0	; () banked
  4065  0028D6  2F84               	decfsz	??_digitalRead& (0+255),f,b
  4066  0028D8  D7FA               	goto	u4715
  4067  0028DA  0E01               	movlw	1
  4068  0028DC  0100               	movlb	0	; () banked
  4069  0028DE  1785               	andwf	(??_digitalRead+1)& (0+255),f,b
  4070  0028E0  0100               	movlb	0	; () banked
  4071  0028E2  5185               	movf	(??_digitalRead+1)& (0+255),w,b
  4072  0028E4  0100               	movlb	0	; () banked
  4073  0028E6  6F80               	movwf	?_digitalRead& (0+255),b
  4074  0028E8  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  4075                           
  4076                           ; BSR set to: 0
  4077  0028EA  0012               	return	
  4078  0028EC                     l4824:
  4079                           
  4080                           ; BSR set to: 0
  4081  0028EC  C082  F084         	movff	digitalRead@pin,??_digitalRead
  4082  0028F0  CF81 F085          	movff	3969,??_digitalRead+1	;volatile
  4083  0028F4  0100               	movlb	0	; () banked
  4084  0028F6  2B84               	incf	??_digitalRead& (0+255),f,b
  4085  0028F8  D003               	goto	u4724
  4086  0028FA                     u4725:
  4087  0028FA  0100               	movlb	0	; () banked
  4088  0028FC  90D8               	bcf	status,0,c
  4089  0028FE  3385               	rrcf	(??_digitalRead+1)& (0+255),f,b
  4090  002900                     u4724:
  4091  002900  0100               	movlb	0	; () banked
  4092  002902  2F84               	decfsz	??_digitalRead& (0+255),f,b
  4093  002904  D7FA               	goto	u4725
  4094  002906  0E01               	movlw	1
  4095  002908  0100               	movlb	0	; () banked
  4096  00290A  1785               	andwf	(??_digitalRead+1)& (0+255),f,b
  4097  00290C  0100               	movlb	0	; () banked
  4098  00290E  5185               	movf	(??_digitalRead+1)& (0+255),w,b
  4099  002910  0100               	movlb	0	; () banked
  4100  002912  6F80               	movwf	?_digitalRead& (0+255),b
  4101  002914  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  4102                           
  4103                           ; BSR set to: 0
  4104  002916  0012               	return	
  4105  002918                     l4828:
  4106                           
  4107                           ; BSR set to: 0
  4108  002918  C082  F084         	movff	digitalRead@pin,??_digitalRead
  4109  00291C  CF82 F085          	movff	3970,??_digitalRead+1	;volatile
  4110  002920  0100               	movlb	0	; () banked
  4111  002922  2B84               	incf	??_digitalRead& (0+255),f,b
  4112  002924  D003               	goto	u4734
  4113  002926                     u4735:
  4114  002926  0100               	movlb	0	; () banked
  4115  002928  90D8               	bcf	status,0,c
  4116  00292A  3385               	rrcf	(??_digitalRead+1)& (0+255),f,b
  4117  00292C                     u4734:
  4118  00292C  0100               	movlb	0	; () banked
  4119  00292E  2F84               	decfsz	??_digitalRead& (0+255),f,b
  4120  002930  D7FA               	goto	u4735
  4121  002932  0E01               	movlw	1
  4122  002934  0100               	movlb	0	; () banked
  4123  002936  1785               	andwf	(??_digitalRead+1)& (0+255),f,b
  4124  002938  0100               	movlb	0	; () banked
  4125  00293A  5185               	movf	(??_digitalRead+1)& (0+255),w,b
  4126  00293C  0100               	movlb	0	; () banked
  4127  00293E  6F80               	movwf	?_digitalRead& (0+255),b
  4128  002940  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  4129                           
  4130                           ; BSR set to: 0
  4131  002942  0012               	return	
  4132  002944                     l4832:
  4133                           
  4134                           ; BSR set to: 0
  4135  002944  C082  F084         	movff	digitalRead@pin,??_digitalRead
  4136  002948  CF83 F085          	movff	3971,??_digitalRead+1	;volatile
  4137  00294C  0100               	movlb	0	; () banked
  4138  00294E  2B84               	incf	??_digitalRead& (0+255),f,b
  4139  002950  D003               	goto	u4744
  4140  002952                     u4745:
  4141  002952  0100               	movlb	0	; () banked
  4142  002954  90D8               	bcf	status,0,c
  4143  002956  3385               	rrcf	(??_digitalRead+1)& (0+255),f,b
  4144  002958                     u4744:
  4145  002958  0100               	movlb	0	; () banked
  4146  00295A  2F84               	decfsz	??_digitalRead& (0+255),f,b
  4147  00295C  D7FA               	goto	u4745
  4148  00295E  0E01               	movlw	1
  4149  002960  0100               	movlb	0	; () banked
  4150  002962  1785               	andwf	(??_digitalRead+1)& (0+255),f,b
  4151  002964  0100               	movlb	0	; () banked
  4152  002966  5185               	movf	(??_digitalRead+1)& (0+255),w,b
  4153  002968  0100               	movlb	0	; () banked
  4154  00296A  6F80               	movwf	?_digitalRead& (0+255),b
  4155  00296C  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  4156                           
  4157                           ; BSR set to: 0
  4158  00296E  0012               	return	
  4159  002970                     l4838:
  4160  002970  C080  F084         	movff	digitalRead@port,??_digitalRead
  4161  002974  C081  F085         	movff	digitalRead@port+1,??_digitalRead+1
  4162                           
  4163                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4164                           ; Switch size 1, requested type "space"
  4165                           ; Number of cases is 1, Range of values is 0 to 0
  4166                           ; switch strategies available:
  4167                           ; Name         Instructions Cycles
  4168                           ; simple_byte            4     3 (average)
  4169                           ;	Chosen strategy is simple_byte
  4170  002978  0100               	movlb	0	; () banked
  4171  00297A  5185               	movf	(??_digitalRead+1)& (0+255),w,b
  4172  00297C  0A00               	xorlw	0	; case 0
  4173  00297E  A4D8               	btfss	status,2,c
  4174  002980  D00E               	goto	l334
  4175                           
  4176                           ; BSR set to: 0
  4177                           ; Switch size 1, requested type "space"
  4178                           ; Number of cases is 4, Range of values is 0 to 3
  4179                           ; switch strategies available:
  4180                           ; Name         Instructions Cycles
  4181                           ; simple_byte           13     7 (average)
  4182                           ;	Chosen strategy is simple_byte
  4183  002982  0100               	movlb	0	; () banked
  4184  002984  5184               	movf	??_digitalRead& (0+255),w,b
  4185  002986  0A00               	xorlw	0	; case 0
  4186  002988  B4D8               	btfsc	status,2,c
  4187  00298A  D79A               	goto	l4820
  4188  00298C  0A01               	xorlw	1	; case 1
  4189  00298E  B4D8               	btfsc	status,2,c
  4190  002990  D7AD               	goto	l4824
  4191  002992  0A03               	xorlw	3	; case 2
  4192  002994  B4D8               	btfsc	status,2,c
  4193  002996  D7C0               	goto	l4828
  4194  002998  0A01               	xorlw	1	; case 3
  4195  00299A  B4D8               	btfsc	status,2,c
  4196  00299C  D7D3               	goto	l4832
  4197  00299E                     l334:
  4198                           
  4199                           ; BSR set to: 0
  4200                           ;iopin.c: 50: return -1;
  4201  00299E  0100               	movlb	0	; () banked
  4202  0029A0  6980               	setf	?_digitalRead& (0+255),b
  4203  0029A2  6981               	setf	(?_digitalRead+1)& (0+255),b
  4204                           
  4205                           ; BSR set to: 0
  4206  0029A4  0012               	return		;funcret
  4207  0029A6                     __end_of_digitalRead:
  4208                           	opt stack 0
  4209                           tblptru	equ	0xFF8
  4210                           tblptrh	equ	0xFF7
  4211                           tblptrl	equ	0xFF6
  4212                           tablat	equ	0xFF5
  4213                           intcon	equ	0xFF2
  4214                           postinc0	equ	0xFEE
  4215                           wreg	equ	0xFE8
  4216                           postdec1	equ	0xFE5
  4217                           fsr1l	equ	0xFE1
  4218                           postinc2	equ	0xFDE
  4219                           postdec2	equ	0xFDD
  4220                           fsr2h	equ	0xFDA
  4221                           fsr2l	equ	0xFD9
  4222                           status	equ	0xFD8
  4223                           
  4224 ;; *************** function _analogRead *****************
  4225 ;; Defined at:
  4226 ;;		line 88 in file "iopin.c"
  4227 ;; Parameters:    Size  Location     Type
  4228 ;;  channel         2    0[BANK0 ] int 
  4229 ;; Auto vars:     Size  Location     Type
  4230 ;;		None
  4231 ;; Return value:  Size  Location     Type
  4232 ;;                  4    0[BANK0 ] long 
  4233 ;; Registers used:
  4234 ;;		wreg, status,2, status,0
  4235 ;; Tracked objects:
  4236 ;;		On entry : 0/0
  4237 ;;		On exit  : 0/0
  4238 ;;		Unchanged: 0/0
  4239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4240 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4242 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4243 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4244 ;;Total ram usage:        6 bytes
  4245 ;; Hardware stack levels used:    1
  4246 ;; Hardware stack levels required when called:    5
  4247 ;; This function calls:
  4248 ;;		Nothing
  4249 ;; This function is called by:
  4250 ;;		_sortBattery
  4251 ;; This function uses a non-reentrant model
  4252 ;;
  4253                           
  4254                           	psect	text14
  4255  003786                     __ptext14:
  4256                           	opt stack 0
  4257  003786                     _analogRead:
  4258                           	opt stack 24
  4259                           
  4260                           ;iopin.c: 89: ADCON0 = channel<<2;
  4261                           
  4262                           ; BSR set to: 0
  4263                           ;incstack = 0
  4264  003786  0100               	movlb	0	; () banked
  4265  003788  4580               	rlncf	analogRead@channel& (0+255),w,b
  4266  00378A  46E8               	rlncf	wreg,f,c
  4267  00378C  0BFC               	andlw	252
  4268  00378E  6EC2               	movwf	4034,c	;volatile
  4269                           
  4270                           ; BSR set to: 0
  4271                           ;iopin.c: 90: ADCON0 |= 1<<0;
  4272  003790  80C2               	bsf	4034,0,c	;volatile
  4273                           
  4274                           ; BSR set to: 0
  4275                           ;iopin.c: 91: ADCON0 |= 1<<1;
  4276  003792  82C2               	bsf	4034,1,c	;volatile
  4277  003794                     l358:
  4278  003794  B2C2               	btfsc	4034,1,c	;volatile
  4279  003796  D7FE               	goto	l358
  4280                           
  4281                           ;iopin.c: 95: return (ADRESH<<8) + ADRESL;
  4282  003798  50C3               	movf	4035,w,c	;volatile
  4283  00379A  CFC4 F084          	movff	4036,??_analogRead	;volatile
  4284  00379E  0100               	movlb	0	; () banked
  4285  0037A0  6B85               	clrf	(??_analogRead+1)& (0+255),b
  4286  0037A2  C084  F085         	movff	??_analogRead,??_analogRead+1
  4287  0037A6  0100               	movlb	0	; () banked
  4288  0037A8  6B84               	clrf	??_analogRead& (0+255),b
  4289  0037AA  0100               	movlb	0	; () banked
  4290  0037AC  2784               	addwf	??_analogRead& (0+255),f,b
  4291  0037AE  0E00               	movlw	0
  4292  0037B0  2385               	addwfc	(??_analogRead+1)& (0+255),f,b
  4293  0037B2  C084  F080         	movff	??_analogRead,?_analogRead
  4294  0037B6  C085  F081         	movff	??_analogRead+1,?_analogRead+1
  4295  0037BA  0100               	movlb	0	; () banked
  4296  0037BC  0E00               	movlw	0
  4297  0037BE  BF81               	btfsc	(?_analogRead+1)& (0+255),7,b
  4298  0037C0  0EFF               	movlw	-1
  4299  0037C2  6F82               	movwf	(?_analogRead+2)& (0+255),b
  4300  0037C4  6F83               	movwf	(?_analogRead+3)& (0+255),b
  4301  0037C6  0012               	return	
  4302  0037C8                     __end_of_analogRead:
  4303                           	opt stack 0
  4304                           tblptru	equ	0xFF8
  4305                           tblptrh	equ	0xFF7
  4306                           tblptrl	equ	0xFF6
  4307                           tablat	equ	0xFF5
  4308                           intcon	equ	0xFF2
  4309                           postinc0	equ	0xFEE
  4310                           wreg	equ	0xFE8
  4311                           postdec1	equ	0xFE5
  4312                           fsr1l	equ	0xFE1
  4313                           postinc2	equ	0xFDE
  4314                           postdec2	equ	0xFDD
  4315                           fsr2h	equ	0xFDA
  4316                           fsr2l	equ	0xFD9
  4317                           status	equ	0xFD8
  4318                           
  4319 ;; *************** function _showInterface *****************
  4320 ;; Defined at:
  4321 ;;		line 200 in file "main.c"
  4322 ;; Parameters:    Size  Location     Type
  4323 ;;		None
  4324 ;; Auto vars:     Size  Location     Type
  4325 ;;  key             1  123[BANK0 ] unsigned char 
  4326 ;; Return value:  Size  Location     Type
  4327 ;;                  1    wreg      void 
  4328 ;; Registers used:
  4329 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4330 ;; Tracked objects:
  4331 ;;		On entry : 0/0
  4332 ;;		On exit  : 0/0
  4333 ;;		Unchanged: 0/0
  4334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4336 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4338 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4339 ;;Total ram usage:        1 bytes
  4340 ;; Hardware stack levels used:    1
  4341 ;; Hardware stack levels required when called:   11
  4342 ;; This function calls:
  4343 ;;		_dateTime
  4344 ;;		_mainMenu
  4345 ;;		_readKeypad
  4346 ;;		_runMenu
  4347 ;;		_runSelect
  4348 ;;		_runStats
  4349 ;;		_runTime
  4350 ;; This function is called by:
  4351 ;;		_main
  4352 ;; This function uses a non-reentrant model
  4353 ;;
  4354                           
  4355                           	psect	text15
  4356  0025D2                     __ptext15:
  4357                           	opt stack 0
  4358  0025D2                     _showInterface:
  4359                           	opt stack 19
  4360  0025D2                     
  4361                           ;main.c: 203: dateTime();
  4362  0025D2  EC0C  F01D         	call	_dateTime	;wreg free
  4363  0025D6                     l5004:
  4364  0025D6  EC82  F01C         	call	_readKeypad	;wreg free
  4365  0025DA  0A41               	xorlw	65
  4366  0025DC  A4D8               	btfss	status,2,c
  4367  0025DE  D7FB               	goto	l5004
  4368  0025E0                     l5006:
  4369                           
  4370                           ;main.c: 208: mainMenu();
  4371  0025E0  ECF9  F01C         	call	_mainMenu	;wreg free
  4372  0025E4                     l5008:
  4373  0025E4  EC82  F01C         	call	_readKeypad	;wreg free
  4374  0025E8  0100               	movlb	0	; () banked
  4375  0025EA  6FFB               	movwf	showInterface@key& (0+255),b
  4376                           
  4377                           ; BSR set to: 0
  4378                           ;main.c: 212: while(key != 'B' && key != 'C' && key != '*');
  4379  0025EC  0E42               	movlw	66
  4380  0025EE  0100               	movlb	0	; () banked
  4381  0025F0  19FB               	xorwf	showInterface@key& (0+255),w,b
  4382  0025F2  B4D8               	btfsc	status,2,c
  4383  0025F4  D00A               	goto	l5016
  4384                           
  4385                           ; BSR set to: 0
  4386  0025F6  0E43               	movlw	67
  4387  0025F8  0100               	movlb	0	; () banked
  4388  0025FA  19FB               	xorwf	showInterface@key& (0+255),w,b
  4389  0025FC  B4D8               	btfsc	status,2,c
  4390  0025FE  D005               	goto	l5016
  4391                           
  4392                           ; BSR set to: 0
  4393  002600  0E2A               	movlw	42
  4394  002602  0100               	movlb	0	; () banked
  4395  002604  19FB               	xorwf	showInterface@key& (0+255),w,b
  4396  002606  A4D8               	btfss	status,2,c
  4397  002608  D7ED               	goto	l5008
  4398  00260A                     l5016:
  4399                           
  4400                           ; BSR set to: 0
  4401                           ;main.c: 214: if(key == 'C'){
  4402  00260A  0E43               	movlw	67
  4403  00260C  0100               	movlb	0	; () banked
  4404  00260E  19FB               	xorwf	showInterface@key& (0+255),w,b
  4405  002610  A4D8               	btfss	status,2,c
  4406  002612  D056               	goto	l5060
  4407                           
  4408                           ; BSR set to: 0
  4409                           ;main.c: 216: runSelect();
  4410  002614  ECE6  F01C         	call	_runSelect	;wreg free
  4411  002618                     l5020:
  4412  002618  EC82  F01C         	call	_readKeypad	;wreg free
  4413  00261C  0100               	movlb	0	; () banked
  4414  00261E  6FFB               	movwf	showInterface@key& (0+255),b
  4415                           
  4416                           ; BSR set to: 0
  4417                           ;main.c: 222: while(key != '1' && key != '2' && key != '3' && key != '4' && key != '*');
  4418  002620  0E31               	movlw	49
  4419  002622  0100               	movlb	0	; () banked
  4420  002624  19FB               	xorwf	showInterface@key& (0+255),w,b
  4421  002626  B4D8               	btfsc	status,2,c
  4422  002628  D014               	goto	l5032
  4423                           
  4424                           ; BSR set to: 0
  4425  00262A  0E32               	movlw	50
  4426  00262C  0100               	movlb	0	; () banked
  4427  00262E  19FB               	xorwf	showInterface@key& (0+255),w,b
  4428  002630  B4D8               	btfsc	status,2,c
  4429  002632  D00F               	goto	l5032
  4430                           
  4431                           ; BSR set to: 0
  4432  002634  0E33               	movlw	51
  4433  002636  0100               	movlb	0	; () banked
  4434  002638  19FB               	xorwf	showInterface@key& (0+255),w,b
  4435  00263A  B4D8               	btfsc	status,2,c
  4436  00263C  D00A               	goto	l5032
  4437                           
  4438                           ; BSR set to: 0
  4439  00263E  0E34               	movlw	52
  4440  002640  0100               	movlb	0	; () banked
  4441  002642  19FB               	xorwf	showInterface@key& (0+255),w,b
  4442  002644  B4D8               	btfsc	status,2,c
  4443  002646  D005               	goto	l5032
  4444                           
  4445                           ; BSR set to: 0
  4446  002648  0E2A               	movlw	42
  4447  00264A  0100               	movlb	0	; () banked
  4448  00264C  19FB               	xorwf	showInterface@key& (0+255),w,b
  4449  00264E  A4D8               	btfss	status,2,c
  4450  002650  D7E3               	goto	l5020
  4451  002652                     l5032:
  4452                           
  4453                           ; BSR set to: 0
  4454                           ;main.c: 224: if(key == '*')continue;
  4455  002652  0E2A               	movlw	42
  4456  002654  0100               	movlb	0	; () banked
  4457  002656  19FB               	xorwf	showInterface@key& (0+255),w,b
  4458  002658  B4D8               	btfsc	status,2,c
  4459  00265A  D7C2               	goto	l5006
  4460  00265C                     l5036:
  4461                           
  4462                           ;main.c: 230: runMenu(key);
  4463  00265C  0100               	movlb	0	; () banked
  4464  00265E  51FB               	movf	showInterface@key& (0+255),w,b
  4465  002660  EC3A  F01C         	call	_runMenu
  4466  002664                     l5038:
  4467  002664  EC82  F01C         	call	_readKeypad	;wreg free
  4468  002668  0100               	movlb	0	; () banked
  4469  00266A  6FFB               	movwf	showInterface@key& (0+255),b
  4470                           
  4471                           ; BSR set to: 0
  4472                           ;main.c: 234: while(key != 'A' && key != 'B' && key != '*');
  4473  00266C  0E41               	movlw	65
  4474  00266E  0100               	movlb	0	; () banked
  4475  002670  19FB               	xorwf	showInterface@key& (0+255),w,b
  4476  002672  B4D8               	btfsc	status,2,c
  4477  002674  D00A               	goto	l5046
  4478                           
  4479                           ; BSR set to: 0
  4480  002676  0E42               	movlw	66
  4481  002678  0100               	movlb	0	; () banked
  4482  00267A  19FB               	xorwf	showInterface@key& (0+255),w,b
  4483  00267C  B4D8               	btfsc	status,2,c
  4484  00267E  D005               	goto	l5046
  4485                           
  4486                           ; BSR set to: 0
  4487  002680  0E2A               	movlw	42
  4488  002682  0100               	movlb	0	; () banked
  4489  002684  19FB               	xorwf	showInterface@key& (0+255),w,b
  4490  002686  A4D8               	btfss	status,2,c
  4491  002688  D7ED               	goto	l5038
  4492  00268A                     l5046:
  4493                           
  4494                           ; BSR set to: 0
  4495                           ;main.c: 236: if(key == 'A'){
  4496  00268A  0E41               	movlw	65
  4497  00268C  0100               	movlb	0	; () banked
  4498  00268E  19FB               	xorwf	showInterface@key& (0+255),w,b
  4499  002690  A4D8               	btfss	status,2,c
  4500  002692  D003               	goto	l5050
  4501                           
  4502                           ; BSR set to: 0
  4503                           ;main.c: 238: runTime();
  4504  002694  ECC0  F01C         	call	_runTime	;wreg free
  4505                           
  4506                           ;main.c: 240: }
  4507  002698  D00D               	goto	l5058
  4508  00269A                     l5050:
  4509                           
  4510                           ;main.c: 241: else if(key == 'B'){
  4511  00269A  0E42               	movlw	66
  4512  00269C  0100               	movlb	0	; () banked
  4513  00269E  19FB               	xorwf	showInterface@key& (0+255),w,b
  4514  0026A0  A4D8               	btfss	status,2,c
  4515  0026A2  D003               	goto	l5054
  4516                           
  4517                           ; BSR set to: 0
  4518                           ;main.c: 243: runStats();
  4519  0026A4  ECD3  F01C         	call	_runStats	;wreg free
  4520                           
  4521                           ;main.c: 245: }
  4522  0026A8  D005               	goto	l5058
  4523  0026AA                     l5054:
  4524                           
  4525                           ;main.c: 246: else if(key == '*')break;
  4526  0026AA  0E2A               	movlw	42
  4527  0026AC  0100               	movlb	0	; () banked
  4528  0026AE  19FB               	xorwf	showInterface@key& (0+255),w,b
  4529  0026B0  B4D8               	btfsc	status,2,c
  4530  0026B2  D796               	goto	l5006
  4531  0026B4                     l5058:
  4532  0026B4  EC82  F01C         	call	_readKeypad	;wreg free
  4533  0026B8  0A2A               	xorlw	42
  4534  0026BA  B4D8               	btfsc	status,2,c
  4535  0026BC  D7CF               	goto	l5036
  4536  0026BE  D7FA               	goto	l5058
  4537  0026C0                     l5060:
  4538                           
  4539                           ;main.c: 252: else if(key == 'B'){
  4540  0026C0  0E42               	movlw	66
  4541  0026C2  0100               	movlb	0	; () banked
  4542  0026C4  19FB               	xorwf	showInterface@key& (0+255),w,b
  4543  0026C6  B4D8               	btfsc	status,2,c
  4544  0026C8  0012               	return	
  4545                           
  4546                           ; BSR set to: 0
  4547                           ;main.c: 255: else if(key == '*')
  4548                           
  4549                           ; BSR set to: 0
  4550                           
  4551                           ; BSR set to: 0
  4552                           ;main.c: 254: }
  4553                           
  4554                           ; BSR set to: 0
  4555                           ;main.c: 253: return;
  4556  0026CA  0E2A               	movlw	42
  4557  0026CC  0100               	movlb	0	; () banked
  4558  0026CE  19FB               	xorwf	showInterface@key& (0+255),w,b
  4559  0026D0  B4D8               	btfsc	status,2,c
  4560  0026D2  D77F               	goto	l5002
  4561  0026D4  D785               	goto	l5006
  4562  0026D6                     __end_of_showInterface:
  4563                           	opt stack 0
  4564                           tblptru	equ	0xFF8
  4565                           tblptrh	equ	0xFF7
  4566                           tblptrl	equ	0xFF6
  4567                           tablat	equ	0xFF5
  4568                           intcon	equ	0xFF2
  4569                           postinc0	equ	0xFEE
  4570                           wreg	equ	0xFE8
  4571                           postdec1	equ	0xFE5
  4572                           fsr1l	equ	0xFE1
  4573                           postinc2	equ	0xFDE
  4574                           postdec2	equ	0xFDD
  4575                           fsr2h	equ	0xFDA
  4576                           fsr2l	equ	0xFD9
  4577                           status	equ	0xFD8
  4578                           
  4579 ;; *************** function _runTime *****************
  4580 ;; Defined at:
  4581 ;;		line 36 in file "interface.c"
  4582 ;; Parameters:    Size  Location     Type
  4583 ;;		None
  4584 ;; Auto vars:     Size  Location     Type
  4585 ;;		None
  4586 ;; Return value:  Size  Location     Type
  4587 ;;                  1    wreg      void 
  4588 ;; Registers used:
  4589 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4590 ;; Tracked objects:
  4591 ;;		On entry : 0/0
  4592 ;;		On exit  : 0/0
  4593 ;;		Unchanged: 0/0
  4594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4599 ;;Total ram usage:        0 bytes
  4600 ;; Hardware stack levels used:    1
  4601 ;; Hardware stack levels required when called:   10
  4602 ;; This function calls:
  4603 ;;		_lcdClear
  4604 ;;		_printf
  4605 ;; This function is called by:
  4606 ;;		_showInterface
  4607 ;; This function uses a non-reentrant model
  4608 ;;
  4609                           
  4610                           	psect	text16
  4611  003980                     __ptext16:
  4612                           	opt stack 0
  4613  003980                     _runTime:
  4614                           	opt stack 19
  4615                           
  4616                           ;interface.c: 37: lcdClear();
  4617                           
  4618                           ; BSR set to: 0
  4619                           ;incstack = 0
  4620  003980  EC2E  F01D         	call	_lcdClear	;wreg free
  4621                           
  4622                           ;interface.c: 38: printf("time: nnn sec   \n");
  4623  003984  0E0A               	movlw	low STR_19
  4624  003986  0100               	movlb	0	; () banked
  4625  003988  6FD5               	movwf	printf@f& (0+255),b
  4626  00398A  0EFF               	movlw	high STR_19
  4627  00398C  0100               	movlb	0	; () banked
  4628  00398E  6FD6               	movwf	(printf@f+1)& (0+255),b
  4629  003990  EC09  F000         	call	_printf	;wreg free
  4630                           
  4631                           ;interface.c: 39: printf("              *>");
  4632  003994  0E51               	movlw	low STR_20
  4633  003996  0100               	movlb	0	; () banked
  4634  003998  6FD5               	movwf	printf@f& (0+255),b
  4635  00399A  0EFF               	movlw	high STR_20
  4636  00399C  0100               	movlb	0	; () banked
  4637  00399E  6FD6               	movwf	(printf@f+1)& (0+255),b
  4638  0039A0  EC09  F000         	call	_printf	;wreg free
  4639  0039A4  0012               	return		;funcret
  4640  0039A6                     __end_of_runTime:
  4641                           	opt stack 0
  4642                           tblptru	equ	0xFF8
  4643                           tblptrh	equ	0xFF7
  4644                           tblptrl	equ	0xFF6
  4645                           tablat	equ	0xFF5
  4646                           intcon	equ	0xFF2
  4647                           postinc0	equ	0xFEE
  4648                           wreg	equ	0xFE8
  4649                           postdec1	equ	0xFE5
  4650                           fsr1l	equ	0xFE1
  4651                           postinc2	equ	0xFDE
  4652                           postdec2	equ	0xFDD
  4653                           fsr2h	equ	0xFDA
  4654                           fsr2l	equ	0xFD9
  4655                           status	equ	0xFD8
  4656                           
  4657 ;; *************** function _runStats *****************
  4658 ;; Defined at:
  4659 ;;		line 42 in file "interface.c"
  4660 ;; Parameters:    Size  Location     Type
  4661 ;;		None
  4662 ;; Auto vars:     Size  Location     Type
  4663 ;;		None
  4664 ;; Return value:  Size  Location     Type
  4665 ;;                  1    wreg      void 
  4666 ;; Registers used:
  4667 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4668 ;; Tracked objects:
  4669 ;;		On entry : 0/0
  4670 ;;		On exit  : 0/0
  4671 ;;		Unchanged: 0/0
  4672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4676 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4677 ;;Total ram usage:        0 bytes
  4678 ;; Hardware stack levels used:    1
  4679 ;; Hardware stack levels required when called:   10
  4680 ;; This function calls:
  4681 ;;		_lcdClear
  4682 ;;		_printf
  4683 ;; This function is called by:
  4684 ;;		_showInterface
  4685 ;; This function uses a non-reentrant model
  4686 ;;
  4687                           
  4688                           	psect	text17
  4689  0039A6                     __ptext17:
  4690                           	opt stack 0
  4691  0039A6                     _runStats:
  4692                           	opt stack 19
  4693                           
  4694                           ;interface.c: 43: lcdClear();
  4695                           
  4696                           ;incstack = 0
  4697  0039A6  EC2E  F01D         	call	_lcdClear	;wreg free
  4698                           
  4699                           ;interface.c: 44: printf("[AA,9V,C,other] \n");
  4700  0039AA  0E1C               	movlw	low STR_21
  4701  0039AC  0100               	movlb	0	; () banked
  4702  0039AE  6FD5               	movwf	printf@f& (0+255),b
  4703  0039B0  0EFF               	movlw	high STR_21
  4704  0039B2  0100               	movlb	0	; () banked
  4705  0039B4  6FD6               	movwf	(printf@f+1)& (0+255),b
  4706  0039B6  EC09  F000         	call	_printf	;wreg free
  4707                           
  4708                           ;interface.c: 45: printf("[nn,n,n,nn]   *>");
  4709  0039BA  0E95               	movlw	low STR_22
  4710  0039BC  0100               	movlb	0	; () banked
  4711  0039BE  6FD5               	movwf	printf@f& (0+255),b
  4712  0039C0  0EFF               	movlw	high STR_22
  4713  0039C2  0100               	movlb	0	; () banked
  4714  0039C4  6FD6               	movwf	(printf@f+1)& (0+255),b
  4715  0039C6  EC09  F000         	call	_printf	;wreg free
  4716  0039CA  0012               	return		;funcret
  4717  0039CC                     __end_of_runStats:
  4718                           	opt stack 0
  4719                           tblptru	equ	0xFF8
  4720                           tblptrh	equ	0xFF7
  4721                           tblptrl	equ	0xFF6
  4722                           tablat	equ	0xFF5
  4723                           intcon	equ	0xFF2
  4724                           postinc0	equ	0xFEE
  4725                           wreg	equ	0xFE8
  4726                           postdec1	equ	0xFE5
  4727                           fsr1l	equ	0xFE1
  4728                           postinc2	equ	0xFDE
  4729                           postdec2	equ	0xFDD
  4730                           fsr2h	equ	0xFDA
  4731                           fsr2l	equ	0xFD9
  4732                           status	equ	0xFD8
  4733                           
  4734 ;; *************** function _runSelect *****************
  4735 ;; Defined at:
  4736 ;;		line 24 in file "interface.c"
  4737 ;; Parameters:    Size  Location     Type
  4738 ;;		None
  4739 ;; Auto vars:     Size  Location     Type
  4740 ;;		None
  4741 ;; Return value:  Size  Location     Type
  4742 ;;                  1    wreg      void 
  4743 ;; Registers used:
  4744 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4745 ;; Tracked objects:
  4746 ;;		On entry : 0/0
  4747 ;;		On exit  : 0/0
  4748 ;;		Unchanged: 0/0
  4749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4753 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4754 ;;Total ram usage:        0 bytes
  4755 ;; Hardware stack levels used:    1
  4756 ;; Hardware stack levels required when called:   10
  4757 ;; This function calls:
  4758 ;;		_lcdClear
  4759 ;;		_printf
  4760 ;; This function is called by:
  4761 ;;		_showInterface
  4762 ;; This function uses a non-reentrant model
  4763 ;;
  4764                           
  4765                           	psect	text18
  4766  0039CC                     __ptext18:
  4767                           	opt stack 0
  4768  0039CC                     _runSelect:
  4769                           	opt stack 19
  4770                           
  4771                           ;interface.c: 25: lcdClear();
  4772                           
  4773                           ;incstack = 0
  4774  0039CC  EC2E  F01D         	call	_lcdClear	;wreg free
  4775                           
  4776                           ;interface.c: 26: printf("select run:     \n");
  4777  0039D0  0EF8               	movlw	low STR_15
  4778  0039D2  0100               	movlb	0	; () banked
  4779  0039D4  6FD5               	movwf	printf@f& (0+255),b
  4780  0039D6  0EFE               	movlw	high STR_15
  4781  0039D8  0100               	movlb	0	; () banked
  4782  0039DA  6FD6               	movwf	(printf@f+1)& (0+255),b
  4783  0039DC  EC09  F000         	call	_printf	;wreg free
  4784                           
  4785                           ;interface.c: 27: printf("[1,2,3,4]     *>");
  4786  0039E0  0E62               	movlw	low STR_16
  4787  0039E2  0100               	movlb	0	; () banked
  4788  0039E4  6FD5               	movwf	printf@f& (0+255),b
  4789  0039E6  0EFF               	movlw	high STR_16
  4790  0039E8  0100               	movlb	0	; () banked
  4791  0039EA  6FD6               	movwf	(printf@f+1)& (0+255),b
  4792  0039EC  EC09  F000         	call	_printf	;wreg free
  4793  0039F0  0012               	return		;funcret
  4794  0039F2                     __end_of_runSelect:
  4795                           	opt stack 0
  4796                           tblptru	equ	0xFF8
  4797                           tblptrh	equ	0xFF7
  4798                           tblptrl	equ	0xFF6
  4799                           tablat	equ	0xFF5
  4800                           intcon	equ	0xFF2
  4801                           postinc0	equ	0xFEE
  4802                           wreg	equ	0xFE8
  4803                           postdec1	equ	0xFE5
  4804                           fsr1l	equ	0xFE1
  4805                           postinc2	equ	0xFDE
  4806                           postdec2	equ	0xFDD
  4807                           fsr2h	equ	0xFDA
  4808                           fsr2l	equ	0xFD9
  4809                           status	equ	0xFD8
  4810                           
  4811 ;; *************** function _runMenu *****************
  4812 ;; Defined at:
  4813 ;;		line 30 in file "interface.c"
  4814 ;; Parameters:    Size  Location     Type
  4815 ;;  key             1    wreg     unsigned char 
  4816 ;; Auto vars:     Size  Location     Type
  4817 ;;  key             1  122[BANK0 ] unsigned char 
  4818 ;; Return value:  Size  Location     Type
  4819 ;;                  1    wreg      void 
  4820 ;; Registers used:
  4821 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4822 ;; Tracked objects:
  4823 ;;		On entry : 0/0
  4824 ;;		On exit  : 0/0
  4825 ;;		Unchanged: 0/0
  4826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4828 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4830 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4831 ;;Total ram usage:        1 bytes
  4832 ;; Hardware stack levels used:    1
  4833 ;; Hardware stack levels required when called:   10
  4834 ;; This function calls:
  4835 ;;		_lcdClear
  4836 ;;		_printf
  4837 ;; This function is called by:
  4838 ;;		_showInterface
  4839 ;; This function uses a non-reentrant model
  4840 ;;
  4841                           
  4842                           	psect	text19
  4843  003874                     __ptext19:
  4844                           	opt stack 0
  4845  003874                     _runMenu:
  4846                           	opt stack 19
  4847                           
  4848                           ;incstack = 0
  4849                           ;runMenu@key stored from wreg
  4850  003874  0100               	movlb	0	; () banked
  4851  003876  6FFA               	movwf	runMenu@key& (0+255),b
  4852                           
  4853                           ;interface.c: 31: lcdClear();
  4854  003878  EC2E  F01D         	call	_lcdClear	;wreg free
  4855                           
  4856                           ;interface.c: 32: printf("%c) time  <A     \n",key);
  4857  00387C  0EC1               	movlw	low STR_17
  4858  00387E  0100               	movlb	0	; () banked
  4859  003880  6FD5               	movwf	printf@f& (0+255),b
  4860  003882  0EFE               	movlw	high STR_17
  4861  003884  0100               	movlb	0	; () banked
  4862  003886  6FD6               	movwf	(printf@f+1)& (0+255),b
  4863  003888  C0FA  F0D7         	movff	runMenu@key,?_printf+2
  4864  00388C  0100               	movlb	0	; () banked
  4865  00388E  6BD8               	clrf	(?_printf+3)& (0+255),b
  4866  003890  EC09  F000         	call	_printf	;wreg free
  4867                           
  4868                           ;interface.c: 33: printf( "   stats <B   *>");
  4869  003894  0E84               	movlw	low STR_18
  4870  003896  0100               	movlb	0	; () banked
  4871  003898  6FD5               	movwf	printf@f& (0+255),b
  4872  00389A  0EFF               	movlw	high STR_18
  4873  00389C  0100               	movlb	0	; () banked
  4874  00389E  6FD6               	movwf	(printf@f+1)& (0+255),b
  4875  0038A0  EC09  F000         	call	_printf	;wreg free
  4876  0038A4  0012               	return		;funcret
  4877  0038A6                     __end_of_runMenu:
  4878                           	opt stack 0
  4879                           tblptru	equ	0xFF8
  4880                           tblptrh	equ	0xFF7
  4881                           tblptrl	equ	0xFF6
  4882                           tablat	equ	0xFF5
  4883                           intcon	equ	0xFF2
  4884                           postinc0	equ	0xFEE
  4885                           wreg	equ	0xFE8
  4886                           postdec1	equ	0xFE5
  4887                           fsr1l	equ	0xFE1
  4888                           postinc2	equ	0xFDE
  4889                           postdec2	equ	0xFDD
  4890                           fsr2h	equ	0xFDA
  4891                           fsr2l	equ	0xFD9
  4892                           status	equ	0xFD8
  4893                           
  4894 ;; *************** function _readKeypad *****************
  4895 ;; Defined at:
  4896 ;;		line 35 in file "keypad.c"
  4897 ;; Parameters:    Size  Location     Type
  4898 ;;		None
  4899 ;; Auto vars:     Size  Location     Type
  4900 ;;  key             1    0[BANK0 ] unsigned char 
  4901 ;; Return value:  Size  Location     Type
  4902 ;;                  1    wreg      unsigned char 
  4903 ;; Registers used:
  4904 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4905 ;; Tracked objects:
  4906 ;;		On entry : 0/0
  4907 ;;		On exit  : 0/0
  4908 ;;		Unchanged: 0/0
  4909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4911 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4913 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4914 ;;Total ram usage:        1 bytes
  4915 ;; Hardware stack levels used:    1
  4916 ;; Hardware stack levels required when called:    5
  4917 ;; This function calls:
  4918 ;;		Nothing
  4919 ;; This function is called by:
  4920 ;;		_showInterface
  4921 ;;		_pause
  4922 ;; This function uses a non-reentrant model
  4923 ;;
  4924                           
  4925                           	psect	text20
  4926  003904                     __ptext20:
  4927                           	opt stack 0
  4928  003904                     _readKeypad:
  4929                           	opt stack 23
  4930  003904                     l267:
  4931  003904  A281               	btfss	3969,1,c	;volatile
  4932  003906  D7FE               	goto	l267
  4933                           
  4934                           ;keypad.c: 37: char key = (PORTB & 0xF0) >> 4;
  4935  003908  3881               	swapf	3969,w,c	;volatile
  4936  00390A  0B0F               	andlw	15
  4937  00390C  0B0F               	andlw	15
  4938  00390E  0100               	movlb	0	; () banked
  4939  003910  6F80               	movwf	readKeypad@key& (0+255),b
  4940  003912                     l270:
  4941  003912  B281               	btfsc	3969,1,c	;volatile
  4942  003914  D7FE               	goto	l270
  4943                           
  4944                           ;keypad.c: 39: return keys[key];
  4945  003916  0100               	movlb	0	; () banked
  4946  003918  5180               	movf	readKeypad@key& (0+255),w,b
  4947  00391A  0D01               	mullw	1
  4948  00391C  0E69               	movlw	low _keys
  4949  00391E  24F3               	addwf	prodl,w,c
  4950  003920  6EF6               	movwf	tblptrl,c
  4951  003922  0EFE               	movlw	high _keys
  4952  003924  20F4               	addwfc	prodh,w,c
  4953  003926  6EF7               	movwf	tblptrh,c
  4954  003928                     	if	0	;There are less than 3 active tblptr bytes
  4955  003928                     	endif
  4956  003928  0008               	tblrd		*
  4957  00392A  50F5               	movf	tablat,w,c
  4958  00392C  0012               	return	
  4959  00392E                     __end_of_readKeypad:
  4960                           	opt stack 0
  4961                           tblptru	equ	0xFF8
  4962                           tblptrh	equ	0xFF7
  4963                           tblptrl	equ	0xFF6
  4964                           tablat	equ	0xFF5
  4965                           prodh	equ	0xFF4
  4966                           prodl	equ	0xFF3
  4967                           intcon	equ	0xFF2
  4968                           postinc0	equ	0xFEE
  4969                           wreg	equ	0xFE8
  4970                           postdec1	equ	0xFE5
  4971                           fsr1l	equ	0xFE1
  4972                           postinc2	equ	0xFDE
  4973                           postdec2	equ	0xFDD
  4974                           fsr2h	equ	0xFDA
  4975                           fsr2l	equ	0xFD9
  4976                           status	equ	0xFD8
  4977                           
  4978 ;; *************** function _mainMenu *****************
  4979 ;; Defined at:
  4980 ;;		line 18 in file "interface.c"
  4981 ;; Parameters:    Size  Location     Type
  4982 ;;		None
  4983 ;; Auto vars:     Size  Location     Type
  4984 ;;		None
  4985 ;; Return value:  Size  Location     Type
  4986 ;;                  1    wreg      void 
  4987 ;; Registers used:
  4988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4989 ;; Tracked objects:
  4990 ;;		On entry : 0/0
  4991 ;;		On exit  : 0/0
  4992 ;;		Unchanged: 0/0
  4993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4997 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4998 ;;Total ram usage:        0 bytes
  4999 ;; Hardware stack levels used:    1
  5000 ;; Hardware stack levels required when called:   10
  5001 ;; This function calls:
  5002 ;;		_lcdClear
  5003 ;;		_printf
  5004 ;; This function is called by:
  5005 ;;		_showInterface
  5006 ;; This function uses a non-reentrant model
  5007 ;;
  5008                           
  5009                           	psect	text21
  5010  0039F2                     __ptext21:
  5011                           	opt stack 0
  5012  0039F2                     _mainMenu:
  5013                           	opt stack 19
  5014                           
  5015                           ;interface.c: 19: lcdClear();
  5016                           
  5017                           ; BSR set to: 0
  5018                           ;incstack = 0
  5019  0039F2  EC2E  F01D         	call	_lcdClear	;wreg free
  5020                           
  5021                           ;interface.c: 20: printf("start   <B      \n");
  5022  0039F6  0ED4               	movlw	low STR_13
  5023  0039F8  0100               	movlb	0	; () banked
  5024  0039FA  6FD5               	movwf	printf@f& (0+255),b
  5025  0039FC  0EFE               	movlw	high STR_13
  5026  0039FE  0100               	movlb	0	; () banked
  5027  003A00  6FD6               	movwf	(printf@f+1)& (0+255),b
  5028  003A02  EC09  F000         	call	_printf	;wreg free
  5029                           
  5030                           ;interface.c: 21: printf("history <C    *>");
  5031  003A06  0E73               	movlw	low STR_14
  5032  003A08  0100               	movlb	0	; () banked
  5033  003A0A  6FD5               	movwf	printf@f& (0+255),b
  5034  003A0C  0EFF               	movlw	high STR_14
  5035  003A0E  0100               	movlb	0	; () banked
  5036  003A10  6FD6               	movwf	(printf@f+1)& (0+255),b
  5037  003A12  EC09  F000         	call	_printf	;wreg free
  5038  003A16  0012               	return		;funcret
  5039  003A18                     __end_of_mainMenu:
  5040                           	opt stack 0
  5041                           tblptru	equ	0xFF8
  5042                           tblptrh	equ	0xFF7
  5043                           tblptrl	equ	0xFF6
  5044                           tablat	equ	0xFF5
  5045                           prodh	equ	0xFF4
  5046                           prodl	equ	0xFF3
  5047                           intcon	equ	0xFF2
  5048                           postinc0	equ	0xFEE
  5049                           wreg	equ	0xFE8
  5050                           postdec1	equ	0xFE5
  5051                           fsr1l	equ	0xFE1
  5052                           postinc2	equ	0xFDE
  5053                           postdec2	equ	0xFDD
  5054                           fsr2h	equ	0xFDA
  5055                           fsr2l	equ	0xFD9
  5056                           status	equ	0xFD8
  5057                           
  5058 ;; *************** function _dateTime *****************
  5059 ;; Defined at:
  5060 ;;		line 12 in file "interface.c"
  5061 ;; Parameters:    Size  Location     Type
  5062 ;;		None
  5063 ;; Auto vars:     Size  Location     Type
  5064 ;;		None
  5065 ;; Return value:  Size  Location     Type
  5066 ;;                  1    wreg      void 
  5067 ;; Registers used:
  5068 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5069 ;; Tracked objects:
  5070 ;;		On entry : 0/0
  5071 ;;		On exit  : 0/0
  5072 ;;		Unchanged: 0/0
  5073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5077 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5078 ;;Total ram usage:        0 bytes
  5079 ;; Hardware stack levels used:    1
  5080 ;; Hardware stack levels required when called:   10
  5081 ;; This function calls:
  5082 ;;		_lcdClear
  5083 ;;		_printf
  5084 ;; This function is called by:
  5085 ;;		_showInterface
  5086 ;; This function uses a non-reentrant model
  5087 ;;
  5088                           
  5089                           	psect	text22
  5090  003A18                     __ptext22:
  5091                           	opt stack 0
  5092  003A18                     _dateTime:
  5093                           	opt stack 19
  5094                           
  5095                           ;interface.c: 13: lcdClear();
  5096                           
  5097                           ;incstack = 0
  5098  003A18  EC2E  F01D         	call	_lcdClear	;wreg free
  5099                           
  5100                           ;interface.c: 14: printf("  hh:mm:ss      \n");
  5101  003A1C  0EE6               	movlw	low STR_11
  5102  003A1E  0100               	movlb	0	; () banked
  5103  003A20  6FD5               	movwf	printf@f& (0+255),b
  5104  003A22  0EFE               	movlw	high STR_11
  5105  003A24  0100               	movlb	0	; () banked
  5106  003A26  6FD6               	movwf	(printf@f+1)& (0+255),b
  5107  003A28  EC09  F000         	call	_printf	;wreg free
  5108                           
  5109                           ;interface.c: 15: printf("  mm:dd:yy    A>");
  5110  003A2C  0EA6               	movlw	low STR_12
  5111  003A2E  0100               	movlb	0	; () banked
  5112  003A30  6FD5               	movwf	printf@f& (0+255),b
  5113  003A32  0EFF               	movlw	high STR_12
  5114  003A34  0100               	movlb	0	; () banked
  5115  003A36  6FD6               	movwf	(printf@f+1)& (0+255),b
  5116  003A38  EC09  F000         	call	_printf	;wreg free
  5117  003A3C  0012               	return		;funcret
  5118  003A3E                     __end_of_dateTime:
  5119                           	opt stack 0
  5120                           tblptru	equ	0xFF8
  5121                           tblptrh	equ	0xFF7
  5122                           tblptrl	equ	0xFF6
  5123                           tablat	equ	0xFF5
  5124                           prodh	equ	0xFF4
  5125                           prodl	equ	0xFF3
  5126                           intcon	equ	0xFF2
  5127                           postinc0	equ	0xFEE
  5128                           wreg	equ	0xFE8
  5129                           postdec1	equ	0xFE5
  5130                           fsr1l	equ	0xFE1
  5131                           postinc2	equ	0xFDE
  5132                           postdec2	equ	0xFDD
  5133                           fsr2h	equ	0xFDA
  5134                           fsr2l	equ	0xFD9
  5135                           status	equ	0xFD8
  5136                           
  5137 ;; *************** function _printf *****************
  5138 ;; Defined at:
  5139 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  5140 ;; Parameters:    Size  Location     Type
  5141 ;;  f               2   85[BANK0 ] PTR const unsigned char 
  5142 ;;		 -> STR_22(17), STR_21(18), STR_20(17), STR_19(18), 
  5143 ;;		 -> STR_18(17), STR_17(19), STR_16(17), STR_15(18), 
  5144 ;;		 -> STR_14(17), STR_13(18), STR_12(17), STR_11(18), 
  5145 ;;		 -> STR_10(9), STR_9(8), STR_8(24), STR_7(15), 
  5146 ;;		 -> STR_6(17), STR_5(20), STR_4(18), STR_3(14), 
  5147 ;;		 -> STR_2(20), STR_1(8), 
  5148 ;; Auto vars:     Size  Location     Type
  5149 ;;  idx             1  101[BANK0 ] unsigned char 
  5150 ;;  val             4  114[BANK0 ] unsigned long 
  5151 ;;  tmpval          4  110[BANK0 ] struct .
  5152 ;;  fval            3  118[BANK0 ] struct .
  5153 ;;  cp              3    0        PTR const unsigned char 
  5154 ;;  exp             2  108[BANK0 ] int 
  5155 ;;  prec            2  106[BANK0 ] int 
  5156 ;;  flag            2  104[BANK0 ] unsigned short 
  5157 ;;  ap              2  102[BANK0 ] PTR void [1]
  5158 ;;		 -> ?_printf(2), 
  5159 ;;  len             2    0        unsigned int 
  5160 ;;  width           2    0        int 
  5161 ;;  c               1  121[BANK0 ] char 
  5162 ;;  d               1    0        unsigned char 
  5163 ;; Return value:  Size  Location     Type
  5164 ;;                  2   85[BANK0 ] int 
  5165 ;; Registers used:
  5166 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5167 ;; Tracked objects:
  5168 ;;		On entry : 0/0
  5169 ;;		On exit  : 0/0
  5170 ;;		Unchanged: 0/0
  5171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5172 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5173 ;;      Locals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5174 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5175 ;;      Totals:         0      37       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5176 ;;Total ram usage:       37 bytes
  5177 ;; Hardware stack levels used:    1
  5178 ;; Hardware stack levels required when called:    9
  5179 ;; This function calls:
  5180 ;;		___awdiv
  5181 ;;		___ftadd
  5182 ;;		___ftge
  5183 ;;		___ftmul
  5184 ;;		___ftneg
  5185 ;;		___ftsub
  5186 ;;		___fttol
  5187 ;;		___lldiv
  5188 ;;		___llmod
  5189 ;;		___lltoft
  5190 ;;		___wmul
  5191 ;;		__div_to_l_
  5192 ;;		__tdiv_to_l_
  5193 ;;		_fround
  5194 ;;		_putch
  5195 ;;		_scale
  5196 ;; This function is called by:
  5197 ;;		_main
  5198 ;;		_sortBattery
  5199 ;;		_pause
  5200 ;;		_dateTime
  5201 ;;		_mainMenu
  5202 ;;		_runSelect
  5203 ;;		_runMenu
  5204 ;;		_runTime
  5205 ;;		_runStats
  5206 ;;		_testFrequency
  5207 ;; This function uses a non-reentrant model
  5208 ;;
  5209                           
  5210                           	psect	text23
  5211  000012                     __ptext23:
  5212                           	opt stack 0
  5213  000012                     _printf:
  5214                           	opt stack 20
  5215                           
  5216                           ;doprnt.c: 466: va_list ap;
  5217                           ;doprnt.c: 499: signed char c;
  5218                           ;doprnt.c: 501: int width;
  5219                           ;doprnt.c: 504: int prec;
  5220                           ;doprnt.c: 508: unsigned short flag;
  5221                           ;doprnt.c: 515: char d;
  5222                           ;doprnt.c: 516: double fval;
  5223                           ;doprnt.c: 517: int exp;
  5224                           ;doprnt.c: 523: union {
  5225                           ;doprnt.c: 524: unsigned long vd;
  5226                           ;doprnt.c: 525: double integ;
  5227                           ;doprnt.c: 526: } tmpval;
  5228                           ;doprnt.c: 528: unsigned long val;
  5229                           ;doprnt.c: 529: unsigned len;
  5230                           ;doprnt.c: 530: const char * cp;
  5231                           ;doprnt.c: 533: *ap = __va_start();
  5232                           
  5233                           ;incstack = 0
  5234  000012  0ED7               	movlw	low (?_printf+2)
  5235  000014  0100               	movlb	0	; () banked
  5236  000016  6FE6               	movwf	printf@ap& (0+255),b
  5237  000018  0E00               	movlw	high (?_printf+2)
  5238  00001A  0100               	movlb	0	; () banked
  5239  00001C  6FE7               	movwf	(printf@ap+1)& (0+255),b
  5240                           
  5241                           ;doprnt.c: 536: while(c = *f++) {
  5242  00001E  EFA2  F004         	goto	l4462
  5243  000022                     l4244:
  5244                           
  5245                           ; BSR set to: 0
  5246                           ;doprnt.c: 538: if(c != '%')
  5247  000022  0E25               	movlw	37
  5248  000024  0100               	movlb	0	; () banked
  5249  000026  19F9               	xorwf	printf@c& (0+255),w,b
  5250  000028  B4D8               	btfsc	status,2,c
  5251  00002A  D006               	goto	l4248
  5252                           
  5253                           ; BSR set to: 0
  5254                           ;doprnt.c: 540: {
  5255                           ;doprnt.c: 541: (putch(c) );
  5256  00002C  0100               	movlb	0	; () banked
  5257  00002E  51F9               	movf	printf@c& (0+255),w,b
  5258  000030  ECAC  F01C         	call	_putch
  5259                           
  5260                           ;doprnt.c: 542: continue;
  5261  000034  EFA2  F004         	goto	l4462
  5262  000038                     l4248:
  5263                           
  5264                           ;doprnt.c: 543: }
  5265                           ;doprnt.c: 548: flag = 0;
  5266  000038  0E00               	movlw	0
  5267  00003A  0100               	movlb	0	; () banked
  5268  00003C  6FE9               	movwf	(printf@flag+1)& (0+255),b
  5269  00003E  0E00               	movlw	0
  5270  000040  6FE8               	movwf	printf@flag& (0+255),b
  5271                           
  5272                           ;doprnt.c: 635: switch(c = *f++) {
  5273  000042  D018               	goto	l4262
  5274  000044                     l4250:
  5275                           
  5276                           ; BSR set to: 0
  5277                           ;doprnt.c: 663: flag |= 0x400;
  5278  000044  0100               	movlb	0	; () banked
  5279  000046  85E9               	bsf	(printf@flag+1)& (0+255),2,b
  5280                           
  5281                           ; BSR set to: 0
  5282                           ;doprnt.c: 698: case 'i':
  5283                           ;doprnt.c: 699: break;
  5284                           
  5285                           ; BSR set to: 0
  5286                           
  5287                           ;doprnt.c: 697: case 'd':
  5288                           
  5289                           ;doprnt.c: 664: break;
  5290  000048  D034               	goto	l4264
  5291  00004A                     l4252:
  5292                           
  5293                           ; BSR set to: 0
  5294                           ;doprnt.c: 721: flag |= 0x80;
  5295  00004A  0100               	movlb	0	; () banked
  5296  00004C  8FE8               	bsf	printf@flag& (0+255),7,b
  5297                           
  5298                           ;doprnt.c: 723: break;
  5299  00004E  D031               	goto	l4264
  5300  000050                     l4254:
  5301                           
  5302                           ; BSR set to: 0
  5303                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  5304  000050  C0E6  FFD9         	movff	printf@ap,fsr2l
  5305  000054  C0E7  FFDA         	movff	printf@ap+1,fsr2h
  5306  000058  50DF               	movf	indf2,w,c
  5307  00005A  0100               	movlb	0	; () banked
  5308  00005C  6FF9               	movwf	printf@c& (0+255),b
  5309                           
  5310                           ; BSR set to: 0
  5311  00005E  0E02               	movlw	2
  5312  000060  0100               	movlb	0	; () banked
  5313  000062  27E6               	addwf	printf@ap& (0+255),f,b
  5314  000064  0E00               	movlw	0
  5315  000066  23E7               	addwfc	(printf@ap+1)& (0+255),f,b
  5316  000068                     l4258:
  5317                           
  5318                           ; BSR set to: 0
  5319                           ;doprnt.c: 809: (putch(c) );
  5320  000068  0100               	movlb	0	; () banked
  5321  00006A  51F9               	movf	printf@c& (0+255),w,b
  5322  00006C  ECAC  F01C         	call	_putch
  5323                           
  5324                           ;doprnt.c: 810: continue;
  5325  000070  EFA2  F004         	goto	l4462
  5326  000074                     l4262:
  5327  000074  C0D5  FFF6         	movff	printf@f,tblptrl
  5328  000078  C0D6  FFF7         	movff	printf@f+1,tblptrh
  5329  00007C  0100               	movlb	0	; () banked
  5330  00007E  4BD5               	infsnz	printf@f& (0+255),f,b
  5331  000080  2BD6               	incf	(printf@f+1)& (0+255),f,b
  5332  000082                     	if	0	;tblptru may be non-zero
  5333  000082                     	endif
  5334  000082                     	if	0	;tblptru may be non-zero
  5335  000082                     	endif
  5336  000082  0008               	tblrd		*
  5337  000084  CFF5 F0F9          	movff	tablat,printf@c
  5338  000088  0100               	movlb	0	; () banked
  5339  00008A  51F9               	movf	printf@c& (0+255),w,b
  5340                           
  5341                           ; Switch size 1, requested type "space"
  5342                           ; Number of cases is 6, Range of values is 0 to 120
  5343                           ; switch strategies available:
  5344                           ; Name         Instructions Cycles
  5345                           ; simple_byte           19    10 (average)
  5346                           ;	Chosen strategy is simple_byte
  5347  00008C  0A00               	xorlw	0	; case 0
  5348  00008E  B4D8               	btfsc	status,2,c
  5349  000090  0012               	return	
  5350  000092  0A63               	xorlw	99	; case 99
  5351  000094  B4D8               	btfsc	status,2,c
  5352  000096  D7DC               	goto	l4254
  5353  000098  0A07               	xorlw	7	; case 100
  5354  00009A  B4D8               	btfsc	status,2,c
  5355  00009C  D00A               	goto	l4264
  5356  00009E  0A02               	xorlw	2	; case 102
  5357  0000A0  B4D8               	btfsc	status,2,c
  5358  0000A2  D7D0               	goto	l4250
  5359  0000A4  0A0F               	xorlw	15	; case 105
  5360  0000A6  B4D8               	btfsc	status,2,c
  5361  0000A8  D004               	goto	l4264
  5362  0000AA  0A11               	xorlw	17	; case 120
  5363  0000AC  B4D8               	btfsc	status,2,c
  5364  0000AE  D7CD               	goto	l4252
  5365  0000B0  D7DB               	goto	l4258
  5366  0000B2                     l4264:
  5367                           
  5368                           ;doprnt.c: 825: if(flag & (0x700)) {
  5369  0000B2  0E07               	movlw	7
  5370  0000B4  0100               	movlb	0	; () banked
  5371  0000B6  15E9               	andwf	(printf@flag+1)& (0+255),w,b
  5372  0000B8  B4D8               	btfsc	status,2,c
  5373  0000BA  D304               	goto	l681
  5374                           
  5375                           ; BSR set to: 0
  5376                           ;doprnt.c: 829: prec = 6;
  5377  0000BC  0E00               	movlw	0
  5378  0000BE  0100               	movlb	0	; () banked
  5379  0000C0  6FEB               	movwf	(printf@prec+1)& (0+255),b
  5380  0000C2  0E06               	movlw	6
  5381  0000C4  6FEA               	movwf	printf@prec& (0+255),b
  5382                           
  5383                           ; BSR set to: 0
  5384                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  5385  0000C6  C0E6  FFD9         	movff	printf@ap,fsr2l
  5386  0000CA  C0E7  FFDA         	movff	printf@ap+1,fsr2h
  5387  0000CE  CFDE F0F6          	movff	postinc2,printf@fval
  5388  0000D2  CFDE F0F7          	movff	postinc2,printf@fval+1
  5389  0000D6  CFDD F0F8          	movff	postdec2,printf@fval+2
  5390                           
  5391                           ; BSR set to: 0
  5392  0000DA  0E03               	movlw	3
  5393  0000DC  0100               	movlb	0	; () banked
  5394  0000DE  27E6               	addwf	printf@ap& (0+255),f,b
  5395  0000E0  0E00               	movlw	0
  5396  0000E2  23E7               	addwfc	(printf@ap+1)& (0+255),f,b
  5397                           
  5398                           ; BSR set to: 0
  5399                           ;doprnt.c: 831: if(fval < 0.0) {
  5400  0000E4  0100               	movlb	0	; () banked
  5401  0000E6  AFF8               	btfss	(printf@fval+2)& (0+255),7,b
  5402  0000E8  D011               	goto	l4278
  5403                           
  5404                           ; BSR set to: 0
  5405                           ;doprnt.c: 832: fval = -fval;
  5406  0000EA  C0F6  F080         	movff	printf@fval,___ftneg@f1
  5407  0000EE  C0F7  F081         	movff	printf@fval+1,___ftneg@f1+1
  5408  0000F2  C0F8  F082         	movff	printf@fval+2,___ftneg@f1+2
  5409  0000F6  EC53  F01C         	call	___ftneg	;wreg free
  5410  0000FA  C080  F0F6         	movff	?___ftneg,printf@fval
  5411  0000FE  C081  F0F7         	movff	?___ftneg+1,printf@fval+1
  5412  000102  C082  F0F8         	movff	?___ftneg+2,printf@fval+2
  5413                           
  5414                           ;doprnt.c: 833: flag |= 0x03;
  5415  000106  0E03               	movlw	3
  5416  000108  0100               	movlb	0	; () banked
  5417  00010A  13E8               	iorwf	printf@flag& (0+255),f,b
  5418  00010C                     l4278:
  5419                           
  5420                           ; BSR set to: 0
  5421                           ;doprnt.c: 834: }
  5422                           ;doprnt.c: 835: exp = 0;
  5423  00010C  0E00               	movlw	0
  5424  00010E  0100               	movlb	0	; () banked
  5425  000110  6FED               	movwf	(printf@exp+1)& (0+255),b
  5426  000112  0E00               	movlw	0
  5427  000114  6FEC               	movwf	printf@exp& (0+255),b
  5428                           
  5429                           ; BSR set to: 0
  5430                           ;doprnt.c: 836: if( fval!=0) {
  5431  000116  0100               	movlb	0	; () banked
  5432  000118  51F6               	movf	printf@fval& (0+255),w,b
  5433  00011A  0100               	movlb	0	; () banked
  5434  00011C  11F7               	iorwf	(printf@fval+1)& (0+255),w,b
  5435  00011E  0100               	movlb	0	; () banked
  5436  000120  11F8               	iorwf	(printf@fval+2)& (0+255),w,b
  5437  000122  B4D8               	btfsc	status,2,c
  5438  000124  D09B               	goto	l4306
  5439                           
  5440                           ; BSR set to: 0
  5441                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  5442  000126  0E82               	movlw	130
  5443  000128  0100               	movlb	0	; () banked
  5444  00012A  6FDC               	movwf	??_printf& (0+255),b
  5445  00012C  0EFF               	movlw	255
  5446  00012E  0100               	movlb	0	; () banked
  5447  000130  6FDD               	movwf	(??_printf+1)& (0+255),b
  5448  000132  C0F6  F0DE         	movff	printf@fval,??_printf+2
  5449  000136  C0F7  F0DF         	movff	printf@fval+1,??_printf+3
  5450  00013A  C0F8  F0E0         	movff	printf@fval+2,??_printf+4
  5451  00013E  C0F9  F0E1         	movff	printf@fval+3,??_printf+5
  5452  000142  0E10               	movlw	16
  5453  000144  D006               	goto	u3890
  5454  000146                     u3895:
  5455  000146  0100               	movlb	0	; () banked
  5456  000148  90D8               	bcf	status,0,c
  5457  00014A  33E1               	rrcf	(??_printf+5)& (0+255),f,b
  5458  00014C  33E0               	rrcf	(??_printf+4)& (0+255),f,b
  5459  00014E  33DF               	rrcf	(??_printf+3)& (0+255),f,b
  5460  000150  33DE               	rrcf	(??_printf+2)& (0+255),f,b
  5461  000152                     u3890:
  5462  000152  2EE8               	decfsz	wreg,f,c
  5463  000154  D7F8               	goto	u3895
  5464  000156  0100               	movlb	0	; () banked
  5465  000158  51DE               	movf	(??_printf+2)& (0+255),w,b
  5466  00015A  0100               	movlb	0	; () banked
  5467  00015C  25DC               	addwf	??_printf& (0+255),w,b
  5468  00015E  0100               	movlb	0	; () banked
  5469  000160  6FEC               	movwf	printf@exp& (0+255),b
  5470  000162  0E00               	movlw	0
  5471  000164  0100               	movlb	0	; () banked
  5472  000166  21DD               	addwfc	(??_printf+1)& (0+255),w,b
  5473  000168  0100               	movlb	0	; () banked
  5474  00016A  6FED               	movwf	(printf@exp+1)& (0+255),b
  5475                           
  5476                           ; BSR set to: 0
  5477                           ;doprnt.c: 838: exp--;
  5478  00016C  0100               	movlb	0	; () banked
  5479  00016E  07EC               	decf	printf@exp& (0+255),f,b
  5480  000170  A0D8               	btfss	status,0,c
  5481  000172  07ED               	decf	(printf@exp+1)& (0+255),f,b
  5482                           
  5483                           ; BSR set to: 0
  5484                           ;doprnt.c: 839: exp *= 3;
  5485  000174  C0EC  F08E         	movff	printf@exp,___wmul@multiplier
  5486  000178  C0ED  F08F         	movff	printf@exp+1,___wmul@multiplier+1
  5487  00017C  0E00               	movlw	0
  5488  00017E  0100               	movlb	0	; () banked
  5489  000180  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5490  000182  0E03               	movlw	3
  5491  000184  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5492  000186  EC1F  F01C         	call	___wmul	;wreg free
  5493  00018A  C08E  F0EC         	movff	?___wmul,printf@exp
  5494  00018E  C08F  F0ED         	movff	?___wmul+1,printf@exp+1
  5495                           
  5496                           ;doprnt.c: 840: exp /= 10;
  5497  000192  C0EC  F086         	movff	printf@exp,___awdiv@dividend
  5498  000196  C0ED  F087         	movff	printf@exp+1,___awdiv@dividend+1
  5499  00019A  0E00               	movlw	0
  5500  00019C  0100               	movlb	0	; () banked
  5501  00019E  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5502  0001A0  0E0A               	movlw	10
  5503  0001A2  6F88               	movwf	___awdiv@divisor& (0+255),b
  5504  0001A4  EC1A  F016         	call	___awdiv	;wreg free
  5505  0001A8  C086  F0EC         	movff	?___awdiv,printf@exp
  5506  0001AC  C087  F0ED         	movff	?___awdiv+1,printf@exp+1
  5507                           
  5508                           ;doprnt.c: 841: if(exp < 0)
  5509  0001B0  0100               	movlb	0	; () banked
  5510  0001B2  AFED               	btfss	(printf@exp+1)& (0+255),7,b
  5511  0001B4  D004               	goto	l4294
  5512                           
  5513                           ; BSR set to: 0
  5514                           ;doprnt.c: 842: exp--;
  5515  0001B6  0100               	movlb	0	; () banked
  5516  0001B8  07EC               	decf	printf@exp& (0+255),f,b
  5517  0001BA  A0D8               	btfss	status,0,c
  5518  0001BC  07ED               	decf	(printf@exp+1)& (0+255),f,b
  5519  0001BE                     l4294:
  5520                           
  5521                           ; BSR set to: 0
  5522                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  5523  0001BE  0100               	movlb	0	; () banked
  5524  0001C0  51EC               	movf	printf@exp& (0+255),w,b
  5525  0001C2  0800               	sublw	0
  5526  0001C4  ECB2  F004         	call	_scale
  5527  0001C8  C0B0  F0EE         	movff	?_scale,printf@tmpval
  5528  0001CC  C0B1  F0EF         	movff	?_scale+1,printf@tmpval+1
  5529  0001D0  C0B2  F0F0         	movff	?_scale+2,printf@tmpval+2
  5530                           
  5531                           ;doprnt.c: 847: tmpval.integ *= fval;
  5532  0001D4  C0EE  F0A1         	movff	printf@tmpval,___ftmul@f1
  5533  0001D8  C0EF  F0A2         	movff	printf@tmpval+1,___ftmul@f1+1
  5534  0001DC  C0F0  F0A3         	movff	printf@tmpval+2,___ftmul@f1+2
  5535  0001E0  C0F6  F0A4         	movff	printf@fval,___ftmul@f2
  5536  0001E4  C0F7  F0A5         	movff	printf@fval+1,___ftmul@f2+1
  5537  0001E8  C0F8  F0A6         	movff	printf@fval+2,___ftmul@f2+2
  5538  0001EC  EC2E  F00F         	call	___ftmul	;wreg free
  5539  0001F0  C0A1  F0EE         	movff	?___ftmul,printf@tmpval
  5540  0001F4  C0A2  F0EF         	movff	?___ftmul+1,printf@tmpval+1
  5541  0001F8  C0A3  F0F0         	movff	?___ftmul+2,printf@tmpval+2
  5542                           
  5543                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  5544  0001FC  C0EE  F080         	movff	printf@tmpval,___ftge@ff1
  5545  000200  C0EF  F081         	movff	printf@tmpval+1,___ftge@ff1+1
  5546  000204  C0F0  F082         	movff	printf@tmpval+2,___ftge@ff1+2
  5547  000208  0E00               	movlw	0
  5548  00020A  0100               	movlb	0	; () banked
  5549  00020C  6F83               	movwf	___ftge@ff2& (0+255),b
  5550  00020E  0E80               	movlw	128
  5551  000210  0100               	movlb	0	; () banked
  5552  000212  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  5553  000214  0E3F               	movlw	63
  5554  000216  0100               	movlb	0	; () banked
  5555  000218  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  5556  00021A  ECB6  F015         	call	___ftge	;wreg free
  5557  00021E  0100               	movlb	0	; () banked
  5558  000220  B0D8               	btfsc	status,0,c
  5559  000222  D005               	goto	l4302
  5560                           
  5561                           ; BSR set to: 0
  5562                           ;doprnt.c: 849: exp--;
  5563  000224  0100               	movlb	0	; () banked
  5564  000226  07EC               	decf	printf@exp& (0+255),f,b
  5565  000228  A0D8               	btfss	status,0,c
  5566  00022A  07ED               	decf	(printf@exp+1)& (0+255),f,b
  5567  00022C  D017               	goto	l4306
  5568  00022E                     l4302:
  5569                           
  5570                           ; BSR set to: 0
  5571                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  5572  00022E  C0EE  F080         	movff	printf@tmpval,___ftge@ff1
  5573  000232  C0EF  F081         	movff	printf@tmpval+1,___ftge@ff1+1
  5574  000236  C0F0  F082         	movff	printf@tmpval+2,___ftge@ff1+2
  5575  00023A  0E00               	movlw	0
  5576  00023C  0100               	movlb	0	; () banked
  5577  00023E  6F83               	movwf	___ftge@ff2& (0+255),b
  5578  000240  0E20               	movlw	32
  5579  000242  0100               	movlb	0	; () banked
  5580  000244  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  5581  000246  0E41               	movlw	65
  5582  000248  0100               	movlb	0	; () banked
  5583  00024A  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  5584  00024C  ECB6  F015         	call	___ftge	;wreg free
  5585  000250  0100               	movlb	0	; () banked
  5586  000252  A0D8               	btfss	status,0,c
  5587  000254  D003               	goto	l4306
  5588                           
  5589                           ; BSR set to: 0
  5590                           ;doprnt.c: 851: exp++;
  5591  000256  0100               	movlb	0	; () banked
  5592  000258  4BEC               	infsnz	printf@exp& (0+255),f,b
  5593  00025A  2BED               	incf	(printf@exp+1)& (0+255),f,b
  5594  00025C                     l4306:
  5595                           
  5596                           ; BSR set to: 0
  5597                           ;doprnt.c: 852: }
  5598                           ;doprnt.c: 1112: if(prec <= 12)
  5599  00025C  0100               	movlb	0	; () banked
  5600  00025E  BFEB               	btfsc	(printf@prec+1)& (0+255),7,b
  5601  000260  D008               	goto	l4308
  5602  000262  0100               	movlb	0	; () banked
  5603  000264  51EB               	movf	(printf@prec+1)& (0+255),w,b
  5604  000266  E11D               	bnz	l4310
  5605  000268  0E0D               	movlw	13
  5606  00026A  0100               	movlb	0	; () banked
  5607  00026C  5DEA               	subwf	printf@prec& (0+255),w,b
  5608  00026E  B0D8               	btfsc	status,0,c
  5609  000270  D018               	goto	l4310
  5610  000272                     l4308:
  5611                           
  5612                           ; BSR set to: 0
  5613                           ;doprnt.c: 1113: fval += fround(prec);
  5614  000272  C0F6  F0BA         	movff	printf@fval,___ftadd@f1
  5615  000276  C0F7  F0BB         	movff	printf@fval+1,___ftadd@f1+1
  5616  00027A  C0F8  F0BC         	movff	printf@fval+2,___ftadd@f1+2
  5617  00027E  0100               	movlb	0	; () banked
  5618  000280  51EA               	movf	printf@prec& (0+255),w,b
  5619  000282  EC9E  F008         	call	_fround
  5620  000286  C0B0  F0BD         	movff	?_fround,___ftadd@f2
  5621  00028A  C0B1  F0BE         	movff	?_fround+1,___ftadd@f2+1
  5622  00028E  C0B2  F0BF         	movff	?_fround+2,___ftadd@f2+2
  5623  000292  ECF4  F009         	call	___ftadd	;wreg free
  5624  000296  C0BA  F0F6         	movff	?___ftadd,printf@fval
  5625  00029A  C0BB  F0F7         	movff	?___ftadd+1,printf@fval+1
  5626  00029E  C0BC  F0F8         	movff	?___ftadd+2,printf@fval+2
  5627  0002A2                     l4310:
  5628                           
  5629                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  5630  0002A2  0100               	movlb	0	; () banked
  5631  0002A4  BFED               	btfsc	(printf@exp+1)& (0+255),7,b
  5632  0002A6  D008               	goto	l4312
  5633  0002A8  0100               	movlb	0	; () banked
  5634  0002AA  51ED               	movf	(printf@exp+1)& (0+255),w,b
  5635  0002AC  E12A               	bnz	l4318
  5636  0002AE  0E0A               	movlw	10
  5637  0002B0  0100               	movlb	0	; () banked
  5638  0002B2  5DEC               	subwf	printf@exp& (0+255),w,b
  5639  0002B4  B0D8               	btfsc	status,0,c
  5640  0002B6  D025               	goto	l4318
  5641  0002B8                     l4312:
  5642                           
  5643                           ; BSR set to: 0
  5644  0002B8  0100               	movlb	0	; () banked
  5645  0002BA  51F6               	movf	printf@fval& (0+255),w,b
  5646  0002BC  0100               	movlb	0	; () banked
  5647  0002BE  11F7               	iorwf	(printf@fval+1)& (0+255),w,b
  5648  0002C0  0100               	movlb	0	; () banked
  5649  0002C2  11F8               	iorwf	(printf@fval+2)& (0+255),w,b
  5650  0002C4  B4D8               	btfsc	status,2,c
  5651  0002C6  D063               	goto	l4332
  5652                           
  5653                           ; BSR set to: 0
  5654  0002C8  C0F6  F0C6         	movff	printf@fval,___fttol@f1
  5655  0002CC  C0F7  F0C7         	movff	printf@fval+1,___fttol@f1+1
  5656  0002D0  C0F8  F0C8         	movff	printf@fval+2,___fttol@f1+2
  5657  0002D4  EC83  F010         	call	___fttol	;wreg free
  5658  0002D8  0100               	movlb	0	; () banked
  5659  0002DA  51C6               	movf	?___fttol& (0+255),w,b
  5660  0002DC  0100               	movlb	0	; () banked
  5661  0002DE  11C7               	iorwf	(?___fttol+1)& (0+255),w,b
  5662  0002E0  0100               	movlb	0	; () banked
  5663  0002E2  11C8               	iorwf	(?___fttol+2)& (0+255),w,b
  5664  0002E4  0100               	movlb	0	; () banked
  5665  0002E6  11C9               	iorwf	(?___fttol+3)& (0+255),w,b
  5666  0002E8  A4D8               	btfss	status,2,c
  5667  0002EA  D051               	goto	l4332
  5668                           
  5669                           ; BSR set to: 0
  5670  0002EC  0100               	movlb	0	; () banked
  5671  0002EE  BFED               	btfsc	(printf@exp+1)& (0+255),7,b
  5672  0002F0  D04E               	goto	l4332
  5673  0002F2  0100               	movlb	0	; () banked
  5674  0002F4  51ED               	movf	(printf@exp+1)& (0+255),w,b
  5675  0002F6  E105               	bnz	l4318
  5676  0002F8  0E02               	movlw	2
  5677  0002FA  0100               	movlb	0	; () banked
  5678  0002FC  5DEC               	subwf	printf@exp& (0+255),w,b
  5679  0002FE  A0D8               	btfss	status,0,c
  5680  000300  D046               	goto	l4332
  5681  000302                     l4318:
  5682                           
  5683                           ; BSR set to: 0
  5684                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  5685  000302  C0EE  F080         	movff	printf@tmpval,___ftge@ff1
  5686  000306  C0EF  F081         	movff	printf@tmpval+1,___ftge@ff1+1
  5687  00030A  C0F0  F082         	movff	printf@tmpval+2,___ftge@ff1+2
  5688  00030E  0E70               	movlw	112
  5689  000310  0100               	movlb	0	; () banked
  5690  000312  6F83               	movwf	___ftge@ff2& (0+255),b
  5691  000314  0E89               	movlw	137
  5692  000316  0100               	movlb	0	; () banked
  5693  000318  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  5694  00031A  0E40               	movlw	64
  5695  00031C  0100               	movlb	0	; () banked
  5696  00031E  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  5697  000320  ECB6  F015         	call	___ftge	;wreg free
  5698  000324  0100               	movlb	0	; () banked
  5699  000326  B0D8               	btfsc	status,0,c
  5700  000328  D003               	goto	l4322
  5701                           
  5702                           ; BSR set to: 0
  5703                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5704  00032A  0100               	movlb	0	; () banked
  5705  00032C  0EF7               	movlw	247
  5706  00032E  D002               	goto	L1
  5707  000330                     l4322:
  5708                           
  5709                           ; BSR set to: 0
  5710                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5711  000330  0100               	movlb	0	; () banked
  5712  000332  0EF8               	movlw	248
  5713  000334                     L1:
  5714  000334  27EC               	addwf	printf@exp& (0+255),f,b
  5715  000336  0EFF               	movlw	255
  5716  000338  23ED               	addwfc	(printf@exp+1)& (0+255),f,b
  5717                           
  5718                           ; BSR set to: 0
  5719                           ;doprnt.c: 1124: }
  5720                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  5721                           
  5722                           ; BSR set to: 0
  5723  00033A  0100               	movlb	0	; () banked
  5724  00033C  51EC               	movf	printf@exp& (0+255),w,b
  5725  00033E  ECB2  F004         	call	_scale
  5726  000342  C0B0  F0EE         	movff	?_scale,printf@tmpval
  5727  000346  C0B1  F0EF         	movff	?_scale+1,printf@tmpval+1
  5728  00034A  C0B2  F0F0         	movff	?_scale+2,printf@tmpval+2
  5729                           
  5730                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  5731  00034E  C0F6  F080         	movff	printf@fval,__tdiv_to_l_@f1
  5732  000352  C0F7  F081         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  5733  000356  C0F8  F082         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  5734  00035A  C0EE  F083         	movff	printf@tmpval,__tdiv_to_l_@f2
  5735  00035E  C0EF  F084         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  5736  000362  C0F0  F085         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  5737  000366  ECE8  F00C         	call	__tdiv_to_l_	;wreg free
  5738  00036A  C080  F0F2         	movff	?__tdiv_to_l_,printf@val
  5739  00036E  C081  F0F3         	movff	?__tdiv_to_l_+1,printf@val+1
  5740  000372  C082  F0F4         	movff	?__tdiv_to_l_+2,printf@val+2
  5741  000376  C083  F0F5         	movff	?__tdiv_to_l_+3,printf@val+3
  5742                           
  5743                           ;doprnt.c: 1129: fval = 0.0;
  5744  00037A  0E00               	movlw	0
  5745  00037C  0100               	movlb	0	; () banked
  5746  00037E  6FF6               	movwf	printf@fval& (0+255),b
  5747  000380  0E00               	movlw	0
  5748  000382  0100               	movlb	0	; () banked
  5749  000384  6FF7               	movwf	(printf@fval+1)& (0+255),b
  5750  000386  0E00               	movlw	0
  5751  000388  0100               	movlb	0	; () banked
  5752  00038A  6FF8               	movwf	(printf@fval+2)& (0+255),b
  5753                           
  5754                           ;doprnt.c: 1130: } else {
  5755  00038C  D033               	goto	l4336
  5756  00038E                     l4332:
  5757                           
  5758                           ; BSR set to: 0
  5759                           ;doprnt.c: 1131: val = (unsigned long)fval;
  5760  00038E  C0F6  F0C6         	movff	printf@fval,___fttol@f1
  5761  000392  C0F7  F0C7         	movff	printf@fval+1,___fttol@f1+1
  5762  000396  C0F8  F0C8         	movff	printf@fval+2,___fttol@f1+2
  5763  00039A  EC83  F010         	call	___fttol	;wreg free
  5764  00039E  C0C6  F0F2         	movff	?___fttol,printf@val
  5765  0003A2  C0C7  F0F3         	movff	?___fttol+1,printf@val+1
  5766  0003A6  C0C8  F0F4         	movff	?___fttol+2,printf@val+2
  5767  0003AA  C0C9  F0F5         	movff	?___fttol+3,printf@val+3
  5768                           
  5769                           ;doprnt.c: 1132: fval -= (double)val;
  5770  0003AE  C0F6  F0C6         	movff	printf@fval,___ftsub@f1
  5771  0003B2  C0F7  F0C7         	movff	printf@fval+1,___ftsub@f1+1
  5772  0003B6  C0F8  F0C8         	movff	printf@fval+2,___ftsub@f1+2
  5773  0003BA  C0F2  F088         	movff	printf@val,___lltoft@c
  5774  0003BE  C0F3  F089         	movff	printf@val+1,___lltoft@c+1
  5775  0003C2  C0F4  F08A         	movff	printf@val+2,___lltoft@c+2
  5776  0003C6  C0F5  F08B         	movff	printf@val+3,___lltoft@c+3
  5777  0003CA  ECAB  F019         	call	___lltoft	;wreg free
  5778  0003CE  C088  F0C9         	movff	?___lltoft,___ftsub@f2
  5779  0003D2  C089  F0CA         	movff	?___lltoft+1,___ftsub@f2+1
  5780  0003D6  C08A  F0CB         	movff	?___lltoft+2,___ftsub@f2+2
  5781  0003DA  ECE6  F01A         	call	___ftsub	;wreg free
  5782  0003DE  C0C6  F0F6         	movff	?___ftsub,printf@fval
  5783  0003E2  C0C7  F0F7         	movff	?___ftsub+1,printf@fval+1
  5784  0003E6  C0C8  F0F8         	movff	?___ftsub+2,printf@fval+2
  5785                           
  5786                           ;doprnt.c: 1133: exp = 0;
  5787  0003EA  0E00               	movlw	0
  5788  0003EC  0100               	movlb	0	; () banked
  5789  0003EE  6FED               	movwf	(printf@exp+1)& (0+255),b
  5790  0003F0  0E00               	movlw	0
  5791  0003F2  6FEC               	movwf	printf@exp& (0+255),b
  5792  0003F4                     l4336:
  5793                           
  5794                           ; BSR set to: 0
  5795                           ;doprnt.c: 1134: }
  5796                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5797  0003F4  0E01               	movlw	1
  5798  0003F6  0100               	movlb	0	; () banked
  5799  0003F8  6FF9               	movwf	printf@c& (0+255),b
  5800  0003FA                     l4338:
  5801                           
  5802                           ; BSR set to: 0
  5803  0003FA  0E0A               	movlw	10
  5804  0003FC  0100               	movlb	0	; () banked
  5805  0003FE  19F9               	xorwf	printf@c& (0+255),w,b
  5806  000400  B4D8               	btfsc	status,2,c
  5807  000402  D01E               	goto	l4350
  5808                           
  5809                           ; BSR set to: 0
  5810                           ;doprnt.c: 1137: if(val < dpowers[c])
  5811                           
  5812                           ; BSR set to: 0
  5813                           
  5814                           ; BSR set to: 0
  5815  000404  0100               	movlb	0	; () banked
  5816  000406  51F9               	movf	printf@c& (0+255),w,b
  5817  000408  0D04               	mullw	4
  5818  00040A  0ED3               	movlw	low _dpowers
  5819  00040C  24F3               	addwf	prodl,w,c
  5820  00040E  6EF6               	movwf	tblptrl,c
  5821  000410  0EFD               	movlw	high _dpowers
  5822  000412  20F4               	addwfc	prodh,w,c
  5823  000414  6EF7               	movwf	tblptrh,c
  5824  000416                     	if	0	;There are less than 3 active tblptr bytes
  5825  000416                     	endif
  5826  000416  0009               	tblrd		*+
  5827  000418  50F5               	movf	tablat,w,c
  5828  00041A  0100               	movlb	0	; () banked
  5829  00041C  5DF2               	subwf	printf@val& (0+255),w,b
  5830  00041E  0009               	tblrd		*+
  5831  000420  50F5               	movf	tablat,w,c
  5832  000422  0100               	movlb	0	; () banked
  5833  000424  59F3               	subwfb	(printf@val+1)& (0+255),w,b
  5834  000426  0009               	tblrd		*+
  5835  000428  50F5               	movf	tablat,w,c
  5836  00042A  0100               	movlb	0	; () banked
  5837  00042C  59F4               	subwfb	(printf@val+2)& (0+255),w,b
  5838  00042E  0009               	tblrd		*+
  5839  000430  50F5               	movf	tablat,w,c
  5840  000432  0100               	movlb	0	; () banked
  5841  000434  59F5               	subwfb	(printf@val+3)& (0+255),w,b
  5842  000436  A0D8               	btfss	status,0,c
  5843  000438  D003               	goto	l4350
  5844                           
  5845                           ; BSR set to: 0
  5846                           
  5847                           ; BSR set to: 0
  5848                           
  5849                           ; BSR set to: 0
  5850                           ;doprnt.c: 1138: break;
  5851  00043A  0100               	movlb	0	; () banked
  5852  00043C  2BF9               	incf	printf@c& (0+255),f,b
  5853  00043E  D7DD               	goto	l4338
  5854  000440                     l4350:
  5855                           
  5856                           ; BSR set to: 0
  5857                           ;doprnt.c: 1175: {
  5858                           ;doprnt.c: 1188: if(flag & 0x03)
  5859  000440  0E03               	movlw	3
  5860  000442  0100               	movlb	0	; () banked
  5861  000444  15E8               	andwf	printf@flag& (0+255),w,b
  5862  000446  0100               	movlb	0	; () banked
  5863  000448  6FDC               	movwf	??_printf& (0+255),b
  5864  00044A  0E00               	movlw	0
  5865  00044C  0100               	movlb	0	; () banked
  5866  00044E  15E9               	andwf	(printf@flag+1)& (0+255),w,b
  5867  000450  0100               	movlb	0	; () banked
  5868  000452  6FDD               	movwf	(??_printf+1)& (0+255),b
  5869  000454  0100               	movlb	0	; () banked
  5870  000456  51DC               	movf	??_printf& (0+255),w,b
  5871  000458  0100               	movlb	0	; () banked
  5872  00045A  11DD               	iorwf	(??_printf+1)& (0+255),w,b
  5873  00045C  B4D8               	btfsc	status,2,c
  5874  00045E  D04B               	goto	l4360
  5875                           
  5876                           ; BSR set to: 0
  5877                           ;doprnt.c: 1190: (putch('-') );
  5878  000460  0E2D               	movlw	45
  5879  000462  ECAC  F01C         	call	_putch
  5880                           
  5881                           ;doprnt.c: 1195: }
  5882                           ;doprnt.c: 1196: while(c--) {
  5883  000466  D047               	goto	l4360
  5884  000468                     l4354:
  5885                           
  5886                           ;doprnt.c: 1200: {
  5887                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  5888  000468  C0F2  F080         	movff	printf@val,___lldiv@dividend
  5889  00046C  C0F3  F081         	movff	printf@val+1,___lldiv@dividend+1
  5890  000470  C0F4  F082         	movff	printf@val+2,___lldiv@dividend+2
  5891  000474  C0F5  F083         	movff	printf@val+3,___lldiv@dividend+3
  5892  000478  0100               	movlb	0	; () banked
  5893  00047A  51F9               	movf	printf@c& (0+255),w,b
  5894  00047C  0D04               	mullw	4
  5895  00047E  0ED3               	movlw	low _dpowers
  5896  000480  24F3               	addwf	prodl,w,c
  5897  000482  6EF6               	movwf	tblptrl,c
  5898  000484  0EFD               	movlw	high _dpowers
  5899  000486  20F4               	addwfc	prodh,w,c
  5900  000488  6EF7               	movwf	tblptrh,c
  5901  00048A                     	if	0	;There are less than 3 active tblptr bytes
  5902  00048A                     	endif
  5903  00048A  0009               	tblrd		*+
  5904  00048C  CFF5 F084          	movff	tablat,___lldiv@divisor
  5905  000490  0009               	tblrd		*+
  5906  000492  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  5907  000496  0009               	tblrd		*+
  5908  000498  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  5909  00049C  000A               	tblrd		*-
  5910  00049E  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  5911  0004A2  EC79  F016         	call	___lldiv	;wreg free
  5912  0004A6  C080  F0EE         	movff	?___lldiv,printf@tmpval
  5913  0004AA  C081  F0EF         	movff	?___lldiv+1,printf@tmpval+1
  5914  0004AE  C082  F0F0         	movff	?___lldiv+2,printf@tmpval+2
  5915  0004B2  C083  F0F1         	movff	?___lldiv+3,printf@tmpval+3
  5916                           
  5917                           ;doprnt.c: 1202: tmpval.vd %= 10;
  5918  0004B6  C0EE  F08D         	movff	printf@tmpval,___llmod@dividend
  5919  0004BA  C0EF  F08E         	movff	printf@tmpval+1,___llmod@dividend+1
  5920  0004BE  C0F0  F08F         	movff	printf@tmpval+2,___llmod@dividend+2
  5921  0004C2  C0F1  F090         	movff	printf@tmpval+3,___llmod@dividend+3
  5922  0004C6  0E0A               	movlw	10
  5923  0004C8  0100               	movlb	0	; () banked
  5924  0004CA  6F91               	movwf	___llmod@divisor& (0+255),b
  5925  0004CC  0E00               	movlw	0
  5926  0004CE  6F92               	movwf	(___llmod@divisor+1)& (0+255),b
  5927  0004D0  0E00               	movlw	0
  5928  0004D2  6F93               	movwf	(___llmod@divisor+2)& (0+255),b
  5929  0004D4  0E00               	movlw	0
  5930  0004D6  6F94               	movwf	(___llmod@divisor+3)& (0+255),b
  5931  0004D8  ECD6  F018         	call	___llmod	;wreg free
  5932  0004DC  C08D  F0EE         	movff	?___llmod,printf@tmpval
  5933  0004E0  C08E  F0EF         	movff	?___llmod+1,printf@tmpval+1
  5934  0004E4  C08F  F0F0         	movff	?___llmod+2,printf@tmpval+2
  5935  0004E8  C090  F0F1         	movff	?___llmod+3,printf@tmpval+3
  5936                           
  5937                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  5938  0004EC  0100               	movlb	0	; () banked
  5939  0004EE  51EE               	movf	printf@tmpval& (0+255),w,b
  5940  0004F0  0F30               	addlw	48
  5941  0004F2  ECAC  F01C         	call	_putch
  5942  0004F6                     l4360:
  5943  0004F6  0100               	movlb	0	; () banked
  5944  0004F8  07F9               	decf	printf@c& (0+255),f,b
  5945  0004FA  0100               	movlb	0	; () banked
  5946  0004FC  29F9               	incf	printf@c& (0+255),w,b
  5947  0004FE  B4D8               	btfsc	status,2,c
  5948  000500  D008               	goto	l4366
  5949  000502  D7B2               	goto	l4354
  5950  000504                     l4362:
  5951                           
  5952                           ; BSR set to: 0
  5953                           ;doprnt.c: 1208: (putch('0') );
  5954  000504  0E30               	movlw	48
  5955  000506  ECAC  F01C         	call	_putch
  5956                           
  5957                           ;doprnt.c: 1209: exp--;
  5958  00050A  0100               	movlb	0	; () banked
  5959  00050C  07EC               	decf	printf@exp& (0+255),f,b
  5960  00050E  A0D8               	btfss	status,0,c
  5961  000510  07ED               	decf	(printf@exp+1)& (0+255),f,b
  5962  000512                     l4366:
  5963                           
  5964                           ; BSR set to: 0
  5965  000512  0100               	movlb	0	; () banked
  5966  000514  BFED               	btfsc	(printf@exp+1)& (0+255),7,b
  5967  000516  D007               	goto	l4368
  5968  000518  0100               	movlb	0	; () banked
  5969  00051A  51ED               	movf	(printf@exp+1)& (0+255),w,b
  5970  00051C  E1F3               	bnz	l4362
  5971  00051E  0100               	movlb	0	; () banked
  5972  000520  05EC               	decf	printf@exp& (0+255),w,b
  5973  000522  B0D8               	btfsc	status,0,c
  5974  000524  D7EF               	goto	l4362
  5975  000526                     l4368:
  5976                           
  5977                           ; BSR set to: 0
  5978                           ;doprnt.c: 1210: }
  5979                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5980  000526  0100               	movlb	0	; () banked
  5981  000528  BFEB               	btfsc	(printf@prec+1)& (0+255),7,b
  5982  00052A  D00C               	goto	l709
  5983  00052C  0100               	movlb	0	; () banked
  5984  00052E  51EB               	movf	(printf@prec+1)& (0+255),w,b
  5985  000530  E105               	bnz	u4050
  5986  000532  0E09               	movlw	9
  5987  000534  0100               	movlb	0	; () banked
  5988  000536  5DEA               	subwf	printf@prec& (0+255),w,b
  5989  000538  A0D8               	btfss	status,0,c
  5990  00053A  D004               	goto	l709
  5991  00053C                     u4050:
  5992                           
  5993                           ; BSR set to: 0
  5994                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5995  00053C  0E08               	movlw	8
  5996  00053E  0100               	movlb	0	; () banked
  5997  000540  6FF9               	movwf	printf@c& (0+255),b
  5998  000542  D002               	goto	l4372
  5999  000544                     l709:
  6000                           
  6001                           ; BSR set to: 0
  6002                           ;doprnt.c: 1213: else
  6003                           ;doprnt.c: 1214: c = prec;
  6004  000544  C0EA  F0F9         	movff	printf@prec,printf@c
  6005  000548                     l4372:
  6006                           
  6007                           ; BSR set to: 0
  6008                           ;doprnt.c: 1215: prec -= c;
  6009  000548  0100               	movlb	0	; () banked
  6010  00054A  51F9               	movf	printf@c& (0+255),w,b
  6011  00054C  0100               	movlb	0	; () banked
  6012  00054E  5FEA               	subwf	printf@prec& (0+255),f,b
  6013  000550  0E00               	movlw	0
  6014  000552  0100               	movlb	0	; () banked
  6015  000554  BFF9               	btfsc	printf@c& (0+255),7,b
  6016  000556  0EFF               	movlw	255
  6017  000558  0100               	movlb	0	; () banked
  6018  00055A  5BEB               	subwfb	(printf@prec+1)& (0+255),f,b
  6019                           
  6020                           ; BSR set to: 0
  6021                           ;doprnt.c: 1219: if(c)
  6022  00055C  0100               	movlb	0	; () banked
  6023  00055E  51F9               	movf	printf@c& (0+255),w,b
  6024  000560  0100               	movlb	0	; () banked
  6025  000562  B4D8               	btfsc	status,2,c
  6026  000564  D003               	goto	l4378
  6027                           
  6028                           ; BSR set to: 0
  6029                           ;doprnt.c: 1221: (putch('.') );
  6030  000566  0E2E               	movlw	46
  6031  000568  ECAC  F01C         	call	_putch
  6032  00056C                     l4378:
  6033                           
  6034                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6035  00056C  0100               	movlb	0	; () banked
  6036  00056E  51F9               	movf	printf@c& (0+255),w,b
  6037  000570  ECB2  F004         	call	_scale
  6038  000574  C0B0  F0E2         	movff	?_scale,_printf$1300
  6039  000578  C0B1  F0E3         	movff	?_scale+1,_printf$1300+1
  6040  00057C  C0B2  F0E4         	movff	?_scale+2,_printf$1300+2
  6041                           
  6042                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6043  000580  C0F6  F0A4         	movff	printf@fval,___ftmul@f2
  6044  000584  C0F7  F0A5         	movff	printf@fval+1,___ftmul@f2+1
  6045  000588  C0F8  F0A6         	movff	printf@fval+2,___ftmul@f2+2
  6046  00058C  C0E2  F0A1         	movff	_printf$1300,___ftmul@f1
  6047  000590  C0E3  F0A2         	movff	_printf$1300+1,___ftmul@f1+1
  6048  000594  C0E4  F0A3         	movff	_printf$1300+2,___ftmul@f1+2
  6049  000598  EC2E  F00F         	call	___ftmul	;wreg free
  6050  00059C  C0A1  F0C6         	movff	?___ftmul,___fttol@f1
  6051  0005A0  C0A2  F0C7         	movff	?___ftmul+1,___fttol@f1+1
  6052  0005A4  C0A3  F0C8         	movff	?___ftmul+2,___fttol@f1+2
  6053  0005A8  EC83  F010         	call	___fttol	;wreg free
  6054  0005AC  C0C6  F0F2         	movff	?___fttol,printf@val
  6055  0005B0  C0C7  F0F3         	movff	?___fttol+1,printf@val+1
  6056  0005B4  C0C8  F0F4         	movff	?___fttol+2,printf@val+2
  6057  0005B8  C0C9  F0F5         	movff	?___fttol+3,printf@val+3
  6058                           
  6059                           ;doprnt.c: 1228: while(c--) {
  6060  0005BC  D06E               	goto	l4388
  6061  0005BE                     l4382:
  6062                           
  6063                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  6064  0005BE  C0F2  F080         	movff	printf@val,___lldiv@dividend
  6065  0005C2  C0F3  F081         	movff	printf@val+1,___lldiv@dividend+1
  6066  0005C6  C0F4  F082         	movff	printf@val+2,___lldiv@dividend+2
  6067  0005CA  C0F5  F083         	movff	printf@val+3,___lldiv@dividend+3
  6068  0005CE  0100               	movlb	0	; () banked
  6069  0005D0  51F9               	movf	printf@c& (0+255),w,b
  6070  0005D2  0D04               	mullw	4
  6071  0005D4  0ED3               	movlw	low _dpowers
  6072  0005D6  24F3               	addwf	prodl,w,c
  6073  0005D8  6EF6               	movwf	tblptrl,c
  6074  0005DA  0EFD               	movlw	high _dpowers
  6075  0005DC  20F4               	addwfc	prodh,w,c
  6076  0005DE  6EF7               	movwf	tblptrh,c
  6077  0005E0                     	if	0	;There are less than 3 active tblptr bytes
  6078  0005E0                     	endif
  6079  0005E0  0009               	tblrd		*+
  6080  0005E2  CFF5 F084          	movff	tablat,___lldiv@divisor
  6081  0005E6  0009               	tblrd		*+
  6082  0005E8  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  6083  0005EC  0009               	tblrd		*+
  6084  0005EE  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  6085  0005F2  000A               	tblrd		*-
  6086  0005F4  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  6087  0005F8  EC79  F016         	call	___lldiv	;wreg free
  6088  0005FC  C080  F0EE         	movff	?___lldiv,printf@tmpval
  6089  000600  C081  F0EF         	movff	?___lldiv+1,printf@tmpval+1
  6090  000604  C082  F0F0         	movff	?___lldiv+2,printf@tmpval+2
  6091  000608  C083  F0F1         	movff	?___lldiv+3,printf@tmpval+3
  6092                           
  6093                           ;doprnt.c: 1230: tmpval.vd %= 10;
  6094  00060C  C0EE  F08D         	movff	printf@tmpval,___llmod@dividend
  6095  000610  C0EF  F08E         	movff	printf@tmpval+1,___llmod@dividend+1
  6096  000614  C0F0  F08F         	movff	printf@tmpval+2,___llmod@dividend+2
  6097  000618  C0F1  F090         	movff	printf@tmpval+3,___llmod@dividend+3
  6098  00061C  0E0A               	movlw	10
  6099  00061E  0100               	movlb	0	; () banked
  6100  000620  6F91               	movwf	___llmod@divisor& (0+255),b
  6101  000622  0E00               	movlw	0
  6102  000624  6F92               	movwf	(___llmod@divisor+1)& (0+255),b
  6103  000626  0E00               	movlw	0
  6104  000628  6F93               	movwf	(___llmod@divisor+2)& (0+255),b
  6105  00062A  0E00               	movlw	0
  6106  00062C  6F94               	movwf	(___llmod@divisor+3)& (0+255),b
  6107  00062E  ECD6  F018         	call	___llmod	;wreg free
  6108  000632  C08D  F0EE         	movff	?___llmod,printf@tmpval
  6109  000636  C08E  F0EF         	movff	?___llmod+1,printf@tmpval+1
  6110  00063A  C08F  F0F0         	movff	?___llmod+2,printf@tmpval+2
  6111  00063E  C090  F0F1         	movff	?___llmod+3,printf@tmpval+3
  6112                           
  6113                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  6114  000642  0100               	movlb	0	; () banked
  6115  000644  51EE               	movf	printf@tmpval& (0+255),w,b
  6116  000646  0F30               	addlw	48
  6117  000648  ECAC  F01C         	call	_putch
  6118                           
  6119                           ;doprnt.c: 1232: val %= dpowers[c];
  6120  00064C  C0F2  F08D         	movff	printf@val,___llmod@dividend
  6121  000650  C0F3  F08E         	movff	printf@val+1,___llmod@dividend+1
  6122  000654  C0F4  F08F         	movff	printf@val+2,___llmod@dividend+2
  6123  000658  C0F5  F090         	movff	printf@val+3,___llmod@dividend+3
  6124  00065C  0100               	movlb	0	; () banked
  6125  00065E  51F9               	movf	printf@c& (0+255),w,b
  6126  000660  0D04               	mullw	4
  6127  000662  0ED3               	movlw	low _dpowers
  6128  000664  24F3               	addwf	prodl,w,c
  6129  000666  6EF6               	movwf	tblptrl,c
  6130  000668  0EFD               	movlw	high _dpowers
  6131  00066A  20F4               	addwfc	prodh,w,c
  6132  00066C  6EF7               	movwf	tblptrh,c
  6133  00066E                     	if	0	;There are less than 3 active tblptr bytes
  6134  00066E                     	endif
  6135  00066E  0009               	tblrd		*+
  6136  000670  CFF5 F091          	movff	tablat,___llmod@divisor
  6137  000674  0009               	tblrd		*+
  6138  000676  CFF5 F092          	movff	tablat,___llmod@divisor+1
  6139  00067A  0009               	tblrd		*+
  6140  00067C  CFF5 F093          	movff	tablat,___llmod@divisor+2
  6141  000680  000A               	tblrd		*-
  6142  000682  CFF5 F094          	movff	tablat,___llmod@divisor+3
  6143  000686  ECD6  F018         	call	___llmod	;wreg free
  6144  00068A  C08D  F0F2         	movff	?___llmod,printf@val
  6145  00068E  C08E  F0F3         	movff	?___llmod+1,printf@val+1
  6146  000692  C08F  F0F4         	movff	?___llmod+2,printf@val+2
  6147  000696  C090  F0F5         	movff	?___llmod+3,printf@val+3
  6148  00069A                     l4388:
  6149  00069A  0100               	movlb	0	; () banked
  6150  00069C  07F9               	decf	printf@c& (0+255),f,b
  6151  00069E  0100               	movlb	0	; () banked
  6152  0006A0  29F9               	incf	printf@c& (0+255),w,b
  6153  0006A2  B4D8               	btfsc	status,2,c
  6154  0006A4  D008               	goto	l4394
  6155  0006A6  D78B               	goto	l4382
  6156  0006A8                     l4390:
  6157                           
  6158                           ; BSR set to: 0
  6159                           ;doprnt.c: 1236: (putch('0') );
  6160  0006A8  0E30               	movlw	48
  6161  0006AA  ECAC  F01C         	call	_putch
  6162                           
  6163                           ;doprnt.c: 1237: prec--;
  6164  0006AE  0100               	movlb	0	; () banked
  6165  0006B0  07EA               	decf	printf@prec& (0+255),f,b
  6166  0006B2  A0D8               	btfss	status,0,c
  6167  0006B4  07EB               	decf	(printf@prec+1)& (0+255),f,b
  6168  0006B6                     l4394:
  6169                           
  6170                           ; BSR set to: 0
  6171  0006B6  0100               	movlb	0	; () banked
  6172  0006B8  51EA               	movf	printf@prec& (0+255),w,b
  6173  0006BA  0100               	movlb	0	; () banked
  6174  0006BC  11EB               	iorwf	(printf@prec+1)& (0+255),w,b
  6175  0006BE  B4D8               	btfsc	status,2,c
  6176  0006C0  D141               	goto	l4462
  6177  0006C2  D7F2               	goto	l4390
  6178  0006C4                     l681:
  6179                           
  6180                           ; BSR set to: 0
  6181                           ;doprnt.c: 1246: }
  6182                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  6183  0006C4  0100               	movlb	0	; () banked
  6184  0006C6  BFE8               	btfsc	printf@flag& (0+255),7,b
  6185  0006C8  D023               	goto	l4406
  6186                           
  6187                           ; BSR set to: 0
  6188                           ;doprnt.c: 1253: {
  6189                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  6190  0006CA  C0E6  FFD9         	movff	printf@ap,fsr2l
  6191  0006CE  C0E7  FFDA         	movff	printf@ap+1,fsr2h
  6192  0006D2  CFDE F0F2          	movff	postinc2,printf@val
  6193  0006D6  CFDD F0F3          	movff	postdec2,printf@val+1
  6194  0006DA  0100               	movlb	0	; () banked
  6195  0006DC  0E00               	movlw	0
  6196  0006DE  BFF3               	btfsc	(printf@val+1)& (0+255),7,b
  6197  0006E0  0EFF               	movlw	-1
  6198  0006E2  6FF4               	movwf	(printf@val+2)& (0+255),b
  6199  0006E4  6FF5               	movwf	(printf@val+3)& (0+255),b
  6200                           
  6201                           ; BSR set to: 0
  6202  0006E6  0E02               	movlw	2
  6203  0006E8  0100               	movlb	0	; () banked
  6204  0006EA  27E6               	addwf	printf@ap& (0+255),f,b
  6205  0006EC  0E00               	movlw	0
  6206  0006EE  23E7               	addwfc	(printf@ap+1)& (0+255),f,b
  6207                           
  6208                           ; BSR set to: 0
  6209                           ;doprnt.c: 1261: if((long)val < 0) {
  6210  0006F0  0100               	movlb	0	; () banked
  6211  0006F2  AFF5               	btfss	(printf@val+3)& (0+255),7,b
  6212  0006F4  D06E               	goto	l4440
  6213                           
  6214                           ; BSR set to: 0
  6215                           ;doprnt.c: 1262: flag |= 0x03;
  6216  0006F6  0E03               	movlw	3
  6217  0006F8  0100               	movlb	0	; () banked
  6218  0006FA  13E8               	iorwf	printf@flag& (0+255),f,b
  6219                           
  6220                           ; BSR set to: 0
  6221                           ;doprnt.c: 1263: val = -val;
  6222  0006FC  0100               	movlb	0	; () banked
  6223  0006FE  1FF5               	comf	(printf@val+3)& (0+255),f,b
  6224  000700  1FF4               	comf	(printf@val+2)& (0+255),f,b
  6225  000702  1FF3               	comf	(printf@val+1)& (0+255),f,b
  6226  000704  6DF2               	negf	printf@val& (0+255),b
  6227  000706  0E00               	movlw	0
  6228  000708  23F3               	addwfc	(printf@val+1)& (0+255),f,b
  6229  00070A  23F4               	addwfc	(printf@val+2)& (0+255),f,b
  6230  00070C  23F5               	addwfc	(printf@val+3)& (0+255),f,b
  6231                           
  6232                           ; BSR set to: 0
  6233                           ;doprnt.c: 1264: }
  6234                           ;doprnt.c: 1266: }
  6235  00070E  D061               	goto	l4440
  6236  000710                     l4406:
  6237                           
  6238                           ; BSR set to: 0
  6239                           ;doprnt.c: 1268: else
  6240                           ;doprnt.c: 1273: {
  6241                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6242  000710  C0E6  FFD9         	movff	printf@ap,fsr2l
  6243  000714  C0E7  FFDA         	movff	printf@ap+1,fsr2h
  6244  000718  CFDE F0DC          	movff	postinc2,??_printf
  6245  00071C  CFDD F0DD          	movff	postdec2,??_printf+1
  6246  000720  C0DC  F0F2         	movff	??_printf,printf@val
  6247  000724  C0DD  F0F3         	movff	??_printf+1,printf@val+1
  6248  000728  0100               	movlb	0	; () banked
  6249  00072A  6BF4               	clrf	(printf@val+2)& (0+255),b
  6250  00072C  6BF5               	clrf	(printf@val+3)& (0+255),b
  6251                           
  6252                           ; BSR set to: 0
  6253  00072E  0E02               	movlw	2
  6254  000730  0100               	movlb	0	; () banked
  6255  000732  27E6               	addwf	printf@ap& (0+255),f,b
  6256  000734  0E00               	movlw	0
  6257  000736  23E7               	addwfc	(printf@ap+1)& (0+255),f,b
  6258                           
  6259                           ; BSR set to: 0
  6260                           ;doprnt.c: 1287: }
  6261                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6262  000738  D04C               	goto	l4440
  6263  00073A                     l4410:
  6264                           
  6265                           ; BSR set to: 0
  6266                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6267  00073A  0E01               	movlw	1
  6268  00073C  0100               	movlb	0	; () banked
  6269  00073E  6FF9               	movwf	printf@c& (0+255),b
  6270  000740                     l4412:
  6271                           
  6272                           ; BSR set to: 0
  6273  000740  0E0A               	movlw	10
  6274  000742  0100               	movlb	0	; () banked
  6275  000744  19F9               	xorwf	printf@c& (0+255),w,b
  6276  000746  B4D8               	btfsc	status,2,c
  6277  000748  D04D               	goto	l4442
  6278                           
  6279                           ; BSR set to: 0
  6280                           ;doprnt.c: 1306: if(val < dpowers[c])
  6281                           
  6282                           ; BSR set to: 0
  6283                           
  6284                           ; BSR set to: 0
  6285  00074A  0100               	movlb	0	; () banked
  6286  00074C  51F9               	movf	printf@c& (0+255),w,b
  6287  00074E  0D04               	mullw	4
  6288  000750  0ED3               	movlw	low _dpowers
  6289  000752  24F3               	addwf	prodl,w,c
  6290  000754  6EF6               	movwf	tblptrl,c
  6291  000756  0EFD               	movlw	high _dpowers
  6292  000758  20F4               	addwfc	prodh,w,c
  6293  00075A  6EF7               	movwf	tblptrh,c
  6294  00075C                     	if	0	;There are less than 3 active tblptr bytes
  6295  00075C                     	endif
  6296  00075C  0009               	tblrd		*+
  6297  00075E  50F5               	movf	tablat,w,c
  6298  000760  0100               	movlb	0	; () banked
  6299  000762  5DF2               	subwf	printf@val& (0+255),w,b
  6300  000764  0009               	tblrd		*+
  6301  000766  50F5               	movf	tablat,w,c
  6302  000768  0100               	movlb	0	; () banked
  6303  00076A  59F3               	subwfb	(printf@val+1)& (0+255),w,b
  6304  00076C  0009               	tblrd		*+
  6305  00076E  50F5               	movf	tablat,w,c
  6306  000770  0100               	movlb	0	; () banked
  6307  000772  59F4               	subwfb	(printf@val+2)& (0+255),w,b
  6308  000774  0009               	tblrd		*+
  6309  000776  50F5               	movf	tablat,w,c
  6310  000778  0100               	movlb	0	; () banked
  6311  00077A  59F5               	subwfb	(printf@val+3)& (0+255),w,b
  6312  00077C  A0D8               	btfss	status,0,c
  6313  00077E  D032               	goto	l4442
  6314                           
  6315                           ; BSR set to: 0
  6316                           
  6317                           ; BSR set to: 0
  6318                           
  6319                           ; BSR set to: 0
  6320                           ;doprnt.c: 1307: break;
  6321  000780  0100               	movlb	0	; () banked
  6322  000782  2BF9               	incf	printf@c& (0+255),f,b
  6323  000784  D7DD               	goto	l4412
  6324  000786                     l4424:
  6325                           
  6326                           ; BSR set to: 0
  6327                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6328  000786  0E01               	movlw	1
  6329  000788  0100               	movlb	0	; () banked
  6330  00078A  6FF9               	movwf	printf@c& (0+255),b
  6331  00078C                     l4426:
  6332                           
  6333                           ; BSR set to: 0
  6334  00078C  0E08               	movlw	8
  6335  00078E  0100               	movlb	0	; () banked
  6336  000790  19F9               	xorwf	printf@c& (0+255),w,b
  6337  000792  B4D8               	btfsc	status,2,c
  6338  000794  D027               	goto	l4442
  6339                           
  6340                           ; BSR set to: 0
  6341                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6342                           
  6343                           ; BSR set to: 0
  6344                           
  6345                           ; BSR set to: 0
  6346  000796  0100               	movlb	0	; () banked
  6347  000798  51F9               	movf	printf@c& (0+255),w,b
  6348  00079A  0D04               	mullw	4
  6349  00079C  0E49               	movlw	low _hexpowers
  6350  00079E  24F3               	addwf	prodl,w,c
  6351  0007A0  6EF6               	movwf	tblptrl,c
  6352  0007A2  0EFE               	movlw	high _hexpowers
  6353  0007A4  20F4               	addwfc	prodh,w,c
  6354  0007A6  6EF7               	movwf	tblptrh,c
  6355  0007A8                     	if	0	;There are less than 3 active tblptr bytes
  6356  0007A8                     	endif
  6357  0007A8  0009               	tblrd		*+
  6358  0007AA  50F5               	movf	tablat,w,c
  6359  0007AC  0100               	movlb	0	; () banked
  6360  0007AE  5DF2               	subwf	printf@val& (0+255),w,b
  6361  0007B0  0009               	tblrd		*+
  6362  0007B2  50F5               	movf	tablat,w,c
  6363  0007B4  0100               	movlb	0	; () banked
  6364  0007B6  59F3               	subwfb	(printf@val+1)& (0+255),w,b
  6365  0007B8  0009               	tblrd		*+
  6366  0007BA  50F5               	movf	tablat,w,c
  6367  0007BC  0100               	movlb	0	; () banked
  6368  0007BE  59F4               	subwfb	(printf@val+2)& (0+255),w,b
  6369  0007C0  0009               	tblrd		*+
  6370  0007C2  50F5               	movf	tablat,w,c
  6371  0007C4  0100               	movlb	0	; () banked
  6372  0007C6  59F5               	subwfb	(printf@val+3)& (0+255),w,b
  6373  0007C8  A0D8               	btfss	status,0,c
  6374  0007CA  D00C               	goto	l4442
  6375                           
  6376                           ; BSR set to: 0
  6377                           
  6378                           ; BSR set to: 0
  6379                           
  6380                           ; BSR set to: 0
  6381                           ;doprnt.c: 1318: break;
  6382  0007CC  0100               	movlb	0	; () banked
  6383  0007CE  2BF9               	incf	printf@c& (0+255),f,b
  6384  0007D0  D7DD               	goto	l4426
  6385  0007D2                     l4440:
  6386                           
  6387                           ; BSR set to: 0
  6388  0007D2  0100               	movlb	0	; () banked
  6389  0007D4  51E8               	movf	printf@flag& (0+255),w,b
  6390  0007D6  0B80               	andlw	128
  6391                           
  6392                           ; Switch size 1, requested type "space"
  6393                           ; Number of cases is 2, Range of values is 0 to 128
  6394                           ; switch strategies available:
  6395                           ; Name         Instructions Cycles
  6396                           ; simple_byte            7     4 (average)
  6397                           ;	Chosen strategy is simple_byte
  6398  0007D8  0A00               	xorlw	0	; case 0
  6399  0007DA  B4D8               	btfsc	status,2,c
  6400  0007DC  D7AE               	goto	l4410
  6401  0007DE  0A80               	xorlw	128	; case 128
  6402  0007E0  B4D8               	btfsc	status,2,c
  6403  0007E2  D7D1               	goto	l4424
  6404  0007E4                     l4442:
  6405                           
  6406                           ; BSR set to: 0
  6407                           ;doprnt.c: 1422: {
  6408                           ;doprnt.c: 1438: if(flag & 0x03)
  6409  0007E4  0E03               	movlw	3
  6410  0007E6  0100               	movlb	0	; () banked
  6411  0007E8  15E8               	andwf	printf@flag& (0+255),w,b
  6412  0007EA  0100               	movlb	0	; () banked
  6413  0007EC  6FDC               	movwf	??_printf& (0+255),b
  6414  0007EE  0E00               	movlw	0
  6415  0007F0  0100               	movlb	0	; () banked
  6416  0007F2  15E9               	andwf	(printf@flag+1)& (0+255),w,b
  6417  0007F4  0100               	movlb	0	; () banked
  6418  0007F6  6FDD               	movwf	(??_printf+1)& (0+255),b
  6419  0007F8  0100               	movlb	0	; () banked
  6420  0007FA  51DC               	movf	??_printf& (0+255),w,b
  6421  0007FC  0100               	movlb	0	; () banked
  6422  0007FE  11DD               	iorwf	(??_printf+1)& (0+255),w,b
  6423  000800  B4D8               	btfsc	status,2,c
  6424  000802  D003               	goto	l4446
  6425                           
  6426                           ; BSR set to: 0
  6427                           ;doprnt.c: 1439: (putch('-') );
  6428  000804  0E2D               	movlw	45
  6429  000806  ECAC  F01C         	call	_putch
  6430  00080A                     l4446:
  6431                           
  6432                           ;doprnt.c: 1469: }
  6433                           ;doprnt.c: 1472: prec = c;
  6434  00080A  0100               	movlb	0	; () banked
  6435  00080C  51F9               	movf	printf@c& (0+255),w,b
  6436  00080E  0100               	movlb	0	; () banked
  6437  000810  6FEA               	movwf	printf@prec& (0+255),b
  6438  000812  6BEB               	clrf	(printf@prec+1)& (0+255),b
  6439  000814  BFEA               	btfsc	printf@prec& (0+255),7,b
  6440  000816  07EB               	decf	(printf@prec+1)& (0+255),f,b
  6441                           
  6442                           ;doprnt.c: 1474: while(prec--) {
  6443  000818  D08A               	goto	l4460
  6444  00081A                     l4448:
  6445                           
  6446                           ; BSR set to: 0
  6447                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6448  00081A  C0EA  F0DC         	movff	printf@prec,??_printf
  6449  00081E  C0EB  F0DD         	movff	printf@prec+1,??_printf+1
  6450  000822  0100               	movlb	0	; () banked
  6451  000824  90D8               	bcf	status,0,c
  6452  000826  37DC               	rlcf	??_printf& (0+255),f,b
  6453  000828  37DD               	rlcf	(??_printf+1)& (0+255),f,b
  6454  00082A  0100               	movlb	0	; () banked
  6455  00082C  90D8               	bcf	status,0,c
  6456  00082E  37DC               	rlcf	??_printf& (0+255),f,b
  6457  000830  37DD               	rlcf	(??_printf+1)& (0+255),f,b
  6458  000832  0ED3               	movlw	low _dpowers
  6459  000834  0100               	movlb	0	; () banked
  6460  000836  25DC               	addwf	??_printf& (0+255),w,b
  6461  000838  6EF6               	movwf	tblptrl,c
  6462  00083A  0EFD               	movlw	high _dpowers
  6463  00083C  21DD               	addwfc	(??_printf+1)& (0+255),w,b
  6464  00083E  6EF7               	movwf	tblptrh,c
  6465  000840                     	if	0	;There are less than 3 active tblptr bytes
  6466  000840                     	endif
  6467  000840  0009               	tblrd		*+
  6468  000842  CFF5 F084          	movff	tablat,___lldiv@divisor
  6469  000846  0009               	tblrd		*+
  6470  000848  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  6471  00084C  0009               	tblrd		*+
  6472  00084E  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  6473  000852  000A               	tblrd		*-
  6474  000854  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  6475  000858  C0F2  F080         	movff	printf@val,___lldiv@dividend
  6476  00085C  C0F3  F081         	movff	printf@val+1,___lldiv@dividend+1
  6477  000860  C0F4  F082         	movff	printf@val+2,___lldiv@dividend+2
  6478  000864  C0F5  F083         	movff	printf@val+3,___lldiv@dividend+3
  6479  000868  EC79  F016         	call	___lldiv	;wreg free
  6480  00086C  C080  F08D         	movff	?___lldiv,___llmod@dividend
  6481  000870  C081  F08E         	movff	?___lldiv+1,___llmod@dividend+1
  6482  000874  C082  F08F         	movff	?___lldiv+2,___llmod@dividend+2
  6483  000878  C083  F090         	movff	?___lldiv+3,___llmod@dividend+3
  6484  00087C  0E0A               	movlw	10
  6485  00087E  0100               	movlb	0	; () banked
  6486  000880  6F91               	movwf	___llmod@divisor& (0+255),b
  6487  000882  0E00               	movlw	0
  6488  000884  6F92               	movwf	(___llmod@divisor+1)& (0+255),b
  6489  000886  0E00               	movlw	0
  6490  000888  6F93               	movwf	(___llmod@divisor+2)& (0+255),b
  6491  00088A  0E00               	movlw	0
  6492  00088C  6F94               	movwf	(___llmod@divisor+3)& (0+255),b
  6493  00088E  ECD6  F018         	call	___llmod	;wreg free
  6494  000892  0100               	movlb	0	; () banked
  6495  000894  518D               	movf	?___llmod& (0+255),w,b
  6496  000896  0F30               	addlw	48
  6497  000898  0100               	movlb	0	; () banked
  6498  00089A  6FF9               	movwf	printf@c& (0+255),b
  6499                           
  6500                           ;doprnt.c: 1491: break;
  6501  00089C  D044               	goto	l4458
  6502  00089E                     l4450:
  6503                           
  6504                           ; BSR set to: 0
  6505                           ;doprnt.c: 1499: {
  6506                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6507  00089E  C0F2  F080         	movff	printf@val,___lldiv@dividend
  6508  0008A2  C0F3  F081         	movff	printf@val+1,___lldiv@dividend+1
  6509  0008A6  C0F4  F082         	movff	printf@val+2,___lldiv@dividend+2
  6510  0008AA  C0F5  F083         	movff	printf@val+3,___lldiv@dividend+3
  6511  0008AE  C0EA  F0DC         	movff	printf@prec,??_printf
  6512  0008B2  C0EB  F0DD         	movff	printf@prec+1,??_printf+1
  6513  0008B6  0100               	movlb	0	; () banked
  6514  0008B8  90D8               	bcf	status,0,c
  6515  0008BA  37DC               	rlcf	??_printf& (0+255),f,b
  6516  0008BC  37DD               	rlcf	(??_printf+1)& (0+255),f,b
  6517  0008BE  0100               	movlb	0	; () banked
  6518  0008C0  90D8               	bcf	status,0,c
  6519  0008C2  37DC               	rlcf	??_printf& (0+255),f,b
  6520  0008C4  37DD               	rlcf	(??_printf+1)& (0+255),f,b
  6521  0008C6  0E49               	movlw	low _hexpowers
  6522  0008C8  0100               	movlb	0	; () banked
  6523  0008CA  25DC               	addwf	??_printf& (0+255),w,b
  6524  0008CC  6EF6               	movwf	tblptrl,c
  6525  0008CE  0EFE               	movlw	high _hexpowers
  6526  0008D0  21DD               	addwfc	(??_printf+1)& (0+255),w,b
  6527  0008D2  6EF7               	movwf	tblptrh,c
  6528  0008D4                     	if	0	;There are less than 3 active tblptr bytes
  6529  0008D4                     	endif
  6530  0008D4  0009               	tblrd		*+
  6531  0008D6  CFF5 F084          	movff	tablat,___lldiv@divisor
  6532  0008DA  0009               	tblrd		*+
  6533  0008DC  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  6534  0008E0  0009               	tblrd		*+
  6535  0008E2  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  6536  0008E6  000A               	tblrd		*-
  6537  0008E8  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  6538  0008EC  EC79  F016         	call	___lldiv	;wreg free
  6539  0008F0  0100               	movlb	0	; () banked
  6540  0008F2  5180               	movf	?___lldiv& (0+255),w,b
  6541  0008F4  0B0F               	andlw	15
  6542  0008F6  0100               	movlb	0	; () banked
  6543  0008F8  6FE5               	movwf	printf@idx& (0+255),b
  6544                           
  6545                           ; BSR set to: 0
  6546                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6547  0008FA  0100               	movlb	0	; () banked
  6548  0008FC  51E5               	movf	printf@idx& (0+255),w,b
  6549  0008FE  0D01               	mullw	1
  6550  000900  0E40               	movlw	low STR_23
  6551  000902  24F3               	addwf	prodl,w,c
  6552  000904  6EF6               	movwf	tblptrl,c
  6553  000906  0EFF               	movlw	high STR_23
  6554  000908  20F4               	addwfc	prodh,w,c
  6555  00090A  6EF7               	movwf	tblptrh,c
  6556  00090C                     	if	0	;There are less than 3 active tblptr bytes
  6557  00090C                     	endif
  6558  00090C  0008               	tblrd		*
  6559  00090E  CFF5 F0F9          	movff	tablat,printf@c
  6560                           
  6561                           ; BSR set to: 0
  6562                           ;doprnt.c: 1523: }
  6563                           
  6564                           ;doprnt.c: 1508: }
  6565                           ;doprnt.c: 1510: break;
  6566  000912  D009               	goto	l4458
  6567  000914                     l4456:
  6568                           
  6569                           ; BSR set to: 0
  6570  000914  0100               	movlb	0	; () banked
  6571  000916  51E8               	movf	printf@flag& (0+255),w,b
  6572  000918  0B80               	andlw	128
  6573                           
  6574                           ; Switch size 1, requested type "space"
  6575                           ; Number of cases is 2, Range of values is 0 to 128
  6576                           ; switch strategies available:
  6577                           ; Name         Instructions Cycles
  6578                           ; simple_byte            7     4 (average)
  6579                           ;	Chosen strategy is simple_byte
  6580  00091A  0A00               	xorlw	0	; case 0
  6581  00091C  B4D8               	btfsc	status,2,c
  6582  00091E  D77D               	goto	l4448
  6583  000920  0A80               	xorlw	128	; case 128
  6584  000922  B4D8               	btfsc	status,2,c
  6585  000924  D7BC               	goto	l4450
  6586  000926                     l4458:
  6587                           
  6588                           ; BSR set to: 0
  6589                           ;doprnt.c: 1524: (putch(c) );
  6590  000926  0100               	movlb	0	; () banked
  6591  000928  51F9               	movf	printf@c& (0+255),w,b
  6592  00092A  ECAC  F01C         	call	_putch
  6593  00092E                     l4460:
  6594  00092E  0100               	movlb	0	; () banked
  6595  000930  07EA               	decf	printf@prec& (0+255),f,b
  6596  000932  A0D8               	btfss	status,0,c
  6597  000934  07EB               	decf	(printf@prec+1)& (0+255),f,b
  6598  000936  0100               	movlb	0	; () banked
  6599  000938  29EA               	incf	printf@prec& (0+255),w,b
  6600  00093A  E1EC               	bnz	l4456
  6601  00093C  0100               	movlb	0	; () banked
  6602  00093E  29EB               	incf	(printf@prec+1)& (0+255),w,b
  6603  000940  A4D8               	btfss	status,2,c
  6604  000942  D7E8               	goto	l4456
  6605  000944                     l4462:
  6606  000944  C0D5  FFF6         	movff	printf@f,tblptrl
  6607  000948  C0D6  FFF7         	movff	printf@f+1,tblptrh
  6608  00094C  0100               	movlb	0	; () banked
  6609  00094E  4BD5               	infsnz	printf@f& (0+255),f,b
  6610  000950  2BD6               	incf	(printf@f+1)& (0+255),f,b
  6611  000952                     	if	0	;tblptru may be non-zero
  6612  000952                     	endif
  6613  000952                     	if	0	;tblptru may be non-zero
  6614  000952                     	endif
  6615  000952  0008               	tblrd		*
  6616  000954  CFF5 F0F9          	movff	tablat,printf@c
  6617  000958  0100               	movlb	0	; () banked
  6618  00095A  51F9               	movf	printf@c& (0+255),w,b
  6619  00095C  B4D8               	btfsc	status,2,c
  6620  00095E  0012               	return	
  6621  000960  EF11  F000         	goto	l4244
  6622  000964                     __end_of_printf:
  6623                           	opt stack 0
  6624                           tblptru	equ	0xFF8
  6625                           tblptrh	equ	0xFF7
  6626                           tblptrl	equ	0xFF6
  6627                           tablat	equ	0xFF5
  6628                           prodh	equ	0xFF4
  6629                           prodl	equ	0xFF3
  6630                           intcon	equ	0xFF2
  6631                           postinc0	equ	0xFEE
  6632                           wreg	equ	0xFE8
  6633                           postdec1	equ	0xFE5
  6634                           fsr1l	equ	0xFE1
  6635                           indf2	equ	0xFDF
  6636                           postinc2	equ	0xFDE
  6637                           postdec2	equ	0xFDD
  6638                           fsr2h	equ	0xFDA
  6639                           fsr2l	equ	0xFD9
  6640                           status	equ	0xFD8
  6641                           
  6642 ;; *************** function _scale *****************
  6643 ;; Defined at:
  6644 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6645 ;; Parameters:    Size  Location     Type
  6646 ;;  scl             1    wreg     char 
  6647 ;; Auto vars:     Size  Location     Type
  6648 ;;  scl             1   54[BANK0 ] char 
  6649 ;; Return value:  Size  Location     Type
  6650 ;;                  3   48[BANK0 ] char 
  6651 ;; Registers used:
  6652 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6653 ;; Tracked objects:
  6654 ;;		On entry : 0/0
  6655 ;;		On exit  : 0/0
  6656 ;;		Unchanged: 0/0
  6657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6658 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6659 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6661 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6662 ;;Total ram usage:        7 bytes
  6663 ;; Hardware stack levels used:    1
  6664 ;; Hardware stack levels required when called:    7
  6665 ;; This function calls:
  6666 ;;		___awdiv
  6667 ;;		___awmod
  6668 ;;		___ftmul
  6669 ;;		___wmul
  6670 ;; This function is called by:
  6671 ;;		_printf
  6672 ;; This function uses a non-reentrant model
  6673 ;;
  6674                           
  6675                           	psect	text24
  6676  000964                     __ptext24:
  6677                           	opt stack 0
  6678  000964                     _scale:
  6679                           	opt stack 21
  6680                           
  6681                           ; BSR set to: 0
  6682                           ;incstack = 0
  6683                           ;scale@scl stored from wreg
  6684  000964  0100               	movlb	0	; () banked
  6685  000966  6FB6               	movwf	scale@scl& (0+255),b
  6686                           
  6687                           ;doprnt.c: 428: if(scl < 0) {
  6688  000968  0100               	movlb	0	; () banked
  6689  00096A  AFB6               	btfss	scale@scl& (0+255),7,b
  6690  00096C  D12A               	goto	l3992
  6691                           
  6692                           ; BSR set to: 0
  6693                           ;doprnt.c: 429: scl = -scl;
  6694  00096E  0100               	movlb	0	; () banked
  6695  000970  6DB6               	negf	scale@scl& (0+255),b
  6696                           
  6697                           ;doprnt.c: 430: if(scl>=110)
  6698  000972  0100               	movlb	0	; () banked
  6699  000974  51B6               	movf	scale@scl& (0+255),w,b
  6700  000976  0A80               	xorlw	128
  6701  000978  0F12               	addlw	-238
  6702  00097A  A0D8               	btfss	status,0,c
  6703  00097C  D0AC               	goto	l3982
  6704                           
  6705                           ; BSR set to: 0
  6706                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6707  00097E  0E00               	movlw	0
  6708  000980  0100               	movlb	0	; () banked
  6709  000982  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6710  000984  0E03               	movlw	3
  6711  000986  6F90               	movwf	___wmul@multiplicand& (0+255),b
  6712  000988  0E00               	movlw	0
  6713  00098A  0100               	movlb	0	; () banked
  6714  00098C  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6715  00098E  0E0A               	movlw	10
  6716  000990  6F88               	movwf	___awdiv@divisor& (0+255),b
  6717  000992  0E00               	movlw	0
  6718  000994  0100               	movlb	0	; () banked
  6719  000996  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6720  000998  0E64               	movlw	100
  6721  00099A  6F82               	movwf	___awmod@divisor& (0+255),b
  6722  00099C  0100               	movlb	0	; () banked
  6723  00099E  51B6               	movf	scale@scl& (0+255),w,b
  6724  0009A0  0100               	movlb	0	; () banked
  6725  0009A2  6F80               	movwf	___awmod@dividend& (0+255),b
  6726  0009A4  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  6727  0009A6  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  6728  0009A8  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  6729  0009AA  EC36  F018         	call	___awmod	;wreg free
  6730  0009AE  C080  F086         	movff	?___awmod,___awdiv@dividend
  6731  0009B2  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6732  0009B6  EC1A  F016         	call	___awdiv	;wreg free
  6733  0009BA  0E09               	movlw	9
  6734  0009BC  0100               	movlb	0	; () banked
  6735  0009BE  2586               	addwf	?___awdiv& (0+255),w,b
  6736  0009C0  0100               	movlb	0	; () banked
  6737  0009C2  6F8E               	movwf	___wmul@multiplier& (0+255),b
  6738  0009C4  0E00               	movlw	0
  6739  0009C6  0100               	movlb	0	; () banked
  6740  0009C8  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  6741  0009CA  0100               	movlb	0	; () banked
  6742  0009CC  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  6743  0009CE  EC1F  F01C         	call	___wmul	;wreg free
  6744  0009D2  0EFB               	movlw	low __npowers_
  6745  0009D4  0100               	movlb	0	; () banked
  6746  0009D6  258E               	addwf	?___wmul& (0+255),w,b
  6747  0009D8  6EF6               	movwf	tblptrl,c
  6748  0009DA  0EFD               	movlw	high __npowers_
  6749  0009DC  0100               	movlb	0	; () banked
  6750  0009DE  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  6751  0009E0  6EF7               	movwf	tblptrh,c
  6752  0009E2                     	if	0	;There are less than 3 active tblptr bytes
  6753  0009E2                     	endif
  6754  0009E2  0009               	tblrd		*+
  6755  0009E4  CFF5 F0A4          	movff	tablat,___ftmul@f2
  6756  0009E8  0009               	tblrd		*+
  6757  0009EA  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  6758  0009EE  000A               	tblrd		*-
  6759  0009F0  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  6760  0009F4  0E00               	movlw	0
  6761  0009F6  0100               	movlb	0	; () banked
  6762  0009F8  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6763  0009FA  0E64               	movlw	100
  6764  0009FC  6F88               	movwf	___awdiv@divisor& (0+255),b
  6765  0009FE  0100               	movlb	0	; () banked
  6766  000A00  51B6               	movf	scale@scl& (0+255),w,b
  6767  000A02  0100               	movlb	0	; () banked
  6768  000A04  6F86               	movwf	___awdiv@dividend& (0+255),b
  6769  000A06  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  6770  000A08  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  6771  000A0A  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  6772  000A0C  EC1A  F016         	call	___awdiv	;wreg free
  6773  000A10  0E12               	movlw	18
  6774  000A12  0100               	movlb	0	; () banked
  6775  000A14  2586               	addwf	?___awdiv& (0+255),w,b
  6776  000A16  0100               	movlb	0	; () banked
  6777  000A18  6F8E               	movwf	___wmul@multiplier& (0+255),b
  6778  000A1A  0E00               	movlw	0
  6779  000A1C  0100               	movlb	0	; () banked
  6780  000A1E  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  6781  000A20  0100               	movlb	0	; () banked
  6782  000A22  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  6783  000A24  0E00               	movlw	0
  6784  000A26  0100               	movlb	0	; () banked
  6785  000A28  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6786  000A2A  0E03               	movlw	3
  6787  000A2C  6F90               	movwf	___wmul@multiplicand& (0+255),b
  6788  000A2E  EC1F  F01C         	call	___wmul	;wreg free
  6789  000A32  0EFB               	movlw	low __npowers_
  6790  000A34  0100               	movlb	0	; () banked
  6791  000A36  258E               	addwf	?___wmul& (0+255),w,b
  6792  000A38  6EF6               	movwf	tblptrl,c
  6793  000A3A  0EFD               	movlw	high __npowers_
  6794  000A3C  0100               	movlb	0	; () banked
  6795  000A3E  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  6796  000A40  6EF7               	movwf	tblptrh,c
  6797  000A42                     	if	0	;There are less than 3 active tblptr bytes
  6798  000A42                     	endif
  6799  000A42  0009               	tblrd		*+
  6800  000A44  CFF5 F0A1          	movff	tablat,___ftmul@f1
  6801  000A48  0009               	tblrd		*+
  6802  000A4A  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  6803  000A4E  000A               	tblrd		*-
  6804  000A50  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  6805  000A54  EC2E  F00F         	call	___ftmul	;wreg free
  6806  000A58  C0A1  F0B3         	movff	?___ftmul,_scale$1299
  6807  000A5C  C0A2  F0B4         	movff	?___ftmul+1,_scale$1299+1
  6808  000A60  C0A3  F0B5         	movff	?___ftmul+2,_scale$1299+2
  6809                           
  6810                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6811  000A64  C0B3  F0A1         	movff	_scale$1299,___ftmul@f1
  6812  000A68  C0B4  F0A2         	movff	_scale$1299+1,___ftmul@f1+1
  6813  000A6C  C0B5  F0A3         	movff	_scale$1299+2,___ftmul@f1+2
  6814  000A70  0E00               	movlw	0
  6815  000A72  0100               	movlb	0	; () banked
  6816  000A74  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6817  000A76  0E03               	movlw	3
  6818  000A78  6F90               	movwf	___wmul@multiplicand& (0+255),b
  6819  000A7A  0E00               	movlw	0
  6820  000A7C  0100               	movlb	0	; () banked
  6821  000A7E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6822  000A80  0E0A               	movlw	10
  6823  000A82  6F82               	movwf	___awmod@divisor& (0+255),b
  6824  000A84  0100               	movlb	0	; () banked
  6825  000A86  51B6               	movf	scale@scl& (0+255),w,b
  6826  000A88  0100               	movlb	0	; () banked
  6827  000A8A  6F80               	movwf	___awmod@dividend& (0+255),b
  6828  000A8C  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  6829  000A8E  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  6830  000A90  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  6831  000A92  EC36  F018         	call	___awmod	;wreg free
  6832  000A96  C080  F08E         	movff	?___awmod,___wmul@multiplier
  6833  000A9A  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  6834  000A9E  EC1F  F01C         	call	___wmul	;wreg free
  6835  000AA2  0EFB               	movlw	low __npowers_
  6836  000AA4  0100               	movlb	0	; () banked
  6837  000AA6  258E               	addwf	?___wmul& (0+255),w,b
  6838  000AA8  6EF6               	movwf	tblptrl,c
  6839  000AAA  0EFD               	movlw	high __npowers_
  6840  000AAC  0100               	movlb	0	; () banked
  6841  000AAE  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  6842  000AB0  6EF7               	movwf	tblptrh,c
  6843  000AB2                     	if	0	;There are less than 3 active tblptr bytes
  6844  000AB2                     	endif
  6845  000AB2  0009               	tblrd		*+
  6846  000AB4  CFF5 F0A4          	movff	tablat,___ftmul@f2
  6847  000AB8  0009               	tblrd		*+
  6848  000ABA  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  6849  000ABE  000A               	tblrd		*-
  6850  000AC0  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  6851  000AC4  EC2E  F00F         	call	___ftmul	;wreg free
  6852  000AC8  C0A1  F0B0         	movff	?___ftmul,?_scale
  6853  000ACC  C0A2  F0B1         	movff	?___ftmul+1,?_scale+1
  6854  000AD0  C0A3  F0B2         	movff	?___ftmul+2,?_scale+2
  6855  000AD4  0012               	return	
  6856  000AD6                     l3982:
  6857                           
  6858                           ;doprnt.c: 432: else if(scl > 10)
  6859  000AD6  0100               	movlb	0	; () banked
  6860  000AD8  51B6               	movf	scale@scl& (0+255),w,b
  6861  000ADA  0A80               	xorlw	128
  6862  000ADC  0F75               	addlw	-139
  6863  000ADE  A0D8               	btfss	status,0,c
  6864  000AE0  D05D               	goto	l3988
  6865                           
  6866                           ; BSR set to: 0
  6867                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6868  000AE2  0E00               	movlw	0
  6869  000AE4  0100               	movlb	0	; () banked
  6870  000AE6  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6871  000AE8  0E0A               	movlw	10
  6872  000AEA  6F88               	movwf	___awdiv@divisor& (0+255),b
  6873  000AEC  0100               	movlb	0	; () banked
  6874  000AEE  51B6               	movf	scale@scl& (0+255),w,b
  6875  000AF0  0100               	movlb	0	; () banked
  6876  000AF2  6F86               	movwf	___awdiv@dividend& (0+255),b
  6877  000AF4  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  6878  000AF6  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  6879  000AF8  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  6880  000AFA  EC1A  F016         	call	___awdiv	;wreg free
  6881  000AFE  0E09               	movlw	9
  6882  000B00  0100               	movlb	0	; () banked
  6883  000B02  2586               	addwf	?___awdiv& (0+255),w,b
  6884  000B04  0100               	movlb	0	; () banked
  6885  000B06  6F8E               	movwf	___wmul@multiplier& (0+255),b
  6886  000B08  0E00               	movlw	0
  6887  000B0A  0100               	movlb	0	; () banked
  6888  000B0C  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  6889  000B0E  0100               	movlb	0	; () banked
  6890  000B10  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  6891  000B12  0E00               	movlw	0
  6892  000B14  0100               	movlb	0	; () banked
  6893  000B16  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6894  000B18  0E03               	movlw	3
  6895  000B1A  6F90               	movwf	___wmul@multiplicand& (0+255),b
  6896  000B1C  EC1F  F01C         	call	___wmul	;wreg free
  6897  000B20  0EFB               	movlw	low __npowers_
  6898  000B22  0100               	movlb	0	; () banked
  6899  000B24  258E               	addwf	?___wmul& (0+255),w,b
  6900  000B26  6EF6               	movwf	tblptrl,c
  6901  000B28  0EFD               	movlw	high __npowers_
  6902  000B2A  0100               	movlb	0	; () banked
  6903  000B2C  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  6904  000B2E  6EF7               	movwf	tblptrh,c
  6905  000B30                     	if	0	;There are less than 3 active tblptr bytes
  6906  000B30                     	endif
  6907  000B30  0009               	tblrd		*+
  6908  000B32  CFF5 F0A1          	movff	tablat,___ftmul@f1
  6909  000B36  0009               	tblrd		*+
  6910  000B38  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  6911  000B3C  000A               	tblrd		*-
  6912  000B3E  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  6913  000B42  0E00               	movlw	0
  6914  000B44  0100               	movlb	0	; () banked
  6915  000B46  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6916  000B48  0E03               	movlw	3
  6917  000B4A  6F90               	movwf	___wmul@multiplicand& (0+255),b
  6918  000B4C  0E00               	movlw	0
  6919  000B4E  0100               	movlb	0	; () banked
  6920  000B50  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6921  000B52  0E0A               	movlw	10
  6922  000B54  6F82               	movwf	___awmod@divisor& (0+255),b
  6923  000B56  0100               	movlb	0	; () banked
  6924  000B58  51B6               	movf	scale@scl& (0+255),w,b
  6925  000B5A  0100               	movlb	0	; () banked
  6926  000B5C  6F80               	movwf	___awmod@dividend& (0+255),b
  6927  000B5E  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  6928  000B60  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  6929  000B62  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  6930  000B64  EC36  F018         	call	___awmod	;wreg free
  6931  000B68  C080  F08E         	movff	?___awmod,___wmul@multiplier
  6932  000B6C  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  6933  000B70  EC1F  F01C         	call	___wmul	;wreg free
  6934  000B74  0EFB               	movlw	low __npowers_
  6935  000B76  0100               	movlb	0	; () banked
  6936  000B78  258E               	addwf	?___wmul& (0+255),w,b
  6937  000B7A  6EF6               	movwf	tblptrl,c
  6938  000B7C  0EFD               	movlw	high __npowers_
  6939  000B7E  0100               	movlb	0	; () banked
  6940  000B80  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  6941  000B82  6EF7               	movwf	tblptrh,c
  6942  000B84                     	if	0	;There are less than 3 active tblptr bytes
  6943  000B84                     	endif
  6944  000B84  0009               	tblrd		*+
  6945  000B86  CFF5 F0A4          	movff	tablat,___ftmul@f2
  6946  000B8A  0009               	tblrd		*+
  6947  000B8C  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  6948  000B90  000A               	tblrd		*-
  6949  000B92  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  6950  000B96  EC2E  F00F         	call	___ftmul	;wreg free
  6951  000B9A  D796               	goto	L2
  6952  000B9C                     l3988:
  6953                           
  6954                           ;doprnt.c: 434: return _npowers_[scl];
  6955  000B9C  0100               	movlb	0	; () banked
  6956  000B9E  51B6               	movf	scale@scl& (0+255),w,b
  6957  000BA0  0D03               	mullw	3
  6958  000BA2  0EFB               	movlw	low __npowers_
  6959  000BA4  24F3               	addwf	prodl,w,c
  6960  000BA6  6EF6               	movwf	tblptrl,c
  6961  000BA8  0EFD               	movlw	high __npowers_
  6962  000BAA  20F4               	addwfc	prodh,w,c
  6963  000BAC  6EF7               	movwf	tblptrh,c
  6964  000BAE                     	if	0	;There are less than 3 active tblptr bytes
  6965  000BAE                     	endif
  6966  000BAE  0009               	tblrd		*+
  6967  000BB0  CFF5 F0B0          	movff	tablat,?_scale
  6968  000BB4  0009               	tblrd		*+
  6969  000BB6  CFF5 F0B1          	movff	tablat,?_scale+1
  6970  000BBA  000A               	tblrd		*-
  6971  000BBC  CFF5 F0B2          	movff	tablat,?_scale+2
  6972                           
  6973                           ; BSR set to: 0
  6974  000BC0  0012               	return	
  6975  000BC2                     l3992:
  6976                           
  6977                           ; BSR set to: 0
  6978                           ;doprnt.c: 435: }
  6979                           ;doprnt.c: 436: if(scl>=110)
  6980  000BC2  0100               	movlb	0	; () banked
  6981  000BC4  51B6               	movf	scale@scl& (0+255),w,b
  6982  000BC6  0A80               	xorlw	128
  6983  000BC8  0F12               	addlw	-238
  6984  000BCA  A0D8               	btfss	status,0,c
  6985  000BCC  D0AC               	goto	l4000
  6986                           
  6987                           ; BSR set to: 0
  6988                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6989  000BCE  0E00               	movlw	0
  6990  000BD0  0100               	movlb	0	; () banked
  6991  000BD2  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6992  000BD4  0E03               	movlw	3
  6993  000BD6  6F90               	movwf	___wmul@multiplicand& (0+255),b
  6994  000BD8  0E00               	movlw	0
  6995  000BDA  0100               	movlb	0	; () banked
  6996  000BDC  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6997  000BDE  0E0A               	movlw	10
  6998  000BE0  6F88               	movwf	___awdiv@divisor& (0+255),b
  6999  000BE2  0E00               	movlw	0
  7000  000BE4  0100               	movlb	0	; () banked
  7001  000BE6  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7002  000BE8  0E64               	movlw	100
  7003  000BEA  6F82               	movwf	___awmod@divisor& (0+255),b
  7004  000BEC  0100               	movlb	0	; () banked
  7005  000BEE  51B6               	movf	scale@scl& (0+255),w,b
  7006  000BF0  0100               	movlb	0	; () banked
  7007  000BF2  6F80               	movwf	___awmod@dividend& (0+255),b
  7008  000BF4  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  7009  000BF6  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  7010  000BF8  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  7011  000BFA  EC36  F018         	call	___awmod	;wreg free
  7012  000BFE  C080  F086         	movff	?___awmod,___awdiv@dividend
  7013  000C02  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7014  000C06  EC1A  F016         	call	___awdiv	;wreg free
  7015  000C0A  0E09               	movlw	9
  7016  000C0C  0100               	movlb	0	; () banked
  7017  000C0E  2586               	addwf	?___awdiv& (0+255),w,b
  7018  000C10  0100               	movlb	0	; () banked
  7019  000C12  6F8E               	movwf	___wmul@multiplier& (0+255),b
  7020  000C14  0E00               	movlw	0
  7021  000C16  0100               	movlb	0	; () banked
  7022  000C18  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  7023  000C1A  0100               	movlb	0	; () banked
  7024  000C1C  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7025  000C1E  EC1F  F01C         	call	___wmul	;wreg free
  7026  000C22  0E22               	movlw	low __powers_
  7027  000C24  0100               	movlb	0	; () banked
  7028  000C26  258E               	addwf	?___wmul& (0+255),w,b
  7029  000C28  6EF6               	movwf	tblptrl,c
  7030  000C2A  0EFE               	movlw	high __powers_
  7031  000C2C  0100               	movlb	0	; () banked
  7032  000C2E  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7033  000C30  6EF7               	movwf	tblptrh,c
  7034  000C32                     	if	0	;There are less than 3 active tblptr bytes
  7035  000C32                     	endif
  7036  000C32  0009               	tblrd		*+
  7037  000C34  CFF5 F0A4          	movff	tablat,___ftmul@f2
  7038  000C38  0009               	tblrd		*+
  7039  000C3A  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  7040  000C3E  000A               	tblrd		*-
  7041  000C40  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  7042  000C44  0E00               	movlw	0
  7043  000C46  0100               	movlb	0	; () banked
  7044  000C48  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7045  000C4A  0E64               	movlw	100
  7046  000C4C  6F88               	movwf	___awdiv@divisor& (0+255),b
  7047  000C4E  0100               	movlb	0	; () banked
  7048  000C50  51B6               	movf	scale@scl& (0+255),w,b
  7049  000C52  0100               	movlb	0	; () banked
  7050  000C54  6F86               	movwf	___awdiv@dividend& (0+255),b
  7051  000C56  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  7052  000C58  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  7053  000C5A  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7054  000C5C  EC1A  F016         	call	___awdiv	;wreg free
  7055  000C60  0E12               	movlw	18
  7056  000C62  0100               	movlb	0	; () banked
  7057  000C64  2586               	addwf	?___awdiv& (0+255),w,b
  7058  000C66  0100               	movlb	0	; () banked
  7059  000C68  6F8E               	movwf	___wmul@multiplier& (0+255),b
  7060  000C6A  0E00               	movlw	0
  7061  000C6C  0100               	movlb	0	; () banked
  7062  000C6E  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  7063  000C70  0100               	movlb	0	; () banked
  7064  000C72  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7065  000C74  0E00               	movlw	0
  7066  000C76  0100               	movlb	0	; () banked
  7067  000C78  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7068  000C7A  0E03               	movlw	3
  7069  000C7C  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7070  000C7E  EC1F  F01C         	call	___wmul	;wreg free
  7071  000C82  0E22               	movlw	low __powers_
  7072  000C84  0100               	movlb	0	; () banked
  7073  000C86  258E               	addwf	?___wmul& (0+255),w,b
  7074  000C88  6EF6               	movwf	tblptrl,c
  7075  000C8A  0EFE               	movlw	high __powers_
  7076  000C8C  0100               	movlb	0	; () banked
  7077  000C8E  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7078  000C90  6EF7               	movwf	tblptrh,c
  7079  000C92                     	if	0	;There are less than 3 active tblptr bytes
  7080  000C92                     	endif
  7081  000C92  0009               	tblrd		*+
  7082  000C94  CFF5 F0A1          	movff	tablat,___ftmul@f1
  7083  000C98  0009               	tblrd		*+
  7084  000C9A  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  7085  000C9E  000A               	tblrd		*-
  7086  000CA0  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  7087  000CA4  EC2E  F00F         	call	___ftmul	;wreg free
  7088  000CA8  C0A1  F0B3         	movff	?___ftmul,_scale$1299
  7089  000CAC  C0A2  F0B4         	movff	?___ftmul+1,_scale$1299+1
  7090  000CB0  C0A3  F0B5         	movff	?___ftmul+2,_scale$1299+2
  7091                           
  7092                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7093  000CB4  C0B3  F0A1         	movff	_scale$1299,___ftmul@f1
  7094  000CB8  C0B4  F0A2         	movff	_scale$1299+1,___ftmul@f1+1
  7095  000CBC  C0B5  F0A3         	movff	_scale$1299+2,___ftmul@f1+2
  7096  000CC0  0E00               	movlw	0
  7097  000CC2  0100               	movlb	0	; () banked
  7098  000CC4  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7099  000CC6  0E03               	movlw	3
  7100  000CC8  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7101  000CCA  0E00               	movlw	0
  7102  000CCC  0100               	movlb	0	; () banked
  7103  000CCE  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7104  000CD0  0E0A               	movlw	10
  7105  000CD2  6F82               	movwf	___awmod@divisor& (0+255),b
  7106  000CD4  0100               	movlb	0	; () banked
  7107  000CD6  51B6               	movf	scale@scl& (0+255),w,b
  7108  000CD8  0100               	movlb	0	; () banked
  7109  000CDA  6F80               	movwf	___awmod@dividend& (0+255),b
  7110  000CDC  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  7111  000CDE  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  7112  000CE0  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  7113  000CE2  EC36  F018         	call	___awmod	;wreg free
  7114  000CE6  C080  F08E         	movff	?___awmod,___wmul@multiplier
  7115  000CEA  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  7116  000CEE  EC1F  F01C         	call	___wmul	;wreg free
  7117  000CF2  0E22               	movlw	low __powers_
  7118  000CF4  0100               	movlb	0	; () banked
  7119  000CF6  258E               	addwf	?___wmul& (0+255),w,b
  7120  000CF8  6EF6               	movwf	tblptrl,c
  7121  000CFA  0EFE               	movlw	high __powers_
  7122  000CFC  0100               	movlb	0	; () banked
  7123  000CFE  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7124  000D00  6EF7               	movwf	tblptrh,c
  7125  000D02                     	if	0	;There are less than 3 active tblptr bytes
  7126  000D02                     	endif
  7127  000D02  0009               	tblrd		*+
  7128  000D04  CFF5 F0A4          	movff	tablat,___ftmul@f2
  7129  000D08  0009               	tblrd		*+
  7130  000D0A  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  7131  000D0E  000A               	tblrd		*-
  7132  000D10  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  7133  000D14  EC2E  F00F         	call	___ftmul	;wreg free
  7134  000D18  C0A1  F0B0         	movff	?___ftmul,?_scale
  7135  000D1C  C0A2  F0B1         	movff	?___ftmul+1,?_scale+1
  7136  000D20  C0A3  F0B2         	movff	?___ftmul+2,?_scale+2
  7137  000D24  0012               	return	
  7138  000D26                     l4000:
  7139                           
  7140                           ;doprnt.c: 438: else if(scl > 10)
  7141  000D26  0100               	movlb	0	; () banked
  7142  000D28  51B6               	movf	scale@scl& (0+255),w,b
  7143  000D2A  0A80               	xorlw	128
  7144  000D2C  0F75               	addlw	-139
  7145  000D2E  A0D8               	btfss	status,0,c
  7146  000D30  D05D               	goto	l4006
  7147                           
  7148                           ; BSR set to: 0
  7149                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  7150  000D32  0E00               	movlw	0
  7151  000D34  0100               	movlb	0	; () banked
  7152  000D36  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7153  000D38  0E0A               	movlw	10
  7154  000D3A  6F88               	movwf	___awdiv@divisor& (0+255),b
  7155  000D3C  0100               	movlb	0	; () banked
  7156  000D3E  51B6               	movf	scale@scl& (0+255),w,b
  7157  000D40  0100               	movlb	0	; () banked
  7158  000D42  6F86               	movwf	___awdiv@dividend& (0+255),b
  7159  000D44  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  7160  000D46  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  7161  000D48  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7162  000D4A  EC1A  F016         	call	___awdiv	;wreg free
  7163  000D4E  0E09               	movlw	9
  7164  000D50  0100               	movlb	0	; () banked
  7165  000D52  2586               	addwf	?___awdiv& (0+255),w,b
  7166  000D54  0100               	movlb	0	; () banked
  7167  000D56  6F8E               	movwf	___wmul@multiplier& (0+255),b
  7168  000D58  0E00               	movlw	0
  7169  000D5A  0100               	movlb	0	; () banked
  7170  000D5C  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  7171  000D5E  0100               	movlb	0	; () banked
  7172  000D60  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7173  000D62  0E00               	movlw	0
  7174  000D64  0100               	movlb	0	; () banked
  7175  000D66  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7176  000D68  0E03               	movlw	3
  7177  000D6A  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7178  000D6C  EC1F  F01C         	call	___wmul	;wreg free
  7179  000D70  0E22               	movlw	low __powers_
  7180  000D72  0100               	movlb	0	; () banked
  7181  000D74  258E               	addwf	?___wmul& (0+255),w,b
  7182  000D76  6EF6               	movwf	tblptrl,c
  7183  000D78  0EFE               	movlw	high __powers_
  7184  000D7A  0100               	movlb	0	; () banked
  7185  000D7C  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7186  000D7E  6EF7               	movwf	tblptrh,c
  7187  000D80                     	if	0	;There are less than 3 active tblptr bytes
  7188  000D80                     	endif
  7189  000D80  0009               	tblrd		*+
  7190  000D82  CFF5 F0A1          	movff	tablat,___ftmul@f1
  7191  000D86  0009               	tblrd		*+
  7192  000D88  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  7193  000D8C  000A               	tblrd		*-
  7194  000D8E  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  7195  000D92  0E00               	movlw	0
  7196  000D94  0100               	movlb	0	; () banked
  7197  000D96  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7198  000D98  0E03               	movlw	3
  7199  000D9A  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7200  000D9C  0E00               	movlw	0
  7201  000D9E  0100               	movlb	0	; () banked
  7202  000DA0  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7203  000DA2  0E0A               	movlw	10
  7204  000DA4  6F82               	movwf	___awmod@divisor& (0+255),b
  7205  000DA6  0100               	movlb	0	; () banked
  7206  000DA8  51B6               	movf	scale@scl& (0+255),w,b
  7207  000DAA  0100               	movlb	0	; () banked
  7208  000DAC  6F80               	movwf	___awmod@dividend& (0+255),b
  7209  000DAE  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  7210  000DB0  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  7211  000DB2  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  7212  000DB4  EC36  F018         	call	___awmod	;wreg free
  7213  000DB8  C080  F08E         	movff	?___awmod,___wmul@multiplier
  7214  000DBC  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  7215  000DC0  EC1F  F01C         	call	___wmul	;wreg free
  7216  000DC4  0E22               	movlw	low __powers_
  7217  000DC6  0100               	movlb	0	; () banked
  7218  000DC8  258E               	addwf	?___wmul& (0+255),w,b
  7219  000DCA  6EF6               	movwf	tblptrl,c
  7220  000DCC  0EFE               	movlw	high __powers_
  7221  000DCE  0100               	movlb	0	; () banked
  7222  000DD0  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7223  000DD2  6EF7               	movwf	tblptrh,c
  7224  000DD4                     	if	0	;There are less than 3 active tblptr bytes
  7225  000DD4                     	endif
  7226  000DD4  0009               	tblrd		*+
  7227  000DD6  CFF5 F0A4          	movff	tablat,___ftmul@f2
  7228  000DDA  0009               	tblrd		*+
  7229  000DDC  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  7230  000DE0  000A               	tblrd		*-
  7231  000DE2  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  7232  000DE6  EC2E  F00F         	call	___ftmul	;wreg free
  7233  000DEA  D796               	goto	L3
  7234  000DEC                     l4006:
  7235                           
  7236                           ;doprnt.c: 440: return _powers_[scl];
  7237  000DEC  0100               	movlb	0	; () banked
  7238  000DEE  51B6               	movf	scale@scl& (0+255),w,b
  7239  000DF0  0D03               	mullw	3
  7240  000DF2  0E22               	movlw	low __powers_
  7241  000DF4  24F3               	addwf	prodl,w,c
  7242  000DF6  6EF6               	movwf	tblptrl,c
  7243  000DF8  0EFE               	movlw	high __powers_
  7244  000DFA  20F4               	addwfc	prodh,w,c
  7245  000DFC  6EF7               	movwf	tblptrh,c
  7246  000DFE                     	if	0	;There are less than 3 active tblptr bytes
  7247  000DFE                     	endif
  7248  000DFE  0009               	tblrd		*+
  7249  000E00  CFF5 F0B0          	movff	tablat,?_scale
  7250  000E04  0009               	tblrd		*+
  7251  000E06  CFF5 F0B1          	movff	tablat,?_scale+1
  7252  000E0A  000A               	tblrd		*-
  7253  000E0C  CFF5 F0B2          	movff	tablat,?_scale+2
  7254  000E10  0012               	return	
  7255  000E12                     __end_of_scale:
  7256                           	opt stack 0
  7257                           tblptru	equ	0xFF8
  7258                           tblptrh	equ	0xFF7
  7259                           tblptrl	equ	0xFF6
  7260                           tablat	equ	0xFF5
  7261                           prodh	equ	0xFF4
  7262                           prodl	equ	0xFF3
  7263                           intcon	equ	0xFF2
  7264                           postinc0	equ	0xFEE
  7265                           wreg	equ	0xFE8
  7266                           postdec1	equ	0xFE5
  7267                           fsr1l	equ	0xFE1
  7268                           indf2	equ	0xFDF
  7269                           postinc2	equ	0xFDE
  7270                           postdec2	equ	0xFDD
  7271                           fsr2h	equ	0xFDA
  7272                           fsr2l	equ	0xFD9
  7273                           status	equ	0xFD8
  7274                           
  7275 ;; *************** function _putch *****************
  7276 ;; Defined at:
  7277 ;;		line 35 in file "lcd.c"
  7278 ;; Parameters:    Size  Location     Type
  7279 ;;  data            1    wreg     unsigned char 
  7280 ;; Auto vars:     Size  Location     Type
  7281 ;;  data            1    4[BANK0 ] unsigned char 
  7282 ;; Return value:  Size  Location     Type
  7283 ;;                  1    wreg      void 
  7284 ;; Registers used:
  7285 ;;		wreg, status,2, status,0, cstack
  7286 ;; Tracked objects:
  7287 ;;		On entry : 0/0
  7288 ;;		On exit  : 0/0
  7289 ;;		Unchanged: 0/0
  7290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7292 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7294 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7295 ;;Total ram usage:        1 bytes
  7296 ;; Hardware stack levels used:    1
  7297 ;; Hardware stack levels required when called:    8
  7298 ;; This function calls:
  7299 ;;		_lcdNewline
  7300 ;;		_lcdNibble
  7301 ;; This function is called by:
  7302 ;;		_printf
  7303 ;; This function uses a non-reentrant model
  7304 ;;
  7305                           
  7306                           	psect	text25
  7307  003958                     __ptext25:
  7308                           	opt stack 0
  7309  003958                     _putch:
  7310                           	opt stack 20
  7311                           
  7312                           ;incstack = 0
  7313                           ;putch@data stored from wreg
  7314  003958  0100               	movlb	0	; () banked
  7315  00395A  6F84               	movwf	putch@data& (0+255),b
  7316                           
  7317                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  7318  00395C  0E0A               	movlw	10
  7319  00395E  0100               	movlb	0	; () banked
  7320  003960  1984               	xorwf	putch@data& (0+255),w,b
  7321  003962  A4D8               	btfss	status,2,c
  7322  003964  D003               	goto	l233
  7323                           
  7324                           ; BSR set to: 0
  7325  003966  EC2A  F01D         	call	_lcdNewline	;wreg free
  7326  00396A  0012               	return	
  7327  00396C                     l233:
  7328                           
  7329                           ; BSR set to: 0
  7330                           ;lcd.c: 37: else
  7331                           ;lcd.c: 38: {
  7332                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  7333  00396C  848C               	bsf	3980,2,c	;volatile
  7334                           
  7335                           ; BSR set to: 0
  7336                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  7337  00396E  0E74               	movlw	116
  7338  003970                     u5377:
  7339  003970  2EE8               	decfsz	wreg,f,c
  7340  003972  D7FE               	bra	u5377
  7341  003974  D000               	nop2	
  7342                           
  7343                           ;lcd.c: 41: lcdNibble(data);
  7344  003976  0100               	movlb	0	; () banked
  7345  003978  5184               	movf	putch@data& (0+255),w,b
  7346  00397A  ECE9  F019         	call	_lcdNibble
  7347  00397E  0012               	return	
  7348  003980                     __end_of_putch:
  7349                           	opt stack 0
  7350                           tblptru	equ	0xFF8
  7351                           tblptrh	equ	0xFF7
  7352                           tblptrl	equ	0xFF6
  7353                           tablat	equ	0xFF5
  7354                           prodh	equ	0xFF4
  7355                           prodl	equ	0xFF3
  7356                           intcon	equ	0xFF2
  7357                           postinc0	equ	0xFEE
  7358                           wreg	equ	0xFE8
  7359                           postdec1	equ	0xFE5
  7360                           fsr1l	equ	0xFE1
  7361                           indf2	equ	0xFDF
  7362                           postinc2	equ	0xFDE
  7363                           postdec2	equ	0xFDD
  7364                           fsr2h	equ	0xFDA
  7365                           fsr2l	equ	0xFD9
  7366                           status	equ	0xFD8
  7367                           
  7368 ;; *************** function _lcdNewline *****************
  7369 ;; Defined at:
  7370 ;;		line 78 in file "lcd.c"
  7371 ;; Parameters:    Size  Location     Type
  7372 ;;		None
  7373 ;; Auto vars:     Size  Location     Type
  7374 ;;		None
  7375 ;; Return value:  Size  Location     Type
  7376 ;;                  1    wreg      void 
  7377 ;; Registers used:
  7378 ;;		wreg, status,2, status,0, cstack
  7379 ;; Tracked objects:
  7380 ;;		On entry : 0/0
  7381 ;;		On exit  : 0/0
  7382 ;;		Unchanged: 0/0
  7383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7387 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7388 ;;Total ram usage:        0 bytes
  7389 ;; Hardware stack levels used:    1
  7390 ;; Hardware stack levels required when called:    7
  7391 ;; This function calls:
  7392 ;;		_lcdInst
  7393 ;; This function is called by:
  7394 ;;		_putch
  7395 ;; This function uses a non-reentrant model
  7396 ;;
  7397                           
  7398                           	psect	text26
  7399  003A54                     __ptext26:
  7400                           	opt stack 0
  7401  003A54                     _lcdNewline:
  7402                           	opt stack 20
  7403                           
  7404                           ;lcd.c: 79: lcdInst(0b11000000);
  7405                           
  7406                           ;incstack = 0
  7407  003A54  0EC0               	movlw	192
  7408  003A56  EC97  F01C         	call	_lcdInst
  7409  003A5A  0012               	return		;funcret
  7410  003A5C                     __end_of_lcdNewline:
  7411                           	opt stack 0
  7412                           tblptru	equ	0xFF8
  7413                           tblptrh	equ	0xFF7
  7414                           tblptrl	equ	0xFF6
  7415                           tablat	equ	0xFF5
  7416                           prodh	equ	0xFF4
  7417                           prodl	equ	0xFF3
  7418                           intcon	equ	0xFF2
  7419                           postinc0	equ	0xFEE
  7420                           wreg	equ	0xFE8
  7421                           postdec1	equ	0xFE5
  7422                           fsr1l	equ	0xFE1
  7423                           indf2	equ	0xFDF
  7424                           postinc2	equ	0xFDE
  7425                           postdec2	equ	0xFDD
  7426                           fsr2h	equ	0xFDA
  7427                           fsr2l	equ	0xFD9
  7428                           status	equ	0xFD8
  7429                           
  7430 ;; *************** function _fround *****************
  7431 ;; Defined at:
  7432 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7433 ;; Parameters:    Size  Location     Type
  7434 ;;  prec            1    wreg     unsigned char 
  7435 ;; Auto vars:     Size  Location     Type
  7436 ;;  prec            1   57[BANK0 ] unsigned char 
  7437 ;; Return value:  Size  Location     Type
  7438 ;;                  3   48[BANK0 ] unsigned char 
  7439 ;; Registers used:
  7440 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7441 ;; Tracked objects:
  7442 ;;		On entry : 0/0
  7443 ;;		On exit  : 0/0
  7444 ;;		Unchanged: 0/0
  7445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7446 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7447 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7449 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7450 ;;Total ram usage:       10 bytes
  7451 ;; Hardware stack levels used:    1
  7452 ;; Hardware stack levels required when called:    7
  7453 ;; This function calls:
  7454 ;;		___awdiv
  7455 ;;		___awmod
  7456 ;;		___ftmul
  7457 ;;		___wmul
  7458 ;; This function is called by:
  7459 ;;		_printf
  7460 ;; This function uses a non-reentrant model
  7461 ;;
  7462                           
  7463                           	psect	text27
  7464  00113C                     __ptext27:
  7465                           	opt stack 0
  7466  00113C                     _fround:
  7467                           	opt stack 21
  7468                           
  7469                           ;incstack = 0
  7470                           ;fround@prec stored from wreg
  7471  00113C  0100               	movlb	0	; () banked
  7472  00113E  6FB9               	movwf	fround@prec& (0+255),b
  7473                           
  7474                           ;doprnt.c: 413: if(prec>=110)
  7475  001140  0E6D               	movlw	109
  7476  001142  0100               	movlb	0	; () banked
  7477  001144  65B9               	cpfsgt	fround@prec& (0+255),b
  7478  001146  D0BA               	goto	l3960
  7479                           
  7480                           ; BSR set to: 0
  7481                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7482  001148  0E00               	movlw	0
  7483  00114A  0100               	movlb	0	; () banked
  7484  00114C  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7485  00114E  0E03               	movlw	3
  7486  001150  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7487  001152  0E00               	movlw	0
  7488  001154  0100               	movlb	0	; () banked
  7489  001156  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7490  001158  0E0A               	movlw	10
  7491  00115A  6F88               	movwf	___awdiv@divisor& (0+255),b
  7492  00115C  0E00               	movlw	0
  7493  00115E  0100               	movlb	0	; () banked
  7494  001160  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7495  001162  0E64               	movlw	100
  7496  001164  6F82               	movwf	___awmod@divisor& (0+255),b
  7497  001166  C0B9  F080         	movff	fround@prec,___awmod@dividend
  7498  00116A  0100               	movlb	0	; () banked
  7499  00116C  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  7500  00116E  EC36  F018         	call	___awmod	;wreg free
  7501  001172  C080  F086         	movff	?___awmod,___awdiv@dividend
  7502  001176  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7503  00117A  EC1A  F016         	call	___awdiv	;wreg free
  7504  00117E  0E09               	movlw	9
  7505  001180  0100               	movlb	0	; () banked
  7506  001182  2586               	addwf	?___awdiv& (0+255),w,b
  7507  001184  0100               	movlb	0	; () banked
  7508  001186  6F8E               	movwf	___wmul@multiplier& (0+255),b
  7509  001188  0E00               	movlw	0
  7510  00118A  0100               	movlb	0	; () banked
  7511  00118C  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  7512  00118E  0100               	movlb	0	; () banked
  7513  001190  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7514  001192  EC1F  F01C         	call	___wmul	;wreg free
  7515  001196  0EFB               	movlw	low __npowers_
  7516  001198  0100               	movlb	0	; () banked
  7517  00119A  258E               	addwf	?___wmul& (0+255),w,b
  7518  00119C  6EF6               	movwf	tblptrl,c
  7519  00119E  0EFD               	movlw	high __npowers_
  7520  0011A0  0100               	movlb	0	; () banked
  7521  0011A2  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7522  0011A4  6EF7               	movwf	tblptrh,c
  7523  0011A6                     	if	0	;There are less than 3 active tblptr bytes
  7524  0011A6                     	endif
  7525  0011A6  0009               	tblrd		*+
  7526  0011A8  CFF5 F0A4          	movff	tablat,___ftmul@f2
  7527  0011AC  0009               	tblrd		*+
  7528  0011AE  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  7529  0011B2  000A               	tblrd		*-
  7530  0011B4  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  7531  0011B8  0E00               	movlw	0
  7532  0011BA  0100               	movlb	0	; () banked
  7533  0011BC  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7534  0011BE  0E64               	movlw	100
  7535  0011C0  6F88               	movwf	___awdiv@divisor& (0+255),b
  7536  0011C2  C0B9  F086         	movff	fround@prec,___awdiv@dividend
  7537  0011C6  0100               	movlb	0	; () banked
  7538  0011C8  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  7539  0011CA  EC1A  F016         	call	___awdiv	;wreg free
  7540  0011CE  0E12               	movlw	18
  7541  0011D0  0100               	movlb	0	; () banked
  7542  0011D2  2586               	addwf	?___awdiv& (0+255),w,b
  7543  0011D4  0100               	movlb	0	; () banked
  7544  0011D6  6F8E               	movwf	___wmul@multiplier& (0+255),b
  7545  0011D8  0E00               	movlw	0
  7546  0011DA  0100               	movlb	0	; () banked
  7547  0011DC  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  7548  0011DE  0100               	movlb	0	; () banked
  7549  0011E0  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7550  0011E2  0E00               	movlw	0
  7551  0011E4  0100               	movlb	0	; () banked
  7552  0011E6  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7553  0011E8  0E03               	movlw	3
  7554  0011EA  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7555  0011EC  EC1F  F01C         	call	___wmul	;wreg free
  7556  0011F0  0EFB               	movlw	low __npowers_
  7557  0011F2  0100               	movlb	0	; () banked
  7558  0011F4  258E               	addwf	?___wmul& (0+255),w,b
  7559  0011F6  6EF6               	movwf	tblptrl,c
  7560  0011F8  0EFD               	movlw	high __npowers_
  7561  0011FA  0100               	movlb	0	; () banked
  7562  0011FC  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7563  0011FE  6EF7               	movwf	tblptrh,c
  7564  001200                     	if	0	;There are less than 3 active tblptr bytes
  7565  001200                     	endif
  7566  001200  0009               	tblrd		*+
  7567  001202  CFF5 F0A1          	movff	tablat,___ftmul@f1
  7568  001206  0009               	tblrd		*+
  7569  001208  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  7570  00120C  000A               	tblrd		*-
  7571  00120E  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  7572  001212  EC2E  F00F         	call	___ftmul	;wreg free
  7573  001216  C0A1  F0B6         	movff	?___ftmul,_fround$1297
  7574  00121A  C0A2  F0B7         	movff	?___ftmul+1,_fround$1297+1
  7575  00121E  C0A3  F0B8         	movff	?___ftmul+2,_fround$1297+2
  7576                           
  7577                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7578  001222  0E00               	movlw	0
  7579  001224  0100               	movlb	0	; () banked
  7580  001226  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7581  001228  0E03               	movlw	3
  7582  00122A  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7583  00122C  0E00               	movlw	0
  7584  00122E  0100               	movlb	0	; () banked
  7585  001230  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7586  001232  0E0A               	movlw	10
  7587  001234  6F82               	movwf	___awmod@divisor& (0+255),b
  7588  001236  C0B9  F080         	movff	fround@prec,___awmod@dividend
  7589  00123A  0100               	movlb	0	; () banked
  7590  00123C  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  7591  00123E  EC36  F018         	call	___awmod	;wreg free
  7592  001242  C080  F08E         	movff	?___awmod,___wmul@multiplier
  7593  001246  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  7594  00124A  EC1F  F01C         	call	___wmul	;wreg free
  7595  00124E  0EFB               	movlw	low __npowers_
  7596  001250  0100               	movlb	0	; () banked
  7597  001252  258E               	addwf	?___wmul& (0+255),w,b
  7598  001254  6EF6               	movwf	tblptrl,c
  7599  001256  0EFD               	movlw	high __npowers_
  7600  001258  0100               	movlb	0	; () banked
  7601  00125A  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7602  00125C  6EF7               	movwf	tblptrh,c
  7603  00125E                     	if	0	;There are less than 3 active tblptr bytes
  7604  00125E                     	endif
  7605  00125E  0009               	tblrd		*+
  7606  001260  CFF5 F0A4          	movff	tablat,___ftmul@f2
  7607  001264  0009               	tblrd		*+
  7608  001266  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  7609  00126A  000A               	tblrd		*-
  7610  00126C  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  7611  001270  C0B6  F0A1         	movff	_fround$1297,___ftmul@f1
  7612  001274  C0B7  F0A2         	movff	_fround$1297+1,___ftmul@f1+1
  7613  001278  C0B8  F0A3         	movff	_fround$1297+2,___ftmul@f1+2
  7614  00127C  EC2E  F00F         	call	___ftmul	;wreg free
  7615  001280  C0A1  F0B3         	movff	?___ftmul,_fround$1298
  7616  001284  C0A2  F0B4         	movff	?___ftmul+1,_fround$1298+1
  7617  001288  C0A3  F0B5         	movff	?___ftmul+2,_fround$1298+2
  7618                           
  7619                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7620  00128C  C0B3  F0A1         	movff	_fround$1298,___ftmul@f1
  7621  001290  C0B4  F0A2         	movff	_fround$1298+1,___ftmul@f1+1
  7622  001294  C0B5  F0A3         	movff	_fround$1298+2,___ftmul@f1+2
  7623  001298  0E00               	movlw	0
  7624  00129A  0100               	movlb	0	; () banked
  7625  00129C  6FA4               	movwf	___ftmul@f2& (0+255),b
  7626  00129E  0E00               	movlw	0
  7627  0012A0  0100               	movlb	0	; () banked
  7628  0012A2  6FA5               	movwf	(___ftmul@f2+1)& (0+255),b
  7629  0012A4  0E3F               	movlw	63
  7630  0012A6  0100               	movlb	0	; () banked
  7631  0012A8  6FA6               	movwf	(___ftmul@f2+2)& (0+255),b
  7632  0012AA  EC2E  F00F         	call	___ftmul	;wreg free
  7633  0012AE  C0A1  F0B0         	movff	?___ftmul,?_fround
  7634  0012B2  C0A2  F0B1         	movff	?___ftmul+1,?_fround+1
  7635  0012B6  C0A3  F0B2         	movff	?___ftmul+2,?_fround+2
  7636  0012BA  0012               	return	
  7637  0012BC                     l3960:
  7638                           
  7639                           ;doprnt.c: 415: else if(prec > 10)
  7640  0012BC  0E0A               	movlw	10
  7641  0012BE  0100               	movlb	0	; () banked
  7642  0012C0  65B9               	cpfsgt	fround@prec& (0+255),b
  7643  0012C2  D06E               	goto	l3968
  7644                           
  7645                           ; BSR set to: 0
  7646                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7647  0012C4  0E00               	movlw	0
  7648  0012C6  0100               	movlb	0	; () banked
  7649  0012C8  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7650  0012CA  0E03               	movlw	3
  7651  0012CC  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7652  0012CE  0E00               	movlw	0
  7653  0012D0  0100               	movlb	0	; () banked
  7654  0012D2  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7655  0012D4  0E0A               	movlw	10
  7656  0012D6  6F82               	movwf	___awmod@divisor& (0+255),b
  7657  0012D8  C0B9  F080         	movff	fround@prec,___awmod@dividend
  7658  0012DC  0100               	movlb	0	; () banked
  7659  0012DE  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  7660  0012E0  EC36  F018         	call	___awmod	;wreg free
  7661  0012E4  C080  F08E         	movff	?___awmod,___wmul@multiplier
  7662  0012E8  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  7663  0012EC  EC1F  F01C         	call	___wmul	;wreg free
  7664  0012F0  0EFB               	movlw	low __npowers_
  7665  0012F2  0100               	movlb	0	; () banked
  7666  0012F4  258E               	addwf	?___wmul& (0+255),w,b
  7667  0012F6  6EF6               	movwf	tblptrl,c
  7668  0012F8  0EFD               	movlw	high __npowers_
  7669  0012FA  0100               	movlb	0	; () banked
  7670  0012FC  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7671  0012FE  6EF7               	movwf	tblptrh,c
  7672  001300                     	if	0	;There are less than 3 active tblptr bytes
  7673  001300                     	endif
  7674  001300  0009               	tblrd		*+
  7675  001302  CFF5 F0A4          	movff	tablat,___ftmul@f2
  7676  001306  0009               	tblrd		*+
  7677  001308  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  7678  00130C  000A               	tblrd		*-
  7679  00130E  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  7680  001312  0E00               	movlw	0
  7681  001314  0100               	movlb	0	; () banked
  7682  001316  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7683  001318  0E0A               	movlw	10
  7684  00131A  6F88               	movwf	___awdiv@divisor& (0+255),b
  7685  00131C  C0B9  F086         	movff	fround@prec,___awdiv@dividend
  7686  001320  0100               	movlb	0	; () banked
  7687  001322  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  7688  001324  EC1A  F016         	call	___awdiv	;wreg free
  7689  001328  0E09               	movlw	9
  7690  00132A  0100               	movlb	0	; () banked
  7691  00132C  2586               	addwf	?___awdiv& (0+255),w,b
  7692  00132E  0100               	movlb	0	; () banked
  7693  001330  6F8E               	movwf	___wmul@multiplier& (0+255),b
  7694  001332  0E00               	movlw	0
  7695  001334  0100               	movlb	0	; () banked
  7696  001336  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  7697  001338  0100               	movlb	0	; () banked
  7698  00133A  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7699  00133C  0E00               	movlw	0
  7700  00133E  0100               	movlb	0	; () banked
  7701  001340  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7702  001342  0E03               	movlw	3
  7703  001344  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7704  001346  EC1F  F01C         	call	___wmul	;wreg free
  7705  00134A  0EFB               	movlw	low __npowers_
  7706  00134C  0100               	movlb	0	; () banked
  7707  00134E  258E               	addwf	?___wmul& (0+255),w,b
  7708  001350  6EF6               	movwf	tblptrl,c
  7709  001352  0EFD               	movlw	high __npowers_
  7710  001354  0100               	movlb	0	; () banked
  7711  001356  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7712  001358  6EF7               	movwf	tblptrh,c
  7713  00135A                     	if	0	;There are less than 3 active tblptr bytes
  7714  00135A                     	endif
  7715  00135A  0009               	tblrd		*+
  7716  00135C  CFF5 F0A1          	movff	tablat,___ftmul@f1
  7717  001360  0009               	tblrd		*+
  7718  001362  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  7719  001366  000A               	tblrd		*-
  7720  001368  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  7721  00136C  EC2E  F00F         	call	___ftmul	;wreg free
  7722  001370  C0A1  F0B6         	movff	?___ftmul,_fround$1297
  7723  001374  C0A2  F0B7         	movff	?___ftmul+1,_fround$1297+1
  7724  001378  C0A3  F0B8         	movff	?___ftmul+2,_fround$1297+2
  7725                           
  7726                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7727  00137C  C0B6  F0A1         	movff	_fround$1297,___ftmul@f1
  7728  001380  C0B7  F0A2         	movff	_fround$1297+1,___ftmul@f1+1
  7729  001384  C0B8  F0A3         	movff	_fround$1297+2,___ftmul@f1+2
  7730  001388  0E00               	movlw	0
  7731  00138A  0100               	movlb	0	; () banked
  7732  00138C  6FA4               	movwf	___ftmul@f2& (0+255),b
  7733  00138E  0E00               	movlw	0
  7734  001390  0100               	movlb	0	; () banked
  7735  001392  6FA5               	movwf	(___ftmul@f2+1)& (0+255),b
  7736  001394  0E3F               	movlw	63
  7737  001396  0100               	movlb	0	; () banked
  7738  001398  6FA6               	movwf	(___ftmul@f2+2)& (0+255),b
  7739  00139A  EC2E  F00F         	call	___ftmul	;wreg free
  7740  00139E  D787               	goto	L4
  7741  0013A0                     l3968:
  7742                           
  7743                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  7744  0013A0  0100               	movlb	0	; () banked
  7745  0013A2  51B9               	movf	fround@prec& (0+255),w,b
  7746  0013A4  0D03               	mullw	3
  7747  0013A6  0EFB               	movlw	low __npowers_
  7748  0013A8  24F3               	addwf	prodl,w,c
  7749  0013AA  6EF6               	movwf	tblptrl,c
  7750  0013AC  0EFD               	movlw	high __npowers_
  7751  0013AE  20F4               	addwfc	prodh,w,c
  7752  0013B0  6EF7               	movwf	tblptrh,c
  7753  0013B2                     	if	0	;There are less than 3 active tblptr bytes
  7754  0013B2                     	endif
  7755  0013B2  0009               	tblrd		*+
  7756  0013B4  CFF5 F0A1          	movff	tablat,___ftmul@f1
  7757  0013B8  0009               	tblrd		*+
  7758  0013BA  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  7759  0013BE  000A               	tblrd		*-
  7760  0013C0  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  7761  0013C4  0E00               	movlw	0
  7762  0013C6  0100               	movlb	0	; () banked
  7763  0013C8  6FA4               	movwf	___ftmul@f2& (0+255),b
  7764  0013CA  0E00               	movlw	0
  7765  0013CC  0100               	movlb	0	; () banked
  7766  0013CE  6FA5               	movwf	(___ftmul@f2+1)& (0+255),b
  7767  0013D0  0E3F               	movlw	63
  7768  0013D2  0100               	movlb	0	; () banked
  7769  0013D4  6FA6               	movwf	(___ftmul@f2+2)& (0+255),b
  7770  0013D6  EC2E  F00F         	call	___ftmul	;wreg free
  7771  0013DA  C0A1  F0B0         	movff	?___ftmul,?_fround
  7772  0013DE  C0A2  F0B1         	movff	?___ftmul+1,?_fround+1
  7773  0013E2  C0A3  F0B2         	movff	?___ftmul+2,?_fround+2
  7774  0013E6  0012               	return	
  7775  0013E8                     __end_of_fround:
  7776                           	opt stack 0
  7777                           tblptru	equ	0xFF8
  7778                           tblptrh	equ	0xFF7
  7779                           tblptrl	equ	0xFF6
  7780                           tablat	equ	0xFF5
  7781                           prodh	equ	0xFF4
  7782                           prodl	equ	0xFF3
  7783                           intcon	equ	0xFF2
  7784                           postinc0	equ	0xFEE
  7785                           wreg	equ	0xFE8
  7786                           postdec1	equ	0xFE5
  7787                           fsr1l	equ	0xFE1
  7788                           indf2	equ	0xFDF
  7789                           postinc2	equ	0xFDE
  7790                           postdec2	equ	0xFDD
  7791                           fsr2h	equ	0xFDA
  7792                           fsr2l	equ	0xFD9
  7793                           status	equ	0xFD8
  7794                           
  7795 ;; *************** function ___wmul *****************
  7796 ;; Defined at:
  7797 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7798 ;; Parameters:    Size  Location     Type
  7799 ;;  multiplier      2   14[BANK0 ] unsigned int 
  7800 ;;  multiplicand    2   16[BANK0 ] unsigned int 
  7801 ;; Auto vars:     Size  Location     Type
  7802 ;;  product         2   18[BANK0 ] unsigned int 
  7803 ;; Return value:  Size  Location     Type
  7804 ;;                  2   14[BANK0 ] unsigned int 
  7805 ;; Registers used:
  7806 ;;		wreg, status,2, status,0, prodl, prodh
  7807 ;; Tracked objects:
  7808 ;;		On entry : 0/0
  7809 ;;		On exit  : 0/0
  7810 ;;		Unchanged: 0/0
  7811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7812 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7813 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7815 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7816 ;;Total ram usage:        6 bytes
  7817 ;; Hardware stack levels used:    1
  7818 ;; Hardware stack levels required when called:    5
  7819 ;; This function calls:
  7820 ;;		Nothing
  7821 ;; This function is called by:
  7822 ;;		_fround
  7823 ;;		_scale
  7824 ;;		_printf
  7825 ;; This function uses a non-reentrant model
  7826 ;;
  7827                           
  7828                           	psect	text28
  7829  00383E                     __ptext28:
  7830                           	opt stack 0
  7831  00383E                     ___wmul:
  7832                           	opt stack 22
  7833                           
  7834                           ;incstack = 0
  7835  00383E  0100               	movlb	0	; () banked
  7836  003840  518E               	movf	___wmul@multiplier& (0+255),w,b
  7837  003842  0100               	movlb	0	; () banked
  7838  003844  0390               	mulwf	___wmul@multiplicand& (0+255),b
  7839  003846  CFF3 F092          	movff	prodl,___wmul@product
  7840  00384A  CFF4 F093          	movff	prodh,___wmul@product+1
  7841  00384E  0100               	movlb	0	; () banked
  7842  003850  518E               	movf	___wmul@multiplier& (0+255),w,b
  7843  003852  0100               	movlb	0	; () banked
  7844  003854  0391               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7845  003856  50F3               	movf	prodl,w,c
  7846  003858  0100               	movlb	0	; () banked
  7847  00385A  2793               	addwf	(___wmul@product+1)& (0+255),f,b
  7848  00385C  0100               	movlb	0	; () banked
  7849  00385E  518F               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7850  003860  0100               	movlb	0	; () banked
  7851  003862  0390               	mulwf	___wmul@multiplicand& (0+255),b
  7852  003864  50F3               	movf	prodl,w,c
  7853  003866  0100               	movlb	0	; () banked
  7854  003868  2793               	addwf	(___wmul@product+1)& (0+255),f,b
  7855                           
  7856                           ; BSR set to: 0
  7857  00386A  C092  F08E         	movff	___wmul@product,?___wmul
  7858  00386E  C093  F08F         	movff	___wmul@product+1,?___wmul+1
  7859  003872  0012               	return	
  7860  003874                     __end_of___wmul:
  7861                           	opt stack 0
  7862                           tblptru	equ	0xFF8
  7863                           tblptrh	equ	0xFF7
  7864                           tblptrl	equ	0xFF6
  7865                           tablat	equ	0xFF5
  7866                           prodh	equ	0xFF4
  7867                           prodl	equ	0xFF3
  7868                           intcon	equ	0xFF2
  7869                           postinc0	equ	0xFEE
  7870                           wreg	equ	0xFE8
  7871                           postdec1	equ	0xFE5
  7872                           fsr1l	equ	0xFE1
  7873                           indf2	equ	0xFDF
  7874                           postinc2	equ	0xFDE
  7875                           postdec2	equ	0xFDD
  7876                           fsr2h	equ	0xFDA
  7877                           fsr2l	equ	0xFD9
  7878                           status	equ	0xFD8
  7879                           
  7880 ;; *************** function ___ftmul *****************
  7881 ;; Defined at:
  7882 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  7883 ;; Parameters:    Size  Location     Type
  7884 ;;  f1              3   33[BANK0 ] float 
  7885 ;;  f2              3   36[BANK0 ] float 
  7886 ;; Auto vars:     Size  Location     Type
  7887 ;;  f3_as_produc    3   43[BANK0 ] unsigned um
  7888 ;;  sign            1   47[BANK0 ] unsigned char 
  7889 ;;  cntr            1   46[BANK0 ] unsigned char 
  7890 ;;  exp             1   42[BANK0 ] unsigned char 
  7891 ;; Return value:  Size  Location     Type
  7892 ;;                  3   33[BANK0 ] float 
  7893 ;; Registers used:
  7894 ;;		wreg, status,2, status,0, cstack
  7895 ;; Tracked objects:
  7896 ;;		On entry : 0/0
  7897 ;;		On exit  : 0/0
  7898 ;;		Unchanged: 0/0
  7899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7900 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7901 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7902 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7903 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7904 ;;Total ram usage:       15 bytes
  7905 ;; Hardware stack levels used:    1
  7906 ;; Hardware stack levels required when called:    6
  7907 ;; This function calls:
  7908 ;;		___ftpack
  7909 ;; This function is called by:
  7910 ;;		_sortBattery
  7911 ;;		_angleToPulse
  7912 ;;		_fround
  7913 ;;		_scale
  7914 ;;		_printf
  7915 ;; This function uses a non-reentrant model
  7916 ;;
  7917                           
  7918                           	psect	text29
  7919  001E5C                     __ptext29:
  7920                           	opt stack 0
  7921  001E5C                     ___ftmul:
  7922                           	opt stack 21
  7923                           
  7924                           ; BSR set to: 0
  7925                           ;incstack = 0
  7926  001E5C  C0A3  F0A7         	movff	___ftmul@f1+2,??___ftmul
  7927  001E60  0100               	movlb	0	; () banked
  7928  001E62  6BA8               	clrf	(??___ftmul+1)& (0+255),b
  7929  001E64  6BA9               	clrf	(??___ftmul+2)& (0+255),b
  7930  001E66  0100               	movlb	0	; () banked
  7931  001E68  35A2               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  7932  001E6A  0100               	movlb	0	; () banked
  7933  001E6C  37A7               	rlcf	??___ftmul& (0+255),f,b
  7934  001E6E  E301               	bnc	u3141
  7935  001E70  81A8               	bsf	(??___ftmul+1)& (0+255),0,b
  7936  001E72                     u3141:
  7937  001E72  0100               	movlb	0	; () banked
  7938  001E74  51A7               	movf	??___ftmul& (0+255),w,b
  7939  001E76  0100               	movlb	0	; () banked
  7940  001E78  6FAA               	movwf	___ftmul@exp& (0+255),b
  7941  001E7A  0100               	movlb	0	; () banked
  7942  001E7C  51AA               	movf	___ftmul@exp& (0+255),w,b
  7943  001E7E  A4D8               	btfss	status,2,c
  7944  001E80  D00A               	goto	l3754
  7945                           
  7946                           ; BSR set to: 0
  7947  001E82  0E00               	movlw	0
  7948  001E84  0100               	movlb	0	; () banked
  7949  001E86  6FA1               	movwf	?___ftmul& (0+255),b
  7950  001E88  0E00               	movlw	0
  7951  001E8A  0100               	movlb	0	; () banked
  7952  001E8C  6FA2               	movwf	(?___ftmul+1)& (0+255),b
  7953  001E8E  0E00               	movlw	0
  7954  001E90  0100               	movlb	0	; () banked
  7955  001E92  6FA3               	movwf	(?___ftmul+2)& (0+255),b
  7956                           
  7957                           ; BSR set to: 0
  7958  001E94  0012               	return	
  7959  001E96                     l3754:
  7960                           
  7961                           ; BSR set to: 0
  7962  001E96  C0A6  F0A7         	movff	___ftmul@f2+2,??___ftmul
  7963  001E9A  0100               	movlb	0	; () banked
  7964  001E9C  6BA8               	clrf	(??___ftmul+1)& (0+255),b
  7965  001E9E  6BA9               	clrf	(??___ftmul+2)& (0+255),b
  7966  001EA0  0100               	movlb	0	; () banked
  7967  001EA2  35A5               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  7968  001EA4  0100               	movlb	0	; () banked
  7969  001EA6  37A7               	rlcf	??___ftmul& (0+255),f,b
  7970  001EA8  E301               	bnc	u3161
  7971  001EAA  81A8               	bsf	(??___ftmul+1)& (0+255),0,b
  7972  001EAC                     u3161:
  7973  001EAC  0100               	movlb	0	; () banked
  7974  001EAE  51A7               	movf	??___ftmul& (0+255),w,b
  7975  001EB0  0100               	movlb	0	; () banked
  7976  001EB2  6FAF               	movwf	___ftmul@sign& (0+255),b
  7977  001EB4  0100               	movlb	0	; () banked
  7978  001EB6  51AF               	movf	___ftmul@sign& (0+255),w,b
  7979  001EB8  A4D8               	btfss	status,2,c
  7980  001EBA  D00A               	goto	l3760
  7981                           
  7982                           ; BSR set to: 0
  7983  001EBC  0E00               	movlw	0
  7984  001EBE  0100               	movlb	0	; () banked
  7985  001EC0  6FA1               	movwf	?___ftmul& (0+255),b
  7986  001EC2  0E00               	movlw	0
  7987  001EC4  0100               	movlb	0	; () banked
  7988  001EC6  6FA2               	movwf	(?___ftmul+1)& (0+255),b
  7989  001EC8  0E00               	movlw	0
  7990  001ECA  0100               	movlb	0	; () banked
  7991  001ECC  6FA3               	movwf	(?___ftmul+2)& (0+255),b
  7992                           
  7993                           ; BSR set to: 0
  7994  001ECE  0012               	return	
  7995  001ED0                     l3760:
  7996                           
  7997                           ; BSR set to: 0
  7998  001ED0  0100               	movlb	0	; () banked
  7999  001ED2  51AF               	movf	___ftmul@sign& (0+255),w,b
  8000  001ED4  0F7B               	addlw	123
  8001  001ED6  0100               	movlb	0	; () banked
  8002  001ED8  27AA               	addwf	___ftmul@exp& (0+255),f,b
  8003                           
  8004                           ; BSR set to: 0
  8005  001EDA  C0A3  F0AF         	movff	___ftmul@f1+2,___ftmul@sign
  8006  001EDE  0100               	movlb	0	; () banked
  8007  001EE0  51A6               	movf	(___ftmul@f2+2)& (0+255),w,b
  8008  001EE2  0100               	movlb	0	; () banked
  8009  001EE4  1BAF               	xorwf	___ftmul@sign& (0+255),f,b
  8010  001EE6  0E80               	movlw	128
  8011  001EE8  0100               	movlb	0	; () banked
  8012  001EEA  17AF               	andwf	___ftmul@sign& (0+255),f,b
  8013                           
  8014                           ; BSR set to: 0
  8015  001EEC  0100               	movlb	0	; () banked
  8016  001EEE  8FA2               	bsf	(___ftmul@f1+1)& (0+255),7,b
  8017                           
  8018                           ; BSR set to: 0
  8019  001EF0  0100               	movlb	0	; () banked
  8020  001EF2  8FA5               	bsf	(___ftmul@f2+1)& (0+255),7,b
  8021                           
  8022                           ; BSR set to: 0
  8023  001EF4  0EFF               	movlw	255
  8024  001EF6  0100               	movlb	0	; () banked
  8025  001EF8  17A4               	andwf	___ftmul@f2& (0+255),f,b
  8026  001EFA  0EFF               	movlw	255
  8027  001EFC  0100               	movlb	0	; () banked
  8028  001EFE  17A5               	andwf	(___ftmul@f2+1)& (0+255),f,b
  8029  001F00  0E00               	movlw	0
  8030  001F02  0100               	movlb	0	; () banked
  8031  001F04  17A6               	andwf	(___ftmul@f2+2)& (0+255),f,b
  8032                           
  8033                           ; BSR set to: 0
  8034  001F06  0E00               	movlw	0
  8035  001F08  0100               	movlb	0	; () banked
  8036  001F0A  6FAB               	movwf	___ftmul@f3_as_product& (0+255),b
  8037  001F0C  0E00               	movlw	0
  8038  001F0E  0100               	movlb	0	; () banked
  8039  001F10  6FAC               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  8040  001F12  0E00               	movlw	0
  8041  001F14  0100               	movlb	0	; () banked
  8042  001F16  6FAD               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  8043                           
  8044                           ; BSR set to: 0
  8045  001F18  0E07               	movlw	7
  8046  001F1A  0100               	movlb	0	; () banked
  8047  001F1C  6FAE               	movwf	___ftmul@cntr& (0+255),b
  8048  001F1E                     l3774:
  8049                           
  8050                           ; BSR set to: 0
  8051  001F1E  0100               	movlb	0	; () banked
  8052  001F20  A1A1               	btfss	___ftmul@f1& (0+255),0,b
  8053  001F22  D00C               	goto	l3778
  8054                           
  8055                           ; BSR set to: 0
  8056  001F24  0100               	movlb	0	; () banked
  8057  001F26  51A4               	movf	___ftmul@f2& (0+255),w,b
  8058  001F28  0100               	movlb	0	; () banked
  8059  001F2A  27AB               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8060  001F2C  0100               	movlb	0	; () banked
  8061  001F2E  51A5               	movf	(___ftmul@f2+1)& (0+255),w,b
  8062  001F30  0100               	movlb	0	; () banked
  8063  001F32  23AC               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8064  001F34  0100               	movlb	0	; () banked
  8065  001F36  51A6               	movf	(___ftmul@f2+2)& (0+255),w,b
  8066  001F38  0100               	movlb	0	; () banked
  8067  001F3A  23AD               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8068  001F3C                     l3778:
  8069                           
  8070                           ; BSR set to: 0
  8071  001F3C  0100               	movlb	0	; () banked
  8072  001F3E  90D8               	bcf	status,0,c
  8073  001F40  33A3               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8074  001F42  33A2               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8075  001F44  33A1               	rrcf	___ftmul@f1& (0+255),f,b
  8076  001F46  0100               	movlb	0	; () banked
  8077  001F48  90D8               	bcf	status,0,c
  8078  001F4A  37A4               	rlcf	___ftmul@f2& (0+255),f,b
  8079  001F4C  37A5               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  8080  001F4E  37A6               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  8081                           
  8082                           ; BSR set to: 0
  8083  001F50  0100               	movlb	0	; () banked
  8084  001F52  2FAE               	decfsz	___ftmul@cntr& (0+255),f,b
  8085  001F54  D7E4               	goto	l3774
  8086                           
  8087                           ; BSR set to: 0
  8088                           
  8089                           ; BSR set to: 0
  8090  001F56  0E09               	movlw	9
  8091  001F58  0100               	movlb	0	; () banked
  8092  001F5A  6FAE               	movwf	___ftmul@cntr& (0+255),b
  8093  001F5C                     l3784:
  8094                           
  8095                           ; BSR set to: 0
  8096  001F5C  0100               	movlb	0	; () banked
  8097  001F5E  A1A1               	btfss	___ftmul@f1& (0+255),0,b
  8098  001F60  D00C               	goto	l3788
  8099                           
  8100                           ; BSR set to: 0
  8101  001F62  0100               	movlb	0	; () banked
  8102  001F64  51A4               	movf	___ftmul@f2& (0+255),w,b
  8103  001F66  0100               	movlb	0	; () banked
  8104  001F68  27AB               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8105  001F6A  0100               	movlb	0	; () banked
  8106  001F6C  51A5               	movf	(___ftmul@f2+1)& (0+255),w,b
  8107  001F6E  0100               	movlb	0	; () banked
  8108  001F70  23AC               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8109  001F72  0100               	movlb	0	; () banked
  8110  001F74  51A6               	movf	(___ftmul@f2+2)& (0+255),w,b
  8111  001F76  0100               	movlb	0	; () banked
  8112  001F78  23AD               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8113  001F7A                     l3788:
  8114                           
  8115                           ; BSR set to: 0
  8116  001F7A  0100               	movlb	0	; () banked
  8117  001F7C  90D8               	bcf	status,0,c
  8118  001F7E  33A3               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8119  001F80  33A2               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8120  001F82  33A1               	rrcf	___ftmul@f1& (0+255),f,b
  8121  001F84  0100               	movlb	0	; () banked
  8122  001F86  90D8               	bcf	status,0,c
  8123  001F88  33AD               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  8124  001F8A  33AC               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  8125  001F8C  33AB               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  8126                           
  8127                           ; BSR set to: 0
  8128  001F8E  0100               	movlb	0	; () banked
  8129  001F90  2FAE               	decfsz	___ftmul@cntr& (0+255),f,b
  8130  001F92  D7E4               	goto	l3784
  8131                           
  8132                           ; BSR set to: 0
  8133                           
  8134                           ; BSR set to: 0
  8135  001F94  C0AB  F080         	movff	___ftmul@f3_as_product,___ftpack@arg
  8136  001F98  C0AC  F081         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8137  001F9C  C0AD  F082         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8138  001FA0  C0AA  F083         	movff	___ftmul@exp,___ftpack@exp
  8139  001FA4  C0AF  F084         	movff	___ftmul@sign,___ftpack@sign
  8140  001FA8  EC63  F012         	call	___ftpack	;wreg free
  8141  001FAC  C080  F0A1         	movff	?___ftpack,?___ftmul
  8142  001FB0  C081  F0A2         	movff	?___ftpack+1,?___ftmul+1
  8143  001FB4  C082  F0A3         	movff	?___ftpack+2,?___ftmul+2
  8144  001FB8  0012               	return	
  8145  001FBA                     __end_of___ftmul:
  8146                           	opt stack 0
  8147                           tblptru	equ	0xFF8
  8148                           tblptrh	equ	0xFF7
  8149                           tblptrl	equ	0xFF6
  8150                           tablat	equ	0xFF5
  8151                           prodh	equ	0xFF4
  8152                           prodl	equ	0xFF3
  8153                           intcon	equ	0xFF2
  8154                           postinc0	equ	0xFEE
  8155                           wreg	equ	0xFE8
  8156                           postdec1	equ	0xFE5
  8157                           fsr1l	equ	0xFE1
  8158                           indf2	equ	0xFDF
  8159                           postinc2	equ	0xFDE
  8160                           postdec2	equ	0xFDD
  8161                           fsr2h	equ	0xFDA
  8162                           fsr2l	equ	0xFD9
  8163                           status	equ	0xFD8
  8164                           
  8165 ;; *************** function ___awmod *****************
  8166 ;; Defined at:
  8167 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8168 ;; Parameters:    Size  Location     Type
  8169 ;;  dividend        2    0[BANK0 ] int 
  8170 ;;  divisor         2    2[BANK0 ] int 
  8171 ;; Auto vars:     Size  Location     Type
  8172 ;;  sign            1    5[BANK0 ] unsigned char 
  8173 ;;  counter         1    4[BANK0 ] unsigned char 
  8174 ;; Return value:  Size  Location     Type
  8175 ;;                  2    0[BANK0 ] int 
  8176 ;; Registers used:
  8177 ;;		wreg, status,2, status,0
  8178 ;; Tracked objects:
  8179 ;;		On entry : 0/0
  8180 ;;		On exit  : 0/0
  8181 ;;		Unchanged: 0/0
  8182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8183 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8184 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8186 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8187 ;;Total ram usage:        6 bytes
  8188 ;; Hardware stack levels used:    1
  8189 ;; Hardware stack levels required when called:    5
  8190 ;; This function calls:
  8191 ;;		Nothing
  8192 ;; This function is called by:
  8193 ;;		_fround
  8194 ;;		_scale
  8195 ;; This function uses a non-reentrant model
  8196 ;;
  8197                           
  8198                           	psect	text30
  8199  00306C                     __ptext30:
  8200                           	opt stack 0
  8201  00306C                     ___awmod:
  8202                           	opt stack 22
  8203                           
  8204                           ;incstack = 0
  8205  00306C  0E00               	movlw	0
  8206  00306E  0100               	movlb	0	; () banked
  8207  003070  6F85               	movwf	___awmod@sign& (0+255),b
  8208                           
  8209                           ; BSR set to: 0
  8210  003072  0100               	movlb	0	; () banked
  8211  003074  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8212  003076  D008               	goto	l3848
  8213                           
  8214                           ; BSR set to: 0
  8215  003078  0100               	movlb	0	; () banked
  8216  00307A  6D80               	negf	___awmod@dividend& (0+255),b
  8217  00307C  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8218  00307E  B0D8               	btfsc	status,0,c
  8219  003080  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8220                           
  8221                           ; BSR set to: 0
  8222  003082  0E01               	movlw	1
  8223  003084  0100               	movlb	0	; () banked
  8224  003086  6F85               	movwf	___awmod@sign& (0+255),b
  8225  003088                     l3848:
  8226                           
  8227                           ; BSR set to: 0
  8228  003088  0100               	movlb	0	; () banked
  8229  00308A  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8230  00308C  D005               	goto	l3852
  8231                           
  8232                           ; BSR set to: 0
  8233  00308E  0100               	movlb	0	; () banked
  8234  003090  6D82               	negf	___awmod@divisor& (0+255),b
  8235  003092  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  8236  003094  B0D8               	btfsc	status,0,c
  8237  003096  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  8238  003098                     l3852:
  8239                           
  8240                           ; BSR set to: 0
  8241  003098  0100               	movlb	0	; () banked
  8242  00309A  5182               	movf	___awmod@divisor& (0+255),w,b
  8243  00309C  0100               	movlb	0	; () banked
  8244  00309E  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  8245  0030A0  B4D8               	btfsc	status,2,c
  8246  0030A2  D026               	goto	l3868
  8247                           
  8248                           ; BSR set to: 0
  8249  0030A4  0E01               	movlw	1
  8250  0030A6  0100               	movlb	0	; () banked
  8251  0030A8  6F84               	movwf	___awmod@counter& (0+255),b
  8252  0030AA  D006               	goto	l3858
  8253  0030AC                     l3856:
  8254                           
  8255                           ; BSR set to: 0
  8256  0030AC  0100               	movlb	0	; () banked
  8257  0030AE  90D8               	bcf	status,0,c
  8258  0030B0  3782               	rlcf	___awmod@divisor& (0+255),f,b
  8259  0030B2  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8260  0030B4  0100               	movlb	0	; () banked
  8261  0030B6  2B84               	incf	___awmod@counter& (0+255),f,b
  8262  0030B8                     l3858:
  8263                           
  8264                           ; BSR set to: 0
  8265  0030B8  0100               	movlb	0	; () banked
  8266  0030BA  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8267  0030BC  D7F7               	goto	l3856
  8268  0030BE                     l3860:
  8269                           
  8270                           ; BSR set to: 0
  8271  0030BE  0100               	movlb	0	; () banked
  8272  0030C0  5182               	movf	___awmod@divisor& (0+255),w,b
  8273  0030C2  0100               	movlb	0	; () banked
  8274  0030C4  5D80               	subwf	___awmod@dividend& (0+255),w,b
  8275  0030C6  0100               	movlb	0	; () banked
  8276  0030C8  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8277  0030CA  0100               	movlb	0	; () banked
  8278  0030CC  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  8279  0030CE  A0D8               	btfss	status,0,c
  8280  0030D0  D008               	goto	l3864
  8281                           
  8282                           ; BSR set to: 0
  8283  0030D2  0100               	movlb	0	; () banked
  8284  0030D4  5182               	movf	___awmod@divisor& (0+255),w,b
  8285  0030D6  0100               	movlb	0	; () banked
  8286  0030D8  5F80               	subwf	___awmod@dividend& (0+255),f,b
  8287  0030DA  0100               	movlb	0	; () banked
  8288  0030DC  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8289  0030DE  0100               	movlb	0	; () banked
  8290  0030E0  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  8291  0030E2                     l3864:
  8292                           
  8293                           ; BSR set to: 0
  8294  0030E2  0100               	movlb	0	; () banked
  8295  0030E4  90D8               	bcf	status,0,c
  8296  0030E6  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  8297  0030E8  3382               	rrcf	___awmod@divisor& (0+255),f,b
  8298                           
  8299                           ; BSR set to: 0
  8300  0030EA  0100               	movlb	0	; () banked
  8301  0030EC  2F84               	decfsz	___awmod@counter& (0+255),f,b
  8302  0030EE  D7E7               	goto	l3860
  8303  0030F0                     l3868:
  8304                           
  8305                           ; BSR set to: 0
  8306  0030F0  0100               	movlb	0	; () banked
  8307  0030F2  5185               	movf	___awmod@sign& (0+255),w,b
  8308  0030F4  0100               	movlb	0	; () banked
  8309  0030F6  B4D8               	btfsc	status,2,c
  8310  0030F8  D005               	goto	l3872
  8311                           
  8312                           ; BSR set to: 0
  8313  0030FA  0100               	movlb	0	; () banked
  8314  0030FC  6D80               	negf	___awmod@dividend& (0+255),b
  8315  0030FE  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8316  003100  B0D8               	btfsc	status,0,c
  8317  003102  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8318  003104                     l3872:
  8319                           
  8320                           ; BSR set to: 0
  8321  003104  C080  F080         	movff	___awmod@dividend,?___awmod
  8322  003108  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  8323  00310C  0012               	return	
  8324  00310E                     __end_of___awmod:
  8325                           	opt stack 0
  8326                           tblptru	equ	0xFF8
  8327                           tblptrh	equ	0xFF7
  8328                           tblptrl	equ	0xFF6
  8329                           tablat	equ	0xFF5
  8330                           prodh	equ	0xFF4
  8331                           prodl	equ	0xFF3
  8332                           intcon	equ	0xFF2
  8333                           postinc0	equ	0xFEE
  8334                           wreg	equ	0xFE8
  8335                           postdec1	equ	0xFE5
  8336                           fsr1l	equ	0xFE1
  8337                           indf2	equ	0xFDF
  8338                           postinc2	equ	0xFDE
  8339                           postdec2	equ	0xFDD
  8340                           fsr2h	equ	0xFDA
  8341                           fsr2l	equ	0xFD9
  8342                           status	equ	0xFD8
  8343                           
  8344 ;; *************** function ___awdiv *****************
  8345 ;; Defined at:
  8346 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8347 ;; Parameters:    Size  Location     Type
  8348 ;;  dividend        2    6[BANK0 ] int 
  8349 ;;  divisor         2    8[BANK0 ] int 
  8350 ;; Auto vars:     Size  Location     Type
  8351 ;;  quotient        2   12[BANK0 ] int 
  8352 ;;  sign            1   11[BANK0 ] unsigned char 
  8353 ;;  counter         1   10[BANK0 ] unsigned char 
  8354 ;; Return value:  Size  Location     Type
  8355 ;;                  2    6[BANK0 ] int 
  8356 ;; Registers used:
  8357 ;;		wreg, status,2, status,0
  8358 ;; Tracked objects:
  8359 ;;		On entry : 0/0
  8360 ;;		On exit  : 0/0
  8361 ;;		Unchanged: 0/0
  8362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8363 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8364 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8366 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8367 ;;Total ram usage:        8 bytes
  8368 ;; Hardware stack levels used:    1
  8369 ;; Hardware stack levels required when called:    5
  8370 ;; This function calls:
  8371 ;;		Nothing
  8372 ;; This function is called by:
  8373 ;;		_fround
  8374 ;;		_scale
  8375 ;;		_printf
  8376 ;; This function uses a non-reentrant model
  8377 ;;
  8378                           
  8379                           	psect	text31
  8380  002C34                     __ptext31:
  8381                           	opt stack 0
  8382  002C34                     ___awdiv:
  8383                           	opt stack 22
  8384                           
  8385                           ; BSR set to: 0
  8386                           ;incstack = 0
  8387  002C34  0E00               	movlw	0
  8388  002C36  0100               	movlb	0	; () banked
  8389  002C38  6F8B               	movwf	___awdiv@sign& (0+255),b
  8390                           
  8391                           ; BSR set to: 0
  8392  002C3A  0100               	movlb	0	; () banked
  8393  002C3C  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8394  002C3E  D008               	goto	l3804
  8395                           
  8396                           ; BSR set to: 0
  8397  002C40  0100               	movlb	0	; () banked
  8398  002C42  6D88               	negf	___awdiv@divisor& (0+255),b
  8399  002C44  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8400  002C46  B0D8               	btfsc	status,0,c
  8401  002C48  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8402                           
  8403                           ; BSR set to: 0
  8404  002C4A  0E01               	movlw	1
  8405  002C4C  0100               	movlb	0	; () banked
  8406  002C4E  6F8B               	movwf	___awdiv@sign& (0+255),b
  8407  002C50                     l3804:
  8408                           
  8409                           ; BSR set to: 0
  8410  002C50  0100               	movlb	0	; () banked
  8411  002C52  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8412  002C54  D008               	goto	l3810
  8413                           
  8414                           ; BSR set to: 0
  8415  002C56  0100               	movlb	0	; () banked
  8416  002C58  6D86               	negf	___awdiv@dividend& (0+255),b
  8417  002C5A  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8418  002C5C  B0D8               	btfsc	status,0,c
  8419  002C5E  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8420                           
  8421                           ; BSR set to: 0
  8422  002C60  0E01               	movlw	1
  8423  002C62  0100               	movlb	0	; () banked
  8424  002C64  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  8425  002C66                     l3810:
  8426                           
  8427                           ; BSR set to: 0
  8428  002C66  0E00               	movlw	0
  8429  002C68  0100               	movlb	0	; () banked
  8430  002C6A  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  8431  002C6C  0E00               	movlw	0
  8432  002C6E  6F8C               	movwf	___awdiv@quotient& (0+255),b
  8433                           
  8434                           ; BSR set to: 0
  8435  002C70  0100               	movlb	0	; () banked
  8436  002C72  5188               	movf	___awdiv@divisor& (0+255),w,b
  8437  002C74  0100               	movlb	0	; () banked
  8438  002C76  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8439  002C78  B4D8               	btfsc	status,2,c
  8440  002C7A  D02C               	goto	l3832
  8441                           
  8442                           ; BSR set to: 0
  8443  002C7C  0E01               	movlw	1
  8444  002C7E  0100               	movlb	0	; () banked
  8445  002C80  6F8A               	movwf	___awdiv@counter& (0+255),b
  8446  002C82  D006               	goto	l3818
  8447  002C84                     l3816:
  8448                           
  8449                           ; BSR set to: 0
  8450  002C84  0100               	movlb	0	; () banked
  8451  002C86  90D8               	bcf	status,0,c
  8452  002C88  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  8453  002C8A  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8454  002C8C  0100               	movlb	0	; () banked
  8455  002C8E  2B8A               	incf	___awdiv@counter& (0+255),f,b
  8456  002C90                     l3818:
  8457                           
  8458                           ; BSR set to: 0
  8459  002C90  0100               	movlb	0	; () banked
  8460  002C92  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8461  002C94  D7F7               	goto	l3816
  8462  002C96                     l3820:
  8463                           
  8464                           ; BSR set to: 0
  8465  002C96  0100               	movlb	0	; () banked
  8466  002C98  90D8               	bcf	status,0,c
  8467  002C9A  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  8468  002C9C  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8469                           
  8470                           ; BSR set to: 0
  8471  002C9E  0100               	movlb	0	; () banked
  8472  002CA0  5188               	movf	___awdiv@divisor& (0+255),w,b
  8473  002CA2  0100               	movlb	0	; () banked
  8474  002CA4  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  8475  002CA6  0100               	movlb	0	; () banked
  8476  002CA8  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8477  002CAA  0100               	movlb	0	; () banked
  8478  002CAC  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8479  002CAE  A0D8               	btfss	status,0,c
  8480  002CB0  D00A               	goto	l3828
  8481                           
  8482                           ; BSR set to: 0
  8483  002CB2  0100               	movlb	0	; () banked
  8484  002CB4  5188               	movf	___awdiv@divisor& (0+255),w,b
  8485  002CB6  0100               	movlb	0	; () banked
  8486  002CB8  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  8487  002CBA  0100               	movlb	0	; () banked
  8488  002CBC  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8489  002CBE  0100               	movlb	0	; () banked
  8490  002CC0  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8491                           
  8492                           ; BSR set to: 0
  8493  002CC2  0100               	movlb	0	; () banked
  8494  002CC4  818C               	bsf	___awdiv@quotient& (0+255),0,b
  8495  002CC6                     l3828:
  8496                           
  8497                           ; BSR set to: 0
  8498  002CC6  0100               	movlb	0	; () banked
  8499  002CC8  90D8               	bcf	status,0,c
  8500  002CCA  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8501  002CCC  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  8502                           
  8503                           ; BSR set to: 0
  8504  002CCE  0100               	movlb	0	; () banked
  8505  002CD0  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  8506  002CD2  D7E1               	goto	l3820
  8507  002CD4                     l3832:
  8508                           
  8509                           ; BSR set to: 0
  8510  002CD4  0100               	movlb	0	; () banked
  8511  002CD6  518B               	movf	___awdiv@sign& (0+255),w,b
  8512  002CD8  0100               	movlb	0	; () banked
  8513  002CDA  B4D8               	btfsc	status,2,c
  8514  002CDC  D005               	goto	l3836
  8515                           
  8516                           ; BSR set to: 0
  8517  002CDE  0100               	movlb	0	; () banked
  8518  002CE0  6D8C               	negf	___awdiv@quotient& (0+255),b
  8519  002CE2  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8520  002CE4  B0D8               	btfsc	status,0,c
  8521  002CE6  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8522  002CE8                     l3836:
  8523                           
  8524                           ; BSR set to: 0
  8525  002CE8  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  8526  002CEC  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  8527  002CF0  0012               	return	
  8528  002CF2                     __end_of___awdiv:
  8529                           	opt stack 0
  8530                           tblptru	equ	0xFF8
  8531                           tblptrh	equ	0xFF7
  8532                           tblptrl	equ	0xFF6
  8533                           tablat	equ	0xFF5
  8534                           prodh	equ	0xFF4
  8535                           prodl	equ	0xFF3
  8536                           intcon	equ	0xFF2
  8537                           postinc0	equ	0xFEE
  8538                           wreg	equ	0xFE8
  8539                           postdec1	equ	0xFE5
  8540                           fsr1l	equ	0xFE1
  8541                           indf2	equ	0xFDF
  8542                           postinc2	equ	0xFDE
  8543                           postdec2	equ	0xFDD
  8544                           fsr2h	equ	0xFDA
  8545                           fsr2l	equ	0xFD9
  8546                           status	equ	0xFD8
  8547                           
  8548 ;; *************** function __tdiv_to_l_ *****************
  8549 ;; Defined at:
  8550 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  8551 ;; Parameters:    Size  Location     Type
  8552 ;;  f1              3    0[BANK0 ] float 
  8553 ;;  f2              3    3[BANK0 ] float 
  8554 ;; Auto vars:     Size  Location     Type
  8555 ;;  quot            4    9[BANK0 ] unsigned long 
  8556 ;;  exp1            1   14[BANK0 ] unsigned char 
  8557 ;;  cntr            1   13[BANK0 ] unsigned char 
  8558 ;; Return value:  Size  Location     Type
  8559 ;;                  4    0[BANK0 ] unsigned long 
  8560 ;; Registers used:
  8561 ;;		wreg, status,2, status,0
  8562 ;; Tracked objects:
  8563 ;;		On entry : 0/0
  8564 ;;		On exit  : 0/0
  8565 ;;		Unchanged: 0/0
  8566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8567 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8568 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8569 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8570 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8571 ;;Total ram usage:       15 bytes
  8572 ;; Hardware stack levels used:    1
  8573 ;; Hardware stack levels required when called:    5
  8574 ;; This function calls:
  8575 ;;		Nothing
  8576 ;; This function is called by:
  8577 ;;		_printf
  8578 ;; This function uses a non-reentrant model
  8579 ;;
  8580                           
  8581                           	psect	text32
  8582  0019D0                     __ptext32:
  8583                           	opt stack 0
  8584  0019D0                     __tdiv_to_l_:
  8585                           	opt stack 23
  8586                           
  8587                           ; BSR set to: 0
  8588                           ;incstack = 0
  8589  0019D0  C082  F086         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  8590  0019D4  0100               	movlb	0	; () banked
  8591  0019D6  6B87               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  8592  0019D8  6B88               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  8593  0019DA  0100               	movlb	0	; () banked
  8594  0019DC  3581               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
  8595  0019DE  0100               	movlb	0	; () banked
  8596  0019E0  3786               	rlcf	??__tdiv_to_l_& (0+255),f,b
  8597  0019E2  E301               	bnc	u3491
  8598  0019E4  8187               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  8599  0019E6                     u3491:
  8600  0019E6  0100               	movlb	0	; () banked
  8601  0019E8  5186               	movf	??__tdiv_to_l_& (0+255),w,b
  8602  0019EA  0100               	movlb	0	; () banked
  8603  0019EC  6F8E               	movwf	__tdiv_to_l_@exp1& (0+255),b
  8604  0019EE  0100               	movlb	0	; () banked
  8605  0019F0  518E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  8606  0019F2  A4D8               	btfss	status,2,c
  8607  0019F4  D00A               	goto	l4016
  8608                           
  8609                           ; BSR set to: 0
  8610  0019F6  0E00               	movlw	0
  8611  0019F8  0100               	movlb	0	; () banked
  8612  0019FA  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  8613  0019FC  0E00               	movlw	0
  8614  0019FE  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  8615  001A00  0E00               	movlw	0
  8616  001A02  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  8617  001A04  0E00               	movlw	0
  8618  001A06  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  8619                           
  8620                           ; BSR set to: 0
  8621  001A08  0012               	return	
  8622  001A0A                     l4016:
  8623                           
  8624                           ; BSR set to: 0
  8625  001A0A  C085  F086         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  8626  001A0E  0100               	movlb	0	; () banked
  8627  001A10  6B87               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  8628  001A12  6B88               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  8629  001A14  0100               	movlb	0	; () banked
  8630  001A16  3584               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  8631  001A18  0100               	movlb	0	; () banked
  8632  001A1A  3786               	rlcf	??__tdiv_to_l_& (0+255),f,b
  8633  001A1C  E301               	bnc	u3511
  8634  001A1E  8187               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  8635  001A20                     u3511:
  8636  001A20  0100               	movlb	0	; () banked
  8637  001A22  5186               	movf	??__tdiv_to_l_& (0+255),w,b
  8638  001A24  0100               	movlb	0	; () banked
  8639  001A26  6F8D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  8640  001A28  0100               	movlb	0	; () banked
  8641  001A2A  518D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  8642  001A2C  A4D8               	btfss	status,2,c
  8643  001A2E  D00A               	goto	l4022
  8644                           
  8645                           ; BSR set to: 0
  8646  001A30  0E00               	movlw	0
  8647  001A32  0100               	movlb	0	; () banked
  8648  001A34  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  8649  001A36  0E00               	movlw	0
  8650  001A38  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  8651  001A3A  0E00               	movlw	0
  8652  001A3C  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  8653  001A3E  0E00               	movlw	0
  8654  001A40  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  8655                           
  8656                           ; BSR set to: 0
  8657  001A42  0012               	return	
  8658  001A44                     l4022:
  8659                           
  8660                           ; BSR set to: 0
  8661  001A44  0100               	movlb	0	; () banked
  8662  001A46  8F81               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
  8663                           
  8664                           ; BSR set to: 0
  8665  001A48  0EFF               	movlw	255
  8666  001A4A  0100               	movlb	0	; () banked
  8667  001A4C  1780               	andwf	__tdiv_to_l_@f1& (0+255),f,b
  8668  001A4E  0EFF               	movlw	255
  8669  001A50  0100               	movlb	0	; () banked
  8670  001A52  1781               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  8671  001A54  0E00               	movlw	0
  8672  001A56  0100               	movlb	0	; () banked
  8673  001A58  1782               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  8674  001A5A  0100               	movlb	0	; () banked
  8675  001A5C  8F84               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
  8676                           
  8677                           ; BSR set to: 0
  8678  001A5E  0EFF               	movlw	255
  8679  001A60  0100               	movlb	0	; () banked
  8680  001A62  1783               	andwf	__tdiv_to_l_@f2& (0+255),f,b
  8681  001A64  0EFF               	movlw	255
  8682  001A66  0100               	movlb	0	; () banked
  8683  001A68  1784               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
  8684  001A6A  0E00               	movlw	0
  8685  001A6C  0100               	movlb	0	; () banked
  8686  001A6E  1785               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
  8687                           
  8688                           ; BSR set to: 0
  8689  001A70  0E00               	movlw	0
  8690  001A72  0100               	movlb	0	; () banked
  8691  001A74  6F89               	movwf	__tdiv_to_l_@quot& (0+255),b
  8692  001A76  0E00               	movlw	0
  8693  001A78  6F8A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  8694  001A7A  0E00               	movlw	0
  8695  001A7C  6F8B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  8696  001A7E  0E00               	movlw	0
  8697  001A80  6F8C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  8698                           
  8699                           ; BSR set to: 0
  8700  001A82  0E7F               	movlw	127
  8701  001A84  0100               	movlb	0	; () banked
  8702  001A86  5F8E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  8703                           
  8704                           ; BSR set to: 0
  8705  001A88  0100               	movlb	0	; () banked
  8706  001A8A  518D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  8707  001A8C  0F98               	addlw	152
  8708  001A8E  0100               	movlb	0	; () banked
  8709  001A90  5F8E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  8710                           
  8711                           ; BSR set to: 0
  8712  001A92  0E18               	movlw	24
  8713  001A94  0100               	movlb	0	; () banked
  8714  001A96  6F8D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  8715  001A98                     l1047:
  8716                           
  8717                           ; BSR set to: 0
  8718  001A98  0100               	movlb	0	; () banked
  8719  001A9A  90D8               	bcf	status,0,c
  8720  001A9C  3789               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  8721  001A9E  378A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  8722  001AA0  378B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  8723  001AA2  378C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  8724                           
  8725                           ; BSR set to: 0
  8726  001AA4  0100               	movlb	0	; () banked
  8727  001AA6  5183               	movf	__tdiv_to_l_@f2& (0+255),w,b
  8728  001AA8  0100               	movlb	0	; () banked
  8729  001AAA  5D80               	subwf	__tdiv_to_l_@f1& (0+255),w,b
  8730  001AAC  0100               	movlb	0	; () banked
  8731  001AAE  5184               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  8732  001AB0  0100               	movlb	0	; () banked
  8733  001AB2  5981               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
  8734  001AB4  0100               	movlb	0	; () banked
  8735  001AB6  5185               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  8736  001AB8  0100               	movlb	0	; () banked
  8737  001ABA  5982               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
  8738  001ABC  A0D8               	btfss	status,0,c
  8739  001ABE  D00E               	goto	l1048
  8740                           
  8741                           ; BSR set to: 0
  8742  001AC0  0100               	movlb	0	; () banked
  8743  001AC2  5183               	movf	__tdiv_to_l_@f2& (0+255),w,b
  8744  001AC4  0100               	movlb	0	; () banked
  8745  001AC6  5F80               	subwf	__tdiv_to_l_@f1& (0+255),f,b
  8746  001AC8  0100               	movlb	0	; () banked
  8747  001ACA  5184               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  8748  001ACC  0100               	movlb	0	; () banked
  8749  001ACE  5B81               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
  8750  001AD0  0100               	movlb	0	; () banked
  8751  001AD2  5185               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  8752  001AD4  0100               	movlb	0	; () banked
  8753  001AD6  5B82               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
  8754                           
  8755                           ; BSR set to: 0
  8756  001AD8  0100               	movlb	0	; () banked
  8757  001ADA  8189               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  8758  001ADC                     l1048:
  8759                           
  8760                           ; BSR set to: 0
  8761  001ADC  0100               	movlb	0	; () banked
  8762  001ADE  90D8               	bcf	status,0,c
  8763  001AE0  3780               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
  8764  001AE2  3781               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  8765  001AE4  3782               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  8766                           
  8767                           ; BSR set to: 0
  8768  001AE6  0100               	movlb	0	; () banked
  8769  001AE8  2F8D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  8770  001AEA  D7D6               	goto	l1047
  8771                           
  8772                           ; BSR set to: 0
  8773                           
  8774                           ; BSR set to: 0
  8775  001AEC  0100               	movlb	0	; () banked
  8776  001AEE  AF8E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  8777  001AF0  D01A               	goto	l4056
  8778                           
  8779                           ; BSR set to: 0
  8780  001AF2  0100               	movlb	0	; () banked
  8781  001AF4  518E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  8782  001AF6  0A80               	xorlw	128
  8783  001AF8  0F97               	addlw	151
  8784  001AFA  B0D8               	btfsc	status,0,c
  8785  001AFC  D00A               	goto	l4052
  8786                           
  8787                           ; BSR set to: 0
  8788  001AFE  0E00               	movlw	0
  8789  001B00  0100               	movlb	0	; () banked
  8790  001B02  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  8791  001B04  0E00               	movlw	0
  8792  001B06  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  8793  001B08  0E00               	movlw	0
  8794  001B0A  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  8795  001B0C  0E00               	movlw	0
  8796  001B0E  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  8797                           
  8798                           ; BSR set to: 0
  8799  001B10  0012               	return	
  8800  001B12                     l4052:
  8801                           
  8802                           ; BSR set to: 0
  8803  001B12  0100               	movlb	0	; () banked
  8804  001B14  90D8               	bcf	status,0,c
  8805  001B16  338C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  8806  001B18  338B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  8807  001B1A  338A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  8808  001B1C  3389               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  8809                           
  8810                           ; BSR set to: 0
  8811  001B1E  0100               	movlb	0	; () banked
  8812  001B20  3F8E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  8813  001B22  D7F7               	goto	l4052
  8814                           
  8815                           ; BSR set to: 0
  8816  001B24  D01B               	goto	l1054
  8817  001B26                     l4056:
  8818                           
  8819                           ; BSR set to: 0
  8820  001B26  0E17               	movlw	23
  8821  001B28  0100               	movlb	0	; () banked
  8822  001B2A  658E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  8823  001B2C  D012               	goto	l4064
  8824                           
  8825                           ; BSR set to: 0
  8826  001B2E  0E00               	movlw	0
  8827  001B30  0100               	movlb	0	; () banked
  8828  001B32  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  8829  001B34  0E00               	movlw	0
  8830  001B36  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  8831  001B38  0E00               	movlw	0
  8832  001B3A  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  8833  001B3C  0E00               	movlw	0
  8834  001B3E  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  8835                           
  8836                           ; BSR set to: 0
  8837  001B40  0012               	return	
  8838  001B42                     l4062:
  8839                           
  8840                           ; BSR set to: 0
  8841  001B42  0100               	movlb	0	; () banked
  8842  001B44  90D8               	bcf	status,0,c
  8843  001B46  3789               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  8844  001B48  378A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  8845  001B4A  378B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  8846  001B4C  378C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  8847  001B4E  0100               	movlb	0	; () banked
  8848  001B50  078E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  8849  001B52                     l4064:
  8850                           
  8851                           ; BSR set to: 0
  8852  001B52  0100               	movlb	0	; () banked
  8853  001B54  518E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  8854  001B56  0100               	movlb	0	; () banked
  8855  001B58  A4D8               	btfss	status,2,c
  8856  001B5A  D7F3               	goto	l4062
  8857  001B5C                     l1054:
  8858                           
  8859                           ; BSR set to: 0
  8860  001B5C  C089  F080         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  8861  001B60  C08A  F081         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  8862  001B64  C08B  F082         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  8863  001B68  C08C  F083         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  8864                           
  8865                           ; BSR set to: 0
  8866  001B6C  0012               	return		;funcret
  8867  001B6E                     __end_of__tdiv_to_l_:
  8868                           	opt stack 0
  8869                           tblptru	equ	0xFF8
  8870                           tblptrh	equ	0xFF7
  8871                           tblptrl	equ	0xFF6
  8872                           tablat	equ	0xFF5
  8873                           prodh	equ	0xFF4
  8874                           prodl	equ	0xFF3
  8875                           intcon	equ	0xFF2
  8876                           postinc0	equ	0xFEE
  8877                           wreg	equ	0xFE8
  8878                           postdec1	equ	0xFE5
  8879                           fsr1l	equ	0xFE1
  8880                           indf2	equ	0xFDF
  8881                           postinc2	equ	0xFDE
  8882                           postdec2	equ	0xFDD
  8883                           fsr2h	equ	0xFDA
  8884                           fsr2l	equ	0xFD9
  8885                           status	equ	0xFD8
  8886                           
  8887 ;; *************** function __div_to_l_ *****************
  8888 ;; Defined at:
  8889 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  8890 ;; Parameters:    Size  Location     Type
  8891 ;;  f1              3    0[BANK0 ] unsigned long 
  8892 ;;  f2              3    3[BANK0 ] unsigned long 
  8893 ;; Auto vars:     Size  Location     Type
  8894 ;;  quot            4    6[BANK0 ] unsigned long 
  8895 ;;  exp1            1   11[BANK0 ] unsigned char 
  8896 ;;  cntr            1   10[BANK0 ] unsigned char 
  8897 ;; Return value:  Size  Location     Type
  8898 ;;                  4    0[BANK0 ] unsigned long 
  8899 ;; Registers used:
  8900 ;;		wreg, status,2, status,0
  8901 ;; Tracked objects:
  8902 ;;		On entry : 0/0
  8903 ;;		On exit  : 0/0
  8904 ;;		Unchanged: 0/0
  8905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8906 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8907 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8909 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8910 ;;Total ram usage:       12 bytes
  8911 ;; Hardware stack levels used:    1
  8912 ;; Hardware stack levels required when called:    5
  8913 ;; This function calls:
  8914 ;;		Nothing
  8915 ;; This function is called by:
  8916 ;;		_printf
  8917 ;; This function uses a non-reentrant model
  8918 ;;
  8919                           
  8920                           	psect	text33
  8921  001B6E                     __ptext33:
  8922                           	opt stack 0
  8923  001B6E                     __div_to_l_:
  8924                           	opt stack 23
  8925                           
  8926                           ; BSR set to: 0
  8927                           ;incstack = 0
  8928  001B6E  0100               	movlb	0	; () banked
  8929  001B70  3582               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
  8930  001B72  3583               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
  8931  001B74  0100               	movlb	0	; () banked
  8932  001B76  6F8B               	movwf	__div_to_l_@exp1& (0+255),b
  8933  001B78  0100               	movlb	0	; () banked
  8934  001B7A  518B               	movf	__div_to_l_@exp1& (0+255),w,b
  8935  001B7C  A4D8               	btfss	status,2,c
  8936  001B7E  D00A               	goto	l4072
  8937                           
  8938                           ; BSR set to: 0
  8939  001B80  0E00               	movlw	0
  8940  001B82  0100               	movlb	0	; () banked
  8941  001B84  6F80               	movwf	?__div_to_l_& (0+255),b
  8942  001B86  0E00               	movlw	0
  8943  001B88  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  8944  001B8A  0E00               	movlw	0
  8945  001B8C  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  8946  001B8E  0E00               	movlw	0
  8947  001B90  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  8948                           
  8949                           ; BSR set to: 0
  8950  001B92  0012               	return	
  8951  001B94                     l4072:
  8952                           
  8953                           ; BSR set to: 0
  8954  001B94  0100               	movlb	0	; () banked
  8955  001B96  3585               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
  8956  001B98  3586               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
  8957  001B9A  0100               	movlb	0	; () banked
  8958  001B9C  6F8A               	movwf	__div_to_l_@cntr& (0+255),b
  8959  001B9E  0100               	movlb	0	; () banked
  8960  001BA0  518A               	movf	__div_to_l_@cntr& (0+255),w,b
  8961  001BA2  A4D8               	btfss	status,2,c
  8962  001BA4  D00A               	goto	l4078
  8963                           
  8964                           ; BSR set to: 0
  8965  001BA6  0E00               	movlw	0
  8966  001BA8  0100               	movlb	0	; () banked
  8967  001BAA  6F80               	movwf	?__div_to_l_& (0+255),b
  8968  001BAC  0E00               	movlw	0
  8969  001BAE  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  8970  001BB0  0E00               	movlw	0
  8971  001BB2  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  8972  001BB4  0E00               	movlw	0
  8973  001BB6  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  8974                           
  8975                           ; BSR set to: 0
  8976  001BB8  0012               	return	
  8977  001BBA                     l4078:
  8978                           
  8979                           ; BSR set to: 0
  8980  001BBA  0100               	movlb	0	; () banked
  8981  001BBC  8F82               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
  8982                           
  8983                           ; BSR set to: 0
  8984  001BBE  0EFF               	movlw	255
  8985  001BC0  0100               	movlb	0	; () banked
  8986  001BC2  1780               	andwf	__div_to_l_@f1& (0+255),f,b
  8987  001BC4  0EFF               	movlw	255
  8988  001BC6  1781               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
  8989  001BC8  0EFF               	movlw	255
  8990  001BCA  1782               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
  8991  001BCC  0E00               	movlw	0
  8992  001BCE  1783               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
  8993                           
  8994                           ; BSR set to: 0
  8995  001BD0  0100               	movlb	0	; () banked
  8996  001BD2  8F85               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
  8997  001BD4  0EFF               	movlw	255
  8998  001BD6  0100               	movlb	0	; () banked
  8999  001BD8  1783               	andwf	__div_to_l_@f2& (0+255),f,b
  9000  001BDA  0EFF               	movlw	255
  9001  001BDC  1784               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
  9002  001BDE  0EFF               	movlw	255
  9003  001BE0  1785               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
  9004  001BE2  0E00               	movlw	0
  9005  001BE4  1786               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
  9006                           
  9007                           ; BSR set to: 0
  9008  001BE6  0E00               	movlw	0
  9009  001BE8  0100               	movlb	0	; () banked
  9010  001BEA  6F86               	movwf	__div_to_l_@quot& (0+255),b
  9011  001BEC  0E00               	movlw	0
  9012  001BEE  6F87               	movwf	(__div_to_l_@quot+1)& (0+255),b
  9013  001BF0  0E00               	movlw	0
  9014  001BF2  6F88               	movwf	(__div_to_l_@quot+2)& (0+255),b
  9015  001BF4  0E00               	movlw	0
  9016  001BF6  6F89               	movwf	(__div_to_l_@quot+3)& (0+255),b
  9017                           
  9018                           ; BSR set to: 0
  9019  001BF8  0E7F               	movlw	127
  9020  001BFA  0100               	movlb	0	; () banked
  9021  001BFC  5F8B               	subwf	__div_to_l_@exp1& (0+255),f,b
  9022                           
  9023                           ; BSR set to: 0
  9024  001BFE  0100               	movlb	0	; () banked
  9025  001C00  518A               	movf	__div_to_l_@cntr& (0+255),w,b
  9026  001C02  0FA0               	addlw	160
  9027  001C04  0100               	movlb	0	; () banked
  9028  001C06  5F8B               	subwf	__div_to_l_@exp1& (0+255),f,b
  9029                           
  9030                           ; BSR set to: 0
  9031  001C08  0E20               	movlw	32
  9032  001C0A  0100               	movlb	0	; () banked
  9033  001C0C  6F8A               	movwf	__div_to_l_@cntr& (0+255),b
  9034  001C0E                     l4092:
  9035                           
  9036                           ; BSR set to: 0
  9037  001C0E  0100               	movlb	0	; () banked
  9038  001C10  90D8               	bcf	status,0,c
  9039  001C12  3786               	rlcf	__div_to_l_@quot& (0+255),f,b
  9040  001C14  3787               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  9041  001C16  3788               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  9042  001C18  3789               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  9043                           
  9044                           ; BSR set to: 0
  9045  001C1A  0100               	movlb	0	; () banked
  9046  001C1C  5183               	movf	__div_to_l_@f2& (0+255),w,b
  9047  001C1E  0100               	movlb	0	; () banked
  9048  001C20  5D80               	subwf	__div_to_l_@f1& (0+255),w,b
  9049  001C22  0100               	movlb	0	; () banked
  9050  001C24  5184               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  9051  001C26  0100               	movlb	0	; () banked
  9052  001C28  5981               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
  9053  001C2A  0100               	movlb	0	; () banked
  9054  001C2C  5185               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  9055  001C2E  0100               	movlb	0	; () banked
  9056  001C30  5982               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
  9057  001C32  0100               	movlb	0	; () banked
  9058  001C34  5186               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  9059  001C36  0100               	movlb	0	; () banked
  9060  001C38  5983               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
  9061  001C3A  A0D8               	btfss	status,0,c
  9062  001C3C  D012               	goto	l4100
  9063                           
  9064                           ; BSR set to: 0
  9065  001C3E  0100               	movlb	0	; () banked
  9066  001C40  5183               	movf	__div_to_l_@f2& (0+255),w,b
  9067  001C42  0100               	movlb	0	; () banked
  9068  001C44  5F80               	subwf	__div_to_l_@f1& (0+255),f,b
  9069  001C46  0100               	movlb	0	; () banked
  9070  001C48  5184               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  9071  001C4A  0100               	movlb	0	; () banked
  9072  001C4C  5B81               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
  9073  001C4E  0100               	movlb	0	; () banked
  9074  001C50  5185               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  9075  001C52  0100               	movlb	0	; () banked
  9076  001C54  5B82               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
  9077  001C56  0100               	movlb	0	; () banked
  9078  001C58  5186               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  9079  001C5A  0100               	movlb	0	; () banked
  9080  001C5C  5B83               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
  9081                           
  9082                           ; BSR set to: 0
  9083  001C5E  0100               	movlb	0	; () banked
  9084  001C60  8186               	bsf	__div_to_l_@quot& (0+255),0,b
  9085  001C62                     l4100:
  9086                           
  9087                           ; BSR set to: 0
  9088  001C62  0100               	movlb	0	; () banked
  9089  001C64  90D8               	bcf	status,0,c
  9090  001C66  3780               	rlcf	__div_to_l_@f1& (0+255),f,b
  9091  001C68  3781               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
  9092  001C6A  3782               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
  9093  001C6C  3783               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
  9094                           
  9095                           ; BSR set to: 0
  9096  001C6E  0100               	movlb	0	; () banked
  9097  001C70  2F8A               	decfsz	__div_to_l_@cntr& (0+255),f,b
  9098  001C72  D7CD               	goto	l4092
  9099                           
  9100                           ; BSR set to: 0
  9101                           
  9102                           ; BSR set to: 0
  9103  001C74  0100               	movlb	0	; () banked
  9104  001C76  AF8B               	btfss	__div_to_l_@exp1& (0+255),7,b
  9105  001C78  D01A               	goto	l4116
  9106                           
  9107                           ; BSR set to: 0
  9108  001C7A  0100               	movlb	0	; () banked
  9109  001C7C  518B               	movf	__div_to_l_@exp1& (0+255),w,b
  9110  001C7E  0A80               	xorlw	128
  9111  001C80  0F9F               	addlw	159
  9112  001C82  B0D8               	btfsc	status,0,c
  9113  001C84  D00A               	goto	l4112
  9114                           
  9115                           ; BSR set to: 0
  9116  001C86  0E00               	movlw	0
  9117  001C88  0100               	movlb	0	; () banked
  9118  001C8A  6F80               	movwf	?__div_to_l_& (0+255),b
  9119  001C8C  0E00               	movlw	0
  9120  001C8E  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  9121  001C90  0E00               	movlw	0
  9122  001C92  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  9123  001C94  0E00               	movlw	0
  9124  001C96  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  9125                           
  9126                           ; BSR set to: 0
  9127  001C98  0012               	return	
  9128  001C9A                     l4112:
  9129                           
  9130                           ; BSR set to: 0
  9131  001C9A  0100               	movlb	0	; () banked
  9132  001C9C  90D8               	bcf	status,0,c
  9133  001C9E  3389               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  9134  001CA0  3388               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  9135  001CA2  3387               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  9136  001CA4  3386               	rrcf	__div_to_l_@quot& (0+255),f,b
  9137                           
  9138                           ; BSR set to: 0
  9139  001CA6  0100               	movlb	0	; () banked
  9140  001CA8  3F8B               	incfsz	__div_to_l_@exp1& (0+255),f,b
  9141  001CAA  D7F7               	goto	l4112
  9142                           
  9143                           ; BSR set to: 0
  9144  001CAC  D01B               	goto	l950
  9145  001CAE                     l4116:
  9146                           
  9147                           ; BSR set to: 0
  9148  001CAE  0E1F               	movlw	31
  9149  001CB0  0100               	movlb	0	; () banked
  9150  001CB2  658B               	cpfsgt	__div_to_l_@exp1& (0+255),b
  9151  001CB4  D012               	goto	l4124
  9152                           
  9153                           ; BSR set to: 0
  9154  001CB6  0E00               	movlw	0
  9155  001CB8  0100               	movlb	0	; () banked
  9156  001CBA  6F80               	movwf	?__div_to_l_& (0+255),b
  9157  001CBC  0E00               	movlw	0
  9158  001CBE  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  9159  001CC0  0E00               	movlw	0
  9160  001CC2  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  9161  001CC4  0E00               	movlw	0
  9162  001CC6  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  9163                           
  9164                           ; BSR set to: 0
  9165  001CC8  0012               	return	
  9166  001CCA                     l4122:
  9167                           
  9168                           ; BSR set to: 0
  9169  001CCA  0100               	movlb	0	; () banked
  9170  001CCC  90D8               	bcf	status,0,c
  9171  001CCE  3786               	rlcf	__div_to_l_@quot& (0+255),f,b
  9172  001CD0  3787               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  9173  001CD2  3788               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  9174  001CD4  3789               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  9175  001CD6  0100               	movlb	0	; () banked
  9176  001CD8  078B               	decf	__div_to_l_@exp1& (0+255),f,b
  9177  001CDA                     l4124:
  9178                           
  9179                           ; BSR set to: 0
  9180  001CDA  0100               	movlb	0	; () banked
  9181  001CDC  518B               	movf	__div_to_l_@exp1& (0+255),w,b
  9182  001CDE  0100               	movlb	0	; () banked
  9183  001CE0  A4D8               	btfss	status,2,c
  9184  001CE2  D7F3               	goto	l4122
  9185  001CE4                     l950:
  9186                           
  9187                           ; BSR set to: 0
  9188  001CE4  C086  F080         	movff	__div_to_l_@quot,?__div_to_l_
  9189  001CE8  C087  F081         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  9190  001CEC  C088  F082         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  9191  001CF0  C089  F083         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  9192                           
  9193                           ; BSR set to: 0
  9194  001CF4  0012               	return		;funcret
  9195  001CF6                     __end_of__div_to_l_:
  9196                           	opt stack 0
  9197                           tblptru	equ	0xFF8
  9198                           tblptrh	equ	0xFF7
  9199                           tblptrl	equ	0xFF6
  9200                           tablat	equ	0xFF5
  9201                           prodh	equ	0xFF4
  9202                           prodl	equ	0xFF3
  9203                           intcon	equ	0xFF2
  9204                           postinc0	equ	0xFEE
  9205                           wreg	equ	0xFE8
  9206                           postdec1	equ	0xFE5
  9207                           fsr1l	equ	0xFE1
  9208                           indf2	equ	0xFDF
  9209                           postinc2	equ	0xFDE
  9210                           postdec2	equ	0xFDD
  9211                           fsr2h	equ	0xFDA
  9212                           fsr2l	equ	0xFD9
  9213                           status	equ	0xFD8
  9214                           
  9215 ;; *************** function ___lltoft *****************
  9216 ;; Defined at:
  9217 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  9218 ;; Parameters:    Size  Location     Type
  9219 ;;  c               4    8[BANK0 ] unsigned long 
  9220 ;; Auto vars:     Size  Location     Type
  9221 ;;  exp             1   16[BANK0 ] unsigned char 
  9222 ;; Return value:  Size  Location     Type
  9223 ;;                  3    8[BANK0 ] float 
  9224 ;; Registers used:
  9225 ;;		wreg, status,2, status,0, cstack
  9226 ;; Tracked objects:
  9227 ;;		On entry : 0/0
  9228 ;;		On exit  : 0/0
  9229 ;;		Unchanged: 0/0
  9230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9231 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9232 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9233 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9234 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9235 ;;Total ram usage:        9 bytes
  9236 ;; Hardware stack levels used:    1
  9237 ;; Hardware stack levels required when called:    6
  9238 ;; This function calls:
  9239 ;;		___ftpack
  9240 ;; This function is called by:
  9241 ;;		_printf
  9242 ;; This function uses a non-reentrant model
  9243 ;;
  9244                           
  9245                           	psect	text34
  9246  003356                     __ptext34:
  9247                           	opt stack 0
  9248  003356                     ___lltoft:
  9249                           	opt stack 22
  9250                           
  9251                           ; BSR set to: 0
  9252                           ;incstack = 0
  9253  003356  0E8E               	movlw	142
  9254  003358  0100               	movlb	0	; () banked
  9255  00335A  6F90               	movwf	___lltoft@exp& (0+255),b
  9256  00335C  D008               	goto	l4198
  9257  00335E                     l4196:
  9258                           
  9259                           ; BSR set to: 0
  9260  00335E  0100               	movlb	0	; () banked
  9261  003360  90D8               	bcf	status,0,c
  9262  003362  338B               	rrcf	(___lltoft@c+3)& (0+255),f,b
  9263  003364  338A               	rrcf	(___lltoft@c+2)& (0+255),f,b
  9264  003366  3389               	rrcf	(___lltoft@c+1)& (0+255),f,b
  9265  003368  3388               	rrcf	___lltoft@c& (0+255),f,b
  9266  00336A  0100               	movlb	0	; () banked
  9267  00336C  2B90               	incf	___lltoft@exp& (0+255),f,b
  9268  00336E                     l4198:
  9269                           
  9270                           ; BSR set to: 0
  9271  00336E  0E00               	movlw	0
  9272  003370  0100               	movlb	0	; () banked
  9273  003372  1588               	andwf	___lltoft@c& (0+255),w,b
  9274  003374  0100               	movlb	0	; () banked
  9275  003376  6F8C               	movwf	??___lltoft& (0+255),b
  9276  003378  0E00               	movlw	0
  9277  00337A  0100               	movlb	0	; () banked
  9278  00337C  1589               	andwf	(___lltoft@c+1)& (0+255),w,b
  9279  00337E  0100               	movlb	0	; () banked
  9280  003380  6F8D               	movwf	(??___lltoft+1)& (0+255),b
  9281  003382  0E00               	movlw	0
  9282  003384  0100               	movlb	0	; () banked
  9283  003386  158A               	andwf	(___lltoft@c+2)& (0+255),w,b
  9284  003388  0100               	movlb	0	; () banked
  9285  00338A  6F8E               	movwf	(??___lltoft+2)& (0+255),b
  9286  00338C  0EFF               	movlw	255
  9287  00338E  0100               	movlb	0	; () banked
  9288  003390  158B               	andwf	(___lltoft@c+3)& (0+255),w,b
  9289  003392  0100               	movlb	0	; () banked
  9290  003394  6F8F               	movwf	(??___lltoft+3)& (0+255),b
  9291  003396  0100               	movlb	0	; () banked
  9292  003398  518C               	movf	??___lltoft& (0+255),w,b
  9293  00339A  0100               	movlb	0	; () banked
  9294  00339C  118D               	iorwf	(??___lltoft+1)& (0+255),w,b
  9295  00339E  0100               	movlb	0	; () banked
  9296  0033A0  118E               	iorwf	(??___lltoft+2)& (0+255),w,b
  9297  0033A2  0100               	movlb	0	; () banked
  9298  0033A4  118F               	iorwf	(??___lltoft+3)& (0+255),w,b
  9299  0033A6  A4D8               	btfss	status,2,c
  9300  0033A8  D7DA               	goto	l4196
  9301                           
  9302                           ; BSR set to: 0
  9303                           
  9304                           ; BSR set to: 0
  9305  0033AA  C088  F080         	movff	___lltoft@c,___ftpack@arg
  9306  0033AE  C089  F081         	movff	___lltoft@c+1,___ftpack@arg+1
  9307  0033B2  C08A  F082         	movff	___lltoft@c+2,___ftpack@arg+2
  9308  0033B6  C090  F083         	movff	___lltoft@exp,___ftpack@exp
  9309  0033BA  0E00               	movlw	0
  9310  0033BC  0100               	movlb	0	; () banked
  9311  0033BE  6F84               	movwf	___ftpack@sign& (0+255),b
  9312  0033C0  EC63  F012         	call	___ftpack	;wreg free
  9313  0033C4  C080  F088         	movff	?___ftpack,?___lltoft
  9314  0033C8  C081  F089         	movff	?___ftpack+1,?___lltoft+1
  9315  0033CC  C082  F08A         	movff	?___ftpack+2,?___lltoft+2
  9316  0033D0  0012               	return	
  9317  0033D2                     __end_of___lltoft:
  9318                           	opt stack 0
  9319                           tblptru	equ	0xFF8
  9320                           tblptrh	equ	0xFF7
  9321                           tblptrl	equ	0xFF6
  9322                           tablat	equ	0xFF5
  9323                           prodh	equ	0xFF4
  9324                           prodl	equ	0xFF3
  9325                           intcon	equ	0xFF2
  9326                           postinc0	equ	0xFEE
  9327                           wreg	equ	0xFE8
  9328                           postdec1	equ	0xFE5
  9329                           fsr1l	equ	0xFE1
  9330                           indf2	equ	0xFDF
  9331                           postinc2	equ	0xFDE
  9332                           postdec2	equ	0xFDD
  9333                           fsr2h	equ	0xFDA
  9334                           fsr2l	equ	0xFD9
  9335                           status	equ	0xFD8
  9336                           
  9337 ;; *************** function ___llmod *****************
  9338 ;; Defined at:
  9339 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  9340 ;; Parameters:    Size  Location     Type
  9341 ;;  dividend        4   13[BANK0 ] unsigned long 
  9342 ;;  divisor         4   17[BANK0 ] unsigned long 
  9343 ;; Auto vars:     Size  Location     Type
  9344 ;;  counter         1   21[BANK0 ] unsigned char 
  9345 ;; Return value:  Size  Location     Type
  9346 ;;                  4   13[BANK0 ] unsigned long 
  9347 ;; Registers used:
  9348 ;;		wreg, status,2, status,0
  9349 ;; Tracked objects:
  9350 ;;		On entry : 0/0
  9351 ;;		On exit  : 0/0
  9352 ;;		Unchanged: 0/0
  9353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9354 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9355 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9357 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9358 ;;Total ram usage:        9 bytes
  9359 ;; Hardware stack levels used:    1
  9360 ;; Hardware stack levels required when called:    5
  9361 ;; This function calls:
  9362 ;;		Nothing
  9363 ;; This function is called by:
  9364 ;;		_printf
  9365 ;; This function uses a non-reentrant model
  9366 ;;
  9367                           
  9368                           	psect	text35
  9369  0031AC                     __ptext35:
  9370                           	opt stack 0
  9371  0031AC                     ___llmod:
  9372                           	opt stack 23
  9373                           
  9374                           ;incstack = 0
  9375  0031AC  0100               	movlb	0	; () banked
  9376  0031AE  5191               	movf	___llmod@divisor& (0+255),w,b
  9377  0031B0  0100               	movlb	0	; () banked
  9378  0031B2  1192               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  9379  0031B4  0100               	movlb	0	; () banked
  9380  0031B6  1193               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  9381  0031B8  0100               	movlb	0	; () banked
  9382  0031BA  1194               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  9383  0031BC  B4D8               	btfsc	status,2,c
  9384  0031BE  D03A               	goto	l1134
  9385                           
  9386                           ; BSR set to: 0
  9387  0031C0  0E01               	movlw	1
  9388  0031C2  0100               	movlb	0	; () banked
  9389  0031C4  6F95               	movwf	___llmod@counter& (0+255),b
  9390  0031C6  D008               	goto	l4184
  9391  0031C8                     l4182:
  9392                           
  9393                           ; BSR set to: 0
  9394  0031C8  0100               	movlb	0	; () banked
  9395  0031CA  90D8               	bcf	status,0,c
  9396  0031CC  3791               	rlcf	___llmod@divisor& (0+255),f,b
  9397  0031CE  3792               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  9398  0031D0  3793               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  9399  0031D2  3794               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  9400  0031D4  0100               	movlb	0	; () banked
  9401  0031D6  2B95               	incf	___llmod@counter& (0+255),f,b
  9402  0031D8                     l4184:
  9403                           
  9404                           ; BSR set to: 0
  9405  0031D8  0100               	movlb	0	; () banked
  9406  0031DA  AF94               	btfss	(___llmod@divisor+3)& (0+255),7,b
  9407  0031DC  D7F5               	goto	l4182
  9408  0031DE                     l4186:
  9409                           
  9410                           ; BSR set to: 0
  9411  0031DE  0100               	movlb	0	; () banked
  9412  0031E0  5191               	movf	___llmod@divisor& (0+255),w,b
  9413  0031E2  0100               	movlb	0	; () banked
  9414  0031E4  5D8D               	subwf	___llmod@dividend& (0+255),w,b
  9415  0031E6  0100               	movlb	0	; () banked
  9416  0031E8  5192               	movf	(___llmod@divisor+1)& (0+255),w,b
  9417  0031EA  0100               	movlb	0	; () banked
  9418  0031EC  598E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  9419  0031EE  0100               	movlb	0	; () banked
  9420  0031F0  5193               	movf	(___llmod@divisor+2)& (0+255),w,b
  9421  0031F2  0100               	movlb	0	; () banked
  9422  0031F4  598F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  9423  0031F6  0100               	movlb	0	; () banked
  9424  0031F8  5194               	movf	(___llmod@divisor+3)& (0+255),w,b
  9425  0031FA  0100               	movlb	0	; () banked
  9426  0031FC  5990               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  9427  0031FE  A0D8               	btfss	status,0,c
  9428  003200  D010               	goto	l4190
  9429                           
  9430                           ; BSR set to: 0
  9431  003202  0100               	movlb	0	; () banked
  9432  003204  5191               	movf	___llmod@divisor& (0+255),w,b
  9433  003206  0100               	movlb	0	; () banked
  9434  003208  5F8D               	subwf	___llmod@dividend& (0+255),f,b
  9435  00320A  0100               	movlb	0	; () banked
  9436  00320C  5192               	movf	(___llmod@divisor+1)& (0+255),w,b
  9437  00320E  0100               	movlb	0	; () banked
  9438  003210  5B8E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  9439  003212  0100               	movlb	0	; () banked
  9440  003214  5193               	movf	(___llmod@divisor+2)& (0+255),w,b
  9441  003216  0100               	movlb	0	; () banked
  9442  003218  5B8F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  9443  00321A  0100               	movlb	0	; () banked
  9444  00321C  5194               	movf	(___llmod@divisor+3)& (0+255),w,b
  9445  00321E  0100               	movlb	0	; () banked
  9446  003220  5B90               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  9447  003222                     l4190:
  9448                           
  9449                           ; BSR set to: 0
  9450  003222  0100               	movlb	0	; () banked
  9451  003224  90D8               	bcf	status,0,c
  9452  003226  3394               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  9453  003228  3393               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  9454  00322A  3392               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  9455  00322C  3391               	rrcf	___llmod@divisor& (0+255),f,b
  9456                           
  9457                           ; BSR set to: 0
  9458  00322E  0100               	movlb	0	; () banked
  9459  003230  2F95               	decfsz	___llmod@counter& (0+255),f,b
  9460  003232  D7D5               	goto	l4186
  9461  003234                     l1134:
  9462                           
  9463                           ; BSR set to: 0
  9464  003234  C08D  F08D         	movff	___llmod@dividend,?___llmod
  9465  003238  C08E  F08E         	movff	___llmod@dividend+1,?___llmod+1
  9466  00323C  C08F  F08F         	movff	___llmod@dividend+2,?___llmod+2
  9467  003240  C090  F090         	movff	___llmod@dividend+3,?___llmod+3
  9468                           
  9469                           ; BSR set to: 0
  9470  003244  0012               	return		;funcret
  9471  003246                     __end_of___llmod:
  9472                           	opt stack 0
  9473                           tblptru	equ	0xFF8
  9474                           tblptrh	equ	0xFF7
  9475                           tblptrl	equ	0xFF6
  9476                           tablat	equ	0xFF5
  9477                           prodh	equ	0xFF4
  9478                           prodl	equ	0xFF3
  9479                           intcon	equ	0xFF2
  9480                           postinc0	equ	0xFEE
  9481                           wreg	equ	0xFE8
  9482                           postdec1	equ	0xFE5
  9483                           fsr1l	equ	0xFE1
  9484                           indf2	equ	0xFDF
  9485                           postinc2	equ	0xFDE
  9486                           postdec2	equ	0xFDD
  9487                           fsr2h	equ	0xFDA
  9488                           fsr2l	equ	0xFD9
  9489                           status	equ	0xFD8
  9490                           
  9491 ;; *************** function ___lldiv *****************
  9492 ;; Defined at:
  9493 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  9494 ;; Parameters:    Size  Location     Type
  9495 ;;  dividend        4    0[BANK0 ] unsigned long 
  9496 ;;  divisor         4    4[BANK0 ] unsigned long 
  9497 ;; Auto vars:     Size  Location     Type
  9498 ;;  quotient        4    8[BANK0 ] unsigned long 
  9499 ;;  counter         1   12[BANK0 ] unsigned char 
  9500 ;; Return value:  Size  Location     Type
  9501 ;;                  4    0[BANK0 ] unsigned long 
  9502 ;; Registers used:
  9503 ;;		wreg, status,2, status,0
  9504 ;; Tracked objects:
  9505 ;;		On entry : 0/0
  9506 ;;		On exit  : 0/0
  9507 ;;		Unchanged: 0/0
  9508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9509 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9510 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9512 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9513 ;;Total ram usage:       13 bytes
  9514 ;; Hardware stack levels used:    1
  9515 ;; Hardware stack levels required when called:    5
  9516 ;; This function calls:
  9517 ;;		Nothing
  9518 ;; This function is called by:
  9519 ;;		_printf
  9520 ;;		_I2C_Master_Init
  9521 ;; This function uses a non-reentrant model
  9522 ;;
  9523                           
  9524                           	psect	text36
  9525  002CF2                     __ptext36:
  9526                           	opt stack 0
  9527  002CF2                     ___lldiv:
  9528                           	opt stack 23
  9529                           
  9530                           ; BSR set to: 0
  9531                           ;incstack = 0
  9532  002CF2  0E00               	movlw	0
  9533  002CF4  0100               	movlb	0	; () banked
  9534  002CF6  6F88               	movwf	___lldiv@quotient& (0+255),b
  9535  002CF8  0E00               	movlw	0
  9536  002CFA  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  9537  002CFC  0E00               	movlw	0
  9538  002CFE  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  9539  002D00  0E00               	movlw	0
  9540  002D02  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  9541                           
  9542                           ; BSR set to: 0
  9543  002D04  0100               	movlb	0	; () banked
  9544  002D06  5184               	movf	___lldiv@divisor& (0+255),w,b
  9545  002D08  0100               	movlb	0	; () banked
  9546  002D0A  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  9547  002D0C  0100               	movlb	0	; () banked
  9548  002D0E  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  9549  002D10  0100               	movlb	0	; () banked
  9550  002D12  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  9551  002D14  B4D8               	btfsc	status,2,c
  9552  002D16  D042               	goto	l1124
  9553                           
  9554                           ; BSR set to: 0
  9555  002D18  0E01               	movlw	1
  9556  002D1A  0100               	movlb	0	; () banked
  9557  002D1C  6F8C               	movwf	___lldiv@counter& (0+255),b
  9558  002D1E  D008               	goto	l4164
  9559  002D20                     l4162:
  9560                           
  9561                           ; BSR set to: 0
  9562  002D20  0100               	movlb	0	; () banked
  9563  002D22  90D8               	bcf	status,0,c
  9564  002D24  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  9565  002D26  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  9566  002D28  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  9567  002D2A  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  9568  002D2C  0100               	movlb	0	; () banked
  9569  002D2E  2B8C               	incf	___lldiv@counter& (0+255),f,b
  9570  002D30                     l4164:
  9571                           
  9572                           ; BSR set to: 0
  9573  002D30  0100               	movlb	0	; () banked
  9574  002D32  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  9575  002D34  D7F5               	goto	l4162
  9576  002D36                     l4166:
  9577                           
  9578                           ; BSR set to: 0
  9579  002D36  0100               	movlb	0	; () banked
  9580  002D38  90D8               	bcf	status,0,c
  9581  002D3A  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  9582  002D3C  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  9583  002D3E  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  9584  002D40  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  9585                           
  9586                           ; BSR set to: 0
  9587  002D42  0100               	movlb	0	; () banked
  9588  002D44  5184               	movf	___lldiv@divisor& (0+255),w,b
  9589  002D46  0100               	movlb	0	; () banked
  9590  002D48  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  9591  002D4A  0100               	movlb	0	; () banked
  9592  002D4C  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  9593  002D4E  0100               	movlb	0	; () banked
  9594  002D50  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  9595  002D52  0100               	movlb	0	; () banked
  9596  002D54  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  9597  002D56  0100               	movlb	0	; () banked
  9598  002D58  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  9599  002D5A  0100               	movlb	0	; () banked
  9600  002D5C  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  9601  002D5E  0100               	movlb	0	; () banked
  9602  002D60  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  9603  002D62  A0D8               	btfss	status,0,c
  9604  002D64  D012               	goto	l4174
  9605                           
  9606                           ; BSR set to: 0
  9607  002D66  0100               	movlb	0	; () banked
  9608  002D68  5184               	movf	___lldiv@divisor& (0+255),w,b
  9609  002D6A  0100               	movlb	0	; () banked
  9610  002D6C  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  9611  002D6E  0100               	movlb	0	; () banked
  9612  002D70  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  9613  002D72  0100               	movlb	0	; () banked
  9614  002D74  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  9615  002D76  0100               	movlb	0	; () banked
  9616  002D78  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  9617  002D7A  0100               	movlb	0	; () banked
  9618  002D7C  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  9619  002D7E  0100               	movlb	0	; () banked
  9620  002D80  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  9621  002D82  0100               	movlb	0	; () banked
  9622  002D84  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  9623                           
  9624                           ; BSR set to: 0
  9625  002D86  0100               	movlb	0	; () banked
  9626  002D88  8188               	bsf	___lldiv@quotient& (0+255),0,b
  9627  002D8A                     l4174:
  9628                           
  9629                           ; BSR set to: 0
  9630  002D8A  0100               	movlb	0	; () banked
  9631  002D8C  90D8               	bcf	status,0,c
  9632  002D8E  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  9633  002D90  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  9634  002D92  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  9635  002D94  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  9636                           
  9637                           ; BSR set to: 0
  9638  002D96  0100               	movlb	0	; () banked
  9639  002D98  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  9640  002D9A  D7CD               	goto	l4166
  9641  002D9C                     l1124:
  9642                           
  9643                           ; BSR set to: 0
  9644  002D9C  C088  F080         	movff	___lldiv@quotient,?___lldiv
  9645  002DA0  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  9646  002DA4  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  9647  002DA8  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  9648                           
  9649                           ; BSR set to: 0
  9650  002DAC  0012               	return		;funcret
  9651  002DAE                     __end_of___lldiv:
  9652                           	opt stack 0
  9653                           tblptru	equ	0xFF8
  9654                           tblptrh	equ	0xFF7
  9655                           tblptrl	equ	0xFF6
  9656                           tablat	equ	0xFF5
  9657                           prodh	equ	0xFF4
  9658                           prodl	equ	0xFF3
  9659                           intcon	equ	0xFF2
  9660                           postinc0	equ	0xFEE
  9661                           wreg	equ	0xFE8
  9662                           postdec1	equ	0xFE5
  9663                           fsr1l	equ	0xFE1
  9664                           indf2	equ	0xFDF
  9665                           postinc2	equ	0xFDE
  9666                           postdec2	equ	0xFDD
  9667                           fsr2h	equ	0xFDA
  9668                           fsr2l	equ	0xFD9
  9669                           status	equ	0xFD8
  9670                           
  9671 ;; *************** function ___fttol *****************
  9672 ;; Defined at:
  9673 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  9674 ;; Parameters:    Size  Location     Type
  9675 ;;  f1              3   70[BANK0 ] float 
  9676 ;; Auto vars:     Size  Location     Type
  9677 ;;  lval            4   80[BANK0 ] unsigned long 
  9678 ;;  exp1            1   84[BANK0 ] unsigned char 
  9679 ;;  sign1           1   79[BANK0 ] unsigned char 
  9680 ;; Return value:  Size  Location     Type
  9681 ;;                  4   70[BANK0 ] long 
  9682 ;; Registers used:
  9683 ;;		wreg, status,2, status,0
  9684 ;; Tracked objects:
  9685 ;;		On entry : 0/0
  9686 ;;		On exit  : 0/0
  9687 ;;		Unchanged: 0/0
  9688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9689 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9690 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9691 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9692 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9693 ;;Total ram usage:       15 bytes
  9694 ;; Hardware stack levels used:    1
  9695 ;; Hardware stack levels required when called:    5
  9696 ;; This function calls:
  9697 ;;		Nothing
  9698 ;; This function is called by:
  9699 ;;		_angleToPulse
  9700 ;;		_printf
  9701 ;; This function uses a non-reentrant model
  9702 ;;
  9703                           
  9704                           	psect	text37
  9705  002106                     __ptext37:
  9706                           	opt stack 0
  9707  002106                     ___fttol:
  9708                           	opt stack 22
  9709                           
  9710                           ; BSR set to: 0
  9711                           ;incstack = 0
  9712  002106  C0C8  F0CA         	movff	___fttol@f1+2,??___fttol
  9713  00210A  0100               	movlb	0	; () banked
  9714  00210C  6BCB               	clrf	(??___fttol+1)& (0+255),b
  9715  00210E  6BCC               	clrf	(??___fttol+2)& (0+255),b
  9716  002110  0100               	movlb	0	; () banked
  9717  002112  35C7               	rlcf	(___fttol@f1+1)& (0+255),w,b
  9718  002114  0100               	movlb	0	; () banked
  9719  002116  37CA               	rlcf	??___fttol& (0+255),f,b
  9720  002118  E301               	bnc	u3331
  9721  00211A  81CB               	bsf	(??___fttol+1)& (0+255),0,b
  9722  00211C                     u3331:
  9723  00211C  0100               	movlb	0	; () banked
  9724  00211E  51CA               	movf	??___fttol& (0+255),w,b
  9725  002120  0100               	movlb	0	; () banked
  9726  002122  6FD4               	movwf	___fttol@exp1& (0+255),b
  9727  002124  0100               	movlb	0	; () banked
  9728  002126  51D4               	movf	___fttol@exp1& (0+255),w,b
  9729  002128  A4D8               	btfss	status,2,c
  9730  00212A  D00A               	goto	l3894
  9731                           
  9732                           ; BSR set to: 0
  9733  00212C  0E00               	movlw	0
  9734  00212E  0100               	movlb	0	; () banked
  9735  002130  6FC6               	movwf	?___fttol& (0+255),b
  9736  002132  0E00               	movlw	0
  9737  002134  6FC7               	movwf	(?___fttol+1)& (0+255),b
  9738  002136  0E00               	movlw	0
  9739  002138  6FC8               	movwf	(?___fttol+2)& (0+255),b
  9740  00213A  0E00               	movlw	0
  9741  00213C  6FC9               	movwf	(?___fttol+3)& (0+255),b
  9742                           
  9743                           ; BSR set to: 0
  9744  00213E  0012               	return	
  9745  002140                     l3894:
  9746                           
  9747                           ; BSR set to: 0
  9748  002140  0E17               	movlw	23
  9749  002142  0100               	movlb	0	; () banked
  9750  002144  6FCA               	movwf	??___fttol& (0+255),b
  9751  002146  C0C6  F0CB         	movff	___fttol@f1,??___fttol+1
  9752  00214A  C0C7  F0CC         	movff	___fttol@f1+1,??___fttol+2
  9753  00214E  C0C8  F0CD         	movff	___fttol@f1+2,??___fttol+3
  9754  002152  0100               	movlb	0	; () banked
  9755  002154  29CA               	incf	??___fttol& (0+255),w,b
  9756  002156  0100               	movlb	0	; () banked
  9757  002158  6FCE               	movwf	(??___fttol+4)& (0+255),b
  9758  00215A  D005               	goto	u3350
  9759  00215C                     u3355:
  9760  00215C  0100               	movlb	0	; () banked
  9761  00215E  90D8               	bcf	status,0,c
  9762  002160  33CD               	rrcf	(??___fttol+3)& (0+255),f,b
  9763  002162  33CC               	rrcf	(??___fttol+2)& (0+255),f,b
  9764  002164  33CB               	rrcf	(??___fttol+1)& (0+255),f,b
  9765  002166                     u3350:
  9766  002166  0100               	movlb	0	; () banked
  9767  002168  2FCE               	decfsz	(??___fttol+4)& (0+255),f,b
  9768  00216A  D7F8               	goto	u3355
  9769  00216C  0100               	movlb	0	; () banked
  9770  00216E  51CB               	movf	(??___fttol+1)& (0+255),w,b
  9771  002170  0100               	movlb	0	; () banked
  9772  002172  6FCF               	movwf	___fttol@sign1& (0+255),b
  9773                           
  9774                           ; BSR set to: 0
  9775  002174  0100               	movlb	0	; () banked
  9776  002176  8FC7               	bsf	(___fttol@f1+1)& (0+255),7,b
  9777                           
  9778                           ; BSR set to: 0
  9779  002178  0EFF               	movlw	255
  9780  00217A  0100               	movlb	0	; () banked
  9781  00217C  17C6               	andwf	___fttol@f1& (0+255),f,b
  9782  00217E  0EFF               	movlw	255
  9783  002180  0100               	movlb	0	; () banked
  9784  002182  17C7               	andwf	(___fttol@f1+1)& (0+255),f,b
  9785  002184  0E00               	movlw	0
  9786  002186  0100               	movlb	0	; () banked
  9787  002188  17C8               	andwf	(___fttol@f1+2)& (0+255),f,b
  9788                           
  9789                           ; BSR set to: 0
  9790  00218A  0100               	movlb	0	; () banked
  9791  00218C  51C6               	movf	___fttol@f1& (0+255),w,b
  9792  00218E  0100               	movlb	0	; () banked
  9793  002190  6FD0               	movwf	___fttol@lval& (0+255),b
  9794  002192  0100               	movlb	0	; () banked
  9795  002194  51C7               	movf	(___fttol@f1+1)& (0+255),w,b
  9796  002196  0100               	movlb	0	; () banked
  9797  002198  6FD1               	movwf	(___fttol@lval+1)& (0+255),b
  9798  00219A  0100               	movlb	0	; () banked
  9799  00219C  51C8               	movf	(___fttol@f1+2)& (0+255),w,b
  9800  00219E  0100               	movlb	0	; () banked
  9801  0021A0  6FD2               	movwf	(___fttol@lval+2)& (0+255),b
  9802  0021A2  0100               	movlb	0	; () banked
  9803  0021A4  6BD3               	clrf	(___fttol@lval+3)& (0+255),b
  9804                           
  9805                           ; BSR set to: 0
  9806  0021A6  0E8E               	movlw	142
  9807  0021A8  0100               	movlb	0	; () banked
  9808  0021AA  5FD4               	subwf	___fttol@exp1& (0+255),f,b
  9809                           
  9810                           ; BSR set to: 0
  9811  0021AC  0100               	movlb	0	; () banked
  9812  0021AE  AFD4               	btfss	___fttol@exp1& (0+255),7,b
  9813  0021B0  D01A               	goto	l3916
  9814                           
  9815                           ; BSR set to: 0
  9816  0021B2  0100               	movlb	0	; () banked
  9817  0021B4  51D4               	movf	___fttol@exp1& (0+255),w,b
  9818  0021B6  0A80               	xorlw	128
  9819  0021B8  0F8F               	addlw	143
  9820  0021BA  B0D8               	btfsc	status,0,c
  9821  0021BC  D00A               	goto	l3912
  9822                           
  9823                           ; BSR set to: 0
  9824  0021BE  0E00               	movlw	0
  9825  0021C0  0100               	movlb	0	; () banked
  9826  0021C2  6FC6               	movwf	?___fttol& (0+255),b
  9827  0021C4  0E00               	movlw	0
  9828  0021C6  6FC7               	movwf	(?___fttol+1)& (0+255),b
  9829  0021C8  0E00               	movlw	0
  9830  0021CA  6FC8               	movwf	(?___fttol+2)& (0+255),b
  9831  0021CC  0E00               	movlw	0
  9832  0021CE  6FC9               	movwf	(?___fttol+3)& (0+255),b
  9833                           
  9834                           ; BSR set to: 0
  9835  0021D0  0012               	return	
  9836  0021D2                     l3912:
  9837                           
  9838                           ; BSR set to: 0
  9839  0021D2  0100               	movlb	0	; () banked
  9840  0021D4  90D8               	bcf	status,0,c
  9841  0021D6  33D3               	rrcf	(___fttol@lval+3)& (0+255),f,b
  9842  0021D8  33D2               	rrcf	(___fttol@lval+2)& (0+255),f,b
  9843  0021DA  33D1               	rrcf	(___fttol@lval+1)& (0+255),f,b
  9844  0021DC  33D0               	rrcf	___fttol@lval& (0+255),f,b
  9845                           
  9846                           ; BSR set to: 0
  9847  0021DE  0100               	movlb	0	; () banked
  9848  0021E0  3FD4               	incfsz	___fttol@exp1& (0+255),f,b
  9849  0021E2  D7F7               	goto	l3912
  9850                           
  9851                           ; BSR set to: 0
  9852  0021E4  D01B               	goto	l3926
  9853  0021E6                     l3916:
  9854                           
  9855                           ; BSR set to: 0
  9856  0021E6  0E17               	movlw	23
  9857  0021E8  0100               	movlb	0	; () banked
  9858  0021EA  65D4               	cpfsgt	___fttol@exp1& (0+255),b
  9859  0021EC  D012               	goto	l3924
  9860                           
  9861                           ; BSR set to: 0
  9862  0021EE  0E00               	movlw	0
  9863  0021F0  0100               	movlb	0	; () banked
  9864  0021F2  6FC6               	movwf	?___fttol& (0+255),b
  9865  0021F4  0E00               	movlw	0
  9866  0021F6  6FC7               	movwf	(?___fttol+1)& (0+255),b
  9867  0021F8  0E00               	movlw	0
  9868  0021FA  6FC8               	movwf	(?___fttol+2)& (0+255),b
  9869  0021FC  0E00               	movlw	0
  9870  0021FE  6FC9               	movwf	(?___fttol+3)& (0+255),b
  9871                           
  9872                           ; BSR set to: 0
  9873  002200  0012               	return	
  9874  002202                     l3922:
  9875                           
  9876                           ; BSR set to: 0
  9877  002202  0100               	movlb	0	; () banked
  9878  002204  90D8               	bcf	status,0,c
  9879  002206  37D0               	rlcf	___fttol@lval& (0+255),f,b
  9880  002208  37D1               	rlcf	(___fttol@lval+1)& (0+255),f,b
  9881  00220A  37D2               	rlcf	(___fttol@lval+2)& (0+255),f,b
  9882  00220C  37D3               	rlcf	(___fttol@lval+3)& (0+255),f,b
  9883  00220E  0100               	movlb	0	; () banked
  9884  002210  07D4               	decf	___fttol@exp1& (0+255),f,b
  9885  002212                     l3924:
  9886                           
  9887                           ; BSR set to: 0
  9888  002212  0100               	movlb	0	; () banked
  9889  002214  51D4               	movf	___fttol@exp1& (0+255),w,b
  9890  002216  0100               	movlb	0	; () banked
  9891  002218  A4D8               	btfss	status,2,c
  9892  00221A  D7F3               	goto	l3922
  9893  00221C                     l3926:
  9894                           
  9895                           ; BSR set to: 0
  9896  00221C  0100               	movlb	0	; () banked
  9897  00221E  51CF               	movf	___fttol@sign1& (0+255),w,b
  9898  002220  0100               	movlb	0	; () banked
  9899  002222  B4D8               	btfsc	status,2,c
  9900  002224  D009               	goto	l3930
  9901                           
  9902                           ; BSR set to: 0
  9903  002226  0100               	movlb	0	; () banked
  9904  002228  1FD3               	comf	(___fttol@lval+3)& (0+255),f,b
  9905  00222A  1FD2               	comf	(___fttol@lval+2)& (0+255),f,b
  9906  00222C  1FD1               	comf	(___fttol@lval+1)& (0+255),f,b
  9907  00222E  6DD0               	negf	___fttol@lval& (0+255),b
  9908  002230  0E00               	movlw	0
  9909  002232  23D1               	addwfc	(___fttol@lval+1)& (0+255),f,b
  9910  002234  23D2               	addwfc	(___fttol@lval+2)& (0+255),f,b
  9911  002236  23D3               	addwfc	(___fttol@lval+3)& (0+255),f,b
  9912  002238                     l3930:
  9913                           
  9914                           ; BSR set to: 0
  9915  002238  C0D0  F0C6         	movff	___fttol@lval,?___fttol
  9916  00223C  C0D1  F0C7         	movff	___fttol@lval+1,?___fttol+1
  9917  002240  C0D2  F0C8         	movff	___fttol@lval+2,?___fttol+2
  9918  002244  C0D3  F0C9         	movff	___fttol@lval+3,?___fttol+3
  9919  002248  0012               	return	
  9920  00224A                     __end_of___fttol:
  9921                           	opt stack 0
  9922                           tblptru	equ	0xFF8
  9923                           tblptrh	equ	0xFF7
  9924                           tblptrl	equ	0xFF6
  9925                           tablat	equ	0xFF5
  9926                           prodh	equ	0xFF4
  9927                           prodl	equ	0xFF3
  9928                           intcon	equ	0xFF2
  9929                           postinc0	equ	0xFEE
  9930                           wreg	equ	0xFE8
  9931                           postdec1	equ	0xFE5
  9932                           fsr1l	equ	0xFE1
  9933                           indf2	equ	0xFDF
  9934                           postinc2	equ	0xFDE
  9935                           postdec2	equ	0xFDD
  9936                           fsr2h	equ	0xFDA
  9937                           fsr2l	equ	0xFD9
  9938                           status	equ	0xFD8
  9939                           
  9940 ;; *************** function ___ftsub *****************
  9941 ;; Defined at:
  9942 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  9943 ;; Parameters:    Size  Location     Type
  9944 ;;  f1              3   70[BANK0 ] float 
  9945 ;;  f2              3   73[BANK0 ] float 
  9946 ;; Auto vars:     Size  Location     Type
  9947 ;;		None
  9948 ;; Return value:  Size  Location     Type
  9949 ;;                  3   70[BANK0 ] float 
  9950 ;; Registers used:
  9951 ;;		wreg, status,2, status,0, cstack
  9952 ;; Tracked objects:
  9953 ;;		On entry : 0/0
  9954 ;;		On exit  : 0/0
  9955 ;;		Unchanged: 0/0
  9956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9957 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9960 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9961 ;;Total ram usage:        6 bytes
  9962 ;; Hardware stack levels used:    1
  9963 ;; Hardware stack levels required when called:    7
  9964 ;; This function calls:
  9965 ;;		___ftadd
  9966 ;; This function is called by:
  9967 ;;		_printf
  9968 ;; This function uses a non-reentrant model
  9969 ;;
  9970                           
  9971                           	psect	text38
  9972  0035CC                     __ptext38:
  9973                           	opt stack 0
  9974  0035CC                     ___ftsub:
  9975                           	opt stack 21
  9976                           
  9977                           ; BSR set to: 0
  9978                           ;incstack = 0
  9979  0035CC  0100               	movlb	0	; () banked
  9980  0035CE  51C9               	movf	___ftsub@f2& (0+255),w,b
  9981  0035D0  0100               	movlb	0	; () banked
  9982  0035D2  11CA               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  9983  0035D4  0100               	movlb	0	; () banked
  9984  0035D6  11CB               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  9985  0035D8  B4D8               	btfsc	status,2,c
  9986  0035DA  D009               	goto	l4130
  9987                           
  9988                           ; BSR set to: 0
  9989  0035DC  0E00               	movlw	0
  9990  0035DE  0100               	movlb	0	; () banked
  9991  0035E0  1BC9               	xorwf	___ftsub@f2& (0+255),f,b
  9992  0035E2  0E00               	movlw	0
  9993  0035E4  0100               	movlb	0	; () banked
  9994  0035E6  1BCA               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  9995  0035E8  0E80               	movlw	128
  9996  0035EA  0100               	movlb	0	; () banked
  9997  0035EC  1BCB               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  9998  0035EE                     l4130:
  9999                           
 10000                           ; BSR set to: 0
 10001  0035EE  C0C6  F0BA         	movff	___ftsub@f1,___ftadd@f1
 10002  0035F2  C0C7  F0BB         	movff	___ftsub@f1+1,___ftadd@f1+1
 10003  0035F6  C0C8  F0BC         	movff	___ftsub@f1+2,___ftadd@f1+2
 10004  0035FA  C0C9  F0BD         	movff	___ftsub@f2,___ftadd@f2
 10005  0035FE  C0CA  F0BE         	movff	___ftsub@f2+1,___ftadd@f2+1
 10006  003602  C0CB  F0BF         	movff	___ftsub@f2+2,___ftadd@f2+2
 10007  003606  ECF4  F009         	call	___ftadd	;wreg free
 10008  00360A  C0BA  F0C6         	movff	?___ftadd,?___ftsub
 10009  00360E  C0BB  F0C7         	movff	?___ftadd+1,?___ftsub+1
 10010  003612  C0BC  F0C8         	movff	?___ftadd+2,?___ftsub+2
 10011  003616  0012               	return	
 10012  003618                     __end_of___ftsub:
 10013                           	opt stack 0
 10014                           tblptru	equ	0xFF8
 10015                           tblptrh	equ	0xFF7
 10016                           tblptrl	equ	0xFF6
 10017                           tablat	equ	0xFF5
 10018                           prodh	equ	0xFF4
 10019                           prodl	equ	0xFF3
 10020                           intcon	equ	0xFF2
 10021                           postinc0	equ	0xFEE
 10022                           wreg	equ	0xFE8
 10023                           postdec1	equ	0xFE5
 10024                           fsr1l	equ	0xFE1
 10025                           indf2	equ	0xFDF
 10026                           postinc2	equ	0xFDE
 10027                           postdec2	equ	0xFDD
 10028                           fsr2h	equ	0xFDA
 10029                           fsr2l	equ	0xFD9
 10030                           status	equ	0xFD8
 10031                           
 10032 ;; *************** function ___ftadd *****************
 10033 ;; Defined at:
 10034 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 10035 ;; Parameters:    Size  Location     Type
 10036 ;;  f1              3   58[BANK0 ] float 
 10037 ;;  f2              3   61[BANK0 ] float 
 10038 ;; Auto vars:     Size  Location     Type
 10039 ;;  exp1            1   69[BANK0 ] unsigned char 
 10040 ;;  exp2            1   68[BANK0 ] unsigned char 
 10041 ;;  sign            1   67[BANK0 ] unsigned char 
 10042 ;; Return value:  Size  Location     Type
 10043 ;;                  3   58[BANK0 ] float 
 10044 ;; Registers used:
 10045 ;;		wreg, status,2, status,0, cstack
 10046 ;; Tracked objects:
 10047 ;;		On entry : 0/0
 10048 ;;		On exit  : 0/0
 10049 ;;		Unchanged: 0/0
 10050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10051 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10052 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10053 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10054 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10055 ;;Total ram usage:       12 bytes
 10056 ;; Hardware stack levels used:    1
 10057 ;; Hardware stack levels required when called:    6
 10058 ;; This function calls:
 10059 ;;		___ftpack
 10060 ;; This function is called by:
 10061 ;;		_angleToPulse
 10062 ;;		_printf
 10063 ;;		___ftsub
 10064 ;; This function uses a non-reentrant model
 10065 ;;
 10066                           
 10067                           	psect	text39
 10068  0013E8                     __ptext39:
 10069                           	opt stack 0
 10070  0013E8                     ___ftadd:
 10071                           	opt stack 21
 10072                           
 10073                           ;incstack = 0
 10074  0013E8  C0BC  F0C0         	movff	___ftadd@f1+2,??___ftadd
 10075  0013EC  0100               	movlb	0	; () banked
 10076  0013EE  6BC1               	clrf	(??___ftadd+1)& (0+255),b
 10077  0013F0  6BC2               	clrf	(??___ftadd+2)& (0+255),b
 10078  0013F2  0100               	movlb	0	; () banked
 10079  0013F4  35BB               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 10080  0013F6  0100               	movlb	0	; () banked
 10081  0013F8  37C0               	rlcf	??___ftadd& (0+255),f,b
 10082  0013FA  E301               	bnc	u2881
 10083  0013FC  81C1               	bsf	(??___ftadd+1)& (0+255),0,b
 10084  0013FE                     u2881:
 10085  0013FE  0100               	movlb	0	; () banked
 10086  001400  51C0               	movf	??___ftadd& (0+255),w,b
 10087  001402  0100               	movlb	0	; () banked
 10088  001404  6FC5               	movwf	___ftadd@exp1& (0+255),b
 10089  001406  C0BF  F0C0         	movff	___ftadd@f2+2,??___ftadd
 10090  00140A  0100               	movlb	0	; () banked
 10091  00140C  6BC1               	clrf	(??___ftadd+1)& (0+255),b
 10092  00140E  6BC2               	clrf	(??___ftadd+2)& (0+255),b
 10093  001410  0100               	movlb	0	; () banked
 10094  001412  35BE               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 10095  001414  0100               	movlb	0	; () banked
 10096  001416  37C0               	rlcf	??___ftadd& (0+255),f,b
 10097  001418  E301               	bnc	u2891
 10098  00141A  81C1               	bsf	(??___ftadd+1)& (0+255),0,b
 10099  00141C                     u2891:
 10100  00141C  0100               	movlb	0	; () banked
 10101  00141E  51C0               	movf	??___ftadd& (0+255),w,b
 10102  001420  0100               	movlb	0	; () banked
 10103  001422  6FC4               	movwf	___ftadd@exp2& (0+255),b
 10104                           
 10105                           ; BSR set to: 0
 10106  001424  0100               	movlb	0	; () banked
 10107  001426  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10108  001428  0100               	movlb	0	; () banked
 10109  00142A  B4D8               	btfsc	status,2,c
 10110  00142C  D011               	goto	l1005
 10111                           
 10112                           ; BSR set to: 0
 10113  00142E  0100               	movlb	0	; () banked
 10114  001430  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10115  001432  0100               	movlb	0	; () banked
 10116  001434  5DC5               	subwf	___ftadd@exp1& (0+255),w,b
 10117  001436  B0D8               	btfsc	status,0,c
 10118  001438  D012               	goto	l3640
 10119                           
 10120                           ; BSR set to: 0
 10121  00143A  0100               	movlb	0	; () banked
 10122  00143C  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10123  00143E  0800               	sublw	0
 10124  001440  0100               	movlb	0	; () banked
 10125  001442  25C4               	addwf	___ftadd@exp2& (0+255),w,b
 10126  001444  0100               	movlb	0	; () banked
 10127  001446  6FC0               	movwf	??___ftadd& (0+255),b
 10128  001448  0E18               	movlw	24
 10129  00144A  0100               	movlb	0	; () banked
 10130  00144C  65C0               	cpfsgt	??___ftadd& (0+255),b
 10131  00144E  D007               	goto	l3640
 10132  001450                     l1005:
 10133                           
 10134                           ; BSR set to: 0
 10135  001450  C0BD  F0BA         	movff	___ftadd@f2,?___ftadd
 10136  001454  C0BE  F0BB         	movff	___ftadd@f2+1,?___ftadd+1
 10137  001458  C0BF  F0BC         	movff	___ftadd@f2+2,?___ftadd+2
 10138  00145C  0012               	return	
 10139  00145E                     l3640:
 10140                           
 10141                           ; BSR set to: 0
 10142  00145E  0100               	movlb	0	; () banked
 10143  001460  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10144  001462  0100               	movlb	0	; () banked
 10145  001464  B4D8               	btfsc	status,2,c
 10146  001466  D011               	goto	l1009
 10147                           
 10148                           ; BSR set to: 0
 10149  001468  0100               	movlb	0	; () banked
 10150  00146A  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10151  00146C  0100               	movlb	0	; () banked
 10152  00146E  5DC4               	subwf	___ftadd@exp2& (0+255),w,b
 10153  001470  B0D8               	btfsc	status,0,c
 10154  001472  D012               	goto	l3646
 10155                           
 10156                           ; BSR set to: 0
 10157  001474  0100               	movlb	0	; () banked
 10158  001476  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10159  001478  0800               	sublw	0
 10160  00147A  0100               	movlb	0	; () banked
 10161  00147C  25C5               	addwf	___ftadd@exp1& (0+255),w,b
 10162  00147E  0100               	movlb	0	; () banked
 10163  001480  6FC0               	movwf	??___ftadd& (0+255),b
 10164  001482  0E18               	movlw	24
 10165  001484  0100               	movlb	0	; () banked
 10166  001486  65C0               	cpfsgt	??___ftadd& (0+255),b
 10167  001488  D007               	goto	l3646
 10168  00148A                     l1009:
 10169                           
 10170                           ; BSR set to: 0
 10171  00148A  C0BA  F0BA         	movff	___ftadd@f1,?___ftadd
 10172  00148E  C0BB  F0BB         	movff	___ftadd@f1+1,?___ftadd+1
 10173  001492  C0BC  F0BC         	movff	___ftadd@f1+2,?___ftadd+2
 10174  001496  0012               	return	
 10175  001498                     l3646:
 10176                           
 10177                           ; BSR set to: 0
 10178  001498  0E06               	movlw	6
 10179  00149A  0100               	movlb	0	; () banked
 10180  00149C  6FC3               	movwf	___ftadd@sign& (0+255),b
 10181                           
 10182                           ; BSR set to: 0
 10183  00149E  0100               	movlb	0	; () banked
 10184  0014A0  AFBC               	btfss	(___ftadd@f1+2)& (0+255),7,b
 10185  0014A2  D002               	goto	l3652
 10186                           
 10187                           ; BSR set to: 0
 10188  0014A4  0100               	movlb	0	; () banked
 10189  0014A6  8FC3               	bsf	___ftadd@sign& (0+255),7,b
 10190  0014A8                     l3652:
 10191                           
 10192                           ; BSR set to: 0
 10193  0014A8  0100               	movlb	0	; () banked
 10194  0014AA  AFBF               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10195  0014AC  D002               	goto	l1011
 10196                           
 10197                           ; BSR set to: 0
 10198  0014AE  0100               	movlb	0	; () banked
 10199  0014B0  8DC3               	bsf	___ftadd@sign& (0+255),6,b
 10200  0014B2                     l1011:
 10201                           
 10202                           ; BSR set to: 0
 10203  0014B2  0100               	movlb	0	; () banked
 10204  0014B4  8FBB               	bsf	(___ftadd@f1+1)& (0+255),7,b
 10205                           
 10206                           ; BSR set to: 0
 10207  0014B6  0EFF               	movlw	255
 10208  0014B8  0100               	movlb	0	; () banked
 10209  0014BA  17BA               	andwf	___ftadd@f1& (0+255),f,b
 10210  0014BC  0EFF               	movlw	255
 10211  0014BE  0100               	movlb	0	; () banked
 10212  0014C0  17BB               	andwf	(___ftadd@f1+1)& (0+255),f,b
 10213  0014C2  0E00               	movlw	0
 10214  0014C4  0100               	movlb	0	; () banked
 10215  0014C6  17BC               	andwf	(___ftadd@f1+2)& (0+255),f,b
 10216  0014C8  0100               	movlb	0	; () banked
 10217  0014CA  8FBE               	bsf	(___ftadd@f2+1)& (0+255),7,b
 10218                           
 10219                           ; BSR set to: 0
 10220  0014CC  0EFF               	movlw	255
 10221  0014CE  0100               	movlb	0	; () banked
 10222  0014D0  17BD               	andwf	___ftadd@f2& (0+255),f,b
 10223  0014D2  0EFF               	movlw	255
 10224  0014D4  0100               	movlb	0	; () banked
 10225  0014D6  17BE               	andwf	(___ftadd@f2+1)& (0+255),f,b
 10226  0014D8  0E00               	movlw	0
 10227  0014DA  0100               	movlb	0	; () banked
 10228  0014DC  17BF               	andwf	(___ftadd@f2+2)& (0+255),f,b
 10229                           
 10230                           ; BSR set to: 0
 10231  0014DE  0100               	movlb	0	; () banked
 10232  0014E0  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10233  0014E2  0100               	movlb	0	; () banked
 10234  0014E4  5DC5               	subwf	___ftadd@exp1& (0+255),w,b
 10235  0014E6  B0D8               	btfsc	status,0,c
 10236  0014E8  D025               	goto	l3672
 10237  0014EA                     l3662:
 10238                           
 10239                           ; BSR set to: 0
 10240  0014EA  0100               	movlb	0	; () banked
 10241  0014EC  90D8               	bcf	status,0,c
 10242  0014EE  37BD               	rlcf	___ftadd@f2& (0+255),f,b
 10243  0014F0  37BE               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 10244  0014F2  37BF               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 10245  0014F4  0100               	movlb	0	; () banked
 10246  0014F6  07C4               	decf	___ftadd@exp2& (0+255),f,b
 10247                           
 10248                           ; BSR set to: 0
 10249  0014F8  0100               	movlb	0	; () banked
 10250  0014FA  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10251  0014FC  0100               	movlb	0	; () banked
 10252  0014FE  19C4               	xorwf	___ftadd@exp2& (0+255),w,b
 10253  001500  B4D8               	btfsc	status,2,c
 10254  001502  D011               	goto	l3670
 10255                           
 10256                           ; BSR set to: 0
 10257  001504  0100               	movlb	0	; () banked
 10258  001506  07C3               	decf	___ftadd@sign& (0+255),f,b
 10259  001508  C0C3  F0C0         	movff	___ftadd@sign,??___ftadd
 10260  00150C  0E07               	movlw	7
 10261  00150E  0100               	movlb	0	; () banked
 10262  001510  17C0               	andwf	??___ftadd& (0+255),f,b
 10263  001512  B4D8               	btfsc	status,2,c
 10264  001514  D008               	goto	l3670
 10265  001516  D7E9               	goto	l3662
 10266  001518                     l3668:
 10267                           
 10268                           ; BSR set to: 0
 10269  001518  0100               	movlb	0	; () banked
 10270  00151A  90D8               	bcf	status,0,c
 10271  00151C  33BC               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 10272  00151E  33BB               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 10273  001520  33BA               	rrcf	___ftadd@f1& (0+255),f,b
 10274  001522  0100               	movlb	0	; () banked
 10275  001524  2BC5               	incf	___ftadd@exp1& (0+255),f,b
 10276  001526                     l3670:
 10277                           
 10278                           ; BSR set to: 0
 10279  001526  0100               	movlb	0	; () banked
 10280  001528  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10281  00152A  0100               	movlb	0	; () banked
 10282  00152C  19C5               	xorwf	___ftadd@exp1& (0+255),w,b
 10283  00152E  B4D8               	btfsc	status,2,c
 10284  001530  D02B               	goto	l1020
 10285  001532  D7F2               	goto	l3668
 10286  001534                     l3672:
 10287                           
 10288                           ; BSR set to: 0
 10289  001534  0100               	movlb	0	; () banked
 10290  001536  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10291  001538  0100               	movlb	0	; () banked
 10292  00153A  5DC4               	subwf	___ftadd@exp2& (0+255),w,b
 10293  00153C  B0D8               	btfsc	status,0,c
 10294  00153E  D024               	goto	l1020
 10295  001540                     l3674:
 10296                           
 10297                           ; BSR set to: 0
 10298  001540  0100               	movlb	0	; () banked
 10299  001542  90D8               	bcf	status,0,c
 10300  001544  37BA               	rlcf	___ftadd@f1& (0+255),f,b
 10301  001546  37BB               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 10302  001548  37BC               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 10303  00154A  0100               	movlb	0	; () banked
 10304  00154C  07C5               	decf	___ftadd@exp1& (0+255),f,b
 10305                           
 10306                           ; BSR set to: 0
 10307  00154E  0100               	movlb	0	; () banked
 10308  001550  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10309  001552  0100               	movlb	0	; () banked
 10310  001554  19C4               	xorwf	___ftadd@exp2& (0+255),w,b
 10311  001556  B4D8               	btfsc	status,2,c
 10312  001558  D011               	goto	l3682
 10313                           
 10314                           ; BSR set to: 0
 10315  00155A  0100               	movlb	0	; () banked
 10316  00155C  07C3               	decf	___ftadd@sign& (0+255),f,b
 10317  00155E  C0C3  F0C0         	movff	___ftadd@sign,??___ftadd
 10318  001562  0E07               	movlw	7
 10319  001564  0100               	movlb	0	; () banked
 10320  001566  17C0               	andwf	??___ftadd& (0+255),f,b
 10321  001568  B4D8               	btfsc	status,2,c
 10322  00156A  D008               	goto	l3682
 10323  00156C  D7E9               	goto	l3674
 10324  00156E                     l3680:
 10325                           
 10326                           ; BSR set to: 0
 10327  00156E  0100               	movlb	0	; () banked
 10328  001570  90D8               	bcf	status,0,c
 10329  001572  33BF               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 10330  001574  33BE               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 10331  001576  33BD               	rrcf	___ftadd@f2& (0+255),f,b
 10332  001578  0100               	movlb	0	; () banked
 10333  00157A  2BC4               	incf	___ftadd@exp2& (0+255),f,b
 10334  00157C                     l3682:
 10335                           
 10336                           ; BSR set to: 0
 10337  00157C  0100               	movlb	0	; () banked
 10338  00157E  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10339  001580  0100               	movlb	0	; () banked
 10340  001582  19C5               	xorwf	___ftadd@exp1& (0+255),w,b
 10341  001584  A4D8               	btfss	status,2,c
 10342  001586  D7F3               	goto	l3680
 10343  001588                     l1020:
 10344                           
 10345                           ; BSR set to: 0
 10346  001588  0100               	movlb	0	; () banked
 10347  00158A  AFC3               	btfss	___ftadd@sign& (0+255),7,b
 10348  00158C  D012               	goto	l1029
 10349                           
 10350                           ; BSR set to: 0
 10351  00158E  0EFF               	movlw	255
 10352  001590  0100               	movlb	0	; () banked
 10353  001592  1BBA               	xorwf	___ftadd@f1& (0+255),f,b
 10354  001594  0EFF               	movlw	255
 10355  001596  0100               	movlb	0	; () banked
 10356  001598  1BBB               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 10357  00159A  0EFF               	movlw	255
 10358  00159C  0100               	movlb	0	; () banked
 10359  00159E  1BBC               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 10360  0015A0  0E01               	movlw	1
 10361  0015A2  0100               	movlb	0	; () banked
 10362  0015A4  27BA               	addwf	___ftadd@f1& (0+255),f,b
 10363  0015A6  0E00               	movlw	0
 10364  0015A8  0100               	movlb	0	; () banked
 10365  0015AA  23BB               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 10366  0015AC  0E00               	movlw	0
 10367  0015AE  0100               	movlb	0	; () banked
 10368  0015B0  23BC               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 10369  0015B2                     l1029:
 10370                           
 10371                           ; BSR set to: 0
 10372  0015B2  0100               	movlb	0	; () banked
 10373  0015B4  ADC3               	btfss	___ftadd@sign& (0+255),6,b
 10374  0015B6  D012               	goto	l3688
 10375                           
 10376                           ; BSR set to: 0
 10377  0015B8  0EFF               	movlw	255
 10378  0015BA  0100               	movlb	0	; () banked
 10379  0015BC  1BBD               	xorwf	___ftadd@f2& (0+255),f,b
 10380  0015BE  0EFF               	movlw	255
 10381  0015C0  0100               	movlb	0	; () banked
 10382  0015C2  1BBE               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10383  0015C4  0EFF               	movlw	255
 10384  0015C6  0100               	movlb	0	; () banked
 10385  0015C8  1BBF               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10386  0015CA  0E01               	movlw	1
 10387  0015CC  0100               	movlb	0	; () banked
 10388  0015CE  27BD               	addwf	___ftadd@f2& (0+255),f,b
 10389  0015D0  0E00               	movlw	0
 10390  0015D2  0100               	movlb	0	; () banked
 10391  0015D4  23BE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10392  0015D6  0E00               	movlw	0
 10393  0015D8  0100               	movlb	0	; () banked
 10394  0015DA  23BF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10395  0015DC                     l3688:
 10396                           
 10397                           ; BSR set to: 0
 10398  0015DC  0E00               	movlw	0
 10399  0015DE  0100               	movlb	0	; () banked
 10400  0015E0  6FC3               	movwf	___ftadd@sign& (0+255),b
 10401                           
 10402                           ; BSR set to: 0
 10403  0015E2  0100               	movlb	0	; () banked
 10404  0015E4  51BA               	movf	___ftadd@f1& (0+255),w,b
 10405  0015E6  0100               	movlb	0	; () banked
 10406  0015E8  27BD               	addwf	___ftadd@f2& (0+255),f,b
 10407  0015EA  0100               	movlb	0	; () banked
 10408  0015EC  51BB               	movf	(___ftadd@f1+1)& (0+255),w,b
 10409  0015EE  0100               	movlb	0	; () banked
 10410  0015F0  23BE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10411  0015F2  0100               	movlb	0	; () banked
 10412  0015F4  51BC               	movf	(___ftadd@f1+2)& (0+255),w,b
 10413  0015F6  0100               	movlb	0	; () banked
 10414  0015F8  23BF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10415                           
 10416                           ; BSR set to: 0
 10417  0015FA  0100               	movlb	0	; () banked
 10418  0015FC  AFBF               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10419  0015FE  D015               	goto	l3698
 10420                           
 10421                           ; BSR set to: 0
 10422  001600  0EFF               	movlw	255
 10423  001602  0100               	movlb	0	; () banked
 10424  001604  1BBD               	xorwf	___ftadd@f2& (0+255),f,b
 10425  001606  0EFF               	movlw	255
 10426  001608  0100               	movlb	0	; () banked
 10427  00160A  1BBE               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10428  00160C  0EFF               	movlw	255
 10429  00160E  0100               	movlb	0	; () banked
 10430  001610  1BBF               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10431  001612  0E01               	movlw	1
 10432  001614  0100               	movlb	0	; () banked
 10433  001616  27BD               	addwf	___ftadd@f2& (0+255),f,b
 10434  001618  0E00               	movlw	0
 10435  00161A  0100               	movlb	0	; () banked
 10436  00161C  23BE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10437  00161E  0E00               	movlw	0
 10438  001620  0100               	movlb	0	; () banked
 10439  001622  23BF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10440                           
 10441                           ; BSR set to: 0
 10442  001624  0E01               	movlw	1
 10443  001626  0100               	movlb	0	; () banked
 10444  001628  6FC3               	movwf	___ftadd@sign& (0+255),b
 10445  00162A                     l3698:
 10446                           
 10447                           ; BSR set to: 0
 10448  00162A  C0BD  F080         	movff	___ftadd@f2,___ftpack@arg
 10449  00162E  C0BE  F081         	movff	___ftadd@f2+1,___ftpack@arg+1
 10450  001632  C0BF  F082         	movff	___ftadd@f2+2,___ftpack@arg+2
 10451  001636  C0C5  F083         	movff	___ftadd@exp1,___ftpack@exp
 10452  00163A  C0C3  F084         	movff	___ftadd@sign,___ftpack@sign
 10453  00163E  EC63  F012         	call	___ftpack	;wreg free
 10454  001642  C080  F0BA         	movff	?___ftpack,?___ftadd
 10455  001646  C081  F0BB         	movff	?___ftpack+1,?___ftadd+1
 10456  00164A  C082  F0BC         	movff	?___ftpack+2,?___ftadd+2
 10457  00164E  0012               	return	
 10458  001650                     __end_of___ftadd:
 10459                           	opt stack 0
 10460                           tblptru	equ	0xFF8
 10461                           tblptrh	equ	0xFF7
 10462                           tblptrl	equ	0xFF6
 10463                           tablat	equ	0xFF5
 10464                           prodh	equ	0xFF4
 10465                           prodl	equ	0xFF3
 10466                           intcon	equ	0xFF2
 10467                           postinc0	equ	0xFEE
 10468                           wreg	equ	0xFE8
 10469                           postdec1	equ	0xFE5
 10470                           fsr1l	equ	0xFE1
 10471                           indf2	equ	0xFDF
 10472                           postinc2	equ	0xFDE
 10473                           postdec2	equ	0xFDD
 10474                           fsr2h	equ	0xFDA
 10475                           fsr2l	equ	0xFD9
 10476                           status	equ	0xFD8
 10477                           
 10478 ;; *************** function ___ftpack *****************
 10479 ;; Defined at:
 10480 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 10481 ;; Parameters:    Size  Location     Type
 10482 ;;  arg             3    0[BANK0 ] unsigned um
 10483 ;;  exp             1    3[BANK0 ] unsigned char 
 10484 ;;  sign            1    4[BANK0 ] unsigned char 
 10485 ;; Auto vars:     Size  Location     Type
 10486 ;;		None
 10487 ;; Return value:  Size  Location     Type
 10488 ;;                  3    0[BANK0 ] float 
 10489 ;; Registers used:
 10490 ;;		wreg, status,2, status,0
 10491 ;; Tracked objects:
 10492 ;;		On entry : 0/0
 10493 ;;		On exit  : 0/0
 10494 ;;		Unchanged: 0/0
 10495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10496 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10498 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10499 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10500 ;;Total ram usage:        8 bytes
 10501 ;; Hardware stack levels used:    1
 10502 ;; Hardware stack levels required when called:    5
 10503 ;; This function calls:
 10504 ;;		Nothing
 10505 ;; This function is called by:
 10506 ;;		___altoft
 10507 ;;		___awtoft
 10508 ;;		___ftadd
 10509 ;;		___ftdiv
 10510 ;;		___ftmul
 10511 ;;		___lltoft
 10512 ;; This function uses a non-reentrant model
 10513 ;;
 10514                           
 10515                           	psect	text40
 10516  0024C6                     __ptext40:
 10517                           	opt stack 0
 10518  0024C6                     ___ftpack:
 10519                           	opt stack 21
 10520                           
 10521                           ;incstack = 0
 10522  0024C6  0100               	movlb	0	; () banked
 10523  0024C8  5183               	movf	___ftpack@exp& (0+255),w,b
 10524  0024CA  0100               	movlb	0	; () banked
 10525  0024CC  B4D8               	btfsc	status,2,c
 10526  0024CE  D008               	goto	l3576
 10527                           
 10528                           ; BSR set to: 0
 10529  0024D0  0100               	movlb	0	; () banked
 10530  0024D2  5180               	movf	___ftpack@arg& (0+255),w,b
 10531  0024D4  0100               	movlb	0	; () banked
 10532  0024D6  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 10533  0024D8  0100               	movlb	0	; () banked
 10534  0024DA  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 10535  0024DC  A4D8               	btfss	status,2,c
 10536  0024DE  D011               	goto	l3582
 10537  0024E0                     l3576:
 10538                           
 10539                           ; BSR set to: 0
 10540  0024E0  0E00               	movlw	0
 10541  0024E2  0100               	movlb	0	; () banked
 10542  0024E4  6F80               	movwf	?___ftpack& (0+255),b
 10543  0024E6  0E00               	movlw	0
 10544  0024E8  0100               	movlb	0	; () banked
 10545  0024EA  6F81               	movwf	(?___ftpack+1)& (0+255),b
 10546  0024EC  0E00               	movlw	0
 10547  0024EE  0100               	movlb	0	; () banked
 10548  0024F0  6F82               	movwf	(?___ftpack+2)& (0+255),b
 10549                           
 10550                           ; BSR set to: 0
 10551  0024F2  0012               	return	
 10552  0024F4                     l3580:
 10553                           
 10554                           ; BSR set to: 0
 10555  0024F4  0100               	movlb	0	; () banked
 10556  0024F6  2B83               	incf	___ftpack@exp& (0+255),f,b
 10557  0024F8  0100               	movlb	0	; () banked
 10558  0024FA  90D8               	bcf	status,0,c
 10559  0024FC  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 10560  0024FE  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 10561  002500  3380               	rrcf	___ftpack@arg& (0+255),f,b
 10562  002502                     l3582:
 10563                           
 10564                           ; BSR set to: 0
 10565  002502  0E00               	movlw	0
 10566  002504  0100               	movlb	0	; () banked
 10567  002506  1580               	andwf	___ftpack@arg& (0+255),w,b
 10568  002508  0100               	movlb	0	; () banked
 10569  00250A  6F85               	movwf	??___ftpack& (0+255),b
 10570  00250C  0E00               	movlw	0
 10571  00250E  0100               	movlb	0	; () banked
 10572  002510  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
 10573  002512  0100               	movlb	0	; () banked
 10574  002514  6F86               	movwf	(??___ftpack+1)& (0+255),b
 10575  002516  0EFE               	movlw	254
 10576  002518  0100               	movlb	0	; () banked
 10577  00251A  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
 10578  00251C  0100               	movlb	0	; () banked
 10579  00251E  6F87               	movwf	(??___ftpack+2)& (0+255),b
 10580  002520  0100               	movlb	0	; () banked
 10581  002522  5185               	movf	??___ftpack& (0+255),w,b
 10582  002524  0100               	movlb	0	; () banked
 10583  002526  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
 10584  002528  0100               	movlb	0	; () banked
 10585  00252A  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
 10586  00252C  B4D8               	btfsc	status,2,c
 10587  00252E  D011               	goto	l3588
 10588  002530  D7E1               	goto	l3580
 10589  002532                     l3584:
 10590                           
 10591                           ; BSR set to: 0
 10592  002532  0100               	movlb	0	; () banked
 10593  002534  2B83               	incf	___ftpack@exp& (0+255),f,b
 10594                           
 10595                           ; BSR set to: 0
 10596  002536  0E01               	movlw	1
 10597  002538  0100               	movlb	0	; () banked
 10598  00253A  2780               	addwf	___ftpack@arg& (0+255),f,b
 10599  00253C  0E00               	movlw	0
 10600  00253E  0100               	movlb	0	; () banked
 10601  002540  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 10602  002542  0E00               	movlw	0
 10603  002544  0100               	movlb	0	; () banked
 10604  002546  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 10605  002548  0100               	movlb	0	; () banked
 10606  00254A  90D8               	bcf	status,0,c
 10607  00254C  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 10608  00254E  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 10609  002550  3380               	rrcf	___ftpack@arg& (0+255),f,b
 10610  002552                     l3588:
 10611                           
 10612                           ; BSR set to: 0
 10613  002552  0E00               	movlw	0
 10614  002554  0100               	movlb	0	; () banked
 10615  002556  1580               	andwf	___ftpack@arg& (0+255),w,b
 10616  002558  0100               	movlb	0	; () banked
 10617  00255A  6F85               	movwf	??___ftpack& (0+255),b
 10618  00255C  0E00               	movlw	0
 10619  00255E  0100               	movlb	0	; () banked
 10620  002560  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
 10621  002562  0100               	movlb	0	; () banked
 10622  002564  6F86               	movwf	(??___ftpack+1)& (0+255),b
 10623  002566  0EFF               	movlw	255
 10624  002568  0100               	movlb	0	; () banked
 10625  00256A  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
 10626  00256C  0100               	movlb	0	; () banked
 10627  00256E  6F87               	movwf	(??___ftpack+2)& (0+255),b
 10628  002570  0100               	movlb	0	; () banked
 10629  002572  5185               	movf	??___ftpack& (0+255),w,b
 10630  002574  0100               	movlb	0	; () banked
 10631  002576  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
 10632  002578  0100               	movlb	0	; () banked
 10633  00257A  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
 10634  00257C  B4D8               	btfsc	status,2,c
 10635  00257E  D008               	goto	l3592
 10636  002580  D7D8               	goto	l3584
 10637  002582                     l3590:
 10638                           
 10639                           ; BSR set to: 0
 10640  002582  0100               	movlb	0	; () banked
 10641  002584  0783               	decf	___ftpack@exp& (0+255),f,b
 10642  002586  0100               	movlb	0	; () banked
 10643  002588  90D8               	bcf	status,0,c
 10644  00258A  3780               	rlcf	___ftpack@arg& (0+255),f,b
 10645  00258C  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 10646  00258E  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 10647  002590                     l3592:
 10648                           
 10649                           ; BSR set to: 0
 10650  002590  0100               	movlb	0	; () banked
 10651  002592  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
 10652  002594  D004               	goto	l982
 10653                           
 10654                           ; BSR set to: 0
 10655  002596  0E02               	movlw	2
 10656  002598  0100               	movlb	0	; () banked
 10657  00259A  6183               	cpfslt	___ftpack@exp& (0+255),b
 10658  00259C  D7F2               	goto	l3590
 10659  00259E                     l982:
 10660                           
 10661                           ; BSR set to: 0
 10662  00259E  0100               	movlb	0	; () banked
 10663  0025A0  B183               	btfsc	___ftpack@exp& (0+255),0,b
 10664  0025A2  D002               	goto	l3598
 10665                           
 10666                           ; BSR set to: 0
 10667  0025A4  0100               	movlb	0	; () banked
 10668  0025A6  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
 10669  0025A8                     l3598:
 10670                           
 10671                           ; BSR set to: 0
 10672  0025A8  0100               	movlb	0	; () banked
 10673  0025AA  90D8               	bcf	status,0,c
 10674  0025AC  3383               	rrcf	___ftpack@exp& (0+255),f,b
 10675  0025AE  0100               	movlb	0	; () banked
 10676  0025B0  5183               	movf	___ftpack@exp& (0+255),w,b
 10677  0025B2  0100               	movlb	0	; () banked
 10678  0025B4  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 10679                           
 10680                           ; BSR set to: 0
 10681  0025B6  0100               	movlb	0	; () banked
 10682  0025B8  5184               	movf	___ftpack@sign& (0+255),w,b
 10683  0025BA  0100               	movlb	0	; () banked
 10684  0025BC  B4D8               	btfsc	status,2,c
 10685  0025BE  D002               	goto	l3604
 10686                           
 10687                           ; BSR set to: 0
 10688  0025C0  0100               	movlb	0	; () banked
 10689  0025C2  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
 10690  0025C4                     l3604:
 10691                           
 10692                           ; BSR set to: 0
 10693  0025C4  C080  F080         	movff	___ftpack@arg,?___ftpack
 10694  0025C8  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
 10695  0025CC  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
 10696  0025D0  0012               	return	
 10697  0025D2                     __end_of___ftpack:
 10698                           	opt stack 0
 10699                           tblptru	equ	0xFF8
 10700                           tblptrh	equ	0xFF7
 10701                           tblptrl	equ	0xFF6
 10702                           tablat	equ	0xFF5
 10703                           prodh	equ	0xFF4
 10704                           prodl	equ	0xFF3
 10705                           intcon	equ	0xFF2
 10706                           postinc0	equ	0xFEE
 10707                           wreg	equ	0xFE8
 10708                           postdec1	equ	0xFE5
 10709                           fsr1l	equ	0xFE1
 10710                           indf2	equ	0xFDF
 10711                           postinc2	equ	0xFDE
 10712                           postdec2	equ	0xFDD
 10713                           fsr2h	equ	0xFDA
 10714                           fsr2l	equ	0xFD9
 10715                           status	equ	0xFD8
 10716                           
 10717 ;; *************** function ___ftneg *****************
 10718 ;; Defined at:
 10719 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 10720 ;; Parameters:    Size  Location     Type
 10721 ;;  f1              3    0[BANK0 ] float 
 10722 ;; Auto vars:     Size  Location     Type
 10723 ;;		None
 10724 ;; Return value:  Size  Location     Type
 10725 ;;                  3    0[BANK0 ] float 
 10726 ;; Registers used:
 10727 ;;		wreg, status,2, status,0
 10728 ;; Tracked objects:
 10729 ;;		On entry : 0/0
 10730 ;;		On exit  : 0/0
 10731 ;;		Unchanged: 0/0
 10732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10733 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10736 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10737 ;;Total ram usage:        3 bytes
 10738 ;; Hardware stack levels used:    1
 10739 ;; Hardware stack levels required when called:    5
 10740 ;; This function calls:
 10741 ;;		Nothing
 10742 ;; This function is called by:
 10743 ;;		_printf
 10744 ;; This function uses a non-reentrant model
 10745 ;;
 10746                           
 10747                           	psect	text41
 10748  0038A6                     __ptext41:
 10749                           	opt stack 0
 10750  0038A6                     ___ftneg:
 10751                           	opt stack 23
 10752                           
 10753                           ; BSR set to: 0
 10754                           ;incstack = 0
 10755  0038A6  0100               	movlb	0	; () banked
 10756  0038A8  5180               	movf	___ftneg@f1& (0+255),w,b
 10757  0038AA  0100               	movlb	0	; () banked
 10758  0038AC  1181               	iorwf	(___ftneg@f1+1)& (0+255),w,b
 10759  0038AE  0100               	movlb	0	; () banked
 10760  0038B0  1182               	iorwf	(___ftneg@f1+2)& (0+255),w,b
 10761  0038B2  B4D8               	btfsc	status,2,c
 10762  0038B4  D009               	goto	l1079
 10763                           
 10764                           ; BSR set to: 0
 10765  0038B6  0E00               	movlw	0
 10766  0038B8  0100               	movlb	0	; () banked
 10767  0038BA  1B80               	xorwf	___ftneg@f1& (0+255),f,b
 10768  0038BC  0E00               	movlw	0
 10769  0038BE  0100               	movlb	0	; () banked
 10770  0038C0  1B81               	xorwf	(___ftneg@f1+1)& (0+255),f,b
 10771  0038C2  0E80               	movlw	128
 10772  0038C4  0100               	movlb	0	; () banked
 10773  0038C6  1B82               	xorwf	(___ftneg@f1+2)& (0+255),f,b
 10774  0038C8                     l1079:
 10775                           
 10776                           ; BSR set to: 0
 10777  0038C8  C080  F080         	movff	___ftneg@f1,?___ftneg
 10778  0038CC  C081  F081         	movff	___ftneg@f1+1,?___ftneg+1
 10779  0038D0  C082  F082         	movff	___ftneg@f1+2,?___ftneg+2
 10780                           
 10781                           ; BSR set to: 0
 10782  0038D4  0012               	return		;funcret
 10783  0038D6                     __end_of___ftneg:
 10784                           	opt stack 0
 10785                           tblptru	equ	0xFF8
 10786                           tblptrh	equ	0xFF7
 10787                           tblptrl	equ	0xFF6
 10788                           tablat	equ	0xFF5
 10789                           prodh	equ	0xFF4
 10790                           prodl	equ	0xFF3
 10791                           intcon	equ	0xFF2
 10792                           postinc0	equ	0xFEE
 10793                           wreg	equ	0xFE8
 10794                           postdec1	equ	0xFE5
 10795                           fsr1l	equ	0xFE1
 10796                           indf2	equ	0xFDF
 10797                           postinc2	equ	0xFDE
 10798                           postdec2	equ	0xFDD
 10799                           fsr2h	equ	0xFDA
 10800                           fsr2l	equ	0xFD9
 10801                           status	equ	0xFD8
 10802                           
 10803 ;; *************** function ___ftge *****************
 10804 ;; Defined at:
 10805 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 10806 ;; Parameters:    Size  Location     Type
 10807 ;;  ff1             3    0[BANK0 ] float 
 10808 ;;  ff2             3    3[BANK0 ] float 
 10809 ;; Auto vars:     Size  Location     Type
 10810 ;;		None
 10811 ;; Return value:  Size  Location     Type
 10812 ;;		None               void
 10813 ;; Registers used:
 10814 ;;		wreg, status,2, status,0
 10815 ;; Tracked objects:
 10816 ;;		On entry : 0/0
 10817 ;;		On exit  : 0/0
 10818 ;;		Unchanged: 0/0
 10819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10820 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10822 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10823 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10824 ;;Total ram usage:        9 bytes
 10825 ;; Hardware stack levels used:    1
 10826 ;; Hardware stack levels required when called:    5
 10827 ;; This function calls:
 10828 ;;		Nothing
 10829 ;; This function is called by:
 10830 ;;		_sortBattery
 10831 ;;		_printf
 10832 ;; This function uses a non-reentrant model
 10833 ;;
 10834                           
 10835                           	psect	text42
 10836  002B6C                     __ptext42:
 10837                           	opt stack 0
 10838  002B6C                     ___ftge:
 10839                           	opt stack 23
 10840                           
 10841                           ; BSR set to: 0
 10842                           ;incstack = 0
 10843  002B6C  0100               	movlb	0	; () banked
 10844  002B6E  AF82               	btfss	(___ftge@ff1+2)& (0+255),7,b
 10845  002B70  D01D               	goto	l4138
 10846                           
 10847                           ; BSR set to: 0
 10848  002B72  C080  F086         	movff	___ftge@ff1,??___ftge
 10849  002B76  C081  F087         	movff	___ftge@ff1+1,??___ftge+1
 10850  002B7A  C082  F088         	movff	___ftge@ff1+2,??___ftge+2
 10851  002B7E  0100               	movlb	0	; () banked
 10852  002B80  1F86               	comf	??___ftge& (0+255),f,b
 10853  002B82  1F87               	comf	(??___ftge+1)& (0+255),f,b
 10854  002B84  1F88               	comf	(??___ftge+2)& (0+255),f,b
 10855  002B86  2B86               	incf	??___ftge& (0+255),f,b
 10856  002B88  0E00               	movlw	0
 10857  002B8A  2387               	addwfc	(??___ftge+1)& (0+255),f,b
 10858  002B8C  2388               	addwfc	(??___ftge+2)& (0+255),f,b
 10859  002B8E  0E00               	movlw	0
 10860  002B90  0100               	movlb	0	; () banked
 10861  002B92  2586               	addwf	??___ftge& (0+255),w,b
 10862  002B94  0100               	movlb	0	; () banked
 10863  002B96  6F80               	movwf	___ftge@ff1& (0+255),b
 10864  002B98  0E00               	movlw	0
 10865  002B9A  0100               	movlb	0	; () banked
 10866  002B9C  2187               	addwfc	(??___ftge+1)& (0+255),w,b
 10867  002B9E  0100               	movlb	0	; () banked
 10868  002BA0  6F81               	movwf	(___ftge@ff1+1)& (0+255),b
 10869  002BA2  0E80               	movlw	128
 10870  002BA4  0100               	movlb	0	; () banked
 10871  002BA6  2188               	addwfc	(??___ftge+2)& (0+255),w,b
 10872  002BA8  0100               	movlb	0	; () banked
 10873  002BAA  6F82               	movwf	(___ftge@ff1+2)& (0+255),b
 10874  002BAC                     l4138:
 10875                           
 10876                           ; BSR set to: 0
 10877  002BAC  0100               	movlb	0	; () banked
 10878  002BAE  AF85               	btfss	(___ftge@ff2+2)& (0+255),7,b
 10879  002BB0  D01D               	goto	l4142
 10880                           
 10881                           ; BSR set to: 0
 10882  002BB2  C083  F086         	movff	___ftge@ff2,??___ftge
 10883  002BB6  C084  F087         	movff	___ftge@ff2+1,??___ftge+1
 10884  002BBA  C085  F088         	movff	___ftge@ff2+2,??___ftge+2
 10885  002BBE  0100               	movlb	0	; () banked
 10886  002BC0  1F86               	comf	??___ftge& (0+255),f,b
 10887  002BC2  1F87               	comf	(??___ftge+1)& (0+255),f,b
 10888  002BC4  1F88               	comf	(??___ftge+2)& (0+255),f,b
 10889  002BC6  2B86               	incf	??___ftge& (0+255),f,b
 10890  002BC8  0E00               	movlw	0
 10891  002BCA  2387               	addwfc	(??___ftge+1)& (0+255),f,b
 10892  002BCC  2388               	addwfc	(??___ftge+2)& (0+255),f,b
 10893  002BCE  0E00               	movlw	0
 10894  002BD0  0100               	movlb	0	; () banked
 10895  002BD2  2586               	addwf	??___ftge& (0+255),w,b
 10896  002BD4  0100               	movlb	0	; () banked
 10897  002BD6  6F83               	movwf	___ftge@ff2& (0+255),b
 10898  002BD8  0E00               	movlw	0
 10899  002BDA  0100               	movlb	0	; () banked
 10900  002BDC  2187               	addwfc	(??___ftge+1)& (0+255),w,b
 10901  002BDE  0100               	movlb	0	; () banked
 10902  002BE0  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
 10903  002BE2  0E80               	movlw	128
 10904  002BE4  0100               	movlb	0	; () banked
 10905  002BE6  2188               	addwfc	(??___ftge+2)& (0+255),w,b
 10906  002BE8  0100               	movlb	0	; () banked
 10907  002BEA  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
 10908  002BEC                     l4142:
 10909                           
 10910                           ; BSR set to: 0
 10911  002BEC  0E00               	movlw	0
 10912  002BEE  0100               	movlb	0	; () banked
 10913  002BF0  1B80               	xorwf	___ftge@ff1& (0+255),f,b
 10914  002BF2  0E00               	movlw	0
 10915  002BF4  0100               	movlb	0	; () banked
 10916  002BF6  1B81               	xorwf	(___ftge@ff1+1)& (0+255),f,b
 10917  002BF8  0E80               	movlw	128
 10918  002BFA  0100               	movlb	0	; () banked
 10919  002BFC  1B82               	xorwf	(___ftge@ff1+2)& (0+255),f,b
 10920                           
 10921                           ; BSR set to: 0
 10922  002BFE  0E00               	movlw	0
 10923  002C00  0100               	movlb	0	; () banked
 10924  002C02  1B83               	xorwf	___ftge@ff2& (0+255),f,b
 10925  002C04  0E00               	movlw	0
 10926  002C06  0100               	movlb	0	; () banked
 10927  002C08  1B84               	xorwf	(___ftge@ff2+1)& (0+255),f,b
 10928  002C0A  0E80               	movlw	128
 10929  002C0C  0100               	movlb	0	; () banked
 10930  002C0E  1B85               	xorwf	(___ftge@ff2+2)& (0+255),f,b
 10931  002C10  0100               	movlb	0	; () banked
 10932  002C12  5183               	movf	___ftge@ff2& (0+255),w,b
 10933  002C14  0100               	movlb	0	; () banked
 10934  002C16  5D80               	subwf	___ftge@ff1& (0+255),w,b
 10935  002C18  0100               	movlb	0	; () banked
 10936  002C1A  5184               	movf	(___ftge@ff2+1)& (0+255),w,b
 10937  002C1C  0100               	movlb	0	; () banked
 10938  002C1E  5981               	subwfb	(___ftge@ff1+1)& (0+255),w,b
 10939  002C20  0100               	movlb	0	; () banked
 10940  002C22  5185               	movf	(___ftge@ff2+2)& (0+255),w,b
 10941  002C24  0100               	movlb	0	; () banked
 10942  002C26  5982               	subwfb	(___ftge@ff1+2)& (0+255),w,b
 10943  002C28  B0D8               	btfsc	status,0,c
 10944  002C2A  D002               	goto	l4148
 10945                           
 10946                           ; BSR set to: 0
 10947  002C2C  90D8               	bcf	status,0,c
 10948  002C2E  0012               	return	
 10949  002C30                     l4148:
 10950                           
 10951                           ; BSR set to: 0
 10952  002C30  80D8               	bsf	status,0,c
 10953                           
 10954                           ; BSR set to: 0
 10955  002C32  0012               	return	
 10956  002C34                     __end_of___ftge:
 10957                           	opt stack 0
 10958                           tblptru	equ	0xFF8
 10959                           tblptrh	equ	0xFF7
 10960                           tblptrl	equ	0xFF6
 10961                           tablat	equ	0xFF5
 10962                           prodh	equ	0xFF4
 10963                           prodl	equ	0xFF3
 10964                           intcon	equ	0xFF2
 10965                           postinc0	equ	0xFEE
 10966                           wreg	equ	0xFE8
 10967                           postdec1	equ	0xFE5
 10968                           fsr1l	equ	0xFE1
 10969                           indf2	equ	0xFDF
 10970                           postinc2	equ	0xFDE
 10971                           postdec2	equ	0xFDD
 10972                           fsr2h	equ	0xFDA
 10973                           fsr2l	equ	0xFD9
 10974                           status	equ	0xFD8
 10975                           
 10976 ;; *************** function _lcdClear *****************
 10977 ;; Defined at:
 10978 ;;		line 74 in file "lcd.c"
 10979 ;; Parameters:    Size  Location     Type
 10980 ;;		None
 10981 ;; Auto vars:     Size  Location     Type
 10982 ;;		None
 10983 ;; Return value:  Size  Location     Type
 10984 ;;                  1    wreg      void 
 10985 ;; Registers used:
 10986 ;;		wreg, status,2, status,0, cstack
 10987 ;; Tracked objects:
 10988 ;;		On entry : 0/0
 10989 ;;		On exit  : 0/0
 10990 ;;		Unchanged: 0/0
 10991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10996 ;;Total ram usage:        0 bytes
 10997 ;; Hardware stack levels used:    1
 10998 ;; Hardware stack levels required when called:    7
 10999 ;; This function calls:
 11000 ;;		_lcdInst
 11001 ;; This function is called by:
 11002 ;;		_main
 11003 ;;		_sortBattery
 11004 ;;		_pause
 11005 ;;		_dateTime
 11006 ;;		_mainMenu
 11007 ;;		_runSelect
 11008 ;;		_runMenu
 11009 ;;		_runTime
 11010 ;;		_runStats
 11011 ;; This function uses a non-reentrant model
 11012 ;;
 11013                           
 11014                           	psect	text43
 11015  003A5C                     __ptext43:
 11016                           	opt stack 0
 11017  003A5C                     _lcdClear:
 11018                           	opt stack 21
 11019                           
 11020                           ;lcd.c: 75: lcdInst(0b00000001);
 11021                           
 11022                           ; BSR set to: 0
 11023                           ;incstack = 0
 11024  003A5C  0E01               	movlw	1
 11025  003A5E  EC97  F01C         	call	_lcdInst
 11026  003A62  0012               	return		;funcret
 11027  003A64                     __end_of_lcdClear:
 11028                           	opt stack 0
 11029                           tblptru	equ	0xFF8
 11030                           tblptrh	equ	0xFF7
 11031                           tblptrl	equ	0xFF6
 11032                           tablat	equ	0xFF5
 11033                           prodh	equ	0xFF4
 11034                           prodl	equ	0xFF3
 11035                           intcon	equ	0xFF2
 11036                           postinc0	equ	0xFEE
 11037                           wreg	equ	0xFE8
 11038                           postdec1	equ	0xFE5
 11039                           fsr1l	equ	0xFE1
 11040                           indf2	equ	0xFDF
 11041                           postinc2	equ	0xFDE
 11042                           postdec2	equ	0xFDD
 11043                           fsr2h	equ	0xFDA
 11044                           fsr2l	equ	0xFD9
 11045                           status	equ	0xFD8
 11046                           
 11047 ;; *************** function _pinSetup *****************
 11048 ;; Defined at:
 11049 ;;		line 166 in file "main.c"
 11050 ;; Parameters:    Size  Location     Type
 11051 ;;		None
 11052 ;; Auto vars:     Size  Location     Type
 11053 ;;		None
 11054 ;; Return value:  Size  Location     Type
 11055 ;;                  1    wreg      void 
 11056 ;; Registers used:
 11057 ;;		wreg, status,2, status,0
 11058 ;; Tracked objects:
 11059 ;;		On entry : 0/0
 11060 ;;		On exit  : 0/0
 11061 ;;		Unchanged: 0/0
 11062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11066 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11067 ;;Total ram usage:        0 bytes
 11068 ;; Hardware stack levels used:    1
 11069 ;; Hardware stack levels required when called:    5
 11070 ;; This function calls:
 11071 ;;		Nothing
 11072 ;; This function is called by:
 11073 ;;		_main
 11074 ;; This function uses a non-reentrant model
 11075 ;;
 11076                           
 11077                           	psect	text44
 11078  0037C8                     __ptext44:
 11079                           	opt stack 0
 11080  0037C8                     _pinSetup:
 11081                           	opt stack 25
 11082                           
 11083                           ;main.c: 172: TRISA = 0xFF;
 11084                           
 11085                           ;incstack = 0
 11086  0037C8  6892               	setf	3986,c	;volatile
 11087                           
 11088                           ;main.c: 173: TRISB = 0xFF;
 11089  0037CA  6893               	setf	3987,c	;volatile
 11090                           
 11091                           ;main.c: 174: TRISC = 0x00;
 11092  0037CC  0E00               	movlw	0
 11093  0037CE  6E94               	movwf	3988,c	;volatile
 11094                           
 11095                           ;main.c: 175: TRISD = 0x00;
 11096  0037D0  0E00               	movlw	0
 11097  0037D2  6E95               	movwf	3989,c	;volatile
 11098                           
 11099                           ;main.c: 176: TRISE = 0x00;
 11100  0037D4  0E00               	movlw	0
 11101  0037D6  6E96               	movwf	3990,c	;volatile
 11102                           
 11103                           ;main.c: 178: LATA = 0x00;
 11104  0037D8  0E00               	movlw	0
 11105  0037DA  6E89               	movwf	3977,c	;volatile
 11106                           
 11107                           ;main.c: 179: LATB = 0x00;
 11108  0037DC  0E00               	movlw	0
 11109  0037DE  6E8A               	movwf	3978,c	;volatile
 11110                           
 11111                           ;main.c: 180: LATC = 0x00;
 11112  0037E0  0E00               	movlw	0
 11113  0037E2  6E8B               	movwf	3979,c	;volatile
 11114                           
 11115                           ;main.c: 181: LATD = 0x00;
 11116  0037E4  0E00               	movlw	0
 11117  0037E6  6E8C               	movwf	3980,c	;volatile
 11118                           
 11119                           ;main.c: 182: LATE = 0x00;
 11120  0037E8  0E00               	movlw	0
 11121  0037EA  6E8D               	movwf	3981,c	;volatile
 11122                           
 11123                           ;main.c: 184: ADCON0 = 0x00;
 11124  0037EC  0E00               	movlw	0
 11125  0037EE  6EC2               	movwf	4034,c	;volatile
 11126                           
 11127                           ;main.c: 185: ADCON1 |= 0x0E;
 11128  0037F0  0E0E               	movlw	14
 11129  0037F2  12C1               	iorwf	4033,f,c	;volatile
 11130                           
 11131                           ;main.c: 189: ADCON2 = 0;
 11132  0037F4  0E00               	movlw	0
 11133  0037F6  6EC0               	movwf	4032,c	;volatile
 11134                           
 11135                           ;main.c: 190: ADCON2 |= 0b010;
 11136  0037F8  82C0               	bsf	4032,1,c	;volatile
 11137                           
 11138                           ;main.c: 191: ADCON2 |= 0b110<<3;
 11139  0037FA  0E30               	movlw	48
 11140  0037FC  12C0               	iorwf	4032,f,c	;volatile
 11141                           
 11142                           ;main.c: 192: ADCON2 |= 1<<7;
 11143  0037FE  8EC0               	bsf	4032,7,c	;volatile
 11144                           
 11145                           ;main.c: 196: INT0IE = 1;
 11146  003800  88F2               	bsf	intcon,4,c	;volatile
 11147                           
 11148                           ;main.c: 197: (INTCONbits.GIE = 1);
 11149  003802  8EF2               	bsf	intcon,7,c	;volatile
 11150  003804  0012               	return		;funcret
 11151  003806                     __end_of_pinSetup:
 11152                           	opt stack 0
 11153                           tblptru	equ	0xFF8
 11154                           tblptrh	equ	0xFF7
 11155                           tblptrl	equ	0xFF6
 11156                           tablat	equ	0xFF5
 11157                           prodh	equ	0xFF4
 11158                           prodl	equ	0xFF3
 11159                           intcon	equ	0xFF2
 11160                           postinc0	equ	0xFEE
 11161                           wreg	equ	0xFE8
 11162                           postdec1	equ	0xFE5
 11163                           fsr1l	equ	0xFE1
 11164                           indf2	equ	0xFDF
 11165                           postinc2	equ	0xFDE
 11166                           postdec2	equ	0xFDD
 11167                           fsr2h	equ	0xFDA
 11168                           fsr2l	equ	0xFD9
 11169                           status	equ	0xFD8
 11170                           
 11171 ;; *************** function _initLCD *****************
 11172 ;; Defined at:
 11173 ;;		line 15 in file "lcd.c"
 11174 ;; Parameters:    Size  Location     Type
 11175 ;;		None
 11176 ;; Auto vars:     Size  Location     Type
 11177 ;;		None
 11178 ;; Return value:  Size  Location     Type
 11179 ;;                  1    wreg      void 
 11180 ;; Registers used:
 11181 ;;		wreg, status,2, status,0, cstack
 11182 ;; Tracked objects:
 11183 ;;		On entry : 0/0
 11184 ;;		On exit  : 0/0
 11185 ;;		Unchanged: 0/0
 11186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11189 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11190 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11191 ;;Total ram usage:        1 bytes
 11192 ;; Hardware stack levels used:    1
 11193 ;; Hardware stack levels required when called:    7
 11194 ;; This function calls:
 11195 ;;		_lcdInst
 11196 ;; This function is called by:
 11197 ;;		_main
 11198 ;; This function uses a non-reentrant model
 11199 ;;
 11200                           
 11201                           	psect	text45
 11202  0036F8                     __ptext45:
 11203                           	opt stack 0
 11204  0036F8                     _initLCD:
 11205                           	opt stack 23
 11206                           
 11207                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
 11208                           
 11209                           ;incstack = 0
 11210  0036F8  0E31               	movlw	49
 11211  0036FA  0100               	movlb	0	; () banked
 11212  0036FC  6F84               	movwf	??_initLCD& (0+255),b
 11213  0036FE  0EB2               	movlw	178
 11214  003700                     u5387:
 11215  003700  2EE8               	decfsz	wreg,f,c
 11216  003702  D7FE               	bra	u5387
 11217  003704  2F84               	decfsz	??_initLCD& (0+255),f,b
 11218  003706  D7FC               	bra	u5387
 11219  003708  F000               	nop	
 11220                           
 11221                           ;lcd.c: 18: lcdInst(0b00110011);
 11222  00370A  0E33               	movlw	51
 11223  00370C  EC97  F01C         	call	_lcdInst
 11224                           
 11225                           ;lcd.c: 19: lcdInst(0b00110010);
 11226  003710  0E32               	movlw	50
 11227  003712  EC97  F01C         	call	_lcdInst
 11228                           
 11229                           ;lcd.c: 20: lcdInst(0b00101000);
 11230  003716  0E28               	movlw	40
 11231  003718  EC97  F01C         	call	_lcdInst
 11232                           
 11233                           ;lcd.c: 21: lcdInst(0b00001111);
 11234  00371C  0E0F               	movlw	15
 11235  00371E  EC97  F01C         	call	_lcdInst
 11236                           
 11237                           ;lcd.c: 22: lcdInst(0b00000110);
 11238  003722  0E06               	movlw	6
 11239  003724  EC97  F01C         	call	_lcdInst
 11240                           
 11241                           ;lcd.c: 23: lcdInst(0b00000001);
 11242  003728  0E01               	movlw	1
 11243  00372A  EC97  F01C         	call	_lcdInst
 11244                           
 11245                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
 11246  00372E  0E31               	movlw	49
 11247  003730  0100               	movlb	0	; () banked
 11248  003732  6F84               	movwf	??_initLCD& (0+255),b
 11249  003734  0EB2               	movlw	178
 11250  003736                     u5397:
 11251  003736  2EE8               	decfsz	wreg,f,c
 11252  003738  D7FE               	bra	u5397
 11253  00373A  2F84               	decfsz	??_initLCD& (0+255),f,b
 11254  00373C  D7FC               	bra	u5397
 11255  00373E  F000               	nop	
 11256  003740  0012               	return		;funcret
 11257  003742                     __end_of_initLCD:
 11258                           	opt stack 0
 11259                           tblptru	equ	0xFF8
 11260                           tblptrh	equ	0xFF7
 11261                           tblptrl	equ	0xFF6
 11262                           tablat	equ	0xFF5
 11263                           prodh	equ	0xFF4
 11264                           prodl	equ	0xFF3
 11265                           intcon	equ	0xFF2
 11266                           postinc0	equ	0xFEE
 11267                           wreg	equ	0xFE8
 11268                           postdec1	equ	0xFE5
 11269                           fsr1l	equ	0xFE1
 11270                           indf2	equ	0xFDF
 11271                           postinc2	equ	0xFDE
 11272                           postdec2	equ	0xFDD
 11273                           fsr2h	equ	0xFDA
 11274                           fsr2l	equ	0xFD9
 11275                           status	equ	0xFD8
 11276                           
 11277 ;; *************** function _lcdInst *****************
 11278 ;; Defined at:
 11279 ;;		line 27 in file "lcd.c"
 11280 ;; Parameters:    Size  Location     Type
 11281 ;;  data            1    wreg     unsigned char 
 11282 ;; Auto vars:     Size  Location     Type
 11283 ;;  data            1    3[BANK0 ] unsigned char 
 11284 ;; Return value:  Size  Location     Type
 11285 ;;                  1    wreg      void 
 11286 ;; Registers used:
 11287 ;;		wreg, status,2, status,0, cstack
 11288 ;; Tracked objects:
 11289 ;;		On entry : 0/0
 11290 ;;		On exit  : 0/0
 11291 ;;		Unchanged: 0/0
 11292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11294 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11295 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11296 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11297 ;;Total ram usage:        2 bytes
 11298 ;; Hardware stack levels used:    1
 11299 ;; Hardware stack levels required when called:    6
 11300 ;; This function calls:
 11301 ;;		_lcdNibble
 11302 ;; This function is called by:
 11303 ;;		_initLCD
 11304 ;;		_lcdClear
 11305 ;;		_lcdNewline
 11306 ;;		_lcdHome
 11307 ;; This function uses a non-reentrant model
 11308 ;;
 11309                           
 11310                           	psect	text46
 11311  00392E                     __ptext46:
 11312                           	opt stack 0
 11313  00392E                     _lcdInst:
 11314                           	opt stack 20
 11315                           
 11316                           ;incstack = 0
 11317                           ;lcdInst@data stored from wreg
 11318  00392E  0100               	movlb	0	; () banked
 11319  003930  6F83               	movwf	lcdInst@data& (0+255),b
 11320                           
 11321                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 11322  003932  948C               	bcf	3980,2,c	;volatile
 11323                           
 11324                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 11325  003934  0E74               	movlw	116
 11326  003936                     u5407:
 11327  003936  2EE8               	decfsz	wreg,f,c
 11328  003938  D7FE               	bra	u5407
 11329  00393A  D000               	nop2	
 11330                           
 11331                           ;lcd.c: 30: lcdNibble(data);
 11332  00393C  0100               	movlb	0	; () banked
 11333  00393E  5183               	movf	lcdInst@data& (0+255),w,b
 11334  003940  ECE9  F019         	call	_lcdNibble
 11335                           
 11336                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 11337  003944  0E04               	movlw	4
 11338  003946  0100               	movlb	0	; () banked
 11339  003948  6F82               	movwf	??_lcdInst& (0+255),b
 11340  00394A  0E3D               	movlw	61
 11341  00394C                     u5417:
 11342  00394C  2EE8               	decfsz	wreg,f,c
 11343  00394E  D7FE               	bra	u5417
 11344  003950  2F82               	decfsz	??_lcdInst& (0+255),f,b
 11345  003952  D7FC               	bra	u5417
 11346  003954  D000               	nop2	
 11347  003956  0012               	return		;funcret
 11348  003958                     __end_of_lcdInst:
 11349                           	opt stack 0
 11350                           tblptru	equ	0xFF8
 11351                           tblptrh	equ	0xFF7
 11352                           tblptrl	equ	0xFF6
 11353                           tablat	equ	0xFF5
 11354                           prodh	equ	0xFF4
 11355                           prodl	equ	0xFF3
 11356                           intcon	equ	0xFF2
 11357                           postinc0	equ	0xFEE
 11358                           wreg	equ	0xFE8
 11359                           postdec1	equ	0xFE5
 11360                           fsr1l	equ	0xFE1
 11361                           indf2	equ	0xFDF
 11362                           postinc2	equ	0xFDE
 11363                           postdec2	equ	0xFDD
 11364                           fsr2h	equ	0xFDA
 11365                           fsr2l	equ	0xFD9
 11366                           status	equ	0xFD8
 11367                           
 11368 ;; *************** function _lcdNibble *****************
 11369 ;; Defined at:
 11370 ;;		line 46 in file "lcd.c"
 11371 ;; Parameters:    Size  Location     Type
 11372 ;;  data            1    wreg     unsigned char 
 11373 ;; Auto vars:     Size  Location     Type
 11374 ;;  data            1    1[BANK0 ] unsigned char 
 11375 ;;  temp            1    0[BANK0 ] unsigned char 
 11376 ;; Return value:  Size  Location     Type
 11377 ;;                  1    wreg      void 
 11378 ;; Registers used:
 11379 ;;		wreg, status,2, status,0
 11380 ;; Tracked objects:
 11381 ;;		On entry : 0/0
 11382 ;;		On exit  : 0/0
 11383 ;;		Unchanged: 0/0
 11384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11386 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11388 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11389 ;;Total ram usage:        2 bytes
 11390 ;; Hardware stack levels used:    1
 11391 ;; Hardware stack levels required when called:    5
 11392 ;; This function calls:
 11393 ;;		Nothing
 11394 ;; This function is called by:
 11395 ;;		_lcdInst
 11396 ;;		_putch
 11397 ;; This function uses a non-reentrant model
 11398 ;;
 11399                           
 11400                           	psect	text47
 11401  0033D2                     __ptext47:
 11402                           	opt stack 0
 11403  0033D2                     _lcdNibble:
 11404                           	opt stack 22
 11405                           
 11406                           ;incstack = 0
 11407                           ;lcdNibble@data stored from wreg
 11408  0033D2  0100               	movlb	0	; () banked
 11409  0033D4  6F81               	movwf	lcdNibble@data& (0+255),b
 11410                           
 11411                           ;lcd.c: 48: char temp = data & 0xF0;
 11412  0033D6  0100               	movlb	0	; () banked
 11413  0033D8  5181               	movf	lcdNibble@data& (0+255),w,b
 11414  0033DA  0BF0               	andlw	240
 11415  0033DC  0100               	movlb	0	; () banked
 11416  0033DE  6F80               	movwf	lcdNibble@temp& (0+255),b
 11417                           
 11418                           ;lcd.c: 49: LATD = LATD & 0x0F;
 11419  0033E0  508C               	movf	3980,w,c	;volatile
 11420  0033E2  0B0F               	andlw	15
 11421  0033E4  6E8C               	movwf	3980,c	;volatile
 11422                           
 11423                           ;lcd.c: 50: LATD = temp | LATD;
 11424  0033E6  0100               	movlb	0	; () banked
 11425  0033E8  5180               	movf	lcdNibble@temp& (0+255),w,b
 11426  0033EA  108C               	iorwf	3980,w,c	;volatile
 11427  0033EC  6E8C               	movwf	3980,c	;volatile
 11428                           
 11429                           ; BSR set to: 0
 11430                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 11431  0033EE  968C               	bcf	3980,3,c	;volatile
 11432                           
 11433                           ; BSR set to: 0
 11434                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 11435  0033F0  0ED6               	movlw	214
 11436  0033F2                     u5427:
 11437  0033F2  D000               	nop2	
 11438  0033F4  D000               	nop2	
 11439  0033F6  2EE8               	decfsz	wreg,f,c
 11440  0033F8  D7FC               	bra	u5427
 11441  0033FA  D000               	nop2	
 11442                           
 11443                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 11444  0033FC  868C               	bsf	3980,3,c	;volatile
 11445                           
 11446                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 11447  0033FE  0ED6               	movlw	214
 11448  003400                     u5437:
 11449  003400  D000               	nop2	
 11450  003402  D000               	nop2	
 11451  003404  2EE8               	decfsz	wreg,f,c
 11452  003406  D7FC               	bra	u5437
 11453  003408  D000               	nop2	
 11454                           
 11455                           ;lcd.c: 58: data = data << 4;
 11456  00340A  0100               	movlb	0	; () banked
 11457  00340C  3981               	swapf	lcdNibble@data& (0+255),w,b
 11458  00340E  0BF0               	andlw	240
 11459  003410  0100               	movlb	0	; () banked
 11460  003412  6F81               	movwf	lcdNibble@data& (0+255),b
 11461                           
 11462                           ;lcd.c: 60: temp = data & 0xF0;
 11463  003414  0100               	movlb	0	; () banked
 11464  003416  5181               	movf	lcdNibble@data& (0+255),w,b
 11465  003418  0BF0               	andlw	240
 11466  00341A  0100               	movlb	0	; () banked
 11467  00341C  6F80               	movwf	lcdNibble@temp& (0+255),b
 11468                           
 11469                           ;lcd.c: 61: LATD = LATD & 0x0F;
 11470  00341E  508C               	movf	3980,w,c	;volatile
 11471  003420  0B0F               	andlw	15
 11472  003422  6E8C               	movwf	3980,c	;volatile
 11473                           
 11474                           ;lcd.c: 62: LATD = temp | LATD;
 11475  003424  0100               	movlb	0	; () banked
 11476  003426  5180               	movf	lcdNibble@temp& (0+255),w,b
 11477  003428  108C               	iorwf	3980,w,c	;volatile
 11478  00342A  6E8C               	movwf	3980,c	;volatile
 11479                           
 11480                           ; BSR set to: 0
 11481                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 11482  00342C  968C               	bcf	3980,3,c	;volatile
 11483                           
 11484                           ; BSR set to: 0
 11485                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 11486  00342E  0ED6               	movlw	214
 11487  003430                     u5447:
 11488  003430  D000               	nop2	
 11489  003432  D000               	nop2	
 11490  003434  2EE8               	decfsz	wreg,f,c
 11491  003436  D7FC               	bra	u5447
 11492  003438  D000               	nop2	
 11493                           
 11494                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 11495  00343A  868C               	bsf	3980,3,c	;volatile
 11496                           
 11497                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 11498  00343C  0ED6               	movlw	214
 11499  00343E                     u5457:
 11500  00343E  D000               	nop2	
 11501  003440  D000               	nop2	
 11502  003442  2EE8               	decfsz	wreg,f,c
 11503  003444  D7FC               	bra	u5457
 11504  003446  D000               	nop2	
 11505  003448  0012               	return		;funcret
 11506  00344A                     __end_of_lcdNibble:
 11507                           	opt stack 0
 11508                           tblptru	equ	0xFF8
 11509                           tblptrh	equ	0xFF7
 11510                           tblptrl	equ	0xFF6
 11511                           tablat	equ	0xFF5
 11512                           prodh	equ	0xFF4
 11513                           prodl	equ	0xFF3
 11514                           intcon	equ	0xFF2
 11515                           postinc0	equ	0xFEE
 11516                           wreg	equ	0xFE8
 11517                           postdec1	equ	0xFE5
 11518                           fsr1l	equ	0xFE1
 11519                           indf2	equ	0xFDF
 11520                           postinc2	equ	0xFDE
 11521                           postdec2	equ	0xFDD
 11522                           fsr2h	equ	0xFDA
 11523                           fsr2l	equ	0xFD9
 11524                           status	equ	0xFD8
 11525                           
 11526 ;; *************** function _service *****************
 11527 ;; Defined at:
 11528 ;;		line 261 in file "main.c"
 11529 ;; Parameters:    Size  Location     Type
 11530 ;;		None
 11531 ;; Auto vars:     Size  Location     Type
 11532 ;;  key             1  116[COMRAM] unsigned char 
 11533 ;; Return value:  Size  Location     Type
 11534 ;;                  1    wreg      void 
 11535 ;; Registers used:
 11536 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11537 ;; Tracked objects:
 11538 ;;		On entry : 0/0
 11539 ;;		On exit  : 0/0
 11540 ;;		Unchanged: 0/0
 11541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11543 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11544 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11545 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11546 ;;Total ram usage:       15 bytes
 11547 ;; Hardware stack levels used:    1
 11548 ;; Hardware stack levels required when called:    4
 11549 ;; This function calls:
 11550 ;;		_servoInterruptService
 11551 ;;		i2_setAngle
 11552 ;; This function is called by:
 11553 ;;		Interrupt level 2
 11554 ;; This function uses a non-reentrant model
 11555 ;;
 11556                           
 11557                           	psect	intcode
 11558  000008                     __pintcode:
 11559                           	opt stack 0
 11560  000008                     _service:
 11561                           	opt stack 19
 11562                           
 11563                           ;incstack = 0
 11564  000008  8278               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11565  00000A  EDC5  F011         	call	int_func,f	;refresh shadow registers
 11566                           tblptru	equ	0xFF8
 11567                           tblptrh	equ	0xFF7
 11568                           tblptrl	equ	0xFF6
 11569                           tablat	equ	0xFF5
 11570                           prodh	equ	0xFF4
 11571                           prodl	equ	0xFF3
 11572                           intcon	equ	0xFF2
 11573                           postinc0	equ	0xFEE
 11574                           wreg	equ	0xFE8
 11575                           postdec1	equ	0xFE5
 11576                           fsr1l	equ	0xFE1
 11577                           indf2	equ	0xFDF
 11578                           postinc2	equ	0xFDE
 11579                           postdec2	equ	0xFDD
 11580                           fsr2h	equ	0xFDA
 11581                           fsr2l	equ	0xFD9
 11582                           status	equ	0xFD8
 11583                           
 11584                           	psect	intcode_body
 11585  00238A                     __pintcode_body:
 11586                           	opt stack 19
 11587  00238A                     int_func:
 11588                           	opt stack 19
 11589  00238A  0006               	pop		; remove dummy address from shadow register refresh
 11590  00238C  CFFA F067          	movff	pclath,??_service
 11591  002390  CFFB F068          	movff	pclatu,??_service+1
 11592  002394  CFE9 F069          	movff	fsr0l,??_service+2
 11593  002398  CFEA F06A          	movff	fsr0h,??_service+3
 11594  00239C  CFE1 F06B          	movff	fsr1l,??_service+4
 11595  0023A0  CFE2 F06C          	movff	fsr1h,??_service+5
 11596  0023A4  CFD9 F06D          	movff	fsr2l,??_service+6
 11597  0023A8  CFDA F06E          	movff	fsr2h,??_service+7
 11598  0023AC  CFF3 F06F          	movff	prodl,??_service+8
 11599  0023B0  CFF4 F070          	movff	prodh,??_service+9
 11600  0023B4  CFF6 F071          	movff	tblptrl,??_service+10
 11601  0023B8  CFF7 F072          	movff	tblptrh,??_service+11
 11602  0023BC  CFF8 F073          	movff	tblptru,??_service+12
 11603  0023C0  CFF5 F074          	movff	tablat,??_service+13
 11604                           
 11605                           ;main.c: 263: servoInterruptService();
 11606  0023C4  EC28  F00B         	call	_servoInterruptService	;wreg free
 11607                           
 11608                           ;main.c: 266: if(INT0IF){ INT0IF = 0;
 11609  0023C8  A2F2               	btfss	intcon,1,c	;volatile
 11610  0023CA  D006               	goto	i2l5206
 11611  0023CC  92F2               	bcf	intcon,1,c	;volatile
 11612                           
 11613                           ;main.c: 267: switchFlag = 1;
 11614  0023CE  0E00               	movlw	0
 11615  0023D0  0101               	movlb	1	; () banked
 11616  0023D2  6F2E               	movwf	(_switchFlag+1)& (0+255),b
 11617  0023D4  0E01               	movlw	1
 11618  0023D6  6F2D               	movwf	_switchFlag& (0+255),b
 11619  0023D8                     i2l5206:
 11620                           
 11621                           ;main.c: 268: }
 11622                           ;main.c: 271: if(INT1IF){INT1IF = 0;
 11623  0023D8  A0F0               	btfss	intcon3,0,c	;volatile
 11624  0023DA  D057               	goto	i2l209
 11625  0023DC  90F0               	bcf	intcon3,0,c	;volatile
 11626                           
 11627                           ;main.c: 272: char key = (PORTB & 0xF0) >> 4;
 11628  0023DE  3881               	swapf	3969,w,c	;volatile
 11629  0023E0  0B0F               	andlw	15
 11630  0023E2  0B0F               	andlw	15
 11631  0023E4  6E75               	movwf	service@key,c
 11632                           
 11633                           ;main.c: 273: if(key == 0)setAngle(0,30);
 11634  0023E6  5075               	movf	service@key,w,c
 11635  0023E8  A4D8               	btfss	status,2,c
 11636  0023EA  D00A               	goto	i2l5216
 11637  0023EC  0E00               	movlw	0
 11638  0023EE  6E5E               	movwf	i2setAngle@timer+1,c
 11639  0023F0  0E00               	movlw	0
 11640  0023F2  6E5D               	movwf	i2setAngle@timer,c
 11641  0023F4  0E00               	movlw	0
 11642  0023F6  6E60               	movwf	i2setAngle@angle+1,c
 11643  0023F8  0E1E               	movlw	30
 11644  0023FA  6E5F               	movwf	i2setAngle@angle,c
 11645  0023FC  EC61  F01A         	call	i2_setAngle	;wreg free
 11646  002400                     i2l5216:
 11647                           
 11648                           ;main.c: 274: if(key == 1)setAngle(0,90);
 11649  002400  0475               	decf	service@key,w,c
 11650  002402  A4D8               	btfss	status,2,c
 11651  002404  D00A               	goto	i2l5220
 11652  002406  0E00               	movlw	0
 11653  002408  6E5E               	movwf	i2setAngle@timer+1,c
 11654  00240A  0E00               	movlw	0
 11655  00240C  6E5D               	movwf	i2setAngle@timer,c
 11656  00240E  0E00               	movlw	0
 11657  002410  6E60               	movwf	i2setAngle@angle+1,c
 11658  002412  0E5A               	movlw	90
 11659  002414  6E5F               	movwf	i2setAngle@angle,c
 11660  002416  EC61  F01A         	call	i2_setAngle	;wreg free
 11661  00241A                     i2l5220:
 11662                           
 11663                           ;main.c: 275: if(key == 2)setAngle(0,135);
 11664  00241A  0E02               	movlw	2
 11665  00241C  1875               	xorwf	service@key,w,c
 11666  00241E  A4D8               	btfss	status,2,c
 11667  002420  D00A               	goto	i2l5224
 11668  002422  0E00               	movlw	0
 11669  002424  6E5E               	movwf	i2setAngle@timer+1,c
 11670  002426  0E00               	movlw	0
 11671  002428  6E5D               	movwf	i2setAngle@timer,c
 11672  00242A  0E00               	movlw	0
 11673  00242C  6E60               	movwf	i2setAngle@angle+1,c
 11674  00242E  0E87               	movlw	135
 11675  002430  6E5F               	movwf	i2setAngle@angle,c
 11676  002432  EC61  F01A         	call	i2_setAngle	;wreg free
 11677  002436                     i2l5224:
 11678                           
 11679                           ;main.c: 277: if(key == 4)setAngle(3,80);
 11680  002436  0E04               	movlw	4
 11681  002438  1875               	xorwf	service@key,w,c
 11682  00243A  A4D8               	btfss	status,2,c
 11683  00243C  D00A               	goto	i2l5228
 11684  00243E  0E00               	movlw	0
 11685  002440  6E5E               	movwf	i2setAngle@timer+1,c
 11686  002442  0E03               	movlw	3
 11687  002444  6E5D               	movwf	i2setAngle@timer,c
 11688  002446  0E00               	movlw	0
 11689  002448  6E60               	movwf	i2setAngle@angle+1,c
 11690  00244A  0E50               	movlw	80
 11691  00244C  6E5F               	movwf	i2setAngle@angle,c
 11692  00244E  EC61  F01A         	call	i2_setAngle	;wreg free
 11693  002452                     i2l5228:
 11694                           
 11695                           ;main.c: 278: if(key == 5)setAngle(3,90);
 11696  002452  0E05               	movlw	5
 11697  002454  1875               	xorwf	service@key,w,c
 11698  002456  A4D8               	btfss	status,2,c
 11699  002458  D00A               	goto	i2l5232
 11700  00245A  0E00               	movlw	0
 11701  00245C  6E5E               	movwf	i2setAngle@timer+1,c
 11702  00245E  0E03               	movlw	3
 11703  002460  6E5D               	movwf	i2setAngle@timer,c
 11704  002462  0E00               	movlw	0
 11705  002464  6E60               	movwf	i2setAngle@angle+1,c
 11706  002466  0E5A               	movlw	90
 11707  002468  6E5F               	movwf	i2setAngle@angle,c
 11708  00246A  EC61  F01A         	call	i2_setAngle	;wreg free
 11709  00246E                     i2l5232:
 11710                           
 11711                           ;main.c: 279: if(key == 6)setAngle(3,100);
 11712  00246E  0E06               	movlw	6
 11713  002470  1875               	xorwf	service@key,w,c
 11714  002472  A4D8               	btfss	status,2,c
 11715  002474  D00A               	goto	i2l209
 11716  002476  0E00               	movlw	0
 11717  002478  6E5E               	movwf	i2setAngle@timer+1,c
 11718  00247A  0E03               	movlw	3
 11719  00247C  6E5D               	movwf	i2setAngle@timer,c
 11720  00247E  0E00               	movlw	0
 11721  002480  6E60               	movwf	i2setAngle@angle+1,c
 11722  002482  0E64               	movlw	100
 11723  002484  6E5F               	movwf	i2setAngle@angle,c
 11724  002486  EC61  F01A         	call	i2_setAngle	;wreg free
 11725  00248A                     i2l209:
 11726  00248A  C074  FFF5         	movff	??_service+13,tablat
 11727  00248E  C073  FFF8         	movff	??_service+12,tblptru
 11728  002492  C072  FFF7         	movff	??_service+11,tblptrh
 11729  002496  C071  FFF6         	movff	??_service+10,tblptrl
 11730  00249A  C070  FFF4         	movff	??_service+9,prodh
 11731  00249E  C06F  FFF3         	movff	??_service+8,prodl
 11732  0024A2  C06E  FFDA         	movff	??_service+7,fsr2h
 11733  0024A6  C06D  FFD9         	movff	??_service+6,fsr2l
 11734  0024AA  C06C  FFE2         	movff	??_service+5,fsr1h
 11735  0024AE  C06B  FFE1         	movff	??_service+4,fsr1l
 11736  0024B2  C06A  FFEA         	movff	??_service+3,fsr0h
 11737  0024B6  C069  FFE9         	movff	??_service+2,fsr0l
 11738  0024BA  C068  FFFB         	movff	??_service+1,pclatu
 11739  0024BE  C067  FFFA         	movff	??_service,pclath
 11740  0024C2  9278               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11741  0024C4  0011               	retfie		f
 11742  0024C6                     __end_of_service:
 11743                           	opt stack 0
 11744                           pclatu	equ	0xFFB
 11745                           pclath	equ	0xFFA
 11746                           tblptru	equ	0xFF8
 11747                           tblptrh	equ	0xFF7
 11748                           tblptrl	equ	0xFF6
 11749                           tablat	equ	0xFF5
 11750                           prodh	equ	0xFF4
 11751                           prodl	equ	0xFF3
 11752                           intcon	equ	0xFF2
 11753                           intcon3	equ	0xFF0
 11754                           postinc0	equ	0xFEE
 11755                           fsr0h	equ	0xFEA
 11756                           fsr0l	equ	0xFE9
 11757                           wreg	equ	0xFE8
 11758                           postdec1	equ	0xFE5
 11759                           fsr1h	equ	0xFE2
 11760                           fsr1l	equ	0xFE1
 11761                           indf2	equ	0xFDF
 11762                           postinc2	equ	0xFDE
 11763                           postdec2	equ	0xFDD
 11764                           fsr2h	equ	0xFDA
 11765                           fsr2l	equ	0xFD9
 11766                           status	equ	0xFD8
 11767                           
 11768 ;; *************** function i2_setAngle *****************
 11769 ;; Defined at:
 11770 ;;		line 43 in file "servo.c"
 11771 ;; Parameters:    Size  Location     Type
 11772 ;;  timer           2   92[COMRAM] int 
 11773 ;;  angle           2   94[COMRAM] int 
 11774 ;; Auto vars:     Size  Location     Type
 11775 ;;		None
 11776 ;; Return value:  Size  Location     Type
 11777 ;;                  1    wreg      void 
 11778 ;; Registers used:
 11779 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11780 ;; Tracked objects:
 11781 ;;		On entry : 0/0
 11782 ;;		On exit  : 0/0
 11783 ;;		Unchanged: 0/0
 11784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11785 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11787 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11788 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11789 ;;Total ram usage:       10 bytes
 11790 ;; Hardware stack levels used:    1
 11791 ;; Hardware stack levels required when called:    3
 11792 ;; This function calls:
 11793 ;;		i2_angleToPulse
 11794 ;; This function is called by:
 11795 ;;		_service
 11796 ;; This function uses a non-reentrant model
 11797 ;;
 11798                           
 11799                           	psect	text49
 11800  0034C2                     __ptext49:
 11801                           	opt stack 0
 11802  0034C2                     i2_setAngle:
 11803                           	opt stack 19
 11804                           
 11805                           ;servo.c: 44: pulse[timer] = 0xffff - angleToPulse(angle);
 11806                           
 11807                           ;incstack = 0
 11808  0034C2  C05F  F046         	movff	i2setAngle@angle,i2angleToPulse@angle
 11809  0034C6  C060  F047         	movff	i2setAngle@angle+1,i2angleToPulse@angle+1
 11810  0034CA  EC25  F011         	call	i2_angleToPulse	;wreg free
 11811  0034CE  1E46               	comf	?i2_angleToPulse,f,c
 11812  0034D0  1E47               	comf	?i2_angleToPulse+1,f,c
 11813  0034D2  1E48               	comf	?i2_angleToPulse+2,f,c
 11814  0034D4  1E49               	comf	?i2_angleToPulse+3,f,c
 11815  0034D6  2A46               	incf	?i2_angleToPulse,f,c
 11816  0034D8  0E00               	movlw	0
 11817  0034DA  2247               	addwfc	?i2_angleToPulse+1,f,c
 11818  0034DC  2248               	addwfc	?i2_angleToPulse+2,f,c
 11819  0034DE  2249               	addwfc	?i2_angleToPulse+3,f,c
 11820  0034E0  0EFF               	movlw	255
 11821  0034E2  2446               	addwf	?i2_angleToPulse,w,c
 11822  0034E4  6E61               	movwf	??i2_setAngle& (0+255),c
 11823  0034E6  0EFF               	movlw	255
 11824  0034E8  2047               	addwfc	?i2_angleToPulse+1,w,c
 11825  0034EA  6E62               	movwf	(??i2_setAngle+1)& (0+255),c
 11826  0034EC  0E00               	movlw	0
 11827  0034EE  2048               	addwfc	?i2_angleToPulse+2,w,c
 11828  0034F0  6E63               	movwf	(??i2_setAngle+2)& (0+255),c
 11829  0034F2  0E00               	movlw	0
 11830  0034F4  2049               	addwfc	?i2_angleToPulse+3,w,c
 11831  0034F6  6E64               	movwf	(??i2_setAngle+3)& (0+255),c
 11832  0034F8  0E00               	movlw	low _pulse
 11833  0034FA  6E65               	movwf	(??i2_setAngle+4)& (0+255),c
 11834  0034FC  0E01               	movlw	high _pulse
 11835  0034FE  6E66               	movwf	(??i2_setAngle+5)& (0+255),c
 11836  003500  90D8               	bcf	status,0,c
 11837  003502  345D               	rlcf	i2setAngle@timer,w,c
 11838  003504  6ED9               	movwf	fsr2l,c
 11839  003506  345E               	rlcf	i2setAngle@timer+1,w,c
 11840  003508  6EDA               	movwf	fsr2h,c
 11841  00350A  90D8               	bcf	status,0,c
 11842  00350C  36D9               	rlcf	fsr2l,f,c
 11843  00350E  36DA               	rlcf	fsr2h,f,c
 11844  003510  5065               	movf	??i2_setAngle+4,w,c
 11845  003512  26D9               	addwf	fsr2l,f,c
 11846  003514  5066               	movf	??i2_setAngle+5,w,c
 11847  003516  22DA               	addwfc	fsr2h,f,c
 11848  003518  C061  FFDE         	movff	??i2_setAngle,postinc2
 11849  00351C  C062  FFDE         	movff	??i2_setAngle+1,postinc2
 11850  003520  C063  FFDE         	movff	??i2_setAngle+2,postinc2
 11851  003524  C064  FFDE         	movff	??i2_setAngle+3,postinc2
 11852  003528  0012               	return		;funcret
 11853  00352A                     __end_ofi2_setAngle:
 11854                           	opt stack 0
 11855                           pclatu	equ	0xFFB
 11856                           pclath	equ	0xFFA
 11857                           tblptru	equ	0xFF8
 11858                           tblptrh	equ	0xFF7
 11859                           tblptrl	equ	0xFF6
 11860                           tablat	equ	0xFF5
 11861                           prodh	equ	0xFF4
 11862                           prodl	equ	0xFF3
 11863                           intcon	equ	0xFF2
 11864                           intcon3	equ	0xFF0
 11865                           postinc0	equ	0xFEE
 11866                           fsr0h	equ	0xFEA
 11867                           fsr0l	equ	0xFE9
 11868                           wreg	equ	0xFE8
 11869                           postdec1	equ	0xFE5
 11870                           fsr1h	equ	0xFE2
 11871                           fsr1l	equ	0xFE1
 11872                           indf2	equ	0xFDF
 11873                           postinc2	equ	0xFDE
 11874                           postdec2	equ	0xFDD
 11875                           fsr2h	equ	0xFDA
 11876                           fsr2l	equ	0xFD9
 11877                           status	equ	0xFD8
 11878                           
 11879 ;; *************** function i2_angleToPulse *****************
 11880 ;; Defined at:
 11881 ;;		line 35 in file "servo.c"
 11882 ;; Parameters:    Size  Location     Type
 11883 ;;  angle           2   69[COMRAM] int 
 11884 ;; Auto vars:     Size  Location     Type
 11885 ;;  angleToPulse    4   88[COMRAM] long 
 11886 ;;  angleToPulse    4   81[COMRAM] long 
 11887 ;;  angleToPulse    4   77[COMRAM] long 
 11888 ;; Return value:  Size  Location     Type
 11889 ;;                  4   69[COMRAM] long 
 11890 ;; Registers used:
 11891 ;;		wreg, status,2, status,0, cstack
 11892 ;; Tracked objects:
 11893 ;;		On entry : 0/0
 11894 ;;		On exit  : 0/0
 11895 ;;		Unchanged: 0/0
 11896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11897 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11898 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11899 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11900 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11901 ;;Total ram usage:       23 bytes
 11902 ;; Hardware stack levels used:    1
 11903 ;; Hardware stack levels required when called:    2
 11904 ;; This function calls:
 11905 ;;		i2___altoft
 11906 ;;		i2___awtoft
 11907 ;;		i2___ftadd
 11908 ;;		i2___ftdiv
 11909 ;;		i2___ftmul
 11910 ;;		i2___fttol
 11911 ;; This function is called by:
 11912 ;;		i2_setAngle
 11913 ;; This function uses a non-reentrant model
 11914 ;;
 11915                           
 11916                           	psect	text50
 11917  00224A                     __ptext50:
 11918                           	opt stack 0
 11919  00224A                     i2_angleToPulse:
 11920                           	opt stack 19
 11921                           
 11922                           ;servo.c: 36: long offset = 0;
 11923                           
 11924                           ;incstack = 0
 11925  00224A  0E00               	movlw	0
 11926  00224C  6E4E               	movwf	i2angleToPulse@offset,c
 11927  00224E  0E00               	movlw	0
 11928  002250  6E4F               	movwf	i2angleToPulse@offset+1,c
 11929  002252  0E00               	movlw	0
 11930  002254  6E50               	movwf	i2angleToPulse@offset+2,c
 11931  002256  0E00               	movlw	0
 11932  002258  6E51               	movwf	i2angleToPulse@offset+3,c
 11933                           
 11934                           ;servo.c: 37: long a000 = 1250;
 11935  00225A  0EE2               	movlw	226
 11936  00225C  6E59               	movwf	i2angleToPulse@a000,c
 11937  00225E  0E04               	movlw	4
 11938  002260  6E5A               	movwf	i2angleToPulse@a000+1,c
 11939  002262  0E00               	movlw	0
 11940  002264  6E5B               	movwf	i2angleToPulse@a000+2,c
 11941  002266  0E00               	movlw	0
 11942  002268  6E5C               	movwf	i2angleToPulse@a000+3,c
 11943                           
 11944                           ;servo.c: 38: long a180 = 6250;
 11945  00226A  0E6A               	movlw	106
 11946  00226C  6E52               	movwf	i2angleToPulse@a180,c
 11947  00226E  0E18               	movlw	24
 11948  002270  6E53               	movwf	i2angleToPulse@a180+1,c
 11949  002272  0E00               	movlw	0
 11950  002274  6E54               	movwf	i2angleToPulse@a180+2,c
 11951  002276  0E00               	movlw	0
 11952  002278  6E55               	movwf	i2angleToPulse@a180+3,c
 11953                           
 11954                           ;servo.c: 40: return a000 + angle/180.0*(a180-a000) + offset;
 11955  00227A  C059  F04A         	movff	i2angleToPulse@a000,??i2_angleToPulse
 11956  00227E  C05A  F04B         	movff	i2angleToPulse@a000+1,??i2_angleToPulse+1
 11957  002282  C05B  F04C         	movff	i2angleToPulse@a000+2,??i2_angleToPulse+2
 11958  002286  C05C  F04D         	movff	i2angleToPulse@a000+3,??i2_angleToPulse+3
 11959  00228A  1E4A               	comf	??i2_angleToPulse,f,c
 11960  00228C  1E4B               	comf	??i2_angleToPulse+1,f,c
 11961  00228E  1E4C               	comf	??i2_angleToPulse+2,f,c
 11962  002290  1E4D               	comf	??i2_angleToPulse+3,f,c
 11963  002292  2A4A               	incf	??i2_angleToPulse,f,c
 11964  002294  0E00               	movlw	0
 11965  002296  224B               	addwfc	??i2_angleToPulse+1,f,c
 11966  002298  224C               	addwfc	??i2_angleToPulse+2,f,c
 11967  00229A  224D               	addwfc	??i2_angleToPulse+3,f,c
 11968  00229C  5052               	movf	i2angleToPulse@a180,w,c
 11969  00229E  244A               	addwf	??i2_angleToPulse,w,c
 11970  0022A0  6E09               	movwf	i2___altoft@c,c
 11971  0022A2  5053               	movf	i2angleToPulse@a180+1,w,c
 11972  0022A4  204B               	addwfc	??i2_angleToPulse+1,w,c
 11973  0022A6  6E0A               	movwf	i2___altoft@c+1,c
 11974  0022A8  5054               	movf	i2angleToPulse@a180+2,w,c
 11975  0022AA  204C               	addwfc	??i2_angleToPulse+2,w,c
 11976  0022AC  6E0B               	movwf	i2___altoft@c+2,c
 11977  0022AE  5055               	movf	i2angleToPulse@a180+3,w,c
 11978  0022B0  204D               	addwfc	??i2_angleToPulse+3,w,c
 11979  0022B2  6E0C               	movwf	i2___altoft@c+3,c
 11980  0022B4  EC25  F01A         	call	i2___altoft	;wreg free
 11981  0022B8  C009  F01F         	movff	?i2___altoft,i2___ftmul@f2
 11982  0022BC  C00A  F020         	movff	?i2___altoft+1,i2___ftmul@f2+1
 11983  0022C0  C00B  F021         	movff	?i2___altoft+2,i2___ftmul@f2+2
 11984  0022C4  0E00               	movlw	0
 11985  0022C6  6E10               	movwf	i2___ftdiv@f2,c
 11986  0022C8  0E34               	movlw	52
 11987  0022CA  6E11               	movwf	i2___ftdiv@f2+1,c
 11988  0022CC  0E43               	movlw	67
 11989  0022CE  6E12               	movwf	i2___ftdiv@f2+2,c
 11990  0022D0  C046  F009         	movff	i2angleToPulse@angle,i2___awtoft@c
 11991  0022D4  C047  F00A         	movff	i2angleToPulse@angle+1,i2___awtoft@c+1
 11992  0022D8  EC03  F01C         	call	i2___awtoft	;wreg free
 11993  0022DC  C009  F00D         	movff	?i2___awtoft,i2___ftdiv@f1
 11994  0022E0  C00A  F00E         	movff	?i2___awtoft+1,i2___ftdiv@f1+1
 11995  0022E4  C00B  F00F         	movff	?i2___awtoft+2,i2___ftdiv@f1+2
 11996  0022E8  ECD3  F014         	call	i2___ftdiv	;wreg free
 11997  0022EC  C00D  F01C         	movff	?i2___ftdiv,i2___ftmul@f1
 11998  0022F0  C00E  F01D         	movff	?i2___ftdiv+1,i2___ftmul@f1+1
 11999  0022F4  C00F  F01E         	movff	?i2___ftdiv+2,i2___ftmul@f1+2
 12000  0022F8  ECE5  F013         	call	i2___ftmul	;wreg free
 12001  0022FC  C01C  F02E         	movff	?i2___ftmul,i2___ftadd@f2
 12002  002300  C01D  F02F         	movff	?i2___ftmul+1,i2___ftadd@f2+1
 12003  002304  C01E  F030         	movff	?i2___ftmul+2,i2___ftadd@f2+2
 12004  002308  C059  F009         	movff	i2angleToPulse@a000,i2___altoft@c
 12005  00230C  C05A  F00A         	movff	i2angleToPulse@a000+1,i2___altoft@c+1
 12006  002310  C05B  F00B         	movff	i2angleToPulse@a000+2,i2___altoft@c+2
 12007  002314  C05C  F00C         	movff	i2angleToPulse@a000+3,i2___altoft@c+3
 12008  002318  EC25  F01A         	call	i2___altoft	;wreg free
 12009  00231C  C009  F02B         	movff	?i2___altoft,i2___ftadd@f1
 12010  002320  C00A  F02C         	movff	?i2___altoft+1,i2___ftadd@f1+1
 12011  002324  C00B  F02D         	movff	?i2___altoft+2,i2___ftadd@f1+2
 12012  002328  EC12  F00C         	call	i2___ftadd	;wreg free
 12013  00232C  C02B  F056         	movff	?i2___ftadd,i2_angleToPulse$1392
 12014  002330  C02C  F057         	movff	?i2___ftadd+1,i2_angleToPulse$1392+1
 12015  002334  C02D  F058         	movff	?i2___ftadd+2,i2_angleToPulse$1392+2
 12016                           
 12017                           ;servo.c: 40: return a000 + angle/180.0*(a180-a000) + offset;
 12018  002338  C04E  F009         	movff	i2angleToPulse@offset,i2___altoft@c
 12019  00233C  C04F  F00A         	movff	i2angleToPulse@offset+1,i2___altoft@c+1
 12020  002340  C050  F00B         	movff	i2angleToPulse@offset+2,i2___altoft@c+2
 12021  002344  C051  F00C         	movff	i2angleToPulse@offset+3,i2___altoft@c+3
 12022  002348  EC25  F01A         	call	i2___altoft	;wreg free
 12023  00234C  C009  F02E         	movff	?i2___altoft,i2___ftadd@f2
 12024  002350  C00A  F02F         	movff	?i2___altoft+1,i2___ftadd@f2+1
 12025  002354  C00B  F030         	movff	?i2___altoft+2,i2___ftadd@f2+2
 12026  002358  C056  F02B         	movff	i2_angleToPulse$1392,i2___ftadd@f1
 12027  00235C  C057  F02C         	movff	i2_angleToPulse$1392+1,i2___ftadd@f1+1
 12028  002360  C058  F02D         	movff	i2_angleToPulse$1392+2,i2___ftadd@f1+2
 12029  002364  EC12  F00C         	call	i2___ftadd	;wreg free
 12030  002368  C02B  F037         	movff	?i2___ftadd,i2___fttol@f1
 12031  00236C  C02C  F038         	movff	?i2___ftadd+1,i2___fttol@f1+1
 12032  002370  C02D  F039         	movff	?i2___ftadd+2,i2___fttol@f1+2
 12033  002374  EC6B  F013         	call	i2___fttol	;wreg free
 12034  002378  C037  F046         	movff	?i2___fttol,?i2_angleToPulse
 12035  00237C  C038  F047         	movff	?i2___fttol+1,?i2_angleToPulse+1
 12036  002380  C039  F048         	movff	?i2___fttol+2,?i2_angleToPulse+2
 12037  002384  C03A  F049         	movff	?i2___fttol+3,?i2_angleToPulse+3
 12038  002388  0012               	return	
 12039  00238A                     __end_ofi2_angleToPulse:
 12040                           	opt stack 0
 12041                           pclatu	equ	0xFFB
 12042                           pclath	equ	0xFFA
 12043                           tblptru	equ	0xFF8
 12044                           tblptrh	equ	0xFF7
 12045                           tblptrl	equ	0xFF6
 12046                           tablat	equ	0xFF5
 12047                           prodh	equ	0xFF4
 12048                           prodl	equ	0xFF3
 12049                           intcon	equ	0xFF2
 12050                           intcon3	equ	0xFF0
 12051                           postinc0	equ	0xFEE
 12052                           fsr0h	equ	0xFEA
 12053                           fsr0l	equ	0xFE9
 12054                           wreg	equ	0xFE8
 12055                           postdec1	equ	0xFE5
 12056                           fsr1h	equ	0xFE2
 12057                           fsr1l	equ	0xFE1
 12058                           indf2	equ	0xFDF
 12059                           postinc2	equ	0xFDE
 12060                           postdec2	equ	0xFDD
 12061                           fsr2h	equ	0xFDA
 12062                           fsr2l	equ	0xFD9
 12063                           status	equ	0xFD8
 12064                           
 12065 ;; *************** function i2___fttol *****************
 12066 ;; Defined at:
 12067 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 12068 ;; Parameters:    Size  Location     Type
 12069 ;;  f1              3   54[COMRAM] float 
 12070 ;; Auto vars:     Size  Location     Type
 12071 ;;  __fttol         4   64[COMRAM] unsigned long 
 12072 ;;  __fttol         1   68[COMRAM] unsigned char 
 12073 ;;  __fttol         1   63[COMRAM] unsigned char 
 12074 ;; Return value:  Size  Location     Type
 12075 ;;                  4   54[COMRAM] long 
 12076 ;; Registers used:
 12077 ;;		wreg, status,2, status,0
 12078 ;; Tracked objects:
 12079 ;;		On entry : 0/0
 12080 ;;		On exit  : 0/0
 12081 ;;		Unchanged: 0/0
 12082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12083 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12084 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12085 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12086 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12087 ;;Total ram usage:       15 bytes
 12088 ;; Hardware stack levels used:    1
 12089 ;; This function calls:
 12090 ;;		Nothing
 12091 ;; This function is called by:
 12092 ;;		i2_angleToPulse
 12093 ;; This function uses a non-reentrant model
 12094 ;;
 12095                           
 12096                           	psect	text51
 12097  0026D6                     __ptext51:
 12098                           	opt stack 0
 12099  0026D6                     i2___fttol:
 12100                           	opt stack 20
 12101                           
 12102                           ;incstack = 0
 12103  0026D6  C039  F03B         	movff	i2___fttol@f1+2,??i2___fttol
 12104  0026DA  6A3C               	clrf	(??i2___fttol+1)& (0+255),c
 12105  0026DC  6A3D               	clrf	(??i2___fttol+2)& (0+255),c
 12106  0026DE  3438               	rlcf	i2___fttol@f1+1,w,c
 12107  0026E0  363B               	rlcf	??i2___fttol& (0+255),f,c
 12108  0026E2  E301               	bnc	u457_41
 12109  0026E4  803C               	bsf	(??i2___fttol+1)& (0+255),0,c
 12110  0026E6                     u457_41:
 12111  0026E6  503B               	movf	??i2___fttol,w,c
 12112  0026E8  6E45               	movwf	i2___fttol@exp1,c
 12113  0026EA  5045               	movf	i2___fttol@exp1,w,c
 12114  0026EC  A4D8               	btfss	status,2,c
 12115  0026EE  D009               	goto	i2l4712
 12116  0026F0  0E00               	movlw	0
 12117  0026F2  6E37               	movwf	?i2___fttol,c
 12118  0026F4  0E00               	movlw	0
 12119  0026F6  6E38               	movwf	?i2___fttol+1,c
 12120  0026F8  0E00               	movlw	0
 12121  0026FA  6E39               	movwf	?i2___fttol+2,c
 12122  0026FC  0E00               	movlw	0
 12123  0026FE  6E3A               	movwf	?i2___fttol+3,c
 12124  002700  0012               	return	
 12125  002702                     i2l4712:
 12126  002702  0E17               	movlw	23
 12127  002704  6E3B               	movwf	??i2___fttol& (0+255),c
 12128  002706  C037  F03C         	movff	i2___fttol@f1,??i2___fttol+1
 12129  00270A  C038  F03D         	movff	i2___fttol@f1+1,??i2___fttol+2
 12130  00270E  C039  F03E         	movff	i2___fttol@f1+2,??i2___fttol+3
 12131  002712  283B               	incf	??i2___fttol,w,c
 12132  002714  6E3F               	movwf	(??i2___fttol+4)& (0+255),c
 12133  002716  D004               	goto	i2u459_40
 12134  002718                     i2u459_45:
 12135  002718  90D8               	bcf	status,0,c
 12136  00271A  323E               	rrcf	??i2___fttol+3,f,c
 12137  00271C  323D               	rrcf	??i2___fttol+2,f,c
 12138  00271E  323C               	rrcf	??i2___fttol+1,f,c
 12139  002720                     i2u459_40:
 12140  002720  2E3F               	decfsz	(??i2___fttol+4)& (0+255),f,c
 12141  002722  D7FA               	goto	i2u459_45
 12142  002724  503C               	movf	??i2___fttol+1,w,c
 12143  002726  6E40               	movwf	i2___fttol@sign1,c
 12144  002728  8E38               	bsf	i2___fttol@f1+1,7,c
 12145  00272A  0EFF               	movlw	255
 12146  00272C  1637               	andwf	i2___fttol@f1,f,c
 12147  00272E  0EFF               	movlw	255
 12148  002730  1638               	andwf	i2___fttol@f1+1,f,c
 12149  002732  0E00               	movlw	0
 12150  002734  1639               	andwf	i2___fttol@f1+2,f,c
 12151  002736  5037               	movf	i2___fttol@f1,w,c
 12152  002738  6E41               	movwf	i2___fttol@lval,c
 12153  00273A  5038               	movf	i2___fttol@f1+1,w,c
 12154  00273C  6E42               	movwf	i2___fttol@lval+1,c
 12155  00273E  5039               	movf	i2___fttol@f1+2,w,c
 12156  002740  6E43               	movwf	i2___fttol@lval+2,c
 12157  002742  6A44               	clrf	i2___fttol@lval+3,c
 12158  002744  0E8E               	movlw	142
 12159  002746  5E45               	subwf	i2___fttol@exp1,f,c
 12160  002748  AE45               	btfss	i2___fttol@exp1,7,c
 12161  00274A  D016               	goto	i2l4734
 12162  00274C  5045               	movf	i2___fttol@exp1,w,c
 12163  00274E  0A80               	xorlw	128
 12164  002750  0F8F               	addlw	143
 12165  002752  B0D8               	btfsc	status,0,c
 12166  002754  D009               	goto	i2l4730
 12167  002756  0E00               	movlw	0
 12168  002758  6E37               	movwf	?i2___fttol,c
 12169  00275A  0E00               	movlw	0
 12170  00275C  6E38               	movwf	?i2___fttol+1,c
 12171  00275E  0E00               	movlw	0
 12172  002760  6E39               	movwf	?i2___fttol+2,c
 12173  002762  0E00               	movlw	0
 12174  002764  6E3A               	movwf	?i2___fttol+3,c
 12175  002766  0012               	return	
 12176  002768                     i2l4730:
 12177  002768  90D8               	bcf	status,0,c
 12178  00276A  3244               	rrcf	i2___fttol@lval+3,f,c
 12179  00276C  3243               	rrcf	i2___fttol@lval+2,f,c
 12180  00276E  3242               	rrcf	i2___fttol@lval+1,f,c
 12181  002770  3241               	rrcf	i2___fttol@lval,f,c
 12182  002772  3E45               	incfsz	i2___fttol@exp1,f,c
 12183  002774  D7F9               	goto	i2l4730
 12184  002776  D015               	goto	i2l4744
 12185  002778                     i2l4734:
 12186  002778  0E17               	movlw	23
 12187  00277A  6445               	cpfsgt	i2___fttol@exp1,c
 12188  00277C  D00F               	goto	i2l4742
 12189  00277E  0E00               	movlw	0
 12190  002780  6E37               	movwf	?i2___fttol,c
 12191  002782  0E00               	movlw	0
 12192  002784  6E38               	movwf	?i2___fttol+1,c
 12193  002786  0E00               	movlw	0
 12194  002788  6E39               	movwf	?i2___fttol+2,c
 12195  00278A  0E00               	movlw	0
 12196  00278C  6E3A               	movwf	?i2___fttol+3,c
 12197  00278E  0012               	return	
 12198  002790                     i2l4740:
 12199  002790  90D8               	bcf	status,0,c
 12200  002792  3641               	rlcf	i2___fttol@lval,f,c
 12201  002794  3642               	rlcf	i2___fttol@lval+1,f,c
 12202  002796  3643               	rlcf	i2___fttol@lval+2,f,c
 12203  002798  3644               	rlcf	i2___fttol@lval+3,f,c
 12204  00279A  0645               	decf	i2___fttol@exp1,f,c
 12205  00279C                     i2l4742:
 12206  00279C  5045               	movf	i2___fttol@exp1,w,c
 12207  00279E  A4D8               	btfss	status,2,c
 12208  0027A0  D7F7               	goto	i2l4740
 12209  0027A2                     i2l4744:
 12210  0027A2  5040               	movf	i2___fttol@sign1,w,c
 12211  0027A4  B4D8               	btfsc	status,2,c
 12212  0027A6  D008               	goto	i2l4748
 12213  0027A8  1E44               	comf	i2___fttol@lval+3,f,c
 12214  0027AA  1E43               	comf	i2___fttol@lval+2,f,c
 12215  0027AC  1E42               	comf	i2___fttol@lval+1,f,c
 12216  0027AE  6C41               	negf	i2___fttol@lval,c
 12217  0027B0  0E00               	movlw	0
 12218  0027B2  2242               	addwfc	i2___fttol@lval+1,f,c
 12219  0027B4  2243               	addwfc	i2___fttol@lval+2,f,c
 12220  0027B6  2244               	addwfc	i2___fttol@lval+3,f,c
 12221  0027B8                     i2l4748:
 12222  0027B8  C041  F037         	movff	i2___fttol@lval,?i2___fttol
 12223  0027BC  C042  F038         	movff	i2___fttol@lval+1,?i2___fttol+1
 12224  0027C0  C043  F039         	movff	i2___fttol@lval+2,?i2___fttol+2
 12225  0027C4  C044  F03A         	movff	i2___fttol@lval+3,?i2___fttol+3
 12226  0027C8  0012               	return	
 12227  0027CA                     __end_ofi2___fttol:
 12228                           	opt stack 0
 12229                           pclatu	equ	0xFFB
 12230                           pclath	equ	0xFFA
 12231                           tblptru	equ	0xFF8
 12232                           tblptrh	equ	0xFF7
 12233                           tblptrl	equ	0xFF6
 12234                           tablat	equ	0xFF5
 12235                           prodh	equ	0xFF4
 12236                           prodl	equ	0xFF3
 12237                           intcon	equ	0xFF2
 12238                           intcon3	equ	0xFF0
 12239                           postinc0	equ	0xFEE
 12240                           fsr0h	equ	0xFEA
 12241                           fsr0l	equ	0xFE9
 12242                           wreg	equ	0xFE8
 12243                           postdec1	equ	0xFE5
 12244                           fsr1h	equ	0xFE2
 12245                           fsr1l	equ	0xFE1
 12246                           indf2	equ	0xFDF
 12247                           postinc2	equ	0xFDE
 12248                           postdec2	equ	0xFDD
 12249                           fsr2h	equ	0xFDA
 12250                           fsr2l	equ	0xFD9
 12251                           status	equ	0xFD8
 12252                           
 12253 ;; *************** function i2___ftmul *****************
 12254 ;; Defined at:
 12255 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 12256 ;; Parameters:    Size  Location     Type
 12257 ;;  f1              3   27[COMRAM] float 
 12258 ;;  f2              3   30[COMRAM] float 
 12259 ;; Auto vars:     Size  Location     Type
 12260 ;;  __ftmul         3   37[COMRAM] unsigned um
 12261 ;;  __ftmul         1   41[COMRAM] unsigned char 
 12262 ;;  __ftmul         1   40[COMRAM] unsigned char 
 12263 ;;  __ftmul         1   36[COMRAM] unsigned char 
 12264 ;; Return value:  Size  Location     Type
 12265 ;;                  3   27[COMRAM] float 
 12266 ;; Registers used:
 12267 ;;		wreg, status,2, status,0, cstack
 12268 ;; Tracked objects:
 12269 ;;		On entry : 0/0
 12270 ;;		On exit  : 0/0
 12271 ;;		Unchanged: 0/0
 12272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12273 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12274 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12275 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12276 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12277 ;;Total ram usage:       15 bytes
 12278 ;; Hardware stack levels used:    1
 12279 ;; Hardware stack levels required when called:    1
 12280 ;; This function calls:
 12281 ;;		i2___ftpack
 12282 ;; This function is called by:
 12283 ;;		i2_angleToPulse
 12284 ;; This function uses a non-reentrant model
 12285 ;;
 12286                           
 12287                           	psect	text52
 12288  0027CA                     __ptext52:
 12289                           	opt stack 0
 12290  0027CA                     i2___ftmul:
 12291                           	opt stack 19
 12292                           
 12293                           ;incstack = 0
 12294  0027CA  C01E  F022         	movff	i2___ftmul@f1+2,??i2___ftmul
 12295  0027CE  6A23               	clrf	(??i2___ftmul+1)& (0+255),c
 12296  0027D0  6A24               	clrf	(??i2___ftmul+2)& (0+255),c
 12297  0027D2  341D               	rlcf	i2___ftmul@f1+1,w,c
 12298  0027D4  3622               	rlcf	??i2___ftmul& (0+255),f,c
 12299  0027D6  E301               	bnc	u451_41
 12300  0027D8  8023               	bsf	(??i2___ftmul+1)& (0+255),0,c
 12301  0027DA                     u451_41:
 12302  0027DA  5022               	movf	??i2___ftmul,w,c
 12303  0027DC  6E25               	movwf	i2___ftmul@exp,c
 12304  0027DE  5025               	movf	i2___ftmul@exp,w,c
 12305  0027E0  A4D8               	btfss	status,2,c
 12306  0027E2  D007               	goto	i2l4664
 12307  0027E4  0E00               	movlw	0
 12308  0027E6  6E1C               	movwf	?i2___ftmul,c
 12309  0027E8  0E00               	movlw	0
 12310  0027EA  6E1D               	movwf	?i2___ftmul+1,c
 12311  0027EC  0E00               	movlw	0
 12312  0027EE  6E1E               	movwf	?i2___ftmul+2,c
 12313  0027F0  0012               	return	
 12314  0027F2                     i2l4664:
 12315  0027F2  C021  F022         	movff	i2___ftmul@f2+2,??i2___ftmul
 12316  0027F6  6A23               	clrf	(??i2___ftmul+1)& (0+255),c
 12317  0027F8  6A24               	clrf	(??i2___ftmul+2)& (0+255),c
 12318  0027FA  3420               	rlcf	i2___ftmul@f2+1,w,c
 12319  0027FC  3622               	rlcf	??i2___ftmul& (0+255),f,c
 12320  0027FE  E301               	bnc	u453_41
 12321  002800  8023               	bsf	(??i2___ftmul+1)& (0+255),0,c
 12322  002802                     u453_41:
 12323  002802  5022               	movf	??i2___ftmul,w,c
 12324  002804  6E2A               	movwf	i2___ftmul@sign,c
 12325  002806  502A               	movf	i2___ftmul@sign,w,c
 12326  002808  A4D8               	btfss	status,2,c
 12327  00280A  D007               	goto	i2l4670
 12328  00280C  0E00               	movlw	0
 12329  00280E  6E1C               	movwf	?i2___ftmul,c
 12330  002810  0E00               	movlw	0
 12331  002812  6E1D               	movwf	?i2___ftmul+1,c
 12332  002814  0E00               	movlw	0
 12333  002816  6E1E               	movwf	?i2___ftmul+2,c
 12334  002818  0012               	return	
 12335  00281A                     i2l4670:
 12336  00281A  502A               	movf	i2___ftmul@sign,w,c
 12337  00281C  0F7B               	addlw	123
 12338  00281E  2625               	addwf	i2___ftmul@exp,f,c
 12339  002820  C01E  F02A         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 12340  002824  5021               	movf	i2___ftmul@f2+2,w,c
 12341  002826  1A2A               	xorwf	i2___ftmul@sign,f,c
 12342  002828  0E80               	movlw	128
 12343  00282A  162A               	andwf	i2___ftmul@sign,f,c
 12344  00282C  8E1D               	bsf	i2___ftmul@f1+1,7,c
 12345  00282E  8E20               	bsf	i2___ftmul@f2+1,7,c
 12346  002830  0EFF               	movlw	255
 12347  002832  161F               	andwf	i2___ftmul@f2,f,c
 12348  002834  0EFF               	movlw	255
 12349  002836  1620               	andwf	i2___ftmul@f2+1,f,c
 12350  002838  0E00               	movlw	0
 12351  00283A  1621               	andwf	i2___ftmul@f2+2,f,c
 12352  00283C  0E00               	movlw	0
 12353  00283E  6E26               	movwf	i2___ftmul@f3_as_product,c
 12354  002840  0E00               	movlw	0
 12355  002842  6E27               	movwf	i2___ftmul@f3_as_product+1,c
 12356  002844  0E00               	movlw	0
 12357  002846  6E28               	movwf	i2___ftmul@f3_as_product+2,c
 12358  002848  0E07               	movlw	7
 12359  00284A  6E29               	movwf	i2___ftmul@cntr,c
 12360  00284C                     i2l4684:
 12361  00284C  A01C               	btfss	i2___ftmul@f1,0,c
 12362  00284E  D006               	goto	i2l4688
 12363  002850  501F               	movf	i2___ftmul@f2,w,c
 12364  002852  2626               	addwf	i2___ftmul@f3_as_product,f,c
 12365  002854  5020               	movf	i2___ftmul@f2+1,w,c
 12366  002856  2227               	addwfc	i2___ftmul@f3_as_product+1,f,c
 12367  002858  5021               	movf	i2___ftmul@f2+2,w,c
 12368  00285A  2228               	addwfc	i2___ftmul@f3_as_product+2,f,c
 12369  00285C                     i2l4688:
 12370  00285C  90D8               	bcf	status,0,c
 12371  00285E  321E               	rrcf	i2___ftmul@f1+2,f,c
 12372  002860  321D               	rrcf	i2___ftmul@f1+1,f,c
 12373  002862  321C               	rrcf	i2___ftmul@f1,f,c
 12374  002864  90D8               	bcf	status,0,c
 12375  002866  361F               	rlcf	i2___ftmul@f2,f,c
 12376  002868  3620               	rlcf	i2___ftmul@f2+1,f,c
 12377  00286A  3621               	rlcf	i2___ftmul@f2+2,f,c
 12378  00286C  2E29               	decfsz	i2___ftmul@cntr,f,c
 12379  00286E  D7EE               	goto	i2l4684
 12380  002870  0E09               	movlw	9
 12381  002872  6E29               	movwf	i2___ftmul@cntr,c
 12382  002874                     i2l4694:
 12383  002874  A01C               	btfss	i2___ftmul@f1,0,c
 12384  002876  D006               	goto	i2l4698
 12385  002878  501F               	movf	i2___ftmul@f2,w,c
 12386  00287A  2626               	addwf	i2___ftmul@f3_as_product,f,c
 12387  00287C  5020               	movf	i2___ftmul@f2+1,w,c
 12388  00287E  2227               	addwfc	i2___ftmul@f3_as_product+1,f,c
 12389  002880  5021               	movf	i2___ftmul@f2+2,w,c
 12390  002882  2228               	addwfc	i2___ftmul@f3_as_product+2,f,c
 12391  002884                     i2l4698:
 12392  002884  90D8               	bcf	status,0,c
 12393  002886  321E               	rrcf	i2___ftmul@f1+2,f,c
 12394  002888  321D               	rrcf	i2___ftmul@f1+1,f,c
 12395  00288A  321C               	rrcf	i2___ftmul@f1,f,c
 12396  00288C  90D8               	bcf	status,0,c
 12397  00288E  3228               	rrcf	i2___ftmul@f3_as_product+2,f,c
 12398  002890  3227               	rrcf	i2___ftmul@f3_as_product+1,f,c
 12399  002892  3226               	rrcf	i2___ftmul@f3_as_product,f,c
 12400  002894  2E29               	decfsz	i2___ftmul@cntr,f,c
 12401  002896  D7EE               	goto	i2l4694
 12402  002898  C026  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 12403  00289C  C027  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 12404  0028A0  C028  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 12405  0028A4  C025  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
 12406  0028A8  C02A  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
 12407  0028AC  EC89  F017         	call	i2___ftpack	;wreg free
 12408  0028B0  C001  F01C         	movff	?i2___ftpack,?i2___ftmul
 12409  0028B4  C002  F01D         	movff	?i2___ftpack+1,?i2___ftmul+1
 12410  0028B8  C003  F01E         	movff	?i2___ftpack+2,?i2___ftmul+2
 12411  0028BC  0012               	return	
 12412  0028BE                     __end_ofi2___ftmul:
 12413                           	opt stack 0
 12414                           pclatu	equ	0xFFB
 12415                           pclath	equ	0xFFA
 12416                           tblptru	equ	0xFF8
 12417                           tblptrh	equ	0xFF7
 12418                           tblptrl	equ	0xFF6
 12419                           tablat	equ	0xFF5
 12420                           prodh	equ	0xFF4
 12421                           prodl	equ	0xFF3
 12422                           intcon	equ	0xFF2
 12423                           intcon3	equ	0xFF0
 12424                           postinc0	equ	0xFEE
 12425                           fsr0h	equ	0xFEA
 12426                           fsr0l	equ	0xFE9
 12427                           wreg	equ	0xFE8
 12428                           postdec1	equ	0xFE5
 12429                           fsr1h	equ	0xFE2
 12430                           fsr1l	equ	0xFE1
 12431                           indf2	equ	0xFDF
 12432                           postinc2	equ	0xFDE
 12433                           postdec2	equ	0xFDD
 12434                           fsr2h	equ	0xFDA
 12435                           fsr2l	equ	0xFD9
 12436                           status	equ	0xFD8
 12437                           
 12438 ;; *************** function i2___ftdiv *****************
 12439 ;; Defined at:
 12440 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 12441 ;; Parameters:    Size  Location     Type
 12442 ;;  f1              3   12[COMRAM] float 
 12443 ;;  f2              3   15[COMRAM] float 
 12444 ;; Auto vars:     Size  Location     Type
 12445 ;;  __ftdiv         3   22[COMRAM] float 
 12446 ;;  __ftdiv         1   26[COMRAM] unsigned char 
 12447 ;;  __ftdiv         1   25[COMRAM] unsigned char 
 12448 ;;  __ftdiv         1   21[COMRAM] unsigned char 
 12449 ;; Return value:  Size  Location     Type
 12450 ;;                  3   12[COMRAM] float 
 12451 ;; Registers used:
 12452 ;;		wreg, status,2, status,0, cstack
 12453 ;; Tracked objects:
 12454 ;;		On entry : 0/0
 12455 ;;		On exit  : 0/0
 12456 ;;		Unchanged: 0/0
 12457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12458 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12459 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12460 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12461 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12462 ;;Total ram usage:       15 bytes
 12463 ;; Hardware stack levels used:    1
 12464 ;; Hardware stack levels required when called:    1
 12465 ;; This function calls:
 12466 ;;		i2___ftpack
 12467 ;; This function is called by:
 12468 ;;		i2_angleToPulse
 12469 ;; This function uses a non-reentrant model
 12470 ;;
 12471                           
 12472                           	psect	text53
 12473  0029A6                     __ptext53:
 12474                           	opt stack 0
 12475  0029A6                     i2___ftdiv:
 12476                           	opt stack 19
 12477                           
 12478                           ;incstack = 0
 12479  0029A6  C00F  F013         	movff	i2___ftdiv@f1+2,??i2___ftdiv
 12480  0029AA  6A14               	clrf	(??i2___ftdiv+1)& (0+255),c
 12481  0029AC  6A15               	clrf	(??i2___ftdiv+2)& (0+255),c
 12482  0029AE  340E               	rlcf	i2___ftdiv@f1+1,w,c
 12483  0029B0  3613               	rlcf	??i2___ftdiv& (0+255),f,c
 12484  0029B2  E301               	bnc	u446_41
 12485  0029B4  8014               	bsf	(??i2___ftdiv+1)& (0+255),0,c
 12486  0029B6                     u446_41:
 12487  0029B6  5013               	movf	??i2___ftdiv,w,c
 12488  0029B8  6E1A               	movwf	i2___ftdiv@exp,c
 12489  0029BA  501A               	movf	i2___ftdiv@exp,w,c
 12490  0029BC  A4D8               	btfss	status,2,c
 12491  0029BE  D007               	goto	i2l4618
 12492  0029C0  0E00               	movlw	0
 12493  0029C2  6E0D               	movwf	?i2___ftdiv,c
 12494  0029C4  0E00               	movlw	0
 12495  0029C6  6E0E               	movwf	?i2___ftdiv+1,c
 12496  0029C8  0E00               	movlw	0
 12497  0029CA  6E0F               	movwf	?i2___ftdiv+2,c
 12498  0029CC  0012               	return	
 12499  0029CE                     i2l4618:
 12500  0029CE  C012  F013         	movff	i2___ftdiv@f2+2,??i2___ftdiv
 12501  0029D2  6A14               	clrf	(??i2___ftdiv+1)& (0+255),c
 12502  0029D4  6A15               	clrf	(??i2___ftdiv+2)& (0+255),c
 12503  0029D6  3411               	rlcf	i2___ftdiv@f2+1,w,c
 12504  0029D8  3613               	rlcf	??i2___ftdiv& (0+255),f,c
 12505  0029DA  E301               	bnc	u448_41
 12506  0029DC  8014               	bsf	(??i2___ftdiv+1)& (0+255),0,c
 12507  0029DE                     u448_41:
 12508  0029DE  5013               	movf	??i2___ftdiv,w,c
 12509  0029E0  6E1B               	movwf	i2___ftdiv@sign,c
 12510  0029E2  501B               	movf	i2___ftdiv@sign,w,c
 12511  0029E4  A4D8               	btfss	status,2,c
 12512  0029E6  D007               	goto	i2l4624
 12513  0029E8  0E00               	movlw	0
 12514  0029EA  6E0D               	movwf	?i2___ftdiv,c
 12515  0029EC  0E00               	movlw	0
 12516  0029EE  6E0E               	movwf	?i2___ftdiv+1,c
 12517  0029F0  0E00               	movlw	0
 12518  0029F2  6E0F               	movwf	?i2___ftdiv+2,c
 12519  0029F4  0012               	return	
 12520  0029F6                     i2l4624:
 12521  0029F6  0E00               	movlw	0
 12522  0029F8  6E17               	movwf	i2___ftdiv@f3,c
 12523  0029FA  0E00               	movlw	0
 12524  0029FC  6E18               	movwf	i2___ftdiv@f3+1,c
 12525  0029FE  0E00               	movlw	0
 12526  002A00  6E19               	movwf	i2___ftdiv@f3+2,c
 12527  002A02  501B               	movf	i2___ftdiv@sign,w,c
 12528  002A04  0F89               	addlw	137
 12529  002A06  5E1A               	subwf	i2___ftdiv@exp,f,c
 12530  002A08  C00F  F01B         	movff	i2___ftdiv@f1+2,i2___ftdiv@sign
 12531  002A0C  5012               	movf	i2___ftdiv@f2+2,w,c
 12532  002A0E  1A1B               	xorwf	i2___ftdiv@sign,f,c
 12533  002A10  0E80               	movlw	128
 12534  002A12  161B               	andwf	i2___ftdiv@sign,f,c
 12535  002A14  8E0E               	bsf	i2___ftdiv@f1+1,7,c
 12536  002A16  0EFF               	movlw	255
 12537  002A18  160D               	andwf	i2___ftdiv@f1,f,c
 12538  002A1A  0EFF               	movlw	255
 12539  002A1C  160E               	andwf	i2___ftdiv@f1+1,f,c
 12540  002A1E  0E00               	movlw	0
 12541  002A20  160F               	andwf	i2___ftdiv@f1+2,f,c
 12542  002A22  8E11               	bsf	i2___ftdiv@f2+1,7,c
 12543  002A24  0EFF               	movlw	255
 12544  002A26  1610               	andwf	i2___ftdiv@f2,f,c
 12545  002A28  0EFF               	movlw	255
 12546  002A2A  1611               	andwf	i2___ftdiv@f2+1,f,c
 12547  002A2C  0E00               	movlw	0
 12548  002A2E  1612               	andwf	i2___ftdiv@f2+2,f,c
 12549  002A30  0E18               	movlw	24
 12550  002A32  6E16               	movwf	i2___ftdiv@cntr,c
 12551  002A34                     i2l4644:
 12552  002A34  90D8               	bcf	status,0,c
 12553  002A36  3617               	rlcf	i2___ftdiv@f3,f,c
 12554  002A38  3618               	rlcf	i2___ftdiv@f3+1,f,c
 12555  002A3A  3619               	rlcf	i2___ftdiv@f3+2,f,c
 12556  002A3C  5010               	movf	i2___ftdiv@f2,w,c
 12557  002A3E  5C0D               	subwf	i2___ftdiv@f1,w,c
 12558  002A40  5011               	movf	i2___ftdiv@f2+1,w,c
 12559  002A42  580E               	subwfb	i2___ftdiv@f1+1,w,c
 12560  002A44  5012               	movf	i2___ftdiv@f2+2,w,c
 12561  002A46  580F               	subwfb	i2___ftdiv@f1+2,w,c
 12562  002A48  A0D8               	btfss	status,0,c
 12563  002A4A  D007               	goto	i2l1040
 12564  002A4C  5010               	movf	i2___ftdiv@f2,w,c
 12565  002A4E  5E0D               	subwf	i2___ftdiv@f1,f,c
 12566  002A50  5011               	movf	i2___ftdiv@f2+1,w,c
 12567  002A52  5A0E               	subwfb	i2___ftdiv@f1+1,f,c
 12568  002A54  5012               	movf	i2___ftdiv@f2+2,w,c
 12569  002A56  5A0F               	subwfb	i2___ftdiv@f1+2,f,c
 12570  002A58  8017               	bsf	i2___ftdiv@f3,0,c
 12571  002A5A                     i2l1040:
 12572  002A5A  90D8               	bcf	status,0,c
 12573  002A5C  360D               	rlcf	i2___ftdiv@f1,f,c
 12574  002A5E  360E               	rlcf	i2___ftdiv@f1+1,f,c
 12575  002A60  360F               	rlcf	i2___ftdiv@f1+2,f,c
 12576  002A62  2E16               	decfsz	i2___ftdiv@cntr,f,c
 12577  002A64  D7E7               	goto	i2l4644
 12578  002A66  C017  F001         	movff	i2___ftdiv@f3,i2___ftpack@arg
 12579  002A6A  C018  F002         	movff	i2___ftdiv@f3+1,i2___ftpack@arg+1
 12580  002A6E  C019  F003         	movff	i2___ftdiv@f3+2,i2___ftpack@arg+2
 12581  002A72  C01A  F004         	movff	i2___ftdiv@exp,i2___ftpack@exp
 12582  002A76  C01B  F005         	movff	i2___ftdiv@sign,i2___ftpack@sign
 12583  002A7A  EC89  F017         	call	i2___ftpack	;wreg free
 12584  002A7E  C001  F00D         	movff	?i2___ftpack,?i2___ftdiv
 12585  002A82  C002  F00E         	movff	?i2___ftpack+1,?i2___ftdiv+1
 12586  002A86  C003  F00F         	movff	?i2___ftpack+2,?i2___ftdiv+2
 12587  002A8A  0012               	return	
 12588  002A8C                     __end_ofi2___ftdiv:
 12589                           	opt stack 0
 12590                           pclatu	equ	0xFFB
 12591                           pclath	equ	0xFFA
 12592                           tblptru	equ	0xFF8
 12593                           tblptrh	equ	0xFF7
 12594                           tblptrl	equ	0xFF6
 12595                           tablat	equ	0xFF5
 12596                           prodh	equ	0xFF4
 12597                           prodl	equ	0xFF3
 12598                           intcon	equ	0xFF2
 12599                           intcon3	equ	0xFF0
 12600                           postinc0	equ	0xFEE
 12601                           fsr0h	equ	0xFEA
 12602                           fsr0l	equ	0xFE9
 12603                           wreg	equ	0xFE8
 12604                           postdec1	equ	0xFE5
 12605                           fsr1h	equ	0xFE2
 12606                           fsr1l	equ	0xFE1
 12607                           indf2	equ	0xFDF
 12608                           postinc2	equ	0xFDE
 12609                           postdec2	equ	0xFDD
 12610                           fsr2h	equ	0xFDA
 12611                           fsr2l	equ	0xFD9
 12612                           status	equ	0xFD8
 12613                           
 12614 ;; *************** function i2___ftadd *****************
 12615 ;; Defined at:
 12616 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 12617 ;; Parameters:    Size  Location     Type
 12618 ;;  f1              3   42[COMRAM] float 
 12619 ;;  f2              3   45[COMRAM] float 
 12620 ;; Auto vars:     Size  Location     Type
 12621 ;;  __ftadd         1   53[COMRAM] unsigned char 
 12622 ;;  __ftadd         1   52[COMRAM] unsigned char 
 12623 ;;  __ftadd         1   51[COMRAM] unsigned char 
 12624 ;; Return value:  Size  Location     Type
 12625 ;;                  3   42[COMRAM] float 
 12626 ;; Registers used:
 12627 ;;		wreg, status,2, status,0, cstack
 12628 ;; Tracked objects:
 12629 ;;		On entry : 0/0
 12630 ;;		On exit  : 0/0
 12631 ;;		Unchanged: 0/0
 12632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12633 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12634 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12635 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12636 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12637 ;;Total ram usage:       12 bytes
 12638 ;; Hardware stack levels used:    1
 12639 ;; Hardware stack levels required when called:    1
 12640 ;; This function calls:
 12641 ;;		i2___ftpack
 12642 ;; This function is called by:
 12643 ;;		i2_angleToPulse
 12644 ;; This function uses a non-reentrant model
 12645 ;;
 12646                           
 12647                           	psect	text54
 12648  001824                     __ptext54:
 12649                           	opt stack 0
 12650  001824                     i2___ftadd:
 12651                           	opt stack 19
 12652                           
 12653                           ;incstack = 0
 12654  001824  C02D  F031         	movff	i2___ftadd@f1+2,??i2___ftadd
 12655  001828  6A32               	clrf	(??i2___ftadd+1)& (0+255),c
 12656  00182A  6A33               	clrf	(??i2___ftadd+2)& (0+255),c
 12657  00182C  342C               	rlcf	i2___ftadd@f1+1,w,c
 12658  00182E  3631               	rlcf	??i2___ftadd& (0+255),f,c
 12659  001830  E301               	bnc	u425_41
 12660  001832  8032               	bsf	(??i2___ftadd+1)& (0+255),0,c
 12661  001834                     u425_41:
 12662  001834  5031               	movf	??i2___ftadd,w,c
 12663  001836  6E36               	movwf	i2___ftadd@exp1,c
 12664  001838  C030  F031         	movff	i2___ftadd@f2+2,??i2___ftadd
 12665  00183C  6A32               	clrf	(??i2___ftadd+1)& (0+255),c
 12666  00183E  6A33               	clrf	(??i2___ftadd+2)& (0+255),c
 12667  001840  342F               	rlcf	i2___ftadd@f2+1,w,c
 12668  001842  3631               	rlcf	??i2___ftadd& (0+255),f,c
 12669  001844  E301               	bnc	u426_41
 12670  001846  8032               	bsf	(??i2___ftadd+1)& (0+255),0,c
 12671  001848                     u426_41:
 12672  001848  5031               	movf	??i2___ftadd,w,c
 12673  00184A  6E35               	movwf	i2___ftadd@exp2,c
 12674  00184C  5036               	movf	i2___ftadd@exp1,w,c
 12675  00184E  B4D8               	btfsc	status,2,c
 12676  001850  D00B               	goto	i2l1005
 12677  001852  5035               	movf	i2___ftadd@exp2,w,c
 12678  001854  5C36               	subwf	i2___ftadd@exp1,w,c
 12679  001856  B0D8               	btfsc	status,0,c
 12680  001858  D00E               	goto	i2l4550
 12681  00185A  5036               	movf	i2___ftadd@exp1,w,c
 12682  00185C  0800               	sublw	0
 12683  00185E  2435               	addwf	i2___ftadd@exp2,w,c
 12684  001860  6E31               	movwf	??i2___ftadd& (0+255),c
 12685  001862  0E18               	movlw	24
 12686  001864  6431               	cpfsgt	??i2___ftadd,c
 12687  001866  D007               	goto	i2l4550
 12688  001868                     i2l1005:
 12689  001868  C02E  F02B         	movff	i2___ftadd@f2,?i2___ftadd
 12690  00186C  C02F  F02C         	movff	i2___ftadd@f2+1,?i2___ftadd+1
 12691  001870  C030  F02D         	movff	i2___ftadd@f2+2,?i2___ftadd+2
 12692  001874  0012               	return	
 12693  001876                     i2l4550:
 12694  001876  5035               	movf	i2___ftadd@exp2,w,c
 12695  001878  B4D8               	btfsc	status,2,c
 12696  00187A  D00B               	goto	i2l1009
 12697  00187C  5036               	movf	i2___ftadd@exp1,w,c
 12698  00187E  5C35               	subwf	i2___ftadd@exp2,w,c
 12699  001880  B0D8               	btfsc	status,0,c
 12700  001882  D00E               	goto	i2l4556
 12701  001884  5035               	movf	i2___ftadd@exp2,w,c
 12702  001886  0800               	sublw	0
 12703  001888  2436               	addwf	i2___ftadd@exp1,w,c
 12704  00188A  6E31               	movwf	??i2___ftadd& (0+255),c
 12705  00188C  0E18               	movlw	24
 12706  00188E  6431               	cpfsgt	??i2___ftadd,c
 12707  001890  D007               	goto	i2l4556
 12708  001892                     i2l1009:
 12709  001892  C02B  F02B         	movff	i2___ftadd@f1,?i2___ftadd
 12710  001896  C02C  F02C         	movff	i2___ftadd@f1+1,?i2___ftadd+1
 12711  00189A  C02D  F02D         	movff	i2___ftadd@f1+2,?i2___ftadd+2
 12712  00189E  0012               	return	
 12713  0018A0                     i2l4556:
 12714  0018A0  0E06               	movlw	6
 12715  0018A2  6E34               	movwf	i2___ftadd@sign,c
 12716  0018A4  BE2D               	btfsc	i2___ftadd@f1+2,7,c
 12717  0018A6  8E34               	bsf	i2___ftadd@sign,7,c
 12718  0018A8  BE30               	btfsc	i2___ftadd@f2+2,7,c
 12719  0018AA  8C34               	bsf	i2___ftadd@sign,6,c
 12720  0018AC  8E2C               	bsf	i2___ftadd@f1+1,7,c
 12721  0018AE  0EFF               	movlw	255
 12722  0018B0  162B               	andwf	i2___ftadd@f1,f,c
 12723  0018B2  0EFF               	movlw	255
 12724  0018B4  162C               	andwf	i2___ftadd@f1+1,f,c
 12725  0018B6  0E00               	movlw	0
 12726  0018B8  162D               	andwf	i2___ftadd@f1+2,f,c
 12727  0018BA  8E2F               	bsf	i2___ftadd@f2+1,7,c
 12728  0018BC  0EFF               	movlw	255
 12729  0018BE  162E               	andwf	i2___ftadd@f2,f,c
 12730  0018C0  0EFF               	movlw	255
 12731  0018C2  162F               	andwf	i2___ftadd@f2+1,f,c
 12732  0018C4  0E00               	movlw	0
 12733  0018C6  1630               	andwf	i2___ftadd@f2+2,f,c
 12734  0018C8  5035               	movf	i2___ftadd@exp2,w,c
 12735  0018CA  5C36               	subwf	i2___ftadd@exp1,w,c
 12736  0018CC  B0D8               	btfsc	status,0,c
 12737  0018CE  D01B               	goto	i2l4582
 12738  0018D0                     i2l4572:
 12739  0018D0  90D8               	bcf	status,0,c
 12740  0018D2  362E               	rlcf	i2___ftadd@f2,f,c
 12741  0018D4  362F               	rlcf	i2___ftadd@f2+1,f,c
 12742  0018D6  3630               	rlcf	i2___ftadd@f2+2,f,c
 12743  0018D8  0635               	decf	i2___ftadd@exp2,f,c
 12744  0018DA  5036               	movf	i2___ftadd@exp1,w,c
 12745  0018DC  1835               	xorwf	i2___ftadd@exp2,w,c
 12746  0018DE  B4D8               	btfsc	status,2,c
 12747  0018E0  D00D               	goto	i2l4580
 12748  0018E2  0634               	decf	i2___ftadd@sign,f,c
 12749  0018E4  C034  F031         	movff	i2___ftadd@sign,??i2___ftadd
 12750  0018E8  0E07               	movlw	7
 12751  0018EA  1631               	andwf	??i2___ftadd,f,c
 12752  0018EC  B4D8               	btfsc	status,2,c
 12753  0018EE  D006               	goto	i2l4580
 12754  0018F0  D7EF               	goto	i2l4572
 12755  0018F2                     i2l4578:
 12756  0018F2  90D8               	bcf	status,0,c
 12757  0018F4  322D               	rrcf	i2___ftadd@f1+2,f,c
 12758  0018F6  322C               	rrcf	i2___ftadd@f1+1,f,c
 12759  0018F8  322B               	rrcf	i2___ftadd@f1,f,c
 12760  0018FA  2A36               	incf	i2___ftadd@exp1,f,c
 12761  0018FC                     i2l4580:
 12762  0018FC  5035               	movf	i2___ftadd@exp2,w,c
 12763  0018FE  1836               	xorwf	i2___ftadd@exp1,w,c
 12764  001900  B4D8               	btfsc	status,2,c
 12765  001902  D01F               	goto	i2l1020
 12766  001904  D7F6               	goto	i2l4578
 12767  001906                     i2l4582:
 12768  001906  5036               	movf	i2___ftadd@exp1,w,c
 12769  001908  5C35               	subwf	i2___ftadd@exp2,w,c
 12770  00190A  B0D8               	btfsc	status,0,c
 12771  00190C  D01A               	goto	i2l1020
 12772  00190E                     i2l4584:
 12773  00190E  90D8               	bcf	status,0,c
 12774  001910  362B               	rlcf	i2___ftadd@f1,f,c
 12775  001912  362C               	rlcf	i2___ftadd@f1+1,f,c
 12776  001914  362D               	rlcf	i2___ftadd@f1+2,f,c
 12777  001916  0636               	decf	i2___ftadd@exp1,f,c
 12778  001918  5036               	movf	i2___ftadd@exp1,w,c
 12779  00191A  1835               	xorwf	i2___ftadd@exp2,w,c
 12780  00191C  B4D8               	btfsc	status,2,c
 12781  00191E  D00D               	goto	i2l4592
 12782  001920  0634               	decf	i2___ftadd@sign,f,c
 12783  001922  C034  F031         	movff	i2___ftadd@sign,??i2___ftadd
 12784  001926  0E07               	movlw	7
 12785  001928  1631               	andwf	??i2___ftadd,f,c
 12786  00192A  B4D8               	btfsc	status,2,c
 12787  00192C  D006               	goto	i2l4592
 12788  00192E  D7EF               	goto	i2l4584
 12789  001930                     i2l4590:
 12790  001930  90D8               	bcf	status,0,c
 12791  001932  3230               	rrcf	i2___ftadd@f2+2,f,c
 12792  001934  322F               	rrcf	i2___ftadd@f2+1,f,c
 12793  001936  322E               	rrcf	i2___ftadd@f2,f,c
 12794  001938  2A35               	incf	i2___ftadd@exp2,f,c
 12795  00193A                     i2l4592:
 12796  00193A  5035               	movf	i2___ftadd@exp2,w,c
 12797  00193C  1836               	xorwf	i2___ftadd@exp1,w,c
 12798  00193E  A4D8               	btfss	status,2,c
 12799  001940  D7F7               	goto	i2l4590
 12800  001942                     i2l1020:
 12801  001942  AE34               	btfss	i2___ftadd@sign,7,c
 12802  001944  D00C               	goto	i2l1029
 12803  001946  0EFF               	movlw	255
 12804  001948  1A2B               	xorwf	i2___ftadd@f1,f,c
 12805  00194A  0EFF               	movlw	255
 12806  00194C  1A2C               	xorwf	i2___ftadd@f1+1,f,c
 12807  00194E  0EFF               	movlw	255
 12808  001950  1A2D               	xorwf	i2___ftadd@f1+2,f,c
 12809  001952  0E01               	movlw	1
 12810  001954  262B               	addwf	i2___ftadd@f1,f,c
 12811  001956  0E00               	movlw	0
 12812  001958  222C               	addwfc	i2___ftadd@f1+1,f,c
 12813  00195A  0E00               	movlw	0
 12814  00195C  222D               	addwfc	i2___ftadd@f1+2,f,c
 12815  00195E                     i2l1029:
 12816  00195E  AC34               	btfss	i2___ftadd@sign,6,c
 12817  001960  D00C               	goto	i2l4598
 12818  001962  0EFF               	movlw	255
 12819  001964  1A2E               	xorwf	i2___ftadd@f2,f,c
 12820  001966  0EFF               	movlw	255
 12821  001968  1A2F               	xorwf	i2___ftadd@f2+1,f,c
 12822  00196A  0EFF               	movlw	255
 12823  00196C  1A30               	xorwf	i2___ftadd@f2+2,f,c
 12824  00196E  0E01               	movlw	1
 12825  001970  262E               	addwf	i2___ftadd@f2,f,c
 12826  001972  0E00               	movlw	0
 12827  001974  222F               	addwfc	i2___ftadd@f2+1,f,c
 12828  001976  0E00               	movlw	0
 12829  001978  2230               	addwfc	i2___ftadd@f2+2,f,c
 12830  00197A                     i2l4598:
 12831  00197A  0E00               	movlw	0
 12832  00197C  6E34               	movwf	i2___ftadd@sign,c
 12833  00197E  502B               	movf	i2___ftadd@f1,w,c
 12834  001980  262E               	addwf	i2___ftadd@f2,f,c
 12835  001982  502C               	movf	i2___ftadd@f1+1,w,c
 12836  001984  222F               	addwfc	i2___ftadd@f2+1,f,c
 12837  001986  502D               	movf	i2___ftadd@f1+2,w,c
 12838  001988  2230               	addwfc	i2___ftadd@f2+2,f,c
 12839  00198A  AE30               	btfss	i2___ftadd@f2+2,7,c
 12840  00198C  D00E               	goto	i2l4608
 12841  00198E  0EFF               	movlw	255
 12842  001990  1A2E               	xorwf	i2___ftadd@f2,f,c
 12843  001992  0EFF               	movlw	255
 12844  001994  1A2F               	xorwf	i2___ftadd@f2+1,f,c
 12845  001996  0EFF               	movlw	255
 12846  001998  1A30               	xorwf	i2___ftadd@f2+2,f,c
 12847  00199A  0E01               	movlw	1
 12848  00199C  262E               	addwf	i2___ftadd@f2,f,c
 12849  00199E  0E00               	movlw	0
 12850  0019A0  222F               	addwfc	i2___ftadd@f2+1,f,c
 12851  0019A2  0E00               	movlw	0
 12852  0019A4  2230               	addwfc	i2___ftadd@f2+2,f,c
 12853  0019A6  0E01               	movlw	1
 12854  0019A8  6E34               	movwf	i2___ftadd@sign,c
 12855  0019AA                     i2l4608:
 12856  0019AA  C02E  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
 12857  0019AE  C02F  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
 12858  0019B2  C030  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
 12859  0019B6  C036  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
 12860  0019BA  C034  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
 12861  0019BE  EC89  F017         	call	i2___ftpack	;wreg free
 12862  0019C2  C001  F02B         	movff	?i2___ftpack,?i2___ftadd
 12863  0019C6  C002  F02C         	movff	?i2___ftpack+1,?i2___ftadd+1
 12864  0019CA  C003  F02D         	movff	?i2___ftpack+2,?i2___ftadd+2
 12865  0019CE  0012               	return	
 12866  0019D0                     __end_ofi2___ftadd:
 12867                           	opt stack 0
 12868                           pclatu	equ	0xFFB
 12869                           pclath	equ	0xFFA
 12870                           tblptru	equ	0xFF8
 12871                           tblptrh	equ	0xFF7
 12872                           tblptrl	equ	0xFF6
 12873                           tablat	equ	0xFF5
 12874                           prodh	equ	0xFF4
 12875                           prodl	equ	0xFF3
 12876                           intcon	equ	0xFF2
 12877                           intcon3	equ	0xFF0
 12878                           postinc0	equ	0xFEE
 12879                           fsr0h	equ	0xFEA
 12880                           fsr0l	equ	0xFE9
 12881                           wreg	equ	0xFE8
 12882                           postdec1	equ	0xFE5
 12883                           fsr1h	equ	0xFE2
 12884                           fsr1l	equ	0xFE1
 12885                           indf2	equ	0xFDF
 12886                           postinc2	equ	0xFDE
 12887                           postdec2	equ	0xFDD
 12888                           fsr2h	equ	0xFDA
 12889                           fsr2l	equ	0xFD9
 12890                           status	equ	0xFD8
 12891                           
 12892 ;; *************** function i2___awtoft *****************
 12893 ;; Defined at:
 12894 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 12895 ;; Parameters:    Size  Location     Type
 12896 ;;  c               2    8[COMRAM] int 
 12897 ;; Auto vars:     Size  Location     Type
 12898 ;;  __awtoft        1   11[COMRAM] unsigned char 
 12899 ;; Return value:  Size  Location     Type
 12900 ;;                  3    8[COMRAM] float 
 12901 ;; Registers used:
 12902 ;;		wreg, status,2, status,0, cstack
 12903 ;; Tracked objects:
 12904 ;;		On entry : 0/0
 12905 ;;		On exit  : 0/0
 12906 ;;		Unchanged: 0/0
 12907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12908 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12909 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12911 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12912 ;;Total ram usage:        4 bytes
 12913 ;; Hardware stack levels used:    1
 12914 ;; Hardware stack levels required when called:    1
 12915 ;; This function calls:
 12916 ;;		i2___ftpack
 12917 ;; This function is called by:
 12918 ;;		i2_angleToPulse
 12919 ;; This function uses a non-reentrant model
 12920 ;;
 12921                           
 12922                           	psect	text55
 12923  003806                     __ptext55:
 12924                           	opt stack 0
 12925  003806                     i2___awtoft:
 12926                           	opt stack 19
 12927                           
 12928                           ;incstack = 0
 12929  003806  0E00               	movlw	0
 12930  003808  6E0C               	movwf	i2___awtoft@sign,c
 12931  00380A  AE0A               	btfss	i2___awtoft@c+1,7,c
 12932  00380C  D006               	goto	i2l4538
 12933  00380E  6C09               	negf	i2___awtoft@c,c
 12934  003810  1E0A               	comf	i2___awtoft@c+1,f,c
 12935  003812  B0D8               	btfsc	status,0,c
 12936  003814  2A0A               	incf	i2___awtoft@c+1,f,c
 12937  003816  0E01               	movlw	1
 12938  003818  6E0C               	movwf	i2___awtoft@sign,c
 12939  00381A                     i2l4538:
 12940  00381A  C009  F001         	movff	i2___awtoft@c,i2___ftpack@arg
 12941  00381E  C00A  F002         	movff	i2___awtoft@c+1,i2___ftpack@arg+1
 12942  003822  6A03               	clrf	i2___ftpack@arg+2,c
 12943  003824  0E8E               	movlw	142
 12944  003826  6E04               	movwf	i2___ftpack@exp,c
 12945  003828  C00C  F005         	movff	i2___awtoft@sign,i2___ftpack@sign
 12946  00382C  EC89  F017         	call	i2___ftpack	;wreg free
 12947  003830  C001  F009         	movff	?i2___ftpack,?i2___awtoft
 12948  003834  C002  F00A         	movff	?i2___ftpack+1,?i2___awtoft+1
 12949  003838  C003  F00B         	movff	?i2___ftpack+2,?i2___awtoft+2
 12950  00383C  0012               	return	
 12951  00383E                     __end_ofi2___awtoft:
 12952                           	opt stack 0
 12953                           pclatu	equ	0xFFB
 12954                           pclath	equ	0xFFA
 12955                           tblptru	equ	0xFF8
 12956                           tblptrh	equ	0xFF7
 12957                           tblptrl	equ	0xFF6
 12958                           tablat	equ	0xFF5
 12959                           prodh	equ	0xFF4
 12960                           prodl	equ	0xFF3
 12961                           intcon	equ	0xFF2
 12962                           intcon3	equ	0xFF0
 12963                           postinc0	equ	0xFEE
 12964                           fsr0h	equ	0xFEA
 12965                           fsr0l	equ	0xFE9
 12966                           wreg	equ	0xFE8
 12967                           postdec1	equ	0xFE5
 12968                           fsr1h	equ	0xFE2
 12969                           fsr1l	equ	0xFE1
 12970                           indf2	equ	0xFDF
 12971                           postinc2	equ	0xFDE
 12972                           postdec2	equ	0xFDD
 12973                           fsr2h	equ	0xFDA
 12974                           fsr2l	equ	0xFD9
 12975                           status	equ	0xFD8
 12976                           
 12977 ;; *************** function i2___altoft *****************
 12978 ;; Defined at:
 12979 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 12980 ;; Parameters:    Size  Location     Type
 12981 ;;  c               4    8[COMRAM] long 
 12982 ;; Auto vars:     Size  Location     Type
 12983 ;;  __altoft        1   17[COMRAM] unsigned char 
 12984 ;;  __altoft        1   16[COMRAM] unsigned char 
 12985 ;; Return value:  Size  Location     Type
 12986 ;;                  3    8[COMRAM] float 
 12987 ;; Registers used:
 12988 ;;		wreg, status,2, status,0, cstack
 12989 ;; Tracked objects:
 12990 ;;		On entry : 0/0
 12991 ;;		On exit  : 0/0
 12992 ;;		Unchanged: 0/0
 12993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12994 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12995 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12996 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12997 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12998 ;;Total ram usage:       10 bytes
 12999 ;; Hardware stack levels used:    1
 13000 ;; Hardware stack levels required when called:    1
 13001 ;; This function calls:
 13002 ;;		i2___ftpack
 13003 ;; This function is called by:
 13004 ;;		i2_angleToPulse
 13005 ;; This function uses a non-reentrant model
 13006 ;;
 13007                           
 13008                           	psect	text56
 13009  00344A                     __ptext56:
 13010                           	opt stack 0
 13011  00344A                     i2___altoft:
 13012                           	opt stack 19
 13013                           
 13014                           ;incstack = 0
 13015  00344A  0E00               	movlw	0
 13016  00344C  6E12               	movwf	i2___altoft@sign,c
 13017  00344E  0E8E               	movlw	142
 13018  003450  6E11               	movwf	i2___altoft@exp,c
 13019  003452  AE0C               	btfss	i2___altoft@c+3,7,c
 13020  003454  D011               	goto	i2l4524
 13021  003456  1E0C               	comf	i2___altoft@c+3,f,c
 13022  003458  1E0B               	comf	i2___altoft@c+2,f,c
 13023  00345A  1E0A               	comf	i2___altoft@c+1,f,c
 13024  00345C  6C09               	negf	i2___altoft@c,c
 13025  00345E  0E00               	movlw	0
 13026  003460  220A               	addwfc	i2___altoft@c+1,f,c
 13027  003462  220B               	addwfc	i2___altoft@c+2,f,c
 13028  003464  220C               	addwfc	i2___altoft@c+3,f,c
 13029  003466  0E01               	movlw	1
 13030  003468  6E12               	movwf	i2___altoft@sign,c
 13031  00346A  D006               	goto	i2l4524
 13032  00346C                     i2l4522:
 13033  00346C  90D8               	bcf	status,0,c
 13034  00346E  320C               	rrcf	i2___altoft@c+3,f,c
 13035  003470  320B               	rrcf	i2___altoft@c+2,f,c
 13036  003472  320A               	rrcf	i2___altoft@c+1,f,c
 13037  003474  3209               	rrcf	i2___altoft@c,f,c
 13038  003476  2A11               	incf	i2___altoft@exp,f,c
 13039  003478                     i2l4524:
 13040  003478  0E00               	movlw	0
 13041  00347A  1409               	andwf	i2___altoft@c,w,c
 13042  00347C  6E0D               	movwf	??i2___altoft& (0+255),c
 13043  00347E  0E00               	movlw	0
 13044  003480  140A               	andwf	i2___altoft@c+1,w,c
 13045  003482  6E0E               	movwf	(??i2___altoft+1)& (0+255),c
 13046  003484  0E00               	movlw	0
 13047  003486  140B               	andwf	i2___altoft@c+2,w,c
 13048  003488  6E0F               	movwf	(??i2___altoft+2)& (0+255),c
 13049  00348A  0EFF               	movlw	255
 13050  00348C  140C               	andwf	i2___altoft@c+3,w,c
 13051  00348E  6E10               	movwf	(??i2___altoft+3)& (0+255),c
 13052  003490  500D               	movf	??i2___altoft,w,c
 13053  003492  100E               	iorwf	??i2___altoft+1,w,c
 13054  003494  100F               	iorwf	??i2___altoft+2,w,c
 13055  003496  1010               	iorwf	??i2___altoft+3,w,c
 13056  003498  A4D8               	btfss	status,2,c
 13057  00349A  D7E8               	goto	i2l4522
 13058  00349C  C009  F001         	movff	i2___altoft@c,i2___ftpack@arg
 13059  0034A0  C00A  F002         	movff	i2___altoft@c+1,i2___ftpack@arg+1
 13060  0034A4  C00B  F003         	movff	i2___altoft@c+2,i2___ftpack@arg+2
 13061  0034A8  C011  F004         	movff	i2___altoft@exp,i2___ftpack@exp
 13062  0034AC  C012  F005         	movff	i2___altoft@sign,i2___ftpack@sign
 13063  0034B0  EC89  F017         	call	i2___ftpack	;wreg free
 13064  0034B4  C001  F009         	movff	?i2___ftpack,?i2___altoft
 13065  0034B8  C002  F00A         	movff	?i2___ftpack+1,?i2___altoft+1
 13066  0034BC  C003  F00B         	movff	?i2___ftpack+2,?i2___altoft+2
 13067  0034C0  0012               	return	
 13068  0034C2                     __end_ofi2___altoft:
 13069                           	opt stack 0
 13070                           pclatu	equ	0xFFB
 13071                           pclath	equ	0xFFA
 13072                           tblptru	equ	0xFF8
 13073                           tblptrh	equ	0xFF7
 13074                           tblptrl	equ	0xFF6
 13075                           tablat	equ	0xFF5
 13076                           prodh	equ	0xFF4
 13077                           prodl	equ	0xFF3
 13078                           intcon	equ	0xFF2
 13079                           intcon3	equ	0xFF0
 13080                           postinc0	equ	0xFEE
 13081                           fsr0h	equ	0xFEA
 13082                           fsr0l	equ	0xFE9
 13083                           wreg	equ	0xFE8
 13084                           postdec1	equ	0xFE5
 13085                           fsr1h	equ	0xFE2
 13086                           fsr1l	equ	0xFE1
 13087                           indf2	equ	0xFDF
 13088                           postinc2	equ	0xFDE
 13089                           postdec2	equ	0xFDD
 13090                           fsr2h	equ	0xFDA
 13091                           fsr2l	equ	0xFD9
 13092                           status	equ	0xFD8
 13093                           
 13094 ;; *************** function i2___ftpack *****************
 13095 ;; Defined at:
 13096 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 13097 ;; Parameters:    Size  Location     Type
 13098 ;;  arg             3    0[COMRAM] unsigned um
 13099 ;;  exp             1    3[COMRAM] unsigned char 
 13100 ;;  sign            1    4[COMRAM] unsigned char 
 13101 ;; Auto vars:     Size  Location     Type
 13102 ;;		None
 13103 ;; Return value:  Size  Location     Type
 13104 ;;                  3    0[COMRAM] float 
 13105 ;; Registers used:
 13106 ;;		wreg, status,2, status,0
 13107 ;; Tracked objects:
 13108 ;;		On entry : 0/0
 13109 ;;		On exit  : 0/0
 13110 ;;		Unchanged: 0/0
 13111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13112 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13114 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13115 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13116 ;;Total ram usage:        8 bytes
 13117 ;; Hardware stack levels used:    1
 13118 ;; This function calls:
 13119 ;;		Nothing
 13120 ;; This function is called by:
 13121 ;;		i2___altoft
 13122 ;;		i2___awtoft
 13123 ;;		i2___ftadd
 13124 ;;		i2___ftdiv
 13125 ;;		i2___ftmul
 13126 ;; This function uses a non-reentrant model
 13127 ;;
 13128                           
 13129                           	psect	text57
 13130  002F12                     __ptext57:
 13131                           	opt stack 0
 13132  002F12                     i2___ftpack:
 13133                           	opt stack 19
 13134                           
 13135                           ;incstack = 0
 13136  002F12  5004               	movf	i2___ftpack@exp,w,c
 13137  002F14  B4D8               	btfsc	status,2,c
 13138  002F16  D005               	goto	i2l4208
 13139  002F18  5001               	movf	i2___ftpack@arg,w,c
 13140  002F1A  1002               	iorwf	i2___ftpack@arg+1,w,c
 13141  002F1C  1003               	iorwf	i2___ftpack@arg+2,w,c
 13142  002F1E  A4D8               	btfss	status,2,c
 13143  002F20  D00C               	goto	i2l4214
 13144  002F22                     i2l4208:
 13145  002F22  0E00               	movlw	0
 13146  002F24  6E01               	movwf	?i2___ftpack,c
 13147  002F26  0E00               	movlw	0
 13148  002F28  6E02               	movwf	?i2___ftpack+1,c
 13149  002F2A  0E00               	movlw	0
 13150  002F2C  6E03               	movwf	?i2___ftpack+2,c
 13151  002F2E  0012               	return	
 13152  002F30                     i2l4212:
 13153  002F30  2A04               	incf	i2___ftpack@exp,f,c
 13154  002F32  90D8               	bcf	status,0,c
 13155  002F34  3203               	rrcf	i2___ftpack@arg+2,f,c
 13156  002F36  3202               	rrcf	i2___ftpack@arg+1,f,c
 13157  002F38  3201               	rrcf	i2___ftpack@arg,f,c
 13158  002F3A                     i2l4214:
 13159  002F3A  0E00               	movlw	0
 13160  002F3C  1401               	andwf	i2___ftpack@arg,w,c
 13161  002F3E  6E06               	movwf	??i2___ftpack& (0+255),c
 13162  002F40  0E00               	movlw	0
 13163  002F42  1402               	andwf	i2___ftpack@arg+1,w,c
 13164  002F44  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 13165  002F46  0EFE               	movlw	254
 13166  002F48  1403               	andwf	i2___ftpack@arg+2,w,c
 13167  002F4A  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 13168  002F4C  5006               	movf	??i2___ftpack,w,c
 13169  002F4E  1007               	iorwf	??i2___ftpack+1,w,c
 13170  002F50  1008               	iorwf	??i2___ftpack+2,w,c
 13171  002F52  B4D8               	btfsc	status,2,c
 13172  002F54  D00C               	goto	i2l4220
 13173  002F56  D7EC               	goto	i2l4212
 13174  002F58                     i2l4216:
 13175  002F58  2A04               	incf	i2___ftpack@exp,f,c
 13176  002F5A  0E01               	movlw	1
 13177  002F5C  2601               	addwf	i2___ftpack@arg,f,c
 13178  002F5E  0E00               	movlw	0
 13179  002F60  2202               	addwfc	i2___ftpack@arg+1,f,c
 13180  002F62  0E00               	movlw	0
 13181  002F64  2203               	addwfc	i2___ftpack@arg+2,f,c
 13182  002F66  90D8               	bcf	status,0,c
 13183  002F68  3203               	rrcf	i2___ftpack@arg+2,f,c
 13184  002F6A  3202               	rrcf	i2___ftpack@arg+1,f,c
 13185  002F6C  3201               	rrcf	i2___ftpack@arg,f,c
 13186  002F6E                     i2l4220:
 13187  002F6E  0E00               	movlw	0
 13188  002F70  1401               	andwf	i2___ftpack@arg,w,c
 13189  002F72  6E06               	movwf	??i2___ftpack& (0+255),c
 13190  002F74  0E00               	movlw	0
 13191  002F76  1402               	andwf	i2___ftpack@arg+1,w,c
 13192  002F78  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 13193  002F7A  0EFF               	movlw	255
 13194  002F7C  1403               	andwf	i2___ftpack@arg+2,w,c
 13195  002F7E  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 13196  002F80  5006               	movf	??i2___ftpack,w,c
 13197  002F82  1007               	iorwf	??i2___ftpack+1,w,c
 13198  002F84  1008               	iorwf	??i2___ftpack+2,w,c
 13199  002F86  B4D8               	btfsc	status,2,c
 13200  002F88  D006               	goto	i2l4224
 13201  002F8A  D7E6               	goto	i2l4216
 13202  002F8C                     i2l4222:
 13203  002F8C  0604               	decf	i2___ftpack@exp,f,c
 13204  002F8E  90D8               	bcf	status,0,c
 13205  002F90  3601               	rlcf	i2___ftpack@arg,f,c
 13206  002F92  3602               	rlcf	i2___ftpack@arg+1,f,c
 13207  002F94  3603               	rlcf	i2___ftpack@arg+2,f,c
 13208  002F96                     i2l4224:
 13209  002F96  BE02               	btfsc	i2___ftpack@arg+1,7,c
 13210  002F98  D003               	goto	i2l982
 13211  002F9A  0E02               	movlw	2
 13212  002F9C  6004               	cpfslt	i2___ftpack@exp,c
 13213  002F9E  D7F6               	goto	i2l4222
 13214  002FA0                     i2l982:
 13215  002FA0  A004               	btfss	i2___ftpack@exp,0,c
 13216  002FA2  9E02               	bcf	i2___ftpack@arg+1,7,c
 13217  002FA4  90D8               	bcf	status,0,c
 13218  002FA6  3204               	rrcf	i2___ftpack@exp,f,c
 13219  002FA8  5004               	movf	i2___ftpack@exp,w,c
 13220  002FAA  1203               	iorwf	i2___ftpack@arg+2,f,c
 13221  002FAC  5005               	movf	i2___ftpack@sign,w,c
 13222  002FAE  A4D8               	btfss	status,2,c
 13223  002FB0  8E03               	bsf	i2___ftpack@arg+2,7,c
 13224  002FB2  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 13225  002FB6  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 13226  002FBA  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 13227  002FBE  0012               	return	
 13228  002FC0                     __end_ofi2___ftpack:
 13229                           	opt stack 0
 13230                           pclatu	equ	0xFFB
 13231                           pclath	equ	0xFFA
 13232                           tblptru	equ	0xFF8
 13233                           tblptrh	equ	0xFF7
 13234                           tblptrl	equ	0xFF6
 13235                           tablat	equ	0xFF5
 13236                           prodh	equ	0xFF4
 13237                           prodl	equ	0xFF3
 13238                           intcon	equ	0xFF2
 13239                           intcon3	equ	0xFF0
 13240                           postinc0	equ	0xFEE
 13241                           fsr0h	equ	0xFEA
 13242                           fsr0l	equ	0xFE9
 13243                           wreg	equ	0xFE8
 13244                           postdec1	equ	0xFE5
 13245                           fsr1h	equ	0xFE2
 13246                           fsr1l	equ	0xFE1
 13247                           indf2	equ	0xFDF
 13248                           postinc2	equ	0xFDE
 13249                           postdec2	equ	0xFDD
 13250                           fsr2h	equ	0xFDA
 13251                           fsr2l	equ	0xFD9
 13252                           status	equ	0xFD8
 13253                           
 13254 ;; *************** function _servoInterruptService *****************
 13255 ;; Defined at:
 13256 ;;		line 47 in file "servo.c"
 13257 ;; Parameters:    Size  Location     Type
 13258 ;;		None
 13259 ;; Auto vars:     Size  Location     Type
 13260 ;;  i               2   19[COMRAM] int 
 13261 ;;  flags           8   11[COMRAM] int [4]
 13262 ;; Return value:  Size  Location     Type
 13263 ;;                  1    wreg      void 
 13264 ;; Registers used:
 13265 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13266 ;; Tracked objects:
 13267 ;;		On entry : 0/0
 13268 ;;		On exit  : 0/0
 13269 ;;		Unchanged: 0/0
 13270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13272 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13273 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13274 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13275 ;;Total ram usage:       12 bytes
 13276 ;; Hardware stack levels used:    1
 13277 ;; Hardware stack levels required when called:    1
 13278 ;; This function calls:
 13279 ;;		i2_digitalRead
 13280 ;;		i2_digitalWrite
 13281 ;;		i2_startTimer
 13282 ;; This function is called by:
 13283 ;;		_service
 13284 ;; This function uses a non-reentrant model
 13285 ;;
 13286                           
 13287                           	psect	text58
 13288  001650                     __ptext58:
 13289                           	opt stack 0
 13290  001650                     _servoInterruptService:
 13291                           	opt stack 21
 13292                           
 13293                           ;servo.c: 49: int flags[4];
 13294                           ;servo.c: 50: flags[0] = TMR0IF;
 13295                           
 13296                           ;incstack = 0
 13297  001650  A4F2               	btfss	intcon,2,c	;volatile
 13298  001652  D002               	goto	i2u510_40
 13299  001654  0E01               	movlw	1
 13300  001656  D001               	goto	i2u511_40
 13301  001658                     i2u510_40:
 13302  001658  0E00               	movlw	0
 13303  00165A                     i2u511_40:
 13304  00165A  6E0C               	movwf	servoInterruptService@flags,c
 13305  00165C  6A0D               	clrf	servoInterruptService@flags+1,c
 13306                           
 13307                           ;servo.c: 51: flags[1] = TMR1IF;
 13308  00165E  A09E               	btfss	3998,0,c	;volatile
 13309  001660  D002               	goto	i2u512_40
 13310  001662  0E01               	movlw	1
 13311  001664  D001               	goto	i2u513_40
 13312  001666                     i2u512_40:
 13313  001666  0E00               	movlw	0
 13314  001668                     i2u513_40:
 13315  001668  6E0E               	movwf	servoInterruptService@flags+2,c
 13316  00166A  6A0F               	clrf	servoInterruptService@flags+3,c
 13317                           
 13318                           ;servo.c: 52: flags[2] = TMR2IF;
 13319  00166C  A29E               	btfss	3998,1,c	;volatile
 13320  00166E  D002               	goto	i2u514_40
 13321  001670  0E01               	movlw	1
 13322  001672  D001               	goto	i2u515_40
 13323  001674                     i2u514_40:
 13324  001674  0E00               	movlw	0
 13325  001676                     i2u515_40:
 13326  001676  6E10               	movwf	servoInterruptService@flags+4,c
 13327  001678  6A11               	clrf	servoInterruptService@flags+5,c
 13328                           
 13329                           ;servo.c: 53: flags[3] = TMR3IF;
 13330  00167A  A2A1               	btfss	4001,1,c	;volatile
 13331  00167C  D002               	goto	i2u516_40
 13332  00167E  0E01               	movlw	1
 13333  001680  D001               	goto	i2u517_40
 13334  001682                     i2u516_40:
 13335  001682  0E00               	movlw	0
 13336  001684                     i2u517_40:
 13337  001684  6E12               	movwf	servoInterruptService@flags+6,c
 13338  001686  6A13               	clrf	servoInterruptService@flags+7,c
 13339                           
 13340                           ;servo.c: 55: for(int i = 0; i < 4; i++){
 13341  001688  0E00               	movlw	0
 13342  00168A  6E15               	movwf	servoInterruptService@i+1,c
 13343  00168C  0E00               	movlw	0
 13344  00168E  6E14               	movwf	servoInterruptService@i,c
 13345  001690  BE15               	btfsc	servoInterruptService@i+1,7,c
 13346  001692  D008               	goto	i2l5142
 13347  001694  5015               	movf	servoInterruptService@i+1,w,c
 13348  001696  E105               	bnz	i2u518_40
 13349  001698  0E04               	movlw	4
 13350  00169A  5C14               	subwf	servoInterruptService@i,w,c
 13351  00169C  B0D8               	btfsc	status,0,c
 13352  00169E  0012               	return	
 13353  0016A0  D001               	goto	i2l5142
 13354  0016A2                     i2u518_40:
 13355  0016A2  0012               	return	
 13356  0016A4                     i2l5142:
 13357                           
 13358                           ;servo.c: 56: if(flags[i]){
 13359  0016A4  90D8               	bcf	status,0,c
 13360  0016A6  3414               	rlcf	servoInterruptService@i,w,c
 13361  0016A8  6ED9               	movwf	fsr2l,c
 13362  0016AA  3415               	rlcf	servoInterruptService@i+1,w,c
 13363  0016AC  6EDA               	movwf	fsr2h,c
 13364  0016AE  0E0C               	movlw	low servoInterruptService@flags
 13365  0016B0  26D9               	addwf	fsr2l,f,c
 13366  0016B2  0E00               	movlw	high servoInterruptService@flags
 13367  0016B4  22DA               	addwfc	fsr2h,f,c
 13368  0016B6  50DE               	movf	postinc2,w,c
 13369  0016B8  10DE               	iorwf	postinc2,w,c
 13370  0016BA  B4D8               	btfsc	status,2,c
 13371  0016BC  D0AB               	goto	i2l5156
 13372                           
 13373                           ;servo.c: 58: if(digitalRead(port[i],pin[i])){
 13374  0016BE  90D8               	bcf	status,0,c
 13375  0016C0  3414               	rlcf	servoInterruptService@i,w,c
 13376  0016C2  6ED9               	movwf	fsr2l,c
 13377  0016C4  3415               	rlcf	servoInterruptService@i+1,w,c
 13378  0016C6  6EDA               	movwf	fsr2h,c
 13379  0016C8  0E18               	movlw	low _port
 13380  0016CA  26D9               	addwf	fsr2l,f,c
 13381  0016CC  0E01               	movlw	high _port
 13382  0016CE  22DA               	addwfc	fsr2h,f,c
 13383  0016D0  CFDE F001          	movff	postinc2,i2digitalRead@port
 13384  0016D4  CFDD F002          	movff	postdec2,i2digitalRead@port+1
 13385  0016D8  90D8               	bcf	status,0,c
 13386  0016DA  3414               	rlcf	servoInterruptService@i,w,c
 13387  0016DC  6ED9               	movwf	fsr2l,c
 13388  0016DE  3415               	rlcf	servoInterruptService@i+1,w,c
 13389  0016E0  6EDA               	movwf	fsr2h,c
 13390  0016E2  0E10               	movlw	low _pin
 13391  0016E4  26D9               	addwf	fsr2l,f,c
 13392  0016E6  0E01               	movlw	high _pin
 13393  0016E8  22DA               	addwfc	fsr2h,f,c
 13394  0016EA  CFDE F003          	movff	postinc2,i2digitalRead@pin
 13395  0016EE  CFDD F004          	movff	postdec2,i2digitalRead@pin+1
 13396  0016F2  EC30  F017         	call	i2_digitalRead	;wreg free
 13397  0016F6  5001               	movf	?i2_digitalRead,w,c
 13398  0016F8  1002               	iorwf	?i2_digitalRead+1,w,c
 13399  0016FA  B4D8               	btfsc	status,2,c
 13400  0016FC  D02F               	goto	i2l5150
 13401                           
 13402                           ;servo.c: 59: startTimer(i,15535);
 13403  0016FE  C014  F001         	movff	servoInterruptService@i,i2startTimer@timer
 13404  001702  C015  F002         	movff	servoInterruptService@i+1,i2startTimer@timer+1
 13405  001706  0EAF               	movlw	175
 13406  001708  6E03               	movwf	i2startTimer@val,c
 13407  00170A  0E3C               	movlw	60
 13408  00170C  6E04               	movwf	i2startTimer@val+1,c
 13409  00170E  0E00               	movlw	0
 13410  001710  6E05               	movwf	i2startTimer@val+2,c
 13411  001712  0E00               	movlw	0
 13412  001714  6E06               	movwf	i2startTimer@val+3,c
 13413  001716  EC0C  F01B         	call	i2_startTimer	;wreg free
 13414                           
 13415                           ;servo.c: 60: digitalWrite(port[i],pin[i],0);
 13416  00171A  90D8               	bcf	status,0,c
 13417  00171C  3414               	rlcf	servoInterruptService@i,w,c
 13418  00171E  6ED9               	movwf	fsr2l,c
 13419  001720  3415               	rlcf	servoInterruptService@i+1,w,c
 13420  001722  6EDA               	movwf	fsr2h,c
 13421  001724  0E18               	movlw	low _port
 13422  001726  26D9               	addwf	fsr2l,f,c
 13423  001728  0E01               	movlw	high _port
 13424  00172A  22DA               	addwfc	fsr2h,f,c
 13425  00172C  CFDE F001          	movff	postinc2,i2digitalWrite@port
 13426  001730  CFDD F002          	movff	postdec2,i2digitalWrite@port+1
 13427  001734  90D8               	bcf	status,0,c
 13428  001736  3414               	rlcf	servoInterruptService@i,w,c
 13429  001738  6ED9               	movwf	fsr2l,c
 13430  00173A  3415               	rlcf	servoInterruptService@i+1,w,c
 13431  00173C  6EDA               	movwf	fsr2h,c
 13432  00173E  0E10               	movlw	low _pin
 13433  001740  26D9               	addwf	fsr2l,f,c
 13434  001742  0E01               	movlw	high _pin
 13435  001744  22DA               	addwfc	fsr2h,f,c
 13436  001746  CFDE F003          	movff	postinc2,i2digitalWrite@pin
 13437  00174A  CFDD F004          	movff	postdec2,i2digitalWrite@pin+1
 13438  00174E  0E00               	movlw	0
 13439  001750  6E06               	movwf	i2digitalWrite@val+1,c
 13440  001752  0E00               	movlw	0
 13441  001754  6E05               	movwf	i2digitalWrite@val,c
 13442  001756  ECE0  F017         	call	i2_digitalWrite	;wreg free
 13443                           
 13444                           ;servo.c: 61: }
 13445  00175A  D047               	goto	i2l5154
 13446  00175C                     i2l5150:
 13447                           
 13448                           ;servo.c: 62: else{
 13449                           ;servo.c: 63: startTimer(i, pulse[i]);
 13450  00175C  C014  F001         	movff	servoInterruptService@i,i2startTimer@timer
 13451  001760  C015  F002         	movff	servoInterruptService@i+1,i2startTimer@timer+1
 13452  001764  0E00               	movlw	low _pulse
 13453  001766  6E0A               	movwf	??_servoInterruptService& (0+255),c
 13454  001768  0E01               	movlw	high _pulse
 13455  00176A  6E0B               	movwf	(??_servoInterruptService+1)& (0+255),c
 13456  00176C  90D8               	bcf	status,0,c
 13457  00176E  3414               	rlcf	servoInterruptService@i,w,c
 13458  001770  6ED9               	movwf	fsr2l,c
 13459  001772  3415               	rlcf	servoInterruptService@i+1,w,c
 13460  001774  6EDA               	movwf	fsr2h,c
 13461  001776  90D8               	bcf	status,0,c
 13462  001778  36D9               	rlcf	fsr2l,f,c
 13463  00177A  36DA               	rlcf	fsr2h,f,c
 13464  00177C  500A               	movf	??_servoInterruptService,w,c
 13465  00177E  26D9               	addwf	fsr2l,f,c
 13466  001780  500B               	movf	??_servoInterruptService+1,w,c
 13467  001782  22DA               	addwfc	fsr2h,f,c
 13468  001784  CFDE F003          	movff	postinc2,i2startTimer@val
 13469  001788  CFDE F004          	movff	postinc2,i2startTimer@val+1
 13470  00178C  CFDE F005          	movff	postinc2,i2startTimer@val+2
 13471  001790  CFDE F006          	movff	postinc2,i2startTimer@val+3
 13472  001794  EC0C  F01B         	call	i2_startTimer	;wreg free
 13473                           
 13474                           ;servo.c: 64: digitalWrite(port[i],pin[i],1);
 13475  001798  90D8               	bcf	status,0,c
 13476  00179A  3414               	rlcf	servoInterruptService@i,w,c
 13477  00179C  6ED9               	movwf	fsr2l,c
 13478  00179E  3415               	rlcf	servoInterruptService@i+1,w,c
 13479  0017A0  6EDA               	movwf	fsr2h,c
 13480  0017A2  0E18               	movlw	low _port
 13481  0017A4  26D9               	addwf	fsr2l,f,c
 13482  0017A6  0E01               	movlw	high _port
 13483  0017A8  22DA               	addwfc	fsr2h,f,c
 13484  0017AA  CFDE F001          	movff	postinc2,i2digitalWrite@port
 13485  0017AE  CFDD F002          	movff	postdec2,i2digitalWrite@port+1
 13486  0017B2  90D8               	bcf	status,0,c
 13487  0017B4  3414               	rlcf	servoInterruptService@i,w,c
 13488  0017B6  6ED9               	movwf	fsr2l,c
 13489  0017B8  3415               	rlcf	servoInterruptService@i+1,w,c
 13490  0017BA  6EDA               	movwf	fsr2h,c
 13491  0017BC  0E10               	movlw	low _pin
 13492  0017BE  26D9               	addwf	fsr2l,f,c
 13493  0017C0  0E01               	movlw	high _pin
 13494  0017C2  22DA               	addwfc	fsr2h,f,c
 13495  0017C4  CFDE F003          	movff	postinc2,i2digitalWrite@pin
 13496  0017C8  CFDD F004          	movff	postdec2,i2digitalWrite@pin+1
 13497  0017CC  0E00               	movlw	0
 13498  0017CE  6E06               	movwf	i2digitalWrite@val+1,c
 13499  0017D0  0E01               	movlw	1
 13500  0017D2  6E05               	movwf	i2digitalWrite@val,c
 13501  0017D4  ECE0  F017         	call	i2_digitalWrite	;wreg free
 13502                           
 13503                           ;servo.c: 65: }
 13504                           ;servo.c: 68: switch(i){
 13505  0017D8  D008               	goto	i2l5154
 13506  0017DA                     i2l579:
 13507  0017DA  94F2               	bcf	intcon,2,c	;volatile
 13508  0017DC  D01B               	goto	i2l5156
 13509  0017DE                     i2l581:
 13510  0017DE  909E               	bcf	3998,0,c	;volatile
 13511  0017E0  D019               	goto	i2l5156
 13512  0017E2                     i2l582:
 13513  0017E2  929E               	bcf	3998,1,c	;volatile
 13514  0017E4  D017               	goto	i2l5156
 13515  0017E6                     i2l583:
 13516  0017E6  92A1               	bcf	4001,1,c	;volatile
 13517                           
 13518                           ;servo.c: 73: }
 13519  0017E8  D015               	goto	i2l5156
 13520  0017EA                     i2l5154:
 13521  0017EA  C014  F00A         	movff	servoInterruptService@i,??_servoInterruptService
 13522  0017EE  C015  F00B         	movff	servoInterruptService@i+1,??_servoInterruptService+1
 13523                           
 13524                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13525                           ; Switch size 1, requested type "space"
 13526                           ; Number of cases is 1, Range of values is 0 to 0
 13527                           ; switch strategies available:
 13528                           ; Name         Instructions Cycles
 13529                           ; simple_byte            4     3 (average)
 13530                           ;	Chosen strategy is simple_byte
 13531  0017F2  500B               	movf	??_servoInterruptService+1,w,c
 13532  0017F4  0A00               	xorlw	0	; case 0
 13533  0017F6  A4D8               	btfss	status,2,c
 13534  0017F8  D00D               	goto	i2l5156
 13535                           
 13536                           ; Switch size 1, requested type "space"
 13537                           ; Number of cases is 4, Range of values is 0 to 3
 13538                           ; switch strategies available:
 13539                           ; Name         Instructions Cycles
 13540                           ; simple_byte           13     7 (average)
 13541                           ;	Chosen strategy is simple_byte
 13542  0017FA  500A               	movf	??_servoInterruptService,w,c
 13543  0017FC  0A00               	xorlw	0	; case 0
 13544  0017FE  B4D8               	btfsc	status,2,c
 13545  001800  D7EC               	goto	i2l579
 13546  001802  0A01               	xorlw	1	; case 1
 13547  001804  B4D8               	btfsc	status,2,c
 13548  001806  D7EB               	goto	i2l581
 13549  001808  0A03               	xorlw	3	; case 2
 13550  00180A  B4D8               	btfsc	status,2,c
 13551  00180C  D7EA               	goto	i2l582
 13552  00180E  0A01               	xorlw	1	; case 3
 13553  001810  B4D8               	btfsc	status,2,c
 13554  001812  D7E9               	goto	i2l583
 13555  001814                     i2l5156:
 13556  001814  4A14               	infsnz	servoInterruptService@i,f,c
 13557  001816  2A15               	incf	servoInterruptService@i+1,f,c
 13558  001818  BE15               	btfsc	servoInterruptService@i+1,7,c
 13559  00181A  D744               	goto	i2l5142
 13560  00181C  5015               	movf	servoInterruptService@i+1,w,c
 13561  00181E  E101               	bnz	i2l584
 13562  001820  D73B               	goto	L5
 13563  001822                     i2l584:
 13564  001822  0012               	return		;funcret
 13565  001824                     __end_of_servoInterruptService:
 13566                           	opt stack 0
 13567                           pclatu	equ	0xFFB
 13568                           pclath	equ	0xFFA
 13569                           tblptru	equ	0xFF8
 13570                           tblptrh	equ	0xFF7
 13571                           tblptrl	equ	0xFF6
 13572                           tablat	equ	0xFF5
 13573                           prodh	equ	0xFF4
 13574                           prodl	equ	0xFF3
 13575                           intcon	equ	0xFF2
 13576                           intcon3	equ	0xFF0
 13577                           postinc0	equ	0xFEE
 13578                           fsr0h	equ	0xFEA
 13579                           fsr0l	equ	0xFE9
 13580                           wreg	equ	0xFE8
 13581                           postdec1	equ	0xFE5
 13582                           fsr1h	equ	0xFE2
 13583                           fsr1l	equ	0xFE1
 13584                           indf2	equ	0xFDF
 13585                           postinc2	equ	0xFDE
 13586                           postdec2	equ	0xFDD
 13587                           fsr2h	equ	0xFDA
 13588                           fsr2l	equ	0xFD9
 13589                           status	equ	0xFD8
 13590                           
 13591 ;; *************** function i2_startTimer *****************
 13592 ;; Defined at:
 13593 ;;		line 75 in file "timer.c"
 13594 ;; Parameters:    Size  Location     Type
 13595 ;;  timer           2    0[COMRAM] int 
 13596 ;;  val             4    2[COMRAM] long 
 13597 ;; Auto vars:     Size  Location     Type
 13598 ;;		None
 13599 ;; Return value:  Size  Location     Type
 13600 ;;                  1    wreg      void 
 13601 ;; Registers used:
 13602 ;;		wreg, status,2, status,0
 13603 ;; Tracked objects:
 13604 ;;		On entry : 0/0
 13605 ;;		On exit  : 0/0
 13606 ;;		Unchanged: 0/0
 13607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13608 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13610 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13611 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13612 ;;Total ram usage:        8 bytes
 13613 ;; Hardware stack levels used:    1
 13614 ;; This function calls:
 13615 ;;		Nothing
 13616 ;; This function is called by:
 13617 ;;		_servoInterruptService
 13618 ;; This function uses a non-reentrant model
 13619 ;;
 13620                           
 13621                           	psect	text59
 13622  003618                     __ptext59:
 13623                           	opt stack 0
 13624  003618                     i2_startTimer:
 13625                           	opt stack 21
 13626                           
 13627                           ;timer.c: 76: switch(timer){
 13628                           
 13629                           ;incstack = 0
 13630  003618  D012               	goto	i2l4958
 13631  00361A                     i2l439:
 13632                           
 13633                           ;timer.c: 78: TMR0H = val>>8;
 13634  00361A  C004  FFD7         	movff	i2startTimer@val+1,4055	;volatile
 13635                           
 13636                           ;timer.c: 79: TMR0L = val;
 13637  00361E  C003  FFD6         	movff	i2startTimer@val,4054	;volatile
 13638                           
 13639                           ;timer.c: 80: T0CON |= 1<<7;
 13640  003622  8ED5               	bsf	4053,7,c	;volatile
 13641                           
 13642                           ;timer.c: 81: break;
 13643  003624  0012               	return	
 13644  003626                     i2l441:
 13645                           
 13646                           ;timer.c: 83: TMR1H = val>>8;
 13647  003626  C004  FFCF         	movff	i2startTimer@val+1,4047	;volatile
 13648                           
 13649                           ;timer.c: 84: TMR1L = val;
 13650  00362A  C003  FFCE         	movff	i2startTimer@val,4046	;volatile
 13651                           
 13652                           ;timer.c: 85: T1CON |= 1<<0;
 13653  00362E  80CD               	bsf	4045,0,c	;volatile
 13654                           
 13655                           ;timer.c: 86: break;
 13656  003630  0012               	return	
 13657  003632                     i2l442:
 13658                           
 13659                           ;timer.c: 88: TMR3H = val>>8;
 13660  003632  C004  FFB3         	movff	i2startTimer@val+1,4019	;volatile
 13661                           
 13662                           ;timer.c: 89: TMR3L = val;
 13663  003636  C003  FFB2         	movff	i2startTimer@val,4018	;volatile
 13664                           
 13665                           ;timer.c: 90: T3CON |= 1<<0;
 13666  00363A  80B1               	bsf	4017,0,c	;volatile
 13667                           
 13668                           ;timer.c: 91: }
 13669  00363C  0012               	return	
 13670  00363E                     i2l4958:
 13671  00363E  C001  F007         	movff	i2startTimer@timer,??i2_startTimer
 13672  003642  C002  F008         	movff	i2startTimer@timer+1,??i2_startTimer+1
 13673                           
 13674                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13675                           ; Switch size 1, requested type "space"
 13676                           ; Number of cases is 1, Range of values is 0 to 0
 13677                           ; switch strategies available:
 13678                           ; Name         Instructions Cycles
 13679                           ; simple_byte            4     3 (average)
 13680                           ;	Chosen strategy is simple_byte
 13681  003646  5008               	movf	??i2_startTimer+1,w,c
 13682  003648  0A00               	xorlw	0	; case 0
 13683  00364A  A4D8               	btfss	status,2,c
 13684  00364C  0012               	return	
 13685                           
 13686                           ; Switch size 1, requested type "space"
 13687                           ; Number of cases is 3, Range of values is 0 to 3
 13688                           ; switch strategies available:
 13689                           ; Name         Instructions Cycles
 13690                           ; simple_byte           10     6 (average)
 13691                           ;	Chosen strategy is simple_byte
 13692  00364E  5007               	movf	??i2_startTimer,w,c
 13693  003650  0A00               	xorlw	0	; case 0
 13694  003652  B4D8               	btfsc	status,2,c
 13695  003654  D7E2               	goto	i2l439
 13696  003656  0A01               	xorlw	1	; case 1
 13697  003658  B4D8               	btfsc	status,2,c
 13698  00365A  D7E5               	goto	i2l441
 13699  00365C  0A02               	xorlw	2	; case 3
 13700  00365E  A4D8               	btfss	status,2,c
 13701  003660  0012               	return	
 13702  003662  D7E7               	goto	i2l442
 13703  003664                     __end_ofi2_startTimer:
 13704                           	opt stack 0
 13705                           pclatu	equ	0xFFB
 13706                           pclath	equ	0xFFA
 13707                           tblptru	equ	0xFF8
 13708                           tblptrh	equ	0xFF7
 13709                           tblptrl	equ	0xFF6
 13710                           tablat	equ	0xFF5
 13711                           prodh	equ	0xFF4
 13712                           prodl	equ	0xFF3
 13713                           intcon	equ	0xFF2
 13714                           intcon3	equ	0xFF0
 13715                           postinc0	equ	0xFEE
 13716                           fsr0h	equ	0xFEA
 13717                           fsr0l	equ	0xFE9
 13718                           wreg	equ	0xFE8
 13719                           postdec1	equ	0xFE5
 13720                           fsr1h	equ	0xFE2
 13721                           fsr1l	equ	0xFE1
 13722                           indf2	equ	0xFDF
 13723                           postinc2	equ	0xFDE
 13724                           postdec2	equ	0xFDD
 13725                           fsr2h	equ	0xFDA
 13726                           fsr2l	equ	0xFD9
 13727                           status	equ	0xFD8
 13728                           
 13729 ;; *************** function i2_digitalWrite *****************
 13730 ;; Defined at:
 13731 ;;		line 53 in file "iopin.c"
 13732 ;; Parameters:    Size  Location     Type
 13733 ;;  port            2    0[COMRAM] int 
 13734 ;;  pin             2    2[COMRAM] int 
 13735 ;;  val             2    4[COMRAM] int 
 13736 ;; Auto vars:     Size  Location     Type
 13737 ;;		None
 13738 ;; Return value:  Size  Location     Type
 13739 ;;                  1    wreg      void 
 13740 ;; Registers used:
 13741 ;;		wreg, status,2, status,0
 13742 ;; Tracked objects:
 13743 ;;		On entry : 0/0
 13744 ;;		On exit  : 0/0
 13745 ;;		Unchanged: 0/0
 13746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13747 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13749 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13750 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13751 ;;Total ram usage:        9 bytes
 13752 ;; Hardware stack levels used:    1
 13753 ;; This function calls:
 13754 ;;		Nothing
 13755 ;; This function is called by:
 13756 ;;		_servoInterruptService
 13757 ;; This function uses a non-reentrant model
 13758 ;;
 13759                           
 13760                           	psect	text60
 13761  002FC0                     __ptext60:
 13762                           	opt stack 0
 13763  002FC0                     i2_digitalWrite:
 13764                           	opt stack 21
 13765                           
 13766                           ;iopin.c: 54: pin = 1 << pin;
 13767                           
 13768                           ;incstack = 0
 13769  002FC0  C003  F007         	movff	i2digitalWrite@pin,??i2_digitalWrite
 13770  002FC4  0E01               	movlw	1
 13771  002FC6  6E08               	movwf	(??i2_digitalWrite+1)& (0+255),c
 13772  002FC8  0E00               	movlw	0
 13773  002FCA  6E09               	movwf	(??i2_digitalWrite+2)& (0+255),c
 13774  002FCC  2A07               	incf	??i2_digitalWrite,f,c
 13775  002FCE  D003               	goto	i2u480_44
 13776  002FD0                     i2u480_45:
 13777  002FD0  90D8               	bcf	status,0,c
 13778  002FD2  3608               	rlcf	??i2_digitalWrite+1,f,c
 13779  002FD4  3609               	rlcf	??i2_digitalWrite+2,f,c
 13780  002FD6                     i2u480_44:
 13781  002FD6  2E07               	decfsz	??i2_digitalWrite,f,c
 13782  002FD8  D7FB               	goto	i2u480_45
 13783  002FDA  C008  F003         	movff	??i2_digitalWrite+1,i2digitalWrite@pin
 13784  002FDE  C009  F004         	movff	??i2_digitalWrite+2,i2digitalWrite@pin+1
 13785                           
 13786                           ;iopin.c: 55: if(val == 0){
 13787  002FE2  5005               	movf	i2digitalWrite@val,w,c
 13788  002FE4  1006               	iorwf	i2digitalWrite@val+1,w,c
 13789  002FE6  A4D8               	btfss	status,2,c
 13790  002FE8  D02B               	goto	i2l4944
 13791                           
 13792                           ;iopin.c: 56: pin ^= 0xff;
 13793  002FEA  0EFF               	movlw	255
 13794  002FEC  1A03               	xorwf	i2digitalWrite@pin,f,c
 13795                           
 13796                           ;iopin.c: 57: }
 13797                           ;iopin.c: 59: switch(port){
 13798  002FEE  D028               	goto	i2l4944
 13799  002FF0                     i2l4920:
 13800  002FF0  0405               	decf	i2digitalWrite@val,w,c
 13801  002FF2  1006               	iorwf	i2digitalWrite@val+1,w,c
 13802  002FF4  A4D8               	btfss	status,2,c
 13803  002FF6  D003               	goto	i2l4924
 13804  002FF8  5003               	movf	i2digitalWrite@pin,w,c
 13805  002FFA  1289               	iorwf	3977,f,c	;volatile
 13806  002FFC  0012               	return	
 13807  002FFE                     i2l4924:
 13808                           
 13809                           ;iopin.c: 61: else LATA &= pin;
 13810  002FFE  5003               	movf	i2digitalWrite@pin,w,c
 13811  003000  1689               	andwf	3977,f,c	;volatile
 13812                           
 13813                           ;iopin.c: 62: break;
 13814  003002  0012               	return	
 13815  003004                     i2l4926:
 13816  003004  0405               	decf	i2digitalWrite@val,w,c
 13817  003006  1006               	iorwf	i2digitalWrite@val+1,w,c
 13818  003008  A4D8               	btfss	status,2,c
 13819  00300A  D003               	goto	i2l4930
 13820  00300C  5003               	movf	i2digitalWrite@pin,w,c
 13821  00300E  128A               	iorwf	3978,f,c	;volatile
 13822  003010  0012               	return	
 13823  003012                     i2l4930:
 13824                           
 13825                           ;iopin.c: 64: else LATB &= pin;
 13826  003012  5003               	movf	i2digitalWrite@pin,w,c
 13827  003014  168A               	andwf	3978,f,c	;volatile
 13828                           
 13829                           ;iopin.c: 65: break;
 13830  003016  0012               	return	
 13831  003018                     i2l4932:
 13832  003018  0405               	decf	i2digitalWrite@val,w,c
 13833  00301A  1006               	iorwf	i2digitalWrite@val+1,w,c
 13834  00301C  A4D8               	btfss	status,2,c
 13835  00301E  D003               	goto	i2l4936
 13836  003020  5003               	movf	i2digitalWrite@pin,w,c
 13837  003022  128B               	iorwf	3979,f,c	;volatile
 13838  003024  0012               	return	
 13839  003026                     i2l4936:
 13840                           
 13841                           ;iopin.c: 67: else LATC &= pin;
 13842  003026  5003               	movf	i2digitalWrite@pin,w,c
 13843  003028  168B               	andwf	3979,f,c	;volatile
 13844                           
 13845                           ;iopin.c: 68: break;
 13846  00302A  0012               	return	
 13847  00302C                     i2l4938:
 13848  00302C  0405               	decf	i2digitalWrite@val,w,c
 13849  00302E  1006               	iorwf	i2digitalWrite@val+1,w,c
 13850  003030  A4D8               	btfss	status,2,c
 13851  003032  D003               	goto	i2l4942
 13852  003034  5003               	movf	i2digitalWrite@pin,w,c
 13853  003036  128C               	iorwf	3980,f,c	;volatile
 13854  003038  0012               	return	
 13855  00303A                     i2l4942:
 13856                           
 13857                           ;iopin.c: 70: else LATD &= pin;
 13858  00303A  5003               	movf	i2digitalWrite@pin,w,c
 13859  00303C  168C               	andwf	3980,f,c	;volatile
 13860                           
 13861                           ;iopin.c: 71: }
 13862  00303E  0012               	return	
 13863  003040                     i2l4944:
 13864  003040  C001  F007         	movff	i2digitalWrite@port,??i2_digitalWrite
 13865  003044  C002  F008         	movff	i2digitalWrite@port+1,??i2_digitalWrite+1
 13866                           
 13867                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13868                           ; Switch size 1, requested type "space"
 13869                           ; Number of cases is 1, Range of values is 0 to 0
 13870                           ; switch strategies available:
 13871                           ; Name         Instructions Cycles
 13872                           ; simple_byte            4     3 (average)
 13873                           ;	Chosen strategy is simple_byte
 13874  003048  5008               	movf	??i2_digitalWrite+1,w,c
 13875  00304A  0A00               	xorlw	0	; case 0
 13876  00304C  A4D8               	btfss	status,2,c
 13877  00304E  0012               	return	
 13878                           
 13879                           ; Switch size 1, requested type "space"
 13880                           ; Number of cases is 4, Range of values is 0 to 3
 13881                           ; switch strategies available:
 13882                           ; Name         Instructions Cycles
 13883                           ; simple_byte           13     7 (average)
 13884                           ;	Chosen strategy is simple_byte
 13885  003050  5007               	movf	??i2_digitalWrite,w,c
 13886  003052  0A00               	xorlw	0	; case 0
 13887  003054  B4D8               	btfsc	status,2,c
 13888  003056  D7CC               	goto	i2l4920
 13889  003058  0A01               	xorlw	1	; case 1
 13890  00305A  B4D8               	btfsc	status,2,c
 13891  00305C  D7D3               	goto	i2l4926
 13892  00305E  0A03               	xorlw	3	; case 2
 13893  003060  B4D8               	btfsc	status,2,c
 13894  003062  D7DA               	goto	i2l4932
 13895  003064  0A01               	xorlw	1	; case 3
 13896  003066  A4D8               	btfss	status,2,c
 13897  003068  0012               	return	
 13898  00306A  D7E0               	goto	i2l4938
 13899  00306C                     __end_ofi2_digitalWrite:
 13900                           	opt stack 0
 13901                           pclatu	equ	0xFFB
 13902                           pclath	equ	0xFFA
 13903                           tblptru	equ	0xFF8
 13904                           tblptrh	equ	0xFF7
 13905                           tblptrl	equ	0xFF6
 13906                           tablat	equ	0xFF5
 13907                           prodh	equ	0xFF4
 13908                           prodl	equ	0xFF3
 13909                           intcon	equ	0xFF2
 13910                           intcon3	equ	0xFF0
 13911                           postinc0	equ	0xFEE
 13912                           fsr0h	equ	0xFEA
 13913                           fsr0l	equ	0xFE9
 13914                           wreg	equ	0xFE8
 13915                           postdec1	equ	0xFE5
 13916                           fsr1h	equ	0xFE2
 13917                           fsr1l	equ	0xFE1
 13918                           indf2	equ	0xFDF
 13919                           postinc2	equ	0xFDE
 13920                           postdec2	equ	0xFDD
 13921                           fsr2h	equ	0xFDA
 13922                           fsr2l	equ	0xFD9
 13923                           status	equ	0xFD8
 13924                           
 13925 ;; *************** function i2_digitalRead *****************
 13926 ;; Defined at:
 13927 ;;		line 43 in file "iopin.c"
 13928 ;; Parameters:    Size  Location     Type
 13929 ;;  port            2    0[COMRAM] int 
 13930 ;;  pin             2    2[COMRAM] int 
 13931 ;; Auto vars:     Size  Location     Type
 13932 ;;		None
 13933 ;; Return value:  Size  Location     Type
 13934 ;;                  2    0[COMRAM] int 
 13935 ;; Registers used:
 13936 ;;		wreg, status,2, status,0
 13937 ;; Tracked objects:
 13938 ;;		On entry : 0/0
 13939 ;;		On exit  : 0/0
 13940 ;;		Unchanged: 0/0
 13941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13942 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13944 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13945 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13946 ;;Total ram usage:        6 bytes
 13947 ;; Hardware stack levels used:    1
 13948 ;; This function calls:
 13949 ;;		Nothing
 13950 ;; This function is called by:
 13951 ;;		_servoInterruptService
 13952 ;; This function uses a non-reentrant model
 13953 ;;
 13954                           
 13955                           	psect	text61
 13956  002E60                     __ptext61:
 13957                           	opt stack 0
 13958  002E60                     i2_digitalRead:
 13959                           	opt stack 21
 13960                           
 13961                           ;iopin.c: 44: switch(port){
 13962                           
 13963                           ;incstack = 0
 13964  002E60  D040               	goto	i2l4910
 13965  002E62                     i2l4892:
 13966  002E62  C003  F005         	movff	i2digitalRead@pin,??i2_digitalRead
 13967  002E66  CF80 F006          	movff	3968,??i2_digitalRead+1	;volatile
 13968  002E6A  2A05               	incf	??i2_digitalRead,f,c
 13969  002E6C  D002               	goto	i2u476_44
 13970  002E6E                     i2u476_45:
 13971  002E6E  90D8               	bcf	status,0,c
 13972  002E70  3206               	rrcf	??i2_digitalRead+1,f,c
 13973  002E72                     i2u476_44:
 13974  002E72  2E05               	decfsz	??i2_digitalRead,f,c
 13975  002E74  D7FC               	goto	i2u476_45
 13976  002E76  0E01               	movlw	1
 13977  002E78  1606               	andwf	??i2_digitalRead+1,f,c
 13978  002E7A  5006               	movf	??i2_digitalRead+1,w,c
 13979  002E7C  6E01               	movwf	?i2_digitalRead,c
 13980  002E7E  6A02               	clrf	?i2_digitalRead+1,c
 13981  002E80  0012               	return	
 13982  002E82                     i2l4896:
 13983  002E82  C003  F005         	movff	i2digitalRead@pin,??i2_digitalRead
 13984  002E86  CF81 F006          	movff	3969,??i2_digitalRead+1	;volatile
 13985  002E8A  2A05               	incf	??i2_digitalRead,f,c
 13986  002E8C  D002               	goto	i2u477_44
 13987  002E8E                     i2u477_45:
 13988  002E8E  90D8               	bcf	status,0,c
 13989  002E90  3206               	rrcf	??i2_digitalRead+1,f,c
 13990  002E92                     i2u477_44:
 13991  002E92  2E05               	decfsz	??i2_digitalRead,f,c
 13992  002E94  D7FC               	goto	i2u477_45
 13993  002E96  0E01               	movlw	1
 13994  002E98  1606               	andwf	??i2_digitalRead+1,f,c
 13995  002E9A  5006               	movf	??i2_digitalRead+1,w,c
 13996  002E9C  6E01               	movwf	?i2_digitalRead,c
 13997  002E9E  6A02               	clrf	?i2_digitalRead+1,c
 13998  002EA0  0012               	return	
 13999  002EA2                     i2l4900:
 14000  002EA2  C003  F005         	movff	i2digitalRead@pin,??i2_digitalRead
 14001  002EA6  CF82 F006          	movff	3970,??i2_digitalRead+1	;volatile
 14002  002EAA  2A05               	incf	??i2_digitalRead,f,c
 14003  002EAC  D002               	goto	i2u478_44
 14004  002EAE                     i2u478_45:
 14005  002EAE  90D8               	bcf	status,0,c
 14006  002EB0  3206               	rrcf	??i2_digitalRead+1,f,c
 14007  002EB2                     i2u478_44:
 14008  002EB2  2E05               	decfsz	??i2_digitalRead,f,c
 14009  002EB4  D7FC               	goto	i2u478_45
 14010  002EB6  0E01               	movlw	1
 14011  002EB8  1606               	andwf	??i2_digitalRead+1,f,c
 14012  002EBA  5006               	movf	??i2_digitalRead+1,w,c
 14013  002EBC  6E01               	movwf	?i2_digitalRead,c
 14014  002EBE  6A02               	clrf	?i2_digitalRead+1,c
 14015  002EC0  0012               	return	
 14016  002EC2                     i2l4904:
 14017  002EC2  C003  F005         	movff	i2digitalRead@pin,??i2_digitalRead
 14018  002EC6  CF83 F006          	movff	3971,??i2_digitalRead+1	;volatile
 14019  002ECA  2A05               	incf	??i2_digitalRead,f,c
 14020  002ECC  D002               	goto	i2u479_44
 14021  002ECE                     i2u479_45:
 14022  002ECE  90D8               	bcf	status,0,c
 14023  002ED0  3206               	rrcf	??i2_digitalRead+1,f,c
 14024  002ED2                     i2u479_44:
 14025  002ED2  2E05               	decfsz	??i2_digitalRead,f,c
 14026  002ED4  D7FC               	goto	i2u479_45
 14027  002ED6  0E01               	movlw	1
 14028  002ED8  1606               	andwf	??i2_digitalRead+1,f,c
 14029  002EDA  5006               	movf	??i2_digitalRead+1,w,c
 14030  002EDC  6E01               	movwf	?i2_digitalRead,c
 14031  002EDE  6A02               	clrf	?i2_digitalRead+1,c
 14032  002EE0  0012               	return	
 14033  002EE2                     i2l4910:
 14034  002EE2  C001  F005         	movff	i2digitalRead@port,??i2_digitalRead
 14035  002EE6  C002  F006         	movff	i2digitalRead@port+1,??i2_digitalRead+1
 14036                           
 14037                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14038                           ; Switch size 1, requested type "space"
 14039                           ; Number of cases is 1, Range of values is 0 to 0
 14040                           ; switch strategies available:
 14041                           ; Name         Instructions Cycles
 14042                           ; simple_byte            4     3 (average)
 14043                           ;	Chosen strategy is simple_byte
 14044  002EEA  5006               	movf	??i2_digitalRead+1,w,c
 14045  002EEC  0A00               	xorlw	0	; case 0
 14046  002EEE  A4D8               	btfss	status,2,c
 14047  002EF0  D00D               	goto	i2l334
 14048                           
 14049                           ; Switch size 1, requested type "space"
 14050                           ; Number of cases is 4, Range of values is 0 to 3
 14051                           ; switch strategies available:
 14052                           ; Name         Instructions Cycles
 14053                           ; simple_byte           13     7 (average)
 14054                           ;	Chosen strategy is simple_byte
 14055  002EF2  5005               	movf	??i2_digitalRead,w,c
 14056  002EF4  0A00               	xorlw	0	; case 0
 14057  002EF6  B4D8               	btfsc	status,2,c
 14058  002EF8  D7B4               	goto	i2l4892
 14059  002EFA  0A01               	xorlw	1	; case 1
 14060  002EFC  B4D8               	btfsc	status,2,c
 14061  002EFE  D7C1               	goto	i2l4896
 14062  002F00  0A03               	xorlw	3	; case 2
 14063  002F02  B4D8               	btfsc	status,2,c
 14064  002F04  D7CE               	goto	i2l4900
 14065  002F06  0A01               	xorlw	1	; case 3
 14066  002F08  B4D8               	btfsc	status,2,c
 14067  002F0A  D7DB               	goto	i2l4904
 14068  002F0C                     i2l334:
 14069                           
 14070                           ;iopin.c: 50: return -1;
 14071  002F0C  6801               	setf	?i2_digitalRead,c
 14072  002F0E  6802               	setf	?i2_digitalRead+1,c
 14073  002F10  0012               	return		;funcret
 14074  002F12                     __end_ofi2_digitalRead:
 14075                           	opt stack 0
 14076                           pclatu	equ	0xFFB
 14077                           pclath	equ	0xFFA
 14078                           tblptru	equ	0xFF8
 14079                           tblptrh	equ	0xFF7
 14080                           tblptrl	equ	0xFF6
 14081                           tablat	equ	0xFF5
 14082                           prodh	equ	0xFF4
 14083                           prodl	equ	0xFF3
 14084                           intcon	equ	0xFF2
 14085                           intcon3	equ	0xFF0
 14086                           postinc0	equ	0xFEE
 14087                           fsr0h	equ	0xFEA
 14088                           fsr0l	equ	0xFE9
 14089                           wreg	equ	0xFE8
 14090                           postdec1	equ	0xFE5
 14091                           fsr1h	equ	0xFE2
 14092                           fsr1l	equ	0xFE1
 14093                           indf2	equ	0xFDF
 14094                           postinc2	equ	0xFDE
 14095                           postdec2	equ	0xFDD
 14096                           fsr2h	equ	0xFDA
 14097                           fsr2l	equ	0xFD9
 14098                           status	equ	0xFD8
 14099                           pclatu	equ	0xFFB
 14100                           pclath	equ	0xFFA
 14101                           tblptru	equ	0xFF8
 14102                           tblptrh	equ	0xFF7
 14103                           tblptrl	equ	0xFF6
 14104                           tablat	equ	0xFF5
 14105                           prodh	equ	0xFF4
 14106                           prodl	equ	0xFF3
 14107                           intcon	equ	0xFF2
 14108                           intcon3	equ	0xFF0
 14109                           postinc0	equ	0xFEE
 14110                           fsr0h	equ	0xFEA
 14111                           fsr0l	equ	0xFE9
 14112                           wreg	equ	0xFE8
 14113                           postdec1	equ	0xFE5
 14114                           fsr1h	equ	0xFE2
 14115                           fsr1l	equ	0xFE1
 14116                           indf2	equ	0xFDF
 14117                           postinc2	equ	0xFDE
 14118                           postdec2	equ	0xFDD
 14119                           fsr2h	equ	0xFDA
 14120                           fsr2l	equ	0xFD9
 14121                           status	equ	0xFD8
 14122                           
 14123                           	psect	rparam
 14124  0000                     pclatu	equ	0xFFB
 14125                           pclath	equ	0xFFA
 14126                           tblptru	equ	0xFF8
 14127                           tblptrh	equ	0xFF7
 14128                           tblptrl	equ	0xFF6
 14129                           tablat	equ	0xFF5
 14130                           prodh	equ	0xFF4
 14131                           prodl	equ	0xFF3
 14132                           intcon	equ	0xFF2
 14133                           intcon3	equ	0xFF0
 14134                           postinc0	equ	0xFEE
 14135                           fsr0h	equ	0xFEA
 14136                           fsr0l	equ	0xFE9
 14137                           wreg	equ	0xFE8
 14138                           postdec1	equ	0xFE5
 14139                           fsr1h	equ	0xFE2
 14140                           fsr1l	equ	0xFE1
 14141                           indf2	equ	0xFDF
 14142                           postinc2	equ	0xFDE
 14143                           postdec2	equ	0xFDD
 14144                           fsr2h	equ	0xFDA
 14145                           fsr2l	equ	0xFD9
 14146                           status	equ	0xFD8
 14147                           
 14148                           	psect	temp
 14149  000078                     btemp:
 14150                           	opt stack 0
 14151  000078                     	ds	1
 14152  0000                     int$flags	set	btemp
 14153                           pclatu	equ	0xFFB
 14154                           pclath	equ	0xFFA
 14155                           tblptru	equ	0xFF8
 14156                           tblptrh	equ	0xFF7
 14157                           tblptrl	equ	0xFF6
 14158                           tablat	equ	0xFF5
 14159                           prodh	equ	0xFF4
 14160                           prodl	equ	0xFF3
 14161                           intcon	equ	0xFF2
 14162                           intcon3	equ	0xFF0
 14163                           postinc0	equ	0xFEE
 14164                           fsr0h	equ	0xFEA
 14165                           fsr0l	equ	0xFE9
 14166                           wreg	equ	0xFE8
 14167                           postdec1	equ	0xFE5
 14168                           fsr1h	equ	0xFE2
 14169                           fsr1l	equ	0xFE1
 14170                           indf2	equ	0xFDF
 14171                           postinc2	equ	0xFDE
 14172                           postdec2	equ	0xFDD
 14173                           fsr2h	equ	0xFDA
 14174                           fsr2l	equ	0xFD9
 14175                           status	equ	0xFD8


Data Sizes:
    Strings     381
    Constant    174
    Data        48
    BSS         47
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    117     119
    BANK0           128    128     128
    BANK1           256     16     109
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_22(CODE[17]), STR_21(CODE[18]), STR_20(CODE[17]), STR_19(CODE[18]), 
		 -> STR_18(CODE[17]), STR_17(CODE[19]), STR_16(CODE[17]), STR_15(CODE[18]), 
		 -> STR_14(CODE[17]), STR_13(CODE[18]), STR_12(CODE[17]), STR_11(CODE[18]), 
		 -> STR_10(CODE[9]), STR_9(CODE[8]), STR_8(CODE[24]), STR_7(CODE[15]), 
		 -> STR_6(CODE[17]), STR_5(CODE[20]), STR_4(CODE[18]), STR_3(CODE[14]), 
		 -> STR_2(CODE[20]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 

    pause@message	PTR unsigned char  size(2) Largest target is 24
		 -> STR_8(CODE[24]), STR_7(CODE[15]), STR_6(CODE[17]), STR_5(CODE[20]), 
		 -> STR_3(CODE[14]), STR_2(CODE[20]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _service in COMRAM

    _service->i2_setAngle
    i2_setAngle->i2_angleToPulse
    i2_angleToPulse->i2___fttol
    i2___fttol->i2___ftadd
    i2___ftmul->i2___ftdiv
    i2___ftdiv->i2___awtoft
    i2___ftadd->i2___ftmul
    i2___awtoft->i2___ftpack
    i2___altoft->i2___ftpack
    _servoInterruptService->i2_digitalWrite

Critical Paths under _main in BANK0

    _main->_sortBattery
    _sortBattery->_initServo
    _pause->_printf
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    ___ftdiv->___altoft
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _showInterface->_runMenu
    _runTime->_printf
    _runStats->_printf
    _runSelect->_printf
    _runMenu->_printf
    _mainMenu->_printf
    _dateTime->_printf
    _printf->___fttol
    _scale->___ftmul
    _lcdNewline->_lcdInst
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___ftdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftadd
    ___ftsub->___ftadd
    ___ftadd->_fround
    _lcdClear->_lcdInst
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sortBattery

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  493322
                            _initLCD
                          _initServo
                           _lcdClear
                           _pinSetup
                             _printf
                      _showInterface
                        _sortBattery
 ---------------------------------------------------------------------------------
 (1) _sortBattery                                         18    18      0  145895
                                            126 BANK0      2     2      0
                                              0 BANK1     16    16      0
                           ___altoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                         _analogRead
                        _digitalRead
                       _digitalWrite
                          _initServo
                           _lcdClear
                              _pause
                             _printf
                           _setAngle
                          _stopServo
 ---------------------------------------------------------------------------------
 (2) _stopServo                                            4     2      2      86
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _pause                                                2     0      2   47100
                                            122 BANK0      2     0      2
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _initServo                                            8     0      8   20129
                                            118 BANK0      8     0      8
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (3) _startTimer                                           8     2      6     562
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            10     6      4   18217
                                            108 BANK0     10     6      4
                       _angleToPulse
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        23    19      4   17077
                                             85 BANK0     23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3042
                                             18 BANK0     15     9      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2303
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2670
                                              8 BANK0     10     6      4
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (3) _initTimer                                            4     2      2     150
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                         9     3      6    1328
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) _digitalRead                                          6     2      4     442
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           6     2      4     150
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _showInterface                                        1     1      0  280492
                                            123 BANK0      1     1      0
                           _dateTime
                           _mainMenu
                         _readKeypad
                            _runMenu
                          _runSelect
                           _runStats
                            _runTime
 ---------------------------------------------------------------------------------
 (2) _runTime                                              0     0      0   46671
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runStats                                             0     0      0   46671
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runSelect                                            0     0      0   46671
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runMenu                                              1     1      0   46693
                                            122 BANK0      1     1      0
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (3) _readKeypad                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _mainMenu                                             0     0      0   46671
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _dateTime                                             0     0      0   46671
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              45    38      7   46536
                                             85 BANK0     37    30      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   10476
                                             48 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     292
                                              4 BANK0      1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   10278
                                             48 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2207
                                             14 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    4752
                                             33 BANK0     15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1448
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1580
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     431
                                              0 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     574
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2281
                                              8 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     671
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     802
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     508
                                             70 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    3899
                                             70 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    3602
                                             58 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2148
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     109
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1032
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (3) _lcdClear                                             0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              4 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     135
                                              2 BANK0      2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _service                                             15    15      0    7313
                                            102 COMRAM    15    15      0
              _servoInterruptService
                         i2_setAngle
 ---------------------------------------------------------------------------------
 (9) i2_setAngle                                          10     6      4    5888
                                             92 COMRAM    10     6      4
                     i2_angleToPulse
 ---------------------------------------------------------------------------------
 (10) i2_angleToPulse                                     23    19      4    5532
                                             69 COMRAM    23    19      4
                         i2___altoft
                         i2___awtoft
                          i2___ftadd
                          i2___ftdiv
                          i2___ftmul
                          i2___fttol
 ---------------------------------------------------------------------------------
 (11) i2___fttol                                          15    11      4     278
                                             54 COMRAM    15    11      4
                         i2___altoft (ARG)
                         i2___awtoft (ARG)
                          i2___ftadd (ARG)
                          i2___ftdiv (ARG)
                          i2___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___ftmul                                          15     9      6     999
                                             27 COMRAM    15     9      6
                         i2___altoft (ARG)
                         i2___awtoft (ARG)
                          i2___ftdiv (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (11) i2___ftdiv                                          15     9      6     953
                                             12 COMRAM    15     9      6
                         i2___awtoft (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (11) i2___ftadd                                          12     6      6    1565
                                             42 COMRAM    12     6      6
                         i2___altoft (ARG)
                         i2___awtoft (ARG)
                          i2___ftdiv (ARG)
                          i2___ftmul (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (11) i2___awtoft                                          4     1      3     738
                                              8 COMRAM     4     1      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (11) i2___altoft                                         10     6      4     837
                                              8 COMRAM    10     6      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (12) i2___ftpack                                          8     3      5     621
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) _servoInterruptService                               12    12      0    1292
                                              9 COMRAM    12    12      0
                      i2_digitalRead
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (10) i2_startTimer                                        8     2      6     258
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (10) i2_digitalWrite                                      9     3      6     488
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (10) i2_digitalRead                                       6     2      4     162
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _startTimer
   _lcdClear
     _lcdInst
       _lcdNibble
   _pinSetup
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _putch
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _showInterface
     _dateTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _mainMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _readKeypad
     _runMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _runSelect
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _runStats
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _runTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _sortBattery
     ___altoft
       ___ftpack
       _analogRead (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftge
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     _analogRead
     _digitalRead
     _digitalWrite
     _initServo
       _initTimer
       _setAngle
         _angleToPulse
           ___altoft
             ___ftpack
             _analogRead (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___fttol
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                       _analogRead (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _analogRead (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _analogRead (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       _startTimer
     _lcdClear
       _lcdInst
         _lcdNibble
     _pause
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _putch
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _stopServo

 _service (ROOT)
   _servoInterruptService
     i2_digitalRead
     i2_digitalWrite
     i2_startTimer
   i2_setAngle
     i2_angleToPulse
       i2___altoft
         i2___ftpack
       i2___awtoft
         i2___ftpack
       i2___ftadd
         i2___altoft (ARG)
           i2___ftpack
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftmul (ARG)
           i2___altoft (ARG)
             i2___ftpack
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftdiv (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftpack (ARG)
         i2___ftpack (ARG)
       i2___ftdiv
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
       i2___ftmul
         i2___altoft (ARG)
           i2___ftpack
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftpack (ARG)
       i2___fttol
         i2___altoft (ARG)
           i2___ftpack
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftadd (ARG)
           i2___altoft (ARG)
             i2___ftpack
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftdiv (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftmul (ARG)
             i2___altoft (ARG)
               i2___ftpack
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftdiv (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___ftpack (ARG)
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftmul (ARG)
           i2___altoft (ARG)
             i2___ftpack
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftdiv (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftpack (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     10      6D       7       42.6%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     80      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     75      77       1       94.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     164      34        0.0%
DATA                 0      0     164       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Mar 13 14:21:18 2017

                  ___altoft@exp 0090                   ___altoft@sign 0091                     _sortBattery 0E12  
                  ___awdiv@sign 008B                      i2___altoft 344A             ___wmul@multiplicand 0090  
                   __CFG_BORV$3 000000                      i2___awtoft 3806                      i2___ftpack 2F12  
                  __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000  
                  __CFG_CP3$OFF 000000                     __CFG_OSC$HS 000000                _redirectingServo 013B  
                  ___ftadd@exp1 00C5                    ___ftadd@exp2 00C4                    ___ftadd@sign 00C3  
                           l151 113A                             l136 0F88                             l128 2E5E  
                           l233 396C                             l149 1082                             l270 3912  
                           l334 299E                             l432 36F2                             l441 358A  
                           l442 3596                             l267 3904                             l358 3794  
                           l439 357E                             l709 0544                             l681 06C4  
               ??_showInterface 00FB                             l950 1CE4                             l982 259E  
                  __CFG_CPB$OFF 000000                             _PEN 007E2A                    __CFG_CPD$OFF 000000  
                           _SEN 007E28                             _pin 0110                    ___awmod@sign 0085  
                           wreg 000FE8                    __CFG_LVP$OFF 000000                    ___ftdiv@cntr 009B  
                  ___ftdiv@sign 00A0                    __CFG_WDT$OFF 000000                            l1011 14B2  
                          l1020 1588                            l1005 1450                            l1040 20D0  
                          l1009 148A                            l1124 2D9C                            l1029 15B2  
                          l1134 3234                            l1054 1B5C                            l1047 1A98  
                          l1048 1ADC                            l1079 38C8                            l4000 0D26  
                          l4100 1C62                            l4022 1A44                            l4006 0DEC  
                          l4112 1C9A                            l4016 1A0A                            l4130 35EE  
                          l4122 1CCA                            l5002 25D2                            l4124 1CDA  
                          l4116 1CAE                            l4052 1B12                            l5020 2618  
                          l5004 25D6                            l4142 2BEC                            l4062 1B42  
                          l4310 02A2                            l4302 022E                            l5006 25E0  
                          l4072 1B94                            l4064 1B52                            l4056 1B26  
                          l4312 02B8                            l5032 2652                            l5016 260A  
                          l5008 25E4                            l5120 108A                            l4138 2BAC  
                          l4162 2D20                            l4410 073A                            l4322 0330  
                          l4306 025C                            l4250 0044                            l5050 269A  
                          l4148 2C30                            l3604 25C4                            l4164 2D30  
                          l4092 1C0E                            l4412 0740                            l4332 038E  
                          l4308 0272                            l4252 004A                            l4244 0022  
                          l5036 265C                            l5060 26C0                            l5108 1046  
                          l4174 2D8A                            l4166 2D36                            l4190 3222  
                          l4182 31C8                            l4078 1BBA                            l4406 0710  
                          l4350 0440                            l4318 0302                            l4254 0050  
                          l4262 0074                            l5054 26AA                            l5046 268A  
                          l5038 2664                            l3640 145E                            l4184 31D8  
                          l4424 0786                            l4440 07D2                            l4360 04F6  
                          l4336 03F4                            l4264 00B2                            l4248 0038  
                          l3624 313A                            l4186 31DE                            l3810 2C66  
                          l4450 089E                            l4426 078C                            l4442 07E4  
                          l4362 0504                            l4354 0468                            l4338 03FA  
                          l4258 0068                            l5058 26B4                            l3626 314A  
                          l3714 202E                            l4506 35A2                            l3580 24F4  
                          l3652 14A8                            l4196 335E                            l3820 2C96  
                          l3804 2C50                            l4460 092E                            l4372 0548  
                          l3708 1FF4                            l3590 2582                            l3582 2502  
                          l3670 1526                            l3662 14EA                            l3646 1498  
                          l4198 336E                            l4446 080A                            l4390 06A8  
                          l4382 05BE                            l4366 0512                            l4294 01BE  
                          l4278 010C                            l4462 0944                            l3734 208E  
                          l3592 2590                            l3584 2532                            l3576 24E0  
                          l3680 156E                            l3672 1534                            l3912 21D2  
                          l3816 2C84                            l3832 2CD4                            l3760 1ED0  
                          l4448 081A                            l4456 0914                            l4368 0526  
                          l4800 2B20                            l5192 2E42                            l3682 157C  
                          l3674 1540                            l3930 2238                            l3922 2202  
                          l3818 2C90                            l3754 1E96                            l4458 0926  
                          l4394 06B6                            l4378 056C                            l4482 36BA  
                          l3588 2552                            l3668 1518                            l3924 2212  
                          l3916 21E6                            l3836 2CE8                            l3828 2CC6  
                          l3860 30BE                            l3852 3098                            l4388 069A  
                          l4820 28C0                            l4804 2B34                            l4476 36B0  
                          l4492 36CA                            l3598 25A8                            l3926 221C  
                          l3774 1F1E                            l4806 2B3C                            l4486 36C2  
                          l3688 15DC                            l3872 3104                            l3864 30E2  
                          l3856 30AC                            l3848 3088                            l3784 1F5C  
                          l3960 12BC                            l4832 2944                            l4824 28EC  
                          l3698 162A                            l3858 30B8                            l3778 1F3C  
                          l4762 3666                            l3868 30F0                            l3788 1F7A  
                          l4828 2918                            l3884 375E                            l4764 366C  
                          l4772 367E                            l3894 2140                            l3982 0AD6  
                          l4838 2970                            l4782 2ACC                            l4766 3672  
                          l3968 13A0                            l3992 0BC2                            l4792 2AFC  
                          l4768 3678                            l4794 2B04                            l4786 2AE0  
                          l3988 0B9C                            l4788 2AE8                            l4798 2B18  
                          _EEIF 007D0C                            STR_1 FFF6                            STR_2 FEAD  
                          STR_3 FFD7                            STR_4 FF2E                            STR_5 FE99  
                          STR_6 FFB7                            STR_7 FFC8                            STR_8 FE81  
                          STR_9 FFEE                            _LATA 000F89                            _LATB 000F8A  
                          u3111 200A                            _LATC 000F8B                            _LATD 000F8C  
                          _LATE 000F8D                            u3141 1E72                            u3161 1EAC  
                          u4050 053C                            u3331 211C                            u3091 1FD0  
                          u3350 2166                            u3511 1A20                            u3355 215C  
                  printf@tmpval 00EE                            u3491 19E6                            _PEIE 007F96  
                          u5407 3936                            u5417 394C                            u2881 13FE  
                          u4714 28D4                            u5427 33F2                            u2891 141C  
                          u4715 28CE                            u4724 2900                            _RCEN 007E2B  
                          u5437 3400                            u4725 28FA                            u4734 292C  
                          u4654 2AAA                            u5447 3430                            u4735 2926  
                          u4655 2AA2                            u5367 0F92                            u4744 2958  
                          u5457 343E                            u5377 3970                            u4745 2952  
                          u3890 0152                            u5387 3700                            u5397 3736  
                          u3895 0146                            _RSEN 007E29                            _main 2DAE  
                  ___ftpack@arg 0080                    i2___altoft@c 0009                            _keys FE69  
                  ___ftpack@exp 0083                            _port 0118                            fsr0h 000FEA  
                          fsr1h 000FE2                            fsr2h 000FDA                            fsr0l 000FE9  
                          indf2 000FDF                            fsr1l 000FE1                            fsr2l 000FD9  
                          btemp 0078                    i2___ftadd@f1 002B                    i2___ftadd@f2 002E  
                          prodh 000FF4                            prodl 000FF3                            start 000E  
                    i2_setAngle 34C2                   __CFG_IESO$OFF 000000                    i2___ftdiv@f1 000D  
                  i2___ftdiv@f2 0010                    i2___ftdiv@f3 0017                    i2___awtoft@c 0009  
                 __CFG_MCLRE$ON 000000                    ___ftmul@cntr 00AE                    i2___ftmul@f1 001C  
                  i2___ftmul@f2 001F                    ___param_bank 000000                    ___ftmul@sign 00AF  
                  i2___fttol@f1 0037                    ___fttol@exp1 00D4                    ___fttol@lval 00D0  
          __end_ofi2_startTimer 3664            __end_of_angleToPulse 1E5C                           ?_main 0001  
                         _ACKEN 007E2C                           _ACKDT 007E2D                 __end_of___awdiv 2CF2  
                         _EEADR 000FA9                 __end_of___ftadd 1650                           STR_10 FFE5  
                         STR_11 FEE6                           STR_12 FFA6                           STR_20 FF51  
                         STR_21 FF1C                           STR_13 FED4                           STR_22 FF95  
                         STR_14 FF73                           STR_23 FF40                           STR_15 FEF8  
                         STR_16 FF62                           STR_17 FEC1                           STR_18 FF84  
                         STR_19 FF0A                 __end_of___awmod 310E                 __end_of___ftdiv 2106  
       ??_servoInterruptService 000A                 __end_of___ftneg 38D6                 __end_of___lldiv 2DAE  
               __end_of___ftmul 1FBA                           _T0CON 000FD5                 ___awdiv@divisor 0088  
                         _T1CON 000FCD                 __end_of___llmod 3246                 __end_of___ftsub 3618  
               __end_of___fttol 224A                           _T2CON 000FCA                           _T3CON 000FB1  
                         i2l209 248A                           i2l334 2F0C                           i2l441 3626  
                         i2l442 3632                           i2l439 361A                           i2l581 17DE  
                         i2l582 17E2                           i2l583 17E6                           i2l584 1822  
                         i2l579 17DA                 ___awdiv@counter 008A                           i2l982 2FA0  
                         _TMR0H 000FD7                           _TMR1H 000FCF                           _TMR0L 000FD6  
                         _TMR3H 000FB3                           _TMR1L 000FCE                           _TMR3L 000FB2  
                         _PORTA 000F80                           _PORTB 000F81                           _PORTC 000F82  
                         _PORTD 000F83                           _TRISA 000F92                           _TRISB 000F93  
                         _TRISC 000F94                           _TRISD 000F95                           _TRISE 000F96  
                 __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000  
                 __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000                    ___lltoft@exp 0090  
                 _conveyorServo 012F                 __end_of_lcdInst 3958                  __CFG_EBTR0$OFF 000000  
                __CFG_FCMEN$OFF 000000          servoInterruptService@i 0014                  __CFG_EBTR1$OFF 000000  
                __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000                   __CFG_WRTB$OFF 000000  
                 __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000                 __end_of_initLCD 3742  
                __CFG_EBTRB$OFF 000000                   ___awtoft@sign 008B                 __end_of_dpowers FDFB  
                         _scale 0964                           _pause 3A3E                   ___ftpack@sign 0084  
                         _pulse 0100                           _putch 3958                           pclath 000FFA  
                         tablat 000FF5                 __end_of_service 24C6                 __end_of_runMenu 38A6  
               __end_of_runTime 39A6                           status 000FD8                   i2___ftdiv@exp 001A  
            __size_ofi2___ftadd 01AC                  __CFG_PBADEN$ON 000000              __size_ofi2___ftdiv 00E6  
            __size_ofi2___ftmul 00F4              __size_ofi2___fttol 00F4            __end_of_digitalWrite 2B6C  
               __initialization 352A                    __end_of_main 2E60                    __end_of_keys FE7A  
                 i2___ftmul@exp 0025                     ?i2___altoft 0009                     ?i2___awtoft 0009  
                   ?i2___ftpack 0001                          ??_main 0100                   ___fttol@sign1 00CF  
                 __activetblptr 000002            __size_of_digitalRead 00E8            __size_of__tdiv_to_l_ 019E  
                        _ADCON0 000FC2                          _ADCON1 000FC1                          _ADCON2 000FC0  
              __end_of___altoft 31AC                ___llmod@dividend 008D                          ?_scale 00B0  
                        _ADRESH 000FC4                          _EEADRH 000FAA                          _ADRESL 000FC3  
                        _EEDATA 000FA8                          ?_pause 00FA                          _EECON1 000FA6  
                        _EECON2 000FA7                ___awdiv@dividend 0086                __end_of___awtoft 3786  
                        ?_putch 0001                __end_of___ftpack 25D2                __end_of___lltoft 33D2  
                        _INT0IE 007F94                          _INT0IF 007F91                          _INT1IF 007F80  
                  sortBattery@V 016A                          i2l1020 1942                          i2l1005 1868  
                        i2l1040 2A5A                          i2l1009 1892                          i2l1029 195E  
                        i2l4220 2F6E                          i2l4212 2F30                          i2l4222 2F8C  
                        i2l4214 2F3A                          i2l4224 2F96                          i2l4216 2F58  
                        i2l4208 2F22                          i2l5220 241A                          i2l5150 175C  
                        i2l5142 16A4                          i2l5206 23D8                          i2l5232 246E  
                        i2l5224 2436                          i2l5216 2400                          i2l5154 17EA  
                        i2l4522 346C                          i2l5156 1814                          i2l4524 3478  
                        i2l5228 2452                          i2l4550 1876                          i2l4608 19AA  
                        i2l4624 29F6                          i2l4712 2702                          i2l4538 381A  
                        i2l4618 29CE                          i2l4730 2768                          i2l4900 2EA2  
                        i2l4580 18FC                          i2l4572 18D0                          i2l4556 18A0  
                        i2l4644 2A34                          i2l4740 2790                          i2l4910 2EE2  
                        i2l4590 1930                          i2l4582 1906                          i2l4670 281A  
                        i2l4742 279C                          i2l4734 2778                          i2l4904 2EC2  
                        i2l4920 2FF0                          i2l4592 193A                          i2l4584 190E  
                        i2l4664 27F2                          i2l4744 27A2                          i2l4930 3012  
                        i2l4578 18F2                          i2l4932 3018                          i2l4924 2FFE  
                        i2l4684 284C                          i2l4748 27B8                          i2l4942 303A  
                        i2l4926 3004                          i2l4598 197A                          i2l4694 2874  
                        i2l4936 3026                          i2l4944 3040                          i2l4688 285C  
                        i2l4938 302C                          i2l4698 2884                          i2l4892 2E62  
                        i2l4958 363E                          i2l4896 2E82                          u425_41 1834  
                        u426_41 1848                          u451_41 27DA                          u453_41 2802  
                        u446_41 29B6                          u448_41 29DE                          u457_41 26E6  
                        _TMR0IE 007F95                          _TMR0IF 007F92                          _TMR1IE 007CE8  
                        _TMR1IF 007CF0                          _TMR2IF 007CF1                          _TMR3IE 007D01  
                        _TMR3IF 007D09                          _SSPADD 000FC8                          _TRISC3 007CA3  
                        _TRISC4 007CA4                          _SSPBUF 000FC9          __size_ofi2_digitalRead 00B2  
              __end_of_dateTime 3A3E                     ?i2_setAngle 005D                __end_of_lcdClear 3A64  
             _angleToPulse$1296 00E5                     initServo@pi 00FA                     initServo@po 00F8  
                __CFG_XINST$OFF 000000                __end_of__powers_ FE49                          ___ftge 2B6C  
              __end_of_mainMenu 3A18                          ___wmul 383E                       ??___awdiv 008A  
                     ??___ftadd 00C0                  __CFG_STVREN$ON 000000                       ??___awmod 0084  
                     ??___ftdiv 0098                       ??___ftneg 0083                       ??___lldiv 0088  
                     ??___ftmul 00A7                       ??___llmod 0095                       ??___ftsub 00CC  
                     ??___fttol 00CA                          _fround 113C                  i2___altoft@exp 0011  
                        clear_0 3568                ___awdiv@quotient 008C                 ___awmod@divisor 0082  
               ___awmod@counter 0084                       ??_lcdInst 0082                          _printf 0012  
              __end_of_pinSetup 3806                __end_of_setAngle 32DA               analogRead@channel 0080  
         ___ftmul@f3_as_product 00AB                       ??_initLCD 0084                    __pdataCOMRAM 0076  
             __end_ofi2___ftadd 19D0               __end_ofi2___ftdiv 2A8C                  i2___ftadd@exp1 0036  
                i2___ftadd@exp2 0035               __end_ofi2___ftmul 28BE                   setAngle@angle 00EE  
             __end_ofi2___fttol 27CA                  i2___ftadd@sign 0034                    __mediumconst FDD2  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
                 setAngle@timer 00EC                       ??_service 0067                       ??_runMenu 00FA  
              __end_of_runStats 39CC                       ??_runTime 00FA                  i2___ftdiv@cntr 0016  
                    __accesstop 0080         __end_of__initialization 356E                      ___altoft@c 0088  
           __size_ofi2___altoft 0078                  i2___ftdiv@sign 001B                      ___ftadd@f1 00BA  
                    ___ftadd@f2 00BD             __size_ofi2___awtoft 0038             __size_ofi2___ftpack 00AE  
                    ___ftge@ff1 0080                      ___ftge@ff2 0083                   ___rparam_used 000001  
                    ___ftdiv@f1 0092                      ___ftdiv@f2 0095                      ___ftdiv@f3 009C  
                    ___ftneg@f1 0080                      ___awtoft@c 0088                  i2___ftpack@arg 0001  
         __size_ofi2_startTimer 004C                  i2___ftpack@exp 0004                      ___ftmul@f1 00A1  
                    ___ftmul@f2 00A4                      ___ftsub@f1 00C6                      ___ftsub@f2 00C9  
                    ___fttol@f1 00C6            __end_of_happynewyear FE81                  __pcstackCOMRAM 0001  
         __size_of_angleToPulse 0166                    __pidataBANK1 38D6                      ___lltoft@c 0088  
                 _cylinderMotor 0145                  i2___ftmul@cntr 0029                   __end_of_scale 0E12  
                  ?_sortBattery 0001                   __end_of_pause 3A54                  i2___ftmul@sign 002A  
                 __end_of_putch 3980                  i2___fttol@exp1 0045                  i2___fttol@lval 0041  
                 i2_digitalRead 2E60              __size_of_lcdNibble 0078                      __div_to_l_ 1B6E  
              i2digitalRead@pin 0003             __size_ofi2_setAngle 0068                 __div_to_l_@exp1 008B  
               __div_to_l_@cntr 008A                         ??_scale 00B3                         ??_pause 00FC  
               __div_to_l_@quot 0086              i2digitalWrite@port 0001                         ??_putch 0084  
                  i2_startTimer 3618                      __pbssBANK1 0100                    _angleToPulse 1CF6  
         __size_of_digitalWrite 00E0              __size_of_initTimer 004A              __size_of_initServo 007C  
                    _analogRead 3786                   __div_to_l_@f1 0080                   __div_to_l_@f2 0083  
       __size_ofi2_angleToPulse 0140                         ?___ftge 0080                         ?___wmul 008E  
         sortBattery@resolution 0163                       ?___altoft 0088                         ?_fround 00B0  
                    _lcdNewline 3A54                       ?___awtoft 0088                       ?___ftpack 0080  
                ?i2_digitalRead 0001                         ?_printf 00D5                       ?___lltoft 0088  
    servoInterruptService@flags 000C  __size_of_servoInterruptService 01D4   __end_of_servoInterruptService 1824  
         __end_of_showInterface 26D6                       ?_dateTime 0001                  stopServo@timer 0080  
             i2startTimer@timer 0001                       ?_lcdClear 0001              __size_of_runSelect 0026  
              angleToPulse@a000 00E8                angleToPulse@a180 00E1                    _digitalWrite 2A8C  
                       _SSPCON1 000FC6                         _SSPCON2 000FC5                         _SSPSTAT 000FC7  
                     ?_mainMenu 0001         __size_ofi2_digitalWrite 00AC              __size_of_stopServo 004A  
                       _V_LIM_C 012A                       ?_pinSetup 0001                       ?_setAngle 00EC  
             __end_of_lcdNibble 344A               __end_of__npowers_ FE22                         __Hparam 0000  
                    _scale$1299 00B3                         __Lparam 0000                 __size_of___ftge 00C8  
                       ___awdiv 2C34                         ___ftadd 13E8                         ___awmod 306C  
                    _readKeypad 3904                         ___ftdiv 1FBA                         ___ftneg 38A6  
                       ___lldiv 2CF2                 __size_of___wmul 0036                         ___ftmul 1E5C  
                       ___llmod 31AC                         ___ftsub 35CC                         ___fttol 2106  
                     ?_runStats 0001                    ??i2___altoft 000D                      ??___altoft 008C  
                       __pcinit 352A                    ??i2___awtoft 000C                    ??i2___ftpack 0006  
                    ??___awtoft 008B                      ??___ftpack 0085                 __size_of_fround 02AC  
       i2___ftmul@f3_as_product 0026                         __ramtop 1000                         _lcdInst 392E  
                    ??___lltoft 008C                         __ptext0 2DAE                         __ptext1 0E12  
                       __ptext2 3664                         __ptext3 3A3E                         __ptext4 32DA  
                       __ptext5 357C                         __ptext6 3246                         __ptext7 1CF6  
                       __ptext8 1FBA                         __ptext9 3742                 __size_of_printf 0952  
                       _padPin1 0149                         _padPin2 014D                         _padPin3 0120  
                 startTimer@val 0082                         _initLCD 36F8               __end_of_hexpowers FE69  
                   ?__div_to_l_ 0080               __end_of_initTimer 36F8               __end_of_initServo 3356  
                       _dpowers FDD3                ___awmod@dividend 0080                      ??_dateTime 00FA  
               i2___altoft@sign 0012                      ??_lcdClear 0084                         _service 0008  
                       _runMenu 3874                         _runTime 3980                  __pintcode_body 238A  
          end_of_initialization 356E                      ??_mainMenu 00FA             i2angleToPulse@angle 0046  
                 __Lmediumconst FDD2                         int_func 238A              __end_ofi2___altoft 34C2  
                digitalRead@pin 0082                     ?_analogRead 0080              __end_ofi2___awtoft 383E  
            __end_ofi2___ftpack 2FC0                    ??i2_setAngle 0061                      ??_pinSetup 0080  
                    ??_setAngle 00F0                 ___lldiv@divisor 0084                 ___lldiv@counter 008C  
             __end_of_runSelect 39F2                         printf@c 00F9                         printf@f 00D5  
                       postdec1 000FE5                         postdec2 000FDD                         postinc0 000FEE  
                       postinc2 000FDE                      ??_runStats 00FA                 ??i2_digitalRead 0005  
                __tdiv_to_l_@f1 0080                  __tdiv_to_l_@f2 0083                   ??_digitalRead 0084  
                   ?_lcdNewline 0001                   ??__tdiv_to_l_ 0086               __end_of_stopServo 36AE  
                     _PORTBbits 000F81            __size_of_sortBattery 032A                showInterface@key 00FB  
            __end_ofi2_setAngle 352A             _redirectAngle_OTHER 015B                    _happynewyear FE7A  
            angleToPulse@offset 00DD              sortBattery@V_float 015D                       i2___ftadd 1824  
                     i2___ftdiv 29A6                       i2___ftmul 27CA                       i2___fttol 26D6  
                    _startTimer 357C                     ___ftdiv@exp 009F                 i2___awtoft@sign 000C  
               i2___ftpack@sign 0005             __size_of__div_to_l_ 0188                  i2_angleToPulse 224A  
                    _switchFlag 012D                     ___ftmul@exp 00AA                     ?_readKeypad 0001  
                __end_of___ftge 2C34                  __end_of___wmul 3874                   __pidataCOMRAM 3A64  
                __end_of_fround 13E8                  __end_of_printf 0964             __size_of_analogRead 0042  
           start_initialization 352A             __end_of_digitalRead 29A6             __end_of__tdiv_to_l_ 1B6E  
                initServo@angle 00FC                  initTimer@timer 0080                 i2___fttol@sign1 0040  
                initServo@timer 00F6                      ?i2___ftadd 002B                      ?i2___ftdiv 000D  
                    ?i2___ftmul 001C                      ?i2___fttol 0037                  i2_digitalWrite 2FC0  
             i2digitalRead@port 0001             __size_of_lcdNewline 0008          __end_ofi2_angleToPulse 238A  
               ___llmod@divisor 0091                 ___llmod@counter 0095                        ??___ftge 0086  
                      ??___wmul 0092                     __pdataBANK1 012F                    pause@message 00FA  
              __CFG_LPT1OSC$OFF 000000                        ??_fround 00B3                        ??_printf 00DC  
             __size_of___altoft 009E                      fround@prec 00B9               __size_of___awtoft 0044  
             __size_of___ftpack 010C               __size_of___lltoft 007C                   __pcstackBANK0 0080  
                 __pcstackBANK1 015D          __end_ofi2_digitalWrite 306C          sortBattery@targetAngle 0166  
             __size_of_dateTime 0026                     ?_startTimer 0080               __size_of_lcdClear 0008  
           __size_of_readKeypad 002A                 i2setAngle@angle 005F                 i2setAngle@timer 005D  
             __size_of_mainMenu 0026               i2digitalWrite@pin 0003               i2digitalWrite@val 0005  
               ?i2_angleToPulse 0046               __CFG_CCP2MX$PORTC 000000               __size_of_pinSetup 003E  
             __size_of_setAngle 0094                       __pintcode 0008                   __pmediumconst FDD2  
                     _lcdNibble 33D2                        ?___awdiv 0086                        ?___ftadd 00BA  
                      ?___awmod 0080                        ?___ftdiv 0092                        ?___ftneg 0080  
                      ?___lldiv 0080                        ?___ftmul 00A1                        ?___llmod 008D  
                      ?___ftsub 00C6                       __npowers_ FDFB                        ?___fttol 00C6  
                   _digitalRead 28BE                        ?_lcdInst 0001                     __tdiv_to_l_ 19D0  
             __size_of_runStats 0026                    ??__div_to_l_ 0086                        ?_initLCD 0001  
               startTimer@timer 0080                        ?_service 0001                       _hexpowers FE49  
                      ?_runMenu 0001                       _initTimer 36AE                       _initServo 32DA  
                      ?_runTime 0001                 ?i2_digitalWrite 0001           _servoInterruptService 1650  
                   ??i2___ftadd 0031                     ??i2___ftdiv 0013                     ??i2___ftmul 0022  
                __size_of_scale 04AE                     ??i2___fttol 003B                  __size_of_pause 0016  
                __size_of_putch 0028                        _AA_float 0141              i2angleToPulse@a000 0059  
            i2angleToPulse@a180 0052                  sortBattery@Vcc 0160                  ___wmul@product 0092  
                      _LATDbits 000F8C                    ??_analogRead 0084                        i2u510_40 1658  
                      i2u511_40 165A                        i2u512_40 1666                        i2u513_40 1668  
            __end_of__div_to_l_ 1CF6                        i2u514_40 1674                        i2u515_40 1676  
                      i2u516_40 1682                        i2u517_40 1684                        i2u518_40 16A2  
                      i2u480_44 2FD6                        i2u480_45 2FD0                        i2u459_40 2720  
                      i2u459_45 2718                        i2u476_44 2E72                        i2u476_45 2E6E  
                      i2u477_44 2E92                        i2u477_45 2E8E                        i2u478_44 2EB2  
                      i2u478_45 2EAE                        i2u479_44 2ED2                        i2u479_45 2ECE  
        __size_of_showInterface 0104                __CFG_WDTPS$32768 000000                      ?_lcdNibble 0001  
                _padAngle_CLOSE 0151                      service@key 0075                    ??_lcdNewline 0084  
           __size_of_startTimer 0050                       _runSelect 39CC               angleToPulse@angle 00D5  
             ___wmul@multiplier 008E                   lcdNibble@data 0081                      printf@flag 00E8  
                 lcdNibble@temp 0080                      printf@fval 00F6                      printf@prec 00EA  
                     _stopServo 3664              __end_of_analogRead 37C8                        _V_LIM_AA 0127  
                      _V_LIM_9V 0124                      runMenu@key 00FA                      ?_initTimer 0080  
                    ?_initServo 00F6               sortBattery@signal 0168                       copy_data0 353E  
            __end_of_lcdNewline 3A5C                   readKeypad@key 0080                        __Hrparam 0000  
                      __Lrparam 0000              __CFG_BOREN$SBORDIS 000000                    ??_readKeypad 0080  
                 ??_sortBattery 00FE                __size_of___awdiv 00BE                __size_of___ftadd 0268  
              __size_of___awmod 00A2                __size_of___ftdiv 014C                __size_of___ftneg 0030  
              __size_of___lldiv 00BC                        ___altoft 310E                __size_of___ftmul 015E  
              __size_of___llmod 009A                __size_of___ftsub 004C                __size_of___fttol 0144  
                    ?_runSelect 0001                        ___awtoft 3742                        ___ftpack 24C6  
         __end_ofi2_digitalRead 2F12                     _fround$1297 00B6                     _fround$1298 00B3  
                      ___lltoft 3356                __size_of_lcdInst 002A                __size_of_initLCD 004A  
                      _dateTime 3A18                      ?_stopServo 0080          ?_servoInterruptService 0001  
                 _showInterface 25D2                        _lcdClear 3A5C                        __ptext10 310E  
                      __ptext11 36AE                        __ptext20 3904                        __ptext12 2A8C  
                      __ptext21 39F2                        __ptext13 28BE                        __ptext30 306C  
                      __ptext22 3A18                        __ptext14 3786                        __ptext31 2C34  
                      __ptext23 0012                        __ptext15 25D2                        __ptext40 24C6  
                      __ptext32 19D0                        __ptext24 0964                        __ptext16 3980  
                      __ptext41 38A6                        __ptext33 1B6E                        __ptext25 3958  
                      __ptext17 39A6                        __ptext50 224A                        __ptext42 2B6C  
                      __ptext34 3356                        __ptext26 3A54                        __ptext18 39CC  
                      __ptext51 26D6                        __ptext43 3A5C                        __ptext35 31AC  
                      __ptext27 113C                        __ptext19 3874                        __ptext60 2FC0  
                      __ptext52 27CA                        __ptext44 37C8                        __ptext36 2CF2  
                      __ptext28 383E                        __ptext61 2E60                        __ptext53 29A6  
                      __ptext45 36F8                        __ptext37 2106                        __ptext29 1E5C  
                      __ptext54 1824                        __ptext46 392E                        __ptext38 35CC  
                      __ptext55 3806                        __ptext47 33D2                        __ptext39 13E8  
                      __ptext56 344A                        __ptext57 2F12                        __ptext49 34C2  
                      __ptext58 1650                        __ptext59 3618                        __powers_ FE22  
              __size_of_service 24BE                __size_of_runMenu 0032                 i2startTimer@val 0003  
              __size_of_runTime 0026                   ?i2_startTimer 0001                        _mainMenu 39F2  
                      _padServo 0135              __end_of_readKeypad 392E                   ?_angleToPulse 00D5  
                 __size_of_main 00B2                        _pinSetup 37C8                        _setAngle 3246  
                   ??_lcdNibble 0080                   _padAngle_OPEN 0155                        int$flags 0078  
                      _runStats 39A6                       printf@idx 00E5                       printf@exp 00EC  
                     printf@val 00F2                       putch@data 0084             i2_angleToPulse$1392 0056  
           __end_of_sortBattery 113C                      _INTCONbits 000FF2                  ?_showInterface 0001  
                 ?_digitalWrite 0080                     ??_initTimer 0082                     ??_initServo 00FE  
          i2angleToPulse@offset 004E                        scale@scl 00B6                  ??i2_startTimer 0007  
              ??i2_angleToPulse 004A                    ??_startTimer 0086                 digitalRead@port 0080  
                      intlevel2 0000                __tdiv_to_l_@exp1 008E                __tdiv_to_l_@cntr 008D  
                ??_angleToPulse 00D9                __tdiv_to_l_@quot 0089                ___lldiv@dividend 0080  
              _redirectAngle_AA 0159                _redirectAngle_9V 0157                        printf@ap 00E6  
                   lcdInst@data 0083                    ?_digitalRead 0080                     ??_runSelect 00FA  
                  ?__tdiv_to_l_ 0080              __end_of_startTimer 35CC                     _printf$1300 00E2  
              ??i2_digitalWrite 0007                digitalWrite@port 0080                ___lldiv@quotient 0088  
                   ??_stopServo 0082                  ??_digitalWrite 0086                 _redirectAngle_C 0076  
              _padAngle_NEUTRAL 0153                 digitalWrite@pin 0082                 digitalWrite@val 0084  
