

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Feb 20 22:54:52 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18  0000                     
    19                           ; Version 1.40
    20                           ; Generated 01/12/2016 GMT
    21                           ; 
    22                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC18F4620 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     
    54                           	psect	smallconst
    55  001000                     __psmallconst:
    56                           	opt stack 0
    57  001000  00                 	db	0
    58  001001  31                 	db	49
    59  001002  32                 	db	50
    60  001003  33                 	db	51
    61  001004  41                 	db	65
    62  001005  34                 	db	52
    63  001006  35                 	db	53
    64  001007  36                 	db	54
    65  001008  42                 	db	66
    66  001009  37                 	db	55
    67  00100A  38                 	db	56
    68  00100B  39                 	db	57
    69  00100C  43                 	db	67
    70  00100D  2A                 	db	42
    71  00100E  30                 	db	48
    72  00100F  23                 	db	35
    73  001010  44                 	db	68
    74  001011  00                 	db	0
    75  001012                     __end_of_keys:
    76                           	opt stack 0
    77  0000                     _ADCON0	set	4034
    78  0000                     _ADCON1	set	4033
    79  0000                     _LATB	set	3978
    80  0000                     _LATD	set	3980
    81  0000                     _LATDbits	set	3980
    82  0000                     _PORTB	set	3969
    83  0000                     _PORTBbits	set	3969
    84  0000                     _TRISA	set	3986
    85  0000                     _TRISB	set	3987
    86  0000                     _TRISC	set	3988
    87  0000                     _TRISD	set	3989
    88  001012                     STR_2:
    89  001012  30                 	db	48	;'0'
    90  001013  00                 	db	0
    91  001014                     STR_1:
    92  001014  31                 	db	49	;'1'
    93  001015  00                 	db	0
    94                           
    95                           ; #config settings
    96  001016  00                 	db	0	; dummy byte at the end
    97  0000                     
    98                           	psect	cinit
    99  00123A                     __pcinit:
   100                           	opt stack 0
   101  00123A                     start_initialization:
   102                           	opt stack 0
   103  00123A                     __initialization:
   104                           	opt stack 0
   105  00123A                     end_of_initialization:
   106                           	opt stack 0
   107  00123A                     __end_of__initialization:
   108                           	opt stack 0
   109  00123A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   110  00123C  6EF8               	movwf	tblptru,c
   111  00123E  0100               	movlb	0
   112  001240  EF62  F008         	goto	_main	;jump to C main() function
   113                           tblptru	equ	0xFF8
   114                           
   115                           	psect	cstackCOMRAM
   116  000001                     __pcstackCOMRAM:
   117                           	opt stack 0
   118  000001                     lcdNibble@temp:
   119                           	opt stack 0
   120  000001                     pinMode@port:
   121                           	opt stack 0
   122                           
   123                           ; 2 bytes @ 0x0
   124  000001                     	ds	1
   125  000002                     lcdNibble@data:
   126                           	opt stack 0
   127                           
   128                           ; 1 bytes @ 0x1
   129  000002                     	ds	1
   130  000003                     ??_lcdInst:
   131  000003                     pinMode@pin:
   132                           	opt stack 0
   133                           
   134                           ; 2 bytes @ 0x2
   135  000003                     	ds	1
   136  000004                     lcdInst@data:
   137                           	opt stack 0
   138                           
   139                           ; 1 bytes @ 0x3
   140  000004                     	ds	1
   141  000005                     ??_initLCD:
   142  000005                     putch@data:
   143                           	opt stack 0
   144  000005                     pinMode@type:
   145                           	opt stack 0
   146                           
   147                           ; 2 bytes @ 0x4
   148  000005                     	ds	1
   149  000006                     ?_printf:
   150                           	opt stack 0
   151  000006                     printf@f:
   152                           	opt stack 0
   153                           
   154                           ; 2 bytes @ 0x5
   155  000006                     	ds	1
   156  000007                     ??_pinMode:
   157                           
   158                           ; 1 bytes @ 0x6
   159  000007                     	ds	1
   160  000008                     printf@ap:
   161                           	opt stack 0
   162                           
   163                           ; 2 bytes @ 0x7
   164  000008                     	ds	2
   165  00000A                     printf@c:
   166                           	opt stack 0
   167                           
   168                           ; 1 bytes @ 0x9
   169  00000A                     	ds	1
   170  00000B                     main@a:
   171                           	opt stack 0
   172                           
   173                           ; 2 bytes @ 0xA
   174  00000B                     	ds	2
   175                           tblptru	equ	0xFF8
   176                           
   177 ;;
   178 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   179 ;;
   180 ;; *************** function _main *****************
   181 ;; Defined at:
   182 ;;		line 20 in file "main.c"
   183 ;; Parameters:    Size  Location     Type
   184 ;;		None
   185 ;; Auto vars:     Size  Location     Type
   186 ;;  a               2   10[COMRAM] int 
   187 ;; Return value:  Size  Location     Type
   188 ;;                  1    wreg      void 
   189 ;; Registers used:
   190 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   191 ;; Tracked objects:
   192 ;;		On entry : 0/0
   193 ;;		On exit  : 0/0
   194 ;;		Unchanged: 0/0
   195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   197 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   199 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   200 ;;Total ram usage:        2 bytes
   201 ;; Hardware stack levels required when called:    5
   202 ;; This function calls:
   203 ;;		_initLCD
   204 ;;		_pinMode
   205 ;;		_printf
   206 ;; This function is called by:
   207 ;;		Startup code after reset
   208 ;; This function uses a non-reentrant model
   209 ;;
   210                           
   211                           	psect	text0
   212  0010C4                     __ptext0:
   213                           	opt stack 0
   214  0010C4                     _main:
   215                           	opt stack 26
   216                           
   217                           ;main.c: 22: initLCD();
   218                           
   219                           ;incstack = 0
   220  0010C4  ECC1  F008         	call	_initLCD	;wreg free
   221                           
   222                           ;main.c: 23: TRISA=0;
   223  0010C8  0E00               	movlw	0
   224  0010CA  6E92               	movwf	3986,c	;volatile
   225                           
   226                           ;main.c: 24: pinMode(0,1,0);
   227  0010CC  0E00               	movlw	0
   228  0010CE  6E02               	movwf	pinMode@port+1,c
   229  0010D0  0E00               	movlw	0
   230  0010D2  6E01               	movwf	pinMode@port,c
   231  0010D4  0E00               	movlw	0
   232  0010D6  6E04               	movwf	pinMode@pin+1,c
   233  0010D8  0E01               	movlw	1
   234  0010DA  6E03               	movwf	pinMode@pin,c
   235  0010DC  0E00               	movlw	0
   236  0010DE  6E06               	movwf	pinMode@type+1,c
   237  0010E0  0E00               	movlw	0
   238  0010E2  6E05               	movwf	pinMode@type,c
   239  0010E4  EC0C  F008         	call	_pinMode	;wreg free
   240                           
   241                           ;main.c: 25: for(int a = 1<<8; a > 0; a>>=1){
   242  0010E8  0E01               	movlw	1
   243  0010EA  6E0C               	movwf	main@a+1,c
   244  0010EC  0E00               	movlw	0
   245  0010EE  6E0B               	movwf	main@a,c
   246  0010F0                     l914:
   247  0010F0  BE0C               	btfsc	main@a+1,7,c
   248  0010F2  D01B               	goto	l16
   249  0010F4  500C               	movf	main@a+1,w,c
   250  0010F6  E103               	bnz	l918
   251  0010F8  040B               	decf	main@a,w,c
   252  0010FA  A0D8               	btfss	status,0,c
   253  0010FC  D016               	goto	l16
   254  0010FE                     l918:
   255                           
   256                           ;main.c: 26: if(a&TRISA)printf("1");
   257  0010FE  5092               	movf	3986,w,c	;volatile
   258  001100  140B               	andwf	main@a,w,c
   259  001102  0900               	iorlw	0
   260  001104  B4D8               	btfsc	status,2,c
   261  001106  D007               	goto	l922
   262  001108  0E14               	movlw	low STR_1
   263  00110A  6E06               	movwf	printf@f,c
   264  00110C  0E10               	movlw	high STR_1
   265  00110E  6E07               	movwf	printf@f+1,c
   266  001110  ECE6  F008         	call	_printf	;wreg free
   267  001114  D006               	goto	l924
   268  001116                     l922:
   269                           
   270                           ;main.c: 27: else printf("0");
   271  001116  0E12               	movlw	low STR_2
   272  001118  6E06               	movwf	printf@f,c
   273  00111A  0E10               	movlw	high STR_2
   274  00111C  6E07               	movwf	printf@f+1,c
   275  00111E  ECE6  F008         	call	_printf	;wreg free
   276  001122                     l924:
   277  001122  340C               	rlcf	main@a+1,w,c
   278  001124  320C               	rrcf	main@a+1,f,c
   279  001126  320B               	rrcf	main@a,f,c
   280  001128  D7E3               	goto	l914
   281  00112A                     l15:
   282  00112A                     l16:
   283  00112A  D7FF               	goto	l15
   284  00112C                     __end_of_main:
   285                           	opt stack 0
   286                           tblptru	equ	0xFF8
   287                           status	equ	0xFD8
   288                           
   289 ;; *************** function _printf *****************
   290 ;; Defined at:
   291 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
   292 ;; Parameters:    Size  Location     Type
   293 ;;  f               2    5[COMRAM] PTR const unsigned char 
   294 ;;		 -> STR_2(2), STR_1(2), 
   295 ;; Auto vars:     Size  Location     Type
   296 ;;  tmpval          4    0        struct .
   297 ;;  cp              3    0        PTR const unsigned char 
   298 ;;  ap              2    7[COMRAM] PTR void [1]
   299 ;;		 -> ?_printf(2), 
   300 ;;  len             2    0        unsigned int 
   301 ;;  val             2    0        unsigned int 
   302 ;;  c               1    9[COMRAM] char 
   303 ;;  flag            1    0        unsigned char 
   304 ;;  prec            1    0        char 
   305 ;; Return value:  Size  Location     Type
   306 ;;                  2    5[COMRAM] int 
   307 ;; Registers used:
   308 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   309 ;; Tracked objects:
   310 ;;		On entry : 0/0
   311 ;;		On exit  : 0/0
   312 ;;		Unchanged: 0/0
   313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   314 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   315 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   317 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   318 ;;Total ram usage:        5 bytes
   319 ;; Hardware stack levels used:    1
   320 ;; Hardware stack levels required when called:    4
   321 ;; This function calls:
   322 ;;		_putch
   323 ;; This function is called by:
   324 ;;		_main
   325 ;; This function uses a non-reentrant model
   326 ;;
   327                           
   328                           	psect	text1
   329  0011CC                     __ptext1:
   330                           	opt stack 0
   331  0011CC                     _printf:
   332                           	opt stack 26
   333                           
   334                           ;doprnt.c: 466: va_list ap;
   335                           ;doprnt.c: 499: signed char c;
   336                           ;doprnt.c: 506: signed char prec;
   337                           ;doprnt.c: 508: unsigned char flag;
   338                           ;doprnt.c: 523: union {
   339                           ;doprnt.c: 524: unsigned long vd;
   340                           ;doprnt.c: 525: double integ;
   341                           ;doprnt.c: 526: } tmpval;
   342                           ;doprnt.c: 528: unsigned int val;
   343                           ;doprnt.c: 529: unsigned len;
   344                           ;doprnt.c: 530: const char * cp;
   345                           ;doprnt.c: 533: *ap = __va_start();
   346                           
   347                           ;incstack = 0
   348  0011CC  0E08               	movlw	low (?_printf+2)
   349  0011CE  6E08               	movwf	printf@ap,c
   350  0011D0  0E00               	movlw	high (?_printf+2)
   351  0011D2  6E09               	movwf	printf@ap+1,c
   352                           
   353                           ;doprnt.c: 536: while(c = *f++) {
   354  0011D4  D003               	goto	l906
   355  0011D6                     l904:
   356                           
   357                           ;doprnt.c: 540: {
   358                           ;doprnt.c: 541: (putch(c) );
   359  0011D6  500A               	movf	printf@c,w,c
   360  0011D8  ECFB  F008         	call	_putch
   361  0011DC                     l906:
   362  0011DC  C006  FFF6         	movff	printf@f,tblptrl
   363  0011E0  C007  FFF7         	movff	printf@f+1,tblptrh
   364  0011E4  4A06               	infsnz	printf@f,f,c
   365  0011E6  2A07               	incf	printf@f+1,f,c
   366  0011E8                     	if	0	;tblptru may be non-zero
   367  0011E8                     	endif
   368  0011E8                     	if	0	;tblptru may be non-zero
   369  0011E8                     	endif
   370  0011E8  0008               	tblrd		*
   371  0011EA  CFF5 F00A          	movff	tablat,printf@c
   372  0011EE  500A               	movf	printf@c,w,c
   373  0011F0  B4D8               	btfsc	status,2,c
   374  0011F2  0012               	return	
   375  0011F4  D7F0               	goto	l904
   376  0011F6                     __end_of_printf:
   377                           	opt stack 0
   378                           tblptru	equ	0xFF8
   379                           tblptrh	equ	0xFF7
   380                           tblptrl	equ	0xFF6
   381                           tablat	equ	0xFF5
   382                           status	equ	0xFD8
   383                           
   384 ;; *************** function _putch *****************
   385 ;; Defined at:
   386 ;;		line 37 in file "lcd.c"
   387 ;; Parameters:    Size  Location     Type
   388 ;;  data            1    wreg     unsigned char 
   389 ;; Auto vars:     Size  Location     Type
   390 ;;  data            1    4[COMRAM] unsigned char 
   391 ;; Return value:  Size  Location     Type
   392 ;;                  1    wreg      void 
   393 ;; Registers used:
   394 ;;		wreg, status,2, status,0, cstack
   395 ;; Tracked objects:
   396 ;;		On entry : 0/0
   397 ;;		On exit  : 0/0
   398 ;;		Unchanged: 0/0
   399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   401 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   403 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   404 ;;Total ram usage:        1 bytes
   405 ;; Hardware stack levels used:    1
   406 ;; Hardware stack levels required when called:    3
   407 ;; This function calls:
   408 ;;		_lcdNewline
   409 ;;		_lcdNibble
   410 ;; This function is called by:
   411 ;;		_printf
   412 ;; This function uses a non-reentrant model
   413 ;;
   414                           
   415                           	psect	text2
   416  0011F6                     __ptext2:
   417                           	opt stack 0
   418  0011F6                     _putch:
   419                           	opt stack 26
   420                           
   421                           ;incstack = 0
   422                           ;putch@data stored from wreg
   423  0011F6  6E05               	movwf	putch@data,c
   424                           
   425                           ;lcd.c: 38: if(data == '\n')lcdNewline();
   426  0011F8  0E0A               	movlw	10
   427  0011FA  1805               	xorwf	putch@data,w,c
   428  0011FC  A4D8               	btfss	status,2,c
   429  0011FE  D003               	goto	l41
   430  001200  EC22  F009         	call	_lcdNewline	;wreg free
   431  001204  0012               	return	
   432  001206                     l41:
   433                           
   434                           ;lcd.c: 39: else
   435                           ;lcd.c: 40: {
   436                           ;lcd.c: 41: LATDbits.LATD2 = 1;
   437  001206  848C               	bsf	3980,2,c	;volatile
   438                           
   439                           ;lcd.c: 42: _delay((unsigned long)((140)*(8000000/4000000.0)));
   440  001208  0E5D               	movlw	93
   441  00120A                     u247:
   442  00120A  2EE8               	decfsz	wreg,f,c
   443  00120C  D7FE               	bra	u247
   444  00120E  F000               	nop	
   445                           
   446                           ;lcd.c: 43: lcdNibble(data);
   447  001210  5005               	movf	putch@data,w,c
   448  001212  EC96  F008         	call	_lcdNibble
   449  001216  0012               	return	
   450  001218                     __end_of_putch:
   451                           	opt stack 0
   452                           tblptru	equ	0xFF8
   453                           tblptrh	equ	0xFF7
   454                           tblptrl	equ	0xFF6
   455                           tablat	equ	0xFF5
   456                           wreg	equ	0xFE8
   457                           status	equ	0xFD8
   458                           
   459 ;; *************** function _lcdNewline *****************
   460 ;; Defined at:
   461 ;;		line 76 in file "lcd.c"
   462 ;; Parameters:    Size  Location     Type
   463 ;;		None
   464 ;; Auto vars:     Size  Location     Type
   465 ;;		None
   466 ;; Return value:  Size  Location     Type
   467 ;;                  1    wreg      void 
   468 ;; Registers used:
   469 ;;		wreg, status,2, status,0, cstack
   470 ;; Tracked objects:
   471 ;;		On entry : 0/0
   472 ;;		On exit  : 0/0
   473 ;;		Unchanged: 0/0
   474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   478 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   479 ;;Total ram usage:        0 bytes
   480 ;; Hardware stack levels used:    1
   481 ;; Hardware stack levels required when called:    2
   482 ;; This function calls:
   483 ;;		_lcdInst
   484 ;; This function is called by:
   485 ;;		_putch
   486 ;; This function uses a non-reentrant model
   487 ;;
   488                           
   489                           	psect	text3
   490  001244                     __ptext3:
   491                           	opt stack 0
   492  001244                     _lcdNewline:
   493                           	opt stack 26
   494                           
   495                           ;lcd.c: 77: lcdInst(0b11000000);
   496                           
   497                           ;incstack = 0
   498  001244  0EC0               	movlw	192
   499  001246  EC0C  F009         	call	_lcdInst
   500  00124A  0012               	return		;funcret
   501  00124C                     __end_of_lcdNewline:
   502                           	opt stack 0
   503                           tblptru	equ	0xFF8
   504                           tblptrh	equ	0xFF7
   505                           tblptrl	equ	0xFF6
   506                           tablat	equ	0xFF5
   507                           wreg	equ	0xFE8
   508                           status	equ	0xFD8
   509                           
   510 ;; *************** function _pinMode *****************
   511 ;; Defined at:
   512 ;;		line 13 in file "iopin.c"
   513 ;; Parameters:    Size  Location     Type
   514 ;;  port            2    0[COMRAM] int 
   515 ;;  pin             2    2[COMRAM] int 
   516 ;;  type            2    4[COMRAM] int 
   517 ;; Auto vars:     Size  Location     Type
   518 ;;		None
   519 ;; Return value:  Size  Location     Type
   520 ;;                  1    wreg      void 
   521 ;; Registers used:
   522 ;;		wreg, status,2, status,0
   523 ;; Tracked objects:
   524 ;;		On entry : 0/0
   525 ;;		On exit  : 0/0
   526 ;;		Unchanged: 0/0
   527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   528 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   530 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   531 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   532 ;;Total ram usage:        9 bytes
   533 ;; Hardware stack levels used:    1
   534 ;; This function calls:
   535 ;;		Nothing
   536 ;; This function is called by:
   537 ;;		_main
   538 ;; This function uses a non-reentrant model
   539 ;;
   540                           
   541                           	psect	text4
   542  001018                     __ptext4:
   543                           	opt stack 0
   544  001018                     _pinMode:
   545                           	opt stack 30
   546                           
   547                           ;iopin.c: 14: pin = 1 << pin;
   548                           
   549                           ;incstack = 0
   550  001018  C003  F007         	movff	pinMode@pin,??_pinMode
   551  00101C  0E01               	movlw	1
   552  00101E  6E08               	movwf	(??_pinMode+1)& (0+255),c
   553  001020  0E00               	movlw	0
   554  001022  6E09               	movwf	(??_pinMode+2)& (0+255),c
   555  001024  2A07               	incf	??_pinMode,f,c
   556  001026  D003               	goto	u144
   557  001028                     u145:
   558  001028  90D8               	bcf	status,0,c
   559  00102A  3608               	rlcf	??_pinMode+1,f,c
   560  00102C  3609               	rlcf	??_pinMode+2,f,c
   561  00102E                     u144:
   562  00102E  2E07               	decfsz	??_pinMode,f,c
   563  001030  D7FB               	goto	u145
   564  001032  C008  F003         	movff	??_pinMode+1,pinMode@pin
   565  001036  C009  F004         	movff	??_pinMode+2,pinMode@pin+1
   566                           
   567                           ;iopin.c: 15: if(type == 1){
   568  00103A  0405               	decf	pinMode@type,w,c
   569  00103C  1006               	iorwf	pinMode@type+1,w,c
   570  00103E  A4D8               	btfss	status,2,c
   571  001040  D02B               	goto	l896
   572                           
   573                           ;iopin.c: 16: pin ^= 0xff;
   574  001042  0EFF               	movlw	255
   575  001044  1A03               	xorwf	pinMode@pin,f,c
   576                           
   577                           ;iopin.c: 17: }
   578                           ;iopin.c: 19: switch(port){
   579  001046  D028               	goto	l896
   580  001048                     l870:
   581  001048  5005               	movf	pinMode@type,w,c
   582  00104A  1006               	iorwf	pinMode@type+1,w,c
   583  00104C  A4D8               	btfss	status,2,c
   584  00104E  D003               	goto	l874
   585  001050  5003               	movf	pinMode@pin,w,c
   586  001052  1292               	iorwf	3986,f,c	;volatile
   587  001054  0012               	return	
   588  001056                     l874:
   589                           
   590                           ;iopin.c: 21: else TRISA &= pin;
   591  001056  5003               	movf	pinMode@pin,w,c
   592  001058  1692               	andwf	3986,f,c	;volatile
   593                           
   594                           ;iopin.c: 22: break;
   595  00105A  0012               	return	
   596  00105C                     l876:
   597  00105C  5005               	movf	pinMode@type,w,c
   598  00105E  1006               	iorwf	pinMode@type+1,w,c
   599  001060  A4D8               	btfss	status,2,c
   600  001062  D003               	goto	l880
   601  001064  5003               	movf	pinMode@pin,w,c
   602  001066  1293               	iorwf	3987,f,c	;volatile
   603  001068  0012               	return	
   604  00106A                     l880:
   605                           
   606                           ;iopin.c: 25: else TRISB &= pin;
   607  00106A  5003               	movf	pinMode@pin,w,c
   608  00106C  1693               	andwf	3987,f,c	;volatile
   609                           
   610                           ;iopin.c: 26: break;
   611  00106E  0012               	return	
   612  001070                     l882:
   613  001070  5005               	movf	pinMode@type,w,c
   614  001072  1006               	iorwf	pinMode@type+1,w,c
   615  001074  A4D8               	btfss	status,2,c
   616  001076  D003               	goto	l886
   617  001078  5003               	movf	pinMode@pin,w,c
   618  00107A  1294               	iorwf	3988,f,c	;volatile
   619  00107C  0012               	return	
   620  00107E                     l886:
   621                           
   622                           ;iopin.c: 29: else TRISC &= pin;
   623  00107E  5003               	movf	pinMode@pin,w,c
   624  001080  1694               	andwf	3988,f,c	;volatile
   625                           
   626                           ;iopin.c: 30: break;
   627  001082  0012               	return	
   628  001084                     l888:
   629  001084  5005               	movf	pinMode@type,w,c
   630  001086  1006               	iorwf	pinMode@type+1,w,c
   631  001088  A4D8               	btfss	status,2,c
   632  00108A  D003               	goto	l892
   633  00108C  5003               	movf	pinMode@pin,w,c
   634  00108E  1295               	iorwf	3989,f,c	;volatile
   635  001090  0012               	return	
   636  001092                     l892:
   637                           
   638                           ;iopin.c: 33: else TRISD &= pin;
   639  001092  5003               	movf	pinMode@pin,w,c
   640  001094  1695               	andwf	3989,f,c	;volatile
   641                           
   642                           ;iopin.c: 35: }
   643                           
   644                           ;iopin.c: 34: break;
   645  001096  0012               	return	
   646  001098                     l896:
   647  001098  C001  F007         	movff	pinMode@port,??_pinMode
   648  00109C  C002  F008         	movff	pinMode@port+1,??_pinMode+1
   649                           
   650                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   651                           ; Switch size 1, requested type "space"
   652                           ; Number of cases is 1, Range of values is 0 to 0
   653                           ; switch strategies available:
   654                           ; Name         Instructions Cycles
   655                           ; simple_byte            4     3 (average)
   656                           ;	Chosen strategy is simple_byte
   657  0010A0  5008               	movf	??_pinMode+1,w,c
   658  0010A2  0A00               	xorlw	0	; case 0
   659  0010A4  A4D8               	btfss	status,2,c
   660  0010A6  0012               	return	
   661                           
   662                           ; Switch size 1, requested type "space"
   663                           ; Number of cases is 4, Range of values is 0 to 3
   664                           ; switch strategies available:
   665                           ; Name         Instructions Cycles
   666                           ; simple_byte           13     7 (average)
   667                           ;	Chosen strategy is simple_byte
   668  0010A8  5007               	movf	??_pinMode,w,c
   669  0010AA  0A00               	xorlw	0	; case 0
   670  0010AC  B4D8               	btfsc	status,2,c
   671  0010AE  D7CC               	goto	l870
   672  0010B0  0A01               	xorlw	1	; case 1
   673  0010B2  B4D8               	btfsc	status,2,c
   674  0010B4  D7D3               	goto	l876
   675  0010B6  0A03               	xorlw	3	; case 2
   676  0010B8  B4D8               	btfsc	status,2,c
   677  0010BA  D7DA               	goto	l882
   678  0010BC  0A01               	xorlw	1	; case 3
   679  0010BE  A4D8               	btfss	status,2,c
   680  0010C0  0012               	return	
   681  0010C2  D7E0               	goto	l888
   682  0010C4                     __end_of_pinMode:
   683                           	opt stack 0
   684                           tblptru	equ	0xFF8
   685                           tblptrh	equ	0xFF7
   686                           tblptrl	equ	0xFF6
   687                           tablat	equ	0xFF5
   688                           wreg	equ	0xFE8
   689                           status	equ	0xFD8
   690                           
   691 ;; *************** function _initLCD *****************
   692 ;; Defined at:
   693 ;;		line 15 in file "lcd.c"
   694 ;; Parameters:    Size  Location     Type
   695 ;;		None
   696 ;; Auto vars:     Size  Location     Type
   697 ;;		None
   698 ;; Return value:  Size  Location     Type
   699 ;;                  1    wreg      void 
   700 ;; Registers used:
   701 ;;		wreg, status,2, status,0, cstack
   702 ;; Tracked objects:
   703 ;;		On entry : 0/0
   704 ;;		On exit  : 0/0
   705 ;;		Unchanged: 0/0
   706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   709 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   710 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   711 ;;Total ram usage:        1 bytes
   712 ;; Hardware stack levels used:    1
   713 ;; Hardware stack levels required when called:    2
   714 ;; This function calls:
   715 ;;		_lcdInst
   716 ;; This function is called by:
   717 ;;		_main
   718 ;; This function uses a non-reentrant model
   719 ;;
   720                           
   721                           	psect	text5
   722  001182                     __ptext5:
   723                           	opt stack 0
   724  001182                     _initLCD:
   725                           	opt stack 28
   726                           
   727                           ;lcd.c: 17: TRISD = 0x00;
   728                           
   729                           ;incstack = 0
   730  001182  0E00               	movlw	0
   731  001184  6E95               	movwf	3989,c	;volatile
   732                           
   733                           ;lcd.c: 19: _delay((unsigned long)((15)*(8000000/4000.0)));
   734  001186  0E27               	movlw	39
   735  001188  6E05               	movwf	??_initLCD& (0+255),c
   736  00118A  0EF5               	movlw	245
   737  00118C                     u257:
   738  00118C  2EE8               	decfsz	wreg,f,c
   739  00118E  D7FE               	bra	u257
   740  001190  2E05               	decfsz	??_initLCD& (0+255),f,c
   741  001192  D7FC               	bra	u257
   742  001194  F000               	nop	
   743                           
   744                           ;lcd.c: 20: lcdInst(0b00110011);
   745  001196  0E33               	movlw	51
   746  001198  EC0C  F009         	call	_lcdInst
   747                           
   748                           ;lcd.c: 21: lcdInst(0b00110010);
   749  00119C  0E32               	movlw	50
   750  00119E  EC0C  F009         	call	_lcdInst
   751                           
   752                           ;lcd.c: 22: lcdInst(0b00101000);
   753  0011A2  0E28               	movlw	40
   754  0011A4  EC0C  F009         	call	_lcdInst
   755                           
   756                           ;lcd.c: 23: lcdInst(0b00001111);
   757  0011A8  0E0F               	movlw	15
   758  0011AA  EC0C  F009         	call	_lcdInst
   759                           
   760                           ;lcd.c: 24: lcdInst(0b00000110);
   761  0011AE  0E06               	movlw	6
   762  0011B0  EC0C  F009         	call	_lcdInst
   763                           
   764                           ;lcd.c: 25: lcdInst(0b00000001);
   765  0011B4  0E01               	movlw	1
   766  0011B6  EC0C  F009         	call	_lcdInst
   767                           
   768                           ;lcd.c: 26: _delay((unsigned long)((15)*(8000000/4000.0)));
   769  0011BA  0E27               	movlw	39
   770  0011BC  6E05               	movwf	??_initLCD& (0+255),c
   771  0011BE  0EF5               	movlw	245
   772  0011C0                     u267:
   773  0011C0  2EE8               	decfsz	wreg,f,c
   774  0011C2  D7FE               	bra	u267
   775  0011C4  2E05               	decfsz	??_initLCD& (0+255),f,c
   776  0011C6  D7FC               	bra	u267
   777  0011C8  F000               	nop	
   778  0011CA  0012               	return		;funcret
   779  0011CC                     __end_of_initLCD:
   780                           	opt stack 0
   781                           tblptru	equ	0xFF8
   782                           tblptrh	equ	0xFF7
   783                           tblptrl	equ	0xFF6
   784                           tablat	equ	0xFF5
   785                           wreg	equ	0xFE8
   786                           status	equ	0xFD8
   787                           
   788 ;; *************** function _lcdInst *****************
   789 ;; Defined at:
   790 ;;		line 29 in file "lcd.c"
   791 ;; Parameters:    Size  Location     Type
   792 ;;  data            1    wreg     unsigned char 
   793 ;; Auto vars:     Size  Location     Type
   794 ;;  data            1    3[COMRAM] unsigned char 
   795 ;; Return value:  Size  Location     Type
   796 ;;                  1    wreg      void 
   797 ;; Registers used:
   798 ;;		wreg, status,2, status,0, cstack
   799 ;; Tracked objects:
   800 ;;		On entry : 0/0
   801 ;;		On exit  : 0/0
   802 ;;		Unchanged: 0/0
   803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   805 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   806 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   807 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   808 ;;Total ram usage:        2 bytes
   809 ;; Hardware stack levels used:    1
   810 ;; Hardware stack levels required when called:    1
   811 ;; This function calls:
   812 ;;		_lcdNibble
   813 ;; This function is called by:
   814 ;;		_initLCD
   815 ;;		_lcdNewline
   816 ;;		_lcdClear
   817 ;; This function uses a non-reentrant model
   818 ;;
   819                           
   820                           	psect	text6
   821  001218                     __ptext6:
   822                           	opt stack 0
   823  001218                     _lcdInst:
   824                           	opt stack 26
   825                           
   826                           ;incstack = 0
   827                           ;lcdInst@data stored from wreg
   828  001218  6E04               	movwf	lcdInst@data,c
   829                           
   830                           ;lcd.c: 30: LATDbits.LATD2 = 0;
   831  00121A  948C               	bcf	3980,2,c	;volatile
   832                           
   833                           ;lcd.c: 31: _delay((unsigned long)((140)*(8000000/4000000.0)));
   834  00121C  0E5D               	movlw	93
   835  00121E                     u277:
   836  00121E  2EE8               	decfsz	wreg,f,c
   837  001220  D7FE               	bra	u277
   838  001222  F000               	nop	
   839                           
   840                           ;lcd.c: 32: lcdNibble(data);
   841  001224  5004               	movf	lcdInst@data,w,c
   842  001226  EC96  F008         	call	_lcdNibble
   843                           
   844                           ;lcd.c: 33: _delay((unsigned long)((1000)*(8000000/4000000.0)));
   845  00122A  0E03               	movlw	3
   846  00122C  6E03               	movwf	??_lcdInst& (0+255),c
   847  00122E  0E98               	movlw	152
   848  001230                     u287:
   849  001230  2EE8               	decfsz	wreg,f,c
   850  001232  D7FE               	bra	u287
   851  001234  2E03               	decfsz	??_lcdInst& (0+255),f,c
   852  001236  D7FC               	bra	u287
   853  001238  0012               	return		;funcret
   854  00123A                     __end_of_lcdInst:
   855                           	opt stack 0
   856                           tblptru	equ	0xFF8
   857                           tblptrh	equ	0xFF7
   858                           tblptrl	equ	0xFF6
   859                           tablat	equ	0xFF5
   860                           wreg	equ	0xFE8
   861                           status	equ	0xFD8
   862                           
   863 ;; *************** function _lcdNibble *****************
   864 ;; Defined at:
   865 ;;		line 48 in file "lcd.c"
   866 ;; Parameters:    Size  Location     Type
   867 ;;  data            1    wreg     unsigned char 
   868 ;; Auto vars:     Size  Location     Type
   869 ;;  data            1    1[COMRAM] unsigned char 
   870 ;;  temp            1    0[COMRAM] unsigned char 
   871 ;; Return value:  Size  Location     Type
   872 ;;                  1    wreg      void 
   873 ;; Registers used:
   874 ;;		wreg, status,2, status,0
   875 ;; Tracked objects:
   876 ;;		On entry : 0/0
   877 ;;		On exit  : 0/0
   878 ;;		Unchanged: 0/0
   879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   881 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   883 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   884 ;;Total ram usage:        2 bytes
   885 ;; Hardware stack levels used:    1
   886 ;; This function calls:
   887 ;;		Nothing
   888 ;; This function is called by:
   889 ;;		_lcdInst
   890 ;;		_putch
   891 ;; This function uses a non-reentrant model
   892 ;;
   893                           
   894                           	psect	text7
   895  00112C                     __ptext7:
   896                           	opt stack 0
   897  00112C                     _lcdNibble:
   898                           	opt stack 28
   899                           
   900                           ;incstack = 0
   901                           ;lcdNibble@data stored from wreg
   902  00112C  6E02               	movwf	lcdNibble@data,c
   903                           
   904                           ;lcd.c: 50: char temp = data & 0xF0;
   905  00112E  5002               	movf	lcdNibble@data,w,c
   906  001130  0BF0               	andlw	240
   907  001132  6E01               	movwf	lcdNibble@temp,c
   908                           
   909                           ;lcd.c: 51: LATD = LATD & 0x0F;
   910  001134  508C               	movf	3980,w,c	;volatile
   911  001136  0B0F               	andlw	15
   912  001138  6E8C               	movwf	3980,c	;volatile
   913                           
   914                           ;lcd.c: 52: LATD = temp | LATD;
   915  00113A  5001               	movf	lcdNibble@temp,w,c
   916  00113C  108C               	iorwf	3980,w,c	;volatile
   917  00113E  6E8C               	movwf	3980,c	;volatile
   918                           
   919                           ;lcd.c: 54: LATDbits.LATD3 = 0;
   920  001140  968C               	bcf	3980,3,c	;volatile
   921                           
   922                           ;lcd.c: 55: _delay((unsigned long)((600)*(8000000/4000000.0)));
   923  001142  0EF0               	movlw	240
   924  001144                     u297:
   925  001144  D000               	nop2	
   926  001146  2EE8               	decfsz	wreg,f,c
   927  001148  D7FD               	bra	u297
   928                           
   929                           ;lcd.c: 56: LATDbits.LATD3 = 1;
   930  00114A  868C               	bsf	3980,3,c	;volatile
   931                           
   932                           ;lcd.c: 57: _delay((unsigned long)((600)*(8000000/4000000.0)));
   933  00114C  0EF0               	movlw	240
   934  00114E                     u307:
   935  00114E  D000               	nop2	
   936  001150  2EE8               	decfsz	wreg,f,c
   937  001152  D7FD               	bra	u307
   938                           
   939                           ;lcd.c: 60: data = data << 4;
   940  001154  3802               	swapf	lcdNibble@data,w,c
   941  001156  0BF0               	andlw	240
   942  001158  6E02               	movwf	lcdNibble@data,c
   943                           
   944                           ;lcd.c: 62: temp = data & 0xF0;
   945  00115A  5002               	movf	lcdNibble@data,w,c
   946  00115C  0BF0               	andlw	240
   947  00115E  6E01               	movwf	lcdNibble@temp,c
   948                           
   949                           ;lcd.c: 63: LATD = LATD & 0x0F;
   950  001160  508C               	movf	3980,w,c	;volatile
   951  001162  0B0F               	andlw	15
   952  001164  6E8C               	movwf	3980,c	;volatile
   953                           
   954                           ;lcd.c: 64: LATD = temp | LATD;
   955  001166  5001               	movf	lcdNibble@temp,w,c
   956  001168  108C               	iorwf	3980,w,c	;volatile
   957  00116A  6E8C               	movwf	3980,c	;volatile
   958                           
   959                           ;lcd.c: 66: LATDbits.LATD3 = 0;
   960  00116C  968C               	bcf	3980,3,c	;volatile
   961                           
   962                           ;lcd.c: 67: _delay((unsigned long)((600)*(8000000/4000000.0)));
   963  00116E  0EF0               	movlw	240
   964  001170                     u317:
   965  001170  D000               	nop2	
   966  001172  2EE8               	decfsz	wreg,f,c
   967  001174  D7FD               	bra	u317
   968                           
   969                           ;lcd.c: 68: LATDbits.LATD3 = 1;
   970  001176  868C               	bsf	3980,3,c	;volatile
   971                           
   972                           ;lcd.c: 69: _delay((unsigned long)((600)*(8000000/4000000.0)));
   973  001178  0EF0               	movlw	240
   974  00117A                     u327:
   975  00117A  D000               	nop2	
   976  00117C  2EE8               	decfsz	wreg,f,c
   977  00117E  D7FD               	bra	u327
   978  001180  0012               	return		;funcret
   979  001182                     __end_of_lcdNibble:
   980                           	opt stack 0
   981                           tblptru	equ	0xFF8
   982                           tblptrh	equ	0xFF7
   983                           tblptrl	equ	0xFF6
   984                           tablat	equ	0xFF5
   985                           wreg	equ	0xFE8
   986                           status	equ	0xFD8
   987                           tblptru	equ	0xFF8
   988                           tblptrh	equ	0xFF7
   989                           tblptrl	equ	0xFF6
   990                           tablat	equ	0xFF5
   991                           wreg	equ	0xFE8
   992                           status	equ	0xFD8
   993                           
   994                           	psect	rparam
   995  0000                     tblptru	equ	0xFF8
   996                           tblptrh	equ	0xFF7
   997                           tblptrl	equ	0xFF6
   998                           tablat	equ	0xFF5
   999                           wreg	equ	0xFE8
  1000                           status	equ	0xFD8


Data Sizes:
    Strings     4
    Constant    17
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     12      12
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), STR_1(CODE[2]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->_putch
    _lcdNewline->_lcdInst
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1051
                                             10 COMRAM     2     2      0
                            _initLCD
                            _pinMode
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     369
                                              5 COMRAM     5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     195
                                              4 COMRAM     1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNewline                                           0     0      0      90
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _pinMode                                              9     3      6     524
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              4 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (4) _lcdInst                                              2     2      0      90
                                              2 COMRAM     2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _pinMode
   _printf
     _putch
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F      C       C       1        9.4%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
ABS                  0      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BIGRAM             F7F      0       0      37        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Feb 20 22:54:52 2017

                     l15 112A                       l16 112A                       l41 1206  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000              __CFG_OSC$HS 000000  
                    l904 11D6                      l906 11DC                      l922 1116  
                    l914 10F0                      l924 1122                      l870 1048  
                    l918 10FE                      l880 106A                      l882 1070  
                    l874 1056                      l892 1092                      l876 105C  
                    l886 107E                      l888 1084                      l896 1098  
           __CFG_CPB$OFF 000000                      u144 102E                      u145 1028  
                    u307 114E                      u317 1170                      u327 117A  
                    u247 120A                      u257 118C             __CFG_CPD$OFF 000000  
                    u267 11C0                      u277 121E                      u287 1230  
                    u297 1144                      wreg 000FE8             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     STR_1 1014                     STR_2 1012  
                   _LATB 000F8A                     _LATD 000F8C                     _main 10C4  
                   _keys 1001                     start 0000            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___param_bank 000000                    ?_main 0001  
                  _PORTB 000F81                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISC 000F94                    _TRISD 000F95            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000          __end_of_lcdInst 123A           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000          __end_of_initLCD 11CC           __CFG_EBTRB$OFF 000000  
        __end_of_pinMode 10C4                    _putch 11F6                    main@a 000B  
                  tablat 000FF5                    status 000FD8           __CFG_PBADEN$ON 000000  
        __initialization 123A             __end_of_main 112C             __end_of_keys 1012  
                 ??_main 000B            __activetblptr 000002                   _ADCON0 000FC2  
                 _ADCON1 000FC1                   ?_putch 0001           __CFG_XINST$OFF 000000  
         __CFG_STVREN$ON 000000                ??_lcdInst 0003                   _printf 11CC  
              ??_initLCD 0005                ??_pinMode 0007             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
             __accesstop 0080  __end_of__initialization 123A            ___rparam_used 000001  
            pinMode@port 0001              pinMode@type 0005           __pcstackCOMRAM 0001  
          __end_of_putch 1218       __size_of_lcdNibble 0056                  ??_putch 0005  
             _lcdNewline 1244                  ?_printf 0006        __end_of_lcdNibble 1182  
                __Hparam 0000                  __Lparam 0000             __psmallconst 1000  
                __pcinit 123A                  __ramtop 1000                  _lcdInst 1218  
                __ptext0 10C4                  __ptext1 11CC                  __ptext2 11F6  
                __ptext3 1244                  __ptext4 1018                  __ptext5 1182  
                __ptext6 1218                  __ptext7 112C          __size_of_printf 002A  
                _initLCD 1182                  _pinMode 1018     end_of_initialization 123A  
          __Lmediumconst 0000                  printf@c 000A                  printf@f 0006  
            ?_lcdNewline 0001                _PORTBbits 000F81           __end_of_printf 11F6  
    start_initialization 123A      __size_of_lcdNewline 0008         __CFG_LPT1OSC$OFF 000000  
               ??_printf 0008               pinMode@pin 0003        __CFG_CCP2MX$PORTC 000000  
              _lcdNibble 112C                 ?_lcdInst 0001                 ?_initLCD 0001  
            __smallconst 1000                 ?_pinMode 0001           __size_of_putch 0022  
               _LATDbits 000F8C         __CFG_WDTPS$32768 000000               ?_lcdNibble 0001  
           ??_lcdNewline 0005            lcdNibble@data 0002            lcdNibble@temp 0001  
     __end_of_lcdNewline 124C                 __Hrparam 0000                 __Lrparam 0000  
     __CFG_BOREN$SBORDIS 000000         __size_of_lcdInst 0022         __size_of_initLCD 004A  
       __size_of_pinMode 00AC            __size_of_main 0068              ??_lcdNibble 0001  
              putch@data 0005                 printf@ap 0008              lcdInst@data 0004  
