

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Feb 27 14:49:12 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    20                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    51                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    52  0000                     
    53                           ; Version 1.40
    54                           ; Generated 01/12/2016 GMT
    55                           ; 
    56                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC18F4620 Definitions
    85                           ; 
    86                           ; SFR Addresses
    87  0000                     
    88                           	psect	idataCOMRAM
    89  002FF0                     __pidataCOMRAM:
    90                           	opt stack 0
    91                           
    92                           ;initializer for _angle
    93  002FF0  00                 	db	0
    94  002FF1  C0                 	db	192
    95  002FF2  3F                 	db	63
    96                           
    97                           	psect	idataBANK0
    98  002FEA                     __pidataBANK0:
    99                           	opt stack 0
   100                           
   101                           ;initializer for _extFreq
   102  002FEA  4800               	dw	18432
   103  002FEC  01E8               	dw	488
   104                           
   105                           ;initializer for _flag
   106  002FEE  0001               	dw	1
   107                           
   108                           	psect	smallconst
   109  001000                     __psmallconst:
   110                           	opt stack 0
   111  001000  00                 	db	0
   112  001001                     _dpowers:
   113                           	opt stack 0
   114  001001  0001               	dw	1
   115  001003  0000               	dw	0
   116  001005  000A               	dw	10
   117  001007  0000               	dw	0
   118  001009  0064               	dw	100
   119  00100B  0000               	dw	0
   120  00100D  03E8               	dw	1000
   121  00100F  0000               	dw	0
   122  001011  2710               	dw	10000
   123  001013  0000               	dw	0
   124  001015  86A0               	dw	34464
   125  001017  0001               	dw	1
   126  001019  4240               	dw	16960
   127  00101B  000F               	dw	15
   128  00101D  9680               	dw	38528
   129  00101F  0098               	dw	152
   130  001021  E100               	dw	57600
   131  001023  05F5               	dw	1525
   132  001025  CA00               	dw	51712
   133  001027  3B9A               	dw	15258
   134  001029                     __end_of_dpowers:
   135                           	opt stack 0
   136  001029                     __npowers_:
   137                           	opt stack 0
   138  001029  00                 	db	0
   139  00102A  80                 	db	128
   140  00102B  3F                 	db	63
   141  00102C  CD                 	db	205
   142  00102D  CC                 	db	204
   143  00102E  3D                 	db	61
   144  00102F  D7                 	db	215
   145  001030  23                 	db	35
   146  001031  3C                 	db	60
   147  001032  12                 	db	18
   148  001033  83                 	db	131
   149  001034  3A                 	db	58
   150  001035  B7                 	db	183
   151  001036  D1                 	db	209
   152  001037  38                 	db	56
   153  001038  C6                 	db	198
   154  001039  27                 	db	39
   155  00103A  37                 	db	55
   156  00103B  38                 	db	56
   157  00103C  86                 	db	134
   158  00103D  35                 	db	53
   159  00103E  C0                 	db	192
   160  00103F  D6                 	db	214
   161  001040  33                 	db	51
   162  001041  CC                 	db	204
   163  001042  2B                 	db	43
   164  001043  32                 	db	50
   165  001044  70                 	db	112
   166  001045  89                 	db	137
   167  001046  30                 	db	48
   168  001047  E7                 	db	231
   169  001048  DB                 	db	219
   170  001049  2E                 	db	46
   171  00104A  E5                 	db	229
   172  00104B  3C                 	db	60
   173  00104C  1E                 	db	30
   174  00104D  42                 	db	66
   175  00104E  A2                 	db	162
   176  00104F  0D                 	db	13
   177  001050                     __end_of__npowers_:
   178                           	opt stack 0
   179  001050                     __powers_:
   180                           	opt stack 0
   181  001050  00                 	db	0
   182  001051  80                 	db	128
   183  001052  3F                 	db	63
   184  001053  00                 	db	0
   185  001054  20                 	db	32
   186  001055  41                 	db	65
   187  001056  00                 	db	0
   188  001057  C8                 	db	200
   189  001058  42                 	db	66
   190  001059  00                 	db	0
   191  00105A  7A                 	db	122
   192  00105B  44                 	db	68
   193  00105C  40                 	db	64
   194  00105D  1C                 	db	28
   195  00105E  46                 	db	70
   196  00105F  50                 	db	80
   197  001060  C3                 	db	195
   198  001061  47                 	db	71
   199  001062  24                 	db	36
   200  001063  74                 	db	116
   201  001064  49                 	db	73
   202  001065  97                 	db	151
   203  001066  18                 	db	24
   204  001067  4B                 	db	75
   205  001068  BC                 	db	188
   206  001069  BE                 	db	190
   207  00106A  4C                 	db	76
   208  00106B  6B                 	db	107
   209  00106C  6E                 	db	110
   210  00106D  4E                 	db	78
   211  00106E  03                 	db	3
   212  00106F  15                 	db	21
   213  001070  50                 	db	80
   214  001071  79                 	db	121
   215  001072  AD                 	db	173
   216  001073  60                 	db	96
   217  001074  F3                 	db	243
   218  001075  49                 	db	73
   219  001076  71                 	db	113
   220  001077                     __end_of__powers_:
   221                           	opt stack 0
   222  001077                     _hexpowers:
   223                           	opt stack 0
   224  001077  0001               	dw	1
   225  001079  0000               	dw	0
   226  00107B  0010               	dw	16
   227  00107D  0000               	dw	0
   228  00107F  0100               	dw	256
   229  001081  0000               	dw	0
   230  001083  1000               	dw	4096
   231  001085  0000               	dw	0
   232  001087  0000               	dw	0
   233  001089  0001               	dw	1
   234  00108B  0000               	dw	0
   235  00108D  0010               	dw	16
   236  00108F  0000               	dw	0
   237  001091  0100               	dw	256
   238  001093  0000               	dw	0
   239  001095  1000               	dw	4096
   240  001097                     __end_of_hexpowers:
   241                           	opt stack 0
   242  001097  31                 	db	49
   243  001098  32                 	db	50
   244  001099  33                 	db	51
   245  00109A  41                 	db	65
   246  00109B  34                 	db	52
   247  00109C  35                 	db	53
   248  00109D  36                 	db	54
   249  00109E  42                 	db	66
   250  00109F  37                 	db	55
   251  0010A0  38                 	db	56
   252  0010A1  39                 	db	57
   253  0010A2  43                 	db	67
   254  0010A3  2A                 	db	42
   255  0010A4  30                 	db	48
   256  0010A5  23                 	db	35
   257  0010A6  44                 	db	68
   258  0010A7  00                 	db	0
   259  0010A8                     __end_of_keys:
   260                           	opt stack 0
   261  0010A8                     _happynewyear:
   262                           	opt stack 0
   263  0010A8  45                 	db	69
   264  0010A9  59                 	db	89
   265  0010AA  23                 	db	35
   266  0010AB  07                 	db	7
   267  0010AC  31                 	db	49
   268  0010AD  12                 	db	18
   269  0010AE  16                 	db	22
   270  0010AF                     __end_of_happynewyear:
   271                           	opt stack 0
   272  0010AF                     testFrequency@F2962:
   273                           	opt stack 0
   274  0010AF  45                 	db	69
   275  0010B0  59                 	db	89
   276  0010B1  23                 	db	35
   277  0010B2  07                 	db	7
   278  0010B3  31                 	db	49
   279  0010B4  12                 	db	18
   280  0010B5  16                 	db	22
   281  0010B6                     __end_oftestFrequency@F2962:
   282                           	opt stack 0
   283  0000                     _ADCON0	set	4034
   284  0000                     _ADCON1	set	4033
   285  0000                     _ADCON2	set	4032
   286  0000                     _ADRESH	set	4036
   287  0000                     _ADRESL	set	4035
   288  0000                     _EEADR	set	4009
   289  0000                     _EEADRH	set	4010
   290  0000                     _EECON1	set	4006
   291  0000                     _EECON2	set	4007
   292  0000                     _EEDATA	set	4008
   293  0000                     _INTCONbits	set	4082
   294  0000                     _LATA	set	3977
   295  0000                     _LATB	set	3978
   296  0000                     _LATC	set	3979
   297  0000                     _LATD	set	3980
   298  0000                     _LATDbits	set	3980
   299  0000                     _LATE	set	3981
   300  0000                     _OSCCON	set	4051
   301  0000                     _OSCTUNEbits	set	3995
   302  0000                     _PORTA	set	3968
   303  0000                     _PORTB	set	3969
   304  0000                     _PORTBbits	set	3969
   305  0000                     _PORTC	set	3970
   306  0000                     _PORTD	set	3971
   307  0000                     _SSPADD	set	4040
   308  0000                     _SSPBUF	set	4041
   309  0000                     _SSPCON1	set	4038
   310  0000                     _SSPCON2	set	4037
   311  0000                     _SSPSTAT	set	4039
   312  0000                     _T0CON	set	4053
   313  0000                     _TMR0H	set	4055
   314  0000                     _TMR0L	set	4054
   315  0000                     _TRISA	set	3986
   316  0000                     _TRISB	set	3987
   317  0000                     _TRISC	set	3988
   318  0000                     _TRISD	set	3989
   319  0000                     _TRISE	set	3990
   320  0000                     _ACKDT	set	32301
   321  0000                     _ACKEN	set	32300
   322  0000                     _EEIF	set	32012
   323  0000                     _INT1IF	set	32640
   324  0000                     _PEIE	set	32662
   325  0000                     _PEN	set	32298
   326  0000                     _RCEN	set	32299
   327  0000                     _RSEN	set	32297
   328  0000                     _SEN	set	32296
   329  0000                     _TMR0IE	set	32661
   330  0000                     _TMR0IF	set	32658
   331  0000                     _TRISC3	set	31907
   332  0000                     _TRISC4	set	31908
   333  0010B6                     STR_4:
   334  0010B6  30                 	db	48	;'0'
   335  0010B7  31                 	db	49	;'1'
   336  0010B8  32                 	db	50	;'2'
   337  0010B9  33                 	db	51	;'3'
   338  0010BA  34                 	db	52	;'4'
   339  0010BB  35                 	db	53	;'5'
   340  0010BC  36                 	db	54	;'6'
   341  0010BD  37                 	db	55	;'7'
   342  0010BE  38                 	db	56	;'8'
   343  0010BF  39                 	db	57	;'9'
   344  0010C0  61                 	db	97	;'a'
   345  0010C1  62                 	db	98	;'b'
   346  0010C2  63                 	db	99	;'c'
   347  0010C3  64                 	db	100	;'d'
   348  0010C4  65                 	db	101	;'e'
   349  0010C5  66                 	db	102	;'f'
   350  0010C6  00                 	db	0
   351  0010C7  5B                 	db	91	;'['
   352  0010C8  25                 	db	37
   353  0010C9  78                 	db	120	;'x'
   354  0010CA  20                 	db	32
   355  0010CB  25                 	db	37
   356  0010CC  78                 	db	120	;'x'
   357  0010CD  5D                 	db	93	;']'
   358  0010CE  0A                 	db	10
   359  0010CF  00                 	db	0
   360  0010D0                     STR_1:
   361  0010D0  61                 	db	97	;'a'
   362  0010D1  6E                 	db	110	;'n'
   363  0010D2  67                 	db	103	;'g'
   364  0010D3  6C                 	db	108	;'l'
   365  0010D4  65                 	db	101	;'e'
   366  0010D5  20                 	db	32
   367  0010D6  25                 	db	37
   368  0010D7  66                 	db	102	;'f'
   369  0010D8  00                 	db	0
   370  0010D9  74                 	db	116	;'t'
   371  0010DA  31                 	db	49	;'1'
   372  0010DB  3A                 	db	58	;':'
   373  0010DC  20                 	db	32
   374  0010DD  25                 	db	37
   375  0010DE  78                 	db	120	;'x'
   376  0010DF  20                 	db	32
   377  0010E0  00                 	db	0
   378                           
   379                           ; #config settings
   380  0010E1  00                 	db	0	; dummy byte at the end
   381  0000                     
   382                           	psect	cinit
   383  002E44                     __pcinit:
   384                           	opt stack 0
   385  002E44                     start_initialization:
   386                           	opt stack 0
   387  002E44                     __initialization:
   388                           	opt stack 0
   389                           
   390                           ; Initialize objects allocated to BANK0 (6 bytes)
   391                           ; load TBLPTR registers with __pidataBANK0
   392  002E44  0EEA               	movlw	low __pidataBANK0
   393  002E46  6EF6               	movwf	tblptrl,c
   394  002E48  0E2F               	movlw	high __pidataBANK0
   395  002E4A  6EF7               	movwf	tblptrh,c
   396  002E4C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   397  002E4E  6EF8               	movwf	tblptru,c
   398  002E50  EE00  F097         	lfsr	0,__pdataBANK0
   399  002E54  EE10 F006          	lfsr	1,6
   400  002E58                     copy_data0:
   401  002E58  0009               	tblrd		*+
   402  002E5A  CFF5 FFEE          	movff	tablat,postinc0
   403  002E5E  50E5               	movf	postdec1,w,c
   404  002E60  50E1               	movf	fsr1l,w,c
   405  002E62  E1FA               	bnz	copy_data0
   406                           
   407                           ; Initialize objects allocated to COMRAM (3 bytes)
   408                           ; load TBLPTR registers with __pidataCOMRAM
   409  002E64  0EF0               	movlw	low __pidataCOMRAM
   410  002E66  6EF6               	movwf	tblptrl,c
   411  002E68  0E2F               	movlw	high __pidataCOMRAM
   412  002E6A  6EF7               	movwf	tblptrh,c
   413  002E6C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   414  002E6E  6EF8               	movwf	tblptru,c
   415  002E70  0009               	tblrd		*+	;fetch initializer
   416  002E72  CFF5 F07B          	movff	tablat,__pdataCOMRAM
   417  002E76  0009               	tblrd		*+	;fetch initializer
   418  002E78  CFF5 F07C          	movff	tablat,__pdataCOMRAM+1
   419  002E7C  0009               	tblrd		*+	;fetch initializer
   420  002E7E  CFF5 F07D          	movff	tablat,__pdataCOMRAM+2
   421                           
   422                           ; Clear objects allocated to BANK0 (4 bytes)
   423  002E82  0100               	movlb	0
   424  002E84  6BA0               	clrf	(__pbssBANK0+3)& (0+255),b
   425  002E86  6B9F               	clrf	(__pbssBANK0+2)& (0+255),b
   426  002E88  6B9E               	clrf	(__pbssBANK0+1)& (0+255),b
   427  002E8A  6B9D               	clrf	__pbssBANK0& (0+255),b
   428  002E8C                     end_of_initialization:
   429                           	opt stack 0
   430  002E8C                     __end_of__initialization:
   431                           	opt stack 0
   432  002E8C  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   433  002E8E  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   434  002E90  0E00               	movlw	low (__Lmediumconst shr (0+16))
   435  002E92  6EF8               	movwf	tblptru,c
   436  002E94  0100               	movlb	0
   437  002E96  EF8E  F016         	goto	_main	;jump to C main() function
   438                           tblptru	equ	0xFF8
   439                           tblptrh	equ	0xFF7
   440                           tblptrl	equ	0xFF6
   441                           tablat	equ	0xFF5
   442                           postinc0	equ	0xFEE
   443                           postdec1	equ	0xFE5
   444                           fsr1l	equ	0xFE1
   445                           
   446                           	psect	dataCOMRAM
   447  00007B                     __pdataCOMRAM:
   448                           	opt stack 0
   449  00007B                     _angle:
   450                           	opt stack 0
   451  00007B                     	ds	3
   452                           tblptru	equ	0xFF8
   453                           tblptrh	equ	0xFF7
   454                           tblptrl	equ	0xFF6
   455                           tablat	equ	0xFF5
   456                           postinc0	equ	0xFEE
   457                           postdec1	equ	0xFE5
   458                           fsr1l	equ	0xFE1
   459                           
   460                           	psect	bssBANK0
   461  00009D                     __pbssBANK0:
   462                           	opt stack 0
   463  00009D                     _count:
   464                           	opt stack 0
   465  00009D                     	ds	2
   466  00009F                     _i:
   467                           	opt stack 0
   468  00009F                     	ds	2
   469                           tblptru	equ	0xFF8
   470                           tblptrh	equ	0xFF7
   471                           tblptrl	equ	0xFF6
   472                           tablat	equ	0xFF5
   473                           postinc0	equ	0xFEE
   474                           postdec1	equ	0xFE5
   475                           fsr1l	equ	0xFE1
   476                           
   477                           	psect	dataBANK0
   478  000097                     __pdataBANK0:
   479                           	opt stack 0
   480  000097                     _extFreq:
   481                           	opt stack 0
   482  000097                     	ds	4
   483  00009B                     _flag:
   484                           	opt stack 0
   485  00009B                     	ds	2
   486                           tblptru	equ	0xFF8
   487                           tblptrh	equ	0xFF7
   488                           tblptrl	equ	0xFF6
   489                           tablat	equ	0xFF5
   490                           postinc0	equ	0xFEE
   491                           postdec1	equ	0xFE5
   492                           fsr1l	equ	0xFE1
   493                           
   494                           	psect	cstackBANK0
   495  000080                     __pcstackBANK0:
   496                           	opt stack 0
   497  000080                     ??_service:
   498                           
   499                           ; 1 bytes @ 0x0
   500  000080                     	ds	14
   501  00008E                     ??_lcdNibble:
   502  00008E                     digitalWrite@port:
   503                           	opt stack 0
   504                           
   505                           ; 2 bytes @ 0xE
   506  00008E                     	ds	1
   507  00008F                     lcdNibble@temp:
   508                           	opt stack 0
   509                           
   510                           ; 1 bytes @ 0xF
   511  00008F                     	ds	1
   512  000090                     lcdNibble@data:
   513                           	opt stack 0
   514  000090                     digitalWrite@pin:
   515                           	opt stack 0
   516                           
   517                           ; 2 bytes @ 0x10
   518  000090                     	ds	1
   519  000091                     ??_lcdInst:
   520                           
   521                           ; 1 bytes @ 0x11
   522  000091                     	ds	1
   523  000092                     lcdInst@data:
   524                           	opt stack 0
   525  000092                     digitalWrite@val:
   526                           	opt stack 0
   527                           
   528                           ; 2 bytes @ 0x12
   529  000092                     	ds	1
   530  000093                     ??_initLCD:
   531                           
   532                           ; 1 bytes @ 0x13
   533  000093                     	ds	1
   534  000094                     ??_digitalWrite:
   535                           
   536                           ; 1 bytes @ 0x14
   537  000094                     	ds	3
   538  000097                     tblptru	equ	0xFF8
   539                           tblptrh	equ	0xFF7
   540                           tblptrl	equ	0xFF6
   541                           tablat	equ	0xFF5
   542                           postinc0	equ	0xFEE
   543                           postdec1	equ	0xFE5
   544                           fsr1l	equ	0xFE1
   545                           
   546                           ; 1 bytes @ 0x17
   547                           
   548                           	psect	cstackCOMRAM
   549  000001                     __pcstackCOMRAM:
   550                           	opt stack 0
   551  000001                     ??i2_lcdNibble:
   552  000001                     ?___awmod:
   553                           	opt stack 0
   554  000001                     ?___ftpack:
   555                           	opt stack 0
   556  000001                     ?__tdiv_to_l_:
   557                           	opt stack 0
   558  000001                     ?__div_to_l_:
   559                           	opt stack 0
   560  000001                     ?___lldiv:
   561                           	opt stack 0
   562  000001                     ?___llmod:
   563                           	opt stack 0
   564  000001                     ___awmod@dividend:
   565                           	opt stack 0
   566  000001                     i2digitalWrite@port:
   567                           	opt stack 0
   568  000001                     __div_to_l_@f1:
   569                           	opt stack 0
   570  000001                     ___ftpack@arg:
   571                           	opt stack 0
   572  000001                     __tdiv_to_l_@f1:
   573                           	opt stack 0
   574  000001                     ___ftge@ff1:
   575                           	opt stack 0
   576  000001                     ___lldiv@dividend:
   577                           	opt stack 0
   578  000001                     ___llmod@dividend:
   579                           	opt stack 0
   580                           
   581                           ; 4 bytes @ 0x0
   582  000001                     	ds	1
   583  000002                     i2lcdNibble@temp:
   584                           	opt stack 0
   585                           
   586                           ; 1 bytes @ 0x1
   587  000002                     	ds	1
   588  000003                     i2lcdNibble@data:
   589                           	opt stack 0
   590  000003                     ___awmod@divisor:
   591                           	opt stack 0
   592  000003                     i2digitalWrite@pin:
   593                           	opt stack 0
   594                           
   595                           ; 2 bytes @ 0x2
   596  000003                     	ds	1
   597  000004                     ??i2_lcdInst:
   598  000004                     ___ftpack@exp:
   599                           	opt stack 0
   600  000004                     __div_to_l_@f2:
   601                           	opt stack 0
   602  000004                     __tdiv_to_l_@f2:
   603                           	opt stack 0
   604  000004                     ___ftge@ff2:
   605                           	opt stack 0
   606                           
   607                           ; 3 bytes @ 0x3
   608  000004                     	ds	1
   609  000005                     ___awmod@counter:
   610                           	opt stack 0
   611  000005                     ___ftpack@sign:
   612                           	opt stack 0
   613  000005                     i2lcdInst@data:
   614                           	opt stack 0
   615  000005                     i2digitalWrite@val:
   616                           	opt stack 0
   617  000005                     ___lldiv@divisor:
   618                           	opt stack 0
   619  000005                     ___llmod@divisor:
   620                           	opt stack 0
   621                           
   622                           ; 4 bytes @ 0x4
   623  000005                     	ds	1
   624  000006                     ??___ftpack:
   625  000006                     putch@data:
   626                           	opt stack 0
   627  000006                     ___awmod@sign:
   628                           	opt stack 0
   629                           
   630                           ; 1 bytes @ 0x5
   631  000006                     	ds	1
   632  000007                     ??__tdiv_to_l_:
   633  000007                     ??___ftge:
   634  000007                     ??i2_digitalWrite:
   635  000007                     ?___awdiv:
   636                           	opt stack 0
   637  000007                     ___awdiv@dividend:
   638                           	opt stack 0
   639  000007                     __div_to_l_@quot:
   640                           	opt stack 0
   641                           
   642                           ; 4 bytes @ 0x6
   643  000007                     	ds	2
   644  000009                     ?___altoft:
   645                           	opt stack 0
   646  000009                     ?___lltoft:
   647                           	opt stack 0
   648  000009                     ___llmod@counter:
   649                           	opt stack 0
   650  000009                     ___awdiv@divisor:
   651                           	opt stack 0
   652  000009                     ___altoft@c:
   653                           	opt stack 0
   654  000009                     ___lldiv@quotient:
   655                           	opt stack 0
   656  000009                     ___lltoft@c:
   657                           	opt stack 0
   658                           
   659                           ; 4 bytes @ 0x8
   660  000009                     	ds	1
   661  00000A                     __tdiv_to_l_@quot:
   662                           	opt stack 0
   663                           
   664                           ; 4 bytes @ 0x9
   665  00000A                     	ds	1
   666  00000B                     ___awdiv@counter:
   667                           	opt stack 0
   668  00000B                     __div_to_l_@cntr:
   669                           	opt stack 0
   670                           
   671                           ; 1 bytes @ 0xA
   672  00000B                     	ds	1
   673  00000C                     ___awdiv@sign:
   674                           	opt stack 0
   675  00000C                     __div_to_l_@exp1:
   676                           	opt stack 0
   677                           
   678                           ; 1 bytes @ 0xB
   679  00000C                     	ds	1
   680  00000D                     ??___altoft:
   681  00000D                     ??___lltoft:
   682  00000D                     ___lldiv@counter:
   683                           	opt stack 0
   684  00000D                     ___awdiv@quotient:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0xC
   688  00000D                     	ds	1
   689  00000E                     __tdiv_to_l_@cntr:
   690                           	opt stack 0
   691                           
   692                           ; 1 bytes @ 0xD
   693  00000E                     	ds	1
   694  00000F                     ?___wmul:
   695                           	opt stack 0
   696  00000F                     __tdiv_to_l_@exp1:
   697                           	opt stack 0
   698  00000F                     ___wmul@multiplier:
   699                           	opt stack 0
   700                           
   701                           ; 2 bytes @ 0xE
   702  00000F                     	ds	2
   703  000011                     ___altoft@exp:
   704                           	opt stack 0
   705  000011                     ___lltoft@exp:
   706                           	opt stack 0
   707  000011                     ___wmul@multiplicand:
   708                           	opt stack 0
   709                           
   710                           ; 2 bytes @ 0x10
   711  000011                     	ds	1
   712  000012                     ___altoft@sign:
   713                           	opt stack 0
   714                           
   715                           ; 1 bytes @ 0x11
   716  000012                     	ds	1
   717  000013                     ?___ftdiv:
   718                           	opt stack 0
   719  000013                     ___wmul@product:
   720                           	opt stack 0
   721  000013                     ___ftdiv@f1:
   722                           	opt stack 0
   723                           
   724                           ; 3 bytes @ 0x12
   725  000013                     	ds	3
   726  000016                     ___ftdiv@f2:
   727                           	opt stack 0
   728                           
   729                           ; 3 bytes @ 0x15
   730  000016                     	ds	3
   731  000019                     ??___ftdiv:
   732                           
   733                           ; 1 bytes @ 0x18
   734  000019                     	ds	3
   735  00001C                     ___ftdiv@cntr:
   736                           	opt stack 0
   737                           
   738                           ; 1 bytes @ 0x1B
   739  00001C                     	ds	1
   740  00001D                     ___ftdiv@f3:
   741                           	opt stack 0
   742                           
   743                           ; 3 bytes @ 0x1C
   744  00001D                     	ds	3
   745  000020                     ___ftdiv@exp:
   746                           	opt stack 0
   747                           
   748                           ; 1 bytes @ 0x1F
   749  000020                     	ds	1
   750  000021                     ___ftdiv@sign:
   751                           	opt stack 0
   752                           
   753                           ; 1 bytes @ 0x20
   754  000021                     	ds	1
   755  000022                     ?___ftmul:
   756                           	opt stack 0
   757  000022                     ___ftmul@f1:
   758                           	opt stack 0
   759                           
   760                           ; 3 bytes @ 0x21
   761  000022                     	ds	3
   762  000025                     ___ftmul@f2:
   763                           	opt stack 0
   764                           
   765                           ; 3 bytes @ 0x24
   766  000025                     	ds	3
   767  000028                     ??___ftmul:
   768                           
   769                           ; 1 bytes @ 0x27
   770  000028                     	ds	3
   771  00002B                     ___ftmul@exp:
   772                           	opt stack 0
   773                           
   774                           ; 1 bytes @ 0x2A
   775  00002B                     	ds	1
   776  00002C                     ___ftmul@f3_as_product:
   777                           	opt stack 0
   778                           
   779                           ; 3 bytes @ 0x2B
   780  00002C                     	ds	3
   781  00002F                     ___ftmul@cntr:
   782                           	opt stack 0
   783                           
   784                           ; 1 bytes @ 0x2E
   785  00002F                     	ds	1
   786  000030                     ___ftmul@sign:
   787                           	opt stack 0
   788                           
   789                           ; 1 bytes @ 0x2F
   790  000030                     	ds	1
   791  000031                     ?_fround:
   792                           	opt stack 0
   793  000031                     ?_scale:
   794                           	opt stack 0
   795  000031                     ?___ftneg:
   796                           	opt stack 0
   797  000031                     ___ftneg@f1:
   798                           	opt stack 0
   799                           
   800                           ; 3 bytes @ 0x30
   801  000031                     	ds	3
   802  000034                     _fround$1138:
   803                           	opt stack 0
   804  000034                     _scale$1139:
   805                           	opt stack 0
   806                           
   807                           ; 3 bytes @ 0x33
   808  000034                     	ds	3
   809  000037                     scale@scl:
   810                           	opt stack 0
   811  000037                     _fround$1137:
   812                           	opt stack 0
   813                           
   814                           ; 3 bytes @ 0x36
   815  000037                     	ds	3
   816  00003A                     fround@prec:
   817                           	opt stack 0
   818                           
   819                           ; 1 bytes @ 0x39
   820  00003A                     	ds	1
   821  00003B                     ?___ftadd:
   822                           	opt stack 0
   823  00003B                     ___ftadd@f1:
   824                           	opt stack 0
   825                           
   826                           ; 3 bytes @ 0x3A
   827  00003B                     	ds	3
   828  00003E                     ___ftadd@f2:
   829                           	opt stack 0
   830                           
   831                           ; 3 bytes @ 0x3D
   832  00003E                     	ds	3
   833  000041                     ??___ftadd:
   834                           
   835                           ; 1 bytes @ 0x40
   836  000041                     	ds	3
   837  000044                     ___ftadd@sign:
   838                           	opt stack 0
   839                           
   840                           ; 1 bytes @ 0x43
   841  000044                     	ds	1
   842  000045                     ___ftadd@exp2:
   843                           	opt stack 0
   844                           
   845                           ; 1 bytes @ 0x44
   846  000045                     	ds	1
   847  000046                     ___ftadd@exp1:
   848                           	opt stack 0
   849                           
   850                           ; 1 bytes @ 0x45
   851  000046                     	ds	1
   852  000047                     ?___ftsub:
   853                           	opt stack 0
   854  000047                     ?___fttol:
   855                           	opt stack 0
   856  000047                     ___ftsub@f1:
   857                           	opt stack 0
   858  000047                     ___fttol@f1:
   859                           	opt stack 0
   860                           
   861                           ; 3 bytes @ 0x46
   862  000047                     	ds	3
   863  00004A                     ___ftsub@f2:
   864                           	opt stack 0
   865                           
   866                           ; 3 bytes @ 0x49
   867  00004A                     	ds	1
   868  00004B                     ??___fttol:
   869                           
   870                           ; 1 bytes @ 0x4A
   871  00004B                     	ds	2
   872  00004D                     
   873                           ; 1 bytes @ 0x4C
   874  00004D                     	ds	3
   875  000050                     ___fttol@sign1:
   876                           	opt stack 0
   877                           
   878                           ; 1 bytes @ 0x4F
   879  000050                     	ds	1
   880  000051                     ___fttol@lval:
   881                           	opt stack 0
   882                           
   883                           ; 4 bytes @ 0x50
   884  000051                     	ds	4
   885  000055                     ___fttol@exp1:
   886                           	opt stack 0
   887                           
   888                           ; 1 bytes @ 0x54
   889  000055                     	ds	1
   890  000056                     ?_printf:
   891                           	opt stack 0
   892  000056                     printf@f:
   893                           	opt stack 0
   894  000056                     startT0@milliseconds:
   895                           	opt stack 0
   896                           
   897                           ; 3 bytes @ 0x55
   898  000056                     	ds	3
   899  000059                     _startT0$1134:
   900                           	opt stack 0
   901                           
   902                           ; 3 bytes @ 0x58
   903  000059                     	ds	3
   904  00005C                     ??_printf:
   905  00005C                     _startT0$1135:
   906                           	opt stack 0
   907                           
   908                           ; 3 bytes @ 0x5B
   909  00005C                     	ds	3
   910  00005F                     startT0@time:
   911                           	opt stack 0
   912                           
   913                           ; 4 bytes @ 0x5E
   914  00005F                     	ds	3
   915  000062                     _printf$1140:
   916                           	opt stack 0
   917                           
   918                           ; 3 bytes @ 0x61
   919  000062                     	ds	1
   920  000063                     updateAngle@angle:
   921                           	opt stack 0
   922                           
   923                           ; 3 bytes @ 0x62
   924  000063                     	ds	2
   925  000065                     printf@idx:
   926                           	opt stack 0
   927                           
   928                           ; 1 bytes @ 0x64
   929  000065                     	ds	1
   930  000066                     printf@ap:
   931                           	opt stack 0
   932  000066                     _updateAngle$1136:
   933                           	opt stack 0
   934                           
   935                           ; 3 bytes @ 0x65
   936  000066                     	ds	2
   937  000068                     printf@flag:
   938                           	opt stack 0
   939                           
   940                           ; 2 bytes @ 0x67
   941  000068                     	ds	2
   942  00006A                     printf@prec:
   943                           	opt stack 0
   944                           
   945                           ; 2 bytes @ 0x69
   946  00006A                     	ds	2
   947  00006C                     printf@val:
   948                           	opt stack 0
   949                           
   950                           ; 4 bytes @ 0x6B
   951  00006C                     	ds	4
   952  000070                     printf@exp:
   953                           	opt stack 0
   954                           
   955                           ; 2 bytes @ 0x6F
   956  000070                     	ds	2
   957  000072                     printf@tmpval:
   958                           	opt stack 0
   959                           
   960                           ; 4 bytes @ 0x71
   961  000072                     	ds	4
   962  000076                     printf@fval:
   963                           	opt stack 0
   964                           
   965                           ; 3 bytes @ 0x75
   966  000076                     	ds	3
   967  000079                     printf@c:
   968                           	opt stack 0
   969                           
   970                           ; 1 bytes @ 0x78
   971  000079                     	ds	1
   972  00007A                     service@key:
   973                           	opt stack 0
   974                           
   975                           ; 1 bytes @ 0x79
   976  00007A                     	ds	1
   977                           tblptru	equ	0xFF8
   978                           tblptrh	equ	0xFF7
   979                           tblptrl	equ	0xFF6
   980                           tablat	equ	0xFF5
   981                           postinc0	equ	0xFEE
   982                           postdec1	equ	0xFE5
   983                           fsr1l	equ	0xFE1
   984                           
   985 ;;
   986 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   987 ;;
   988 ;; *************** function _main *****************
   989 ;; Defined at:
   990 ;;		line 23 in file "main.c"
   991 ;; Parameters:    Size  Location     Type
   992 ;;		None
   993 ;; Auto vars:     Size  Location     Type
   994 ;;		None
   995 ;; Return value:  Size  Location     Type
   996 ;;                  1    wreg      void 
   997 ;; Registers used:
   998 ;;		wreg, status,2, status,0, cstack
   999 ;; Tracked objects:
  1000 ;;		On entry : 0/0
  1001 ;;		On exit  : 0/0
  1002 ;;		Unchanged: 0/0
  1003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1007 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1008 ;;Total ram usage:        0 bytes
  1009 ;; Hardware stack levels required when called:    9
  1010 ;; This function calls:
  1011 ;;		_digitalWrite
  1012 ;;		_initLCD
  1013 ;; This function is called by:
  1014 ;;		Startup code after reset
  1015 ;; This function uses a non-reentrant model
  1016 ;;
  1017                           
  1018                           	psect	text0
  1019  002D1C                     __ptext0:
  1020                           	opt stack 0
  1021  002D1C                     _main:
  1022                           	opt stack 22
  1023                           
  1024                           ;main.c: 26: OSCCON = 0xF0;
  1025                           
  1026                           ;incstack = 0
  1027  002D1C  0EF0               	movlw	240
  1028  002D1E  6ED3               	movwf	4051,c	;volatile
  1029                           
  1030                           ;main.c: 27: OSCTUNEbits.PLLEN = 1;
  1031  002D20  8C9B               	bsf	3995,6,c	;volatile
  1032                           
  1033                           ;main.c: 30: TRISA = 0xFF;
  1034  002D22  6892               	setf	3986,c	;volatile
  1035                           
  1036                           ;main.c: 31: TRISB = 0xFF;
  1037  002D24  6893               	setf	3987,c	;volatile
  1038                           
  1039                           ;main.c: 32: TRISC = 0x00;
  1040  002D26  0E00               	movlw	0
  1041  002D28  6E94               	movwf	3988,c	;volatile
  1042                           
  1043                           ;main.c: 33: TRISD = 0x00;
  1044  002D2A  0E00               	movlw	0
  1045  002D2C  6E95               	movwf	3989,c	;volatile
  1046                           
  1047                           ;main.c: 34: TRISE = 0x00;
  1048  002D2E  0E00               	movlw	0
  1049  002D30  6E96               	movwf	3990,c	;volatile
  1050                           
  1051                           ;main.c: 36: LATA = 0x00;
  1052  002D32  0E00               	movlw	0
  1053  002D34  6E89               	movwf	3977,c	;volatile
  1054                           
  1055                           ;main.c: 37: LATB = 0x00;
  1056  002D36  0E00               	movlw	0
  1057  002D38  6E8A               	movwf	3978,c	;volatile
  1058                           
  1059                           ;main.c: 38: LATC = 0x00;
  1060  002D3A  0E00               	movlw	0
  1061  002D3C  6E8B               	movwf	3979,c	;volatile
  1062                           
  1063                           ;main.c: 39: LATD = 0x00;
  1064  002D3E  0E00               	movlw	0
  1065  002D40  6E8C               	movwf	3980,c	;volatile
  1066                           
  1067                           ;main.c: 40: LATE = 0x00;
  1068  002D42  0E00               	movlw	0
  1069  002D44  6E8D               	movwf	3981,c	;volatile
  1070                           
  1071                           ;main.c: 42: ADCON0 = 0x00;
  1072  002D46  0E00               	movlw	0
  1073  002D48  6EC2               	movwf	4034,c	;volatile
  1074                           
  1075                           ;main.c: 43: ADCON1 |= 0x0A;
  1076  002D4A  0E0A               	movlw	10
  1077  002D4C  12C1               	iorwf	4033,f,c	;volatile
  1078                           
  1079                           ;main.c: 47: ADCON2 = 0;
  1080  002D4E  0E00               	movlw	0
  1081  002D50  6EC0               	movwf	4032,c	;volatile
  1082                           
  1083                           ;main.c: 48: ADCON2 |= 0b001;
  1084  002D52  80C0               	bsf	4032,0,c	;volatile
  1085                           
  1086                           ;main.c: 49: ADCON2 |= 0b110<<3;
  1087  002D54  0E30               	movlw	48
  1088  002D56  12C0               	iorwf	4032,f,c	;volatile
  1089                           
  1090                           ;main.c: 50: ADCON2 |= 1<<7;
  1091  002D58  8EC0               	bsf	4032,7,c	;volatile
  1092                           
  1093                           ;main.c: 52: initLCD();
  1094  002D5A  EC4D  F017         	call	_initLCD	;wreg free
  1095                           
  1096                           ;main.c: 58: digitalWrite(2, 1, 1);
  1097  002D5E  0E00               	movlw	0
  1098  002D60  0100               	movlb	0	; () banked
  1099  002D62  6F8F               	movwf	(digitalWrite@port+1)& (0+255),b
  1100  002D64  0E02               	movlw	2
  1101  002D66  6F8E               	movwf	digitalWrite@port& (0+255),b
  1102  002D68  0E00               	movlw	0
  1103  002D6A  0100               	movlb	0	; () banked
  1104  002D6C  6F91               	movwf	(digitalWrite@pin+1)& (0+255),b
  1105  002D6E  0E01               	movlw	1
  1106  002D70  6F90               	movwf	digitalWrite@pin& (0+255),b
  1107  002D72  0E00               	movlw	0
  1108  002D74  0100               	movlb	0	; () banked
  1109  002D76  6F93               	movwf	(digitalWrite@val+1)& (0+255),b
  1110  002D78  0E01               	movlw	1
  1111  002D7A  6F92               	movwf	digitalWrite@val& (0+255),b
  1112  002D7C  EC52  F013         	call	_digitalWrite	;wreg free
  1113  002D80                     l47:
  1114  002D80  D7FF               	goto	l47
  1115  002D82                     __end_of_main:
  1116                           	opt stack 0
  1117                           tblptru	equ	0xFF8
  1118                           tblptrh	equ	0xFF7
  1119                           tblptrl	equ	0xFF6
  1120                           tablat	equ	0xFF5
  1121                           postinc0	equ	0xFEE
  1122                           postdec1	equ	0xFE5
  1123                           fsr1l	equ	0xFE1
  1124                           
  1125 ;; *************** function _initLCD *****************
  1126 ;; Defined at:
  1127 ;;		line 15 in file "lcd.c"
  1128 ;; Parameters:    Size  Location     Type
  1129 ;;		None
  1130 ;; Auto vars:     Size  Location     Type
  1131 ;;		None
  1132 ;; Return value:  Size  Location     Type
  1133 ;;                  1    wreg      void 
  1134 ;; Registers used:
  1135 ;;		wreg, status,2, status,0, cstack
  1136 ;; Tracked objects:
  1137 ;;		On entry : 0/0
  1138 ;;		On exit  : 0/0
  1139 ;;		Unchanged: 0/0
  1140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1143 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1144 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1145 ;;Total ram usage:        1 bytes
  1146 ;; Hardware stack levels used:    1
  1147 ;; Hardware stack levels required when called:    8
  1148 ;; This function calls:
  1149 ;;		_lcdInst
  1150 ;; This function is called by:
  1151 ;;		_main
  1152 ;; This function uses a non-reentrant model
  1153 ;;
  1154                           
  1155                           	psect	text1
  1156  002E9A                     __ptext1:
  1157                           	opt stack 0
  1158  002E9A                     _initLCD:
  1159                           	opt stack 22
  1160                           
  1161                           ;lcd.c: 17: _delay((unsigned long)((15)*(32000000/4000.0)));
  1162                           
  1163                           ;incstack = 0
  1164  002E9A  0E9C               	movlw	156
  1165  002E9C  0100               	movlb	0	; () banked
  1166  002E9E  6F93               	movwf	??_initLCD& (0+255),b
  1167  002EA0  0ED7               	movlw	215
  1168  002EA2                     u3357:
  1169  002EA2  2EE8               	decfsz	wreg,f,c
  1170  002EA4  D7FE               	bra	u3357
  1171  002EA6  2F93               	decfsz	??_initLCD& (0+255),f,b
  1172  002EA8  D7FC               	bra	u3357
  1173                           
  1174                           ;lcd.c: 18: lcdInst(0b00110011);
  1175  002EAA  0E33               	movlw	51
  1176  002EAC  EC90  F017         	call	_lcdInst
  1177                           
  1178                           ;lcd.c: 19: lcdInst(0b00110010);
  1179  002EB0  0E32               	movlw	50
  1180  002EB2  EC90  F017         	call	_lcdInst
  1181                           
  1182                           ;lcd.c: 20: lcdInst(0b00101000);
  1183  002EB6  0E28               	movlw	40
  1184  002EB8  EC90  F017         	call	_lcdInst
  1185                           
  1186                           ;lcd.c: 21: lcdInst(0b00001111);
  1187  002EBC  0E0F               	movlw	15
  1188  002EBE  EC90  F017         	call	_lcdInst
  1189                           
  1190                           ;lcd.c: 22: lcdInst(0b00000110);
  1191  002EC2  0E06               	movlw	6
  1192  002EC4  EC90  F017         	call	_lcdInst
  1193                           
  1194                           ;lcd.c: 23: lcdInst(0b00000001);
  1195  002EC8  0E01               	movlw	1
  1196  002ECA  EC90  F017         	call	_lcdInst
  1197                           
  1198                           ;lcd.c: 24: _delay((unsigned long)((15)*(32000000/4000.0)));
  1199  002ECE  0E9C               	movlw	156
  1200  002ED0  0100               	movlb	0	; () banked
  1201  002ED2  6F93               	movwf	??_initLCD& (0+255),b
  1202  002ED4  0ED7               	movlw	215
  1203  002ED6                     u3367:
  1204  002ED6  2EE8               	decfsz	wreg,f,c
  1205  002ED8  D7FE               	bra	u3367
  1206  002EDA  2F93               	decfsz	??_initLCD& (0+255),f,b
  1207  002EDC  D7FC               	bra	u3367
  1208  002EDE  0012               	return		;funcret
  1209  002EE0                     __end_of_initLCD:
  1210                           	opt stack 0
  1211                           tblptru	equ	0xFF8
  1212                           tblptrh	equ	0xFF7
  1213                           tblptrl	equ	0xFF6
  1214                           tablat	equ	0xFF5
  1215                           postinc0	equ	0xFEE
  1216                           wreg	equ	0xFE8
  1217                           postdec1	equ	0xFE5
  1218                           fsr1l	equ	0xFE1
  1219                           
  1220 ;; *************** function _lcdInst *****************
  1221 ;; Defined at:
  1222 ;;		line 27 in file "lcd.c"
  1223 ;; Parameters:    Size  Location     Type
  1224 ;;  data            1    wreg     unsigned char 
  1225 ;; Auto vars:     Size  Location     Type
  1226 ;;  data            1   18[BANK0 ] unsigned char 
  1227 ;; Return value:  Size  Location     Type
  1228 ;;                  1    wreg      void 
  1229 ;; Registers used:
  1230 ;;		wreg, status,2, status,0, cstack
  1231 ;; Tracked objects:
  1232 ;;		On entry : 0/0
  1233 ;;		On exit  : 0/0
  1234 ;;		Unchanged: 0/0
  1235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1237 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1238 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1239 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1240 ;;Total ram usage:        2 bytes
  1241 ;; Hardware stack levels used:    1
  1242 ;; Hardware stack levels required when called:    7
  1243 ;; This function calls:
  1244 ;;		_lcdNibble
  1245 ;; This function is called by:
  1246 ;;		_initLCD
  1247 ;;		_lcdHome
  1248 ;; This function uses a non-reentrant model
  1249 ;;
  1250                           
  1251                           	psect	text2
  1252  002F20                     __ptext2:
  1253                           	opt stack 0
  1254  002F20                     _lcdInst:
  1255                           	opt stack 22
  1256                           
  1257                           ;incstack = 0
  1258                           ;lcdInst@data stored from wreg
  1259  002F20  0100               	movlb	0	; () banked
  1260  002F22  6F92               	movwf	lcdInst@data& (0+255),b
  1261                           
  1262                           ;lcd.c: 28: LATDbits.LATD2 = 0;
  1263  002F24  948C               	bcf	3980,2,c	;volatile
  1264                           
  1265                           ;lcd.c: 29: _delay((unsigned long)((140)*(32000000/4000000.0)));
  1266  002F26  0EE0               	movlw	224
  1267  002F28                     u3377:
  1268  002F28  D000               	nop2	
  1269  002F2A  2EE8               	decfsz	wreg,f,c
  1270  002F2C  D7FD               	bra	u3377
  1271                           
  1272                           ;lcd.c: 30: lcdNibble(data);
  1273  002F2E  0100               	movlb	0	; () banked
  1274  002F30  5192               	movf	lcdInst@data& (0+255),w,b
  1275  002F32  ECCC  F014         	call	_lcdNibble
  1276                           
  1277                           ;lcd.c: 31: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  1278  002F36  0E0B               	movlw	11
  1279  002F38  0100               	movlb	0	; () banked
  1280  002F3A  6F91               	movwf	??_lcdInst& (0+255),b
  1281  002F3C  0E62               	movlw	98
  1282  002F3E                     u3387:
  1283  002F3E  2EE8               	decfsz	wreg,f,c
  1284  002F40  D7FE               	bra	u3387
  1285  002F42  2F91               	decfsz	??_lcdInst& (0+255),f,b
  1286  002F44  D7FC               	bra	u3387
  1287  002F46  F000               	nop	
  1288  002F48  0012               	return		;funcret
  1289  002F4A                     __end_of_lcdInst:
  1290                           	opt stack 0
  1291                           tblptru	equ	0xFF8
  1292                           tblptrh	equ	0xFF7
  1293                           tblptrl	equ	0xFF6
  1294                           tablat	equ	0xFF5
  1295                           postinc0	equ	0xFEE
  1296                           wreg	equ	0xFE8
  1297                           postdec1	equ	0xFE5
  1298                           fsr1l	equ	0xFE1
  1299                           
  1300 ;; *************** function _lcdNibble *****************
  1301 ;; Defined at:
  1302 ;;		line 46 in file "lcd.c"
  1303 ;; Parameters:    Size  Location     Type
  1304 ;;  data            1    wreg     unsigned char 
  1305 ;; Auto vars:     Size  Location     Type
  1306 ;;  data            1   16[BANK0 ] unsigned char 
  1307 ;;  temp            1   15[BANK0 ] unsigned char 
  1308 ;; Return value:  Size  Location     Type
  1309 ;;                  1    wreg      void 
  1310 ;; Registers used:
  1311 ;;		wreg, status,2, status,0
  1312 ;; Tracked objects:
  1313 ;;		On entry : 0/0
  1314 ;;		On exit  : 0/0
  1315 ;;		Unchanged: 0/0
  1316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1318 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1319 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1320 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1321 ;;Total ram usage:        3 bytes
  1322 ;; Hardware stack levels used:    1
  1323 ;; Hardware stack levels required when called:    6
  1324 ;; This function calls:
  1325 ;;		Nothing
  1326 ;; This function is called by:
  1327 ;;		_lcdInst
  1328 ;; This function uses a non-reentrant model
  1329 ;;
  1330                           
  1331                           	psect	text3
  1332  002998                     __ptext3:
  1333                           	opt stack 0
  1334  002998                     _lcdNibble:
  1335                           	opt stack 22
  1336                           
  1337                           ;incstack = 0
  1338                           ;lcdNibble@data stored from wreg
  1339  002998  0100               	movlb	0	; () banked
  1340  00299A  6F90               	movwf	lcdNibble@data& (0+255),b
  1341                           
  1342                           ;lcd.c: 48: char temp = data & 0xF0;
  1343  00299C  0100               	movlb	0	; () banked
  1344  00299E  5190               	movf	lcdNibble@data& (0+255),w,b
  1345  0029A0  0BF0               	andlw	240
  1346  0029A2  0100               	movlb	0	; () banked
  1347  0029A4  6F8F               	movwf	lcdNibble@temp& (0+255),b
  1348                           
  1349                           ;lcd.c: 49: LATD = LATD & 0x0F;
  1350  0029A6  508C               	movf	3980,w,c	;volatile
  1351  0029A8  0B0F               	andlw	15
  1352  0029AA  6E8C               	movwf	3980,c	;volatile
  1353                           
  1354                           ;lcd.c: 50: LATD = temp | LATD;
  1355  0029AC  0100               	movlb	0	; () banked
  1356  0029AE  518F               	movf	lcdNibble@temp& (0+255),w,b
  1357  0029B0  108C               	iorwf	3980,w,c	;volatile
  1358  0029B2  6E8C               	movwf	3980,c	;volatile
  1359                           
  1360                           ; BSR set to: 0
  1361                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  1362  0029B4  968C               	bcf	3980,3,c	;volatile
  1363                           
  1364                           ; BSR set to: 0
  1365                           ;lcd.c: 53: _delay((unsigned long)((600)*(32000000/4000000.0)));
  1366  0029B6  0E07               	movlw	7
  1367  0029B8  0100               	movlb	0	; () banked
  1368  0029BA  6F8E               	movwf	??_lcdNibble& (0+255),b
  1369  0029BC  0E3A               	movlw	58
  1370  0029BE                     u3397:
  1371  0029BE  2EE8               	decfsz	wreg,f,c
  1372  0029C0  D7FE               	bra	u3397
  1373  0029C2  2F8E               	decfsz	??_lcdNibble& (0+255),f,b
  1374  0029C4  D7FC               	bra	u3397
  1375  0029C6  F000               	nop	
  1376                           
  1377                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  1378  0029C8  868C               	bsf	3980,3,c	;volatile
  1379                           
  1380                           ;lcd.c: 55: _delay((unsigned long)((600)*(32000000/4000000.0)));
  1381  0029CA  0E07               	movlw	7
  1382  0029CC  0100               	movlb	0	; () banked
  1383  0029CE  6F8E               	movwf	??_lcdNibble& (0+255),b
  1384  0029D0  0E3A               	movlw	58
  1385  0029D2                     u3407:
  1386  0029D2  2EE8               	decfsz	wreg,f,c
  1387  0029D4  D7FE               	bra	u3407
  1388  0029D6  2F8E               	decfsz	??_lcdNibble& (0+255),f,b
  1389  0029D8  D7FC               	bra	u3407
  1390  0029DA  F000               	nop	
  1391                           
  1392                           ;lcd.c: 58: data = data << 4;
  1393  0029DC  0100               	movlb	0	; () banked
  1394  0029DE  3990               	swapf	lcdNibble@data& (0+255),w,b
  1395  0029E0  0BF0               	andlw	240
  1396  0029E2  0100               	movlb	0	; () banked
  1397  0029E4  6F90               	movwf	lcdNibble@data& (0+255),b
  1398                           
  1399                           ;lcd.c: 60: temp = data & 0xF0;
  1400  0029E6  0100               	movlb	0	; () banked
  1401  0029E8  5190               	movf	lcdNibble@data& (0+255),w,b
  1402  0029EA  0BF0               	andlw	240
  1403  0029EC  0100               	movlb	0	; () banked
  1404  0029EE  6F8F               	movwf	lcdNibble@temp& (0+255),b
  1405                           
  1406                           ;lcd.c: 61: LATD = LATD & 0x0F;
  1407  0029F0  508C               	movf	3980,w,c	;volatile
  1408  0029F2  0B0F               	andlw	15
  1409  0029F4  6E8C               	movwf	3980,c	;volatile
  1410                           
  1411                           ;lcd.c: 62: LATD = temp | LATD;
  1412  0029F6  0100               	movlb	0	; () banked
  1413  0029F8  518F               	movf	lcdNibble@temp& (0+255),w,b
  1414  0029FA  108C               	iorwf	3980,w,c	;volatile
  1415  0029FC  6E8C               	movwf	3980,c	;volatile
  1416                           
  1417                           ; BSR set to: 0
  1418                           ;lcd.c: 64: LATDbits.LATD3 = 0;
  1419  0029FE  968C               	bcf	3980,3,c	;volatile
  1420                           
  1421                           ; BSR set to: 0
  1422                           ;lcd.c: 65: _delay((unsigned long)((600)*(32000000/4000000.0)));
  1423  002A00  0E07               	movlw	7
  1424  002A02  0100               	movlb	0	; () banked
  1425  002A04  6F8E               	movwf	??_lcdNibble& (0+255),b
  1426  002A06  0E3A               	movlw	58
  1427  002A08                     u3417:
  1428  002A08  2EE8               	decfsz	wreg,f,c
  1429  002A0A  D7FE               	bra	u3417
  1430  002A0C  2F8E               	decfsz	??_lcdNibble& (0+255),f,b
  1431  002A0E  D7FC               	bra	u3417
  1432  002A10  F000               	nop	
  1433                           
  1434                           ;lcd.c: 66: LATDbits.LATD3 = 1;
  1435  002A12  868C               	bsf	3980,3,c	;volatile
  1436                           
  1437                           ;lcd.c: 67: _delay((unsigned long)((600)*(32000000/4000000.0)));
  1438  002A14  0E07               	movlw	7
  1439  002A16  0100               	movlb	0	; () banked
  1440  002A18  6F8E               	movwf	??_lcdNibble& (0+255),b
  1441  002A1A  0E3A               	movlw	58
  1442  002A1C                     u3427:
  1443  002A1C  2EE8               	decfsz	wreg,f,c
  1444  002A1E  D7FE               	bra	u3427
  1445  002A20  2F8E               	decfsz	??_lcdNibble& (0+255),f,b
  1446  002A22  D7FC               	bra	u3427
  1447  002A24  F000               	nop	
  1448  002A26  0012               	return		;funcret
  1449  002A28                     __end_of_lcdNibble:
  1450                           	opt stack 0
  1451                           tblptru	equ	0xFF8
  1452                           tblptrh	equ	0xFF7
  1453                           tblptrl	equ	0xFF6
  1454                           tablat	equ	0xFF5
  1455                           postinc0	equ	0xFEE
  1456                           wreg	equ	0xFE8
  1457                           postdec1	equ	0xFE5
  1458                           fsr1l	equ	0xFE1
  1459                           
  1460 ;; *************** function _digitalWrite *****************
  1461 ;; Defined at:
  1462 ;;		line 53 in file "iopin.c"
  1463 ;; Parameters:    Size  Location     Type
  1464 ;;  port            2   14[BANK0 ] int 
  1465 ;;  pin             2   16[BANK0 ] int 
  1466 ;;  val             2   18[BANK0 ] int 
  1467 ;; Auto vars:     Size  Location     Type
  1468 ;;		None
  1469 ;; Return value:  Size  Location     Type
  1470 ;;                  1    wreg      void 
  1471 ;; Registers used:
  1472 ;;		wreg, status,2, status,0
  1473 ;; Tracked objects:
  1474 ;;		On entry : 0/0
  1475 ;;		On exit  : 0/0
  1476 ;;		Unchanged: 0/0
  1477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1478 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1480 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1481 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1482 ;;Total ram usage:        9 bytes
  1483 ;; Hardware stack levels used:    1
  1484 ;; Hardware stack levels required when called:    6
  1485 ;; This function calls:
  1486 ;;		Nothing
  1487 ;; This function is called by:
  1488 ;;		_main
  1489 ;;		_initServo
  1490 ;; This function uses a non-reentrant model
  1491 ;;
  1492                           
  1493                           	psect	text4
  1494  0026A4                     __ptext4:
  1495                           	opt stack 0
  1496  0026A4                     _digitalWrite:
  1497                           	opt stack 24
  1498                           
  1499                           ;iopin.c: 54: pin = 1 << pin;
  1500                           
  1501                           ;incstack = 0
  1502  0026A4  C090  F094         	movff	digitalWrite@pin,??_digitalWrite
  1503  0026A8  0E01               	movlw	1
  1504  0026AA  0100               	movlb	0	; () banked
  1505  0026AC  6F95               	movwf	(??_digitalWrite+1)& (0+255),b
  1506  0026AE  0E00               	movlw	0
  1507  0026B0  0100               	movlb	0	; () banked
  1508  0026B2  6F96               	movwf	(??_digitalWrite+2)& (0+255),b
  1509  0026B4  0100               	movlb	0	; () banked
  1510  0026B6  2B94               	incf	??_digitalWrite& (0+255),f,b
  1511  0026B8  D004               	goto	u2834
  1512  0026BA                     u2835:
  1513  0026BA  90D8               	bcf	status,0,c
  1514  0026BC  0100               	movlb	0	; () banked
  1515  0026BE  3795               	rlcf	(??_digitalWrite+1)& (0+255),f,b
  1516  0026C0  3796               	rlcf	(??_digitalWrite+2)& (0+255),f,b
  1517  0026C2                     u2834:
  1518  0026C2  0100               	movlb	0	; () banked
  1519  0026C4  2F94               	decfsz	??_digitalWrite& (0+255),f,b
  1520  0026C6  D7F9               	goto	u2835
  1521  0026C8  C095  F090         	movff	??_digitalWrite+1,digitalWrite@pin
  1522  0026CC  C096  F091         	movff	??_digitalWrite+2,digitalWrite@pin+1
  1523                           
  1524                           ;iopin.c: 55: if(val == 0){
  1525  0026D0  0100               	movlb	0	; () banked
  1526  0026D2  5192               	movf	digitalWrite@val& (0+255),w,b
  1527  0026D4  0100               	movlb	0	; () banked
  1528  0026D6  1193               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  1529  0026D8  A4D8               	btfss	status,2,c
  1530  0026DA  D03C               	goto	l3249
  1531                           
  1532                           ; BSR set to: 0
  1533                           ;iopin.c: 56: pin ^= 0xff;
  1534  0026DC  0EFF               	movlw	255
  1535  0026DE  0100               	movlb	0	; () banked
  1536  0026E0  1B90               	xorwf	digitalWrite@pin& (0+255),f,b
  1537                           
  1538                           ; BSR set to: 0
  1539                           ;iopin.c: 57: }
  1540                           ;iopin.c: 59: switch(port){
  1541  0026E2  D038               	goto	l3249
  1542  0026E4                     l3225:
  1543                           
  1544                           ; BSR set to: 0
  1545  0026E4  0100               	movlb	0	; () banked
  1546  0026E6  0592               	decf	digitalWrite@val& (0+255),w,b
  1547  0026E8  0100               	movlb	0	; () banked
  1548  0026EA  1193               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  1549  0026EC  A4D8               	btfss	status,2,c
  1550  0026EE  D004               	goto	l3229
  1551                           
  1552                           ; BSR set to: 0
  1553  0026F0  0100               	movlb	0	; () banked
  1554  0026F2  5190               	movf	digitalWrite@pin& (0+255),w,b
  1555  0026F4  1289               	iorwf	3977,f,c	;volatile
  1556  0026F6  0012               	return	
  1557  0026F8                     l3229:
  1558                           
  1559                           ; BSR set to: 0
  1560                           ;iopin.c: 61: else LATA &= pin;
  1561  0026F8  0100               	movlb	0	; () banked
  1562  0026FA  5190               	movf	digitalWrite@pin& (0+255),w,b
  1563  0026FC  1689               	andwf	3977,f,c	;volatile
  1564                           
  1565                           ; BSR set to: 0
  1566                           ;iopin.c: 62: break;
  1567  0026FE  0012               	return	
  1568  002700                     l3231:
  1569                           
  1570                           ; BSR set to: 0
  1571  002700  0100               	movlb	0	; () banked
  1572  002702  0592               	decf	digitalWrite@val& (0+255),w,b
  1573  002704  0100               	movlb	0	; () banked
  1574  002706  1193               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  1575  002708  A4D8               	btfss	status,2,c
  1576  00270A  D004               	goto	l3235
  1577                           
  1578                           ; BSR set to: 0
  1579  00270C  0100               	movlb	0	; () banked
  1580  00270E  5190               	movf	digitalWrite@pin& (0+255),w,b
  1581  002710  128A               	iorwf	3978,f,c	;volatile
  1582  002712  0012               	return	
  1583  002714                     l3235:
  1584                           
  1585                           ; BSR set to: 0
  1586                           ;iopin.c: 64: else LATB &= pin;
  1587  002714  0100               	movlb	0	; () banked
  1588  002716  5190               	movf	digitalWrite@pin& (0+255),w,b
  1589  002718  168A               	andwf	3978,f,c	;volatile
  1590                           
  1591                           ; BSR set to: 0
  1592                           ;iopin.c: 65: break;
  1593  00271A  0012               	return	
  1594  00271C                     l3237:
  1595                           
  1596                           ; BSR set to: 0
  1597  00271C  0100               	movlb	0	; () banked
  1598  00271E  0592               	decf	digitalWrite@val& (0+255),w,b
  1599  002720  0100               	movlb	0	; () banked
  1600  002722  1193               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  1601  002724  A4D8               	btfss	status,2,c
  1602  002726  D004               	goto	l3241
  1603                           
  1604                           ; BSR set to: 0
  1605  002728  0100               	movlb	0	; () banked
  1606  00272A  5190               	movf	digitalWrite@pin& (0+255),w,b
  1607  00272C  128B               	iorwf	3979,f,c	;volatile
  1608  00272E  0012               	return	
  1609  002730                     l3241:
  1610                           
  1611                           ; BSR set to: 0
  1612                           ;iopin.c: 67: else LATC &= pin;
  1613  002730  0100               	movlb	0	; () banked
  1614  002732  5190               	movf	digitalWrite@pin& (0+255),w,b
  1615  002734  168B               	andwf	3979,f,c	;volatile
  1616                           
  1617                           ; BSR set to: 0
  1618                           ;iopin.c: 68: break;
  1619  002736  0012               	return	
  1620  002738                     l3243:
  1621                           
  1622                           ; BSR set to: 0
  1623  002738  0100               	movlb	0	; () banked
  1624  00273A  0592               	decf	digitalWrite@val& (0+255),w,b
  1625  00273C  0100               	movlb	0	; () banked
  1626  00273E  1193               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  1627  002740  A4D8               	btfss	status,2,c
  1628  002742  D004               	goto	l3247
  1629                           
  1630                           ; BSR set to: 0
  1631  002744  0100               	movlb	0	; () banked
  1632  002746  5190               	movf	digitalWrite@pin& (0+255),w,b
  1633  002748  128C               	iorwf	3980,f,c	;volatile
  1634  00274A  0012               	return	
  1635  00274C                     l3247:
  1636                           
  1637                           ; BSR set to: 0
  1638                           ;iopin.c: 70: else LATD &= pin;
  1639  00274C  0100               	movlb	0	; () banked
  1640  00274E  5190               	movf	digitalWrite@pin& (0+255),w,b
  1641  002750  168C               	andwf	3980,f,c	;volatile
  1642                           
  1643                           ; BSR set to: 0
  1644                           ;iopin.c: 71: }
  1645  002752  0012               	return	
  1646  002754                     l3249:
  1647                           
  1648                           ; BSR set to: 0
  1649  002754  C08E  F094         	movff	digitalWrite@port,??_digitalWrite
  1650  002758  C08F  F095         	movff	digitalWrite@port+1,??_digitalWrite+1
  1651                           
  1652                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1653                           ; Switch size 1, requested type "space"
  1654                           ; Number of cases is 1, Range of values is 0 to 0
  1655                           ; switch strategies available:
  1656                           ; Name         Instructions Cycles
  1657                           ; simple_byte            4     3 (average)
  1658                           ;	Chosen strategy is simple_byte
  1659  00275C  0100               	movlb	0	; () banked
  1660  00275E  5195               	movf	(??_digitalWrite+1)& (0+255),w,b
  1661  002760  0A00               	xorlw	0	; case 0
  1662  002762  A4D8               	btfss	status,2,c
  1663  002764  0012               	return	
  1664                           
  1665                           ; BSR set to: 0
  1666                           ; Switch size 1, requested type "space"
  1667                           ; Number of cases is 4, Range of values is 0 to 3
  1668                           ; switch strategies available:
  1669                           ; Name         Instructions Cycles
  1670                           ; simple_byte           13     7 (average)
  1671                           ;	Chosen strategy is simple_byte
  1672  002766  0100               	movlb	0	; () banked
  1673  002768  5194               	movf	??_digitalWrite& (0+255),w,b
  1674  00276A  0A00               	xorlw	0	; case 0
  1675  00276C  B4D8               	btfsc	status,2,c
  1676  00276E  D7BA               	goto	l3225
  1677  002770  0A01               	xorlw	1	; case 1
  1678  002772  B4D8               	btfsc	status,2,c
  1679  002774  D7C5               	goto	l3231
  1680  002776  0A03               	xorlw	3	; case 2
  1681  002778  B4D8               	btfsc	status,2,c
  1682  00277A  D7D0               	goto	l3237
  1683  00277C  0A01               	xorlw	1	; case 3
  1684  00277E  A4D8               	btfss	status,2,c
  1685  002780  0012               	return	
  1686  002782  D7DA               	goto	l3243
  1687  002784                     __end_of_digitalWrite:
  1688                           	opt stack 0
  1689                           tblptru	equ	0xFF8
  1690                           tblptrh	equ	0xFF7
  1691                           tblptrl	equ	0xFF6
  1692                           tablat	equ	0xFF5
  1693                           postinc0	equ	0xFEE
  1694                           wreg	equ	0xFE8
  1695                           postdec1	equ	0xFE5
  1696                           fsr1l	equ	0xFE1
  1697                           status	equ	0xFD8
  1698                           
  1699 ;; *************** function _service *****************
  1700 ;; Defined at:
  1701 ;;		line 67 in file "main.c"
  1702 ;; Parameters:    Size  Location     Type
  1703 ;;		None
  1704 ;; Auto vars:     Size  Location     Type
  1705 ;;  key             1  121[COMRAM] unsigned char 
  1706 ;; Return value:  Size  Location     Type
  1707 ;;                  1    wreg      void 
  1708 ;; Registers used:
  1709 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1710 ;; Tracked objects:
  1711 ;;		On entry : 0/0
  1712 ;;		On exit  : 0/0
  1713 ;;		Unchanged: 0/0
  1714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1716 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1717 ;;      Temps:          0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1718 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1719 ;;Total ram usage:       15 bytes
  1720 ;; Hardware stack levels used:    1
  1721 ;; Hardware stack levels required when called:    5
  1722 ;; This function calls:
  1723 ;;		___ftadd
  1724 ;;		___ftsub
  1725 ;;		_lcdClear
  1726 ;;		_printf
  1727 ;;		_updateAngle
  1728 ;; This function is called by:
  1729 ;;		Interrupt level 2
  1730 ;; This function uses a non-reentrant model
  1731 ;;
  1732                           
  1733                           	psect	intcode
  1734  000008                     __pintcode:
  1735                           	opt stack 0
  1736  000008                     _service:
  1737                           	opt stack 22
  1738                           
  1739                           ; BSR set to: 0
  1740                           ;incstack = 0
  1741  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1742  00000A  EDE5  F010         	call	int_func,f	;refresh shadow registers
  1743                           tblptru	equ	0xFF8
  1744                           tblptrh	equ	0xFF7
  1745                           tblptrl	equ	0xFF6
  1746                           tablat	equ	0xFF5
  1747                           postinc0	equ	0xFEE
  1748                           wreg	equ	0xFE8
  1749                           postdec1	equ	0xFE5
  1750                           fsr1l	equ	0xFE1
  1751                           status	equ	0xFD8
  1752                           
  1753                           	psect	intcode_body
  1754  0021CA                     __pintcode_body:
  1755                           	opt stack 22
  1756  0021CA                     int_func:
  1757                           	opt stack 22
  1758  0021CA  0006               	pop		; remove dummy address from shadow register refresh
  1759  0021CC  CFFA F080          	movff	pclath,??_service
  1760  0021D0  CFFB F081          	movff	pclatu,??_service+1
  1761  0021D4  CFE9 F082          	movff	fsr0l,??_service+2
  1762  0021D8  CFEA F083          	movff	fsr0h,??_service+3
  1763  0021DC  CFE1 F084          	movff	fsr1l,??_service+4
  1764  0021E0  CFE2 F085          	movff	fsr1h,??_service+5
  1765  0021E4  CFD9 F086          	movff	fsr2l,??_service+6
  1766  0021E8  CFDA F087          	movff	fsr2h,??_service+7
  1767  0021EC  CFF3 F088          	movff	prodl,??_service+8
  1768  0021F0  CFF4 F089          	movff	prodh,??_service+9
  1769  0021F4  CFF6 F08A          	movff	tblptrl,??_service+10
  1770  0021F8  CFF7 F08B          	movff	tblptrh,??_service+11
  1771  0021FC  CFF8 F08C          	movff	tblptru,??_service+12
  1772  002200  CFF5 F08D          	movff	tablat,??_service+13
  1773                           
  1774                           ;main.c: 69: updateAngle(angle);
  1775  002204  C07B  F063         	movff	_angle,updateAngle@angle
  1776  002208  C07C  F064         	movff	_angle+1,updateAngle@angle+1
  1777  00220C  C07D  F065         	movff	_angle+2,updateAngle@angle+2
  1778  002210  ECC2  F013         	call	_updateAngle	;wreg free
  1779                           
  1780                           ;main.c: 71: if(INT1IF){
  1781  002214  A0F0               	btfss	intcon3,0,c	;volatile
  1782  002216  D043               	goto	i2l62
  1783                           
  1784                           ;main.c: 73: lcdClear();
  1785  002218  ECF1  F017         	call	_lcdClear	;wreg free
  1786                           
  1787                           ;main.c: 74: char key = (PORTB & 0xF0) >> 4;
  1788  00221C  3881               	swapf	3969,w,c	;volatile
  1789  00221E  0B0F               	andlw	15
  1790  002220  0B0F               	andlw	15
  1791  002222  6E7A               	movwf	service@key,c
  1792                           
  1793                           ;main.c: 75: if(key == 2) angle +=.1;
  1794  002224  0E02               	movlw	2
  1795  002226  187A               	xorwf	service@key,w,c
  1796  002228  A4D8               	btfss	status,2,c
  1797  00222A  D014               	goto	i2l3489
  1798  00222C  C07B  F03B         	movff	_angle,___ftadd@f1
  1799  002230  C07C  F03C         	movff	_angle+1,___ftadd@f1+1
  1800  002234  C07D  F03D         	movff	_angle+2,___ftadd@f1+2
  1801  002238  0ECD               	movlw	205
  1802  00223A  6E3E               	movwf	___ftadd@f2,c
  1803  00223C  0ECC               	movlw	204
  1804  00223E  6E3F               	movwf	___ftadd@f2+1,c
  1805  002240  0E3D               	movlw	61
  1806  002242  6E40               	movwf	___ftadd@f2+2,c
  1807  002244  ECE2  F00E         	call	___ftadd	;wreg free
  1808  002248  C03B  F07B         	movff	?___ftadd,_angle
  1809  00224C  C03C  F07C         	movff	?___ftadd+1,_angle+1
  1810  002250  C03D  F07D         	movff	?___ftadd+2,_angle+2
  1811  002254                     i2l3489:
  1812                           
  1813                           ;main.c: 76: if(key == 3) angle -=.1;
  1814  002254  0E03               	movlw	3
  1815  002256  187A               	xorwf	service@key,w,c
  1816  002258  A4D8               	btfss	status,2,c
  1817  00225A  D014               	goto	i2l3493
  1818  00225C  C07B  F047         	movff	_angle,___ftsub@f1
  1819  002260  C07C  F048         	movff	_angle+1,___ftsub@f1+1
  1820  002264  C07D  F049         	movff	_angle+2,___ftsub@f1+2
  1821  002268  0ECD               	movlw	205
  1822  00226A  6E4A               	movwf	___ftsub@f2,c
  1823  00226C  0ECC               	movlw	204
  1824  00226E  6E4B               	movwf	___ftsub@f2+1,c
  1825  002270  0E3D               	movlw	61
  1826  002272  6E4C               	movwf	___ftsub@f2+2,c
  1827  002274  EC70  F017         	call	___ftsub	;wreg free
  1828  002278  C047  F07B         	movff	?___ftsub,_angle
  1829  00227C  C048  F07C         	movff	?___ftsub+1,_angle+1
  1830  002280  C049  F07D         	movff	?___ftsub+2,_angle+2
  1831  002284                     i2l3493:
  1832                           
  1833                           ;main.c: 77: printf("angle %f",angle);
  1834  002284  0ED0               	movlw	low STR_1
  1835  002286  6E56               	movwf	printf@f,c
  1836  002288  0E10               	movlw	high STR_1
  1837  00228A  6E57               	movwf	printf@f+1,c
  1838  00228C  C07B  F058         	movff	_angle,?_printf+2
  1839  002290  C07C  F059         	movff	_angle+1,?_printf+3
  1840  002294  C07D  F05A         	movff	_angle+2,?_printf+4
  1841  002298  EC71  F008         	call	_printf	;wreg free
  1842                           
  1843                           ;main.c: 78: INT1IF = 0;
  1844  00229C  90F0               	bcf	intcon3,0,c	;volatile
  1845  00229E                     i2l62:
  1846  00229E  C08D  FFF5         	movff	??_service+13,tablat
  1847  0022A2  C08C  FFF8         	movff	??_service+12,tblptru
  1848  0022A6  C08B  FFF7         	movff	??_service+11,tblptrh
  1849  0022AA  C08A  FFF6         	movff	??_service+10,tblptrl
  1850  0022AE  C089  FFF4         	movff	??_service+9,prodh
  1851  0022B2  C088  FFF3         	movff	??_service+8,prodl
  1852  0022B6  C087  FFDA         	movff	??_service+7,fsr2h
  1853  0022BA  C086  FFD9         	movff	??_service+6,fsr2l
  1854  0022BE  C085  FFE2         	movff	??_service+5,fsr1h
  1855  0022C2  C084  FFE1         	movff	??_service+4,fsr1l
  1856  0022C6  C083  FFEA         	movff	??_service+3,fsr0h
  1857  0022CA  C082  FFE9         	movff	??_service+2,fsr0l
  1858  0022CE  C081  FFFB         	movff	??_service+1,pclatu
  1859  0022D2  C080  FFFA         	movff	??_service,pclath
  1860  0022D6  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1861  0022D8  0011               	retfie		f
  1862  0022DA                     __end_of_service:
  1863                           	opt stack 0
  1864                           pclatu	equ	0xFFB
  1865                           pclath	equ	0xFFA
  1866                           tblptru	equ	0xFF8
  1867                           tblptrh	equ	0xFF7
  1868                           tblptrl	equ	0xFF6
  1869                           tablat	equ	0xFF5
  1870                           prodh	equ	0xFF4
  1871                           prodl	equ	0xFF3
  1872                           intcon3	equ	0xFF0
  1873                           postinc0	equ	0xFEE
  1874                           fsr0h	equ	0xFEA
  1875                           fsr0l	equ	0xFE9
  1876                           wreg	equ	0xFE8
  1877                           postdec1	equ	0xFE5
  1878                           fsr1h	equ	0xFE2
  1879                           fsr1l	equ	0xFE1
  1880                           fsr2h	equ	0xFDA
  1881                           fsr2l	equ	0xFD9
  1882                           status	equ	0xFD8
  1883                           
  1884 ;; *************** function _updateAngle *****************
  1885 ;; Defined at:
  1886 ;;		line 20 in file "servo.c"
  1887 ;; Parameters:    Size  Location     Type
  1888 ;;  angle           3   98[COMRAM] float 
  1889 ;; Auto vars:     Size  Location     Type
  1890 ;;		None
  1891 ;; Return value:  Size  Location     Type
  1892 ;;                  1    wreg      void 
  1893 ;; Registers used:
  1894 ;;		wreg, status,2, status,0, cstack
  1895 ;; Tracked objects:
  1896 ;;		On entry : 0/0
  1897 ;;		On exit  : 0/0
  1898 ;;		Unchanged: 0/0
  1899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1900 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1901 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1903 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1904 ;;Total ram usage:        6 bytes
  1905 ;; Hardware stack levels used:    1
  1906 ;; Hardware stack levels required when called:    3
  1907 ;; This function calls:
  1908 ;;		___ftadd
  1909 ;;		___ftneg
  1910 ;;		_startT0
  1911 ;;		i2_digitalWrite
  1912 ;; This function is called by:
  1913 ;;		_service
  1914 ;; This function uses a non-reentrant model
  1915 ;;
  1916                           
  1917                           	psect	text6
  1918  002784                     __ptext6:
  1919                           	opt stack 0
  1920  002784                     _updateAngle:
  1921                           	opt stack 23
  1922                           
  1923                           ;servo.c: 21: if(TMR0IF){
  1924                           
  1925                           ;incstack = 0
  1926  002784  A4F2               	btfss	intcon,2,c	;volatile
  1927  002786  0012               	return	
  1928                           
  1929                           ;servo.c: 22: TMR0IF = 0;
  1930  002788  94F2               	bcf	intcon,2,c	;volatile
  1931                           
  1932                           ;servo.c: 24: if(flag){
  1933  00278A  0100               	movlb	0	; () banked
  1934  00278C  519B               	movf	_flag& (0+255),w,b
  1935  00278E  0100               	movlb	0	; () banked
  1936  002790  119C               	iorwf	(_flag+1)& (0+255),w,b
  1937  002792  B4D8               	btfsc	status,2,c
  1938  002794  D038               	goto	i2l3269
  1939                           
  1940                           ; BSR set to: 0
  1941                           ;servo.c: 25: flag=0;
  1942  002796  0E00               	movlw	0
  1943  002798  0100               	movlb	0	; () banked
  1944  00279A  6F9C               	movwf	(_flag+1)& (0+255),b
  1945  00279C  0E00               	movlw	0
  1946  00279E  6F9B               	movwf	_flag& (0+255),b
  1947                           
  1948                           ; BSR set to: 0
  1949                           ;servo.c: 26: digitalWrite(3,0,0);
  1950  0027A0  0E00               	movlw	0
  1951  0027A2  6E02               	movwf	i2digitalWrite@port+1,c
  1952  0027A4  0E03               	movlw	3
  1953  0027A6  6E01               	movwf	i2digitalWrite@port,c
  1954  0027A8  0E00               	movlw	0
  1955  0027AA  6E04               	movwf	i2digitalWrite@pin+1,c
  1956  0027AC  0E00               	movlw	0
  1957  0027AE  6E03               	movwf	i2digitalWrite@pin,c
  1958  0027B0  0E00               	movlw	0
  1959  0027B2  6E06               	movwf	i2digitalWrite@val+1,c
  1960  0027B4  0E00               	movlw	0
  1961  0027B6  6E05               	movwf	i2digitalWrite@val,c
  1962  0027B8  EC76  F014         	call	i2_digitalWrite	;wreg free
  1963                           
  1964                           ;servo.c: 27: startT0(20.0-angle);
  1965  0027BC  C063  F031         	movff	updateAngle@angle,___ftneg@f1
  1966  0027C0  C064  F032         	movff	updateAngle@angle+1,___ftneg@f1+1
  1967  0027C4  C065  F033         	movff	updateAngle@angle+2,___ftneg@f1+2
  1968  0027C8  ECB8  F017         	call	___ftneg	;wreg free
  1969  0027CC  C031  F03B         	movff	?___ftneg,___ftadd@f1
  1970  0027D0  C032  F03C         	movff	?___ftneg+1,___ftadd@f1+1
  1971  0027D4  C033  F03D         	movff	?___ftneg+2,___ftadd@f1+2
  1972  0027D8  0E00               	movlw	0
  1973  0027DA  6E3E               	movwf	___ftadd@f2,c
  1974  0027DC  0EA0               	movlw	160
  1975  0027DE  6E3F               	movwf	___ftadd@f2+1,c
  1976  0027E0  0E41               	movlw	65
  1977  0027E2  6E40               	movwf	___ftadd@f2+2,c
  1978  0027E4  ECE2  F00E         	call	___ftadd	;wreg free
  1979  0027E8  C03B  F066         	movff	?___ftadd,_updateAngle$1136
  1980  0027EC  C03C  F067         	movff	?___ftadd+1,_updateAngle$1136+1
  1981  0027F0  C03D  F068         	movff	?___ftadd+2,_updateAngle$1136+2
  1982                           
  1983                           ;servo.c: 27: startT0(20.0-angle);
  1984  0027F4  C066  F056         	movff	_updateAngle$1136,startT0@milliseconds
  1985  0027F8  C067  F057         	movff	_updateAngle$1136+1,startT0@milliseconds+1
  1986  0027FC  C068  F058         	movff	_updateAngle$1136+2,startT0@milliseconds+2
  1987  002800  EC6D  F011         	call	_startT0	;wreg free
  1988                           
  1989                           ;servo.c: 28: }
  1990  002804  0012               	return	
  1991  002806                     i2l3269:
  1992                           
  1993                           ;servo.c: 29: else{
  1994                           ;servo.c: 30: flag=1;
  1995  002806  0E00               	movlw	0
  1996  002808  0100               	movlb	0	; () banked
  1997  00280A  6F9C               	movwf	(_flag+1)& (0+255),b
  1998  00280C  0E01               	movlw	1
  1999  00280E  6F9B               	movwf	_flag& (0+255),b
  2000                           
  2001                           ; BSR set to: 0
  2002                           ;servo.c: 31: digitalWrite(3,0,1);
  2003  002810  0E00               	movlw	0
  2004  002812  6E02               	movwf	i2digitalWrite@port+1,c
  2005  002814  0E03               	movlw	3
  2006  002816  6E01               	movwf	i2digitalWrite@port,c
  2007  002818  0E00               	movlw	0
  2008  00281A  6E04               	movwf	i2digitalWrite@pin+1,c
  2009  00281C  0E00               	movlw	0
  2010  00281E  6E03               	movwf	i2digitalWrite@pin,c
  2011  002820  0E00               	movlw	0
  2012  002822  6E06               	movwf	i2digitalWrite@val+1,c
  2013  002824  0E01               	movlw	1
  2014  002826  6E05               	movwf	i2digitalWrite@val,c
  2015  002828  EC76  F014         	call	i2_digitalWrite	;wreg free
  2016                           
  2017                           ;servo.c: 32: startT0(angle);
  2018  00282C  C063  F056         	movff	updateAngle@angle,startT0@milliseconds
  2019  002830  C064  F057         	movff	updateAngle@angle+1,startT0@milliseconds+1
  2020  002834  C065  F058         	movff	updateAngle@angle+2,startT0@milliseconds+2
  2021  002838  EC6D  F011         	call	_startT0	;wreg free
  2022  00283C  0012               	return	
  2023  00283E                     __end_of_updateAngle:
  2024                           	opt stack 0
  2025                           pclatu	equ	0xFFB
  2026                           pclath	equ	0xFFA
  2027                           tblptru	equ	0xFF8
  2028                           tblptrh	equ	0xFF7
  2029                           tblptrl	equ	0xFF6
  2030                           tablat	equ	0xFF5
  2031                           prodh	equ	0xFF4
  2032                           prodl	equ	0xFF3
  2033                           intcon	equ	0xFF2
  2034                           intcon3	equ	0xFF0
  2035                           postinc0	equ	0xFEE
  2036                           fsr0h	equ	0xFEA
  2037                           fsr0l	equ	0xFE9
  2038                           wreg	equ	0xFE8
  2039                           postdec1	equ	0xFE5
  2040                           fsr1h	equ	0xFE2
  2041                           fsr1l	equ	0xFE1
  2042                           fsr2h	equ	0xFDA
  2043                           fsr2l	equ	0xFD9
  2044                           status	equ	0xFD8
  2045                           
  2046 ;; *************** function i2_digitalWrite *****************
  2047 ;; Defined at:
  2048 ;;		line 53 in file "iopin.c"
  2049 ;; Parameters:    Size  Location     Type
  2050 ;;  port            2    0[COMRAM] int 
  2051 ;;  pin             2    2[COMRAM] int 
  2052 ;;  val             2    4[COMRAM] int 
  2053 ;; Auto vars:     Size  Location     Type
  2054 ;;		None
  2055 ;; Return value:  Size  Location     Type
  2056 ;;                  1    wreg      void 
  2057 ;; Registers used:
  2058 ;;		wreg, status,2, status,0
  2059 ;; Tracked objects:
  2060 ;;		On entry : 0/0
  2061 ;;		On exit  : 0/0
  2062 ;;		Unchanged: 0/0
  2063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2064 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2066 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2067 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2068 ;;Total ram usage:        9 bytes
  2069 ;; Hardware stack levels used:    1
  2070 ;; This function calls:
  2071 ;;		Nothing
  2072 ;; This function is called by:
  2073 ;;		_updateAngle
  2074 ;; This function uses a non-reentrant model
  2075 ;;
  2076                           
  2077                           	psect	text7
  2078  0028EC                     __ptext7:
  2079                           	opt stack 0
  2080  0028EC                     i2_digitalWrite:
  2081                           	opt stack 25
  2082                           
  2083                           ;iopin.c: 54: pin = 1 << pin;
  2084                           
  2085                           ;incstack = 0
  2086  0028EC  C003  F007         	movff	i2digitalWrite@pin,??i2_digitalWrite
  2087  0028F0  0E01               	movlw	1
  2088  0028F2  6E08               	movwf	(??i2_digitalWrite+1)& (0+255),c
  2089  0028F4  0E00               	movlw	0
  2090  0028F6  6E09               	movwf	(??i2_digitalWrite+2)& (0+255),c
  2091  0028F8  2A07               	incf	??i2_digitalWrite,f,c
  2092  0028FA  D003               	goto	i2u277_44
  2093  0028FC                     i2u277_45:
  2094  0028FC  90D8               	bcf	status,0,c
  2095  0028FE  3608               	rlcf	??i2_digitalWrite+1,f,c
  2096  002900  3609               	rlcf	??i2_digitalWrite+2,f,c
  2097  002902                     i2u277_44:
  2098  002902  2E07               	decfsz	??i2_digitalWrite,f,c
  2099  002904  D7FB               	goto	i2u277_45
  2100  002906  C008  F003         	movff	??i2_digitalWrite+1,i2digitalWrite@pin
  2101  00290A  C009  F004         	movff	??i2_digitalWrite+2,i2digitalWrite@pin+1
  2102                           
  2103                           ;iopin.c: 55: if(val == 0){
  2104  00290E  5005               	movf	i2digitalWrite@val,w,c
  2105  002910  1006               	iorwf	i2digitalWrite@val+1,w,c
  2106  002912  A4D8               	btfss	status,2,c
  2107  002914  D02B               	goto	i2l3201
  2108                           
  2109                           ;iopin.c: 56: pin ^= 0xff;
  2110  002916  0EFF               	movlw	255
  2111  002918  1A03               	xorwf	i2digitalWrite@pin,f,c
  2112                           
  2113                           ;iopin.c: 57: }
  2114                           ;iopin.c: 59: switch(port){
  2115  00291A  D028               	goto	i2l3201
  2116  00291C                     i2l3177:
  2117  00291C  0405               	decf	i2digitalWrite@val,w,c
  2118  00291E  1006               	iorwf	i2digitalWrite@val+1,w,c
  2119  002920  A4D8               	btfss	status,2,c
  2120  002922  D003               	goto	i2l3181
  2121  002924  5003               	movf	i2digitalWrite@pin,w,c
  2122  002926  1289               	iorwf	3977,f,c	;volatile
  2123  002928  0012               	return	
  2124  00292A                     i2l3181:
  2125                           
  2126                           ;iopin.c: 61: else LATA &= pin;
  2127  00292A  5003               	movf	i2digitalWrite@pin,w,c
  2128  00292C  1689               	andwf	3977,f,c	;volatile
  2129                           
  2130                           ;iopin.c: 62: break;
  2131  00292E  0012               	return	
  2132  002930                     i2l3183:
  2133  002930  0405               	decf	i2digitalWrite@val,w,c
  2134  002932  1006               	iorwf	i2digitalWrite@val+1,w,c
  2135  002934  A4D8               	btfss	status,2,c
  2136  002936  D003               	goto	i2l3187
  2137  002938  5003               	movf	i2digitalWrite@pin,w,c
  2138  00293A  128A               	iorwf	3978,f,c	;volatile
  2139  00293C  0012               	return	
  2140  00293E                     i2l3187:
  2141                           
  2142                           ;iopin.c: 64: else LATB &= pin;
  2143  00293E  5003               	movf	i2digitalWrite@pin,w,c
  2144  002940  168A               	andwf	3978,f,c	;volatile
  2145                           
  2146                           ;iopin.c: 65: break;
  2147  002942  0012               	return	
  2148  002944                     i2l3189:
  2149  002944  0405               	decf	i2digitalWrite@val,w,c
  2150  002946  1006               	iorwf	i2digitalWrite@val+1,w,c
  2151  002948  A4D8               	btfss	status,2,c
  2152  00294A  D003               	goto	i2l3193
  2153  00294C  5003               	movf	i2digitalWrite@pin,w,c
  2154  00294E  128B               	iorwf	3979,f,c	;volatile
  2155  002950  0012               	return	
  2156  002952                     i2l3193:
  2157                           
  2158                           ;iopin.c: 67: else LATC &= pin;
  2159  002952  5003               	movf	i2digitalWrite@pin,w,c
  2160  002954  168B               	andwf	3979,f,c	;volatile
  2161                           
  2162                           ;iopin.c: 68: break;
  2163  002956  0012               	return	
  2164  002958                     i2l3195:
  2165  002958  0405               	decf	i2digitalWrite@val,w,c
  2166  00295A  1006               	iorwf	i2digitalWrite@val+1,w,c
  2167  00295C  A4D8               	btfss	status,2,c
  2168  00295E  D003               	goto	i2l3199
  2169  002960  5003               	movf	i2digitalWrite@pin,w,c
  2170  002962  128C               	iorwf	3980,f,c	;volatile
  2171  002964  0012               	return	
  2172  002966                     i2l3199:
  2173                           
  2174                           ;iopin.c: 70: else LATD &= pin;
  2175  002966  5003               	movf	i2digitalWrite@pin,w,c
  2176  002968  168C               	andwf	3980,f,c	;volatile
  2177                           
  2178                           ;iopin.c: 71: }
  2179  00296A  0012               	return	
  2180  00296C                     i2l3201:
  2181  00296C  C001  F007         	movff	i2digitalWrite@port,??i2_digitalWrite
  2182  002970  C002  F008         	movff	i2digitalWrite@port+1,??i2_digitalWrite+1
  2183                           
  2184                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2185                           ; Switch size 1, requested type "space"
  2186                           ; Number of cases is 1, Range of values is 0 to 0
  2187                           ; switch strategies available:
  2188                           ; Name         Instructions Cycles
  2189                           ; simple_byte            4     3 (average)
  2190                           ;	Chosen strategy is simple_byte
  2191  002974  5008               	movf	??i2_digitalWrite+1,w,c
  2192  002976  0A00               	xorlw	0	; case 0
  2193  002978  A4D8               	btfss	status,2,c
  2194  00297A  0012               	return	
  2195                           
  2196                           ; Switch size 1, requested type "space"
  2197                           ; Number of cases is 4, Range of values is 0 to 3
  2198                           ; switch strategies available:
  2199                           ; Name         Instructions Cycles
  2200                           ; simple_byte           13     7 (average)
  2201                           ;	Chosen strategy is simple_byte
  2202  00297C  5007               	movf	??i2_digitalWrite,w,c
  2203  00297E  0A00               	xorlw	0	; case 0
  2204  002980  B4D8               	btfsc	status,2,c
  2205  002982  D7CC               	goto	i2l3177
  2206  002984  0A01               	xorlw	1	; case 1
  2207  002986  B4D8               	btfsc	status,2,c
  2208  002988  D7D3               	goto	i2l3183
  2209  00298A  0A03               	xorlw	3	; case 2
  2210  00298C  B4D8               	btfsc	status,2,c
  2211  00298E  D7DA               	goto	i2l3189
  2212  002990  0A01               	xorlw	1	; case 3
  2213  002992  A4D8               	btfss	status,2,c
  2214  002994  0012               	return	
  2215  002996  D7E0               	goto	i2l3195
  2216  002998                     __end_ofi2_digitalWrite:
  2217                           	opt stack 0
  2218                           pclatu	equ	0xFFB
  2219                           pclath	equ	0xFFA
  2220                           tblptru	equ	0xFF8
  2221                           tblptrh	equ	0xFF7
  2222                           tblptrl	equ	0xFF6
  2223                           tablat	equ	0xFF5
  2224                           prodh	equ	0xFF4
  2225                           prodl	equ	0xFF3
  2226                           intcon	equ	0xFF2
  2227                           intcon3	equ	0xFF0
  2228                           postinc0	equ	0xFEE
  2229                           fsr0h	equ	0xFEA
  2230                           fsr0l	equ	0xFE9
  2231                           wreg	equ	0xFE8
  2232                           postdec1	equ	0xFE5
  2233                           fsr1h	equ	0xFE2
  2234                           fsr1l	equ	0xFE1
  2235                           fsr2h	equ	0xFDA
  2236                           fsr2l	equ	0xFD9
  2237                           status	equ	0xFD8
  2238                           
  2239 ;; *************** function _startT0 *****************
  2240 ;; Defined at:
  2241 ;;		line 60 in file "timer.c"
  2242 ;; Parameters:    Size  Location     Type
  2243 ;;  milliseconds    3   85[COMRAM] float 
  2244 ;; Auto vars:     Size  Location     Type
  2245 ;;  time            4   94[COMRAM] long 
  2246 ;; Return value:  Size  Location     Type
  2247 ;;                  1    wreg      void 
  2248 ;; Registers used:
  2249 ;;		wreg, status,2, status,0, cstack
  2250 ;; Tracked objects:
  2251 ;;		On entry : 0/0
  2252 ;;		On exit  : 0/0
  2253 ;;		Unchanged: 0/0
  2254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2255 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2256 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2258 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2259 ;;Total ram usage:       13 bytes
  2260 ;; Hardware stack levels used:    1
  2261 ;; Hardware stack levels required when called:    2
  2262 ;; This function calls:
  2263 ;;		___altoft
  2264 ;;		___ftadd
  2265 ;;		___ftdiv
  2266 ;;		___ftmul
  2267 ;;		___ftneg
  2268 ;;		___fttol
  2269 ;; This function is called by:
  2270 ;;		_updateAngle
  2271 ;;		_initServo
  2272 ;; This function uses a non-reentrant model
  2273 ;;
  2274                           
  2275                           	psect	text8
  2276  0022DA                     __ptext8:
  2277                           	opt stack 0
  2278  0022DA                     _startT0:
  2279                           	opt stack 23
  2280                           
  2281                           ;timer.c: 65: long time = 0xFFFF - ( milliseconds / 1000.0 ) * extFreq / 4.0 / 256.0;
  2282                           
  2283                           ;incstack = 0
  2284  0022DA  C097  F009         	movff	_extFreq,___altoft@c
  2285  0022DE  C098  F00A         	movff	_extFreq+1,___altoft@c+1
  2286  0022E2  C099  F00B         	movff	_extFreq+2,___altoft@c+2
  2287  0022E6  C09A  F00C         	movff	_extFreq+3,___altoft@c+3
  2288  0022EA  ECDF  F015         	call	___altoft	;wreg free
  2289  0022EE  C009  F025         	movff	?___altoft,___ftmul@f2
  2290  0022F2  C00A  F026         	movff	?___altoft+1,___ftmul@f2+1
  2291  0022F6  C00B  F027         	movff	?___altoft+2,___ftmul@f2+2
  2292  0022FA  0E00               	movlw	0
  2293  0022FC  6E16               	movwf	___ftdiv@f2,c
  2294  0022FE  0E7A               	movlw	122
  2295  002300  6E17               	movwf	___ftdiv@f2+1,c
  2296  002302  0E44               	movlw	68
  2297  002304  6E18               	movwf	___ftdiv@f2+2,c
  2298  002306  C056  F013         	movff	startT0@milliseconds,___ftdiv@f1
  2299  00230A  C057  F014         	movff	startT0@milliseconds+1,___ftdiv@f1+1
  2300  00230E  C058  F015         	movff	startT0@milliseconds+2,___ftdiv@f1+2
  2301  002312  ECDF  F012         	call	___ftdiv	;wreg free
  2302  002316  C013  F022         	movff	?___ftdiv,___ftmul@f1
  2303  00231A  C014  F023         	movff	?___ftdiv+1,___ftmul@f1+1
  2304  00231E  C015  F024         	movff	?___ftdiv+2,___ftmul@f1+2
  2305  002322  ECEB  F011         	call	___ftmul	;wreg free
  2306  002326  C022  F059         	movff	?___ftmul,_startT0$1134
  2307  00232A  C023  F05A         	movff	?___ftmul+1,_startT0$1134+1
  2308  00232E  C024  F05B         	movff	?___ftmul+2,_startT0$1134+2
  2309                           
  2310                           ;timer.c: 65: long time = 0xFFFF - ( milliseconds / 1000.0 ) * extFreq / 4.0 / 256.0;
  2311  002332  0E00               	movlw	0
  2312  002334  6E16               	movwf	___ftdiv@f2,c
  2313  002336  0E80               	movlw	128
  2314  002338  6E17               	movwf	___ftdiv@f2+1,c
  2315  00233A  0E40               	movlw	64
  2316  00233C  6E18               	movwf	___ftdiv@f2+2,c
  2317  00233E  C059  F013         	movff	_startT0$1134,___ftdiv@f1
  2318  002342  C05A  F014         	movff	_startT0$1134+1,___ftdiv@f1+1
  2319  002346  C05B  F015         	movff	_startT0$1134+2,___ftdiv@f1+2
  2320  00234A  ECDF  F012         	call	___ftdiv	;wreg free
  2321  00234E  C013  F05C         	movff	?___ftdiv,_startT0$1135
  2322  002352  C014  F05D         	movff	?___ftdiv+1,_startT0$1135+1
  2323  002356  C015  F05E         	movff	?___ftdiv+2,_startT0$1135+2
  2324                           
  2325                           ;timer.c: 65: long time = 0xFFFF - ( milliseconds / 1000.0 ) * extFreq / 4.0 / 256.0;
  2326  00235A  0EFF               	movlw	255
  2327  00235C  6E3E               	movwf	___ftadd@f2,c
  2328  00235E  0E7F               	movlw	127
  2329  002360  6E3F               	movwf	___ftadd@f2+1,c
  2330  002362  0E47               	movlw	71
  2331  002364  6E40               	movwf	___ftadd@f2+2,c
  2332  002366  0E00               	movlw	0
  2333  002368  6E16               	movwf	___ftdiv@f2,c
  2334  00236A  0E80               	movlw	128
  2335  00236C  6E17               	movwf	___ftdiv@f2+1,c
  2336  00236E  0E43               	movlw	67
  2337  002370  6E18               	movwf	___ftdiv@f2+2,c
  2338  002372  C05C  F013         	movff	_startT0$1135,___ftdiv@f1
  2339  002376  C05D  F014         	movff	_startT0$1135+1,___ftdiv@f1+1
  2340  00237A  C05E  F015         	movff	_startT0$1135+2,___ftdiv@f1+2
  2341  00237E  ECDF  F012         	call	___ftdiv	;wreg free
  2342  002382  C013  F031         	movff	?___ftdiv,___ftneg@f1
  2343  002386  C014  F032         	movff	?___ftdiv+1,___ftneg@f1+1
  2344  00238A  C015  F033         	movff	?___ftdiv+2,___ftneg@f1+2
  2345  00238E  ECB8  F017         	call	___ftneg	;wreg free
  2346  002392  C031  F03B         	movff	?___ftneg,___ftadd@f1
  2347  002396  C032  F03C         	movff	?___ftneg+1,___ftadd@f1+1
  2348  00239A  C033  F03D         	movff	?___ftneg+2,___ftadd@f1+2
  2349  00239E  ECE2  F00E         	call	___ftadd	;wreg free
  2350  0023A2  C03B  F047         	movff	?___ftadd,___fttol@f1
  2351  0023A6  C03C  F048         	movff	?___ftadd+1,___fttol@f1+1
  2352  0023AA  C03D  F049         	movff	?___ftadd+2,___fttol@f1+2
  2353  0023AE  EC65  F012         	call	___fttol	;wreg free
  2354  0023B2  C047  F05F         	movff	?___fttol,startT0@time
  2355  0023B6  C048  F060         	movff	?___fttol+1,startT0@time+1
  2356  0023BA  C049  F061         	movff	?___fttol+2,startT0@time+2
  2357  0023BE  C04A  F062         	movff	?___fttol+3,startT0@time+3
  2358                           
  2359                           ;timer.c: 67: T0CON = 0;
  2360  0023C2  0E00               	movlw	0
  2361  0023C4  6ED5               	movwf	4053,c	;volatile
  2362                           
  2363                           ;timer.c: 70: T0CON |= 0b111;
  2364  0023C6  0E07               	movlw	7
  2365  0023C8  12D5               	iorwf	4053,f,c	;volatile
  2366                           
  2367                           ;timer.c: 71: TMR0H = time>>8;
  2368  0023CA  C060  FFD7         	movff	startT0@time+1,4055	;volatile
  2369                           
  2370                           ;timer.c: 72: TMR0L = time & 0xFF;
  2371  0023CE  C05F  FFD6         	movff	startT0@time,4054	;volatile
  2372                           
  2373                           ;timer.c: 73: T0CON |= 1<<7;
  2374  0023D2  8ED5               	bsf	4053,7,c	;volatile
  2375  0023D4  0012               	return		;funcret
  2376  0023D6                     __end_of_startT0:
  2377                           	opt stack 0
  2378                           pclatu	equ	0xFFB
  2379                           pclath	equ	0xFFA
  2380                           tblptru	equ	0xFF8
  2381                           tblptrh	equ	0xFF7
  2382                           tblptrl	equ	0xFF6
  2383                           tablat	equ	0xFF5
  2384                           prodh	equ	0xFF4
  2385                           prodl	equ	0xFF3
  2386                           intcon	equ	0xFF2
  2387                           intcon3	equ	0xFF0
  2388                           postinc0	equ	0xFEE
  2389                           fsr0h	equ	0xFEA
  2390                           fsr0l	equ	0xFE9
  2391                           wreg	equ	0xFE8
  2392                           postdec1	equ	0xFE5
  2393                           fsr1h	equ	0xFE2
  2394                           fsr1l	equ	0xFE1
  2395                           fsr2h	equ	0xFDA
  2396                           fsr2l	equ	0xFD9
  2397                           status	equ	0xFD8
  2398                           
  2399 ;; *************** function ___ftdiv *****************
  2400 ;; Defined at:
  2401 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  2402 ;; Parameters:    Size  Location     Type
  2403 ;;  f1              3   18[COMRAM] float 
  2404 ;;  f2              3   21[COMRAM] float 
  2405 ;; Auto vars:     Size  Location     Type
  2406 ;;  f3              3   28[COMRAM] float 
  2407 ;;  sign            1   32[COMRAM] unsigned char 
  2408 ;;  exp             1   31[COMRAM] unsigned char 
  2409 ;;  cntr            1   27[COMRAM] unsigned char 
  2410 ;; Return value:  Size  Location     Type
  2411 ;;                  3   18[COMRAM] float 
  2412 ;; Registers used:
  2413 ;;		wreg, status,2, status,0, cstack
  2414 ;; Tracked objects:
  2415 ;;		On entry : 0/0
  2416 ;;		On exit  : 0/0
  2417 ;;		Unchanged: 0/0
  2418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2419 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2420 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2421 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2422 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2423 ;;Total ram usage:       15 bytes
  2424 ;; Hardware stack levels used:    1
  2425 ;; Hardware stack levels required when called:    1
  2426 ;; This function calls:
  2427 ;;		___ftpack
  2428 ;; This function is called by:
  2429 ;;		_startT0
  2430 ;;		_testFrequency
  2431 ;; This function uses a non-reentrant model
  2432 ;;
  2433                           
  2434                           	psect	text9
  2435  0025BE                     __ptext9:
  2436                           	opt stack 0
  2437  0025BE                     ___ftdiv:
  2438                           	opt stack 23
  2439                           
  2440                           ;incstack = 0
  2441  0025BE  C015  F019         	movff	___ftdiv@f1+2,??___ftdiv
  2442  0025C2  6A1A               	clrf	(??___ftdiv+1)& (0+255),c
  2443  0025C4  6A1B               	clrf	(??___ftdiv+2)& (0+255),c
  2444  0025C6  3414               	rlcf	___ftdiv@f1+1,w,c
  2445  0025C8  3619               	rlcf	??___ftdiv& (0+255),f,c
  2446  0025CA  E301               	bnc	u210_41
  2447  0025CC  801A               	bsf	(??___ftdiv+1)& (0+255),0,c
  2448  0025CE                     u210_41:
  2449  0025CE  5019               	movf	??___ftdiv,w,c
  2450  0025D0  6E20               	movwf	___ftdiv@exp,c
  2451  0025D2  5020               	movf	___ftdiv@exp,w,c
  2452  0025D4  A4D8               	btfss	status,2,c
  2453  0025D6  D007               	goto	i2l2677
  2454  0025D8  0E00               	movlw	0
  2455  0025DA  6E13               	movwf	?___ftdiv,c
  2456  0025DC  0E00               	movlw	0
  2457  0025DE  6E14               	movwf	?___ftdiv+1,c
  2458  0025E0  0E00               	movlw	0
  2459  0025E2  6E15               	movwf	?___ftdiv+2,c
  2460  0025E4  0012               	return	
  2461  0025E6                     i2l2677:
  2462  0025E6  C018  F019         	movff	___ftdiv@f2+2,??___ftdiv
  2463  0025EA  6A1A               	clrf	(??___ftdiv+1)& (0+255),c
  2464  0025EC  6A1B               	clrf	(??___ftdiv+2)& (0+255),c
  2465  0025EE  3417               	rlcf	___ftdiv@f2+1,w,c
  2466  0025F0  3619               	rlcf	??___ftdiv& (0+255),f,c
  2467  0025F2  E301               	bnc	u212_41
  2468  0025F4  801A               	bsf	(??___ftdiv+1)& (0+255),0,c
  2469  0025F6                     u212_41:
  2470  0025F6  5019               	movf	??___ftdiv,w,c
  2471  0025F8  6E21               	movwf	___ftdiv@sign,c
  2472  0025FA  5021               	movf	___ftdiv@sign,w,c
  2473  0025FC  A4D8               	btfss	status,2,c
  2474  0025FE  D007               	goto	i2l2683
  2475  002600  0E00               	movlw	0
  2476  002602  6E13               	movwf	?___ftdiv,c
  2477  002604  0E00               	movlw	0
  2478  002606  6E14               	movwf	?___ftdiv+1,c
  2479  002608  0E00               	movlw	0
  2480  00260A  6E15               	movwf	?___ftdiv+2,c
  2481  00260C  0012               	return	
  2482  00260E                     i2l2683:
  2483  00260E  0E00               	movlw	0
  2484  002610  6E1D               	movwf	___ftdiv@f3,c
  2485  002612  0E00               	movlw	0
  2486  002614  6E1E               	movwf	___ftdiv@f3+1,c
  2487  002616  0E00               	movlw	0
  2488  002618  6E1F               	movwf	___ftdiv@f3+2,c
  2489  00261A  5021               	movf	___ftdiv@sign,w,c
  2490  00261C  0F89               	addlw	137
  2491  00261E  5E20               	subwf	___ftdiv@exp,f,c
  2492  002620  C015  F021         	movff	___ftdiv@f1+2,___ftdiv@sign
  2493  002624  5018               	movf	___ftdiv@f2+2,w,c
  2494  002626  1A21               	xorwf	___ftdiv@sign,f,c
  2495  002628  0E80               	movlw	128
  2496  00262A  1621               	andwf	___ftdiv@sign,f,c
  2497  00262C  8E14               	bsf	___ftdiv@f1+1,7,c
  2498  00262E  0EFF               	movlw	255
  2499  002630  1613               	andwf	___ftdiv@f1,f,c
  2500  002632  0EFF               	movlw	255
  2501  002634  1614               	andwf	___ftdiv@f1+1,f,c
  2502  002636  0E00               	movlw	0
  2503  002638  1615               	andwf	___ftdiv@f1+2,f,c
  2504  00263A  8E17               	bsf	___ftdiv@f2+1,7,c
  2505  00263C  0EFF               	movlw	255
  2506  00263E  1616               	andwf	___ftdiv@f2,f,c
  2507  002640  0EFF               	movlw	255
  2508  002642  1617               	andwf	___ftdiv@f2+1,f,c
  2509  002644  0E00               	movlw	0
  2510  002646  1618               	andwf	___ftdiv@f2+2,f,c
  2511  002648  0E18               	movlw	24
  2512  00264A  6E1C               	movwf	___ftdiv@cntr,c
  2513  00264C                     i2l2703:
  2514  00264C  90D8               	bcf	status,0,c
  2515  00264E  361D               	rlcf	___ftdiv@f3,f,c
  2516  002650  361E               	rlcf	___ftdiv@f3+1,f,c
  2517  002652  361F               	rlcf	___ftdiv@f3+2,f,c
  2518  002654  5016               	movf	___ftdiv@f2,w,c
  2519  002656  5C13               	subwf	___ftdiv@f1,w,c
  2520  002658  5017               	movf	___ftdiv@f2+1,w,c
  2521  00265A  5814               	subwfb	___ftdiv@f1+1,w,c
  2522  00265C  5018               	movf	___ftdiv@f2+2,w,c
  2523  00265E  5815               	subwfb	___ftdiv@f1+2,w,c
  2524  002660  A0D8               	btfss	status,0,c
  2525  002662  D007               	goto	i2l775
  2526  002664  5016               	movf	___ftdiv@f2,w,c
  2527  002666  5E13               	subwf	___ftdiv@f1,f,c
  2528  002668  5017               	movf	___ftdiv@f2+1,w,c
  2529  00266A  5A14               	subwfb	___ftdiv@f1+1,f,c
  2530  00266C  5018               	movf	___ftdiv@f2+2,w,c
  2531  00266E  5A15               	subwfb	___ftdiv@f1+2,f,c
  2532  002670  801D               	bsf	___ftdiv@f3,0,c
  2533  002672                     i2l775:
  2534  002672  90D8               	bcf	status,0,c
  2535  002674  3613               	rlcf	___ftdiv@f1,f,c
  2536  002676  3614               	rlcf	___ftdiv@f1+1,f,c
  2537  002678  3615               	rlcf	___ftdiv@f1+2,f,c
  2538  00267A  2E1C               	decfsz	___ftdiv@cntr,f,c
  2539  00267C  D7E7               	goto	i2l2703
  2540  00267E  C01D  F001         	movff	___ftdiv@f3,___ftpack@arg
  2541  002682  C01E  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  2542  002686  C01F  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  2543  00268A  C020  F004         	movff	___ftdiv@exp,___ftpack@exp
  2544  00268E  C021  F005         	movff	___ftdiv@sign,___ftpack@sign
  2545  002692  EC1F  F014         	call	___ftpack	;wreg free
  2546  002696  C001  F013         	movff	?___ftpack,?___ftdiv
  2547  00269A  C002  F014         	movff	?___ftpack+1,?___ftdiv+1
  2548  00269E  C003  F015         	movff	?___ftpack+2,?___ftdiv+2
  2549  0026A2  0012               	return	
  2550  0026A4                     __end_of___ftdiv:
  2551                           	opt stack 0
  2552                           pclatu	equ	0xFFB
  2553                           pclath	equ	0xFFA
  2554                           tblptru	equ	0xFF8
  2555                           tblptrh	equ	0xFF7
  2556                           tblptrl	equ	0xFF6
  2557                           tablat	equ	0xFF5
  2558                           prodh	equ	0xFF4
  2559                           prodl	equ	0xFF3
  2560                           intcon	equ	0xFF2
  2561                           intcon3	equ	0xFF0
  2562                           postinc0	equ	0xFEE
  2563                           fsr0h	equ	0xFEA
  2564                           fsr0l	equ	0xFE9
  2565                           wreg	equ	0xFE8
  2566                           postdec1	equ	0xFE5
  2567                           fsr1h	equ	0xFE2
  2568                           fsr1l	equ	0xFE1
  2569                           fsr2h	equ	0xFDA
  2570                           fsr2l	equ	0xFD9
  2571                           status	equ	0xFD8
  2572                           
  2573 ;; *************** function ___altoft *****************
  2574 ;; Defined at:
  2575 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  2576 ;; Parameters:    Size  Location     Type
  2577 ;;  c               4    8[COMRAM] long 
  2578 ;; Auto vars:     Size  Location     Type
  2579 ;;  sign            1   17[COMRAM] unsigned char 
  2580 ;;  exp             1   16[COMRAM] unsigned char 
  2581 ;; Return value:  Size  Location     Type
  2582 ;;                  3    8[COMRAM] float 
  2583 ;; Registers used:
  2584 ;;		wreg, status,2, status,0, cstack
  2585 ;; Tracked objects:
  2586 ;;		On entry : 0/0
  2587 ;;		On exit  : 0/0
  2588 ;;		Unchanged: 0/0
  2589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2590 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2591 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2592 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2593 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2594 ;;Total ram usage:       10 bytes
  2595 ;; Hardware stack levels used:    1
  2596 ;; Hardware stack levels required when called:    1
  2597 ;; This function calls:
  2598 ;;		___ftpack
  2599 ;; This function is called by:
  2600 ;;		_startT0
  2601 ;;		_testFrequency
  2602 ;; This function uses a non-reentrant model
  2603 ;;
  2604                           
  2605                           	psect	text10
  2606  002BBE                     __ptext10:
  2607                           	opt stack 0
  2608  002BBE                     ___altoft:
  2609                           	opt stack 23
  2610                           
  2611                           ;incstack = 0
  2612  002BBE  0E00               	movlw	0
  2613  002BC0  6E12               	movwf	___altoft@sign,c
  2614  002BC2  0E8E               	movlw	142
  2615  002BC4  6E11               	movwf	___altoft@exp,c
  2616  002BC6  AE0C               	btfss	___altoft@c+3,7,c
  2617  002BC8  D011               	goto	i2l2595
  2618  002BCA  1E0C               	comf	___altoft@c+3,f,c
  2619  002BCC  1E0B               	comf	___altoft@c+2,f,c
  2620  002BCE  1E0A               	comf	___altoft@c+1,f,c
  2621  002BD0  6C09               	negf	___altoft@c,c
  2622  002BD2  0E00               	movlw	0
  2623  002BD4  220A               	addwfc	___altoft@c+1,f,c
  2624  002BD6  220B               	addwfc	___altoft@c+2,f,c
  2625  002BD8  220C               	addwfc	___altoft@c+3,f,c
  2626  002BDA  0E01               	movlw	1
  2627  002BDC  6E12               	movwf	___altoft@sign,c
  2628  002BDE  D006               	goto	i2l2595
  2629  002BE0                     i2l2593:
  2630  002BE0  90D8               	bcf	status,0,c
  2631  002BE2  320C               	rrcf	___altoft@c+3,f,c
  2632  002BE4  320B               	rrcf	___altoft@c+2,f,c
  2633  002BE6  320A               	rrcf	___altoft@c+1,f,c
  2634  002BE8  3209               	rrcf	___altoft@c,f,c
  2635  002BEA  2A11               	incf	___altoft@exp,f,c
  2636  002BEC                     i2l2595:
  2637  002BEC  0E00               	movlw	0
  2638  002BEE  1409               	andwf	___altoft@c,w,c
  2639  002BF0  6E0D               	movwf	??___altoft& (0+255),c
  2640  002BF2  0E00               	movlw	0
  2641  002BF4  140A               	andwf	___altoft@c+1,w,c
  2642  002BF6  6E0E               	movwf	(??___altoft+1)& (0+255),c
  2643  002BF8  0E00               	movlw	0
  2644  002BFA  140B               	andwf	___altoft@c+2,w,c
  2645  002BFC  6E0F               	movwf	(??___altoft+2)& (0+255),c
  2646  002BFE  0EFF               	movlw	255
  2647  002C00  140C               	andwf	___altoft@c+3,w,c
  2648  002C02  6E10               	movwf	(??___altoft+3)& (0+255),c
  2649  002C04  500D               	movf	??___altoft,w,c
  2650  002C06  100E               	iorwf	??___altoft+1,w,c
  2651  002C08  100F               	iorwf	??___altoft+2,w,c
  2652  002C0A  1010               	iorwf	??___altoft+3,w,c
  2653  002C0C  A4D8               	btfss	status,2,c
  2654  002C0E  D7E8               	goto	i2l2593
  2655  002C10  C009  F001         	movff	___altoft@c,___ftpack@arg
  2656  002C14  C00A  F002         	movff	___altoft@c+1,___ftpack@arg+1
  2657  002C18  C00B  F003         	movff	___altoft@c+2,___ftpack@arg+2
  2658  002C1C  C011  F004         	movff	___altoft@exp,___ftpack@exp
  2659  002C20  C012  F005         	movff	___altoft@sign,___ftpack@sign
  2660  002C24  EC1F  F014         	call	___ftpack	;wreg free
  2661  002C28  C001  F009         	movff	?___ftpack,?___altoft
  2662  002C2C  C002  F00A         	movff	?___ftpack+1,?___altoft+1
  2663  002C30  C003  F00B         	movff	?___ftpack+2,?___altoft+2
  2664  002C34  0012               	return	
  2665  002C36                     __end_of___altoft:
  2666                           	opt stack 0
  2667                           pclatu	equ	0xFFB
  2668                           pclath	equ	0xFFA
  2669                           tblptru	equ	0xFF8
  2670                           tblptrh	equ	0xFF7
  2671                           tblptrl	equ	0xFF6
  2672                           tablat	equ	0xFF5
  2673                           prodh	equ	0xFF4
  2674                           prodl	equ	0xFF3
  2675                           intcon	equ	0xFF2
  2676                           intcon3	equ	0xFF0
  2677                           postinc0	equ	0xFEE
  2678                           fsr0h	equ	0xFEA
  2679                           fsr0l	equ	0xFE9
  2680                           wreg	equ	0xFE8
  2681                           postdec1	equ	0xFE5
  2682                           fsr1h	equ	0xFE2
  2683                           fsr1l	equ	0xFE1
  2684                           fsr2h	equ	0xFDA
  2685                           fsr2l	equ	0xFD9
  2686                           status	equ	0xFD8
  2687                           
  2688 ;; *************** function _printf *****************
  2689 ;; Defined at:
  2690 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  2691 ;; Parameters:    Size  Location     Type
  2692 ;;  f               2   85[COMRAM] PTR const unsigned char 
  2693 ;;		 -> STR_3(9), STR_2(8), STR_1(9), 
  2694 ;; Auto vars:     Size  Location     Type
  2695 ;;  idx             1  100[COMRAM] unsigned char 
  2696 ;;  tmpval          4  113[COMRAM] struct .
  2697 ;;  val             4  107[COMRAM] unsigned long 
  2698 ;;  fval            3  117[COMRAM] unsigned long 
  2699 ;;  cp              3    0        PTR const unsigned char 
  2700 ;;  exp             2  111[COMRAM] int 
  2701 ;;  prec            2  105[COMRAM] int 
  2702 ;;  flag            2  103[COMRAM] unsigned short 
  2703 ;;  ap              2  101[COMRAM] PTR void [1]
  2704 ;;		 -> ?_printf(2), 
  2705 ;;  len             2    0        unsigned int 
  2706 ;;  width           2    0        int 
  2707 ;;  c               1  120[COMRAM] char 
  2708 ;;  d               1    0        unsigned char 
  2709 ;; Return value:  Size  Location     Type
  2710 ;;                  2   85[COMRAM] int 
  2711 ;; Registers used:
  2712 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2713 ;; Tracked objects:
  2714 ;;		On entry : 0/0
  2715 ;;		On exit  : 0/0
  2716 ;;		Unchanged: 0/0
  2717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2718 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2719 ;;      Locals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2720 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2721 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2722 ;;Total ram usage:       36 bytes
  2723 ;; Hardware stack levels used:    1
  2724 ;; Hardware stack levels required when called:    4
  2725 ;; This function calls:
  2726 ;;		___awdiv
  2727 ;;		___ftadd
  2728 ;;		___ftge
  2729 ;;		___ftmul
  2730 ;;		___ftneg
  2731 ;;		___ftsub
  2732 ;;		___fttol
  2733 ;;		___lldiv
  2734 ;;		___llmod
  2735 ;;		___lltoft
  2736 ;;		___wmul
  2737 ;;		__div_to_l_
  2738 ;;		__tdiv_to_l_
  2739 ;;		_fround
  2740 ;;		_putch
  2741 ;;		_scale
  2742 ;; This function is called by:
  2743 ;;		_service
  2744 ;;		_testFrequency
  2745 ;; This function uses a non-reentrant model
  2746 ;;
  2747                           
  2748                           	psect	text11
  2749  0010E2                     __ptext11:
  2750                           	opt stack 0
  2751  0010E2                     _printf:
  2752                           	opt stack 22
  2753                           
  2754                           ;doprnt.c: 466: va_list ap;
  2755                           ;doprnt.c: 499: signed char c;
  2756                           ;doprnt.c: 501: int width;
  2757                           ;doprnt.c: 504: int prec;
  2758                           ;doprnt.c: 508: unsigned short flag;
  2759                           ;doprnt.c: 515: char d;
  2760                           ;doprnt.c: 516: double fval;
  2761                           ;doprnt.c: 517: int exp;
  2762                           ;doprnt.c: 523: union {
  2763                           ;doprnt.c: 524: unsigned long vd;
  2764                           ;doprnt.c: 525: double integ;
  2765                           ;doprnt.c: 526: } tmpval;
  2766                           ;doprnt.c: 528: unsigned long val;
  2767                           ;doprnt.c: 529: unsigned len;
  2768                           ;doprnt.c: 530: const char * cp;
  2769                           ;doprnt.c: 533: *ap = __va_start();
  2770                           
  2771                           ;incstack = 0
  2772  0010E2  0E58               	movlw	low (?_printf+2)
  2773  0010E4  6E66               	movwf	printf@ap,c
  2774  0010E6  0E00               	movlw	high (?_printf+2)
  2775  0010E8  6E67               	movwf	printf@ap+1,c
  2776                           
  2777                           ;doprnt.c: 536: while(c = *f++) {
  2778  0010EA  D344               	goto	i2l3455
  2779  0010EC                     i2l3279:
  2780                           
  2781                           ;doprnt.c: 538: if(c != '%')
  2782  0010EC  0E25               	movlw	37
  2783  0010EE  1879               	xorwf	printf@c,w,c
  2784  0010F0  B4D8               	btfsc	status,2,c
  2785  0010F2  D004               	goto	i2l3283
  2786                           
  2787                           ;doprnt.c: 540: {
  2788                           ;doprnt.c: 541: (putch(c) );
  2789  0010F4  5079               	movf	printf@c,w,c
  2790  0010F6  ECDC  F017         	call	_putch
  2791                           
  2792                           ;doprnt.c: 542: continue;
  2793  0010FA  D33C               	goto	i2l3455
  2794  0010FC                     i2l3283:
  2795                           
  2796                           ;doprnt.c: 543: }
  2797                           ;doprnt.c: 548: flag = 0;
  2798  0010FC  0E00               	movlw	0
  2799  0010FE  6E69               	movwf	printf@flag+1,c
  2800  001100  0E00               	movlw	0
  2801  001102  6E68               	movwf	printf@flag,c
  2802                           
  2803                           ;doprnt.c: 635: switch(c = *f++) {
  2804  001104  D002               	goto	i2l3289
  2805  001106                     i2l3285:
  2806                           
  2807                           ;doprnt.c: 663: flag |= 0x400;
  2808  001106  8469               	bsf	printf@flag+1,2,c
  2809                           
  2810                           ;doprnt.c: 723: break;
  2811                           
  2812                           ;doprnt.c: 718: case 'x':
  2813                           
  2814                           ;doprnt.c: 664: break;
  2815  001108  D013               	goto	i2l3291
  2816  00110A                     i2l3289:
  2817  00110A  C056  FFF6         	movff	printf@f,tblptrl
  2818  00110E  C057  FFF7         	movff	printf@f+1,tblptrh
  2819  001112  4A56               	infsnz	printf@f,f,c
  2820  001114  2A57               	incf	printf@f+1,f,c
  2821  001116                     	if	0	;tblptru may be non-zero
  2822  001116                     	endif
  2823  001116                     	if	0	;tblptru may be non-zero
  2824  001116                     	endif
  2825  001116  0008               	tblrd		*
  2826  001118  CFF5 F079          	movff	tablat,printf@c
  2827  00111C  5079               	movf	printf@c,w,c
  2828                           
  2829                           ; Switch size 1, requested type "space"
  2830                           ; Number of cases is 3, Range of values is 0 to 120
  2831                           ; switch strategies available:
  2832                           ; Name         Instructions Cycles
  2833                           ; simple_byte           10     6 (average)
  2834                           ;	Chosen strategy is simple_byte
  2835  00111E  0A00               	xorlw	0	; case 0
  2836  001120  B4D8               	btfsc	status,2,c
  2837  001122  0012               	return	
  2838  001124  0A66               	xorlw	102	; case 102
  2839  001126  B4D8               	btfsc	status,2,c
  2840  001128  D7EE               	goto	i2l3285
  2841  00112A  0A1E               	xorlw	30	; case 120
  2842  00112C  A4D8               	btfss	status,2,c
  2843  00112E  D322               	goto	i2l3455
  2844  001130                     i2l3291:
  2845                           
  2846                           ;doprnt.c: 825: if(flag & (0x700)) {
  2847  001130  0E07               	movlw	7
  2848  001132  1469               	andwf	printf@flag+1,w,c
  2849  001134  B4D8               	btfsc	status,2,c
  2850  001136  D29C               	goto	i2l3423
  2851                           
  2852                           ;doprnt.c: 829: prec = 6;
  2853  001138  0E00               	movlw	0
  2854  00113A  6E6B               	movwf	printf@prec+1,c
  2855  00113C  0E06               	movlw	6
  2856  00113E  6E6A               	movwf	printf@prec,c
  2857                           
  2858                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2859  001140  C066  FFD9         	movff	printf@ap,fsr2l
  2860  001144  C067  FFDA         	movff	printf@ap+1,fsr2h
  2861  001148  CFDE F076          	movff	postinc2,printf@fval
  2862  00114C  CFDE F077          	movff	postinc2,printf@fval+1
  2863  001150  CFDD F078          	movff	postdec2,printf@fval+2
  2864  001154  0E03               	movlw	3
  2865  001156  2666               	addwf	printf@ap,f,c
  2866  001158  0E00               	movlw	0
  2867  00115A  2267               	addwfc	printf@ap+1,f,c
  2868                           
  2869                           ;doprnt.c: 831: if(fval < 0.0) {
  2870  00115C  AE78               	btfss	printf@fval+2,7,c
  2871  00115E  D010               	goto	i2l3305
  2872                           
  2873                           ;doprnt.c: 832: fval = -fval;
  2874  001160  C076  F031         	movff	printf@fval,___ftneg@f1
  2875  001164  C077  F032         	movff	printf@fval+1,___ftneg@f1+1
  2876  001168  C078  F033         	movff	printf@fval+2,___ftneg@f1+2
  2877  00116C  ECB8  F017         	call	___ftneg	;wreg free
  2878  001170  C031  F076         	movff	?___ftneg,printf@fval
  2879  001174  C032  F077         	movff	?___ftneg+1,printf@fval+1
  2880  001178  C033  F078         	movff	?___ftneg+2,printf@fval+2
  2881                           
  2882                           ;doprnt.c: 833: flag |= 0x03;
  2883  00117C  0E03               	movlw	3
  2884  00117E  1268               	iorwf	printf@flag,f,c
  2885  001180                     i2l3305:
  2886                           
  2887                           ;doprnt.c: 834: }
  2888                           ;doprnt.c: 835: exp = 0;
  2889  001180  0E00               	movlw	0
  2890  001182  6E71               	movwf	printf@exp+1,c
  2891  001184  0E00               	movlw	0
  2892  001186  6E70               	movwf	printf@exp,c
  2893                           
  2894                           ;doprnt.c: 836: if( fval!=0) {
  2895  001188  5076               	movf	printf@fval,w,c
  2896  00118A  1077               	iorwf	printf@fval+1,w,c
  2897  00118C  1078               	iorwf	printf@fval+2,w,c
  2898  00118E  B4D8               	btfsc	status,2,c
  2899  001190  D083               	goto	i2l3333
  2900                           
  2901                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2902  001192  0E82               	movlw	130
  2903  001194  6E5C               	movwf	??_printf& (0+255),c
  2904  001196  0EFF               	movlw	255
  2905  001198  6E5D               	movwf	(??_printf+1)& (0+255),c
  2906  00119A  C076  F05E         	movff	printf@fval,??_printf+2
  2907  00119E  C077  F05F         	movff	printf@fval+1,??_printf+3
  2908  0011A2  C078  F060         	movff	printf@fval+2,??_printf+4
  2909  0011A6  C079  F061         	movff	printf@fval+3,??_printf+5
  2910  0011AA  0E10               	movlw	16
  2911  0011AC  D005               	goto	i2u295_40
  2912  0011AE                     i2u295_45:
  2913  0011AE  90D8               	bcf	status,0,c
  2914  0011B0  3261               	rrcf	??_printf+5,f,c
  2915  0011B2  3260               	rrcf	??_printf+4,f,c
  2916  0011B4  325F               	rrcf	??_printf+3,f,c
  2917  0011B6  325E               	rrcf	??_printf+2,f,c
  2918  0011B8                     i2u295_40:
  2919  0011B8  2EE8               	decfsz	wreg,f,c
  2920  0011BA  D7F9               	goto	i2u295_45
  2921  0011BC  505E               	movf	??_printf+2,w,c
  2922  0011BE  245C               	addwf	??_printf,w,c
  2923  0011C0  6E70               	movwf	printf@exp,c
  2924  0011C2  0E00               	movlw	0
  2925  0011C4  205D               	addwfc	??_printf+1,w,c
  2926  0011C6  6E71               	movwf	printf@exp+1,c
  2927                           
  2928                           ;doprnt.c: 838: exp--;
  2929  0011C8  0670               	decf	printf@exp,f,c
  2930  0011CA  A0D8               	btfss	status,0,c
  2931  0011CC  0671               	decf	printf@exp+1,f,c
  2932                           
  2933                           ;doprnt.c: 839: exp *= 3;
  2934  0011CE  C070  F00F         	movff	printf@exp,___wmul@multiplier
  2935  0011D2  C071  F010         	movff	printf@exp+1,___wmul@multiplier+1
  2936  0011D6  0E00               	movlw	0
  2937  0011D8  6E12               	movwf	___wmul@multiplicand+1,c
  2938  0011DA  0E03               	movlw	3
  2939  0011DC  6E11               	movwf	___wmul@multiplicand,c
  2940  0011DE  ECA5  F017         	call	___wmul	;wreg free
  2941  0011E2  C00F  F070         	movff	?___wmul,printf@exp
  2942  0011E6  C010  F071         	movff	?___wmul+1,printf@exp+1
  2943                           
  2944                           ;doprnt.c: 840: exp /= 10;
  2945  0011EA  C070  F007         	movff	printf@exp,___awdiv@dividend
  2946  0011EE  C071  F008         	movff	printf@exp+1,___awdiv@dividend+1
  2947  0011F2  0E00               	movlw	0
  2948  0011F4  6E0A               	movwf	___awdiv@divisor+1,c
  2949  0011F6  0E0A               	movlw	10
  2950  0011F8  6E09               	movwf	___awdiv@divisor,c
  2951  0011FA  EC5C  F015         	call	___awdiv	;wreg free
  2952  0011FE  C007  F070         	movff	?___awdiv,printf@exp
  2953  001202  C008  F071         	movff	?___awdiv+1,printf@exp+1
  2954                           
  2955                           ;doprnt.c: 841: if(exp < 0)
  2956  001206  AE71               	btfss	printf@exp+1,7,c
  2957  001208  D003               	goto	i2l3321
  2958                           
  2959                           ;doprnt.c: 842: exp--;
  2960  00120A  0670               	decf	printf@exp,f,c
  2961  00120C  A0D8               	btfss	status,0,c
  2962  00120E  0671               	decf	printf@exp+1,f,c
  2963  001210                     i2l3321:
  2964                           
  2965                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2966  001210  5070               	movf	printf@exp,w,c
  2967  001212  0800               	sublw	0
  2968  001214  ECC7  F00B         	call	_scale
  2969  001218  C031  F072         	movff	?_scale,printf@tmpval
  2970  00121C  C032  F073         	movff	?_scale+1,printf@tmpval+1
  2971  001220  C033  F074         	movff	?_scale+2,printf@tmpval+2
  2972                           
  2973                           ;doprnt.c: 847: tmpval.integ *= fval;
  2974  001224  C072  F022         	movff	printf@tmpval,___ftmul@f1
  2975  001228  C073  F023         	movff	printf@tmpval+1,___ftmul@f1+1
  2976  00122C  C074  F024         	movff	printf@tmpval+2,___ftmul@f1+2
  2977  001230  C076  F025         	movff	printf@fval,___ftmul@f2
  2978  001234  C077  F026         	movff	printf@fval+1,___ftmul@f2+1
  2979  001238  C078  F027         	movff	printf@fval+2,___ftmul@f2+2
  2980  00123C  ECEB  F011         	call	___ftmul	;wreg free
  2981  001240  C022  F072         	movff	?___ftmul,printf@tmpval
  2982  001244  C023  F073         	movff	?___ftmul+1,printf@tmpval+1
  2983  001248  C024  F074         	movff	?___ftmul+2,printf@tmpval+2
  2984                           
  2985                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2986  00124C  C072  F001         	movff	printf@tmpval,___ftge@ff1
  2987  001250  C073  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  2988  001254  C074  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  2989  001258  0E00               	movlw	0
  2990  00125A  6E04               	movwf	___ftge@ff2,c
  2991  00125C  0E80               	movlw	128
  2992  00125E  6E05               	movwf	___ftge@ff2+1,c
  2993  001260  0E3F               	movlw	63
  2994  001262  6E06               	movwf	___ftge@ff2+2,c
  2995  001264  EC14  F015         	call	___ftge	;wreg free
  2996  001268  B0D8               	btfsc	status,0,c
  2997  00126A  D004               	goto	i2l3329
  2998                           
  2999                           ;doprnt.c: 849: exp--;
  3000  00126C  0670               	decf	printf@exp,f,c
  3001  00126E  A0D8               	btfss	status,0,c
  3002  001270  0671               	decf	printf@exp+1,f,c
  3003  001272  D012               	goto	i2l3333
  3004  001274                     i2l3329:
  3005                           
  3006                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3007  001274  C072  F001         	movff	printf@tmpval,___ftge@ff1
  3008  001278  C073  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  3009  00127C  C074  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  3010  001280  0E00               	movlw	0
  3011  001282  6E04               	movwf	___ftge@ff2,c
  3012  001284  0E20               	movlw	32
  3013  001286  6E05               	movwf	___ftge@ff2+1,c
  3014  001288  0E41               	movlw	65
  3015  00128A  6E06               	movwf	___ftge@ff2+2,c
  3016  00128C  EC14  F015         	call	___ftge	;wreg free
  3017  001290  A0D8               	btfss	status,0,c
  3018  001292  D002               	goto	i2l3333
  3019                           
  3020                           ;doprnt.c: 851: exp++;
  3021  001294  4A70               	infsnz	printf@exp,f,c
  3022  001296  2A71               	incf	printf@exp+1,f,c
  3023  001298                     i2l3333:
  3024                           
  3025                           ;doprnt.c: 852: }
  3026                           ;doprnt.c: 1112: if(prec <= 12)
  3027  001298  BE6B               	btfsc	printf@prec+1,7,c
  3028  00129A  D006               	goto	i2l3335
  3029  00129C  506B               	movf	printf@prec+1,w,c
  3030  00129E  E11B               	bnz	i2l3337
  3031  0012A0  0E0D               	movlw	13
  3032  0012A2  5C6A               	subwf	printf@prec,w,c
  3033  0012A4  B0D8               	btfsc	status,0,c
  3034  0012A6  D017               	goto	i2l3337
  3035  0012A8                     i2l3335:
  3036                           
  3037                           ;doprnt.c: 1113: fval += fround(prec);
  3038  0012A8  C076  F03B         	movff	printf@fval,___ftadd@f1
  3039  0012AC  C077  F03C         	movff	printf@fval+1,___ftadd@f1+1
  3040  0012B0  C078  F03D         	movff	printf@fval+2,___ftadd@f1+2
  3041  0012B4  506A               	movf	printf@prec,w,c
  3042  0012B6  ECBF  F00D         	call	_fround
  3043  0012BA  C031  F03E         	movff	?_fround,___ftadd@f2
  3044  0012BE  C032  F03F         	movff	?_fround+1,___ftadd@f2+1
  3045  0012C2  C033  F040         	movff	?_fround+2,___ftadd@f2+2
  3046  0012C6  ECE2  F00E         	call	___ftadd	;wreg free
  3047  0012CA  C03B  F076         	movff	?___ftadd,printf@fval
  3048  0012CE  C03C  F077         	movff	?___ftadd+1,printf@fval+1
  3049  0012D2  C03D  F078         	movff	?___ftadd+2,printf@fval+2
  3050  0012D6                     i2l3337:
  3051                           
  3052                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3053  0012D6  BE71               	btfsc	printf@exp+1,7,c
  3054  0012D8  D006               	goto	i2l3339
  3055  0012DA  5071               	movf	printf@exp+1,w,c
  3056  0012DC  E11E               	bnz	i2l3345
  3057  0012DE  0E0A               	movlw	10
  3058  0012E0  5C70               	subwf	printf@exp,w,c
  3059  0012E2  B0D8               	btfsc	status,0,c
  3060  0012E4  D01A               	goto	i2l3345
  3061  0012E6                     i2l3339:
  3062  0012E6  5076               	movf	printf@fval,w,c
  3063  0012E8  1077               	iorwf	printf@fval+1,w,c
  3064  0012EA  1078               	iorwf	printf@fval+2,w,c
  3065  0012EC  B4D8               	btfsc	status,2,c
  3066  0012EE  D051               	goto	i2l3359
  3067  0012F0  C076  F047         	movff	printf@fval,___fttol@f1
  3068  0012F4  C077  F048         	movff	printf@fval+1,___fttol@f1+1
  3069  0012F8  C078  F049         	movff	printf@fval+2,___fttol@f1+2
  3070  0012FC  EC65  F012         	call	___fttol	;wreg free
  3071  001300  5047               	movf	?___fttol,w,c
  3072  001302  1048               	iorwf	?___fttol+1,w,c
  3073  001304  1049               	iorwf	?___fttol+2,w,c
  3074  001306  104A               	iorwf	?___fttol+3,w,c
  3075  001308  B4D8               	btfsc	status,2,c
  3076  00130A  BE71               	btfsc	printf@exp+1,7,c
  3077  00130C  D042               	goto	i2l3359
  3078  00130E  5071               	movf	printf@exp+1,w,c
  3079  001310  E104               	bnz	i2l3345
  3080  001312  0E02               	movlw	2
  3081  001314  5C70               	subwf	printf@exp,w,c
  3082  001316  A0D8               	btfss	status,0,c
  3083  001318  D03C               	goto	i2l3359
  3084  00131A                     i2l3345:
  3085                           
  3086                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3087  00131A  C072  F001         	movff	printf@tmpval,___ftge@ff1
  3088  00131E  C073  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  3089  001322  C074  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  3090  001326  0E70               	movlw	112
  3091  001328  6E04               	movwf	___ftge@ff2,c
  3092  00132A  0E89               	movlw	137
  3093  00132C  6E05               	movwf	___ftge@ff2+1,c
  3094  00132E  0E40               	movlw	64
  3095  001330  6E06               	movwf	___ftge@ff2+2,c
  3096  001332  EC14  F015         	call	___ftge	;wreg free
  3097  001336  B0D8               	btfsc	status,0,c
  3098  001338  D002               	goto	i2l3349
  3099                           
  3100                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3101  00133A  0EF7               	movlw	247
  3102  00133C  D001               	goto	L1
  3103  00133E                     i2l3349:
  3104                           
  3105                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3106  00133E  0EF8               	movlw	248
  3107  001340                     L1:
  3108  001340  2670               	addwf	printf@exp,f,c
  3109  001342  0EFF               	movlw	255
  3110  001344  2271               	addwfc	printf@exp+1,f,c
  3111                           
  3112                           ;doprnt.c: 1124: }
  3113                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3114  001346  5070               	movf	printf@exp,w,c
  3115  001348  ECC7  F00B         	call	_scale
  3116  00134C  C031  F072         	movff	?_scale,printf@tmpval
  3117  001350  C032  F073         	movff	?_scale+1,printf@tmpval+1
  3118  001354  C033  F074         	movff	?_scale+2,printf@tmpval+2
  3119                           
  3120                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3121  001358  C076  F001         	movff	printf@fval,__tdiv_to_l_@f1
  3122  00135C  C077  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  3123  001360  C078  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  3124  001364  C072  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  3125  001368  C073  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  3126  00136C  C074  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  3127  001370  ECB8  F00F         	call	__tdiv_to_l_	;wreg free
  3128  001374  C001  F06C         	movff	?__tdiv_to_l_,printf@val
  3129  001378  C002  F06D         	movff	?__tdiv_to_l_+1,printf@val+1
  3130  00137C  C003  F06E         	movff	?__tdiv_to_l_+2,printf@val+2
  3131  001380  C004  F06F         	movff	?__tdiv_to_l_+3,printf@val+3
  3132                           
  3133                           ;doprnt.c: 1129: fval = 0.0;
  3134  001384  0E00               	movlw	0
  3135  001386  6E76               	movwf	printf@fval,c
  3136  001388  0E00               	movlw	0
  3137  00138A  6E77               	movwf	printf@fval+1,c
  3138  00138C  0E00               	movlw	0
  3139  00138E  6E78               	movwf	printf@fval+2,c
  3140                           
  3141                           ;doprnt.c: 1130: } else {
  3142  001390  D032               	goto	i2l3363
  3143  001392                     i2l3359:
  3144                           
  3145                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3146  001392  C076  F047         	movff	printf@fval,___fttol@f1
  3147  001396  C077  F048         	movff	printf@fval+1,___fttol@f1+1
  3148  00139A  C078  F049         	movff	printf@fval+2,___fttol@f1+2
  3149  00139E  EC65  F012         	call	___fttol	;wreg free
  3150  0013A2  C047  F06C         	movff	?___fttol,printf@val
  3151  0013A6  C048  F06D         	movff	?___fttol+1,printf@val+1
  3152  0013AA  C049  F06E         	movff	?___fttol+2,printf@val+2
  3153  0013AE  C04A  F06F         	movff	?___fttol+3,printf@val+3
  3154                           
  3155                           ;doprnt.c: 1132: fval -= (double)val;
  3156  0013B2  C076  F047         	movff	printf@fval,___ftsub@f1
  3157  0013B6  C077  F048         	movff	printf@fval+1,___ftsub@f1+1
  3158  0013BA  C078  F049         	movff	printf@fval+2,___ftsub@f1+2
  3159  0013BE  C06C  F009         	movff	printf@val,___lltoft@c
  3160  0013C2  C06D  F00A         	movff	printf@val+1,___lltoft@c+1
  3161  0013C6  C06E  F00B         	movff	printf@val+2,___lltoft@c+2
  3162  0013CA  C06F  F00C         	movff	printf@val+3,___lltoft@c+3
  3163  0013CE  ECF4  F016         	call	___lltoft	;wreg free
  3164  0013D2  C009  F04A         	movff	?___lltoft,___ftsub@f2
  3165  0013D6  C00A  F04B         	movff	?___lltoft+1,___ftsub@f2+1
  3166  0013DA  C00B  F04C         	movff	?___lltoft+2,___ftsub@f2+2
  3167  0013DE  EC70  F017         	call	___ftsub	;wreg free
  3168  0013E2  C047  F076         	movff	?___ftsub,printf@fval
  3169  0013E6  C048  F077         	movff	?___ftsub+1,printf@fval+1
  3170  0013EA  C049  F078         	movff	?___ftsub+2,printf@fval+2
  3171                           
  3172                           ;doprnt.c: 1133: exp = 0;
  3173  0013EE  0E00               	movlw	0
  3174  0013F0  6E71               	movwf	printf@exp+1,c
  3175  0013F2  0E00               	movlw	0
  3176  0013F4  6E70               	movwf	printf@exp,c
  3177  0013F6                     i2l3363:
  3178                           
  3179                           ;doprnt.c: 1134: }
  3180                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3181  0013F6  0E01               	movlw	1
  3182  0013F8  6E79               	movwf	printf@c,c
  3183  0013FA                     i2l3365:
  3184  0013FA  0E0A               	movlw	10
  3185  0013FC  1879               	xorwf	printf@c,w,c
  3186  0013FE  B4D8               	btfsc	status,2,c
  3187  001400  D018               	goto	i2l3377
  3188                           
  3189                           ;doprnt.c: 1137: if(val < dpowers[c])
  3190  001402  5079               	movf	printf@c,w,c
  3191  001404  0D04               	mullw	4
  3192  001406  0E01               	movlw	low _dpowers
  3193  001408  24F3               	addwf	prodl,w,c
  3194  00140A  6EF6               	movwf	tblptrl,c
  3195  00140C  0E10               	movlw	high _dpowers
  3196  00140E  20F4               	addwfc	prodh,w,c
  3197  001410  6EF7               	movwf	tblptrh,c
  3198  001412                     	if	0	;There are less than 3 active tblptr bytes
  3199  001412                     	endif
  3200  001412  0009               	tblrd		*+
  3201  001414  50F5               	movf	tablat,w,c
  3202  001416  5C6C               	subwf	printf@val,w,c
  3203  001418  0009               	tblrd		*+
  3204  00141A  50F5               	movf	tablat,w,c
  3205  00141C  586D               	subwfb	printf@val+1,w,c
  3206  00141E  0009               	tblrd		*+
  3207  001420  50F5               	movf	tablat,w,c
  3208  001422  586E               	subwfb	printf@val+2,w,c
  3209  001424  0009               	tblrd		*+
  3210  001426  50F5               	movf	tablat,w,c
  3211  001428  586F               	subwfb	printf@val+3,w,c
  3212  00142A  A0D8               	btfss	status,0,c
  3213  00142C  D002               	goto	i2l3377
  3214                           
  3215                           ;doprnt.c: 1138: break;
  3216  00142E  2A79               	incf	printf@c,f,c
  3217  001430  D7E4               	goto	i2l3365
  3218  001432                     i2l3377:
  3219                           
  3220                           ;doprnt.c: 1175: {
  3221                           ;doprnt.c: 1188: if(flag & 0x03)
  3222  001432  0E03               	movlw	3
  3223  001434  1468               	andwf	printf@flag,w,c
  3224  001436  6E5C               	movwf	??_printf& (0+255),c
  3225  001438  0E00               	movlw	0
  3226  00143A  1469               	andwf	printf@flag+1,w,c
  3227  00143C  6E5D               	movwf	(??_printf+1)& (0+255),c
  3228  00143E  505C               	movf	??_printf,w,c
  3229  001440  105D               	iorwf	??_printf+1,w,c
  3230  001442  B4D8               	btfsc	status,2,c
  3231  001444  D048               	goto	i2l3387
  3232                           
  3233                           ;doprnt.c: 1190: (putch('-') );
  3234  001446  0E2D               	movlw	45
  3235  001448  ECDC  F017         	call	_putch
  3236                           
  3237                           ;doprnt.c: 1195: }
  3238                           ;doprnt.c: 1196: while(c--) {
  3239  00144C  D044               	goto	i2l3387
  3240  00144E                     i2l3381:
  3241                           
  3242                           ;doprnt.c: 1200: {
  3243                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3244  00144E  C06C  F001         	movff	printf@val,___lldiv@dividend
  3245  001452  C06D  F002         	movff	printf@val+1,___lldiv@dividend+1
  3246  001456  C06E  F003         	movff	printf@val+2,___lldiv@dividend+2
  3247  00145A  C06F  F004         	movff	printf@val+3,___lldiv@dividend+3
  3248  00145E  5079               	movf	printf@c,w,c
  3249  001460  0D04               	mullw	4
  3250  001462  0E01               	movlw	low _dpowers
  3251  001464  24F3               	addwf	prodl,w,c
  3252  001466  6EF6               	movwf	tblptrl,c
  3253  001468  0E10               	movlw	high _dpowers
  3254  00146A  20F4               	addwfc	prodh,w,c
  3255  00146C  6EF7               	movwf	tblptrh,c
  3256  00146E                     	if	0	;There are less than 3 active tblptr bytes
  3257  00146E                     	endif
  3258  00146E  0009               	tblrd		*+
  3259  001470  CFF5 F005          	movff	tablat,___lldiv@divisor
  3260  001474  0009               	tblrd		*+
  3261  001476  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3262  00147A  0009               	tblrd		*+
  3263  00147C  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3264  001480  000A               	tblrd		*-
  3265  001482  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3266  001486  EC9E  F015         	call	___lldiv	;wreg free
  3267  00148A  C001  F072         	movff	?___lldiv,printf@tmpval
  3268  00148E  C002  F073         	movff	?___lldiv+1,printf@tmpval+1
  3269  001492  C003  F074         	movff	?___lldiv+2,printf@tmpval+2
  3270  001496  C004  F075         	movff	?___lldiv+3,printf@tmpval+3
  3271                           
  3272                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3273  00149A  C072  F001         	movff	printf@tmpval,___llmod@dividend
  3274  00149E  C073  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  3275  0014A2  C074  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  3276  0014A6  C075  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  3277  0014AA  0E0A               	movlw	10
  3278  0014AC  6E05               	movwf	___llmod@divisor,c
  3279  0014AE  0E00               	movlw	0
  3280  0014B0  6E06               	movwf	___llmod@divisor+1,c
  3281  0014B2  0E00               	movlw	0
  3282  0014B4  6E07               	movwf	___llmod@divisor+2,c
  3283  0014B6  0E00               	movlw	0
  3284  0014B8  6E08               	movwf	___llmod@divisor+3,c
  3285  0014BA  ECC1  F016         	call	___llmod	;wreg free
  3286  0014BE  C001  F072         	movff	?___llmod,printf@tmpval
  3287  0014C2  C002  F073         	movff	?___llmod+1,printf@tmpval+1
  3288  0014C6  C003  F074         	movff	?___llmod+2,printf@tmpval+2
  3289  0014CA  C004  F075         	movff	?___llmod+3,printf@tmpval+3
  3290                           
  3291                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  3292  0014CE  5072               	movf	printf@tmpval,w,c
  3293  0014D0  0F30               	addlw	48
  3294  0014D2  ECDC  F017         	call	_putch
  3295  0014D6                     i2l3387:
  3296  0014D6  0679               	decf	printf@c,f,c
  3297  0014D8  2879               	incf	printf@c,w,c
  3298  0014DA  B4D8               	btfsc	status,2,c
  3299  0014DC  D007               	goto	i2l3393
  3300  0014DE  D7B7               	goto	i2l3381
  3301  0014E0                     i2l3389:
  3302                           
  3303                           ;doprnt.c: 1208: (putch('0') );
  3304  0014E0  0E30               	movlw	48
  3305  0014E2  ECDC  F017         	call	_putch
  3306                           
  3307                           ;doprnt.c: 1209: exp--;
  3308  0014E6  0670               	decf	printf@exp,f,c
  3309  0014E8  A0D8               	btfss	status,0,c
  3310  0014EA  0671               	decf	printf@exp+1,f,c
  3311  0014EC                     i2l3393:
  3312  0014EC  BE71               	btfsc	printf@exp+1,7,c
  3313  0014EE  D005               	goto	i2l3395
  3314  0014F0  5071               	movf	printf@exp+1,w,c
  3315  0014F2  E1F6               	bnz	i2l3389
  3316  0014F4  0470               	decf	printf@exp,w,c
  3317  0014F6  B0D8               	btfsc	status,0,c
  3318  0014F8  D7F3               	goto	i2l3389
  3319  0014FA                     i2l3395:
  3320                           
  3321                           ;doprnt.c: 1210: }
  3322                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3323  0014FA  BE6B               	btfsc	printf@prec+1,7,c
  3324  0014FC  D009               	goto	i2l458
  3325  0014FE  506B               	movf	printf@prec+1,w,c
  3326  001500  E104               	bnz	i2u311_40
  3327  001502  0E09               	movlw	9
  3328  001504  5C6A               	subwf	printf@prec,w,c
  3329  001506  A0D8               	btfss	status,0,c
  3330  001508  D003               	goto	i2l458
  3331  00150A                     i2u311_40:
  3332                           
  3333                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3334  00150A  0E08               	movlw	8
  3335  00150C  6E79               	movwf	printf@c,c
  3336  00150E  D002               	goto	i2l3399
  3337  001510                     i2l458:
  3338                           
  3339                           ;doprnt.c: 1213: else
  3340                           ;doprnt.c: 1214: c = prec;
  3341  001510  C06A  F079         	movff	printf@prec,printf@c
  3342  001514                     i2l3399:
  3343                           
  3344                           ;doprnt.c: 1215: prec -= c;
  3345  001514  5079               	movf	printf@c,w,c
  3346  001516  5E6A               	subwf	printf@prec,f,c
  3347  001518  0E00               	movlw	0
  3348  00151A  BE79               	btfsc	printf@c,7,c
  3349  00151C  0EFF               	movlw	255
  3350  00151E  5A6B               	subwfb	printf@prec+1,f,c
  3351                           
  3352                           ;doprnt.c: 1219: if(c)
  3353  001520  5079               	movf	printf@c,w,c
  3354  001522  B4D8               	btfsc	status,2,c
  3355  001524  D003               	goto	i2l3405
  3356                           
  3357                           ;doprnt.c: 1221: (putch('.') );
  3358  001526  0E2E               	movlw	46
  3359  001528  ECDC  F017         	call	_putch
  3360  00152C                     i2l3405:
  3361                           
  3362                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3363  00152C  5079               	movf	printf@c,w,c
  3364  00152E  ECC7  F00B         	call	_scale
  3365  001532  C031  F062         	movff	?_scale,_printf$1140
  3366  001536  C032  F063         	movff	?_scale+1,_printf$1140+1
  3367  00153A  C033  F064         	movff	?_scale+2,_printf$1140+2
  3368                           
  3369                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3370  00153E  C076  F025         	movff	printf@fval,___ftmul@f2
  3371  001542  C077  F026         	movff	printf@fval+1,___ftmul@f2+1
  3372  001546  C078  F027         	movff	printf@fval+2,___ftmul@f2+2
  3373  00154A  C062  F022         	movff	_printf$1140,___ftmul@f1
  3374  00154E  C063  F023         	movff	_printf$1140+1,___ftmul@f1+1
  3375  001552  C064  F024         	movff	_printf$1140+2,___ftmul@f1+2
  3376  001556  ECEB  F011         	call	___ftmul	;wreg free
  3377  00155A  C022  F047         	movff	?___ftmul,___fttol@f1
  3378  00155E  C023  F048         	movff	?___ftmul+1,___fttol@f1+1
  3379  001562  C024  F049         	movff	?___ftmul+2,___fttol@f1+2
  3380  001566  EC65  F012         	call	___fttol	;wreg free
  3381  00156A  C047  F06C         	movff	?___fttol,printf@val
  3382  00156E  C048  F06D         	movff	?___fttol+1,printf@val+1
  3383  001572  C049  F06E         	movff	?___fttol+2,printf@val+2
  3384  001576  C04A  F06F         	movff	?___fttol+3,printf@val+3
  3385                           
  3386                           ;doprnt.c: 1228: while(c--) {
  3387  00157A  D06A               	goto	i2l3415
  3388  00157C                     i2l3409:
  3389                           
  3390                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3391  00157C  C06C  F001         	movff	printf@val,___lldiv@dividend
  3392  001580  C06D  F002         	movff	printf@val+1,___lldiv@dividend+1
  3393  001584  C06E  F003         	movff	printf@val+2,___lldiv@dividend+2
  3394  001588  C06F  F004         	movff	printf@val+3,___lldiv@dividend+3
  3395  00158C  5079               	movf	printf@c,w,c
  3396  00158E  0D04               	mullw	4
  3397  001590  0E01               	movlw	low _dpowers
  3398  001592  24F3               	addwf	prodl,w,c
  3399  001594  6EF6               	movwf	tblptrl,c
  3400  001596  0E10               	movlw	high _dpowers
  3401  001598  20F4               	addwfc	prodh,w,c
  3402  00159A  6EF7               	movwf	tblptrh,c
  3403  00159C                     	if	0	;There are less than 3 active tblptr bytes
  3404  00159C                     	endif
  3405  00159C  0009               	tblrd		*+
  3406  00159E  CFF5 F005          	movff	tablat,___lldiv@divisor
  3407  0015A2  0009               	tblrd		*+
  3408  0015A4  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3409  0015A8  0009               	tblrd		*+
  3410  0015AA  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3411  0015AE  000A               	tblrd		*-
  3412  0015B0  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3413  0015B4  EC9E  F015         	call	___lldiv	;wreg free
  3414  0015B8  C001  F072         	movff	?___lldiv,printf@tmpval
  3415  0015BC  C002  F073         	movff	?___lldiv+1,printf@tmpval+1
  3416  0015C0  C003  F074         	movff	?___lldiv+2,printf@tmpval+2
  3417  0015C4  C004  F075         	movff	?___lldiv+3,printf@tmpval+3
  3418                           
  3419                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3420  0015C8  C072  F001         	movff	printf@tmpval,___llmod@dividend
  3421  0015CC  C073  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  3422  0015D0  C074  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  3423  0015D4  C075  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  3424  0015D8  0E0A               	movlw	10
  3425  0015DA  6E05               	movwf	___llmod@divisor,c
  3426  0015DC  0E00               	movlw	0
  3427  0015DE  6E06               	movwf	___llmod@divisor+1,c
  3428  0015E0  0E00               	movlw	0
  3429  0015E2  6E07               	movwf	___llmod@divisor+2,c
  3430  0015E4  0E00               	movlw	0
  3431  0015E6  6E08               	movwf	___llmod@divisor+3,c
  3432  0015E8  ECC1  F016         	call	___llmod	;wreg free
  3433  0015EC  C001  F072         	movff	?___llmod,printf@tmpval
  3434  0015F0  C002  F073         	movff	?___llmod+1,printf@tmpval+1
  3435  0015F4  C003  F074         	movff	?___llmod+2,printf@tmpval+2
  3436  0015F8  C004  F075         	movff	?___llmod+3,printf@tmpval+3
  3437                           
  3438                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  3439  0015FC  5072               	movf	printf@tmpval,w,c
  3440  0015FE  0F30               	addlw	48
  3441  001600  ECDC  F017         	call	_putch
  3442                           
  3443                           ;doprnt.c: 1232: val %= dpowers[c];
  3444  001604  C06C  F001         	movff	printf@val,___llmod@dividend
  3445  001608  C06D  F002         	movff	printf@val+1,___llmod@dividend+1
  3446  00160C  C06E  F003         	movff	printf@val+2,___llmod@dividend+2
  3447  001610  C06F  F004         	movff	printf@val+3,___llmod@dividend+3
  3448  001614  5079               	movf	printf@c,w,c
  3449  001616  0D04               	mullw	4
  3450  001618  0E01               	movlw	low _dpowers
  3451  00161A  24F3               	addwf	prodl,w,c
  3452  00161C  6EF6               	movwf	tblptrl,c
  3453  00161E  0E10               	movlw	high _dpowers
  3454  001620  20F4               	addwfc	prodh,w,c
  3455  001622  6EF7               	movwf	tblptrh,c
  3456  001624                     	if	0	;There are less than 3 active tblptr bytes
  3457  001624                     	endif
  3458  001624  0009               	tblrd		*+
  3459  001626  CFF5 F005          	movff	tablat,___llmod@divisor
  3460  00162A  0009               	tblrd		*+
  3461  00162C  CFF5 F006          	movff	tablat,___llmod@divisor+1
  3462  001630  0009               	tblrd		*+
  3463  001632  CFF5 F007          	movff	tablat,___llmod@divisor+2
  3464  001636  000A               	tblrd		*-
  3465  001638  CFF5 F008          	movff	tablat,___llmod@divisor+3
  3466  00163C  ECC1  F016         	call	___llmod	;wreg free
  3467  001640  C001  F06C         	movff	?___llmod,printf@val
  3468  001644  C002  F06D         	movff	?___llmod+1,printf@val+1
  3469  001648  C003  F06E         	movff	?___llmod+2,printf@val+2
  3470  00164C  C004  F06F         	movff	?___llmod+3,printf@val+3
  3471  001650                     i2l3415:
  3472  001650  0679               	decf	printf@c,f,c
  3473  001652  2879               	incf	printf@c,w,c
  3474  001654  B4D8               	btfsc	status,2,c
  3475  001656  D007               	goto	i2l3421
  3476  001658  D791               	goto	i2l3409
  3477  00165A                     i2l3417:
  3478                           
  3479                           ;doprnt.c: 1236: (putch('0') );
  3480  00165A  0E30               	movlw	48
  3481  00165C  ECDC  F017         	call	_putch
  3482                           
  3483                           ;doprnt.c: 1237: prec--;
  3484  001660  066A               	decf	printf@prec,f,c
  3485  001662  A0D8               	btfss	status,0,c
  3486  001664  066B               	decf	printf@prec+1,f,c
  3487  001666                     i2l3421:
  3488  001666  506A               	movf	printf@prec,w,c
  3489  001668  106B               	iorwf	printf@prec+1,w,c
  3490  00166A  B4D8               	btfsc	status,2,c
  3491  00166C  D083               	goto	i2l3455
  3492  00166E  D7F5               	goto	i2l3417
  3493  001670                     i2l3423:
  3494                           
  3495                           ;doprnt.c: 1246: }
  3496                           ;doprnt.c: 1273: {
  3497                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3498  001670  C066  FFD9         	movff	printf@ap,fsr2l
  3499  001674  C067  FFDA         	movff	printf@ap+1,fsr2h
  3500  001678  CFDE F05C          	movff	postinc2,??_printf
  3501  00167C  CFDD F05D          	movff	postdec2,??_printf+1
  3502  001680  C05C  F06C         	movff	??_printf,printf@val
  3503  001684  C05D  F06D         	movff	??_printf+1,printf@val+1
  3504  001688  6A6E               	clrf	printf@val+2,c
  3505  00168A  6A6F               	clrf	printf@val+3,c
  3506  00168C  0E02               	movlw	2
  3507  00168E  2666               	addwf	printf@ap,f,c
  3508  001690  0E00               	movlw	0
  3509  001692  2267               	addwfc	printf@ap+1,f,c
  3510                           
  3511                           ;doprnt.c: 1287: }
  3512                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3513  001694  0E01               	movlw	1
  3514  001696  6E79               	movwf	printf@c,c
  3515  001698                     i2l3429:
  3516  001698  0E08               	movlw	8
  3517  00169A  1879               	xorwf	printf@c,w,c
  3518  00169C  B4D8               	btfsc	status,2,c
  3519  00169E  D018               	goto	i2l3441
  3520                           
  3521                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3522  0016A0  5079               	movf	printf@c,w,c
  3523  0016A2  0D04               	mullw	4
  3524  0016A4  0E77               	movlw	low _hexpowers
  3525  0016A6  24F3               	addwf	prodl,w,c
  3526  0016A8  6EF6               	movwf	tblptrl,c
  3527  0016AA  0E10               	movlw	high _hexpowers
  3528  0016AC  20F4               	addwfc	prodh,w,c
  3529  0016AE  6EF7               	movwf	tblptrh,c
  3530  0016B0                     	if	0	;There are less than 3 active tblptr bytes
  3531  0016B0                     	endif
  3532  0016B0  0009               	tblrd		*+
  3533  0016B2  50F5               	movf	tablat,w,c
  3534  0016B4  5C6C               	subwf	printf@val,w,c
  3535  0016B6  0009               	tblrd		*+
  3536  0016B8  50F5               	movf	tablat,w,c
  3537  0016BA  586D               	subwfb	printf@val+1,w,c
  3538  0016BC  0009               	tblrd		*+
  3539  0016BE  50F5               	movf	tablat,w,c
  3540  0016C0  586E               	subwfb	printf@val+2,w,c
  3541  0016C2  0009               	tblrd		*+
  3542  0016C4  50F5               	movf	tablat,w,c
  3543  0016C6  586F               	subwfb	printf@val+3,w,c
  3544  0016C8  A0D8               	btfss	status,0,c
  3545  0016CA  D002               	goto	i2l3441
  3546                           
  3547                           ;doprnt.c: 1318: break;
  3548  0016CC  2A79               	incf	printf@c,f,c
  3549  0016CE  D7E4               	goto	i2l3429
  3550  0016D0                     i2l3441:
  3551                           
  3552                           ;doprnt.c: 1422: {
  3553                           ;doprnt.c: 1438: if(flag & 0x03)
  3554  0016D0  0E03               	movlw	3
  3555  0016D2  1468               	andwf	printf@flag,w,c
  3556  0016D4  6E5C               	movwf	??_printf& (0+255),c
  3557  0016D6  0E00               	movlw	0
  3558  0016D8  1469               	andwf	printf@flag+1,w,c
  3559  0016DA  6E5D               	movwf	(??_printf+1)& (0+255),c
  3560  0016DC  505C               	movf	??_printf,w,c
  3561  0016DE  105D               	iorwf	??_printf+1,w,c
  3562  0016E0  B4D8               	btfsc	status,2,c
  3563  0016E2  D003               	goto	i2l3445
  3564                           
  3565                           ;doprnt.c: 1439: (putch('-') );
  3566  0016E4  0E2D               	movlw	45
  3567  0016E6  ECDC  F017         	call	_putch
  3568  0016EA                     i2l3445:
  3569                           
  3570                           ;doprnt.c: 1469: }
  3571                           ;doprnt.c: 1472: prec = c;
  3572  0016EA  5079               	movf	printf@c,w,c
  3573  0016EC  6E6A               	movwf	printf@prec,c
  3574  0016EE  6A6B               	clrf	printf@prec+1,c
  3575  0016F0  BE6A               	btfsc	printf@prec,7,c
  3576  0016F2  066B               	decf	printf@prec+1,f,c
  3577                           
  3578                           ;doprnt.c: 1474: while(prec--) {
  3579  0016F4  D037               	goto	i2l3453
  3580  0016F6                     i2l3447:
  3581                           
  3582                           ;doprnt.c: 1478: {
  3583                           ;doprnt.c: 1499: {
  3584                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3585  0016F6  C06C  F001         	movff	printf@val,___lldiv@dividend
  3586  0016FA  C06D  F002         	movff	printf@val+1,___lldiv@dividend+1
  3587  0016FE  C06E  F003         	movff	printf@val+2,___lldiv@dividend+2
  3588  001702  C06F  F004         	movff	printf@val+3,___lldiv@dividend+3
  3589  001706  C06A  F05C         	movff	printf@prec,??_printf
  3590  00170A  C06B  F05D         	movff	printf@prec+1,??_printf+1
  3591  00170E  90D8               	bcf	status,0,c
  3592  001710  365C               	rlcf	??_printf,f,c
  3593  001712  365D               	rlcf	??_printf+1,f,c
  3594  001714  90D8               	bcf	status,0,c
  3595  001716  365C               	rlcf	??_printf,f,c
  3596  001718  365D               	rlcf	??_printf+1,f,c
  3597  00171A  0E77               	movlw	low _hexpowers
  3598  00171C  245C               	addwf	??_printf,w,c
  3599  00171E  6EF6               	movwf	tblptrl,c
  3600  001720  0E10               	movlw	high _hexpowers
  3601  001722  205D               	addwfc	??_printf+1,w,c
  3602  001724  6EF7               	movwf	tblptrh,c
  3603  001726                     	if	0	;There are less than 3 active tblptr bytes
  3604  001726                     	endif
  3605  001726  0009               	tblrd		*+
  3606  001728  CFF5 F005          	movff	tablat,___lldiv@divisor
  3607  00172C  0009               	tblrd		*+
  3608  00172E  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3609  001732  0009               	tblrd		*+
  3610  001734  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3611  001738  000A               	tblrd		*-
  3612  00173A  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3613  00173E  EC9E  F015         	call	___lldiv	;wreg free
  3614  001742  5001               	movf	?___lldiv,w,c
  3615  001744  0B0F               	andlw	15
  3616  001746  6E65               	movwf	printf@idx,c
  3617                           
  3618                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3619  001748  5065               	movf	printf@idx,w,c
  3620  00174A  0D01               	mullw	1
  3621  00174C  0EB6               	movlw	low STR_4
  3622  00174E  24F3               	addwf	prodl,w,c
  3623  001750  6EF6               	movwf	tblptrl,c
  3624  001752  0E10               	movlw	high STR_4
  3625  001754  20F4               	addwfc	prodh,w,c
  3626  001756  6EF7               	movwf	tblptrh,c
  3627  001758                     	if	0	;There are less than 3 active tblptr bytes
  3628  001758                     	endif
  3629  001758  0008               	tblrd		*
  3630  00175A  CFF5 F079          	movff	tablat,printf@c
  3631                           
  3632                           ;doprnt.c: 1508: }
  3633                           ;doprnt.c: 1523: }
  3634                           ;doprnt.c: 1524: (putch(c) );
  3635  00175E  5079               	movf	printf@c,w,c
  3636  001760  ECDC  F017         	call	_putch
  3637  001764                     i2l3453:
  3638  001764  066A               	decf	printf@prec,f,c
  3639  001766  A0D8               	btfss	status,0,c
  3640  001768  066B               	decf	printf@prec+1,f,c
  3641  00176A  286A               	incf	printf@prec,w,c
  3642  00176C  E1C4               	bnz	i2l3447
  3643  00176E  286B               	incf	printf@prec+1,w,c
  3644  001770  A4D8               	btfss	status,2,c
  3645  001772  D7C1               	goto	i2l3447
  3646  001774                     i2l3455:
  3647  001774  C056  FFF6         	movff	printf@f,tblptrl
  3648  001778  C057  FFF7         	movff	printf@f+1,tblptrh
  3649  00177C  4A56               	infsnz	printf@f,f,c
  3650  00177E  2A57               	incf	printf@f+1,f,c
  3651  001780                     	if	0	;tblptru may be non-zero
  3652  001780                     	endif
  3653  001780                     	if	0	;tblptru may be non-zero
  3654  001780                     	endif
  3655  001780  0008               	tblrd		*
  3656  001782  CFF5 F079          	movff	tablat,printf@c
  3657  001786  5079               	movf	printf@c,w,c
  3658  001788  B4D8               	btfsc	status,2,c
  3659  00178A  0012               	return	
  3660  00178C  D4AF               	goto	i2l3279
  3661  00178E                     __end_of_printf:
  3662                           	opt stack 0
  3663                           pclatu	equ	0xFFB
  3664                           pclath	equ	0xFFA
  3665                           tblptru	equ	0xFF8
  3666                           tblptrh	equ	0xFF7
  3667                           tblptrl	equ	0xFF6
  3668                           tablat	equ	0xFF5
  3669                           prodh	equ	0xFF4
  3670                           prodl	equ	0xFF3
  3671                           intcon	equ	0xFF2
  3672                           intcon3	equ	0xFF0
  3673                           postinc0	equ	0xFEE
  3674                           fsr0h	equ	0xFEA
  3675                           fsr0l	equ	0xFE9
  3676                           wreg	equ	0xFE8
  3677                           postdec1	equ	0xFE5
  3678                           fsr1h	equ	0xFE2
  3679                           fsr1l	equ	0xFE1
  3680                           postinc2	equ	0xFDE
  3681                           postdec2	equ	0xFDD
  3682                           fsr2h	equ	0xFDA
  3683                           fsr2l	equ	0xFD9
  3684                           status	equ	0xFD8
  3685                           
  3686 ;; *************** function _scale *****************
  3687 ;; Defined at:
  3688 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3689 ;; Parameters:    Size  Location     Type
  3690 ;;  scl             1    wreg     char 
  3691 ;; Auto vars:     Size  Location     Type
  3692 ;;  scl             1   54[COMRAM] char 
  3693 ;; Return value:  Size  Location     Type
  3694 ;;                  3   48[COMRAM] char 
  3695 ;; Registers used:
  3696 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3697 ;; Tracked objects:
  3698 ;;		On entry : 0/0
  3699 ;;		On exit  : 0/0
  3700 ;;		Unchanged: 0/0
  3701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3702 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3703 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3705 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3706 ;;Total ram usage:        7 bytes
  3707 ;; Hardware stack levels used:    1
  3708 ;; Hardware stack levels required when called:    2
  3709 ;; This function calls:
  3710 ;;		___awdiv
  3711 ;;		___awmod
  3712 ;;		___ftmul
  3713 ;;		___wmul
  3714 ;; This function is called by:
  3715 ;;		_printf
  3716 ;; This function uses a non-reentrant model
  3717 ;;
  3718                           
  3719                           	psect	text12
  3720  00178E                     __ptext12:
  3721                           	opt stack 0
  3722  00178E                     _scale:
  3723                           	opt stack 23
  3724                           
  3725                           ;incstack = 0
  3726                           ;scale@scl stored from wreg
  3727  00178E  6E37               	movwf	scale@scl,c
  3728                           
  3729                           ;doprnt.c: 428: if(scl < 0) {
  3730  001790  AE37               	btfss	scale@scl,7,c
  3731  001792  D0FB               	goto	i2l2965
  3732                           
  3733                           ;doprnt.c: 429: scl = -scl;
  3734  001794  6C37               	negf	scale@scl,c
  3735                           
  3736                           ;doprnt.c: 430: if(scl>=110)
  3737  001796  5037               	movf	scale@scl,w,c
  3738  001798  0A80               	xorlw	128
  3739  00179A  0F12               	addlw	-238
  3740  00179C  A0D8               	btfss	status,0,c
  3741  00179E  D091               	goto	i2l2955
  3742                           
  3743                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3744  0017A0  0E00               	movlw	0
  3745  0017A2  6E12               	movwf	___wmul@multiplicand+1,c
  3746  0017A4  0E03               	movlw	3
  3747  0017A6  6E11               	movwf	___wmul@multiplicand,c
  3748  0017A8  0E00               	movlw	0
  3749  0017AA  6E0A               	movwf	___awdiv@divisor+1,c
  3750  0017AC  0E0A               	movlw	10
  3751  0017AE  6E09               	movwf	___awdiv@divisor,c
  3752  0017B0  0E00               	movlw	0
  3753  0017B2  6E04               	movwf	___awmod@divisor+1,c
  3754  0017B4  0E64               	movlw	100
  3755  0017B6  6E03               	movwf	___awmod@divisor,c
  3756  0017B8  5037               	movf	scale@scl,w,c
  3757  0017BA  6E01               	movwf	___awmod@dividend,c
  3758  0017BC  6A02               	clrf	___awmod@dividend+1,c
  3759  0017BE  BE01               	btfsc	___awmod@dividend,7,c
  3760  0017C0  0602               	decf	___awmod@dividend+1,f,c
  3761  0017C2  EC56  F016         	call	___awmod	;wreg free
  3762  0017C6  C001  F007         	movff	?___awmod,___awdiv@dividend
  3763  0017CA  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3764  0017CE  EC5C  F015         	call	___awdiv	;wreg free
  3765  0017D2  0E09               	movlw	9
  3766  0017D4  2407               	addwf	?___awdiv,w,c
  3767  0017D6  6E0F               	movwf	___wmul@multiplier,c
  3768  0017D8  0E00               	movlw	0
  3769  0017DA  2008               	addwfc	?___awdiv+1,w,c
  3770  0017DC  6E10               	movwf	___wmul@multiplier+1,c
  3771  0017DE  ECA5  F017         	call	___wmul	;wreg free
  3772  0017E2  0E29               	movlw	low __npowers_
  3773  0017E4  240F               	addwf	?___wmul,w,c
  3774  0017E6  6EF6               	movwf	tblptrl,c
  3775  0017E8  0E10               	movlw	high __npowers_
  3776  0017EA  2010               	addwfc	?___wmul+1,w,c
  3777  0017EC  6EF7               	movwf	tblptrh,c
  3778  0017EE                     	if	0	;There are less than 3 active tblptr bytes
  3779  0017EE                     	endif
  3780  0017EE  0009               	tblrd		*+
  3781  0017F0  CFF5 F025          	movff	tablat,___ftmul@f2
  3782  0017F4  0009               	tblrd		*+
  3783  0017F6  CFF5 F026          	movff	tablat,___ftmul@f2+1
  3784  0017FA  000A               	tblrd		*-
  3785  0017FC  CFF5 F027          	movff	tablat,___ftmul@f2+2
  3786  001800  0E00               	movlw	0
  3787  001802  6E0A               	movwf	___awdiv@divisor+1,c
  3788  001804  0E64               	movlw	100
  3789  001806  6E09               	movwf	___awdiv@divisor,c
  3790  001808  5037               	movf	scale@scl,w,c
  3791  00180A  6E07               	movwf	___awdiv@dividend,c
  3792  00180C  6A08               	clrf	___awdiv@dividend+1,c
  3793  00180E  BE07               	btfsc	___awdiv@dividend,7,c
  3794  001810  0608               	decf	___awdiv@dividend+1,f,c
  3795  001812  EC5C  F015         	call	___awdiv	;wreg free
  3796  001816  0E12               	movlw	18
  3797  001818  2407               	addwf	?___awdiv,w,c
  3798  00181A  6E0F               	movwf	___wmul@multiplier,c
  3799  00181C  0E00               	movlw	0
  3800  00181E  2008               	addwfc	?___awdiv+1,w,c
  3801  001820  6E10               	movwf	___wmul@multiplier+1,c
  3802  001822  0E00               	movlw	0
  3803  001824  6E12               	movwf	___wmul@multiplicand+1,c
  3804  001826  0E03               	movlw	3
  3805  001828  6E11               	movwf	___wmul@multiplicand,c
  3806  00182A  ECA5  F017         	call	___wmul	;wreg free
  3807  00182E  0E29               	movlw	low __npowers_
  3808  001830  240F               	addwf	?___wmul,w,c
  3809  001832  6EF6               	movwf	tblptrl,c
  3810  001834  0E10               	movlw	high __npowers_
  3811  001836  2010               	addwfc	?___wmul+1,w,c
  3812  001838  6EF7               	movwf	tblptrh,c
  3813  00183A                     	if	0	;There are less than 3 active tblptr bytes
  3814  00183A                     	endif
  3815  00183A  0009               	tblrd		*+
  3816  00183C  CFF5 F022          	movff	tablat,___ftmul@f1
  3817  001840  0009               	tblrd		*+
  3818  001842  CFF5 F023          	movff	tablat,___ftmul@f1+1
  3819  001846  000A               	tblrd		*-
  3820  001848  CFF5 F024          	movff	tablat,___ftmul@f1+2
  3821  00184C  ECEB  F011         	call	___ftmul	;wreg free
  3822  001850  C022  F034         	movff	?___ftmul,_scale$1139
  3823  001854  C023  F035         	movff	?___ftmul+1,_scale$1139+1
  3824  001858  C024  F036         	movff	?___ftmul+2,_scale$1139+2
  3825                           
  3826                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3827  00185C  C034  F022         	movff	_scale$1139,___ftmul@f1
  3828  001860  C035  F023         	movff	_scale$1139+1,___ftmul@f1+1
  3829  001864  C036  F024         	movff	_scale$1139+2,___ftmul@f1+2
  3830  001868  0E00               	movlw	0
  3831  00186A  6E12               	movwf	___wmul@multiplicand+1,c
  3832  00186C  0E03               	movlw	3
  3833  00186E  6E11               	movwf	___wmul@multiplicand,c
  3834  001870  0E00               	movlw	0
  3835  001872  6E04               	movwf	___awmod@divisor+1,c
  3836  001874  0E0A               	movlw	10
  3837  001876  6E03               	movwf	___awmod@divisor,c
  3838  001878  5037               	movf	scale@scl,w,c
  3839  00187A  6E01               	movwf	___awmod@dividend,c
  3840  00187C  6A02               	clrf	___awmod@dividend+1,c
  3841  00187E  BE01               	btfsc	___awmod@dividend,7,c
  3842  001880  0602               	decf	___awmod@dividend+1,f,c
  3843  001882  EC56  F016         	call	___awmod	;wreg free
  3844  001886  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3845  00188A  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3846  00188E  ECA5  F017         	call	___wmul	;wreg free
  3847  001892  0E29               	movlw	low __npowers_
  3848  001894  240F               	addwf	?___wmul,w,c
  3849  001896  6EF6               	movwf	tblptrl,c
  3850  001898  0E10               	movlw	high __npowers_
  3851  00189A  2010               	addwfc	?___wmul+1,w,c
  3852  00189C  6EF7               	movwf	tblptrh,c
  3853  00189E                     	if	0	;There are less than 3 active tblptr bytes
  3854  00189E                     	endif
  3855  00189E  0009               	tblrd		*+
  3856  0018A0  CFF5 F025          	movff	tablat,___ftmul@f2
  3857  0018A4  0009               	tblrd		*+
  3858  0018A6  CFF5 F026          	movff	tablat,___ftmul@f2+1
  3859  0018AA  000A               	tblrd		*-
  3860  0018AC  CFF5 F027          	movff	tablat,___ftmul@f2+2
  3861  0018B0  ECEB  F011         	call	___ftmul	;wreg free
  3862  0018B4  C022  F031         	movff	?___ftmul,?_scale
  3863  0018B8  C023  F032         	movff	?___ftmul+1,?_scale+1
  3864  0018BC  C024  F033         	movff	?___ftmul+2,?_scale+2
  3865  0018C0  0012               	return	
  3866  0018C2                     i2l2955:
  3867                           
  3868                           ;doprnt.c: 432: else if(scl > 10)
  3869  0018C2  5037               	movf	scale@scl,w,c
  3870  0018C4  0A80               	xorlw	128
  3871  0018C6  0F75               	addlw	-139
  3872  0018C8  A0D8               	btfss	status,0,c
  3873  0018CA  D04D               	goto	i2l2961
  3874                           
  3875                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3876  0018CC  0E00               	movlw	0
  3877  0018CE  6E0A               	movwf	___awdiv@divisor+1,c
  3878  0018D0  0E0A               	movlw	10
  3879  0018D2  6E09               	movwf	___awdiv@divisor,c
  3880  0018D4  5037               	movf	scale@scl,w,c
  3881  0018D6  6E07               	movwf	___awdiv@dividend,c
  3882  0018D8  6A08               	clrf	___awdiv@dividend+1,c
  3883  0018DA  BE07               	btfsc	___awdiv@dividend,7,c
  3884  0018DC  0608               	decf	___awdiv@dividend+1,f,c
  3885  0018DE  EC5C  F015         	call	___awdiv	;wreg free
  3886  0018E2  0E09               	movlw	9
  3887  0018E4  2407               	addwf	?___awdiv,w,c
  3888  0018E6  6E0F               	movwf	___wmul@multiplier,c
  3889  0018E8  0E00               	movlw	0
  3890  0018EA  2008               	addwfc	?___awdiv+1,w,c
  3891  0018EC  6E10               	movwf	___wmul@multiplier+1,c
  3892  0018EE  0E00               	movlw	0
  3893  0018F0  6E12               	movwf	___wmul@multiplicand+1,c
  3894  0018F2  0E03               	movlw	3
  3895  0018F4  6E11               	movwf	___wmul@multiplicand,c
  3896  0018F6  ECA5  F017         	call	___wmul	;wreg free
  3897  0018FA  0E29               	movlw	low __npowers_
  3898  0018FC  240F               	addwf	?___wmul,w,c
  3899  0018FE  6EF6               	movwf	tblptrl,c
  3900  001900  0E10               	movlw	high __npowers_
  3901  001902  2010               	addwfc	?___wmul+1,w,c
  3902  001904  6EF7               	movwf	tblptrh,c
  3903  001906                     	if	0	;There are less than 3 active tblptr bytes
  3904  001906                     	endif
  3905  001906  0009               	tblrd		*+
  3906  001908  CFF5 F022          	movff	tablat,___ftmul@f1
  3907  00190C  0009               	tblrd		*+
  3908  00190E  CFF5 F023          	movff	tablat,___ftmul@f1+1
  3909  001912  000A               	tblrd		*-
  3910  001914  CFF5 F024          	movff	tablat,___ftmul@f1+2
  3911  001918  0E00               	movlw	0
  3912  00191A  6E12               	movwf	___wmul@multiplicand+1,c
  3913  00191C  0E03               	movlw	3
  3914  00191E  6E11               	movwf	___wmul@multiplicand,c
  3915  001920  0E00               	movlw	0
  3916  001922  6E04               	movwf	___awmod@divisor+1,c
  3917  001924  0E0A               	movlw	10
  3918  001926  6E03               	movwf	___awmod@divisor,c
  3919  001928  5037               	movf	scale@scl,w,c
  3920  00192A  6E01               	movwf	___awmod@dividend,c
  3921  00192C  6A02               	clrf	___awmod@dividend+1,c
  3922  00192E  BE01               	btfsc	___awmod@dividend,7,c
  3923  001930  0602               	decf	___awmod@dividend+1,f,c
  3924  001932  EC56  F016         	call	___awmod	;wreg free
  3925  001936  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3926  00193A  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3927  00193E  ECA5  F017         	call	___wmul	;wreg free
  3928  001942  0E29               	movlw	low __npowers_
  3929  001944  240F               	addwf	?___wmul,w,c
  3930  001946  6EF6               	movwf	tblptrl,c
  3931  001948  0E10               	movlw	high __npowers_
  3932  00194A  2010               	addwfc	?___wmul+1,w,c
  3933  00194C  6EF7               	movwf	tblptrh,c
  3934  00194E                     	if	0	;There are less than 3 active tblptr bytes
  3935  00194E                     	endif
  3936  00194E  0009               	tblrd		*+
  3937  001950  CFF5 F025          	movff	tablat,___ftmul@f2
  3938  001954  0009               	tblrd		*+
  3939  001956  CFF5 F026          	movff	tablat,___ftmul@f2+1
  3940  00195A  000A               	tblrd		*-
  3941  00195C  CFF5 F027          	movff	tablat,___ftmul@f2+2
  3942  001960  ECEB  F011         	call	___ftmul	;wreg free
  3943  001964  D7A7               	goto	L2
  3944  001966                     i2l2961:
  3945                           
  3946                           ;doprnt.c: 434: return _npowers_[scl];
  3947  001966  5037               	movf	scale@scl,w,c
  3948  001968  0D03               	mullw	3
  3949  00196A  0E29               	movlw	low __npowers_
  3950  00196C  24F3               	addwf	prodl,w,c
  3951  00196E  6EF6               	movwf	tblptrl,c
  3952  001970  0E10               	movlw	high __npowers_
  3953  001972  20F4               	addwfc	prodh,w,c
  3954  001974  6EF7               	movwf	tblptrh,c
  3955  001976                     	if	0	;There are less than 3 active tblptr bytes
  3956  001976                     	endif
  3957  001976  0009               	tblrd		*+
  3958  001978  CFF5 F031          	movff	tablat,?_scale
  3959  00197C  0009               	tblrd		*+
  3960  00197E  CFF5 F032          	movff	tablat,?_scale+1
  3961  001982  000A               	tblrd		*-
  3962  001984  CFF5 F033          	movff	tablat,?_scale+2
  3963  001988  0012               	return	
  3964  00198A                     i2l2965:
  3965                           
  3966                           ;doprnt.c: 435: }
  3967                           ;doprnt.c: 436: if(scl>=110)
  3968  00198A  5037               	movf	scale@scl,w,c
  3969  00198C  0A80               	xorlw	128
  3970  00198E  0F12               	addlw	-238
  3971  001990  A0D8               	btfss	status,0,c
  3972  001992  D091               	goto	i2l2973
  3973                           
  3974                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3975  001994  0E00               	movlw	0
  3976  001996  6E12               	movwf	___wmul@multiplicand+1,c
  3977  001998  0E03               	movlw	3
  3978  00199A  6E11               	movwf	___wmul@multiplicand,c
  3979  00199C  0E00               	movlw	0
  3980  00199E  6E0A               	movwf	___awdiv@divisor+1,c
  3981  0019A0  0E0A               	movlw	10
  3982  0019A2  6E09               	movwf	___awdiv@divisor,c
  3983  0019A4  0E00               	movlw	0
  3984  0019A6  6E04               	movwf	___awmod@divisor+1,c
  3985  0019A8  0E64               	movlw	100
  3986  0019AA  6E03               	movwf	___awmod@divisor,c
  3987  0019AC  5037               	movf	scale@scl,w,c
  3988  0019AE  6E01               	movwf	___awmod@dividend,c
  3989  0019B0  6A02               	clrf	___awmod@dividend+1,c
  3990  0019B2  BE01               	btfsc	___awmod@dividend,7,c
  3991  0019B4  0602               	decf	___awmod@dividend+1,f,c
  3992  0019B6  EC56  F016         	call	___awmod	;wreg free
  3993  0019BA  C001  F007         	movff	?___awmod,___awdiv@dividend
  3994  0019BE  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3995  0019C2  EC5C  F015         	call	___awdiv	;wreg free
  3996  0019C6  0E09               	movlw	9
  3997  0019C8  2407               	addwf	?___awdiv,w,c
  3998  0019CA  6E0F               	movwf	___wmul@multiplier,c
  3999  0019CC  0E00               	movlw	0
  4000  0019CE  2008               	addwfc	?___awdiv+1,w,c
  4001  0019D0  6E10               	movwf	___wmul@multiplier+1,c
  4002  0019D2  ECA5  F017         	call	___wmul	;wreg free
  4003  0019D6  0E50               	movlw	low __powers_
  4004  0019D8  240F               	addwf	?___wmul,w,c
  4005  0019DA  6EF6               	movwf	tblptrl,c
  4006  0019DC  0E10               	movlw	high __powers_
  4007  0019DE  2010               	addwfc	?___wmul+1,w,c
  4008  0019E0  6EF7               	movwf	tblptrh,c
  4009  0019E2                     	if	0	;There are less than 3 active tblptr bytes
  4010  0019E2                     	endif
  4011  0019E2  0009               	tblrd		*+
  4012  0019E4  CFF5 F025          	movff	tablat,___ftmul@f2
  4013  0019E8  0009               	tblrd		*+
  4014  0019EA  CFF5 F026          	movff	tablat,___ftmul@f2+1
  4015  0019EE  000A               	tblrd		*-
  4016  0019F0  CFF5 F027          	movff	tablat,___ftmul@f2+2
  4017  0019F4  0E00               	movlw	0
  4018  0019F6  6E0A               	movwf	___awdiv@divisor+1,c
  4019  0019F8  0E64               	movlw	100
  4020  0019FA  6E09               	movwf	___awdiv@divisor,c
  4021  0019FC  5037               	movf	scale@scl,w,c
  4022  0019FE  6E07               	movwf	___awdiv@dividend,c
  4023  001A00  6A08               	clrf	___awdiv@dividend+1,c
  4024  001A02  BE07               	btfsc	___awdiv@dividend,7,c
  4025  001A04  0608               	decf	___awdiv@dividend+1,f,c
  4026  001A06  EC5C  F015         	call	___awdiv	;wreg free
  4027  001A0A  0E12               	movlw	18
  4028  001A0C  2407               	addwf	?___awdiv,w,c
  4029  001A0E  6E0F               	movwf	___wmul@multiplier,c
  4030  001A10  0E00               	movlw	0
  4031  001A12  2008               	addwfc	?___awdiv+1,w,c
  4032  001A14  6E10               	movwf	___wmul@multiplier+1,c
  4033  001A16  0E00               	movlw	0
  4034  001A18  6E12               	movwf	___wmul@multiplicand+1,c
  4035  001A1A  0E03               	movlw	3
  4036  001A1C  6E11               	movwf	___wmul@multiplicand,c
  4037  001A1E  ECA5  F017         	call	___wmul	;wreg free
  4038  001A22  0E50               	movlw	low __powers_
  4039  001A24  240F               	addwf	?___wmul,w,c
  4040  001A26  6EF6               	movwf	tblptrl,c
  4041  001A28  0E10               	movlw	high __powers_
  4042  001A2A  2010               	addwfc	?___wmul+1,w,c
  4043  001A2C  6EF7               	movwf	tblptrh,c
  4044  001A2E                     	if	0	;There are less than 3 active tblptr bytes
  4045  001A2E                     	endif
  4046  001A2E  0009               	tblrd		*+
  4047  001A30  CFF5 F022          	movff	tablat,___ftmul@f1
  4048  001A34  0009               	tblrd		*+
  4049  001A36  CFF5 F023          	movff	tablat,___ftmul@f1+1
  4050  001A3A  000A               	tblrd		*-
  4051  001A3C  CFF5 F024          	movff	tablat,___ftmul@f1+2
  4052  001A40  ECEB  F011         	call	___ftmul	;wreg free
  4053  001A44  C022  F034         	movff	?___ftmul,_scale$1139
  4054  001A48  C023  F035         	movff	?___ftmul+1,_scale$1139+1
  4055  001A4C  C024  F036         	movff	?___ftmul+2,_scale$1139+2
  4056                           
  4057                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4058  001A50  C034  F022         	movff	_scale$1139,___ftmul@f1
  4059  001A54  C035  F023         	movff	_scale$1139+1,___ftmul@f1+1
  4060  001A58  C036  F024         	movff	_scale$1139+2,___ftmul@f1+2
  4061  001A5C  0E00               	movlw	0
  4062  001A5E  6E12               	movwf	___wmul@multiplicand+1,c
  4063  001A60  0E03               	movlw	3
  4064  001A62  6E11               	movwf	___wmul@multiplicand,c
  4065  001A64  0E00               	movlw	0
  4066  001A66  6E04               	movwf	___awmod@divisor+1,c
  4067  001A68  0E0A               	movlw	10
  4068  001A6A  6E03               	movwf	___awmod@divisor,c
  4069  001A6C  5037               	movf	scale@scl,w,c
  4070  001A6E  6E01               	movwf	___awmod@dividend,c
  4071  001A70  6A02               	clrf	___awmod@dividend+1,c
  4072  001A72  BE01               	btfsc	___awmod@dividend,7,c
  4073  001A74  0602               	decf	___awmod@dividend+1,f,c
  4074  001A76  EC56  F016         	call	___awmod	;wreg free
  4075  001A7A  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4076  001A7E  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4077  001A82  ECA5  F017         	call	___wmul	;wreg free
  4078  001A86  0E50               	movlw	low __powers_
  4079  001A88  240F               	addwf	?___wmul,w,c
  4080  001A8A  6EF6               	movwf	tblptrl,c
  4081  001A8C  0E10               	movlw	high __powers_
  4082  001A8E  2010               	addwfc	?___wmul+1,w,c
  4083  001A90  6EF7               	movwf	tblptrh,c
  4084  001A92                     	if	0	;There are less than 3 active tblptr bytes
  4085  001A92                     	endif
  4086  001A92  0009               	tblrd		*+
  4087  001A94  CFF5 F025          	movff	tablat,___ftmul@f2
  4088  001A98  0009               	tblrd		*+
  4089  001A9A  CFF5 F026          	movff	tablat,___ftmul@f2+1
  4090  001A9E  000A               	tblrd		*-
  4091  001AA0  CFF5 F027          	movff	tablat,___ftmul@f2+2
  4092  001AA4  ECEB  F011         	call	___ftmul	;wreg free
  4093  001AA8  C022  F031         	movff	?___ftmul,?_scale
  4094  001AAC  C023  F032         	movff	?___ftmul+1,?_scale+1
  4095  001AB0  C024  F033         	movff	?___ftmul+2,?_scale+2
  4096  001AB4  0012               	return	
  4097  001AB6                     i2l2973:
  4098                           
  4099                           ;doprnt.c: 438: else if(scl > 10)
  4100  001AB6  5037               	movf	scale@scl,w,c
  4101  001AB8  0A80               	xorlw	128
  4102  001ABA  0F75               	addlw	-139
  4103  001ABC  A0D8               	btfss	status,0,c
  4104  001ABE  D04D               	goto	i2l2979
  4105                           
  4106                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4107  001AC0  0E00               	movlw	0
  4108  001AC2  6E0A               	movwf	___awdiv@divisor+1,c
  4109  001AC4  0E0A               	movlw	10
  4110  001AC6  6E09               	movwf	___awdiv@divisor,c
  4111  001AC8  5037               	movf	scale@scl,w,c
  4112  001ACA  6E07               	movwf	___awdiv@dividend,c
  4113  001ACC  6A08               	clrf	___awdiv@dividend+1,c
  4114  001ACE  BE07               	btfsc	___awdiv@dividend,7,c
  4115  001AD0  0608               	decf	___awdiv@dividend+1,f,c
  4116  001AD2  EC5C  F015         	call	___awdiv	;wreg free
  4117  001AD6  0E09               	movlw	9
  4118  001AD8  2407               	addwf	?___awdiv,w,c
  4119  001ADA  6E0F               	movwf	___wmul@multiplier,c
  4120  001ADC  0E00               	movlw	0
  4121  001ADE  2008               	addwfc	?___awdiv+1,w,c
  4122  001AE0  6E10               	movwf	___wmul@multiplier+1,c
  4123  001AE2  0E00               	movlw	0
  4124  001AE4  6E12               	movwf	___wmul@multiplicand+1,c
  4125  001AE6  0E03               	movlw	3
  4126  001AE8  6E11               	movwf	___wmul@multiplicand,c
  4127  001AEA  ECA5  F017         	call	___wmul	;wreg free
  4128  001AEE  0E50               	movlw	low __powers_
  4129  001AF0  240F               	addwf	?___wmul,w,c
  4130  001AF2  6EF6               	movwf	tblptrl,c
  4131  001AF4  0E10               	movlw	high __powers_
  4132  001AF6  2010               	addwfc	?___wmul+1,w,c
  4133  001AF8  6EF7               	movwf	tblptrh,c
  4134  001AFA                     	if	0	;There are less than 3 active tblptr bytes
  4135  001AFA                     	endif
  4136  001AFA  0009               	tblrd		*+
  4137  001AFC  CFF5 F022          	movff	tablat,___ftmul@f1
  4138  001B00  0009               	tblrd		*+
  4139  001B02  CFF5 F023          	movff	tablat,___ftmul@f1+1
  4140  001B06  000A               	tblrd		*-
  4141  001B08  CFF5 F024          	movff	tablat,___ftmul@f1+2
  4142  001B0C  0E00               	movlw	0
  4143  001B0E  6E12               	movwf	___wmul@multiplicand+1,c
  4144  001B10  0E03               	movlw	3
  4145  001B12  6E11               	movwf	___wmul@multiplicand,c
  4146  001B14  0E00               	movlw	0
  4147  001B16  6E04               	movwf	___awmod@divisor+1,c
  4148  001B18  0E0A               	movlw	10
  4149  001B1A  6E03               	movwf	___awmod@divisor,c
  4150  001B1C  5037               	movf	scale@scl,w,c
  4151  001B1E  6E01               	movwf	___awmod@dividend,c
  4152  001B20  6A02               	clrf	___awmod@dividend+1,c
  4153  001B22  BE01               	btfsc	___awmod@dividend,7,c
  4154  001B24  0602               	decf	___awmod@dividend+1,f,c
  4155  001B26  EC56  F016         	call	___awmod	;wreg free
  4156  001B2A  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4157  001B2E  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4158  001B32  ECA5  F017         	call	___wmul	;wreg free
  4159  001B36  0E50               	movlw	low __powers_
  4160  001B38  240F               	addwf	?___wmul,w,c
  4161  001B3A  6EF6               	movwf	tblptrl,c
  4162  001B3C  0E10               	movlw	high __powers_
  4163  001B3E  2010               	addwfc	?___wmul+1,w,c
  4164  001B40  6EF7               	movwf	tblptrh,c
  4165  001B42                     	if	0	;There are less than 3 active tblptr bytes
  4166  001B42                     	endif
  4167  001B42  0009               	tblrd		*+
  4168  001B44  CFF5 F025          	movff	tablat,___ftmul@f2
  4169  001B48  0009               	tblrd		*+
  4170  001B4A  CFF5 F026          	movff	tablat,___ftmul@f2+1
  4171  001B4E  000A               	tblrd		*-
  4172  001B50  CFF5 F027          	movff	tablat,___ftmul@f2+2
  4173  001B54  ECEB  F011         	call	___ftmul	;wreg free
  4174  001B58  D7A7               	goto	L3
  4175  001B5A                     i2l2979:
  4176                           
  4177                           ;doprnt.c: 440: return _powers_[scl];
  4178  001B5A  5037               	movf	scale@scl,w,c
  4179  001B5C  0D03               	mullw	3
  4180  001B5E  0E50               	movlw	low __powers_
  4181  001B60  24F3               	addwf	prodl,w,c
  4182  001B62  6EF6               	movwf	tblptrl,c
  4183  001B64  0E10               	movlw	high __powers_
  4184  001B66  20F4               	addwfc	prodh,w,c
  4185  001B68  6EF7               	movwf	tblptrh,c
  4186  001B6A                     	if	0	;There are less than 3 active tblptr bytes
  4187  001B6A                     	endif
  4188  001B6A  0009               	tblrd		*+
  4189  001B6C  CFF5 F031          	movff	tablat,?_scale
  4190  001B70  0009               	tblrd		*+
  4191  001B72  CFF5 F032          	movff	tablat,?_scale+1
  4192  001B76  000A               	tblrd		*-
  4193  001B78  CFF5 F033          	movff	tablat,?_scale+2
  4194  001B7C  0012               	return	
  4195  001B7E                     __end_of_scale:
  4196                           	opt stack 0
  4197                           pclatu	equ	0xFFB
  4198                           pclath	equ	0xFFA
  4199                           tblptru	equ	0xFF8
  4200                           tblptrh	equ	0xFF7
  4201                           tblptrl	equ	0xFF6
  4202                           tablat	equ	0xFF5
  4203                           prodh	equ	0xFF4
  4204                           prodl	equ	0xFF3
  4205                           intcon	equ	0xFF2
  4206                           intcon3	equ	0xFF0
  4207                           postinc0	equ	0xFEE
  4208                           fsr0h	equ	0xFEA
  4209                           fsr0l	equ	0xFE9
  4210                           wreg	equ	0xFE8
  4211                           postdec1	equ	0xFE5
  4212                           fsr1h	equ	0xFE2
  4213                           fsr1l	equ	0xFE1
  4214                           postinc2	equ	0xFDE
  4215                           postdec2	equ	0xFDD
  4216                           fsr2h	equ	0xFDA
  4217                           fsr2l	equ	0xFD9
  4218                           status	equ	0xFD8
  4219                           
  4220 ;; *************** function _putch *****************
  4221 ;; Defined at:
  4222 ;;		line 35 in file "lcd.c"
  4223 ;; Parameters:    Size  Location     Type
  4224 ;;  data            1    wreg     unsigned char 
  4225 ;; Auto vars:     Size  Location     Type
  4226 ;;  data            1    5[COMRAM] unsigned char 
  4227 ;; Return value:  Size  Location     Type
  4228 ;;                  1    wreg      void 
  4229 ;; Registers used:
  4230 ;;		wreg, status,2, status,0, cstack
  4231 ;; Tracked objects:
  4232 ;;		On entry : 0/0
  4233 ;;		On exit  : 0/0
  4234 ;;		Unchanged: 0/0
  4235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4237 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4239 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4240 ;;Total ram usage:        1 bytes
  4241 ;; Hardware stack levels used:    1
  4242 ;; Hardware stack levels required when called:    3
  4243 ;; This function calls:
  4244 ;;		_lcdNewline
  4245 ;;		i2_lcdNibble
  4246 ;; This function is called by:
  4247 ;;		_printf
  4248 ;; This function uses a non-reentrant model
  4249 ;;
  4250                           
  4251                           	psect	text13
  4252  002FB8                     __ptext13:
  4253                           	opt stack 0
  4254  002FB8                     _putch:
  4255                           	opt stack 22
  4256                           
  4257                           ;incstack = 0
  4258                           ;putch@data stored from wreg
  4259  002FB8  6E06               	movwf	putch@data,c
  4260                           
  4261                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  4262  002FBA  0E0A               	movlw	10
  4263  002FBC  1806               	xorwf	putch@data,w,c
  4264  002FBE  A4D8               	btfss	status,2,c
  4265  002FC0  D003               	goto	i2l83
  4266  002FC2  ECED  F017         	call	_lcdNewline	;wreg free
  4267  002FC6  0012               	return	
  4268  002FC8                     i2l83:
  4269                           
  4270                           ;lcd.c: 37: else
  4271                           ;lcd.c: 38: {
  4272                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  4273  002FC8  848C               	bsf	3980,2,c	;volatile
  4274                           
  4275                           ;lcd.c: 40: _delay((unsigned long)((140)*(32000000/4000000.0)));
  4276  002FCA  0EE0               	movlw	224
  4277  002FCC                     i2u343_47:
  4278  002FCC  D000               	nop2	
  4279  002FCE  2EE8               	decfsz	wreg,f,c
  4280  002FD0  D7FD               	bra	i2u343_47
  4281                           
  4282                           ;lcd.c: 41: lcdNibble(data);
  4283  002FD2  5006               	movf	putch@data,w,c
  4284  002FD4  EC1B  F016         	call	i2_lcdNibble
  4285  002FD8  0012               	return	
  4286  002FDA                     __end_of_putch:
  4287                           	opt stack 0
  4288                           pclatu	equ	0xFFB
  4289                           pclath	equ	0xFFA
  4290                           tblptru	equ	0xFF8
  4291                           tblptrh	equ	0xFF7
  4292                           tblptrl	equ	0xFF6
  4293                           tablat	equ	0xFF5
  4294                           prodh	equ	0xFF4
  4295                           prodl	equ	0xFF3
  4296                           intcon	equ	0xFF2
  4297                           intcon3	equ	0xFF0
  4298                           postinc0	equ	0xFEE
  4299                           fsr0h	equ	0xFEA
  4300                           fsr0l	equ	0xFE9
  4301                           wreg	equ	0xFE8
  4302                           postdec1	equ	0xFE5
  4303                           fsr1h	equ	0xFE2
  4304                           fsr1l	equ	0xFE1
  4305                           postinc2	equ	0xFDE
  4306                           postdec2	equ	0xFDD
  4307                           fsr2h	equ	0xFDA
  4308                           fsr2l	equ	0xFD9
  4309                           status	equ	0xFD8
  4310                           
  4311 ;; *************** function _lcdNewline *****************
  4312 ;; Defined at:
  4313 ;;		line 78 in file "lcd.c"
  4314 ;; Parameters:    Size  Location     Type
  4315 ;;		None
  4316 ;; Auto vars:     Size  Location     Type
  4317 ;;		None
  4318 ;; Return value:  Size  Location     Type
  4319 ;;                  1    wreg      void 
  4320 ;; Registers used:
  4321 ;;		wreg, status,2, status,0, cstack
  4322 ;; Tracked objects:
  4323 ;;		On entry : 0/0
  4324 ;;		On exit  : 0/0
  4325 ;;		Unchanged: 0/0
  4326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4330 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4331 ;;Total ram usage:        0 bytes
  4332 ;; Hardware stack levels used:    1
  4333 ;; Hardware stack levels required when called:    2
  4334 ;; This function calls:
  4335 ;;		i2_lcdInst
  4336 ;; This function is called by:
  4337 ;;		_putch
  4338 ;; This function uses a non-reentrant model
  4339 ;;
  4340                           
  4341                           	psect	text14
  4342  002FDA                     __ptext14:
  4343                           	opt stack 0
  4344  002FDA                     _lcdNewline:
  4345                           	opt stack 22
  4346                           
  4347                           ;lcd.c: 79: lcdInst(0b11000000);
  4348                           
  4349                           ;incstack = 0
  4350  002FDA  0EC0               	movlw	192
  4351  002FDC  ECCA  F017         	call	i2_lcdInst
  4352  002FE0  0012               	return		;funcret
  4353  002FE2                     __end_of_lcdNewline:
  4354                           	opt stack 0
  4355                           pclatu	equ	0xFFB
  4356                           pclath	equ	0xFFA
  4357                           tblptru	equ	0xFF8
  4358                           tblptrh	equ	0xFF7
  4359                           tblptrl	equ	0xFF6
  4360                           tablat	equ	0xFF5
  4361                           prodh	equ	0xFF4
  4362                           prodl	equ	0xFF3
  4363                           intcon	equ	0xFF2
  4364                           intcon3	equ	0xFF0
  4365                           postinc0	equ	0xFEE
  4366                           fsr0h	equ	0xFEA
  4367                           fsr0l	equ	0xFE9
  4368                           wreg	equ	0xFE8
  4369                           postdec1	equ	0xFE5
  4370                           fsr1h	equ	0xFE2
  4371                           fsr1l	equ	0xFE1
  4372                           postinc2	equ	0xFDE
  4373                           postdec2	equ	0xFDD
  4374                           fsr2h	equ	0xFDA
  4375                           fsr2l	equ	0xFD9
  4376                           status	equ	0xFD8
  4377                           
  4378 ;; *************** function _fround *****************
  4379 ;; Defined at:
  4380 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4381 ;; Parameters:    Size  Location     Type
  4382 ;;  prec            1    wreg     unsigned char 
  4383 ;; Auto vars:     Size  Location     Type
  4384 ;;  prec            1   57[COMRAM] unsigned char 
  4385 ;; Return value:  Size  Location     Type
  4386 ;;                  3   48[COMRAM] unsigned char 
  4387 ;; Registers used:
  4388 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4389 ;; Tracked objects:
  4390 ;;		On entry : 0/0
  4391 ;;		On exit  : 0/0
  4392 ;;		Unchanged: 0/0
  4393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4394 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4395 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4397 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4398 ;;Total ram usage:       10 bytes
  4399 ;; Hardware stack levels used:    1
  4400 ;; Hardware stack levels required when called:    2
  4401 ;; This function calls:
  4402 ;;		___awdiv
  4403 ;;		___awmod
  4404 ;;		___ftmul
  4405 ;;		___wmul
  4406 ;; This function is called by:
  4407 ;;		_printf
  4408 ;; This function uses a non-reentrant model
  4409 ;;
  4410                           
  4411                           	psect	text15
  4412  001B7E                     __ptext15:
  4413                           	opt stack 0
  4414  001B7E                     _fround:
  4415                           	opt stack 23
  4416                           
  4417                           ;incstack = 0
  4418                           ;fround@prec stored from wreg
  4419  001B7E  6E3A               	movwf	fround@prec,c
  4420                           
  4421                           ;doprnt.c: 413: if(prec>=110)
  4422  001B80  0E6D               	movlw	109
  4423  001B82  643A               	cpfsgt	fround@prec,c
  4424  001B84  D09F               	goto	i2l2933
  4425                           
  4426                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4427  001B86  0E00               	movlw	0
  4428  001B88  6E12               	movwf	___wmul@multiplicand+1,c
  4429  001B8A  0E03               	movlw	3
  4430  001B8C  6E11               	movwf	___wmul@multiplicand,c
  4431  001B8E  0E00               	movlw	0
  4432  001B90  6E0A               	movwf	___awdiv@divisor+1,c
  4433  001B92  0E0A               	movlw	10
  4434  001B94  6E09               	movwf	___awdiv@divisor,c
  4435  001B96  0E00               	movlw	0
  4436  001B98  6E04               	movwf	___awmod@divisor+1,c
  4437  001B9A  0E64               	movlw	100
  4438  001B9C  6E03               	movwf	___awmod@divisor,c
  4439  001B9E  C03A  F001         	movff	fround@prec,___awmod@dividend
  4440  001BA2  6A02               	clrf	___awmod@dividend+1,c
  4441  001BA4  EC56  F016         	call	___awmod	;wreg free
  4442  001BA8  C001  F007         	movff	?___awmod,___awdiv@dividend
  4443  001BAC  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  4444  001BB0  EC5C  F015         	call	___awdiv	;wreg free
  4445  001BB4  0E09               	movlw	9
  4446  001BB6  2407               	addwf	?___awdiv,w,c
  4447  001BB8  6E0F               	movwf	___wmul@multiplier,c
  4448  001BBA  0E00               	movlw	0
  4449  001BBC  2008               	addwfc	?___awdiv+1,w,c
  4450  001BBE  6E10               	movwf	___wmul@multiplier+1,c
  4451  001BC0  ECA5  F017         	call	___wmul	;wreg free
  4452  001BC4  0E29               	movlw	low __npowers_
  4453  001BC6  240F               	addwf	?___wmul,w,c
  4454  001BC8  6EF6               	movwf	tblptrl,c
  4455  001BCA  0E10               	movlw	high __npowers_
  4456  001BCC  2010               	addwfc	?___wmul+1,w,c
  4457  001BCE  6EF7               	movwf	tblptrh,c
  4458  001BD0                     	if	0	;There are less than 3 active tblptr bytes
  4459  001BD0                     	endif
  4460  001BD0  0009               	tblrd		*+
  4461  001BD2  CFF5 F025          	movff	tablat,___ftmul@f2
  4462  001BD6  0009               	tblrd		*+
  4463  001BD8  CFF5 F026          	movff	tablat,___ftmul@f2+1
  4464  001BDC  000A               	tblrd		*-
  4465  001BDE  CFF5 F027          	movff	tablat,___ftmul@f2+2
  4466  001BE2  0E00               	movlw	0
  4467  001BE4  6E0A               	movwf	___awdiv@divisor+1,c
  4468  001BE6  0E64               	movlw	100
  4469  001BE8  6E09               	movwf	___awdiv@divisor,c
  4470  001BEA  C03A  F007         	movff	fround@prec,___awdiv@dividend
  4471  001BEE  6A08               	clrf	___awdiv@dividend+1,c
  4472  001BF0  EC5C  F015         	call	___awdiv	;wreg free
  4473  001BF4  0E12               	movlw	18
  4474  001BF6  2407               	addwf	?___awdiv,w,c
  4475  001BF8  6E0F               	movwf	___wmul@multiplier,c
  4476  001BFA  0E00               	movlw	0
  4477  001BFC  2008               	addwfc	?___awdiv+1,w,c
  4478  001BFE  6E10               	movwf	___wmul@multiplier+1,c
  4479  001C00  0E00               	movlw	0
  4480  001C02  6E12               	movwf	___wmul@multiplicand+1,c
  4481  001C04  0E03               	movlw	3
  4482  001C06  6E11               	movwf	___wmul@multiplicand,c
  4483  001C08  ECA5  F017         	call	___wmul	;wreg free
  4484  001C0C  0E29               	movlw	low __npowers_
  4485  001C0E  240F               	addwf	?___wmul,w,c
  4486  001C10  6EF6               	movwf	tblptrl,c
  4487  001C12  0E10               	movlw	high __npowers_
  4488  001C14  2010               	addwfc	?___wmul+1,w,c
  4489  001C16  6EF7               	movwf	tblptrh,c
  4490  001C18                     	if	0	;There are less than 3 active tblptr bytes
  4491  001C18                     	endif
  4492  001C18  0009               	tblrd		*+
  4493  001C1A  CFF5 F022          	movff	tablat,___ftmul@f1
  4494  001C1E  0009               	tblrd		*+
  4495  001C20  CFF5 F023          	movff	tablat,___ftmul@f1+1
  4496  001C24  000A               	tblrd		*-
  4497  001C26  CFF5 F024          	movff	tablat,___ftmul@f1+2
  4498  001C2A  ECEB  F011         	call	___ftmul	;wreg free
  4499  001C2E  C022  F037         	movff	?___ftmul,_fround$1137
  4500  001C32  C023  F038         	movff	?___ftmul+1,_fround$1137+1
  4501  001C36  C024  F039         	movff	?___ftmul+2,_fround$1137+2
  4502                           
  4503                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4504  001C3A  0E00               	movlw	0
  4505  001C3C  6E12               	movwf	___wmul@multiplicand+1,c
  4506  001C3E  0E03               	movlw	3
  4507  001C40  6E11               	movwf	___wmul@multiplicand,c
  4508  001C42  0E00               	movlw	0
  4509  001C44  6E04               	movwf	___awmod@divisor+1,c
  4510  001C46  0E0A               	movlw	10
  4511  001C48  6E03               	movwf	___awmod@divisor,c
  4512  001C4A  C03A  F001         	movff	fround@prec,___awmod@dividend
  4513  001C4E  6A02               	clrf	___awmod@dividend+1,c
  4514  001C50  EC56  F016         	call	___awmod	;wreg free
  4515  001C54  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4516  001C58  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4517  001C5C  ECA5  F017         	call	___wmul	;wreg free
  4518  001C60  0E29               	movlw	low __npowers_
  4519  001C62  240F               	addwf	?___wmul,w,c
  4520  001C64  6EF6               	movwf	tblptrl,c
  4521  001C66  0E10               	movlw	high __npowers_
  4522  001C68  2010               	addwfc	?___wmul+1,w,c
  4523  001C6A  6EF7               	movwf	tblptrh,c
  4524  001C6C                     	if	0	;There are less than 3 active tblptr bytes
  4525  001C6C                     	endif
  4526  001C6C  0009               	tblrd		*+
  4527  001C6E  CFF5 F025          	movff	tablat,___ftmul@f2
  4528  001C72  0009               	tblrd		*+
  4529  001C74  CFF5 F026          	movff	tablat,___ftmul@f2+1
  4530  001C78  000A               	tblrd		*-
  4531  001C7A  CFF5 F027          	movff	tablat,___ftmul@f2+2
  4532  001C7E  C037  F022         	movff	_fround$1137,___ftmul@f1
  4533  001C82  C038  F023         	movff	_fround$1137+1,___ftmul@f1+1
  4534  001C86  C039  F024         	movff	_fround$1137+2,___ftmul@f1+2
  4535  001C8A  ECEB  F011         	call	___ftmul	;wreg free
  4536  001C8E  C022  F034         	movff	?___ftmul,_fround$1138
  4537  001C92  C023  F035         	movff	?___ftmul+1,_fround$1138+1
  4538  001C96  C024  F036         	movff	?___ftmul+2,_fround$1138+2
  4539                           
  4540                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4541  001C9A  C034  F022         	movff	_fround$1138,___ftmul@f1
  4542  001C9E  C035  F023         	movff	_fround$1138+1,___ftmul@f1+1
  4543  001CA2  C036  F024         	movff	_fround$1138+2,___ftmul@f1+2
  4544  001CA6  0E00               	movlw	0
  4545  001CA8  6E25               	movwf	___ftmul@f2,c
  4546  001CAA  0E00               	movlw	0
  4547  001CAC  6E26               	movwf	___ftmul@f2+1,c
  4548  001CAE  0E3F               	movlw	63
  4549  001CB0  6E27               	movwf	___ftmul@f2+2,c
  4550  001CB2  ECEB  F011         	call	___ftmul	;wreg free
  4551  001CB6  C022  F031         	movff	?___ftmul,?_fround
  4552  001CBA  C023  F032         	movff	?___ftmul+1,?_fround+1
  4553  001CBE  C024  F033         	movff	?___ftmul+2,?_fround+2
  4554  001CC2  0012               	return	
  4555  001CC4                     i2l2933:
  4556                           
  4557                           ;doprnt.c: 415: else if(prec > 10)
  4558  001CC4  0E0A               	movlw	10
  4559  001CC6  643A               	cpfsgt	fround@prec,c
  4560  001CC8  D05D               	goto	i2l2941
  4561                           
  4562                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4563  001CCA  0E00               	movlw	0
  4564  001CCC  6E12               	movwf	___wmul@multiplicand+1,c
  4565  001CCE  0E03               	movlw	3
  4566  001CD0  6E11               	movwf	___wmul@multiplicand,c
  4567  001CD2  0E00               	movlw	0
  4568  001CD4  6E04               	movwf	___awmod@divisor+1,c
  4569  001CD6  0E0A               	movlw	10
  4570  001CD8  6E03               	movwf	___awmod@divisor,c
  4571  001CDA  C03A  F001         	movff	fround@prec,___awmod@dividend
  4572  001CDE  6A02               	clrf	___awmod@dividend+1,c
  4573  001CE0  EC56  F016         	call	___awmod	;wreg free
  4574  001CE4  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4575  001CE8  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4576  001CEC  ECA5  F017         	call	___wmul	;wreg free
  4577  001CF0  0E29               	movlw	low __npowers_
  4578  001CF2  240F               	addwf	?___wmul,w,c
  4579  001CF4  6EF6               	movwf	tblptrl,c
  4580  001CF6  0E10               	movlw	high __npowers_
  4581  001CF8  2010               	addwfc	?___wmul+1,w,c
  4582  001CFA  6EF7               	movwf	tblptrh,c
  4583  001CFC                     	if	0	;There are less than 3 active tblptr bytes
  4584  001CFC                     	endif
  4585  001CFC  0009               	tblrd		*+
  4586  001CFE  CFF5 F025          	movff	tablat,___ftmul@f2
  4587  001D02  0009               	tblrd		*+
  4588  001D04  CFF5 F026          	movff	tablat,___ftmul@f2+1
  4589  001D08  000A               	tblrd		*-
  4590  001D0A  CFF5 F027          	movff	tablat,___ftmul@f2+2
  4591  001D0E  0E00               	movlw	0
  4592  001D10  6E0A               	movwf	___awdiv@divisor+1,c
  4593  001D12  0E0A               	movlw	10
  4594  001D14  6E09               	movwf	___awdiv@divisor,c
  4595  001D16  C03A  F007         	movff	fround@prec,___awdiv@dividend
  4596  001D1A  6A08               	clrf	___awdiv@dividend+1,c
  4597  001D1C  EC5C  F015         	call	___awdiv	;wreg free
  4598  001D20  0E09               	movlw	9
  4599  001D22  2407               	addwf	?___awdiv,w,c
  4600  001D24  6E0F               	movwf	___wmul@multiplier,c
  4601  001D26  0E00               	movlw	0
  4602  001D28  2008               	addwfc	?___awdiv+1,w,c
  4603  001D2A  6E10               	movwf	___wmul@multiplier+1,c
  4604  001D2C  0E00               	movlw	0
  4605  001D2E  6E12               	movwf	___wmul@multiplicand+1,c
  4606  001D30  0E03               	movlw	3
  4607  001D32  6E11               	movwf	___wmul@multiplicand,c
  4608  001D34  ECA5  F017         	call	___wmul	;wreg free
  4609  001D38  0E29               	movlw	low __npowers_
  4610  001D3A  240F               	addwf	?___wmul,w,c
  4611  001D3C  6EF6               	movwf	tblptrl,c
  4612  001D3E  0E10               	movlw	high __npowers_
  4613  001D40  2010               	addwfc	?___wmul+1,w,c
  4614  001D42  6EF7               	movwf	tblptrh,c
  4615  001D44                     	if	0	;There are less than 3 active tblptr bytes
  4616  001D44                     	endif
  4617  001D44  0009               	tblrd		*+
  4618  001D46  CFF5 F022          	movff	tablat,___ftmul@f1
  4619  001D4A  0009               	tblrd		*+
  4620  001D4C  CFF5 F023          	movff	tablat,___ftmul@f1+1
  4621  001D50  000A               	tblrd		*-
  4622  001D52  CFF5 F024          	movff	tablat,___ftmul@f1+2
  4623  001D56  ECEB  F011         	call	___ftmul	;wreg free
  4624  001D5A  C022  F037         	movff	?___ftmul,_fround$1137
  4625  001D5E  C023  F038         	movff	?___ftmul+1,_fround$1137+1
  4626  001D62  C024  F039         	movff	?___ftmul+2,_fround$1137+2
  4627                           
  4628                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4629  001D66  C037  F022         	movff	_fround$1137,___ftmul@f1
  4630  001D6A  C038  F023         	movff	_fround$1137+1,___ftmul@f1+1
  4631  001D6E  C039  F024         	movff	_fround$1137+2,___ftmul@f1+2
  4632  001D72  0E00               	movlw	0
  4633  001D74  6E25               	movwf	___ftmul@f2,c
  4634  001D76  0E00               	movlw	0
  4635  001D78  6E26               	movwf	___ftmul@f2+1,c
  4636  001D7A  0E3F               	movlw	63
  4637  001D7C  6E27               	movwf	___ftmul@f2+2,c
  4638  001D7E  ECEB  F011         	call	___ftmul	;wreg free
  4639  001D82  D799               	goto	L4
  4640  001D84                     i2l2941:
  4641                           
  4642                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4643  001D84  503A               	movf	fround@prec,w,c
  4644  001D86  0D03               	mullw	3
  4645  001D88  0E29               	movlw	low __npowers_
  4646  001D8A  24F3               	addwf	prodl,w,c
  4647  001D8C  6EF6               	movwf	tblptrl,c
  4648  001D8E  0E10               	movlw	high __npowers_
  4649  001D90  20F4               	addwfc	prodh,w,c
  4650  001D92  6EF7               	movwf	tblptrh,c
  4651  001D94                     	if	0	;There are less than 3 active tblptr bytes
  4652  001D94                     	endif
  4653  001D94  0009               	tblrd		*+
  4654  001D96  CFF5 F022          	movff	tablat,___ftmul@f1
  4655  001D9A  0009               	tblrd		*+
  4656  001D9C  CFF5 F023          	movff	tablat,___ftmul@f1+1
  4657  001DA0  000A               	tblrd		*-
  4658  001DA2  CFF5 F024          	movff	tablat,___ftmul@f1+2
  4659  001DA6  0E00               	movlw	0
  4660  001DA8  6E25               	movwf	___ftmul@f2,c
  4661  001DAA  0E00               	movlw	0
  4662  001DAC  6E26               	movwf	___ftmul@f2+1,c
  4663  001DAE  0E3F               	movlw	63
  4664  001DB0  6E27               	movwf	___ftmul@f2+2,c
  4665  001DB2  ECEB  F011         	call	___ftmul	;wreg free
  4666  001DB6  C022  F031         	movff	?___ftmul,?_fround
  4667  001DBA  C023  F032         	movff	?___ftmul+1,?_fround+1
  4668  001DBE  C024  F033         	movff	?___ftmul+2,?_fround+2
  4669  001DC2  0012               	return	
  4670  001DC4                     __end_of_fround:
  4671                           	opt stack 0
  4672                           pclatu	equ	0xFFB
  4673                           pclath	equ	0xFFA
  4674                           tblptru	equ	0xFF8
  4675                           tblptrh	equ	0xFF7
  4676                           tblptrl	equ	0xFF6
  4677                           tablat	equ	0xFF5
  4678                           prodh	equ	0xFF4
  4679                           prodl	equ	0xFF3
  4680                           intcon	equ	0xFF2
  4681                           intcon3	equ	0xFF0
  4682                           postinc0	equ	0xFEE
  4683                           fsr0h	equ	0xFEA
  4684                           fsr0l	equ	0xFE9
  4685                           wreg	equ	0xFE8
  4686                           postdec1	equ	0xFE5
  4687                           fsr1h	equ	0xFE2
  4688                           fsr1l	equ	0xFE1
  4689                           postinc2	equ	0xFDE
  4690                           postdec2	equ	0xFDD
  4691                           fsr2h	equ	0xFDA
  4692                           fsr2l	equ	0xFD9
  4693                           status	equ	0xFD8
  4694                           
  4695 ;; *************** function ___wmul *****************
  4696 ;; Defined at:
  4697 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  4698 ;; Parameters:    Size  Location     Type
  4699 ;;  multiplier      2   14[COMRAM] unsigned int 
  4700 ;;  multiplicand    2   16[COMRAM] unsigned int 
  4701 ;; Auto vars:     Size  Location     Type
  4702 ;;  product         2   18[COMRAM] unsigned int 
  4703 ;; Return value:  Size  Location     Type
  4704 ;;                  2   14[COMRAM] unsigned int 
  4705 ;; Registers used:
  4706 ;;		wreg, status,2, status,0, prodl, prodh
  4707 ;; Tracked objects:
  4708 ;;		On entry : 0/0
  4709 ;;		On exit  : 0/0
  4710 ;;		Unchanged: 0/0
  4711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4712 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4713 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4715 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4716 ;;Total ram usage:        6 bytes
  4717 ;; Hardware stack levels used:    1
  4718 ;; This function calls:
  4719 ;;		Nothing
  4720 ;; This function is called by:
  4721 ;;		_fround
  4722 ;;		_scale
  4723 ;;		_printf
  4724 ;; This function uses a non-reentrant model
  4725 ;;
  4726                           
  4727                           	psect	text16
  4728  002F4A                     __ptext16:
  4729                           	opt stack 0
  4730  002F4A                     ___wmul:
  4731                           	opt stack 24
  4732                           
  4733                           ;incstack = 0
  4734  002F4A  500F               	movf	___wmul@multiplier,w,c
  4735  002F4C  0211               	mulwf	___wmul@multiplicand,c
  4736  002F4E  CFF3 F013          	movff	prodl,___wmul@product
  4737  002F52  CFF4 F014          	movff	prodh,___wmul@product+1
  4738  002F56  500F               	movf	___wmul@multiplier,w,c
  4739  002F58  0212               	mulwf	___wmul@multiplicand+1,c
  4740  002F5A  50F3               	movf	prodl,w,c
  4741  002F5C  2614               	addwf	___wmul@product+1,f,c
  4742  002F5E  5010               	movf	___wmul@multiplier+1,w,c
  4743  002F60  0211               	mulwf	___wmul@multiplicand,c
  4744  002F62  50F3               	movf	prodl,w,c
  4745  002F64  2614               	addwf	___wmul@product+1,f,c
  4746  002F66  C013  F00F         	movff	___wmul@product,?___wmul
  4747  002F6A  C014  F010         	movff	___wmul@product+1,?___wmul+1
  4748  002F6E  0012               	return	
  4749  002F70                     __end_of___wmul:
  4750                           	opt stack 0
  4751                           pclatu	equ	0xFFB
  4752                           pclath	equ	0xFFA
  4753                           tblptru	equ	0xFF8
  4754                           tblptrh	equ	0xFF7
  4755                           tblptrl	equ	0xFF6
  4756                           tablat	equ	0xFF5
  4757                           prodh	equ	0xFF4
  4758                           prodl	equ	0xFF3
  4759                           intcon	equ	0xFF2
  4760                           intcon3	equ	0xFF0
  4761                           postinc0	equ	0xFEE
  4762                           fsr0h	equ	0xFEA
  4763                           fsr0l	equ	0xFE9
  4764                           wreg	equ	0xFE8
  4765                           postdec1	equ	0xFE5
  4766                           fsr1h	equ	0xFE2
  4767                           fsr1l	equ	0xFE1
  4768                           postinc2	equ	0xFDE
  4769                           postdec2	equ	0xFDD
  4770                           fsr2h	equ	0xFDA
  4771                           fsr2l	equ	0xFD9
  4772                           status	equ	0xFD8
  4773                           
  4774 ;; *************** function ___ftmul *****************
  4775 ;; Defined at:
  4776 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  4777 ;; Parameters:    Size  Location     Type
  4778 ;;  f1              3   33[COMRAM] float 
  4779 ;;  f2              3   36[COMRAM] float 
  4780 ;; Auto vars:     Size  Location     Type
  4781 ;;  f3_as_produc    3   43[COMRAM] unsigned um
  4782 ;;  sign            1   47[COMRAM] unsigned char 
  4783 ;;  cntr            1   46[COMRAM] unsigned char 
  4784 ;;  exp             1   42[COMRAM] unsigned char 
  4785 ;; Return value:  Size  Location     Type
  4786 ;;                  3   33[COMRAM] float 
  4787 ;; Registers used:
  4788 ;;		wreg, status,2, status,0, cstack
  4789 ;; Tracked objects:
  4790 ;;		On entry : 0/0
  4791 ;;		On exit  : 0/0
  4792 ;;		Unchanged: 0/0
  4793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4794 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4795 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4796 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4797 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4798 ;;Total ram usage:       15 bytes
  4799 ;; Hardware stack levels used:    1
  4800 ;; Hardware stack levels required when called:    1
  4801 ;; This function calls:
  4802 ;;		___ftpack
  4803 ;; This function is called by:
  4804 ;;		_startT0
  4805 ;;		_fround
  4806 ;;		_scale
  4807 ;;		_printf
  4808 ;; This function uses a non-reentrant model
  4809 ;;
  4810                           
  4811                           	psect	text17
  4812  0023D6                     __ptext17:
  4813                           	opt stack 0
  4814  0023D6                     ___ftmul:
  4815                           	opt stack 23
  4816                           
  4817                           ;incstack = 0
  4818  0023D6  C024  F028         	movff	___ftmul@f1+2,??___ftmul
  4819  0023DA  6A29               	clrf	(??___ftmul+1)& (0+255),c
  4820  0023DC  6A2A               	clrf	(??___ftmul+2)& (0+255),c
  4821  0023DE  3423               	rlcf	___ftmul@f1+1,w,c
  4822  0023E0  3628               	rlcf	??___ftmul& (0+255),f,c
  4823  0023E2  E301               	bnc	u215_41
  4824  0023E4  8029               	bsf	(??___ftmul+1)& (0+255),0,c
  4825  0023E6                     u215_41:
  4826  0023E6  5028               	movf	??___ftmul,w,c
  4827  0023E8  6E2B               	movwf	___ftmul@exp,c
  4828  0023EA  502B               	movf	___ftmul@exp,w,c
  4829  0023EC  A4D8               	btfss	status,2,c
  4830  0023EE  D007               	goto	i2l2723
  4831  0023F0  0E00               	movlw	0
  4832  0023F2  6E22               	movwf	?___ftmul,c
  4833  0023F4  0E00               	movlw	0
  4834  0023F6  6E23               	movwf	?___ftmul+1,c
  4835  0023F8  0E00               	movlw	0
  4836  0023FA  6E24               	movwf	?___ftmul+2,c
  4837  0023FC  0012               	return	
  4838  0023FE                     i2l2723:
  4839  0023FE  C027  F028         	movff	___ftmul@f2+2,??___ftmul
  4840  002402  6A29               	clrf	(??___ftmul+1)& (0+255),c
  4841  002404  6A2A               	clrf	(??___ftmul+2)& (0+255),c
  4842  002406  3426               	rlcf	___ftmul@f2+1,w,c
  4843  002408  3628               	rlcf	??___ftmul& (0+255),f,c
  4844  00240A  E301               	bnc	u217_41
  4845  00240C  8029               	bsf	(??___ftmul+1)& (0+255),0,c
  4846  00240E                     u217_41:
  4847  00240E  5028               	movf	??___ftmul,w,c
  4848  002410  6E30               	movwf	___ftmul@sign,c
  4849  002412  5030               	movf	___ftmul@sign,w,c
  4850  002414  A4D8               	btfss	status,2,c
  4851  002416  D007               	goto	i2l2729
  4852  002418  0E00               	movlw	0
  4853  00241A  6E22               	movwf	?___ftmul,c
  4854  00241C  0E00               	movlw	0
  4855  00241E  6E23               	movwf	?___ftmul+1,c
  4856  002420  0E00               	movlw	0
  4857  002422  6E24               	movwf	?___ftmul+2,c
  4858  002424  0012               	return	
  4859  002426                     i2l2729:
  4860  002426  5030               	movf	___ftmul@sign,w,c
  4861  002428  0F7B               	addlw	123
  4862  00242A  262B               	addwf	___ftmul@exp,f,c
  4863  00242C  C024  F030         	movff	___ftmul@f1+2,___ftmul@sign
  4864  002430  5027               	movf	___ftmul@f2+2,w,c
  4865  002432  1A30               	xorwf	___ftmul@sign,f,c
  4866  002434  0E80               	movlw	128
  4867  002436  1630               	andwf	___ftmul@sign,f,c
  4868  002438  8E23               	bsf	___ftmul@f1+1,7,c
  4869  00243A  8E26               	bsf	___ftmul@f2+1,7,c
  4870  00243C  0EFF               	movlw	255
  4871  00243E  1625               	andwf	___ftmul@f2,f,c
  4872  002440  0EFF               	movlw	255
  4873  002442  1626               	andwf	___ftmul@f2+1,f,c
  4874  002444  0E00               	movlw	0
  4875  002446  1627               	andwf	___ftmul@f2+2,f,c
  4876  002448  0E00               	movlw	0
  4877  00244A  6E2C               	movwf	___ftmul@f3_as_product,c
  4878  00244C  0E00               	movlw	0
  4879  00244E  6E2D               	movwf	___ftmul@f3_as_product+1,c
  4880  002450  0E00               	movlw	0
  4881  002452  6E2E               	movwf	___ftmul@f3_as_product+2,c
  4882  002454  0E07               	movlw	7
  4883  002456  6E2F               	movwf	___ftmul@cntr,c
  4884  002458                     i2l2743:
  4885  002458  A022               	btfss	___ftmul@f1,0,c
  4886  00245A  D006               	goto	i2l2747
  4887  00245C  5025               	movf	___ftmul@f2,w,c
  4888  00245E  262C               	addwf	___ftmul@f3_as_product,f,c
  4889  002460  5026               	movf	___ftmul@f2+1,w,c
  4890  002462  222D               	addwfc	___ftmul@f3_as_product+1,f,c
  4891  002464  5027               	movf	___ftmul@f2+2,w,c
  4892  002466  222E               	addwfc	___ftmul@f3_as_product+2,f,c
  4893  002468                     i2l2747:
  4894  002468  90D8               	bcf	status,0,c
  4895  00246A  3224               	rrcf	___ftmul@f1+2,f,c
  4896  00246C  3223               	rrcf	___ftmul@f1+1,f,c
  4897  00246E  3222               	rrcf	___ftmul@f1,f,c
  4898  002470  90D8               	bcf	status,0,c
  4899  002472  3625               	rlcf	___ftmul@f2,f,c
  4900  002474  3626               	rlcf	___ftmul@f2+1,f,c
  4901  002476  3627               	rlcf	___ftmul@f2+2,f,c
  4902  002478  2E2F               	decfsz	___ftmul@cntr,f,c
  4903  00247A  D7EE               	goto	i2l2743
  4904  00247C  0E09               	movlw	9
  4905  00247E  6E2F               	movwf	___ftmul@cntr,c
  4906  002480                     i2l2753:
  4907  002480  A022               	btfss	___ftmul@f1,0,c
  4908  002482  D006               	goto	i2l2757
  4909  002484  5025               	movf	___ftmul@f2,w,c
  4910  002486  262C               	addwf	___ftmul@f3_as_product,f,c
  4911  002488  5026               	movf	___ftmul@f2+1,w,c
  4912  00248A  222D               	addwfc	___ftmul@f3_as_product+1,f,c
  4913  00248C  5027               	movf	___ftmul@f2+2,w,c
  4914  00248E  222E               	addwfc	___ftmul@f3_as_product+2,f,c
  4915  002490                     i2l2757:
  4916  002490  90D8               	bcf	status,0,c
  4917  002492  3224               	rrcf	___ftmul@f1+2,f,c
  4918  002494  3223               	rrcf	___ftmul@f1+1,f,c
  4919  002496  3222               	rrcf	___ftmul@f1,f,c
  4920  002498  90D8               	bcf	status,0,c
  4921  00249A  322E               	rrcf	___ftmul@f3_as_product+2,f,c
  4922  00249C  322D               	rrcf	___ftmul@f3_as_product+1,f,c
  4923  00249E  322C               	rrcf	___ftmul@f3_as_product,f,c
  4924  0024A0  2E2F               	decfsz	___ftmul@cntr,f,c
  4925  0024A2  D7EE               	goto	i2l2753
  4926  0024A4  C02C  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  4927  0024A8  C02D  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4928  0024AC  C02E  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4929  0024B0  C02B  F004         	movff	___ftmul@exp,___ftpack@exp
  4930  0024B4  C030  F005         	movff	___ftmul@sign,___ftpack@sign
  4931  0024B8  EC1F  F014         	call	___ftpack	;wreg free
  4932  0024BC  C001  F022         	movff	?___ftpack,?___ftmul
  4933  0024C0  C002  F023         	movff	?___ftpack+1,?___ftmul+1
  4934  0024C4  C003  F024         	movff	?___ftpack+2,?___ftmul+2
  4935  0024C8  0012               	return	
  4936  0024CA                     __end_of___ftmul:
  4937                           	opt stack 0
  4938                           pclatu	equ	0xFFB
  4939                           pclath	equ	0xFFA
  4940                           tblptru	equ	0xFF8
  4941                           tblptrh	equ	0xFF7
  4942                           tblptrl	equ	0xFF6
  4943                           tablat	equ	0xFF5
  4944                           prodh	equ	0xFF4
  4945                           prodl	equ	0xFF3
  4946                           intcon	equ	0xFF2
  4947                           intcon3	equ	0xFF0
  4948                           postinc0	equ	0xFEE
  4949                           fsr0h	equ	0xFEA
  4950                           fsr0l	equ	0xFE9
  4951                           wreg	equ	0xFE8
  4952                           postdec1	equ	0xFE5
  4953                           fsr1h	equ	0xFE2
  4954                           fsr1l	equ	0xFE1
  4955                           postinc2	equ	0xFDE
  4956                           postdec2	equ	0xFDD
  4957                           fsr2h	equ	0xFDA
  4958                           fsr2l	equ	0xFD9
  4959                           status	equ	0xFD8
  4960                           
  4961 ;; *************** function ___awmod *****************
  4962 ;; Defined at:
  4963 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  4964 ;; Parameters:    Size  Location     Type
  4965 ;;  dividend        2    0[COMRAM] int 
  4966 ;;  divisor         2    2[COMRAM] int 
  4967 ;; Auto vars:     Size  Location     Type
  4968 ;;  sign            1    5[COMRAM] unsigned char 
  4969 ;;  counter         1    4[COMRAM] unsigned char 
  4970 ;; Return value:  Size  Location     Type
  4971 ;;                  2    0[COMRAM] int 
  4972 ;; Registers used:
  4973 ;;		wreg, status,2, status,0
  4974 ;; Tracked objects:
  4975 ;;		On entry : 0/0
  4976 ;;		On exit  : 0/0
  4977 ;;		Unchanged: 0/0
  4978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4979 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4980 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4982 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4983 ;;Total ram usage:        6 bytes
  4984 ;; Hardware stack levels used:    1
  4985 ;; This function calls:
  4986 ;;		Nothing
  4987 ;; This function is called by:
  4988 ;;		_fround
  4989 ;;		_scale
  4990 ;; This function uses a non-reentrant model
  4991 ;;
  4992                           
  4993                           	psect	text18
  4994  002CAC                     __ptext18:
  4995                           	opt stack 0
  4996  002CAC                     ___awmod:
  4997                           	opt stack 24
  4998                           
  4999                           ;incstack = 0
  5000  002CAC  0E00               	movlw	0
  5001  002CAE  6E06               	movwf	___awmod@sign,c
  5002  002CB0  AE02               	btfss	___awmod@dividend+1,7,c
  5003  002CB2  D006               	goto	i2l2817
  5004  002CB4  6C01               	negf	___awmod@dividend,c
  5005  002CB6  1E02               	comf	___awmod@dividend+1,f,c
  5006  002CB8  B0D8               	btfsc	status,0,c
  5007  002CBA  2A02               	incf	___awmod@dividend+1,f,c
  5008  002CBC  0E01               	movlw	1
  5009  002CBE  6E06               	movwf	___awmod@sign,c
  5010  002CC0                     i2l2817:
  5011  002CC0  AE04               	btfss	___awmod@divisor+1,7,c
  5012  002CC2  D004               	goto	i2l2821
  5013  002CC4  6C03               	negf	___awmod@divisor,c
  5014  002CC6  1E04               	comf	___awmod@divisor+1,f,c
  5015  002CC8  B0D8               	btfsc	status,0,c
  5016  002CCA  2A04               	incf	___awmod@divisor+1,f,c
  5017  002CCC                     i2l2821:
  5018  002CCC  5003               	movf	___awmod@divisor,w,c
  5019  002CCE  1004               	iorwf	___awmod@divisor+1,w,c
  5020  002CD0  B4D8               	btfsc	status,2,c
  5021  002CD2  D018               	goto	i2l2837
  5022  002CD4  0E01               	movlw	1
  5023  002CD6  6E05               	movwf	___awmod@counter,c
  5024  002CD8  D004               	goto	i2l2827
  5025  002CDA                     i2l2825:
  5026  002CDA  90D8               	bcf	status,0,c
  5027  002CDC  3603               	rlcf	___awmod@divisor,f,c
  5028  002CDE  3604               	rlcf	___awmod@divisor+1,f,c
  5029  002CE0  2A05               	incf	___awmod@counter,f,c
  5030  002CE2                     i2l2827:
  5031  002CE2  AE04               	btfss	___awmod@divisor+1,7,c
  5032  002CE4  D7FA               	goto	i2l2825
  5033  002CE6                     i2l2829:
  5034  002CE6  5003               	movf	___awmod@divisor,w,c
  5035  002CE8  5C01               	subwf	___awmod@dividend,w,c
  5036  002CEA  5004               	movf	___awmod@divisor+1,w,c
  5037  002CEC  5802               	subwfb	___awmod@dividend+1,w,c
  5038  002CEE  A0D8               	btfss	status,0,c
  5039  002CF0  D004               	goto	i2l2833
  5040  002CF2  5003               	movf	___awmod@divisor,w,c
  5041  002CF4  5E01               	subwf	___awmod@dividend,f,c
  5042  002CF6  5004               	movf	___awmod@divisor+1,w,c
  5043  002CF8  5A02               	subwfb	___awmod@dividend+1,f,c
  5044  002CFA                     i2l2833:
  5045  002CFA  90D8               	bcf	status,0,c
  5046  002CFC  3204               	rrcf	___awmod@divisor+1,f,c
  5047  002CFE  3203               	rrcf	___awmod@divisor,f,c
  5048  002D00  2E05               	decfsz	___awmod@counter,f,c
  5049  002D02  D7F1               	goto	i2l2829
  5050  002D04                     i2l2837:
  5051  002D04  5006               	movf	___awmod@sign,w,c
  5052  002D06  B4D8               	btfsc	status,2,c
  5053  002D08  D004               	goto	i2l2841
  5054  002D0A  6C01               	negf	___awmod@dividend,c
  5055  002D0C  1E02               	comf	___awmod@dividend+1,f,c
  5056  002D0E  B0D8               	btfsc	status,0,c
  5057  002D10  2A02               	incf	___awmod@dividend+1,f,c
  5058  002D12                     i2l2841:
  5059  002D12  C001  F001         	movff	___awmod@dividend,?___awmod
  5060  002D16  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  5061  002D1A  0012               	return	
  5062  002D1C                     __end_of___awmod:
  5063                           	opt stack 0
  5064                           pclatu	equ	0xFFB
  5065                           pclath	equ	0xFFA
  5066                           tblptru	equ	0xFF8
  5067                           tblptrh	equ	0xFF7
  5068                           tblptrl	equ	0xFF6
  5069                           tablat	equ	0xFF5
  5070                           prodh	equ	0xFF4
  5071                           prodl	equ	0xFF3
  5072                           intcon	equ	0xFF2
  5073                           intcon3	equ	0xFF0
  5074                           postinc0	equ	0xFEE
  5075                           fsr0h	equ	0xFEA
  5076                           fsr0l	equ	0xFE9
  5077                           wreg	equ	0xFE8
  5078                           postdec1	equ	0xFE5
  5079                           fsr1h	equ	0xFE2
  5080                           fsr1l	equ	0xFE1
  5081                           postinc2	equ	0xFDE
  5082                           postdec2	equ	0xFDD
  5083                           fsr2h	equ	0xFDA
  5084                           fsr2l	equ	0xFD9
  5085                           status	equ	0xFD8
  5086                           
  5087 ;; *************** function ___awdiv *****************
  5088 ;; Defined at:
  5089 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  5090 ;; Parameters:    Size  Location     Type
  5091 ;;  dividend        2    6[COMRAM] int 
  5092 ;;  divisor         2    8[COMRAM] int 
  5093 ;; Auto vars:     Size  Location     Type
  5094 ;;  quotient        2   12[COMRAM] int 
  5095 ;;  sign            1   11[COMRAM] unsigned char 
  5096 ;;  counter         1   10[COMRAM] unsigned char 
  5097 ;; Return value:  Size  Location     Type
  5098 ;;                  2    6[COMRAM] int 
  5099 ;; Registers used:
  5100 ;;		wreg, status,2, status,0
  5101 ;; Tracked objects:
  5102 ;;		On entry : 0/0
  5103 ;;		On exit  : 0/0
  5104 ;;		Unchanged: 0/0
  5105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5106 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5107 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5109 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5110 ;;Total ram usage:        8 bytes
  5111 ;; Hardware stack levels used:    1
  5112 ;; This function calls:
  5113 ;;		Nothing
  5114 ;; This function is called by:
  5115 ;;		_fround
  5116 ;;		_scale
  5117 ;;		_printf
  5118 ;; This function uses a non-reentrant model
  5119 ;;
  5120                           
  5121                           	psect	text19
  5122  002AB8                     __ptext19:
  5123                           	opt stack 0
  5124  002AB8                     ___awdiv:
  5125                           	opt stack 24
  5126                           
  5127                           ;incstack = 0
  5128  002AB8  0E00               	movlw	0
  5129  002ABA  6E0C               	movwf	___awdiv@sign,c
  5130  002ABC  AE0A               	btfss	___awdiv@divisor+1,7,c
  5131  002ABE  D006               	goto	i2l2773
  5132  002AC0  6C09               	negf	___awdiv@divisor,c
  5133  002AC2  1E0A               	comf	___awdiv@divisor+1,f,c
  5134  002AC4  B0D8               	btfsc	status,0,c
  5135  002AC6  2A0A               	incf	___awdiv@divisor+1,f,c
  5136  002AC8  0E01               	movlw	1
  5137  002ACA  6E0C               	movwf	___awdiv@sign,c
  5138  002ACC                     i2l2773:
  5139  002ACC  AE08               	btfss	___awdiv@dividend+1,7,c
  5140  002ACE  D006               	goto	i2l2779
  5141  002AD0  6C07               	negf	___awdiv@dividend,c
  5142  002AD2  1E08               	comf	___awdiv@dividend+1,f,c
  5143  002AD4  B0D8               	btfsc	status,0,c
  5144  002AD6  2A08               	incf	___awdiv@dividend+1,f,c
  5145  002AD8  0E01               	movlw	1
  5146  002ADA  1A0C               	xorwf	___awdiv@sign,f,c
  5147  002ADC                     i2l2779:
  5148  002ADC  0E00               	movlw	0
  5149  002ADE  6E0E               	movwf	___awdiv@quotient+1,c
  5150  002AE0  0E00               	movlw	0
  5151  002AE2  6E0D               	movwf	___awdiv@quotient,c
  5152  002AE4  5009               	movf	___awdiv@divisor,w,c
  5153  002AE6  100A               	iorwf	___awdiv@divisor+1,w,c
  5154  002AE8  B4D8               	btfsc	status,2,c
  5155  002AEA  D01C               	goto	i2l2801
  5156  002AEC  0E01               	movlw	1
  5157  002AEE  6E0B               	movwf	___awdiv@counter,c
  5158  002AF0  D004               	goto	i2l2787
  5159  002AF2                     i2l2785:
  5160  002AF2  90D8               	bcf	status,0,c
  5161  002AF4  3609               	rlcf	___awdiv@divisor,f,c
  5162  002AF6  360A               	rlcf	___awdiv@divisor+1,f,c
  5163  002AF8  2A0B               	incf	___awdiv@counter,f,c
  5164  002AFA                     i2l2787:
  5165  002AFA  AE0A               	btfss	___awdiv@divisor+1,7,c
  5166  002AFC  D7FA               	goto	i2l2785
  5167  002AFE                     i2l2789:
  5168  002AFE  90D8               	bcf	status,0,c
  5169  002B00  360D               	rlcf	___awdiv@quotient,f,c
  5170  002B02  360E               	rlcf	___awdiv@quotient+1,f,c
  5171  002B04  5009               	movf	___awdiv@divisor,w,c
  5172  002B06  5C07               	subwf	___awdiv@dividend,w,c
  5173  002B08  500A               	movf	___awdiv@divisor+1,w,c
  5174  002B0A  5808               	subwfb	___awdiv@dividend+1,w,c
  5175  002B0C  A0D8               	btfss	status,0,c
  5176  002B0E  D005               	goto	i2l2797
  5177  002B10  5009               	movf	___awdiv@divisor,w,c
  5178  002B12  5E07               	subwf	___awdiv@dividend,f,c
  5179  002B14  500A               	movf	___awdiv@divisor+1,w,c
  5180  002B16  5A08               	subwfb	___awdiv@dividend+1,f,c
  5181  002B18  800D               	bsf	___awdiv@quotient,0,c
  5182  002B1A                     i2l2797:
  5183  002B1A  90D8               	bcf	status,0,c
  5184  002B1C  320A               	rrcf	___awdiv@divisor+1,f,c
  5185  002B1E  3209               	rrcf	___awdiv@divisor,f,c
  5186  002B20  2E0B               	decfsz	___awdiv@counter,f,c
  5187  002B22  D7ED               	goto	i2l2789
  5188  002B24                     i2l2801:
  5189  002B24  500C               	movf	___awdiv@sign,w,c
  5190  002B26  B4D8               	btfsc	status,2,c
  5191  002B28  D004               	goto	i2l2805
  5192  002B2A  6C0D               	negf	___awdiv@quotient,c
  5193  002B2C  1E0E               	comf	___awdiv@quotient+1,f,c
  5194  002B2E  B0D8               	btfsc	status,0,c
  5195  002B30  2A0E               	incf	___awdiv@quotient+1,f,c
  5196  002B32                     i2l2805:
  5197  002B32  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  5198  002B36  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  5199  002B3A  0012               	return	
  5200  002B3C                     __end_of___awdiv:
  5201                           	opt stack 0
  5202                           pclatu	equ	0xFFB
  5203                           pclath	equ	0xFFA
  5204                           tblptru	equ	0xFF8
  5205                           tblptrh	equ	0xFF7
  5206                           tblptrl	equ	0xFF6
  5207                           tablat	equ	0xFF5
  5208                           prodh	equ	0xFF4
  5209                           prodl	equ	0xFF3
  5210                           intcon	equ	0xFF2
  5211                           intcon3	equ	0xFF0
  5212                           postinc0	equ	0xFEE
  5213                           fsr0h	equ	0xFEA
  5214                           fsr0l	equ	0xFE9
  5215                           wreg	equ	0xFE8
  5216                           postdec1	equ	0xFE5
  5217                           fsr1h	equ	0xFE2
  5218                           fsr1l	equ	0xFE1
  5219                           postinc2	equ	0xFDE
  5220                           postdec2	equ	0xFDD
  5221                           fsr2h	equ	0xFDA
  5222                           fsr2l	equ	0xFD9
  5223                           status	equ	0xFD8
  5224                           
  5225 ;; *************** function __tdiv_to_l_ *****************
  5226 ;; Defined at:
  5227 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  5228 ;; Parameters:    Size  Location     Type
  5229 ;;  f1              3    0[COMRAM] float 
  5230 ;;  f2              3    3[COMRAM] float 
  5231 ;; Auto vars:     Size  Location     Type
  5232 ;;  quot            4    9[COMRAM] unsigned long 
  5233 ;;  exp1            1   14[COMRAM] unsigned char 
  5234 ;;  cntr            1   13[COMRAM] unsigned char 
  5235 ;; Return value:  Size  Location     Type
  5236 ;;                  4    0[COMRAM] unsigned long 
  5237 ;; Registers used:
  5238 ;;		wreg, status,2, status,0
  5239 ;; Tracked objects:
  5240 ;;		On entry : 0/0
  5241 ;;		On exit  : 0/0
  5242 ;;		Unchanged: 0/0
  5243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5244 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5245 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5246 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5247 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5248 ;;Total ram usage:       15 bytes
  5249 ;; Hardware stack levels used:    1
  5250 ;; This function calls:
  5251 ;;		Nothing
  5252 ;; This function is called by:
  5253 ;;		_printf
  5254 ;; This function uses a non-reentrant model
  5255 ;;
  5256                           
  5257                           	psect	text20
  5258  001F70                     __ptext20:
  5259                           	opt stack 0
  5260  001F70                     __tdiv_to_l_:
  5261                           	opt stack 25
  5262                           
  5263                           ;incstack = 0
  5264  001F70  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  5265  001F74  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5266  001F76  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5267  001F78  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  5268  001F7A  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5269  001F7C  E301               	bnc	u250_41
  5270  001F7E  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5271  001F80                     u250_41:
  5272  001F80  5007               	movf	??__tdiv_to_l_,w,c
  5273  001F82  6E0F               	movwf	__tdiv_to_l_@exp1,c
  5274  001F84  500F               	movf	__tdiv_to_l_@exp1,w,c
  5275  001F86  A4D8               	btfss	status,2,c
  5276  001F88  D009               	goto	i2l2989
  5277  001F8A  0E00               	movlw	0
  5278  001F8C  6E01               	movwf	?__tdiv_to_l_,c
  5279  001F8E  0E00               	movlw	0
  5280  001F90  6E02               	movwf	?__tdiv_to_l_+1,c
  5281  001F92  0E00               	movlw	0
  5282  001F94  6E03               	movwf	?__tdiv_to_l_+2,c
  5283  001F96  0E00               	movlw	0
  5284  001F98  6E04               	movwf	?__tdiv_to_l_+3,c
  5285  001F9A  0012               	return	
  5286  001F9C                     i2l2989:
  5287  001F9C  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  5288  001FA0  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5289  001FA2  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5290  001FA4  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  5291  001FA6  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5292  001FA8  E301               	bnc	u252_41
  5293  001FAA  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5294  001FAC                     u252_41:
  5295  001FAC  5007               	movf	??__tdiv_to_l_,w,c
  5296  001FAE  6E0E               	movwf	__tdiv_to_l_@cntr,c
  5297  001FB0  500E               	movf	__tdiv_to_l_@cntr,w,c
  5298  001FB2  A4D8               	btfss	status,2,c
  5299  001FB4  D009               	goto	i2l2995
  5300  001FB6  0E00               	movlw	0
  5301  001FB8  6E01               	movwf	?__tdiv_to_l_,c
  5302  001FBA  0E00               	movlw	0
  5303  001FBC  6E02               	movwf	?__tdiv_to_l_+1,c
  5304  001FBE  0E00               	movlw	0
  5305  001FC0  6E03               	movwf	?__tdiv_to_l_+2,c
  5306  001FC2  0E00               	movlw	0
  5307  001FC4  6E04               	movwf	?__tdiv_to_l_+3,c
  5308  001FC6  0012               	return	
  5309  001FC8                     i2l2995:
  5310  001FC8  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  5311  001FCA  0EFF               	movlw	255
  5312  001FCC  1601               	andwf	__tdiv_to_l_@f1,f,c
  5313  001FCE  0EFF               	movlw	255
  5314  001FD0  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  5315  001FD2  0E00               	movlw	0
  5316  001FD4  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  5317  001FD6  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  5318  001FD8  0EFF               	movlw	255
  5319  001FDA  1604               	andwf	__tdiv_to_l_@f2,f,c
  5320  001FDC  0EFF               	movlw	255
  5321  001FDE  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  5322  001FE0  0E00               	movlw	0
  5323  001FE2  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  5324  001FE4  0E00               	movlw	0
  5325  001FE6  6E0A               	movwf	__tdiv_to_l_@quot,c
  5326  001FE8  0E00               	movlw	0
  5327  001FEA  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  5328  001FEC  0E00               	movlw	0
  5329  001FEE  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  5330  001FF0  0E00               	movlw	0
  5331  001FF2  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  5332  001FF4  0E7F               	movlw	127
  5333  001FF6  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  5334  001FF8  500E               	movf	__tdiv_to_l_@cntr,w,c
  5335  001FFA  0F98               	addlw	152
  5336  001FFC  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  5337  001FFE  0E18               	movlw	24
  5338  002000  6E0E               	movwf	__tdiv_to_l_@cntr,c
  5339  002002                     i2l782:
  5340  002002  90D8               	bcf	status,0,c
  5341  002004  360A               	rlcf	__tdiv_to_l_@quot,f,c
  5342  002006  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  5343  002008  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  5344  00200A  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  5345  00200C  5004               	movf	__tdiv_to_l_@f2,w,c
  5346  00200E  5C01               	subwf	__tdiv_to_l_@f1,w,c
  5347  002010  5005               	movf	__tdiv_to_l_@f2+1,w,c
  5348  002012  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  5349  002014  5006               	movf	__tdiv_to_l_@f2+2,w,c
  5350  002016  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  5351  002018  A0D8               	btfss	status,0,c
  5352  00201A  D007               	goto	i2l783
  5353  00201C  5004               	movf	__tdiv_to_l_@f2,w,c
  5354  00201E  5E01               	subwf	__tdiv_to_l_@f1,f,c
  5355  002020  5005               	movf	__tdiv_to_l_@f2+1,w,c
  5356  002022  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  5357  002024  5006               	movf	__tdiv_to_l_@f2+2,w,c
  5358  002026  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  5359  002028  800A               	bsf	__tdiv_to_l_@quot,0,c
  5360  00202A                     i2l783:
  5361  00202A  90D8               	bcf	status,0,c
  5362  00202C  3601               	rlcf	__tdiv_to_l_@f1,f,c
  5363  00202E  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  5364  002030  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  5365  002032  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  5366  002034  D7E6               	goto	i2l782
  5367  002036  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  5368  002038  D016               	goto	i2l3029
  5369  00203A  500F               	movf	__tdiv_to_l_@exp1,w,c
  5370  00203C  0A80               	xorlw	128
  5371  00203E  0F97               	addlw	151
  5372  002040  B0D8               	btfsc	status,0,c
  5373  002042  D009               	goto	i2l3025
  5374  002044  0E00               	movlw	0
  5375  002046  6E01               	movwf	?__tdiv_to_l_,c
  5376  002048  0E00               	movlw	0
  5377  00204A  6E02               	movwf	?__tdiv_to_l_+1,c
  5378  00204C  0E00               	movlw	0
  5379  00204E  6E03               	movwf	?__tdiv_to_l_+2,c
  5380  002050  0E00               	movlw	0
  5381  002052  6E04               	movwf	?__tdiv_to_l_+3,c
  5382  002054  0012               	return	
  5383  002056                     i2l3025:
  5384  002056  90D8               	bcf	status,0,c
  5385  002058  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  5386  00205A  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  5387  00205C  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  5388  00205E  320A               	rrcf	__tdiv_to_l_@quot,f,c
  5389  002060  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  5390  002062  D7F9               	goto	i2l3025
  5391  002064  D015               	goto	i2l789
  5392  002066                     i2l3029:
  5393  002066  0E17               	movlw	23
  5394  002068  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  5395  00206A  D00F               	goto	i2l3037
  5396  00206C  0E00               	movlw	0
  5397  00206E  6E01               	movwf	?__tdiv_to_l_,c
  5398  002070  0E00               	movlw	0
  5399  002072  6E02               	movwf	?__tdiv_to_l_+1,c
  5400  002074  0E00               	movlw	0
  5401  002076  6E03               	movwf	?__tdiv_to_l_+2,c
  5402  002078  0E00               	movlw	0
  5403  00207A  6E04               	movwf	?__tdiv_to_l_+3,c
  5404  00207C  0012               	return	
  5405  00207E                     i2l3035:
  5406  00207E  90D8               	bcf	status,0,c
  5407  002080  360A               	rlcf	__tdiv_to_l_@quot,f,c
  5408  002082  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  5409  002084  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  5410  002086  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  5411  002088  060F               	decf	__tdiv_to_l_@exp1,f,c
  5412  00208A                     i2l3037:
  5413  00208A  500F               	movf	__tdiv_to_l_@exp1,w,c
  5414  00208C  A4D8               	btfss	status,2,c
  5415  00208E  D7F7               	goto	i2l3035
  5416  002090                     i2l789:
  5417  002090  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5418  002094  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5419  002098  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5420  00209C  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5421  0020A0  0012               	return		;funcret
  5422  0020A2                     __end_of__tdiv_to_l_:
  5423                           	opt stack 0
  5424                           pclatu	equ	0xFFB
  5425                           pclath	equ	0xFFA
  5426                           tblptru	equ	0xFF8
  5427                           tblptrh	equ	0xFF7
  5428                           tblptrl	equ	0xFF6
  5429                           tablat	equ	0xFF5
  5430                           prodh	equ	0xFF4
  5431                           prodl	equ	0xFF3
  5432                           intcon	equ	0xFF2
  5433                           intcon3	equ	0xFF0
  5434                           postinc0	equ	0xFEE
  5435                           fsr0h	equ	0xFEA
  5436                           fsr0l	equ	0xFE9
  5437                           wreg	equ	0xFE8
  5438                           postdec1	equ	0xFE5
  5439                           fsr1h	equ	0xFE2
  5440                           fsr1l	equ	0xFE1
  5441                           postinc2	equ	0xFDE
  5442                           postdec2	equ	0xFDD
  5443                           fsr2h	equ	0xFDA
  5444                           fsr2l	equ	0xFD9
  5445                           status	equ	0xFD8
  5446                           
  5447 ;; *************** function __div_to_l_ *****************
  5448 ;; Defined at:
  5449 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  5450 ;; Parameters:    Size  Location     Type
  5451 ;;  f1              3    0[COMRAM] unsigned long 
  5452 ;;  f2              3    3[COMRAM] unsigned long 
  5453 ;; Auto vars:     Size  Location     Type
  5454 ;;  quot            4    6[COMRAM] unsigned long 
  5455 ;;  exp1            1   11[COMRAM] unsigned char 
  5456 ;;  cntr            1   10[COMRAM] unsigned char 
  5457 ;; Return value:  Size  Location     Type
  5458 ;;                  4    0[COMRAM] unsigned long 
  5459 ;; Registers used:
  5460 ;;		wreg, status,2, status,0
  5461 ;; Tracked objects:
  5462 ;;		On entry : 0/0
  5463 ;;		On exit  : 0/0
  5464 ;;		Unchanged: 0/0
  5465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5466 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5467 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5469 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5470 ;;Total ram usage:       12 bytes
  5471 ;; Hardware stack levels used:    1
  5472 ;; This function calls:
  5473 ;;		Nothing
  5474 ;; This function is called by:
  5475 ;;		_printf
  5476 ;; This function uses a non-reentrant model
  5477 ;;
  5478                           
  5479                           	psect	text21
  5480  0020A2                     __ptext21:
  5481                           	opt stack 0
  5482  0020A2                     __div_to_l_:
  5483                           	opt stack 25
  5484                           
  5485                           ;incstack = 0
  5486  0020A2  3403               	rlcf	__div_to_l_@f1+2,w,c
  5487  0020A4  3404               	rlcf	__div_to_l_@f1+3,w,c
  5488  0020A6  6E0C               	movwf	__div_to_l_@exp1,c
  5489  0020A8  500C               	movf	__div_to_l_@exp1,w,c
  5490  0020AA  A4D8               	btfss	status,2,c
  5491  0020AC  D009               	goto	i2l3045
  5492  0020AE  0E00               	movlw	0
  5493  0020B0  6E01               	movwf	?__div_to_l_,c
  5494  0020B2  0E00               	movlw	0
  5495  0020B4  6E02               	movwf	?__div_to_l_+1,c
  5496  0020B6  0E00               	movlw	0
  5497  0020B8  6E03               	movwf	?__div_to_l_+2,c
  5498  0020BA  0E00               	movlw	0
  5499  0020BC  6E04               	movwf	?__div_to_l_+3,c
  5500  0020BE  0012               	return	
  5501  0020C0                     i2l3045:
  5502  0020C0  3406               	rlcf	__div_to_l_@f2+2,w,c
  5503  0020C2  3407               	rlcf	__div_to_l_@f2+3,w,c
  5504  0020C4  6E0B               	movwf	__div_to_l_@cntr,c
  5505  0020C6  500B               	movf	__div_to_l_@cntr,w,c
  5506  0020C8  A4D8               	btfss	status,2,c
  5507  0020CA  D009               	goto	i2l3051
  5508  0020CC  0E00               	movlw	0
  5509  0020CE  6E01               	movwf	?__div_to_l_,c
  5510  0020D0  0E00               	movlw	0
  5511  0020D2  6E02               	movwf	?__div_to_l_+1,c
  5512  0020D4  0E00               	movlw	0
  5513  0020D6  6E03               	movwf	?__div_to_l_+2,c
  5514  0020D8  0E00               	movlw	0
  5515  0020DA  6E04               	movwf	?__div_to_l_+3,c
  5516  0020DC  0012               	return	
  5517  0020DE                     i2l3051:
  5518  0020DE  8E03               	bsf	__div_to_l_@f1+2,7,c
  5519  0020E0  0EFF               	movlw	255
  5520  0020E2  1601               	andwf	__div_to_l_@f1,f,c
  5521  0020E4  0EFF               	movlw	255
  5522  0020E6  1602               	andwf	__div_to_l_@f1+1,f,c
  5523  0020E8  0EFF               	movlw	255
  5524  0020EA  1603               	andwf	__div_to_l_@f1+2,f,c
  5525  0020EC  0E00               	movlw	0
  5526  0020EE  1604               	andwf	__div_to_l_@f1+3,f,c
  5527  0020F0  8E06               	bsf	__div_to_l_@f2+2,7,c
  5528  0020F2  0EFF               	movlw	255
  5529  0020F4  1604               	andwf	__div_to_l_@f2,f,c
  5530  0020F6  0EFF               	movlw	255
  5531  0020F8  1605               	andwf	__div_to_l_@f2+1,f,c
  5532  0020FA  0EFF               	movlw	255
  5533  0020FC  1606               	andwf	__div_to_l_@f2+2,f,c
  5534  0020FE  0E00               	movlw	0
  5535  002100  1607               	andwf	__div_to_l_@f2+3,f,c
  5536  002102  0E00               	movlw	0
  5537  002104  6E07               	movwf	__div_to_l_@quot,c
  5538  002106  0E00               	movlw	0
  5539  002108  6E08               	movwf	__div_to_l_@quot+1,c
  5540  00210A  0E00               	movlw	0
  5541  00210C  6E09               	movwf	__div_to_l_@quot+2,c
  5542  00210E  0E00               	movlw	0
  5543  002110  6E0A               	movwf	__div_to_l_@quot+3,c
  5544  002112  0E7F               	movlw	127
  5545  002114  5E0C               	subwf	__div_to_l_@exp1,f,c
  5546  002116  500B               	movf	__div_to_l_@cntr,w,c
  5547  002118  0FA0               	addlw	160
  5548  00211A  5E0C               	subwf	__div_to_l_@exp1,f,c
  5549  00211C  0E20               	movlw	32
  5550  00211E  6E0B               	movwf	__div_to_l_@cntr,c
  5551  002120                     i2l3065:
  5552  002120  90D8               	bcf	status,0,c
  5553  002122  3607               	rlcf	__div_to_l_@quot,f,c
  5554  002124  3608               	rlcf	__div_to_l_@quot+1,f,c
  5555  002126  3609               	rlcf	__div_to_l_@quot+2,f,c
  5556  002128  360A               	rlcf	__div_to_l_@quot+3,f,c
  5557  00212A  5004               	movf	__div_to_l_@f2,w,c
  5558  00212C  5C01               	subwf	__div_to_l_@f1,w,c
  5559  00212E  5005               	movf	__div_to_l_@f2+1,w,c
  5560  002130  5802               	subwfb	__div_to_l_@f1+1,w,c
  5561  002132  5006               	movf	__div_to_l_@f2+2,w,c
  5562  002134  5803               	subwfb	__div_to_l_@f1+2,w,c
  5563  002136  5007               	movf	__div_to_l_@f2+3,w,c
  5564  002138  5804               	subwfb	__div_to_l_@f1+3,w,c
  5565  00213A  A0D8               	btfss	status,0,c
  5566  00213C  D009               	goto	i2l3073
  5567  00213E  5004               	movf	__div_to_l_@f2,w,c
  5568  002140  5E01               	subwf	__div_to_l_@f1,f,c
  5569  002142  5005               	movf	__div_to_l_@f2+1,w,c
  5570  002144  5A02               	subwfb	__div_to_l_@f1+1,f,c
  5571  002146  5006               	movf	__div_to_l_@f2+2,w,c
  5572  002148  5A03               	subwfb	__div_to_l_@f1+2,f,c
  5573  00214A  5007               	movf	__div_to_l_@f2+3,w,c
  5574  00214C  5A04               	subwfb	__div_to_l_@f1+3,f,c
  5575  00214E  8007               	bsf	__div_to_l_@quot,0,c
  5576  002150                     i2l3073:
  5577  002150  90D8               	bcf	status,0,c
  5578  002152  3601               	rlcf	__div_to_l_@f1,f,c
  5579  002154  3602               	rlcf	__div_to_l_@f1+1,f,c
  5580  002156  3603               	rlcf	__div_to_l_@f1+2,f,c
  5581  002158  3604               	rlcf	__div_to_l_@f1+3,f,c
  5582  00215A  2E0B               	decfsz	__div_to_l_@cntr,f,c
  5583  00215C  D7E1               	goto	i2l3065
  5584  00215E  AE0C               	btfss	__div_to_l_@exp1,7,c
  5585  002160  D016               	goto	i2l3089
  5586  002162  500C               	movf	__div_to_l_@exp1,w,c
  5587  002164  0A80               	xorlw	128
  5588  002166  0F9F               	addlw	159
  5589  002168  B0D8               	btfsc	status,0,c
  5590  00216A  D009               	goto	i2l3085
  5591  00216C  0E00               	movlw	0
  5592  00216E  6E01               	movwf	?__div_to_l_,c
  5593  002170  0E00               	movlw	0
  5594  002172  6E02               	movwf	?__div_to_l_+1,c
  5595  002174  0E00               	movlw	0
  5596  002176  6E03               	movwf	?__div_to_l_+2,c
  5597  002178  0E00               	movlw	0
  5598  00217A  6E04               	movwf	?__div_to_l_+3,c
  5599  00217C  0012               	return	
  5600  00217E                     i2l3085:
  5601  00217E  90D8               	bcf	status,0,c
  5602  002180  320A               	rrcf	__div_to_l_@quot+3,f,c
  5603  002182  3209               	rrcf	__div_to_l_@quot+2,f,c
  5604  002184  3208               	rrcf	__div_to_l_@quot+1,f,c
  5605  002186  3207               	rrcf	__div_to_l_@quot,f,c
  5606  002188  3E0C               	incfsz	__div_to_l_@exp1,f,c
  5607  00218A  D7F9               	goto	i2l3085
  5608  00218C  D015               	goto	i2l685
  5609  00218E                     i2l3089:
  5610  00218E  0E1F               	movlw	31
  5611  002190  640C               	cpfsgt	__div_to_l_@exp1,c
  5612  002192  D00F               	goto	i2l3097
  5613  002194  0E00               	movlw	0
  5614  002196  6E01               	movwf	?__div_to_l_,c
  5615  002198  0E00               	movlw	0
  5616  00219A  6E02               	movwf	?__div_to_l_+1,c
  5617  00219C  0E00               	movlw	0
  5618  00219E  6E03               	movwf	?__div_to_l_+2,c
  5619  0021A0  0E00               	movlw	0
  5620  0021A2  6E04               	movwf	?__div_to_l_+3,c
  5621  0021A4  0012               	return	
  5622  0021A6                     i2l3095:
  5623  0021A6  90D8               	bcf	status,0,c
  5624  0021A8  3607               	rlcf	__div_to_l_@quot,f,c
  5625  0021AA  3608               	rlcf	__div_to_l_@quot+1,f,c
  5626  0021AC  3609               	rlcf	__div_to_l_@quot+2,f,c
  5627  0021AE  360A               	rlcf	__div_to_l_@quot+3,f,c
  5628  0021B0  060C               	decf	__div_to_l_@exp1,f,c
  5629  0021B2                     i2l3097:
  5630  0021B2  500C               	movf	__div_to_l_@exp1,w,c
  5631  0021B4  A4D8               	btfss	status,2,c
  5632  0021B6  D7F7               	goto	i2l3095
  5633  0021B8                     i2l685:
  5634  0021B8  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  5635  0021BC  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5636  0021C0  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5637  0021C4  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5638  0021C8  0012               	return		;funcret
  5639  0021CA                     __end_of__div_to_l_:
  5640                           	opt stack 0
  5641                           pclatu	equ	0xFFB
  5642                           pclath	equ	0xFFA
  5643                           tblptru	equ	0xFF8
  5644                           tblptrh	equ	0xFF7
  5645                           tblptrl	equ	0xFF6
  5646                           tablat	equ	0xFF5
  5647                           prodh	equ	0xFF4
  5648                           prodl	equ	0xFF3
  5649                           intcon	equ	0xFF2
  5650                           intcon3	equ	0xFF0
  5651                           postinc0	equ	0xFEE
  5652                           fsr0h	equ	0xFEA
  5653                           fsr0l	equ	0xFE9
  5654                           wreg	equ	0xFE8
  5655                           postdec1	equ	0xFE5
  5656                           fsr1h	equ	0xFE2
  5657                           fsr1l	equ	0xFE1
  5658                           postinc2	equ	0xFDE
  5659                           postdec2	equ	0xFDD
  5660                           fsr2h	equ	0xFDA
  5661                           fsr2l	equ	0xFD9
  5662                           status	equ	0xFD8
  5663                           
  5664 ;; *************** function ___lltoft *****************
  5665 ;; Defined at:
  5666 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  5667 ;; Parameters:    Size  Location     Type
  5668 ;;  c               4    8[COMRAM] unsigned long 
  5669 ;; Auto vars:     Size  Location     Type
  5670 ;;  exp             1   16[COMRAM] unsigned char 
  5671 ;; Return value:  Size  Location     Type
  5672 ;;                  3    8[COMRAM] float 
  5673 ;; Registers used:
  5674 ;;		wreg, status,2, status,0, cstack
  5675 ;; Tracked objects:
  5676 ;;		On entry : 0/0
  5677 ;;		On exit  : 0/0
  5678 ;;		Unchanged: 0/0
  5679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5680 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5681 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5682 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5683 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5684 ;;Total ram usage:        9 bytes
  5685 ;; Hardware stack levels used:    1
  5686 ;; Hardware stack levels required when called:    1
  5687 ;; This function calls:
  5688 ;;		___ftpack
  5689 ;; This function is called by:
  5690 ;;		_printf
  5691 ;; This function uses a non-reentrant model
  5692 ;;
  5693                           
  5694                           	psect	text22
  5695  002DE8                     __ptext22:
  5696                           	opt stack 0
  5697  002DE8                     ___lltoft:
  5698                           	opt stack 24
  5699                           
  5700                           ;incstack = 0
  5701  002DE8  0E8E               	movlw	142
  5702  002DEA  6E11               	movwf	___lltoft@exp,c
  5703  002DEC  D006               	goto	i2l3167
  5704  002DEE                     i2l3165:
  5705  002DEE  90D8               	bcf	status,0,c
  5706  002DF0  320C               	rrcf	___lltoft@c+3,f,c
  5707  002DF2  320B               	rrcf	___lltoft@c+2,f,c
  5708  002DF4  320A               	rrcf	___lltoft@c+1,f,c
  5709  002DF6  3209               	rrcf	___lltoft@c,f,c
  5710  002DF8  2A11               	incf	___lltoft@exp,f,c
  5711  002DFA                     i2l3167:
  5712  002DFA  0E00               	movlw	0
  5713  002DFC  1409               	andwf	___lltoft@c,w,c
  5714  002DFE  6E0D               	movwf	??___lltoft& (0+255),c
  5715  002E00  0E00               	movlw	0
  5716  002E02  140A               	andwf	___lltoft@c+1,w,c
  5717  002E04  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  5718  002E06  0E00               	movlw	0
  5719  002E08  140B               	andwf	___lltoft@c+2,w,c
  5720  002E0A  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  5721  002E0C  0EFF               	movlw	255
  5722  002E0E  140C               	andwf	___lltoft@c+3,w,c
  5723  002E10  6E10               	movwf	(??___lltoft+3)& (0+255),c
  5724  002E12  500D               	movf	??___lltoft,w,c
  5725  002E14  100E               	iorwf	??___lltoft+1,w,c
  5726  002E16  100F               	iorwf	??___lltoft+2,w,c
  5727  002E18  1010               	iorwf	??___lltoft+3,w,c
  5728  002E1A  A4D8               	btfss	status,2,c
  5729  002E1C  D7E8               	goto	i2l3165
  5730  002E1E  C009  F001         	movff	___lltoft@c,___ftpack@arg
  5731  002E22  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  5732  002E26  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  5733  002E2A  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  5734  002E2E  0E00               	movlw	0
  5735  002E30  6E05               	movwf	___ftpack@sign,c
  5736  002E32  EC1F  F014         	call	___ftpack	;wreg free
  5737  002E36  C001  F009         	movff	?___ftpack,?___lltoft
  5738  002E3A  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  5739  002E3E  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  5740  002E42  0012               	return	
  5741  002E44                     __end_of___lltoft:
  5742                           	opt stack 0
  5743                           pclatu	equ	0xFFB
  5744                           pclath	equ	0xFFA
  5745                           tblptru	equ	0xFF8
  5746                           tblptrh	equ	0xFF7
  5747                           tblptrl	equ	0xFF6
  5748                           tablat	equ	0xFF5
  5749                           prodh	equ	0xFF4
  5750                           prodl	equ	0xFF3
  5751                           intcon	equ	0xFF2
  5752                           intcon3	equ	0xFF0
  5753                           postinc0	equ	0xFEE
  5754                           fsr0h	equ	0xFEA
  5755                           fsr0l	equ	0xFE9
  5756                           wreg	equ	0xFE8
  5757                           postdec1	equ	0xFE5
  5758                           fsr1h	equ	0xFE2
  5759                           fsr1l	equ	0xFE1
  5760                           postinc2	equ	0xFDE
  5761                           postdec2	equ	0xFDD
  5762                           fsr2h	equ	0xFDA
  5763                           fsr2l	equ	0xFD9
  5764                           status	equ	0xFD8
  5765                           
  5766 ;; *************** function ___llmod *****************
  5767 ;; Defined at:
  5768 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  5769 ;; Parameters:    Size  Location     Type
  5770 ;;  dividend        4    0[COMRAM] unsigned long 
  5771 ;;  divisor         4    4[COMRAM] unsigned long 
  5772 ;; Auto vars:     Size  Location     Type
  5773 ;;  counter         1    8[COMRAM] unsigned char 
  5774 ;; Return value:  Size  Location     Type
  5775 ;;                  4    0[COMRAM] unsigned long 
  5776 ;; Registers used:
  5777 ;;		wreg, status,2, status,0
  5778 ;; Tracked objects:
  5779 ;;		On entry : 0/0
  5780 ;;		On exit  : 0/0
  5781 ;;		Unchanged: 0/0
  5782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5783 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5784 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5786 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5787 ;;Total ram usage:        9 bytes
  5788 ;; Hardware stack levels used:    1
  5789 ;; This function calls:
  5790 ;;		Nothing
  5791 ;; This function is called by:
  5792 ;;		_printf
  5793 ;; This function uses a non-reentrant model
  5794 ;;
  5795                           
  5796                           	psect	text23
  5797  002D82                     __ptext23:
  5798                           	opt stack 0
  5799  002D82                     ___llmod:
  5800                           	opt stack 25
  5801                           
  5802                           ;incstack = 0
  5803  002D82  5005               	movf	___llmod@divisor,w,c
  5804  002D84  1006               	iorwf	___llmod@divisor+1,w,c
  5805  002D86  1007               	iorwf	___llmod@divisor+2,w,c
  5806  002D88  1008               	iorwf	___llmod@divisor+3,w,c
  5807  002D8A  B4D8               	btfsc	status,2,c
  5808  002D8C  D024               	goto	i2l869
  5809  002D8E  0E01               	movlw	1
  5810  002D90  6E09               	movwf	___llmod@counter,c
  5811  002D92  D006               	goto	i2l3153
  5812  002D94                     i2l3151:
  5813  002D94  90D8               	bcf	status,0,c
  5814  002D96  3605               	rlcf	___llmod@divisor,f,c
  5815  002D98  3606               	rlcf	___llmod@divisor+1,f,c
  5816  002D9A  3607               	rlcf	___llmod@divisor+2,f,c
  5817  002D9C  3608               	rlcf	___llmod@divisor+3,f,c
  5818  002D9E  2A09               	incf	___llmod@counter,f,c
  5819  002DA0                     i2l3153:
  5820  002DA0  AE08               	btfss	___llmod@divisor+3,7,c
  5821  002DA2  D7F8               	goto	i2l3151
  5822  002DA4                     i2l3155:
  5823  002DA4  5005               	movf	___llmod@divisor,w,c
  5824  002DA6  5C01               	subwf	___llmod@dividend,w,c
  5825  002DA8  5006               	movf	___llmod@divisor+1,w,c
  5826  002DAA  5802               	subwfb	___llmod@dividend+1,w,c
  5827  002DAC  5007               	movf	___llmod@divisor+2,w,c
  5828  002DAE  5803               	subwfb	___llmod@dividend+2,w,c
  5829  002DB0  5008               	movf	___llmod@divisor+3,w,c
  5830  002DB2  5804               	subwfb	___llmod@dividend+3,w,c
  5831  002DB4  A0D8               	btfss	status,0,c
  5832  002DB6  D008               	goto	i2l3159
  5833  002DB8  5005               	movf	___llmod@divisor,w,c
  5834  002DBA  5E01               	subwf	___llmod@dividend,f,c
  5835  002DBC  5006               	movf	___llmod@divisor+1,w,c
  5836  002DBE  5A02               	subwfb	___llmod@dividend+1,f,c
  5837  002DC0  5007               	movf	___llmod@divisor+2,w,c
  5838  002DC2  5A03               	subwfb	___llmod@dividend+2,f,c
  5839  002DC4  5008               	movf	___llmod@divisor+3,w,c
  5840  002DC6  5A04               	subwfb	___llmod@dividend+3,f,c
  5841  002DC8                     i2l3159:
  5842  002DC8  90D8               	bcf	status,0,c
  5843  002DCA  3208               	rrcf	___llmod@divisor+3,f,c
  5844  002DCC  3207               	rrcf	___llmod@divisor+2,f,c
  5845  002DCE  3206               	rrcf	___llmod@divisor+1,f,c
  5846  002DD0  3205               	rrcf	___llmod@divisor,f,c
  5847  002DD2  2E09               	decfsz	___llmod@counter,f,c
  5848  002DD4  D7E7               	goto	i2l3155
  5849  002DD6                     i2l869:
  5850  002DD6  C001  F001         	movff	___llmod@dividend,?___llmod
  5851  002DDA  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  5852  002DDE  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  5853  002DE2  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  5854  002DE6  0012               	return		;funcret
  5855  002DE8                     __end_of___llmod:
  5856                           	opt stack 0
  5857                           pclatu	equ	0xFFB
  5858                           pclath	equ	0xFFA
  5859                           tblptru	equ	0xFF8
  5860                           tblptrh	equ	0xFF7
  5861                           tblptrl	equ	0xFF6
  5862                           tablat	equ	0xFF5
  5863                           prodh	equ	0xFF4
  5864                           prodl	equ	0xFF3
  5865                           intcon	equ	0xFF2
  5866                           intcon3	equ	0xFF0
  5867                           postinc0	equ	0xFEE
  5868                           fsr0h	equ	0xFEA
  5869                           fsr0l	equ	0xFE9
  5870                           wreg	equ	0xFE8
  5871                           postdec1	equ	0xFE5
  5872                           fsr1h	equ	0xFE2
  5873                           fsr1l	equ	0xFE1
  5874                           postinc2	equ	0xFDE
  5875                           postdec2	equ	0xFDD
  5876                           fsr2h	equ	0xFDA
  5877                           fsr2l	equ	0xFD9
  5878                           status	equ	0xFD8
  5879                           
  5880 ;; *************** function ___lldiv *****************
  5881 ;; Defined at:
  5882 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5883 ;; Parameters:    Size  Location     Type
  5884 ;;  dividend        4    0[COMRAM] unsigned long 
  5885 ;;  divisor         4    4[COMRAM] unsigned long 
  5886 ;; Auto vars:     Size  Location     Type
  5887 ;;  quotient        4    8[COMRAM] unsigned long 
  5888 ;;  counter         1   12[COMRAM] unsigned char 
  5889 ;; Return value:  Size  Location     Type
  5890 ;;                  4    0[COMRAM] unsigned long 
  5891 ;; Registers used:
  5892 ;;		wreg, status,2, status,0
  5893 ;; Tracked objects:
  5894 ;;		On entry : 0/0
  5895 ;;		On exit  : 0/0
  5896 ;;		Unchanged: 0/0
  5897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5898 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5899 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5901 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5902 ;;Total ram usage:       13 bytes
  5903 ;; Hardware stack levels used:    1
  5904 ;; This function calls:
  5905 ;;		Nothing
  5906 ;; This function is called by:
  5907 ;;		_printf
  5908 ;;		_I2C_Master_Init
  5909 ;; This function uses a non-reentrant model
  5910 ;;
  5911                           
  5912                           	psect	text24
  5913  002B3C                     __ptext24:
  5914                           	opt stack 0
  5915  002B3C                     ___lldiv:
  5916                           	opt stack 25
  5917                           
  5918                           ;incstack = 0
  5919  002B3C  0E00               	movlw	0
  5920  002B3E  6E09               	movwf	___lldiv@quotient,c
  5921  002B40  0E00               	movlw	0
  5922  002B42  6E0A               	movwf	___lldiv@quotient+1,c
  5923  002B44  0E00               	movlw	0
  5924  002B46  6E0B               	movwf	___lldiv@quotient+2,c
  5925  002B48  0E00               	movlw	0
  5926  002B4A  6E0C               	movwf	___lldiv@quotient+3,c
  5927  002B4C  5005               	movf	___lldiv@divisor,w,c
  5928  002B4E  1006               	iorwf	___lldiv@divisor+1,w,c
  5929  002B50  1007               	iorwf	___lldiv@divisor+2,w,c
  5930  002B52  1008               	iorwf	___lldiv@divisor+3,w,c
  5931  002B54  B4D8               	btfsc	status,2,c
  5932  002B56  D02A               	goto	i2l859
  5933  002B58  0E01               	movlw	1
  5934  002B5A  6E0D               	movwf	___lldiv@counter,c
  5935  002B5C  D006               	goto	i2l3133
  5936  002B5E                     i2l3131:
  5937  002B5E  90D8               	bcf	status,0,c
  5938  002B60  3605               	rlcf	___lldiv@divisor,f,c
  5939  002B62  3606               	rlcf	___lldiv@divisor+1,f,c
  5940  002B64  3607               	rlcf	___lldiv@divisor+2,f,c
  5941  002B66  3608               	rlcf	___lldiv@divisor+3,f,c
  5942  002B68  2A0D               	incf	___lldiv@counter,f,c
  5943  002B6A                     i2l3133:
  5944  002B6A  AE08               	btfss	___lldiv@divisor+3,7,c
  5945  002B6C  D7F8               	goto	i2l3131
  5946  002B6E                     i2l3135:
  5947  002B6E  90D8               	bcf	status,0,c
  5948  002B70  3609               	rlcf	___lldiv@quotient,f,c
  5949  002B72  360A               	rlcf	___lldiv@quotient+1,f,c
  5950  002B74  360B               	rlcf	___lldiv@quotient+2,f,c
  5951  002B76  360C               	rlcf	___lldiv@quotient+3,f,c
  5952  002B78  5005               	movf	___lldiv@divisor,w,c
  5953  002B7A  5C01               	subwf	___lldiv@dividend,w,c
  5954  002B7C  5006               	movf	___lldiv@divisor+1,w,c
  5955  002B7E  5802               	subwfb	___lldiv@dividend+1,w,c
  5956  002B80  5007               	movf	___lldiv@divisor+2,w,c
  5957  002B82  5803               	subwfb	___lldiv@dividend+2,w,c
  5958  002B84  5008               	movf	___lldiv@divisor+3,w,c
  5959  002B86  5804               	subwfb	___lldiv@dividend+3,w,c
  5960  002B88  A0D8               	btfss	status,0,c
  5961  002B8A  D009               	goto	i2l3143
  5962  002B8C  5005               	movf	___lldiv@divisor,w,c
  5963  002B8E  5E01               	subwf	___lldiv@dividend,f,c
  5964  002B90  5006               	movf	___lldiv@divisor+1,w,c
  5965  002B92  5A02               	subwfb	___lldiv@dividend+1,f,c
  5966  002B94  5007               	movf	___lldiv@divisor+2,w,c
  5967  002B96  5A03               	subwfb	___lldiv@dividend+2,f,c
  5968  002B98  5008               	movf	___lldiv@divisor+3,w,c
  5969  002B9A  5A04               	subwfb	___lldiv@dividend+3,f,c
  5970  002B9C  8009               	bsf	___lldiv@quotient,0,c
  5971  002B9E                     i2l3143:
  5972  002B9E  90D8               	bcf	status,0,c
  5973  002BA0  3208               	rrcf	___lldiv@divisor+3,f,c
  5974  002BA2  3207               	rrcf	___lldiv@divisor+2,f,c
  5975  002BA4  3206               	rrcf	___lldiv@divisor+1,f,c
  5976  002BA6  3205               	rrcf	___lldiv@divisor,f,c
  5977  002BA8  2E0D               	decfsz	___lldiv@counter,f,c
  5978  002BAA  D7E1               	goto	i2l3135
  5979  002BAC                     i2l859:
  5980  002BAC  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5981  002BB0  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5982  002BB4  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5983  002BB8  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5984  002BBC  0012               	return		;funcret
  5985  002BBE                     __end_of___lldiv:
  5986                           	opt stack 0
  5987                           pclatu	equ	0xFFB
  5988                           pclath	equ	0xFFA
  5989                           tblptru	equ	0xFF8
  5990                           tblptrh	equ	0xFF7
  5991                           tblptrl	equ	0xFF6
  5992                           tablat	equ	0xFF5
  5993                           prodh	equ	0xFF4
  5994                           prodl	equ	0xFF3
  5995                           intcon	equ	0xFF2
  5996                           intcon3	equ	0xFF0
  5997                           postinc0	equ	0xFEE
  5998                           fsr0h	equ	0xFEA
  5999                           fsr0l	equ	0xFE9
  6000                           wreg	equ	0xFE8
  6001                           postdec1	equ	0xFE5
  6002                           fsr1h	equ	0xFE2
  6003                           fsr1l	equ	0xFE1
  6004                           postinc2	equ	0xFDE
  6005                           postdec2	equ	0xFDD
  6006                           fsr2h	equ	0xFDA
  6007                           fsr2l	equ	0xFD9
  6008                           status	equ	0xFD8
  6009                           
  6010 ;; *************** function ___fttol *****************
  6011 ;; Defined at:
  6012 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  6013 ;; Parameters:    Size  Location     Type
  6014 ;;  f1              3   70[COMRAM] float 
  6015 ;; Auto vars:     Size  Location     Type
  6016 ;;  lval            4   80[COMRAM] unsigned long 
  6017 ;;  exp1            1   84[COMRAM] unsigned char 
  6018 ;;  sign1           1   79[COMRAM] unsigned char 
  6019 ;; Return value:  Size  Location     Type
  6020 ;;                  4   70[COMRAM] long 
  6021 ;; Registers used:
  6022 ;;		wreg, status,2, status,0
  6023 ;; Tracked objects:
  6024 ;;		On entry : 0/0
  6025 ;;		On exit  : 0/0
  6026 ;;		Unchanged: 0/0
  6027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6028 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6029 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6030 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6031 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6032 ;;Total ram usage:       15 bytes
  6033 ;; Hardware stack levels used:    1
  6034 ;; This function calls:
  6035 ;;		Nothing
  6036 ;; This function is called by:
  6037 ;;		_startT0
  6038 ;;		_printf
  6039 ;; This function uses a non-reentrant model
  6040 ;;
  6041                           
  6042                           	psect	text25
  6043  0024CA                     __ptext25:
  6044                           	opt stack 0
  6045  0024CA                     ___fttol:
  6046                           	opt stack 24
  6047                           
  6048                           ;incstack = 0
  6049  0024CA  C049  F04B         	movff	___fttol@f1+2,??___fttol
  6050  0024CE  6A4C               	clrf	(??___fttol+1)& (0+255),c
  6051  0024D0  6A4D               	clrf	(??___fttol+2)& (0+255),c
  6052  0024D2  3448               	rlcf	___fttol@f1+1,w,c
  6053  0024D4  364B               	rlcf	??___fttol& (0+255),f,c
  6054  0024D6  E301               	bnc	u234_41
  6055  0024D8  804C               	bsf	(??___fttol+1)& (0+255),0,c
  6056  0024DA                     u234_41:
  6057  0024DA  504B               	movf	??___fttol,w,c
  6058  0024DC  6E55               	movwf	___fttol@exp1,c
  6059  0024DE  5055               	movf	___fttol@exp1,w,c
  6060  0024E0  A4D8               	btfss	status,2,c
  6061  0024E2  D009               	goto	i2l2855
  6062  0024E4  0E00               	movlw	0
  6063  0024E6  6E47               	movwf	?___fttol,c
  6064  0024E8  0E00               	movlw	0
  6065  0024EA  6E48               	movwf	?___fttol+1,c
  6066  0024EC  0E00               	movlw	0
  6067  0024EE  6E49               	movwf	?___fttol+2,c
  6068  0024F0  0E00               	movlw	0
  6069  0024F2  6E4A               	movwf	?___fttol+3,c
  6070  0024F4  0012               	return	
  6071  0024F6                     i2l2855:
  6072  0024F6  0E17               	movlw	23
  6073  0024F8  6E4B               	movwf	??___fttol& (0+255),c
  6074  0024FA  C047  F04C         	movff	___fttol@f1,??___fttol+1
  6075  0024FE  C048  F04D         	movff	___fttol@f1+1,??___fttol+2
  6076  002502  C049  F04E         	movff	___fttol@f1+2,??___fttol+3
  6077  002506  284B               	incf	??___fttol,w,c
  6078  002508  6E4F               	movwf	(??___fttol+4)& (0+255),c
  6079  00250A  D004               	goto	i2u236_40
  6080  00250C                     i2u236_45:
  6081  00250C  90D8               	bcf	status,0,c
  6082  00250E  324E               	rrcf	??___fttol+3,f,c
  6083  002510  324D               	rrcf	??___fttol+2,f,c
  6084  002512  324C               	rrcf	??___fttol+1,f,c
  6085  002514                     i2u236_40:
  6086  002514  2E4F               	decfsz	(??___fttol+4)& (0+255),f,c
  6087  002516  D7FA               	goto	i2u236_45
  6088  002518  504C               	movf	??___fttol+1,w,c
  6089  00251A  6E50               	movwf	___fttol@sign1,c
  6090  00251C  8E48               	bsf	___fttol@f1+1,7,c
  6091  00251E  0EFF               	movlw	255
  6092  002520  1647               	andwf	___fttol@f1,f,c
  6093  002522  0EFF               	movlw	255
  6094  002524  1648               	andwf	___fttol@f1+1,f,c
  6095  002526  0E00               	movlw	0
  6096  002528  1649               	andwf	___fttol@f1+2,f,c
  6097  00252A  5047               	movf	___fttol@f1,w,c
  6098  00252C  6E51               	movwf	___fttol@lval,c
  6099  00252E  5048               	movf	___fttol@f1+1,w,c
  6100  002530  6E52               	movwf	___fttol@lval+1,c
  6101  002532  5049               	movf	___fttol@f1+2,w,c
  6102  002534  6E53               	movwf	___fttol@lval+2,c
  6103  002536  6A54               	clrf	___fttol@lval+3,c
  6104  002538  0E8E               	movlw	142
  6105  00253A  5E55               	subwf	___fttol@exp1,f,c
  6106  00253C  AE55               	btfss	___fttol@exp1,7,c
  6107  00253E  D016               	goto	i2l2877
  6108  002540  5055               	movf	___fttol@exp1,w,c
  6109  002542  0A80               	xorlw	128
  6110  002544  0F8F               	addlw	143
  6111  002546  B0D8               	btfsc	status,0,c
  6112  002548  D009               	goto	i2l2873
  6113  00254A  0E00               	movlw	0
  6114  00254C  6E47               	movwf	?___fttol,c
  6115  00254E  0E00               	movlw	0
  6116  002550  6E48               	movwf	?___fttol+1,c
  6117  002552  0E00               	movlw	0
  6118  002554  6E49               	movwf	?___fttol+2,c
  6119  002556  0E00               	movlw	0
  6120  002558  6E4A               	movwf	?___fttol+3,c
  6121  00255A  0012               	return	
  6122  00255C                     i2l2873:
  6123  00255C  90D8               	bcf	status,0,c
  6124  00255E  3254               	rrcf	___fttol@lval+3,f,c
  6125  002560  3253               	rrcf	___fttol@lval+2,f,c
  6126  002562  3252               	rrcf	___fttol@lval+1,f,c
  6127  002564  3251               	rrcf	___fttol@lval,f,c
  6128  002566  3E55               	incfsz	___fttol@exp1,f,c
  6129  002568  D7F9               	goto	i2l2873
  6130  00256A  D015               	goto	i2l2887
  6131  00256C                     i2l2877:
  6132  00256C  0E17               	movlw	23
  6133  00256E  6455               	cpfsgt	___fttol@exp1,c
  6134  002570  D00F               	goto	i2l2885
  6135  002572  0E00               	movlw	0
  6136  002574  6E47               	movwf	?___fttol,c
  6137  002576  0E00               	movlw	0
  6138  002578  6E48               	movwf	?___fttol+1,c
  6139  00257A  0E00               	movlw	0
  6140  00257C  6E49               	movwf	?___fttol+2,c
  6141  00257E  0E00               	movlw	0
  6142  002580  6E4A               	movwf	?___fttol+3,c
  6143  002582  0012               	return	
  6144  002584                     i2l2883:
  6145  002584  90D8               	bcf	status,0,c
  6146  002586  3651               	rlcf	___fttol@lval,f,c
  6147  002588  3652               	rlcf	___fttol@lval+1,f,c
  6148  00258A  3653               	rlcf	___fttol@lval+2,f,c
  6149  00258C  3654               	rlcf	___fttol@lval+3,f,c
  6150  00258E  0655               	decf	___fttol@exp1,f,c
  6151  002590                     i2l2885:
  6152  002590  5055               	movf	___fttol@exp1,w,c
  6153  002592  A4D8               	btfss	status,2,c
  6154  002594  D7F7               	goto	i2l2883
  6155  002596                     i2l2887:
  6156  002596  5050               	movf	___fttol@sign1,w,c
  6157  002598  B4D8               	btfsc	status,2,c
  6158  00259A  D008               	goto	i2l2891
  6159  00259C  1E54               	comf	___fttol@lval+3,f,c
  6160  00259E  1E53               	comf	___fttol@lval+2,f,c
  6161  0025A0  1E52               	comf	___fttol@lval+1,f,c
  6162  0025A2  6C51               	negf	___fttol@lval,c
  6163  0025A4  0E00               	movlw	0
  6164  0025A6  2252               	addwfc	___fttol@lval+1,f,c
  6165  0025A8  2253               	addwfc	___fttol@lval+2,f,c
  6166  0025AA  2254               	addwfc	___fttol@lval+3,f,c
  6167  0025AC                     i2l2891:
  6168  0025AC  C051  F047         	movff	___fttol@lval,?___fttol
  6169  0025B0  C052  F048         	movff	___fttol@lval+1,?___fttol+1
  6170  0025B4  C053  F049         	movff	___fttol@lval+2,?___fttol+2
  6171  0025B8  C054  F04A         	movff	___fttol@lval+3,?___fttol+3
  6172  0025BC  0012               	return	
  6173  0025BE                     __end_of___fttol:
  6174                           	opt stack 0
  6175                           pclatu	equ	0xFFB
  6176                           pclath	equ	0xFFA
  6177                           tblptru	equ	0xFF8
  6178                           tblptrh	equ	0xFF7
  6179                           tblptrl	equ	0xFF6
  6180                           tablat	equ	0xFF5
  6181                           prodh	equ	0xFF4
  6182                           prodl	equ	0xFF3
  6183                           intcon	equ	0xFF2
  6184                           intcon3	equ	0xFF0
  6185                           postinc0	equ	0xFEE
  6186                           fsr0h	equ	0xFEA
  6187                           fsr0l	equ	0xFE9
  6188                           wreg	equ	0xFE8
  6189                           postdec1	equ	0xFE5
  6190                           fsr1h	equ	0xFE2
  6191                           fsr1l	equ	0xFE1
  6192                           postinc2	equ	0xFDE
  6193                           postdec2	equ	0xFDD
  6194                           fsr2h	equ	0xFDA
  6195                           fsr2l	equ	0xFD9
  6196                           status	equ	0xFD8
  6197                           
  6198 ;; *************** function ___ftsub *****************
  6199 ;; Defined at:
  6200 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  6201 ;; Parameters:    Size  Location     Type
  6202 ;;  f1              3   70[COMRAM] float 
  6203 ;;  f2              3   73[COMRAM] float 
  6204 ;; Auto vars:     Size  Location     Type
  6205 ;;		None
  6206 ;; Return value:  Size  Location     Type
  6207 ;;                  3   70[COMRAM] float 
  6208 ;; Registers used:
  6209 ;;		wreg, status,2, status,0, cstack
  6210 ;; Tracked objects:
  6211 ;;		On entry : 0/0
  6212 ;;		On exit  : 0/0
  6213 ;;		Unchanged: 0/0
  6214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6215 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6218 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6219 ;;Total ram usage:        6 bytes
  6220 ;; Hardware stack levels used:    1
  6221 ;; Hardware stack levels required when called:    2
  6222 ;; This function calls:
  6223 ;;		___ftadd
  6224 ;; This function is called by:
  6225 ;;		_service
  6226 ;;		_printf
  6227 ;; This function uses a non-reentrant model
  6228 ;;
  6229                           
  6230                           	psect	text26
  6231  002EE0                     __ptext26:
  6232                           	opt stack 0
  6233  002EE0                     ___ftsub:
  6234                           	opt stack 23
  6235                           
  6236                           ;incstack = 0
  6237  002EE0  504A               	movf	___ftsub@f2,w,c
  6238  002EE2  104B               	iorwf	___ftsub@f2+1,w,c
  6239  002EE4  104C               	iorwf	___ftsub@f2+2,w,c
  6240  002EE6  B4D8               	btfsc	status,2,c
  6241  002EE8  D006               	goto	i2l3103
  6242  002EEA  0E00               	movlw	0
  6243  002EEC  1A4A               	xorwf	___ftsub@f2,f,c
  6244  002EEE  0E00               	movlw	0
  6245  002EF0  1A4B               	xorwf	___ftsub@f2+1,f,c
  6246  002EF2  0E80               	movlw	128
  6247  002EF4  1A4C               	xorwf	___ftsub@f2+2,f,c
  6248  002EF6                     i2l3103:
  6249  002EF6  C047  F03B         	movff	___ftsub@f1,___ftadd@f1
  6250  002EFA  C048  F03C         	movff	___ftsub@f1+1,___ftadd@f1+1
  6251  002EFE  C049  F03D         	movff	___ftsub@f1+2,___ftadd@f1+2
  6252  002F02  C04A  F03E         	movff	___ftsub@f2,___ftadd@f2
  6253  002F06  C04B  F03F         	movff	___ftsub@f2+1,___ftadd@f2+1
  6254  002F0A  C04C  F040         	movff	___ftsub@f2+2,___ftadd@f2+2
  6255  002F0E  ECE2  F00E         	call	___ftadd	;wreg free
  6256  002F12  C03B  F047         	movff	?___ftadd,?___ftsub
  6257  002F16  C03C  F048         	movff	?___ftadd+1,?___ftsub+1
  6258  002F1A  C03D  F049         	movff	?___ftadd+2,?___ftsub+2
  6259  002F1E  0012               	return	
  6260  002F20                     __end_of___ftsub:
  6261                           	opt stack 0
  6262                           pclatu	equ	0xFFB
  6263                           pclath	equ	0xFFA
  6264                           tblptru	equ	0xFF8
  6265                           tblptrh	equ	0xFF7
  6266                           tblptrl	equ	0xFF6
  6267                           tablat	equ	0xFF5
  6268                           prodh	equ	0xFF4
  6269                           prodl	equ	0xFF3
  6270                           intcon	equ	0xFF2
  6271                           intcon3	equ	0xFF0
  6272                           postinc0	equ	0xFEE
  6273                           fsr0h	equ	0xFEA
  6274                           fsr0l	equ	0xFE9
  6275                           wreg	equ	0xFE8
  6276                           postdec1	equ	0xFE5
  6277                           fsr1h	equ	0xFE2
  6278                           fsr1l	equ	0xFE1
  6279                           postinc2	equ	0xFDE
  6280                           postdec2	equ	0xFDD
  6281                           fsr2h	equ	0xFDA
  6282                           fsr2l	equ	0xFD9
  6283                           status	equ	0xFD8
  6284                           
  6285 ;; *************** function ___ftadd *****************
  6286 ;; Defined at:
  6287 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  6288 ;; Parameters:    Size  Location     Type
  6289 ;;  f1              3   58[COMRAM] float 
  6290 ;;  f2              3   61[COMRAM] float 
  6291 ;; Auto vars:     Size  Location     Type
  6292 ;;  exp1            1   69[COMRAM] unsigned char 
  6293 ;;  exp2            1   68[COMRAM] unsigned char 
  6294 ;;  sign            1   67[COMRAM] unsigned char 
  6295 ;; Return value:  Size  Location     Type
  6296 ;;                  3   58[COMRAM] float 
  6297 ;; Registers used:
  6298 ;;		wreg, status,2, status,0, cstack
  6299 ;; Tracked objects:
  6300 ;;		On entry : 0/0
  6301 ;;		On exit  : 0/0
  6302 ;;		Unchanged: 0/0
  6303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6304 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6305 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6306 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6307 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6308 ;;Total ram usage:       12 bytes
  6309 ;; Hardware stack levels used:    1
  6310 ;; Hardware stack levels required when called:    1
  6311 ;; This function calls:
  6312 ;;		___ftpack
  6313 ;; This function is called by:
  6314 ;;		_service
  6315 ;;		_startT0
  6316 ;;		_updateAngle
  6317 ;;		_printf
  6318 ;;		___ftsub
  6319 ;; This function uses a non-reentrant model
  6320 ;;
  6321                           
  6322                           	psect	text27
  6323  001DC4                     __ptext27:
  6324                           	opt stack 0
  6325  001DC4                     ___ftadd:
  6326                           	opt stack 23
  6327                           
  6328                           ;incstack = 0
  6329  001DC4  C03D  F041         	movff	___ftadd@f1+2,??___ftadd
  6330  001DC8  6A42               	clrf	(??___ftadd+1)& (0+255),c
  6331  001DCA  6A43               	clrf	(??___ftadd+2)& (0+255),c
  6332  001DCC  343C               	rlcf	___ftadd@f1+1,w,c
  6333  001DCE  3641               	rlcf	??___ftadd& (0+255),f,c
  6334  001DD0  E301               	bnc	u189_41
  6335  001DD2  8042               	bsf	(??___ftadd+1)& (0+255),0,c
  6336  001DD4                     u189_41:
  6337  001DD4  5041               	movf	??___ftadd,w,c
  6338  001DD6  6E46               	movwf	___ftadd@exp1,c
  6339  001DD8  C040  F041         	movff	___ftadd@f2+2,??___ftadd
  6340  001DDC  6A42               	clrf	(??___ftadd+1)& (0+255),c
  6341  001DDE  6A43               	clrf	(??___ftadd+2)& (0+255),c
  6342  001DE0  343F               	rlcf	___ftadd@f2+1,w,c
  6343  001DE2  3641               	rlcf	??___ftadd& (0+255),f,c
  6344  001DE4  E301               	bnc	u190_41
  6345  001DE6  8042               	bsf	(??___ftadd+1)& (0+255),0,c
  6346  001DE8                     u190_41:
  6347  001DE8  5041               	movf	??___ftadd,w,c
  6348  001DEA  6E45               	movwf	___ftadd@exp2,c
  6349  001DEC  5046               	movf	___ftadd@exp1,w,c
  6350  001DEE  B4D8               	btfsc	status,2,c
  6351  001DF0  D00B               	goto	i2l740
  6352  001DF2  5045               	movf	___ftadd@exp2,w,c
  6353  001DF4  5C46               	subwf	___ftadd@exp1,w,c
  6354  001DF6  B0D8               	btfsc	status,0,c
  6355  001DF8  D00E               	goto	i2l2609
  6356  001DFA  5046               	movf	___ftadd@exp1,w,c
  6357  001DFC  0800               	sublw	0
  6358  001DFE  2445               	addwf	___ftadd@exp2,w,c
  6359  001E00  6E41               	movwf	??___ftadd& (0+255),c
  6360  001E02  0E18               	movlw	24
  6361  001E04  6441               	cpfsgt	??___ftadd,c
  6362  001E06  D007               	goto	i2l2609
  6363  001E08                     i2l740:
  6364  001E08  C03E  F03B         	movff	___ftadd@f2,?___ftadd
  6365  001E0C  C03F  F03C         	movff	___ftadd@f2+1,?___ftadd+1
  6366  001E10  C040  F03D         	movff	___ftadd@f2+2,?___ftadd+2
  6367  001E14  0012               	return	
  6368  001E16                     i2l2609:
  6369  001E16  5045               	movf	___ftadd@exp2,w,c
  6370  001E18  B4D8               	btfsc	status,2,c
  6371  001E1A  D00B               	goto	i2l744
  6372  001E1C  5046               	movf	___ftadd@exp1,w,c
  6373  001E1E  5C45               	subwf	___ftadd@exp2,w,c
  6374  001E20  B0D8               	btfsc	status,0,c
  6375  001E22  D00E               	goto	i2l2615
  6376  001E24  5045               	movf	___ftadd@exp2,w,c
  6377  001E26  0800               	sublw	0
  6378  001E28  2446               	addwf	___ftadd@exp1,w,c
  6379  001E2A  6E41               	movwf	??___ftadd& (0+255),c
  6380  001E2C  0E18               	movlw	24
  6381  001E2E  6441               	cpfsgt	??___ftadd,c
  6382  001E30  D007               	goto	i2l2615
  6383  001E32                     i2l744:
  6384  001E32  C03B  F03B         	movff	___ftadd@f1,?___ftadd
  6385  001E36  C03C  F03C         	movff	___ftadd@f1+1,?___ftadd+1
  6386  001E3A  C03D  F03D         	movff	___ftadd@f1+2,?___ftadd+2
  6387  001E3E  0012               	return	
  6388  001E40                     i2l2615:
  6389  001E40  0E06               	movlw	6
  6390  001E42  6E44               	movwf	___ftadd@sign,c
  6391  001E44  BE3D               	btfsc	___ftadd@f1+2,7,c
  6392  001E46  8E44               	bsf	___ftadd@sign,7,c
  6393  001E48  BE40               	btfsc	___ftadd@f2+2,7,c
  6394  001E4A  8C44               	bsf	___ftadd@sign,6,c
  6395  001E4C  8E3C               	bsf	___ftadd@f1+1,7,c
  6396  001E4E  0EFF               	movlw	255
  6397  001E50  163B               	andwf	___ftadd@f1,f,c
  6398  001E52  0EFF               	movlw	255
  6399  001E54  163C               	andwf	___ftadd@f1+1,f,c
  6400  001E56  0E00               	movlw	0
  6401  001E58  163D               	andwf	___ftadd@f1+2,f,c
  6402  001E5A  8E3F               	bsf	___ftadd@f2+1,7,c
  6403  001E5C  0EFF               	movlw	255
  6404  001E5E  163E               	andwf	___ftadd@f2,f,c
  6405  001E60  0EFF               	movlw	255
  6406  001E62  163F               	andwf	___ftadd@f2+1,f,c
  6407  001E64  0E00               	movlw	0
  6408  001E66  1640               	andwf	___ftadd@f2+2,f,c
  6409  001E68  5045               	movf	___ftadd@exp2,w,c
  6410  001E6A  5C46               	subwf	___ftadd@exp1,w,c
  6411  001E6C  B0D8               	btfsc	status,0,c
  6412  001E6E  D01B               	goto	i2l2641
  6413  001E70                     i2l2631:
  6414  001E70  90D8               	bcf	status,0,c
  6415  001E72  363E               	rlcf	___ftadd@f2,f,c
  6416  001E74  363F               	rlcf	___ftadd@f2+1,f,c
  6417  001E76  3640               	rlcf	___ftadd@f2+2,f,c
  6418  001E78  0645               	decf	___ftadd@exp2,f,c
  6419  001E7A  5046               	movf	___ftadd@exp1,w,c
  6420  001E7C  1845               	xorwf	___ftadd@exp2,w,c
  6421  001E7E  B4D8               	btfsc	status,2,c
  6422  001E80  D00D               	goto	i2l2639
  6423  001E82  0644               	decf	___ftadd@sign,f,c
  6424  001E84  C044  F041         	movff	___ftadd@sign,??___ftadd
  6425  001E88  0E07               	movlw	7
  6426  001E8A  1641               	andwf	??___ftadd,f,c
  6427  001E8C  B4D8               	btfsc	status,2,c
  6428  001E8E  D006               	goto	i2l2639
  6429  001E90  D7EF               	goto	i2l2631
  6430  001E92                     i2l2637:
  6431  001E92  90D8               	bcf	status,0,c
  6432  001E94  323D               	rrcf	___ftadd@f1+2,f,c
  6433  001E96  323C               	rrcf	___ftadd@f1+1,f,c
  6434  001E98  323B               	rrcf	___ftadd@f1,f,c
  6435  001E9A  2A46               	incf	___ftadd@exp1,f,c
  6436  001E9C                     i2l2639:
  6437  001E9C  5045               	movf	___ftadd@exp2,w,c
  6438  001E9E  1846               	xorwf	___ftadd@exp1,w,c
  6439  001EA0  B4D8               	btfsc	status,2,c
  6440  001EA2  D01F               	goto	i2l755
  6441  001EA4  D7F6               	goto	i2l2637
  6442  001EA6                     i2l2641:
  6443  001EA6  5046               	movf	___ftadd@exp1,w,c
  6444  001EA8  5C45               	subwf	___ftadd@exp2,w,c
  6445  001EAA  B0D8               	btfsc	status,0,c
  6446  001EAC  D01A               	goto	i2l755
  6447  001EAE                     i2l2643:
  6448  001EAE  90D8               	bcf	status,0,c
  6449  001EB0  363B               	rlcf	___ftadd@f1,f,c
  6450  001EB2  363C               	rlcf	___ftadd@f1+1,f,c
  6451  001EB4  363D               	rlcf	___ftadd@f1+2,f,c
  6452  001EB6  0646               	decf	___ftadd@exp1,f,c
  6453  001EB8  5046               	movf	___ftadd@exp1,w,c
  6454  001EBA  1845               	xorwf	___ftadd@exp2,w,c
  6455  001EBC  B4D8               	btfsc	status,2,c
  6456  001EBE  D00D               	goto	i2l2651
  6457  001EC0  0644               	decf	___ftadd@sign,f,c
  6458  001EC2  C044  F041         	movff	___ftadd@sign,??___ftadd
  6459  001EC6  0E07               	movlw	7
  6460  001EC8  1641               	andwf	??___ftadd,f,c
  6461  001ECA  B4D8               	btfsc	status,2,c
  6462  001ECC  D006               	goto	i2l2651
  6463  001ECE  D7EF               	goto	i2l2643
  6464  001ED0                     i2l2649:
  6465  001ED0  90D8               	bcf	status,0,c
  6466  001ED2  3240               	rrcf	___ftadd@f2+2,f,c
  6467  001ED4  323F               	rrcf	___ftadd@f2+1,f,c
  6468  001ED6  323E               	rrcf	___ftadd@f2,f,c
  6469  001ED8  2A45               	incf	___ftadd@exp2,f,c
  6470  001EDA                     i2l2651:
  6471  001EDA  5045               	movf	___ftadd@exp2,w,c
  6472  001EDC  1846               	xorwf	___ftadd@exp1,w,c
  6473  001EDE  A4D8               	btfss	status,2,c
  6474  001EE0  D7F7               	goto	i2l2649
  6475  001EE2                     i2l755:
  6476  001EE2  AE44               	btfss	___ftadd@sign,7,c
  6477  001EE4  D00C               	goto	i2l764
  6478  001EE6  0EFF               	movlw	255
  6479  001EE8  1A3B               	xorwf	___ftadd@f1,f,c
  6480  001EEA  0EFF               	movlw	255
  6481  001EEC  1A3C               	xorwf	___ftadd@f1+1,f,c
  6482  001EEE  0EFF               	movlw	255
  6483  001EF0  1A3D               	xorwf	___ftadd@f1+2,f,c
  6484  001EF2  0E01               	movlw	1
  6485  001EF4  263B               	addwf	___ftadd@f1,f,c
  6486  001EF6  0E00               	movlw	0
  6487  001EF8  223C               	addwfc	___ftadd@f1+1,f,c
  6488  001EFA  0E00               	movlw	0
  6489  001EFC  223D               	addwfc	___ftadd@f1+2,f,c
  6490  001EFE                     i2l764:
  6491  001EFE  AC44               	btfss	___ftadd@sign,6,c
  6492  001F00  D00C               	goto	i2l2657
  6493  001F02  0EFF               	movlw	255
  6494  001F04  1A3E               	xorwf	___ftadd@f2,f,c
  6495  001F06  0EFF               	movlw	255
  6496  001F08  1A3F               	xorwf	___ftadd@f2+1,f,c
  6497  001F0A  0EFF               	movlw	255
  6498  001F0C  1A40               	xorwf	___ftadd@f2+2,f,c
  6499  001F0E  0E01               	movlw	1
  6500  001F10  263E               	addwf	___ftadd@f2,f,c
  6501  001F12  0E00               	movlw	0
  6502  001F14  223F               	addwfc	___ftadd@f2+1,f,c
  6503  001F16  0E00               	movlw	0
  6504  001F18  2240               	addwfc	___ftadd@f2+2,f,c
  6505  001F1A                     i2l2657:
  6506  001F1A  0E00               	movlw	0
  6507  001F1C  6E44               	movwf	___ftadd@sign,c
  6508  001F1E  503B               	movf	___ftadd@f1,w,c
  6509  001F20  263E               	addwf	___ftadd@f2,f,c
  6510  001F22  503C               	movf	___ftadd@f1+1,w,c
  6511  001F24  223F               	addwfc	___ftadd@f2+1,f,c
  6512  001F26  503D               	movf	___ftadd@f1+2,w,c
  6513  001F28  2240               	addwfc	___ftadd@f2+2,f,c
  6514  001F2A  AE40               	btfss	___ftadd@f2+2,7,c
  6515  001F2C  D00E               	goto	i2l2667
  6516  001F2E  0EFF               	movlw	255
  6517  001F30  1A3E               	xorwf	___ftadd@f2,f,c
  6518  001F32  0EFF               	movlw	255
  6519  001F34  1A3F               	xorwf	___ftadd@f2+1,f,c
  6520  001F36  0EFF               	movlw	255
  6521  001F38  1A40               	xorwf	___ftadd@f2+2,f,c
  6522  001F3A  0E01               	movlw	1
  6523  001F3C  263E               	addwf	___ftadd@f2,f,c
  6524  001F3E  0E00               	movlw	0
  6525  001F40  223F               	addwfc	___ftadd@f2+1,f,c
  6526  001F42  0E00               	movlw	0
  6527  001F44  2240               	addwfc	___ftadd@f2+2,f,c
  6528  001F46  0E01               	movlw	1
  6529  001F48  6E44               	movwf	___ftadd@sign,c
  6530  001F4A                     i2l2667:
  6531  001F4A  C03E  F001         	movff	___ftadd@f2,___ftpack@arg
  6532  001F4E  C03F  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  6533  001F52  C040  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  6534  001F56  C046  F004         	movff	___ftadd@exp1,___ftpack@exp
  6535  001F5A  C044  F005         	movff	___ftadd@sign,___ftpack@sign
  6536  001F5E  EC1F  F014         	call	___ftpack	;wreg free
  6537  001F62  C001  F03B         	movff	?___ftpack,?___ftadd
  6538  001F66  C002  F03C         	movff	?___ftpack+1,?___ftadd+1
  6539  001F6A  C003  F03D         	movff	?___ftpack+2,?___ftadd+2
  6540  001F6E  0012               	return	
  6541  001F70                     __end_of___ftadd:
  6542                           	opt stack 0
  6543                           pclatu	equ	0xFFB
  6544                           pclath	equ	0xFFA
  6545                           tblptru	equ	0xFF8
  6546                           tblptrh	equ	0xFF7
  6547                           tblptrl	equ	0xFF6
  6548                           tablat	equ	0xFF5
  6549                           prodh	equ	0xFF4
  6550                           prodl	equ	0xFF3
  6551                           intcon	equ	0xFF2
  6552                           intcon3	equ	0xFF0
  6553                           postinc0	equ	0xFEE
  6554                           fsr0h	equ	0xFEA
  6555                           fsr0l	equ	0xFE9
  6556                           wreg	equ	0xFE8
  6557                           postdec1	equ	0xFE5
  6558                           fsr1h	equ	0xFE2
  6559                           fsr1l	equ	0xFE1
  6560                           postinc2	equ	0xFDE
  6561                           postdec2	equ	0xFDD
  6562                           fsr2h	equ	0xFDA
  6563                           fsr2l	equ	0xFD9
  6564                           status	equ	0xFD8
  6565                           
  6566 ;; *************** function ___ftpack *****************
  6567 ;; Defined at:
  6568 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  6569 ;; Parameters:    Size  Location     Type
  6570 ;;  arg             3    0[COMRAM] unsigned um
  6571 ;;  exp             1    3[COMRAM] unsigned char 
  6572 ;;  sign            1    4[COMRAM] unsigned char 
  6573 ;; Auto vars:     Size  Location     Type
  6574 ;;		None
  6575 ;; Return value:  Size  Location     Type
  6576 ;;                  3    0[COMRAM] float 
  6577 ;; Registers used:
  6578 ;;		wreg, status,2, status,0
  6579 ;; Tracked objects:
  6580 ;;		On entry : 0/0
  6581 ;;		On exit  : 0/0
  6582 ;;		Unchanged: 0/0
  6583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6584 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6586 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6587 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6588 ;;Total ram usage:        8 bytes
  6589 ;; Hardware stack levels used:    1
  6590 ;; This function calls:
  6591 ;;		Nothing
  6592 ;; This function is called by:
  6593 ;;		___altoft
  6594 ;;		___ftadd
  6595 ;;		___ftdiv
  6596 ;;		___ftmul
  6597 ;;		___lltoft
  6598 ;; This function uses a non-reentrant model
  6599 ;;
  6600                           
  6601                           	psect	text28
  6602  00283E                     __ptext28:
  6603                           	opt stack 0
  6604  00283E                     ___ftpack:
  6605                           	opt stack 23
  6606                           
  6607                           ;incstack = 0
  6608  00283E  5004               	movf	___ftpack@exp,w,c
  6609  002840  B4D8               	btfsc	status,2,c
  6610  002842  D005               	goto	i2l2519
  6611  002844  5001               	movf	___ftpack@arg,w,c
  6612  002846  1002               	iorwf	___ftpack@arg+1,w,c
  6613  002848  1003               	iorwf	___ftpack@arg+2,w,c
  6614  00284A  A4D8               	btfss	status,2,c
  6615  00284C  D00C               	goto	i2l2525
  6616  00284E                     i2l2519:
  6617  00284E  0E00               	movlw	0
  6618  002850  6E01               	movwf	?___ftpack,c
  6619  002852  0E00               	movlw	0
  6620  002854  6E02               	movwf	?___ftpack+1,c
  6621  002856  0E00               	movlw	0
  6622  002858  6E03               	movwf	?___ftpack+2,c
  6623  00285A  0012               	return	
  6624  00285C                     i2l2523:
  6625  00285C  2A04               	incf	___ftpack@exp,f,c
  6626  00285E  90D8               	bcf	status,0,c
  6627  002860  3203               	rrcf	___ftpack@arg+2,f,c
  6628  002862  3202               	rrcf	___ftpack@arg+1,f,c
  6629  002864  3201               	rrcf	___ftpack@arg,f,c
  6630  002866                     i2l2525:
  6631  002866  0E00               	movlw	0
  6632  002868  1401               	andwf	___ftpack@arg,w,c
  6633  00286A  6E06               	movwf	??___ftpack& (0+255),c
  6634  00286C  0E00               	movlw	0
  6635  00286E  1402               	andwf	___ftpack@arg+1,w,c
  6636  002870  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6637  002872  0EFE               	movlw	254
  6638  002874  1403               	andwf	___ftpack@arg+2,w,c
  6639  002876  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6640  002878  5006               	movf	??___ftpack,w,c
  6641  00287A  1007               	iorwf	??___ftpack+1,w,c
  6642  00287C  1008               	iorwf	??___ftpack+2,w,c
  6643  00287E  B4D8               	btfsc	status,2,c
  6644  002880  D00C               	goto	i2l2531
  6645  002882  D7EC               	goto	i2l2523
  6646  002884                     i2l2527:
  6647  002884  2A04               	incf	___ftpack@exp,f,c
  6648  002886  0E01               	movlw	1
  6649  002888  2601               	addwf	___ftpack@arg,f,c
  6650  00288A  0E00               	movlw	0
  6651  00288C  2202               	addwfc	___ftpack@arg+1,f,c
  6652  00288E  0E00               	movlw	0
  6653  002890  2203               	addwfc	___ftpack@arg+2,f,c
  6654  002892  90D8               	bcf	status,0,c
  6655  002894  3203               	rrcf	___ftpack@arg+2,f,c
  6656  002896  3202               	rrcf	___ftpack@arg+1,f,c
  6657  002898  3201               	rrcf	___ftpack@arg,f,c
  6658  00289A                     i2l2531:
  6659  00289A  0E00               	movlw	0
  6660  00289C  1401               	andwf	___ftpack@arg,w,c
  6661  00289E  6E06               	movwf	??___ftpack& (0+255),c
  6662  0028A0  0E00               	movlw	0
  6663  0028A2  1402               	andwf	___ftpack@arg+1,w,c
  6664  0028A4  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6665  0028A6  0EFF               	movlw	255
  6666  0028A8  1403               	andwf	___ftpack@arg+2,w,c
  6667  0028AA  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6668  0028AC  5006               	movf	??___ftpack,w,c
  6669  0028AE  1007               	iorwf	??___ftpack+1,w,c
  6670  0028B0  1008               	iorwf	??___ftpack+2,w,c
  6671  0028B2  B4D8               	btfsc	status,2,c
  6672  0028B4  D006               	goto	i2l2535
  6673  0028B6  D7E6               	goto	i2l2527
  6674  0028B8                     i2l2533:
  6675  0028B8  0604               	decf	___ftpack@exp,f,c
  6676  0028BA  90D8               	bcf	status,0,c
  6677  0028BC  3601               	rlcf	___ftpack@arg,f,c
  6678  0028BE  3602               	rlcf	___ftpack@arg+1,f,c
  6679  0028C0  3603               	rlcf	___ftpack@arg+2,f,c
  6680  0028C2                     i2l2535:
  6681  0028C2  BE02               	btfsc	___ftpack@arg+1,7,c
  6682  0028C4  D003               	goto	i2l717
  6683  0028C6  0E02               	movlw	2
  6684  0028C8  6004               	cpfslt	___ftpack@exp,c
  6685  0028CA  D7F6               	goto	i2l2533
  6686  0028CC                     i2l717:
  6687  0028CC  A004               	btfss	___ftpack@exp,0,c
  6688  0028CE  9E02               	bcf	___ftpack@arg+1,7,c
  6689  0028D0  90D8               	bcf	status,0,c
  6690  0028D2  3204               	rrcf	___ftpack@exp,f,c
  6691  0028D4  5004               	movf	___ftpack@exp,w,c
  6692  0028D6  1203               	iorwf	___ftpack@arg+2,f,c
  6693  0028D8  5005               	movf	___ftpack@sign,w,c
  6694  0028DA  A4D8               	btfss	status,2,c
  6695  0028DC  8E03               	bsf	___ftpack@arg+2,7,c
  6696  0028DE  C001  F001         	movff	___ftpack@arg,?___ftpack
  6697  0028E2  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6698  0028E6  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6699  0028EA  0012               	return	
  6700  0028EC                     __end_of___ftpack:
  6701                           	opt stack 0
  6702                           pclatu	equ	0xFFB
  6703                           pclath	equ	0xFFA
  6704                           tblptru	equ	0xFF8
  6705                           tblptrh	equ	0xFF7
  6706                           tblptrl	equ	0xFF6
  6707                           tablat	equ	0xFF5
  6708                           prodh	equ	0xFF4
  6709                           prodl	equ	0xFF3
  6710                           intcon	equ	0xFF2
  6711                           intcon3	equ	0xFF0
  6712                           postinc0	equ	0xFEE
  6713                           fsr0h	equ	0xFEA
  6714                           fsr0l	equ	0xFE9
  6715                           wreg	equ	0xFE8
  6716                           postdec1	equ	0xFE5
  6717                           fsr1h	equ	0xFE2
  6718                           fsr1l	equ	0xFE1
  6719                           postinc2	equ	0xFDE
  6720                           postdec2	equ	0xFDD
  6721                           fsr2h	equ	0xFDA
  6722                           fsr2l	equ	0xFD9
  6723                           status	equ	0xFD8
  6724                           
  6725 ;; *************** function ___ftneg *****************
  6726 ;; Defined at:
  6727 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  6728 ;; Parameters:    Size  Location     Type
  6729 ;;  f1              3   48[COMRAM] float 
  6730 ;; Auto vars:     Size  Location     Type
  6731 ;;		None
  6732 ;; Return value:  Size  Location     Type
  6733 ;;                  3   48[COMRAM] float 
  6734 ;; Registers used:
  6735 ;;		wreg, status,2, status,0
  6736 ;; Tracked objects:
  6737 ;;		On entry : 0/0
  6738 ;;		On exit  : 0/0
  6739 ;;		Unchanged: 0/0
  6740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6741 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6744 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6745 ;;Total ram usage:        3 bytes
  6746 ;; Hardware stack levels used:    1
  6747 ;; This function calls:
  6748 ;;		Nothing
  6749 ;; This function is called by:
  6750 ;;		_startT0
  6751 ;;		_updateAngle
  6752 ;;		_printf
  6753 ;; This function uses a non-reentrant model
  6754 ;;
  6755                           
  6756                           	psect	text29
  6757  002F70                     __ptext29:
  6758                           	opt stack 0
  6759  002F70                     ___ftneg:
  6760                           	opt stack 24
  6761                           
  6762                           ;incstack = 0
  6763  002F70  5031               	movf	___ftneg@f1,w,c
  6764  002F72  1032               	iorwf	___ftneg@f1+1,w,c
  6765  002F74  1033               	iorwf	___ftneg@f1+2,w,c
  6766  002F76  B4D8               	btfsc	status,2,c
  6767  002F78  D006               	goto	i2l814
  6768  002F7A  0E00               	movlw	0
  6769  002F7C  1A31               	xorwf	___ftneg@f1,f,c
  6770  002F7E  0E00               	movlw	0
  6771  002F80  1A32               	xorwf	___ftneg@f1+1,f,c
  6772  002F82  0E80               	movlw	128
  6773  002F84  1A33               	xorwf	___ftneg@f1+2,f,c
  6774  002F86                     i2l814:
  6775  002F86  C031  F031         	movff	___ftneg@f1,?___ftneg
  6776  002F8A  C032  F032         	movff	___ftneg@f1+1,?___ftneg+1
  6777  002F8E  C033  F033         	movff	___ftneg@f1+2,?___ftneg+2
  6778  002F92  0012               	return		;funcret
  6779  002F94                     __end_of___ftneg:
  6780                           	opt stack 0
  6781                           pclatu	equ	0xFFB
  6782                           pclath	equ	0xFFA
  6783                           tblptru	equ	0xFF8
  6784                           tblptrh	equ	0xFF7
  6785                           tblptrl	equ	0xFF6
  6786                           tablat	equ	0xFF5
  6787                           prodh	equ	0xFF4
  6788                           prodl	equ	0xFF3
  6789                           intcon	equ	0xFF2
  6790                           intcon3	equ	0xFF0
  6791                           postinc0	equ	0xFEE
  6792                           fsr0h	equ	0xFEA
  6793                           fsr0l	equ	0xFE9
  6794                           wreg	equ	0xFE8
  6795                           postdec1	equ	0xFE5
  6796                           fsr1h	equ	0xFE2
  6797                           fsr1l	equ	0xFE1
  6798                           postinc2	equ	0xFDE
  6799                           postdec2	equ	0xFDD
  6800                           fsr2h	equ	0xFDA
  6801                           fsr2l	equ	0xFD9
  6802                           status	equ	0xFD8
  6803                           
  6804 ;; *************** function ___ftge *****************
  6805 ;; Defined at:
  6806 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  6807 ;; Parameters:    Size  Location     Type
  6808 ;;  ff1             3    0[COMRAM] float 
  6809 ;;  ff2             3    3[COMRAM] float 
  6810 ;; Auto vars:     Size  Location     Type
  6811 ;;		None
  6812 ;; Return value:  Size  Location     Type
  6813 ;;		None               void
  6814 ;; Registers used:
  6815 ;;		wreg, status,2, status,0
  6816 ;; Tracked objects:
  6817 ;;		On entry : 0/0
  6818 ;;		On exit  : 0/0
  6819 ;;		Unchanged: 0/0
  6820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6821 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6823 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6824 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6825 ;;Total ram usage:        9 bytes
  6826 ;; Hardware stack levels used:    1
  6827 ;; This function calls:
  6828 ;;		Nothing
  6829 ;; This function is called by:
  6830 ;;		_printf
  6831 ;; This function uses a non-reentrant model
  6832 ;;
  6833                           
  6834                           	psect	text30
  6835  002A28                     __ptext30:
  6836                           	opt stack 0
  6837  002A28                     ___ftge:
  6838                           	opt stack 25
  6839                           
  6840                           ;incstack = 0
  6841  002A28  AE03               	btfss	___ftge@ff1+2,7,c
  6842  002A2A  D016               	goto	i2l3111
  6843  002A2C  C001  F007         	movff	___ftge@ff1,??___ftge
  6844  002A30  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  6845  002A34  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  6846  002A38  1E07               	comf	??___ftge,f,c
  6847  002A3A  1E08               	comf	??___ftge+1,f,c
  6848  002A3C  1E09               	comf	??___ftge+2,f,c
  6849  002A3E  2A07               	incf	??___ftge,f,c
  6850  002A40  0E00               	movlw	0
  6851  002A42  2208               	addwfc	??___ftge+1,f,c
  6852  002A44  2209               	addwfc	??___ftge+2,f,c
  6853  002A46  0E00               	movlw	0
  6854  002A48  2407               	addwf	??___ftge,w,c
  6855  002A4A  6E01               	movwf	___ftge@ff1,c
  6856  002A4C  0E00               	movlw	0
  6857  002A4E  2008               	addwfc	??___ftge+1,w,c
  6858  002A50  6E02               	movwf	___ftge@ff1+1,c
  6859  002A52  0E80               	movlw	128
  6860  002A54  2009               	addwfc	??___ftge+2,w,c
  6861  002A56  6E03               	movwf	___ftge@ff1+2,c
  6862  002A58                     i2l3111:
  6863  002A58  AE06               	btfss	___ftge@ff2+2,7,c
  6864  002A5A  D016               	goto	i2l3115
  6865  002A5C  C004  F007         	movff	___ftge@ff2,??___ftge
  6866  002A60  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  6867  002A64  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  6868  002A68  1E07               	comf	??___ftge,f,c
  6869  002A6A  1E08               	comf	??___ftge+1,f,c
  6870  002A6C  1E09               	comf	??___ftge+2,f,c
  6871  002A6E  2A07               	incf	??___ftge,f,c
  6872  002A70  0E00               	movlw	0
  6873  002A72  2208               	addwfc	??___ftge+1,f,c
  6874  002A74  2209               	addwfc	??___ftge+2,f,c
  6875  002A76  0E00               	movlw	0
  6876  002A78  2407               	addwf	??___ftge,w,c
  6877  002A7A  6E04               	movwf	___ftge@ff2,c
  6878  002A7C  0E00               	movlw	0
  6879  002A7E  2008               	addwfc	??___ftge+1,w,c
  6880  002A80  6E05               	movwf	___ftge@ff2+1,c
  6881  002A82  0E80               	movlw	128
  6882  002A84  2009               	addwfc	??___ftge+2,w,c
  6883  002A86  6E06               	movwf	___ftge@ff2+2,c
  6884  002A88                     i2l3115:
  6885  002A88  0E00               	movlw	0
  6886  002A8A  1A01               	xorwf	___ftge@ff1,f,c
  6887  002A8C  0E00               	movlw	0
  6888  002A8E  1A02               	xorwf	___ftge@ff1+1,f,c
  6889  002A90  0E80               	movlw	128
  6890  002A92  1A03               	xorwf	___ftge@ff1+2,f,c
  6891  002A94  0E00               	movlw	0
  6892  002A96  1A04               	xorwf	___ftge@ff2,f,c
  6893  002A98  0E00               	movlw	0
  6894  002A9A  1A05               	xorwf	___ftge@ff2+1,f,c
  6895  002A9C  0E80               	movlw	128
  6896  002A9E  1A06               	xorwf	___ftge@ff2+2,f,c
  6897  002AA0  5004               	movf	___ftge@ff2,w,c
  6898  002AA2  5C01               	subwf	___ftge@ff1,w,c
  6899  002AA4  5005               	movf	___ftge@ff2+1,w,c
  6900  002AA6  5802               	subwfb	___ftge@ff1+1,w,c
  6901  002AA8  5006               	movf	___ftge@ff2+2,w,c
  6902  002AAA  5803               	subwfb	___ftge@ff1+2,w,c
  6903  002AAC  B0D8               	btfsc	status,0,c
  6904  002AAE  D002               	goto	i2l3121
  6905  002AB0  90D8               	bcf	status,0,c
  6906  002AB2  0012               	return	
  6907  002AB4                     i2l3121:
  6908  002AB4  80D8               	bsf	status,0,c
  6909  002AB6  0012               	return	
  6910  002AB8                     __end_of___ftge:
  6911                           	opt stack 0
  6912                           pclatu	equ	0xFFB
  6913                           pclath	equ	0xFFA
  6914                           tblptru	equ	0xFF8
  6915                           tblptrh	equ	0xFF7
  6916                           tblptrl	equ	0xFF6
  6917                           tablat	equ	0xFF5
  6918                           prodh	equ	0xFF4
  6919                           prodl	equ	0xFF3
  6920                           intcon	equ	0xFF2
  6921                           intcon3	equ	0xFF0
  6922                           postinc0	equ	0xFEE
  6923                           fsr0h	equ	0xFEA
  6924                           fsr0l	equ	0xFE9
  6925                           wreg	equ	0xFE8
  6926                           postdec1	equ	0xFE5
  6927                           fsr1h	equ	0xFE2
  6928                           fsr1l	equ	0xFE1
  6929                           postinc2	equ	0xFDE
  6930                           postdec2	equ	0xFDD
  6931                           fsr2h	equ	0xFDA
  6932                           fsr2l	equ	0xFD9
  6933                           status	equ	0xFD8
  6934                           
  6935 ;; *************** function _lcdClear *****************
  6936 ;; Defined at:
  6937 ;;		line 74 in file "lcd.c"
  6938 ;; Parameters:    Size  Location     Type
  6939 ;;		None
  6940 ;; Auto vars:     Size  Location     Type
  6941 ;;		None
  6942 ;; Return value:  Size  Location     Type
  6943 ;;                  1    wreg      void 
  6944 ;; Registers used:
  6945 ;;		wreg, status,2, status,0, cstack
  6946 ;; Tracked objects:
  6947 ;;		On entry : 0/0
  6948 ;;		On exit  : 0/0
  6949 ;;		Unchanged: 0/0
  6950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6955 ;;Total ram usage:        0 bytes
  6956 ;; Hardware stack levels used:    1
  6957 ;; Hardware stack levels required when called:    2
  6958 ;; This function calls:
  6959 ;;		i2_lcdInst
  6960 ;; This function is called by:
  6961 ;;		_service
  6962 ;; This function uses a non-reentrant model
  6963 ;;
  6964                           
  6965                           	psect	text31
  6966  002FE2                     __ptext31:
  6967                           	opt stack 0
  6968  002FE2                     _lcdClear:
  6969                           	opt stack 24
  6970                           
  6971                           ;lcd.c: 75: lcdInst(0b00000001);
  6972                           
  6973                           ;incstack = 0
  6974  002FE2  0E01               	movlw	1
  6975  002FE4  ECCA  F017         	call	i2_lcdInst
  6976  002FE8  0012               	return		;funcret
  6977  002FEA                     __end_of_lcdClear:
  6978                           	opt stack 0
  6979                           pclatu	equ	0xFFB
  6980                           pclath	equ	0xFFA
  6981                           tblptru	equ	0xFF8
  6982                           tblptrh	equ	0xFF7
  6983                           tblptrl	equ	0xFF6
  6984                           tablat	equ	0xFF5
  6985                           prodh	equ	0xFF4
  6986                           prodl	equ	0xFF3
  6987                           intcon	equ	0xFF2
  6988                           intcon3	equ	0xFF0
  6989                           postinc0	equ	0xFEE
  6990                           fsr0h	equ	0xFEA
  6991                           fsr0l	equ	0xFE9
  6992                           wreg	equ	0xFE8
  6993                           postdec1	equ	0xFE5
  6994                           fsr1h	equ	0xFE2
  6995                           fsr1l	equ	0xFE1
  6996                           postinc2	equ	0xFDE
  6997                           postdec2	equ	0xFDD
  6998                           fsr2h	equ	0xFDA
  6999                           fsr2l	equ	0xFD9
  7000                           status	equ	0xFD8
  7001                           
  7002 ;; *************** function i2_lcdInst *****************
  7003 ;; Defined at:
  7004 ;;		line 27 in file "lcd.c"
  7005 ;; Parameters:    Size  Location     Type
  7006 ;;  data            1    wreg     unsigned char 
  7007 ;; Auto vars:     Size  Location     Type
  7008 ;;  data            1    4[COMRAM] unsigned char 
  7009 ;; Return value:  Size  Location     Type
  7010 ;;                  1    wreg      void 
  7011 ;; Registers used:
  7012 ;;		wreg, status,2, status,0, cstack
  7013 ;; Tracked objects:
  7014 ;;		On entry : 0/0
  7015 ;;		On exit  : 0/0
  7016 ;;		Unchanged: 0/0
  7017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7019 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7020 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7021 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7022 ;;Total ram usage:        2 bytes
  7023 ;; Hardware stack levels used:    1
  7024 ;; Hardware stack levels required when called:    1
  7025 ;; This function calls:
  7026 ;;		i2_lcdNibble
  7027 ;; This function is called by:
  7028 ;;		_lcdClear
  7029 ;;		_lcdNewline
  7030 ;; This function uses a non-reentrant model
  7031 ;;
  7032                           
  7033                           	psect	text32
  7034  002F94                     __ptext32:
  7035                           	opt stack 0
  7036  002F94                     i2_lcdInst:
  7037                           	opt stack 22
  7038                           
  7039                           ;incstack = 0
  7040                           ;i2lcdInst@data stored from wreg
  7041  002F94  6E05               	movwf	i2lcdInst@data,c
  7042                           
  7043                           ;lcd.c: 28: LATDbits.LATD2 = 0;
  7044  002F96  948C               	bcf	3980,2,c	;volatile
  7045                           
  7046                           ;lcd.c: 29: _delay((unsigned long)((140)*(32000000/4000000.0)));
  7047  002F98  0EE0               	movlw	224
  7048  002F9A                     i2u344_47:
  7049  002F9A  D000               	nop2	
  7050  002F9C  2EE8               	decfsz	wreg,f,c
  7051  002F9E  D7FD               	bra	i2u344_47
  7052                           
  7053                           ;lcd.c: 30: lcdNibble(data);
  7054  002FA0  5005               	movf	i2lcdInst@data,w,c
  7055  002FA2  EC1B  F016         	call	i2_lcdNibble
  7056                           
  7057                           ;lcd.c: 31: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  7058  002FA6  0E0B               	movlw	11
  7059  002FA8  6E04               	movwf	??i2_lcdInst& (0+255),c
  7060  002FAA  0E62               	movlw	98
  7061  002FAC                     i2u345_47:
  7062  002FAC  2EE8               	decfsz	wreg,f,c
  7063  002FAE  D7FE               	bra	i2u345_47
  7064  002FB0  2E04               	decfsz	??i2_lcdInst& (0+255),f,c
  7065  002FB2  D7FC               	bra	i2u345_47
  7066  002FB4  D000               	nop2	
  7067  002FB6  0012               	return		;funcret
  7068  002FB8                     __end_ofi2_lcdInst:
  7069                           	opt stack 0
  7070                           pclatu	equ	0xFFB
  7071                           pclath	equ	0xFFA
  7072                           tblptru	equ	0xFF8
  7073                           tblptrh	equ	0xFF7
  7074                           tblptrl	equ	0xFF6
  7075                           tablat	equ	0xFF5
  7076                           prodh	equ	0xFF4
  7077                           prodl	equ	0xFF3
  7078                           intcon	equ	0xFF2
  7079                           intcon3	equ	0xFF0
  7080                           postinc0	equ	0xFEE
  7081                           fsr0h	equ	0xFEA
  7082                           fsr0l	equ	0xFE9
  7083                           wreg	equ	0xFE8
  7084                           postdec1	equ	0xFE5
  7085                           fsr1h	equ	0xFE2
  7086                           fsr1l	equ	0xFE1
  7087                           postinc2	equ	0xFDE
  7088                           postdec2	equ	0xFDD
  7089                           fsr2h	equ	0xFDA
  7090                           fsr2l	equ	0xFD9
  7091                           status	equ	0xFD8
  7092                           
  7093 ;; *************** function i2_lcdNibble *****************
  7094 ;; Defined at:
  7095 ;;		line 46 in file "lcd.c"
  7096 ;; Parameters:    Size  Location     Type
  7097 ;;  data            1    wreg     unsigned char 
  7098 ;; Auto vars:     Size  Location     Type
  7099 ;;  data            1    2[COMRAM] unsigned char 
  7100 ;;  lcdNibble       1    1[COMRAM] unsigned char 
  7101 ;; Return value:  Size  Location     Type
  7102 ;;                  1    wreg      void 
  7103 ;; Registers used:
  7104 ;;		wreg, status,2, status,0
  7105 ;; Tracked objects:
  7106 ;;		On entry : 0/0
  7107 ;;		On exit  : 0/0
  7108 ;;		Unchanged: 0/0
  7109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7111 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7112 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7113 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7114 ;;Total ram usage:        3 bytes
  7115 ;; Hardware stack levels used:    1
  7116 ;; This function calls:
  7117 ;;		Nothing
  7118 ;; This function is called by:
  7119 ;;		_putch
  7120 ;;		i2_lcdInst
  7121 ;; This function uses a non-reentrant model
  7122 ;;
  7123                           
  7124                           	psect	text33
  7125  002C36                     __ptext33:
  7126                           	opt stack 0
  7127  002C36                     i2_lcdNibble:
  7128                           	opt stack 24
  7129                           
  7130                           ;incstack = 0
  7131                           ;i2lcdNibble@data stored from wreg
  7132  002C36  6E03               	movwf	i2lcdNibble@data,c
  7133                           
  7134                           ;lcd.c: 48: char temp = data & 0xF0;
  7135  002C38  5003               	movf	i2lcdNibble@data,w,c
  7136  002C3A  0BF0               	andlw	240
  7137  002C3C  6E02               	movwf	i2lcdNibble@temp,c
  7138                           
  7139                           ;lcd.c: 49: LATD = LATD & 0x0F;
  7140  002C3E  508C               	movf	3980,w,c	;volatile
  7141  002C40  0B0F               	andlw	15
  7142  002C42  6E8C               	movwf	3980,c	;volatile
  7143                           
  7144                           ;lcd.c: 50: LATD = temp | LATD;
  7145  002C44  5002               	movf	i2lcdNibble@temp,w,c
  7146  002C46  108C               	iorwf	3980,w,c	;volatile
  7147  002C48  6E8C               	movwf	3980,c	;volatile
  7148                           
  7149                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  7150  002C4A  968C               	bcf	3980,3,c	;volatile
  7151                           
  7152                           ;lcd.c: 53: _delay((unsigned long)((600)*(32000000/4000000.0)));
  7153  002C4C  0E07               	movlw	7
  7154  002C4E  6E01               	movwf	??i2_lcdNibble& (0+255),c
  7155  002C50  0E3A               	movlw	58
  7156  002C52                     i2u346_47:
  7157  002C52  2EE8               	decfsz	wreg,f,c
  7158  002C54  D7FE               	bra	i2u346_47
  7159  002C56  2E01               	decfsz	??i2_lcdNibble& (0+255),f,c
  7160  002C58  D7FC               	bra	i2u346_47
  7161  002C5A  D000               	nop2	
  7162                           
  7163                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  7164  002C5C  868C               	bsf	3980,3,c	;volatile
  7165                           
  7166                           ;lcd.c: 55: _delay((unsigned long)((600)*(32000000/4000000.0)));
  7167  002C5E  0E07               	movlw	7
  7168  002C60  6E01               	movwf	??i2_lcdNibble& (0+255),c
  7169  002C62  0E3A               	movlw	58
  7170  002C64                     i2u347_47:
  7171  002C64  2EE8               	decfsz	wreg,f,c
  7172  002C66  D7FE               	bra	i2u347_47
  7173  002C68  2E01               	decfsz	??i2_lcdNibble& (0+255),f,c
  7174  002C6A  D7FC               	bra	i2u347_47
  7175  002C6C  D000               	nop2	
  7176                           
  7177                           ;lcd.c: 58: data = data << 4;
  7178  002C6E  3803               	swapf	i2lcdNibble@data,w,c
  7179  002C70  0BF0               	andlw	240
  7180  002C72  6E03               	movwf	i2lcdNibble@data,c
  7181                           
  7182                           ;lcd.c: 60: temp = data & 0xF0;
  7183  002C74  5003               	movf	i2lcdNibble@data,w,c
  7184  002C76  0BF0               	andlw	240
  7185  002C78  6E02               	movwf	i2lcdNibble@temp,c
  7186                           
  7187                           ;lcd.c: 61: LATD = LATD & 0x0F;
  7188  002C7A  508C               	movf	3980,w,c	;volatile
  7189  002C7C  0B0F               	andlw	15
  7190  002C7E  6E8C               	movwf	3980,c	;volatile
  7191                           
  7192                           ;lcd.c: 62: LATD = temp | LATD;
  7193  002C80  5002               	movf	i2lcdNibble@temp,w,c
  7194  002C82  108C               	iorwf	3980,w,c	;volatile
  7195  002C84  6E8C               	movwf	3980,c	;volatile
  7196                           
  7197                           ;lcd.c: 64: LATDbits.LATD3 = 0;
  7198  002C86  968C               	bcf	3980,3,c	;volatile
  7199                           
  7200                           ;lcd.c: 65: _delay((unsigned long)((600)*(32000000/4000000.0)));
  7201  002C88  0E07               	movlw	7
  7202  002C8A  6E01               	movwf	??i2_lcdNibble& (0+255),c
  7203  002C8C  0E3A               	movlw	58
  7204  002C8E                     i2u348_47:
  7205  002C8E  2EE8               	decfsz	wreg,f,c
  7206  002C90  D7FE               	bra	i2u348_47
  7207  002C92  2E01               	decfsz	??i2_lcdNibble& (0+255),f,c
  7208  002C94  D7FC               	bra	i2u348_47
  7209  002C96  D000               	nop2	
  7210                           
  7211                           ;lcd.c: 66: LATDbits.LATD3 = 1;
  7212  002C98  868C               	bsf	3980,3,c	;volatile
  7213                           
  7214                           ;lcd.c: 67: _delay((unsigned long)((600)*(32000000/4000000.0)));
  7215  002C9A  0E07               	movlw	7
  7216  002C9C  6E01               	movwf	??i2_lcdNibble& (0+255),c
  7217  002C9E  0E3A               	movlw	58
  7218  002CA0                     i2u349_47:
  7219  002CA0  2EE8               	decfsz	wreg,f,c
  7220  002CA2  D7FE               	bra	i2u349_47
  7221  002CA4  2E01               	decfsz	??i2_lcdNibble& (0+255),f,c
  7222  002CA6  D7FC               	bra	i2u349_47
  7223  002CA8  D000               	nop2	
  7224  002CAA  0012               	return		;funcret
  7225  002CAC                     __end_ofi2_lcdNibble:
  7226                           	opt stack 0
  7227                           pclatu	equ	0xFFB
  7228                           pclath	equ	0xFFA
  7229                           tblptru	equ	0xFF8
  7230                           tblptrh	equ	0xFF7
  7231                           tblptrl	equ	0xFF6
  7232                           tablat	equ	0xFF5
  7233                           prodh	equ	0xFF4
  7234                           prodl	equ	0xFF3
  7235                           intcon	equ	0xFF2
  7236                           intcon3	equ	0xFF0
  7237                           postinc0	equ	0xFEE
  7238                           fsr0h	equ	0xFEA
  7239                           fsr0l	equ	0xFE9
  7240                           wreg	equ	0xFE8
  7241                           postdec1	equ	0xFE5
  7242                           fsr1h	equ	0xFE2
  7243                           fsr1l	equ	0xFE1
  7244                           postinc2	equ	0xFDE
  7245                           postdec2	equ	0xFDD
  7246                           fsr2h	equ	0xFDA
  7247                           fsr2l	equ	0xFD9
  7248                           status	equ	0xFD8
  7249                           pclatu	equ	0xFFB
  7250                           pclath	equ	0xFFA
  7251                           tblptru	equ	0xFF8
  7252                           tblptrh	equ	0xFF7
  7253                           tblptrl	equ	0xFF6
  7254                           tablat	equ	0xFF5
  7255                           prodh	equ	0xFF4
  7256                           prodl	equ	0xFF3
  7257                           intcon	equ	0xFF2
  7258                           intcon3	equ	0xFF0
  7259                           postinc0	equ	0xFEE
  7260                           fsr0h	equ	0xFEA
  7261                           fsr0l	equ	0xFE9
  7262                           wreg	equ	0xFE8
  7263                           postdec1	equ	0xFE5
  7264                           fsr1h	equ	0xFE2
  7265                           fsr1l	equ	0xFE1
  7266                           postinc2	equ	0xFDE
  7267                           postdec2	equ	0xFDD
  7268                           fsr2h	equ	0xFDA
  7269                           fsr2l	equ	0xFD9
  7270                           status	equ	0xFD8
  7271                           
  7272                           	psect	rparam
  7273  0000                     pclatu	equ	0xFFB
  7274                           pclath	equ	0xFFA
  7275                           tblptru	equ	0xFF8
  7276                           tblptrh	equ	0xFF7
  7277                           tblptrl	equ	0xFF6
  7278                           tablat	equ	0xFF5
  7279                           prodh	equ	0xFF4
  7280                           prodl	equ	0xFF3
  7281                           intcon	equ	0xFF2
  7282                           intcon3	equ	0xFF0
  7283                           postinc0	equ	0xFEE
  7284                           fsr0h	equ	0xFEA
  7285                           fsr0l	equ	0xFE9
  7286                           wreg	equ	0xFE8
  7287                           postdec1	equ	0xFE5
  7288                           fsr1h	equ	0xFE2
  7289                           fsr1l	equ	0xFE1
  7290                           postinc2	equ	0xFDE
  7291                           postdec2	equ	0xFDD
  7292                           fsr2h	equ	0xFDA
  7293                           fsr2l	equ	0xFD9
  7294                           status	equ	0xFD8
  7295                           
  7296                           	psect	temp
  7297  00007E                     btemp:
  7298                           	opt stack 0
  7299  00007E                     	ds	1
  7300  0000                     int$flags	set	btemp
  7301                           pclatu	equ	0xFFB
  7302                           pclath	equ	0xFFA
  7303                           tblptru	equ	0xFF8
  7304                           tblptrh	equ	0xFF7
  7305                           tblptrl	equ	0xFF6
  7306                           tablat	equ	0xFF5
  7307                           prodh	equ	0xFF4
  7308                           prodl	equ	0xFF3
  7309                           intcon	equ	0xFF2
  7310                           intcon3	equ	0xFF0
  7311                           postinc0	equ	0xFEE
  7312                           fsr0h	equ	0xFEA
  7313                           fsr0l	equ	0xFE9
  7314                           wreg	equ	0xFE8
  7315                           postdec1	equ	0xFE5
  7316                           fsr1h	equ	0xFE2
  7317                           fsr1l	equ	0xFE1
  7318                           postinc2	equ	0xFDE
  7319                           postdec2	equ	0xFDD
  7320                           fsr2h	equ	0xFDA
  7321                           fsr2l	equ	0xFD9
  7322                           status	equ	0xFD8


Data Sizes:
    Strings     43
    Constant    181
    Data        9
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    122     125
    BANK0           128     23      33
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_3(CODE[9]), STR_2(CODE[8]), STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__getTime	PTR int  size(2) Largest target is 7
		 -> getTime@time(COMRAM[7]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _service in COMRAM

    _service->_printf
    _updateAngle->_startT0
    _startT0->___fttol
    ___ftdiv->___altoft
    ___altoft->___ftpack
    _printf->___fttol
    _scale->___ftmul
    _lcdNewline->i2_lcdInst
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___ftdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->___ftadd
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftneg->___ftmul
    _lcdClear->i2_lcdInst
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _main->_digitalWrite
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1079
                       _digitalWrite
                            _initLCD
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             19 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              2     2      0     135
                                             17 BANK0      2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            3     3      0     113
                                             14 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _digitalWrite                                         9     3      6     944
                                             14 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _service                                             15    15      0   71174
                                            121 COMRAM     1     1      0
                                              0 BANK0     14    14      0
                            ___ftadd
                            ___ftsub
                           _lcdClear
                             _printf
                        _updateAngle
 ---------------------------------------------------------------------------------
 (5) _updateAngle                                          6     3      3   19123
                                             98 COMRAM     6     3      3
                            ___ftadd
                            ___ftneg
                            _startT0
                     i2_digitalWrite
 ---------------------------------------------------------------------------------
 (6) i2_digitalWrite                                       9     3      6     488
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (6) _startT0                                             13    10      3   14576
                                             85 COMRAM    13    10      3
                           ___altoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             15     9      6    3003
                                             18 COMRAM    15     9      6
                           ___altoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (7) ___altoft                                            10     6      4    2375
                                              8 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _printf                                              44    38      6   44064
                                             85 COMRAM    36    30      6
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (6) _scale                                               10     7      3   10181
                                             48 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0     292
                                              5 COMRAM     1     1      0
                         _lcdNewline
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) _lcdNewline                                           0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (6) _fround                                              13    10      3    9983
                                             48 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    2207
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             15     9      6    4457
                                             33 COMRAM    15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4    1448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4    1580
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (6) __div_to_l_                                          12     6      6     574
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (6) ___lltoft                                             9     5      4    2242
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___llmod                                              9     1      8     543
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             13     5      8     674
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             15    11      4     508
                                             70 COMRAM    15    11      4
                           ___altoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftsub                                              6     0      6    4116
                                             70 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             12     6      6    3691
                                             58 COMRAM    12     6      6
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2109
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     237
                                             48 COMRAM     3     0      3
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftge                                               9     3      6     520
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (5) _lcdClear                                             0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (8) i2_lcdInst                                            2     2      0     135
                                              3 COMRAM     2     2      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_lcdNibble                                          3     3      0     113
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _digitalWrite
   _initLCD
     _lcdInst
       _lcdNibble

 _service (ROOT)
   ___ftadd
     ___altoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftpack (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___ftsub
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lltoft (ARG)
       ___ftpack
   _lcdClear
     i2_lcdInst
       i2_lcdNibble
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___altoft (ARG)
         ___ftpack
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _putch
       _lcdNewline
         i2_lcdInst
           i2_lcdNibble
       i2_lcdNibble
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _updateAngle
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftneg
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _startT0
       ___altoft
         ___ftpack
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     i2_digitalWrite

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     17      21       5       25.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     7A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9E      34        0.0%
DATA                 0      0      9E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Feb 27 14:49:12 2017

              ___altoft@exp 0011                           _i 009F               ___altoft@sign 0012  
                        l47 2D80                ___awdiv@sign 000C         ___wmul@multiplicand 0011  
               __CFG_BORV$3 000000                __CFG_CP0$OFF 000000                __CFG_CP1$OFF 000000  
              __CFG_CP2$OFF 000000                __CFG_CP3$OFF 000000                ___ftadd@exp1 0046  
              ___ftadd@exp2 0045                ___ftadd@sign 0044                __CFG_CPB$OFF 000000  
                       _PEN 007E2A                __CFG_CPD$OFF 000000                         _SEN 007E28  
              ___awmod@sign 0006                         wreg 000FE8                __CFG_LVP$OFF 000000  
              ___ftdiv@cntr 001C                ___ftdiv@sign 0021                __CFG_WDT$OFF 000000  
                      l3231 2700                        l3241 2730                        l3225 26E4  
                      l3243 2738                        l3235 2714                        l3237 271C  
                      l3229 26F8                        l3247 274C                        l3249 2754  
                      _EEIF 007D0C                        STR_1 10D0                        STR_2 10D9  
                      STR_3 10C7                        STR_4 10B6                        _LATA 000F89  
                      _LATB 000F8A                        _LATC 000F8B                        _LATD 000F8C  
                      _LATE 000F8D                        u3407 29D2                        u3417 2A08  
                      u3427 2A1C                printf@tmpval 0072                        u3357 2EA2  
                      u3367 2ED6                        u3377 2F28                        u2834 26C2  
                      u2835 26BA                        u3387 2F3E                        _PEIE 007F96  
                      u3397 29BE                        _RCEN 007E2B                        i2l62 229E  
                      i2l83 2FC8                        _RSEN 007E29                        _flag 009B  
                      _main 2D1C                ___ftpack@arg 0001                        _keys 1097  
              ___ftpack@exp 0004                        fsr0h 000FEA                        fsr1h 000FE2  
                      fsr2h 000FDA                        fsr0l 000FE9                        fsr1l 000FE1  
                      fsr2l 000FD9                        btemp 007E                        prodh 000FF4  
                      prodl 000FF3                        start 000E               __CFG_IESO$OFF 000000  
             __CFG_MCLRE$ON 000000                ___ftmul@cntr 002F                ___param_bank 000000  
              ___ftmul@sign 0030                 i2_lcdNibble 2C36                ___fttol@exp1 0055  
              ___fttol@lval 0051                       ?_main 0001                       _ACKEN 007E2C  
                     _ACKDT 007E2D             __end_of___awdiv 2B3C                       _EEADR 000FA9  
           __end_of___ftadd 1F70             __end_of___awmod 2D1C             __end_of___ftdiv 26A4  
           __end_of___ftneg 2F94             __end_of___lldiv 2BBE             __end_of___ftmul 24CA  
                     _T0CON 000FD5             ___awdiv@divisor 0009             __end_of___llmod 2DE8  
           __end_of___ftsub 2F20             __end_of___fttol 25BE                       i2l458 1510  
                     i2l740 1E08                       i2l717 28CC                       i2l814 2F86  
                     i2l744 1E32                       i2l755 1EE2                       i2l764 1EFE  
                     i2l685 21B8                       i2l782 2002                       i2l783 202A  
                     i2l775 2672                       i2l859 2BAC             ___awdiv@counter 000B  
                     i2l869 2DD6                       i2l789 2090                       _TMR0H 000FD7  
                     _TMR0L 000FD6                       _PORTA 000F80                       _PORTB 000F81  
                     _PORTC 000F82                       _PORTD 000F83                       _TRISA 000F92  
                     _TRISB 000F93                       _TRISC 000F94                       _TRISD 000F95  
                     _TRISE 000F96               __CFG_PWRT$OFF 000000               __CFG_WRT0$OFF 000000  
             __CFG_WRT1$OFF 000000               __CFG_WRT2$OFF 000000               __CFG_WRT3$OFF 000000  
              ___lltoft@exp 0011             __end_of_lcdInst 2F4A              __CFG_EBTR0$OFF 000000  
            __CFG_FCMEN$OFF 000000              __CFG_EBTR1$OFF 000000              __CFG_EBTR2$OFF 000000  
            __CFG_EBTR3$OFF 000000               __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000  
             __CFG_WRTD$OFF 000000             __end_of_initLCD 2EE0              __CFG_EBTRB$OFF 000000  
                     _angle 007B             __end_of_dpowers 1029                       _count 009D  
                     _scale 178E               ___ftpack@sign 0005                       _putch 2FB8  
                     pclath 000FFA                       tablat 000FF5             __end_of_service 22DA  
           __end_of_startT0 23D6                       status 000FD8              __CFG_PBADEN$ON 000000  
      __end_of_digitalWrite 2784             __initialization 2E44          __size_ofi2_lcdInst 0024  
              __end_of_main 2D82                __end_of_keys 10A8                      ??_main 0097  
             ___fttol@sign1 0050               __activetblptr 000002        __size_of__tdiv_to_l_ 0132  
                    _ADCON0 000FC2                      _ADCON1 000FC1                      _ADCON2 000FC0  
          __end_of___altoft 2C36            ___llmod@dividend 0001                      ?_scale 0031  
                    _ADRESH 000FC4                      _EEADRH 000FAA                      _ADRESL 000FC3  
                    _EEDATA 000FA8                      _EECON1 000FA6                      _EECON2 000FA7  
          ___awdiv@dividend 0007             i2lcdNibble@data 0003                      ?_putch 0001  
          __end_of___ftpack 28EC             i2lcdNibble@temp 0002            __end_of___lltoft 2E44  
                    _INT1IF 007F80                      u210_41 25CE                      i2l3111 2A58  
                    i2l3103 2EF6                      i2l3121 2AB4                      i2l3025 2056  
                    i2l3201 296C                      i2l3115 2A88                      i2l3131 2B5E  
                    i2l3051 20DE                      i2l3035 207E                      i2l3133 2B6A  
                    i2l3045 20C0                      i2l3037 208A                      i2l3029 2066  
                    u212_41 25F6                      i2l3143 2B9E                      i2l3135 2B6E  
                    i2l3151 2D94                      i2l3153 2DA0                      i2l3073 2150  
                    i2l3065 2120                      i2l3321 1210                      i2l3305 1180  
                    i2l2531 289A                      i2l2523 285C                      i2l3155 2DA4  
                    i2l2533 28B8                      i2l2525 2866                      i2l3165 2DEE  
                    i2l3085 217E                      i2l3421 1666                      i2l3405 152C  
                    i2l3333 1298                      i2l3181 292A                      i2l2535 28C2  
                    i2l2527 2884                      i2l2519 284E                      i2l2631 1E70  
                    i2l2615 1E40                      i2l3159 2DC8                      i2l3167 2DFA  
                    i2l3095 21A6                      i2l3415 1650                      i2l3335 12A8  
                    i2l3423 1670                      i2l2703 264C                      i2l3183 2930  
                    i2l2641 1EA6                      i2l2609 1E16                      i2l3097 21B2  
                    i2l3089 218E                      i2l2801 2B24                      i2l3441 16D0  
                    i2l3417 165A                      i2l3409 157C                      i2l3345 131A  
                    i2l3337 12D6                      i2l3329 1274                      i2l3193 2952  
                    i2l3177 291C                      i2l2651 1EDA                      i2l2643 1EAE  
                    i2l2723 23FE                      i2l3363 13F6                      i2l3339 12E6  
                    i2l3291 1130                      i2l3283 10FC                      i2l3195 2958  
                    i2l3187 293E                      i2l2637 1E92                      i2l2805 2B32  
                    i2l2821 2CCC                      i2l3453 1764                      i2l3445 16EA  
                    i2l3429 1698                      i2l3381 144E                      i2l3365 13FA  
                    i2l3349 133E                      i2l3285 1106                      i2l3189 2944  
                    i2l3269 2806                      i2l2639 1E9C                      i2l2743 2458  
                    i2l3447 16F6                      i2l3359 1392                      i2l3279 10EC  
                    i2l3455 1774                      i2l3199 2966                      i2l2657 1F1A  
                    i2l2649 1ED0                      i2l2841 2D12                      i2l2833 2CFA  
                    i2l2825 2CDA                      i2l2817 2CC0                      i2l2753 2480  
                    i2l2729 2426                      i2l3393 14EC                      i2l3377 1432  
                    i2l3289 110A                      i2l2593 2BE0                      i2l2667 1F4A  
                    i2l2827 2CE2                      i2l2747 2468                      i2l3395 14FA  
                    i2l3387 14D6                      i2l2595 2BEC                      i2l2683 260E  
                    i2l2773 2ACC                      i2l2829 2CE6                      i2l2837 2D04  
                    i2l2757 2490                      u215_41 23E6                      i2l2941 1D84  
                    i2l2933 1CC4                      i2l3389 14E0                      i2l2677 25E6  
                    i2l3493 2284                      i2l2855 24F6                      i2l3399 1514  
                    i2l2873 255C                      i2l2785 2AF2                      i2l2961 1966  
                    i2l3489 2254                      i2l2891 25AC                      i2l2883 2584  
                    i2l2787 2AFA                      i2l2779 2ADC                      i2l2955 18C2  
                    i2l2885 2590                      i2l2877 256C                      i2l2797 2B1A  
                    i2l2789 2AFE                      i2l2973 1AB6                      i2l2965 198A  
                    i2l2887 2596                      i2l2995 1FC8                      i2l2979 1B5A  
                    i2l2989 1F9C                      u217_41 240E                      u234_41 24DA  
                    u250_41 1F80                      u252_41 1FAC                      u190_41 1DE8  
                    u189_41 1DD4                      _OSCCON 000FD3                      _TMR0IE 007F95  
                    _TMR0IF 007F92                      _SSPADD 000FC8                      _TRISC3 007CA3  
                    _TRISC4 007CA4                      _SSPBUF 000FC9            __end_of_lcdClear 2FEA  
            __CFG_XINST$OFF 000000            __end_of__powers_ 1077                      ___ftge 2A28  
                    ___wmul 2F4A                   ??___awdiv 000B                   ??___ftadd 0041  
            __CFG_STVREN$ON 000000                   ??___awmod 0005                   ??___ftdiv 0019  
                 ??___ftneg 0034                   ??___lldiv 0009                   ??___ftmul 0028  
                 ??___llmod 0009                   ??___ftsub 004D                   ??___fttol 004B  
                    _fround 1B7E            ___awdiv@quotient 000D             ___awmod@divisor 0003  
           ___awmod@counter 0005                   ??_lcdInst 0091                      _printf 10E2  
     ___ftmul@f3_as_product 002C                   ??_initLCD 0093                __pdataCOMRAM 007B  
              __mediumconst 0000                      tblptrh 000FF7                      tblptrl 000FF6  
                    tblptru 000FF8                   ??_service 0080                   ??_startT0 0059  
         __end_ofi2_lcdInst 2FB8                  __accesstop 0080     __end_of__initialization 2E8C  
                ___altoft@c 0009                  ___ftadd@f1 003B                  ___ftadd@f2 003E  
                ___ftge@ff1 0001                  ___ftge@ff2 0004               ___rparam_used 000001  
                ___ftdiv@f1 0013                  ___ftdiv@f2 0016                  ___ftdiv@f3 001D  
              ?_updateAngle 0063                  ___ftneg@f1 0031                  ___ftmul@f1 0022  
                ___ftmul@f2 0025                  ___ftsub@f1 0047                  ___ftsub@f2 004A  
                ___fttol@f1 0047        __end_of_happynewyear 10AF              __pcstackCOMRAM 0001  
              __pidataBANK0 2FEA                  ___lltoft@c 0009               __end_of_scale 1B7E  
             __end_of_putch 2FDA          __size_of_lcdNibble 0090                  __div_to_l_ 20A2  
           __div_to_l_@exp1 000C             __div_to_l_@cntr 000B                     ??_scale 0034  
           __div_to_l_@quot 0007          i2digitalWrite@port 0001                     ??_putch 0006  
                __pbssBANK0 009D       __size_of_digitalWrite 00E0               __div_to_l_@f1 0001  
             __div_to_l_@f2 0004                     ?___ftge 0001                ?i2_lcdNibble 0001  
                   ?___wmul 000F                   ?___altoft 0009                     ?_fround 0031  
                _lcdNewline 2FDA                   ?___ftpack 0001                     ?_printf 0056  
                 ?___lltoft 0009                   ?_lcdClear 0001                _digitalWrite 26A4  
                   _SSPCON1 000FC6                     _SSPCON2 000FC5                     _SSPSTAT 000FC7  
   __size_ofi2_digitalWrite 00AC           __end_of_lcdNibble 2A28           __end_of__npowers_ 1050  
                   __Hparam 0000                  _scale$1139 0034                     __Lparam 0000  
           __size_of___ftge 0090                     ___awdiv 2AB8                     ___ftadd 1DC4  
                   ___awmod 2CAC                     ___ftdiv 25BE                     ___ftneg 2F70  
                   ___lldiv 2B3C             __size_of___wmul 0026                     ___ftmul 23D6  
                   ___llmod 2D82                     ___ftsub 2EE0                     ___fttol 24CA  
              __psmallconst 1000                  ??___altoft 000D                     __pcinit 2E44  
                ??___ftpack 0006             __size_of_fround 0246                     __ramtop 1000  
__end_oftestFrequency@F2962 10B6                     _lcdInst 2F20                  ??___lltoft 000D  
                   __ptext0 2D1C                     __ptext1 2E9A                     __ptext2 2F20  
                   __ptext3 2998                     __ptext4 26A4                     __ptext6 2784  
                   __ptext7 28EC                     __ptext8 22DA                     __ptext9 25BE  
           __size_of_printf 06AC                     _initLCD 2E9A           __end_of_hexpowers 1097  
               ?__div_to_l_ 0001                     _dpowers 1001                     _extFreq 0097  
          ___awmod@dividend 0001                  ??_lcdClear 0006                     _service 0008  
                   _startT0 22DA              __pintcode_body 21CA        end_of_initialization 2E8C  
             __Lmediumconst 0000                     int_func 21CA             ___lldiv@divisor 0005  
           ___lldiv@counter 000D                     printf@c 0079                     printf@f 0056  
      __size_of_updateAngle 00BA                     postdec1 000FE5                     postdec2 000FDD  
                   postinc0 000FEE                     postinc2 000FDE              __tdiv_to_l_@f1 0001  
            __tdiv_to_l_@f2 0004                 ?_lcdNewline 0001               ??__tdiv_to_l_ 0007  
                 _PORTBbits 000F81                _happynewyear 10A8                   i2_lcdInst 2F94  
               ___ftdiv@exp 0020         __size_of__div_to_l_ 0128                 ___ftmul@exp 002B  
            __end_of___ftge 2AB8              __end_of___wmul 2F70        __size_ofi2_lcdNibble 0076  
             __pidataCOMRAM 2FF0               i2lcdInst@data 0005              __end_of_fround 1DC4  
            __end_of_printf 178E         start_initialization 2E44                 startT0@time 005F  
       __end_of__tdiv_to_l_ 20A2              i2_digitalWrite 28EC                  ?i2_lcdInst 0001  
       __size_of_lcdNewline 0008             ___llmod@divisor 0005            __CFG_OSC$INTIO67 000000  
           ___llmod@counter 0009                    ??___ftge 0007                    ??___wmul 0013  
               __pdataBANK0 0097            __CFG_LPT1OSC$OFF 000000                    ??_fround 0034  
                  ??_printf 005C           __size_of___altoft 0078                  fround@prec 003A  
         __size_of___ftpack 00AE           __size_of___lltoft 005C               __pcstackBANK0 0080  
    __end_ofi2_digitalWrite 2998           __size_of_lcdClear 0008           i2digitalWrite@pin 0003  
         i2digitalWrite@val 0005           __CFG_CCP2MX$PORTC 000000                   __pintcode 0008  
                 _lcdNibble 2998                    ?___awdiv 0007                    ?___ftadd 003B  
                  ?___awmod 0001                    ?___ftdiv 0013                    ?___ftneg 0031  
                  ?___lldiv 0001                    ?___ftmul 0022                    ?___llmod 0001  
                  ?___ftsub 0047                   __npowers_ 1029                    ?___fttol 0047  
                  ?_lcdInst 0001                 __tdiv_to_l_ 1F70                ??__div_to_l_ 0007  
                  ?_initLCD 0001                 __smallconst 1000                    ?_service 0001  
                 _hexpowers 1077             ?i2_digitalWrite 0001                    ?_startT0 0056  
            __size_of_scale 03F0          testFrequency@F2962 10AF              __size_of_putch 0022  
               ??i2_lcdInst 0004              ___wmul@product 0013                    _LATDbits 000F8C  
                  i2u311_40 150A                    i2u236_40 2514                    i2u236_45 250C  
                  i2u343_47 2FCC                    i2u344_47 2F9A                    i2u345_47 2FAC  
        __end_of__div_to_l_ 21CA                    i2u346_47 2C52                    i2u347_47 2C64  
                  i2u348_47 2C8E                    i2u277_44 2902                    i2u277_45 28FC  
                  i2u349_47 2CA0                    i2u295_40 11B8                    i2u295_45 11AE  
          __CFG_WDTPS$32768 000000                  ?_lcdNibble 0001                  service@key 007A  
              ??_lcdNewline 0006           ___wmul@multiplier 000F               lcdNibble@data 0090  
                printf@flag 0068               lcdNibble@temp 008F                  printf@fval 0076  
                printf@prec 006A         startT0@milliseconds 0056                   copy_data0 2E58  
        __end_of_lcdNewline 2FE2               ??_updateAngle 0066                    __Hrparam 0000  
                  __Lrparam 0000          __CFG_BOREN$SBORDIS 000000            _updateAngle$1136 0066  
          updateAngle@angle 0063            __size_of___awdiv 0084            __size_of___ftadd 01AC  
          __size_of___awmod 0070            __size_of___ftdiv 00E6            __size_of___ftneg 0024  
          __size_of___lldiv 0082                    ___altoft 2BBE            __size_of___ftmul 00F4  
          __size_of___llmod 0066            __size_of___ftsub 0040            __size_of___fttol 00F4  
                  ___ftpack 283E                 _fround$1137 0037                 _fround$1138 0034  
                  ___lltoft 2DE8            __size_of_lcdInst 002A            __size_of_initLCD 0046  
                  _lcdClear 2FE2                    __ptext10 2BBE                    __ptext11 10E2  
                  __ptext20 1F70                    __ptext12 178E                    __ptext21 20A2  
                  __ptext13 2FB8                    __ptext30 2A28                    __ptext22 2DE8  
                  __ptext14 2FDA                    __ptext31 2FE2                    __ptext23 2D82  
                  __ptext15 1B7E                    __ptext32 2F94                    __ptext24 2B3C  
                  __ptext16 2F4A                    __ptext33 2C36                    __ptext25 24CA  
                  __ptext17 23D6                    __ptext26 2EE0                    __ptext18 2CAC  
                  __ptext27 1DC4                    __ptext19 2AB8                    __ptext28 283E  
                  __ptext29 2F70                    __powers_ 1050            __size_of_service 22D2  
          __size_of_startT0 00FC               __size_of_main 0066               ??i2_lcdNibble 0001  
               ??_lcdNibble 008E                    int$flags 007E         __end_of_updateAngle 283E  
                 printf@idx 0065                   printf@exp 0070                   printf@val 006C  
                 putch@data 0006                 _OSCTUNEbits 000F9B                  _INTCONbits 000FF2  
             ?_digitalWrite 008E                    scale@scl 0037                    intlevel2 0000  
          __tdiv_to_l_@exp1 000F            __tdiv_to_l_@cntr 000E            __tdiv_to_l_@quot 000A  
          ___lldiv@dividend 0001                    printf@ap 0066                 lcdInst@data 0092  
              ?__tdiv_to_l_ 0001                 _printf$1140 0062         __end_ofi2_lcdNibble 2CAC  
          ??i2_digitalWrite 0007            digitalWrite@port 008E            ___lldiv@quotient 0009  
            ??_digitalWrite 0094                _startT0$1134 0059                _startT0$1135 005C  
           digitalWrite@pin 0090             digitalWrite@val 0092                 _updateAngle 2784  
