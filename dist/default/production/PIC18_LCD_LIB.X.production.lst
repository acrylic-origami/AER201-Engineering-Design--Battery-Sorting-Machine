

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Mar 12 19:28:57 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    60                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    61                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    62  0000                     
    63                           ; Version 1.40
    64                           ; Generated 01/12/2016 GMT
    65                           ; 
    66                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    67                           ; All rights reserved.
    68                           ; 
    69                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    70                           ; 
    71                           ; Redistribution and use in source and binary forms, with or without modification, are
    72                           ; permitted provided that the following conditions are met:
    73                           ; 
    74                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    75                           ;        conditions and the following disclaimer.
    76                           ; 
    77                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    78                           ;        of conditions and the following disclaimer in the documentation and/or other
    79                           ;        materials provided with the distribution.
    80                           ; 
    81                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    82                           ;        software without specific prior written permission.
    83                           ; 
    84                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    85                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    86                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    87                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    88                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    89                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    90                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    91                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    92                           ; 
    93                           ; 
    94                           ; Code-generator required, PIC18F4620 Definitions
    95                           ; 
    96                           ; SFR Addresses
    97  0000                     
    98                           	psect	idataBANK0
    99  001ADE                     __pidataBANK0:
   100                           	opt stack 0
   101                           
   102                           ;initializer for _binAngle
   103  001ADE  003C               	dw	60
   104  001AE0  0050               	dw	80
   105  001AE2  0064               	dw	100
   106  001AE4  0078               	dw	120
   107                           
   108                           	psect	mediumconst
   109  00FE90                     __pmediumconst:
   110                           	opt stack 0
   111  00FE90  00                 	db	0
   112  00FE91                     _dpowers:
   113                           	opt stack 0
   114  00FE91  0001               	dw	1
   115  00FE93  0000               	dw	0
   116  00FE95  000A               	dw	10
   117  00FE97  0000               	dw	0
   118  00FE99  0064               	dw	100
   119  00FE9B  0000               	dw	0
   120  00FE9D  03E8               	dw	1000
   121  00FE9F  0000               	dw	0
   122  00FEA1  2710               	dw	10000
   123  00FEA3  0000               	dw	0
   124  00FEA5  86A0               	dw	34464
   125  00FEA7  0001               	dw	1
   126  00FEA9  4240               	dw	16960
   127  00FEAB  000F               	dw	15
   128  00FEAD  9680               	dw	38528
   129  00FEAF  0098               	dw	152
   130  00FEB1  E100               	dw	57600
   131  00FEB3  05F5               	dw	1525
   132  00FEB5  CA00               	dw	51712
   133  00FEB7  3B9A               	dw	15258
   134  00FEB9                     __end_of_dpowers:
   135                           	opt stack 0
   136  00FEB9                     _hexpowers:
   137                           	opt stack 0
   138  00FEB9  0001               	dw	1
   139  00FEBB  0000               	dw	0
   140  00FEBD  0010               	dw	16
   141  00FEBF  0000               	dw	0
   142  00FEC1  0100               	dw	256
   143  00FEC3  0000               	dw	0
   144  00FEC5  1000               	dw	4096
   145  00FEC7  0000               	dw	0
   146  00FEC9  0000               	dw	0
   147  00FECB  0001               	dw	1
   148  00FECD  0000               	dw	0
   149  00FECF  0010               	dw	16
   150  00FED1  0000               	dw	0
   151  00FED3  0100               	dw	256
   152  00FED5  0000               	dw	0
   153  00FED7  1000               	dw	4096
   154  00FED9                     __end_of_hexpowers:
   155                           	opt stack 0
   156  00FED9                     _keys:
   157                           	opt stack 0
   158  00FED9  31                 	db	49
   159  00FEDA  32                 	db	50
   160  00FEDB  33                 	db	51
   161  00FEDC  41                 	db	65
   162  00FEDD  34                 	db	52
   163  00FEDE  35                 	db	53
   164  00FEDF  36                 	db	54
   165  00FEE0  42                 	db	66
   166  00FEE1  37                 	db	55
   167  00FEE2  38                 	db	56
   168  00FEE3  39                 	db	57
   169  00FEE4  43                 	db	67
   170  00FEE5  2A                 	db	42
   171  00FEE6  30                 	db	48
   172  00FEE7  23                 	db	35
   173  00FEE8  44                 	db	68
   174  00FEE9  00                 	db	0
   175  00FEEA                     __end_of_keys:
   176                           	opt stack 0
   177  00FEEA                     _happynewyear:
   178                           	opt stack 0
   179  00FEEA  45                 	db	69
   180  00FEEB  59                 	db	89
   181  00FEEC  23                 	db	35
   182  00FEED  07                 	db	7
   183  00FEEE  31                 	db	49
   184  00FEEF  12                 	db	18
   185  00FEF0  16                 	db	22
   186  00FEF1                     __end_of_happynewyear:
   187                           	opt stack 0
   188  0000                     _ADCON0	set	4034
   189  0000                     _ADCON1	set	4033
   190  0000                     _ADCON2	set	4032
   191  0000                     _ADRESH	set	4036
   192  0000                     _ADRESL	set	4035
   193  0000                     _EEADR	set	4009
   194  0000                     _EEADRH	set	4010
   195  0000                     _EECON1	set	4006
   196  0000                     _EECON2	set	4007
   197  0000                     _EEDATA	set	4008
   198  0000                     _INTCONbits	set	4082
   199  0000                     _LATA	set	3977
   200  0000                     _LATB	set	3978
   201  0000                     _LATC	set	3979
   202  0000                     _LATD	set	3980
   203  0000                     _LATDbits	set	3980
   204  0000                     _LATE	set	3981
   205  0000                     _PORTA	set	3968
   206  0000                     _PORTB	set	3969
   207  0000                     _PORTBbits	set	3969
   208  0000                     _PORTC	set	3970
   209  0000                     _PORTD	set	3971
   210  0000                     _SSPADD	set	4040
   211  0000                     _SSPBUF	set	4041
   212  0000                     _SSPCON1	set	4038
   213  0000                     _SSPCON2	set	4037
   214  0000                     _SSPSTAT	set	4039
   215  0000                     _T0CON	set	4053
   216  0000                     _T1CON	set	4045
   217  0000                     _T3CON	set	4017
   218  0000                     _TMR0H	set	4055
   219  0000                     _TMR0L	set	4054
   220  0000                     _TMR1H	set	4047
   221  0000                     _TMR1L	set	4046
   222  0000                     _TMR3H	set	4019
   223  0000                     _TMR3L	set	4018
   224  0000                     _TRISA	set	3986
   225  0000                     _TRISB	set	3987
   226  0000                     _TRISC	set	3988
   227  0000                     _TRISD	set	3989
   228  0000                     _TRISE	set	3990
   229  0000                     _ACKDT	set	32301
   230  0000                     _ACKEN	set	32300
   231  0000                     _EEIF	set	32012
   232  0000                     _INT0IE	set	32660
   233  0000                     _INT0IF	set	32657
   234  0000                     _INT1IE	set	32643
   235  0000                     _INT1IF	set	32640
   236  0000                     _PEIE	set	32662
   237  0000                     _PEN	set	32298
   238  0000                     _RCEN	set	32299
   239  0000                     _RSEN	set	32297
   240  0000                     _SEN	set	32296
   241  0000                     _TMR0IE	set	32661
   242  0000                     _TMR0IF	set	32658
   243  0000                     _TMR1IE	set	31976
   244  0000                     _TMR1IF	set	31984
   245  0000                     _TMR2IF	set	31985
   246  0000                     _TMR3IE	set	32001
   247  0000                     _TMR3IF	set	32009
   248  0000                     _TRISC3	set	31907
   249  0000                     _TRISC4	set	31908
   250  00FEF1                     STR_12:
   251  00FEF1  25                 	db	37
   252  00FEF2  63                 	db	99	;'c'
   253  00FEF3  29                 	db	41
   254  00FEF4  20                 	db	32
   255  00FEF5  74                 	db	116	;'t'
   256  00FEF6  69                 	db	105	;'i'
   257  00FEF7  6D                 	db	109	;'m'
   258  00FEF8  65                 	db	101	;'e'
   259  00FEF9  20                 	db	32
   260  00FEFA  20                 	db	32
   261  00FEFB  3C                 	db	60	;'<'
   262  00FEFC  41                 	db	65	;'A'
   263  00FEFD  20                 	db	32
   264  00FEFE  20                 	db	32
   265  00FEFF  20                 	db	32
   266  00FF00  20                 	db	32
   267  00FF01  20                 	db	32
   268  00FF02  0A                 	db	10
   269  00FF03  00                 	db	0
   270  00FF04                     STR_8:
   271  00FF04  73                 	db	115	;'s'
   272  00FF05  74                 	db	116	;'t'
   273  00FF06  61                 	db	97	;'a'
   274  00FF07  72                 	db	114	;'r'
   275  00FF08  74                 	db	116	;'t'
   276  00FF09  20                 	db	32
   277  00FF0A  20                 	db	32
   278  00FF0B  20                 	db	32
   279  00FF0C  3C                 	db	60	;'<'
   280  00FF0D  42                 	db	66	;'B'
   281  00FF0E  20                 	db	32
   282  00FF0F  20                 	db	32
   283  00FF10  20                 	db	32
   284  00FF11  20                 	db	32
   285  00FF12  20                 	db	32
   286  00FF13  20                 	db	32
   287  00FF14  0A                 	db	10
   288  00FF15  00                 	db	0
   289  00FF16                     STR_6:
   290  00FF16  20                 	db	32
   291  00FF17  20                 	db	32
   292  00FF18  68                 	db	104	;'h'
   293  00FF19  68                 	db	104	;'h'
   294  00FF1A  3A                 	db	58	;':'
   295  00FF1B  6D                 	db	109	;'m'
   296  00FF1C  6D                 	db	109	;'m'
   297  00FF1D  3A                 	db	58	;':'
   298  00FF1E  73                 	db	115	;'s'
   299  00FF1F  73                 	db	115	;'s'
   300  00FF20  20                 	db	32
   301  00FF21  20                 	db	32
   302  00FF22  20                 	db	32
   303  00FF23  20                 	db	32
   304  00FF24  20                 	db	32
   305  00FF25  20                 	db	32
   306  00FF26  0A                 	db	10
   307  00FF27  00                 	db	0
   308  00FF28                     STR_10:
   309  00FF28  73                 	db	115	;'s'
   310  00FF29  65                 	db	101	;'e'
   311  00FF2A  6C                 	db	108	;'l'
   312  00FF2B  65                 	db	101	;'e'
   313  00FF2C  63                 	db	99	;'c'
   314  00FF2D  74                 	db	116	;'t'
   315  00FF2E  20                 	db	32
   316  00FF2F  72                 	db	114	;'r'
   317  00FF30  75                 	db	117	;'u'
   318  00FF31  6E                 	db	110	;'n'
   319  00FF32  3A                 	db	58	;':'
   320  00FF33  20                 	db	32
   321  00FF34  20                 	db	32
   322  00FF35  20                 	db	32
   323  00FF36  20                 	db	32
   324  00FF37  20                 	db	32
   325  00FF38  0A                 	db	10
   326  00FF39  00                 	db	0
   327  00FF3A                     STR_14:
   328  00FF3A  74                 	db	116	;'t'
   329  00FF3B  69                 	db	105	;'i'
   330  00FF3C  6D                 	db	109	;'m'
   331  00FF3D  65                 	db	101	;'e'
   332  00FF3E  3A                 	db	58	;':'
   333  00FF3F  20                 	db	32
   334  00FF40  6E                 	db	110	;'n'
   335  00FF41  6E                 	db	110	;'n'
   336  00FF42  6E                 	db	110	;'n'
   337  00FF43  20                 	db	32
   338  00FF44  73                 	db	115	;'s'
   339  00FF45  65                 	db	101	;'e'
   340  00FF46  63                 	db	99	;'c'
   341  00FF47  20                 	db	32
   342  00FF48  20                 	db	32
   343  00FF49  20                 	db	32
   344  00FF4A  0A                 	db	10
   345  00FF4B  00                 	db	0
   346  00FF4C                     STR_16:
   347  00FF4C  5B                 	db	91	;'['
   348  00FF4D  41                 	db	65	;'A'
   349  00FF4E  41                 	db	65	;'A'
   350  00FF4F  2C                 	db	44
   351  00FF50  39                 	db	57	;'9'
   352  00FF51  56                 	db	86	;'V'
   353  00FF52  2C                 	db	44
   354  00FF53  43                 	db	67	;'C'
   355  00FF54  2C                 	db	44
   356  00FF55  6F                 	db	111	;'o'
   357  00FF56  74                 	db	116	;'t'
   358  00FF57  68                 	db	104	;'h'
   359  00FF58  65                 	db	101	;'e'
   360  00FF59  72                 	db	114	;'r'
   361  00FF5A  5D                 	db	93	;']'
   362  00FF5B  20                 	db	32
   363  00FF5C  0A                 	db	10
   364  00FF5D  00                 	db	0
   365  00FF5E                     STR_18:
   366  00FF5E  30                 	db	48	;'0'
   367  00FF5F  31                 	db	49	;'1'
   368  00FF60  32                 	db	50	;'2'
   369  00FF61  33                 	db	51	;'3'
   370  00FF62  34                 	db	52	;'4'
   371  00FF63  35                 	db	53	;'5'
   372  00FF64  36                 	db	54	;'6'
   373  00FF65  37                 	db	55	;'7'
   374  00FF66  38                 	db	56	;'8'
   375  00FF67  39                 	db	57	;'9'
   376  00FF68  61                 	db	97	;'a'
   377  00FF69  62                 	db	98	;'b'
   378  00FF6A  63                 	db	99	;'c'
   379  00FF6B  64                 	db	100	;'d'
   380  00FF6C  65                 	db	101	;'e'
   381  00FF6D  66                 	db	102	;'f'
   382  00FF6E  00                 	db	0
   383  00FF6F                     STR_15:
   384  00FF6F  20                 	db	32
   385  00FF70  20                 	db	32
   386  00FF71  20                 	db	32
   387  00FF72  20                 	db	32
   388  00FF73  20                 	db	32
   389  00FF74  20                 	db	32
   390  00FF75  20                 	db	32
   391  00FF76  20                 	db	32
   392  00FF77  20                 	db	32
   393  00FF78  20                 	db	32
   394  00FF79  20                 	db	32
   395  00FF7A  20                 	db	32
   396  00FF7B  20                 	db	32
   397  00FF7C  20                 	db	32
   398  00FF7D  2A                 	db	42
   399  00FF7E  3E                 	db	62	;'>'
   400  00FF7F  00                 	db	0
   401  00FF80                     STR_11:
   402  00FF80  5B                 	db	91	;'['
   403  00FF81  31                 	db	49	;'1'
   404  00FF82  2C                 	db	44
   405  00FF83  32                 	db	50	;'2'
   406  00FF84  2C                 	db	44
   407  00FF85  33                 	db	51	;'3'
   408  00FF86  2C                 	db	44
   409  00FF87  34                 	db	52	;'4'
   410  00FF88  5D                 	db	93	;']'
   411  00FF89  20                 	db	32
   412  00FF8A  20                 	db	32
   413  00FF8B  20                 	db	32
   414  00FF8C  20                 	db	32
   415  00FF8D  20                 	db	32
   416  00FF8E  2A                 	db	42
   417  00FF8F  3E                 	db	62	;'>'
   418  00FF90  00                 	db	0
   419  00FF91                     STR_9:
   420  00FF91  68                 	db	104	;'h'
   421  00FF92  69                 	db	105	;'i'
   422  00FF93  73                 	db	115	;'s'
   423  00FF94  74                 	db	116	;'t'
   424  00FF95  6F                 	db	111	;'o'
   425  00FF96  72                 	db	114	;'r'
   426  00FF97  79                 	db	121	;'y'
   427  00FF98  20                 	db	32
   428  00FF99  3C                 	db	60	;'<'
   429  00FF9A  43                 	db	67	;'C'
   430  00FF9B  20                 	db	32
   431  00FF9C  20                 	db	32
   432  00FF9D  20                 	db	32
   433  00FF9E  20                 	db	32
   434  00FF9F  2A                 	db	42
   435  00FFA0  3E                 	db	62	;'>'
   436  00FFA1  00                 	db	0
   437  00FFA2                     STR_13:
   438  00FFA2  20                 	db	32
   439  00FFA3  20                 	db	32
   440  00FFA4  20                 	db	32
   441  00FFA5  73                 	db	115	;'s'
   442  00FFA6  74                 	db	116	;'t'
   443  00FFA7  61                 	db	97	;'a'
   444  00FFA8  74                 	db	116	;'t'
   445  00FFA9  73                 	db	115	;'s'
   446  00FFAA  20                 	db	32
   447  00FFAB  3C                 	db	60	;'<'
   448  00FFAC  42                 	db	66	;'B'
   449  00FFAD  20                 	db	32
   450  00FFAE  20                 	db	32
   451  00FFAF  20                 	db	32
   452  00FFB0  2A                 	db	42
   453  00FFB1  3E                 	db	62	;'>'
   454  00FFB2  00                 	db	0
   455  00FFB3                     STR_17:
   456  00FFB3  5B                 	db	91	;'['
   457  00FFB4  6E                 	db	110	;'n'
   458  00FFB5  6E                 	db	110	;'n'
   459  00FFB6  2C                 	db	44
   460  00FFB7  6E                 	db	110	;'n'
   461  00FFB8  2C                 	db	44
   462  00FFB9  6E                 	db	110	;'n'
   463  00FFBA  2C                 	db	44
   464  00FFBB  6E                 	db	110	;'n'
   465  00FFBC  6E                 	db	110	;'n'
   466  00FFBD  5D                 	db	93	;']'
   467  00FFBE  20                 	db	32
   468  00FFBF  20                 	db	32
   469  00FFC0  20                 	db	32
   470  00FFC1  2A                 	db	42
   471  00FFC2  3E                 	db	62	;'>'
   472  00FFC3  00                 	db	0
   473  00FFC4                     STR_7:
   474  00FFC4  20                 	db	32
   475  00FFC5  20                 	db	32
   476  00FFC6  6D                 	db	109	;'m'
   477  00FFC7  6D                 	db	109	;'m'
   478  00FFC8  3A                 	db	58	;':'
   479  00FFC9  64                 	db	100	;'d'
   480  00FFCA  64                 	db	100	;'d'
   481  00FFCB  3A                 	db	58	;':'
   482  00FFCC  79                 	db	121	;'y'
   483  00FFCD  79                 	db	121	;'y'
   484  00FFCE  20                 	db	32
   485  00FFCF  20                 	db	32
   486  00FFD0  20                 	db	32
   487  00FFD1  20                 	db	32
   488  00FFD2  41                 	db	65	;'A'
   489  00FFD3  3E                 	db	62	;'>'
   490  00FFD4  00                 	db	0
   491  00FFD5                     STR_2:
   492  00FFD5  73                 	db	115	;'s'
   493  00FFD6  6F                 	db	111	;'o'
   494  00FFD7  72                 	db	114	;'r'
   495  00FFD8  74                 	db	116	;'t'
   496  00FFD9  69                 	db	105	;'i'
   497  00FFDA  6E                 	db	110	;'n'
   498  00FFDB  67                 	db	103	;'g'
   499  00FFDC  21                 	db	33
   500  00FFDD  20                 	db	32
   501  00FFDE  25                 	db	37
   502  00FFDF  64                 	db	100	;'d'
   503  00FFE0  00                 	db	0
   504  00FFE1  5B                 	db	91	;'['
   505  00FFE2  25                 	db	37
   506  00FFE3  78                 	db	120	;'x'
   507  00FFE4  20                 	db	32
   508  00FFE5  25                 	db	37
   509  00FFE6  78                 	db	120	;'x'
   510  00FFE7  5D                 	db	93	;']'
   511  00FFE8  0A                 	db	10
   512  00FFE9  00                 	db	0
   513  00FFEA                     STR_1:
   514  00FFEA  73                 	db	115	;'s'
   515  00FFEB  74                 	db	116	;'t'
   516  00FFEC  61                 	db	97	;'a'
   517  00FFED  72                 	db	114	;'r'
   518  00FFEE  74                 	db	116	;'t'
   519  00FFEF  69                 	db	105	;'i'
   520  00FFF0  6E                 	db	110	;'n'
   521  00FFF1  67                 	db	103	;'g'
   522  00FFF2  00                 	db	0
   523  00FFF3  74                 	db	116	;'t'
   524  00FFF4  31                 	db	49	;'1'
   525  00FFF5  3A                 	db	58	;':'
   526  00FFF6  20                 	db	32
   527  00FFF7  25                 	db	37
   528  00FFF8  78                 	db	120	;'x'
   529  00FFF9  20                 	db	32
   530  00FFFA  00                 	db	0
   531  00FFFB                     STR_5:
   532  00FFFB  25                 	db	37
   533  00FFFC  6C                 	db	108	;'l'
   534  00FFFD  64                 	db	100	;'d'
   535  00FFFE  00                 	db	0
   536                           
   537                           ; #config settings
   538  00FFFF  00                 	db	0	; dummy byte at the end
   539  0000                     
   540                           	psect	cinit
   541  001882                     __pcinit:
   542                           	opt stack 0
   543  001882                     start_initialization:
   544                           	opt stack 0
   545  001882                     __initialization:
   546                           	opt stack 0
   547                           
   548                           ; Initialize objects allocated to BANK0 (8 bytes)
   549                           ; load TBLPTR registers with __pidataBANK0
   550  001882  0EDE               	movlw	low __pidataBANK0
   551  001884  6EF6               	movwf	tblptrl,c
   552  001886  0E1A               	movlw	high __pidataBANK0
   553  001888  6EF7               	movwf	tblptrh,c
   554  00188A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   555  00188C  6EF8               	movwf	tblptru,c
   556  00188E  EE00  F0CB         	lfsr	0,__pdataBANK0
   557  001892  EE10 F008          	lfsr	1,8
   558  001896                     copy_data0:
   559  001896  0009               	tblrd		*+
   560  001898  CFF5 FFEE          	movff	tablat,postinc0
   561  00189C  50E5               	movf	postdec1,w,c
   562  00189E  50E1               	movf	fsr1l,w,c
   563  0018A0  E1FA               	bnz	copy_data0
   564                           
   565                           ; Clear objects allocated to BANK0 (32 bytes)
   566  0018A2  EE00  F0AB         	lfsr	0,__pbssBANK0
   567  0018A6  0E20               	movlw	32
   568  0018A8                     clear_0:
   569  0018A8  6AEE               	clrf	postinc0,c
   570  0018AA  06E8               	decf	wreg,f,c
   571  0018AC  E1FD               	bnz	clear_0
   572                           
   573                           ; Clear objects allocated to COMRAM (2 bytes)
   574  0018AE  6A77               	clrf	(__pbssCOMRAM+1)& (0+255),c
   575  0018B0  6A76               	clrf	__pbssCOMRAM& (0+255),c
   576  0018B2                     end_of_initialization:
   577                           	opt stack 0
   578  0018B2                     __end_of__initialization:
   579                           	opt stack 0
   580  0018B2  9078               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   581  0018B4  9278               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   582  0018B6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   583  0018B8  6EF8               	movwf	tblptru,c
   584  0018BA  0100               	movlb	0
   585  0018BC  EFB0  F00B         	goto	_main	;jump to C main() function
   586                           tblptru	equ	0xFF8
   587                           tblptrh	equ	0xFF7
   588                           tblptrl	equ	0xFF6
   589                           tablat	equ	0xFF5
   590                           postinc0	equ	0xFEE
   591                           wreg	equ	0xFE8
   592                           postdec1	equ	0xFE5
   593                           fsr1l	equ	0xFE1
   594                           
   595                           	psect	bssCOMRAM
   596  000076                     __pbssCOMRAM:
   597                           	opt stack 0
   598  000076                     _count:
   599                           	opt stack 0
   600  000076                     	ds	2
   601                           tblptru	equ	0xFF8
   602                           tblptrh	equ	0xFF7
   603                           tblptrl	equ	0xFF6
   604                           tablat	equ	0xFF5
   605                           postinc0	equ	0xFEE
   606                           wreg	equ	0xFE8
   607                           postdec1	equ	0xFE5
   608                           fsr1l	equ	0xFE1
   609                           
   610                           	psect	bssBANK0
   611  0000AB                     __pbssBANK0:
   612                           	opt stack 0
   613  0000AB                     _pulse:
   614                           	opt stack 0
   615  0000AB                     	ds	16
   616  0000BB                     _pin:
   617                           	opt stack 0
   618  0000BB                     	ds	8
   619  0000C3                     _port:
   620                           	opt stack 0
   621  0000C3                     	ds	8
   622                           tblptru	equ	0xFF8
   623                           tblptrh	equ	0xFF7
   624                           tblptrl	equ	0xFF6
   625                           tablat	equ	0xFF5
   626                           postinc0	equ	0xFEE
   627                           wreg	equ	0xFE8
   628                           postdec1	equ	0xFE5
   629                           fsr1l	equ	0xFE1
   630                           
   631                           	psect	dataBANK0
   632  0000CB                     __pdataBANK0:
   633                           	opt stack 0
   634  0000CB                     _binAngle:
   635                           	opt stack 0
   636  0000CB                     	ds	8
   637                           tblptru	equ	0xFF8
   638                           tblptrh	equ	0xFF7
   639                           tblptrl	equ	0xFF6
   640                           tablat	equ	0xFF5
   641                           postinc0	equ	0xFEE
   642                           wreg	equ	0xFE8
   643                           postdec1	equ	0xFE5
   644                           fsr1l	equ	0xFE1
   645                           
   646                           	psect	cstackBANK0
   647  000080                     __pcstackBANK0:
   648                           	opt stack 0
   649  000080                     ?___lldiv:
   650                           	opt stack 0
   651  000080                     lcdNibble@temp:
   652                           	opt stack 0
   653  000080                     readKeypad@key:
   654                           	opt stack 0
   655  000080                     digitalWrite@port:
   656                           	opt stack 0
   657  000080                     ___lldiv@dividend:
   658                           	opt stack 0
   659                           
   660                           ; 4 bytes @ 0x0
   661  000080                     	ds	1
   662  000081                     lcdNibble@data:
   663                           	opt stack 0
   664                           
   665                           ; 1 bytes @ 0x1
   666  000081                     	ds	1
   667  000082                     ??_lcdInst:
   668  000082                     digitalWrite@pin:
   669                           	opt stack 0
   670                           
   671                           ; 2 bytes @ 0x2
   672  000082                     	ds	1
   673  000083                     lcdInst@data:
   674                           	opt stack 0
   675                           
   676                           ; 1 bytes @ 0x3
   677  000083                     	ds	1
   678  000084                     ??_initLCD:
   679  000084                     putch@data:
   680                           	opt stack 0
   681  000084                     digitalWrite@val:
   682                           	opt stack 0
   683  000084                     ___lldiv@divisor:
   684                           	opt stack 0
   685                           
   686                           ; 4 bytes @ 0x4
   687  000084                     	ds	2
   688  000086                     ??_digitalWrite:
   689                           
   690                           ; 1 bytes @ 0x6
   691  000086                     	ds	2
   692  000088                     ___lldiv@quotient:
   693                           	opt stack 0
   694                           
   695                           ; 4 bytes @ 0x8
   696  000088                     	ds	4
   697  00008C                     ___lldiv@counter:
   698                           	opt stack 0
   699                           
   700                           ; 1 bytes @ 0xC
   701  00008C                     	ds	1
   702  00008D                     ?___llmod:
   703                           	opt stack 0
   704  00008D                     I2C_Master_Init@c:
   705                           	opt stack 0
   706  00008D                     ___llmod@dividend:
   707                           	opt stack 0
   708                           
   709                           ; 4 bytes @ 0xD
   710  00008D                     	ds	4
   711  000091                     ??_I2C_Master_Init:
   712  000091                     ___llmod@divisor:
   713                           	opt stack 0
   714                           
   715                           ; 4 bytes @ 0x11
   716  000091                     	ds	4
   717  000095                     ___llmod@counter:
   718                           	opt stack 0
   719                           
   720                           ; 1 bytes @ 0x15
   721  000095                     	ds	1
   722  000096                     ?_printf:
   723                           	opt stack 0
   724  000096                     printf@f:
   725                           	opt stack 0
   726                           
   727                           ; 2 bytes @ 0x16
   728  000096                     	ds	6
   729  00009C                     ??_printf:
   730                           
   731                           ; 1 bytes @ 0x1C
   732  00009C                     	ds	2
   733  00009E                     printf@idx:
   734                           	opt stack 0
   735                           
   736                           ; 1 bytes @ 0x1E
   737  00009E                     	ds	1
   738  00009F                     printf@prec:
   739                           	opt stack 0
   740                           
   741                           ; 2 bytes @ 0x1F
   742  00009F                     	ds	2
   743  0000A1                     printf@ap:
   744                           	opt stack 0
   745                           
   746                           ; 2 bytes @ 0x21
   747  0000A1                     	ds	2
   748  0000A3                     printf@val:
   749                           	opt stack 0
   750                           
   751                           ; 4 bytes @ 0x23
   752  0000A3                     	ds	4
   753  0000A7                     printf@flag:
   754                           	opt stack 0
   755                           
   756                           ; 1 bytes @ 0x27
   757  0000A7                     	ds	1
   758  0000A8                     printf@c:
   759                           	opt stack 0
   760                           
   761                           ; 1 bytes @ 0x28
   762  0000A8                     	ds	1
   763  0000A9                     runMenu@key:
   764                           	opt stack 0
   765                           
   766                           ; 1 bytes @ 0x29
   767  0000A9                     	ds	1
   768  0000AA                     showInterface@key:
   769                           	opt stack 0
   770                           
   771                           ; 1 bytes @ 0x2A
   772  0000AA                     	ds	1
   773  0000AB                     tblptru	equ	0xFF8
   774                           tblptrh	equ	0xFF7
   775                           tblptrl	equ	0xFF6
   776                           tablat	equ	0xFF5
   777                           postinc0	equ	0xFEE
   778                           wreg	equ	0xFE8
   779                           postdec1	equ	0xFE5
   780                           fsr1l	equ	0xFE1
   781                           
   782                           ; 1 bytes @ 0x2B
   783                           
   784                           	psect	cstackCOMRAM
   785  000001                     __pcstackCOMRAM:
   786                           	opt stack 0
   787  000001                     ?_digitalRead:
   788                           	opt stack 0
   789  000001                     ?___ftpack:
   790                           	opt stack 0
   791  000001                     ?i2___lldiv:
   792                           	opt stack 0
   793  000001                     i2lcdNibble@temp:
   794                           	opt stack 0
   795  000001                     digitalRead@port:
   796                           	opt stack 0
   797  000001                     startTimer@timer:
   798                           	opt stack 0
   799  000001                     i2digitalWrite@port:
   800                           	opt stack 0
   801  000001                     ___ftpack@arg:
   802                           	opt stack 0
   803  000001                     i2___lldiv@dividend:
   804                           	opt stack 0
   805                           
   806                           ; 4 bytes @ 0x0
   807  000001                     	ds	1
   808  000002                     i2lcdNibble@data:
   809                           	opt stack 0
   810                           
   811                           ; 1 bytes @ 0x1
   812  000002                     	ds	1
   813  000003                     ??i2_lcdInst:
   814  000003                     digitalRead@pin:
   815                           	opt stack 0
   816  000003                     i2digitalWrite@pin:
   817                           	opt stack 0
   818  000003                     startTimer@val:
   819                           	opt stack 0
   820                           
   821                           ; 4 bytes @ 0x2
   822  000003                     	ds	1
   823  000004                     ___ftpack@exp:
   824                           	opt stack 0
   825  000004                     i2lcdInst@data:
   826                           	opt stack 0
   827                           
   828                           ; 1 bytes @ 0x3
   829  000004                     	ds	1
   830  000005                     ??_digitalRead:
   831  000005                     ___ftpack@sign:
   832                           	opt stack 0
   833  000005                     i2putch@data:
   834                           	opt stack 0
   835  000005                     i2digitalWrite@val:
   836                           	opt stack 0
   837  000005                     i2___lldiv@divisor:
   838                           	opt stack 0
   839                           
   840                           ; 4 bytes @ 0x4
   841  000005                     	ds	1
   842  000006                     ??___ftpack:
   843                           
   844                           ; 1 bytes @ 0x5
   845  000006                     	ds	1
   846  000007                     ??_startTimer:
   847  000007                     ??i2_digitalWrite:
   848                           
   849                           ; 1 bytes @ 0x6
   850  000007                     	ds	2
   851  000009                     ?___altoft:
   852                           	opt stack 0
   853  000009                     ?___awtoft:
   854                           	opt stack 0
   855  000009                     ___awtoft@c:
   856                           	opt stack 0
   857  000009                     ___altoft@c:
   858                           	opt stack 0
   859  000009                     i2___lldiv@quotient:
   860                           	opt stack 0
   861                           
   862                           ; 4 bytes @ 0x8
   863  000009                     	ds	1
   864  00000A                     ??_servoInterruptService:
   865                           
   866                           ; 1 bytes @ 0x9
   867  00000A                     	ds	2
   868  00000C                     ___awtoft@sign:
   869                           	opt stack 0
   870  00000C                     servoInterruptService@flags:
   871                           	opt stack 0
   872                           
   873                           ; 8 bytes @ 0xB
   874  00000C                     	ds	1
   875  00000D                     ??___altoft:
   876  00000D                     ?___ftdiv:
   877                           	opt stack 0
   878  00000D                     i2___lldiv@counter:
   879                           	opt stack 0
   880  00000D                     ___ftdiv@f1:
   881                           	opt stack 0
   882                           
   883                           ; 3 bytes @ 0xC
   884  00000D                     	ds	1
   885  00000E                     ?i2___llmod:
   886                           	opt stack 0
   887  00000E                     i2___llmod@dividend:
   888                           	opt stack 0
   889                           
   890                           ; 4 bytes @ 0xD
   891  00000E                     	ds	2
   892  000010                     ___ftdiv@f2:
   893                           	opt stack 0
   894                           
   895                           ; 3 bytes @ 0xF
   896  000010                     	ds	1
   897  000011                     ___altoft@exp:
   898                           	opt stack 0
   899                           
   900                           ; 1 bytes @ 0x10
   901  000011                     	ds	1
   902  000012                     ___altoft@sign:
   903                           	opt stack 0
   904  000012                     i2___llmod@divisor:
   905                           	opt stack 0
   906                           
   907                           ; 4 bytes @ 0x11
   908  000012                     	ds	1
   909  000013                     ??___ftdiv:
   910                           
   911                           ; 1 bytes @ 0x12
   912  000013                     	ds	1
   913  000014                     servoInterruptService@i:
   914                           	opt stack 0
   915                           
   916                           ; 2 bytes @ 0x13
   917  000014                     	ds	2
   918  000016                     ___ftdiv@cntr:
   919                           	opt stack 0
   920  000016                     i2___llmod@counter:
   921                           	opt stack 0
   922                           
   923                           ; 1 bytes @ 0x15
   924  000016                     	ds	1
   925  000017                     ?i2_printf:
   926                           	opt stack 0
   927  000017                     i2printf@f:
   928                           	opt stack 0
   929  000017                     ___ftdiv@f3:
   930                           	opt stack 0
   931                           
   932                           ; 3 bytes @ 0x16
   933  000017                     	ds	3
   934  00001A                     ___ftdiv@exp:
   935                           	opt stack 0
   936                           
   937                           ; 1 bytes @ 0x19
   938  00001A                     	ds	1
   939  00001B                     ___ftdiv@sign:
   940                           	opt stack 0
   941                           
   942                           ; 1 bytes @ 0x1A
   943  00001B                     	ds	1
   944  00001C                     ?___ftmul:
   945                           	opt stack 0
   946  00001C                     ___ftmul@f1:
   947                           	opt stack 0
   948                           
   949                           ; 3 bytes @ 0x1B
   950  00001C                     	ds	1
   951  00001D                     ??i2_printf:
   952                           
   953                           ; 1 bytes @ 0x1C
   954  00001D                     	ds	2
   955  00001F                     i2printf@idx:
   956                           	opt stack 0
   957  00001F                     ___ftmul@f2:
   958                           	opt stack 0
   959                           
   960                           ; 3 bytes @ 0x1E
   961  00001F                     	ds	1
   962  000020                     i2printf@prec:
   963                           	opt stack 0
   964                           
   965                           ; 2 bytes @ 0x1F
   966  000020                     	ds	2
   967  000022                     ??___ftmul:
   968  000022                     i2printf@ap:
   969                           	opt stack 0
   970                           
   971                           ; 2 bytes @ 0x21
   972  000022                     	ds	2
   973  000024                     i2printf@val:
   974                           	opt stack 0
   975                           
   976                           ; 4 bytes @ 0x23
   977  000024                     	ds	1
   978  000025                     ___ftmul@exp:
   979                           	opt stack 0
   980                           
   981                           ; 1 bytes @ 0x24
   982  000025                     	ds	1
   983  000026                     ___ftmul@f3_as_product:
   984                           	opt stack 0
   985                           
   986                           ; 3 bytes @ 0x25
   987  000026                     	ds	2
   988  000028                     i2printf@flag:
   989                           	opt stack 0
   990                           
   991                           ; 1 bytes @ 0x27
   992  000028                     	ds	1
   993  000029                     ___ftmul@cntr:
   994                           	opt stack 0
   995  000029                     i2printf@c:
   996                           	opt stack 0
   997                           
   998                           ; 1 bytes @ 0x28
   999  000029                     	ds	1
  1000  00002A                     ___ftmul@sign:
  1001                           	opt stack 0
  1002                           
  1003                           ; 1 bytes @ 0x29
  1004  00002A                     	ds	1
  1005  00002B                     ?___ftadd:
  1006                           	opt stack 0
  1007  00002B                     ___ftadd@f1:
  1008                           	opt stack 0
  1009                           
  1010                           ; 3 bytes @ 0x2A
  1011  00002B                     	ds	3
  1012  00002E                     ___ftadd@f2:
  1013                           	opt stack 0
  1014                           
  1015                           ; 3 bytes @ 0x2D
  1016  00002E                     	ds	3
  1017  000031                     ??___ftadd:
  1018                           
  1019                           ; 1 bytes @ 0x30
  1020  000031                     	ds	3
  1021  000034                     ___ftadd@sign:
  1022                           	opt stack 0
  1023                           
  1024                           ; 1 bytes @ 0x33
  1025  000034                     	ds	1
  1026  000035                     ___ftadd@exp2:
  1027                           	opt stack 0
  1028                           
  1029                           ; 1 bytes @ 0x34
  1030  000035                     	ds	1
  1031  000036                     ___ftadd@exp1:
  1032                           	opt stack 0
  1033                           
  1034                           ; 1 bytes @ 0x35
  1035  000036                     	ds	1
  1036  000037                     ?___fttol:
  1037                           	opt stack 0
  1038  000037                     ___fttol@f1:
  1039                           	opt stack 0
  1040                           
  1041                           ; 3 bytes @ 0x36
  1042  000037                     	ds	4
  1043  00003B                     ??___fttol:
  1044                           
  1045                           ; 1 bytes @ 0x3A
  1046  00003B                     	ds	5
  1047  000040                     ___fttol@sign1:
  1048                           	opt stack 0
  1049                           
  1050                           ; 1 bytes @ 0x3F
  1051  000040                     	ds	1
  1052  000041                     ___fttol@lval:
  1053                           	opt stack 0
  1054                           
  1055                           ; 4 bytes @ 0x40
  1056  000041                     	ds	4
  1057  000045                     ___fttol@exp1:
  1058                           	opt stack 0
  1059                           
  1060                           ; 1 bytes @ 0x44
  1061  000045                     	ds	1
  1062  000046                     ?_angleToPulse:
  1063                           	opt stack 0
  1064  000046                     angleToPulse@angle:
  1065                           	opt stack 0
  1066                           
  1067                           ; 2 bytes @ 0x45
  1068  000046                     	ds	4
  1069  00004A                     ??_angleToPulse:
  1070                           
  1071                           ; 1 bytes @ 0x49
  1072  00004A                     	ds	4
  1073  00004E                     angleToPulse@offset:
  1074                           	opt stack 0
  1075                           
  1076                           ; 4 bytes @ 0x4D
  1077  00004E                     	ds	4
  1078  000052                     angleToPulse@a180:
  1079                           	opt stack 0
  1080                           
  1081                           ; 4 bytes @ 0x51
  1082  000052                     	ds	4
  1083  000056                     _angleToPulse$1200:
  1084                           	opt stack 0
  1085                           
  1086                           ; 3 bytes @ 0x55
  1087  000056                     	ds	3
  1088  000059                     angleToPulse@a000:
  1089                           	opt stack 0
  1090                           
  1091                           ; 4 bytes @ 0x58
  1092  000059                     	ds	4
  1093  00005D                     setAngle@timer:
  1094                           	opt stack 0
  1095                           
  1096                           ; 2 bytes @ 0x5C
  1097  00005D                     	ds	2
  1098  00005F                     setAngle@angle:
  1099                           	opt stack 0
  1100                           
  1101                           ; 2 bytes @ 0x5E
  1102  00005F                     	ds	2
  1103  000061                     ??_setAngle:
  1104                           
  1105                           ; 1 bytes @ 0x60
  1106  000061                     	ds	6
  1107  000067                     ??_service:
  1108                           
  1109                           ; 1 bytes @ 0x66
  1110  000067                     	ds	14
  1111  000075                     service@key:
  1112                           	opt stack 0
  1113                           
  1114                           ; 1 bytes @ 0x74
  1115  000075                     	ds	1
  1116                           tblptru	equ	0xFF8
  1117                           tblptrh	equ	0xFF7
  1118                           tblptrl	equ	0xFF6
  1119                           tablat	equ	0xFF5
  1120                           postinc0	equ	0xFEE
  1121                           wreg	equ	0xFE8
  1122                           postdec1	equ	0xFE5
  1123                           fsr1l	equ	0xFE1
  1124                           
  1125 ;;
  1126 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1127 ;;
  1128 ;; *************** function _main *****************
  1129 ;; Defined at:
  1130 ;;		line 28 in file "main.c"
  1131 ;; Parameters:    Size  Location     Type
  1132 ;;		None
  1133 ;; Auto vars:     Size  Location     Type
  1134 ;;		None
  1135 ;; Return value:  Size  Location     Type
  1136 ;;                  1    wreg      void 
  1137 ;; Registers used:
  1138 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1139 ;; Tracked objects:
  1140 ;;		On entry : 0/0
  1141 ;;		On exit  : 0/0
  1142 ;;		Unchanged: 0/0
  1143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1148 ;;Total ram usage:        0 bytes
  1149 ;; Hardware stack levels required when called:   14
  1150 ;; This function calls:
  1151 ;;		_digitalWrite
  1152 ;;		_initLCD
  1153 ;;		_initRTC
  1154 ;;		_lcdClear
  1155 ;;		_pinSetup
  1156 ;;		_printf
  1157 ;;		_showInterface
  1158 ;; This function is called by:
  1159 ;;		Startup code after reset
  1160 ;; This function uses a non-reentrant model
  1161 ;;
  1162                           
  1163                           	psect	text0
  1164  001760                     __ptext0:
  1165                           	opt stack 0
  1166  001760                     _main:
  1167                           	opt stack 17
  1168                           
  1169                           ;main.c: 29: pinSetup();
  1170                           
  1171                           ;incstack = 0
  1172  001760  EC21  F00C         	call	_pinSetup	;wreg free
  1173                           
  1174                           ;main.c: 30: initLCD();
  1175  001764  ECFC  F00B         	call	_initLCD	;wreg free
  1176                           
  1177                           ;main.c: 31: initRTC();
  1178  001768  EC63  F00D         	call	_initRTC	;wreg free
  1179                           
  1180                           ;main.c: 34: (INTCONbits.GIE = 0);
  1181                           
  1182                           ;main.c: 33: while(1){
  1183  00176C  9EF2               	bcf	intcon,7,c	;volatile
  1184                           
  1185                           ;main.c: 35: showInterface();
  1186  00176E  EC92  F005         	call	_showInterface	;wreg free
  1187                           
  1188                           ;main.c: 36: (INTCONbits.GIE = 1);
  1189  001772  8EF2               	bsf	intcon,7,c	;volatile
  1190                           
  1191                           ;main.c: 44: lcdClear();
  1192  001774  EC77  F00D         	call	_lcdClear	;wreg free
  1193                           
  1194                           ;main.c: 45: printf("starting");
  1195  001778  0EEA               	movlw	low STR_1
  1196  00177A  0100               	movlb	0	; () banked
  1197  00177C  6F96               	movwf	printf@f& (0+255),b
  1198  00177E  0EFF               	movlw	high STR_1
  1199  001780  0100               	movlb	0	; () banked
  1200  001782  6F97               	movwf	(printf@f+1)& (0+255),b
  1201  001784  EC09  F000         	call	_printf	;wreg free
  1202                           
  1203                           ;main.c: 46: digitalWrite(2,0,1);
  1204  001788  0E00               	movlw	0
  1205  00178A  0100               	movlb	0	; () banked
  1206  00178C  6F81               	movwf	(digitalWrite@port+1)& (0+255),b
  1207  00178E  0E02               	movlw	2
  1208  001790  6F80               	movwf	digitalWrite@port& (0+255),b
  1209  001792  0E00               	movlw	0
  1210  001794  0100               	movlb	0	; () banked
  1211  001796  6F83               	movwf	(digitalWrite@pin+1)& (0+255),b
  1212  001798  0E00               	movlw	0
  1213  00179A  6F82               	movwf	digitalWrite@pin& (0+255),b
  1214  00179C  0E00               	movlw	0
  1215  00179E  0100               	movlb	0	; () banked
  1216  0017A0  6F85               	movwf	(digitalWrite@val+1)& (0+255),b
  1217  0017A2  0E01               	movlw	1
  1218  0017A4  6F84               	movwf	digitalWrite@val& (0+255),b
  1219  0017A6  ECEC  F007         	call	_digitalWrite	;wreg free
  1220  0017AA                     l76:
  1221  0017AA  D7FF               	goto	l76
  1222  0017AC                     __end_of_main:
  1223                           	opt stack 0
  1224                           tblptru	equ	0xFF8
  1225                           tblptrh	equ	0xFF7
  1226                           tblptrl	equ	0xFF6
  1227                           tablat	equ	0xFF5
  1228                           intcon	equ	0xFF2
  1229                           postinc0	equ	0xFEE
  1230                           wreg	equ	0xFE8
  1231                           postdec1	equ	0xFE5
  1232                           fsr1l	equ	0xFE1
  1233                           
  1234 ;; *************** function _showInterface *****************
  1235 ;; Defined at:
  1236 ;;		line 89 in file "main.c"
  1237 ;; Parameters:    Size  Location     Type
  1238 ;;		None
  1239 ;; Auto vars:     Size  Location     Type
  1240 ;;  key             1   42[BANK0 ] unsigned char 
  1241 ;; Return value:  Size  Location     Type
  1242 ;;                  1    wreg      void 
  1243 ;; Registers used:
  1244 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1245 ;; Tracked objects:
  1246 ;;		On entry : 0/0
  1247 ;;		On exit  : 0/0
  1248 ;;		Unchanged: 0/0
  1249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1251 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1253 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1254 ;;Total ram usage:        1 bytes
  1255 ;; Hardware stack levels used:    1
  1256 ;; Hardware stack levels required when called:   13
  1257 ;; This function calls:
  1258 ;;		_dateTime
  1259 ;;		_mainMenu
  1260 ;;		_readKeypad
  1261 ;;		_runMenu
  1262 ;;		_runSelect
  1263 ;;		_runStats
  1264 ;;		_runTime
  1265 ;; This function is called by:
  1266 ;;		_main
  1267 ;; This function uses a non-reentrant model
  1268 ;;
  1269                           
  1270                           	psect	text1
  1271  000B24                     __ptext1:
  1272                           	opt stack 0
  1273  000B24                     _showInterface:
  1274                           	opt stack 17
  1275  000B24                     
  1276                           ;main.c: 92: dateTime();
  1277  000B24  EC1F  F00D         	call	_dateTime	;wreg free
  1278  000B28                     l3361:
  1279  000B28  EC95  F00C         	call	_readKeypad	;wreg free
  1280  000B2C  0A41               	xorlw	65
  1281  000B2E  A4D8               	btfss	status,2,c
  1282  000B30  D7FB               	goto	l3361
  1283  000B32                     l3363:
  1284                           
  1285                           ;main.c: 97: mainMenu();
  1286  000B32  EC0C  F00D         	call	_mainMenu	;wreg free
  1287  000B36                     l3365:
  1288  000B36  EC95  F00C         	call	_readKeypad	;wreg free
  1289  000B3A  0100               	movlb	0	; () banked
  1290  000B3C  6FAA               	movwf	showInterface@key& (0+255),b
  1291                           
  1292                           ; BSR set to: 0
  1293                           ;main.c: 101: while(key != 'B' && key != 'C' && key != '*');
  1294  000B3E  0E42               	movlw	66
  1295  000B40  0100               	movlb	0	; () banked
  1296  000B42  19AA               	xorwf	showInterface@key& (0+255),w,b
  1297  000B44  B4D8               	btfsc	status,2,c
  1298  000B46  D00A               	goto	l3373
  1299                           
  1300                           ; BSR set to: 0
  1301  000B48  0E43               	movlw	67
  1302  000B4A  0100               	movlb	0	; () banked
  1303  000B4C  19AA               	xorwf	showInterface@key& (0+255),w,b
  1304  000B4E  B4D8               	btfsc	status,2,c
  1305  000B50  D005               	goto	l3373
  1306                           
  1307                           ; BSR set to: 0
  1308  000B52  0E2A               	movlw	42
  1309  000B54  0100               	movlb	0	; () banked
  1310  000B56  19AA               	xorwf	showInterface@key& (0+255),w,b
  1311  000B58  A4D8               	btfss	status,2,c
  1312  000B5A  D7ED               	goto	l3365
  1313  000B5C                     l3373:
  1314                           
  1315                           ; BSR set to: 0
  1316                           ;main.c: 103: if(key == 'C'){
  1317  000B5C  0E43               	movlw	67
  1318  000B5E  0100               	movlb	0	; () banked
  1319  000B60  19AA               	xorwf	showInterface@key& (0+255),w,b
  1320  000B62  A4D8               	btfss	status,2,c
  1321  000B64  D056               	goto	l3417
  1322                           
  1323                           ; BSR set to: 0
  1324                           ;main.c: 105: runSelect();
  1325  000B66  ECF9  F00C         	call	_runSelect	;wreg free
  1326  000B6A                     l3377:
  1327  000B6A  EC95  F00C         	call	_readKeypad	;wreg free
  1328  000B6E  0100               	movlb	0	; () banked
  1329  000B70  6FAA               	movwf	showInterface@key& (0+255),b
  1330                           
  1331                           ; BSR set to: 0
  1332                           ;main.c: 111: while(key != '1' && key != '2' && key != '3' && key != '4' && key != '*');
  1333  000B72  0E31               	movlw	49
  1334  000B74  0100               	movlb	0	; () banked
  1335  000B76  19AA               	xorwf	showInterface@key& (0+255),w,b
  1336  000B78  B4D8               	btfsc	status,2,c
  1337  000B7A  D014               	goto	l3389
  1338                           
  1339                           ; BSR set to: 0
  1340  000B7C  0E32               	movlw	50
  1341  000B7E  0100               	movlb	0	; () banked
  1342  000B80  19AA               	xorwf	showInterface@key& (0+255),w,b
  1343  000B82  B4D8               	btfsc	status,2,c
  1344  000B84  D00F               	goto	l3389
  1345                           
  1346                           ; BSR set to: 0
  1347  000B86  0E33               	movlw	51
  1348  000B88  0100               	movlb	0	; () banked
  1349  000B8A  19AA               	xorwf	showInterface@key& (0+255),w,b
  1350  000B8C  B4D8               	btfsc	status,2,c
  1351  000B8E  D00A               	goto	l3389
  1352                           
  1353                           ; BSR set to: 0
  1354  000B90  0E34               	movlw	52
  1355  000B92  0100               	movlb	0	; () banked
  1356  000B94  19AA               	xorwf	showInterface@key& (0+255),w,b
  1357  000B96  B4D8               	btfsc	status,2,c
  1358  000B98  D005               	goto	l3389
  1359                           
  1360                           ; BSR set to: 0
  1361  000B9A  0E2A               	movlw	42
  1362  000B9C  0100               	movlb	0	; () banked
  1363  000B9E  19AA               	xorwf	showInterface@key& (0+255),w,b
  1364  000BA0  A4D8               	btfss	status,2,c
  1365  000BA2  D7E3               	goto	l3377
  1366  000BA4                     l3389:
  1367                           
  1368                           ; BSR set to: 0
  1369                           ;main.c: 113: if(key == '*')continue;
  1370  000BA4  0E2A               	movlw	42
  1371  000BA6  0100               	movlb	0	; () banked
  1372  000BA8  19AA               	xorwf	showInterface@key& (0+255),w,b
  1373  000BAA  B4D8               	btfsc	status,2,c
  1374  000BAC  D7C2               	goto	l3363
  1375  000BAE                     l3393:
  1376                           
  1377                           ;main.c: 119: runMenu(key);
  1378  000BAE  0100               	movlb	0	; () banked
  1379  000BB0  51AA               	movf	showInterface@key& (0+255),w,b
  1380  000BB2  EC7C  F00C         	call	_runMenu
  1381  000BB6                     l3395:
  1382  000BB6  EC95  F00C         	call	_readKeypad	;wreg free
  1383  000BBA  0100               	movlb	0	; () banked
  1384  000BBC  6FAA               	movwf	showInterface@key& (0+255),b
  1385                           
  1386                           ; BSR set to: 0
  1387                           ;main.c: 123: while(key != 'A' && key != 'B' && key != '*');
  1388  000BBE  0E41               	movlw	65
  1389  000BC0  0100               	movlb	0	; () banked
  1390  000BC2  19AA               	xorwf	showInterface@key& (0+255),w,b
  1391  000BC4  B4D8               	btfsc	status,2,c
  1392  000BC6  D00A               	goto	l3403
  1393                           
  1394                           ; BSR set to: 0
  1395  000BC8  0E42               	movlw	66
  1396  000BCA  0100               	movlb	0	; () banked
  1397  000BCC  19AA               	xorwf	showInterface@key& (0+255),w,b
  1398  000BCE  B4D8               	btfsc	status,2,c
  1399  000BD0  D005               	goto	l3403
  1400                           
  1401                           ; BSR set to: 0
  1402  000BD2  0E2A               	movlw	42
  1403  000BD4  0100               	movlb	0	; () banked
  1404  000BD6  19AA               	xorwf	showInterface@key& (0+255),w,b
  1405  000BD8  A4D8               	btfss	status,2,c
  1406  000BDA  D7ED               	goto	l3395
  1407  000BDC                     l3403:
  1408                           
  1409                           ; BSR set to: 0
  1410                           ;main.c: 125: if(key == 'A'){
  1411  000BDC  0E41               	movlw	65
  1412  000BDE  0100               	movlb	0	; () banked
  1413  000BE0  19AA               	xorwf	showInterface@key& (0+255),w,b
  1414  000BE2  A4D8               	btfss	status,2,c
  1415  000BE4  D003               	goto	l3407
  1416                           
  1417                           ; BSR set to: 0
  1418                           ;main.c: 127: runTime();
  1419  000BE6  ECD3  F00C         	call	_runTime	;wreg free
  1420                           
  1421                           ;main.c: 129: }
  1422  000BEA  D00D               	goto	l3415
  1423  000BEC                     l3407:
  1424                           
  1425                           ;main.c: 130: else if(key == 'B'){
  1426  000BEC  0E42               	movlw	66
  1427  000BEE  0100               	movlb	0	; () banked
  1428  000BF0  19AA               	xorwf	showInterface@key& (0+255),w,b
  1429  000BF2  A4D8               	btfss	status,2,c
  1430  000BF4  D003               	goto	l3411
  1431                           
  1432                           ; BSR set to: 0
  1433                           ;main.c: 132: runStats();
  1434  000BF6  ECE6  F00C         	call	_runStats	;wreg free
  1435                           
  1436                           ;main.c: 134: }
  1437  000BFA  D005               	goto	l3415
  1438  000BFC                     l3411:
  1439                           
  1440                           ;main.c: 135: else if(key == '*')break;
  1441  000BFC  0E2A               	movlw	42
  1442  000BFE  0100               	movlb	0	; () banked
  1443  000C00  19AA               	xorwf	showInterface@key& (0+255),w,b
  1444  000C02  B4D8               	btfsc	status,2,c
  1445  000C04  D796               	goto	l3363
  1446  000C06                     l3415:
  1447  000C06  EC95  F00C         	call	_readKeypad	;wreg free
  1448  000C0A  0A2A               	xorlw	42
  1449  000C0C  B4D8               	btfsc	status,2,c
  1450  000C0E  D7CF               	goto	l3393
  1451  000C10  D7FA               	goto	l3415
  1452  000C12                     l3417:
  1453                           
  1454                           ;main.c: 141: else if(key == 'B'){
  1455  000C12  0E42               	movlw	66
  1456  000C14  0100               	movlb	0	; () banked
  1457  000C16  19AA               	xorwf	showInterface@key& (0+255),w,b
  1458  000C18  B4D8               	btfsc	status,2,c
  1459  000C1A  0012               	return	
  1460                           
  1461                           ; BSR set to: 0
  1462                           ;main.c: 144: else if(key == '*')
  1463                           
  1464                           ; BSR set to: 0
  1465                           
  1466                           ; BSR set to: 0
  1467                           ;main.c: 143: }
  1468                           
  1469                           ; BSR set to: 0
  1470                           ;main.c: 142: return;
  1471  000C1C  0E2A               	movlw	42
  1472  000C1E  0100               	movlb	0	; () banked
  1473  000C20  19AA               	xorwf	showInterface@key& (0+255),w,b
  1474  000C22  B4D8               	btfsc	status,2,c
  1475  000C24  D77F               	goto	l3359
  1476  000C26  D785               	goto	l3363
  1477  000C28                     __end_of_showInterface:
  1478                           	opt stack 0
  1479                           tblptru	equ	0xFF8
  1480                           tblptrh	equ	0xFF7
  1481                           tblptrl	equ	0xFF6
  1482                           tablat	equ	0xFF5
  1483                           intcon	equ	0xFF2
  1484                           postinc0	equ	0xFEE
  1485                           wreg	equ	0xFE8
  1486                           postdec1	equ	0xFE5
  1487                           fsr1l	equ	0xFE1
  1488                           status	equ	0xFD8
  1489                           
  1490 ;; *************** function _runTime *****************
  1491 ;; Defined at:
  1492 ;;		line 36 in file "interface.c"
  1493 ;; Parameters:    Size  Location     Type
  1494 ;;		None
  1495 ;; Auto vars:     Size  Location     Type
  1496 ;;		None
  1497 ;; Return value:  Size  Location     Type
  1498 ;;                  1    wreg      void 
  1499 ;; Registers used:
  1500 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1501 ;; Tracked objects:
  1502 ;;		On entry : 0/0
  1503 ;;		On exit  : 0/0
  1504 ;;		Unchanged: 0/0
  1505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1509 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1510 ;;Total ram usage:        0 bytes
  1511 ;; Hardware stack levels used:    1
  1512 ;; Hardware stack levels required when called:   12
  1513 ;; This function calls:
  1514 ;;		_lcdClear
  1515 ;;		_printf
  1516 ;; This function is called by:
  1517 ;;		_showInterface
  1518 ;; This function uses a non-reentrant model
  1519 ;;
  1520                           
  1521                           	psect	text2
  1522  0019A6                     __ptext2:
  1523                           	opt stack 0
  1524  0019A6                     _runTime:
  1525                           	opt stack 17
  1526                           
  1527                           ;interface.c: 37: lcdClear();
  1528                           
  1529                           ; BSR set to: 0
  1530                           ;incstack = 0
  1531  0019A6  EC77  F00D         	call	_lcdClear	;wreg free
  1532                           
  1533                           ;interface.c: 38: printf("time: nnn sec   \n");
  1534  0019AA  0E3A               	movlw	low STR_14
  1535  0019AC  0100               	movlb	0	; () banked
  1536  0019AE  6F96               	movwf	printf@f& (0+255),b
  1537  0019B0  0EFF               	movlw	high STR_14
  1538  0019B2  0100               	movlb	0	; () banked
  1539  0019B4  6F97               	movwf	(printf@f+1)& (0+255),b
  1540  0019B6  EC09  F000         	call	_printf	;wreg free
  1541                           
  1542                           ;interface.c: 39: printf("              *>");
  1543  0019BA  0E6F               	movlw	low STR_15
  1544  0019BC  0100               	movlb	0	; () banked
  1545  0019BE  6F96               	movwf	printf@f& (0+255),b
  1546  0019C0  0EFF               	movlw	high STR_15
  1547  0019C2  0100               	movlb	0	; () banked
  1548  0019C4  6F97               	movwf	(printf@f+1)& (0+255),b
  1549  0019C6  EC09  F000         	call	_printf	;wreg free
  1550  0019CA  0012               	return		;funcret
  1551  0019CC                     __end_of_runTime:
  1552                           	opt stack 0
  1553                           tblptru	equ	0xFF8
  1554                           tblptrh	equ	0xFF7
  1555                           tblptrl	equ	0xFF6
  1556                           tablat	equ	0xFF5
  1557                           intcon	equ	0xFF2
  1558                           postinc0	equ	0xFEE
  1559                           wreg	equ	0xFE8
  1560                           postdec1	equ	0xFE5
  1561                           fsr1l	equ	0xFE1
  1562                           status	equ	0xFD8
  1563                           
  1564 ;; *************** function _runStats *****************
  1565 ;; Defined at:
  1566 ;;		line 42 in file "interface.c"
  1567 ;; Parameters:    Size  Location     Type
  1568 ;;		None
  1569 ;; Auto vars:     Size  Location     Type
  1570 ;;		None
  1571 ;; Return value:  Size  Location     Type
  1572 ;;                  1    wreg      void 
  1573 ;; Registers used:
  1574 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1575 ;; Tracked objects:
  1576 ;;		On entry : 0/0
  1577 ;;		On exit  : 0/0
  1578 ;;		Unchanged: 0/0
  1579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1583 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1584 ;;Total ram usage:        0 bytes
  1585 ;; Hardware stack levels used:    1
  1586 ;; Hardware stack levels required when called:   12
  1587 ;; This function calls:
  1588 ;;		_lcdClear
  1589 ;;		_printf
  1590 ;; This function is called by:
  1591 ;;		_showInterface
  1592 ;; This function uses a non-reentrant model
  1593 ;;
  1594                           
  1595                           	psect	text3
  1596  0019CC                     __ptext3:
  1597                           	opt stack 0
  1598  0019CC                     _runStats:
  1599                           	opt stack 17
  1600                           
  1601                           ;interface.c: 43: lcdClear();
  1602                           
  1603                           ;incstack = 0
  1604  0019CC  EC77  F00D         	call	_lcdClear	;wreg free
  1605                           
  1606                           ;interface.c: 44: printf("[AA,9V,C,other] \n");
  1607  0019D0  0E4C               	movlw	low STR_16
  1608  0019D2  0100               	movlb	0	; () banked
  1609  0019D4  6F96               	movwf	printf@f& (0+255),b
  1610  0019D6  0EFF               	movlw	high STR_16
  1611  0019D8  0100               	movlb	0	; () banked
  1612  0019DA  6F97               	movwf	(printf@f+1)& (0+255),b
  1613  0019DC  EC09  F000         	call	_printf	;wreg free
  1614                           
  1615                           ;interface.c: 45: printf("[nn,n,n,nn]   *>");
  1616  0019E0  0EB3               	movlw	low STR_17
  1617  0019E2  0100               	movlb	0	; () banked
  1618  0019E4  6F96               	movwf	printf@f& (0+255),b
  1619  0019E6  0EFF               	movlw	high STR_17
  1620  0019E8  0100               	movlb	0	; () banked
  1621  0019EA  6F97               	movwf	(printf@f+1)& (0+255),b
  1622  0019EC  EC09  F000         	call	_printf	;wreg free
  1623  0019F0  0012               	return		;funcret
  1624  0019F2                     __end_of_runStats:
  1625                           	opt stack 0
  1626                           tblptru	equ	0xFF8
  1627                           tblptrh	equ	0xFF7
  1628                           tblptrl	equ	0xFF6
  1629                           tablat	equ	0xFF5
  1630                           intcon	equ	0xFF2
  1631                           postinc0	equ	0xFEE
  1632                           wreg	equ	0xFE8
  1633                           postdec1	equ	0xFE5
  1634                           fsr1l	equ	0xFE1
  1635                           status	equ	0xFD8
  1636                           
  1637 ;; *************** function _runSelect *****************
  1638 ;; Defined at:
  1639 ;;		line 24 in file "interface.c"
  1640 ;; Parameters:    Size  Location     Type
  1641 ;;		None
  1642 ;; Auto vars:     Size  Location     Type
  1643 ;;		None
  1644 ;; Return value:  Size  Location     Type
  1645 ;;                  1    wreg      void 
  1646 ;; Registers used:
  1647 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1648 ;; Tracked objects:
  1649 ;;		On entry : 0/0
  1650 ;;		On exit  : 0/0
  1651 ;;		Unchanged: 0/0
  1652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1656 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1657 ;;Total ram usage:        0 bytes
  1658 ;; Hardware stack levels used:    1
  1659 ;; Hardware stack levels required when called:   12
  1660 ;; This function calls:
  1661 ;;		_lcdClear
  1662 ;;		_printf
  1663 ;; This function is called by:
  1664 ;;		_showInterface
  1665 ;; This function uses a non-reentrant model
  1666 ;;
  1667                           
  1668                           	psect	text4
  1669  0019F2                     __ptext4:
  1670                           	opt stack 0
  1671  0019F2                     _runSelect:
  1672                           	opt stack 17
  1673                           
  1674                           ;interface.c: 25: lcdClear();
  1675                           
  1676                           ;incstack = 0
  1677  0019F2  EC77  F00D         	call	_lcdClear	;wreg free
  1678                           
  1679                           ;interface.c: 26: printf("select run:     \n");
  1680  0019F6  0E28               	movlw	low STR_10
  1681  0019F8  0100               	movlb	0	; () banked
  1682  0019FA  6F96               	movwf	printf@f& (0+255),b
  1683  0019FC  0EFF               	movlw	high STR_10
  1684  0019FE  0100               	movlb	0	; () banked
  1685  001A00  6F97               	movwf	(printf@f+1)& (0+255),b
  1686  001A02  EC09  F000         	call	_printf	;wreg free
  1687                           
  1688                           ;interface.c: 27: printf("[1,2,3,4]     *>");
  1689  001A06  0E80               	movlw	low STR_11
  1690  001A08  0100               	movlb	0	; () banked
  1691  001A0A  6F96               	movwf	printf@f& (0+255),b
  1692  001A0C  0EFF               	movlw	high STR_11
  1693  001A0E  0100               	movlb	0	; () banked
  1694  001A10  6F97               	movwf	(printf@f+1)& (0+255),b
  1695  001A12  EC09  F000         	call	_printf	;wreg free
  1696  001A16  0012               	return		;funcret
  1697  001A18                     __end_of_runSelect:
  1698                           	opt stack 0
  1699                           tblptru	equ	0xFF8
  1700                           tblptrh	equ	0xFF7
  1701                           tblptrl	equ	0xFF6
  1702                           tablat	equ	0xFF5
  1703                           intcon	equ	0xFF2
  1704                           postinc0	equ	0xFEE
  1705                           wreg	equ	0xFE8
  1706                           postdec1	equ	0xFE5
  1707                           fsr1l	equ	0xFE1
  1708                           status	equ	0xFD8
  1709                           
  1710 ;; *************** function _runMenu *****************
  1711 ;; Defined at:
  1712 ;;		line 30 in file "interface.c"
  1713 ;; Parameters:    Size  Location     Type
  1714 ;;  key             1    wreg     unsigned char 
  1715 ;; Auto vars:     Size  Location     Type
  1716 ;;  key             1   41[BANK0 ] unsigned char 
  1717 ;; Return value:  Size  Location     Type
  1718 ;;                  1    wreg      void 
  1719 ;; Registers used:
  1720 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1721 ;; Tracked objects:
  1722 ;;		On entry : 0/0
  1723 ;;		On exit  : 0/0
  1724 ;;		Unchanged: 0/0
  1725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1727 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1729 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1730 ;;Total ram usage:        1 bytes
  1731 ;; Hardware stack levels used:    1
  1732 ;; Hardware stack levels required when called:   12
  1733 ;; This function calls:
  1734 ;;		_lcdClear
  1735 ;;		_printf
  1736 ;; This function is called by:
  1737 ;;		_showInterface
  1738 ;; This function uses a non-reentrant model
  1739 ;;
  1740                           
  1741                           	psect	text5
  1742  0018F8                     __ptext5:
  1743                           	opt stack 0
  1744  0018F8                     _runMenu:
  1745                           	opt stack 17
  1746                           
  1747                           ;incstack = 0
  1748                           ;runMenu@key stored from wreg
  1749  0018F8  0100               	movlb	0	; () banked
  1750  0018FA  6FA9               	movwf	runMenu@key& (0+255),b
  1751                           
  1752                           ;interface.c: 31: lcdClear();
  1753  0018FC  EC77  F00D         	call	_lcdClear	;wreg free
  1754                           
  1755                           ;interface.c: 32: printf("%c) time  <A     \n",key);
  1756  001900  0EF1               	movlw	low STR_12
  1757  001902  0100               	movlb	0	; () banked
  1758  001904  6F96               	movwf	printf@f& (0+255),b
  1759  001906  0EFE               	movlw	high STR_12
  1760  001908  0100               	movlb	0	; () banked
  1761  00190A  6F97               	movwf	(printf@f+1)& (0+255),b
  1762  00190C  C0A9  F098         	movff	runMenu@key,?_printf+2
  1763  001910  0100               	movlb	0	; () banked
  1764  001912  6B99               	clrf	(?_printf+3)& (0+255),b
  1765  001914  EC09  F000         	call	_printf	;wreg free
  1766                           
  1767                           ;interface.c: 33: printf( "   stats <B   *>");
  1768  001918  0EA2               	movlw	low STR_13
  1769  00191A  0100               	movlb	0	; () banked
  1770  00191C  6F96               	movwf	printf@f& (0+255),b
  1771  00191E  0EFF               	movlw	high STR_13
  1772  001920  0100               	movlb	0	; () banked
  1773  001922  6F97               	movwf	(printf@f+1)& (0+255),b
  1774  001924  EC09  F000         	call	_printf	;wreg free
  1775  001928  0012               	return		;funcret
  1776  00192A                     __end_of_runMenu:
  1777                           	opt stack 0
  1778                           tblptru	equ	0xFF8
  1779                           tblptrh	equ	0xFF7
  1780                           tblptrl	equ	0xFF6
  1781                           tablat	equ	0xFF5
  1782                           intcon	equ	0xFF2
  1783                           postinc0	equ	0xFEE
  1784                           wreg	equ	0xFE8
  1785                           postdec1	equ	0xFE5
  1786                           fsr1l	equ	0xFE1
  1787                           status	equ	0xFD8
  1788                           
  1789 ;; *************** function _readKeypad *****************
  1790 ;; Defined at:
  1791 ;;		line 35 in file "keypad.c"
  1792 ;; Parameters:    Size  Location     Type
  1793 ;;		None
  1794 ;; Auto vars:     Size  Location     Type
  1795 ;;  key             1    0[BANK0 ] unsigned char 
  1796 ;; Return value:  Size  Location     Type
  1797 ;;                  1    wreg      unsigned char 
  1798 ;; Registers used:
  1799 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1800 ;; Tracked objects:
  1801 ;;		On entry : 0/0
  1802 ;;		On exit  : 0/0
  1803 ;;		Unchanged: 0/0
  1804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1806 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1808 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1809 ;;Total ram usage:        1 bytes
  1810 ;; Hardware stack levels used:    1
  1811 ;; Hardware stack levels required when called:    7
  1812 ;; This function calls:
  1813 ;;		Nothing
  1814 ;; This function is called by:
  1815 ;;		_showInterface
  1816 ;; This function uses a non-reentrant model
  1817 ;;
  1818                           
  1819                           	psect	text6
  1820  00192A                     __ptext6:
  1821                           	opt stack 0
  1822  00192A                     _readKeypad:
  1823                           	opt stack 22
  1824  00192A                     l195:
  1825  00192A  A281               	btfss	3969,1,c	;volatile
  1826  00192C  D7FE               	goto	l195
  1827                           
  1828                           ;keypad.c: 37: char key = (PORTB & 0xF0) >> 4;
  1829  00192E  3881               	swapf	3969,w,c	;volatile
  1830  001930  0B0F               	andlw	15
  1831  001932  0B0F               	andlw	15
  1832  001934  0100               	movlb	0	; () banked
  1833  001936  6F80               	movwf	readKeypad@key& (0+255),b
  1834  001938                     l198:
  1835  001938  B281               	btfsc	3969,1,c	;volatile
  1836  00193A  D7FE               	goto	l198
  1837                           
  1838                           ;keypad.c: 39: return keys[key];
  1839  00193C  0100               	movlb	0	; () banked
  1840  00193E  5180               	movf	readKeypad@key& (0+255),w,b
  1841  001940  0D01               	mullw	1
  1842  001942  0ED9               	movlw	low _keys
  1843  001944  24F3               	addwf	prodl,w,c
  1844  001946  6EF6               	movwf	tblptrl,c
  1845  001948  0EFE               	movlw	high _keys
  1846  00194A  20F4               	addwfc	prodh,w,c
  1847  00194C  6EF7               	movwf	tblptrh,c
  1848  00194E                     	if	0	;There are less than 3 active tblptr bytes
  1849  00194E                     	endif
  1850  00194E  0008               	tblrd		*
  1851  001950  50F5               	movf	tablat,w,c
  1852  001952  0012               	return	
  1853  001954                     __end_of_readKeypad:
  1854                           	opt stack 0
  1855                           tblptru	equ	0xFF8
  1856                           tblptrh	equ	0xFF7
  1857                           tblptrl	equ	0xFF6
  1858                           tablat	equ	0xFF5
  1859                           prodh	equ	0xFF4
  1860                           prodl	equ	0xFF3
  1861                           intcon	equ	0xFF2
  1862                           postinc0	equ	0xFEE
  1863                           wreg	equ	0xFE8
  1864                           postdec1	equ	0xFE5
  1865                           fsr1l	equ	0xFE1
  1866                           status	equ	0xFD8
  1867                           
  1868 ;; *************** function _mainMenu *****************
  1869 ;; Defined at:
  1870 ;;		line 18 in file "interface.c"
  1871 ;; Parameters:    Size  Location     Type
  1872 ;;		None
  1873 ;; Auto vars:     Size  Location     Type
  1874 ;;		None
  1875 ;; Return value:  Size  Location     Type
  1876 ;;                  1    wreg      void 
  1877 ;; Registers used:
  1878 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1879 ;; Tracked objects:
  1880 ;;		On entry : 0/0
  1881 ;;		On exit  : 0/0
  1882 ;;		Unchanged: 0/0
  1883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1888 ;;Total ram usage:        0 bytes
  1889 ;; Hardware stack levels used:    1
  1890 ;; Hardware stack levels required when called:   12
  1891 ;; This function calls:
  1892 ;;		_lcdClear
  1893 ;;		_printf
  1894 ;; This function is called by:
  1895 ;;		_showInterface
  1896 ;; This function uses a non-reentrant model
  1897 ;;
  1898                           
  1899                           	psect	text7
  1900  001A18                     __ptext7:
  1901                           	opt stack 0
  1902  001A18                     _mainMenu:
  1903                           	opt stack 17
  1904                           
  1905                           ;interface.c: 19: lcdClear();
  1906                           
  1907                           ; BSR set to: 0
  1908                           ;incstack = 0
  1909  001A18  EC77  F00D         	call	_lcdClear	;wreg free
  1910                           
  1911                           ;interface.c: 20: printf("start   <B      \n");
  1912  001A1C  0E04               	movlw	low STR_8
  1913  001A1E  0100               	movlb	0	; () banked
  1914  001A20  6F96               	movwf	printf@f& (0+255),b
  1915  001A22  0EFF               	movlw	high STR_8
  1916  001A24  0100               	movlb	0	; () banked
  1917  001A26  6F97               	movwf	(printf@f+1)& (0+255),b
  1918  001A28  EC09  F000         	call	_printf	;wreg free
  1919                           
  1920                           ;interface.c: 21: printf("history <C    *>");
  1921  001A2C  0E91               	movlw	low STR_9
  1922  001A2E  0100               	movlb	0	; () banked
  1923  001A30  6F96               	movwf	printf@f& (0+255),b
  1924  001A32  0EFF               	movlw	high STR_9
  1925  001A34  0100               	movlb	0	; () banked
  1926  001A36  6F97               	movwf	(printf@f+1)& (0+255),b
  1927  001A38  EC09  F000         	call	_printf	;wreg free
  1928  001A3C  0012               	return		;funcret
  1929  001A3E                     __end_of_mainMenu:
  1930                           	opt stack 0
  1931                           tblptru	equ	0xFF8
  1932                           tblptrh	equ	0xFF7
  1933                           tblptrl	equ	0xFF6
  1934                           tablat	equ	0xFF5
  1935                           prodh	equ	0xFF4
  1936                           prodl	equ	0xFF3
  1937                           intcon	equ	0xFF2
  1938                           postinc0	equ	0xFEE
  1939                           wreg	equ	0xFE8
  1940                           postdec1	equ	0xFE5
  1941                           fsr1l	equ	0xFE1
  1942                           status	equ	0xFD8
  1943                           
  1944 ;; *************** function _dateTime *****************
  1945 ;; Defined at:
  1946 ;;		line 12 in file "interface.c"
  1947 ;; Parameters:    Size  Location     Type
  1948 ;;		None
  1949 ;; Auto vars:     Size  Location     Type
  1950 ;;		None
  1951 ;; Return value:  Size  Location     Type
  1952 ;;                  1    wreg      void 
  1953 ;; Registers used:
  1954 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1955 ;; Tracked objects:
  1956 ;;		On entry : 0/0
  1957 ;;		On exit  : 0/0
  1958 ;;		Unchanged: 0/0
  1959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1963 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1964 ;;Total ram usage:        0 bytes
  1965 ;; Hardware stack levels used:    1
  1966 ;; Hardware stack levels required when called:   12
  1967 ;; This function calls:
  1968 ;;		_lcdClear
  1969 ;;		_printf
  1970 ;; This function is called by:
  1971 ;;		_showInterface
  1972 ;; This function uses a non-reentrant model
  1973 ;;
  1974                           
  1975                           	psect	text8
  1976  001A3E                     __ptext8:
  1977                           	opt stack 0
  1978  001A3E                     _dateTime:
  1979                           	opt stack 17
  1980                           
  1981                           ;interface.c: 13: lcdClear();
  1982                           
  1983                           ;incstack = 0
  1984  001A3E  EC77  F00D         	call	_lcdClear	;wreg free
  1985                           
  1986                           ;interface.c: 14: printf("  hh:mm:ss      \n");
  1987  001A42  0E16               	movlw	low STR_6
  1988  001A44  0100               	movlb	0	; () banked
  1989  001A46  6F96               	movwf	printf@f& (0+255),b
  1990  001A48  0EFF               	movlw	high STR_6
  1991  001A4A  0100               	movlb	0	; () banked
  1992  001A4C  6F97               	movwf	(printf@f+1)& (0+255),b
  1993  001A4E  EC09  F000         	call	_printf	;wreg free
  1994                           
  1995                           ;interface.c: 15: printf("  mm:dd:yy    A>");
  1996  001A52  0EC4               	movlw	low STR_7
  1997  001A54  0100               	movlb	0	; () banked
  1998  001A56  6F96               	movwf	printf@f& (0+255),b
  1999  001A58  0EFF               	movlw	high STR_7
  2000  001A5A  0100               	movlb	0	; () banked
  2001  001A5C  6F97               	movwf	(printf@f+1)& (0+255),b
  2002  001A5E  EC09  F000         	call	_printf	;wreg free
  2003  001A62  0012               	return		;funcret
  2004  001A64                     __end_of_dateTime:
  2005                           	opt stack 0
  2006                           tblptru	equ	0xFF8
  2007                           tblptrh	equ	0xFF7
  2008                           tblptrl	equ	0xFF6
  2009                           tablat	equ	0xFF5
  2010                           prodh	equ	0xFF4
  2011                           prodl	equ	0xFF3
  2012                           intcon	equ	0xFF2
  2013                           postinc0	equ	0xFEE
  2014                           wreg	equ	0xFE8
  2015                           postdec1	equ	0xFE5
  2016                           fsr1l	equ	0xFE1
  2017                           status	equ	0xFD8
  2018                           
  2019 ;; *************** function _printf *****************
  2020 ;; Defined at:
  2021 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  2022 ;; Parameters:    Size  Location     Type
  2023 ;;  f               2   22[BANK0 ] PTR const unsigned char 
  2024 ;;		 -> STR_17(17), STR_16(18), STR_15(17), STR_14(18), 
  2025 ;;		 -> STR_13(17), STR_12(19), STR_11(17), STR_10(18), 
  2026 ;;		 -> STR_9(17), STR_8(18), STR_7(17), STR_6(18), 
  2027 ;;		 -> STR_5(4), STR_4(9), STR_3(8), STR_2(12), 
  2028 ;;		 -> STR_1(9), 
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;  idx             1   30[BANK0 ] unsigned char 
  2031 ;;  val             4   35[BANK0 ] unsigned long 
  2032 ;;  tmpval          4    0        struct .
  2033 ;;  cp              3    0        PTR const unsigned char 
  2034 ;;  ap              2   33[BANK0 ] PTR void [1]
  2035 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2036 ;;  prec            2   31[BANK0 ] int 
  2037 ;;  len             2    0        unsigned int 
  2038 ;;  c               1   40[BANK0 ] char 
  2039 ;;  flag            1   39[BANK0 ] unsigned char 
  2040 ;; Return value:  Size  Location     Type
  2041 ;;                  2   22[BANK0 ] int 
  2042 ;; Registers used:
  2043 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2044 ;; Tracked objects:
  2045 ;;		On entry : 0/0
  2046 ;;		On exit  : 0/0
  2047 ;;		Unchanged: 0/0
  2048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2049 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2050 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2051 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2052 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2053 ;;Total ram usage:       19 bytes
  2054 ;; Hardware stack levels used:    1
  2055 ;; Hardware stack levels required when called:   11
  2056 ;; This function calls:
  2057 ;;		___lldiv
  2058 ;;		___llmod
  2059 ;;		_putch
  2060 ;; This function is called by:
  2061 ;;		_main
  2062 ;;		_dateTime
  2063 ;;		_mainMenu
  2064 ;;		_runSelect
  2065 ;;		_runMenu
  2066 ;;		_runTime
  2067 ;;		_runStats
  2068 ;;		_testFrequency
  2069 ;; This function uses a non-reentrant model
  2070 ;;
  2071                           
  2072                           	psect	text9
  2073  000012                     __ptext9:
  2074                           	opt stack 0
  2075  000012                     _printf:
  2076                           	opt stack 17
  2077                           
  2078                           ;doprnt.c: 466: va_list ap;
  2079                           ;doprnt.c: 499: signed char c;
  2080                           ;doprnt.c: 504: int prec;
  2081                           ;doprnt.c: 508: unsigned char flag;
  2082                           ;doprnt.c: 523: union {
  2083                           ;doprnt.c: 524: unsigned long vd;
  2084                           ;doprnt.c: 525: double integ;
  2085                           ;doprnt.c: 526: } tmpval;
  2086                           ;doprnt.c: 528: unsigned long val;
  2087                           ;doprnt.c: 529: unsigned len;
  2088                           ;doprnt.c: 530: const char * cp;
  2089                           ;doprnt.c: 533: *ap = __va_start();
  2090                           
  2091                           ;incstack = 0
  2092  000012  0E98               	movlw	low (?_printf+2)
  2093  000014  0100               	movlb	0	; () banked
  2094  000016  6FA1               	movwf	printf@ap& (0+255),b
  2095  000018  0E00               	movlw	high (?_printf+2)
  2096  00001A  0100               	movlb	0	; () banked
  2097  00001C  6FA2               	movwf	(printf@ap+1)& (0+255),b
  2098                           
  2099                           ;doprnt.c: 536: while(c = *f++) {
  2100  00001E  D19D               	goto	l2803
  2101  000020                     l2707:
  2102                           
  2103                           ; BSR set to: 0
  2104                           ;doprnt.c: 538: if(c != '%')
  2105  000020  0E25               	movlw	37
  2106  000022  0100               	movlb	0	; () banked
  2107  000024  19A8               	xorwf	printf@c& (0+255),w,b
  2108  000026  B4D8               	btfsc	status,2,c
  2109  000028  D005               	goto	l2711
  2110                           
  2111                           ; BSR set to: 0
  2112                           ;doprnt.c: 540: {
  2113                           ;doprnt.c: 541: (putch(c) );
  2114  00002A  0100               	movlb	0	; () banked
  2115  00002C  51A8               	movf	printf@c& (0+255),w,b
  2116  00002E  ECBF  F00C         	call	_putch
  2117                           
  2118                           ;doprnt.c: 542: continue;
  2119  000032  D193               	goto	l2803
  2120  000034                     l2711:
  2121                           
  2122                           ;doprnt.c: 543: }
  2123                           ;doprnt.c: 548: flag = 0;
  2124  000034  0E00               	movlw	0
  2125  000036  0100               	movlb	0	; () banked
  2126  000038  6FA7               	movwf	printf@flag& (0+255),b
  2127                           
  2128                           ; BSR set to: 0
  2129                           ;doprnt.c: 635: switch(c = *f++) {
  2130                           
  2131                           ;doprnt.c: 633: loop:
  2132  00003A  D017               	goto	l2725
  2133  00003C                     l2713:
  2134                           
  2135                           ; BSR set to: 0
  2136                           ;doprnt.c: 643: flag |= 0x10;
  2137  00003C  0100               	movlb	0	; () banked
  2138  00003E  89A7               	bsf	printf@flag& (0+255),4,b
  2139                           
  2140                           ;doprnt.c: 644: goto loop;
  2141  000040  D014               	goto	l2725
  2142  000042                     l2715:
  2143                           
  2144                           ; BSR set to: 0
  2145                           ;doprnt.c: 721: flag |= 0x80;
  2146  000042  0100               	movlb	0	; () banked
  2147  000044  8FA7               	bsf	printf@flag& (0+255),7,b
  2148                           
  2149                           ;doprnt.c: 723: break;
  2150  000046  D030               	goto	l569
  2151  000048                     l2717:
  2152                           
  2153                           ; BSR set to: 0
  2154                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2155  000048  C0A1  FFD9         	movff	printf@ap,fsr2l
  2156  00004C  C0A2  FFDA         	movff	printf@ap+1,fsr2h
  2157  000050  50DF               	movf	indf2,w,c
  2158  000052  0100               	movlb	0	; () banked
  2159  000054  6FA8               	movwf	printf@c& (0+255),b
  2160                           
  2161                           ; BSR set to: 0
  2162  000056  0E02               	movlw	2
  2163  000058  0100               	movlb	0	; () banked
  2164  00005A  27A1               	addwf	printf@ap& (0+255),f,b
  2165  00005C  0E00               	movlw	0
  2166  00005E  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
  2167  000060                     l2721:
  2168                           
  2169                           ; BSR set to: 0
  2170                           ;doprnt.c: 809: (putch(c) );
  2171  000060  0100               	movlb	0	; () banked
  2172  000062  51A8               	movf	printf@c& (0+255),w,b
  2173  000064  ECBF  F00C         	call	_putch
  2174                           
  2175                           ;doprnt.c: 810: continue;
  2176  000068  D178               	goto	l2803
  2177  00006A                     l2725:
  2178  00006A  C096  FFF6         	movff	printf@f,tblptrl
  2179  00006E  C097  FFF7         	movff	printf@f+1,tblptrh
  2180  000072  0100               	movlb	0	; () banked
  2181  000074  4B96               	infsnz	printf@f& (0+255),f,b
  2182  000076  2B97               	incf	(printf@f+1)& (0+255),f,b
  2183  000078                     	if	0	;tblptru may be non-zero
  2184  000078                     	endif
  2185  000078                     	if	0	;tblptru may be non-zero
  2186  000078                     	endif
  2187  000078  0008               	tblrd		*
  2188  00007A  CFF5 F0A8          	movff	tablat,printf@c
  2189  00007E  0100               	movlb	0	; () banked
  2190  000080  51A8               	movf	printf@c& (0+255),w,b
  2191                           
  2192                           ; Switch size 1, requested type "space"
  2193                           ; Number of cases is 6, Range of values is 0 to 120
  2194                           ; switch strategies available:
  2195                           ; Name         Instructions Cycles
  2196                           ; simple_byte           19    10 (average)
  2197                           ;	Chosen strategy is simple_byte
  2198  000082  0A00               	xorlw	0	; case 0
  2199  000084  B4D8               	btfsc	status,2,c
  2200  000086  0012               	return	
  2201  000088  0A63               	xorlw	99	; case 99
  2202  00008A  B4D8               	btfsc	status,2,c
  2203  00008C  D7DD               	goto	l2717
  2204  00008E  0A07               	xorlw	7	; case 100
  2205  000090  B4D8               	btfsc	status,2,c
  2206  000092  D00A               	goto	l569
  2207  000094  0A0D               	xorlw	13	; case 105
  2208  000096  B4D8               	btfsc	status,2,c
  2209  000098  D007               	goto	l569
  2210  00009A  0A05               	xorlw	5	; case 108
  2211  00009C  B4D8               	btfsc	status,2,c
  2212  00009E  D7CE               	goto	l2713
  2213  0000A0  0A14               	xorlw	20	; case 120
  2214  0000A2  B4D8               	btfsc	status,2,c
  2215  0000A4  D7CE               	goto	l2715
  2216  0000A6  D7DC               	goto	l2721
  2217  0000A8                     l569:
  2218                           
  2219                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2220  0000A8  0100               	movlb	0	; () banked
  2221  0000AA  BFA7               	btfsc	printf@flag& (0+255),7,b
  2222  0000AC  D034               	goto	l573
  2223                           
  2224                           ; BSR set to: 0
  2225                           ;doprnt.c: 1253: {
  2226                           ;doprnt.c: 1255: if(flag & 0x10)
  2227  0000AE  0100               	movlb	0	; () banked
  2228  0000B0  A9A7               	btfss	printf@flag& (0+255),4,b
  2229  0000B2  D00E               	goto	l2733
  2230                           
  2231                           ; BSR set to: 0
  2232                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  2233  0000B4  C0A1  FFD9         	movff	printf@ap,fsr2l
  2234  0000B8  C0A2  FFDA         	movff	printf@ap+1,fsr2h
  2235  0000BC  CFDE F0A3          	movff	postinc2,printf@val
  2236  0000C0  CFDE F0A4          	movff	postinc2,printf@val+1
  2237  0000C4  CFDE F0A5          	movff	postinc2,printf@val+2
  2238  0000C8  CFDE F0A6          	movff	postinc2,printf@val+3
  2239                           
  2240                           ; BSR set to: 0
  2241  0000CC  0E04               	movlw	4
  2242  0000CE  D00F               	goto	L1
  2243  0000D0                     l2733:
  2244                           
  2245                           ; BSR set to: 0
  2246                           ;doprnt.c: 1257: else
  2247                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2248  0000D0  C0A1  FFD9         	movff	printf@ap,fsr2l
  2249  0000D4  C0A2  FFDA         	movff	printf@ap+1,fsr2h
  2250  0000D8  CFDE F0A3          	movff	postinc2,printf@val
  2251  0000DC  CFDD F0A4          	movff	postdec2,printf@val+1
  2252  0000E0  0100               	movlb	0	; () banked
  2253  0000E2  0E00               	movlw	0
  2254  0000E4  BFA4               	btfsc	(printf@val+1)& (0+255),7,b
  2255  0000E6  0EFF               	movlw	-1
  2256  0000E8  6FA5               	movwf	(printf@val+2)& (0+255),b
  2257  0000EA  6FA6               	movwf	(printf@val+3)& (0+255),b
  2258                           
  2259                           ; BSR set to: 0
  2260  0000EC  0E02               	movlw	2
  2261  0000EE                     L1:
  2262  0000EE  0100               	movlb	0	; () banked
  2263  0000F0  27A1               	addwf	printf@ap& (0+255),f,b
  2264  0000F2  0E00               	movlw	0
  2265  0000F4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
  2266                           
  2267                           ; BSR set to: 0
  2268                           ;doprnt.c: 1261: if((long)val < 0) {
  2269                           
  2270                           ; BSR set to: 0
  2271  0000F6  0100               	movlb	0	; () banked
  2272  0000F8  AFA6               	btfss	(printf@val+3)& (0+255),7,b
  2273  0000FA  D07F               	goto	l2781
  2274                           
  2275                           ; BSR set to: 0
  2276                           ;doprnt.c: 1262: flag |= 0x03;
  2277  0000FC  0E03               	movlw	3
  2278  0000FE  0100               	movlb	0	; () banked
  2279  000100  13A7               	iorwf	printf@flag& (0+255),f,b
  2280                           
  2281                           ; BSR set to: 0
  2282                           ;doprnt.c: 1263: val = -val;
  2283  000102  0100               	movlb	0	; () banked
  2284  000104  1FA6               	comf	(printf@val+3)& (0+255),f,b
  2285  000106  1FA5               	comf	(printf@val+2)& (0+255),f,b
  2286  000108  1FA4               	comf	(printf@val+1)& (0+255),f,b
  2287  00010A  6DA3               	negf	printf@val& (0+255),b
  2288  00010C  0E00               	movlw	0
  2289  00010E  23A4               	addwfc	(printf@val+1)& (0+255),f,b
  2290  000110  23A5               	addwfc	(printf@val+2)& (0+255),f,b
  2291  000112  23A6               	addwfc	(printf@val+3)& (0+255),f,b
  2292                           
  2293                           ; BSR set to: 0
  2294                           ;doprnt.c: 1264: }
  2295                           ;doprnt.c: 1266: }
  2296  000114  D072               	goto	l2781
  2297  000116                     l573:
  2298                           
  2299                           ; BSR set to: 0
  2300                           ;doprnt.c: 1268: else
  2301                           ;doprnt.c: 1273: {
  2302                           ;doprnt.c: 1281: if(flag & 0x10)
  2303  000116  0100               	movlb	0	; () banked
  2304  000118  A9A7               	btfss	printf@flag& (0+255),4,b
  2305  00011A  D00E               	goto	l2747
  2306                           
  2307                           ; BSR set to: 0
  2308                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2309  00011C  C0A1  FFD9         	movff	printf@ap,fsr2l
  2310  000120  C0A2  FFDA         	movff	printf@ap+1,fsr2h
  2311  000124  CFDE F0A3          	movff	postinc2,printf@val
  2312  000128  CFDE F0A4          	movff	postinc2,printf@val+1
  2313  00012C  CFDE F0A5          	movff	postinc2,printf@val+2
  2314  000130  CFDE F0A6          	movff	postinc2,printf@val+3
  2315                           
  2316                           ; BSR set to: 0
  2317  000134  0E04               	movlw	4
  2318  000136  D010               	goto	L2
  2319  000138                     l2747:
  2320                           
  2321                           ; BSR set to: 0
  2322                           ;doprnt.c: 1283: else
  2323                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2324  000138  C0A1  FFD9         	movff	printf@ap,fsr2l
  2325  00013C  C0A2  FFDA         	movff	printf@ap+1,fsr2h
  2326  000140  CFDE F09C          	movff	postinc2,??_printf
  2327  000144  CFDD F09D          	movff	postdec2,??_printf+1
  2328  000148  C09C  F0A3         	movff	??_printf,printf@val
  2329  00014C  C09D  F0A4         	movff	??_printf+1,printf@val+1
  2330  000150  0100               	movlb	0	; () banked
  2331  000152  6BA5               	clrf	(printf@val+2)& (0+255),b
  2332  000154  6BA6               	clrf	(printf@val+3)& (0+255),b
  2333                           
  2334                           ; BSR set to: 0
  2335  000156  0E02               	movlw	2
  2336  000158                     L2:
  2337  000158  0100               	movlb	0	; () banked
  2338  00015A  27A1               	addwf	printf@ap& (0+255),f,b
  2339  00015C  0E00               	movlw	0
  2340  00015E  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
  2341                           
  2342                           ; BSR set to: 0
  2343                           ;doprnt.c: 1287: }
  2344                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2345                           
  2346                           ; BSR set to: 0
  2347  000160  D04C               	goto	l2781
  2348  000162                     l2751:
  2349                           
  2350                           ; BSR set to: 0
  2351                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2352  000162  0E01               	movlw	1
  2353  000164  0100               	movlb	0	; () banked
  2354  000166  6FA8               	movwf	printf@c& (0+255),b
  2355  000168                     l2753:
  2356                           
  2357                           ; BSR set to: 0
  2358  000168  0E0A               	movlw	10
  2359  00016A  0100               	movlb	0	; () banked
  2360  00016C  19A8               	xorwf	printf@c& (0+255),w,b
  2361  00016E  B4D8               	btfsc	status,2,c
  2362  000170  D04D               	goto	l2783
  2363                           
  2364                           ; BSR set to: 0
  2365                           ;doprnt.c: 1306: if(val < dpowers[c])
  2366                           
  2367                           ; BSR set to: 0
  2368                           
  2369                           ; BSR set to: 0
  2370  000172  0100               	movlb	0	; () banked
  2371  000174  51A8               	movf	printf@c& (0+255),w,b
  2372  000176  0D04               	mullw	4
  2373  000178  0E91               	movlw	low _dpowers
  2374  00017A  24F3               	addwf	prodl,w,c
  2375  00017C  6EF6               	movwf	tblptrl,c
  2376  00017E  0EFE               	movlw	high _dpowers
  2377  000180  20F4               	addwfc	prodh,w,c
  2378  000182  6EF7               	movwf	tblptrh,c
  2379  000184                     	if	0	;There are less than 3 active tblptr bytes
  2380  000184                     	endif
  2381  000184  0009               	tblrd		*+
  2382  000186  50F5               	movf	tablat,w,c
  2383  000188  0100               	movlb	0	; () banked
  2384  00018A  5DA3               	subwf	printf@val& (0+255),w,b
  2385  00018C  0009               	tblrd		*+
  2386  00018E  50F5               	movf	tablat,w,c
  2387  000190  0100               	movlb	0	; () banked
  2388  000192  59A4               	subwfb	(printf@val+1)& (0+255),w,b
  2389  000194  0009               	tblrd		*+
  2390  000196  50F5               	movf	tablat,w,c
  2391  000198  0100               	movlb	0	; () banked
  2392  00019A  59A5               	subwfb	(printf@val+2)& (0+255),w,b
  2393  00019C  0009               	tblrd		*+
  2394  00019E  50F5               	movf	tablat,w,c
  2395  0001A0  0100               	movlb	0	; () banked
  2396  0001A2  59A6               	subwfb	(printf@val+3)& (0+255),w,b
  2397  0001A4  A0D8               	btfss	status,0,c
  2398  0001A6  D032               	goto	l2783
  2399                           
  2400                           ; BSR set to: 0
  2401                           
  2402                           ; BSR set to: 0
  2403                           
  2404                           ; BSR set to: 0
  2405                           ;doprnt.c: 1307: break;
  2406  0001A8  0100               	movlb	0	; () banked
  2407  0001AA  2BA8               	incf	printf@c& (0+255),f,b
  2408  0001AC  D7DD               	goto	l2753
  2409  0001AE                     l2765:
  2410                           
  2411                           ; BSR set to: 0
  2412                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2413  0001AE  0E01               	movlw	1
  2414  0001B0  0100               	movlb	0	; () banked
  2415  0001B2  6FA8               	movwf	printf@c& (0+255),b
  2416  0001B4                     l2767:
  2417                           
  2418                           ; BSR set to: 0
  2419  0001B4  0E08               	movlw	8
  2420  0001B6  0100               	movlb	0	; () banked
  2421  0001B8  19A8               	xorwf	printf@c& (0+255),w,b
  2422  0001BA  B4D8               	btfsc	status,2,c
  2423  0001BC  D027               	goto	l2783
  2424                           
  2425                           ; BSR set to: 0
  2426                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2427                           
  2428                           ; BSR set to: 0
  2429                           
  2430                           ; BSR set to: 0
  2431  0001BE  0100               	movlb	0	; () banked
  2432  0001C0  51A8               	movf	printf@c& (0+255),w,b
  2433  0001C2  0D04               	mullw	4
  2434  0001C4  0EB9               	movlw	low _hexpowers
  2435  0001C6  24F3               	addwf	prodl,w,c
  2436  0001C8  6EF6               	movwf	tblptrl,c
  2437  0001CA  0EFE               	movlw	high _hexpowers
  2438  0001CC  20F4               	addwfc	prodh,w,c
  2439  0001CE  6EF7               	movwf	tblptrh,c
  2440  0001D0                     	if	0	;There are less than 3 active tblptr bytes
  2441  0001D0                     	endif
  2442  0001D0  0009               	tblrd		*+
  2443  0001D2  50F5               	movf	tablat,w,c
  2444  0001D4  0100               	movlb	0	; () banked
  2445  0001D6  5DA3               	subwf	printf@val& (0+255),w,b
  2446  0001D8  0009               	tblrd		*+
  2447  0001DA  50F5               	movf	tablat,w,c
  2448  0001DC  0100               	movlb	0	; () banked
  2449  0001DE  59A4               	subwfb	(printf@val+1)& (0+255),w,b
  2450  0001E0  0009               	tblrd		*+
  2451  0001E2  50F5               	movf	tablat,w,c
  2452  0001E4  0100               	movlb	0	; () banked
  2453  0001E6  59A5               	subwfb	(printf@val+2)& (0+255),w,b
  2454  0001E8  0009               	tblrd		*+
  2455  0001EA  50F5               	movf	tablat,w,c
  2456  0001EC  0100               	movlb	0	; () banked
  2457  0001EE  59A6               	subwfb	(printf@val+3)& (0+255),w,b
  2458  0001F0  A0D8               	btfss	status,0,c
  2459  0001F2  D00C               	goto	l2783
  2460                           
  2461                           ; BSR set to: 0
  2462                           
  2463                           ; BSR set to: 0
  2464                           
  2465                           ; BSR set to: 0
  2466                           ;doprnt.c: 1318: break;
  2467  0001F4  0100               	movlb	0	; () banked
  2468  0001F6  2BA8               	incf	printf@c& (0+255),f,b
  2469  0001F8  D7DD               	goto	l2767
  2470  0001FA                     l2781:
  2471                           
  2472                           ; BSR set to: 0
  2473  0001FA  0100               	movlb	0	; () banked
  2474  0001FC  51A7               	movf	printf@flag& (0+255),w,b
  2475  0001FE  0B80               	andlw	128
  2476                           
  2477                           ; Switch size 1, requested type "space"
  2478                           ; Number of cases is 2, Range of values is 0 to 128
  2479                           ; switch strategies available:
  2480                           ; Name         Instructions Cycles
  2481                           ; simple_byte            7     4 (average)
  2482                           ;	Chosen strategy is simple_byte
  2483  000200  0A00               	xorlw	0	; case 0
  2484  000202  B4D8               	btfsc	status,2,c
  2485  000204  D7AE               	goto	l2751
  2486  000206  0A80               	xorlw	128	; case 128
  2487  000208  B4D8               	btfsc	status,2,c
  2488  00020A  D7D1               	goto	l2765
  2489  00020C                     l2783:
  2490                           
  2491                           ; BSR set to: 0
  2492                           ;doprnt.c: 1422: {
  2493                           ;doprnt.c: 1438: if(flag & 0x03)
  2494  00020C  C0A7  F09C         	movff	printf@flag,??_printf
  2495  000210  0E03               	movlw	3
  2496  000212  0100               	movlb	0	; () banked
  2497  000214  179C               	andwf	??_printf& (0+255),f,b
  2498  000216  B4D8               	btfsc	status,2,c
  2499  000218  D003               	goto	l2787
  2500                           
  2501                           ; BSR set to: 0
  2502                           ;doprnt.c: 1439: (putch('-') );
  2503  00021A  0E2D               	movlw	45
  2504  00021C  ECBF  F00C         	call	_putch
  2505  000220                     l2787:
  2506                           
  2507                           ;doprnt.c: 1469: }
  2508                           ;doprnt.c: 1472: prec = c;
  2509  000220  0100               	movlb	0	; () banked
  2510  000222  51A8               	movf	printf@c& (0+255),w,b
  2511  000224  0100               	movlb	0	; () banked
  2512  000226  6F9F               	movwf	printf@prec& (0+255),b
  2513  000228  6BA0               	clrf	(printf@prec+1)& (0+255),b
  2514  00022A  BF9F               	btfsc	printf@prec& (0+255),7,b
  2515  00022C  07A0               	decf	(printf@prec+1)& (0+255),f,b
  2516                           
  2517                           ;doprnt.c: 1474: while(prec--) {
  2518  00022E  D08A               	goto	l2801
  2519  000230                     l2789:
  2520                           
  2521                           ; BSR set to: 0
  2522                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2523  000230  C09F  F09C         	movff	printf@prec,??_printf
  2524  000234  C0A0  F09D         	movff	printf@prec+1,??_printf+1
  2525  000238  0100               	movlb	0	; () banked
  2526  00023A  90D8               	bcf	status,0,c
  2527  00023C  379C               	rlcf	??_printf& (0+255),f,b
  2528  00023E  379D               	rlcf	(??_printf+1)& (0+255),f,b
  2529  000240  0100               	movlb	0	; () banked
  2530  000242  90D8               	bcf	status,0,c
  2531  000244  379C               	rlcf	??_printf& (0+255),f,b
  2532  000246  379D               	rlcf	(??_printf+1)& (0+255),f,b
  2533  000248  0E91               	movlw	low _dpowers
  2534  00024A  0100               	movlb	0	; () banked
  2535  00024C  259C               	addwf	??_printf& (0+255),w,b
  2536  00024E  6EF6               	movwf	tblptrl,c
  2537  000250  0EFE               	movlw	high _dpowers
  2538  000252  219D               	addwfc	(??_printf+1)& (0+255),w,b
  2539  000254  6EF7               	movwf	tblptrh,c
  2540  000256                     	if	0	;There are less than 3 active tblptr bytes
  2541  000256                     	endif
  2542  000256  0009               	tblrd		*+
  2543  000258  CFF5 F084          	movff	tablat,___lldiv@divisor
  2544  00025C  0009               	tblrd		*+
  2545  00025E  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  2546  000262  0009               	tblrd		*+
  2547  000264  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  2548  000268  000A               	tblrd		*-
  2549  00026A  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  2550  00026E  C0A3  F080         	movff	printf@val,___lldiv@dividend
  2551  000272  C0A4  F081         	movff	printf@val+1,___lldiv@dividend+1
  2552  000276  C0A5  F082         	movff	printf@val+2,___lldiv@dividend+2
  2553  00027A  C0A6  F083         	movff	printf@val+3,___lldiv@dividend+3
  2554  00027E  EC5C  F008         	call	___lldiv	;wreg free
  2555  000282  C080  F08D         	movff	?___lldiv,___llmod@dividend
  2556  000286  C081  F08E         	movff	?___lldiv+1,___llmod@dividend+1
  2557  00028A  C082  F08F         	movff	?___lldiv+2,___llmod@dividend+2
  2558  00028E  C083  F090         	movff	?___lldiv+3,___llmod@dividend+3
  2559  000292  0E0A               	movlw	10
  2560  000294  0100               	movlb	0	; () banked
  2561  000296  6F91               	movwf	___llmod@divisor& (0+255),b
  2562  000298  0E00               	movlw	0
  2563  00029A  6F92               	movwf	(___llmod@divisor+1)& (0+255),b
  2564  00029C  0E00               	movlw	0
  2565  00029E  6F93               	movwf	(___llmod@divisor+2)& (0+255),b
  2566  0002A0  0E00               	movlw	0
  2567  0002A2  6F94               	movwf	(___llmod@divisor+3)& (0+255),b
  2568  0002A4  EC14  F00A         	call	___llmod	;wreg free
  2569  0002A8  0100               	movlb	0	; () banked
  2570  0002AA  518D               	movf	?___llmod& (0+255),w,b
  2571  0002AC  0F30               	addlw	48
  2572  0002AE  0100               	movlb	0	; () banked
  2573  0002B0  6FA8               	movwf	printf@c& (0+255),b
  2574                           
  2575                           ;doprnt.c: 1491: break;
  2576  0002B2  D044               	goto	l2799
  2577  0002B4                     l2791:
  2578                           
  2579                           ; BSR set to: 0
  2580                           ;doprnt.c: 1499: {
  2581                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2582  0002B4  C0A3  F080         	movff	printf@val,___lldiv@dividend
  2583  0002B8  C0A4  F081         	movff	printf@val+1,___lldiv@dividend+1
  2584  0002BC  C0A5  F082         	movff	printf@val+2,___lldiv@dividend+2
  2585  0002C0  C0A6  F083         	movff	printf@val+3,___lldiv@dividend+3
  2586  0002C4  C09F  F09C         	movff	printf@prec,??_printf
  2587  0002C8  C0A0  F09D         	movff	printf@prec+1,??_printf+1
  2588  0002CC  0100               	movlb	0	; () banked
  2589  0002CE  90D8               	bcf	status,0,c
  2590  0002D0  379C               	rlcf	??_printf& (0+255),f,b
  2591  0002D2  379D               	rlcf	(??_printf+1)& (0+255),f,b
  2592  0002D4  0100               	movlb	0	; () banked
  2593  0002D6  90D8               	bcf	status,0,c
  2594  0002D8  379C               	rlcf	??_printf& (0+255),f,b
  2595  0002DA  379D               	rlcf	(??_printf+1)& (0+255),f,b
  2596  0002DC  0EB9               	movlw	low _hexpowers
  2597  0002DE  0100               	movlb	0	; () banked
  2598  0002E0  259C               	addwf	??_printf& (0+255),w,b
  2599  0002E2  6EF6               	movwf	tblptrl,c
  2600  0002E4  0EFE               	movlw	high _hexpowers
  2601  0002E6  219D               	addwfc	(??_printf+1)& (0+255),w,b
  2602  0002E8  6EF7               	movwf	tblptrh,c
  2603  0002EA                     	if	0	;There are less than 3 active tblptr bytes
  2604  0002EA                     	endif
  2605  0002EA  0009               	tblrd		*+
  2606  0002EC  CFF5 F084          	movff	tablat,___lldiv@divisor
  2607  0002F0  0009               	tblrd		*+
  2608  0002F2  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  2609  0002F6  0009               	tblrd		*+
  2610  0002F8  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  2611  0002FC  000A               	tblrd		*-
  2612  0002FE  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  2613  000302  EC5C  F008         	call	___lldiv	;wreg free
  2614  000306  0100               	movlb	0	; () banked
  2615  000308  5180               	movf	?___lldiv& (0+255),w,b
  2616  00030A  0B0F               	andlw	15
  2617  00030C  0100               	movlb	0	; () banked
  2618  00030E  6F9E               	movwf	printf@idx& (0+255),b
  2619                           
  2620                           ; BSR set to: 0
  2621                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2622  000310  0100               	movlb	0	; () banked
  2623  000312  519E               	movf	printf@idx& (0+255),w,b
  2624  000314  0D01               	mullw	1
  2625  000316  0E5E               	movlw	low STR_18
  2626  000318  24F3               	addwf	prodl,w,c
  2627  00031A  6EF6               	movwf	tblptrl,c
  2628  00031C  0EFF               	movlw	high STR_18
  2629  00031E  20F4               	addwfc	prodh,w,c
  2630  000320  6EF7               	movwf	tblptrh,c
  2631  000322                     	if	0	;There are less than 3 active tblptr bytes
  2632  000322                     	endif
  2633  000322  0008               	tblrd		*
  2634  000324  CFF5 F0A8          	movff	tablat,printf@c
  2635                           
  2636                           ; BSR set to: 0
  2637                           ;doprnt.c: 1523: }
  2638                           
  2639                           ;doprnt.c: 1508: }
  2640                           ;doprnt.c: 1510: break;
  2641  000328  D009               	goto	l2799
  2642  00032A                     l2797:
  2643                           
  2644                           ; BSR set to: 0
  2645  00032A  0100               	movlb	0	; () banked
  2646  00032C  51A7               	movf	printf@flag& (0+255),w,b
  2647  00032E  0B80               	andlw	128
  2648                           
  2649                           ; Switch size 1, requested type "space"
  2650                           ; Number of cases is 2, Range of values is 0 to 128
  2651                           ; switch strategies available:
  2652                           ; Name         Instructions Cycles
  2653                           ; simple_byte            7     4 (average)
  2654                           ;	Chosen strategy is simple_byte
  2655  000330  0A00               	xorlw	0	; case 0
  2656  000332  B4D8               	btfsc	status,2,c
  2657  000334  D77D               	goto	l2789
  2658  000336  0A80               	xorlw	128	; case 128
  2659  000338  B4D8               	btfsc	status,2,c
  2660  00033A  D7BC               	goto	l2791
  2661  00033C                     l2799:
  2662                           
  2663                           ; BSR set to: 0
  2664                           ;doprnt.c: 1524: (putch(c) );
  2665  00033C  0100               	movlb	0	; () banked
  2666  00033E  51A8               	movf	printf@c& (0+255),w,b
  2667  000340  ECBF  F00C         	call	_putch
  2668  000344                     l2801:
  2669  000344  0100               	movlb	0	; () banked
  2670  000346  079F               	decf	printf@prec& (0+255),f,b
  2671  000348  A0D8               	btfss	status,0,c
  2672  00034A  07A0               	decf	(printf@prec+1)& (0+255),f,b
  2673  00034C  0100               	movlb	0	; () banked
  2674  00034E  299F               	incf	printf@prec& (0+255),w,b
  2675  000350  E1EC               	bnz	l2797
  2676  000352  0100               	movlb	0	; () banked
  2677  000354  29A0               	incf	(printf@prec+1)& (0+255),w,b
  2678  000356  A4D8               	btfss	status,2,c
  2679  000358  D7E8               	goto	l2797
  2680  00035A                     l2803:
  2681  00035A  C096  FFF6         	movff	printf@f,tblptrl
  2682  00035E  C097  FFF7         	movff	printf@f+1,tblptrh
  2683  000362  0100               	movlb	0	; () banked
  2684  000364  4B96               	infsnz	printf@f& (0+255),f,b
  2685  000366  2B97               	incf	(printf@f+1)& (0+255),f,b
  2686  000368                     	if	0	;tblptru may be non-zero
  2687  000368                     	endif
  2688  000368                     	if	0	;tblptru may be non-zero
  2689  000368                     	endif
  2690  000368  0008               	tblrd		*
  2691  00036A  CFF5 F0A8          	movff	tablat,printf@c
  2692  00036E  0100               	movlb	0	; () banked
  2693  000370  51A8               	movf	printf@c& (0+255),w,b
  2694  000372  B4D8               	btfsc	status,2,c
  2695  000374  0012               	return	
  2696  000376  D654               	goto	l2707
  2697  000378                     __end_of_printf:
  2698                           	opt stack 0
  2699                           tblptru	equ	0xFF8
  2700                           tblptrh	equ	0xFF7
  2701                           tblptrl	equ	0xFF6
  2702                           tablat	equ	0xFF5
  2703                           prodh	equ	0xFF4
  2704                           prodl	equ	0xFF3
  2705                           intcon	equ	0xFF2
  2706                           postinc0	equ	0xFEE
  2707                           wreg	equ	0xFE8
  2708                           postdec1	equ	0xFE5
  2709                           fsr1l	equ	0xFE1
  2710                           indf2	equ	0xFDF
  2711                           postinc2	equ	0xFDE
  2712                           postdec2	equ	0xFDD
  2713                           fsr2h	equ	0xFDA
  2714                           fsr2l	equ	0xFD9
  2715                           status	equ	0xFD8
  2716                           
  2717 ;; *************** function _putch *****************
  2718 ;; Defined at:
  2719 ;;		line 35 in file "lcd.c"
  2720 ;; Parameters:    Size  Location     Type
  2721 ;;  data            1    wreg     unsigned char 
  2722 ;; Auto vars:     Size  Location     Type
  2723 ;;  data            1    4[BANK0 ] unsigned char 
  2724 ;; Return value:  Size  Location     Type
  2725 ;;                  1    wreg      void 
  2726 ;; Registers used:
  2727 ;;		wreg, status,2, status,0, cstack
  2728 ;; Tracked objects:
  2729 ;;		On entry : 0/0
  2730 ;;		On exit  : 0/0
  2731 ;;		Unchanged: 0/0
  2732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2734 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2736 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2737 ;;Total ram usage:        1 bytes
  2738 ;; Hardware stack levels used:    1
  2739 ;; Hardware stack levels required when called:   10
  2740 ;; This function calls:
  2741 ;;		_lcdNewline
  2742 ;;		_lcdNibble
  2743 ;; This function is called by:
  2744 ;;		_printf
  2745 ;; This function uses a non-reentrant model
  2746 ;;
  2747                           
  2748                           	psect	text10
  2749  00197E                     __ptext10:
  2750                           	opt stack 0
  2751  00197E                     _putch:
  2752                           	opt stack 17
  2753                           
  2754                           ; BSR set to: 0
  2755                           ;incstack = 0
  2756                           ;putch@data stored from wreg
  2757  00197E  0100               	movlb	0	; () banked
  2758  001980  6F84               	movwf	putch@data& (0+255),b
  2759                           
  2760                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  2761  001982  0E0A               	movlw	10
  2762  001984  0100               	movlb	0	; () banked
  2763  001986  1984               	xorwf	putch@data& (0+255),w,b
  2764  001988  A4D8               	btfss	status,2,c
  2765  00198A  D003               	goto	l161
  2766                           
  2767                           ; BSR set to: 0
  2768  00198C  EC73  F00D         	call	_lcdNewline	;wreg free
  2769  001990  0012               	return	
  2770  001992                     l161:
  2771                           
  2772                           ; BSR set to: 0
  2773                           ;lcd.c: 37: else
  2774                           ;lcd.c: 38: {
  2775                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  2776  001992  848C               	bsf	3980,2,c	;volatile
  2777                           
  2778                           ; BSR set to: 0
  2779                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  2780  001994  0E74               	movlw	116
  2781  001996                     u3277:
  2782  001996  2EE8               	decfsz	wreg,f,c
  2783  001998  D7FE               	bra	u3277
  2784  00199A  D000               	nop2	
  2785                           
  2786                           ;lcd.c: 41: lcdNibble(data);
  2787  00199C  0100               	movlb	0	; () banked
  2788  00199E  5184               	movf	putch@data& (0+255),w,b
  2789  0019A0  ECA2  F00A         	call	_lcdNibble
  2790  0019A4  0012               	return	
  2791  0019A6                     __end_of_putch:
  2792                           	opt stack 0
  2793                           tblptru	equ	0xFF8
  2794                           tblptrh	equ	0xFF7
  2795                           tblptrl	equ	0xFF6
  2796                           tablat	equ	0xFF5
  2797                           prodh	equ	0xFF4
  2798                           prodl	equ	0xFF3
  2799                           intcon	equ	0xFF2
  2800                           postinc0	equ	0xFEE
  2801                           wreg	equ	0xFE8
  2802                           postdec1	equ	0xFE5
  2803                           fsr1l	equ	0xFE1
  2804                           indf2	equ	0xFDF
  2805                           postinc2	equ	0xFDE
  2806                           postdec2	equ	0xFDD
  2807                           fsr2h	equ	0xFDA
  2808                           fsr2l	equ	0xFD9
  2809                           status	equ	0xFD8
  2810                           
  2811 ;; *************** function _lcdNewline *****************
  2812 ;; Defined at:
  2813 ;;		line 78 in file "lcd.c"
  2814 ;; Parameters:    Size  Location     Type
  2815 ;;		None
  2816 ;; Auto vars:     Size  Location     Type
  2817 ;;		None
  2818 ;; Return value:  Size  Location     Type
  2819 ;;                  1    wreg      void 
  2820 ;; Registers used:
  2821 ;;		wreg, status,2, status,0, cstack
  2822 ;; Tracked objects:
  2823 ;;		On entry : 0/0
  2824 ;;		On exit  : 0/0
  2825 ;;		Unchanged: 0/0
  2826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2830 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2831 ;;Total ram usage:        0 bytes
  2832 ;; Hardware stack levels used:    1
  2833 ;; Hardware stack levels required when called:    9
  2834 ;; This function calls:
  2835 ;;		_lcdInst
  2836 ;; This function is called by:
  2837 ;;		_putch
  2838 ;; This function uses a non-reentrant model
  2839 ;;
  2840                           
  2841                           	psect	text11
  2842  001AE6                     __ptext11:
  2843                           	opt stack 0
  2844  001AE6                     _lcdNewline:
  2845                           	opt stack 17
  2846                           
  2847                           ;lcd.c: 79: lcdInst(0b11000000);
  2848                           
  2849                           ;incstack = 0
  2850  001AE6  0EC0               	movlw	192
  2851  001AE8  ECAA  F00C         	call	_lcdInst
  2852  001AEC  0012               	return		;funcret
  2853  001AEE                     __end_of_lcdNewline:
  2854                           	opt stack 0
  2855                           tblptru	equ	0xFF8
  2856                           tblptrh	equ	0xFF7
  2857                           tblptrl	equ	0xFF6
  2858                           tablat	equ	0xFF5
  2859                           prodh	equ	0xFF4
  2860                           prodl	equ	0xFF3
  2861                           intcon	equ	0xFF2
  2862                           postinc0	equ	0xFEE
  2863                           wreg	equ	0xFE8
  2864                           postdec1	equ	0xFE5
  2865                           fsr1l	equ	0xFE1
  2866                           indf2	equ	0xFDF
  2867                           postinc2	equ	0xFDE
  2868                           postdec2	equ	0xFDD
  2869                           fsr2h	equ	0xFDA
  2870                           fsr2l	equ	0xFD9
  2871                           status	equ	0xFD8
  2872                           
  2873 ;; *************** function ___llmod *****************
  2874 ;; Defined at:
  2875 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  2876 ;; Parameters:    Size  Location     Type
  2877 ;;  dividend        4   13[BANK0 ] unsigned long 
  2878 ;;  divisor         4   17[BANK0 ] unsigned long 
  2879 ;; Auto vars:     Size  Location     Type
  2880 ;;  counter         1   21[BANK0 ] unsigned char 
  2881 ;; Return value:  Size  Location     Type
  2882 ;;                  4   13[BANK0 ] unsigned long 
  2883 ;; Registers used:
  2884 ;;		wreg, status,2, status,0
  2885 ;; Tracked objects:
  2886 ;;		On entry : 0/0
  2887 ;;		On exit  : 0/0
  2888 ;;		Unchanged: 0/0
  2889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2890 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2891 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2893 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2894 ;;Total ram usage:        9 bytes
  2895 ;; Hardware stack levels used:    1
  2896 ;; Hardware stack levels required when called:    7
  2897 ;; This function calls:
  2898 ;;		Nothing
  2899 ;; This function is called by:
  2900 ;;		_printf
  2901 ;; This function uses a non-reentrant model
  2902 ;;
  2903                           
  2904                           	psect	text12
  2905  001428                     __ptext12:
  2906                           	opt stack 0
  2907  001428                     ___llmod:
  2908                           	opt stack 20
  2909                           
  2910                           ;incstack = 0
  2911  001428  0100               	movlb	0	; () banked
  2912  00142A  5191               	movf	___llmod@divisor& (0+255),w,b
  2913  00142C  0100               	movlb	0	; () banked
  2914  00142E  1192               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  2915  001430  0100               	movlb	0	; () banked
  2916  001432  1193               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  2917  001434  0100               	movlb	0	; () banked
  2918  001436  1194               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  2919  001438  B4D8               	btfsc	status,2,c
  2920  00143A  D03A               	goto	l959
  2921                           
  2922                           ; BSR set to: 0
  2923  00143C  0E01               	movlw	1
  2924  00143E  0100               	movlb	0	; () banked
  2925  001440  6F95               	movwf	___llmod@counter& (0+255),b
  2926  001442  D008               	goto	l2691
  2927  001444                     l2689:
  2928                           
  2929                           ; BSR set to: 0
  2930  001444  0100               	movlb	0	; () banked
  2931  001446  90D8               	bcf	status,0,c
  2932  001448  3791               	rlcf	___llmod@divisor& (0+255),f,b
  2933  00144A  3792               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  2934  00144C  3793               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  2935  00144E  3794               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  2936  001450  0100               	movlb	0	; () banked
  2937  001452  2B95               	incf	___llmod@counter& (0+255),f,b
  2938  001454                     l2691:
  2939                           
  2940                           ; BSR set to: 0
  2941  001454  0100               	movlb	0	; () banked
  2942  001456  AF94               	btfss	(___llmod@divisor+3)& (0+255),7,b
  2943  001458  D7F5               	goto	l2689
  2944  00145A                     l2693:
  2945                           
  2946                           ; BSR set to: 0
  2947  00145A  0100               	movlb	0	; () banked
  2948  00145C  5191               	movf	___llmod@divisor& (0+255),w,b
  2949  00145E  0100               	movlb	0	; () banked
  2950  001460  5D8D               	subwf	___llmod@dividend& (0+255),w,b
  2951  001462  0100               	movlb	0	; () banked
  2952  001464  5192               	movf	(___llmod@divisor+1)& (0+255),w,b
  2953  001466  0100               	movlb	0	; () banked
  2954  001468  598E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  2955  00146A  0100               	movlb	0	; () banked
  2956  00146C  5193               	movf	(___llmod@divisor+2)& (0+255),w,b
  2957  00146E  0100               	movlb	0	; () banked
  2958  001470  598F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  2959  001472  0100               	movlb	0	; () banked
  2960  001474  5194               	movf	(___llmod@divisor+3)& (0+255),w,b
  2961  001476  0100               	movlb	0	; () banked
  2962  001478  5990               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  2963  00147A  A0D8               	btfss	status,0,c
  2964  00147C  D010               	goto	l2697
  2965                           
  2966                           ; BSR set to: 0
  2967  00147E  0100               	movlb	0	; () banked
  2968  001480  5191               	movf	___llmod@divisor& (0+255),w,b
  2969  001482  0100               	movlb	0	; () banked
  2970  001484  5F8D               	subwf	___llmod@dividend& (0+255),f,b
  2971  001486  0100               	movlb	0	; () banked
  2972  001488  5192               	movf	(___llmod@divisor+1)& (0+255),w,b
  2973  00148A  0100               	movlb	0	; () banked
  2974  00148C  5B8E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  2975  00148E  0100               	movlb	0	; () banked
  2976  001490  5193               	movf	(___llmod@divisor+2)& (0+255),w,b
  2977  001492  0100               	movlb	0	; () banked
  2978  001494  5B8F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  2979  001496  0100               	movlb	0	; () banked
  2980  001498  5194               	movf	(___llmod@divisor+3)& (0+255),w,b
  2981  00149A  0100               	movlb	0	; () banked
  2982  00149C  5B90               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  2983  00149E                     l2697:
  2984                           
  2985                           ; BSR set to: 0
  2986  00149E  0100               	movlb	0	; () banked
  2987  0014A0  90D8               	bcf	status,0,c
  2988  0014A2  3394               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  2989  0014A4  3393               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  2990  0014A6  3392               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  2991  0014A8  3391               	rrcf	___llmod@divisor& (0+255),f,b
  2992                           
  2993                           ; BSR set to: 0
  2994  0014AA  0100               	movlb	0	; () banked
  2995  0014AC  2F95               	decfsz	___llmod@counter& (0+255),f,b
  2996  0014AE  D7D5               	goto	l2693
  2997  0014B0                     l959:
  2998                           
  2999                           ; BSR set to: 0
  3000  0014B0  C08D  F08D         	movff	___llmod@dividend,?___llmod
  3001  0014B4  C08E  F08E         	movff	___llmod@dividend+1,?___llmod+1
  3002  0014B8  C08F  F08F         	movff	___llmod@dividend+2,?___llmod+2
  3003  0014BC  C090  F090         	movff	___llmod@dividend+3,?___llmod+3
  3004                           
  3005                           ; BSR set to: 0
  3006  0014C0  0012               	return		;funcret
  3007  0014C2                     __end_of___llmod:
  3008                           	opt stack 0
  3009                           tblptru	equ	0xFF8
  3010                           tblptrh	equ	0xFF7
  3011                           tblptrl	equ	0xFF6
  3012                           tablat	equ	0xFF5
  3013                           prodh	equ	0xFF4
  3014                           prodl	equ	0xFF3
  3015                           intcon	equ	0xFF2
  3016                           postinc0	equ	0xFEE
  3017                           wreg	equ	0xFE8
  3018                           postdec1	equ	0xFE5
  3019                           fsr1l	equ	0xFE1
  3020                           indf2	equ	0xFDF
  3021                           postinc2	equ	0xFDE
  3022                           postdec2	equ	0xFDD
  3023                           fsr2h	equ	0xFDA
  3024                           fsr2l	equ	0xFD9
  3025                           status	equ	0xFD8
  3026                           
  3027 ;; *************** function _lcdClear *****************
  3028 ;; Defined at:
  3029 ;;		line 74 in file "lcd.c"
  3030 ;; Parameters:    Size  Location     Type
  3031 ;;		None
  3032 ;; Auto vars:     Size  Location     Type
  3033 ;;		None
  3034 ;; Return value:  Size  Location     Type
  3035 ;;                  1    wreg      void 
  3036 ;; Registers used:
  3037 ;;		wreg, status,2, status,0, cstack
  3038 ;; Tracked objects:
  3039 ;;		On entry : 0/0
  3040 ;;		On exit  : 0/0
  3041 ;;		Unchanged: 0/0
  3042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3046 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3047 ;;Total ram usage:        0 bytes
  3048 ;; Hardware stack levels used:    1
  3049 ;; Hardware stack levels required when called:    9
  3050 ;; This function calls:
  3051 ;;		_lcdInst
  3052 ;; This function is called by:
  3053 ;;		_main
  3054 ;;		_dateTime
  3055 ;;		_mainMenu
  3056 ;;		_runSelect
  3057 ;;		_runMenu
  3058 ;;		_runTime
  3059 ;;		_runStats
  3060 ;; This function uses a non-reentrant model
  3061 ;;
  3062                           
  3063                           	psect	text13
  3064  001AEE                     __ptext13:
  3065                           	opt stack 0
  3066  001AEE                     _lcdClear:
  3067                           	opt stack 19
  3068                           
  3069                           ;lcd.c: 75: lcdInst(0b00000001);
  3070                           
  3071                           ; BSR set to: 0
  3072                           ;incstack = 0
  3073  001AEE  0E01               	movlw	1
  3074  001AF0  ECAA  F00C         	call	_lcdInst
  3075  001AF4  0012               	return		;funcret
  3076  001AF6                     __end_of_lcdClear:
  3077                           	opt stack 0
  3078                           tblptru	equ	0xFF8
  3079                           tblptrh	equ	0xFF7
  3080                           tblptrl	equ	0xFF6
  3081                           tablat	equ	0xFF5
  3082                           prodh	equ	0xFF4
  3083                           prodl	equ	0xFF3
  3084                           intcon	equ	0xFF2
  3085                           postinc0	equ	0xFEE
  3086                           wreg	equ	0xFE8
  3087                           postdec1	equ	0xFE5
  3088                           fsr1l	equ	0xFE1
  3089                           indf2	equ	0xFDF
  3090                           postinc2	equ	0xFDE
  3091                           postdec2	equ	0xFDD
  3092                           fsr2h	equ	0xFDA
  3093                           fsr2l	equ	0xFD9
  3094                           status	equ	0xFD8
  3095                           
  3096 ;; *************** function _pinSetup *****************
  3097 ;; Defined at:
  3098 ;;		line 55 in file "main.c"
  3099 ;; Parameters:    Size  Location     Type
  3100 ;;		None
  3101 ;; Auto vars:     Size  Location     Type
  3102 ;;		None
  3103 ;; Return value:  Size  Location     Type
  3104 ;;                  1    wreg      void 
  3105 ;; Registers used:
  3106 ;;		wreg, status,2, status,0
  3107 ;; Tracked objects:
  3108 ;;		On entry : 0/0
  3109 ;;		On exit  : 0/0
  3110 ;;		Unchanged: 0/0
  3111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3115 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3116 ;;Total ram usage:        0 bytes
  3117 ;; Hardware stack levels used:    1
  3118 ;; Hardware stack levels required when called:    7
  3119 ;; This function calls:
  3120 ;;		Nothing
  3121 ;; This function is called by:
  3122 ;;		_main
  3123 ;; This function uses a non-reentrant model
  3124 ;;
  3125                           
  3126                           	psect	text14
  3127  001842                     __ptext14:
  3128                           	opt stack 0
  3129  001842                     _pinSetup:
  3130                           	opt stack 23
  3131                           
  3132                           ;main.c: 61: TRISA = 0xFF;
  3133                           
  3134                           ;incstack = 0
  3135  001842  6892               	setf	3986,c	;volatile
  3136                           
  3137                           ;main.c: 62: TRISB = 0xFF;
  3138  001844  6893               	setf	3987,c	;volatile
  3139                           
  3140                           ;main.c: 63: TRISC = 0x00;
  3141  001846  0E00               	movlw	0
  3142  001848  6E94               	movwf	3988,c	;volatile
  3143                           
  3144                           ;main.c: 64: TRISD = 0x00;
  3145  00184A  0E00               	movlw	0
  3146  00184C  6E95               	movwf	3989,c	;volatile
  3147                           
  3148                           ;main.c: 65: TRISE = 0x00;
  3149  00184E  0E00               	movlw	0
  3150  001850  6E96               	movwf	3990,c	;volatile
  3151                           
  3152                           ;main.c: 67: LATA = 0x00;
  3153  001852  0E00               	movlw	0
  3154  001854  6E89               	movwf	3977,c	;volatile
  3155                           
  3156                           ;main.c: 68: LATB = 0x00;
  3157  001856  0E00               	movlw	0
  3158  001858  6E8A               	movwf	3978,c	;volatile
  3159                           
  3160                           ;main.c: 69: LATC = 0x00;
  3161  00185A  0E00               	movlw	0
  3162  00185C  6E8B               	movwf	3979,c	;volatile
  3163                           
  3164                           ;main.c: 70: LATD = 0x00;
  3165  00185E  0E00               	movlw	0
  3166  001860  6E8C               	movwf	3980,c	;volatile
  3167                           
  3168                           ;main.c: 71: LATE = 0x00;
  3169  001862  0E00               	movlw	0
  3170  001864  6E8D               	movwf	3981,c	;volatile
  3171                           
  3172                           ;main.c: 73: ADCON0 = 0x00;
  3173  001866  0E00               	movlw	0
  3174  001868  6EC2               	movwf	4034,c	;volatile
  3175                           
  3176                           ;main.c: 74: ADCON1 |= 0x0A;
  3177  00186A  0E0A               	movlw	10
  3178  00186C  12C1               	iorwf	4033,f,c	;volatile
  3179                           
  3180                           ;main.c: 78: ADCON2 = 0;
  3181  00186E  0E00               	movlw	0
  3182  001870  6EC0               	movwf	4032,c	;volatile
  3183                           
  3184                           ;main.c: 79: ADCON2 |= 0b010;
  3185  001872  82C0               	bsf	4032,1,c	;volatile
  3186                           
  3187                           ;main.c: 80: ADCON2 |= 0b110<<3;
  3188  001874  0E30               	movlw	48
  3189  001876  12C0               	iorwf	4032,f,c	;volatile
  3190                           
  3191                           ;main.c: 81: ADCON2 |= 1<<7;
  3192  001878  8EC0               	bsf	4032,7,c	;volatile
  3193                           
  3194                           ;main.c: 84: INT1IE = 1;
  3195  00187A  86F0               	bsf	intcon3,3,c	;volatile
  3196                           
  3197                           ;main.c: 85: INT0IE = 1;
  3198  00187C  88F2               	bsf	intcon,4,c	;volatile
  3199                           
  3200                           ;main.c: 86: (INTCONbits.GIE = 1);
  3201  00187E  8EF2               	bsf	intcon,7,c	;volatile
  3202  001880  0012               	return		;funcret
  3203  001882                     __end_of_pinSetup:
  3204                           	opt stack 0
  3205                           tblptru	equ	0xFF8
  3206                           tblptrh	equ	0xFF7
  3207                           tblptrl	equ	0xFF6
  3208                           tablat	equ	0xFF5
  3209                           prodh	equ	0xFF4
  3210                           prodl	equ	0xFF3
  3211                           intcon	equ	0xFF2
  3212                           intcon3	equ	0xFF0
  3213                           postinc0	equ	0xFEE
  3214                           wreg	equ	0xFE8
  3215                           postdec1	equ	0xFE5
  3216                           fsr1l	equ	0xFE1
  3217                           indf2	equ	0xFDF
  3218                           postinc2	equ	0xFDE
  3219                           postdec2	equ	0xFDD
  3220                           fsr2h	equ	0xFDA
  3221                           fsr2l	equ	0xFD9
  3222                           status	equ	0xFD8
  3223                           
  3224 ;; *************** function _initRTC *****************
  3225 ;; Defined at:
  3226 ;;		line 19 in file "RTC.c"
  3227 ;; Parameters:    Size  Location     Type
  3228 ;;		None
  3229 ;; Auto vars:     Size  Location     Type
  3230 ;;		None
  3231 ;; Return value:  Size  Location     Type
  3232 ;;                  1    wreg      void 
  3233 ;; Registers used:
  3234 ;;		wreg, status,2, status,0, cstack
  3235 ;; Tracked objects:
  3236 ;;		On entry : 0/0
  3237 ;;		On exit  : 0/0
  3238 ;;		Unchanged: 0/0
  3239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3243 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3244 ;;Total ram usage:        0 bytes
  3245 ;; Hardware stack levels used:    1
  3246 ;; Hardware stack levels required when called:    9
  3247 ;; This function calls:
  3248 ;;		_I2C_Master_Init
  3249 ;; This function is called by:
  3250 ;;		_main
  3251 ;; This function uses a non-reentrant model
  3252 ;;
  3253                           
  3254                           	psect	text15
  3255  001AC6                     __ptext15:
  3256                           	opt stack 0
  3257  001AC6                     _initRTC:
  3258                           	opt stack 21
  3259                           
  3260                           ;RTC.c: 20: I2C_Master_Init(10000);
  3261                           
  3262                           ;incstack = 0
  3263  001AC6  0E10               	movlw	16
  3264  001AC8  0100               	movlb	0	; () banked
  3265  001ACA  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3266  001ACC  0E27               	movlw	39
  3267  001ACE  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3268  001AD0  0E00               	movlw	0
  3269  001AD2  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3270  001AD4  0E00               	movlw	0
  3271  001AD6  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3272  001AD8  EC80  F00B         	call	_I2C_Master_Init	;wreg free
  3273  001ADC  0012               	return		;funcret
  3274  001ADE                     __end_of_initRTC:
  3275                           	opt stack 0
  3276                           tblptru	equ	0xFF8
  3277                           tblptrh	equ	0xFF7
  3278                           tblptrl	equ	0xFF6
  3279                           tablat	equ	0xFF5
  3280                           prodh	equ	0xFF4
  3281                           prodl	equ	0xFF3
  3282                           intcon	equ	0xFF2
  3283                           intcon3	equ	0xFF0
  3284                           postinc0	equ	0xFEE
  3285                           wreg	equ	0xFE8
  3286                           postdec1	equ	0xFE5
  3287                           fsr1l	equ	0xFE1
  3288                           indf2	equ	0xFDF
  3289                           postinc2	equ	0xFDE
  3290                           postdec2	equ	0xFDD
  3291                           fsr2h	equ	0xFDA
  3292                           fsr2l	equ	0xFD9
  3293                           status	equ	0xFD8
  3294                           
  3295 ;; *************** function _I2C_Master_Init *****************
  3296 ;; Defined at:
  3297 ;;		line 13 in file "I2C.c"
  3298 ;; Parameters:    Size  Location     Type
  3299 ;;  c               4   13[BANK0 ] const unsigned long 
  3300 ;; Auto vars:     Size  Location     Type
  3301 ;;		None
  3302 ;; Return value:  Size  Location     Type
  3303 ;;                  1    wreg      void 
  3304 ;; Registers used:
  3305 ;;		wreg, status,2, status,0, cstack
  3306 ;; Tracked objects:
  3307 ;;		On entry : 0/0
  3308 ;;		On exit  : 0/0
  3309 ;;		Unchanged: 0/0
  3310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3311 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3313 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3314 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3315 ;;Total ram usage:        8 bytes
  3316 ;; Hardware stack levels used:    1
  3317 ;; Hardware stack levels required when called:    8
  3318 ;; This function calls:
  3319 ;;		___lldiv
  3320 ;; This function is called by:
  3321 ;;		_initRTC
  3322 ;;		_testFrequency
  3323 ;; This function uses a non-reentrant model
  3324 ;;
  3325                           
  3326                           	psect	text16
  3327  001700                     __ptext16:
  3328                           	opt stack 0
  3329  001700                     _I2C_Master_Init:
  3330                           	opt stack 21
  3331                           
  3332                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  3333                           
  3334                           ;incstack = 0
  3335  001700  0E00               	movlw	0
  3336  001702  6EC7               	movwf	4039,c	;volatile
  3337                           
  3338                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  3339  001704  0E28               	movlw	40
  3340  001706  6EC6               	movwf	4038,c	;volatile
  3341                           
  3342                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  3343  001708  0E00               	movlw	0
  3344  00170A  6EC5               	movwf	4037,c	;volatile
  3345                           
  3346                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  3347  00170C  0E80               	movlw	128
  3348  00170E  0100               	movlb	0	; () banked
  3349  001710  6F80               	movwf	___lldiv@dividend& (0+255),b
  3350  001712  0E96               	movlw	150
  3351  001714  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  3352  001716  0E98               	movlw	152
  3353  001718  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  3354  00171A  0E00               	movlw	0
  3355  00171C  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  3356  00171E  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  3357  001722  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  3358  001726  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  3359  00172A  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  3360  00172E  0E02               	movlw	2
  3361  001730                     u2595:
  3362  001730  90D8               	bcf	status,0,c
  3363  001732  0100               	movlb	0	; () banked
  3364  001734  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  3365  001736  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  3366  001738  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  3367  00173A  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  3368  00173C  2EE8               	decfsz	wreg,f,c
  3369  00173E  D7F8               	goto	u2595
  3370  001740  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  3371  001744  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3372  001748  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3373  00174C  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3374  001750  EC5C  F008         	call	___lldiv	;wreg free
  3375  001754  0100               	movlb	0	; () banked
  3376  001756  0580               	decf	?___lldiv& (0+255),w,b
  3377  001758  6EC8               	movwf	4040,c	;volatile
  3378                           
  3379                           ; BSR set to: 0
  3380                           ;I2C.c: 20: TRISC3 = 1;
  3381  00175A  8694               	bsf	3988,3,c	;volatile
  3382                           
  3383                           ; BSR set to: 0
  3384                           ;I2C.c: 21: TRISC4 = 1;
  3385  00175C  8894               	bsf	3988,4,c	;volatile
  3386                           
  3387                           ; BSR set to: 0
  3388  00175E  0012               	return		;funcret
  3389  001760                     __end_of_I2C_Master_Init:
  3390                           	opt stack 0
  3391                           tblptru	equ	0xFF8
  3392                           tblptrh	equ	0xFF7
  3393                           tblptrl	equ	0xFF6
  3394                           tablat	equ	0xFF5
  3395                           prodh	equ	0xFF4
  3396                           prodl	equ	0xFF3
  3397                           intcon	equ	0xFF2
  3398                           intcon3	equ	0xFF0
  3399                           postinc0	equ	0xFEE
  3400                           wreg	equ	0xFE8
  3401                           postdec1	equ	0xFE5
  3402                           fsr1l	equ	0xFE1
  3403                           indf2	equ	0xFDF
  3404                           postinc2	equ	0xFDE
  3405                           postdec2	equ	0xFDD
  3406                           fsr2h	equ	0xFDA
  3407                           fsr2l	equ	0xFD9
  3408                           status	equ	0xFD8
  3409                           
  3410 ;; *************** function ___lldiv *****************
  3411 ;; Defined at:
  3412 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3413 ;; Parameters:    Size  Location     Type
  3414 ;;  dividend        4    0[BANK0 ] unsigned long 
  3415 ;;  divisor         4    4[BANK0 ] unsigned long 
  3416 ;; Auto vars:     Size  Location     Type
  3417 ;;  quotient        4    8[BANK0 ] unsigned long 
  3418 ;;  counter         1   12[BANK0 ] unsigned char 
  3419 ;; Return value:  Size  Location     Type
  3420 ;;                  4    0[BANK0 ] unsigned long 
  3421 ;; Registers used:
  3422 ;;		wreg, status,2, status,0
  3423 ;; Tracked objects:
  3424 ;;		On entry : 0/0
  3425 ;;		On exit  : 0/0
  3426 ;;		Unchanged: 0/0
  3427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3428 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3429 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3431 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3432 ;;Total ram usage:       13 bytes
  3433 ;; Hardware stack levels used:    1
  3434 ;; Hardware stack levels required when called:    7
  3435 ;; This function calls:
  3436 ;;		Nothing
  3437 ;; This function is called by:
  3438 ;;		_I2C_Master_Init
  3439 ;;		_printf
  3440 ;; This function uses a non-reentrant model
  3441 ;;
  3442                           
  3443                           	psect	text17
  3444  0010B8                     __ptext17:
  3445                           	opt stack 0
  3446  0010B8                     ___lldiv:
  3447                           	opt stack 20
  3448                           
  3449                           ; BSR set to: 0
  3450                           ;incstack = 0
  3451  0010B8  0E00               	movlw	0
  3452  0010BA  0100               	movlb	0	; () banked
  3453  0010BC  6F88               	movwf	___lldiv@quotient& (0+255),b
  3454  0010BE  0E00               	movlw	0
  3455  0010C0  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  3456  0010C2  0E00               	movlw	0
  3457  0010C4  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  3458  0010C6  0E00               	movlw	0
  3459  0010C8  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  3460                           
  3461                           ; BSR set to: 0
  3462  0010CA  0100               	movlb	0	; () banked
  3463  0010CC  5184               	movf	___lldiv@divisor& (0+255),w,b
  3464  0010CE  0100               	movlb	0	; () banked
  3465  0010D0  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  3466  0010D2  0100               	movlb	0	; () banked
  3467  0010D4  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  3468  0010D6  0100               	movlb	0	; () banked
  3469  0010D8  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  3470  0010DA  B4D8               	btfsc	status,2,c
  3471  0010DC  D042               	goto	l949
  3472                           
  3473                           ; BSR set to: 0
  3474  0010DE  0E01               	movlw	1
  3475  0010E0  0100               	movlb	0	; () banked
  3476  0010E2  6F8C               	movwf	___lldiv@counter& (0+255),b
  3477  0010E4  D008               	goto	l2671
  3478  0010E6                     l2669:
  3479                           
  3480                           ; BSR set to: 0
  3481  0010E6  0100               	movlb	0	; () banked
  3482  0010E8  90D8               	bcf	status,0,c
  3483  0010EA  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  3484  0010EC  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  3485  0010EE  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  3486  0010F0  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  3487  0010F2  0100               	movlb	0	; () banked
  3488  0010F4  2B8C               	incf	___lldiv@counter& (0+255),f,b
  3489  0010F6                     l2671:
  3490                           
  3491                           ; BSR set to: 0
  3492  0010F6  0100               	movlb	0	; () banked
  3493  0010F8  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  3494  0010FA  D7F5               	goto	l2669
  3495  0010FC                     l2673:
  3496                           
  3497                           ; BSR set to: 0
  3498  0010FC  0100               	movlb	0	; () banked
  3499  0010FE  90D8               	bcf	status,0,c
  3500  001100  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  3501  001102  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  3502  001104  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  3503  001106  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  3504                           
  3505                           ; BSR set to: 0
  3506  001108  0100               	movlb	0	; () banked
  3507  00110A  5184               	movf	___lldiv@divisor& (0+255),w,b
  3508  00110C  0100               	movlb	0	; () banked
  3509  00110E  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  3510  001110  0100               	movlb	0	; () banked
  3511  001112  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3512  001114  0100               	movlb	0	; () banked
  3513  001116  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  3514  001118  0100               	movlb	0	; () banked
  3515  00111A  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3516  00111C  0100               	movlb	0	; () banked
  3517  00111E  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  3518  001120  0100               	movlb	0	; () banked
  3519  001122  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3520  001124  0100               	movlb	0	; () banked
  3521  001126  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  3522  001128  A0D8               	btfss	status,0,c
  3523  00112A  D012               	goto	l2681
  3524                           
  3525                           ; BSR set to: 0
  3526  00112C  0100               	movlb	0	; () banked
  3527  00112E  5184               	movf	___lldiv@divisor& (0+255),w,b
  3528  001130  0100               	movlb	0	; () banked
  3529  001132  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  3530  001134  0100               	movlb	0	; () banked
  3531  001136  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3532  001138  0100               	movlb	0	; () banked
  3533  00113A  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  3534  00113C  0100               	movlb	0	; () banked
  3535  00113E  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3536  001140  0100               	movlb	0	; () banked
  3537  001142  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  3538  001144  0100               	movlb	0	; () banked
  3539  001146  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3540  001148  0100               	movlb	0	; () banked
  3541  00114A  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  3542                           
  3543                           ; BSR set to: 0
  3544  00114C  0100               	movlb	0	; () banked
  3545  00114E  8188               	bsf	___lldiv@quotient& (0+255),0,b
  3546  001150                     l2681:
  3547                           
  3548                           ; BSR set to: 0
  3549  001150  0100               	movlb	0	; () banked
  3550  001152  90D8               	bcf	status,0,c
  3551  001154  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  3552  001156  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  3553  001158  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  3554  00115A  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  3555                           
  3556                           ; BSR set to: 0
  3557  00115C  0100               	movlb	0	; () banked
  3558  00115E  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  3559  001160  D7CD               	goto	l2673
  3560  001162                     l949:
  3561                           
  3562                           ; BSR set to: 0
  3563  001162  C088  F080         	movff	___lldiv@quotient,?___lldiv
  3564  001166  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  3565  00116A  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  3566  00116E  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  3567                           
  3568                           ; BSR set to: 0
  3569  001172  0012               	return		;funcret
  3570  001174                     __end_of___lldiv:
  3571                           	opt stack 0
  3572                           tblptru	equ	0xFF8
  3573                           tblptrh	equ	0xFF7
  3574                           tblptrl	equ	0xFF6
  3575                           tablat	equ	0xFF5
  3576                           prodh	equ	0xFF4
  3577                           prodl	equ	0xFF3
  3578                           intcon	equ	0xFF2
  3579                           intcon3	equ	0xFF0
  3580                           postinc0	equ	0xFEE
  3581                           wreg	equ	0xFE8
  3582                           postdec1	equ	0xFE5
  3583                           fsr1l	equ	0xFE1
  3584                           indf2	equ	0xFDF
  3585                           postinc2	equ	0xFDE
  3586                           postdec2	equ	0xFDD
  3587                           fsr2h	equ	0xFDA
  3588                           fsr2l	equ	0xFD9
  3589                           status	equ	0xFD8
  3590                           
  3591 ;; *************** function _initLCD *****************
  3592 ;; Defined at:
  3593 ;;		line 15 in file "lcd.c"
  3594 ;; Parameters:    Size  Location     Type
  3595 ;;		None
  3596 ;; Auto vars:     Size  Location     Type
  3597 ;;		None
  3598 ;; Return value:  Size  Location     Type
  3599 ;;                  1    wreg      void 
  3600 ;; Registers used:
  3601 ;;		wreg, status,2, status,0, cstack
  3602 ;; Tracked objects:
  3603 ;;		On entry : 0/0
  3604 ;;		On exit  : 0/0
  3605 ;;		Unchanged: 0/0
  3606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3609 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3610 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3611 ;;Total ram usage:        1 bytes
  3612 ;; Hardware stack levels used:    1
  3613 ;; Hardware stack levels required when called:    9
  3614 ;; This function calls:
  3615 ;;		_lcdInst
  3616 ;; This function is called by:
  3617 ;;		_main
  3618 ;; This function uses a non-reentrant model
  3619 ;;
  3620                           
  3621                           	psect	text18
  3622  0017F8                     __ptext18:
  3623                           	opt stack 0
  3624  0017F8                     _initLCD:
  3625                           	opt stack 21
  3626                           
  3627                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
  3628                           
  3629                           ; BSR set to: 0
  3630                           ;incstack = 0
  3631  0017F8  0E31               	movlw	49
  3632  0017FA  0100               	movlb	0	; () banked
  3633  0017FC  6F84               	movwf	??_initLCD& (0+255),b
  3634  0017FE  0EB2               	movlw	178
  3635  001800                     u3287:
  3636  001800  2EE8               	decfsz	wreg,f,c
  3637  001802  D7FE               	bra	u3287
  3638  001804  2F84               	decfsz	??_initLCD& (0+255),f,b
  3639  001806  D7FC               	bra	u3287
  3640  001808  F000               	nop	
  3641                           
  3642                           ;lcd.c: 18: lcdInst(0b00110011);
  3643  00180A  0E33               	movlw	51
  3644  00180C  ECAA  F00C         	call	_lcdInst
  3645                           
  3646                           ;lcd.c: 19: lcdInst(0b00110010);
  3647  001810  0E32               	movlw	50
  3648  001812  ECAA  F00C         	call	_lcdInst
  3649                           
  3650                           ;lcd.c: 20: lcdInst(0b00101000);
  3651  001816  0E28               	movlw	40
  3652  001818  ECAA  F00C         	call	_lcdInst
  3653                           
  3654                           ;lcd.c: 21: lcdInst(0b00001111);
  3655  00181C  0E0F               	movlw	15
  3656  00181E  ECAA  F00C         	call	_lcdInst
  3657                           
  3658                           ;lcd.c: 22: lcdInst(0b00000110);
  3659  001822  0E06               	movlw	6
  3660  001824  ECAA  F00C         	call	_lcdInst
  3661                           
  3662                           ;lcd.c: 23: lcdInst(0b00000001);
  3663  001828  0E01               	movlw	1
  3664  00182A  ECAA  F00C         	call	_lcdInst
  3665                           
  3666                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
  3667  00182E  0E31               	movlw	49
  3668  001830  0100               	movlb	0	; () banked
  3669  001832  6F84               	movwf	??_initLCD& (0+255),b
  3670  001834  0EB2               	movlw	178
  3671  001836                     u3297:
  3672  001836  2EE8               	decfsz	wreg,f,c
  3673  001838  D7FE               	bra	u3297
  3674  00183A  2F84               	decfsz	??_initLCD& (0+255),f,b
  3675  00183C  D7FC               	bra	u3297
  3676  00183E  F000               	nop	
  3677  001840  0012               	return		;funcret
  3678  001842                     __end_of_initLCD:
  3679                           	opt stack 0
  3680                           tblptru	equ	0xFF8
  3681                           tblptrh	equ	0xFF7
  3682                           tblptrl	equ	0xFF6
  3683                           tablat	equ	0xFF5
  3684                           prodh	equ	0xFF4
  3685                           prodl	equ	0xFF3
  3686                           intcon	equ	0xFF2
  3687                           intcon3	equ	0xFF0
  3688                           postinc0	equ	0xFEE
  3689                           wreg	equ	0xFE8
  3690                           postdec1	equ	0xFE5
  3691                           fsr1l	equ	0xFE1
  3692                           indf2	equ	0xFDF
  3693                           postinc2	equ	0xFDE
  3694                           postdec2	equ	0xFDD
  3695                           fsr2h	equ	0xFDA
  3696                           fsr2l	equ	0xFD9
  3697                           status	equ	0xFD8
  3698                           
  3699 ;; *************** function _lcdInst *****************
  3700 ;; Defined at:
  3701 ;;		line 27 in file "lcd.c"
  3702 ;; Parameters:    Size  Location     Type
  3703 ;;  data            1    wreg     unsigned char 
  3704 ;; Auto vars:     Size  Location     Type
  3705 ;;  data            1    3[BANK0 ] unsigned char 
  3706 ;; Return value:  Size  Location     Type
  3707 ;;                  1    wreg      void 
  3708 ;; Registers used:
  3709 ;;		wreg, status,2, status,0, cstack
  3710 ;; Tracked objects:
  3711 ;;		On entry : 0/0
  3712 ;;		On exit  : 0/0
  3713 ;;		Unchanged: 0/0
  3714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3716 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3717 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3718 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3719 ;;Total ram usage:        2 bytes
  3720 ;; Hardware stack levels used:    1
  3721 ;; Hardware stack levels required when called:    8
  3722 ;; This function calls:
  3723 ;;		_lcdNibble
  3724 ;; This function is called by:
  3725 ;;		_initLCD
  3726 ;;		_lcdClear
  3727 ;;		_lcdNewline
  3728 ;;		_lcdHome
  3729 ;; This function uses a non-reentrant model
  3730 ;;
  3731                           
  3732                           	psect	text19
  3733  001954                     __ptext19:
  3734                           	opt stack 0
  3735  001954                     _lcdInst:
  3736                           	opt stack 17
  3737                           
  3738                           ;incstack = 0
  3739                           ;lcdInst@data stored from wreg
  3740  001954  0100               	movlb	0	; () banked
  3741  001956  6F83               	movwf	lcdInst@data& (0+255),b
  3742                           
  3743                           ;lcd.c: 28: LATDbits.LATD2 = 0;
  3744  001958  948C               	bcf	3980,2,c	;volatile
  3745                           
  3746                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
  3747  00195A  0E74               	movlw	116
  3748  00195C                     u3307:
  3749  00195C  2EE8               	decfsz	wreg,f,c
  3750  00195E  D7FE               	bra	u3307
  3751  001960  D000               	nop2	
  3752                           
  3753                           ;lcd.c: 30: lcdNibble(data);
  3754  001962  0100               	movlb	0	; () banked
  3755  001964  5183               	movf	lcdInst@data& (0+255),w,b
  3756  001966  ECA2  F00A         	call	_lcdNibble
  3757                           
  3758                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
  3759  00196A  0E04               	movlw	4
  3760  00196C  0100               	movlb	0	; () banked
  3761  00196E  6F82               	movwf	??_lcdInst& (0+255),b
  3762  001970  0E3D               	movlw	61
  3763  001972                     u3317:
  3764  001972  2EE8               	decfsz	wreg,f,c
  3765  001974  D7FE               	bra	u3317
  3766  001976  2F82               	decfsz	??_lcdInst& (0+255),f,b
  3767  001978  D7FC               	bra	u3317
  3768  00197A  D000               	nop2	
  3769  00197C  0012               	return		;funcret
  3770  00197E                     __end_of_lcdInst:
  3771                           	opt stack 0
  3772                           tblptru	equ	0xFF8
  3773                           tblptrh	equ	0xFF7
  3774                           tblptrl	equ	0xFF6
  3775                           tablat	equ	0xFF5
  3776                           prodh	equ	0xFF4
  3777                           prodl	equ	0xFF3
  3778                           intcon	equ	0xFF2
  3779                           intcon3	equ	0xFF0
  3780                           postinc0	equ	0xFEE
  3781                           wreg	equ	0xFE8
  3782                           postdec1	equ	0xFE5
  3783                           fsr1l	equ	0xFE1
  3784                           indf2	equ	0xFDF
  3785                           postinc2	equ	0xFDE
  3786                           postdec2	equ	0xFDD
  3787                           fsr2h	equ	0xFDA
  3788                           fsr2l	equ	0xFD9
  3789                           status	equ	0xFD8
  3790                           
  3791 ;; *************** function _lcdNibble *****************
  3792 ;; Defined at:
  3793 ;;		line 46 in file "lcd.c"
  3794 ;; Parameters:    Size  Location     Type
  3795 ;;  data            1    wreg     unsigned char 
  3796 ;; Auto vars:     Size  Location     Type
  3797 ;;  data            1    1[BANK0 ] unsigned char 
  3798 ;;  temp            1    0[BANK0 ] unsigned char 
  3799 ;; Return value:  Size  Location     Type
  3800 ;;                  1    wreg      void 
  3801 ;; Registers used:
  3802 ;;		wreg, status,2, status,0
  3803 ;; Tracked objects:
  3804 ;;		On entry : 0/0
  3805 ;;		On exit  : 0/0
  3806 ;;		Unchanged: 0/0
  3807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3809 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3811 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3812 ;;Total ram usage:        2 bytes
  3813 ;; Hardware stack levels used:    1
  3814 ;; Hardware stack levels required when called:    7
  3815 ;; This function calls:
  3816 ;;		Nothing
  3817 ;; This function is called by:
  3818 ;;		_lcdInst
  3819 ;;		_putch
  3820 ;; This function uses a non-reentrant model
  3821 ;;
  3822                           
  3823                           	psect	text20
  3824  001544                     __ptext20:
  3825                           	opt stack 0
  3826  001544                     _lcdNibble:
  3827                           	opt stack 19
  3828                           
  3829                           ;incstack = 0
  3830                           ;lcdNibble@data stored from wreg
  3831  001544  0100               	movlb	0	; () banked
  3832  001546  6F81               	movwf	lcdNibble@data& (0+255),b
  3833                           
  3834                           ;lcd.c: 48: char temp = data & 0xF0;
  3835  001548  0100               	movlb	0	; () banked
  3836  00154A  5181               	movf	lcdNibble@data& (0+255),w,b
  3837  00154C  0BF0               	andlw	240
  3838  00154E  0100               	movlb	0	; () banked
  3839  001550  6F80               	movwf	lcdNibble@temp& (0+255),b
  3840                           
  3841                           ;lcd.c: 49: LATD = LATD & 0x0F;
  3842  001552  508C               	movf	3980,w,c	;volatile
  3843  001554  0B0F               	andlw	15
  3844  001556  6E8C               	movwf	3980,c	;volatile
  3845                           
  3846                           ;lcd.c: 50: LATD = temp | LATD;
  3847  001558  0100               	movlb	0	; () banked
  3848  00155A  5180               	movf	lcdNibble@temp& (0+255),w,b
  3849  00155C  108C               	iorwf	3980,w,c	;volatile
  3850  00155E  6E8C               	movwf	3980,c	;volatile
  3851                           
  3852                           ; BSR set to: 0
  3853                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  3854  001560  968C               	bcf	3980,3,c	;volatile
  3855                           
  3856                           ; BSR set to: 0
  3857                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
  3858  001562  0ED6               	movlw	214
  3859  001564                     u3327:
  3860  001564  D000               	nop2	
  3861  001566  D000               	nop2	
  3862  001568  2EE8               	decfsz	wreg,f,c
  3863  00156A  D7FC               	bra	u3327
  3864  00156C  D000               	nop2	
  3865                           
  3866                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  3867  00156E  868C               	bsf	3980,3,c	;volatile
  3868                           
  3869                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
  3870  001570  0ED6               	movlw	214
  3871  001572                     u3337:
  3872  001572  D000               	nop2	
  3873  001574  D000               	nop2	
  3874  001576  2EE8               	decfsz	wreg,f,c
  3875  001578  D7FC               	bra	u3337
  3876  00157A  D000               	nop2	
  3877                           
  3878                           ;lcd.c: 58: data = data << 4;
  3879  00157C  0100               	movlb	0	; () banked
  3880  00157E  3981               	swapf	lcdNibble@data& (0+255),w,b
  3881  001580  0BF0               	andlw	240
  3882  001582  0100               	movlb	0	; () banked
  3883  001584  6F81               	movwf	lcdNibble@data& (0+255),b
  3884                           
  3885                           ;lcd.c: 60: temp = data & 0xF0;
  3886  001586  0100               	movlb	0	; () banked
  3887  001588  5181               	movf	lcdNibble@data& (0+255),w,b
  3888  00158A  0BF0               	andlw	240
  3889  00158C  0100               	movlb	0	; () banked
  3890  00158E  6F80               	movwf	lcdNibble@temp& (0+255),b
  3891                           
  3892                           ;lcd.c: 61: LATD = LATD & 0x0F;
  3893  001590  508C               	movf	3980,w,c	;volatile
  3894  001592  0B0F               	andlw	15
  3895  001594  6E8C               	movwf	3980,c	;volatile
  3896                           
  3897                           ;lcd.c: 62: LATD = temp | LATD;
  3898  001596  0100               	movlb	0	; () banked
  3899  001598  5180               	movf	lcdNibble@temp& (0+255),w,b
  3900  00159A  108C               	iorwf	3980,w,c	;volatile
  3901  00159C  6E8C               	movwf	3980,c	;volatile
  3902                           
  3903                           ; BSR set to: 0
  3904                           ;lcd.c: 64: LATDbits.LATD3 = 0;
  3905  00159E  968C               	bcf	3980,3,c	;volatile
  3906                           
  3907                           ; BSR set to: 0
  3908                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
  3909  0015A0  0ED6               	movlw	214
  3910  0015A2                     u3347:
  3911  0015A2  D000               	nop2	
  3912  0015A4  D000               	nop2	
  3913  0015A6  2EE8               	decfsz	wreg,f,c
  3914  0015A8  D7FC               	bra	u3347
  3915  0015AA  D000               	nop2	
  3916                           
  3917                           ;lcd.c: 66: LATDbits.LATD3 = 1;
  3918  0015AC  868C               	bsf	3980,3,c	;volatile
  3919                           
  3920                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
  3921  0015AE  0ED6               	movlw	214
  3922  0015B0                     u3357:
  3923  0015B0  D000               	nop2	
  3924  0015B2  D000               	nop2	
  3925  0015B4  2EE8               	decfsz	wreg,f,c
  3926  0015B6  D7FC               	bra	u3357
  3927  0015B8  D000               	nop2	
  3928  0015BA  0012               	return		;funcret
  3929  0015BC                     __end_of_lcdNibble:
  3930                           	opt stack 0
  3931                           tblptru	equ	0xFF8
  3932                           tblptrh	equ	0xFF7
  3933                           tblptrl	equ	0xFF6
  3934                           tablat	equ	0xFF5
  3935                           prodh	equ	0xFF4
  3936                           prodl	equ	0xFF3
  3937                           intcon	equ	0xFF2
  3938                           intcon3	equ	0xFF0
  3939                           postinc0	equ	0xFEE
  3940                           wreg	equ	0xFE8
  3941                           postdec1	equ	0xFE5
  3942                           fsr1l	equ	0xFE1
  3943                           indf2	equ	0xFDF
  3944                           postinc2	equ	0xFDE
  3945                           postdec2	equ	0xFDD
  3946                           fsr2h	equ	0xFDA
  3947                           fsr2l	equ	0xFD9
  3948                           status	equ	0xFD8
  3949                           
  3950 ;; *************** function _digitalWrite *****************
  3951 ;; Defined at:
  3952 ;;		line 53 in file "iopin.c"
  3953 ;; Parameters:    Size  Location     Type
  3954 ;;  port            2    0[BANK0 ] int 
  3955 ;;  pin             2    2[BANK0 ] int 
  3956 ;;  val             2    4[BANK0 ] int 
  3957 ;; Auto vars:     Size  Location     Type
  3958 ;;		None
  3959 ;; Return value:  Size  Location     Type
  3960 ;;                  1    wreg      void 
  3961 ;; Registers used:
  3962 ;;		wreg, status,2, status,0
  3963 ;; Tracked objects:
  3964 ;;		On entry : 0/0
  3965 ;;		On exit  : 0/0
  3966 ;;		Unchanged: 0/0
  3967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3968 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3970 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3971 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3972 ;;Total ram usage:        9 bytes
  3973 ;; Hardware stack levels used:    1
  3974 ;; Hardware stack levels required when called:    7
  3975 ;; This function calls:
  3976 ;;		Nothing
  3977 ;; This function is called by:
  3978 ;;		_main
  3979 ;; This function uses a non-reentrant model
  3980 ;;
  3981                           
  3982                           	psect	text21
  3983  000FD8                     __ptext21:
  3984                           	opt stack 0
  3985  000FD8                     _digitalWrite:
  3986                           	opt stack 23
  3987                           
  3988                           ;iopin.c: 54: pin = 1 << pin;
  3989                           
  3990                           ;incstack = 0
  3991  000FD8  C082  F086         	movff	digitalWrite@pin,??_digitalWrite
  3992  000FDC  0E01               	movlw	1
  3993  000FDE  0100               	movlb	0	; () banked
  3994  000FE0  6F87               	movwf	(??_digitalWrite+1)& (0+255),b
  3995  000FE2  0E00               	movlw	0
  3996  000FE4  0100               	movlb	0	; () banked
  3997  000FE6  6F88               	movwf	(??_digitalWrite+2)& (0+255),b
  3998  000FE8  0100               	movlb	0	; () banked
  3999  000FEA  2B86               	incf	??_digitalWrite& (0+255),f,b
  4000  000FEC  D004               	goto	u3004
  4001  000FEE                     u3005:
  4002  000FEE  90D8               	bcf	status,0,c
  4003  000FF0  0100               	movlb	0	; () banked
  4004  000FF2  3787               	rlcf	(??_digitalWrite+1)& (0+255),f,b
  4005  000FF4  3788               	rlcf	(??_digitalWrite+2)& (0+255),f,b
  4006  000FF6                     u3004:
  4007  000FF6  0100               	movlb	0	; () banked
  4008  000FF8  2F86               	decfsz	??_digitalWrite& (0+255),f,b
  4009  000FFA  D7F9               	goto	u3005
  4010  000FFC  C087  F082         	movff	??_digitalWrite+1,digitalWrite@pin
  4011  001000  C088  F083         	movff	??_digitalWrite+2,digitalWrite@pin+1
  4012                           
  4013                           ;iopin.c: 55: if(val == 0){
  4014  001004  0100               	movlb	0	; () banked
  4015  001006  5184               	movf	digitalWrite@val& (0+255),w,b
  4016  001008  0100               	movlb	0	; () banked
  4017  00100A  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  4018  00100C  A4D8               	btfss	status,2,c
  4019  00100E  D03C               	goto	l3455
  4020                           
  4021                           ; BSR set to: 0
  4022                           ;iopin.c: 56: pin ^= 0xff;
  4023  001010  0EFF               	movlw	255
  4024  001012  0100               	movlb	0	; () banked
  4025  001014  1B82               	xorwf	digitalWrite@pin& (0+255),f,b
  4026                           
  4027                           ; BSR set to: 0
  4028                           ;iopin.c: 57: }
  4029                           ;iopin.c: 59: switch(port){
  4030  001016  D038               	goto	l3455
  4031  001018                     l3431:
  4032                           
  4033                           ; BSR set to: 0
  4034  001018  0100               	movlb	0	; () banked
  4035  00101A  0584               	decf	digitalWrite@val& (0+255),w,b
  4036  00101C  0100               	movlb	0	; () banked
  4037  00101E  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  4038  001020  A4D8               	btfss	status,2,c
  4039  001022  D004               	goto	l3435
  4040                           
  4041                           ; BSR set to: 0
  4042  001024  0100               	movlb	0	; () banked
  4043  001026  5182               	movf	digitalWrite@pin& (0+255),w,b
  4044  001028  1289               	iorwf	3977,f,c	;volatile
  4045  00102A  0012               	return	
  4046  00102C                     l3435:
  4047                           
  4048                           ; BSR set to: 0
  4049                           ;iopin.c: 61: else LATA &= pin;
  4050  00102C  0100               	movlb	0	; () banked
  4051  00102E  5182               	movf	digitalWrite@pin& (0+255),w,b
  4052  001030  1689               	andwf	3977,f,c	;volatile
  4053                           
  4054                           ; BSR set to: 0
  4055                           ;iopin.c: 62: break;
  4056  001032  0012               	return	
  4057  001034                     l3437:
  4058                           
  4059                           ; BSR set to: 0
  4060  001034  0100               	movlb	0	; () banked
  4061  001036  0584               	decf	digitalWrite@val& (0+255),w,b
  4062  001038  0100               	movlb	0	; () banked
  4063  00103A  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  4064  00103C  A4D8               	btfss	status,2,c
  4065  00103E  D004               	goto	l3441
  4066                           
  4067                           ; BSR set to: 0
  4068  001040  0100               	movlb	0	; () banked
  4069  001042  5182               	movf	digitalWrite@pin& (0+255),w,b
  4070  001044  128A               	iorwf	3978,f,c	;volatile
  4071  001046  0012               	return	
  4072  001048                     l3441:
  4073                           
  4074                           ; BSR set to: 0
  4075                           ;iopin.c: 64: else LATB &= pin;
  4076  001048  0100               	movlb	0	; () banked
  4077  00104A  5182               	movf	digitalWrite@pin& (0+255),w,b
  4078  00104C  168A               	andwf	3978,f,c	;volatile
  4079                           
  4080                           ; BSR set to: 0
  4081                           ;iopin.c: 65: break;
  4082  00104E  0012               	return	
  4083  001050                     l3443:
  4084                           
  4085                           ; BSR set to: 0
  4086  001050  0100               	movlb	0	; () banked
  4087  001052  0584               	decf	digitalWrite@val& (0+255),w,b
  4088  001054  0100               	movlb	0	; () banked
  4089  001056  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  4090  001058  A4D8               	btfss	status,2,c
  4091  00105A  D004               	goto	l3447
  4092                           
  4093                           ; BSR set to: 0
  4094  00105C  0100               	movlb	0	; () banked
  4095  00105E  5182               	movf	digitalWrite@pin& (0+255),w,b
  4096  001060  128B               	iorwf	3979,f,c	;volatile
  4097  001062  0012               	return	
  4098  001064                     l3447:
  4099                           
  4100                           ; BSR set to: 0
  4101                           ;iopin.c: 67: else LATC &= pin;
  4102  001064  0100               	movlb	0	; () banked
  4103  001066  5182               	movf	digitalWrite@pin& (0+255),w,b
  4104  001068  168B               	andwf	3979,f,c	;volatile
  4105                           
  4106                           ; BSR set to: 0
  4107                           ;iopin.c: 68: break;
  4108  00106A  0012               	return	
  4109  00106C                     l3449:
  4110                           
  4111                           ; BSR set to: 0
  4112  00106C  0100               	movlb	0	; () banked
  4113  00106E  0584               	decf	digitalWrite@val& (0+255),w,b
  4114  001070  0100               	movlb	0	; () banked
  4115  001072  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  4116  001074  A4D8               	btfss	status,2,c
  4117  001076  D004               	goto	l3453
  4118                           
  4119                           ; BSR set to: 0
  4120  001078  0100               	movlb	0	; () banked
  4121  00107A  5182               	movf	digitalWrite@pin& (0+255),w,b
  4122  00107C  128C               	iorwf	3980,f,c	;volatile
  4123  00107E  0012               	return	
  4124  001080                     l3453:
  4125                           
  4126                           ; BSR set to: 0
  4127                           ;iopin.c: 70: else LATD &= pin;
  4128  001080  0100               	movlb	0	; () banked
  4129  001082  5182               	movf	digitalWrite@pin& (0+255),w,b
  4130  001084  168C               	andwf	3980,f,c	;volatile
  4131                           
  4132                           ; BSR set to: 0
  4133                           ;iopin.c: 71: }
  4134  001086  0012               	return	
  4135  001088                     l3455:
  4136                           
  4137                           ; BSR set to: 0
  4138  001088  C080  F086         	movff	digitalWrite@port,??_digitalWrite
  4139  00108C  C081  F087         	movff	digitalWrite@port+1,??_digitalWrite+1
  4140                           
  4141                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4142                           ; Switch size 1, requested type "space"
  4143                           ; Number of cases is 1, Range of values is 0 to 0
  4144                           ; switch strategies available:
  4145                           ; Name         Instructions Cycles
  4146                           ; simple_byte            4     3 (average)
  4147                           ;	Chosen strategy is simple_byte
  4148  001090  0100               	movlb	0	; () banked
  4149  001092  5187               	movf	(??_digitalWrite+1)& (0+255),w,b
  4150  001094  0A00               	xorlw	0	; case 0
  4151  001096  A4D8               	btfss	status,2,c
  4152  001098  0012               	return	
  4153                           
  4154                           ; BSR set to: 0
  4155                           ; Switch size 1, requested type "space"
  4156                           ; Number of cases is 4, Range of values is 0 to 3
  4157                           ; switch strategies available:
  4158                           ; Name         Instructions Cycles
  4159                           ; simple_byte           13     7 (average)
  4160                           ;	Chosen strategy is simple_byte
  4161  00109A  0100               	movlb	0	; () banked
  4162  00109C  5186               	movf	??_digitalWrite& (0+255),w,b
  4163  00109E  0A00               	xorlw	0	; case 0
  4164  0010A0  B4D8               	btfsc	status,2,c
  4165  0010A2  D7BA               	goto	l3431
  4166  0010A4  0A01               	xorlw	1	; case 1
  4167  0010A6  B4D8               	btfsc	status,2,c
  4168  0010A8  D7C5               	goto	l3437
  4169  0010AA  0A03               	xorlw	3	; case 2
  4170  0010AC  B4D8               	btfsc	status,2,c
  4171  0010AE  D7D0               	goto	l3443
  4172  0010B0  0A01               	xorlw	1	; case 3
  4173  0010B2  A4D8               	btfss	status,2,c
  4174  0010B4  0012               	return	
  4175  0010B6  D7DA               	goto	l3449
  4176  0010B8                     __end_of_digitalWrite:
  4177                           	opt stack 0
  4178                           tblptru	equ	0xFF8
  4179                           tblptrh	equ	0xFF7
  4180                           tblptrl	equ	0xFF6
  4181                           tablat	equ	0xFF5
  4182                           prodh	equ	0xFF4
  4183                           prodl	equ	0xFF3
  4184                           intcon	equ	0xFF2
  4185                           intcon3	equ	0xFF0
  4186                           postinc0	equ	0xFEE
  4187                           wreg	equ	0xFE8
  4188                           postdec1	equ	0xFE5
  4189                           fsr1l	equ	0xFE1
  4190                           indf2	equ	0xFDF
  4191                           postinc2	equ	0xFDE
  4192                           postdec2	equ	0xFDD
  4193                           fsr2h	equ	0xFDA
  4194                           fsr2l	equ	0xFD9
  4195                           status	equ	0xFD8
  4196                           
  4197 ;; *************** function _service *****************
  4198 ;; Defined at:
  4199 ;;		line 152 in file "main.c"
  4200 ;; Parameters:    Size  Location     Type
  4201 ;;		None
  4202 ;; Auto vars:     Size  Location     Type
  4203 ;;  key             1  116[COMRAM] unsigned char 
  4204 ;; Return value:  Size  Location     Type
  4205 ;;                  1    wreg      void 
  4206 ;; Registers used:
  4207 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4208 ;; Tracked objects:
  4209 ;;		On entry : 0/0
  4210 ;;		On exit  : 0/0
  4211 ;;		Unchanged: 0/0
  4212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4214 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4215 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4216 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4217 ;;Total ram usage:       15 bytes
  4218 ;; Hardware stack levels used:    1
  4219 ;; Hardware stack levels required when called:    6
  4220 ;; This function calls:
  4221 ;;		_servoInterruptService
  4222 ;;		_setAngle
  4223 ;;		_sortBatteryInterruptService
  4224 ;; This function is called by:
  4225 ;;		Interrupt level 2
  4226 ;; This function uses a non-reentrant model
  4227 ;;
  4228                           
  4229                           	psect	intcode
  4230  000008                     __pintcode:
  4231                           	opt stack 0
  4232  000008                     _service:
  4233                           	opt stack 17
  4234                           
  4235                           ; BSR set to: 0
  4236                           ;incstack = 0
  4237  000008  8278               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4238  00000A  ED7B  F007         	call	int_func,f	;refresh shadow registers
  4239                           tblptru	equ	0xFF8
  4240                           tblptrh	equ	0xFF7
  4241                           tblptrl	equ	0xFF6
  4242                           tablat	equ	0xFF5
  4243                           prodh	equ	0xFF4
  4244                           prodl	equ	0xFF3
  4245                           intcon	equ	0xFF2
  4246                           intcon3	equ	0xFF0
  4247                           postinc0	equ	0xFEE
  4248                           wreg	equ	0xFE8
  4249                           postdec1	equ	0xFE5
  4250                           fsr1l	equ	0xFE1
  4251                           indf2	equ	0xFDF
  4252                           postinc2	equ	0xFDE
  4253                           postdec2	equ	0xFDD
  4254                           fsr2h	equ	0xFDA
  4255                           fsr2l	equ	0xFD9
  4256                           status	equ	0xFD8
  4257                           
  4258                           	psect	intcode_body
  4259  000EF6                     __pintcode_body:
  4260                           	opt stack 17
  4261  000EF6                     int_func:
  4262                           	opt stack 17
  4263  000EF6  0006               	pop		; remove dummy address from shadow register refresh
  4264  000EF8  CFFA F067          	movff	pclath,??_service
  4265  000EFC  CFFB F068          	movff	pclatu,??_service+1
  4266  000F00  CFE9 F069          	movff	fsr0l,??_service+2
  4267  000F04  CFEA F06A          	movff	fsr0h,??_service+3
  4268  000F08  CFE1 F06B          	movff	fsr1l,??_service+4
  4269  000F0C  CFE2 F06C          	movff	fsr1h,??_service+5
  4270  000F10  CFD9 F06D          	movff	fsr2l,??_service+6
  4271  000F14  CFDA F06E          	movff	fsr2h,??_service+7
  4272  000F18  CFF3 F06F          	movff	prodl,??_service+8
  4273  000F1C  CFF4 F070          	movff	prodh,??_service+9
  4274  000F20  CFF6 F071          	movff	tblptrl,??_service+10
  4275  000F24  CFF7 F072          	movff	tblptrh,??_service+11
  4276  000F28  CFF8 F073          	movff	tblptru,??_service+12
  4277  000F2C  CFF5 F074          	movff	tablat,??_service+13
  4278                           
  4279                           ;main.c: 154: servoInterruptService();
  4280  000F30  EC32  F003         	call	_servoInterruptService	;wreg free
  4281                           
  4282                           ;main.c: 157: if(INT0IF){ INT0IF = 0;
  4283  000F34  A2F2               	btfss	intcon,1,c	;volatile
  4284  000F36  D003               	goto	i2l3545
  4285  000F38  92F2               	bcf	intcon,1,c	;volatile
  4286                           
  4287                           ;main.c: 158: sortBatteryInterruptService();
  4288  000F3A  EC54  F00D         	call	_sortBatteryInterruptService	;wreg free
  4289  000F3E                     i2l3545:
  4290                           
  4291                           ;main.c: 159: }
  4292                           ;main.c: 162: if(INT1IF){INT1IF = 0;
  4293  000F3E  A0F0               	btfss	intcon3,0,c	;volatile
  4294  000F40  D02D               	goto	i2l133
  4295  000F42  90F0               	bcf	intcon3,0,c	;volatile
  4296                           
  4297                           ;main.c: 163: char key = (PORTB & 0xF0) >> 4;
  4298  000F44  3881               	swapf	3969,w,c	;volatile
  4299  000F46  0B0F               	andlw	15
  4300  000F48  0B0F               	andlw	15
  4301  000F4A  6E75               	movwf	service@key,c
  4302                           
  4303                           ;main.c: 164: if(key == 0)setAngle(0,45);
  4304  000F4C  5075               	movf	service@key,w,c
  4305  000F4E  A4D8               	btfss	status,2,c
  4306  000F50  D00A               	goto	i2l3555
  4307  000F52  0E00               	movlw	0
  4308  000F54  6E5E               	movwf	setAngle@timer+1,c
  4309  000F56  0E00               	movlw	0
  4310  000F58  6E5D               	movwf	setAngle@timer,c
  4311  000F5A  0E00               	movlw	0
  4312  000F5C  6E60               	movwf	setAngle@angle+1,c
  4313  000F5E  0E2D               	movlw	45
  4314  000F60  6E5F               	movwf	setAngle@angle,c
  4315  000F62  ECC0  F009         	call	_setAngle	;wreg free
  4316  000F66                     i2l3555:
  4317                           
  4318                           ;main.c: 165: if(key == 1)setAngle(0,90);
  4319  000F66  0475               	decf	service@key,w,c
  4320  000F68  A4D8               	btfss	status,2,c
  4321  000F6A  D00A               	goto	i2l3559
  4322  000F6C  0E00               	movlw	0
  4323  000F6E  6E5E               	movwf	setAngle@timer+1,c
  4324  000F70  0E00               	movlw	0
  4325  000F72  6E5D               	movwf	setAngle@timer,c
  4326  000F74  0E00               	movlw	0
  4327  000F76  6E60               	movwf	setAngle@angle+1,c
  4328  000F78  0E5A               	movlw	90
  4329  000F7A  6E5F               	movwf	setAngle@angle,c
  4330  000F7C  ECC0  F009         	call	_setAngle	;wreg free
  4331  000F80                     i2l3559:
  4332                           
  4333                           ;main.c: 166: if(key == 2)setAngle(0,135);
  4334  000F80  0E02               	movlw	2
  4335  000F82  1875               	xorwf	service@key,w,c
  4336  000F84  A4D8               	btfss	status,2,c
  4337  000F86  D00A               	goto	i2l133
  4338  000F88  0E00               	movlw	0
  4339  000F8A  6E5E               	movwf	setAngle@timer+1,c
  4340  000F8C  0E00               	movlw	0
  4341  000F8E  6E5D               	movwf	setAngle@timer,c
  4342  000F90  0E00               	movlw	0
  4343  000F92  6E60               	movwf	setAngle@angle+1,c
  4344  000F94  0E87               	movlw	135
  4345  000F96  6E5F               	movwf	setAngle@angle,c
  4346  000F98  ECC0  F009         	call	_setAngle	;wreg free
  4347  000F9C                     i2l133:
  4348  000F9C  C074  FFF5         	movff	??_service+13,tablat
  4349  000FA0  C073  FFF8         	movff	??_service+12,tblptru
  4350  000FA4  C072  FFF7         	movff	??_service+11,tblptrh
  4351  000FA8  C071  FFF6         	movff	??_service+10,tblptrl
  4352  000FAC  C070  FFF4         	movff	??_service+9,prodh
  4353  000FB0  C06F  FFF3         	movff	??_service+8,prodl
  4354  000FB4  C06E  FFDA         	movff	??_service+7,fsr2h
  4355  000FB8  C06D  FFD9         	movff	??_service+6,fsr2l
  4356  000FBC  C06C  FFE2         	movff	??_service+5,fsr1h
  4357  000FC0  C06B  FFE1         	movff	??_service+4,fsr1l
  4358  000FC4  C06A  FFEA         	movff	??_service+3,fsr0h
  4359  000FC8  C069  FFE9         	movff	??_service+2,fsr0l
  4360  000FCC  C068  FFFB         	movff	??_service+1,pclatu
  4361  000FD0  C067  FFFA         	movff	??_service,pclath
  4362  000FD4  9278               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4363  000FD6  0011               	retfie		f
  4364  000FD8                     __end_of_service:
  4365                           	opt stack 0
  4366                           pclatu	equ	0xFFB
  4367                           pclath	equ	0xFFA
  4368                           tblptru	equ	0xFF8
  4369                           tblptrh	equ	0xFF7
  4370                           tblptrl	equ	0xFF6
  4371                           tablat	equ	0xFF5
  4372                           prodh	equ	0xFF4
  4373                           prodl	equ	0xFF3
  4374                           intcon	equ	0xFF2
  4375                           intcon3	equ	0xFF0
  4376                           postinc0	equ	0xFEE
  4377                           fsr0h	equ	0xFEA
  4378                           fsr0l	equ	0xFE9
  4379                           wreg	equ	0xFE8
  4380                           postdec1	equ	0xFE5
  4381                           fsr1h	equ	0xFE2
  4382                           fsr1l	equ	0xFE1
  4383                           indf2	equ	0xFDF
  4384                           postinc2	equ	0xFDE
  4385                           postdec2	equ	0xFDD
  4386                           fsr2h	equ	0xFDA
  4387                           fsr2l	equ	0xFD9
  4388                           status	equ	0xFD8
  4389                           
  4390 ;; *************** function _sortBatteryInterruptService *****************
  4391 ;; Defined at:
  4392 ;;		line 174 in file "main.c"
  4393 ;; Parameters:    Size  Location     Type
  4394 ;;		None
  4395 ;; Auto vars:     Size  Location     Type
  4396 ;;		None
  4397 ;; Return value:  Size  Location     Type
  4398 ;;                  1    wreg      void 
  4399 ;; Registers used:
  4400 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4401 ;; Tracked objects:
  4402 ;;		On entry : 0/0
  4403 ;;		On exit  : 0/0
  4404 ;;		Unchanged: 0/0
  4405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4409 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4410 ;;Total ram usage:        0 bytes
  4411 ;; Hardware stack levels used:    1
  4412 ;; Hardware stack levels required when called:    5
  4413 ;; This function calls:
  4414 ;;		i2_lcdClear
  4415 ;;		i2_printf
  4416 ;; This function is called by:
  4417 ;;		_service
  4418 ;; This function uses a non-reentrant model
  4419 ;;
  4420                           
  4421                           	psect	text23
  4422  001AA8                     __ptext23:
  4423                           	opt stack 0
  4424  001AA8                     _sortBatteryInterruptService:
  4425                           	opt stack 17
  4426                           
  4427                           ;main.c: 175: count++;
  4428                           
  4429                           ;incstack = 0
  4430  001AA8  4A76               	infsnz	_count,f,c
  4431  001AAA  2A77               	incf	_count+1,f,c
  4432                           
  4433                           ;main.c: 176: lcdClear();
  4434  001AAC  EC7F  F00D         	call	i2_lcdClear	;wreg free
  4435                           
  4436                           ;main.c: 177: printf("sorting! %d",count);
  4437  001AB0  0ED5               	movlw	low STR_2
  4438  001AB2  6E17               	movwf	i2printf@f,c
  4439  001AB4  0EFF               	movlw	high STR_2
  4440  001AB6  6E18               	movwf	i2printf@f+1,c
  4441  001AB8  C076  F019         	movff	_count,?i2_printf+2
  4442  001ABC  C077  F01A         	movff	_count+1,?i2_printf+3
  4443  001AC0  ECBC  F001         	call	i2_printf	;wreg free
  4444  001AC4  0012               	return		;funcret
  4445  001AC6                     __end_of_sortBatteryInterruptService:
  4446                           	opt stack 0
  4447                           pclatu	equ	0xFFB
  4448                           pclath	equ	0xFFA
  4449                           tblptru	equ	0xFF8
  4450                           tblptrh	equ	0xFF7
  4451                           tblptrl	equ	0xFF6
  4452                           tablat	equ	0xFF5
  4453                           prodh	equ	0xFF4
  4454                           prodl	equ	0xFF3
  4455                           intcon	equ	0xFF2
  4456                           intcon3	equ	0xFF0
  4457                           postinc0	equ	0xFEE
  4458                           fsr0h	equ	0xFEA
  4459                           fsr0l	equ	0xFE9
  4460                           wreg	equ	0xFE8
  4461                           postdec1	equ	0xFE5
  4462                           fsr1h	equ	0xFE2
  4463                           fsr1l	equ	0xFE1
  4464                           indf2	equ	0xFDF
  4465                           postinc2	equ	0xFDE
  4466                           postdec2	equ	0xFDD
  4467                           fsr2h	equ	0xFDA
  4468                           fsr2l	equ	0xFD9
  4469                           status	equ	0xFD8
  4470                           
  4471 ;; *************** function _setAngle *****************
  4472 ;; Defined at:
  4473 ;;		line 34 in file "servo.c"
  4474 ;; Parameters:    Size  Location     Type
  4475 ;;  timer           2   92[COMRAM] int 
  4476 ;;  angle           2   94[COMRAM] int 
  4477 ;; Auto vars:     Size  Location     Type
  4478 ;;		None
  4479 ;; Return value:  Size  Location     Type
  4480 ;;                  1    wreg      void 
  4481 ;; Registers used:
  4482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4483 ;; Tracked objects:
  4484 ;;		On entry : 0/0
  4485 ;;		On exit  : 0/0
  4486 ;;		Unchanged: 0/0
  4487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4488 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4490 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4491 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4492 ;;Total ram usage:       10 bytes
  4493 ;; Hardware stack levels used:    1
  4494 ;; Hardware stack levels required when called:    5
  4495 ;; This function calls:
  4496 ;;		_angleToPulse
  4497 ;;		i2_lcdClear
  4498 ;;		i2_printf
  4499 ;; This function is called by:
  4500 ;;		_service
  4501 ;;		_initServo
  4502 ;; This function uses a non-reentrant model
  4503 ;;
  4504                           
  4505                           	psect	text24
  4506  001380                     __ptext24:
  4507                           	opt stack 0
  4508  001380                     _setAngle:
  4509                           	opt stack 17
  4510                           
  4511                           ;servo.c: 35: pulse[timer] = 0xffff - angleToPulse(angle);
  4512                           
  4513                           ;incstack = 0
  4514  001380  C05F  F046         	movff	setAngle@angle,angleToPulse@angle
  4515  001384  C060  F047         	movff	setAngle@angle+1,angleToPulse@angle+1
  4516  001388  ECF2  F004         	call	_angleToPulse	;wreg free
  4517  00138C  1E46               	comf	?_angleToPulse,f,c
  4518  00138E  1E47               	comf	?_angleToPulse+1,f,c
  4519  001390  1E48               	comf	?_angleToPulse+2,f,c
  4520  001392  1E49               	comf	?_angleToPulse+3,f,c
  4521  001394  2A46               	incf	?_angleToPulse,f,c
  4522  001396  0E00               	movlw	0
  4523  001398  2247               	addwfc	?_angleToPulse+1,f,c
  4524  00139A  2248               	addwfc	?_angleToPulse+2,f,c
  4525  00139C  2249               	addwfc	?_angleToPulse+3,f,c
  4526  00139E  0EFF               	movlw	255
  4527  0013A0  2446               	addwf	?_angleToPulse,w,c
  4528  0013A2  6E61               	movwf	??_setAngle& (0+255),c
  4529  0013A4  0EFF               	movlw	255
  4530  0013A6  2047               	addwfc	?_angleToPulse+1,w,c
  4531  0013A8  6E62               	movwf	(??_setAngle+1)& (0+255),c
  4532  0013AA  0E00               	movlw	0
  4533  0013AC  2048               	addwfc	?_angleToPulse+2,w,c
  4534  0013AE  6E63               	movwf	(??_setAngle+2)& (0+255),c
  4535  0013B0  0E00               	movlw	0
  4536  0013B2  2049               	addwfc	?_angleToPulse+3,w,c
  4537  0013B4  6E64               	movwf	(??_setAngle+3)& (0+255),c
  4538  0013B6  0EAB               	movlw	low _pulse
  4539  0013B8  6E65               	movwf	(??_setAngle+4)& (0+255),c
  4540  0013BA  0E00               	movlw	high _pulse
  4541  0013BC  6E66               	movwf	(??_setAngle+5)& (0+255),c
  4542  0013BE  90D8               	bcf	status,0,c
  4543  0013C0  345D               	rlcf	setAngle@timer,w,c
  4544  0013C2  6ED9               	movwf	fsr2l,c
  4545  0013C4  345E               	rlcf	setAngle@timer+1,w,c
  4546  0013C6  6EDA               	movwf	fsr2h,c
  4547  0013C8  90D8               	bcf	status,0,c
  4548  0013CA  36D9               	rlcf	fsr2l,f,c
  4549  0013CC  36DA               	rlcf	fsr2h,f,c
  4550  0013CE  5065               	movf	??_setAngle+4,w,c
  4551  0013D0  26D9               	addwf	fsr2l,f,c
  4552  0013D2  5066               	movf	??_setAngle+5,w,c
  4553  0013D4  22DA               	addwfc	fsr2h,f,c
  4554  0013D6  C061  FFDE         	movff	??_setAngle,postinc2
  4555  0013DA  C062  FFDE         	movff	??_setAngle+1,postinc2
  4556  0013DE  C063  FFDE         	movff	??_setAngle+2,postinc2
  4557  0013E2  C064  FFDE         	movff	??_setAngle+3,postinc2
  4558                           
  4559                           ;servo.c: 36: lcdClear();
  4560  0013E6  EC7F  F00D         	call	i2_lcdClear	;wreg free
  4561                           
  4562                           ;servo.c: 37: printf("%ld",pulse[timer]);
  4563  0013EA  0EFB               	movlw	low STR_5
  4564  0013EC  6E17               	movwf	i2printf@f,c
  4565  0013EE  0EFF               	movlw	high STR_5
  4566  0013F0  6E18               	movwf	i2printf@f+1,c
  4567  0013F2  0EAB               	movlw	low _pulse
  4568  0013F4  6E61               	movwf	??_setAngle& (0+255),c
  4569  0013F6  0E00               	movlw	high _pulse
  4570  0013F8  6E62               	movwf	(??_setAngle+1)& (0+255),c
  4571  0013FA  90D8               	bcf	status,0,c
  4572  0013FC  345D               	rlcf	setAngle@timer,w,c
  4573  0013FE  6ED9               	movwf	fsr2l,c
  4574  001400  345E               	rlcf	setAngle@timer+1,w,c
  4575  001402  6EDA               	movwf	fsr2h,c
  4576  001404  90D8               	bcf	status,0,c
  4577  001406  36D9               	rlcf	fsr2l,f,c
  4578  001408  36DA               	rlcf	fsr2h,f,c
  4579  00140A  5061               	movf	??_setAngle,w,c
  4580  00140C  26D9               	addwf	fsr2l,f,c
  4581  00140E  5062               	movf	??_setAngle+1,w,c
  4582  001410  22DA               	addwfc	fsr2h,f,c
  4583  001412  CFDE F019          	movff	postinc2,?i2_printf+2
  4584  001416  CFDE F01A          	movff	postinc2,?i2_printf+3
  4585  00141A  CFDE F01B          	movff	postinc2,?i2_printf+4
  4586  00141E  CFDE F01C          	movff	postinc2,?i2_printf+5
  4587  001422  ECBC  F001         	call	i2_printf	;wreg free
  4588  001426  0012               	return		;funcret
  4589  001428                     __end_of_setAngle:
  4590                           	opt stack 0
  4591                           pclatu	equ	0xFFB
  4592                           pclath	equ	0xFFA
  4593                           tblptru	equ	0xFF8
  4594                           tblptrh	equ	0xFF7
  4595                           tblptrl	equ	0xFF6
  4596                           tablat	equ	0xFF5
  4597                           prodh	equ	0xFF4
  4598                           prodl	equ	0xFF3
  4599                           intcon	equ	0xFF2
  4600                           intcon3	equ	0xFF0
  4601                           postinc0	equ	0xFEE
  4602                           fsr0h	equ	0xFEA
  4603                           fsr0l	equ	0xFE9
  4604                           wreg	equ	0xFE8
  4605                           postdec1	equ	0xFE5
  4606                           fsr1h	equ	0xFE2
  4607                           fsr1l	equ	0xFE1
  4608                           indf2	equ	0xFDF
  4609                           postinc2	equ	0xFDE
  4610                           postdec2	equ	0xFDD
  4611                           fsr2h	equ	0xFDA
  4612                           fsr2l	equ	0xFD9
  4613                           status	equ	0xFD8
  4614                           
  4615 ;; *************** function i2_printf *****************
  4616 ;; Defined at:
  4617 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4618 ;; Parameters:    Size  Location     Type
  4619 ;;  f               2   22[COMRAM] PTR const unsigned char 
  4620 ;;		 -> STR_17(17), STR_16(18), STR_15(17), STR_14(18), 
  4621 ;;		 -> STR_13(17), STR_12(19), STR_11(17), STR_10(18), 
  4622 ;;		 -> STR_9(17), STR_8(18), STR_7(17), STR_6(18), 
  4623 ;;		 -> STR_5(4), STR_4(9), STR_3(8), STR_2(12), 
  4624 ;;		 -> STR_1(9), 
  4625 ;; Auto vars:     Size  Location     Type
  4626 ;;  printf          4   35[COMRAM] unsigned long 
  4627 ;;  printf          4    0        struct .
  4628 ;;  printf          3    0        PTR const unsigned char 
  4629 ;;  printf          2   33[COMRAM] PTR void [1]
  4630 ;;		 -> ?i2_printf(2), ?_printf(2), 
  4631 ;;  printf          2   31[COMRAM] int 
  4632 ;;  printf          2    0        unsigned int 
  4633 ;;  printf          1   40[COMRAM] char 
  4634 ;;  printf          1   39[COMRAM] unsigned char 
  4635 ;;  printf          1   30[COMRAM] unsigned char 
  4636 ;; Return value:  Size  Location     Type
  4637 ;;                  2   22[COMRAM] int 
  4638 ;; Registers used:
  4639 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4640 ;; Tracked objects:
  4641 ;;		On entry : 0/0
  4642 ;;		On exit  : 0/0
  4643 ;;		Unchanged: 0/0
  4644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4645 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4646 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4647 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4648 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4649 ;;Total ram usage:       19 bytes
  4650 ;; Hardware stack levels used:    1
  4651 ;; Hardware stack levels required when called:    4
  4652 ;; This function calls:
  4653 ;;		i2___lldiv
  4654 ;;		i2___llmod
  4655 ;;		i2_putch
  4656 ;; This function is called by:
  4657 ;;		_sortBatteryInterruptService
  4658 ;;		_setAngle
  4659 ;; This function uses a non-reentrant model
  4660 ;;
  4661                           
  4662                           	psect	text25
  4663  000378                     __ptext25:
  4664                           	opt stack 0
  4665  000378                     i2_printf:
  4666                           	opt stack 17
  4667                           
  4668                           ;doprnt.c: 466: va_list ap;
  4669                           ;doprnt.c: 499: signed char c;
  4670                           ;doprnt.c: 504: int prec;
  4671                           ;doprnt.c: 508: unsigned char flag;
  4672                           ;doprnt.c: 523: union {
  4673                           ;doprnt.c: 524: unsigned long vd;
  4674                           ;doprnt.c: 525: double integ;
  4675                           ;doprnt.c: 526: } tmpval;
  4676                           ;doprnt.c: 528: unsigned long val;
  4677                           ;doprnt.c: 529: unsigned len;
  4678                           ;doprnt.c: 530: const char * cp;
  4679                           ;doprnt.c: 533: *ap = __va_start();
  4680                           
  4681                           ;incstack = 0
  4682  000378  0E19               	movlw	low (?i2_printf+2)
  4683  00037A  6E22               	movwf	i2printf@ap,c
  4684  00037C  0E00               	movlw	high (?i2_printf+2)
  4685  00037E  6E23               	movwf	i2printf@ap+1,c
  4686                           
  4687                           ;doprnt.c: 536: while(c = *f++) {
  4688  000380  D164               	goto	i2l3323
  4689  000382                     i2l3227:
  4690                           
  4691                           ;doprnt.c: 538: if(c != '%')
  4692  000382  0E25               	movlw	37
  4693  000384  1829               	xorwf	i2printf@c,w,c
  4694  000386  B4D8               	btfsc	status,2,c
  4695  000388  D004               	goto	i2l3231
  4696                           
  4697                           ;doprnt.c: 540: {
  4698                           ;doprnt.c: 541: (putch(c) );
  4699  00038A  5029               	movf	i2printf@c,w,c
  4700  00038C  EC32  F00D         	call	i2_putch
  4701                           
  4702                           ;doprnt.c: 542: continue;
  4703  000390  D15C               	goto	i2l3323
  4704  000392                     i2l3231:
  4705                           
  4706                           ;doprnt.c: 543: }
  4707                           ;doprnt.c: 548: flag = 0;
  4708  000392  0E00               	movlw	0
  4709  000394  6E28               	movwf	i2printf@flag,c
  4710                           
  4711                           ;doprnt.c: 635: switch(c = *f++) {
  4712                           
  4713                           ;doprnt.c: 633: loop:
  4714  000396  D012               	goto	i2l3245
  4715  000398                     i2l3233:
  4716                           
  4717                           ;doprnt.c: 643: flag |= 0x10;
  4718  000398  8828               	bsf	i2printf@flag,4,c
  4719                           
  4720                           ;doprnt.c: 644: goto loop;
  4721  00039A  D010               	goto	i2l3245
  4722  00039C                     i2l3235:
  4723                           
  4724                           ;doprnt.c: 721: flag |= 0x80;
  4725  00039C  8E28               	bsf	i2printf@flag,7,c
  4726                           
  4727                           ;doprnt.c: 723: break;
  4728  00039E  D02B               	goto	i2l569
  4729  0003A0                     i2l3237:
  4730                           
  4731                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4732  0003A0  C022  FFD9         	movff	i2printf@ap,fsr2l
  4733  0003A4  C023  FFDA         	movff	i2printf@ap+1,fsr2h
  4734  0003A8  50DF               	movf	indf2,w,c
  4735  0003AA  6E29               	movwf	i2printf@c,c
  4736  0003AC  0E02               	movlw	2
  4737  0003AE  2622               	addwf	i2printf@ap,f,c
  4738  0003B0  0E00               	movlw	0
  4739  0003B2  2223               	addwfc	i2printf@ap+1,f,c
  4740  0003B4                     i2l3241:
  4741                           
  4742                           ;doprnt.c: 809: (putch(c) );
  4743  0003B4  5029               	movf	i2printf@c,w,c
  4744  0003B6  EC32  F00D         	call	i2_putch
  4745                           
  4746                           ;doprnt.c: 810: continue;
  4747  0003BA  D147               	goto	i2l3323
  4748  0003BC                     i2l3245:
  4749  0003BC  C017  FFF6         	movff	i2printf@f,tblptrl
  4750  0003C0  C018  FFF7         	movff	i2printf@f+1,tblptrh
  4751  0003C4  4A17               	infsnz	i2printf@f,f,c
  4752  0003C6  2A18               	incf	i2printf@f+1,f,c
  4753  0003C8                     	if	0	;tblptru may be non-zero
  4754  0003C8                     	endif
  4755  0003C8                     	if	0	;tblptru may be non-zero
  4756  0003C8                     	endif
  4757  0003C8  0008               	tblrd		*
  4758  0003CA  CFF5 F029          	movff	tablat,i2printf@c
  4759  0003CE  5029               	movf	i2printf@c,w,c
  4760                           
  4761                           ; Switch size 1, requested type "space"
  4762                           ; Number of cases is 6, Range of values is 0 to 120
  4763                           ; switch strategies available:
  4764                           ; Name         Instructions Cycles
  4765                           ; simple_byte           19    10 (average)
  4766                           ;	Chosen strategy is simple_byte
  4767  0003D0  0A00               	xorlw	0	; case 0
  4768  0003D2  B4D8               	btfsc	status,2,c
  4769  0003D4  0012               	return	
  4770  0003D6  0A63               	xorlw	99	; case 99
  4771  0003D8  B4D8               	btfsc	status,2,c
  4772  0003DA  D7E2               	goto	i2l3237
  4773  0003DC  0A07               	xorlw	7	; case 100
  4774  0003DE  B4D8               	btfsc	status,2,c
  4775  0003E0  D00A               	goto	i2l569
  4776  0003E2  0A0D               	xorlw	13	; case 105
  4777  0003E4  B4D8               	btfsc	status,2,c
  4778  0003E6  D007               	goto	i2l569
  4779  0003E8  0A05               	xorlw	5	; case 108
  4780  0003EA  B4D8               	btfsc	status,2,c
  4781  0003EC  D7D5               	goto	i2l3233
  4782  0003EE  0A14               	xorlw	20	; case 120
  4783  0003F0  B4D8               	btfsc	status,2,c
  4784  0003F2  D7D4               	goto	i2l3235
  4785  0003F4  D7DF               	goto	i2l3241
  4786  0003F6                     i2l569:
  4787                           
  4788                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4789  0003F6  BE28               	btfsc	i2printf@flag,7,c
  4790  0003F8  D02E               	goto	i2l573
  4791                           
  4792                           ;doprnt.c: 1253: {
  4793                           ;doprnt.c: 1255: if(flag & 0x10)
  4794  0003FA  A828               	btfss	i2printf@flag,4,c
  4795  0003FC  D00E               	goto	i2l3253
  4796                           
  4797                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  4798  0003FE  C022  FFD9         	movff	i2printf@ap,fsr2l
  4799  000402  C023  FFDA         	movff	i2printf@ap+1,fsr2h
  4800  000406  CFDE F024          	movff	postinc2,i2printf@val
  4801  00040A  CFDE F025          	movff	postinc2,i2printf@val+1
  4802  00040E  CFDE F026          	movff	postinc2,i2printf@val+2
  4803  000412  CFDE F027          	movff	postinc2,i2printf@val+3
  4804  000416  0E04               	movlw	4
  4805  000418  D00E               	goto	L3
  4806  00041A                     i2l3253:
  4807                           
  4808                           ;doprnt.c: 1257: else
  4809                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4810  00041A  C022  FFD9         	movff	i2printf@ap,fsr2l
  4811  00041E  C023  FFDA         	movff	i2printf@ap+1,fsr2h
  4812  000422  CFDE F024          	movff	postinc2,i2printf@val
  4813  000426  CFDD F025          	movff	postdec2,i2printf@val+1
  4814  00042A  0E00               	movlw	0
  4815  00042C  BE25               	btfsc	i2printf@val+1,7,c
  4816  00042E  0EFF               	movlw	-1
  4817  000430  6E26               	movwf	i2printf@val+2,c
  4818  000432  6E27               	movwf	i2printf@val+3,c
  4819  000434  0E02               	movlw	2
  4820  000436                     L3:
  4821  000436  2622               	addwf	i2printf@ap,f,c
  4822  000438  0E00               	movlw	0
  4823  00043A  2223               	addwfc	i2printf@ap+1,f,c
  4824                           
  4825                           ;doprnt.c: 1261: if((long)val < 0) {
  4826  00043C  AE27               	btfss	i2printf@val+3,7,c
  4827  00043E  D06A               	goto	i2l3301
  4828                           
  4829                           ;doprnt.c: 1262: flag |= 0x03;
  4830  000440  0E03               	movlw	3
  4831  000442  1228               	iorwf	i2printf@flag,f,c
  4832                           
  4833                           ;doprnt.c: 1263: val = -val;
  4834  000444  1E27               	comf	i2printf@val+3,f,c
  4835  000446  1E26               	comf	i2printf@val+2,f,c
  4836  000448  1E25               	comf	i2printf@val+1,f,c
  4837  00044A  6C24               	negf	i2printf@val,c
  4838  00044C  0E00               	movlw	0
  4839  00044E  2225               	addwfc	i2printf@val+1,f,c
  4840  000450  2226               	addwfc	i2printf@val+2,f,c
  4841  000452  2227               	addwfc	i2printf@val+3,f,c
  4842                           
  4843                           ;doprnt.c: 1264: }
  4844                           ;doprnt.c: 1266: }
  4845  000454  D05F               	goto	i2l3301
  4846  000456                     i2l573:
  4847                           
  4848                           ;doprnt.c: 1268: else
  4849                           ;doprnt.c: 1273: {
  4850                           ;doprnt.c: 1281: if(flag & 0x10)
  4851  000456  A828               	btfss	i2printf@flag,4,c
  4852  000458  D00E               	goto	i2l3267
  4853                           
  4854                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  4855  00045A  C022  FFD9         	movff	i2printf@ap,fsr2l
  4856  00045E  C023  FFDA         	movff	i2printf@ap+1,fsr2h
  4857  000462  CFDE F024          	movff	postinc2,i2printf@val
  4858  000466  CFDE F025          	movff	postinc2,i2printf@val+1
  4859  00046A  CFDE F026          	movff	postinc2,i2printf@val+2
  4860  00046E  CFDE F027          	movff	postinc2,i2printf@val+3
  4861  000472  0E04               	movlw	4
  4862  000474  D00F               	goto	L4
  4863  000476                     i2l3267:
  4864                           
  4865                           ;doprnt.c: 1283: else
  4866                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4867  000476  C022  FFD9         	movff	i2printf@ap,fsr2l
  4868  00047A  C023  FFDA         	movff	i2printf@ap+1,fsr2h
  4869  00047E  CFDE F01D          	movff	postinc2,??i2_printf
  4870  000482  CFDD F01E          	movff	postdec2,??i2_printf+1
  4871  000486  C01D  F024         	movff	??i2_printf,i2printf@val
  4872  00048A  C01E  F025         	movff	??i2_printf+1,i2printf@val+1
  4873  00048E  6A26               	clrf	i2printf@val+2,c
  4874  000490  6A27               	clrf	i2printf@val+3,c
  4875  000492  0E02               	movlw	2
  4876  000494                     L4:
  4877  000494  2622               	addwf	i2printf@ap,f,c
  4878  000496  0E00               	movlw	0
  4879  000498  2223               	addwfc	i2printf@ap+1,f,c
  4880                           
  4881                           ;doprnt.c: 1287: }
  4882                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4883  00049A  D03C               	goto	i2l3301
  4884  00049C                     i2l3271:
  4885                           
  4886                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4887  00049C  0E01               	movlw	1
  4888  00049E  6E29               	movwf	i2printf@c,c
  4889  0004A0                     i2l3273:
  4890  0004A0  0E0A               	movlw	10
  4891  0004A2  1829               	xorwf	i2printf@c,w,c
  4892  0004A4  B4D8               	btfsc	status,2,c
  4893  0004A6  D03E               	goto	i2l3303
  4894                           
  4895                           ;doprnt.c: 1306: if(val < dpowers[c])
  4896  0004A8  5029               	movf	i2printf@c,w,c
  4897  0004AA  0D04               	mullw	4
  4898  0004AC  0E91               	movlw	low _dpowers
  4899  0004AE  24F3               	addwf	prodl,w,c
  4900  0004B0  6EF6               	movwf	tblptrl,c
  4901  0004B2  0EFE               	movlw	high _dpowers
  4902  0004B4  20F4               	addwfc	prodh,w,c
  4903  0004B6  6EF7               	movwf	tblptrh,c
  4904  0004B8                     	if	0	;There are less than 3 active tblptr bytes
  4905  0004B8                     	endif
  4906  0004B8  0009               	tblrd		*+
  4907  0004BA  50F5               	movf	tablat,w,c
  4908  0004BC  5C24               	subwf	i2printf@val,w,c
  4909  0004BE  0009               	tblrd		*+
  4910  0004C0  50F5               	movf	tablat,w,c
  4911  0004C2  5825               	subwfb	i2printf@val+1,w,c
  4912  0004C4  0009               	tblrd		*+
  4913  0004C6  50F5               	movf	tablat,w,c
  4914  0004C8  5826               	subwfb	i2printf@val+2,w,c
  4915  0004CA  0009               	tblrd		*+
  4916  0004CC  50F5               	movf	tablat,w,c
  4917  0004CE  5827               	subwfb	i2printf@val+3,w,c
  4918  0004D0  A0D8               	btfss	status,0,c
  4919  0004D2  D028               	goto	i2l3303
  4920                           
  4921                           ;doprnt.c: 1307: break;
  4922  0004D4  2A29               	incf	i2printf@c,f,c
  4923  0004D6  D7E4               	goto	i2l3273
  4924  0004D8                     i2l3285:
  4925                           
  4926                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4927  0004D8  0E01               	movlw	1
  4928  0004DA  6E29               	movwf	i2printf@c,c
  4929  0004DC                     i2l3287:
  4930  0004DC  0E08               	movlw	8
  4931  0004DE  1829               	xorwf	i2printf@c,w,c
  4932  0004E0  B4D8               	btfsc	status,2,c
  4933  0004E2  D020               	goto	i2l3303
  4934                           
  4935                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4936  0004E4  5029               	movf	i2printf@c,w,c
  4937  0004E6  0D04               	mullw	4
  4938  0004E8  0EB9               	movlw	low _hexpowers
  4939  0004EA  24F3               	addwf	prodl,w,c
  4940  0004EC  6EF6               	movwf	tblptrl,c
  4941  0004EE  0EFE               	movlw	high _hexpowers
  4942  0004F0  20F4               	addwfc	prodh,w,c
  4943  0004F2  6EF7               	movwf	tblptrh,c
  4944  0004F4                     	if	0	;There are less than 3 active tblptr bytes
  4945  0004F4                     	endif
  4946  0004F4  0009               	tblrd		*+
  4947  0004F6  50F5               	movf	tablat,w,c
  4948  0004F8  5C24               	subwf	i2printf@val,w,c
  4949  0004FA  0009               	tblrd		*+
  4950  0004FC  50F5               	movf	tablat,w,c
  4951  0004FE  5825               	subwfb	i2printf@val+1,w,c
  4952  000500  0009               	tblrd		*+
  4953  000502  50F5               	movf	tablat,w,c
  4954  000504  5826               	subwfb	i2printf@val+2,w,c
  4955  000506  0009               	tblrd		*+
  4956  000508  50F5               	movf	tablat,w,c
  4957  00050A  5827               	subwfb	i2printf@val+3,w,c
  4958  00050C  A0D8               	btfss	status,0,c
  4959  00050E  D00A               	goto	i2l3303
  4960                           
  4961                           ;doprnt.c: 1318: break;
  4962  000510  2A29               	incf	i2printf@c,f,c
  4963  000512  D7E4               	goto	i2l3287
  4964  000514                     i2l3301:
  4965  000514  5028               	movf	i2printf@flag,w,c
  4966  000516  0B80               	andlw	128
  4967                           
  4968                           ; Switch size 1, requested type "space"
  4969                           ; Number of cases is 2, Range of values is 0 to 128
  4970                           ; switch strategies available:
  4971                           ; Name         Instructions Cycles
  4972                           ; simple_byte            7     4 (average)
  4973                           ;	Chosen strategy is simple_byte
  4974  000518  0A00               	xorlw	0	; case 0
  4975  00051A  B4D8               	btfsc	status,2,c
  4976  00051C  D7BF               	goto	i2l3271
  4977  00051E  0A80               	xorlw	128	; case 128
  4978  000520  B4D8               	btfsc	status,2,c
  4979  000522  D7DA               	goto	i2l3285
  4980  000524                     i2l3303:
  4981                           
  4982                           ;doprnt.c: 1422: {
  4983                           ;doprnt.c: 1438: if(flag & 0x03)
  4984  000524  C028  F01D         	movff	i2printf@flag,??i2_printf
  4985  000528  0E03               	movlw	3
  4986  00052A  161D               	andwf	??i2_printf,f,c
  4987  00052C  B4D8               	btfsc	status,2,c
  4988  00052E  D003               	goto	i2l3307
  4989                           
  4990                           ;doprnt.c: 1439: (putch('-') );
  4991  000530  0E2D               	movlw	45
  4992  000532  EC32  F00D         	call	i2_putch
  4993  000536                     i2l3307:
  4994                           
  4995                           ;doprnt.c: 1469: }
  4996                           ;doprnt.c: 1472: prec = c;
  4997  000536  5029               	movf	i2printf@c,w,c
  4998  000538  6E20               	movwf	i2printf@prec,c
  4999  00053A  6A21               	clrf	i2printf@prec+1,c
  5000  00053C  BE20               	btfsc	i2printf@prec,7,c
  5001  00053E  0621               	decf	i2printf@prec+1,f,c
  5002                           
  5003                           ;doprnt.c: 1474: while(prec--) {
  5004  000540  D07C               	goto	i2l3321
  5005  000542                     i2l3309:
  5006                           
  5007                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5008  000542  C020  F01D         	movff	i2printf@prec,??i2_printf
  5009  000546  C021  F01E         	movff	i2printf@prec+1,??i2_printf+1
  5010  00054A  90D8               	bcf	status,0,c
  5011  00054C  361D               	rlcf	??i2_printf,f,c
  5012  00054E  361E               	rlcf	??i2_printf+1,f,c
  5013  000550  90D8               	bcf	status,0,c
  5014  000552  361D               	rlcf	??i2_printf,f,c
  5015  000554  361E               	rlcf	??i2_printf+1,f,c
  5016  000556  0E91               	movlw	low _dpowers
  5017  000558  241D               	addwf	??i2_printf,w,c
  5018  00055A  6EF6               	movwf	tblptrl,c
  5019  00055C  0EFE               	movlw	high _dpowers
  5020  00055E  201E               	addwfc	??i2_printf+1,w,c
  5021  000560  6EF7               	movwf	tblptrh,c
  5022  000562                     	if	0	;There are less than 3 active tblptr bytes
  5023  000562                     	endif
  5024  000562  0009               	tblrd		*+
  5025  000564  CFF5 F005          	movff	tablat,i2___lldiv@divisor
  5026  000568  0009               	tblrd		*+
  5027  00056A  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
  5028  00056E  0009               	tblrd		*+
  5029  000570  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
  5030  000574  000A               	tblrd		*-
  5031  000576  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
  5032  00057A  C024  F001         	movff	i2printf@val,i2___lldiv@dividend
  5033  00057E  C025  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
  5034  000582  C026  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
  5035  000586  C027  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
  5036  00058A  EC61  F00A         	call	i2___lldiv	;wreg free
  5037  00058E  C001  F00E         	movff	?i2___lldiv,i2___llmod@dividend
  5038  000592  C002  F00F         	movff	?i2___lldiv+1,i2___llmod@dividend+1
  5039  000596  C003  F010         	movff	?i2___lldiv+2,i2___llmod@dividend+2
  5040  00059A  C004  F011         	movff	?i2___lldiv+3,i2___llmod@dividend+3
  5041  00059E  0E0A               	movlw	10
  5042  0005A0  6E12               	movwf	i2___llmod@divisor,c
  5043  0005A2  0E00               	movlw	0
  5044  0005A4  6E13               	movwf	i2___llmod@divisor+1,c
  5045  0005A6  0E00               	movlw	0
  5046  0005A8  6E14               	movwf	i2___llmod@divisor+2,c
  5047  0005AA  0E00               	movlw	0
  5048  0005AC  6E15               	movwf	i2___llmod@divisor+3,c
  5049  0005AE  EC1A  F00B         	call	i2___llmod	;wreg free
  5050  0005B2  500E               	movf	?i2___llmod,w,c
  5051  0005B4  0F30               	addlw	48
  5052  0005B6  6E29               	movwf	i2printf@c,c
  5053                           
  5054                           ;doprnt.c: 1491: break;
  5055  0005B8  D03D               	goto	i2l3319
  5056  0005BA                     i2l3311:
  5057                           
  5058                           ;doprnt.c: 1499: {
  5059                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5060  0005BA  C024  F001         	movff	i2printf@val,i2___lldiv@dividend
  5061  0005BE  C025  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
  5062  0005C2  C026  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
  5063  0005C6  C027  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
  5064  0005CA  C020  F01D         	movff	i2printf@prec,??i2_printf
  5065  0005CE  C021  F01E         	movff	i2printf@prec+1,??i2_printf+1
  5066  0005D2  90D8               	bcf	status,0,c
  5067  0005D4  361D               	rlcf	??i2_printf,f,c
  5068  0005D6  361E               	rlcf	??i2_printf+1,f,c
  5069  0005D8  90D8               	bcf	status,0,c
  5070  0005DA  361D               	rlcf	??i2_printf,f,c
  5071  0005DC  361E               	rlcf	??i2_printf+1,f,c
  5072  0005DE  0EB9               	movlw	low _hexpowers
  5073  0005E0  241D               	addwf	??i2_printf,w,c
  5074  0005E2  6EF6               	movwf	tblptrl,c
  5075  0005E4  0EFE               	movlw	high _hexpowers
  5076  0005E6  201E               	addwfc	??i2_printf+1,w,c
  5077  0005E8  6EF7               	movwf	tblptrh,c
  5078  0005EA                     	if	0	;There are less than 3 active tblptr bytes
  5079  0005EA                     	endif
  5080  0005EA  0009               	tblrd		*+
  5081  0005EC  CFF5 F005          	movff	tablat,i2___lldiv@divisor
  5082  0005F0  0009               	tblrd		*+
  5083  0005F2  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
  5084  0005F6  0009               	tblrd		*+
  5085  0005F8  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
  5086  0005FC  000A               	tblrd		*-
  5087  0005FE  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
  5088  000602  EC61  F00A         	call	i2___lldiv	;wreg free
  5089  000606  5001               	movf	?i2___lldiv,w,c
  5090  000608  0B0F               	andlw	15
  5091  00060A  6E1F               	movwf	i2printf@idx,c
  5092                           
  5093                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5094  00060C  501F               	movf	i2printf@idx,w,c
  5095  00060E  0D01               	mullw	1
  5096  000610  0E5E               	movlw	low STR_18
  5097  000612  24F3               	addwf	prodl,w,c
  5098  000614  6EF6               	movwf	tblptrl,c
  5099  000616  0EFF               	movlw	high STR_18
  5100  000618  20F4               	addwfc	prodh,w,c
  5101  00061A  6EF7               	movwf	tblptrh,c
  5102  00061C                     	if	0	;There are less than 3 active tblptr bytes
  5103  00061C                     	endif
  5104  00061C  0008               	tblrd		*
  5105  00061E  CFF5 F029          	movff	tablat,i2printf@c
  5106                           
  5107                           ;doprnt.c: 1523: }
  5108                           
  5109                           ;doprnt.c: 1508: }
  5110                           ;doprnt.c: 1510: break;
  5111  000622  D008               	goto	i2l3319
  5112  000624                     i2l3317:
  5113  000624  5028               	movf	i2printf@flag,w,c
  5114  000626  0B80               	andlw	128
  5115                           
  5116                           ; Switch size 1, requested type "space"
  5117                           ; Number of cases is 2, Range of values is 0 to 128
  5118                           ; switch strategies available:
  5119                           ; Name         Instructions Cycles
  5120                           ; simple_byte            7     4 (average)
  5121                           ;	Chosen strategy is simple_byte
  5122  000628  0A00               	xorlw	0	; case 0
  5123  00062A  B4D8               	btfsc	status,2,c
  5124  00062C  D78A               	goto	i2l3309
  5125  00062E  0A80               	xorlw	128	; case 128
  5126  000630  B4D8               	btfsc	status,2,c
  5127  000632  D7C3               	goto	i2l3311
  5128  000634                     i2l3319:
  5129                           
  5130                           ;doprnt.c: 1524: (putch(c) );
  5131  000634  5029               	movf	i2printf@c,w,c
  5132  000636  EC32  F00D         	call	i2_putch
  5133  00063A                     i2l3321:
  5134  00063A  0620               	decf	i2printf@prec,f,c
  5135  00063C  A0D8               	btfss	status,0,c
  5136  00063E  0621               	decf	i2printf@prec+1,f,c
  5137  000640  2820               	incf	i2printf@prec,w,c
  5138  000642  E1F0               	bnz	i2l3317
  5139  000644  2821               	incf	i2printf@prec+1,w,c
  5140  000646  A4D8               	btfss	status,2,c
  5141  000648  D7ED               	goto	i2l3317
  5142  00064A                     i2l3323:
  5143  00064A  C017  FFF6         	movff	i2printf@f,tblptrl
  5144  00064E  C018  FFF7         	movff	i2printf@f+1,tblptrh
  5145  000652  4A17               	infsnz	i2printf@f,f,c
  5146  000654  2A18               	incf	i2printf@f+1,f,c
  5147  000656                     	if	0	;tblptru may be non-zero
  5148  000656                     	endif
  5149  000656                     	if	0	;tblptru may be non-zero
  5150  000656                     	endif
  5151  000656  0008               	tblrd		*
  5152  000658  CFF5 F029          	movff	tablat,i2printf@c
  5153  00065C  5029               	movf	i2printf@c,w,c
  5154  00065E  B4D8               	btfsc	status,2,c
  5155  000660  0012               	return	
  5156  000662  D68F               	goto	i2l3227
  5157  000664                     __end_ofi2_printf:
  5158                           	opt stack 0
  5159                           pclatu	equ	0xFFB
  5160                           pclath	equ	0xFFA
  5161                           tblptru	equ	0xFF8
  5162                           tblptrh	equ	0xFF7
  5163                           tblptrl	equ	0xFF6
  5164                           tablat	equ	0xFF5
  5165                           prodh	equ	0xFF4
  5166                           prodl	equ	0xFF3
  5167                           intcon	equ	0xFF2
  5168                           intcon3	equ	0xFF0
  5169                           postinc0	equ	0xFEE
  5170                           fsr0h	equ	0xFEA
  5171                           fsr0l	equ	0xFE9
  5172                           wreg	equ	0xFE8
  5173                           postdec1	equ	0xFE5
  5174                           fsr1h	equ	0xFE2
  5175                           fsr1l	equ	0xFE1
  5176                           indf2	equ	0xFDF
  5177                           postinc2	equ	0xFDE
  5178                           postdec2	equ	0xFDD
  5179                           fsr2h	equ	0xFDA
  5180                           fsr2l	equ	0xFD9
  5181                           status	equ	0xFD8
  5182                           
  5183 ;; *************** function i2_putch *****************
  5184 ;; Defined at:
  5185 ;;		line 35 in file "lcd.c"
  5186 ;; Parameters:    Size  Location     Type
  5187 ;;  data            1    wreg     unsigned char 
  5188 ;; Auto vars:     Size  Location     Type
  5189 ;;  data            1    4[COMRAM] unsigned char 
  5190 ;; Return value:  Size  Location     Type
  5191 ;;                  1    wreg      void 
  5192 ;; Registers used:
  5193 ;;		wreg, status,2, status,0, cstack
  5194 ;; Tracked objects:
  5195 ;;		On entry : 0/0
  5196 ;;		On exit  : 0/0
  5197 ;;		Unchanged: 0/0
  5198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5200 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5202 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5203 ;;Total ram usage:        1 bytes
  5204 ;; Hardware stack levels used:    1
  5205 ;; Hardware stack levels required when called:    3
  5206 ;; This function calls:
  5207 ;;		i2_lcdNewline
  5208 ;;		i2_lcdNibble
  5209 ;; This function is called by:
  5210 ;;		i2_printf
  5211 ;; This function uses a non-reentrant model
  5212 ;;
  5213                           
  5214                           	psect	text26
  5215  001A64                     __ptext26:
  5216                           	opt stack 0
  5217  001A64                     i2_putch:
  5218                           	opt stack 17
  5219                           
  5220                           ;incstack = 0
  5221                           ;i2putch@data stored from wreg
  5222  001A64  6E05               	movwf	i2putch@data,c
  5223                           
  5224                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  5225  001A66  0E0A               	movlw	10
  5226  001A68  1805               	xorwf	i2putch@data,w,c
  5227  001A6A  A4D8               	btfss	status,2,c
  5228  001A6C  D003               	goto	i2l161
  5229  001A6E  EC7B  F00D         	call	i2_lcdNewline	;wreg free
  5230  001A72  0012               	return	
  5231  001A74                     i2l161:
  5232                           
  5233                           ;lcd.c: 37: else
  5234                           ;lcd.c: 38: {
  5235                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  5236  001A74  848C               	bsf	3980,2,c	;volatile
  5237                           
  5238                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  5239  001A76  0E74               	movlw	116
  5240  001A78                     i2u336_47:
  5241  001A78  2EE8               	decfsz	wreg,f,c
  5242  001A7A  D7FE               	bra	i2u336_47
  5243  001A7C  D000               	nop2	
  5244                           
  5245                           ;lcd.c: 41: lcdNibble(data);
  5246  001A7E  5005               	movf	i2putch@data,w,c
  5247  001A80  EC4D  F00B         	call	i2_lcdNibble
  5248  001A84  0012               	return	
  5249  001A86                     __end_ofi2_putch:
  5250                           	opt stack 0
  5251                           pclatu	equ	0xFFB
  5252                           pclath	equ	0xFFA
  5253                           tblptru	equ	0xFF8
  5254                           tblptrh	equ	0xFF7
  5255                           tblptrl	equ	0xFF6
  5256                           tablat	equ	0xFF5
  5257                           prodh	equ	0xFF4
  5258                           prodl	equ	0xFF3
  5259                           intcon	equ	0xFF2
  5260                           intcon3	equ	0xFF0
  5261                           postinc0	equ	0xFEE
  5262                           fsr0h	equ	0xFEA
  5263                           fsr0l	equ	0xFE9
  5264                           wreg	equ	0xFE8
  5265                           postdec1	equ	0xFE5
  5266                           fsr1h	equ	0xFE2
  5267                           fsr1l	equ	0xFE1
  5268                           indf2	equ	0xFDF
  5269                           postinc2	equ	0xFDE
  5270                           postdec2	equ	0xFDD
  5271                           fsr2h	equ	0xFDA
  5272                           fsr2l	equ	0xFD9
  5273                           status	equ	0xFD8
  5274                           
  5275 ;; *************** function i2_lcdNewline *****************
  5276 ;; Defined at:
  5277 ;;		line 78 in file "lcd.c"
  5278 ;; Parameters:    Size  Location     Type
  5279 ;;		None
  5280 ;; Auto vars:     Size  Location     Type
  5281 ;;		None
  5282 ;; Return value:  Size  Location     Type
  5283 ;;                  1    wreg      void 
  5284 ;; Registers used:
  5285 ;;		wreg, status,2, status,0, cstack
  5286 ;; Tracked objects:
  5287 ;;		On entry : 0/0
  5288 ;;		On exit  : 0/0
  5289 ;;		Unchanged: 0/0
  5290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5294 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5295 ;;Total ram usage:        0 bytes
  5296 ;; Hardware stack levels used:    1
  5297 ;; Hardware stack levels required when called:    2
  5298 ;; This function calls:
  5299 ;;		i2_lcdInst
  5300 ;; This function is called by:
  5301 ;;		i2_putch
  5302 ;; This function uses a non-reentrant model
  5303 ;;
  5304                           
  5305                           	psect	text27
  5306  001AF6                     __ptext27:
  5307                           	opt stack 0
  5308  001AF6                     i2_lcdNewline:
  5309                           	opt stack 17
  5310                           
  5311                           ;lcd.c: 79: lcdInst(0b11000000);
  5312                           
  5313                           ;incstack = 0
  5314  001AF6  0EC0               	movlw	192
  5315  001AF8  EC43  F00D         	call	i2_lcdInst
  5316  001AFC  0012               	return		;funcret
  5317  001AFE                     __end_ofi2_lcdNewline:
  5318                           	opt stack 0
  5319                           pclatu	equ	0xFFB
  5320                           pclath	equ	0xFFA
  5321                           tblptru	equ	0xFF8
  5322                           tblptrh	equ	0xFF7
  5323                           tblptrl	equ	0xFF6
  5324                           tablat	equ	0xFF5
  5325                           prodh	equ	0xFF4
  5326                           prodl	equ	0xFF3
  5327                           intcon	equ	0xFF2
  5328                           intcon3	equ	0xFF0
  5329                           postinc0	equ	0xFEE
  5330                           fsr0h	equ	0xFEA
  5331                           fsr0l	equ	0xFE9
  5332                           wreg	equ	0xFE8
  5333                           postdec1	equ	0xFE5
  5334                           fsr1h	equ	0xFE2
  5335                           fsr1l	equ	0xFE1
  5336                           indf2	equ	0xFDF
  5337                           postinc2	equ	0xFDE
  5338                           postdec2	equ	0xFDD
  5339                           fsr2h	equ	0xFDA
  5340                           fsr2l	equ	0xFD9
  5341                           status	equ	0xFD8
  5342                           
  5343 ;; *************** function i2___llmod *****************
  5344 ;; Defined at:
  5345 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  5346 ;; Parameters:    Size  Location     Type
  5347 ;;  dividend        4   13[COMRAM] unsigned long 
  5348 ;;  divisor         4   17[COMRAM] unsigned long 
  5349 ;; Auto vars:     Size  Location     Type
  5350 ;;  __llmod         1   21[COMRAM] unsigned char 
  5351 ;; Return value:  Size  Location     Type
  5352 ;;                  4   13[COMRAM] unsigned long 
  5353 ;; Registers used:
  5354 ;;		wreg, status,2, status,0
  5355 ;; Tracked objects:
  5356 ;;		On entry : 0/0
  5357 ;;		On exit  : 0/0
  5358 ;;		Unchanged: 0/0
  5359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5360 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5361 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5363 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5364 ;;Total ram usage:        9 bytes
  5365 ;; Hardware stack levels used:    1
  5366 ;; This function calls:
  5367 ;;		Nothing
  5368 ;; This function is called by:
  5369 ;;		i2_printf
  5370 ;; This function uses a non-reentrant model
  5371 ;;
  5372                           
  5373                           	psect	text28
  5374  001634                     __ptext28:
  5375                           	opt stack 0
  5376  001634                     i2___llmod:
  5377                           	opt stack 20
  5378                           
  5379                           ;incstack = 0
  5380  001634  5012               	movf	i2___llmod@divisor,w,c
  5381  001636  1013               	iorwf	i2___llmod@divisor+1,w,c
  5382  001638  1014               	iorwf	i2___llmod@divisor+2,w,c
  5383  00163A  1015               	iorwf	i2___llmod@divisor+3,w,c
  5384  00163C  B4D8               	btfsc	status,2,c
  5385  00163E  D024               	goto	i2l959
  5386  001640  0E01               	movlw	1
  5387  001642  6E16               	movwf	i2___llmod@counter,c
  5388  001644  D006               	goto	i2l3079
  5389  001646                     i2l3077:
  5390  001646  90D8               	bcf	status,0,c
  5391  001648  3612               	rlcf	i2___llmod@divisor,f,c
  5392  00164A  3613               	rlcf	i2___llmod@divisor+1,f,c
  5393  00164C  3614               	rlcf	i2___llmod@divisor+2,f,c
  5394  00164E  3615               	rlcf	i2___llmod@divisor+3,f,c
  5395  001650  2A16               	incf	i2___llmod@counter,f,c
  5396  001652                     i2l3079:
  5397  001652  AE15               	btfss	i2___llmod@divisor+3,7,c
  5398  001654  D7F8               	goto	i2l3077
  5399  001656                     i2l3081:
  5400  001656  5012               	movf	i2___llmod@divisor,w,c
  5401  001658  5C0E               	subwf	i2___llmod@dividend,w,c
  5402  00165A  5013               	movf	i2___llmod@divisor+1,w,c
  5403  00165C  580F               	subwfb	i2___llmod@dividend+1,w,c
  5404  00165E  5014               	movf	i2___llmod@divisor+2,w,c
  5405  001660  5810               	subwfb	i2___llmod@dividend+2,w,c
  5406  001662  5015               	movf	i2___llmod@divisor+3,w,c
  5407  001664  5811               	subwfb	i2___llmod@dividend+3,w,c
  5408  001666  A0D8               	btfss	status,0,c
  5409  001668  D008               	goto	i2l3085
  5410  00166A  5012               	movf	i2___llmod@divisor,w,c
  5411  00166C  5E0E               	subwf	i2___llmod@dividend,f,c
  5412  00166E  5013               	movf	i2___llmod@divisor+1,w,c
  5413  001670  5A0F               	subwfb	i2___llmod@dividend+1,f,c
  5414  001672  5014               	movf	i2___llmod@divisor+2,w,c
  5415  001674  5A10               	subwfb	i2___llmod@dividend+2,f,c
  5416  001676  5015               	movf	i2___llmod@divisor+3,w,c
  5417  001678  5A11               	subwfb	i2___llmod@dividend+3,f,c
  5418  00167A                     i2l3085:
  5419  00167A  90D8               	bcf	status,0,c
  5420  00167C  3215               	rrcf	i2___llmod@divisor+3,f,c
  5421  00167E  3214               	rrcf	i2___llmod@divisor+2,f,c
  5422  001680  3213               	rrcf	i2___llmod@divisor+1,f,c
  5423  001682  3212               	rrcf	i2___llmod@divisor,f,c
  5424  001684  2E16               	decfsz	i2___llmod@counter,f,c
  5425  001686  D7E7               	goto	i2l3081
  5426  001688                     i2l959:
  5427  001688  C00E  F00E         	movff	i2___llmod@dividend,?i2___llmod
  5428  00168C  C00F  F00F         	movff	i2___llmod@dividend+1,?i2___llmod+1
  5429  001690  C010  F010         	movff	i2___llmod@dividend+2,?i2___llmod+2
  5430  001694  C011  F011         	movff	i2___llmod@dividend+3,?i2___llmod+3
  5431  001698  0012               	return		;funcret
  5432  00169A                     __end_ofi2___llmod:
  5433                           	opt stack 0
  5434                           pclatu	equ	0xFFB
  5435                           pclath	equ	0xFFA
  5436                           tblptru	equ	0xFF8
  5437                           tblptrh	equ	0xFF7
  5438                           tblptrl	equ	0xFF6
  5439                           tablat	equ	0xFF5
  5440                           prodh	equ	0xFF4
  5441                           prodl	equ	0xFF3
  5442                           intcon	equ	0xFF2
  5443                           intcon3	equ	0xFF0
  5444                           postinc0	equ	0xFEE
  5445                           fsr0h	equ	0xFEA
  5446                           fsr0l	equ	0xFE9
  5447                           wreg	equ	0xFE8
  5448                           postdec1	equ	0xFE5
  5449                           fsr1h	equ	0xFE2
  5450                           fsr1l	equ	0xFE1
  5451                           indf2	equ	0xFDF
  5452                           postinc2	equ	0xFDE
  5453                           postdec2	equ	0xFDD
  5454                           fsr2h	equ	0xFDA
  5455                           fsr2l	equ	0xFD9
  5456                           status	equ	0xFD8
  5457                           
  5458 ;; *************** function i2___lldiv *****************
  5459 ;; Defined at:
  5460 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5461 ;; Parameters:    Size  Location     Type
  5462 ;;  dividend        4    0[COMRAM] unsigned long 
  5463 ;;  divisor         4    4[COMRAM] unsigned long 
  5464 ;; Auto vars:     Size  Location     Type
  5465 ;;  __lldiv         4    8[COMRAM] unsigned long 
  5466 ;;  __lldiv         1   12[COMRAM] unsigned char 
  5467 ;; Return value:  Size  Location     Type
  5468 ;;                  4    0[COMRAM] unsigned long 
  5469 ;; Registers used:
  5470 ;;		wreg, status,2, status,0
  5471 ;; Tracked objects:
  5472 ;;		On entry : 0/0
  5473 ;;		On exit  : 0/0
  5474 ;;		Unchanged: 0/0
  5475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5476 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5477 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5479 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5480 ;;Total ram usage:       13 bytes
  5481 ;; Hardware stack levels used:    1
  5482 ;; This function calls:
  5483 ;;		Nothing
  5484 ;; This function is called by:
  5485 ;;		i2_printf
  5486 ;; This function uses a non-reentrant model
  5487 ;;
  5488                           
  5489                           	psect	text29
  5490  0014C2                     __ptext29:
  5491                           	opt stack 0
  5492  0014C2                     i2___lldiv:
  5493                           	opt stack 20
  5494                           
  5495                           ;incstack = 0
  5496  0014C2  0E00               	movlw	0
  5497  0014C4  6E09               	movwf	i2___lldiv@quotient,c
  5498  0014C6  0E00               	movlw	0
  5499  0014C8  6E0A               	movwf	i2___lldiv@quotient+1,c
  5500  0014CA  0E00               	movlw	0
  5501  0014CC  6E0B               	movwf	i2___lldiv@quotient+2,c
  5502  0014CE  0E00               	movlw	0
  5503  0014D0  6E0C               	movwf	i2___lldiv@quotient+3,c
  5504  0014D2  5005               	movf	i2___lldiv@divisor,w,c
  5505  0014D4  1006               	iorwf	i2___lldiv@divisor+1,w,c
  5506  0014D6  1007               	iorwf	i2___lldiv@divisor+2,w,c
  5507  0014D8  1008               	iorwf	i2___lldiv@divisor+3,w,c
  5508  0014DA  B4D8               	btfsc	status,2,c
  5509  0014DC  D02A               	goto	i2l949
  5510  0014DE  0E01               	movlw	1
  5511  0014E0  6E0D               	movwf	i2___lldiv@counter,c
  5512  0014E2  D006               	goto	i2l3059
  5513  0014E4                     i2l3057:
  5514  0014E4  90D8               	bcf	status,0,c
  5515  0014E6  3605               	rlcf	i2___lldiv@divisor,f,c
  5516  0014E8  3606               	rlcf	i2___lldiv@divisor+1,f,c
  5517  0014EA  3607               	rlcf	i2___lldiv@divisor+2,f,c
  5518  0014EC  3608               	rlcf	i2___lldiv@divisor+3,f,c
  5519  0014EE  2A0D               	incf	i2___lldiv@counter,f,c
  5520  0014F0                     i2l3059:
  5521  0014F0  AE08               	btfss	i2___lldiv@divisor+3,7,c
  5522  0014F2  D7F8               	goto	i2l3057
  5523  0014F4                     i2l3061:
  5524  0014F4  90D8               	bcf	status,0,c
  5525  0014F6  3609               	rlcf	i2___lldiv@quotient,f,c
  5526  0014F8  360A               	rlcf	i2___lldiv@quotient+1,f,c
  5527  0014FA  360B               	rlcf	i2___lldiv@quotient+2,f,c
  5528  0014FC  360C               	rlcf	i2___lldiv@quotient+3,f,c
  5529  0014FE  5005               	movf	i2___lldiv@divisor,w,c
  5530  001500  5C01               	subwf	i2___lldiv@dividend,w,c
  5531  001502  5006               	movf	i2___lldiv@divisor+1,w,c
  5532  001504  5802               	subwfb	i2___lldiv@dividend+1,w,c
  5533  001506  5007               	movf	i2___lldiv@divisor+2,w,c
  5534  001508  5803               	subwfb	i2___lldiv@dividend+2,w,c
  5535  00150A  5008               	movf	i2___lldiv@divisor+3,w,c
  5536  00150C  5804               	subwfb	i2___lldiv@dividend+3,w,c
  5537  00150E  A0D8               	btfss	status,0,c
  5538  001510  D009               	goto	i2l3069
  5539  001512  5005               	movf	i2___lldiv@divisor,w,c
  5540  001514  5E01               	subwf	i2___lldiv@dividend,f,c
  5541  001516  5006               	movf	i2___lldiv@divisor+1,w,c
  5542  001518  5A02               	subwfb	i2___lldiv@dividend+1,f,c
  5543  00151A  5007               	movf	i2___lldiv@divisor+2,w,c
  5544  00151C  5A03               	subwfb	i2___lldiv@dividend+2,f,c
  5545  00151E  5008               	movf	i2___lldiv@divisor+3,w,c
  5546  001520  5A04               	subwfb	i2___lldiv@dividend+3,f,c
  5547  001522  8009               	bsf	i2___lldiv@quotient,0,c
  5548  001524                     i2l3069:
  5549  001524  90D8               	bcf	status,0,c
  5550  001526  3208               	rrcf	i2___lldiv@divisor+3,f,c
  5551  001528  3207               	rrcf	i2___lldiv@divisor+2,f,c
  5552  00152A  3206               	rrcf	i2___lldiv@divisor+1,f,c
  5553  00152C  3205               	rrcf	i2___lldiv@divisor,f,c
  5554  00152E  2E0D               	decfsz	i2___lldiv@counter,f,c
  5555  001530  D7E1               	goto	i2l3061
  5556  001532                     i2l949:
  5557  001532  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
  5558  001536  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
  5559  00153A  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
  5560  00153E  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
  5561  001542  0012               	return		;funcret
  5562  001544                     __end_ofi2___lldiv:
  5563                           	opt stack 0
  5564                           pclatu	equ	0xFFB
  5565                           pclath	equ	0xFFA
  5566                           tblptru	equ	0xFF8
  5567                           tblptrh	equ	0xFF7
  5568                           tblptrl	equ	0xFF6
  5569                           tablat	equ	0xFF5
  5570                           prodh	equ	0xFF4
  5571                           prodl	equ	0xFF3
  5572                           intcon	equ	0xFF2
  5573                           intcon3	equ	0xFF0
  5574                           postinc0	equ	0xFEE
  5575                           fsr0h	equ	0xFEA
  5576                           fsr0l	equ	0xFE9
  5577                           wreg	equ	0xFE8
  5578                           postdec1	equ	0xFE5
  5579                           fsr1h	equ	0xFE2
  5580                           fsr1l	equ	0xFE1
  5581                           indf2	equ	0xFDF
  5582                           postinc2	equ	0xFDE
  5583                           postdec2	equ	0xFDD
  5584                           fsr2h	equ	0xFDA
  5585                           fsr2l	equ	0xFD9
  5586                           status	equ	0xFD8
  5587                           
  5588 ;; *************** function i2_lcdClear *****************
  5589 ;; Defined at:
  5590 ;;		line 74 in file "lcd.c"
  5591 ;; Parameters:    Size  Location     Type
  5592 ;;		None
  5593 ;; Auto vars:     Size  Location     Type
  5594 ;;		None
  5595 ;; Return value:  Size  Location     Type
  5596 ;;                  1    wreg      void 
  5597 ;; Registers used:
  5598 ;;		wreg, status,2, status,0, cstack
  5599 ;; Tracked objects:
  5600 ;;		On entry : 0/0
  5601 ;;		On exit  : 0/0
  5602 ;;		Unchanged: 0/0
  5603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5608 ;;Total ram usage:        0 bytes
  5609 ;; Hardware stack levels used:    1
  5610 ;; Hardware stack levels required when called:    2
  5611 ;; This function calls:
  5612 ;;		i2_lcdInst
  5613 ;; This function is called by:
  5614 ;;		_sortBatteryInterruptService
  5615 ;;		_setAngle
  5616 ;; This function uses a non-reentrant model
  5617 ;;
  5618                           
  5619                           	psect	text30
  5620  001AFE                     __ptext30:
  5621                           	opt stack 0
  5622  001AFE                     i2_lcdClear:
  5623                           	opt stack 19
  5624                           
  5625                           ;lcd.c: 75: lcdInst(0b00000001);
  5626                           
  5627                           ;incstack = 0
  5628  001AFE  0E01               	movlw	1
  5629  001B00  EC43  F00D         	call	i2_lcdInst
  5630  001B04  0012               	return		;funcret
  5631  001B06                     __end_ofi2_lcdClear:
  5632                           	opt stack 0
  5633                           pclatu	equ	0xFFB
  5634                           pclath	equ	0xFFA
  5635                           tblptru	equ	0xFF8
  5636                           tblptrh	equ	0xFF7
  5637                           tblptrl	equ	0xFF6
  5638                           tablat	equ	0xFF5
  5639                           prodh	equ	0xFF4
  5640                           prodl	equ	0xFF3
  5641                           intcon	equ	0xFF2
  5642                           intcon3	equ	0xFF0
  5643                           postinc0	equ	0xFEE
  5644                           fsr0h	equ	0xFEA
  5645                           fsr0l	equ	0xFE9
  5646                           wreg	equ	0xFE8
  5647                           postdec1	equ	0xFE5
  5648                           fsr1h	equ	0xFE2
  5649                           fsr1l	equ	0xFE1
  5650                           indf2	equ	0xFDF
  5651                           postinc2	equ	0xFDE
  5652                           postdec2	equ	0xFDD
  5653                           fsr2h	equ	0xFDA
  5654                           fsr2l	equ	0xFD9
  5655                           status	equ	0xFD8
  5656                           
  5657 ;; *************** function i2_lcdInst *****************
  5658 ;; Defined at:
  5659 ;;		line 27 in file "lcd.c"
  5660 ;; Parameters:    Size  Location     Type
  5661 ;;  data            1    wreg     unsigned char 
  5662 ;; Auto vars:     Size  Location     Type
  5663 ;;  data            1    3[COMRAM] unsigned char 
  5664 ;; Return value:  Size  Location     Type
  5665 ;;                  1    wreg      void 
  5666 ;; Registers used:
  5667 ;;		wreg, status,2, status,0, cstack
  5668 ;; Tracked objects:
  5669 ;;		On entry : 0/0
  5670 ;;		On exit  : 0/0
  5671 ;;		Unchanged: 0/0
  5672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5674 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5675 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5676 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5677 ;;Total ram usage:        2 bytes
  5678 ;; Hardware stack levels used:    1
  5679 ;; Hardware stack levels required when called:    1
  5680 ;; This function calls:
  5681 ;;		i2_lcdNibble
  5682 ;; This function is called by:
  5683 ;;		i2_lcdClear
  5684 ;;		i2_lcdNewline
  5685 ;; This function uses a non-reentrant model
  5686 ;;
  5687                           
  5688                           	psect	text31
  5689  001A86                     __ptext31:
  5690                           	opt stack 0
  5691  001A86                     i2_lcdInst:
  5692                           	opt stack 17
  5693                           
  5694                           ;incstack = 0
  5695                           ;i2lcdInst@data stored from wreg
  5696  001A86  6E04               	movwf	i2lcdInst@data,c
  5697                           
  5698                           ;lcd.c: 28: LATDbits.LATD2 = 0;
  5699  001A88  948C               	bcf	3980,2,c	;volatile
  5700                           
  5701                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
  5702  001A8A  0E74               	movlw	116
  5703  001A8C                     i2u337_47:
  5704  001A8C  2EE8               	decfsz	wreg,f,c
  5705  001A8E  D7FE               	bra	i2u337_47
  5706  001A90  D000               	nop2	
  5707                           
  5708                           ;lcd.c: 30: lcdNibble(data);
  5709  001A92  5004               	movf	i2lcdInst@data,w,c
  5710  001A94  EC4D  F00B         	call	i2_lcdNibble
  5711                           
  5712                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
  5713  001A98  0E04               	movlw	4
  5714  001A9A  6E03               	movwf	??i2_lcdInst& (0+255),c
  5715  001A9C  0E3E               	movlw	62
  5716  001A9E                     i2u338_47:
  5717  001A9E  2EE8               	decfsz	wreg,f,c
  5718  001AA0  D7FE               	bra	i2u338_47
  5719  001AA2  2E03               	decfsz	??i2_lcdInst& (0+255),f,c
  5720  001AA4  D7FC               	bra	i2u338_47
  5721  001AA6  0012               	return		;funcret
  5722  001AA8                     __end_ofi2_lcdInst:
  5723                           	opt stack 0
  5724                           pclatu	equ	0xFFB
  5725                           pclath	equ	0xFFA
  5726                           tblptru	equ	0xFF8
  5727                           tblptrh	equ	0xFF7
  5728                           tblptrl	equ	0xFF6
  5729                           tablat	equ	0xFF5
  5730                           prodh	equ	0xFF4
  5731                           prodl	equ	0xFF3
  5732                           intcon	equ	0xFF2
  5733                           intcon3	equ	0xFF0
  5734                           postinc0	equ	0xFEE
  5735                           fsr0h	equ	0xFEA
  5736                           fsr0l	equ	0xFE9
  5737                           wreg	equ	0xFE8
  5738                           postdec1	equ	0xFE5
  5739                           fsr1h	equ	0xFE2
  5740                           fsr1l	equ	0xFE1
  5741                           indf2	equ	0xFDF
  5742                           postinc2	equ	0xFDE
  5743                           postdec2	equ	0xFDD
  5744                           fsr2h	equ	0xFDA
  5745                           fsr2l	equ	0xFD9
  5746                           status	equ	0xFD8
  5747                           
  5748 ;; *************** function i2_lcdNibble *****************
  5749 ;; Defined at:
  5750 ;;		line 46 in file "lcd.c"
  5751 ;; Parameters:    Size  Location     Type
  5752 ;;  data            1    wreg     unsigned char 
  5753 ;; Auto vars:     Size  Location     Type
  5754 ;;  data            1    1[COMRAM] unsigned char 
  5755 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  5756 ;; Return value:  Size  Location     Type
  5757 ;;                  1    wreg      void 
  5758 ;; Registers used:
  5759 ;;		wreg, status,2, status,0
  5760 ;; Tracked objects:
  5761 ;;		On entry : 0/0
  5762 ;;		On exit  : 0/0
  5763 ;;		Unchanged: 0/0
  5764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5766 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5768 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5769 ;;Total ram usage:        2 bytes
  5770 ;; Hardware stack levels used:    1
  5771 ;; This function calls:
  5772 ;;		Nothing
  5773 ;; This function is called by:
  5774 ;;		i2_lcdInst
  5775 ;;		i2_putch
  5776 ;; This function uses a non-reentrant model
  5777 ;;
  5778                           
  5779                           	psect	text32
  5780  00169A                     __ptext32:
  5781                           	opt stack 0
  5782  00169A                     i2_lcdNibble:
  5783                           	opt stack 19
  5784                           
  5785                           ;incstack = 0
  5786                           ;i2lcdNibble@data stored from wreg
  5787  00169A  6E02               	movwf	i2lcdNibble@data,c
  5788                           
  5789                           ;lcd.c: 48: char temp = data & 0xF0;
  5790  00169C  5002               	movf	i2lcdNibble@data,w,c
  5791  00169E  0BF0               	andlw	240
  5792  0016A0  6E01               	movwf	i2lcdNibble@temp,c
  5793                           
  5794                           ;lcd.c: 49: LATD = LATD & 0x0F;
  5795  0016A2  508C               	movf	3980,w,c	;volatile
  5796  0016A4  0B0F               	andlw	15
  5797  0016A6  6E8C               	movwf	3980,c	;volatile
  5798                           
  5799                           ;lcd.c: 50: LATD = temp | LATD;
  5800  0016A8  5001               	movf	i2lcdNibble@temp,w,c
  5801  0016AA  108C               	iorwf	3980,w,c	;volatile
  5802  0016AC  6E8C               	movwf	3980,c	;volatile
  5803                           
  5804                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  5805  0016AE  968C               	bcf	3980,3,c	;volatile
  5806                           
  5807                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
  5808  0016B0  0ED6               	movlw	214
  5809  0016B2                     i2u339_47:
  5810  0016B2  D000               	nop2	
  5811  0016B4  D000               	nop2	
  5812  0016B6  2EE8               	decfsz	wreg,f,c
  5813  0016B8  D7FC               	bra	i2u339_47
  5814  0016BA  D000               	nop2	
  5815                           
  5816                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  5817  0016BC  868C               	bsf	3980,3,c	;volatile
  5818                           
  5819                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
  5820  0016BE  0ED6               	movlw	214
  5821  0016C0                     i2u340_47:
  5822  0016C0  D000               	nop2	
  5823  0016C2  D000               	nop2	
  5824  0016C4  2EE8               	decfsz	wreg,f,c
  5825  0016C6  D7FC               	bra	i2u340_47
  5826  0016C8  D000               	nop2	
  5827                           
  5828                           ;lcd.c: 58: data = data << 4;
  5829  0016CA  3802               	swapf	i2lcdNibble@data,w,c
  5830  0016CC  0BF0               	andlw	240
  5831  0016CE  6E02               	movwf	i2lcdNibble@data,c
  5832                           
  5833                           ;lcd.c: 60: temp = data & 0xF0;
  5834  0016D0  5002               	movf	i2lcdNibble@data,w,c
  5835  0016D2  0BF0               	andlw	240
  5836  0016D4  6E01               	movwf	i2lcdNibble@temp,c
  5837                           
  5838                           ;lcd.c: 61: LATD = LATD & 0x0F;
  5839  0016D6  508C               	movf	3980,w,c	;volatile
  5840  0016D8  0B0F               	andlw	15
  5841  0016DA  6E8C               	movwf	3980,c	;volatile
  5842                           
  5843                           ;lcd.c: 62: LATD = temp | LATD;
  5844  0016DC  5001               	movf	i2lcdNibble@temp,w,c
  5845  0016DE  108C               	iorwf	3980,w,c	;volatile
  5846  0016E0  6E8C               	movwf	3980,c	;volatile
  5847                           
  5848                           ;lcd.c: 64: LATDbits.LATD3 = 0;
  5849  0016E2  968C               	bcf	3980,3,c	;volatile
  5850                           
  5851                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
  5852  0016E4  0ED6               	movlw	214
  5853  0016E6                     i2u341_47:
  5854  0016E6  D000               	nop2	
  5855  0016E8  D000               	nop2	
  5856  0016EA  2EE8               	decfsz	wreg,f,c
  5857  0016EC  D7FC               	bra	i2u341_47
  5858  0016EE  D000               	nop2	
  5859                           
  5860                           ;lcd.c: 66: LATDbits.LATD3 = 1;
  5861  0016F0  868C               	bsf	3980,3,c	;volatile
  5862                           
  5863                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
  5864  0016F2  0ED6               	movlw	214
  5865  0016F4                     i2u342_47:
  5866  0016F4  D000               	nop2	
  5867  0016F6  D000               	nop2	
  5868  0016F8  2EE8               	decfsz	wreg,f,c
  5869  0016FA  D7FC               	bra	i2u342_47
  5870  0016FC  D000               	nop2	
  5871  0016FE  0012               	return		;funcret
  5872  001700                     __end_ofi2_lcdNibble:
  5873                           	opt stack 0
  5874                           pclatu	equ	0xFFB
  5875                           pclath	equ	0xFFA
  5876                           tblptru	equ	0xFF8
  5877                           tblptrh	equ	0xFF7
  5878                           tblptrl	equ	0xFF6
  5879                           tablat	equ	0xFF5
  5880                           prodh	equ	0xFF4
  5881                           prodl	equ	0xFF3
  5882                           intcon	equ	0xFF2
  5883                           intcon3	equ	0xFF0
  5884                           postinc0	equ	0xFEE
  5885                           fsr0h	equ	0xFEA
  5886                           fsr0l	equ	0xFE9
  5887                           wreg	equ	0xFE8
  5888                           postdec1	equ	0xFE5
  5889                           fsr1h	equ	0xFE2
  5890                           fsr1l	equ	0xFE1
  5891                           indf2	equ	0xFDF
  5892                           postinc2	equ	0xFDE
  5893                           postdec2	equ	0xFDD
  5894                           fsr2h	equ	0xFDA
  5895                           fsr2l	equ	0xFD9
  5896                           status	equ	0xFD8
  5897                           
  5898 ;; *************** function _angleToPulse *****************
  5899 ;; Defined at:
  5900 ;;		line 26 in file "servo.c"
  5901 ;; Parameters:    Size  Location     Type
  5902 ;;  angle           2   69[COMRAM] int 
  5903 ;; Auto vars:     Size  Location     Type
  5904 ;;  a000            4   88[COMRAM] long 
  5905 ;;  a180            4   81[COMRAM] long 
  5906 ;;  offset          4   77[COMRAM] long 
  5907 ;; Return value:  Size  Location     Type
  5908 ;;                  4   69[COMRAM] long 
  5909 ;; Registers used:
  5910 ;;		wreg, status,2, status,0, cstack
  5911 ;; Tracked objects:
  5912 ;;		On entry : 0/0
  5913 ;;		On exit  : 0/0
  5914 ;;		Unchanged: 0/0
  5915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5916 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5917 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5918 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5919 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5920 ;;Total ram usage:       23 bytes
  5921 ;; Hardware stack levels used:    1
  5922 ;; Hardware stack levels required when called:    2
  5923 ;; This function calls:
  5924 ;;		___altoft
  5925 ;;		___awtoft
  5926 ;;		___ftadd
  5927 ;;		___ftdiv
  5928 ;;		___ftmul
  5929 ;;		___fttol
  5930 ;; This function is called by:
  5931 ;;		_setAngle
  5932 ;; This function uses a non-reentrant model
  5933 ;;
  5934                           
  5935                           	psect	text33
  5936  0009E4                     __ptext33:
  5937                           	opt stack 0
  5938  0009E4                     _angleToPulse:
  5939                           	opt stack 19
  5940                           
  5941                           ;servo.c: 27: long offset = 0;
  5942                           
  5943                           ;incstack = 0
  5944  0009E4  0E00               	movlw	0
  5945  0009E6  6E4E               	movwf	angleToPulse@offset,c
  5946  0009E8  0E00               	movlw	0
  5947  0009EA  6E4F               	movwf	angleToPulse@offset+1,c
  5948  0009EC  0E00               	movlw	0
  5949  0009EE  6E50               	movwf	angleToPulse@offset+2,c
  5950  0009F0  0E00               	movlw	0
  5951  0009F2  6E51               	movwf	angleToPulse@offset+3,c
  5952                           
  5953                           ;servo.c: 28: long a000 = 1250;
  5954  0009F4  0EE2               	movlw	226
  5955  0009F6  6E59               	movwf	angleToPulse@a000,c
  5956  0009F8  0E04               	movlw	4
  5957  0009FA  6E5A               	movwf	angleToPulse@a000+1,c
  5958  0009FC  0E00               	movlw	0
  5959  0009FE  6E5B               	movwf	angleToPulse@a000+2,c
  5960  000A00  0E00               	movlw	0
  5961  000A02  6E5C               	movwf	angleToPulse@a000+3,c
  5962                           
  5963                           ;servo.c: 29: long a180 = 6250;
  5964  000A04  0E6A               	movlw	106
  5965  000A06  6E52               	movwf	angleToPulse@a180,c
  5966  000A08  0E18               	movlw	24
  5967  000A0A  6E53               	movwf	angleToPulse@a180+1,c
  5968  000A0C  0E00               	movlw	0
  5969  000A0E  6E54               	movwf	angleToPulse@a180+2,c
  5970  000A10  0E00               	movlw	0
  5971  000A12  6E55               	movwf	angleToPulse@a180+3,c
  5972                           
  5973                           ;servo.c: 31: return a000 + angle/180.0*(a180-a000) + offset;
  5974  000A14  C059  F04A         	movff	angleToPulse@a000,??_angleToPulse
  5975  000A18  C05A  F04B         	movff	angleToPulse@a000+1,??_angleToPulse+1
  5976  000A1C  C05B  F04C         	movff	angleToPulse@a000+2,??_angleToPulse+2
  5977  000A20  C05C  F04D         	movff	angleToPulse@a000+3,??_angleToPulse+3
  5978  000A24  1E4A               	comf	??_angleToPulse,f,c
  5979  000A26  1E4B               	comf	??_angleToPulse+1,f,c
  5980  000A28  1E4C               	comf	??_angleToPulse+2,f,c
  5981  000A2A  1E4D               	comf	??_angleToPulse+3,f,c
  5982  000A2C  2A4A               	incf	??_angleToPulse,f,c
  5983  000A2E  0E00               	movlw	0
  5984  000A30  224B               	addwfc	??_angleToPulse+1,f,c
  5985  000A32  224C               	addwfc	??_angleToPulse+2,f,c
  5986  000A34  224D               	addwfc	??_angleToPulse+3,f,c
  5987  000A36  5052               	movf	angleToPulse@a180,w,c
  5988  000A38  244A               	addwf	??_angleToPulse,w,c
  5989  000A3A  6E09               	movwf	___altoft@c,c
  5990  000A3C  5053               	movf	angleToPulse@a180+1,w,c
  5991  000A3E  204B               	addwfc	??_angleToPulse+1,w,c
  5992  000A40  6E0A               	movwf	___altoft@c+1,c
  5993  000A42  5054               	movf	angleToPulse@a180+2,w,c
  5994  000A44  204C               	addwfc	??_angleToPulse+2,w,c
  5995  000A46  6E0B               	movwf	___altoft@c+2,c
  5996  000A48  5055               	movf	angleToPulse@a180+3,w,c
  5997  000A4A  204D               	addwfc	??_angleToPulse+3,w,c
  5998  000A4C  6E0C               	movwf	___altoft@c+3,c
  5999  000A4E  ECDE  F00A         	call	___altoft	;wreg free
  6000  000A52  C009  F01F         	movff	?___altoft,___ftmul@f2
  6001  000A56  C00A  F020         	movff	?___altoft+1,___ftmul@f2+1
  6002  000A5A  C00B  F021         	movff	?___altoft+2,___ftmul@f2+2
  6003  000A5E  0E00               	movlw	0
  6004  000A60  6E10               	movwf	___ftdiv@f2,c
  6005  000A62  0E34               	movlw	52
  6006  000A64  6E11               	movwf	___ftdiv@f2+1,c
  6007  000A66  0E43               	movlw	67
  6008  000A68  6E12               	movwf	___ftdiv@f2+2,c
  6009  000A6A  C046  F009         	movff	angleToPulse@angle,___awtoft@c
  6010  000A6E  C047  F00A         	movff	angleToPulse@angle+1,___awtoft@c+1
  6011  000A72  EC60  F00C         	call	___awtoft	;wreg free
  6012  000A76  C009  F00D         	movff	?___awtoft,___ftdiv@f1
  6013  000A7A  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
  6014  000A7E  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
  6015  000A82  EC08  F007         	call	___ftdiv	;wreg free
  6016  000A86  C00D  F01C         	movff	?___ftdiv,___ftmul@f1
  6017  000A8A  C00E  F01D         	movff	?___ftdiv+1,___ftmul@f1+1
  6018  000A8E  C00F  F01E         	movff	?___ftdiv+2,___ftmul@f1+2
  6019  000A92  EC8E  F006         	call	___ftmul	;wreg free
  6020  000A96  C01C  F02E         	movff	?___ftmul,___ftadd@f2
  6021  000A9A  C01D  F02F         	movff	?___ftmul+1,___ftadd@f2+1
  6022  000A9E  C01E  F030         	movff	?___ftmul+2,___ftadd@f2+2
  6023  000AA2  C059  F009         	movff	angleToPulse@a000,___altoft@c
  6024  000AA6  C05A  F00A         	movff	angleToPulse@a000+1,___altoft@c+1
  6025  000AAA  C05B  F00B         	movff	angleToPulse@a000+2,___altoft@c+2
  6026  000AAE  C05C  F00C         	movff	angleToPulse@a000+3,___altoft@c+3
  6027  000AB2  ECDE  F00A         	call	___altoft	;wreg free
  6028  000AB6  C009  F02B         	movff	?___altoft,___ftadd@f1
  6029  000ABA  C00A  F02C         	movff	?___altoft+1,___ftadd@f1+1
  6030  000ABE  C00B  F02D         	movff	?___altoft+2,___ftadd@f1+2
  6031  000AC2  EC1C  F004         	call	___ftadd	;wreg free
  6032  000AC6  C02B  F056         	movff	?___ftadd,_angleToPulse$1200
  6033  000ACA  C02C  F057         	movff	?___ftadd+1,_angleToPulse$1200+1
  6034  000ACE  C02D  F058         	movff	?___ftadd+2,_angleToPulse$1200+2
  6035                           
  6036                           ;servo.c: 31: return a000 + angle/180.0*(a180-a000) + offset;
  6037  000AD2  C04E  F009         	movff	angleToPulse@offset,___altoft@c
  6038  000AD6  C04F  F00A         	movff	angleToPulse@offset+1,___altoft@c+1
  6039  000ADA  C050  F00B         	movff	angleToPulse@offset+2,___altoft@c+2
  6040  000ADE  C051  F00C         	movff	angleToPulse@offset+3,___altoft@c+3
  6041  000AE2  ECDE  F00A         	call	___altoft	;wreg free
  6042  000AE6  C009  F02E         	movff	?___altoft,___ftadd@f2
  6043  000AEA  C00A  F02F         	movff	?___altoft+1,___ftadd@f2+1
  6044  000AEE  C00B  F030         	movff	?___altoft+2,___ftadd@f2+2
  6045  000AF2  C056  F02B         	movff	_angleToPulse$1200,___ftadd@f1
  6046  000AF6  C057  F02C         	movff	_angleToPulse$1200+1,___ftadd@f1+1
  6047  000AFA  C058  F02D         	movff	_angleToPulse$1200+2,___ftadd@f1+2
  6048  000AFE  EC1C  F004         	call	___ftadd	;wreg free
  6049  000B02  C02B  F037         	movff	?___ftadd,___fttol@f1
  6050  000B06  C02C  F038         	movff	?___ftadd+1,___fttol@f1+1
  6051  000B0A  C02D  F039         	movff	?___ftadd+2,___fttol@f1+2
  6052  000B0E  EC14  F006         	call	___fttol	;wreg free
  6053  000B12  C037  F046         	movff	?___fttol,?_angleToPulse
  6054  000B16  C038  F047         	movff	?___fttol+1,?_angleToPulse+1
  6055  000B1A  C039  F048         	movff	?___fttol+2,?_angleToPulse+2
  6056  000B1E  C03A  F049         	movff	?___fttol+3,?_angleToPulse+3
  6057  000B22  0012               	return	
  6058  000B24                     __end_of_angleToPulse:
  6059                           	opt stack 0
  6060                           pclatu	equ	0xFFB
  6061                           pclath	equ	0xFFA
  6062                           tblptru	equ	0xFF8
  6063                           tblptrh	equ	0xFF7
  6064                           tblptrl	equ	0xFF6
  6065                           tablat	equ	0xFF5
  6066                           prodh	equ	0xFF4
  6067                           prodl	equ	0xFF3
  6068                           intcon	equ	0xFF2
  6069                           intcon3	equ	0xFF0
  6070                           postinc0	equ	0xFEE
  6071                           fsr0h	equ	0xFEA
  6072                           fsr0l	equ	0xFE9
  6073                           wreg	equ	0xFE8
  6074                           postdec1	equ	0xFE5
  6075                           fsr1h	equ	0xFE2
  6076                           fsr1l	equ	0xFE1
  6077                           indf2	equ	0xFDF
  6078                           postinc2	equ	0xFDE
  6079                           postdec2	equ	0xFDD
  6080                           fsr2h	equ	0xFDA
  6081                           fsr2l	equ	0xFD9
  6082                           status	equ	0xFD8
  6083                           
  6084 ;; *************** function ___fttol *****************
  6085 ;; Defined at:
  6086 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  6087 ;; Parameters:    Size  Location     Type
  6088 ;;  f1              3   54[COMRAM] float 
  6089 ;; Auto vars:     Size  Location     Type
  6090 ;;  lval            4   64[COMRAM] unsigned long 
  6091 ;;  exp1            1   68[COMRAM] unsigned char 
  6092 ;;  sign1           1   63[COMRAM] unsigned char 
  6093 ;; Return value:  Size  Location     Type
  6094 ;;                  4   54[COMRAM] long 
  6095 ;; Registers used:
  6096 ;;		wreg, status,2, status,0
  6097 ;; Tracked objects:
  6098 ;;		On entry : 0/0
  6099 ;;		On exit  : 0/0
  6100 ;;		Unchanged: 0/0
  6101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6102 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6103 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6104 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6105 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6106 ;;Total ram usage:       15 bytes
  6107 ;; Hardware stack levels used:    1
  6108 ;; This function calls:
  6109 ;;		Nothing
  6110 ;; This function is called by:
  6111 ;;		_angleToPulse
  6112 ;; This function uses a non-reentrant model
  6113 ;;
  6114                           
  6115                           	psect	text34
  6116  000C28                     __ptext34:
  6117                           	opt stack 0
  6118  000C28                     ___fttol:
  6119                           	opt stack 20
  6120                           
  6121                           ;incstack = 0
  6122  000C28  C039  F03B         	movff	___fttol@f1+2,??___fttol
  6123  000C2C  6A3C               	clrf	(??___fttol+1)& (0+255),c
  6124  000C2E  6A3D               	clrf	(??___fttol+2)& (0+255),c
  6125  000C30  3438               	rlcf	___fttol@f1+1,w,c
  6126  000C32  363B               	rlcf	??___fttol& (0+255),f,c
  6127  000C34  E301               	bnc	u238_41
  6128  000C36  803C               	bsf	(??___fttol+1)& (0+255),0,c
  6129  000C38                     u238_41:
  6130  000C38  503B               	movf	??___fttol,w,c
  6131  000C3A  6E45               	movwf	___fttol@exp1,c
  6132  000C3C  5045               	movf	___fttol@exp1,w,c
  6133  000C3E  A4D8               	btfss	status,2,c
  6134  000C40  D009               	goto	i2l3003
  6135  000C42  0E00               	movlw	0
  6136  000C44  6E37               	movwf	?___fttol,c
  6137  000C46  0E00               	movlw	0
  6138  000C48  6E38               	movwf	?___fttol+1,c
  6139  000C4A  0E00               	movlw	0
  6140  000C4C  6E39               	movwf	?___fttol+2,c
  6141  000C4E  0E00               	movlw	0
  6142  000C50  6E3A               	movwf	?___fttol+3,c
  6143  000C52  0012               	return	
  6144  000C54                     i2l3003:
  6145  000C54  0E17               	movlw	23
  6146  000C56  6E3B               	movwf	??___fttol& (0+255),c
  6147  000C58  C037  F03C         	movff	___fttol@f1,??___fttol+1
  6148  000C5C  C038  F03D         	movff	___fttol@f1+1,??___fttol+2
  6149  000C60  C039  F03E         	movff	___fttol@f1+2,??___fttol+3
  6150  000C64  283B               	incf	??___fttol,w,c
  6151  000C66  6E3F               	movwf	(??___fttol+4)& (0+255),c
  6152  000C68  D004               	goto	i2u240_40
  6153  000C6A                     i2u240_45:
  6154  000C6A  90D8               	bcf	status,0,c
  6155  000C6C  323E               	rrcf	??___fttol+3,f,c
  6156  000C6E  323D               	rrcf	??___fttol+2,f,c
  6157  000C70  323C               	rrcf	??___fttol+1,f,c
  6158  000C72                     i2u240_40:
  6159  000C72  2E3F               	decfsz	(??___fttol+4)& (0+255),f,c
  6160  000C74  D7FA               	goto	i2u240_45
  6161  000C76  503C               	movf	??___fttol+1,w,c
  6162  000C78  6E40               	movwf	___fttol@sign1,c
  6163  000C7A  8E38               	bsf	___fttol@f1+1,7,c
  6164  000C7C  0EFF               	movlw	255
  6165  000C7E  1637               	andwf	___fttol@f1,f,c
  6166  000C80  0EFF               	movlw	255
  6167  000C82  1638               	andwf	___fttol@f1+1,f,c
  6168  000C84  0E00               	movlw	0
  6169  000C86  1639               	andwf	___fttol@f1+2,f,c
  6170  000C88  5037               	movf	___fttol@f1,w,c
  6171  000C8A  6E41               	movwf	___fttol@lval,c
  6172  000C8C  5038               	movf	___fttol@f1+1,w,c
  6173  000C8E  6E42               	movwf	___fttol@lval+1,c
  6174  000C90  5039               	movf	___fttol@f1+2,w,c
  6175  000C92  6E43               	movwf	___fttol@lval+2,c
  6176  000C94  6A44               	clrf	___fttol@lval+3,c
  6177  000C96  0E8E               	movlw	142
  6178  000C98  5E45               	subwf	___fttol@exp1,f,c
  6179  000C9A  AE45               	btfss	___fttol@exp1,7,c
  6180  000C9C  D016               	goto	i2l3025
  6181  000C9E  5045               	movf	___fttol@exp1,w,c
  6182  000CA0  0A80               	xorlw	128
  6183  000CA2  0F8F               	addlw	143
  6184  000CA4  B0D8               	btfsc	status,0,c
  6185  000CA6  D009               	goto	i2l3021
  6186  000CA8  0E00               	movlw	0
  6187  000CAA  6E37               	movwf	?___fttol,c
  6188  000CAC  0E00               	movlw	0
  6189  000CAE  6E38               	movwf	?___fttol+1,c
  6190  000CB0  0E00               	movlw	0
  6191  000CB2  6E39               	movwf	?___fttol+2,c
  6192  000CB4  0E00               	movlw	0
  6193  000CB6  6E3A               	movwf	?___fttol+3,c
  6194  000CB8  0012               	return	
  6195  000CBA                     i2l3021:
  6196  000CBA  90D8               	bcf	status,0,c
  6197  000CBC  3244               	rrcf	___fttol@lval+3,f,c
  6198  000CBE  3243               	rrcf	___fttol@lval+2,f,c
  6199  000CC0  3242               	rrcf	___fttol@lval+1,f,c
  6200  000CC2  3241               	rrcf	___fttol@lval,f,c
  6201  000CC4  3E45               	incfsz	___fttol@exp1,f,c
  6202  000CC6  D7F9               	goto	i2l3021
  6203  000CC8  D015               	goto	i2l3035
  6204  000CCA                     i2l3025:
  6205  000CCA  0E17               	movlw	23
  6206  000CCC  6445               	cpfsgt	___fttol@exp1,c
  6207  000CCE  D00F               	goto	i2l3033
  6208  000CD0  0E00               	movlw	0
  6209  000CD2  6E37               	movwf	?___fttol,c
  6210  000CD4  0E00               	movlw	0
  6211  000CD6  6E38               	movwf	?___fttol+1,c
  6212  000CD8  0E00               	movlw	0
  6213  000CDA  6E39               	movwf	?___fttol+2,c
  6214  000CDC  0E00               	movlw	0
  6215  000CDE  6E3A               	movwf	?___fttol+3,c
  6216  000CE0  0012               	return	
  6217  000CE2                     i2l3031:
  6218  000CE2  90D8               	bcf	status,0,c
  6219  000CE4  3641               	rlcf	___fttol@lval,f,c
  6220  000CE6  3642               	rlcf	___fttol@lval+1,f,c
  6221  000CE8  3643               	rlcf	___fttol@lval+2,f,c
  6222  000CEA  3644               	rlcf	___fttol@lval+3,f,c
  6223  000CEC  0645               	decf	___fttol@exp1,f,c
  6224  000CEE                     i2l3033:
  6225  000CEE  5045               	movf	___fttol@exp1,w,c
  6226  000CF0  A4D8               	btfss	status,2,c
  6227  000CF2  D7F7               	goto	i2l3031
  6228  000CF4                     i2l3035:
  6229  000CF4  5040               	movf	___fttol@sign1,w,c
  6230  000CF6  B4D8               	btfsc	status,2,c
  6231  000CF8  D008               	goto	i2l3039
  6232  000CFA  1E44               	comf	___fttol@lval+3,f,c
  6233  000CFC  1E43               	comf	___fttol@lval+2,f,c
  6234  000CFE  1E42               	comf	___fttol@lval+1,f,c
  6235  000D00  6C41               	negf	___fttol@lval,c
  6236  000D02  0E00               	movlw	0
  6237  000D04  2242               	addwfc	___fttol@lval+1,f,c
  6238  000D06  2243               	addwfc	___fttol@lval+2,f,c
  6239  000D08  2244               	addwfc	___fttol@lval+3,f,c
  6240  000D0A                     i2l3039:
  6241  000D0A  C041  F037         	movff	___fttol@lval,?___fttol
  6242  000D0E  C042  F038         	movff	___fttol@lval+1,?___fttol+1
  6243  000D12  C043  F039         	movff	___fttol@lval+2,?___fttol+2
  6244  000D16  C044  F03A         	movff	___fttol@lval+3,?___fttol+3
  6245  000D1A  0012               	return	
  6246  000D1C                     __end_of___fttol:
  6247                           	opt stack 0
  6248                           pclatu	equ	0xFFB
  6249                           pclath	equ	0xFFA
  6250                           tblptru	equ	0xFF8
  6251                           tblptrh	equ	0xFF7
  6252                           tblptrl	equ	0xFF6
  6253                           tablat	equ	0xFF5
  6254                           prodh	equ	0xFF4
  6255                           prodl	equ	0xFF3
  6256                           intcon	equ	0xFF2
  6257                           intcon3	equ	0xFF0
  6258                           postinc0	equ	0xFEE
  6259                           fsr0h	equ	0xFEA
  6260                           fsr0l	equ	0xFE9
  6261                           wreg	equ	0xFE8
  6262                           postdec1	equ	0xFE5
  6263                           fsr1h	equ	0xFE2
  6264                           fsr1l	equ	0xFE1
  6265                           indf2	equ	0xFDF
  6266                           postinc2	equ	0xFDE
  6267                           postdec2	equ	0xFDD
  6268                           fsr2h	equ	0xFDA
  6269                           fsr2l	equ	0xFD9
  6270                           status	equ	0xFD8
  6271                           
  6272 ;; *************** function ___ftmul *****************
  6273 ;; Defined at:
  6274 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  6275 ;; Parameters:    Size  Location     Type
  6276 ;;  f1              3   27[COMRAM] float 
  6277 ;;  f2              3   30[COMRAM] float 
  6278 ;; Auto vars:     Size  Location     Type
  6279 ;;  f3_as_produc    3   37[COMRAM] unsigned um
  6280 ;;  sign            1   41[COMRAM] unsigned char 
  6281 ;;  cntr            1   40[COMRAM] unsigned char 
  6282 ;;  exp             1   36[COMRAM] unsigned char 
  6283 ;; Return value:  Size  Location     Type
  6284 ;;                  3   27[COMRAM] float 
  6285 ;; Registers used:
  6286 ;;		wreg, status,2, status,0, cstack
  6287 ;; Tracked objects:
  6288 ;;		On entry : 0/0
  6289 ;;		On exit  : 0/0
  6290 ;;		Unchanged: 0/0
  6291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6292 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6293 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6294 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6295 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6296 ;;Total ram usage:       15 bytes
  6297 ;; Hardware stack levels used:    1
  6298 ;; Hardware stack levels required when called:    1
  6299 ;; This function calls:
  6300 ;;		___ftpack
  6301 ;; This function is called by:
  6302 ;;		_angleToPulse
  6303 ;; This function uses a non-reentrant model
  6304 ;;
  6305                           
  6306                           	psect	text35
  6307  000D1C                     __ptext35:
  6308                           	opt stack 0
  6309  000D1C                     ___ftmul:
  6310                           	opt stack 19
  6311                           
  6312                           ;incstack = 0
  6313  000D1C  C01E  F022         	movff	___ftmul@f1+2,??___ftmul
  6314  000D20  6A23               	clrf	(??___ftmul+1)& (0+255),c
  6315  000D22  6A24               	clrf	(??___ftmul+2)& (0+255),c
  6316  000D24  341D               	rlcf	___ftmul@f1+1,w,c
  6317  000D26  3622               	rlcf	??___ftmul& (0+255),f,c
  6318  000D28  E301               	bnc	u231_41
  6319  000D2A  8023               	bsf	(??___ftmul+1)& (0+255),0,c
  6320  000D2C                     u231_41:
  6321  000D2C  5022               	movf	??___ftmul,w,c
  6322  000D2E  6E25               	movwf	___ftmul@exp,c
  6323  000D30  5025               	movf	___ftmul@exp,w,c
  6324  000D32  A4D8               	btfss	status,2,c
  6325  000D34  D007               	goto	i2l2943
  6326  000D36  0E00               	movlw	0
  6327  000D38  6E1C               	movwf	?___ftmul,c
  6328  000D3A  0E00               	movlw	0
  6329  000D3C  6E1D               	movwf	?___ftmul+1,c
  6330  000D3E  0E00               	movlw	0
  6331  000D40  6E1E               	movwf	?___ftmul+2,c
  6332  000D42  0012               	return	
  6333  000D44                     i2l2943:
  6334  000D44  C021  F022         	movff	___ftmul@f2+2,??___ftmul
  6335  000D48  6A23               	clrf	(??___ftmul+1)& (0+255),c
  6336  000D4A  6A24               	clrf	(??___ftmul+2)& (0+255),c
  6337  000D4C  3420               	rlcf	___ftmul@f2+1,w,c
  6338  000D4E  3622               	rlcf	??___ftmul& (0+255),f,c
  6339  000D50  E301               	bnc	u233_41
  6340  000D52  8023               	bsf	(??___ftmul+1)& (0+255),0,c
  6341  000D54                     u233_41:
  6342  000D54  5022               	movf	??___ftmul,w,c
  6343  000D56  6E2A               	movwf	___ftmul@sign,c
  6344  000D58  502A               	movf	___ftmul@sign,w,c
  6345  000D5A  A4D8               	btfss	status,2,c
  6346  000D5C  D007               	goto	i2l2949
  6347  000D5E  0E00               	movlw	0
  6348  000D60  6E1C               	movwf	?___ftmul,c
  6349  000D62  0E00               	movlw	0
  6350  000D64  6E1D               	movwf	?___ftmul+1,c
  6351  000D66  0E00               	movlw	0
  6352  000D68  6E1E               	movwf	?___ftmul+2,c
  6353  000D6A  0012               	return	
  6354  000D6C                     i2l2949:
  6355  000D6C  502A               	movf	___ftmul@sign,w,c
  6356  000D6E  0F7B               	addlw	123
  6357  000D70  2625               	addwf	___ftmul@exp,f,c
  6358  000D72  C01E  F02A         	movff	___ftmul@f1+2,___ftmul@sign
  6359  000D76  5021               	movf	___ftmul@f2+2,w,c
  6360  000D78  1A2A               	xorwf	___ftmul@sign,f,c
  6361  000D7A  0E80               	movlw	128
  6362  000D7C  162A               	andwf	___ftmul@sign,f,c
  6363  000D7E  8E1D               	bsf	___ftmul@f1+1,7,c
  6364  000D80  8E20               	bsf	___ftmul@f2+1,7,c
  6365  000D82  0EFF               	movlw	255
  6366  000D84  161F               	andwf	___ftmul@f2,f,c
  6367  000D86  0EFF               	movlw	255
  6368  000D88  1620               	andwf	___ftmul@f2+1,f,c
  6369  000D8A  0E00               	movlw	0
  6370  000D8C  1621               	andwf	___ftmul@f2+2,f,c
  6371  000D8E  0E00               	movlw	0
  6372  000D90  6E26               	movwf	___ftmul@f3_as_product,c
  6373  000D92  0E00               	movlw	0
  6374  000D94  6E27               	movwf	___ftmul@f3_as_product+1,c
  6375  000D96  0E00               	movlw	0
  6376  000D98  6E28               	movwf	___ftmul@f3_as_product+2,c
  6377  000D9A  0E07               	movlw	7
  6378  000D9C  6E29               	movwf	___ftmul@cntr,c
  6379  000D9E                     i2l2963:
  6380  000D9E  A01C               	btfss	___ftmul@f1,0,c
  6381  000DA0  D006               	goto	i2l2967
  6382  000DA2  501F               	movf	___ftmul@f2,w,c
  6383  000DA4  2626               	addwf	___ftmul@f3_as_product,f,c
  6384  000DA6  5020               	movf	___ftmul@f2+1,w,c
  6385  000DA8  2227               	addwfc	___ftmul@f3_as_product+1,f,c
  6386  000DAA  5021               	movf	___ftmul@f2+2,w,c
  6387  000DAC  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  6388  000DAE                     i2l2967:
  6389  000DAE  90D8               	bcf	status,0,c
  6390  000DB0  321E               	rrcf	___ftmul@f1+2,f,c
  6391  000DB2  321D               	rrcf	___ftmul@f1+1,f,c
  6392  000DB4  321C               	rrcf	___ftmul@f1,f,c
  6393  000DB6  90D8               	bcf	status,0,c
  6394  000DB8  361F               	rlcf	___ftmul@f2,f,c
  6395  000DBA  3620               	rlcf	___ftmul@f2+1,f,c
  6396  000DBC  3621               	rlcf	___ftmul@f2+2,f,c
  6397  000DBE  2E29               	decfsz	___ftmul@cntr,f,c
  6398  000DC0  D7EE               	goto	i2l2963
  6399  000DC2  0E09               	movlw	9
  6400  000DC4  6E29               	movwf	___ftmul@cntr,c
  6401  000DC6                     i2l2973:
  6402  000DC6  A01C               	btfss	___ftmul@f1,0,c
  6403  000DC8  D006               	goto	i2l2977
  6404  000DCA  501F               	movf	___ftmul@f2,w,c
  6405  000DCC  2626               	addwf	___ftmul@f3_as_product,f,c
  6406  000DCE  5020               	movf	___ftmul@f2+1,w,c
  6407  000DD0  2227               	addwfc	___ftmul@f3_as_product+1,f,c
  6408  000DD2  5021               	movf	___ftmul@f2+2,w,c
  6409  000DD4  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  6410  000DD6                     i2l2977:
  6411  000DD6  90D8               	bcf	status,0,c
  6412  000DD8  321E               	rrcf	___ftmul@f1+2,f,c
  6413  000DDA  321D               	rrcf	___ftmul@f1+1,f,c
  6414  000DDC  321C               	rrcf	___ftmul@f1,f,c
  6415  000DDE  90D8               	bcf	status,0,c
  6416  000DE0  3228               	rrcf	___ftmul@f3_as_product+2,f,c
  6417  000DE2  3227               	rrcf	___ftmul@f3_as_product+1,f,c
  6418  000DE4  3226               	rrcf	___ftmul@f3_as_product,f,c
  6419  000DE6  2E29               	decfsz	___ftmul@cntr,f,c
  6420  000DE8  D7EE               	goto	i2l2973
  6421  000DEA  C026  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  6422  000DEE  C027  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6423  000DF2  C028  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6424  000DF6  C025  F004         	movff	___ftmul@exp,___ftpack@exp
  6425  000DFA  C02A  F005         	movff	___ftmul@sign,___ftpack@sign
  6426  000DFE  EC13  F009         	call	___ftpack	;wreg free
  6427  000E02  C001  F01C         	movff	?___ftpack,?___ftmul
  6428  000E06  C002  F01D         	movff	?___ftpack+1,?___ftmul+1
  6429  000E0A  C003  F01E         	movff	?___ftpack+2,?___ftmul+2
  6430  000E0E  0012               	return	
  6431  000E10                     __end_of___ftmul:
  6432                           	opt stack 0
  6433                           pclatu	equ	0xFFB
  6434                           pclath	equ	0xFFA
  6435                           tblptru	equ	0xFF8
  6436                           tblptrh	equ	0xFF7
  6437                           tblptrl	equ	0xFF6
  6438                           tablat	equ	0xFF5
  6439                           prodh	equ	0xFF4
  6440                           prodl	equ	0xFF3
  6441                           intcon	equ	0xFF2
  6442                           intcon3	equ	0xFF0
  6443                           postinc0	equ	0xFEE
  6444                           fsr0h	equ	0xFEA
  6445                           fsr0l	equ	0xFE9
  6446                           wreg	equ	0xFE8
  6447                           postdec1	equ	0xFE5
  6448                           fsr1h	equ	0xFE2
  6449                           fsr1l	equ	0xFE1
  6450                           indf2	equ	0xFDF
  6451                           postinc2	equ	0xFDE
  6452                           postdec2	equ	0xFDD
  6453                           fsr2h	equ	0xFDA
  6454                           fsr2l	equ	0xFD9
  6455                           status	equ	0xFD8
  6456                           
  6457 ;; *************** function ___ftdiv *****************
  6458 ;; Defined at:
  6459 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  6460 ;; Parameters:    Size  Location     Type
  6461 ;;  f1              3   12[COMRAM] float 
  6462 ;;  f2              3   15[COMRAM] float 
  6463 ;; Auto vars:     Size  Location     Type
  6464 ;;  f3              3   22[COMRAM] float 
  6465 ;;  sign            1   26[COMRAM] unsigned char 
  6466 ;;  exp             1   25[COMRAM] unsigned char 
  6467 ;;  cntr            1   21[COMRAM] unsigned char 
  6468 ;; Return value:  Size  Location     Type
  6469 ;;                  3   12[COMRAM] float 
  6470 ;; Registers used:
  6471 ;;		wreg, status,2, status,0, cstack
  6472 ;; Tracked objects:
  6473 ;;		On entry : 0/0
  6474 ;;		On exit  : 0/0
  6475 ;;		Unchanged: 0/0
  6476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6477 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6478 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6479 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6480 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6481 ;;Total ram usage:       15 bytes
  6482 ;; Hardware stack levels used:    1
  6483 ;; Hardware stack levels required when called:    1
  6484 ;; This function calls:
  6485 ;;		___ftpack
  6486 ;; This function is called by:
  6487 ;;		_angleToPulse
  6488 ;;		_testFrequency
  6489 ;; This function uses a non-reentrant model
  6490 ;;
  6491                           
  6492                           	psect	text36
  6493  000E10                     __ptext36:
  6494                           	opt stack 0
  6495  000E10                     ___ftdiv:
  6496                           	opt stack 19
  6497                           
  6498                           ;incstack = 0
  6499  000E10  C00F  F013         	movff	___ftdiv@f1+2,??___ftdiv
  6500  000E14  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  6501  000E16  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  6502  000E18  340E               	rlcf	___ftdiv@f1+1,w,c
  6503  000E1A  3613               	rlcf	??___ftdiv& (0+255),f,c
  6504  000E1C  E301               	bnc	u226_41
  6505  000E1E  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  6506  000E20                     u226_41:
  6507  000E20  5013               	movf	??___ftdiv,w,c
  6508  000E22  6E1A               	movwf	___ftdiv@exp,c
  6509  000E24  501A               	movf	___ftdiv@exp,w,c
  6510  000E26  A4D8               	btfss	status,2,c
  6511  000E28  D007               	goto	i2l2897
  6512  000E2A  0E00               	movlw	0
  6513  000E2C  6E0D               	movwf	?___ftdiv,c
  6514  000E2E  0E00               	movlw	0
  6515  000E30  6E0E               	movwf	?___ftdiv+1,c
  6516  000E32  0E00               	movlw	0
  6517  000E34  6E0F               	movwf	?___ftdiv+2,c
  6518  000E36  0012               	return	
  6519  000E38                     i2l2897:
  6520  000E38  C012  F013         	movff	___ftdiv@f2+2,??___ftdiv
  6521  000E3C  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  6522  000E3E  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  6523  000E40  3411               	rlcf	___ftdiv@f2+1,w,c
  6524  000E42  3613               	rlcf	??___ftdiv& (0+255),f,c
  6525  000E44  E301               	bnc	u228_41
  6526  000E46  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  6527  000E48                     u228_41:
  6528  000E48  5013               	movf	??___ftdiv,w,c
  6529  000E4A  6E1B               	movwf	___ftdiv@sign,c
  6530  000E4C  501B               	movf	___ftdiv@sign,w,c
  6531  000E4E  A4D8               	btfss	status,2,c
  6532  000E50  D007               	goto	i2l2903
  6533  000E52  0E00               	movlw	0
  6534  000E54  6E0D               	movwf	?___ftdiv,c
  6535  000E56  0E00               	movlw	0
  6536  000E58  6E0E               	movwf	?___ftdiv+1,c
  6537  000E5A  0E00               	movlw	0
  6538  000E5C  6E0F               	movwf	?___ftdiv+2,c
  6539  000E5E  0012               	return	
  6540  000E60                     i2l2903:
  6541  000E60  0E00               	movlw	0
  6542  000E62  6E17               	movwf	___ftdiv@f3,c
  6543  000E64  0E00               	movlw	0
  6544  000E66  6E18               	movwf	___ftdiv@f3+1,c
  6545  000E68  0E00               	movlw	0
  6546  000E6A  6E19               	movwf	___ftdiv@f3+2,c
  6547  000E6C  501B               	movf	___ftdiv@sign,w,c
  6548  000E6E  0F89               	addlw	137
  6549  000E70  5E1A               	subwf	___ftdiv@exp,f,c
  6550  000E72  C00F  F01B         	movff	___ftdiv@f1+2,___ftdiv@sign
  6551  000E76  5012               	movf	___ftdiv@f2+2,w,c
  6552  000E78  1A1B               	xorwf	___ftdiv@sign,f,c
  6553  000E7A  0E80               	movlw	128
  6554  000E7C  161B               	andwf	___ftdiv@sign,f,c
  6555  000E7E  8E0E               	bsf	___ftdiv@f1+1,7,c
  6556  000E80  0EFF               	movlw	255
  6557  000E82  160D               	andwf	___ftdiv@f1,f,c
  6558  000E84  0EFF               	movlw	255
  6559  000E86  160E               	andwf	___ftdiv@f1+1,f,c
  6560  000E88  0E00               	movlw	0
  6561  000E8A  160F               	andwf	___ftdiv@f1+2,f,c
  6562  000E8C  8E11               	bsf	___ftdiv@f2+1,7,c
  6563  000E8E  0EFF               	movlw	255
  6564  000E90  1610               	andwf	___ftdiv@f2,f,c
  6565  000E92  0EFF               	movlw	255
  6566  000E94  1611               	andwf	___ftdiv@f2+1,f,c
  6567  000E96  0E00               	movlw	0
  6568  000E98  1612               	andwf	___ftdiv@f2+2,f,c
  6569  000E9A  0E18               	movlw	24
  6570  000E9C  6E16               	movwf	___ftdiv@cntr,c
  6571  000E9E                     i2l2923:
  6572  000E9E  90D8               	bcf	status,0,c
  6573  000EA0  3617               	rlcf	___ftdiv@f3,f,c
  6574  000EA2  3618               	rlcf	___ftdiv@f3+1,f,c
  6575  000EA4  3619               	rlcf	___ftdiv@f3+2,f,c
  6576  000EA6  5010               	movf	___ftdiv@f2,w,c
  6577  000EA8  5C0D               	subwf	___ftdiv@f1,w,c
  6578  000EAA  5011               	movf	___ftdiv@f2+1,w,c
  6579  000EAC  580E               	subwfb	___ftdiv@f1+1,w,c
  6580  000EAE  5012               	movf	___ftdiv@f2+2,w,c
  6581  000EB0  580F               	subwfb	___ftdiv@f1+2,w,c
  6582  000EB2  A0D8               	btfss	status,0,c
  6583  000EB4  D007               	goto	i2l882
  6584  000EB6  5010               	movf	___ftdiv@f2,w,c
  6585  000EB8  5E0D               	subwf	___ftdiv@f1,f,c
  6586  000EBA  5011               	movf	___ftdiv@f2+1,w,c
  6587  000EBC  5A0E               	subwfb	___ftdiv@f1+1,f,c
  6588  000EBE  5012               	movf	___ftdiv@f2+2,w,c
  6589  000EC0  5A0F               	subwfb	___ftdiv@f1+2,f,c
  6590  000EC2  8017               	bsf	___ftdiv@f3,0,c
  6591  000EC4                     i2l882:
  6592  000EC4  90D8               	bcf	status,0,c
  6593  000EC6  360D               	rlcf	___ftdiv@f1,f,c
  6594  000EC8  360E               	rlcf	___ftdiv@f1+1,f,c
  6595  000ECA  360F               	rlcf	___ftdiv@f1+2,f,c
  6596  000ECC  2E16               	decfsz	___ftdiv@cntr,f,c
  6597  000ECE  D7E7               	goto	i2l2923
  6598  000ED0  C017  F001         	movff	___ftdiv@f3,___ftpack@arg
  6599  000ED4  C018  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6600  000ED8  C019  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6601  000EDC  C01A  F004         	movff	___ftdiv@exp,___ftpack@exp
  6602  000EE0  C01B  F005         	movff	___ftdiv@sign,___ftpack@sign
  6603  000EE4  EC13  F009         	call	___ftpack	;wreg free
  6604  000EE8  C001  F00D         	movff	?___ftpack,?___ftdiv
  6605  000EEC  C002  F00E         	movff	?___ftpack+1,?___ftdiv+1
  6606  000EF0  C003  F00F         	movff	?___ftpack+2,?___ftdiv+2
  6607  000EF4  0012               	return	
  6608  000EF6                     __end_of___ftdiv:
  6609                           	opt stack 0
  6610                           pclatu	equ	0xFFB
  6611                           pclath	equ	0xFFA
  6612                           tblptru	equ	0xFF8
  6613                           tblptrh	equ	0xFF7
  6614                           tblptrl	equ	0xFF6
  6615                           tablat	equ	0xFF5
  6616                           prodh	equ	0xFF4
  6617                           prodl	equ	0xFF3
  6618                           intcon	equ	0xFF2
  6619                           intcon3	equ	0xFF0
  6620                           postinc0	equ	0xFEE
  6621                           fsr0h	equ	0xFEA
  6622                           fsr0l	equ	0xFE9
  6623                           wreg	equ	0xFE8
  6624                           postdec1	equ	0xFE5
  6625                           fsr1h	equ	0xFE2
  6626                           fsr1l	equ	0xFE1
  6627                           indf2	equ	0xFDF
  6628                           postinc2	equ	0xFDE
  6629                           postdec2	equ	0xFDD
  6630                           fsr2h	equ	0xFDA
  6631                           fsr2l	equ	0xFD9
  6632                           status	equ	0xFD8
  6633                           
  6634 ;; *************** function ___ftadd *****************
  6635 ;; Defined at:
  6636 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  6637 ;; Parameters:    Size  Location     Type
  6638 ;;  f1              3   42[COMRAM] float 
  6639 ;;  f2              3   45[COMRAM] float 
  6640 ;; Auto vars:     Size  Location     Type
  6641 ;;  exp1            1   53[COMRAM] unsigned char 
  6642 ;;  exp2            1   52[COMRAM] unsigned char 
  6643 ;;  sign            1   51[COMRAM] unsigned char 
  6644 ;; Return value:  Size  Location     Type
  6645 ;;                  3   42[COMRAM] float 
  6646 ;; Registers used:
  6647 ;;		wreg, status,2, status,0, cstack
  6648 ;; Tracked objects:
  6649 ;;		On entry : 0/0
  6650 ;;		On exit  : 0/0
  6651 ;;		Unchanged: 0/0
  6652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6653 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6654 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6655 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6656 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6657 ;;Total ram usage:       12 bytes
  6658 ;; Hardware stack levels used:    1
  6659 ;; Hardware stack levels required when called:    1
  6660 ;; This function calls:
  6661 ;;		___ftpack
  6662 ;; This function is called by:
  6663 ;;		_angleToPulse
  6664 ;; This function uses a non-reentrant model
  6665 ;;
  6666                           
  6667                           	psect	text37
  6668  000838                     __ptext37:
  6669                           	opt stack 0
  6670  000838                     ___ftadd:
  6671                           	opt stack 19
  6672                           
  6673                           ;incstack = 0
  6674  000838  C02D  F031         	movff	___ftadd@f1+2,??___ftadd
  6675  00083C  6A32               	clrf	(??___ftadd+1)& (0+255),c
  6676  00083E  6A33               	clrf	(??___ftadd+2)& (0+255),c
  6677  000840  342C               	rlcf	___ftadd@f1+1,w,c
  6678  000842  3631               	rlcf	??___ftadd& (0+255),f,c
  6679  000844  E301               	bnc	u205_41
  6680  000846  8032               	bsf	(??___ftadd+1)& (0+255),0,c
  6681  000848                     u205_41:
  6682  000848  5031               	movf	??___ftadd,w,c
  6683  00084A  6E36               	movwf	___ftadd@exp1,c
  6684  00084C  C030  F031         	movff	___ftadd@f2+2,??___ftadd
  6685  000850  6A32               	clrf	(??___ftadd+1)& (0+255),c
  6686  000852  6A33               	clrf	(??___ftadd+2)& (0+255),c
  6687  000854  342F               	rlcf	___ftadd@f2+1,w,c
  6688  000856  3631               	rlcf	??___ftadd& (0+255),f,c
  6689  000858  E301               	bnc	u206_41
  6690  00085A  8032               	bsf	(??___ftadd+1)& (0+255),0,c
  6691  00085C                     u206_41:
  6692  00085C  5031               	movf	??___ftadd,w,c
  6693  00085E  6E35               	movwf	___ftadd@exp2,c
  6694  000860  5036               	movf	___ftadd@exp1,w,c
  6695  000862  B4D8               	btfsc	status,2,c
  6696  000864  D00B               	goto	i2l847
  6697  000866  5035               	movf	___ftadd@exp2,w,c
  6698  000868  5C36               	subwf	___ftadd@exp1,w,c
  6699  00086A  B0D8               	btfsc	status,0,c
  6700  00086C  D00E               	goto	i2l2829
  6701  00086E  5036               	movf	___ftadd@exp1,w,c
  6702  000870  0800               	sublw	0
  6703  000872  2435               	addwf	___ftadd@exp2,w,c
  6704  000874  6E31               	movwf	??___ftadd& (0+255),c
  6705  000876  0E18               	movlw	24
  6706  000878  6431               	cpfsgt	??___ftadd,c
  6707  00087A  D007               	goto	i2l2829
  6708  00087C                     i2l847:
  6709  00087C  C02E  F02B         	movff	___ftadd@f2,?___ftadd
  6710  000880  C02F  F02C         	movff	___ftadd@f2+1,?___ftadd+1
  6711  000884  C030  F02D         	movff	___ftadd@f2+2,?___ftadd+2
  6712  000888  0012               	return	
  6713  00088A                     i2l2829:
  6714  00088A  5035               	movf	___ftadd@exp2,w,c
  6715  00088C  B4D8               	btfsc	status,2,c
  6716  00088E  D00B               	goto	i2l851
  6717  000890  5036               	movf	___ftadd@exp1,w,c
  6718  000892  5C35               	subwf	___ftadd@exp2,w,c
  6719  000894  B0D8               	btfsc	status,0,c
  6720  000896  D00E               	goto	i2l2835
  6721  000898  5035               	movf	___ftadd@exp2,w,c
  6722  00089A  0800               	sublw	0
  6723  00089C  2436               	addwf	___ftadd@exp1,w,c
  6724  00089E  6E31               	movwf	??___ftadd& (0+255),c
  6725  0008A0  0E18               	movlw	24
  6726  0008A2  6431               	cpfsgt	??___ftadd,c
  6727  0008A4  D007               	goto	i2l2835
  6728  0008A6                     i2l851:
  6729  0008A6  C02B  F02B         	movff	___ftadd@f1,?___ftadd
  6730  0008AA  C02C  F02C         	movff	___ftadd@f1+1,?___ftadd+1
  6731  0008AE  C02D  F02D         	movff	___ftadd@f1+2,?___ftadd+2
  6732  0008B2  0012               	return	
  6733  0008B4                     i2l2835:
  6734  0008B4  0E06               	movlw	6
  6735  0008B6  6E34               	movwf	___ftadd@sign,c
  6736  0008B8  BE2D               	btfsc	___ftadd@f1+2,7,c
  6737  0008BA  8E34               	bsf	___ftadd@sign,7,c
  6738  0008BC  BE30               	btfsc	___ftadd@f2+2,7,c
  6739  0008BE  8C34               	bsf	___ftadd@sign,6,c
  6740  0008C0  8E2C               	bsf	___ftadd@f1+1,7,c
  6741  0008C2  0EFF               	movlw	255
  6742  0008C4  162B               	andwf	___ftadd@f1,f,c
  6743  0008C6  0EFF               	movlw	255
  6744  0008C8  162C               	andwf	___ftadd@f1+1,f,c
  6745  0008CA  0E00               	movlw	0
  6746  0008CC  162D               	andwf	___ftadd@f1+2,f,c
  6747  0008CE  8E2F               	bsf	___ftadd@f2+1,7,c
  6748  0008D0  0EFF               	movlw	255
  6749  0008D2  162E               	andwf	___ftadd@f2,f,c
  6750  0008D4  0EFF               	movlw	255
  6751  0008D6  162F               	andwf	___ftadd@f2+1,f,c
  6752  0008D8  0E00               	movlw	0
  6753  0008DA  1630               	andwf	___ftadd@f2+2,f,c
  6754  0008DC  5035               	movf	___ftadd@exp2,w,c
  6755  0008DE  5C36               	subwf	___ftadd@exp1,w,c
  6756  0008E0  B0D8               	btfsc	status,0,c
  6757  0008E2  D01B               	goto	i2l2861
  6758  0008E4                     i2l2851:
  6759  0008E4  90D8               	bcf	status,0,c
  6760  0008E6  362E               	rlcf	___ftadd@f2,f,c
  6761  0008E8  362F               	rlcf	___ftadd@f2+1,f,c
  6762  0008EA  3630               	rlcf	___ftadd@f2+2,f,c
  6763  0008EC  0635               	decf	___ftadd@exp2,f,c
  6764  0008EE  5036               	movf	___ftadd@exp1,w,c
  6765  0008F0  1835               	xorwf	___ftadd@exp2,w,c
  6766  0008F2  B4D8               	btfsc	status,2,c
  6767  0008F4  D00D               	goto	i2l2859
  6768  0008F6  0634               	decf	___ftadd@sign,f,c
  6769  0008F8  C034  F031         	movff	___ftadd@sign,??___ftadd
  6770  0008FC  0E07               	movlw	7
  6771  0008FE  1631               	andwf	??___ftadd,f,c
  6772  000900  B4D8               	btfsc	status,2,c
  6773  000902  D006               	goto	i2l2859
  6774  000904  D7EF               	goto	i2l2851
  6775  000906                     i2l2857:
  6776  000906  90D8               	bcf	status,0,c
  6777  000908  322D               	rrcf	___ftadd@f1+2,f,c
  6778  00090A  322C               	rrcf	___ftadd@f1+1,f,c
  6779  00090C  322B               	rrcf	___ftadd@f1,f,c
  6780  00090E  2A36               	incf	___ftadd@exp1,f,c
  6781  000910                     i2l2859:
  6782  000910  5035               	movf	___ftadd@exp2,w,c
  6783  000912  1836               	xorwf	___ftadd@exp1,w,c
  6784  000914  B4D8               	btfsc	status,2,c
  6785  000916  D01F               	goto	i2l862
  6786  000918  D7F6               	goto	i2l2857
  6787  00091A                     i2l2861:
  6788  00091A  5036               	movf	___ftadd@exp1,w,c
  6789  00091C  5C35               	subwf	___ftadd@exp2,w,c
  6790  00091E  B0D8               	btfsc	status,0,c
  6791  000920  D01A               	goto	i2l862
  6792  000922                     i2l2863:
  6793  000922  90D8               	bcf	status,0,c
  6794  000924  362B               	rlcf	___ftadd@f1,f,c
  6795  000926  362C               	rlcf	___ftadd@f1+1,f,c
  6796  000928  362D               	rlcf	___ftadd@f1+2,f,c
  6797  00092A  0636               	decf	___ftadd@exp1,f,c
  6798  00092C  5036               	movf	___ftadd@exp1,w,c
  6799  00092E  1835               	xorwf	___ftadd@exp2,w,c
  6800  000930  B4D8               	btfsc	status,2,c
  6801  000932  D00D               	goto	i2l2871
  6802  000934  0634               	decf	___ftadd@sign,f,c
  6803  000936  C034  F031         	movff	___ftadd@sign,??___ftadd
  6804  00093A  0E07               	movlw	7
  6805  00093C  1631               	andwf	??___ftadd,f,c
  6806  00093E  B4D8               	btfsc	status,2,c
  6807  000940  D006               	goto	i2l2871
  6808  000942  D7EF               	goto	i2l2863
  6809  000944                     i2l2869:
  6810  000944  90D8               	bcf	status,0,c
  6811  000946  3230               	rrcf	___ftadd@f2+2,f,c
  6812  000948  322F               	rrcf	___ftadd@f2+1,f,c
  6813  00094A  322E               	rrcf	___ftadd@f2,f,c
  6814  00094C  2A35               	incf	___ftadd@exp2,f,c
  6815  00094E                     i2l2871:
  6816  00094E  5035               	movf	___ftadd@exp2,w,c
  6817  000950  1836               	xorwf	___ftadd@exp1,w,c
  6818  000952  A4D8               	btfss	status,2,c
  6819  000954  D7F7               	goto	i2l2869
  6820  000956                     i2l862:
  6821  000956  AE34               	btfss	___ftadd@sign,7,c
  6822  000958  D00C               	goto	i2l871
  6823  00095A  0EFF               	movlw	255
  6824  00095C  1A2B               	xorwf	___ftadd@f1,f,c
  6825  00095E  0EFF               	movlw	255
  6826  000960  1A2C               	xorwf	___ftadd@f1+1,f,c
  6827  000962  0EFF               	movlw	255
  6828  000964  1A2D               	xorwf	___ftadd@f1+2,f,c
  6829  000966  0E01               	movlw	1
  6830  000968  262B               	addwf	___ftadd@f1,f,c
  6831  00096A  0E00               	movlw	0
  6832  00096C  222C               	addwfc	___ftadd@f1+1,f,c
  6833  00096E  0E00               	movlw	0
  6834  000970  222D               	addwfc	___ftadd@f1+2,f,c
  6835  000972                     i2l871:
  6836  000972  AC34               	btfss	___ftadd@sign,6,c
  6837  000974  D00C               	goto	i2l2877
  6838  000976  0EFF               	movlw	255
  6839  000978  1A2E               	xorwf	___ftadd@f2,f,c
  6840  00097A  0EFF               	movlw	255
  6841  00097C  1A2F               	xorwf	___ftadd@f2+1,f,c
  6842  00097E  0EFF               	movlw	255
  6843  000980  1A30               	xorwf	___ftadd@f2+2,f,c
  6844  000982  0E01               	movlw	1
  6845  000984  262E               	addwf	___ftadd@f2,f,c
  6846  000986  0E00               	movlw	0
  6847  000988  222F               	addwfc	___ftadd@f2+1,f,c
  6848  00098A  0E00               	movlw	0
  6849  00098C  2230               	addwfc	___ftadd@f2+2,f,c
  6850  00098E                     i2l2877:
  6851  00098E  0E00               	movlw	0
  6852  000990  6E34               	movwf	___ftadd@sign,c
  6853  000992  502B               	movf	___ftadd@f1,w,c
  6854  000994  262E               	addwf	___ftadd@f2,f,c
  6855  000996  502C               	movf	___ftadd@f1+1,w,c
  6856  000998  222F               	addwfc	___ftadd@f2+1,f,c
  6857  00099A  502D               	movf	___ftadd@f1+2,w,c
  6858  00099C  2230               	addwfc	___ftadd@f2+2,f,c
  6859  00099E  AE30               	btfss	___ftadd@f2+2,7,c
  6860  0009A0  D00E               	goto	i2l2887
  6861  0009A2  0EFF               	movlw	255
  6862  0009A4  1A2E               	xorwf	___ftadd@f2,f,c
  6863  0009A6  0EFF               	movlw	255
  6864  0009A8  1A2F               	xorwf	___ftadd@f2+1,f,c
  6865  0009AA  0EFF               	movlw	255
  6866  0009AC  1A30               	xorwf	___ftadd@f2+2,f,c
  6867  0009AE  0E01               	movlw	1
  6868  0009B0  262E               	addwf	___ftadd@f2,f,c
  6869  0009B2  0E00               	movlw	0
  6870  0009B4  222F               	addwfc	___ftadd@f2+1,f,c
  6871  0009B6  0E00               	movlw	0
  6872  0009B8  2230               	addwfc	___ftadd@f2+2,f,c
  6873  0009BA  0E01               	movlw	1
  6874  0009BC  6E34               	movwf	___ftadd@sign,c
  6875  0009BE                     i2l2887:
  6876  0009BE  C02E  F001         	movff	___ftadd@f2,___ftpack@arg
  6877  0009C2  C02F  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  6878  0009C6  C030  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  6879  0009CA  C036  F004         	movff	___ftadd@exp1,___ftpack@exp
  6880  0009CE  C034  F005         	movff	___ftadd@sign,___ftpack@sign
  6881  0009D2  EC13  F009         	call	___ftpack	;wreg free
  6882  0009D6  C001  F02B         	movff	?___ftpack,?___ftadd
  6883  0009DA  C002  F02C         	movff	?___ftpack+1,?___ftadd+1
  6884  0009DE  C003  F02D         	movff	?___ftpack+2,?___ftadd+2
  6885  0009E2  0012               	return	
  6886  0009E4                     __end_of___ftadd:
  6887                           	opt stack 0
  6888                           pclatu	equ	0xFFB
  6889                           pclath	equ	0xFFA
  6890                           tblptru	equ	0xFF8
  6891                           tblptrh	equ	0xFF7
  6892                           tblptrl	equ	0xFF6
  6893                           tablat	equ	0xFF5
  6894                           prodh	equ	0xFF4
  6895                           prodl	equ	0xFF3
  6896                           intcon	equ	0xFF2
  6897                           intcon3	equ	0xFF0
  6898                           postinc0	equ	0xFEE
  6899                           fsr0h	equ	0xFEA
  6900                           fsr0l	equ	0xFE9
  6901                           wreg	equ	0xFE8
  6902                           postdec1	equ	0xFE5
  6903                           fsr1h	equ	0xFE2
  6904                           fsr1l	equ	0xFE1
  6905                           indf2	equ	0xFDF
  6906                           postinc2	equ	0xFDE
  6907                           postdec2	equ	0xFDD
  6908                           fsr2h	equ	0xFDA
  6909                           fsr2l	equ	0xFD9
  6910                           status	equ	0xFD8
  6911                           
  6912 ;; *************** function ___awtoft *****************
  6913 ;; Defined at:
  6914 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  6915 ;; Parameters:    Size  Location     Type
  6916 ;;  c               2    8[COMRAM] int 
  6917 ;; Auto vars:     Size  Location     Type
  6918 ;;  sign            1   11[COMRAM] unsigned char 
  6919 ;; Return value:  Size  Location     Type
  6920 ;;                  3    8[COMRAM] float 
  6921 ;; Registers used:
  6922 ;;		wreg, status,2, status,0, cstack
  6923 ;; Tracked objects:
  6924 ;;		On entry : 0/0
  6925 ;;		On exit  : 0/0
  6926 ;;		Unchanged: 0/0
  6927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6928 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6929 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6931 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6932 ;;Total ram usage:        4 bytes
  6933 ;; Hardware stack levels used:    1
  6934 ;; Hardware stack levels required when called:    1
  6935 ;; This function calls:
  6936 ;;		___ftpack
  6937 ;; This function is called by:
  6938 ;;		_angleToPulse
  6939 ;; This function uses a non-reentrant model
  6940 ;;
  6941                           
  6942                           	psect	text38
  6943  0018C0                     __ptext38:
  6944                           	opt stack 0
  6945  0018C0                     ___awtoft:
  6946                           	opt stack 19
  6947                           
  6948                           ;incstack = 0
  6949  0018C0  0E00               	movlw	0
  6950  0018C2  6E0C               	movwf	___awtoft@sign,c
  6951  0018C4  AE0A               	btfss	___awtoft@c+1,7,c
  6952  0018C6  D006               	goto	i2l2993
  6953  0018C8  6C09               	negf	___awtoft@c,c
  6954  0018CA  1E0A               	comf	___awtoft@c+1,f,c
  6955  0018CC  B0D8               	btfsc	status,0,c
  6956  0018CE  2A0A               	incf	___awtoft@c+1,f,c
  6957  0018D0  0E01               	movlw	1
  6958  0018D2  6E0C               	movwf	___awtoft@sign,c
  6959  0018D4                     i2l2993:
  6960  0018D4  C009  F001         	movff	___awtoft@c,___ftpack@arg
  6961  0018D8  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  6962  0018DC  6A03               	clrf	___ftpack@arg+2,c
  6963  0018DE  0E8E               	movlw	142
  6964  0018E0  6E04               	movwf	___ftpack@exp,c
  6965  0018E2  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  6966  0018E6  EC13  F009         	call	___ftpack	;wreg free
  6967  0018EA  C001  F009         	movff	?___ftpack,?___awtoft
  6968  0018EE  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  6969  0018F2  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  6970  0018F6  0012               	return	
  6971  0018F8                     __end_of___awtoft:
  6972                           	opt stack 0
  6973                           pclatu	equ	0xFFB
  6974                           pclath	equ	0xFFA
  6975                           tblptru	equ	0xFF8
  6976                           tblptrh	equ	0xFF7
  6977                           tblptrl	equ	0xFF6
  6978                           tablat	equ	0xFF5
  6979                           prodh	equ	0xFF4
  6980                           prodl	equ	0xFF3
  6981                           intcon	equ	0xFF2
  6982                           intcon3	equ	0xFF0
  6983                           postinc0	equ	0xFEE
  6984                           fsr0h	equ	0xFEA
  6985                           fsr0l	equ	0xFE9
  6986                           wreg	equ	0xFE8
  6987                           postdec1	equ	0xFE5
  6988                           fsr1h	equ	0xFE2
  6989                           fsr1l	equ	0xFE1
  6990                           indf2	equ	0xFDF
  6991                           postinc2	equ	0xFDE
  6992                           postdec2	equ	0xFDD
  6993                           fsr2h	equ	0xFDA
  6994                           fsr2l	equ	0xFD9
  6995                           status	equ	0xFD8
  6996                           
  6997 ;; *************** function ___altoft *****************
  6998 ;; Defined at:
  6999 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  7000 ;; Parameters:    Size  Location     Type
  7001 ;;  c               4    8[COMRAM] long 
  7002 ;; Auto vars:     Size  Location     Type
  7003 ;;  sign            1   17[COMRAM] unsigned char 
  7004 ;;  exp             1   16[COMRAM] unsigned char 
  7005 ;; Return value:  Size  Location     Type
  7006 ;;                  3    8[COMRAM] float 
  7007 ;; Registers used:
  7008 ;;		wreg, status,2, status,0, cstack
  7009 ;; Tracked objects:
  7010 ;;		On entry : 0/0
  7011 ;;		On exit  : 0/0
  7012 ;;		Unchanged: 0/0
  7013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7014 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7015 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7016 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7017 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7018 ;;Total ram usage:       10 bytes
  7019 ;; Hardware stack levels used:    1
  7020 ;; Hardware stack levels required when called:    1
  7021 ;; This function calls:
  7022 ;;		___ftpack
  7023 ;; This function is called by:
  7024 ;;		_angleToPulse
  7025 ;;		_testFrequency
  7026 ;; This function uses a non-reentrant model
  7027 ;;
  7028                           
  7029                           	psect	text39
  7030  0015BC                     __ptext39:
  7031                           	opt stack 0
  7032  0015BC                     ___altoft:
  7033                           	opt stack 19
  7034                           
  7035                           ;incstack = 0
  7036  0015BC  0E00               	movlw	0
  7037  0015BE  6E12               	movwf	___altoft@sign,c
  7038  0015C0  0E8E               	movlw	142
  7039  0015C2  6E11               	movwf	___altoft@exp,c
  7040  0015C4  AE0C               	btfss	___altoft@c+3,7,c
  7041  0015C6  D011               	goto	i2l2815
  7042  0015C8  1E0C               	comf	___altoft@c+3,f,c
  7043  0015CA  1E0B               	comf	___altoft@c+2,f,c
  7044  0015CC  1E0A               	comf	___altoft@c+1,f,c
  7045  0015CE  6C09               	negf	___altoft@c,c
  7046  0015D0  0E00               	movlw	0
  7047  0015D2  220A               	addwfc	___altoft@c+1,f,c
  7048  0015D4  220B               	addwfc	___altoft@c+2,f,c
  7049  0015D6  220C               	addwfc	___altoft@c+3,f,c
  7050  0015D8  0E01               	movlw	1
  7051  0015DA  6E12               	movwf	___altoft@sign,c
  7052  0015DC  D006               	goto	i2l2815
  7053  0015DE                     i2l2813:
  7054  0015DE  90D8               	bcf	status,0,c
  7055  0015E0  320C               	rrcf	___altoft@c+3,f,c
  7056  0015E2  320B               	rrcf	___altoft@c+2,f,c
  7057  0015E4  320A               	rrcf	___altoft@c+1,f,c
  7058  0015E6  3209               	rrcf	___altoft@c,f,c
  7059  0015E8  2A11               	incf	___altoft@exp,f,c
  7060  0015EA                     i2l2815:
  7061  0015EA  0E00               	movlw	0
  7062  0015EC  1409               	andwf	___altoft@c,w,c
  7063  0015EE  6E0D               	movwf	??___altoft& (0+255),c
  7064  0015F0  0E00               	movlw	0
  7065  0015F2  140A               	andwf	___altoft@c+1,w,c
  7066  0015F4  6E0E               	movwf	(??___altoft+1)& (0+255),c
  7067  0015F6  0E00               	movlw	0
  7068  0015F8  140B               	andwf	___altoft@c+2,w,c
  7069  0015FA  6E0F               	movwf	(??___altoft+2)& (0+255),c
  7070  0015FC  0EFF               	movlw	255
  7071  0015FE  140C               	andwf	___altoft@c+3,w,c
  7072  001600  6E10               	movwf	(??___altoft+3)& (0+255),c
  7073  001602  500D               	movf	??___altoft,w,c
  7074  001604  100E               	iorwf	??___altoft+1,w,c
  7075  001606  100F               	iorwf	??___altoft+2,w,c
  7076  001608  1010               	iorwf	??___altoft+3,w,c
  7077  00160A  A4D8               	btfss	status,2,c
  7078  00160C  D7E8               	goto	i2l2813
  7079  00160E  C009  F001         	movff	___altoft@c,___ftpack@arg
  7080  001612  C00A  F002         	movff	___altoft@c+1,___ftpack@arg+1
  7081  001616  C00B  F003         	movff	___altoft@c+2,___ftpack@arg+2
  7082  00161A  C011  F004         	movff	___altoft@exp,___ftpack@exp
  7083  00161E  C012  F005         	movff	___altoft@sign,___ftpack@sign
  7084  001622  EC13  F009         	call	___ftpack	;wreg free
  7085  001626  C001  F009         	movff	?___ftpack,?___altoft
  7086  00162A  C002  F00A         	movff	?___ftpack+1,?___altoft+1
  7087  00162E  C003  F00B         	movff	?___ftpack+2,?___altoft+2
  7088  001632  0012               	return	
  7089  001634                     __end_of___altoft:
  7090                           	opt stack 0
  7091                           pclatu	equ	0xFFB
  7092                           pclath	equ	0xFFA
  7093                           tblptru	equ	0xFF8
  7094                           tblptrh	equ	0xFF7
  7095                           tblptrl	equ	0xFF6
  7096                           tablat	equ	0xFF5
  7097                           prodh	equ	0xFF4
  7098                           prodl	equ	0xFF3
  7099                           intcon	equ	0xFF2
  7100                           intcon3	equ	0xFF0
  7101                           postinc0	equ	0xFEE
  7102                           fsr0h	equ	0xFEA
  7103                           fsr0l	equ	0xFE9
  7104                           wreg	equ	0xFE8
  7105                           postdec1	equ	0xFE5
  7106                           fsr1h	equ	0xFE2
  7107                           fsr1l	equ	0xFE1
  7108                           indf2	equ	0xFDF
  7109                           postinc2	equ	0xFDE
  7110                           postdec2	equ	0xFDD
  7111                           fsr2h	equ	0xFDA
  7112                           fsr2l	equ	0xFD9
  7113                           status	equ	0xFD8
  7114                           
  7115 ;; *************** function ___ftpack *****************
  7116 ;; Defined at:
  7117 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  7118 ;; Parameters:    Size  Location     Type
  7119 ;;  arg             3    0[COMRAM] unsigned um
  7120 ;;  exp             1    3[COMRAM] unsigned char 
  7121 ;;  sign            1    4[COMRAM] unsigned char 
  7122 ;; Auto vars:     Size  Location     Type
  7123 ;;		None
  7124 ;; Return value:  Size  Location     Type
  7125 ;;                  3    0[COMRAM] float 
  7126 ;; Registers used:
  7127 ;;		wreg, status,2, status,0
  7128 ;; Tracked objects:
  7129 ;;		On entry : 0/0
  7130 ;;		On exit  : 0/0
  7131 ;;		Unchanged: 0/0
  7132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7133 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7135 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7136 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7137 ;;Total ram usage:        8 bytes
  7138 ;; Hardware stack levels used:    1
  7139 ;; This function calls:
  7140 ;;		Nothing
  7141 ;; This function is called by:
  7142 ;;		___altoft
  7143 ;;		___awtoft
  7144 ;;		___ftadd
  7145 ;;		___ftdiv
  7146 ;;		___ftmul
  7147 ;; This function uses a non-reentrant model
  7148 ;;
  7149                           
  7150                           	psect	text40
  7151  001226                     __ptext40:
  7152                           	opt stack 0
  7153  001226                     ___ftpack:
  7154                           	opt stack 19
  7155                           
  7156                           ;incstack = 0
  7157  001226  5004               	movf	___ftpack@exp,w,c
  7158  001228  B4D8               	btfsc	status,2,c
  7159  00122A  D005               	goto	i2l2631
  7160  00122C  5001               	movf	___ftpack@arg,w,c
  7161  00122E  1002               	iorwf	___ftpack@arg+1,w,c
  7162  001230  1003               	iorwf	___ftpack@arg+2,w,c
  7163  001232  A4D8               	btfss	status,2,c
  7164  001234  D00C               	goto	i2l2637
  7165  001236                     i2l2631:
  7166  001236  0E00               	movlw	0
  7167  001238  6E01               	movwf	?___ftpack,c
  7168  00123A  0E00               	movlw	0
  7169  00123C  6E02               	movwf	?___ftpack+1,c
  7170  00123E  0E00               	movlw	0
  7171  001240  6E03               	movwf	?___ftpack+2,c
  7172  001242  0012               	return	
  7173  001244                     i2l2635:
  7174  001244  2A04               	incf	___ftpack@exp,f,c
  7175  001246  90D8               	bcf	status,0,c
  7176  001248  3203               	rrcf	___ftpack@arg+2,f,c
  7177  00124A  3202               	rrcf	___ftpack@arg+1,f,c
  7178  00124C  3201               	rrcf	___ftpack@arg,f,c
  7179  00124E                     i2l2637:
  7180  00124E  0E00               	movlw	0
  7181  001250  1401               	andwf	___ftpack@arg,w,c
  7182  001252  6E06               	movwf	??___ftpack& (0+255),c
  7183  001254  0E00               	movlw	0
  7184  001256  1402               	andwf	___ftpack@arg+1,w,c
  7185  001258  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7186  00125A  0EFE               	movlw	254
  7187  00125C  1403               	andwf	___ftpack@arg+2,w,c
  7188  00125E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7189  001260  5006               	movf	??___ftpack,w,c
  7190  001262  1007               	iorwf	??___ftpack+1,w,c
  7191  001264  1008               	iorwf	??___ftpack+2,w,c
  7192  001266  B4D8               	btfsc	status,2,c
  7193  001268  D00C               	goto	i2l2643
  7194  00126A  D7EC               	goto	i2l2635
  7195  00126C                     i2l2639:
  7196  00126C  2A04               	incf	___ftpack@exp,f,c
  7197  00126E  0E01               	movlw	1
  7198  001270  2601               	addwf	___ftpack@arg,f,c
  7199  001272  0E00               	movlw	0
  7200  001274  2202               	addwfc	___ftpack@arg+1,f,c
  7201  001276  0E00               	movlw	0
  7202  001278  2203               	addwfc	___ftpack@arg+2,f,c
  7203  00127A  90D8               	bcf	status,0,c
  7204  00127C  3203               	rrcf	___ftpack@arg+2,f,c
  7205  00127E  3202               	rrcf	___ftpack@arg+1,f,c
  7206  001280  3201               	rrcf	___ftpack@arg,f,c
  7207  001282                     i2l2643:
  7208  001282  0E00               	movlw	0
  7209  001284  1401               	andwf	___ftpack@arg,w,c
  7210  001286  6E06               	movwf	??___ftpack& (0+255),c
  7211  001288  0E00               	movlw	0
  7212  00128A  1402               	andwf	___ftpack@arg+1,w,c
  7213  00128C  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7214  00128E  0EFF               	movlw	255
  7215  001290  1403               	andwf	___ftpack@arg+2,w,c
  7216  001292  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7217  001294  5006               	movf	??___ftpack,w,c
  7218  001296  1007               	iorwf	??___ftpack+1,w,c
  7219  001298  1008               	iorwf	??___ftpack+2,w,c
  7220  00129A  B4D8               	btfsc	status,2,c
  7221  00129C  D006               	goto	i2l2647
  7222  00129E  D7E6               	goto	i2l2639
  7223  0012A0                     i2l2645:
  7224  0012A0  0604               	decf	___ftpack@exp,f,c
  7225  0012A2  90D8               	bcf	status,0,c
  7226  0012A4  3601               	rlcf	___ftpack@arg,f,c
  7227  0012A6  3602               	rlcf	___ftpack@arg+1,f,c
  7228  0012A8  3603               	rlcf	___ftpack@arg+2,f,c
  7229  0012AA                     i2l2647:
  7230  0012AA  BE02               	btfsc	___ftpack@arg+1,7,c
  7231  0012AC  D003               	goto	i2l824
  7232  0012AE  0E02               	movlw	2
  7233  0012B0  6004               	cpfslt	___ftpack@exp,c
  7234  0012B2  D7F6               	goto	i2l2645
  7235  0012B4                     i2l824:
  7236  0012B4  A004               	btfss	___ftpack@exp,0,c
  7237  0012B6  9E02               	bcf	___ftpack@arg+1,7,c
  7238  0012B8  90D8               	bcf	status,0,c
  7239  0012BA  3204               	rrcf	___ftpack@exp,f,c
  7240  0012BC  5004               	movf	___ftpack@exp,w,c
  7241  0012BE  1203               	iorwf	___ftpack@arg+2,f,c
  7242  0012C0  5005               	movf	___ftpack@sign,w,c
  7243  0012C2  A4D8               	btfss	status,2,c
  7244  0012C4  8E03               	bsf	___ftpack@arg+2,7,c
  7245  0012C6  C001  F001         	movff	___ftpack@arg,?___ftpack
  7246  0012CA  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  7247  0012CE  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  7248  0012D2  0012               	return	
  7249  0012D4                     __end_of___ftpack:
  7250                           	opt stack 0
  7251                           pclatu	equ	0xFFB
  7252                           pclath	equ	0xFFA
  7253                           tblptru	equ	0xFF8
  7254                           tblptrh	equ	0xFF7
  7255                           tblptrl	equ	0xFF6
  7256                           tablat	equ	0xFF5
  7257                           prodh	equ	0xFF4
  7258                           prodl	equ	0xFF3
  7259                           intcon	equ	0xFF2
  7260                           intcon3	equ	0xFF0
  7261                           postinc0	equ	0xFEE
  7262                           fsr0h	equ	0xFEA
  7263                           fsr0l	equ	0xFE9
  7264                           wreg	equ	0xFE8
  7265                           postdec1	equ	0xFE5
  7266                           fsr1h	equ	0xFE2
  7267                           fsr1l	equ	0xFE1
  7268                           indf2	equ	0xFDF
  7269                           postinc2	equ	0xFDE
  7270                           postdec2	equ	0xFDD
  7271                           fsr2h	equ	0xFDA
  7272                           fsr2l	equ	0xFD9
  7273                           status	equ	0xFD8
  7274                           
  7275 ;; *************** function _servoInterruptService *****************
  7276 ;; Defined at:
  7277 ;;		line 40 in file "servo.c"
  7278 ;; Parameters:    Size  Location     Type
  7279 ;;		None
  7280 ;; Auto vars:     Size  Location     Type
  7281 ;;  i               2   19[COMRAM] int 
  7282 ;;  flags           8   11[COMRAM] int [4]
  7283 ;; Return value:  Size  Location     Type
  7284 ;;                  1    wreg      void 
  7285 ;; Registers used:
  7286 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7287 ;; Tracked objects:
  7288 ;;		On entry : 0/0
  7289 ;;		On exit  : 0/0
  7290 ;;		Unchanged: 0/0
  7291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7293 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7294 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7295 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7296 ;;Total ram usage:       12 bytes
  7297 ;; Hardware stack levels used:    1
  7298 ;; Hardware stack levels required when called:    1
  7299 ;; This function calls:
  7300 ;;		_digitalRead
  7301 ;;		_startTimer
  7302 ;;		i2_digitalWrite
  7303 ;; This function is called by:
  7304 ;;		_service
  7305 ;; This function uses a non-reentrant model
  7306 ;;
  7307                           
  7308                           	psect	text41
  7309  000664                     __ptext41:
  7310                           	opt stack 0
  7311  000664                     _servoInterruptService:
  7312                           	opt stack 21
  7313                           
  7314                           ;servo.c: 42: int flags[4];
  7315                           ;servo.c: 43: flags[0] = TMR0IF;
  7316                           
  7317                           ;incstack = 0
  7318  000664  A4F2               	btfss	intcon,2,c	;volatile
  7319  000666  D002               	goto	i2u306_40
  7320  000668  0E01               	movlw	1
  7321  00066A  D001               	goto	i2u307_40
  7322  00066C                     i2u306_40:
  7323  00066C  0E00               	movlw	0
  7324  00066E                     i2u307_40:
  7325  00066E  6E0C               	movwf	servoInterruptService@flags,c
  7326  000670  6A0D               	clrf	servoInterruptService@flags+1,c
  7327                           
  7328                           ;servo.c: 44: flags[1] = TMR1IF;
  7329  000672  A09E               	btfss	3998,0,c	;volatile
  7330  000674  D002               	goto	i2u308_40
  7331  000676  0E01               	movlw	1
  7332  000678  D001               	goto	i2u309_40
  7333  00067A                     i2u308_40:
  7334  00067A  0E00               	movlw	0
  7335  00067C                     i2u309_40:
  7336  00067C  6E0E               	movwf	servoInterruptService@flags+2,c
  7337  00067E  6A0F               	clrf	servoInterruptService@flags+3,c
  7338                           
  7339                           ;servo.c: 45: flags[2] = TMR2IF;
  7340  000680  A29E               	btfss	3998,1,c	;volatile
  7341  000682  D002               	goto	i2u310_40
  7342  000684  0E01               	movlw	1
  7343  000686  D001               	goto	i2u311_40
  7344  000688                     i2u310_40:
  7345  000688  0E00               	movlw	0
  7346  00068A                     i2u311_40:
  7347  00068A  6E10               	movwf	servoInterruptService@flags+4,c
  7348  00068C  6A11               	clrf	servoInterruptService@flags+5,c
  7349                           
  7350                           ;servo.c: 46: flags[3] = TMR3IF;
  7351  00068E  A2A1               	btfss	4001,1,c	;volatile
  7352  000690  D002               	goto	i2u312_40
  7353  000692  0E01               	movlw	1
  7354  000694  D001               	goto	i2u313_40
  7355  000696                     i2u312_40:
  7356  000696  0E00               	movlw	0
  7357  000698                     i2u313_40:
  7358  000698  6E12               	movwf	servoInterruptService@flags+6,c
  7359  00069A  6A13               	clrf	servoInterruptService@flags+7,c
  7360                           
  7361                           ;servo.c: 48: for(int i = 0; i < 4; i++){
  7362  00069C  0E00               	movlw	0
  7363  00069E  6E15               	movwf	servoInterruptService@i+1,c
  7364  0006A0  0E00               	movlw	0
  7365  0006A2  6E14               	movwf	servoInterruptService@i,c
  7366  0006A4  BE15               	btfsc	servoInterruptService@i+1,7,c
  7367  0006A6  D008               	goto	i2l3467
  7368  0006A8  5015               	movf	servoInterruptService@i+1,w,c
  7369  0006AA  E105               	bnz	i2u314_40
  7370  0006AC  0E04               	movlw	4
  7371  0006AE  5C14               	subwf	servoInterruptService@i,w,c
  7372  0006B0  B0D8               	btfsc	status,0,c
  7373  0006B2  0012               	return	
  7374  0006B4  D001               	goto	i2l3467
  7375  0006B6                     i2u314_40:
  7376  0006B6  0012               	return	
  7377  0006B8                     i2l3467:
  7378                           
  7379                           ;servo.c: 49: if(flags[i]){
  7380  0006B8  90D8               	bcf	status,0,c
  7381  0006BA  3414               	rlcf	servoInterruptService@i,w,c
  7382  0006BC  6ED9               	movwf	fsr2l,c
  7383  0006BE  3415               	rlcf	servoInterruptService@i+1,w,c
  7384  0006C0  6EDA               	movwf	fsr2h,c
  7385  0006C2  0E0C               	movlw	low servoInterruptService@flags
  7386  0006C4  26D9               	addwf	fsr2l,f,c
  7387  0006C6  0E00               	movlw	high servoInterruptService@flags
  7388  0006C8  22DA               	addwfc	fsr2h,f,c
  7389  0006CA  50DE               	movf	postinc2,w,c
  7390  0006CC  10DE               	iorwf	postinc2,w,c
  7391  0006CE  B4D8               	btfsc	status,2,c
  7392  0006D0  D0AB               	goto	i2l3481
  7393                           
  7394                           ;servo.c: 51: if(digitalRead(port[i],pin[i])){
  7395  0006D2  90D8               	bcf	status,0,c
  7396  0006D4  3414               	rlcf	servoInterruptService@i,w,c
  7397  0006D6  6ED9               	movwf	fsr2l,c
  7398  0006D8  3415               	rlcf	servoInterruptService@i+1,w,c
  7399  0006DA  6EDA               	movwf	fsr2h,c
  7400  0006DC  0EC3               	movlw	low _port
  7401  0006DE  26D9               	addwf	fsr2l,f,c
  7402  0006E0  0E00               	movlw	high _port
  7403  0006E2  22DA               	addwfc	fsr2h,f,c
  7404  0006E4  CFDE F001          	movff	postinc2,digitalRead@port
  7405  0006E8  CFDD F002          	movff	postdec2,digitalRead@port+1
  7406  0006EC  90D8               	bcf	status,0,c
  7407  0006EE  3414               	rlcf	servoInterruptService@i,w,c
  7408  0006F0  6ED9               	movwf	fsr2l,c
  7409  0006F2  3415               	rlcf	servoInterruptService@i+1,w,c
  7410  0006F4  6EDA               	movwf	fsr2h,c
  7411  0006F6  0EBB               	movlw	low _pin
  7412  0006F8  26D9               	addwf	fsr2l,f,c
  7413  0006FA  0E00               	movlw	high _pin
  7414  0006FC  22DA               	addwfc	fsr2h,f,c
  7415  0006FE  CFDE F003          	movff	postinc2,digitalRead@pin
  7416  000702  CFDD F004          	movff	postdec2,digitalRead@pin+1
  7417  000706  ECBA  F008         	call	_digitalRead	;wreg free
  7418  00070A  5001               	movf	?_digitalRead,w,c
  7419  00070C  1002               	iorwf	?_digitalRead+1,w,c
  7420  00070E  B4D8               	btfsc	status,2,c
  7421  000710  D02F               	goto	i2l3475
  7422                           
  7423                           ;servo.c: 52: startTimer(i,15535);
  7424  000712  C014  F001         	movff	servoInterruptService@i,startTimer@timer
  7425  000716  C015  F002         	movff	servoInterruptService@i+1,startTimer@timer+1
  7426  00071A  0EAF               	movlw	175
  7427  00071C  6E03               	movwf	startTimer@val,c
  7428  00071E  0E3C               	movlw	60
  7429  000720  6E04               	movwf	startTimer@val+1,c
  7430  000722  0E00               	movlw	0
  7431  000724  6E05               	movwf	startTimer@val+2,c
  7432  000726  0E00               	movlw	0
  7433  000728  6E06               	movwf	startTimer@val+3,c
  7434  00072A  ECD6  F00B         	call	_startTimer	;wreg free
  7435                           
  7436                           ;servo.c: 53: digitalWrite(port[i],pin[i],0);
  7437  00072E  90D8               	bcf	status,0,c
  7438  000730  3414               	rlcf	servoInterruptService@i,w,c
  7439  000732  6ED9               	movwf	fsr2l,c
  7440  000734  3415               	rlcf	servoInterruptService@i+1,w,c
  7441  000736  6EDA               	movwf	fsr2h,c
  7442  000738  0EC3               	movlw	low _port
  7443  00073A  26D9               	addwf	fsr2l,f,c
  7444  00073C  0E00               	movlw	high _port
  7445  00073E  22DA               	addwfc	fsr2h,f,c
  7446  000740  CFDE F001          	movff	postinc2,i2digitalWrite@port
  7447  000744  CFDD F002          	movff	postdec2,i2digitalWrite@port+1
  7448  000748  90D8               	bcf	status,0,c
  7449  00074A  3414               	rlcf	servoInterruptService@i,w,c
  7450  00074C  6ED9               	movwf	fsr2l,c
  7451  00074E  3415               	rlcf	servoInterruptService@i+1,w,c
  7452  000750  6EDA               	movwf	fsr2h,c
  7453  000752  0EBB               	movlw	low _pin
  7454  000754  26D9               	addwf	fsr2l,f,c
  7455  000756  0E00               	movlw	high _pin
  7456  000758  22DA               	addwfc	fsr2h,f,c
  7457  00075A  CFDE F003          	movff	postinc2,i2digitalWrite@pin
  7458  00075E  CFDD F004          	movff	postdec2,i2digitalWrite@pin+1
  7459  000762  0E00               	movlw	0
  7460  000764  6E06               	movwf	i2digitalWrite@val+1,c
  7461  000766  0E00               	movlw	0
  7462  000768  6E05               	movwf	i2digitalWrite@val,c
  7463  00076A  EC6A  F009         	call	i2_digitalWrite	;wreg free
  7464                           
  7465                           ;servo.c: 54: }
  7466  00076E  D047               	goto	i2l3479
  7467  000770                     i2l3475:
  7468                           
  7469                           ;servo.c: 55: else{
  7470                           ;servo.c: 56: startTimer(i, pulse[i]);
  7471  000770  C014  F001         	movff	servoInterruptService@i,startTimer@timer
  7472  000774  C015  F002         	movff	servoInterruptService@i+1,startTimer@timer+1
  7473  000778  0EAB               	movlw	low _pulse
  7474  00077A  6E0A               	movwf	??_servoInterruptService& (0+255),c
  7475  00077C  0E00               	movlw	high _pulse
  7476  00077E  6E0B               	movwf	(??_servoInterruptService+1)& (0+255),c
  7477  000780  90D8               	bcf	status,0,c
  7478  000782  3414               	rlcf	servoInterruptService@i,w,c
  7479  000784  6ED9               	movwf	fsr2l,c
  7480  000786  3415               	rlcf	servoInterruptService@i+1,w,c
  7481  000788  6EDA               	movwf	fsr2h,c
  7482  00078A  90D8               	bcf	status,0,c
  7483  00078C  36D9               	rlcf	fsr2l,f,c
  7484  00078E  36DA               	rlcf	fsr2h,f,c
  7485  000790  500A               	movf	??_servoInterruptService,w,c
  7486  000792  26D9               	addwf	fsr2l,f,c
  7487  000794  500B               	movf	??_servoInterruptService+1,w,c
  7488  000796  22DA               	addwfc	fsr2h,f,c
  7489  000798  CFDE F003          	movff	postinc2,startTimer@val
  7490  00079C  CFDE F004          	movff	postinc2,startTimer@val+1
  7491  0007A0  CFDE F005          	movff	postinc2,startTimer@val+2
  7492  0007A4  CFDE F006          	movff	postinc2,startTimer@val+3
  7493  0007A8  ECD6  F00B         	call	_startTimer	;wreg free
  7494                           
  7495                           ;servo.c: 57: digitalWrite(port[i],pin[i],1);
  7496  0007AC  90D8               	bcf	status,0,c
  7497  0007AE  3414               	rlcf	servoInterruptService@i,w,c
  7498  0007B0  6ED9               	movwf	fsr2l,c
  7499  0007B2  3415               	rlcf	servoInterruptService@i+1,w,c
  7500  0007B4  6EDA               	movwf	fsr2h,c
  7501  0007B6  0EC3               	movlw	low _port
  7502  0007B8  26D9               	addwf	fsr2l,f,c
  7503  0007BA  0E00               	movlw	high _port
  7504  0007BC  22DA               	addwfc	fsr2h,f,c
  7505  0007BE  CFDE F001          	movff	postinc2,i2digitalWrite@port
  7506  0007C2  CFDD F002          	movff	postdec2,i2digitalWrite@port+1
  7507  0007C6  90D8               	bcf	status,0,c
  7508  0007C8  3414               	rlcf	servoInterruptService@i,w,c
  7509  0007CA  6ED9               	movwf	fsr2l,c
  7510  0007CC  3415               	rlcf	servoInterruptService@i+1,w,c
  7511  0007CE  6EDA               	movwf	fsr2h,c
  7512  0007D0  0EBB               	movlw	low _pin
  7513  0007D2  26D9               	addwf	fsr2l,f,c
  7514  0007D4  0E00               	movlw	high _pin
  7515  0007D6  22DA               	addwfc	fsr2h,f,c
  7516  0007D8  CFDE F003          	movff	postinc2,i2digitalWrite@pin
  7517  0007DC  CFDD F004          	movff	postdec2,i2digitalWrite@pin+1
  7518  0007E0  0E00               	movlw	0
  7519  0007E2  6E06               	movwf	i2digitalWrite@val+1,c
  7520  0007E4  0E01               	movlw	1
  7521  0007E6  6E05               	movwf	i2digitalWrite@val,c
  7522  0007E8  EC6A  F009         	call	i2_digitalWrite	;wreg free
  7523                           
  7524                           ;servo.c: 58: }
  7525                           ;servo.c: 61: switch(i){
  7526  0007EC  D008               	goto	i2l3479
  7527  0007EE                     i2l494:
  7528  0007EE  94F2               	bcf	intcon,2,c	;volatile
  7529  0007F0  D01B               	goto	i2l3481
  7530  0007F2                     i2l496:
  7531  0007F2  909E               	bcf	3998,0,c	;volatile
  7532  0007F4  D019               	goto	i2l3481
  7533  0007F6                     i2l497:
  7534  0007F6  929E               	bcf	3998,1,c	;volatile
  7535  0007F8  D017               	goto	i2l3481
  7536  0007FA                     i2l498:
  7537  0007FA  92A1               	bcf	4001,1,c	;volatile
  7538                           
  7539                           ;servo.c: 66: }
  7540  0007FC  D015               	goto	i2l3481
  7541  0007FE                     i2l3479:
  7542  0007FE  C014  F00A         	movff	servoInterruptService@i,??_servoInterruptService
  7543  000802  C015  F00B         	movff	servoInterruptService@i+1,??_servoInterruptService+1
  7544                           
  7545                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7546                           ; Switch size 1, requested type "space"
  7547                           ; Number of cases is 1, Range of values is 0 to 0
  7548                           ; switch strategies available:
  7549                           ; Name         Instructions Cycles
  7550                           ; simple_byte            4     3 (average)
  7551                           ;	Chosen strategy is simple_byte
  7552  000806  500B               	movf	??_servoInterruptService+1,w,c
  7553  000808  0A00               	xorlw	0	; case 0
  7554  00080A  A4D8               	btfss	status,2,c
  7555  00080C  D00D               	goto	i2l3481
  7556                           
  7557                           ; Switch size 1, requested type "space"
  7558                           ; Number of cases is 4, Range of values is 0 to 3
  7559                           ; switch strategies available:
  7560                           ; Name         Instructions Cycles
  7561                           ; simple_byte           13     7 (average)
  7562                           ;	Chosen strategy is simple_byte
  7563  00080E  500A               	movf	??_servoInterruptService,w,c
  7564  000810  0A00               	xorlw	0	; case 0
  7565  000812  B4D8               	btfsc	status,2,c
  7566  000814  D7EC               	goto	i2l494
  7567  000816  0A01               	xorlw	1	; case 1
  7568  000818  B4D8               	btfsc	status,2,c
  7569  00081A  D7EB               	goto	i2l496
  7570  00081C  0A03               	xorlw	3	; case 2
  7571  00081E  B4D8               	btfsc	status,2,c
  7572  000820  D7EA               	goto	i2l497
  7573  000822  0A01               	xorlw	1	; case 3
  7574  000824  B4D8               	btfsc	status,2,c
  7575  000826  D7E9               	goto	i2l498
  7576  000828                     i2l3481:
  7577  000828  4A14               	infsnz	servoInterruptService@i,f,c
  7578  00082A  2A15               	incf	servoInterruptService@i+1,f,c
  7579  00082C  BE15               	btfsc	servoInterruptService@i+1,7,c
  7580  00082E  D744               	goto	i2l3467
  7581  000830  5015               	movf	servoInterruptService@i+1,w,c
  7582  000832  E101               	bnz	i2l499
  7583  000834  D73B               	goto	L5
  7584  000836                     i2l499:
  7585  000836  0012               	return		;funcret
  7586  000838                     __end_of_servoInterruptService:
  7587                           	opt stack 0
  7588                           pclatu	equ	0xFFB
  7589                           pclath	equ	0xFFA
  7590                           tblptru	equ	0xFF8
  7591                           tblptrh	equ	0xFF7
  7592                           tblptrl	equ	0xFF6
  7593                           tablat	equ	0xFF5
  7594                           prodh	equ	0xFF4
  7595                           prodl	equ	0xFF3
  7596                           intcon	equ	0xFF2
  7597                           intcon3	equ	0xFF0
  7598                           postinc0	equ	0xFEE
  7599                           fsr0h	equ	0xFEA
  7600                           fsr0l	equ	0xFE9
  7601                           wreg	equ	0xFE8
  7602                           postdec1	equ	0xFE5
  7603                           fsr1h	equ	0xFE2
  7604                           fsr1l	equ	0xFE1
  7605                           indf2	equ	0xFDF
  7606                           postinc2	equ	0xFDE
  7607                           postdec2	equ	0xFDD
  7608                           fsr2h	equ	0xFDA
  7609                           fsr2l	equ	0xFD9
  7610                           status	equ	0xFD8
  7611                           
  7612 ;; *************** function i2_digitalWrite *****************
  7613 ;; Defined at:
  7614 ;;		line 53 in file "iopin.c"
  7615 ;; Parameters:    Size  Location     Type
  7616 ;;  port            2    0[COMRAM] int 
  7617 ;;  pin             2    2[COMRAM] int 
  7618 ;;  val             2    4[COMRAM] int 
  7619 ;; Auto vars:     Size  Location     Type
  7620 ;;		None
  7621 ;; Return value:  Size  Location     Type
  7622 ;;                  1    wreg      void 
  7623 ;; Registers used:
  7624 ;;		wreg, status,2, status,0
  7625 ;; Tracked objects:
  7626 ;;		On entry : 0/0
  7627 ;;		On exit  : 0/0
  7628 ;;		Unchanged: 0/0
  7629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7630 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7632 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7633 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7634 ;;Total ram usage:        9 bytes
  7635 ;; Hardware stack levels used:    1
  7636 ;; This function calls:
  7637 ;;		Nothing
  7638 ;; This function is called by:
  7639 ;;		_servoInterruptService
  7640 ;; This function uses a non-reentrant model
  7641 ;;
  7642                           
  7643                           	psect	text42
  7644  0012D4                     __ptext42:
  7645                           	opt stack 0
  7646  0012D4                     i2_digitalWrite:
  7647                           	opt stack 21
  7648                           
  7649                           ;iopin.c: 54: pin = 1 << pin;
  7650                           
  7651                           ;incstack = 0
  7652  0012D4  C003  F007         	movff	i2digitalWrite@pin,??i2_digitalWrite
  7653  0012D8  0E01               	movlw	1
  7654  0012DA  6E08               	movwf	(??i2_digitalWrite+1)& (0+255),c
  7655  0012DC  0E00               	movlw	0
  7656  0012DE  6E09               	movwf	(??i2_digitalWrite+2)& (0+255),c
  7657  0012E0  2A07               	incf	??i2_digitalWrite,f,c
  7658  0012E2  D003               	goto	i2u260_44
  7659  0012E4                     i2u260_45:
  7660  0012E4  90D8               	bcf	status,0,c
  7661  0012E6  3608               	rlcf	??i2_digitalWrite+1,f,c
  7662  0012E8  3609               	rlcf	??i2_digitalWrite+2,f,c
  7663  0012EA                     i2u260_44:
  7664  0012EA  2E07               	decfsz	??i2_digitalWrite,f,c
  7665  0012EC  D7FB               	goto	i2u260_45
  7666  0012EE  C008  F003         	movff	??i2_digitalWrite+1,i2digitalWrite@pin
  7667  0012F2  C009  F004         	movff	??i2_digitalWrite+2,i2digitalWrite@pin+1
  7668                           
  7669                           ;iopin.c: 55: if(val == 0){
  7670  0012F6  5005               	movf	i2digitalWrite@val,w,c
  7671  0012F8  1006               	iorwf	i2digitalWrite@val+1,w,c
  7672  0012FA  A4D8               	btfss	status,2,c
  7673  0012FC  D02B               	goto	i2l3219
  7674                           
  7675                           ;iopin.c: 56: pin ^= 0xff;
  7676  0012FE  0EFF               	movlw	255
  7677  001300  1A03               	xorwf	i2digitalWrite@pin,f,c
  7678                           
  7679                           ;iopin.c: 57: }
  7680                           ;iopin.c: 59: switch(port){
  7681  001302  D028               	goto	i2l3219
  7682  001304                     i2l3195:
  7683  001304  0405               	decf	i2digitalWrite@val,w,c
  7684  001306  1006               	iorwf	i2digitalWrite@val+1,w,c
  7685  001308  A4D8               	btfss	status,2,c
  7686  00130A  D003               	goto	i2l3199
  7687  00130C  5003               	movf	i2digitalWrite@pin,w,c
  7688  00130E  1289               	iorwf	3977,f,c	;volatile
  7689  001310  0012               	return	
  7690  001312                     i2l3199:
  7691                           
  7692                           ;iopin.c: 61: else LATA &= pin;
  7693  001312  5003               	movf	i2digitalWrite@pin,w,c
  7694  001314  1689               	andwf	3977,f,c	;volatile
  7695                           
  7696                           ;iopin.c: 62: break;
  7697  001316  0012               	return	
  7698  001318                     i2l3201:
  7699  001318  0405               	decf	i2digitalWrite@val,w,c
  7700  00131A  1006               	iorwf	i2digitalWrite@val+1,w,c
  7701  00131C  A4D8               	btfss	status,2,c
  7702  00131E  D003               	goto	i2l3205
  7703  001320  5003               	movf	i2digitalWrite@pin,w,c
  7704  001322  128A               	iorwf	3978,f,c	;volatile
  7705  001324  0012               	return	
  7706  001326                     i2l3205:
  7707                           
  7708                           ;iopin.c: 64: else LATB &= pin;
  7709  001326  5003               	movf	i2digitalWrite@pin,w,c
  7710  001328  168A               	andwf	3978,f,c	;volatile
  7711                           
  7712                           ;iopin.c: 65: break;
  7713  00132A  0012               	return	
  7714  00132C                     i2l3207:
  7715  00132C  0405               	decf	i2digitalWrite@val,w,c
  7716  00132E  1006               	iorwf	i2digitalWrite@val+1,w,c
  7717  001330  A4D8               	btfss	status,2,c
  7718  001332  D003               	goto	i2l3211
  7719  001334  5003               	movf	i2digitalWrite@pin,w,c
  7720  001336  128B               	iorwf	3979,f,c	;volatile
  7721  001338  0012               	return	
  7722  00133A                     i2l3211:
  7723                           
  7724                           ;iopin.c: 67: else LATC &= pin;
  7725  00133A  5003               	movf	i2digitalWrite@pin,w,c
  7726  00133C  168B               	andwf	3979,f,c	;volatile
  7727                           
  7728                           ;iopin.c: 68: break;
  7729  00133E  0012               	return	
  7730  001340                     i2l3213:
  7731  001340  0405               	decf	i2digitalWrite@val,w,c
  7732  001342  1006               	iorwf	i2digitalWrite@val+1,w,c
  7733  001344  A4D8               	btfss	status,2,c
  7734  001346  D003               	goto	i2l3217
  7735  001348  5003               	movf	i2digitalWrite@pin,w,c
  7736  00134A  128C               	iorwf	3980,f,c	;volatile
  7737  00134C  0012               	return	
  7738  00134E                     i2l3217:
  7739                           
  7740                           ;iopin.c: 70: else LATD &= pin;
  7741  00134E  5003               	movf	i2digitalWrite@pin,w,c
  7742  001350  168C               	andwf	3980,f,c	;volatile
  7743                           
  7744                           ;iopin.c: 71: }
  7745  001352  0012               	return	
  7746  001354                     i2l3219:
  7747  001354  C001  F007         	movff	i2digitalWrite@port,??i2_digitalWrite
  7748  001358  C002  F008         	movff	i2digitalWrite@port+1,??i2_digitalWrite+1
  7749                           
  7750                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7751                           ; Switch size 1, requested type "space"
  7752                           ; Number of cases is 1, Range of values is 0 to 0
  7753                           ; switch strategies available:
  7754                           ; Name         Instructions Cycles
  7755                           ; simple_byte            4     3 (average)
  7756                           ;	Chosen strategy is simple_byte
  7757  00135C  5008               	movf	??i2_digitalWrite+1,w,c
  7758  00135E  0A00               	xorlw	0	; case 0
  7759  001360  A4D8               	btfss	status,2,c
  7760  001362  0012               	return	
  7761                           
  7762                           ; Switch size 1, requested type "space"
  7763                           ; Number of cases is 4, Range of values is 0 to 3
  7764                           ; switch strategies available:
  7765                           ; Name         Instructions Cycles
  7766                           ; simple_byte           13     7 (average)
  7767                           ;	Chosen strategy is simple_byte
  7768  001364  5007               	movf	??i2_digitalWrite,w,c
  7769  001366  0A00               	xorlw	0	; case 0
  7770  001368  B4D8               	btfsc	status,2,c
  7771  00136A  D7CC               	goto	i2l3195
  7772  00136C  0A01               	xorlw	1	; case 1
  7773  00136E  B4D8               	btfsc	status,2,c
  7774  001370  D7D3               	goto	i2l3201
  7775  001372  0A03               	xorlw	3	; case 2
  7776  001374  B4D8               	btfsc	status,2,c
  7777  001376  D7DA               	goto	i2l3207
  7778  001378  0A01               	xorlw	1	; case 3
  7779  00137A  A4D8               	btfss	status,2,c
  7780  00137C  0012               	return	
  7781  00137E  D7E0               	goto	i2l3213
  7782  001380                     __end_ofi2_digitalWrite:
  7783                           	opt stack 0
  7784                           pclatu	equ	0xFFB
  7785                           pclath	equ	0xFFA
  7786                           tblptru	equ	0xFF8
  7787                           tblptrh	equ	0xFF7
  7788                           tblptrl	equ	0xFF6
  7789                           tablat	equ	0xFF5
  7790                           prodh	equ	0xFF4
  7791                           prodl	equ	0xFF3
  7792                           intcon	equ	0xFF2
  7793                           intcon3	equ	0xFF0
  7794                           postinc0	equ	0xFEE
  7795                           fsr0h	equ	0xFEA
  7796                           fsr0l	equ	0xFE9
  7797                           wreg	equ	0xFE8
  7798                           postdec1	equ	0xFE5
  7799                           fsr1h	equ	0xFE2
  7800                           fsr1l	equ	0xFE1
  7801                           indf2	equ	0xFDF
  7802                           postinc2	equ	0xFDE
  7803                           postdec2	equ	0xFDD
  7804                           fsr2h	equ	0xFDA
  7805                           fsr2l	equ	0xFD9
  7806                           status	equ	0xFD8
  7807                           
  7808 ;; *************** function _startTimer *****************
  7809 ;; Defined at:
  7810 ;;		line 75 in file "timer.c"
  7811 ;; Parameters:    Size  Location     Type
  7812 ;;  timer           2    0[COMRAM] int 
  7813 ;;  val             4    2[COMRAM] long 
  7814 ;; Auto vars:     Size  Location     Type
  7815 ;;		None
  7816 ;; Return value:  Size  Location     Type
  7817 ;;                  1    wreg      void 
  7818 ;; Registers used:
  7819 ;;		wreg, status,2, status,0
  7820 ;; Tracked objects:
  7821 ;;		On entry : 0/0
  7822 ;;		On exit  : 0/0
  7823 ;;		Unchanged: 0/0
  7824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7825 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7827 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7828 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7829 ;;Total ram usage:        8 bytes
  7830 ;; Hardware stack levels used:    1
  7831 ;; This function calls:
  7832 ;;		Nothing
  7833 ;; This function is called by:
  7834 ;;		_servoInterruptService
  7835 ;;		_testFrequency
  7836 ;;		_initServo
  7837 ;; This function uses a non-reentrant model
  7838 ;;
  7839                           
  7840                           	psect	text43
  7841  0017AC                     __ptext43:
  7842                           	opt stack 0
  7843  0017AC                     _startTimer:
  7844                           	opt stack 21
  7845                           
  7846                           ;timer.c: 76: switch(timer){
  7847                           
  7848                           ;incstack = 0
  7849  0017AC  D012               	goto	i2l3167
  7850  0017AE                     i2l367:
  7851                           
  7852                           ;timer.c: 78: TMR0H = val>>8;
  7853  0017AE  C004  FFD7         	movff	startTimer@val+1,4055	;volatile
  7854                           
  7855                           ;timer.c: 79: TMR0L = val;
  7856  0017B2  C003  FFD6         	movff	startTimer@val,4054	;volatile
  7857                           
  7858                           ;timer.c: 80: T0CON |= 1<<7;
  7859  0017B6  8ED5               	bsf	4053,7,c	;volatile
  7860                           
  7861                           ;timer.c: 81: break;
  7862  0017B8  0012               	return	
  7863  0017BA                     i2l369:
  7864                           
  7865                           ;timer.c: 83: TMR1H = val>>8;
  7866  0017BA  C004  FFCF         	movff	startTimer@val+1,4047	;volatile
  7867                           
  7868                           ;timer.c: 84: TMR1L = val;
  7869  0017BE  C003  FFCE         	movff	startTimer@val,4046	;volatile
  7870                           
  7871                           ;timer.c: 85: T1CON |= 1<<0;
  7872  0017C2  80CD               	bsf	4045,0,c	;volatile
  7873                           
  7874                           ;timer.c: 86: break;
  7875  0017C4  0012               	return	
  7876  0017C6                     i2l370:
  7877                           
  7878                           ;timer.c: 88: TMR3H = val>>8;
  7879  0017C6  C004  FFB3         	movff	startTimer@val+1,4019	;volatile
  7880                           
  7881                           ;timer.c: 89: TMR3L = val;
  7882  0017CA  C003  FFB2         	movff	startTimer@val,4018	;volatile
  7883                           
  7884                           ;timer.c: 90: T3CON |= 1<<0;
  7885  0017CE  80B1               	bsf	4017,0,c	;volatile
  7886                           
  7887                           ;timer.c: 91: }
  7888  0017D0  0012               	return	
  7889  0017D2                     i2l3167:
  7890  0017D2  C001  F007         	movff	startTimer@timer,??_startTimer
  7891  0017D6  C002  F008         	movff	startTimer@timer+1,??_startTimer+1
  7892                           
  7893                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7894                           ; Switch size 1, requested type "space"
  7895                           ; Number of cases is 1, Range of values is 0 to 0
  7896                           ; switch strategies available:
  7897                           ; Name         Instructions Cycles
  7898                           ; simple_byte            4     3 (average)
  7899                           ;	Chosen strategy is simple_byte
  7900  0017DA  5008               	movf	??_startTimer+1,w,c
  7901  0017DC  0A00               	xorlw	0	; case 0
  7902  0017DE  A4D8               	btfss	status,2,c
  7903  0017E0  0012               	return	
  7904                           
  7905                           ; Switch size 1, requested type "space"
  7906                           ; Number of cases is 3, Range of values is 0 to 3
  7907                           ; switch strategies available:
  7908                           ; Name         Instructions Cycles
  7909                           ; simple_byte           10     6 (average)
  7910                           ;	Chosen strategy is simple_byte
  7911  0017E2  5007               	movf	??_startTimer,w,c
  7912  0017E4  0A00               	xorlw	0	; case 0
  7913  0017E6  B4D8               	btfsc	status,2,c
  7914  0017E8  D7E2               	goto	i2l367
  7915  0017EA  0A01               	xorlw	1	; case 1
  7916  0017EC  B4D8               	btfsc	status,2,c
  7917  0017EE  D7E5               	goto	i2l369
  7918  0017F0  0A02               	xorlw	2	; case 3
  7919  0017F2  A4D8               	btfss	status,2,c
  7920  0017F4  0012               	return	
  7921  0017F6  D7E7               	goto	i2l370
  7922  0017F8                     __end_of_startTimer:
  7923                           	opt stack 0
  7924                           pclatu	equ	0xFFB
  7925                           pclath	equ	0xFFA
  7926                           tblptru	equ	0xFF8
  7927                           tblptrh	equ	0xFF7
  7928                           tblptrl	equ	0xFF6
  7929                           tablat	equ	0xFF5
  7930                           prodh	equ	0xFF4
  7931                           prodl	equ	0xFF3
  7932                           intcon	equ	0xFF2
  7933                           intcon3	equ	0xFF0
  7934                           postinc0	equ	0xFEE
  7935                           fsr0h	equ	0xFEA
  7936                           fsr0l	equ	0xFE9
  7937                           wreg	equ	0xFE8
  7938                           postdec1	equ	0xFE5
  7939                           fsr1h	equ	0xFE2
  7940                           fsr1l	equ	0xFE1
  7941                           indf2	equ	0xFDF
  7942                           postinc2	equ	0xFDE
  7943                           postdec2	equ	0xFDD
  7944                           fsr2h	equ	0xFDA
  7945                           fsr2l	equ	0xFD9
  7946                           status	equ	0xFD8
  7947                           
  7948 ;; *************** function _digitalRead *****************
  7949 ;; Defined at:
  7950 ;;		line 43 in file "iopin.c"
  7951 ;; Parameters:    Size  Location     Type
  7952 ;;  port            2    0[COMRAM] int 
  7953 ;;  pin             2    2[COMRAM] int 
  7954 ;; Auto vars:     Size  Location     Type
  7955 ;;		None
  7956 ;; Return value:  Size  Location     Type
  7957 ;;                  2    0[COMRAM] int 
  7958 ;; Registers used:
  7959 ;;		wreg, status,2, status,0
  7960 ;; Tracked objects:
  7961 ;;		On entry : 0/0
  7962 ;;		On exit  : 0/0
  7963 ;;		Unchanged: 0/0
  7964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7965 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7967 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7968 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7969 ;;Total ram usage:        6 bytes
  7970 ;; Hardware stack levels used:    1
  7971 ;; This function calls:
  7972 ;;		Nothing
  7973 ;; This function is called by:
  7974 ;;		_servoInterruptService
  7975 ;; This function uses a non-reentrant model
  7976 ;;
  7977                           
  7978                           	psect	text44
  7979  001174                     __ptext44:
  7980                           	opt stack 0
  7981  001174                     _digitalRead:
  7982                           	opt stack 21
  7983                           
  7984                           ;iopin.c: 44: switch(port){
  7985                           
  7986                           ;incstack = 0
  7987  001174  D040               	goto	i2l3153
  7988  001176                     i2l3135:
  7989  001176  C003  F005         	movff	digitalRead@pin,??_digitalRead
  7990  00117A  CF80 F006          	movff	3968,??_digitalRead+1	;volatile
  7991  00117E  2A05               	incf	??_digitalRead,f,c
  7992  001180  D002               	goto	i2u255_44
  7993  001182                     i2u255_45:
  7994  001182  90D8               	bcf	status,0,c
  7995  001184  3206               	rrcf	??_digitalRead+1,f,c
  7996  001186                     i2u255_44:
  7997  001186  2E05               	decfsz	??_digitalRead,f,c
  7998  001188  D7FC               	goto	i2u255_45
  7999  00118A  0E01               	movlw	1
  8000  00118C  1606               	andwf	??_digitalRead+1,f,c
  8001  00118E  5006               	movf	??_digitalRead+1,w,c
  8002  001190  6E01               	movwf	?_digitalRead,c
  8003  001192  6A02               	clrf	?_digitalRead+1,c
  8004  001194  0012               	return	
  8005  001196                     i2l3139:
  8006  001196  C003  F005         	movff	digitalRead@pin,??_digitalRead
  8007  00119A  CF81 F006          	movff	3969,??_digitalRead+1	;volatile
  8008  00119E  2A05               	incf	??_digitalRead,f,c
  8009  0011A0  D002               	goto	i2u256_44
  8010  0011A2                     i2u256_45:
  8011  0011A2  90D8               	bcf	status,0,c
  8012  0011A4  3206               	rrcf	??_digitalRead+1,f,c
  8013  0011A6                     i2u256_44:
  8014  0011A6  2E05               	decfsz	??_digitalRead,f,c
  8015  0011A8  D7FC               	goto	i2u256_45
  8016  0011AA  0E01               	movlw	1
  8017  0011AC  1606               	andwf	??_digitalRead+1,f,c
  8018  0011AE  5006               	movf	??_digitalRead+1,w,c
  8019  0011B0  6E01               	movwf	?_digitalRead,c
  8020  0011B2  6A02               	clrf	?_digitalRead+1,c
  8021  0011B4  0012               	return	
  8022  0011B6                     i2l3143:
  8023  0011B6  C003  F005         	movff	digitalRead@pin,??_digitalRead
  8024  0011BA  CF82 F006          	movff	3970,??_digitalRead+1	;volatile
  8025  0011BE  2A05               	incf	??_digitalRead,f,c
  8026  0011C0  D002               	goto	i2u257_44
  8027  0011C2                     i2u257_45:
  8028  0011C2  90D8               	bcf	status,0,c
  8029  0011C4  3206               	rrcf	??_digitalRead+1,f,c
  8030  0011C6                     i2u257_44:
  8031  0011C6  2E05               	decfsz	??_digitalRead,f,c
  8032  0011C8  D7FC               	goto	i2u257_45
  8033  0011CA  0E01               	movlw	1
  8034  0011CC  1606               	andwf	??_digitalRead+1,f,c
  8035  0011CE  5006               	movf	??_digitalRead+1,w,c
  8036  0011D0  6E01               	movwf	?_digitalRead,c
  8037  0011D2  6A02               	clrf	?_digitalRead+1,c
  8038  0011D4  0012               	return	
  8039  0011D6                     i2l3147:
  8040  0011D6  C003  F005         	movff	digitalRead@pin,??_digitalRead
  8041  0011DA  CF83 F006          	movff	3971,??_digitalRead+1	;volatile
  8042  0011DE  2A05               	incf	??_digitalRead,f,c
  8043  0011E0  D002               	goto	i2u258_44
  8044  0011E2                     i2u258_45:
  8045  0011E2  90D8               	bcf	status,0,c
  8046  0011E4  3206               	rrcf	??_digitalRead+1,f,c
  8047  0011E6                     i2u258_44:
  8048  0011E6  2E05               	decfsz	??_digitalRead,f,c
  8049  0011E8  D7FC               	goto	i2u258_45
  8050  0011EA  0E01               	movlw	1
  8051  0011EC  1606               	andwf	??_digitalRead+1,f,c
  8052  0011EE  5006               	movf	??_digitalRead+1,w,c
  8053  0011F0  6E01               	movwf	?_digitalRead,c
  8054  0011F2  6A02               	clrf	?_digitalRead+1,c
  8055  0011F4  0012               	return	
  8056  0011F6                     i2l3153:
  8057  0011F6  C001  F005         	movff	digitalRead@port,??_digitalRead
  8058  0011FA  C002  F006         	movff	digitalRead@port+1,??_digitalRead+1
  8059                           
  8060                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8061                           ; Switch size 1, requested type "space"
  8062                           ; Number of cases is 1, Range of values is 0 to 0
  8063                           ; switch strategies available:
  8064                           ; Name         Instructions Cycles
  8065                           ; simple_byte            4     3 (average)
  8066                           ;	Chosen strategy is simple_byte
  8067  0011FE  5006               	movf	??_digitalRead+1,w,c
  8068  001200  0A00               	xorlw	0	; case 0
  8069  001202  A4D8               	btfss	status,2,c
  8070  001204  D00D               	goto	i2l262
  8071                           
  8072                           ; Switch size 1, requested type "space"
  8073                           ; Number of cases is 4, Range of values is 0 to 3
  8074                           ; switch strategies available:
  8075                           ; Name         Instructions Cycles
  8076                           ; simple_byte           13     7 (average)
  8077                           ;	Chosen strategy is simple_byte
  8078  001206  5005               	movf	??_digitalRead,w,c
  8079  001208  0A00               	xorlw	0	; case 0
  8080  00120A  B4D8               	btfsc	status,2,c
  8081  00120C  D7B4               	goto	i2l3135
  8082  00120E  0A01               	xorlw	1	; case 1
  8083  001210  B4D8               	btfsc	status,2,c
  8084  001212  D7C1               	goto	i2l3139
  8085  001214  0A03               	xorlw	3	; case 2
  8086  001216  B4D8               	btfsc	status,2,c
  8087  001218  D7CE               	goto	i2l3143
  8088  00121A  0A01               	xorlw	1	; case 3
  8089  00121C  B4D8               	btfsc	status,2,c
  8090  00121E  D7DB               	goto	i2l3147
  8091  001220                     i2l262:
  8092                           
  8093                           ;iopin.c: 50: return -1;
  8094  001220  6801               	setf	?_digitalRead,c
  8095  001222  6802               	setf	?_digitalRead+1,c
  8096  001224  0012               	return		;funcret
  8097  001226                     __end_of_digitalRead:
  8098                           	opt stack 0
  8099                           pclatu	equ	0xFFB
  8100                           pclath	equ	0xFFA
  8101                           tblptru	equ	0xFF8
  8102                           tblptrh	equ	0xFF7
  8103                           tblptrl	equ	0xFF6
  8104                           tablat	equ	0xFF5
  8105                           prodh	equ	0xFF4
  8106                           prodl	equ	0xFF3
  8107                           intcon	equ	0xFF2
  8108                           intcon3	equ	0xFF0
  8109                           postinc0	equ	0xFEE
  8110                           fsr0h	equ	0xFEA
  8111                           fsr0l	equ	0xFE9
  8112                           wreg	equ	0xFE8
  8113                           postdec1	equ	0xFE5
  8114                           fsr1h	equ	0xFE2
  8115                           fsr1l	equ	0xFE1
  8116                           indf2	equ	0xFDF
  8117                           postinc2	equ	0xFDE
  8118                           postdec2	equ	0xFDD
  8119                           fsr2h	equ	0xFDA
  8120                           fsr2l	equ	0xFD9
  8121                           status	equ	0xFD8
  8122                           pclatu	equ	0xFFB
  8123                           pclath	equ	0xFFA
  8124                           tblptru	equ	0xFF8
  8125                           tblptrh	equ	0xFF7
  8126                           tblptrl	equ	0xFF6
  8127                           tablat	equ	0xFF5
  8128                           prodh	equ	0xFF4
  8129                           prodl	equ	0xFF3
  8130                           intcon	equ	0xFF2
  8131                           intcon3	equ	0xFF0
  8132                           postinc0	equ	0xFEE
  8133                           fsr0h	equ	0xFEA
  8134                           fsr0l	equ	0xFE9
  8135                           wreg	equ	0xFE8
  8136                           postdec1	equ	0xFE5
  8137                           fsr1h	equ	0xFE2
  8138                           fsr1l	equ	0xFE1
  8139                           indf2	equ	0xFDF
  8140                           postinc2	equ	0xFDE
  8141                           postdec2	equ	0xFDD
  8142                           fsr2h	equ	0xFDA
  8143                           fsr2l	equ	0xFD9
  8144                           status	equ	0xFD8
  8145                           
  8146                           	psect	rparam
  8147  0000                     pclatu	equ	0xFFB
  8148                           pclath	equ	0xFFA
  8149                           tblptru	equ	0xFF8
  8150                           tblptrh	equ	0xFF7
  8151                           tblptrl	equ	0xFF6
  8152                           tablat	equ	0xFF5
  8153                           prodh	equ	0xFF4
  8154                           prodl	equ	0xFF3
  8155                           intcon	equ	0xFF2
  8156                           intcon3	equ	0xFF0
  8157                           postinc0	equ	0xFEE
  8158                           fsr0h	equ	0xFEA
  8159                           fsr0l	equ	0xFE9
  8160                           wreg	equ	0xFE8
  8161                           postdec1	equ	0xFE5
  8162                           fsr1h	equ	0xFE2
  8163                           fsr1l	equ	0xFE1
  8164                           indf2	equ	0xFDF
  8165                           postinc2	equ	0xFDE
  8166                           postdec2	equ	0xFDD
  8167                           fsr2h	equ	0xFDA
  8168                           fsr2l	equ	0xFD9
  8169                           status	equ	0xFD8
  8170                           
  8171                           	psect	temp
  8172  000078                     btemp:
  8173                           	opt stack 0
  8174  000078                     	ds	1
  8175  0000                     int$flags	set	btemp
  8176                           pclatu	equ	0xFFB
  8177                           pclath	equ	0xFFA
  8178                           tblptru	equ	0xFF8
  8179                           tblptrh	equ	0xFF7
  8180                           tblptrl	equ	0xFF6
  8181                           tablat	equ	0xFF5
  8182                           prodh	equ	0xFF4
  8183                           prodl	equ	0xFF3
  8184                           intcon	equ	0xFF2
  8185                           intcon3	equ	0xFF0
  8186                           postinc0	equ	0xFEE
  8187                           fsr0h	equ	0xFEA
  8188                           fsr0l	equ	0xFE9
  8189                           wreg	equ	0xFE8
  8190                           postdec1	equ	0xFE5
  8191                           fsr1h	equ	0xFE2
  8192                           fsr1l	equ	0xFE1
  8193                           indf2	equ	0xFDF
  8194                           postinc2	equ	0xFDE
  8195                           postdec2	equ	0xFDD
  8196                           fsr2h	equ	0xFDA
  8197                           fsr2l	equ	0xFD9
  8198                           status	equ	0xFD8


Data Sizes:
    Strings     270
    Constant    96
    Data        8
    BSS         34
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    117     119
    BANK0           128     43      83
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_17(CODE[17]), STR_16(CODE[18]), STR_15(CODE[17]), STR_14(CODE[18]), 
		 -> STR_13(CODE[17]), STR_12(CODE[19]), STR_11(CODE[17]), STR_10(CODE[18]), 
		 -> STR_9(CODE[17]), STR_8(CODE[18]), STR_7(CODE[17]), STR_6(CODE[18]), 
		 -> STR_5(CODE[4]), STR_4(CODE[9]), STR_3(CODE[8]), STR_2(CODE[12]), 
		 -> STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _service in COMRAM

    _service->_setAngle
    _sortBatteryInterruptService->i2_printf
    _setAngle->_angleToPulse
    i2_printf->i2___llmod
    i2_lcdNewline->i2_lcdInst
    i2___llmod->i2___lldiv
    i2_lcdClear->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    _angleToPulse->___fttol
    ___fttol->___ftadd
    ___ftmul->___ftdiv
    ___ftdiv->___awtoft
    ___ftadd->___ftmul
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _servoInterruptService->i2_digitalWrite

Critical Paths under _main in BANK0

    _main->_showInterface
    _showInterface->_runMenu
    _runTime->_printf
    _runStats->_printf
    _runSelect->_printf
    _runMenu->_printf
    _mainMenu->_printf
    _dateTime->_printf
    _printf->___llmod
    _lcdNewline->_lcdInst
    ___llmod->___lldiv
    _lcdClear->_lcdInst
    _initRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   23539
                       _digitalWrite
                            _initLCD
                            _initRTC
                           _lcdClear
                           _pinSetup
                             _printf
                      _showInterface
 ---------------------------------------------------------------------------------
 (1) _showInterface                                        1     1      0   18886
                                             42 BANK0      1     1      0
                           _dateTime
                           _mainMenu
                         _readKeypad
                            _runMenu
                          _runSelect
                           _runStats
                            _runTime
 ---------------------------------------------------------------------------------
 (2) _runTime                                              0     0      0    3070
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runStats                                             0     0      0    3070
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runSelect                                            0     0      0    3070
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runMenu                                              1     1      0    3092
                                             41 BANK0      1     1      0
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _readKeypad                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _mainMenu                                             0     0      0    3070
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _dateTime                                             0     0      0    3070
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              28    22      6    2935
                                             22 BANK0     19    13      6
                            ___lldiv
                            ___llmod
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     292
                                              4 BANK0      1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNewline                                           0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     287
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _lcdClear                                             0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRTC                                              0     0      0     696
                    _I2C_Master_Init
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     696
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     546
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              4 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (6) _lcdInst                                              2     2      0     135
                                              2 BANK0      2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _digitalWrite                                         9     3      6     752
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _service                                             15    15      0   19985
                                            102 COMRAM    15    15      0
              _servoInterruptService
                           _setAngle
        _sortBatteryInterruptService
 ---------------------------------------------------------------------------------
 (9) _sortBatteryInterruptService                          0     0      0    1730
                         i2_lcdClear
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _setAngle                                            10     6      4   16412
                                             92 COMRAM    10     6      4
                       _angleToPulse
                         i2_lcdClear
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           28    22      6    1595
                                             22 COMRAM    19    13      6
                          i2___lldiv
                          i2___llmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     292
                                              4 COMRAM     1     1      0
                       i2_lcdNewline
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNewline                                        0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (11) i2___llmod                                           9     1      8     211
                                             13 COMRAM     9     1      8
                          i2___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___lldiv                                          13     5      8     266
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (10) i2_lcdClear                                          0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (13) i2_lcdInst                                           2     2      0     135
                                              2 COMRAM     2     2      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) _angleToPulse                                       23    19      4   14104
                                             69 COMRAM    23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (11) ___fttol                                            15    11      4     316
                                             54 COMRAM    15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (11) ___ftmul                                            15     9      6    2665
                                             27 COMRAM    15     9      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___ftdiv                                            15     9      6    2747
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___ftadd                                            12     6      6    3409
                                             42 COMRAM    12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___awtoft                                            4     1      3    2264
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___altoft                                           10     6      4    2503
                                              8 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (12) ___ftpack                                            8     3      5    2109
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) _servoInterruptService                               12    12      0    1776
                                              9 COMRAM    12    12      0
                        _digitalRead
                         _startTimer
                     i2_digitalWrite
 ---------------------------------------------------------------------------------
 (10) i2_digitalWrite                                      9     3      6     488
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (10) _startTimer                                          8     2      6     666
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (10) _digitalRead                                         6     2      4     238
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _digitalWrite
   _initLCD
     _lcdInst
       _lcdNibble
   _initRTC
     _I2C_Master_Init
       ___lldiv
   _lcdClear
     _lcdInst
       _lcdNibble
   _pinSetup
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     _putch
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
   _showInterface
     _dateTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _mainMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _readKeypad
     _runMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _runSelect
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _runStats
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _runTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble

 _service (ROOT)
   _servoInterruptService
     _digitalRead
     _startTimer
     i2_digitalWrite
   _setAngle
     _angleToPulse
       ___altoft
         ___ftpack
       ___awtoft
         ___ftpack
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
     i2_lcdClear
       i2_lcdInst
         i2_lcdNibble
     i2_printf
       i2___lldiv
       i2___llmod
         i2___lldiv (ARG)
       i2_putch
         i2_lcdNewline
           i2_lcdInst
             i2_lcdNibble
         i2_lcdNibble
   _sortBatteryInterruptService
     i2_lcdClear
       i2_lcdInst
         i2_lcdNibble
     i2_printf
       i2___lldiv
       i2___llmod
         i2___lldiv (ARG)
       i2_putch
         i2_lcdNewline
           i2_lcdInst
             i2_lcdNibble
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2B      53       5       64.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     75      77       1       94.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      CA      34        0.0%
DATA                 0      0      CA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Mar 12 19:28:57 2017

                        ___altoft@exp 0011                         ___altoft@sign 0012  
                                  l76 17AA                           __CFG_BORV$3 000000  
                        __CFG_CP0$OFF 000000                          __CFG_CP1$OFF 000000  
                        __CFG_CP2$OFF 000000                          __CFG_CP3$OFF 000000  
                         __CFG_OSC$HS 000000                          ___ftadd@exp1 0036  
                        ___ftadd@exp2 0035                          ___ftadd@sign 0034  
                                 l161 1992                                   l195 192A  
                                 l198 1938                                   l573 0116  
                                 l569 00A8                       ??_showInterface 00AA  
                                 l949 1162                                   l959 14B0  
                        __CFG_CPB$OFF 000000                                   _PEN 007E2A  
                        __CFG_CPD$OFF 000000                                   _SEN 007E28  
                                 _pin 00BB                                   wreg 000FE8  
                          i2_lcdClear 1AFE                          __CFG_LVP$OFF 000000  
                        ___ftdiv@cntr 0016                          ___ftdiv@sign 001B  
                        __CFG_WDT$OFF 000000                                  l3411 0BFC  
                                l3403 0BDC                                  l3431 1018  
                                l2711 0034                                  l3415 0C06  
                                l3407 0BEC                                  l3441 1048  
                                l2801 0344                                  l2721 0060  
                                l2713 003C                                  l3417 0C12  
                                l3361 0B28                                  l3443 1050  
                                l3435 102C                                  l2715 0042  
                                l2707 0020                                  l2803 035A  
                                l3363 0B32                                  l3453 1080  
                                l3437 1034                                  l2733 00D0  
                                l2717 0048                                  l2725 006A  
                                l3373 0B5C                                  l3365 0B36  
                                l3447 1064                                  l3455 1088  
                                l2671 10F6                                  l2751 0162  
                                l3359 0B24                                  l3449 106C  
                                l2681 1150                                  l2673 10FC  
                                l2753 0168                                  l3393 0BAE  
                                l3377 0B6A                                  l2691 1454  
                                l2747 0138                                  l3395 0BB6  
                                l2669 10E6                                  l2693 145A  
                                l2765 01AE                                  l2781 01FA  
                                l3389 0BA4                                  l2791 02B4  
                                l2767 01B4                                  l2783 020C  
                                l2697 149E                                  l2689 1444  
                                l2787 0220                                  l2789 0230  
                                l2797 032A                                  l2799 033C  
                                _EEIF 007D0C                                  STR_1 FFEA  
                                STR_2 FFD5                                  STR_3 FFF3  
                                STR_4 FFE1                                  STR_5 FFFB  
                                STR_6 FF16                                  STR_7 FFC4  
                                STR_8 FF04                                  STR_9 FF91  
                                u3004 0FF6                                  u3005 0FEE  
                                _LATA 000F89                                  _LATB 000F8A  
                                _LATC 000F8B                                  _LATD 000F8C  
                                _LATE 000F8D                                  u3307 195C  
                                u3317 1972                                  u3327 1564  
                                u3337 1572                                  u3347 15A2  
                                u3357 15B0                                  u3277 1996  
                                u3287 1800                                  u3297 1836  
                                u2595 1730                                  _PEIE 007F96  
                                _RCEN 007E2B                                  _RSEN 007E29  
                                _main 1760                          ___ftpack@arg 0001  
                                _keys FED9                          ___ftpack@exp 0004  
                                _port 00C3                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  fsr2h 000FDA  
                                fsr0l 000FE9                                  indf2 000FDF  
                                fsr1l 000FE1                                  fsr2l 000FD9  
                                btemp 0078                                  prodh 000FF4  
                                prodl 000FF3                                  start 000E  
                       __CFG_IESO$OFF 000000                       __end_ofi2_putch 1A86  
                       __CFG_MCLRE$ON 000000                          ___ftmul@cntr 0029  
                        ___param_bank 000000                          ___ftmul@sign 002A  
                         i2_lcdNibble 169A                          ___fttol@exp1 0045  
                        ___fttol@lval 0041                      ?_I2C_Master_Init 008D  
                __end_of_angleToPulse 0B24                                 ?_main 0001  
                               _ACKEN 007E2C                                 _ACKDT 007E2D  
                               _EEADR 000FA9                       __end_of___ftadd 09E4  
                               STR_10 FF28                                 STR_11 FF80  
                               STR_12 FEF1                                 STR_13 FFA2  
                               STR_14 FF3A                                 STR_15 FF6F  
                               STR_16 FF4C                                 STR_17 FFB3  
                               STR_18 FF5E                       __end_of___ftdiv 0EF6  
             ??_servoInterruptService 000A                       __end_of___lldiv 1174  
                     __end_of___ftmul 0E10                                 _T0CON 000FD5  
                               _T1CON 000FCD                       __end_of___llmod 14C2  
                     __end_of___fttol 0D1C                                 _T3CON 000FB1  
                               i2l133 0F9C                                 i2l161 1A74  
                               i2l262 1220                                 i2l370 17C6  
                               i2l367 17AE                                 i2l369 17BA  
                               i2l573 0456                                 i2l494 07EE  
                               i2l496 07F2                                 i2l824 12B4  
                               i2l497 07F6                                 i2l569 03F6  
                               i2l498 07FA                                 i2l499 0836  
                               i2l851 08A6                                 i2l862 0956  
                               i2l871 0972                                 i2l847 087C  
                               i2l882 0EC4                                 i2l949 1532  
                               i2l959 1688                                 _TMR0H 000FD7  
                               _TMR1H 000FCF                                 _TMR0L 000FD6  
                               _TMR3H 000FB3                                 _TMR1L 000FCE  
                               _TMR3L 000FB2                                 _PORTA 000F80  
                               _PORTB 000F81                                 _PORTC 000F82  
                               _PORTD 000F83                                 _TRISA 000F92  
                               _TRISB 000F93                                 _TRISC 000F94  
                               _TRISD 000F95                                 _TRISE 000F96  
                       __CFG_PWRT$OFF 000000                         __CFG_WRT0$OFF 000000  
                       __CFG_WRT1$OFF 000000                         __CFG_WRT2$OFF 000000  
                       __CFG_WRT3$OFF 000000                       __end_of_lcdInst 197E  
                      __CFG_EBTR0$OFF 000000                        __CFG_FCMEN$OFF 000000  
              servoInterruptService@i 0014                        __CFG_EBTR1$OFF 000000  
                      __CFG_EBTR2$OFF 000000                        __CFG_EBTR3$OFF 000000  
               __size_ofi2_lcdNewline 0008                         __CFG_WRTB$OFF 000000  
                       __CFG_WRTC$OFF 000000                         __CFG_WRTD$OFF 000000  
                     __end_of_initLCD 1842                        __CFG_EBTRB$OFF 000000  
                       ___awtoft@sign 000C                       __end_of_initRTC 1ADE  
                     __end_of_dpowers FEB9                                 _count 0076  
                       ___ftpack@sign 0005                                 _pulse 00AB  
                               _putch 197E                                 pclath 000FFA  
                               tablat 000FF5                       __end_of_service 0FD8  
                     __end_of_runMenu 192A                       __end_of_runTime 19CC  
                               status 000FD8                        __CFG_PBADEN$ON 000000  
                  __size_ofi2___lldiv 0082                    __size_ofi2___llmod 0066  
                    __end_ofi2_printf 0664                  __end_of_digitalWrite 10B8  
                     __initialization 1882                     i2___lldiv@divisor 0005  
                  __size_ofi2_lcdInst 0022                          __end_of_main 17AC  
                   i2___lldiv@counter 000D                          __end_of_keys FEEA  
                          i2printf@ap 0022                          i2_lcdNewline 1AF6  
                              ??_main 00AB                         ___fttol@sign1 0040  
                       __activetblptr 000002                  __size_of_digitalRead 00B2  
                         ?i2_lcdClear 0001                                _ADCON0 000FC2  
                              _ADCON1 000FC1                                _ADCON2 000FC0  
                    __end_of___altoft 1634                      ___llmod@dividend 008D  
                              _ADRESH 000FC4                                _EEADRH 000FAA  
                              _ADRESL 000FC3                                _EEDATA 000FA8  
                              _EECON1 000FA6                                _EECON2 000FA7  
                     i2lcdNibble@data 0002                      __end_of___awtoft 18F8  
                              ?_putch 0001                      __end_of___ftpack 12D4  
                     i2lcdNibble@temp 0001                                _INT0IE 007F94  
                              _INT0IF 007F91                                _INT1IE 007F83  
                              _INT1IF 007F80                                i2l3003 0C54  
                              i2l3021 0CBA                                i2l3031 0CE2  
                              i2l3201 1318                                i2l3033 0CEE  
                              i2l3025 0CCA                                i2l3211 133A  
                              i2l3035 0CF4                                i2l3213 1340  
                              i2l3205 1326                                i2l3061 14F4  
                              i2l3301 0514                                i2l3143 11B6  
                              i2l3135 1176                                i2l3207 132C  
                              i2l3039 0D0A                                i2l3311 05BA  
                              i2l3303 0524                                i2l3231 0392  
                              i2l3153 11F6                                i2l3217 134E  
                              i2l3057 14E4                                i2l3081 1656  
                              i2l3321 063A                                i2l3241 03B4  
                              i2l3233 0398                                i2l3147 11D6  
                              i2l3139 1196                                i2l3219 1354  
                              i2l3059 14F0                                i2l3307 0536  
                              i2l3235 039C                                i2l3227 0382  
                              i2l3323 064A                                u205_41 0848  
                              i2l3069 1524                                i2l3085 167A  
                              i2l3077 1646                                i2l3309 0542  
                              i2l3317 0624                                i2l3253 041A  
                              i2l3237 03A0                                i2l3245 03BC  
                              i2l3167 17D2                                i2l2631 1236  
                              i2l3079 1652                                i2l3319 0634  
                              i2l3271 049C                                i2l3273 04A0  
                              i2l3195 1304                                i2l2643 1282  
                              i2l2635 1244                                i2l3267 0476  
                              i2l2645 12A0                                i2l2637 124E  
                              i2l2813 15DE                                u206_41 085C  
                              i2l3285 04D8                                i2l3199 1312  
                              i2l2647 12AA                                i2l2639 126C  
                              i2l2815 15EA                                i2l2903 0E60  
                              i2l3287 04DC                                i2l3481 0828  
                              i2l3545 0F3E                                i2l3475 0770  
                              i2l3467 06B8                                i2l2851 08E4  
                              i2l2835 08B4                                i2l2923 0E9E  
                              i2l3555 0F66                                i2l2861 091A  
                              i2l2829 088A                                u231_41 0D2C  
                              i2l3479 07FE                                i2l2871 094E  
                              i2l2863 0922                                i2l2943 0D44  
                              i2l3559 0F80                                i2l2857 0906  
                              i2l2859 0910                                i2l2963 0D9E  
                              i2l2877 098E                                i2l2869 0944  
                              i2l2973 0DC6                                i2l2949 0D6C  
                              i2l2887 09BE                                i2l2967 0DAE  
                              i2l2993 18D4                                i2l2897 0E38  
                              i2l2977 0DD6                                u233_41 0D54  
                              u226_41 0E20                                u228_41 0E48  
                              u238_41 0C38                                _TMR0IE 007F95  
                              _TMR0IF 007F92                             ??i2_putch 0005  
                              _TMR1IE 007CE8                                _TMR1IF 007CF0  
                              _TMR2IF 007CF1                                _TMR3IE 007D01  
                              _TMR3IF 007D09                                _SSPADD 000FC8  
                              _TRISC3 007CA3                                _TRISC4 007CA4  
                              _SSPBUF 000FC9                      __end_of_dateTime 1A64  
                   _angleToPulse$1200 0056                      __end_of_lcdClear 1AF6  
                      __CFG_XINST$OFF 000000                      __end_of_mainMenu 1A3E  
                           ??___ftadd 0031                        __CFG_STVREN$ON 000000  
                           ??___ftdiv 0013                             ??___lldiv 0088  
                           ??___ftmul 0022                             ??___llmod 0095  
                           ??___fttol 003B                                clear_0 18A8  
                           ??_lcdInst 0082                                _printf 0012  
                    __end_of_pinSetup 1882                      __end_of_setAngle 1428  
               ___ftmul@f3_as_product 0026                             ??_initLCD 0084  
                           ??_initRTC 0095                     __end_ofi2___lldiv 1544  
                       setAngle@angle 005F                     __end_ofi2___llmod 169A  
                        __mediumconst FE90                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
                       setAngle@timer 005D                             ??_service 0067  
                           ??_runMenu 00A9                      __end_of_runStats 19F2  
                           ??_runTime 00A9                     __end_ofi2_lcdInst 1AA8  
                          __accesstop 0080               __end_of__initialization 18B2  
                          ___altoft@c 0009                            ___ftadd@f1 002B  
                          ___ftadd@f2 002E                         ___rparam_used 000001  
                          ___ftdiv@f1 000D                            ___ftdiv@f2 0010  
                          ___ftdiv@f3 0017                            ___awtoft@c 0009  
                   i2___llmod@divisor 0012                     i2___llmod@counter 0016  
                          ___ftmul@f1 001C                            ___ftmul@f2 001F  
                          ___fttol@f1 0037                  __end_of_happynewyear FEF1  
                      __pcstackCOMRAM 0001                    i2___lldiv@dividend 0001  
               __size_of_angleToPulse 0140                   __size_ofi2_lcdClear 0008  
                        __pidataBANK0 1ADE                         __end_of_putch 19A6  
                         i2printf@idx 001F                           i2printf@val 0024  
                  __size_of_lcdNibble 0078                           i2putch@data 0005  
                           ?i2_printf 0017                    i2digitalWrite@port 0001  
                             ??_putch 0084                    i2___lldiv@quotient 0009  
                          __pbssBANK0 00AB                          _angleToPulse 09E4  
               __size_of_digitalWrite 00E0                          ?i2_lcdNibble 0001  
                           ?___altoft 0009                            _lcdNewline 1AE6  
                           ?___awtoft 0009                             ?___ftpack 0001  
                             ?_printf 0096            servoInterruptService@flags 000C  
      __size_of_servoInterruptService 01D4         __end_of_servoInterruptService 0838  
               __end_of_showInterface 0C28                             ?_dateTime 0001  
                           ?_lcdClear 0001                    __size_of_runSelect 0026  
                    angleToPulse@a000 0059                            ??i2_printf 001D  
                    angleToPulse@a180 0052                          _digitalWrite 0FD8  
                             _SSPCON1 000FC6                               _SSPCON2 000FC5  
                             _SSPSTAT 000FC7                             ?_mainMenu 0001  
             __size_ofi2_digitalWrite 00AC                               i2_putch 1A64  
                           ?_pinSetup 0001                             ?_setAngle 005D  
                   __end_of_lcdNibble 15BC                               __Hparam 0000  
                             __Lparam 0000                               ___ftadd 0838  
                          _readKeypad 192A                               ___ftdiv 0E10  
                             ___lldiv 10B8                               ___ftmul 0D1C  
                             ___llmod 1428                               ___fttol 0C28  
                           ?_runStats 0001                            ??___altoft 000D  
                             __pcinit 1882                            ??___awtoft 000C  
                          ??___ftpack 0006                               __ramtop 1000  
                             _lcdInst 1954                               __ptext0 1760  
                             __ptext1 0B24                               __ptext2 19A6  
                             __ptext3 19CC                               __ptext4 19F2  
                             __ptext5 18F8                               __ptext6 192A  
                             __ptext7 1A18                               __ptext8 1A3E  
                             __ptext9 0012                       __size_of_printf 0366  
                       startTimer@val 0003                               _initLCD 17F8  
                   __end_of_hexpowers FED9                               _initRTC 1AC6  
                             _dpowers FE91                            ??_dateTime 00A9  
                        ??i2_lcdClear 0005              __size_of_I2C_Master_Init 0060  
                          ??_lcdClear 0084                               _service 0008  
                             _runMenu 18F8                               _runTime 19A6  
                      __pintcode_body 0EF6                  end_of_initialization 18B2  
                          ??_mainMenu 00A9                         __Lmediumconst FE90  
                             int_func 0EF6                        digitalRead@pin 0003  
                          ??_pinSetup 0080                            ??_setAngle 0061  
                     ___lldiv@divisor 0084                       ___lldiv@counter 008C  
                   __end_of_runSelect 1A18                               printf@c 00A8  
                             printf@f 0096                      I2C_Master_Init@c 008D  
                             postdec1 000FE5                               postdec2 000FDD  
                             postinc0 000FEE                               postinc2 000FDE  
                  __end_ofi2_lcdClear 1B06                            ??_runStats 00A9  
                       ??_digitalRead 0005                           ?_lcdNewline 0001  
                           _PORTBbits 000F81                      showInterface@key 00AA  
                        _happynewyear FEEA                    angleToPulse@offset 004E  
                           i2___lldiv 14C2                             i2___llmod 1634  
                          _startTimer 17AC          ?_sortBatteryInterruptService 0001  
                           i2_lcdInst 1A86                           ___ftdiv@exp 001A  
                  i2___llmod@dividend 000E                           ___ftmul@exp 0025  
                         ?_readKeypad 0001                  __size_ofi2_lcdNibble 0066  
                       i2lcdInst@data 0004                        __end_of_printf 0378  
                        i2printf@flag 0028                          i2printf@prec 0020  
                 start_initialization 1882                   __end_of_digitalRead 1226  
                           i2printf@c 0029                             i2printf@f 0017  
                          ?i2___lldiv 0001                            ?i2___llmod 000E  
                   __size_ofi2_printf 02EC                        i2_digitalWrite 12D4  
                   ??_I2C_Master_Init 0091                            ?i2_lcdInst 0001  
                 __size_of_lcdNewline 0008         ??_sortBatteryInterruptService 002A  
                     ___llmod@divisor 0091                       ___llmod@counter 0095  
                         __pdataBANK0 00CB                      __CFG_LPT1OSC$OFF 000000  
                            ??_printf 009C                     __size_of___altoft 0078  
                   __size_of___awtoft 0038                     __size_of___ftpack 00AE  
                         __pbssCOMRAM 0076                         __pcstackBANK0 0080  
              __end_ofi2_digitalWrite 1380                     __size_of_dateTime 0026  
                         ?_startTimer 0001                     __size_of_lcdClear 0008  
                 __size_of_readKeypad 002A                              ?i2_putch 0001  
                   __size_of_mainMenu 0026                     i2digitalWrite@pin 0003  
                   i2digitalWrite@val 0005                     __CFG_CCP2MX$PORTC 000000  
                   __size_of_pinSetup 0040                     __size_of_setAngle 00A8  
                           __pintcode 0008                         __pmediumconst FE90  
                           _lcdNibble 1544                              ?___ftadd 002B  
                            ?___ftdiv 000D                              ?___lldiv 0080  
                            ?___ftmul 001C                              ?___llmod 008D  
                            ?___fttol 0037  __size_of_sortBatteryInterruptService 001E  
                       ?i2_lcdNewline 0001                           _digitalRead 1174  
                            ?_lcdInst 0001                     __size_of_runStats 0026  
                            ?_initLCD 0001                              ?_initRTC 0001  
                     startTimer@timer 0001                              ?_service 0001  
                           _hexpowers FEB9                              ?_runMenu 0001  
                            ?_runTime 0001                       ?i2_digitalWrite 0001  
               _servoInterruptService 0664                           ??i2___lldiv 0009  
                         ??i2___llmod 0016                        __size_of_putch 0028  
                         ??i2_lcdInst 0003                              _LATDbits 000F8C  
                            i2u310_40 0688                              i2u311_40 068A  
                            i2u312_40 0696                              i2u240_40 0C72  
                            i2u240_45 0C6A                              i2u313_40 0698  
                            i2u314_40 06B6                              i2u306_40 066C  
                            i2u307_40 066E                              i2u308_40 067A  
                            i2u260_44 12EA                              i2u260_45 12E4  
                            i2u340_47 16C0                              i2u309_40 067C  
                            i2u341_47 16E6                              i2u342_47 16F4  
                            i2u255_44 1186                              i2u255_45 1182  
                            i2u256_44 11A6                              i2u256_45 11A2  
                            i2u336_47 1A78                              i2u257_44 11C6  
                            i2u257_45 11C2                              i2u337_47 1A8C  
                            i2u258_44 11E6                              i2u258_45 11E2  
                            i2u338_47 1A9E                              i2u339_47 16B2  
              __size_of_showInterface 0104                      __CFG_WDTPS$32768 000000  
                          ?_lcdNibble 0001                        ??i2_lcdNewline 0005  
                          service@key 0075                          ??_lcdNewline 0084  
                 __size_of_startTimer 004C                             _runSelect 19F2  
                   angleToPulse@angle 0046                         lcdNibble@data 0081  
                          printf@flag 00A7                         lcdNibble@temp 0080  
                          printf@prec 009F                            runMenu@key 00A9  
                            i2_printf 0378                             copy_data0 1896  
                    __size_ofi2_putch 0022                    __end_of_lcdNewline 1AEE  
                       readKeypad@key 0080                              __Hrparam 0000  
                            __Lrparam 0000                    __CFG_BOREN$SBORDIS 000000  
                        ??_readKeypad 0080                      __size_of___ftadd 01AC  
                    __size_of___ftdiv 00E6                      __size_of___lldiv 00BC  
                            ___altoft 15BC                      __size_of___ftmul 00F4  
                    __size_of___llmod 009A                      __size_of___fttol 00F4  
                          ?_runSelect 0001                              ___awtoft 18C0  
                            ___ftpack 1226                      __size_of_lcdInst 002A  
                            _binAngle 00CB                       _I2C_Master_Init 1700  
                    __size_of_initLCD 004A                      __size_of_initRTC 0018  
                            _dateTime 1A3E                ?_servoInterruptService 0001  
                       _showInterface 0B24                              _lcdClear 1AEE  
                            __ptext10 197E                              __ptext11 1AE6  
                            __ptext20 1544                              __ptext12 1428  
                            __ptext21 0FD8                              __ptext13 1AEE  
                            __ptext30 1AFE                              __ptext14 1842  
                            __ptext31 1A86                              __ptext23 1AA8  
                            __ptext15 1AC6                              __ptext40 1226  
                            __ptext32 169A                              __ptext24 1380  
                            __ptext16 1700                              __ptext41 0664  
                            __ptext33 09E4                              __ptext25 0378  
                            __ptext17 10B8                              __ptext42 12D4  
                            __ptext34 0C28                              __ptext26 1A64  
                            __ptext18 17F8                              __ptext43 17AC  
                            __ptext35 0D1C                              __ptext27 1AF6  
                            __ptext19 1954                              __ptext44 1174  
                            __ptext36 0E10                              __ptext28 1634  
                            __ptext37 0838                              __ptext29 14C2  
                            __ptext38 18C0                              __ptext39 15BC  
                    __size_of_service 0FD0                      __size_of_runMenu 0032  
                    __size_of_runTime 0026                              _mainMenu 1A18  
                  __end_of_readKeypad 1954                         ?_angleToPulse 0046  
                       __size_of_main 004C                              _pinSetup 1842  
                            _setAngle 1380                         ??i2_lcdNibble 0001  
                         ??_lcdNibble 0080                              int$flags 0078  
                            _runStats 19CC                             printf@idx 009E  
                           printf@val 00A3                             putch@data 0084  
                          _INTCONbits 000FF2                        ?_showInterface 0001  
                       ?_digitalWrite 0080                          ??_startTimer 0007  
                     digitalRead@port 0001                              intlevel2 0000  
                      ??_angleToPulse 004A                  __end_ofi2_lcdNewline 1AFE  
                    ___lldiv@dividend 0080                              printf@ap 00A1  
             __end_of_I2C_Master_Init 1760                           lcdInst@data 0083  
                        ?_digitalRead 0001                           ??_runSelect 00A9  
                  __end_of_startTimer 17F8                   __end_ofi2_lcdNibble 1700  
                    ??i2_digitalWrite 0007                      digitalWrite@port 0080  
                    ___lldiv@quotient 0088                        ??_digitalWrite 0086  
 __end_of_sortBatteryInterruptService 1AC6           _sortBatteryInterruptService 1AA8  
                     digitalWrite@pin 0082                       digitalWrite@val 0084  
