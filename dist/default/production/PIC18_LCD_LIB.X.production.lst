

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Mar 11 15:19:20 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    42                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    43  0000                     
    44                           ; Version 1.40
    45                           ; Generated 01/12/2016 GMT
    46                           ; 
    47                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18F4620 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     
    79                           	psect	idataCOMRAM
    80  000C2E                     __pidataCOMRAM:
    81                           	opt stack 0
    82                           
    83                           ;initializer for _angle
    84  000C2E  F159               	dw	61785
    85  000C30  0000               	dw	0
    86                           
    87                           	psect	mediumconst
    88  00FEE8                     __pmediumconst:
    89                           	opt stack 0
    90  00FEE8  00                 	db	0
    91  00FEE9                     _keys:
    92                           	opt stack 0
    93  00FEE9  31                 	db	49
    94  00FEEA  32                 	db	50
    95  00FEEB  33                 	db	51
    96  00FEEC  41                 	db	65
    97  00FEED  34                 	db	52
    98  00FEEE  35                 	db	53
    99  00FEEF  36                 	db	54
   100  00FEF0  42                 	db	66
   101  00FEF1  37                 	db	55
   102  00FEF2  38                 	db	56
   103  00FEF3  39                 	db	57
   104  00FEF4  43                 	db	67
   105  00FEF5  2A                 	db	42
   106  00FEF6  30                 	db	48
   107  00FEF7  23                 	db	35
   108  00FEF8  44                 	db	68
   109  00FEF9  00                 	db	0
   110  00FEFA                     __end_of_keys:
   111                           	opt stack 0
   112  00FEFA                     _hexpowers:
   113                           	opt stack 0
   114  00FEFA  0001               	dw	1
   115  00FEFC  0010               	dw	16
   116  00FEFE  0100               	dw	256
   117  00FF00  1000               	dw	4096
   118  00FF02                     __end_of_hexpowers:
   119                           	opt stack 0
   120  00FF02                     _happynewyear:
   121                           	opt stack 0
   122  00FF02  45                 	db	69
   123  00FF03  59                 	db	89
   124  00FF04  23                 	db	35
   125  00FF05  07                 	db	7
   126  00FF06  31                 	db	49
   127  00FF07  12                 	db	18
   128  00FF08  16                 	db	22
   129  00FF09                     __end_of_happynewyear:
   130                           	opt stack 0
   131  0000                     _ADCON0	set	4034
   132  0000                     _ADCON1	set	4033
   133  0000                     _ADCON2	set	4032
   134  0000                     _ADRESH	set	4036
   135  0000                     _ADRESL	set	4035
   136  0000                     _EEADR	set	4009
   137  0000                     _EEADRH	set	4010
   138  0000                     _EECON1	set	4006
   139  0000                     _EECON2	set	4007
   140  0000                     _EEDATA	set	4008
   141  0000                     _INTCONbits	set	4082
   142  0000                     _LATA	set	3977
   143  0000                     _LATB	set	3978
   144  0000                     _LATC	set	3979
   145  0000                     _LATD	set	3980
   146  0000                     _LATDbits	set	3980
   147  0000                     _LATE	set	3981
   148  0000                     _PORTA	set	3968
   149  0000                     _PORTB	set	3969
   150  0000                     _PORTBbits	set	3969
   151  0000                     _PORTC	set	3970
   152  0000                     _PORTD	set	3971
   153  0000                     _SSPADD	set	4040
   154  0000                     _SSPBUF	set	4041
   155  0000                     _SSPCON1	set	4038
   156  0000                     _SSPCON2	set	4037
   157  0000                     _SSPSTAT	set	4039
   158  0000                     _T0CON	set	4053
   159  0000                     _T1CON	set	4045
   160  0000                     _T3CON	set	4017
   161  0000                     _TMR0H	set	4055
   162  0000                     _TMR0L	set	4054
   163  0000                     _TMR1H	set	4047
   164  0000                     _TMR1L	set	4046
   165  0000                     _TMR3H	set	4019
   166  0000                     _TMR3L	set	4018
   167  0000                     _TRISA	set	3986
   168  0000                     _TRISB	set	3987
   169  0000                     _TRISC	set	3988
   170  0000                     _TRISD	set	3989
   171  0000                     _TRISE	set	3990
   172  0000                     _ACKDT	set	32301
   173  0000                     _ACKEN	set	32300
   174  0000                     _EEIF	set	32012
   175  0000                     _INT1IF	set	32640
   176  0000                     _PEIE	set	32662
   177  0000                     _PEN	set	32298
   178  0000                     _RCEN	set	32299
   179  0000                     _RSEN	set	32297
   180  0000                     _SEN	set	32296
   181  0000                     _TMR0IE	set	32661
   182  0000                     _TMR0IF	set	32658
   183  0000                     _TMR1IE	set	31976
   184  0000                     _TMR1IF	set	31984
   185  0000                     _TMR2IF	set	31985
   186  0000                     _TMR3IE	set	32001
   187  0000                     _TMR3IF	set	32009
   188  0000                     _TRISC3	set	31907
   189  0000                     _TRISC4	set	31908
   190  00FF09                     STR_9:
   191  00FF09  25                 	db	37
   192  00FF0A  63                 	db	99	;'c'
   193  00FF0B  29                 	db	41
   194  00FF0C  20                 	db	32
   195  00FF0D  74                 	db	116	;'t'
   196  00FF0E  69                 	db	105	;'i'
   197  00FF0F  6D                 	db	109	;'m'
   198  00FF10  65                 	db	101	;'e'
   199  00FF11  20                 	db	32
   200  00FF12  20                 	db	32
   201  00FF13  3C                 	db	60	;'<'
   202  00FF14  41                 	db	65	;'A'
   203  00FF15  20                 	db	32
   204  00FF16  20                 	db	32
   205  00FF17  20                 	db	32
   206  00FF18  20                 	db	32
   207  00FF19  20                 	db	32
   208  00FF1A  0A                 	db	10
   209  00FF1B  00                 	db	0
   210  00FF1C                     STR_5:
   211  00FF1C  73                 	db	115	;'s'
   212  00FF1D  74                 	db	116	;'t'
   213  00FF1E  61                 	db	97	;'a'
   214  00FF1F  72                 	db	114	;'r'
   215  00FF20  74                 	db	116	;'t'
   216  00FF21  20                 	db	32
   217  00FF22  20                 	db	32
   218  00FF23  20                 	db	32
   219  00FF24  3C                 	db	60	;'<'
   220  00FF25  42                 	db	66	;'B'
   221  00FF26  20                 	db	32
   222  00FF27  20                 	db	32
   223  00FF28  20                 	db	32
   224  00FF29  20                 	db	32
   225  00FF2A  20                 	db	32
   226  00FF2B  20                 	db	32
   227  00FF2C  0A                 	db	10
   228  00FF2D  00                 	db	0
   229  00FF2E                     STR_3:
   230  00FF2E  20                 	db	32
   231  00FF2F  20                 	db	32
   232  00FF30  68                 	db	104	;'h'
   233  00FF31  68                 	db	104	;'h'
   234  00FF32  3A                 	db	58	;':'
   235  00FF33  6D                 	db	109	;'m'
   236  00FF34  6D                 	db	109	;'m'
   237  00FF35  3A                 	db	58	;':'
   238  00FF36  73                 	db	115	;'s'
   239  00FF37  73                 	db	115	;'s'
   240  00FF38  20                 	db	32
   241  00FF39  20                 	db	32
   242  00FF3A  20                 	db	32
   243  00FF3B  20                 	db	32
   244  00FF3C  20                 	db	32
   245  00FF3D  20                 	db	32
   246  00FF3E  0A                 	db	10
   247  00FF3F  00                 	db	0
   248  00FF40                     STR_7:
   249  00FF40  73                 	db	115	;'s'
   250  00FF41  65                 	db	101	;'e'
   251  00FF42  6C                 	db	108	;'l'
   252  00FF43  65                 	db	101	;'e'
   253  00FF44  63                 	db	99	;'c'
   254  00FF45  74                 	db	116	;'t'
   255  00FF46  20                 	db	32
   256  00FF47  72                 	db	114	;'r'
   257  00FF48  75                 	db	117	;'u'
   258  00FF49  6E                 	db	110	;'n'
   259  00FF4A  3A                 	db	58	;':'
   260  00FF4B  20                 	db	32
   261  00FF4C  20                 	db	32
   262  00FF4D  20                 	db	32
   263  00FF4E  20                 	db	32
   264  00FF4F  20                 	db	32
   265  00FF50  0A                 	db	10
   266  00FF51  00                 	db	0
   267  00FF52                     STR_11:
   268  00FF52  74                 	db	116	;'t'
   269  00FF53  69                 	db	105	;'i'
   270  00FF54  6D                 	db	109	;'m'
   271  00FF55  65                 	db	101	;'e'
   272  00FF56  3A                 	db	58	;':'
   273  00FF57  20                 	db	32
   274  00FF58  6E                 	db	110	;'n'
   275  00FF59  6E                 	db	110	;'n'
   276  00FF5A  6E                 	db	110	;'n'
   277  00FF5B  20                 	db	32
   278  00FF5C  73                 	db	115	;'s'
   279  00FF5D  65                 	db	101	;'e'
   280  00FF5E  63                 	db	99	;'c'
   281  00FF5F  20                 	db	32
   282  00FF60  20                 	db	32
   283  00FF61  20                 	db	32
   284  00FF62  0A                 	db	10
   285  00FF63  00                 	db	0
   286  00FF64                     STR_13:
   287  00FF64  5B                 	db	91	;'['
   288  00FF65  41                 	db	65	;'A'
   289  00FF66  41                 	db	65	;'A'
   290  00FF67  2C                 	db	44
   291  00FF68  39                 	db	57	;'9'
   292  00FF69  56                 	db	86	;'V'
   293  00FF6A  2C                 	db	44
   294  00FF6B  43                 	db	67	;'C'
   295  00FF6C  2C                 	db	44
   296  00FF6D  6F                 	db	111	;'o'
   297  00FF6E  74                 	db	116	;'t'
   298  00FF6F  68                 	db	104	;'h'
   299  00FF70  65                 	db	101	;'e'
   300  00FF71  72                 	db	114	;'r'
   301  00FF72  5D                 	db	93	;']'
   302  00FF73  20                 	db	32
   303  00FF74  0A                 	db	10
   304  00FF75  00                 	db	0
   305  00FF76                     STR_15:
   306  00FF76  30                 	db	48	;'0'
   307  00FF77  31                 	db	49	;'1'
   308  00FF78  32                 	db	50	;'2'
   309  00FF79  33                 	db	51	;'3'
   310  00FF7A  34                 	db	52	;'4'
   311  00FF7B  35                 	db	53	;'5'
   312  00FF7C  36                 	db	54	;'6'
   313  00FF7D  37                 	db	55	;'7'
   314  00FF7E  38                 	db	56	;'8'
   315  00FF7F  39                 	db	57	;'9'
   316  00FF80  61                 	db	97	;'a'
   317  00FF81  62                 	db	98	;'b'
   318  00FF82  63                 	db	99	;'c'
   319  00FF83  64                 	db	100	;'d'
   320  00FF84  65                 	db	101	;'e'
   321  00FF85  66                 	db	102	;'f'
   322  00FF86  00                 	db	0
   323  00FF87                     STR_12:
   324  00FF87  20                 	db	32
   325  00FF88  20                 	db	32
   326  00FF89  20                 	db	32
   327  00FF8A  20                 	db	32
   328  00FF8B  20                 	db	32
   329  00FF8C  20                 	db	32
   330  00FF8D  20                 	db	32
   331  00FF8E  20                 	db	32
   332  00FF8F  20                 	db	32
   333  00FF90  20                 	db	32
   334  00FF91  20                 	db	32
   335  00FF92  20                 	db	32
   336  00FF93  20                 	db	32
   337  00FF94  20                 	db	32
   338  00FF95  2A                 	db	42
   339  00FF96  3E                 	db	62	;'>'
   340  00FF97  00                 	db	0
   341  00FF98                     STR_8:
   342  00FF98  5B                 	db	91	;'['
   343  00FF99  31                 	db	49	;'1'
   344  00FF9A  2C                 	db	44
   345  00FF9B  32                 	db	50	;'2'
   346  00FF9C  2C                 	db	44
   347  00FF9D  33                 	db	51	;'3'
   348  00FF9E  2C                 	db	44
   349  00FF9F  34                 	db	52	;'4'
   350  00FFA0  5D                 	db	93	;']'
   351  00FFA1  20                 	db	32
   352  00FFA2  20                 	db	32
   353  00FFA3  20                 	db	32
   354  00FFA4  20                 	db	32
   355  00FFA5  20                 	db	32
   356  00FFA6  2A                 	db	42
   357  00FFA7  3E                 	db	62	;'>'
   358  00FFA8  00                 	db	0
   359  00FFA9                     STR_6:
   360  00FFA9  68                 	db	104	;'h'
   361  00FFAA  69                 	db	105	;'i'
   362  00FFAB  73                 	db	115	;'s'
   363  00FFAC  74                 	db	116	;'t'
   364  00FFAD  6F                 	db	111	;'o'
   365  00FFAE  72                 	db	114	;'r'
   366  00FFAF  79                 	db	121	;'y'
   367  00FFB0  20                 	db	32
   368  00FFB1  3C                 	db	60	;'<'
   369  00FFB2  43                 	db	67	;'C'
   370  00FFB3  20                 	db	32
   371  00FFB4  20                 	db	32
   372  00FFB5  20                 	db	32
   373  00FFB6  20                 	db	32
   374  00FFB7  2A                 	db	42
   375  00FFB8  3E                 	db	62	;'>'
   376  00FFB9  00                 	db	0
   377  00FFBA                     STR_10:
   378  00FFBA  20                 	db	32
   379  00FFBB  20                 	db	32
   380  00FFBC  20                 	db	32
   381  00FFBD  73                 	db	115	;'s'
   382  00FFBE  74                 	db	116	;'t'
   383  00FFBF  61                 	db	97	;'a'
   384  00FFC0  74                 	db	116	;'t'
   385  00FFC1  73                 	db	115	;'s'
   386  00FFC2  20                 	db	32
   387  00FFC3  3C                 	db	60	;'<'
   388  00FFC4  42                 	db	66	;'B'
   389  00FFC5  20                 	db	32
   390  00FFC6  20                 	db	32
   391  00FFC7  20                 	db	32
   392  00FFC8  2A                 	db	42
   393  00FFC9  3E                 	db	62	;'>'
   394  00FFCA  00                 	db	0
   395  00FFCB                     STR_14:
   396  00FFCB  5B                 	db	91	;'['
   397  00FFCC  6E                 	db	110	;'n'
   398  00FFCD  6E                 	db	110	;'n'
   399  00FFCE  2C                 	db	44
   400  00FFCF  6E                 	db	110	;'n'
   401  00FFD0  2C                 	db	44
   402  00FFD1  6E                 	db	110	;'n'
   403  00FFD2  2C                 	db	44
   404  00FFD3  6E                 	db	110	;'n'
   405  00FFD4  6E                 	db	110	;'n'
   406  00FFD5  5D                 	db	93	;']'
   407  00FFD6  20                 	db	32
   408  00FFD7  20                 	db	32
   409  00FFD8  20                 	db	32
   410  00FFD9  2A                 	db	42
   411  00FFDA  3E                 	db	62	;'>'
   412  00FFDB  00                 	db	0
   413  00FFDC                     STR_4:
   414  00FFDC  20                 	db	32
   415  00FFDD  20                 	db	32
   416  00FFDE  6D                 	db	109	;'m'
   417  00FFDF  6D                 	db	109	;'m'
   418  00FFE0  3A                 	db	58	;':'
   419  00FFE1  64                 	db	100	;'d'
   420  00FFE2  64                 	db	100	;'d'
   421  00FFE3  3A                 	db	58	;':'
   422  00FFE4  79                 	db	121	;'y'
   423  00FFE5  79                 	db	121	;'y'
   424  00FFE6  20                 	db	32
   425  00FFE7  20                 	db	32
   426  00FFE8  20                 	db	32
   427  00FFE9  20                 	db	32
   428  00FFEA  41                 	db	65	;'A'
   429  00FFEB  3E                 	db	62	;'>'
   430  00FFEC  00                 	db	0
   431  00FFED  5B                 	db	91	;'['
   432  00FFEE  25                 	db	37
   433  00FFEF  78                 	db	120	;'x'
   434  00FFF0  20                 	db	32
   435  00FFF1  25                 	db	37
   436  00FFF2  78                 	db	120	;'x'
   437  00FFF3  5D                 	db	93	;']'
   438  00FFF4  0A                 	db	10
   439  00FFF5  00                 	db	0
   440  00FFF6  74                 	db	116	;'t'
   441  00FFF7  31                 	db	49	;'1'
   442  00FFF8  3A                 	db	58	;':'
   443  00FFF9  20                 	db	32
   444  00FFFA  25                 	db	37
   445  00FFFB  78                 	db	120	;'x'
   446  00FFFC  20                 	db	32
   447  00FFFD  00                 	db	0
   448                           
   449                           ; #config settings
   450  00FFFE  00                 	db	0	; dummy byte at the end
   451  0000                     
   452                           	psect	cinit
   453  000A52                     __pcinit:
   454                           	opt stack 0
   455  000A52                     start_initialization:
   456                           	opt stack 0
   457  000A52                     __initialization:
   458                           	opt stack 0
   459                           
   460                           ; Initialize objects allocated to COMRAM (4 bytes)
   461                           ; load TBLPTR registers with __pidataCOMRAM
   462  000A52  0E2E               	movlw	low __pidataCOMRAM
   463  000A54  6EF6               	movwf	tblptrl,c
   464  000A56  0E0C               	movlw	high __pidataCOMRAM
   465  000A58  6EF7               	movwf	tblptrh,c
   466  000A5A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   467  000A5C  6EF8               	movwf	tblptru,c
   468  000A5E  EE00  F057         	lfsr	0,__pdataCOMRAM
   469  000A62  EE10 F004          	lfsr	1,4
   470  000A66                     copy_data0:
   471  000A66  0009               	tblrd		*+
   472  000A68  CFF5 FFEE          	movff	tablat,postinc0
   473  000A6C  50E5               	movf	postdec1,w,c
   474  000A6E  50E1               	movf	fsr1l,w,c
   475  000A70  E1FA               	bnz	copy_data0
   476                           
   477                           ; Clear objects allocated to COMRAM (32 bytes)
   478  000A72  EE00  F037         	lfsr	0,__pbssCOMRAM
   479  000A76  0E20               	movlw	32
   480  000A78                     clear_0:
   481  000A78  6AEE               	clrf	postinc0,c
   482  000A7A  06E8               	decf	wreg,f,c
   483  000A7C  E1FD               	bnz	clear_0
   484  000A7E                     end_of_initialization:
   485                           	opt stack 0
   486  000A7E                     __end_of__initialization:
   487                           	opt stack 0
   488  000A7E  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   489  000A80  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   490  000A82  0E00               	movlw	low (__Lmediumconst shr (0+16))
   491  000A84  6EF8               	movwf	tblptru,c
   492  000A86  0100               	movlb	0
   493  000A88  EF46  F002         	goto	_main	;jump to C main() function
   494                           tblptru	equ	0xFF8
   495                           tblptrh	equ	0xFF7
   496                           tblptrl	equ	0xFF6
   497                           tablat	equ	0xFF5
   498                           postinc0	equ	0xFEE
   499                           wreg	equ	0xFE8
   500                           postdec1	equ	0xFE5
   501                           fsr1l	equ	0xFE1
   502                           
   503                           	psect	bssCOMRAM
   504  000037                     __pbssCOMRAM:
   505                           	opt stack 0
   506  000037                     _pulse:
   507                           	opt stack 0
   508  000037                     	ds	16
   509  000047                     _pin:
   510                           	opt stack 0
   511  000047                     	ds	8
   512  00004F                     _port:
   513                           	opt stack 0
   514  00004F                     	ds	8
   515                           tblptru	equ	0xFF8
   516                           tblptrh	equ	0xFF7
   517                           tblptrl	equ	0xFF6
   518                           tablat	equ	0xFF5
   519                           postinc0	equ	0xFEE
   520                           wreg	equ	0xFE8
   521                           postdec1	equ	0xFE5
   522                           fsr1l	equ	0xFE1
   523                           
   524                           	psect	dataCOMRAM
   525  000057                     __pdataCOMRAM:
   526                           	opt stack 0
   527  000057                     _angle:
   528                           	opt stack 0
   529  000057                     	ds	4
   530                           tblptru	equ	0xFF8
   531                           tblptrh	equ	0xFF7
   532                           tblptrl	equ	0xFF6
   533                           tablat	equ	0xFF5
   534                           postinc0	equ	0xFEE
   535                           wreg	equ	0xFE8
   536                           postdec1	equ	0xFE5
   537                           fsr1l	equ	0xFE1
   538                           
   539                           	psect	cstackBANK0
   540  000080                     __pcstackBANK0:
   541                           	opt stack 0
   542  000080                     printf@flag:
   543                           	opt stack 0
   544                           
   545                           ; 1 bytes @ 0x0
   546  000080                     	ds	1
   547  000081                     printf@idx:
   548                           	opt stack 0
   549                           
   550                           ; 1 bytes @ 0x1
   551  000081                     	ds	1
   552  000082                     printf@val:
   553                           	opt stack 0
   554                           
   555                           ; 2 bytes @ 0x2
   556  000082                     	ds	2
   557  000084                     printf@prec:
   558                           	opt stack 0
   559                           
   560                           ; 1 bytes @ 0x4
   561  000084                     	ds	1
   562  000085                     printf@ap:
   563                           	opt stack 0
   564                           
   565                           ; 2 bytes @ 0x5
   566  000085                     	ds	2
   567  000087                     printf@c:
   568                           	opt stack 0
   569                           
   570                           ; 1 bytes @ 0x7
   571  000087                     	ds	1
   572                           tblptru	equ	0xFF8
   573                           tblptrh	equ	0xFF7
   574                           tblptrl	equ	0xFF6
   575                           tablat	equ	0xFF5
   576                           postinc0	equ	0xFEE
   577                           wreg	equ	0xFE8
   578                           postdec1	equ	0xFE5
   579                           fsr1l	equ	0xFE1
   580                           
   581                           	psect	cstackCOMRAM
   582  000001                     __pcstackCOMRAM:
   583                           	opt stack 0
   584  000001                     ?_digitalRead:
   585                           	opt stack 0
   586  000001                     digitalRead@port:
   587                           	opt stack 0
   588  000001                     setAngle@timer:
   589                           	opt stack 0
   590  000001                     i2digitalWrite@port:
   591                           	opt stack 0
   592  000001                     i2startTimer@timer:
   593                           	opt stack 0
   594                           
   595                           ; 2 bytes @ 0x0
   596  000001                     	ds	2
   597  000003                     digitalRead@pin:
   598                           	opt stack 0
   599  000003                     i2digitalWrite@pin:
   600                           	opt stack 0
   601  000003                     setAngle@angle:
   602                           	opt stack 0
   603  000003                     i2startTimer@val:
   604                           	opt stack 0
   605                           
   606                           ; 4 bytes @ 0x2
   607  000003                     	ds	2
   608  000005                     ??_digitalRead:
   609  000005                     i2digitalWrite@val:
   610                           	opt stack 0
   611                           
   612                           ; 2 bytes @ 0x4
   613  000005                     	ds	2
   614  000007                     ??_setAngle:
   615  000007                     ??i2_digitalWrite:
   616  000007                     ??i2_startTimer:
   617                           
   618                           ; 1 bytes @ 0x6
   619  000007                     	ds	3
   620  00000A                     ??_servoInterruptService:
   621                           
   622                           ; 1 bytes @ 0x9
   623  00000A                     	ds	2
   624  00000C                     servoInterruptService@flags:
   625                           	opt stack 0
   626                           
   627                           ; 8 bytes @ 0xB
   628  00000C                     	ds	8
   629  000014                     servoInterruptService@i:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0x13
   633  000014                     	ds	2
   634  000016                     ??_service:
   635                           
   636                           ; 1 bytes @ 0x15
   637  000016                     	ds	14
   638  000024                     service@key:
   639                           	opt stack 0
   640                           
   641                           ; 1 bytes @ 0x23
   642  000024                     	ds	1
   643  000025                     ?___lwdiv:
   644                           	opt stack 0
   645  000025                     lcdNibble@temp:
   646                           	opt stack 0
   647  000025                     readKeypad@key:
   648                           	opt stack 0
   649  000025                     digitalWrite@port:
   650                           	opt stack 0
   651  000025                     initTimer@timer:
   652                           	opt stack 0
   653  000025                     startTimer@timer:
   654                           	opt stack 0
   655  000025                     ___lwdiv@dividend:
   656                           	opt stack 0
   657                           
   658                           ; 2 bytes @ 0x24
   659  000025                     	ds	1
   660  000026                     lcdNibble@data:
   661                           	opt stack 0
   662                           
   663                           ; 1 bytes @ 0x25
   664  000026                     	ds	1
   665  000027                     ??_lcdInst:
   666  000027                     ??_initTimer:
   667  000027                     digitalWrite@pin:
   668                           	opt stack 0
   669  000027                     ___lwdiv@divisor:
   670                           	opt stack 0
   671  000027                     startTimer@val:
   672                           	opt stack 0
   673                           
   674                           ; 4 bytes @ 0x26
   675  000027                     	ds	1
   676  000028                     lcdInst@data:
   677                           	opt stack 0
   678                           
   679                           ; 1 bytes @ 0x27
   680  000028                     	ds	1
   681  000029                     ??_initLCD:
   682  000029                     putch@data:
   683                           	opt stack 0
   684  000029                     ___lwdiv@counter:
   685                           	opt stack 0
   686  000029                     digitalWrite@val:
   687                           	opt stack 0
   688                           
   689                           ; 2 bytes @ 0x28
   690  000029                     	ds	1
   691  00002A                     ___lwdiv@quotient:
   692                           	opt stack 0
   693                           
   694                           ; 2 bytes @ 0x29
   695  00002A                     	ds	1
   696  00002B                     ??_digitalWrite:
   697  00002B                     ??_startTimer:
   698                           
   699                           ; 1 bytes @ 0x2A
   700  00002B                     	ds	1
   701  00002C                     ?_printf:
   702                           	opt stack 0
   703  00002C                     printf@f:
   704                           	opt stack 0
   705                           
   706                           ; 2 bytes @ 0x2B
   707  00002C                     	ds	2
   708  00002E                     initServo@timer:
   709                           	opt stack 0
   710                           
   711                           ; 2 bytes @ 0x2D
   712  00002E                     	ds	2
   713  000030                     initServo@po:
   714                           	opt stack 0
   715                           
   716                           ; 2 bytes @ 0x2F
   717  000030                     	ds	2
   718  000032                     runMenu@key:
   719                           	opt stack 0
   720  000032                     initServo@pi:
   721                           	opt stack 0
   722                           
   723                           ; 2 bytes @ 0x31
   724  000032                     	ds	2
   725  000034                     ??_initServo:
   726                           
   727                           ; 1 bytes @ 0x33
   728  000034                     	ds	2
   729  000036                     main@key:
   730                           	opt stack 0
   731                           
   732                           ; 1 bytes @ 0x35
   733  000036                     	ds	1
   734                           tblptru	equ	0xFF8
   735                           tblptrh	equ	0xFF7
   736                           tblptrl	equ	0xFF6
   737                           tablat	equ	0xFF5
   738                           postinc0	equ	0xFEE
   739                           wreg	equ	0xFE8
   740                           postdec1	equ	0xFE5
   741                           fsr1l	equ	0xFE1
   742                           
   743 ;;
   744 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   745 ;;
   746 ;; *************** function _main *****************
   747 ;; Defined at:
   748 ;;		line 60 in file "main.c"
   749 ;; Parameters:    Size  Location     Type
   750 ;;		None
   751 ;; Auto vars:     Size  Location     Type
   752 ;;  key             1   53[COMRAM] unsigned char 
   753 ;; Return value:  Size  Location     Type
   754 ;;                  1    wreg      void 
   755 ;; Registers used:
   756 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   757 ;; Tracked objects:
   758 ;;		On entry : 0/0
   759 ;;		On exit  : 0/0
   760 ;;		Unchanged: 0/0
   761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   763 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   765 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   766 ;;Total ram usage:        1 bytes
   767 ;; Hardware stack levels required when called:    9
   768 ;; This function calls:
   769 ;;		_dateTime
   770 ;;		_initLCD
   771 ;;		_initServo
   772 ;;		_mainMenu
   773 ;;		_pinSetup
   774 ;;		_readKeypad
   775 ;;		_runMenu
   776 ;;		_runSelect
   777 ;;		_runStats
   778 ;;		_runTime
   779 ;; This function is called by:
   780 ;;		Startup code after reset
   781 ;; This function uses a non-reentrant model
   782 ;;
   783                           
   784                           	psect	text0
   785  00048C                     __ptext0:
   786                           	opt stack 0
   787  00048C                     _main:
   788                           	opt stack 22
   789                           
   790                           ;main.c: 61: pinSetup();
   791                           
   792                           ;incstack = 0
   793  00048C  EC46  F005         	call	_pinSetup	;wreg free
   794                           
   795                           ;main.c: 62: initLCD();
   796  000490  EC06  F005         	call	_initLCD	;wreg free
   797                           
   798                           ;main.c: 64: initServo(3,2,0);
   799  000494  0E00               	movlw	0
   800  000496  6E2F               	movwf	initServo@timer+1,c
   801  000498  0E03               	movlw	3
   802  00049A  6E2E               	movwf	initServo@timer,c
   803  00049C  0E00               	movlw	0
   804  00049E  6E31               	movwf	initServo@po+1,c
   805  0004A0  0E02               	movlw	2
   806  0004A2  6E30               	movwf	initServo@po,c
   807  0004A4  0E00               	movlw	0
   808  0004A6  6E33               	movwf	initServo@pi+1,c
   809  0004A8  0E00               	movlw	0
   810  0004AA  6E32               	movwf	initServo@pi,c
   811  0004AC  ECE6  F003         	call	_initServo	;wreg free
   812                           
   813                           ;main.c: 65: initServo(1,2,1);
   814  0004B0  0E00               	movlw	0
   815  0004B2  6E2F               	movwf	initServo@timer+1,c
   816  0004B4  0E01               	movlw	1
   817  0004B6  6E2E               	movwf	initServo@timer,c
   818  0004B8  0E00               	movlw	0
   819  0004BA  6E31               	movwf	initServo@po+1,c
   820  0004BC  0E02               	movlw	2
   821  0004BE  6E30               	movwf	initServo@po,c
   822  0004C0  0E00               	movlw	0
   823  0004C2  6E33               	movwf	initServo@pi+1,c
   824  0004C4  0E01               	movlw	1
   825  0004C6  6E32               	movwf	initServo@pi,c
   826  0004C8  ECE6  F003         	call	_initServo	;wreg free
   827                           
   828                           ;main.c: 66: initServo(0,3,1);
   829  0004CC  0E00               	movlw	0
   830  0004CE  6E2F               	movwf	initServo@timer+1,c
   831  0004D0  0E00               	movlw	0
   832  0004D2  6E2E               	movwf	initServo@timer,c
   833  0004D4  0E00               	movlw	0
   834  0004D6  6E31               	movwf	initServo@po+1,c
   835  0004D8  0E03               	movlw	3
   836  0004DA  6E30               	movwf	initServo@po,c
   837  0004DC  0E00               	movlw	0
   838  0004DE  6E33               	movwf	initServo@pi+1,c
   839  0004E0  0E01               	movlw	1
   840  0004E2  6E32               	movwf	initServo@pi,c
   841  0004E4  ECE6  F003         	call	_initServo	;wreg free
   842  0004E8                     l2531:
   843                           
   844                           ;main.c: 70: dateTime();
   845  0004E8  EC00  F006         	call	_dateTime	;wreg free
   846  0004EC                     l2533:
   847  0004EC  EC8F  F005         	call	_readKeypad	;wreg free
   848  0004F0  0A41               	xorlw	65
   849  0004F2  A4D8               	btfss	status,2,c
   850  0004F4  D7FB               	goto	l2533
   851  0004F6                     l2535:
   852                           
   853                           ;main.c: 75: mainMenu();
   854  0004F6  ECF1  F005         	call	_mainMenu	;wreg free
   855  0004FA                     l2537:
   856  0004FA  EC8F  F005         	call	_readKeypad	;wreg free
   857  0004FE  6E36               	movwf	main@key,c
   858                           
   859                           ;main.c: 79: while(key != 'B' && key != 'C' && key != '*');
   860  000500  0E42               	movlw	66
   861  000502  1836               	xorwf	main@key,w,c
   862  000504  B4D8               	btfsc	status,2,c
   863  000506  D008               	goto	l2545
   864  000508  0E43               	movlw	67
   865  00050A  1836               	xorwf	main@key,w,c
   866  00050C  B4D8               	btfsc	status,2,c
   867  00050E  D004               	goto	l2545
   868  000510  0E2A               	movlw	42
   869  000512  1836               	xorwf	main@key,w,c
   870  000514  A4D8               	btfss	status,2,c
   871  000516  D7F1               	goto	l2537
   872  000518                     l2545:
   873                           
   874                           ;main.c: 81: if(key == 'C'){
   875  000518  0E43               	movlw	67
   876  00051A  1836               	xorwf	main@key,w,c
   877  00051C  A4D8               	btfss	status,2,c
   878  00051E  D047               	goto	l2589
   879                           
   880                           ;main.c: 83: runSelect();
   881  000520  ECE2  F005         	call	_runSelect	;wreg free
   882  000524                     l2549:
   883  000524  EC8F  F005         	call	_readKeypad	;wreg free
   884  000528  6E36               	movwf	main@key,c
   885                           
   886                           ;main.c: 89: while(key != '1' && key != '2' && key != '3' && key != '4' && key != '*');
   887  00052A  0E31               	movlw	49
   888  00052C  1836               	xorwf	main@key,w,c
   889  00052E  B4D8               	btfsc	status,2,c
   890  000530  D010               	goto	l2561
   891  000532  0E32               	movlw	50
   892  000534  1836               	xorwf	main@key,w,c
   893  000536  B4D8               	btfsc	status,2,c
   894  000538  D00C               	goto	l2561
   895  00053A  0E33               	movlw	51
   896  00053C  1836               	xorwf	main@key,w,c
   897  00053E  B4D8               	btfsc	status,2,c
   898  000540  D008               	goto	l2561
   899  000542  0E34               	movlw	52
   900  000544  1836               	xorwf	main@key,w,c
   901  000546  B4D8               	btfsc	status,2,c
   902  000548  D004               	goto	l2561
   903  00054A  0E2A               	movlw	42
   904  00054C  1836               	xorwf	main@key,w,c
   905  00054E  A4D8               	btfss	status,2,c
   906  000550  D7E9               	goto	l2549
   907  000552                     l2561:
   908                           
   909                           ;main.c: 91: if(key == '*')continue;
   910  000552  0E2A               	movlw	42
   911  000554  1836               	xorwf	main@key,w,c
   912  000556  B4D8               	btfsc	status,2,c
   913  000558  D7CE               	goto	l2535
   914  00055A                     l2565:
   915                           
   916                           ;main.c: 97: runMenu(key);
   917  00055A  5036               	movf	main@key,w,c
   918  00055C  EC7C  F005         	call	_runMenu
   919  000560                     l2567:
   920  000560  EC8F  F005         	call	_readKeypad	;wreg free
   921  000564  6E36               	movwf	main@key,c
   922                           
   923                           ;main.c: 101: while(key != 'A' && key != 'B' && key != '*');
   924  000566  0E41               	movlw	65
   925  000568  1836               	xorwf	main@key,w,c
   926  00056A  B4D8               	btfsc	status,2,c
   927  00056C  D008               	goto	l2575
   928  00056E  0E42               	movlw	66
   929  000570  1836               	xorwf	main@key,w,c
   930  000572  B4D8               	btfsc	status,2,c
   931  000574  D004               	goto	l2575
   932  000576  0E2A               	movlw	42
   933  000578  1836               	xorwf	main@key,w,c
   934  00057A  A4D8               	btfss	status,2,c
   935  00057C  D7F1               	goto	l2567
   936  00057E                     l2575:
   937                           
   938                           ;main.c: 103: if(key == 'A'){
   939  00057E  0E41               	movlw	65
   940  000580  1836               	xorwf	main@key,w,c
   941  000582  A4D8               	btfss	status,2,c
   942  000584  D003               	goto	l2579
   943                           
   944                           ;main.c: 105: runTime();
   945  000586  ECC4  F005         	call	_runTime	;wreg free
   946                           
   947                           ;main.c: 107: }
   948  00058A  D00B               	goto	l2587
   949  00058C                     l2579:
   950                           
   951                           ;main.c: 108: else if(key == 'B'){
   952  00058C  0E42               	movlw	66
   953  00058E  1836               	xorwf	main@key,w,c
   954  000590  A4D8               	btfss	status,2,c
   955  000592  D003               	goto	l2583
   956                           
   957                           ;main.c: 110: runStats();
   958  000594  ECD3  F005         	call	_runStats	;wreg free
   959                           
   960                           ;main.c: 112: }
   961  000598  D004               	goto	l2587
   962  00059A                     l2583:
   963                           
   964                           ;main.c: 113: else if(key == '*')break;
   965  00059A  0E2A               	movlw	42
   966  00059C  1836               	xorwf	main@key,w,c
   967  00059E  B4D8               	btfsc	status,2,c
   968  0005A0  D7AA               	goto	l2535
   969  0005A2                     l2587:
   970  0005A2  EC8F  F005         	call	_readKeypad	;wreg free
   971  0005A6  0A2A               	xorlw	42
   972  0005A8  B4D8               	btfsc	status,2,c
   973  0005AA  D7D7               	goto	l2565
   974  0005AC  D7FA               	goto	l2587
   975  0005AE                     l2589:
   976                           
   977                           ;main.c: 119: else if(key == 'B'){
   978  0005AE  0E42               	movlw	66
   979  0005B0  1836               	xorwf	main@key,w,c
   980  0005B2  B4D8               	btfsc	status,2,c
   981  0005B4  D7A0               	goto	l2535
   982                           
   983                           ;main.c: 122: else if(key == '*')break;
   984                           
   985                           ;main.c: 121: }
   986  0005B6  0E2A               	movlw	42
   987  0005B8  1836               	xorwf	main@key,w,c
   988  0005BA  B4D8               	btfsc	status,2,c
   989  0005BC  D795               	goto	l2531
   990  0005BE  D79B               	goto	l2535
   991  0005C0                     l98:
   992  0005C0  D7FF               	goto	l98
   993  0005C2                     __end_of_main:
   994                           	opt stack 0
   995                           tblptru	equ	0xFF8
   996                           tblptrh	equ	0xFF7
   997                           tblptrl	equ	0xFF6
   998                           tablat	equ	0xFF5
   999                           postinc0	equ	0xFEE
  1000                           wreg	equ	0xFE8
  1001                           postdec1	equ	0xFE5
  1002                           fsr1l	equ	0xFE1
  1003                           status	equ	0xFD8
  1004                           
  1005 ;; *************** function _runTime *****************
  1006 ;; Defined at:
  1007 ;;		line 36 in file "interface.c"
  1008 ;; Parameters:    Size  Location     Type
  1009 ;;		None
  1010 ;; Auto vars:     Size  Location     Type
  1011 ;;		None
  1012 ;; Return value:  Size  Location     Type
  1013 ;;                  1    wreg      void 
  1014 ;; Registers used:
  1015 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1016 ;; Tracked objects:
  1017 ;;		On entry : 0/0
  1018 ;;		On exit  : 0/0
  1019 ;;		Unchanged: 0/0
  1020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1024 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1025 ;;Total ram usage:        0 bytes
  1026 ;; Hardware stack levels used:    1
  1027 ;; Hardware stack levels required when called:    8
  1028 ;; This function calls:
  1029 ;;		_lcdClear
  1030 ;;		_printf
  1031 ;; This function is called by:
  1032 ;;		_main
  1033 ;; This function uses a non-reentrant model
  1034 ;;
  1035                           
  1036                           	psect	text1
  1037  000B88                     __ptext1:
  1038                           	opt stack 0
  1039  000B88                     _runTime:
  1040                           	opt stack 22
  1041                           
  1042                           ;interface.c: 37: lcdClear();
  1043                           
  1044                           ;incstack = 0
  1045  000B88  EC13  F006         	call	_lcdClear	;wreg free
  1046                           
  1047                           ;interface.c: 38: printf("time: nnn sec   \n");
  1048  000B8C  0E52               	movlw	low STR_11
  1049  000B8E  6E2C               	movwf	printf@f,c
  1050  000B90  0EFF               	movlw	high STR_11
  1051  000B92  6E2D               	movwf	printf@f+1,c
  1052  000B94  ECA1  F001         	call	_printf	;wreg free
  1053                           
  1054                           ;interface.c: 39: printf("              *>");
  1055  000B98  0E87               	movlw	low STR_12
  1056  000B9A  6E2C               	movwf	printf@f,c
  1057  000B9C  0EFF               	movlw	high STR_12
  1058  000B9E  6E2D               	movwf	printf@f+1,c
  1059  000BA0  ECA1  F001         	call	_printf	;wreg free
  1060  000BA4  0012               	return		;funcret
  1061  000BA6                     __end_of_runTime:
  1062                           	opt stack 0
  1063                           tblptru	equ	0xFF8
  1064                           tblptrh	equ	0xFF7
  1065                           tblptrl	equ	0xFF6
  1066                           tablat	equ	0xFF5
  1067                           postinc0	equ	0xFEE
  1068                           wreg	equ	0xFE8
  1069                           postdec1	equ	0xFE5
  1070                           fsr1l	equ	0xFE1
  1071                           status	equ	0xFD8
  1072                           
  1073 ;; *************** function _runStats *****************
  1074 ;; Defined at:
  1075 ;;		line 42 in file "interface.c"
  1076 ;; Parameters:    Size  Location     Type
  1077 ;;		None
  1078 ;; Auto vars:     Size  Location     Type
  1079 ;;		None
  1080 ;; Return value:  Size  Location     Type
  1081 ;;                  1    wreg      void 
  1082 ;; Registers used:
  1083 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1084 ;; Tracked objects:
  1085 ;;		On entry : 0/0
  1086 ;;		On exit  : 0/0
  1087 ;;		Unchanged: 0/0
  1088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1092 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1093 ;;Total ram usage:        0 bytes
  1094 ;; Hardware stack levels used:    1
  1095 ;; Hardware stack levels required when called:    8
  1096 ;; This function calls:
  1097 ;;		_lcdClear
  1098 ;;		_printf
  1099 ;; This function is called by:
  1100 ;;		_main
  1101 ;; This function uses a non-reentrant model
  1102 ;;
  1103                           
  1104                           	psect	text2
  1105  000BA6                     __ptext2:
  1106                           	opt stack 0
  1107  000BA6                     _runStats:
  1108                           	opt stack 22
  1109                           
  1110                           ;interface.c: 43: lcdClear();
  1111                           
  1112                           ;incstack = 0
  1113  000BA6  EC13  F006         	call	_lcdClear	;wreg free
  1114                           
  1115                           ;interface.c: 44: printf("[AA,9V,C,other] \n");
  1116  000BAA  0E64               	movlw	low STR_13
  1117  000BAC  6E2C               	movwf	printf@f,c
  1118  000BAE  0EFF               	movlw	high STR_13
  1119  000BB0  6E2D               	movwf	printf@f+1,c
  1120  000BB2  ECA1  F001         	call	_printf	;wreg free
  1121                           
  1122                           ;interface.c: 45: printf("[nn,n,n,nn]   *>");
  1123  000BB6  0ECB               	movlw	low STR_14
  1124  000BB8  6E2C               	movwf	printf@f,c
  1125  000BBA  0EFF               	movlw	high STR_14
  1126  000BBC  6E2D               	movwf	printf@f+1,c
  1127  000BBE  ECA1  F001         	call	_printf	;wreg free
  1128  000BC2  0012               	return		;funcret
  1129  000BC4                     __end_of_runStats:
  1130                           	opt stack 0
  1131                           tblptru	equ	0xFF8
  1132                           tblptrh	equ	0xFF7
  1133                           tblptrl	equ	0xFF6
  1134                           tablat	equ	0xFF5
  1135                           postinc0	equ	0xFEE
  1136                           wreg	equ	0xFE8
  1137                           postdec1	equ	0xFE5
  1138                           fsr1l	equ	0xFE1
  1139                           status	equ	0xFD8
  1140                           
  1141 ;; *************** function _runSelect *****************
  1142 ;; Defined at:
  1143 ;;		line 24 in file "interface.c"
  1144 ;; Parameters:    Size  Location     Type
  1145 ;;		None
  1146 ;; Auto vars:     Size  Location     Type
  1147 ;;		None
  1148 ;; Return value:  Size  Location     Type
  1149 ;;                  1    wreg      void 
  1150 ;; Registers used:
  1151 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1152 ;; Tracked objects:
  1153 ;;		On entry : 0/0
  1154 ;;		On exit  : 0/0
  1155 ;;		Unchanged: 0/0
  1156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1160 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1161 ;;Total ram usage:        0 bytes
  1162 ;; Hardware stack levels used:    1
  1163 ;; Hardware stack levels required when called:    8
  1164 ;; This function calls:
  1165 ;;		_lcdClear
  1166 ;;		_printf
  1167 ;; This function is called by:
  1168 ;;		_main
  1169 ;; This function uses a non-reentrant model
  1170 ;;
  1171                           
  1172                           	psect	text3
  1173  000BC4                     __ptext3:
  1174                           	opt stack 0
  1175  000BC4                     _runSelect:
  1176                           	opt stack 22
  1177                           
  1178                           ;interface.c: 25: lcdClear();
  1179                           
  1180                           ;incstack = 0
  1181  000BC4  EC13  F006         	call	_lcdClear	;wreg free
  1182                           
  1183                           ;interface.c: 26: printf("select run:     \n");
  1184  000BC8  0E40               	movlw	low STR_7
  1185  000BCA  6E2C               	movwf	printf@f,c
  1186  000BCC  0EFF               	movlw	high STR_7
  1187  000BCE  6E2D               	movwf	printf@f+1,c
  1188  000BD0  ECA1  F001         	call	_printf	;wreg free
  1189                           
  1190                           ;interface.c: 27: printf("[1,2,3,4]     *>");
  1191  000BD4  0E98               	movlw	low STR_8
  1192  000BD6  6E2C               	movwf	printf@f,c
  1193  000BD8  0EFF               	movlw	high STR_8
  1194  000BDA  6E2D               	movwf	printf@f+1,c
  1195  000BDC  ECA1  F001         	call	_printf	;wreg free
  1196  000BE0  0012               	return		;funcret
  1197  000BE2                     __end_of_runSelect:
  1198                           	opt stack 0
  1199                           tblptru	equ	0xFF8
  1200                           tblptrh	equ	0xFF7
  1201                           tblptrl	equ	0xFF6
  1202                           tablat	equ	0xFF5
  1203                           postinc0	equ	0xFEE
  1204                           wreg	equ	0xFE8
  1205                           postdec1	equ	0xFE5
  1206                           fsr1l	equ	0xFE1
  1207                           status	equ	0xFD8
  1208                           
  1209 ;; *************** function _runMenu *****************
  1210 ;; Defined at:
  1211 ;;		line 30 in file "interface.c"
  1212 ;; Parameters:    Size  Location     Type
  1213 ;;  key             1    wreg     unsigned char 
  1214 ;; Auto vars:     Size  Location     Type
  1215 ;;  key             1   49[COMRAM] unsigned char 
  1216 ;; Return value:  Size  Location     Type
  1217 ;;                  1    wreg      void 
  1218 ;; Registers used:
  1219 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1220 ;; Tracked objects:
  1221 ;;		On entry : 0/0
  1222 ;;		On exit  : 0/0
  1223 ;;		Unchanged: 0/0
  1224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1226 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1228 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1229 ;;Total ram usage:        1 bytes
  1230 ;; Hardware stack levels used:    1
  1231 ;; Hardware stack levels required when called:    8
  1232 ;; This function calls:
  1233 ;;		_lcdClear
  1234 ;;		_printf
  1235 ;; This function is called by:
  1236 ;;		_main
  1237 ;; This function uses a non-reentrant model
  1238 ;;
  1239                           
  1240                           	psect	text4
  1241  000AF8                     __ptext4:
  1242                           	opt stack 0
  1243  000AF8                     _runMenu:
  1244                           	opt stack 22
  1245                           
  1246                           ;incstack = 0
  1247                           ;runMenu@key stored from wreg
  1248  000AF8  6E32               	movwf	runMenu@key,c
  1249                           
  1250                           ;interface.c: 31: lcdClear();
  1251  000AFA  EC13  F006         	call	_lcdClear	;wreg free
  1252                           
  1253                           ;interface.c: 32: printf("%c) time  <A     \n",key);
  1254  000AFE  0E09               	movlw	low STR_9
  1255  000B00  6E2C               	movwf	printf@f,c
  1256  000B02  0EFF               	movlw	high STR_9
  1257  000B04  6E2D               	movwf	printf@f+1,c
  1258  000B06  C032  F02E         	movff	runMenu@key,?_printf+2
  1259  000B0A  6A2F               	clrf	?_printf+3,c
  1260  000B0C  ECA1  F001         	call	_printf	;wreg free
  1261                           
  1262                           ;interface.c: 33: printf( "   stats <B   *>");
  1263  000B10  0EBA               	movlw	low STR_10
  1264  000B12  6E2C               	movwf	printf@f,c
  1265  000B14  0EFF               	movlw	high STR_10
  1266  000B16  6E2D               	movwf	printf@f+1,c
  1267  000B18  ECA1  F001         	call	_printf	;wreg free
  1268  000B1C  0012               	return		;funcret
  1269  000B1E                     __end_of_runMenu:
  1270                           	opt stack 0
  1271                           tblptru	equ	0xFF8
  1272                           tblptrh	equ	0xFF7
  1273                           tblptrl	equ	0xFF6
  1274                           tablat	equ	0xFF5
  1275                           postinc0	equ	0xFEE
  1276                           wreg	equ	0xFE8
  1277                           postdec1	equ	0xFE5
  1278                           fsr1l	equ	0xFE1
  1279                           status	equ	0xFD8
  1280                           
  1281 ;; *************** function _readKeypad *****************
  1282 ;; Defined at:
  1283 ;;		line 35 in file "keypad.c"
  1284 ;; Parameters:    Size  Location     Type
  1285 ;;		None
  1286 ;; Auto vars:     Size  Location     Type
  1287 ;;  key             1   36[COMRAM] unsigned char 
  1288 ;; Return value:  Size  Location     Type
  1289 ;;                  1    wreg      unsigned char 
  1290 ;; Registers used:
  1291 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1292 ;; Tracked objects:
  1293 ;;		On entry : 0/0
  1294 ;;		On exit  : 0/0
  1295 ;;		Unchanged: 0/0
  1296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1298 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1300 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1301 ;;Total ram usage:        1 bytes
  1302 ;; Hardware stack levels used:    1
  1303 ;; Hardware stack levels required when called:    3
  1304 ;; This function calls:
  1305 ;;		Nothing
  1306 ;; This function is called by:
  1307 ;;		_main
  1308 ;; This function uses a non-reentrant model
  1309 ;;
  1310                           
  1311                           	psect	text5
  1312  000B1E                     __ptext5:
  1313                           	opt stack 0
  1314  000B1E                     _readKeypad:
  1315                           	opt stack 27
  1316  000B1E                     l166:
  1317  000B1E  A281               	btfss	3969,1,c	;volatile
  1318  000B20  D7FE               	goto	l166
  1319                           
  1320                           ;keypad.c: 37: char key = (PORTB & 0xF0) >> 4;
  1321  000B22  3881               	swapf	3969,w,c	;volatile
  1322  000B24  0B0F               	andlw	15
  1323  000B26  0B0F               	andlw	15
  1324  000B28  6E25               	movwf	readKeypad@key,c
  1325  000B2A                     l169:
  1326  000B2A  B281               	btfsc	3969,1,c	;volatile
  1327  000B2C  D7FE               	goto	l169
  1328                           
  1329                           ;keypad.c: 39: return keys[key];
  1330  000B2E  5025               	movf	readKeypad@key,w,c
  1331  000B30  0D01               	mullw	1
  1332  000B32  0EE9               	movlw	low _keys
  1333  000B34  24F3               	addwf	prodl,w,c
  1334  000B36  6EF6               	movwf	tblptrl,c
  1335  000B38  0EFE               	movlw	high _keys
  1336  000B3A  20F4               	addwfc	prodh,w,c
  1337  000B3C  6EF7               	movwf	tblptrh,c
  1338  000B3E                     	if	0	;There are less than 3 active tblptr bytes
  1339  000B3E                     	endif
  1340  000B3E  0008               	tblrd		*
  1341  000B40  50F5               	movf	tablat,w,c
  1342  000B42  0012               	return	
  1343  000B44                     __end_of_readKeypad:
  1344                           	opt stack 0
  1345                           tblptru	equ	0xFF8
  1346                           tblptrh	equ	0xFF7
  1347                           tblptrl	equ	0xFF6
  1348                           tablat	equ	0xFF5
  1349                           prodh	equ	0xFF4
  1350                           prodl	equ	0xFF3
  1351                           postinc0	equ	0xFEE
  1352                           wreg	equ	0xFE8
  1353                           postdec1	equ	0xFE5
  1354                           fsr1l	equ	0xFE1
  1355                           status	equ	0xFD8
  1356                           
  1357 ;; *************** function _pinSetup *****************
  1358 ;; Defined at:
  1359 ;;		line 26 in file "main.c"
  1360 ;; Parameters:    Size  Location     Type
  1361 ;;		None
  1362 ;; Auto vars:     Size  Location     Type
  1363 ;;		None
  1364 ;; Return value:  Size  Location     Type
  1365 ;;                  1    wreg      void 
  1366 ;; Registers used:
  1367 ;;		wreg, status,2, status,0
  1368 ;; Tracked objects:
  1369 ;;		On entry : 0/0
  1370 ;;		On exit  : 0/0
  1371 ;;		Unchanged: 0/0
  1372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1376 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1377 ;;Total ram usage:        0 bytes
  1378 ;; Hardware stack levels used:    1
  1379 ;; Hardware stack levels required when called:    3
  1380 ;; This function calls:
  1381 ;;		Nothing
  1382 ;; This function is called by:
  1383 ;;		_main
  1384 ;; This function uses a non-reentrant model
  1385 ;;
  1386                           
  1387                           	psect	text6
  1388  000A8C                     __ptext6:
  1389                           	opt stack 0
  1390  000A8C                     _pinSetup:
  1391                           	opt stack 27
  1392                           
  1393                           ;main.c: 32: TRISA = 0xFF;
  1394                           
  1395                           ;incstack = 0
  1396  000A8C  6892               	setf	3986,c	;volatile
  1397                           
  1398                           ;main.c: 33: TRISB = 0xFF;
  1399  000A8E  6893               	setf	3987,c	;volatile
  1400                           
  1401                           ;main.c: 34: TRISC = 0x00;
  1402  000A90  0E00               	movlw	0
  1403  000A92  6E94               	movwf	3988,c	;volatile
  1404                           
  1405                           ;main.c: 35: TRISD = 0x00;
  1406  000A94  0E00               	movlw	0
  1407  000A96  6E95               	movwf	3989,c	;volatile
  1408                           
  1409                           ;main.c: 36: TRISE = 0x00;
  1410  000A98  0E00               	movlw	0
  1411  000A9A  6E96               	movwf	3990,c	;volatile
  1412                           
  1413                           ;main.c: 38: LATA = 0x00;
  1414  000A9C  0E00               	movlw	0
  1415  000A9E  6E89               	movwf	3977,c	;volatile
  1416                           
  1417                           ;main.c: 39: LATB = 0x00;
  1418  000AA0  0E00               	movlw	0
  1419  000AA2  6E8A               	movwf	3978,c	;volatile
  1420                           
  1421                           ;main.c: 40: LATC = 0x00;
  1422  000AA4  0E00               	movlw	0
  1423  000AA6  6E8B               	movwf	3979,c	;volatile
  1424                           
  1425                           ;main.c: 41: LATD = 0x00;
  1426  000AA8  0E00               	movlw	0
  1427  000AAA  6E8C               	movwf	3980,c	;volatile
  1428                           
  1429                           ;main.c: 42: LATE = 0x00;
  1430  000AAC  0E00               	movlw	0
  1431  000AAE  6E8D               	movwf	3981,c	;volatile
  1432                           
  1433                           ;main.c: 44: ADCON0 = 0x00;
  1434  000AB0  0E00               	movlw	0
  1435  000AB2  6EC2               	movwf	4034,c	;volatile
  1436                           
  1437                           ;main.c: 45: ADCON1 |= 0x0A;
  1438  000AB4  0E0A               	movlw	10
  1439  000AB6  12C1               	iorwf	4033,f,c	;volatile
  1440                           
  1441                           ;main.c: 49: ADCON2 = 0;
  1442  000AB8  0E00               	movlw	0
  1443  000ABA  6EC0               	movwf	4032,c	;volatile
  1444                           
  1445                           ;main.c: 50: ADCON2 |= 0b010;
  1446  000ABC  82C0               	bsf	4032,1,c	;volatile
  1447                           
  1448                           ;main.c: 51: ADCON2 |= 0b110<<3;
  1449  000ABE  0E30               	movlw	48
  1450  000AC0  12C0               	iorwf	4032,f,c	;volatile
  1451                           
  1452                           ;main.c: 52: ADCON2 |= 1<<7;
  1453  000AC2  8EC0               	bsf	4032,7,c	;volatile
  1454  000AC4  0012               	return		;funcret
  1455  000AC6                     __end_of_pinSetup:
  1456                           	opt stack 0
  1457                           tblptru	equ	0xFF8
  1458                           tblptrh	equ	0xFF7
  1459                           tblptrl	equ	0xFF6
  1460                           tablat	equ	0xFF5
  1461                           prodh	equ	0xFF4
  1462                           prodl	equ	0xFF3
  1463                           postinc0	equ	0xFEE
  1464                           wreg	equ	0xFE8
  1465                           postdec1	equ	0xFE5
  1466                           fsr1l	equ	0xFE1
  1467                           status	equ	0xFD8
  1468                           
  1469 ;; *************** function _mainMenu *****************
  1470 ;; Defined at:
  1471 ;;		line 18 in file "interface.c"
  1472 ;; Parameters:    Size  Location     Type
  1473 ;;		None
  1474 ;; Auto vars:     Size  Location     Type
  1475 ;;		None
  1476 ;; Return value:  Size  Location     Type
  1477 ;;                  1    wreg      void 
  1478 ;; Registers used:
  1479 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1480 ;; Tracked objects:
  1481 ;;		On entry : 0/0
  1482 ;;		On exit  : 0/0
  1483 ;;		Unchanged: 0/0
  1484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1488 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1489 ;;Total ram usage:        0 bytes
  1490 ;; Hardware stack levels used:    1
  1491 ;; Hardware stack levels required when called:    8
  1492 ;; This function calls:
  1493 ;;		_lcdClear
  1494 ;;		_printf
  1495 ;; This function is called by:
  1496 ;;		_main
  1497 ;; This function uses a non-reentrant model
  1498 ;;
  1499                           
  1500                           	psect	text7
  1501  000BE2                     __ptext7:
  1502                           	opt stack 0
  1503  000BE2                     _mainMenu:
  1504                           	opt stack 22
  1505                           
  1506                           ;interface.c: 19: lcdClear();
  1507                           
  1508                           ;incstack = 0
  1509  000BE2  EC13  F006         	call	_lcdClear	;wreg free
  1510                           
  1511                           ;interface.c: 20: printf("start   <B      \n");
  1512  000BE6  0E1C               	movlw	low STR_5
  1513  000BE8  6E2C               	movwf	printf@f,c
  1514  000BEA  0EFF               	movlw	high STR_5
  1515  000BEC  6E2D               	movwf	printf@f+1,c
  1516  000BEE  ECA1  F001         	call	_printf	;wreg free
  1517                           
  1518                           ;interface.c: 21: printf("history <C    *>");
  1519  000BF2  0EA9               	movlw	low STR_6
  1520  000BF4  6E2C               	movwf	printf@f,c
  1521  000BF6  0EFF               	movlw	high STR_6
  1522  000BF8  6E2D               	movwf	printf@f+1,c
  1523  000BFA  ECA1  F001         	call	_printf	;wreg free
  1524  000BFE  0012               	return		;funcret
  1525  000C00                     __end_of_mainMenu:
  1526                           	opt stack 0
  1527                           tblptru	equ	0xFF8
  1528                           tblptrh	equ	0xFF7
  1529                           tblptrl	equ	0xFF6
  1530                           tablat	equ	0xFF5
  1531                           prodh	equ	0xFF4
  1532                           prodl	equ	0xFF3
  1533                           postinc0	equ	0xFEE
  1534                           wreg	equ	0xFE8
  1535                           postdec1	equ	0xFE5
  1536                           fsr1l	equ	0xFE1
  1537                           status	equ	0xFD8
  1538                           
  1539 ;; *************** function _initServo *****************
  1540 ;; Defined at:
  1541 ;;		line 16 in file "servo.c"
  1542 ;; Parameters:    Size  Location     Type
  1543 ;;  timer           2   45[COMRAM] int 
  1544 ;;  po              2   47[COMRAM] int 
  1545 ;;  pi              2   49[COMRAM] int 
  1546 ;; Auto vars:     Size  Location     Type
  1547 ;;		None
  1548 ;; Return value:  Size  Location     Type
  1549 ;;                  1    wreg      void 
  1550 ;; Registers used:
  1551 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1552 ;; Tracked objects:
  1553 ;;		On entry : 0/0
  1554 ;;		On exit  : 0/0
  1555 ;;		Unchanged: 0/0
  1556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1557 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1559 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1560 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1561 ;;Total ram usage:        8 bytes
  1562 ;; Hardware stack levels used:    1
  1563 ;; Hardware stack levels required when called:    4
  1564 ;; This function calls:
  1565 ;;		_digitalWrite
  1566 ;;		_initTimer
  1567 ;;		_startTimer
  1568 ;; This function is called by:
  1569 ;;		_main
  1570 ;; This function uses a non-reentrant model
  1571 ;;
  1572                           
  1573                           	psect	text8
  1574  0007CC                     __ptext8:
  1575                           	opt stack 0
  1576  0007CC                     _initServo:
  1577                           	opt stack 26
  1578                           
  1579                           ;servo.c: 17: port[timer] = po;
  1580                           
  1581                           ;incstack = 0
  1582  0007CC  90D8               	bcf	status,0,c
  1583  0007CE  342E               	rlcf	initServo@timer,w,c
  1584  0007D0  6ED9               	movwf	fsr2l,c
  1585  0007D2  342F               	rlcf	initServo@timer+1,w,c
  1586  0007D4  6EDA               	movwf	fsr2h,c
  1587  0007D6  0E4F               	movlw	low _port
  1588  0007D8  26D9               	addwf	fsr2l,f,c
  1589  0007DA  0E00               	movlw	high _port
  1590  0007DC  22DA               	addwfc	fsr2h,f,c
  1591  0007DE  C030  FFDE         	movff	initServo@po,postinc2
  1592  0007E2  C031  FFDD         	movff	initServo@po+1,postdec2
  1593                           
  1594                           ;servo.c: 18: pin[timer] = pi;
  1595  0007E6  90D8               	bcf	status,0,c
  1596  0007E8  342E               	rlcf	initServo@timer,w,c
  1597  0007EA  6ED9               	movwf	fsr2l,c
  1598  0007EC  342F               	rlcf	initServo@timer+1,w,c
  1599  0007EE  6EDA               	movwf	fsr2h,c
  1600  0007F0  0E47               	movlw	low _pin
  1601  0007F2  26D9               	addwf	fsr2l,f,c
  1602  0007F4  0E00               	movlw	high _pin
  1603  0007F6  22DA               	addwfc	fsr2h,f,c
  1604  0007F8  C032  FFDE         	movff	initServo@pi,postinc2
  1605  0007FC  C033  FFDD         	movff	initServo@pi+1,postdec2
  1606                           
  1607                           ;servo.c: 19: pulse[timer] = 61785;
  1608  000800  0E37               	movlw	low _pulse
  1609  000802  6E34               	movwf	??_initServo& (0+255),c
  1610  000804  0E00               	movlw	high _pulse
  1611  000806  6E35               	movwf	(??_initServo+1)& (0+255),c
  1612  000808  90D8               	bcf	status,0,c
  1613  00080A  342E               	rlcf	initServo@timer,w,c
  1614  00080C  6ED9               	movwf	fsr2l,c
  1615  00080E  342F               	rlcf	initServo@timer+1,w,c
  1616  000810  6EDA               	movwf	fsr2h,c
  1617  000812  90D8               	bcf	status,0,c
  1618  000814  36D9               	rlcf	fsr2l,f,c
  1619  000816  36DA               	rlcf	fsr2h,f,c
  1620  000818  5034               	movf	??_initServo,w,c
  1621  00081A  26D9               	addwf	fsr2l,f,c
  1622  00081C  5035               	movf	??_initServo+1,w,c
  1623  00081E  22DA               	addwfc	fsr2h,f,c
  1624  000820  0E59               	movlw	89
  1625  000822  6EDE               	movwf	postinc2,c
  1626  000824  0EF1               	movlw	241
  1627  000826  6EDE               	movwf	postinc2,c
  1628  000828  0E00               	movlw	0
  1629  00082A  6EDE               	movwf	postinc2,c
  1630  00082C  0E00               	movlw	0
  1631  00082E  6EDD               	movwf	postdec2,c
  1632                           
  1633                           ;servo.c: 21: initTimer(timer);
  1634  000830  C02E  F025         	movff	initServo@timer,initTimer@timer
  1635  000834  C02F  F026         	movff	initServo@timer+1,initTimer@timer+1
  1636  000838  ECE3  F004         	call	_initTimer	;wreg free
  1637                           
  1638                           ;servo.c: 22: startTimer(timer,61785);
  1639  00083C  C02E  F025         	movff	initServo@timer,startTimer@timer
  1640  000840  C02F  F026         	movff	initServo@timer+1,startTimer@timer+1
  1641  000844  0E59               	movlw	89
  1642  000846  6E27               	movwf	startTimer@val,c
  1643  000848  0EF1               	movlw	241
  1644  00084A  6E28               	movwf	startTimer@val+1,c
  1645  00084C  0E00               	movlw	0
  1646  00084E  6E29               	movwf	startTimer@val+2,c
  1647  000850  0E00               	movlw	0
  1648  000852  6E2A               	movwf	startTimer@val+3,c
  1649  000854  EC97  F004         	call	_startTimer	;wreg free
  1650                           
  1651                           ;servo.c: 23: digitalWrite(po,pi,1);
  1652  000858  C030  F025         	movff	initServo@po,digitalWrite@port
  1653  00085C  C031  F026         	movff	initServo@po+1,digitalWrite@port+1
  1654  000860  C032  F027         	movff	initServo@pi,digitalWrite@pin
  1655  000864  C033  F028         	movff	initServo@pi+1,digitalWrite@pin+1
  1656  000868  0E00               	movlw	0
  1657  00086A  6E2A               	movwf	digitalWrite@val+1,c
  1658  00086C  0E01               	movlw	1
  1659  00086E  6E29               	movwf	digitalWrite@val,c
  1660  000870  EC3A  F003         	call	_digitalWrite	;wreg free
  1661  000874  0012               	return		;funcret
  1662  000876                     __end_of_initServo:
  1663                           	opt stack 0
  1664                           tblptru	equ	0xFF8
  1665                           tblptrh	equ	0xFF7
  1666                           tblptrl	equ	0xFF6
  1667                           tablat	equ	0xFF5
  1668                           prodh	equ	0xFF4
  1669                           prodl	equ	0xFF3
  1670                           postinc0	equ	0xFEE
  1671                           wreg	equ	0xFE8
  1672                           postdec1	equ	0xFE5
  1673                           fsr1l	equ	0xFE1
  1674                           postinc2	equ	0xFDE
  1675                           postdec2	equ	0xFDD
  1676                           fsr2h	equ	0xFDA
  1677                           fsr2l	equ	0xFD9
  1678                           status	equ	0xFD8
  1679                           
  1680 ;; *************** function _startTimer *****************
  1681 ;; Defined at:
  1682 ;;		line 75 in file "timer.c"
  1683 ;; Parameters:    Size  Location     Type
  1684 ;;  timer           2   36[COMRAM] int 
  1685 ;;  val             4   38[COMRAM] long 
  1686 ;; Auto vars:     Size  Location     Type
  1687 ;;		None
  1688 ;; Return value:  Size  Location     Type
  1689 ;;                  1    wreg      void 
  1690 ;; Registers used:
  1691 ;;		wreg, status,2, status,0
  1692 ;; Tracked objects:
  1693 ;;		On entry : 0/0
  1694 ;;		On exit  : 0/0
  1695 ;;		Unchanged: 0/0
  1696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1697 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1699 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1700 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1701 ;;Total ram usage:        8 bytes
  1702 ;; Hardware stack levels used:    1
  1703 ;; Hardware stack levels required when called:    3
  1704 ;; This function calls:
  1705 ;;		Nothing
  1706 ;; This function is called by:
  1707 ;;		_initServo
  1708 ;; This function uses a non-reentrant model
  1709 ;;
  1710                           
  1711                           	psect	text9
  1712  00092E                     __ptext9:
  1713                           	opt stack 0
  1714  00092E                     _startTimer:
  1715                           	opt stack 26
  1716                           
  1717                           ;timer.c: 76: switch(timer){
  1718                           
  1719                           ;incstack = 0
  1720  00092E  D012               	goto	l2011
  1721  000930                     l342:
  1722                           
  1723                           ;timer.c: 78: TMR0H = val>>8;
  1724  000930  C028  FFD7         	movff	startTimer@val+1,4055	;volatile
  1725                           
  1726                           ;timer.c: 79: TMR0L = val;
  1727  000934  C027  FFD6         	movff	startTimer@val,4054	;volatile
  1728                           
  1729                           ;timer.c: 80: T0CON |= 1<<7;
  1730  000938  8ED5               	bsf	4053,7,c	;volatile
  1731                           
  1732                           ;timer.c: 81: break;
  1733  00093A  0012               	return	
  1734  00093C                     l344:
  1735                           
  1736                           ;timer.c: 83: TMR1H = val>>8;
  1737  00093C  C028  FFCF         	movff	startTimer@val+1,4047	;volatile
  1738                           
  1739                           ;timer.c: 84: TMR1L = val;
  1740  000940  C027  FFCE         	movff	startTimer@val,4046	;volatile
  1741                           
  1742                           ;timer.c: 85: T1CON |= 1<<0;
  1743  000944  80CD               	bsf	4045,0,c	;volatile
  1744                           
  1745                           ;timer.c: 86: break;
  1746  000946  0012               	return	
  1747  000948                     l345:
  1748                           
  1749                           ;timer.c: 88: TMR3H = val>>8;
  1750  000948  C028  FFB3         	movff	startTimer@val+1,4019	;volatile
  1751                           
  1752                           ;timer.c: 89: TMR3L = val;
  1753  00094C  C027  FFB2         	movff	startTimer@val,4018	;volatile
  1754                           
  1755                           ;timer.c: 90: T3CON |= 1<<0;
  1756  000950  80B1               	bsf	4017,0,c	;volatile
  1757                           
  1758                           ;timer.c: 91: }
  1759  000952  0012               	return	
  1760  000954                     l2011:
  1761  000954  C025  F02B         	movff	startTimer@timer,??_startTimer
  1762  000958  C026  F02C         	movff	startTimer@timer+1,??_startTimer+1
  1763                           
  1764                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1765                           ; Switch size 1, requested type "space"
  1766                           ; Number of cases is 1, Range of values is 0 to 0
  1767                           ; switch strategies available:
  1768                           ; Name         Instructions Cycles
  1769                           ; simple_byte            4     3 (average)
  1770                           ;	Chosen strategy is simple_byte
  1771  00095C  502C               	movf	??_startTimer+1,w,c
  1772  00095E  0A00               	xorlw	0	; case 0
  1773  000960  A4D8               	btfss	status,2,c
  1774  000962  0012               	return	
  1775                           
  1776                           ; Switch size 1, requested type "space"
  1777                           ; Number of cases is 3, Range of values is 0 to 3
  1778                           ; switch strategies available:
  1779                           ; Name         Instructions Cycles
  1780                           ; simple_byte           10     6 (average)
  1781                           ;	Chosen strategy is simple_byte
  1782  000964  502B               	movf	??_startTimer,w,c
  1783  000966  0A00               	xorlw	0	; case 0
  1784  000968  B4D8               	btfsc	status,2,c
  1785  00096A  D7E2               	goto	l342
  1786  00096C  0A01               	xorlw	1	; case 1
  1787  00096E  B4D8               	btfsc	status,2,c
  1788  000970  D7E5               	goto	l344
  1789  000972  0A02               	xorlw	2	; case 3
  1790  000974  A4D8               	btfss	status,2,c
  1791  000976  0012               	return	
  1792  000978  D7E7               	goto	l345
  1793  00097A                     __end_of_startTimer:
  1794                           	opt stack 0
  1795                           tblptru	equ	0xFF8
  1796                           tblptrh	equ	0xFF7
  1797                           tblptrl	equ	0xFF6
  1798                           tablat	equ	0xFF5
  1799                           prodh	equ	0xFF4
  1800                           prodl	equ	0xFF3
  1801                           postinc0	equ	0xFEE
  1802                           wreg	equ	0xFE8
  1803                           postdec1	equ	0xFE5
  1804                           fsr1l	equ	0xFE1
  1805                           postinc2	equ	0xFDE
  1806                           postdec2	equ	0xFDD
  1807                           fsr2h	equ	0xFDA
  1808                           fsr2l	equ	0xFD9
  1809                           status	equ	0xFD8
  1810                           
  1811 ;; *************** function _initTimer *****************
  1812 ;; Defined at:
  1813 ;;		line 52 in file "timer.c"
  1814 ;; Parameters:    Size  Location     Type
  1815 ;;  timer           2   36[COMRAM] int 
  1816 ;; Auto vars:     Size  Location     Type
  1817 ;;		None
  1818 ;; Return value:  Size  Location     Type
  1819 ;;                  1    wreg      void 
  1820 ;; Registers used:
  1821 ;;		wreg, status,2, status,0
  1822 ;; Tracked objects:
  1823 ;;		On entry : 0/0
  1824 ;;		On exit  : 0/0
  1825 ;;		Unchanged: 0/0
  1826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1827 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1829 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1830 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1831 ;;Total ram usage:        4 bytes
  1832 ;; Hardware stack levels used:    1
  1833 ;; Hardware stack levels required when called:    3
  1834 ;; This function calls:
  1835 ;;		Nothing
  1836 ;; This function is called by:
  1837 ;;		_initServo
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           	psect	text10
  1842  0009C6                     __ptext10:
  1843                           	opt stack 0
  1844  0009C6                     _initTimer:
  1845                           	opt stack 26
  1846                           
  1847                           ;timer.c: 53: switch(timer){
  1848                           
  1849                           ;incstack = 0
  1850  0009C6  D00D               	goto	l1997
  1851  0009C8                     l1981:
  1852                           
  1853                           ;timer.c: 55: T0CON = 0;
  1854  0009C8  0E00               	movlw	0
  1855  0009CA  6ED5               	movwf	4053,c	;volatile
  1856                           
  1857                           ;timer.c: 56: T0CON |= 1<<3;
  1858  0009CC  86D5               	bsf	4053,3,c	;volatile
  1859                           
  1860                           ;timer.c: 58: TMR0IE = 1;
  1861  0009CE  8AF2               	bsf	intcon,5,c	;volatile
  1862                           
  1863                           ;timer.c: 59: break;
  1864  0009D0  D01A               	goto	l335
  1865  0009D2                     l1987:
  1866                           
  1867                           ;timer.c: 61: T1CON = 0;
  1868  0009D2  0E00               	movlw	0
  1869  0009D4  6ECD               	movwf	4045,c	;volatile
  1870                           
  1871                           ;timer.c: 63: TMR1IE = 1;
  1872  0009D6  809D               	bsf	3997,0,c	;volatile
  1873                           
  1874                           ;timer.c: 64: break;
  1875  0009D8  D016               	goto	l335
  1876  0009DA                     l1991:
  1877                           
  1878                           ;timer.c: 66: T3CON = 0;
  1879  0009DA  0E00               	movlw	0
  1880  0009DC  6EB1               	movwf	4017,c	;volatile
  1881                           
  1882                           ;timer.c: 67: TMR3IE = 1;
  1883  0009DE  82A0               	bsf	4000,1,c	;volatile
  1884                           
  1885                           ;timer.c: 69: }
  1886                           
  1887                           ;timer.c: 68: break;
  1888  0009E0  D012               	goto	l335
  1889  0009E2                     l1997:
  1890  0009E2  C025  F027         	movff	initTimer@timer,??_initTimer
  1891  0009E6  C026  F028         	movff	initTimer@timer+1,??_initTimer+1
  1892                           
  1893                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1894                           ; Switch size 1, requested type "space"
  1895                           ; Number of cases is 1, Range of values is 0 to 0
  1896                           ; switch strategies available:
  1897                           ; Name         Instructions Cycles
  1898                           ; simple_byte            4     3 (average)
  1899                           ;	Chosen strategy is simple_byte
  1900  0009EA  5028               	movf	??_initTimer+1,w,c
  1901  0009EC  0A00               	xorlw	0	; case 0
  1902  0009EE  A4D8               	btfss	status,2,c
  1903  0009F0  D00A               	goto	l335
  1904                           
  1905                           ; Switch size 1, requested type "space"
  1906                           ; Number of cases is 3, Range of values is 0 to 3
  1907                           ; switch strategies available:
  1908                           ; Name         Instructions Cycles
  1909                           ; simple_byte           10     6 (average)
  1910                           ;	Chosen strategy is simple_byte
  1911  0009F2  5027               	movf	??_initTimer,w,c
  1912  0009F4  0A00               	xorlw	0	; case 0
  1913  0009F6  B4D8               	btfsc	status,2,c
  1914  0009F8  D7E7               	goto	l1981
  1915  0009FA  0A01               	xorlw	1	; case 1
  1916  0009FC  B4D8               	btfsc	status,2,c
  1917  0009FE  D7E9               	goto	l1987
  1918  000A00  0A02               	xorlw	2	; case 3
  1919  000A02  B4D8               	btfsc	status,2,c
  1920  000A04  D7EA               	goto	l1991
  1921  000A06                     l335:
  1922                           
  1923                           ;timer.c: 70: PEIE = 1;
  1924  000A06  8CF2               	bsf	intcon,6,c	;volatile
  1925                           
  1926                           ;timer.c: 71: (INTCONbits.GIE = 1);
  1927  000A08  8EF2               	bsf	intcon,7,c	;volatile
  1928  000A0A  0012               	return		;funcret
  1929  000A0C                     __end_of_initTimer:
  1930                           	opt stack 0
  1931                           tblptru	equ	0xFF8
  1932                           tblptrh	equ	0xFF7
  1933                           tblptrl	equ	0xFF6
  1934                           tablat	equ	0xFF5
  1935                           prodh	equ	0xFF4
  1936                           prodl	equ	0xFF3
  1937                           intcon	equ	0xFF2
  1938                           postinc0	equ	0xFEE
  1939                           wreg	equ	0xFE8
  1940                           postdec1	equ	0xFE5
  1941                           fsr1l	equ	0xFE1
  1942                           postinc2	equ	0xFDE
  1943                           postdec2	equ	0xFDD
  1944                           fsr2h	equ	0xFDA
  1945                           fsr2l	equ	0xFD9
  1946                           status	equ	0xFD8
  1947                           
  1948 ;; *************** function _digitalWrite *****************
  1949 ;; Defined at:
  1950 ;;		line 53 in file "iopin.c"
  1951 ;; Parameters:    Size  Location     Type
  1952 ;;  port            2   36[COMRAM] int 
  1953 ;;  pin             2   38[COMRAM] int 
  1954 ;;  val             2   40[COMRAM] int 
  1955 ;; Auto vars:     Size  Location     Type
  1956 ;;		None
  1957 ;; Return value:  Size  Location     Type
  1958 ;;                  1    wreg      void 
  1959 ;; Registers used:
  1960 ;;		wreg, status,2, status,0
  1961 ;; Tracked objects:
  1962 ;;		On entry : 0/0
  1963 ;;		On exit  : 0/0
  1964 ;;		Unchanged: 0/0
  1965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1966 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1968 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1969 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1970 ;;Total ram usage:        9 bytes
  1971 ;; Hardware stack levels used:    1
  1972 ;; Hardware stack levels required when called:    3
  1973 ;; This function calls:
  1974 ;;		Nothing
  1975 ;; This function is called by:
  1976 ;;		_initServo
  1977 ;; This function uses a non-reentrant model
  1978 ;;
  1979                           
  1980                           	psect	text11
  1981  000674                     __ptext11:
  1982                           	opt stack 0
  1983  000674                     _digitalWrite:
  1984                           	opt stack 26
  1985                           
  1986                           ;iopin.c: 54: pin = 1 << pin;
  1987                           
  1988                           ;incstack = 0
  1989  000674  C027  F02B         	movff	digitalWrite@pin,??_digitalWrite
  1990  000678  0E01               	movlw	1
  1991  00067A  6E2C               	movwf	(??_digitalWrite+1)& (0+255),c
  1992  00067C  0E00               	movlw	0
  1993  00067E  6E2D               	movwf	(??_digitalWrite+2)& (0+255),c
  1994  000680  2A2B               	incf	??_digitalWrite,f,c
  1995  000682  D003               	goto	u1004
  1996  000684                     u1005:
  1997  000684  90D8               	bcf	status,0,c
  1998  000686  362C               	rlcf	??_digitalWrite+1,f,c
  1999  000688  362D               	rlcf	??_digitalWrite+2,f,c
  2000  00068A                     u1004:
  2001  00068A  2E2B               	decfsz	??_digitalWrite,f,c
  2002  00068C  D7FB               	goto	u1005
  2003  00068E  C02C  F027         	movff	??_digitalWrite+1,digitalWrite@pin
  2004  000692  C02D  F028         	movff	??_digitalWrite+2,digitalWrite@pin+1
  2005                           
  2006                           ;iopin.c: 55: if(val == 0){
  2007  000696  5029               	movf	digitalWrite@val,w,c
  2008  000698  102A               	iorwf	digitalWrite@val+1,w,c
  2009  00069A  A4D8               	btfss	status,2,c
  2010  00069C  D02B               	goto	l1973
  2011                           
  2012                           ;iopin.c: 56: pin ^= 0xff;
  2013  00069E  0EFF               	movlw	255
  2014  0006A0  1A27               	xorwf	digitalWrite@pin,f,c
  2015                           
  2016                           ;iopin.c: 57: }
  2017                           ;iopin.c: 59: switch(port){
  2018  0006A2  D028               	goto	l1973
  2019  0006A4                     l1949:
  2020  0006A4  0429               	decf	digitalWrite@val,w,c
  2021  0006A6  102A               	iorwf	digitalWrite@val+1,w,c
  2022  0006A8  A4D8               	btfss	status,2,c
  2023  0006AA  D003               	goto	l1953
  2024  0006AC  5027               	movf	digitalWrite@pin,w,c
  2025  0006AE  1289               	iorwf	3977,f,c	;volatile
  2026  0006B0  0012               	return	
  2027  0006B2                     l1953:
  2028                           
  2029                           ;iopin.c: 61: else LATA &= pin;
  2030  0006B2  5027               	movf	digitalWrite@pin,w,c
  2031  0006B4  1689               	andwf	3977,f,c	;volatile
  2032                           
  2033                           ;iopin.c: 62: break;
  2034  0006B6  0012               	return	
  2035  0006B8                     l1955:
  2036  0006B8  0429               	decf	digitalWrite@val,w,c
  2037  0006BA  102A               	iorwf	digitalWrite@val+1,w,c
  2038  0006BC  A4D8               	btfss	status,2,c
  2039  0006BE  D003               	goto	l1959
  2040  0006C0  5027               	movf	digitalWrite@pin,w,c
  2041  0006C2  128A               	iorwf	3978,f,c	;volatile
  2042  0006C4  0012               	return	
  2043  0006C6                     l1959:
  2044                           
  2045                           ;iopin.c: 64: else LATB &= pin;
  2046  0006C6  5027               	movf	digitalWrite@pin,w,c
  2047  0006C8  168A               	andwf	3978,f,c	;volatile
  2048                           
  2049                           ;iopin.c: 65: break;
  2050  0006CA  0012               	return	
  2051  0006CC                     l1961:
  2052  0006CC  0429               	decf	digitalWrite@val,w,c
  2053  0006CE  102A               	iorwf	digitalWrite@val+1,w,c
  2054  0006D0  A4D8               	btfss	status,2,c
  2055  0006D2  D003               	goto	l1965
  2056  0006D4  5027               	movf	digitalWrite@pin,w,c
  2057  0006D6  128B               	iorwf	3979,f,c	;volatile
  2058  0006D8  0012               	return	
  2059  0006DA                     l1965:
  2060                           
  2061                           ;iopin.c: 67: else LATC &= pin;
  2062  0006DA  5027               	movf	digitalWrite@pin,w,c
  2063  0006DC  168B               	andwf	3979,f,c	;volatile
  2064                           
  2065                           ;iopin.c: 68: break;
  2066  0006DE  0012               	return	
  2067  0006E0                     l1967:
  2068  0006E0  0429               	decf	digitalWrite@val,w,c
  2069  0006E2  102A               	iorwf	digitalWrite@val+1,w,c
  2070  0006E4  A4D8               	btfss	status,2,c
  2071  0006E6  D003               	goto	l1971
  2072  0006E8  5027               	movf	digitalWrite@pin,w,c
  2073  0006EA  128C               	iorwf	3980,f,c	;volatile
  2074  0006EC  0012               	return	
  2075  0006EE                     l1971:
  2076                           
  2077                           ;iopin.c: 70: else LATD &= pin;
  2078  0006EE  5027               	movf	digitalWrite@pin,w,c
  2079  0006F0  168C               	andwf	3980,f,c	;volatile
  2080                           
  2081                           ;iopin.c: 71: }
  2082  0006F2  0012               	return	
  2083  0006F4                     l1973:
  2084  0006F4  C025  F02B         	movff	digitalWrite@port,??_digitalWrite
  2085  0006F8  C026  F02C         	movff	digitalWrite@port+1,??_digitalWrite+1
  2086                           
  2087                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2088                           ; Switch size 1, requested type "space"
  2089                           ; Number of cases is 1, Range of values is 0 to 0
  2090                           ; switch strategies available:
  2091                           ; Name         Instructions Cycles
  2092                           ; simple_byte            4     3 (average)
  2093                           ;	Chosen strategy is simple_byte
  2094  0006FC  502C               	movf	??_digitalWrite+1,w,c
  2095  0006FE  0A00               	xorlw	0	; case 0
  2096  000700  A4D8               	btfss	status,2,c
  2097  000702  0012               	return	
  2098                           
  2099                           ; Switch size 1, requested type "space"
  2100                           ; Number of cases is 4, Range of values is 0 to 3
  2101                           ; switch strategies available:
  2102                           ; Name         Instructions Cycles
  2103                           ; simple_byte           13     7 (average)
  2104                           ;	Chosen strategy is simple_byte
  2105  000704  502B               	movf	??_digitalWrite,w,c
  2106  000706  0A00               	xorlw	0	; case 0
  2107  000708  B4D8               	btfsc	status,2,c
  2108  00070A  D7CC               	goto	l1949
  2109  00070C  0A01               	xorlw	1	; case 1
  2110  00070E  B4D8               	btfsc	status,2,c
  2111  000710  D7D3               	goto	l1955
  2112  000712  0A03               	xorlw	3	; case 2
  2113  000714  B4D8               	btfsc	status,2,c
  2114  000716  D7DA               	goto	l1961
  2115  000718  0A01               	xorlw	1	; case 3
  2116  00071A  A4D8               	btfss	status,2,c
  2117  00071C  0012               	return	
  2118  00071E  D7E0               	goto	l1967
  2119  000720                     __end_of_digitalWrite:
  2120                           	opt stack 0
  2121                           tblptru	equ	0xFF8
  2122                           tblptrh	equ	0xFF7
  2123                           tblptrl	equ	0xFF6
  2124                           tablat	equ	0xFF5
  2125                           prodh	equ	0xFF4
  2126                           prodl	equ	0xFF3
  2127                           intcon	equ	0xFF2
  2128                           postinc0	equ	0xFEE
  2129                           wreg	equ	0xFE8
  2130                           postdec1	equ	0xFE5
  2131                           fsr1l	equ	0xFE1
  2132                           postinc2	equ	0xFDE
  2133                           postdec2	equ	0xFDD
  2134                           fsr2h	equ	0xFDA
  2135                           fsr2l	equ	0xFD9
  2136                           status	equ	0xFD8
  2137                           
  2138 ;; *************** function _initLCD *****************
  2139 ;; Defined at:
  2140 ;;		line 15 in file "lcd.c"
  2141 ;; Parameters:    Size  Location     Type
  2142 ;;		None
  2143 ;; Auto vars:     Size  Location     Type
  2144 ;;		None
  2145 ;; Return value:  Size  Location     Type
  2146 ;;                  1    wreg      void 
  2147 ;; Registers used:
  2148 ;;		wreg, status,2, status,0, cstack
  2149 ;; Tracked objects:
  2150 ;;		On entry : 0/0
  2151 ;;		On exit  : 0/0
  2152 ;;		Unchanged: 0/0
  2153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2156 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2157 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2158 ;;Total ram usage:        1 bytes
  2159 ;; Hardware stack levels used:    1
  2160 ;; Hardware stack levels required when called:    5
  2161 ;; This function calls:
  2162 ;;		_lcdInst
  2163 ;; This function is called by:
  2164 ;;		_main
  2165 ;; This function uses a non-reentrant model
  2166 ;;
  2167                           
  2168                           	psect	text12
  2169  000A0C                     __ptext12:
  2170                           	opt stack 0
  2171  000A0C                     _initLCD:
  2172                           	opt stack 25
  2173                           
  2174                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
  2175                           
  2176                           ;incstack = 0
  2177  000A0C  0E31               	movlw	49
  2178  000A0E  6E29               	movwf	??_initLCD& (0+255),c
  2179  000A10  0EB2               	movlw	178
  2180  000A12                     u1957:
  2181  000A12  2EE8               	decfsz	wreg,f,c
  2182  000A14  D7FE               	bra	u1957
  2183  000A16  2E29               	decfsz	??_initLCD& (0+255),f,c
  2184  000A18  D7FC               	bra	u1957
  2185  000A1A  D000               	nop2	
  2186                           
  2187                           ;lcd.c: 18: lcdInst(0b00110011);
  2188  000A1C  0E33               	movlw	51
  2189  000A1E  ECB3  F005         	call	_lcdInst
  2190                           
  2191                           ;lcd.c: 19: lcdInst(0b00110010);
  2192  000A22  0E32               	movlw	50
  2193  000A24  ECB3  F005         	call	_lcdInst
  2194                           
  2195                           ;lcd.c: 20: lcdInst(0b00101000);
  2196  000A28  0E28               	movlw	40
  2197  000A2A  ECB3  F005         	call	_lcdInst
  2198                           
  2199                           ;lcd.c: 21: lcdInst(0b00001111);
  2200  000A2E  0E0F               	movlw	15
  2201  000A30  ECB3  F005         	call	_lcdInst
  2202                           
  2203                           ;lcd.c: 22: lcdInst(0b00000110);
  2204  000A34  0E06               	movlw	6
  2205  000A36  ECB3  F005         	call	_lcdInst
  2206                           
  2207                           ;lcd.c: 23: lcdInst(0b00000001);
  2208  000A3A  0E01               	movlw	1
  2209  000A3C  ECB3  F005         	call	_lcdInst
  2210                           
  2211                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
  2212  000A40  0E31               	movlw	49
  2213  000A42  6E29               	movwf	??_initLCD& (0+255),c
  2214  000A44  0EB2               	movlw	178
  2215  000A46                     u1967:
  2216  000A46  2EE8               	decfsz	wreg,f,c
  2217  000A48  D7FE               	bra	u1967
  2218  000A4A  2E29               	decfsz	??_initLCD& (0+255),f,c
  2219  000A4C  D7FC               	bra	u1967
  2220  000A4E  D000               	nop2	
  2221  000A50  0012               	return		;funcret
  2222  000A52                     __end_of_initLCD:
  2223                           	opt stack 0
  2224                           tblptru	equ	0xFF8
  2225                           tblptrh	equ	0xFF7
  2226                           tblptrl	equ	0xFF6
  2227                           tablat	equ	0xFF5
  2228                           prodh	equ	0xFF4
  2229                           prodl	equ	0xFF3
  2230                           intcon	equ	0xFF2
  2231                           postinc0	equ	0xFEE
  2232                           wreg	equ	0xFE8
  2233                           postdec1	equ	0xFE5
  2234                           fsr1l	equ	0xFE1
  2235                           postinc2	equ	0xFDE
  2236                           postdec2	equ	0xFDD
  2237                           fsr2h	equ	0xFDA
  2238                           fsr2l	equ	0xFD9
  2239                           status	equ	0xFD8
  2240                           
  2241 ;; *************** function _dateTime *****************
  2242 ;; Defined at:
  2243 ;;		line 12 in file "interface.c"
  2244 ;; Parameters:    Size  Location     Type
  2245 ;;		None
  2246 ;; Auto vars:     Size  Location     Type
  2247 ;;		None
  2248 ;; Return value:  Size  Location     Type
  2249 ;;                  1    wreg      void 
  2250 ;; Registers used:
  2251 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2252 ;; Tracked objects:
  2253 ;;		On entry : 0/0
  2254 ;;		On exit  : 0/0
  2255 ;;		Unchanged: 0/0
  2256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2261 ;;Total ram usage:        0 bytes
  2262 ;; Hardware stack levels used:    1
  2263 ;; Hardware stack levels required when called:    8
  2264 ;; This function calls:
  2265 ;;		_lcdClear
  2266 ;;		_printf
  2267 ;; This function is called by:
  2268 ;;		_main
  2269 ;; This function uses a non-reentrant model
  2270 ;;
  2271                           
  2272                           	psect	text13
  2273  000C00                     __ptext13:
  2274                           	opt stack 0
  2275  000C00                     _dateTime:
  2276                           	opt stack 22
  2277                           
  2278                           ;interface.c: 13: lcdClear();
  2279                           
  2280                           ;incstack = 0
  2281  000C00  EC13  F006         	call	_lcdClear	;wreg free
  2282                           
  2283                           ;interface.c: 14: printf("  hh:mm:ss      \n");
  2284  000C04  0E2E               	movlw	low STR_3
  2285  000C06  6E2C               	movwf	printf@f,c
  2286  000C08  0EFF               	movlw	high STR_3
  2287  000C0A  6E2D               	movwf	printf@f+1,c
  2288  000C0C  ECA1  F001         	call	_printf	;wreg free
  2289                           
  2290                           ;interface.c: 15: printf("  mm:dd:yy    A>");
  2291  000C10  0EDC               	movlw	low STR_4
  2292  000C12  6E2C               	movwf	printf@f,c
  2293  000C14  0EFF               	movlw	high STR_4
  2294  000C16  6E2D               	movwf	printf@f+1,c
  2295  000C18  ECA1  F001         	call	_printf	;wreg free
  2296  000C1C  0012               	return		;funcret
  2297  000C1E                     __end_of_dateTime:
  2298                           	opt stack 0
  2299                           tblptru	equ	0xFF8
  2300                           tblptrh	equ	0xFF7
  2301                           tblptrl	equ	0xFF6
  2302                           tablat	equ	0xFF5
  2303                           prodh	equ	0xFF4
  2304                           prodl	equ	0xFF3
  2305                           intcon	equ	0xFF2
  2306                           postinc0	equ	0xFEE
  2307                           wreg	equ	0xFE8
  2308                           postdec1	equ	0xFE5
  2309                           fsr1l	equ	0xFE1
  2310                           postinc2	equ	0xFDE
  2311                           postdec2	equ	0xFDD
  2312                           fsr2h	equ	0xFDA
  2313                           fsr2l	equ	0xFD9
  2314                           status	equ	0xFD8
  2315                           
  2316 ;; *************** function _printf *****************
  2317 ;; Defined at:
  2318 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  2319 ;; Parameters:    Size  Location     Type
  2320 ;;  f               2   43[COMRAM] PTR const unsigned char 
  2321 ;;		 -> STR_14(17), STR_13(18), STR_12(17), STR_11(18), 
  2322 ;;		 -> STR_10(17), STR_9(19), STR_8(17), STR_7(18), 
  2323 ;;		 -> STR_6(17), STR_5(18), STR_4(17), STR_3(18), 
  2324 ;;		 -> STR_2(9), STR_1(8), 
  2325 ;; Auto vars:     Size  Location     Type
  2326 ;;  idx             1    1[BANK0 ] unsigned char 
  2327 ;;  tmpval          4    0        struct .
  2328 ;;  cp              3    0        PTR const unsigned char 
  2329 ;;  ap              2    5[BANK0 ] PTR void [1]
  2330 ;;		 -> ?_printf(2), 
  2331 ;;  val             2    2[BANK0 ] unsigned int 
  2332 ;;  len             2    0        unsigned int 
  2333 ;;  c               1    7[BANK0 ] char 
  2334 ;;  prec            1    4[BANK0 ] char 
  2335 ;;  flag            1    0[BANK0 ] unsigned char 
  2336 ;; Return value:  Size  Location     Type
  2337 ;;                  2   43[COMRAM] int 
  2338 ;; Registers used:
  2339 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2340 ;; Tracked objects:
  2341 ;;		On entry : 0/0
  2342 ;;		On exit  : 0/0
  2343 ;;		Unchanged: 0/0
  2344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2345 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2346 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2348 ;;      Totals:         6       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2349 ;;Total ram usage:       14 bytes
  2350 ;; Hardware stack levels used:    1
  2351 ;; Hardware stack levels required when called:    7
  2352 ;; This function calls:
  2353 ;;		___lwdiv
  2354 ;;		_putch
  2355 ;; This function is called by:
  2356 ;;		_dateTime
  2357 ;;		_mainMenu
  2358 ;;		_runSelect
  2359 ;;		_runMenu
  2360 ;;		_runTime
  2361 ;;		_runStats
  2362 ;;		_testFrequency
  2363 ;; This function uses a non-reentrant model
  2364 ;;
  2365                           
  2366                           	psect	text14
  2367  000342                     __ptext14:
  2368                           	opt stack 0
  2369  000342                     _printf:
  2370                           	opt stack 22
  2371                           
  2372                           ;doprnt.c: 466: va_list ap;
  2373                           ;doprnt.c: 499: signed char c;
  2374                           ;doprnt.c: 506: signed char prec;
  2375                           ;doprnt.c: 508: unsigned char flag;
  2376                           ;doprnt.c: 523: union {
  2377                           ;doprnt.c: 524: unsigned long vd;
  2378                           ;doprnt.c: 525: double integ;
  2379                           ;doprnt.c: 526: } tmpval;
  2380                           ;doprnt.c: 528: unsigned int val;
  2381                           ;doprnt.c: 529: unsigned len;
  2382                           ;doprnt.c: 530: const char * cp;
  2383                           ;doprnt.c: 533: *ap = __va_start();
  2384                           
  2385                           ;incstack = 0
  2386  000342  0E2E               	movlw	low (?_printf+2)
  2387  000344  0100               	movlb	0	; () banked
  2388  000346  6F85               	movwf	printf@ap& (0+255),b
  2389  000348  0E00               	movlw	high (?_printf+2)
  2390  00034A  0100               	movlb	0	; () banked
  2391  00034C  6F86               	movwf	(printf@ap+1)& (0+255),b
  2392                           
  2393                           ;doprnt.c: 536: while(c = *f++) {
  2394  00034E  D090               	goto	l2471
  2395  000350                     l2431:
  2396                           
  2397                           ; BSR set to: 0
  2398                           ;doprnt.c: 538: if(c != '%')
  2399  000350  0E25               	movlw	37
  2400  000352  0100               	movlb	0	; () banked
  2401  000354  1987               	xorwf	printf@c& (0+255),w,b
  2402  000356  B4D8               	btfsc	status,2,c
  2403  000358  D005               	goto	l2435
  2404                           
  2405                           ; BSR set to: 0
  2406                           ;doprnt.c: 540: {
  2407                           ;doprnt.c: 541: (putch(c) );
  2408  00035A  0100               	movlb	0	; () banked
  2409  00035C  5187               	movf	printf@c& (0+255),w,b
  2410  00035E  ECA2  F005         	call	_putch
  2411                           
  2412                           ;doprnt.c: 542: continue;
  2413  000362  D086               	goto	l2471
  2414  000364                     l2435:
  2415                           
  2416                           ;doprnt.c: 543: }
  2417                           ;doprnt.c: 548: flag = 0;
  2418  000364  0E00               	movlw	0
  2419  000366  0100               	movlb	0	; () banked
  2420  000368  6F80               	movwf	printf@flag& (0+255),b
  2421                           
  2422                           ;doprnt.c: 635: switch(c = *f++) {
  2423  00036A  D011               	goto	l2445
  2424  00036C                     l2437:
  2425                           
  2426                           ; BSR set to: 0
  2427                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2428  00036C  C085  FFD9         	movff	printf@ap,fsr2l
  2429  000370  C086  FFDA         	movff	printf@ap+1,fsr2h
  2430  000374  50DF               	movf	indf2,w,c
  2431  000376  0100               	movlb	0	; () banked
  2432  000378  6F87               	movwf	printf@c& (0+255),b
  2433                           
  2434                           ; BSR set to: 0
  2435  00037A  0E02               	movlw	2
  2436  00037C  0100               	movlb	0	; () banked
  2437  00037E  2785               	addwf	printf@ap& (0+255),f,b
  2438  000380  0E00               	movlw	0
  2439  000382  2386               	addwfc	(printf@ap+1)& (0+255),f,b
  2440  000384                     l2441:
  2441                           
  2442                           ; BSR set to: 0
  2443                           ;doprnt.c: 809: (putch(c) );
  2444  000384  0100               	movlb	0	; () banked
  2445  000386  5187               	movf	printf@c& (0+255),w,b
  2446  000388  ECA2  F005         	call	_putch
  2447                           
  2448                           ;doprnt.c: 810: continue;
  2449  00038C  D071               	goto	l2471
  2450  00038E                     l2445:
  2451  00038E  C02C  FFF6         	movff	printf@f,tblptrl
  2452  000392  C02D  FFF7         	movff	printf@f+1,tblptrh
  2453  000396  4A2C               	infsnz	printf@f,f,c
  2454  000398  2A2D               	incf	printf@f+1,f,c
  2455  00039A                     	if	0	;tblptru may be non-zero
  2456  00039A                     	endif
  2457  00039A                     	if	0	;tblptru may be non-zero
  2458  00039A                     	endif
  2459  00039A  0008               	tblrd		*
  2460  00039C  CFF5 F087          	movff	tablat,printf@c
  2461  0003A0  0100               	movlb	0	; () banked
  2462  0003A2  5187               	movf	printf@c& (0+255),w,b
  2463                           
  2464                           ; Switch size 1, requested type "space"
  2465                           ; Number of cases is 3, Range of values is 0 to 120
  2466                           ; switch strategies available:
  2467                           ; Name         Instructions Cycles
  2468                           ; simple_byte           10     6 (average)
  2469                           ;	Chosen strategy is simple_byte
  2470  0003A4  0A00               	xorlw	0	; case 0
  2471  0003A6  B4D8               	btfsc	status,2,c
  2472  0003A8  0012               	return	
  2473  0003AA  0A63               	xorlw	99	; case 99
  2474  0003AC  B4D8               	btfsc	status,2,c
  2475  0003AE  D7DE               	goto	l2437
  2476  0003B0  0A1B               	xorlw	27	; case 120
  2477  0003B2  A4D8               	btfss	status,2,c
  2478  0003B4  D7E7               	goto	l2441
  2479                           
  2480                           ;doprnt.c: 1273: {
  2481                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2482                           
  2483                           ; BSR set to: 0
  2484  0003B6  C085  FFD9         	movff	printf@ap,fsr2l
  2485  0003BA  C086  FFDA         	movff	printf@ap+1,fsr2h
  2486  0003BE  CFDE F082          	movff	postinc2,printf@val
  2487  0003C2  CFDD F083          	movff	postdec2,printf@val+1
  2488  0003C6  0E02               	movlw	2
  2489  0003C8  0100               	movlb	0	; () banked
  2490  0003CA  2785               	addwf	printf@ap& (0+255),f,b
  2491  0003CC  0E00               	movlw	0
  2492  0003CE  2386               	addwfc	(printf@ap+1)& (0+255),f,b
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;doprnt.c: 1287: }
  2496                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2497  0003D0  0E01               	movlw	1
  2498  0003D2  0100               	movlb	0	; () banked
  2499  0003D4  6F87               	movwf	printf@c& (0+255),b
  2500  0003D6                     l2453:
  2501                           
  2502                           ; BSR set to: 0
  2503  0003D6  0E04               	movlw	4
  2504  0003D8  0100               	movlb	0	; () banked
  2505  0003DA  1987               	xorwf	printf@c& (0+255),w,b
  2506  0003DC  B4D8               	btfsc	status,2,c
  2507  0003DE  D016               	goto	l529
  2508                           
  2509                           ; BSR set to: 0
  2510                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2511                           
  2512                           ; BSR set to: 0
  2513                           
  2514                           ; BSR set to: 0
  2515  0003E0  0100               	movlb	0	; () banked
  2516  0003E2  5187               	movf	printf@c& (0+255),w,b
  2517  0003E4  0D02               	mullw	2
  2518  0003E6  0EFA               	movlw	low _hexpowers
  2519  0003E8  24F3               	addwf	prodl,w,c
  2520  0003EA  6EF6               	movwf	tblptrl,c
  2521  0003EC  0EFE               	movlw	high _hexpowers
  2522  0003EE  20F4               	addwfc	prodh,w,c
  2523  0003F0  6EF7               	movwf	tblptrh,c
  2524  0003F2                     	if	0	;There are less than 3 active tblptr bytes
  2525  0003F2                     	endif
  2526  0003F2  0009               	tblrd		*+
  2527  0003F4  50F5               	movf	tablat,w,c
  2528  0003F6  0100               	movlb	0	; () banked
  2529  0003F8  5D82               	subwf	printf@val& (0+255),w,b
  2530  0003FA  0009               	tblrd		*+
  2531  0003FC  50F5               	movf	tablat,w,c
  2532  0003FE  0100               	movlb	0	; () banked
  2533  000400  5983               	subwfb	(printf@val+1)& (0+255),w,b
  2534  000402  A0D8               	btfss	status,0,c
  2535  000404  D003               	goto	l529
  2536                           
  2537                           ; BSR set to: 0
  2538                           
  2539                           ; BSR set to: 0
  2540                           
  2541                           ; BSR set to: 0
  2542                           ;doprnt.c: 1318: break;
  2543  000406  0100               	movlb	0	; () banked
  2544  000408  2B87               	incf	printf@c& (0+255),f,b
  2545  00040A  D7E5               	goto	l2453
  2546  00040C                     l529:
  2547                           
  2548                           ; BSR set to: 0
  2549                           ;doprnt.c: 1422: {
  2550                           ;doprnt.c: 1469: }
  2551                           ;doprnt.c: 1472: prec = c;
  2552  00040C  C087  F084         	movff	printf@c,printf@prec
  2553                           
  2554                           ;doprnt.c: 1474: while(prec--) {
  2555  000410  D029               	goto	l531
  2556  000412                     l2465:
  2557                           
  2558                           ; BSR set to: 0
  2559                           ;doprnt.c: 1478: {
  2560                           ;doprnt.c: 1499: {
  2561                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2562  000412  C082  F025         	movff	printf@val,___lwdiv@dividend
  2563  000416  C083  F026         	movff	printf@val+1,___lwdiv@dividend+1
  2564  00041A  0100               	movlb	0	; () banked
  2565  00041C  5184               	movf	printf@prec& (0+255),w,b
  2566  00041E  0D02               	mullw	2
  2567  000420  0EFA               	movlw	low _hexpowers
  2568  000422  24F3               	addwf	prodl,w,c
  2569  000424  6EF6               	movwf	tblptrl,c
  2570  000426  0EFE               	movlw	high _hexpowers
  2571  000428  20F4               	addwfc	prodh,w,c
  2572  00042A  6EF7               	movwf	tblptrh,c
  2573  00042C                     	if	0	;There are less than 3 active tblptr bytes
  2574  00042C                     	endif
  2575  00042C  0009               	tblrd		*+
  2576  00042E  CFF5 F027          	movff	tablat,___lwdiv@divisor
  2577  000432  000A               	tblrd		*-
  2578  000434  CFF5 F028          	movff	tablat,___lwdiv@divisor+1
  2579  000438  EC6E  F004         	call	___lwdiv	;wreg free
  2580  00043C  5025               	movf	?___lwdiv,w,c
  2581  00043E  0B0F               	andlw	15
  2582  000440  0100               	movlb	0	; () banked
  2583  000442  6F81               	movwf	printf@idx& (0+255),b
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2587  000444  0100               	movlb	0	; () banked
  2588  000446  5181               	movf	printf@idx& (0+255),w,b
  2589  000448  0D01               	mullw	1
  2590  00044A  0E76               	movlw	low STR_15
  2591  00044C  24F3               	addwf	prodl,w,c
  2592  00044E  6EF6               	movwf	tblptrl,c
  2593  000450  0EFF               	movlw	high STR_15
  2594  000452  20F4               	addwfc	prodh,w,c
  2595  000454  6EF7               	movwf	tblptrh,c
  2596  000456                     	if	0	;There are less than 3 active tblptr bytes
  2597  000456                     	endif
  2598  000456  0008               	tblrd		*
  2599  000458  CFF5 F087          	movff	tablat,printf@c
  2600                           
  2601                           ; BSR set to: 0
  2602                           ;doprnt.c: 1508: }
  2603                           ;doprnt.c: 1523: }
  2604                           ;doprnt.c: 1524: (putch(c) );
  2605  00045C  0100               	movlb	0	; () banked
  2606  00045E  5187               	movf	printf@c& (0+255),w,b
  2607  000460  ECA2  F005         	call	_putch
  2608  000464                     l531:
  2609  000464  0100               	movlb	0	; () banked
  2610  000466  0784               	decf	printf@prec& (0+255),f,b
  2611  000468  0100               	movlb	0	; () banked
  2612  00046A  2984               	incf	printf@prec& (0+255),w,b
  2613  00046C  A4D8               	btfss	status,2,c
  2614  00046E  D7D1               	goto	l2465
  2615  000470                     l2471:
  2616  000470  C02C  FFF6         	movff	printf@f,tblptrl
  2617  000474  C02D  FFF7         	movff	printf@f+1,tblptrh
  2618  000478  4A2C               	infsnz	printf@f,f,c
  2619  00047A  2A2D               	incf	printf@f+1,f,c
  2620  00047C                     	if	0	;tblptru may be non-zero
  2621  00047C                     	endif
  2622  00047C                     	if	0	;tblptru may be non-zero
  2623  00047C                     	endif
  2624  00047C  0008               	tblrd		*
  2625  00047E  CFF5 F087          	movff	tablat,printf@c
  2626  000482  0100               	movlb	0	; () banked
  2627  000484  5187               	movf	printf@c& (0+255),w,b
  2628  000486  B4D8               	btfsc	status,2,c
  2629  000488  0012               	return	
  2630  00048A  D762               	goto	l2431
  2631  00048C                     __end_of_printf:
  2632                           	opt stack 0
  2633                           tblptru	equ	0xFF8
  2634                           tblptrh	equ	0xFF7
  2635                           tblptrl	equ	0xFF6
  2636                           tablat	equ	0xFF5
  2637                           prodh	equ	0xFF4
  2638                           prodl	equ	0xFF3
  2639                           intcon	equ	0xFF2
  2640                           postinc0	equ	0xFEE
  2641                           wreg	equ	0xFE8
  2642                           postdec1	equ	0xFE5
  2643                           fsr1l	equ	0xFE1
  2644                           indf2	equ	0xFDF
  2645                           postinc2	equ	0xFDE
  2646                           postdec2	equ	0xFDD
  2647                           fsr2h	equ	0xFDA
  2648                           fsr2l	equ	0xFD9
  2649                           status	equ	0xFD8
  2650                           
  2651 ;; *************** function _putch *****************
  2652 ;; Defined at:
  2653 ;;		line 35 in file "lcd.c"
  2654 ;; Parameters:    Size  Location     Type
  2655 ;;  data            1    wreg     unsigned char 
  2656 ;; Auto vars:     Size  Location     Type
  2657 ;;  data            1   40[COMRAM] unsigned char 
  2658 ;; Return value:  Size  Location     Type
  2659 ;;                  1    wreg      void 
  2660 ;; Registers used:
  2661 ;;		wreg, status,2, status,0, cstack
  2662 ;; Tracked objects:
  2663 ;;		On entry : 0/0
  2664 ;;		On exit  : 0/0
  2665 ;;		Unchanged: 0/0
  2666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2668 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2670 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2671 ;;Total ram usage:        1 bytes
  2672 ;; Hardware stack levels used:    1
  2673 ;; Hardware stack levels required when called:    6
  2674 ;; This function calls:
  2675 ;;		_lcdNewline
  2676 ;;		_lcdNibble
  2677 ;; This function is called by:
  2678 ;;		_printf
  2679 ;; This function uses a non-reentrant model
  2680 ;;
  2681                           
  2682                           	psect	text15
  2683  000B44                     __ptext15:
  2684                           	opt stack 0
  2685  000B44                     _putch:
  2686                           	opt stack 22
  2687                           
  2688                           ; BSR set to: 0
  2689                           ;incstack = 0
  2690                           ;putch@data stored from wreg
  2691  000B44  6E29               	movwf	putch@data,c
  2692                           
  2693                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  2694  000B46  0E0A               	movlw	10
  2695  000B48  1829               	xorwf	putch@data,w,c
  2696  000B4A  A4D8               	btfss	status,2,c
  2697  000B4C  D003               	goto	l132
  2698  000B4E  EC0F  F006         	call	_lcdNewline	;wreg free
  2699  000B52  0012               	return	
  2700  000B54                     l132:
  2701                           
  2702                           ;lcd.c: 37: else
  2703                           ;lcd.c: 38: {
  2704                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  2705  000B54  848C               	bsf	3980,2,c	;volatile
  2706                           
  2707                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  2708  000B56  0E74               	movlw	116
  2709  000B58                     u1977:
  2710  000B58  2EE8               	decfsz	wreg,f,c
  2711  000B5A  D7FE               	bra	u1977
  2712  000B5C  D000               	nop2	
  2713                           
  2714                           ;lcd.c: 41: lcdNibble(data);
  2715  000B5E  5029               	movf	putch@data,w,c
  2716  000B60  EC3B  F004         	call	_lcdNibble
  2717  000B64  0012               	return	
  2718  000B66                     __end_of_putch:
  2719                           	opt stack 0
  2720                           tblptru	equ	0xFF8
  2721                           tblptrh	equ	0xFF7
  2722                           tblptrl	equ	0xFF6
  2723                           tablat	equ	0xFF5
  2724                           prodh	equ	0xFF4
  2725                           prodl	equ	0xFF3
  2726                           intcon	equ	0xFF2
  2727                           postinc0	equ	0xFEE
  2728                           wreg	equ	0xFE8
  2729                           postdec1	equ	0xFE5
  2730                           fsr1l	equ	0xFE1
  2731                           indf2	equ	0xFDF
  2732                           postinc2	equ	0xFDE
  2733                           postdec2	equ	0xFDD
  2734                           fsr2h	equ	0xFDA
  2735                           fsr2l	equ	0xFD9
  2736                           status	equ	0xFD8
  2737                           
  2738 ;; *************** function _lcdNewline *****************
  2739 ;; Defined at:
  2740 ;;		line 78 in file "lcd.c"
  2741 ;; Parameters:    Size  Location     Type
  2742 ;;		None
  2743 ;; Auto vars:     Size  Location     Type
  2744 ;;		None
  2745 ;; Return value:  Size  Location     Type
  2746 ;;                  1    wreg      void 
  2747 ;; Registers used:
  2748 ;;		wreg, status,2, status,0, cstack
  2749 ;; Tracked objects:
  2750 ;;		On entry : 0/0
  2751 ;;		On exit  : 0/0
  2752 ;;		Unchanged: 0/0
  2753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2757 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2758 ;;Total ram usage:        0 bytes
  2759 ;; Hardware stack levels used:    1
  2760 ;; Hardware stack levels required when called:    5
  2761 ;; This function calls:
  2762 ;;		_lcdInst
  2763 ;; This function is called by:
  2764 ;;		_putch
  2765 ;; This function uses a non-reentrant model
  2766 ;;
  2767                           
  2768                           	psect	text16
  2769  000C1E                     __ptext16:
  2770                           	opt stack 0
  2771  000C1E                     _lcdNewline:
  2772                           	opt stack 22
  2773                           
  2774                           ;lcd.c: 79: lcdInst(0b11000000);
  2775                           
  2776                           ;incstack = 0
  2777  000C1E  0EC0               	movlw	192
  2778  000C20  ECB3  F005         	call	_lcdInst
  2779  000C24  0012               	return		;funcret
  2780  000C26                     __end_of_lcdNewline:
  2781                           	opt stack 0
  2782                           tblptru	equ	0xFF8
  2783                           tblptrh	equ	0xFF7
  2784                           tblptrl	equ	0xFF6
  2785                           tablat	equ	0xFF5
  2786                           prodh	equ	0xFF4
  2787                           prodl	equ	0xFF3
  2788                           intcon	equ	0xFF2
  2789                           postinc0	equ	0xFEE
  2790                           wreg	equ	0xFE8
  2791                           postdec1	equ	0xFE5
  2792                           fsr1l	equ	0xFE1
  2793                           indf2	equ	0xFDF
  2794                           postinc2	equ	0xFDE
  2795                           postdec2	equ	0xFDD
  2796                           fsr2h	equ	0xFDA
  2797                           fsr2l	equ	0xFD9
  2798                           status	equ	0xFD8
  2799                           
  2800 ;; *************** function ___lwdiv *****************
  2801 ;; Defined at:
  2802 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  2803 ;; Parameters:    Size  Location     Type
  2804 ;;  dividend        2   36[COMRAM] unsigned int 
  2805 ;;  divisor         2   38[COMRAM] unsigned int 
  2806 ;; Auto vars:     Size  Location     Type
  2807 ;;  quotient        2   41[COMRAM] unsigned int 
  2808 ;;  counter         1   40[COMRAM] unsigned char 
  2809 ;; Return value:  Size  Location     Type
  2810 ;;                  2   36[COMRAM] unsigned int 
  2811 ;; Registers used:
  2812 ;;		wreg, status,2, status,0
  2813 ;; Tracked objects:
  2814 ;;		On entry : 0/0
  2815 ;;		On exit  : 0/0
  2816 ;;		Unchanged: 0/0
  2817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2818 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2819 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2821 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2822 ;;Total ram usage:        7 bytes
  2823 ;; Hardware stack levels used:    1
  2824 ;; Hardware stack levels required when called:    3
  2825 ;; This function calls:
  2826 ;;		Nothing
  2827 ;; This function is called by:
  2828 ;;		_printf
  2829 ;; This function uses a non-reentrant model
  2830 ;;
  2831                           
  2832                           	psect	text17
  2833  0008DC                     __ptext17:
  2834                           	opt stack 0
  2835  0008DC                     ___lwdiv:
  2836                           	opt stack 25
  2837                           
  2838                           ;incstack = 0
  2839  0008DC  0E00               	movlw	0
  2840  0008DE  6E2B               	movwf	___lwdiv@quotient+1,c
  2841  0008E0  0E00               	movlw	0
  2842  0008E2  6E2A               	movwf	___lwdiv@quotient,c
  2843  0008E4  5027               	movf	___lwdiv@divisor,w,c
  2844  0008E6  1028               	iorwf	___lwdiv@divisor+1,w,c
  2845  0008E8  B4D8               	btfsc	status,2,c
  2846  0008EA  D01C               	goto	l938
  2847  0008EC  0E01               	movlw	1
  2848  0008EE  6E29               	movwf	___lwdiv@counter,c
  2849  0008F0  D004               	goto	l2413
  2850  0008F2                     l2411:
  2851  0008F2  90D8               	bcf	status,0,c
  2852  0008F4  3627               	rlcf	___lwdiv@divisor,f,c
  2853  0008F6  3628               	rlcf	___lwdiv@divisor+1,f,c
  2854  0008F8  2A29               	incf	___lwdiv@counter,f,c
  2855  0008FA                     l2413:
  2856  0008FA  AE28               	btfss	___lwdiv@divisor+1,7,c
  2857  0008FC  D7FA               	goto	l2411
  2858  0008FE                     l2415:
  2859  0008FE  90D8               	bcf	status,0,c
  2860  000900  362A               	rlcf	___lwdiv@quotient,f,c
  2861  000902  362B               	rlcf	___lwdiv@quotient+1,f,c
  2862  000904  5027               	movf	___lwdiv@divisor,w,c
  2863  000906  5C25               	subwf	___lwdiv@dividend,w,c
  2864  000908  5028               	movf	___lwdiv@divisor+1,w,c
  2865  00090A  5826               	subwfb	___lwdiv@dividend+1,w,c
  2866  00090C  A0D8               	btfss	status,0,c
  2867  00090E  D005               	goto	l2423
  2868  000910  5027               	movf	___lwdiv@divisor,w,c
  2869  000912  5E25               	subwf	___lwdiv@dividend,f,c
  2870  000914  5028               	movf	___lwdiv@divisor+1,w,c
  2871  000916  5A26               	subwfb	___lwdiv@dividend+1,f,c
  2872  000918  802A               	bsf	___lwdiv@quotient,0,c
  2873  00091A                     l2423:
  2874  00091A  90D8               	bcf	status,0,c
  2875  00091C  3228               	rrcf	___lwdiv@divisor+1,f,c
  2876  00091E  3227               	rrcf	___lwdiv@divisor,f,c
  2877  000920  2E29               	decfsz	___lwdiv@counter,f,c
  2878  000922  D7ED               	goto	l2415
  2879  000924                     l938:
  2880  000924  C02A  F025         	movff	___lwdiv@quotient,?___lwdiv
  2881  000928  C02B  F026         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2882  00092C  0012               	return		;funcret
  2883  00092E                     __end_of___lwdiv:
  2884                           	opt stack 0
  2885                           tblptru	equ	0xFF8
  2886                           tblptrh	equ	0xFF7
  2887                           tblptrl	equ	0xFF6
  2888                           tablat	equ	0xFF5
  2889                           prodh	equ	0xFF4
  2890                           prodl	equ	0xFF3
  2891                           intcon	equ	0xFF2
  2892                           postinc0	equ	0xFEE
  2893                           wreg	equ	0xFE8
  2894                           postdec1	equ	0xFE5
  2895                           fsr1l	equ	0xFE1
  2896                           indf2	equ	0xFDF
  2897                           postinc2	equ	0xFDE
  2898                           postdec2	equ	0xFDD
  2899                           fsr2h	equ	0xFDA
  2900                           fsr2l	equ	0xFD9
  2901                           status	equ	0xFD8
  2902                           
  2903 ;; *************** function _lcdClear *****************
  2904 ;; Defined at:
  2905 ;;		line 74 in file "lcd.c"
  2906 ;; Parameters:    Size  Location     Type
  2907 ;;		None
  2908 ;; Auto vars:     Size  Location     Type
  2909 ;;		None
  2910 ;; Return value:  Size  Location     Type
  2911 ;;                  1    wreg      void 
  2912 ;; Registers used:
  2913 ;;		wreg, status,2, status,0, cstack
  2914 ;; Tracked objects:
  2915 ;;		On entry : 0/0
  2916 ;;		On exit  : 0/0
  2917 ;;		Unchanged: 0/0
  2918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2922 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2923 ;;Total ram usage:        0 bytes
  2924 ;; Hardware stack levels used:    1
  2925 ;; Hardware stack levels required when called:    5
  2926 ;; This function calls:
  2927 ;;		_lcdInst
  2928 ;; This function is called by:
  2929 ;;		_dateTime
  2930 ;;		_mainMenu
  2931 ;;		_runSelect
  2932 ;;		_runMenu
  2933 ;;		_runTime
  2934 ;;		_runStats
  2935 ;; This function uses a non-reentrant model
  2936 ;;
  2937                           
  2938                           	psect	text18
  2939  000C26                     __ptext18:
  2940                           	opt stack 0
  2941  000C26                     _lcdClear:
  2942                           	opt stack 24
  2943                           
  2944                           ;lcd.c: 75: lcdInst(0b00000001);
  2945                           
  2946                           ;incstack = 0
  2947  000C26  0E01               	movlw	1
  2948  000C28  ECB3  F005         	call	_lcdInst
  2949  000C2C  0012               	return		;funcret
  2950  000C2E                     __end_of_lcdClear:
  2951                           	opt stack 0
  2952                           tblptru	equ	0xFF8
  2953                           tblptrh	equ	0xFF7
  2954                           tblptrl	equ	0xFF6
  2955                           tablat	equ	0xFF5
  2956                           prodh	equ	0xFF4
  2957                           prodl	equ	0xFF3
  2958                           intcon	equ	0xFF2
  2959                           postinc0	equ	0xFEE
  2960                           wreg	equ	0xFE8
  2961                           postdec1	equ	0xFE5
  2962                           fsr1l	equ	0xFE1
  2963                           indf2	equ	0xFDF
  2964                           postinc2	equ	0xFDE
  2965                           postdec2	equ	0xFDD
  2966                           fsr2h	equ	0xFDA
  2967                           fsr2l	equ	0xFD9
  2968                           status	equ	0xFD8
  2969                           
  2970 ;; *************** function _lcdInst *****************
  2971 ;; Defined at:
  2972 ;;		line 27 in file "lcd.c"
  2973 ;; Parameters:    Size  Location     Type
  2974 ;;  data            1    wreg     unsigned char 
  2975 ;; Auto vars:     Size  Location     Type
  2976 ;;  data            1   39[COMRAM] unsigned char 
  2977 ;; Return value:  Size  Location     Type
  2978 ;;                  1    wreg      void 
  2979 ;; Registers used:
  2980 ;;		wreg, status,2, status,0, cstack
  2981 ;; Tracked objects:
  2982 ;;		On entry : 0/0
  2983 ;;		On exit  : 0/0
  2984 ;;		Unchanged: 0/0
  2985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2987 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2988 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2989 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2990 ;;Total ram usage:        2 bytes
  2991 ;; Hardware stack levels used:    1
  2992 ;; Hardware stack levels required when called:    4
  2993 ;; This function calls:
  2994 ;;		_lcdNibble
  2995 ;; This function is called by:
  2996 ;;		_initLCD
  2997 ;;		_lcdClear
  2998 ;;		_lcdNewline
  2999 ;;		_lcdHome
  3000 ;; This function uses a non-reentrant model
  3001 ;;
  3002                           
  3003                           	psect	text19
  3004  000B66                     __ptext19:
  3005                           	opt stack 0
  3006  000B66                     _lcdInst:
  3007                           	opt stack 22
  3008                           
  3009                           ;incstack = 0
  3010                           ;lcdInst@data stored from wreg
  3011  000B66  6E28               	movwf	lcdInst@data,c
  3012                           
  3013                           ;lcd.c: 28: LATDbits.LATD2 = 0;
  3014  000B68  948C               	bcf	3980,2,c	;volatile
  3015                           
  3016                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
  3017  000B6A  0E74               	movlw	116
  3018  000B6C                     u1987:
  3019  000B6C  2EE8               	decfsz	wreg,f,c
  3020  000B6E  D7FE               	bra	u1987
  3021  000B70  D000               	nop2	
  3022                           
  3023                           ;lcd.c: 30: lcdNibble(data);
  3024  000B72  5028               	movf	lcdInst@data,w,c
  3025  000B74  EC3B  F004         	call	_lcdNibble
  3026                           
  3027                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
  3028  000B78  0E04               	movlw	4
  3029  000B7A  6E27               	movwf	??_lcdInst& (0+255),c
  3030  000B7C  0E3E               	movlw	62
  3031  000B7E                     u1997:
  3032  000B7E  2EE8               	decfsz	wreg,f,c
  3033  000B80  D7FE               	bra	u1997
  3034  000B82  2E27               	decfsz	??_lcdInst& (0+255),f,c
  3035  000B84  D7FC               	bra	u1997
  3036  000B86  0012               	return		;funcret
  3037  000B88                     __end_of_lcdInst:
  3038                           	opt stack 0
  3039                           tblptru	equ	0xFF8
  3040                           tblptrh	equ	0xFF7
  3041                           tblptrl	equ	0xFF6
  3042                           tablat	equ	0xFF5
  3043                           prodh	equ	0xFF4
  3044                           prodl	equ	0xFF3
  3045                           intcon	equ	0xFF2
  3046                           postinc0	equ	0xFEE
  3047                           wreg	equ	0xFE8
  3048                           postdec1	equ	0xFE5
  3049                           fsr1l	equ	0xFE1
  3050                           indf2	equ	0xFDF
  3051                           postinc2	equ	0xFDE
  3052                           postdec2	equ	0xFDD
  3053                           fsr2h	equ	0xFDA
  3054                           fsr2l	equ	0xFD9
  3055                           status	equ	0xFD8
  3056                           
  3057 ;; *************** function _lcdNibble *****************
  3058 ;; Defined at:
  3059 ;;		line 46 in file "lcd.c"
  3060 ;; Parameters:    Size  Location     Type
  3061 ;;  data            1    wreg     unsigned char 
  3062 ;; Auto vars:     Size  Location     Type
  3063 ;;  data            1   37[COMRAM] unsigned char 
  3064 ;;  temp            1   36[COMRAM] unsigned char 
  3065 ;; Return value:  Size  Location     Type
  3066 ;;                  1    wreg      void 
  3067 ;; Registers used:
  3068 ;;		wreg, status,2, status,0
  3069 ;; Tracked objects:
  3070 ;;		On entry : 0/0
  3071 ;;		On exit  : 0/0
  3072 ;;		Unchanged: 0/0
  3073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3075 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3077 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3078 ;;Total ram usage:        2 bytes
  3079 ;; Hardware stack levels used:    1
  3080 ;; Hardware stack levels required when called:    3
  3081 ;; This function calls:
  3082 ;;		Nothing
  3083 ;; This function is called by:
  3084 ;;		_lcdInst
  3085 ;;		_putch
  3086 ;; This function uses a non-reentrant model
  3087 ;;
  3088                           
  3089                           	psect	text20
  3090  000876                     __ptext20:
  3091                           	opt stack 0
  3092  000876                     _lcdNibble:
  3093                           	opt stack 24
  3094                           
  3095                           ;incstack = 0
  3096                           ;lcdNibble@data stored from wreg
  3097  000876  6E26               	movwf	lcdNibble@data,c
  3098                           
  3099                           ;lcd.c: 48: char temp = data & 0xF0;
  3100  000878  5026               	movf	lcdNibble@data,w,c
  3101  00087A  0BF0               	andlw	240
  3102  00087C  6E25               	movwf	lcdNibble@temp,c
  3103                           
  3104                           ;lcd.c: 49: LATD = LATD & 0x0F;
  3105  00087E  508C               	movf	3980,w,c	;volatile
  3106  000880  0B0F               	andlw	15
  3107  000882  6E8C               	movwf	3980,c	;volatile
  3108                           
  3109                           ;lcd.c: 50: LATD = temp | LATD;
  3110  000884  5025               	movf	lcdNibble@temp,w,c
  3111  000886  108C               	iorwf	3980,w,c	;volatile
  3112  000888  6E8C               	movwf	3980,c	;volatile
  3113                           
  3114                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  3115  00088A  968C               	bcf	3980,3,c	;volatile
  3116                           
  3117                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
  3118  00088C  0ED6               	movlw	214
  3119  00088E                     u2007:
  3120  00088E  D000               	nop2	
  3121  000890  D000               	nop2	
  3122  000892  2EE8               	decfsz	wreg,f,c
  3123  000894  D7FC               	bra	u2007
  3124  000896  D000               	nop2	
  3125                           
  3126                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  3127  000898  868C               	bsf	3980,3,c	;volatile
  3128                           
  3129                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
  3130  00089A  0ED6               	movlw	214
  3131  00089C                     u2017:
  3132  00089C  D000               	nop2	
  3133  00089E  D000               	nop2	
  3134  0008A0  2EE8               	decfsz	wreg,f,c
  3135  0008A2  D7FC               	bra	u2017
  3136  0008A4  D000               	nop2	
  3137                           
  3138                           ;lcd.c: 58: data = data << 4;
  3139  0008A6  3826               	swapf	lcdNibble@data,w,c
  3140  0008A8  0BF0               	andlw	240
  3141  0008AA  6E26               	movwf	lcdNibble@data,c
  3142                           
  3143                           ;lcd.c: 60: temp = data & 0xF0;
  3144  0008AC  5026               	movf	lcdNibble@data,w,c
  3145  0008AE  0BF0               	andlw	240
  3146  0008B0  6E25               	movwf	lcdNibble@temp,c
  3147                           
  3148                           ;lcd.c: 61: LATD = LATD & 0x0F;
  3149  0008B2  508C               	movf	3980,w,c	;volatile
  3150  0008B4  0B0F               	andlw	15
  3151  0008B6  6E8C               	movwf	3980,c	;volatile
  3152                           
  3153                           ;lcd.c: 62: LATD = temp | LATD;
  3154  0008B8  5025               	movf	lcdNibble@temp,w,c
  3155  0008BA  108C               	iorwf	3980,w,c	;volatile
  3156  0008BC  6E8C               	movwf	3980,c	;volatile
  3157                           
  3158                           ;lcd.c: 64: LATDbits.LATD3 = 0;
  3159  0008BE  968C               	bcf	3980,3,c	;volatile
  3160                           
  3161                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
  3162  0008C0  0ED6               	movlw	214
  3163  0008C2                     u2027:
  3164  0008C2  D000               	nop2	
  3165  0008C4  D000               	nop2	
  3166  0008C6  2EE8               	decfsz	wreg,f,c
  3167  0008C8  D7FC               	bra	u2027
  3168  0008CA  D000               	nop2	
  3169                           
  3170                           ;lcd.c: 66: LATDbits.LATD3 = 1;
  3171  0008CC  868C               	bsf	3980,3,c	;volatile
  3172                           
  3173                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
  3174  0008CE  0ED6               	movlw	214
  3175  0008D0                     u2037:
  3176  0008D0  D000               	nop2	
  3177  0008D2  D000               	nop2	
  3178  0008D4  2EE8               	decfsz	wreg,f,c
  3179  0008D6  D7FC               	bra	u2037
  3180  0008D8  D000               	nop2	
  3181  0008DA  0012               	return		;funcret
  3182  0008DC                     __end_of_lcdNibble:
  3183                           	opt stack 0
  3184                           tblptru	equ	0xFF8
  3185                           tblptrh	equ	0xFF7
  3186                           tblptrl	equ	0xFF6
  3187                           tablat	equ	0xFF5
  3188                           prodh	equ	0xFF4
  3189                           prodl	equ	0xFF3
  3190                           intcon	equ	0xFF2
  3191                           postinc0	equ	0xFEE
  3192                           wreg	equ	0xFE8
  3193                           postdec1	equ	0xFE5
  3194                           fsr1l	equ	0xFE1
  3195                           indf2	equ	0xFDF
  3196                           postinc2	equ	0xFDE
  3197                           postdec2	equ	0xFDD
  3198                           fsr2h	equ	0xFDA
  3199                           fsr2l	equ	0xFD9
  3200                           status	equ	0xFD8
  3201                           
  3202 ;; *************** function _service *****************
  3203 ;; Defined at:
  3204 ;;		line 130 in file "main.c"
  3205 ;; Parameters:    Size  Location     Type
  3206 ;;		None
  3207 ;; Auto vars:     Size  Location     Type
  3208 ;;  key             1   35[COMRAM] unsigned char 
  3209 ;; Return value:  Size  Location     Type
  3210 ;;                  1    wreg      void 
  3211 ;; Registers used:
  3212 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3213 ;; Tracked objects:
  3214 ;;		On entry : 0/0
  3215 ;;		On exit  : 0/0
  3216 ;;		Unchanged: 0/0
  3217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3219 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3220 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3221 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3222 ;;Total ram usage:       15 bytes
  3223 ;; Hardware stack levels used:    1
  3224 ;; Hardware stack levels required when called:    2
  3225 ;; This function calls:
  3226 ;;		_servoInterruptService
  3227 ;;		_setAngle
  3228 ;; This function is called by:
  3229 ;;		Interrupt level 2
  3230 ;; This function uses a non-reentrant model
  3231 ;;
  3232                           
  3233                           	psect	intcode
  3234  000008                     __pintcode:
  3235                           	opt stack 0
  3236  000008                     _service:
  3237                           	opt stack 22
  3238                           
  3239                           ;incstack = 0
  3240  000008  825B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3241  00000A  EDF3  F000         	call	int_func,f	;refresh shadow registers
  3242                           tblptru	equ	0xFF8
  3243                           tblptrh	equ	0xFF7
  3244                           tblptrl	equ	0xFF6
  3245                           tablat	equ	0xFF5
  3246                           prodh	equ	0xFF4
  3247                           prodl	equ	0xFF3
  3248                           intcon	equ	0xFF2
  3249                           postinc0	equ	0xFEE
  3250                           wreg	equ	0xFE8
  3251                           postdec1	equ	0xFE5
  3252                           fsr1l	equ	0xFE1
  3253                           indf2	equ	0xFDF
  3254                           postinc2	equ	0xFDE
  3255                           postdec2	equ	0xFDD
  3256                           fsr2h	equ	0xFDA
  3257                           fsr2l	equ	0xFD9
  3258                           status	equ	0xFD8
  3259                           
  3260                           	psect	intcode_body
  3261  0001E6                     __pintcode_body:
  3262                           	opt stack 22
  3263  0001E6                     int_func:
  3264                           	opt stack 22
  3265  0001E6  0006               	pop		; remove dummy address from shadow register refresh
  3266  0001E8  CFFA F016          	movff	pclath,??_service
  3267  0001EC  CFFB F017          	movff	pclatu,??_service+1
  3268  0001F0  CFE9 F018          	movff	fsr0l,??_service+2
  3269  0001F4  CFEA F019          	movff	fsr0h,??_service+3
  3270  0001F8  CFE1 F01A          	movff	fsr1l,??_service+4
  3271  0001FC  CFE2 F01B          	movff	fsr1h,??_service+5
  3272  000200  CFD9 F01C          	movff	fsr2l,??_service+6
  3273  000204  CFDA F01D          	movff	fsr2h,??_service+7
  3274  000208  CFF3 F01E          	movff	prodl,??_service+8
  3275  00020C  CFF4 F01F          	movff	prodh,??_service+9
  3276  000210  CFF6 F020          	movff	tblptrl,??_service+10
  3277  000214  CFF7 F021          	movff	tblptrh,??_service+11
  3278  000218  CFF8 F022          	movff	tblptru,??_service+12
  3279  00021C  CFF5 F023          	movff	tablat,??_service+13
  3280                           
  3281                           ;main.c: 132: servoInterruptService();
  3282  000220  EC09  F000         	call	_servoInterruptService	;wreg free
  3283                           
  3284                           ;main.c: 135: if(INT1IF){INT1IF = 0;
  3285  000224  A0F0               	btfss	intcon3,0,c	;volatile
  3286  000226  D06F               	goto	i2l111
  3287  000228  90F0               	bcf	intcon3,0,c	;volatile
  3288                           
  3289                           ;main.c: 136: char key = (PORTB & 0xF0) >> 4;
  3290  00022A  3881               	swapf	3969,w,c	;volatile
  3291  00022C  0B0F               	andlw	15
  3292  00022E  0B0F               	andlw	15
  3293  000230  6E24               	movwf	service@key,c
  3294                           
  3295                           ;main.c: 137: if(key == 0)setAngle(1,64285);
  3296  000232  5024               	movf	service@key,w,c
  3297  000234  A4D8               	btfss	status,2,c
  3298  000236  D00E               	goto	i2l2271
  3299  000238  0E00               	movlw	0
  3300  00023A  6E02               	movwf	setAngle@timer+1,c
  3301  00023C  0E01               	movlw	1
  3302  00023E  6E01               	movwf	setAngle@timer,c
  3303  000240  0E1D               	movlw	29
  3304  000242  6E03               	movwf	setAngle@angle,c
  3305  000244  0EFB               	movlw	251
  3306  000246  6E04               	movwf	setAngle@angle+1,c
  3307  000248  0E00               	movlw	0
  3308  00024A  6E05               	movwf	setAngle@angle+2,c
  3309  00024C  0E00               	movlw	0
  3310  00024E  6E06               	movwf	setAngle@angle+3,c
  3311  000250  EC63  F005         	call	_setAngle	;wreg free
  3312  000254                     i2l2271:
  3313                           
  3314                           ;main.c: 138: if(key == 1)setAngle(1,61785);
  3315  000254  0424               	decf	service@key,w,c
  3316  000256  A4D8               	btfss	status,2,c
  3317  000258  D00E               	goto	i2l2275
  3318  00025A  0E00               	movlw	0
  3319  00025C  6E02               	movwf	setAngle@timer+1,c
  3320  00025E  0E01               	movlw	1
  3321  000260  6E01               	movwf	setAngle@timer,c
  3322  000262  0E59               	movlw	89
  3323  000264  6E03               	movwf	setAngle@angle,c
  3324  000266  0EF1               	movlw	241
  3325  000268  6E04               	movwf	setAngle@angle+1,c
  3326  00026A  0E00               	movlw	0
  3327  00026C  6E05               	movwf	setAngle@angle+2,c
  3328  00026E  0E00               	movlw	0
  3329  000270  6E06               	movwf	setAngle@angle+3,c
  3330  000272  EC63  F005         	call	_setAngle	;wreg free
  3331  000276                     i2l2275:
  3332                           
  3333                           ;main.c: 139: if(key == 2)setAngle(1,59285);
  3334  000276  0E02               	movlw	2
  3335  000278  1824               	xorwf	service@key,w,c
  3336  00027A  A4D8               	btfss	status,2,c
  3337  00027C  D00E               	goto	i2l2279
  3338  00027E  0E00               	movlw	0
  3339  000280  6E02               	movwf	setAngle@timer+1,c
  3340  000282  0E01               	movlw	1
  3341  000284  6E01               	movwf	setAngle@timer,c
  3342  000286  0E95               	movlw	149
  3343  000288  6E03               	movwf	setAngle@angle,c
  3344  00028A  0EE7               	movlw	231
  3345  00028C  6E04               	movwf	setAngle@angle+1,c
  3346  00028E  0E00               	movlw	0
  3347  000290  6E05               	movwf	setAngle@angle+2,c
  3348  000292  0E00               	movlw	0
  3349  000294  6E06               	movwf	setAngle@angle+3,c
  3350  000296  EC63  F005         	call	_setAngle	;wreg free
  3351  00029A                     i2l2279:
  3352                           
  3353                           ;main.c: 141: if(key == 4)setAngle(3,64285);
  3354  00029A  0E04               	movlw	4
  3355  00029C  1824               	xorwf	service@key,w,c
  3356  00029E  A4D8               	btfss	status,2,c
  3357  0002A0  D00E               	goto	i2l2283
  3358  0002A2  0E00               	movlw	0
  3359  0002A4  6E02               	movwf	setAngle@timer+1,c
  3360  0002A6  0E03               	movlw	3
  3361  0002A8  6E01               	movwf	setAngle@timer,c
  3362  0002AA  0E1D               	movlw	29
  3363  0002AC  6E03               	movwf	setAngle@angle,c
  3364  0002AE  0EFB               	movlw	251
  3365  0002B0  6E04               	movwf	setAngle@angle+1,c
  3366  0002B2  0E00               	movlw	0
  3367  0002B4  6E05               	movwf	setAngle@angle+2,c
  3368  0002B6  0E00               	movlw	0
  3369  0002B8  6E06               	movwf	setAngle@angle+3,c
  3370  0002BA  EC63  F005         	call	_setAngle	;wreg free
  3371  0002BE                     i2l2283:
  3372                           
  3373                           ;main.c: 142: if(key == 5)setAngle(3,61785);
  3374  0002BE  0E05               	movlw	5
  3375  0002C0  1824               	xorwf	service@key,w,c
  3376  0002C2  A4D8               	btfss	status,2,c
  3377  0002C4  D00E               	goto	i2l2287
  3378  0002C6  0E00               	movlw	0
  3379  0002C8  6E02               	movwf	setAngle@timer+1,c
  3380  0002CA  0E03               	movlw	3
  3381  0002CC  6E01               	movwf	setAngle@timer,c
  3382  0002CE  0E59               	movlw	89
  3383  0002D0  6E03               	movwf	setAngle@angle,c
  3384  0002D2  0EF1               	movlw	241
  3385  0002D4  6E04               	movwf	setAngle@angle+1,c
  3386  0002D6  0E00               	movlw	0
  3387  0002D8  6E05               	movwf	setAngle@angle+2,c
  3388  0002DA  0E00               	movlw	0
  3389  0002DC  6E06               	movwf	setAngle@angle+3,c
  3390  0002DE  EC63  F005         	call	_setAngle	;wreg free
  3391  0002E2                     i2l2287:
  3392                           
  3393                           ;main.c: 143: if(key == 6)setAngle(3,59285);
  3394  0002E2  0E06               	movlw	6
  3395  0002E4  1824               	xorwf	service@key,w,c
  3396  0002E6  A4D8               	btfss	status,2,c
  3397  0002E8  D00E               	goto	i2l111
  3398  0002EA  0E00               	movlw	0
  3399  0002EC  6E02               	movwf	setAngle@timer+1,c
  3400  0002EE  0E03               	movlw	3
  3401  0002F0  6E01               	movwf	setAngle@timer,c
  3402  0002F2  0E95               	movlw	149
  3403  0002F4  6E03               	movwf	setAngle@angle,c
  3404  0002F6  0EE7               	movlw	231
  3405  0002F8  6E04               	movwf	setAngle@angle+1,c
  3406  0002FA  0E00               	movlw	0
  3407  0002FC  6E05               	movwf	setAngle@angle+2,c
  3408  0002FE  0E00               	movlw	0
  3409  000300  6E06               	movwf	setAngle@angle+3,c
  3410  000302  EC63  F005         	call	_setAngle	;wreg free
  3411  000306                     i2l111:
  3412  000306  C023  FFF5         	movff	??_service+13,tablat
  3413  00030A  C022  FFF8         	movff	??_service+12,tblptru
  3414  00030E  C021  FFF7         	movff	??_service+11,tblptrh
  3415  000312  C020  FFF6         	movff	??_service+10,tblptrl
  3416  000316  C01F  FFF4         	movff	??_service+9,prodh
  3417  00031A  C01E  FFF3         	movff	??_service+8,prodl
  3418  00031E  C01D  FFDA         	movff	??_service+7,fsr2h
  3419  000322  C01C  FFD9         	movff	??_service+6,fsr2l
  3420  000326  C01B  FFE2         	movff	??_service+5,fsr1h
  3421  00032A  C01A  FFE1         	movff	??_service+4,fsr1l
  3422  00032E  C019  FFEA         	movff	??_service+3,fsr0h
  3423  000332  C018  FFE9         	movff	??_service+2,fsr0l
  3424  000336  C017  FFFB         	movff	??_service+1,pclatu
  3425  00033A  C016  FFFA         	movff	??_service,pclath
  3426  00033E  925B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3427  000340  0011               	retfie		f
  3428  000342                     __end_of_service:
  3429                           	opt stack 0
  3430                           pclatu	equ	0xFFB
  3431                           pclath	equ	0xFFA
  3432                           tblptru	equ	0xFF8
  3433                           tblptrh	equ	0xFF7
  3434                           tblptrl	equ	0xFF6
  3435                           tablat	equ	0xFF5
  3436                           prodh	equ	0xFF4
  3437                           prodl	equ	0xFF3
  3438                           intcon	equ	0xFF2
  3439                           intcon3	equ	0xFF0
  3440                           postinc0	equ	0xFEE
  3441                           fsr0h	equ	0xFEA
  3442                           fsr0l	equ	0xFE9
  3443                           wreg	equ	0xFE8
  3444                           postdec1	equ	0xFE5
  3445                           fsr1h	equ	0xFE2
  3446                           fsr1l	equ	0xFE1
  3447                           indf2	equ	0xFDF
  3448                           postinc2	equ	0xFDE
  3449                           postdec2	equ	0xFDD
  3450                           fsr2h	equ	0xFDA
  3451                           fsr2l	equ	0xFD9
  3452                           status	equ	0xFD8
  3453                           
  3454 ;; *************** function _setAngle *****************
  3455 ;; Defined at:
  3456 ;;		line 26 in file "servo.c"
  3457 ;; Parameters:    Size  Location     Type
  3458 ;;  timer           2    0[COMRAM] int 
  3459 ;;  angle           4    2[COMRAM] long 
  3460 ;; Auto vars:     Size  Location     Type
  3461 ;;		None
  3462 ;; Return value:  Size  Location     Type
  3463 ;;                  1    wreg      void 
  3464 ;; Registers used:
  3465 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3466 ;; Tracked objects:
  3467 ;;		On entry : 0/0
  3468 ;;		On exit  : 0/0
  3469 ;;		Unchanged: 0/0
  3470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3471 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3473 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3474 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3475 ;;Total ram usage:        8 bytes
  3476 ;; Hardware stack levels used:    1
  3477 ;; This function calls:
  3478 ;;		Nothing
  3479 ;; This function is called by:
  3480 ;;		_service
  3481 ;; This function uses a non-reentrant model
  3482 ;;
  3483                           
  3484                           	psect	text22
  3485  000AC6                     __ptext22:
  3486                           	opt stack 0
  3487  000AC6                     _setAngle:
  3488                           	opt stack 23
  3489                           
  3490                           ;servo.c: 27: pulse[timer] = angle;
  3491                           
  3492                           ;incstack = 0
  3493  000AC6  0E37               	movlw	low _pulse
  3494  000AC8  6E07               	movwf	??_setAngle& (0+255),c
  3495  000ACA  0E00               	movlw	high _pulse
  3496  000ACC  6E08               	movwf	(??_setAngle+1)& (0+255),c
  3497  000ACE  90D8               	bcf	status,0,c
  3498  000AD0  3401               	rlcf	setAngle@timer,w,c
  3499  000AD2  6ED9               	movwf	fsr2l,c
  3500  000AD4  3402               	rlcf	setAngle@timer+1,w,c
  3501  000AD6  6EDA               	movwf	fsr2h,c
  3502  000AD8  90D8               	bcf	status,0,c
  3503  000ADA  36D9               	rlcf	fsr2l,f,c
  3504  000ADC  36DA               	rlcf	fsr2h,f,c
  3505  000ADE  5007               	movf	??_setAngle,w,c
  3506  000AE0  26D9               	addwf	fsr2l,f,c
  3507  000AE2  5008               	movf	??_setAngle+1,w,c
  3508  000AE4  22DA               	addwfc	fsr2h,f,c
  3509  000AE6  C003  FFDE         	movff	setAngle@angle,postinc2
  3510  000AEA  C004  FFDE         	movff	setAngle@angle+1,postinc2
  3511  000AEE  C005  FFDE         	movff	setAngle@angle+2,postinc2
  3512  000AF2  C006  FFDE         	movff	setAngle@angle+3,postinc2
  3513  000AF6  0012               	return		;funcret
  3514  000AF8                     __end_of_setAngle:
  3515                           	opt stack 0
  3516                           pclatu	equ	0xFFB
  3517                           pclath	equ	0xFFA
  3518                           tblptru	equ	0xFF8
  3519                           tblptrh	equ	0xFF7
  3520                           tblptrl	equ	0xFF6
  3521                           tablat	equ	0xFF5
  3522                           prodh	equ	0xFF4
  3523                           prodl	equ	0xFF3
  3524                           intcon	equ	0xFF2
  3525                           intcon3	equ	0xFF0
  3526                           postinc0	equ	0xFEE
  3527                           fsr0h	equ	0xFEA
  3528                           fsr0l	equ	0xFE9
  3529                           wreg	equ	0xFE8
  3530                           postdec1	equ	0xFE5
  3531                           fsr1h	equ	0xFE2
  3532                           fsr1l	equ	0xFE1
  3533                           indf2	equ	0xFDF
  3534                           postinc2	equ	0xFDE
  3535                           postdec2	equ	0xFDD
  3536                           fsr2h	equ	0xFDA
  3537                           fsr2l	equ	0xFD9
  3538                           status	equ	0xFD8
  3539                           
  3540 ;; *************** function _servoInterruptService *****************
  3541 ;; Defined at:
  3542 ;;		line 30 in file "servo.c"
  3543 ;; Parameters:    Size  Location     Type
  3544 ;;		None
  3545 ;; Auto vars:     Size  Location     Type
  3546 ;;  i               2   19[COMRAM] int 
  3547 ;;  flags           8   11[COMRAM] int [4]
  3548 ;; Return value:  Size  Location     Type
  3549 ;;                  1    wreg      void 
  3550 ;; Registers used:
  3551 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3552 ;; Tracked objects:
  3553 ;;		On entry : 0/0
  3554 ;;		On exit  : 0/0
  3555 ;;		Unchanged: 0/0
  3556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3558 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3559 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3560 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3561 ;;Total ram usage:       12 bytes
  3562 ;; Hardware stack levels used:    1
  3563 ;; Hardware stack levels required when called:    1
  3564 ;; This function calls:
  3565 ;;		_digitalRead
  3566 ;;		i2_digitalWrite
  3567 ;;		i2_startTimer
  3568 ;; This function is called by:
  3569 ;;		_service
  3570 ;; This function uses a non-reentrant model
  3571 ;;
  3572                           
  3573                           	psect	text23
  3574  000012                     __ptext23:
  3575                           	opt stack 0
  3576  000012                     _servoInterruptService:
  3577                           	opt stack 22
  3578                           
  3579                           ;servo.c: 32: int flags[4];
  3580                           ;servo.c: 33: flags[0] = TMR0IF;
  3581                           
  3582                           ;incstack = 0
  3583  000012  A4F2               	btfss	intcon,2,c	;volatile
  3584  000014  D002               	goto	i2u118_40
  3585  000016  0E01               	movlw	1
  3586  000018  D001               	goto	i2u119_40
  3587  00001A                     i2u118_40:
  3588  00001A  0E00               	movlw	0
  3589  00001C                     i2u119_40:
  3590  00001C  6E0C               	movwf	servoInterruptService@flags,c
  3591  00001E  6A0D               	clrf	servoInterruptService@flags+1,c
  3592                           
  3593                           ;servo.c: 34: flags[1] = TMR1IF;
  3594  000020  A09E               	btfss	3998,0,c	;volatile
  3595  000022  D002               	goto	i2u120_40
  3596  000024  0E01               	movlw	1
  3597  000026  D001               	goto	i2u121_40
  3598  000028                     i2u120_40:
  3599  000028  0E00               	movlw	0
  3600  00002A                     i2u121_40:
  3601  00002A  6E0E               	movwf	servoInterruptService@flags+2,c
  3602  00002C  6A0F               	clrf	servoInterruptService@flags+3,c
  3603                           
  3604                           ;servo.c: 35: flags[2] = TMR2IF;
  3605  00002E  A29E               	btfss	3998,1,c	;volatile
  3606  000030  D002               	goto	i2u122_40
  3607  000032  0E01               	movlw	1
  3608  000034  D001               	goto	i2u123_40
  3609  000036                     i2u122_40:
  3610  000036  0E00               	movlw	0
  3611  000038                     i2u123_40:
  3612  000038  6E10               	movwf	servoInterruptService@flags+4,c
  3613  00003A  6A11               	clrf	servoInterruptService@flags+5,c
  3614                           
  3615                           ;servo.c: 36: flags[3] = TMR3IF;
  3616  00003C  A2A1               	btfss	4001,1,c	;volatile
  3617  00003E  D002               	goto	i2u124_40
  3618  000040  0E01               	movlw	1
  3619  000042  D001               	goto	i2u125_40
  3620  000044                     i2u124_40:
  3621  000044  0E00               	movlw	0
  3622  000046                     i2u125_40:
  3623  000046  6E12               	movwf	servoInterruptService@flags+6,c
  3624  000048  6A13               	clrf	servoInterruptService@flags+7,c
  3625                           
  3626                           ;servo.c: 38: for(int i = 0; i < 4; i++){
  3627  00004A  0E00               	movlw	0
  3628  00004C  6E15               	movwf	servoInterruptService@i+1,c
  3629  00004E  0E00               	movlw	0
  3630  000050  6E14               	movwf	servoInterruptService@i,c
  3631  000052  BE15               	btfsc	servoInterruptService@i+1,7,c
  3632  000054  D008               	goto	i2l2161
  3633  000056  5015               	movf	servoInterruptService@i+1,w,c
  3634  000058  E105               	bnz	i2u126_40
  3635  00005A  0E04               	movlw	4
  3636  00005C  5C14               	subwf	servoInterruptService@i,w,c
  3637  00005E  B0D8               	btfsc	status,0,c
  3638  000060  0012               	return	
  3639  000062  D001               	goto	i2l2161
  3640  000064                     i2u126_40:
  3641  000064  0012               	return	
  3642  000066                     i2l2161:
  3643                           
  3644                           ;servo.c: 39: if(flags[i]){
  3645  000066  90D8               	bcf	status,0,c
  3646  000068  3414               	rlcf	servoInterruptService@i,w,c
  3647  00006A  6ED9               	movwf	fsr2l,c
  3648  00006C  3415               	rlcf	servoInterruptService@i+1,w,c
  3649  00006E  6EDA               	movwf	fsr2h,c
  3650  000070  0E0C               	movlw	low servoInterruptService@flags
  3651  000072  26D9               	addwf	fsr2l,f,c
  3652  000074  0E00               	movlw	high servoInterruptService@flags
  3653  000076  22DA               	addwfc	fsr2h,f,c
  3654  000078  50DE               	movf	postinc2,w,c
  3655  00007A  10DE               	iorwf	postinc2,w,c
  3656  00007C  B4D8               	btfsc	status,2,c
  3657  00007E  D0AB               	goto	i2l2175
  3658                           
  3659                           ;servo.c: 41: if(digitalRead(port[i],pin[i])){
  3660  000080  90D8               	bcf	status,0,c
  3661  000082  3414               	rlcf	servoInterruptService@i,w,c
  3662  000084  6ED9               	movwf	fsr2l,c
  3663  000086  3415               	rlcf	servoInterruptService@i+1,w,c
  3664  000088  6EDA               	movwf	fsr2h,c
  3665  00008A  0E4F               	movlw	low _port
  3666  00008C  26D9               	addwf	fsr2l,f,c
  3667  00008E  0E00               	movlw	high _port
  3668  000090  22DA               	addwfc	fsr2h,f,c
  3669  000092  CFDE F001          	movff	postinc2,digitalRead@port
  3670  000096  CFDD F002          	movff	postdec2,digitalRead@port+1
  3671  00009A  90D8               	bcf	status,0,c
  3672  00009C  3414               	rlcf	servoInterruptService@i,w,c
  3673  00009E  6ED9               	movwf	fsr2l,c
  3674  0000A0  3415               	rlcf	servoInterruptService@i+1,w,c
  3675  0000A2  6EDA               	movwf	fsr2h,c
  3676  0000A4  0E47               	movlw	low _pin
  3677  0000A6  26D9               	addwf	fsr2l,f,c
  3678  0000A8  0E00               	movlw	high _pin
  3679  0000AA  22DA               	addwfc	fsr2h,f,c
  3680  0000AC  CFDE F003          	movff	postinc2,digitalRead@pin
  3681  0000B0  CFDD F004          	movff	postdec2,digitalRead@pin+1
  3682  0000B4  ECE1  F002         	call	_digitalRead	;wreg free
  3683  0000B8  5001               	movf	?_digitalRead,w,c
  3684  0000BA  1002               	iorwf	?_digitalRead+1,w,c
  3685  0000BC  B4D8               	btfsc	status,2,c
  3686  0000BE  D02F               	goto	i2l2169
  3687                           
  3688                           ;servo.c: 42: startTimer(i,15535);
  3689  0000C0  C014  F001         	movff	servoInterruptService@i,i2startTimer@timer
  3690  0000C4  C015  F002         	movff	servoInterruptService@i+1,i2startTimer@timer+1
  3691  0000C8  0EAF               	movlw	175
  3692  0000CA  6E03               	movwf	i2startTimer@val,c
  3693  0000CC  0E3C               	movlw	60
  3694  0000CE  6E04               	movwf	i2startTimer@val+1,c
  3695  0000D0  0E00               	movlw	0
  3696  0000D2  6E05               	movwf	i2startTimer@val+2,c
  3697  0000D4  0E00               	movlw	0
  3698  0000D6  6E06               	movwf	i2startTimer@val+3,c
  3699  0000D8  ECBD  F004         	call	i2_startTimer	;wreg free
  3700                           
  3701                           ;servo.c: 43: digitalWrite(port[i],pin[i],0);
  3702  0000DC  90D8               	bcf	status,0,c
  3703  0000DE  3414               	rlcf	servoInterruptService@i,w,c
  3704  0000E0  6ED9               	movwf	fsr2l,c
  3705  0000E2  3415               	rlcf	servoInterruptService@i+1,w,c
  3706  0000E4  6EDA               	movwf	fsr2h,c
  3707  0000E6  0E4F               	movlw	low _port
  3708  0000E8  26D9               	addwf	fsr2l,f,c
  3709  0000EA  0E00               	movlw	high _port
  3710  0000EC  22DA               	addwfc	fsr2h,f,c
  3711  0000EE  CFDE F001          	movff	postinc2,i2digitalWrite@port
  3712  0000F2  CFDD F002          	movff	postdec2,i2digitalWrite@port+1
  3713  0000F6  90D8               	bcf	status,0,c
  3714  0000F8  3414               	rlcf	servoInterruptService@i,w,c
  3715  0000FA  6ED9               	movwf	fsr2l,c
  3716  0000FC  3415               	rlcf	servoInterruptService@i+1,w,c
  3717  0000FE  6EDA               	movwf	fsr2h,c
  3718  000100  0E47               	movlw	low _pin
  3719  000102  26D9               	addwf	fsr2l,f,c
  3720  000104  0E00               	movlw	high _pin
  3721  000106  22DA               	addwfc	fsr2h,f,c
  3722  000108  CFDE F003          	movff	postinc2,i2digitalWrite@pin
  3723  00010C  CFDD F004          	movff	postdec2,i2digitalWrite@pin+1
  3724  000110  0E00               	movlw	0
  3725  000112  6E06               	movwf	i2digitalWrite@val+1,c
  3726  000114  0E00               	movlw	0
  3727  000116  6E05               	movwf	i2digitalWrite@val,c
  3728  000118  EC90  F003         	call	i2_digitalWrite	;wreg free
  3729                           
  3730                           ;servo.c: 44: }
  3731  00011C  D047               	goto	i2l2173
  3732  00011E                     i2l2169:
  3733                           
  3734                           ;servo.c: 45: else{
  3735                           ;servo.c: 46: startTimer(i, pulse[i]);
  3736  00011E  C014  F001         	movff	servoInterruptService@i,i2startTimer@timer
  3737  000122  C015  F002         	movff	servoInterruptService@i+1,i2startTimer@timer+1
  3738  000126  0E37               	movlw	low _pulse
  3739  000128  6E0A               	movwf	??_servoInterruptService& (0+255),c
  3740  00012A  0E00               	movlw	high _pulse
  3741  00012C  6E0B               	movwf	(??_servoInterruptService+1)& (0+255),c
  3742  00012E  90D8               	bcf	status,0,c
  3743  000130  3414               	rlcf	servoInterruptService@i,w,c
  3744  000132  6ED9               	movwf	fsr2l,c
  3745  000134  3415               	rlcf	servoInterruptService@i+1,w,c
  3746  000136  6EDA               	movwf	fsr2h,c
  3747  000138  90D8               	bcf	status,0,c
  3748  00013A  36D9               	rlcf	fsr2l,f,c
  3749  00013C  36DA               	rlcf	fsr2h,f,c
  3750  00013E  500A               	movf	??_servoInterruptService,w,c
  3751  000140  26D9               	addwf	fsr2l,f,c
  3752  000142  500B               	movf	??_servoInterruptService+1,w,c
  3753  000144  22DA               	addwfc	fsr2h,f,c
  3754  000146  CFDE F003          	movff	postinc2,i2startTimer@val
  3755  00014A  CFDE F004          	movff	postinc2,i2startTimer@val+1
  3756  00014E  CFDE F005          	movff	postinc2,i2startTimer@val+2
  3757  000152  CFDE F006          	movff	postinc2,i2startTimer@val+3
  3758  000156  ECBD  F004         	call	i2_startTimer	;wreg free
  3759                           
  3760                           ;servo.c: 47: digitalWrite(port[i],pin[i],1);
  3761  00015A  90D8               	bcf	status,0,c
  3762  00015C  3414               	rlcf	servoInterruptService@i,w,c
  3763  00015E  6ED9               	movwf	fsr2l,c
  3764  000160  3415               	rlcf	servoInterruptService@i+1,w,c
  3765  000162  6EDA               	movwf	fsr2h,c
  3766  000164  0E4F               	movlw	low _port
  3767  000166  26D9               	addwf	fsr2l,f,c
  3768  000168  0E00               	movlw	high _port
  3769  00016A  22DA               	addwfc	fsr2h,f,c
  3770  00016C  CFDE F001          	movff	postinc2,i2digitalWrite@port
  3771  000170  CFDD F002          	movff	postdec2,i2digitalWrite@port+1
  3772  000174  90D8               	bcf	status,0,c
  3773  000176  3414               	rlcf	servoInterruptService@i,w,c
  3774  000178  6ED9               	movwf	fsr2l,c
  3775  00017A  3415               	rlcf	servoInterruptService@i+1,w,c
  3776  00017C  6EDA               	movwf	fsr2h,c
  3777  00017E  0E47               	movlw	low _pin
  3778  000180  26D9               	addwf	fsr2l,f,c
  3779  000182  0E00               	movlw	high _pin
  3780  000184  22DA               	addwfc	fsr2h,f,c
  3781  000186  CFDE F003          	movff	postinc2,i2digitalWrite@pin
  3782  00018A  CFDD F004          	movff	postdec2,i2digitalWrite@pin+1
  3783  00018E  0E00               	movlw	0
  3784  000190  6E06               	movwf	i2digitalWrite@val+1,c
  3785  000192  0E01               	movlw	1
  3786  000194  6E05               	movwf	i2digitalWrite@val,c
  3787  000196  EC90  F003         	call	i2_digitalWrite	;wreg free
  3788                           
  3789                           ;servo.c: 48: }
  3790                           ;servo.c: 51: switch(i){
  3791  00019A  D008               	goto	i2l2173
  3792  00019C                     i2l460:
  3793  00019C  94F2               	bcf	intcon,2,c	;volatile
  3794  00019E  D01B               	goto	i2l2175
  3795  0001A0                     i2l462:
  3796  0001A0  909E               	bcf	3998,0,c	;volatile
  3797  0001A2  D019               	goto	i2l2175
  3798  0001A4                     i2l463:
  3799  0001A4  929E               	bcf	3998,1,c	;volatile
  3800  0001A6  D017               	goto	i2l2175
  3801  0001A8                     i2l464:
  3802  0001A8  92A1               	bcf	4001,1,c	;volatile
  3803                           
  3804                           ;servo.c: 56: }
  3805  0001AA  D015               	goto	i2l2175
  3806  0001AC                     i2l2173:
  3807  0001AC  C014  F00A         	movff	servoInterruptService@i,??_servoInterruptService
  3808  0001B0  C015  F00B         	movff	servoInterruptService@i+1,??_servoInterruptService+1
  3809                           
  3810                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3811                           ; Switch size 1, requested type "space"
  3812                           ; Number of cases is 1, Range of values is 0 to 0
  3813                           ; switch strategies available:
  3814                           ; Name         Instructions Cycles
  3815                           ; simple_byte            4     3 (average)
  3816                           ;	Chosen strategy is simple_byte
  3817  0001B4  500B               	movf	??_servoInterruptService+1,w,c
  3818  0001B6  0A00               	xorlw	0	; case 0
  3819  0001B8  A4D8               	btfss	status,2,c
  3820  0001BA  D00D               	goto	i2l2175
  3821                           
  3822                           ; Switch size 1, requested type "space"
  3823                           ; Number of cases is 4, Range of values is 0 to 3
  3824                           ; switch strategies available:
  3825                           ; Name         Instructions Cycles
  3826                           ; simple_byte           13     7 (average)
  3827                           ;	Chosen strategy is simple_byte
  3828  0001BC  500A               	movf	??_servoInterruptService,w,c
  3829  0001BE  0A00               	xorlw	0	; case 0
  3830  0001C0  B4D8               	btfsc	status,2,c
  3831  0001C2  D7EC               	goto	i2l460
  3832  0001C4  0A01               	xorlw	1	; case 1
  3833  0001C6  B4D8               	btfsc	status,2,c
  3834  0001C8  D7EB               	goto	i2l462
  3835  0001CA  0A03               	xorlw	3	; case 2
  3836  0001CC  B4D8               	btfsc	status,2,c
  3837  0001CE  D7EA               	goto	i2l463
  3838  0001D0  0A01               	xorlw	1	; case 3
  3839  0001D2  B4D8               	btfsc	status,2,c
  3840  0001D4  D7E9               	goto	i2l464
  3841  0001D6                     i2l2175:
  3842  0001D6  4A14               	infsnz	servoInterruptService@i,f,c
  3843  0001D8  2A15               	incf	servoInterruptService@i+1,f,c
  3844  0001DA  BE15               	btfsc	servoInterruptService@i+1,7,c
  3845  0001DC  D744               	goto	i2l2161
  3846  0001DE  5015               	movf	servoInterruptService@i+1,w,c
  3847  0001E0  E101               	bnz	i2l465
  3848  0001E2  D73B               	goto	L1
  3849  0001E4                     i2l465:
  3850  0001E4  0012               	return		;funcret
  3851  0001E6                     __end_of_servoInterruptService:
  3852                           	opt stack 0
  3853                           pclatu	equ	0xFFB
  3854                           pclath	equ	0xFFA
  3855                           tblptru	equ	0xFF8
  3856                           tblptrh	equ	0xFF7
  3857                           tblptrl	equ	0xFF6
  3858                           tablat	equ	0xFF5
  3859                           prodh	equ	0xFF4
  3860                           prodl	equ	0xFF3
  3861                           intcon	equ	0xFF2
  3862                           intcon3	equ	0xFF0
  3863                           postinc0	equ	0xFEE
  3864                           fsr0h	equ	0xFEA
  3865                           fsr0l	equ	0xFE9
  3866                           wreg	equ	0xFE8
  3867                           postdec1	equ	0xFE5
  3868                           fsr1h	equ	0xFE2
  3869                           fsr1l	equ	0xFE1
  3870                           indf2	equ	0xFDF
  3871                           postinc2	equ	0xFDE
  3872                           postdec2	equ	0xFDD
  3873                           fsr2h	equ	0xFDA
  3874                           fsr2l	equ	0xFD9
  3875                           status	equ	0xFD8
  3876                           
  3877 ;; *************** function i2_startTimer *****************
  3878 ;; Defined at:
  3879 ;;		line 75 in file "timer.c"
  3880 ;; Parameters:    Size  Location     Type
  3881 ;;  timer           2    0[COMRAM] int 
  3882 ;;  val             4    2[COMRAM] long 
  3883 ;; Auto vars:     Size  Location     Type
  3884 ;;		None
  3885 ;; Return value:  Size  Location     Type
  3886 ;;                  1    wreg      void 
  3887 ;; Registers used:
  3888 ;;		wreg, status,2, status,0
  3889 ;; Tracked objects:
  3890 ;;		On entry : 0/0
  3891 ;;		On exit  : 0/0
  3892 ;;		Unchanged: 0/0
  3893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3894 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3896 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3897 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3898 ;;Total ram usage:        8 bytes
  3899 ;; Hardware stack levels used:    1
  3900 ;; This function calls:
  3901 ;;		Nothing
  3902 ;; This function is called by:
  3903 ;;		_servoInterruptService
  3904 ;; This function uses a non-reentrant model
  3905 ;;
  3906                           
  3907                           	psect	text24
  3908  00097A                     __ptext24:
  3909                           	opt stack 0
  3910  00097A                     i2_startTimer:
  3911                           	opt stack 22
  3912                           
  3913                           ;timer.c: 76: switch(timer){
  3914                           
  3915                           ;incstack = 0
  3916  00097A  D012               	goto	i2l2103
  3917  00097C                     i2l342:
  3918                           
  3919                           ;timer.c: 78: TMR0H = val>>8;
  3920  00097C  C004  FFD7         	movff	i2startTimer@val+1,4055	;volatile
  3921                           
  3922                           ;timer.c: 79: TMR0L = val;
  3923  000980  C003  FFD6         	movff	i2startTimer@val,4054	;volatile
  3924                           
  3925                           ;timer.c: 80: T0CON |= 1<<7;
  3926  000984  8ED5               	bsf	4053,7,c	;volatile
  3927                           
  3928                           ;timer.c: 81: break;
  3929  000986  0012               	return	
  3930  000988                     i2l344:
  3931                           
  3932                           ;timer.c: 83: TMR1H = val>>8;
  3933  000988  C004  FFCF         	movff	i2startTimer@val+1,4047	;volatile
  3934                           
  3935                           ;timer.c: 84: TMR1L = val;
  3936  00098C  C003  FFCE         	movff	i2startTimer@val,4046	;volatile
  3937                           
  3938                           ;timer.c: 85: T1CON |= 1<<0;
  3939  000990  80CD               	bsf	4045,0,c	;volatile
  3940                           
  3941                           ;timer.c: 86: break;
  3942  000992  0012               	return	
  3943  000994                     i2l345:
  3944                           
  3945                           ;timer.c: 88: TMR3H = val>>8;
  3946  000994  C004  FFB3         	movff	i2startTimer@val+1,4019	;volatile
  3947                           
  3948                           ;timer.c: 89: TMR3L = val;
  3949  000998  C003  FFB2         	movff	i2startTimer@val,4018	;volatile
  3950                           
  3951                           ;timer.c: 90: T3CON |= 1<<0;
  3952  00099C  80B1               	bsf	4017,0,c	;volatile
  3953                           
  3954                           ;timer.c: 91: }
  3955  00099E  0012               	return	
  3956  0009A0                     i2l2103:
  3957  0009A0  C001  F007         	movff	i2startTimer@timer,??i2_startTimer
  3958  0009A4  C002  F008         	movff	i2startTimer@timer+1,??i2_startTimer+1
  3959                           
  3960                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3961                           ; Switch size 1, requested type "space"
  3962                           ; Number of cases is 1, Range of values is 0 to 0
  3963                           ; switch strategies available:
  3964                           ; Name         Instructions Cycles
  3965                           ; simple_byte            4     3 (average)
  3966                           ;	Chosen strategy is simple_byte
  3967  0009A8  5008               	movf	??i2_startTimer+1,w,c
  3968  0009AA  0A00               	xorlw	0	; case 0
  3969  0009AC  A4D8               	btfss	status,2,c
  3970  0009AE  0012               	return	
  3971                           
  3972                           ; Switch size 1, requested type "space"
  3973                           ; Number of cases is 3, Range of values is 0 to 3
  3974                           ; switch strategies available:
  3975                           ; Name         Instructions Cycles
  3976                           ; simple_byte           10     6 (average)
  3977                           ;	Chosen strategy is simple_byte
  3978  0009B0  5007               	movf	??i2_startTimer,w,c
  3979  0009B2  0A00               	xorlw	0	; case 0
  3980  0009B4  B4D8               	btfsc	status,2,c
  3981  0009B6  D7E2               	goto	i2l342
  3982  0009B8  0A01               	xorlw	1	; case 1
  3983  0009BA  B4D8               	btfsc	status,2,c
  3984  0009BC  D7E5               	goto	i2l344
  3985  0009BE  0A02               	xorlw	2	; case 3
  3986  0009C0  A4D8               	btfss	status,2,c
  3987  0009C2  0012               	return	
  3988  0009C4  D7E7               	goto	i2l345
  3989  0009C6                     __end_ofi2_startTimer:
  3990                           	opt stack 0
  3991                           pclatu	equ	0xFFB
  3992                           pclath	equ	0xFFA
  3993                           tblptru	equ	0xFF8
  3994                           tblptrh	equ	0xFF7
  3995                           tblptrl	equ	0xFF6
  3996                           tablat	equ	0xFF5
  3997                           prodh	equ	0xFF4
  3998                           prodl	equ	0xFF3
  3999                           intcon	equ	0xFF2
  4000                           intcon3	equ	0xFF0
  4001                           postinc0	equ	0xFEE
  4002                           fsr0h	equ	0xFEA
  4003                           fsr0l	equ	0xFE9
  4004                           wreg	equ	0xFE8
  4005                           postdec1	equ	0xFE5
  4006                           fsr1h	equ	0xFE2
  4007                           fsr1l	equ	0xFE1
  4008                           indf2	equ	0xFDF
  4009                           postinc2	equ	0xFDE
  4010                           postdec2	equ	0xFDD
  4011                           fsr2h	equ	0xFDA
  4012                           fsr2l	equ	0xFD9
  4013                           status	equ	0xFD8
  4014                           
  4015 ;; *************** function i2_digitalWrite *****************
  4016 ;; Defined at:
  4017 ;;		line 53 in file "iopin.c"
  4018 ;; Parameters:    Size  Location     Type
  4019 ;;  port            2    0[COMRAM] int 
  4020 ;;  pin             2    2[COMRAM] int 
  4021 ;;  val             2    4[COMRAM] int 
  4022 ;; Auto vars:     Size  Location     Type
  4023 ;;		None
  4024 ;; Return value:  Size  Location     Type
  4025 ;;                  1    wreg      void 
  4026 ;; Registers used:
  4027 ;;		wreg, status,2, status,0
  4028 ;; Tracked objects:
  4029 ;;		On entry : 0/0
  4030 ;;		On exit  : 0/0
  4031 ;;		Unchanged: 0/0
  4032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4033 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4035 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4036 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4037 ;;Total ram usage:        9 bytes
  4038 ;; Hardware stack levels used:    1
  4039 ;; This function calls:
  4040 ;;		Nothing
  4041 ;; This function is called by:
  4042 ;;		_servoInterruptService
  4043 ;; This function uses a non-reentrant model
  4044 ;;
  4045                           
  4046                           	psect	text25
  4047  000720                     __ptext25:
  4048                           	opt stack 0
  4049  000720                     i2_digitalWrite:
  4050                           	opt stack 22
  4051                           
  4052                           ;iopin.c: 54: pin = 1 << pin;
  4053                           
  4054                           ;incstack = 0
  4055  000720  C003  F007         	movff	i2digitalWrite@pin,??i2_digitalWrite
  4056  000724  0E01               	movlw	1
  4057  000726  6E08               	movwf	(??i2_digitalWrite+1)& (0+255),c
  4058  000728  0E00               	movlw	0
  4059  00072A  6E09               	movwf	(??i2_digitalWrite+2)& (0+255),c
  4060  00072C  2A07               	incf	??i2_digitalWrite,f,c
  4061  00072E  D003               	goto	i2u112_44
  4062  000730                     i2u112_45:
  4063  000730  90D8               	bcf	status,0,c
  4064  000732  3608               	rlcf	??i2_digitalWrite+1,f,c
  4065  000734  3609               	rlcf	??i2_digitalWrite+2,f,c
  4066  000736                     i2u112_44:
  4067  000736  2E07               	decfsz	??i2_digitalWrite,f,c
  4068  000738  D7FB               	goto	i2u112_45
  4069  00073A  C008  F003         	movff	??i2_digitalWrite+1,i2digitalWrite@pin
  4070  00073E  C009  F004         	movff	??i2_digitalWrite+2,i2digitalWrite@pin+1
  4071                           
  4072                           ;iopin.c: 55: if(val == 0){
  4073  000742  5005               	movf	i2digitalWrite@val,w,c
  4074  000744  1006               	iorwf	i2digitalWrite@val+1,w,c
  4075  000746  A4D8               	btfss	status,2,c
  4076  000748  D02B               	goto	i2l2089
  4077                           
  4078                           ;iopin.c: 56: pin ^= 0xff;
  4079  00074A  0EFF               	movlw	255
  4080  00074C  1A03               	xorwf	i2digitalWrite@pin,f,c
  4081                           
  4082                           ;iopin.c: 57: }
  4083                           ;iopin.c: 59: switch(port){
  4084  00074E  D028               	goto	i2l2089
  4085  000750                     i2l2065:
  4086  000750  0405               	decf	i2digitalWrite@val,w,c
  4087  000752  1006               	iorwf	i2digitalWrite@val+1,w,c
  4088  000754  A4D8               	btfss	status,2,c
  4089  000756  D003               	goto	i2l2069
  4090  000758  5003               	movf	i2digitalWrite@pin,w,c
  4091  00075A  1289               	iorwf	3977,f,c	;volatile
  4092  00075C  0012               	return	
  4093  00075E                     i2l2069:
  4094                           
  4095                           ;iopin.c: 61: else LATA &= pin;
  4096  00075E  5003               	movf	i2digitalWrite@pin,w,c
  4097  000760  1689               	andwf	3977,f,c	;volatile
  4098                           
  4099                           ;iopin.c: 62: break;
  4100  000762  0012               	return	
  4101  000764                     i2l2071:
  4102  000764  0405               	decf	i2digitalWrite@val,w,c
  4103  000766  1006               	iorwf	i2digitalWrite@val+1,w,c
  4104  000768  A4D8               	btfss	status,2,c
  4105  00076A  D003               	goto	i2l2075
  4106  00076C  5003               	movf	i2digitalWrite@pin,w,c
  4107  00076E  128A               	iorwf	3978,f,c	;volatile
  4108  000770  0012               	return	
  4109  000772                     i2l2075:
  4110                           
  4111                           ;iopin.c: 64: else LATB &= pin;
  4112  000772  5003               	movf	i2digitalWrite@pin,w,c
  4113  000774  168A               	andwf	3978,f,c	;volatile
  4114                           
  4115                           ;iopin.c: 65: break;
  4116  000776  0012               	return	
  4117  000778                     i2l2077:
  4118  000778  0405               	decf	i2digitalWrite@val,w,c
  4119  00077A  1006               	iorwf	i2digitalWrite@val+1,w,c
  4120  00077C  A4D8               	btfss	status,2,c
  4121  00077E  D003               	goto	i2l2081
  4122  000780  5003               	movf	i2digitalWrite@pin,w,c
  4123  000782  128B               	iorwf	3979,f,c	;volatile
  4124  000784  0012               	return	
  4125  000786                     i2l2081:
  4126                           
  4127                           ;iopin.c: 67: else LATC &= pin;
  4128  000786  5003               	movf	i2digitalWrite@pin,w,c
  4129  000788  168B               	andwf	3979,f,c	;volatile
  4130                           
  4131                           ;iopin.c: 68: break;
  4132  00078A  0012               	return	
  4133  00078C                     i2l2083:
  4134  00078C  0405               	decf	i2digitalWrite@val,w,c
  4135  00078E  1006               	iorwf	i2digitalWrite@val+1,w,c
  4136  000790  A4D8               	btfss	status,2,c
  4137  000792  D003               	goto	i2l2087
  4138  000794  5003               	movf	i2digitalWrite@pin,w,c
  4139  000796  128C               	iorwf	3980,f,c	;volatile
  4140  000798  0012               	return	
  4141  00079A                     i2l2087:
  4142                           
  4143                           ;iopin.c: 70: else LATD &= pin;
  4144  00079A  5003               	movf	i2digitalWrite@pin,w,c
  4145  00079C  168C               	andwf	3980,f,c	;volatile
  4146                           
  4147                           ;iopin.c: 71: }
  4148  00079E  0012               	return	
  4149  0007A0                     i2l2089:
  4150  0007A0  C001  F007         	movff	i2digitalWrite@port,??i2_digitalWrite
  4151  0007A4  C002  F008         	movff	i2digitalWrite@port+1,??i2_digitalWrite+1
  4152                           
  4153                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4154                           ; Switch size 1, requested type "space"
  4155                           ; Number of cases is 1, Range of values is 0 to 0
  4156                           ; switch strategies available:
  4157                           ; Name         Instructions Cycles
  4158                           ; simple_byte            4     3 (average)
  4159                           ;	Chosen strategy is simple_byte
  4160  0007A8  5008               	movf	??i2_digitalWrite+1,w,c
  4161  0007AA  0A00               	xorlw	0	; case 0
  4162  0007AC  A4D8               	btfss	status,2,c
  4163  0007AE  0012               	return	
  4164                           
  4165                           ; Switch size 1, requested type "space"
  4166                           ; Number of cases is 4, Range of values is 0 to 3
  4167                           ; switch strategies available:
  4168                           ; Name         Instructions Cycles
  4169                           ; simple_byte           13     7 (average)
  4170                           ;	Chosen strategy is simple_byte
  4171  0007B0  5007               	movf	??i2_digitalWrite,w,c
  4172  0007B2  0A00               	xorlw	0	; case 0
  4173  0007B4  B4D8               	btfsc	status,2,c
  4174  0007B6  D7CC               	goto	i2l2065
  4175  0007B8  0A01               	xorlw	1	; case 1
  4176  0007BA  B4D8               	btfsc	status,2,c
  4177  0007BC  D7D3               	goto	i2l2071
  4178  0007BE  0A03               	xorlw	3	; case 2
  4179  0007C0  B4D8               	btfsc	status,2,c
  4180  0007C2  D7DA               	goto	i2l2077
  4181  0007C4  0A01               	xorlw	1	; case 3
  4182  0007C6  A4D8               	btfss	status,2,c
  4183  0007C8  0012               	return	
  4184  0007CA  D7E0               	goto	i2l2083
  4185  0007CC                     __end_ofi2_digitalWrite:
  4186                           	opt stack 0
  4187                           pclatu	equ	0xFFB
  4188                           pclath	equ	0xFFA
  4189                           tblptru	equ	0xFF8
  4190                           tblptrh	equ	0xFF7
  4191                           tblptrl	equ	0xFF6
  4192                           tablat	equ	0xFF5
  4193                           prodh	equ	0xFF4
  4194                           prodl	equ	0xFF3
  4195                           intcon	equ	0xFF2
  4196                           intcon3	equ	0xFF0
  4197                           postinc0	equ	0xFEE
  4198                           fsr0h	equ	0xFEA
  4199                           fsr0l	equ	0xFE9
  4200                           wreg	equ	0xFE8
  4201                           postdec1	equ	0xFE5
  4202                           fsr1h	equ	0xFE2
  4203                           fsr1l	equ	0xFE1
  4204                           indf2	equ	0xFDF
  4205                           postinc2	equ	0xFDE
  4206                           postdec2	equ	0xFDD
  4207                           fsr2h	equ	0xFDA
  4208                           fsr2l	equ	0xFD9
  4209                           status	equ	0xFD8
  4210                           
  4211 ;; *************** function _digitalRead *****************
  4212 ;; Defined at:
  4213 ;;		line 43 in file "iopin.c"
  4214 ;; Parameters:    Size  Location     Type
  4215 ;;  port            2    0[COMRAM] int 
  4216 ;;  pin             2    2[COMRAM] int 
  4217 ;; Auto vars:     Size  Location     Type
  4218 ;;		None
  4219 ;; Return value:  Size  Location     Type
  4220 ;;                  2    0[COMRAM] int 
  4221 ;; Registers used:
  4222 ;;		wreg, status,2, status,0
  4223 ;; Tracked objects:
  4224 ;;		On entry : 0/0
  4225 ;;		On exit  : 0/0
  4226 ;;		Unchanged: 0/0
  4227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4228 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4230 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4231 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4232 ;;Total ram usage:        6 bytes
  4233 ;; Hardware stack levels used:    1
  4234 ;; This function calls:
  4235 ;;		Nothing
  4236 ;; This function is called by:
  4237 ;;		_servoInterruptService
  4238 ;; This function uses a non-reentrant model
  4239 ;;
  4240                           
  4241                           	psect	text26
  4242  0005C2                     __ptext26:
  4243                           	opt stack 0
  4244  0005C2                     _digitalRead:
  4245                           	opt stack 22
  4246                           
  4247                           ;iopin.c: 44: switch(port){
  4248                           
  4249                           ;incstack = 0
  4250  0005C2  D040               	goto	i2l1939
  4251  0005C4                     i2l1921:
  4252  0005C4  C003  F005         	movff	digitalRead@pin,??_digitalRead
  4253  0005C8  CF80 F006          	movff	3968,??_digitalRead+1	;volatile
  4254  0005CC  2A05               	incf	??_digitalRead,f,c
  4255  0005CE  D002               	goto	i2u96_44
  4256  0005D0                     i2u96_45:
  4257  0005D0  90D8               	bcf	status,0,c
  4258  0005D2  3206               	rrcf	??_digitalRead+1,f,c
  4259  0005D4                     i2u96_44:
  4260  0005D4  2E05               	decfsz	??_digitalRead,f,c
  4261  0005D6  D7FC               	goto	i2u96_45
  4262  0005D8  0E01               	movlw	1
  4263  0005DA  1606               	andwf	??_digitalRead+1,f,c
  4264  0005DC  5006               	movf	??_digitalRead+1,w,c
  4265  0005DE  6E01               	movwf	?_digitalRead,c
  4266  0005E0  6A02               	clrf	?_digitalRead+1,c
  4267  0005E2  0012               	return	
  4268  0005E4                     i2l1925:
  4269  0005E4  C003  F005         	movff	digitalRead@pin,??_digitalRead
  4270  0005E8  CF81 F006          	movff	3969,??_digitalRead+1	;volatile
  4271  0005EC  2A05               	incf	??_digitalRead,f,c
  4272  0005EE  D002               	goto	i2u97_44
  4273  0005F0                     i2u97_45:
  4274  0005F0  90D8               	bcf	status,0,c
  4275  0005F2  3206               	rrcf	??_digitalRead+1,f,c
  4276  0005F4                     i2u97_44:
  4277  0005F4  2E05               	decfsz	??_digitalRead,f,c
  4278  0005F6  D7FC               	goto	i2u97_45
  4279  0005F8  0E01               	movlw	1
  4280  0005FA  1606               	andwf	??_digitalRead+1,f,c
  4281  0005FC  5006               	movf	??_digitalRead+1,w,c
  4282  0005FE  6E01               	movwf	?_digitalRead,c
  4283  000600  6A02               	clrf	?_digitalRead+1,c
  4284  000602  0012               	return	
  4285  000604                     i2l1929:
  4286  000604  C003  F005         	movff	digitalRead@pin,??_digitalRead
  4287  000608  CF82 F006          	movff	3970,??_digitalRead+1	;volatile
  4288  00060C  2A05               	incf	??_digitalRead,f,c
  4289  00060E  D002               	goto	i2u98_44
  4290  000610                     i2u98_45:
  4291  000610  90D8               	bcf	status,0,c
  4292  000612  3206               	rrcf	??_digitalRead+1,f,c
  4293  000614                     i2u98_44:
  4294  000614  2E05               	decfsz	??_digitalRead,f,c
  4295  000616  D7FC               	goto	i2u98_45
  4296  000618  0E01               	movlw	1
  4297  00061A  1606               	andwf	??_digitalRead+1,f,c
  4298  00061C  5006               	movf	??_digitalRead+1,w,c
  4299  00061E  6E01               	movwf	?_digitalRead,c
  4300  000620  6A02               	clrf	?_digitalRead+1,c
  4301  000622  0012               	return	
  4302  000624                     i2l1933:
  4303  000624  C003  F005         	movff	digitalRead@pin,??_digitalRead
  4304  000628  CF83 F006          	movff	3971,??_digitalRead+1	;volatile
  4305  00062C  2A05               	incf	??_digitalRead,f,c
  4306  00062E  D002               	goto	i2u99_44
  4307  000630                     i2u99_45:
  4308  000630  90D8               	bcf	status,0,c
  4309  000632  3206               	rrcf	??_digitalRead+1,f,c
  4310  000634                     i2u99_44:
  4311  000634  2E05               	decfsz	??_digitalRead,f,c
  4312  000636  D7FC               	goto	i2u99_45
  4313  000638  0E01               	movlw	1
  4314  00063A  1606               	andwf	??_digitalRead+1,f,c
  4315  00063C  5006               	movf	??_digitalRead+1,w,c
  4316  00063E  6E01               	movwf	?_digitalRead,c
  4317  000640  6A02               	clrf	?_digitalRead+1,c
  4318  000642  0012               	return	
  4319  000644                     i2l1939:
  4320  000644  C001  F005         	movff	digitalRead@port,??_digitalRead
  4321  000648  C002  F006         	movff	digitalRead@port+1,??_digitalRead+1
  4322                           
  4323                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4324                           ; Switch size 1, requested type "space"
  4325                           ; Number of cases is 1, Range of values is 0 to 0
  4326                           ; switch strategies available:
  4327                           ; Name         Instructions Cycles
  4328                           ; simple_byte            4     3 (average)
  4329                           ;	Chosen strategy is simple_byte
  4330  00064C  5006               	movf	??_digitalRead+1,w,c
  4331  00064E  0A00               	xorlw	0	; case 0
  4332  000650  A4D8               	btfss	status,2,c
  4333  000652  D00D               	goto	i2l233
  4334                           
  4335                           ; Switch size 1, requested type "space"
  4336                           ; Number of cases is 4, Range of values is 0 to 3
  4337                           ; switch strategies available:
  4338                           ; Name         Instructions Cycles
  4339                           ; simple_byte           13     7 (average)
  4340                           ;	Chosen strategy is simple_byte
  4341  000654  5005               	movf	??_digitalRead,w,c
  4342  000656  0A00               	xorlw	0	; case 0
  4343  000658  B4D8               	btfsc	status,2,c
  4344  00065A  D7B4               	goto	i2l1921
  4345  00065C  0A01               	xorlw	1	; case 1
  4346  00065E  B4D8               	btfsc	status,2,c
  4347  000660  D7C1               	goto	i2l1925
  4348  000662  0A03               	xorlw	3	; case 2
  4349  000664  B4D8               	btfsc	status,2,c
  4350  000666  D7CE               	goto	i2l1929
  4351  000668  0A01               	xorlw	1	; case 3
  4352  00066A  B4D8               	btfsc	status,2,c
  4353  00066C  D7DB               	goto	i2l1933
  4354  00066E                     i2l233:
  4355                           
  4356                           ;iopin.c: 50: return -1;
  4357  00066E  6801               	setf	?_digitalRead,c
  4358  000670  6802               	setf	?_digitalRead+1,c
  4359  000672  0012               	return		;funcret
  4360  000674                     __end_of_digitalRead:
  4361                           	opt stack 0
  4362                           pclatu	equ	0xFFB
  4363                           pclath	equ	0xFFA
  4364                           tblptru	equ	0xFF8
  4365                           tblptrh	equ	0xFF7
  4366                           tblptrl	equ	0xFF6
  4367                           tablat	equ	0xFF5
  4368                           prodh	equ	0xFF4
  4369                           prodl	equ	0xFF3
  4370                           intcon	equ	0xFF2
  4371                           intcon3	equ	0xFF0
  4372                           postinc0	equ	0xFEE
  4373                           fsr0h	equ	0xFEA
  4374                           fsr0l	equ	0xFE9
  4375                           wreg	equ	0xFE8
  4376                           postdec1	equ	0xFE5
  4377                           fsr1h	equ	0xFE2
  4378                           fsr1l	equ	0xFE1
  4379                           indf2	equ	0xFDF
  4380                           postinc2	equ	0xFDE
  4381                           postdec2	equ	0xFDD
  4382                           fsr2h	equ	0xFDA
  4383                           fsr2l	equ	0xFD9
  4384                           status	equ	0xFD8
  4385                           pclatu	equ	0xFFB
  4386                           pclath	equ	0xFFA
  4387                           tblptru	equ	0xFF8
  4388                           tblptrh	equ	0xFF7
  4389                           tblptrl	equ	0xFF6
  4390                           tablat	equ	0xFF5
  4391                           prodh	equ	0xFF4
  4392                           prodl	equ	0xFF3
  4393                           intcon	equ	0xFF2
  4394                           intcon3	equ	0xFF0
  4395                           postinc0	equ	0xFEE
  4396                           fsr0h	equ	0xFEA
  4397                           fsr0l	equ	0xFE9
  4398                           wreg	equ	0xFE8
  4399                           postdec1	equ	0xFE5
  4400                           fsr1h	equ	0xFE2
  4401                           fsr1l	equ	0xFE1
  4402                           indf2	equ	0xFDF
  4403                           postinc2	equ	0xFDE
  4404                           postdec2	equ	0xFDD
  4405                           fsr2h	equ	0xFDA
  4406                           fsr2l	equ	0xFD9
  4407                           status	equ	0xFD8
  4408                           
  4409                           	psect	rparam
  4410  0000                     pclatu	equ	0xFFB
  4411                           pclath	equ	0xFFA
  4412                           tblptru	equ	0xFF8
  4413                           tblptrh	equ	0xFF7
  4414                           tblptrl	equ	0xFF6
  4415                           tablat	equ	0xFF5
  4416                           prodh	equ	0xFF4
  4417                           prodl	equ	0xFF3
  4418                           intcon	equ	0xFF2
  4419                           intcon3	equ	0xFF0
  4420                           postinc0	equ	0xFEE
  4421                           fsr0h	equ	0xFEA
  4422                           fsr0l	equ	0xFE9
  4423                           wreg	equ	0xFE8
  4424                           postdec1	equ	0xFE5
  4425                           fsr1h	equ	0xFE2
  4426                           fsr1l	equ	0xFE1
  4427                           indf2	equ	0xFDF
  4428                           postinc2	equ	0xFDE
  4429                           postdec2	equ	0xFDD
  4430                           fsr2h	equ	0xFDA
  4431                           fsr2l	equ	0xFD9
  4432                           status	equ	0xFD8
  4433                           
  4434                           	psect	temp
  4435  00005B                     btemp:
  4436                           	opt stack 0
  4437  00005B                     	ds	1
  4438  0000                     int$flags	set	btemp
  4439                           pclatu	equ	0xFFB
  4440                           pclath	equ	0xFFA
  4441                           tblptru	equ	0xFF8
  4442                           tblptrh	equ	0xFF7
  4443                           tblptrl	equ	0xFF6
  4444                           tablat	equ	0xFF5
  4445                           prodh	equ	0xFF4
  4446                           prodl	equ	0xFF3
  4447                           intcon	equ	0xFF2
  4448                           intcon3	equ	0xFF0
  4449                           postinc0	equ	0xFEE
  4450                           fsr0h	equ	0xFEA
  4451                           fsr0l	equ	0xFE9
  4452                           wreg	equ	0xFE8
  4453                           postdec1	equ	0xFE5
  4454                           fsr1h	equ	0xFE2
  4455                           fsr1l	equ	0xFE1
  4456                           indf2	equ	0xFDF
  4457                           postinc2	equ	0xFDE
  4458                           postdec2	equ	0xFDD
  4459                           fsr2h	equ	0xFDA
  4460                           fsr2l	equ	0xFD9
  4461                           status	equ	0xFD8


Data Sizes:
    Strings     245
    Constant    32
    Data        4
    BSS         32
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     54      90
    BANK0           128      8       8
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_14(CODE[17]), STR_13(CODE[18]), STR_12(CODE[17]), STR_11(CODE[18]), 
		 -> STR_10(CODE[17]), STR_9(CODE[19]), STR_8(CODE[17]), STR_7(CODE[18]), 
		 -> STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[17]), STR_3(CODE[18]), 
		 -> STR_2(CODE[9]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__getTime	PTR int  size(2) Largest target is 7
		 -> getTime@time(COMRAM[7]), 


Critical Paths under _main in COMRAM

    _main->_initServo
    _runTime->_printf
    _runStats->_printf
    _runSelect->_printf
    _runMenu->_printf
    _mainMenu->_printf
    _initServo->_digitalWrite
    _initLCD->_lcdInst
    _dateTime->_printf
    _printf->___lwdiv
    _lcdNewline->_lcdInst
    _lcdClear->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _service in COMRAM

    _service->_servoInterruptService
    _servoInterruptService->i2_digitalWrite

Critical Paths under _main in BANK0

    _runTime->_printf
    _runStats->_printf
    _runSelect->_printf
    _runMenu->_printf
    _mainMenu->_printf
    _dateTime->_printf

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   17621
                                             53 COMRAM     1     1      0
                           _dateTime
                            _initLCD
                          _initServo
                           _mainMenu
                           _pinSetup
                         _readKeypad
                            _runMenu
                          _runSelect
                           _runStats
                            _runTime
 ---------------------------------------------------------------------------------
 (1) _runTime                                              0     0      0    2466
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (1) _runStats                                             0     0      0    2466
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (1) _runSelect                                            0     0      0    2466
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (1) _runMenu                                              1     1      0    2497
                                             49 COMRAM     1     1      0
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (1) _readKeypad                                           1     1      0      15
                                             36 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mainMenu                                             0     0      0    2466
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initServo                                            8     2      6    2046
                                             45 COMRAM     8     2      6
                       _digitalWrite
                          _initTimer
                         _startTimer
 ---------------------------------------------------------------------------------
 (2) _startTimer                                           8     2      6     434
                                             36 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _initTimer                                            4     2      2      86
                                             36 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                         9     3      6     752
                                             36 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             40 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _dateTime                                             0     0      0    2466
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              23    17      6    2331
                                             43 COMRAM     6     0      6
                                              0 BANK0      8     8      0
                            ___lwdiv
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     292
                                             40 COMRAM     1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     395
                                             36 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdClear                                             0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     135
                                             38 COMRAM     2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             36 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _service                                             15    15      0    2313
                                             21 COMRAM    15    15      0
              _servoInterruptService
                           _setAngle
 ---------------------------------------------------------------------------------
 (8) _setAngle                                             8     2      6     812
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (8) _servoInterruptService                               12    12      0    1368
                                              9 COMRAM    12    12      0
                        _digitalRead
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) i2_startTimer                                         8     2      6     258
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (9) i2_digitalWrite                                       9     3      6     488
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (9) _digitalRead                                          6     2      4     238
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dateTime
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___lwdiv
       _putch
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _digitalWrite
     _initTimer
     _startTimer
   _mainMenu
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___lwdiv
       _putch
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
   _pinSetup
   _readKeypad
   _runMenu
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___lwdiv
       _putch
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
   _runSelect
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___lwdiv
       _putch
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
   _runStats
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___lwdiv
       _putch
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
   _runTime
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___lwdiv
       _putch
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble

 _service (ROOT)
   _servoInterruptService
     _digitalRead
     i2_digitalWrite
     i2_startTimer
   _setAngle

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      8       8       5        6.3%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     36      5A       1       71.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      62      34        0.0%
DATA                 0      0      62       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Mar 11 15:19:20 2017

                            l98 05C0                     __CFG_BORV$3 000000                    __CFG_CP0$OFF 000000  
                  __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000  
                   __CFG_OSC$HS 000000                             l132 0B54                             l342 0930  
                           l166 0B1E                             l335 0A06                             l344 093C  
                           l345 0948                             l169 0B2A                             l531 0464  
                           l529 040C                             l938 0924                    __CFG_CPB$OFF 000000  
                           _PEN 007E2A                    __CFG_CPD$OFF 000000                             _SEN 007E28  
                           _pin 0047                             wreg 000FE8                    __CFG_LVP$OFF 000000  
                  __CFG_WDT$OFF 000000                            l2011 0954                            l2411 08F2  
                          l2413 08FA                            l2423 091A                            l2415 08FE  
                          l2431 0350                            l2441 0384                            l2435 0364  
                          l2531 04E8                            l2453 03D6                            l2437 036C  
                          l2445 038E                            l2533 04EC                            l2471 0470  
                          l2535 04F6                            l2465 0412                            l2561 0552  
                          l2545 0518                            l2537 04FA                            l2565 055A  
                          l2549 0524                            l2583 059A                            l2575 057E  
                          l2567 0560                            l1961 06CC                            l1953 06B2  
                          l1971 06EE                            l1955 06B8                            l2587 05A2  
                          l2579 058C                            l1965 06DA                            l1949 06A4  
                          l1973 06F4                            l1981 09C8                            l2589 05AE  
                          l1967 06E0                            l1959 06C6                            l1991 09DA  
                          l1987 09D2                            l1997 09E2                            _EEIF 007D0C  
                          STR_1 FFF6                            STR_2 FFED                            STR_3 FF2E  
                          STR_4 FFDC                            STR_5 FF1C                            STR_6 FFA9  
                          STR_7 FF40                            STR_8 FF98                            STR_9 FF09  
                          u1004 068A                            u1005 0684                            u2007 088E  
                          u2017 089C                            u2027 08C2                            u2037 08D0  
                          _LATA 000F89                            _LATB 000F8A                            _LATC 000F8B  
                          _LATD 000F8C                            _LATE 000F8D                            _PEIE 007F96  
                          u1957 0A12                            u1967 0A46                            u1977 0B58  
                          u1987 0B6C                            _RCEN 007E2B                            u1997 0B7E  
                          _RSEN 007E29                            _main 048C                            _keys FEE9  
                          _port 004F                            fsr0h 000FEA                            fsr1h 000FE2  
                          fsr2h 000FDA                            fsr0l 000FE9                            indf2 000FDF  
                          fsr1l 000FE1                            fsr2l 000FD9                            btemp 005B  
                          prodh 000FF4                            prodl 000FF3                            start 000E  
                 __CFG_IESO$OFF 000000                   __CFG_MCLRE$ON 000000                    ___param_bank 000000  
          __end_ofi2_startTimer 09C6                           ?_main 0001                           _ACKEN 007E2C  
                         _ACKDT 007E2D                           _EEADR 000FA9                           STR_10 FFBA  
                         STR_11 FF52                           STR_12 FF87                           STR_13 FF64  
                         STR_14 FFCB                           STR_15 FF76         ??_servoInterruptService 000A  
                         _T0CON 000FD5                           _T1CON 000FCD                           _T3CON 000FB1  
               __end_of___lwdiv 092E                           i2l111 0306                           i2l233 066E  
                         i2l342 097C                           i2l344 0988                           i2l345 0994  
                         i2l460 019C                           i2l462 01A0                           i2l463 01A4  
                         i2l464 01A8                           i2l465 01E4                           _TMR0H 000FD7  
                         _TMR1H 000FCF                           _TMR0L 000FD6                           _TMR3H 000FB3  
                         _TMR1L 000FCE                           _TMR3L 000FB2                           _PORTA 000F80  
                         _PORTB 000F81                           _PORTC 000F82                           _PORTD 000F83  
                         _TRISA 000F92                           _TRISB 000F93                           _TRISC 000F94  
                         _TRISD 000F95                           _TRISE 000F96                   __CFG_PWRT$OFF 000000  
                 __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000  
                 __CFG_WRT3$OFF 000000                 __end_of_lcdInst 0B88                  __CFG_EBTR0$OFF 000000  
                __CFG_FCMEN$OFF 000000          servoInterruptService@i 0014                  __CFG_EBTR1$OFF 000000  
                __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000                   __CFG_WRTB$OFF 000000  
                 __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000                 __end_of_initLCD 0A52  
                __CFG_EBTRB$OFF 000000                           _angle 0057                           _pulse 0037  
                         _putch 0B44                           pclath 000FFA                           tablat 000FF5  
               __end_of_service 0342                 __end_of_runMenu 0B1E                 __end_of_runTime 0BA6  
                         status 000FD8                  __CFG_PBADEN$ON 000000            __end_of_digitalWrite 0720  
               __initialization 0A52                    __end_of_main 05C2                    __end_of_keys FEFA  
                        ??_main 0036                   __activetblptr 000002            __size_of_digitalRead 00B2  
                        _ADCON0 000FC2                          _ADCON1 000FC1                          _ADCON2 000FC0  
                        _ADRESH 000FC4                          _EEADRH 000FAA                          _ADRESL 000FC3  
                        _EEDATA 000FA8                          _EECON1 000FA6                          _EECON2 000FA7  
                        ?_putch 0001                          _INT1IF 007F80                          i2l2103 09A0  
                        i2l2071 0764                          i2l2081 0786                          i2l2065 0750  
                        i2l2161 0066                          i2l2083 078C                          i2l2075 0772  
                        i2l2077 0778                          i2l2069 075E                          i2l2173 01AC  
                        i2l2087 079A                          i2l2175 01D6                          i2l2271 0254  
                        i2l2089 07A0                          i2l2169 011E                          i2l2283 02BE  
                        i2l2275 0276                          i2l2287 02E2                          i2l2279 029A  
                        i2l1921 05C4                          i2l1933 0624                          i2l1925 05E4  
                        i2l1929 0604                          i2l1939 0644                          _TMR0IE 007F95  
                        _TMR0IF 007F92                          _TMR1IE 007CE8                          _TMR1IF 007CF0  
                        _TMR2IF 007CF1                          _TMR3IE 007D01                          _TMR3IF 007D09  
                        _SSPADD 000FC8                          _TRISC3 007CA3                          _TRISC4 007CA4  
                        _SSPBUF 000FC9                __end_of_dateTime 0C1E                __end_of_lcdClear 0C2E  
                   initServo@pi 0032                     initServo@po 0030                  __CFG_XINST$OFF 000000  
              __end_of_mainMenu 0C00                  __CFG_STVREN$ON 000000                       ??___lwdiv 0029  
                        clear_0 0A78                       ??_lcdInst 0027                          _printf 0342  
              __end_of_pinSetup 0AC6                __end_of_setAngle 0AF8                       ??_initLCD 0029  
                  __pdataCOMRAM 0057                   setAngle@angle 0003                    __mediumconst FEE8  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
                 setAngle@timer 0001                       ??_service 0016                       ??_runMenu 0032  
              __end_of_runStats 0BC4                       ??_runTime 0032                      __accesstop 0080  
       __end_of__initialization 0A7E                   ___rparam_used 000001           __size_ofi2_startTimer 004C  
          __end_of_happynewyear FF09                  __pcstackCOMRAM 0001                   __end_of_putch 0B66  
            __size_of_lcdNibble 0066              i2digitalWrite@port 0001                         ??_putch 0029  
                  i2_startTimer 097A           __size_of_digitalWrite 00AC              __size_of_initTimer 0046  
            __size_of_initServo 00AA                      _lcdNewline 0C1E                         ?_printf 002C  
    servoInterruptService@flags 000C  __size_of_servoInterruptService 01D4   __end_of_servoInterruptService 01E6  
                     ?_dateTime 0001               i2startTimer@timer 0001                       ?_lcdClear 0001  
            __size_of_runSelect 001E                    _digitalWrite 0674                         i2u96_44 05D4  
                       i2u96_45 05D0                         i2u97_44 05F4                         i2u97_45 05F0  
                       i2u98_44 0614                         i2u98_45 0610                         i2u99_44 0634  
                       i2u99_45 0630                         _SSPCON1 000FC6                         _SSPCON2 000FC5  
                       _SSPSTAT 000FC7                       ?_mainMenu 0001         __size_ofi2_digitalWrite 00AC  
                     ?_pinSetup 0001                       ?_setAngle 0001               __end_of_lcdNibble 08DC  
                       __Hparam 0000                         __Lparam 0000                      _readKeypad 0B1E  
                     ?_runStats 0001                         ___lwdiv 08DC                         __pcinit 0A52  
                       __ramtop 1000                         _lcdInst 0B66                         __ptext0 048C  
                       __ptext1 0B88                         __ptext2 0BA6                         __ptext3 0BC4  
                       __ptext4 0AF8                         __ptext5 0B1E                         __ptext6 0A8C  
                       __ptext7 0BE2                         __ptext8 07CC                         __ptext9 092E  
               __size_of_printf 014A                   startTimer@val 0027                         _initLCD 0A0C  
             __end_of_hexpowers FF02               __end_of_initTimer 0A0C               __end_of_initServo 0876  
                    ??_dateTime 0032                      ??_lcdClear 0029                         _service 0008  
                       _runMenu 0AF8                         _runTime 0B88                         main@key 0036  
                __pintcode_body 01E6            end_of_initialization 0A7E                      ??_mainMenu 0032  
                 __Lmediumconst FEE8                         int_func 01E6                  digitalRead@pin 0003  
                    ??_pinSetup 0025                      ??_setAngle 0007               __end_of_runSelect 0BE2  
                       printf@c 0087                         printf@f 002C                         postdec1 000FE5  
                       postdec2 000FDD                         postinc0 000FEE                         postinc2 000FDE  
                    ??_runStats 0032                   ??_digitalRead 0005                     ?_lcdNewline 0001  
                     _PORTBbits 000F81                    _happynewyear FF02                      _startTimer 092E  
                   ?_readKeypad 0001                   __pidataCOMRAM 0C2E                  __end_of_printf 048C  
           start_initialization 0A52             __end_of_digitalRead 0674                  initTimer@timer 0025  
                initServo@timer 002E                  i2_digitalWrite 0720             __size_of_lcdNewline 0008  
              __CFG_LPT1OSC$OFF 000000                        ??_printf 0032                     __pbssCOMRAM 0037  
                 __pcstackBANK0 0080          __end_ofi2_digitalWrite 07CC               __size_of_dateTime 001E  
                   ?_startTimer 0025               __size_of_lcdClear 0008             __size_of_readKeypad 0026  
             __size_of_mainMenu 001E               i2digitalWrite@pin 0003               i2digitalWrite@val 0005  
              ___lwdiv@dividend 0025               __CFG_CCP2MX$PORTC 000000               __size_of_pinSetup 003A  
             __size_of_setAngle 0032                       __pintcode 0008                   __pmediumconst FEE8  
                     _lcdNibble 0876                        ?___lwdiv 0025                     _digitalRead 05C2  
                      ?_lcdInst 0001               __size_of_runStats 001E                        ?_initLCD 0001  
               startTimer@timer 0025                        ?_service 0001                       _hexpowers FEFA  
                      ?_runMenu 0001                       _initTimer 09C6                       _initServo 07CC  
                      ?_runTime 0001                 ?i2_digitalWrite 0001           _servoInterruptService 0012  
              ___lwdiv@quotient 002A                  __size_of_putch 0022                        _LATDbits 000F8C  
                      i2u120_40 0028                        i2u112_44 0736                        i2u112_45 0730  
                      i2u121_40 002A                        i2u122_40 0036                        i2u123_40 0038  
                      i2u124_40 0044                        i2u125_40 0046                        i2u126_40 0064  
                      i2u118_40 001A                        i2u119_40 001C                __CFG_WDTPS$32768 000000  
                    ?_lcdNibble 0001                      service@key 0024                    ??_lcdNewline 0029  
           __size_of_startTimer 004C                       _runSelect 0BC4                   lcdNibble@data 0026  
                    printf@flag 0080                   lcdNibble@temp 0025                      printf@prec 0084  
                    runMenu@key 0032                      ?_initTimer 0025                      ?_initServo 002E  
                     copy_data0 0A66              __end_of_lcdNewline 0C26                   readKeypad@key 0025  
                      __Hrparam 0000                        __Lrparam 0000              __CFG_BOREN$SBORDIS 000000  
                  ??_readKeypad 0025                __size_of___lwdiv 0052                      ?_runSelect 0001  
              __size_of_lcdInst 0022                __size_of_initLCD 0046                        _dateTime 0C00  
        ?_servoInterruptService 0001                        _lcdClear 0C26                 ___lwdiv@divisor 0027  
               ___lwdiv@counter 0029                        __ptext10 09C6                        __ptext11 0674  
                      __ptext20 0876                        __ptext12 0A0C                        __ptext13 0C00  
                      __ptext22 0AC6                        __ptext14 0342                        __ptext23 0012  
                      __ptext15 0B44                        __ptext24 097A                        __ptext16 0C1E  
                      __ptext25 0720                        __ptext17 08DC                        __ptext26 05C2  
                      __ptext18 0C26                        __ptext19 0B66                __size_of_service 033A  
              __size_of_runMenu 0026                 i2startTimer@val 0003                __size_of_runTime 001E  
                 ?i2_startTimer 0001                        _mainMenu 0BE2              __end_of_readKeypad 0B44  
                 __size_of_main 0136                        _pinSetup 0A8C                        _setAngle 0AC6  
                   ??_lcdNibble 0025                        int$flags 005B                        _runStats 0BA6  
                     printf@idx 0081                       printf@val 0082                       putch@data 0029  
                    _INTCONbits 000FF2                   ?_digitalWrite 0025                     ??_initTimer 0027  
                   ??_initServo 0034                  ??i2_startTimer 0007                    ??_startTimer 002B  
               digitalRead@port 0001                        intlevel2 0000                        printf@ap 0085  
                   lcdInst@data 0028                    ?_digitalRead 0001                     ??_runSelect 0032  
            __end_of_startTimer 097A                ??i2_digitalWrite 0007                digitalWrite@port 0025  
                ??_digitalWrite 002B                 digitalWrite@pin 0027                 digitalWrite@val 0029  
