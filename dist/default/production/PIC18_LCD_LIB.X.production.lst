

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Mar 10 00:12:27 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    51                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    52  0000                     
    53                           ; Version 1.40
    54                           ; Generated 01/12/2016 GMT
    55                           ; 
    56                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC18F4620 Definitions
    85                           ; 
    86                           ; SFR Addresses
    87  0000                     
    88                           	psect	idataCOMRAM
    89  003096                     __pidataCOMRAM:
    90                           	opt stack 0
    91                           
    92                           ;initializer for _extFreq
    93  003096  A6E0               	dw	42720
    94  003098  01E0               	dw	480
    95                           
    96                           ;initializer for _angle
    97  00309A  00                 	db	0
    98  00309B  34                 	db	52
    99  00309C  43                 	db	67
   100                           
   101                           ;initializer for _flag0
   102  00309D  0001               	dw	1
   103                           
   104                           	psect	smallconst
   105  001000                     __psmallconst:
   106                           	opt stack 0
   107  001000  00                 	db	0
   108  001001                     _dpowers:
   109                           	opt stack 0
   110  001001  0001               	dw	1
   111  001003  0000               	dw	0
   112  001005  000A               	dw	10
   113  001007  0000               	dw	0
   114  001009  0064               	dw	100
   115  00100B  0000               	dw	0
   116  00100D  03E8               	dw	1000
   117  00100F  0000               	dw	0
   118  001011  2710               	dw	10000
   119  001013  0000               	dw	0
   120  001015  86A0               	dw	34464
   121  001017  0001               	dw	1
   122  001019  4240               	dw	16960
   123  00101B  000F               	dw	15
   124  00101D  9680               	dw	38528
   125  00101F  0098               	dw	152
   126  001021  E100               	dw	57600
   127  001023  05F5               	dw	1525
   128  001025  CA00               	dw	51712
   129  001027  3B9A               	dw	15258
   130  001029                     __end_of_dpowers:
   131                           	opt stack 0
   132  001029                     __npowers_:
   133                           	opt stack 0
   134  001029  00                 	db	0
   135  00102A  80                 	db	128
   136  00102B  3F                 	db	63
   137  00102C  CD                 	db	205
   138  00102D  CC                 	db	204
   139  00102E  3D                 	db	61
   140  00102F  D7                 	db	215
   141  001030  23                 	db	35
   142  001031  3C                 	db	60
   143  001032  12                 	db	18
   144  001033  83                 	db	131
   145  001034  3A                 	db	58
   146  001035  B7                 	db	183
   147  001036  D1                 	db	209
   148  001037  38                 	db	56
   149  001038  C6                 	db	198
   150  001039  27                 	db	39
   151  00103A  37                 	db	55
   152  00103B  38                 	db	56
   153  00103C  86                 	db	134
   154  00103D  35                 	db	53
   155  00103E  C0                 	db	192
   156  00103F  D6                 	db	214
   157  001040  33                 	db	51
   158  001041  CC                 	db	204
   159  001042  2B                 	db	43
   160  001043  32                 	db	50
   161  001044  70                 	db	112
   162  001045  89                 	db	137
   163  001046  30                 	db	48
   164  001047  E7                 	db	231
   165  001048  DB                 	db	219
   166  001049  2E                 	db	46
   167  00104A  E5                 	db	229
   168  00104B  3C                 	db	60
   169  00104C  1E                 	db	30
   170  00104D  42                 	db	66
   171  00104E  A2                 	db	162
   172  00104F  0D                 	db	13
   173  001050                     __end_of__npowers_:
   174                           	opt stack 0
   175  001050                     __powers_:
   176                           	opt stack 0
   177  001050  00                 	db	0
   178  001051  80                 	db	128
   179  001052  3F                 	db	63
   180  001053  00                 	db	0
   181  001054  20                 	db	32
   182  001055  41                 	db	65
   183  001056  00                 	db	0
   184  001057  C8                 	db	200
   185  001058  42                 	db	66
   186  001059  00                 	db	0
   187  00105A  7A                 	db	122
   188  00105B  44                 	db	68
   189  00105C  40                 	db	64
   190  00105D  1C                 	db	28
   191  00105E  46                 	db	70
   192  00105F  50                 	db	80
   193  001060  C3                 	db	195
   194  001061  47                 	db	71
   195  001062  24                 	db	36
   196  001063  74                 	db	116
   197  001064  49                 	db	73
   198  001065  97                 	db	151
   199  001066  18                 	db	24
   200  001067  4B                 	db	75
   201  001068  BC                 	db	188
   202  001069  BE                 	db	190
   203  00106A  4C                 	db	76
   204  00106B  6B                 	db	107
   205  00106C  6E                 	db	110
   206  00106D  4E                 	db	78
   207  00106E  03                 	db	3
   208  00106F  15                 	db	21
   209  001070  50                 	db	80
   210  001071  79                 	db	121
   211  001072  AD                 	db	173
   212  001073  60                 	db	96
   213  001074  F3                 	db	243
   214  001075  49                 	db	73
   215  001076  71                 	db	113
   216  001077                     __end_of__powers_:
   217                           	opt stack 0
   218  001077                     _hexpowers:
   219                           	opt stack 0
   220  001077  0001               	dw	1
   221  001079  0000               	dw	0
   222  00107B  0010               	dw	16
   223  00107D  0000               	dw	0
   224  00107F  0100               	dw	256
   225  001081  0000               	dw	0
   226  001083  1000               	dw	4096
   227  001085  0000               	dw	0
   228  001087  0000               	dw	0
   229  001089  0001               	dw	1
   230  00108B  0000               	dw	0
   231  00108D  0010               	dw	16
   232  00108F  0000               	dw	0
   233  001091  0100               	dw	256
   234  001093  0000               	dw	0
   235  001095  1000               	dw	4096
   236  001097                     __end_of_hexpowers:
   237                           	opt stack 0
   238  001097  31                 	db	49
   239  001098  32                 	db	50
   240  001099  33                 	db	51
   241  00109A  41                 	db	65
   242  00109B  34                 	db	52
   243  00109C  35                 	db	53
   244  00109D  36                 	db	54
   245  00109E  42                 	db	66
   246  00109F  37                 	db	55
   247  0010A0  38                 	db	56
   248  0010A1  39                 	db	57
   249  0010A2  43                 	db	67
   250  0010A3  2A                 	db	42
   251  0010A4  30                 	db	48
   252  0010A5  23                 	db	35
   253  0010A6  44                 	db	68
   254  0010A7  00                 	db	0
   255  0010A8                     __end_of_keys:
   256                           	opt stack 0
   257  0010A8                     _happynewyear:
   258                           	opt stack 0
   259  0010A8  45                 	db	69
   260  0010A9  59                 	db	89
   261  0010AA  23                 	db	35
   262  0010AB  07                 	db	7
   263  0010AC  31                 	db	49
   264  0010AD  12                 	db	18
   265  0010AE  16                 	db	22
   266  0010AF                     __end_of_happynewyear:
   267                           	opt stack 0
   268  0010AF                     testFrequency@F2964:
   269                           	opt stack 0
   270  0010AF  45                 	db	69
   271  0010B0  59                 	db	89
   272  0010B1  23                 	db	35
   273  0010B2  07                 	db	7
   274  0010B3  31                 	db	49
   275  0010B4  12                 	db	18
   276  0010B5  16                 	db	22
   277  0010B6                     __end_oftestFrequency@F2964:
   278                           	opt stack 0
   279  0000                     _ADCON0	set	4034
   280  0000                     _ADCON1	set	4033
   281  0000                     _ADCON2	set	4032
   282  0000                     _ADRESH	set	4036
   283  0000                     _ADRESL	set	4035
   284  0000                     _EEADR	set	4009
   285  0000                     _EEADRH	set	4010
   286  0000                     _EECON1	set	4006
   287  0000                     _EECON2	set	4007
   288  0000                     _EEDATA	set	4008
   289  0000                     _INTCONbits	set	4082
   290  0000                     _LATA	set	3977
   291  0000                     _LATB	set	3978
   292  0000                     _LATC	set	3979
   293  0000                     _LATD	set	3980
   294  0000                     _LATDbits	set	3980
   295  0000                     _LATE	set	3981
   296  0000                     _PORTA	set	3968
   297  0000                     _PORTB	set	3969
   298  0000                     _PORTBbits	set	3969
   299  0000                     _PORTC	set	3970
   300  0000                     _PORTD	set	3971
   301  0000                     _SSPADD	set	4040
   302  0000                     _SSPBUF	set	4041
   303  0000                     _SSPCON1	set	4038
   304  0000                     _SSPCON2	set	4037
   305  0000                     _SSPSTAT	set	4039
   306  0000                     _T0CON	set	4053
   307  0000                     _TMR0H	set	4055
   308  0000                     _TMR0L	set	4054
   309  0000                     _TRISA	set	3986
   310  0000                     _TRISB	set	3987
   311  0000                     _TRISC	set	3988
   312  0000                     _TRISD	set	3989
   313  0000                     _TRISE	set	3990
   314  0000                     _ACKDT	set	32301
   315  0000                     _ACKEN	set	32300
   316  0000                     _EEIF	set	32012
   317  0000                     _INT1IF	set	32640
   318  0000                     _PEIE	set	32662
   319  0000                     _PEN	set	32298
   320  0000                     _RCEN	set	32299
   321  0000                     _RSEN	set	32297
   322  0000                     _SEN	set	32296
   323  0000                     _TMR0IE	set	32661
   324  0000                     _TMR0IF	set	32658
   325  0000                     _TRISC3	set	31907
   326  0000                     _TRISC4	set	31908
   327  0010B6                     STR_6:
   328  0010B6  30                 	db	48	;'0'
   329  0010B7  31                 	db	49	;'1'
   330  0010B8  32                 	db	50	;'2'
   331  0010B9  33                 	db	51	;'3'
   332  0010BA  34                 	db	52	;'4'
   333  0010BB  35                 	db	53	;'5'
   334  0010BC  36                 	db	54	;'6'
   335  0010BD  37                 	db	55	;'7'
   336  0010BE  38                 	db	56	;'8'
   337  0010BF  39                 	db	57	;'9'
   338  0010C0  61                 	db	97	;'a'
   339  0010C1  62                 	db	98	;'b'
   340  0010C2  63                 	db	99	;'c'
   341  0010C3  64                 	db	100	;'d'
   342  0010C4  65                 	db	101	;'e'
   343  0010C5  66                 	db	102	;'f'
   344  0010C6  00                 	db	0
   345  0010C7  68                 	db	104	;'h'
   346  0010C8  69                 	db	105	;'i'
   347  0010C9  67                 	db	103	;'g'
   348  0010CA  68                 	db	104	;'h'
   349  0010CB  3A                 	db	58	;':'
   350  0010CC  20                 	db	32
   351  0010CD  25                 	db	37
   352  0010CE  6C                 	db	108	;'l'
   353  0010CF  64                 	db	100	;'d'
   354  0010D0  0A                 	db	10
   355  0010D1  00                 	db	0
   356  0010D2  6C                 	db	108	;'l'
   357  0010D3  6F                 	db	111	;'o'
   358  0010D4  77                 	db	119	;'w'
   359  0010D5  20                 	db	32
   360  0010D6  3A                 	db	58	;':'
   361  0010D7  20                 	db	32
   362  0010D8  25                 	db	37
   363  0010D9  6C                 	db	108	;'l'
   364  0010DA  64                 	db	100	;'d'
   365  0010DB  00                 	db	0
   366  0010DC                     STR_3:
   367  0010DC  5B                 	db	91	;'['
   368  0010DD  25                 	db	37
   369  0010DE  78                 	db	120	;'x'
   370  0010DF  20                 	db	32
   371  0010E0  25                 	db	37
   372  0010E1  78                 	db	120	;'x'
   373  0010E2  5D                 	db	93	;']'
   374  0010E3  0A                 	db	10
   375  0010E4  00                 	db	0
   376  0010E5                     STR_1:
   377  0010E5  66                 	db	102	;'f'
   378  0010E6  72                 	db	114	;'r'
   379  0010E7  65                 	db	101	;'e'
   380  0010E8  71                 	db	113	;'q'
   381  0010E9  3A                 	db	58	;':'
   382  0010EA  20                 	db	32
   383  0010EB  25                 	db	37
   384  0010EC  66                 	db	102	;'f'
   385  0010ED  00                 	db	0
   386  0010EE                     STR_2:
   387  0010EE  74                 	db	116	;'t'
   388  0010EF  31                 	db	49	;'1'
   389  0010F0  3A                 	db	58	;':'
   390  0010F1  20                 	db	32
   391  0010F2  25                 	db	37
   392  0010F3  78                 	db	120	;'x'
   393  0010F4  20                 	db	32
   394  0010F5  00                 	db	0
   395                           
   396                           ; #config settings
   397  0010F6  00                 	db	0	; dummy byte at the end
   398  0000                     
   399                           	psect	cinit
   400  002F4E                     __pcinit:
   401                           	opt stack 0
   402  002F4E                     start_initialization:
   403                           	opt stack 0
   404  002F4E                     __initialization:
   405                           	opt stack 0
   406                           
   407                           ; Initialize objects allocated to COMRAM (9 bytes)
   408                           ; load TBLPTR registers with __pidataCOMRAM
   409  002F4E  0E96               	movlw	low __pidataCOMRAM
   410  002F50  6EF6               	movwf	tblptrl,c
   411  002F52  0E30               	movlw	high __pidataCOMRAM
   412  002F54  6EF7               	movwf	tblptrh,c
   413  002F56  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   414  002F58  6EF8               	movwf	tblptru,c
   415  002F5A  EE00  F064         	lfsr	0,__pdataCOMRAM
   416  002F5E  EE10 F009          	lfsr	1,9
   417  002F62                     copy_data0:
   418  002F62  0009               	tblrd		*+
   419  002F64  CFF5 FFEE          	movff	tablat,postinc0
   420  002F68  50E5               	movf	postdec1,w,c
   421  002F6A  50E1               	movf	fsr1l,w,c
   422  002F6C  E1FA               	bnz	copy_data0
   423                           
   424                           ; Clear objects allocated to COMRAM (4 bytes)
   425  002F6E  6A70               	clrf	(__pbssCOMRAM+3)& (0+255),c
   426  002F70  6A6F               	clrf	(__pbssCOMRAM+2)& (0+255),c
   427  002F72  6A6E               	clrf	(__pbssCOMRAM+1)& (0+255),c
   428  002F74  6A6D               	clrf	__pbssCOMRAM& (0+255),c
   429  002F76                     end_of_initialization:
   430                           	opt stack 0
   431  002F76                     __end_of__initialization:
   432                           	opt stack 0
   433  002F76  9071               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   434  002F78  9271               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   435  002F7A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   436  002F7C  6EF8               	movwf	tblptru,c
   437  002F7E  0100               	movlb	0
   438  002F80  EFC2  F017         	goto	_main	;jump to C main() function
   439                           tblptru	equ	0xFF8
   440                           tblptrh	equ	0xFF7
   441                           tblptrl	equ	0xFF6
   442                           tablat	equ	0xFF5
   443                           postinc0	equ	0xFEE
   444                           postdec1	equ	0xFE5
   445                           fsr1l	equ	0xFE1
   446                           
   447                           	psect	bssCOMRAM
   448  00006D                     __pbssCOMRAM:
   449                           	opt stack 0
   450  00006D                     _count:
   451                           	opt stack 0
   452  00006D                     	ds	2
   453  00006F                     _time:
   454                           	opt stack 0
   455  00006F                     	ds	2
   456                           tblptru	equ	0xFF8
   457                           tblptrh	equ	0xFF7
   458                           tblptrl	equ	0xFF6
   459                           tablat	equ	0xFF5
   460                           postinc0	equ	0xFEE
   461                           postdec1	equ	0xFE5
   462                           fsr1l	equ	0xFE1
   463                           
   464                           	psect	dataCOMRAM
   465  000064                     __pdataCOMRAM:
   466                           	opt stack 0
   467  000064                     _extFreq:
   468                           	opt stack 0
   469  000064                     	ds	4
   470  000068                     _angle:
   471                           	opt stack 0
   472  000068                     	ds	3
   473  00006B                     _flag0:
   474                           	opt stack 0
   475  00006B                     	ds	2
   476                           tblptru	equ	0xFF8
   477                           tblptrh	equ	0xFF7
   478                           tblptrl	equ	0xFF6
   479                           tablat	equ	0xFF5
   480                           postinc0	equ	0xFEE
   481                           postdec1	equ	0xFE5
   482                           fsr1l	equ	0xFE1
   483                           
   484                           	psect	cstackBANK0
   485  000080                     __pcstackBANK0:
   486                           	opt stack 0
   487  000080                     _printf$1119:
   488                           	opt stack 0
   489                           
   490                           ; 3 bytes @ 0x0
   491  000080                     	ds	3
   492  000083                     printf@idx:
   493                           	opt stack 0
   494                           
   495                           ; 1 bytes @ 0x3
   496  000083                     	ds	1
   497  000084                     printf@ap:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x4
   501  000084                     	ds	2
   502  000086                     printf@prec:
   503                           	opt stack 0
   504                           
   505                           ; 2 bytes @ 0x6
   506  000086                     	ds	2
   507  000088                     printf@flag:
   508                           	opt stack 0
   509                           
   510                           ; 2 bytes @ 0x8
   511  000088                     	ds	2
   512  00008A                     printf@exp:
   513                           	opt stack 0
   514                           
   515                           ; 2 bytes @ 0xA
   516  00008A                     	ds	2
   517  00008C                     printf@tmpval:
   518                           	opt stack 0
   519                           
   520                           ; 4 bytes @ 0xC
   521  00008C                     	ds	4
   522  000090                     printf@val:
   523                           	opt stack 0
   524                           
   525                           ; 4 bytes @ 0x10
   526  000090                     	ds	4
   527  000094                     printf@fval:
   528                           	opt stack 0
   529                           
   530                           ; 3 bytes @ 0x14
   531  000094                     	ds	3
   532  000097                     printf@c:
   533                           	opt stack 0
   534                           
   535                           ; 1 bytes @ 0x17
   536  000097                     	ds	1
   537  000098                     testFrequency@datetime:
   538                           	opt stack 0
   539                           
   540                           ; 7 bytes @ 0x18
   541  000098                     	ds	7
   542  00009F                     testFrequency@time:
   543                           	opt stack 0
   544                           
   545                           ; 14 bytes @ 0x1F
   546  00009F                     	ds	14
   547  0000AD                     testFrequency@count:
   548                           	opt stack 0
   549                           
   550                           ; 4 bytes @ 0x2D
   551  0000AD                     	ds	4
   552  0000B1                     testFrequency@prev:
   553                           	opt stack 0
   554                           
   555                           ; 2 bytes @ 0x31
   556  0000B1                     	ds	2
   557  0000B3                     testFrequency@timerOff:
   558                           	opt stack 0
   559                           
   560                           ; 2 bytes @ 0x33
   561  0000B3                     	ds	2
   562  0000B5                     testFrequency@first:
   563                           	opt stack 0
   564                           
   565                           ; 2 bytes @ 0x35
   566  0000B5                     	ds	2
   567  0000B7                     testFrequency@i:
   568                           	opt stack 0
   569                           
   570                           ; 1 bytes @ 0x37
   571  0000B7                     	ds	1
   572  0000B8                     testFrequency@i_389:
   573                           	opt stack 0
   574                           
   575                           ; 1 bytes @ 0x38
   576  0000B8                     	ds	1
   577                           tblptru	equ	0xFF8
   578                           tblptrh	equ	0xFF7
   579                           tblptrl	equ	0xFF6
   580                           tablat	equ	0xFF5
   581                           postinc0	equ	0xFEE
   582                           postdec1	equ	0xFE5
   583                           fsr1l	equ	0xFE1
   584                           
   585                           	psect	cstackCOMRAM
   586  000001                     __pcstackCOMRAM:
   587                           	opt stack 0
   588  000001                     ??_service:
   589  000001                     
   590                           ; 2 bytes @ 0x0
   591  000001                     	ds	14
   592  00000F                     ??_I2C_Master_Wait:
   593  00000F                     ?___awmod:
   594                           	opt stack 0
   595  00000F                     ?___ftpack:
   596                           	opt stack 0
   597  00000F                     ?___ftneg:
   598                           	opt stack 0
   599  00000F                     ?__tdiv_to_l_:
   600                           	opt stack 0
   601  00000F                     ?__div_to_l_:
   602                           	opt stack 0
   603  00000F                     ?___lldiv:
   604                           	opt stack 0
   605  00000F                     lcdNibble@temp:
   606                           	opt stack 0
   607  00000F                     ___awmod@dividend:
   608                           	opt stack 0
   609  00000F                     __div_to_l_@f1:
   610                           	opt stack 0
   611  00000F                     ___ftpack@arg:
   612                           	opt stack 0
   613  00000F                     __tdiv_to_l_@f1:
   614                           	opt stack 0
   615  00000F                     ___ftge@ff1:
   616                           	opt stack 0
   617  00000F                     ___ftneg@f1:
   618                           	opt stack 0
   619  00000F                     ___lldiv@dividend:
   620                           	opt stack 0
   621                           
   622                           ; 4 bytes @ 0xE
   623  00000F                     	ds	1
   624  000010                     lcdNibble@data:
   625                           	opt stack 0
   626  000010                     I2C_Master_Read@a:
   627                           	opt stack 0
   628  000010                     I2C_Master_Write@d:
   629                           	opt stack 0
   630                           
   631                           ; 2 bytes @ 0xF
   632  000010                     	ds	1
   633  000011                     ??_lcdInst:
   634  000011                     I2C_Master_Read@temp:
   635                           	opt stack 0
   636  000011                     ___awmod@divisor:
   637                           	opt stack 0
   638                           
   639                           ; 2 bytes @ 0x10
   640  000011                     	ds	1
   641  000012                     lcdInst@data:
   642                           	opt stack 0
   643  000012                     ___ftpack@exp:
   644                           	opt stack 0
   645  000012                     __div_to_l_@f2:
   646                           	opt stack 0
   647  000012                     __tdiv_to_l_@f2:
   648                           	opt stack 0
   649  000012                     ___ftge@ff2:
   650                           	opt stack 0
   651                           
   652                           ; 3 bytes @ 0x11
   653  000012                     	ds	1
   654  000013                     ??_initLCD:
   655  000013                     putch@data:
   656                           	opt stack 0
   657  000013                     ___awmod@counter:
   658                           	opt stack 0
   659  000013                     ___ftpack@sign:
   660                           	opt stack 0
   661  000013                     ___lldiv@divisor:
   662                           	opt stack 0
   663                           
   664                           ; 4 bytes @ 0x12
   665  000013                     	ds	1
   666  000014                     ??___ftpack:
   667  000014                     ___awmod@sign:
   668                           	opt stack 0
   669                           
   670                           ; 1 bytes @ 0x13
   671  000014                     	ds	1
   672  000015                     ??__tdiv_to_l_:
   673  000015                     ??___ftge:
   674  000015                     ?___awdiv:
   675                           	opt stack 0
   676  000015                     ___awdiv@dividend:
   677                           	opt stack 0
   678  000015                     __div_to_l_@quot:
   679                           	opt stack 0
   680                           
   681                           ; 4 bytes @ 0x14
   682  000015                     	ds	2
   683  000017                     ?___altoft:
   684                           	opt stack 0
   685  000017                     ?___lltoft:
   686                           	opt stack 0
   687  000017                     ___awdiv@divisor:
   688                           	opt stack 0
   689  000017                     ___altoft@c:
   690                           	opt stack 0
   691  000017                     ___lldiv@quotient:
   692                           	opt stack 0
   693  000017                     ___lltoft@c:
   694                           	opt stack 0
   695                           
   696                           ; 4 bytes @ 0x16
   697  000017                     	ds	1
   698  000018                     __tdiv_to_l_@quot:
   699                           	opt stack 0
   700                           
   701                           ; 4 bytes @ 0x17
   702  000018                     	ds	1
   703  000019                     ___awdiv@counter:
   704                           	opt stack 0
   705  000019                     __div_to_l_@cntr:
   706                           	opt stack 0
   707                           
   708                           ; 1 bytes @ 0x18
   709  000019                     	ds	1
   710  00001A                     ___awdiv@sign:
   711                           	opt stack 0
   712  00001A                     __div_to_l_@exp1:
   713                           	opt stack 0
   714                           
   715                           ; 1 bytes @ 0x19
   716  00001A                     	ds	1
   717  00001B                     ??___altoft:
   718  00001B                     ??___lltoft:
   719  00001B                     ___lldiv@counter:
   720                           	opt stack 0
   721  00001B                     ___awdiv@quotient:
   722                           	opt stack 0
   723                           
   724                           ; 2 bytes @ 0x1A
   725  00001B                     	ds	1
   726  00001C                     ?___llmod:
   727                           	opt stack 0
   728  00001C                     __tdiv_to_l_@cntr:
   729                           	opt stack 0
   730  00001C                     I2C_Master_Init@c:
   731                           	opt stack 0
   732  00001C                     ___llmod@dividend:
   733                           	opt stack 0
   734                           
   735                           ; 4 bytes @ 0x1B
   736  00001C                     	ds	1
   737  00001D                     ?___wmul:
   738                           	opt stack 0
   739  00001D                     __tdiv_to_l_@exp1:
   740                           	opt stack 0
   741  00001D                     ___wmul@multiplier:
   742                           	opt stack 0
   743                           
   744                           ; 2 bytes @ 0x1C
   745  00001D                     	ds	2
   746  00001F                     ___altoft@exp:
   747                           	opt stack 0
   748  00001F                     ___lltoft@exp:
   749                           	opt stack 0
   750  00001F                     ___wmul@multiplicand:
   751                           	opt stack 0
   752                           
   753                           ; 2 bytes @ 0x1E
   754  00001F                     	ds	1
   755  000020                     ??_I2C_Master_Init:
   756  000020                     ___altoft@sign:
   757                           	opt stack 0
   758  000020                     ___llmod@divisor:
   759                           	opt stack 0
   760                           
   761                           ; 4 bytes @ 0x1F
   762  000020                     	ds	1
   763  000021                     ?___ftdiv:
   764                           	opt stack 0
   765  000021                     ___wmul@product:
   766                           	opt stack 0
   767  000021                     ___ftdiv@f1:
   768                           	opt stack 0
   769                           
   770                           ; 3 bytes @ 0x20
   771  000021                     	ds	2
   772  000023                     ?___ftmul:
   773                           	opt stack 0
   774  000023                     ___ftmul@f1:
   775                           	opt stack 0
   776                           
   777                           ; 3 bytes @ 0x22
   778  000023                     	ds	1
   779  000024                     ___llmod@counter:
   780                           	opt stack 0
   781  000024                     ___ftdiv@f2:
   782                           	opt stack 0
   783                           
   784                           ; 3 bytes @ 0x23
   785  000024                     	ds	2
   786  000026                     ___ftmul@f2:
   787                           	opt stack 0
   788                           
   789                           ; 3 bytes @ 0x25
   790  000026                     	ds	1
   791  000027                     ??___ftdiv:
   792                           
   793                           ; 1 bytes @ 0x26
   794  000027                     	ds	2
   795  000029                     ??___ftmul:
   796                           
   797                           ; 1 bytes @ 0x28
   798  000029                     	ds	1
   799  00002A                     ___ftdiv@cntr:
   800                           	opt stack 0
   801                           
   802                           ; 1 bytes @ 0x29
   803  00002A                     	ds	1
   804  00002B                     ___ftdiv@f3:
   805                           	opt stack 0
   806                           
   807                           ; 3 bytes @ 0x2A
   808  00002B                     	ds	1
   809  00002C                     ___ftmul@exp:
   810                           	opt stack 0
   811                           
   812                           ; 1 bytes @ 0x2B
   813  00002C                     	ds	1
   814  00002D                     ___ftmul@f3_as_product:
   815                           	opt stack 0
   816                           
   817                           ; 3 bytes @ 0x2C
   818  00002D                     	ds	1
   819  00002E                     ___ftdiv@exp:
   820                           	opt stack 0
   821                           
   822                           ; 1 bytes @ 0x2D
   823  00002E                     	ds	1
   824  00002F                     ___ftdiv@sign:
   825                           	opt stack 0
   826                           
   827                           ; 1 bytes @ 0x2E
   828  00002F                     	ds	1
   829  000030                     ___ftmul@cntr:
   830                           	opt stack 0
   831                           
   832                           ; 1 bytes @ 0x2F
   833  000030                     	ds	1
   834  000031                     ___ftmul@sign:
   835                           	opt stack 0
   836                           
   837                           ; 1 bytes @ 0x30
   838  000031                     	ds	1
   839  000032                     ?_fround:
   840                           	opt stack 0
   841  000032                     ?_scale:
   842                           	opt stack 0
   843                           
   844                           ; 3 bytes @ 0x31
   845  000032                     	ds	3
   846  000035                     _fround$1117:
   847                           	opt stack 0
   848  000035                     _scale$1118:
   849                           	opt stack 0
   850                           
   851                           ; 3 bytes @ 0x34
   852  000035                     	ds	3
   853  000038                     scale@scl:
   854                           	opt stack 0
   855  000038                     _fround$1116:
   856                           	opt stack 0
   857                           
   858                           ; 3 bytes @ 0x37
   859  000038                     	ds	1
   860  000039                     ?___fttol:
   861                           	opt stack 0
   862  000039                     ___fttol@f1:
   863                           	opt stack 0
   864                           
   865                           ; 3 bytes @ 0x38
   866  000039                     	ds	2
   867  00003B                     fround@prec:
   868                           	opt stack 0
   869                           
   870                           ; 1 bytes @ 0x3A
   871  00003B                     	ds	1
   872  00003C                     ?___ftadd:
   873                           	opt stack 0
   874  00003C                     ___ftadd@f1:
   875                           	opt stack 0
   876                           
   877                           ; 3 bytes @ 0x3B
   878  00003C                     	ds	1
   879  00003D                     ??___fttol:
   880                           
   881                           ; 1 bytes @ 0x3C
   882  00003D                     	ds	2
   883  00003F                     ___ftadd@f2:
   884                           	opt stack 0
   885                           
   886                           ; 3 bytes @ 0x3E
   887  00003F                     	ds	3
   888  000042                     ??___ftadd:
   889  000042                     ___fttol@sign1:
   890                           	opt stack 0
   891                           
   892                           ; 1 bytes @ 0x41
   893  000042                     	ds	1
   894  000043                     ___fttol@lval:
   895                           	opt stack 0
   896                           
   897                           ; 4 bytes @ 0x42
   898  000043                     	ds	2
   899  000045                     ___ftadd@sign:
   900                           	opt stack 0
   901                           
   902                           ; 1 bytes @ 0x44
   903  000045                     	ds	1
   904  000046                     ___ftadd@exp2:
   905                           	opt stack 0
   906                           
   907                           ; 1 bytes @ 0x45
   908  000046                     	ds	1
   909  000047                     ___ftadd@exp1:
   910                           	opt stack 0
   911  000047                     ___fttol@exp1:
   912                           	opt stack 0
   913                           
   914                           ; 1 bytes @ 0x46
   915  000047                     	ds	1
   916  000048                     ?___ftsub:
   917                           	opt stack 0
   918  000048                     ___ftsub@f1:
   919                           	opt stack 0
   920                           
   921                           ; 3 bytes @ 0x47
   922  000048                     	ds	3
   923  00004B                     ___ftsub@f2:
   924                           	opt stack 0
   925                           
   926                           ; 3 bytes @ 0x4A
   927  00004B                     	ds	3
   928  00004E                     ?_printf:
   929                           	opt stack 0
   930  00004E                     printf@f:
   931                           	opt stack 0
   932                           
   933                           ; 2 bytes @ 0x4D
   934  00004E                     	ds	6
   935  000054                     ??_printf:
   936                           
   937                           ; 1 bytes @ 0x53
   938  000054                     	ds	6
   939  00005A                     ?_testFrequency:
   940                           	opt stack 0
   941                           
   942                           ; 3 bytes @ 0x59
   943  00005A                     	ds	3
   944  00005D                     ??_testFrequency:
   945                           
   946                           ; 1 bytes @ 0x5C
   947  00005D                     	ds	4
   948  000061                     _main$1113:
   949                           	opt stack 0
   950                           
   951                           ; 3 bytes @ 0x60
   952  000061                     	ds	3
   953                           tblptru	equ	0xFF8
   954                           tblptrh	equ	0xFF7
   955                           tblptrl	equ	0xFF6
   956                           tablat	equ	0xFF5
   957                           postinc0	equ	0xFEE
   958                           postdec1	equ	0xFE5
   959                           fsr1l	equ	0xFE1
   960                           
   961 ;;
   962 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   963 ;;
   964 ;; *************** function _main *****************
   965 ;; Defined at:
   966 ;;		line 56 in file "main.c"
   967 ;; Parameters:    Size  Location     Type
   968 ;;		None
   969 ;; Auto vars:     Size  Location     Type
   970 ;;		None
   971 ;; Return value:  Size  Location     Type
   972 ;;                  1    wreg      void 
   973 ;; Registers used:
   974 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   975 ;; Tracked objects:
   976 ;;		On entry : 0/0
   977 ;;		On exit  : 0/0
   978 ;;		Unchanged: 0/0
   979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   981 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   983 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   984 ;;Total ram usage:        3 bytes
   985 ;; Hardware stack levels required when called:    7
   986 ;; This function calls:
   987 ;;		_initLCD
   988 ;;		_pinSetup
   989 ;;		_printf
   990 ;;		_testFrequency
   991 ;; This function is called by:
   992 ;;		Startup code after reset
   993 ;; This function uses a non-reentrant model
   994 ;;
   995                           
   996                           	psect	text0
   997  002F84                     __ptext0:
   998                           	opt stack 0
   999  002F84                     _main:
  1000                           	opt stack 24
  1001                           
  1002                           ;main.c: 57: pinSetup();
  1003                           
  1004                           ;incstack = 0
  1005  002F84  EC8A  F017         	call	_pinSetup	;wreg free
  1006                           
  1007                           ;main.c: 58: initLCD();
  1008  002F88  EC47  F017         	call	_initLCD	;wreg free
  1009                           
  1010                           ;main.c: 60: printf("freq: %f",testFrequency());
  1011  002F8C  EC27  F010         	call	_testFrequency	;wreg free
  1012  002F90  C05A  F061         	movff	?_testFrequency,_main$1113
  1013  002F94  C05B  F062         	movff	?_testFrequency+1,_main$1113+1
  1014  002F98  C05C  F063         	movff	?_testFrequency+2,_main$1113+2
  1015                           
  1016                           ;main.c: 60: printf("freq: %f",testFrequency());
  1017  002F9C  0EE5               	movlw	low STR_1
  1018  002F9E  6E4E               	movwf	printf@f,c
  1019  002FA0  0E10               	movlw	high STR_1
  1020  002FA2  6E4F               	movwf	printf@f+1,c
  1021  002FA4  C061  F050         	movff	_main$1113,?_printf+2
  1022  002FA8  C062  F051         	movff	_main$1113+1,?_printf+3
  1023  002FAC  C063  F052         	movff	_main$1113+2,?_printf+4
  1024  002FB0  EC7C  F008         	call	_printf	;wreg free
  1025  002FB4                     l44:
  1026  002FB4  D7FF               	goto	l44
  1027  002FB6                     __end_of_main:
  1028                           	opt stack 0
  1029                           tblptru	equ	0xFF8
  1030                           tblptrh	equ	0xFF7
  1031                           tblptrl	equ	0xFF6
  1032                           tablat	equ	0xFF5
  1033                           postinc0	equ	0xFEE
  1034                           postdec1	equ	0xFE5
  1035                           fsr1l	equ	0xFE1
  1036                           
  1037 ;; *************** function _testFrequency *****************
  1038 ;; Defined at:
  1039 ;;		line 77 in file "timer.c"
  1040 ;; Parameters:    Size  Location     Type
  1041 ;;		None
  1042 ;; Auto vars:     Size  Location     Type
  1043 ;;  count           4   45[BANK0 ] long 
  1044 ;;  i               1   56[BANK0 ] unsigned char 
  1045 ;;  i               1   55[BANK0 ] unsigned char 
  1046 ;;  time           14   31[BANK0 ] int [7]
  1047 ;;  datetime        7   24[BANK0 ] const unsigned char [7]
  1048 ;;  first           2   53[BANK0 ] int 
  1049 ;;  timerOff        2   51[BANK0 ] int 
  1050 ;;  prev            2   49[BANK0 ] int 
  1051 ;; Return value:  Size  Location     Type
  1052 ;;                  3   89[COMRAM] float 
  1053 ;; Registers used:
  1054 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1055 ;; Tracked objects:
  1056 ;;		On entry : 0/0
  1057 ;;		On exit  : 0/0
  1058 ;;		Unchanged: 0/0
  1059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1060 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1061 ;;      Locals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1062 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1063 ;;      Totals:         7      33       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1064 ;;Total ram usage:       40 bytes
  1065 ;; Hardware stack levels used:    1
  1066 ;; Hardware stack levels required when called:    6
  1067 ;; This function calls:
  1068 ;;		_I2C_Master_Init
  1069 ;;		_I2C_Master_Read
  1070 ;;		_I2C_Master_Start
  1071 ;;		_I2C_Master_Stop
  1072 ;;		_I2C_Master_Write
  1073 ;;		___altoft
  1074 ;;		___ftdiv
  1075 ;;		_initT0
  1076 ;;		_printf
  1077 ;; This function is called by:
  1078 ;;		_main
  1079 ;; This function uses a non-reentrant model
  1080 ;;
  1081                           
  1082                           	psect	text1
  1083  00204E                     __ptext1:
  1084                           	opt stack 0
  1085  00204E                     _testFrequency:
  1086                           	opt stack 24
  1087                           
  1088                           ;timer.c: 78: const char datetime[7] = {
  1089                           ;timer.c: 79: 0x45,
  1090                           ;timer.c: 80: 0x59,
  1091                           ;timer.c: 81: 0x23,
  1092                           ;timer.c: 82: 0x07,
  1093                           ;timer.c: 83: 0x31,
  1094                           ;timer.c: 84: 0x12,
  1095                           ;timer.c: 85: 0x16
  1096                           ;timer.c: 86: };
  1097                           
  1098                           ;incstack = 0
  1099  00204E  0EAF               	movlw	low testFrequency@F2964
  1100  002050  6EF6               	movwf	tblptrl,c
  1101  002052                     	if	1	;There is more than 1 active tblptr byte
  1102  002052  0E10               	movlw	high testFrequency@F2964
  1103  002054  6EF7               	movwf	tblptrh,c
  1104  002056                     	endif
  1105  002056                     	if	0	;There are less than 3 active tblptr bytes
  1106  002056                     	endif
  1107  002056  EE20  F098         	lfsr	2,testFrequency@datetime
  1108  00205A  0E06               	movlw	6
  1109  00205C                     u3170:
  1110  00205C  0009               	tblrd		*+
  1111  00205E  CFF5 FFDE          	movff	tablat,postinc2
  1112  002062  06E8               	decf	wreg,f,c
  1113  002064  E2FB               	bc	u3170
  1114                           
  1115                           ;timer.c: 88: (INTCONbits.GIE = 0);
  1116  002066  9EF2               	bcf	intcon,7,c	;volatile
  1117                           
  1118                           ;timer.c: 89: I2C_Master_Init(10000);
  1119  002068  0E10               	movlw	16
  1120  00206A  6E1C               	movwf	I2C_Master_Init@c,c
  1121  00206C  0E27               	movlw	39
  1122  00206E  6E1D               	movwf	I2C_Master_Init@c+1,c
  1123  002070  0E00               	movlw	0
  1124  002072  6E1E               	movwf	I2C_Master_Init@c+2,c
  1125  002074  0E00               	movlw	0
  1126  002076  6E1F               	movwf	I2C_Master_Init@c+3,c
  1127  002078  EC1A  F017         	call	_I2C_Master_Init	;wreg free
  1128                           
  1129                           ;timer.c: 91: I2C_Master_Start();
  1130  00207C  EC58  F018         	call	_I2C_Master_Start	;wreg free
  1131                           
  1132                           ;timer.c: 92: I2C_Master_Write(0b11010000);
  1133  002080  0E00               	movlw	0
  1134  002082  6E11               	movwf	I2C_Master_Write@d+1,c
  1135  002084  0ED0               	movlw	208
  1136  002086  6E10               	movwf	I2C_Master_Write@d,c
  1137  002088  EC46  F018         	call	_I2C_Master_Write	;wreg free
  1138                           
  1139                           ;timer.c: 93: I2C_Master_Write(0x00);
  1140  00208C  0E00               	movlw	0
  1141  00208E  6E11               	movwf	I2C_Master_Write@d+1,c
  1142  002090  0E00               	movlw	0
  1143  002092  6E10               	movwf	I2C_Master_Write@d,c
  1144  002094  EC46  F018         	call	_I2C_Master_Write	;wreg free
  1145                           
  1146                           ;timer.c: 94: for(char i = 0; i < 7; i++)I2C_Master_Write(datetime[i]);
  1147  002098  0E00               	movlw	0
  1148  00209A  0100               	movlb	0	; () banked
  1149  00209C  6FB7               	movwf	testFrequency@i& (0+255),b
  1150  00209E                     l3419:
  1151                           
  1152                           ; BSR set to: 0
  1153  00209E  0E06               	movlw	6
  1154  0020A0  0100               	movlb	0	; () banked
  1155  0020A2  65B7               	cpfsgt	testFrequency@i& (0+255),b
  1156  0020A4  D001               	goto	l3423
  1157  0020A6  D013               	goto	l3429
  1158  0020A8                     l3423:
  1159                           
  1160                           ; BSR set to: 0
  1161  0020A8  0100               	movlb	0	; () banked
  1162  0020AA  51B7               	movf	testFrequency@i& (0+255),w,b
  1163  0020AC  0D01               	mullw	1
  1164  0020AE  0E98               	movlw	low testFrequency@datetime
  1165  0020B0  24F3               	addwf	prodl,w,c
  1166  0020B2  6ED9               	movwf	fsr2l,c
  1167  0020B4  0E00               	movlw	high testFrequency@datetime
  1168  0020B6  20F4               	addwfc	prodh,w,c
  1169  0020B8  6EDA               	movwf	fsr2h,c
  1170  0020BA  50DF               	movf	indf2,w,c
  1171  0020BC  6E5D               	movwf	??_testFrequency& (0+255),c
  1172  0020BE  505D               	movf	??_testFrequency,w,c
  1173  0020C0  6E10               	movwf	I2C_Master_Write@d,c
  1174  0020C2  6A11               	clrf	I2C_Master_Write@d+1,c
  1175  0020C4  EC46  F018         	call	_I2C_Master_Write	;wreg free
  1176  0020C8  0100               	movlb	0	; () banked
  1177  0020CA  2BB7               	incf	testFrequency@i& (0+255),f,b
  1178  0020CC  D7E8               	goto	l3419
  1179  0020CE                     l3429:
  1180                           
  1181                           ; BSR set to: 0
  1182                           ;timer.c: 95: I2C_Master_Stop();
  1183  0020CE  EC54  F018         	call	_I2C_Master_Stop	;wreg free
  1184                           
  1185                           ;timer.c: 97: int time[7];
  1186                           ;timer.c: 98: int prev = 0;
  1187  0020D2  0E00               	movlw	0
  1188  0020D4  0100               	movlb	0	; () banked
  1189  0020D6  6FB2               	movwf	(testFrequency@prev+1)& (0+255),b
  1190  0020D8  0E00               	movlw	0
  1191  0020DA  6FB1               	movwf	testFrequency@prev& (0+255),b
  1192                           
  1193                           ; BSR set to: 0
  1194                           ;timer.c: 99: int timerOff = 1;
  1195  0020DC  0E00               	movlw	0
  1196  0020DE  0100               	movlb	0	; () banked
  1197  0020E0  6FB4               	movwf	(testFrequency@timerOff+1)& (0+255),b
  1198  0020E2  0E01               	movlw	1
  1199  0020E4  6FB3               	movwf	testFrequency@timerOff& (0+255),b
  1200                           
  1201                           ; BSR set to: 0
  1202                           ;timer.c: 100: int first = 1;
  1203  0020E6  0E00               	movlw	0
  1204  0020E8  0100               	movlb	0	; () banked
  1205  0020EA  6FB6               	movwf	(testFrequency@first+1)& (0+255),b
  1206  0020EC  0E01               	movlw	1
  1207  0020EE  6FB5               	movwf	testFrequency@first& (0+255),b
  1208                           
  1209                           ; BSR set to: 0
  1210                           ;timer.c: 101: (INTCONbits.GIE = 1);
  1211  0020F0  8EF2               	bsf	intcon,7,c	;volatile
  1212  0020F2                     l3439:
  1213                           
  1214                           ;timer.c: 105: I2C_Master_Start();
  1215  0020F2  EC58  F018         	call	_I2C_Master_Start	;wreg free
  1216                           
  1217                           ;timer.c: 106: I2C_Master_Write(0b11010000);
  1218  0020F6  0E00               	movlw	0
  1219  0020F8  6E11               	movwf	I2C_Master_Write@d+1,c
  1220  0020FA  0ED0               	movlw	208
  1221  0020FC  6E10               	movwf	I2C_Master_Write@d,c
  1222  0020FE  EC46  F018         	call	_I2C_Master_Write	;wreg free
  1223                           
  1224                           ;timer.c: 107: I2C_Master_Write(0x00);
  1225  002102  0E00               	movlw	0
  1226  002104  6E11               	movwf	I2C_Master_Write@d+1,c
  1227  002106  0E00               	movlw	0
  1228  002108  6E10               	movwf	I2C_Master_Write@d,c
  1229  00210A  EC46  F018         	call	_I2C_Master_Write	;wreg free
  1230                           
  1231                           ;timer.c: 108: I2C_Master_Stop();
  1232  00210E  EC54  F018         	call	_I2C_Master_Stop	;wreg free
  1233                           
  1234                           ;timer.c: 111: I2C_Master_Start();
  1235  002112  EC58  F018         	call	_I2C_Master_Start	;wreg free
  1236                           
  1237                           ;timer.c: 112: I2C_Master_Write(0b11010001);
  1238  002116  0E00               	movlw	0
  1239  002118  6E11               	movwf	I2C_Master_Write@d+1,c
  1240  00211A  0ED1               	movlw	209
  1241  00211C  6E10               	movwf	I2C_Master_Write@d,c
  1242  00211E  EC46  F018         	call	_I2C_Master_Write	;wreg free
  1243                           
  1244                           ;timer.c: 114: for(unsigned char i=0;i<0x06;i++){
  1245  002122  0E00               	movlw	0
  1246  002124  0100               	movlb	0	; () banked
  1247  002126  6FB8               	movwf	testFrequency@i_389& (0+255),b
  1248  002128                     l3453:
  1249                           
  1250                           ; BSR set to: 0
  1251  002128  0E05               	movlw	5
  1252  00212A  0100               	movlb	0	; () banked
  1253  00212C  65B8               	cpfsgt	testFrequency@i_389& (0+255),b
  1254  00212E  D001               	goto	l3457
  1255  002130  D015               	goto	l3463
  1256  002132                     l3457:
  1257                           
  1258                           ; BSR set to: 0
  1259                           ;timer.c: 115: time[i] = I2C_Master_Read(1);
  1260  002132  0E01               	movlw	1
  1261  002134  ECEE  F017         	call	_I2C_Master_Read
  1262  002138  6E5D               	movwf	??_testFrequency& (0+255),c
  1263  00213A  6A5E               	clrf	(??_testFrequency+1)& (0+255),c
  1264  00213C  0100               	movlb	0	; () banked
  1265  00213E  51B8               	movf	testFrequency@i_389& (0+255),w,b
  1266  002140  0D02               	mullw	2
  1267  002142  0E9F               	movlw	low testFrequency@time
  1268  002144  24F3               	addwf	prodl,w,c
  1269  002146  6ED9               	movwf	fsr2l,c
  1270  002148  0E00               	movlw	high testFrequency@time
  1271  00214A  20F4               	addwfc	prodh,w,c
  1272  00214C  6EDA               	movwf	fsr2h,c
  1273  00214E  C05D  FFDE         	movff	??_testFrequency,postinc2
  1274  002152  C05E  FFDD         	movff	??_testFrequency+1,postdec2
  1275                           
  1276                           ; BSR set to: 0
  1277  002156  0100               	movlb	0	; () banked
  1278  002158  2BB8               	incf	testFrequency@i_389& (0+255),f,b
  1279  00215A  D7E6               	goto	l3453
  1280  00215C                     l3463:
  1281                           
  1282                           ; BSR set to: 0
  1283                           ;timer.c: 116: }
  1284                           ;timer.c: 117: time[6] = I2C_Master_Read(0);
  1285  00215C  0E00               	movlw	0
  1286  00215E  ECEE  F017         	call	_I2C_Master_Read
  1287  002162  6E5D               	movwf	??_testFrequency& (0+255),c
  1288  002164  505D               	movf	??_testFrequency,w,c
  1289  002166  0100               	movlb	0	; () banked
  1290  002168  6FAB               	movwf	(testFrequency@time+12)& (0+255),b
  1291  00216A  6BAC               	clrf	(testFrequency@time+13)& (0+255),b
  1292                           
  1293                           ;timer.c: 118: I2C_Master_Stop();
  1294  00216C  EC54  F018         	call	_I2C_Master_Stop	;wreg free
  1295                           
  1296                           ;timer.c: 120: if(time[0]^prev){
  1297  002170  0100               	movlb	0	; () banked
  1298  002172  51B1               	movf	testFrequency@prev& (0+255),w,b
  1299  002174  0100               	movlb	0	; () banked
  1300  002176  199F               	xorwf	testFrequency@time& (0+255),w,b
  1301  002178  6E5D               	movwf	??_testFrequency& (0+255),c
  1302  00217A  0100               	movlb	0	; () banked
  1303  00217C  51B2               	movf	(testFrequency@prev+1)& (0+255),w,b
  1304  00217E  0100               	movlb	0	; () banked
  1305  002180  19A0               	xorwf	(testFrequency@time+1)& (0+255),w,b
  1306  002182  6E5E               	movwf	(??_testFrequency+1)& (0+255),c
  1307  002184  505D               	movf	??_testFrequency,w,c
  1308  002186  105E               	iorwf	??_testFrequency+1,w,c
  1309  002188  B4D8               	btfsc	status,2,c
  1310  00218A  D07E               	goto	l272
  1311                           
  1312                           ; BSR set to: 0
  1313                           ;timer.c: 121: if(first)
  1314  00218C  0100               	movlb	0	; () banked
  1315  00218E  51B5               	movf	testFrequency@first& (0+255),w,b
  1316  002190  0100               	movlb	0	; () banked
  1317  002192  11B6               	iorwf	(testFrequency@first+1)& (0+255),w,b
  1318  002194  B4D8               	btfsc	status,2,c
  1319  002196  D006               	goto	l3471
  1320                           
  1321                           ; BSR set to: 0
  1322                           ;timer.c: 122: first = 0;
  1323  002198  0E00               	movlw	0
  1324  00219A  0100               	movlb	0	; () banked
  1325  00219C  6FB6               	movwf	(testFrequency@first+1)& (0+255),b
  1326  00219E  0E00               	movlw	0
  1327  0021A0  6FB5               	movwf	testFrequency@first& (0+255),b
  1328  0021A2  D072               	goto	l272
  1329  0021A4                     l3471:
  1330                           
  1331                           ; BSR set to: 0
  1332                           ;timer.c: 123: else
  1333                           ;timer.c: 124: if(timerOff){
  1334  0021A4  0100               	movlb	0	; () banked
  1335  0021A6  51B3               	movf	testFrequency@timerOff& (0+255),w,b
  1336  0021A8  0100               	movlb	0	; () banked
  1337  0021AA  11B4               	iorwf	(testFrequency@timerOff+1)& (0+255),w,b
  1338  0021AC  B4D8               	btfsc	status,2,c
  1339  0021AE  D01B               	goto	l275
  1340                           
  1341                           ; BSR set to: 0
  1342                           ;timer.c: 125: printf("t1: %x ",time[0]);
  1343  0021B0  0EEE               	movlw	low STR_2
  1344  0021B2  6E4E               	movwf	printf@f,c
  1345  0021B4  0E10               	movlw	high STR_2
  1346  0021B6  6E4F               	movwf	printf@f+1,c
  1347  0021B8  C09F  F050         	movff	testFrequency@time,?_printf+2
  1348  0021BC  C0A0  F051         	movff	testFrequency@time+1,?_printf+3
  1349  0021C0  EC7C  F008         	call	_printf	;wreg free
  1350                           
  1351                           ;timer.c: 126: initT0();
  1352  0021C4  EC3E  F018         	call	_initT0	;wreg free
  1353                           
  1354                           ;timer.c: 127: T0CON = 0;
  1355  0021C8  0E00               	movlw	0
  1356  0021CA  6ED5               	movwf	4053,c	;volatile
  1357                           
  1358                           ;timer.c: 128: T0CON |= 0b111;
  1359  0021CC  0E07               	movlw	7
  1360  0021CE  12D5               	iorwf	4053,f,c	;volatile
  1361                           
  1362                           ;timer.c: 129: TMR0H = 0;
  1363  0021D0  0E00               	movlw	0
  1364  0021D2  6ED7               	movwf	4055,c	;volatile
  1365                           
  1366                           ;timer.c: 130: TMR0L = 0;
  1367  0021D4  0E00               	movlw	0
  1368  0021D6  6ED6               	movwf	4054,c	;volatile
  1369                           
  1370                           ;timer.c: 131: T0CON |= 1<<7;
  1371  0021D8  8ED5               	bsf	4053,7,c	;volatile
  1372                           
  1373                           ;timer.c: 132: timerOff = 0;
  1374  0021DA  0E00               	movlw	0
  1375  0021DC  0100               	movlb	0	; () banked
  1376  0021DE  6FB4               	movwf	(testFrequency@timerOff+1)& (0+255),b
  1377  0021E0  0E00               	movlw	0
  1378  0021E2  6FB3               	movwf	testFrequency@timerOff& (0+255),b
  1379                           
  1380                           ;timer.c: 133: }
  1381  0021E4  D051               	goto	l272
  1382  0021E6                     l275:
  1383                           
  1384                           ; BSR set to: 0
  1385                           ;timer.c: 134: else
  1386                           ;timer.c: 135: {
  1387                           ;timer.c: 136: (INTCONbits.GIE = 0);
  1388  0021E6  9EF2               	bcf	intcon,7,c	;volatile
  1389                           
  1390                           ; BSR set to: 0
  1391                           ;timer.c: 137: printf("[%x %x]\n",TMR0L, TMR0H);
  1392  0021E8  0EDC               	movlw	low STR_3
  1393  0021EA  6E4E               	movwf	printf@f,c
  1394  0021EC  0E10               	movlw	high STR_3
  1395  0021EE  6E4F               	movwf	printf@f+1,c
  1396  0021F0  CFD6 F050          	movff	4054,?_printf+2	;volatile
  1397  0021F4  6A51               	clrf	?_printf+3,c
  1398  0021F6  CFD7 F052          	movff	4055,?_printf+4	;volatile
  1399  0021FA  6A53               	clrf	?_printf+5,c
  1400  0021FC  EC7C  F008         	call	_printf	;wreg free
  1401                           
  1402                           ;timer.c: 138: T0CON = 0;
  1403  002200  0E00               	movlw	0
  1404  002202  6ED5               	movwf	4053,c	;volatile
  1405                           
  1406                           ;timer.c: 143: long long count = TMR0L + (TMR0H<<8);
  1407  002204  50D7               	movf	4055,w,c	;volatile
  1408  002206  6E5E               	movwf	(??_testFrequency+1)& (0+255),c
  1409  002208  6A5D               	clrf	??_testFrequency& (0+255),c
  1410  00220A  50D6               	movf	4054,w,c	;volatile
  1411  00220C  6E5F               	movwf	(??_testFrequency+2)& (0+255),c
  1412  00220E  6A60               	clrf	(??_testFrequency+3)& (0+255),c
  1413  002210  505D               	movf	??_testFrequency,w,c
  1414  002212  265F               	addwf	??_testFrequency+2,f,c
  1415  002214  505E               	movf	??_testFrequency+1,w,c
  1416  002216  2260               	addwfc	??_testFrequency+3,f,c
  1417  002218  C05F  F0AD         	movff	??_testFrequency+2,testFrequency@count
  1418  00221C  C060  F0AE         	movff	??_testFrequency+3,testFrequency@count+1
  1419  002220  0100               	movlb	0	; () banked
  1420  002222  0E00               	movlw	0
  1421  002224  BFAE               	btfsc	(testFrequency@count+1)& (0+255),7,b
  1422  002226  0EFF               	movlw	-1
  1423  002228  6FAF               	movwf	(testFrequency@count+2)& (0+255),b
  1424  00222A  6FB0               	movwf	(testFrequency@count+3)& (0+255),b
  1425                           
  1426                           ; BSR set to: 0
  1427                           ;timer.c: 144: return count*256*4 / 1000000.0;
  1428  00222C  C0AD  F05E         	movff	testFrequency@count,??_testFrequency+1
  1429  002230  C0AE  F05F         	movff	testFrequency@count+1,??_testFrequency+2
  1430  002234  C0AF  F060         	movff	testFrequency@count+2,??_testFrequency+3
  1431  002238  6A5D               	clrf	??_testFrequency& (0+255),c
  1432  00223A  0E02               	movlw	2
  1433  00223C                     u3255:
  1434  00223C  90D8               	bcf	status,0,c
  1435  00223E  365D               	rlcf	??_testFrequency,f,c
  1436  002240  365E               	rlcf	??_testFrequency+1,f,c
  1437  002242  365F               	rlcf	??_testFrequency+2,f,c
  1438  002244  3660               	rlcf	??_testFrequency+3,f,c
  1439  002246  2EE8               	decfsz	wreg,f,c
  1440  002248  D7F9               	goto	u3255
  1441  00224A  C05D  F017         	movff	??_testFrequency,___altoft@c
  1442  00224E  C05E  F018         	movff	??_testFrequency+1,___altoft@c+1
  1443  002252  C05F  F019         	movff	??_testFrequency+2,___altoft@c+2
  1444  002256  C060  F01A         	movff	??_testFrequency+3,___altoft@c+3
  1445  00225A  EC12  F016         	call	___altoft	;wreg free
  1446  00225E  C017  F021         	movff	?___altoft,___ftdiv@f1
  1447  002262  C018  F022         	movff	?___altoft+1,___ftdiv@f1+1
  1448  002266  C019  F023         	movff	?___altoft+2,___ftdiv@f1+2
  1449  00226A  0E24               	movlw	36
  1450  00226C  6E24               	movwf	___ftdiv@f2,c
  1451  00226E  0E74               	movlw	116
  1452  002270  6E25               	movwf	___ftdiv@f2+1,c
  1453  002272  0E49               	movlw	73
  1454  002274  6E26               	movwf	___ftdiv@f2+2,c
  1455  002276  EC40  F014         	call	___ftdiv	;wreg free
  1456  00227A  C021  F05A         	movff	?___ftdiv,?_testFrequency
  1457  00227E  C022  F05B         	movff	?___ftdiv+1,?_testFrequency+1
  1458  002282  C023  F05C         	movff	?___ftdiv+2,?_testFrequency+2
  1459  002286  0012               	return	
  1460  002288                     l272:
  1461                           
  1462                           ;timer.c: 145: }
  1463                           ;timer.c: 147: }
  1464                           ;timer.c: 149: prev = time[0];
  1465  002288  C09F  F0B1         	movff	testFrequency@time,testFrequency@prev
  1466  00228C  C0A0  F0B2         	movff	testFrequency@time+1,testFrequency@prev+1
  1467  002290  D730               	goto	l3439
  1468  002292                     __end_of_testFrequency:
  1469                           	opt stack 0
  1470                           tblptru	equ	0xFF8
  1471                           tblptrh	equ	0xFF7
  1472                           tblptrl	equ	0xFF6
  1473                           tablat	equ	0xFF5
  1474                           prodh	equ	0xFF4
  1475                           prodl	equ	0xFF3
  1476                           intcon	equ	0xFF2
  1477                           postinc0	equ	0xFEE
  1478                           wreg	equ	0xFE8
  1479                           postdec1	equ	0xFE5
  1480                           fsr1l	equ	0xFE1
  1481                           indf2	equ	0xFDF
  1482                           postinc2	equ	0xFDE
  1483                           postdec2	equ	0xFDD
  1484                           fsr2h	equ	0xFDA
  1485                           fsr2l	equ	0xFD9
  1486                           status	equ	0xFD8
  1487                           
  1488 ;; *************** function _printf *****************
  1489 ;; Defined at:
  1490 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  1491 ;; Parameters:    Size  Location     Type
  1492 ;;  f               2   77[COMRAM] PTR const unsigned char 
  1493 ;;		 -> STR_5(10), STR_4(11), STR_3(9), STR_2(8), 
  1494 ;;		 -> STR_1(9), 
  1495 ;; Auto vars:     Size  Location     Type
  1496 ;;  idx             1    3[BANK0 ] unsigned char 
  1497 ;;  val             4   16[BANK0 ] unsigned long 
  1498 ;;  tmpval          4   12[BANK0 ] struct .
  1499 ;;  fval            3   20[BANK0 ] struct .
  1500 ;;  cp              3    0        PTR const unsigned char 
  1501 ;;  exp             2   10[BANK0 ] int 
  1502 ;;  flag            2    8[BANK0 ] unsigned short 
  1503 ;;  prec            2    6[BANK0 ] int 
  1504 ;;  ap              2    4[BANK0 ] PTR void [1]
  1505 ;;		 -> ?_printf(2), 
  1506 ;;  len             2    0        unsigned int 
  1507 ;;  width           2    0        int 
  1508 ;;  c               1   23[BANK0 ] char 
  1509 ;;  d               1    0        unsigned char 
  1510 ;; Return value:  Size  Location     Type
  1511 ;;                  2   77[COMRAM] int 
  1512 ;; Registers used:
  1513 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1514 ;; Tracked objects:
  1515 ;;		On entry : 0/0
  1516 ;;		On exit  : 0/0
  1517 ;;		Unchanged: 0/0
  1518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1519 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1520 ;;      Locals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1521 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1522 ;;      Totals:        12      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1523 ;;Total ram usage:       36 bytes
  1524 ;; Hardware stack levels used:    1
  1525 ;; Hardware stack levels required when called:    5
  1526 ;; This function calls:
  1527 ;;		___awdiv
  1528 ;;		___ftadd
  1529 ;;		___ftge
  1530 ;;		___ftmul
  1531 ;;		___ftneg
  1532 ;;		___ftsub
  1533 ;;		___fttol
  1534 ;;		___lldiv
  1535 ;;		___llmod
  1536 ;;		___lltoft
  1537 ;;		___wmul
  1538 ;;		__div_to_l_
  1539 ;;		__tdiv_to_l_
  1540 ;;		_fround
  1541 ;;		_putch
  1542 ;;		_scale
  1543 ;; This function is called by:
  1544 ;;		_main
  1545 ;;		_testFrequency
  1546 ;;		_angleToPulseLength
  1547 ;; This function uses a non-reentrant model
  1548 ;;
  1549                           
  1550                           	psect	text2
  1551  0010F8                     __ptext2:
  1552                           	opt stack 0
  1553  0010F8                     _printf:
  1554                           	opt stack 24
  1555                           
  1556                           ;doprnt.c: 466: va_list ap;
  1557                           ;doprnt.c: 499: signed char c;
  1558                           ;doprnt.c: 501: int width;
  1559                           ;doprnt.c: 504: int prec;
  1560                           ;doprnt.c: 508: unsigned short flag;
  1561                           ;doprnt.c: 515: char d;
  1562                           ;doprnt.c: 516: double fval;
  1563                           ;doprnt.c: 517: int exp;
  1564                           ;doprnt.c: 523: union {
  1565                           ;doprnt.c: 524: unsigned long vd;
  1566                           ;doprnt.c: 525: double integ;
  1567                           ;doprnt.c: 526: } tmpval;
  1568                           ;doprnt.c: 528: unsigned long val;
  1569                           ;doprnt.c: 529: unsigned len;
  1570                           ;doprnt.c: 530: const char * cp;
  1571                           ;doprnt.c: 533: *ap = __va_start();
  1572                           
  1573                           ;incstack = 0
  1574  0010F8  0E50               	movlw	low (?_printf+2)
  1575  0010FA  0100               	movlb	0	; () banked
  1576  0010FC  6F84               	movwf	printf@ap& (0+255),b
  1577  0010FE  0E00               	movlw	high (?_printf+2)
  1578  001100  0100               	movlb	0	; () banked
  1579  001102  6F85               	movwf	(printf@ap+1)& (0+255),b
  1580                           
  1581                           ;doprnt.c: 536: while(c = *f++) {
  1582  001104  EFFD  F00C         	goto	l3271
  1583  001108                     l3047:
  1584                           
  1585                           ; BSR set to: 0
  1586                           ;doprnt.c: 538: if(c != '%')
  1587  001108  0E25               	movlw	37
  1588  00110A  0100               	movlb	0	; () banked
  1589  00110C  1997               	xorwf	printf@c& (0+255),w,b
  1590  00110E  B4D8               	btfsc	status,2,c
  1591  001110  D006               	goto	l3051
  1592                           
  1593                           ; BSR set to: 0
  1594                           ;doprnt.c: 540: {
  1595                           ;doprnt.c: 541: (putch(c) );
  1596  001112  0100               	movlb	0	; () banked
  1597  001114  5197               	movf	printf@c& (0+255),w,b
  1598  001116  EC13  F018         	call	_putch
  1599                           
  1600                           ;doprnt.c: 542: continue;
  1601  00111A  EFFD  F00C         	goto	l3271
  1602  00111E                     l3051:
  1603                           
  1604                           ;doprnt.c: 543: }
  1605                           ;doprnt.c: 548: flag = 0;
  1606  00111E  0E00               	movlw	0
  1607  001120  0100               	movlb	0	; () banked
  1608  001122  6F89               	movwf	(printf@flag+1)& (0+255),b
  1609  001124  0E00               	movlw	0
  1610  001126  6F88               	movwf	printf@flag& (0+255),b
  1611                           
  1612                           ; BSR set to: 0
  1613                           ;doprnt.c: 635: switch(c = *f++) {
  1614                           
  1615                           ;doprnt.c: 633: loop:
  1616  001128  D009               	goto	l3061
  1617  00112A                     l3053:
  1618                           
  1619                           ; BSR set to: 0
  1620                           ;doprnt.c: 643: flag |= 0x10;
  1621  00112A  0100               	movlb	0	; () banked
  1622  00112C  8988               	bsf	printf@flag& (0+255),4,b
  1623                           
  1624                           ;doprnt.c: 644: goto loop;
  1625  00112E  D006               	goto	l3061
  1626  001130                     l3055:
  1627                           
  1628                           ; BSR set to: 0
  1629                           ;doprnt.c: 663: flag |= 0x400;
  1630  001130  0100               	movlb	0	; () banked
  1631  001132  8589               	bsf	(printf@flag+1)& (0+255),2,b
  1632                           
  1633                           ; BSR set to: 0
  1634                           ;doprnt.c: 698: case 'i':
  1635                           ;doprnt.c: 699: break;
  1636                           
  1637                           ; BSR set to: 0
  1638                           
  1639                           ;doprnt.c: 697: case 'd':
  1640                           
  1641                           ;doprnt.c: 664: break;
  1642  001134  D022               	goto	l3063
  1643  001136                     l3057:
  1644                           
  1645                           ; BSR set to: 0
  1646                           ;doprnt.c: 721: flag |= 0x80;
  1647  001136  0100               	movlb	0	; () banked
  1648  001138  8F88               	bsf	printf@flag& (0+255),7,b
  1649                           
  1650                           ;doprnt.c: 723: break;
  1651  00113A  D01F               	goto	l3063
  1652  00113C                     l3061:
  1653                           
  1654                           ; BSR set to: 0
  1655  00113C  C04E  FFF6         	movff	printf@f,tblptrl
  1656  001140  C04F  FFF7         	movff	printf@f+1,tblptrh
  1657  001144  4A4E               	infsnz	printf@f,f,c
  1658  001146  2A4F               	incf	printf@f+1,f,c
  1659  001148                     	if	0	;tblptru may be non-zero
  1660  001148                     	endif
  1661  001148                     	if	0	;tblptru may be non-zero
  1662  001148                     	endif
  1663  001148  0008               	tblrd		*
  1664  00114A  CFF5 F097          	movff	tablat,printf@c
  1665  00114E  0100               	movlb	0	; () banked
  1666  001150  5197               	movf	printf@c& (0+255),w,b
  1667                           
  1668                           ; Switch size 1, requested type "space"
  1669                           ; Number of cases is 6, Range of values is 0 to 120
  1670                           ; switch strategies available:
  1671                           ; Name         Instructions Cycles
  1672                           ; simple_byte           19    10 (average)
  1673                           ;	Chosen strategy is simple_byte
  1674  001152  0A00               	xorlw	0	; case 0
  1675  001154  B4D8               	btfsc	status,2,c
  1676  001156  0012               	return	
  1677  001158  0A64               	xorlw	100	; case 100
  1678  00115A  B4D8               	btfsc	status,2,c
  1679  00115C  D00E               	goto	l3063
  1680  00115E  0A02               	xorlw	2	; case 102
  1681  001160  B4D8               	btfsc	status,2,c
  1682  001162  D7E6               	goto	l3055
  1683  001164  0A0F               	xorlw	15	; case 105
  1684  001166  B4D8               	btfsc	status,2,c
  1685  001168  D008               	goto	l3063
  1686  00116A  0A05               	xorlw	5	; case 108
  1687  00116C  B4D8               	btfsc	status,2,c
  1688  00116E  D7DD               	goto	l3053
  1689  001170  0A14               	xorlw	20	; case 120
  1690  001172  B4D8               	btfsc	status,2,c
  1691  001174  D7E0               	goto	l3057
  1692  001176  EFFD  F00C         	goto	l3271
  1693  00117A                     l3063:
  1694                           
  1695                           ; BSR set to: 0
  1696                           ;doprnt.c: 825: if(flag & (0x700)) {
  1697  00117A  0E07               	movlw	7
  1698  00117C  0100               	movlb	0	; () banked
  1699  00117E  1589               	andwf	(printf@flag+1)& (0+255),w,b
  1700  001180  B4D8               	btfsc	status,2,c
  1701  001182  D2E6               	goto	l432
  1702                           
  1703                           ; BSR set to: 0
  1704                           ;doprnt.c: 829: prec = 6;
  1705  001184  0E00               	movlw	0
  1706  001186  0100               	movlb	0	; () banked
  1707  001188  6F87               	movwf	(printf@prec+1)& (0+255),b
  1708  00118A  0E06               	movlw	6
  1709  00118C  6F86               	movwf	printf@prec& (0+255),b
  1710                           
  1711                           ; BSR set to: 0
  1712                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1713  00118E  C084  FFD9         	movff	printf@ap,fsr2l
  1714  001192  C085  FFDA         	movff	printf@ap+1,fsr2h
  1715  001196  CFDE F094          	movff	postinc2,printf@fval
  1716  00119A  CFDE F095          	movff	postinc2,printf@fval+1
  1717  00119E  CFDD F096          	movff	postdec2,printf@fval+2
  1718                           
  1719                           ; BSR set to: 0
  1720  0011A2  0E03               	movlw	3
  1721  0011A4  0100               	movlb	0	; () banked
  1722  0011A6  2784               	addwf	printf@ap& (0+255),f,b
  1723  0011A8  0E00               	movlw	0
  1724  0011AA  2385               	addwfc	(printf@ap+1)& (0+255),f,b
  1725                           
  1726                           ; BSR set to: 0
  1727                           ;doprnt.c: 831: if(fval < 0.0) {
  1728  0011AC  0100               	movlb	0	; () banked
  1729  0011AE  AF96               	btfss	(printf@fval+2)& (0+255),7,b
  1730  0011B0  D011               	goto	l3077
  1731                           
  1732                           ; BSR set to: 0
  1733                           ;doprnt.c: 832: fval = -fval;
  1734  0011B2  C094  F00F         	movff	printf@fval,___ftneg@f1
  1735  0011B6  C095  F010         	movff	printf@fval+1,___ftneg@f1+1
  1736  0011BA  C096  F011         	movff	printf@fval+2,___ftneg@f1+2
  1737  0011BE  EC01  F018         	call	___ftneg	;wreg free
  1738  0011C2  C00F  F094         	movff	?___ftneg,printf@fval
  1739  0011C6  C010  F095         	movff	?___ftneg+1,printf@fval+1
  1740  0011CA  C011  F096         	movff	?___ftneg+2,printf@fval+2
  1741                           
  1742                           ;doprnt.c: 833: flag |= 0x03;
  1743  0011CE  0E03               	movlw	3
  1744  0011D0  0100               	movlb	0	; () banked
  1745  0011D2  1388               	iorwf	printf@flag& (0+255),f,b
  1746  0011D4                     l3077:
  1747                           
  1748                           ; BSR set to: 0
  1749                           ;doprnt.c: 834: }
  1750                           ;doprnt.c: 835: exp = 0;
  1751  0011D4  0E00               	movlw	0
  1752  0011D6  0100               	movlb	0	; () banked
  1753  0011D8  6F8B               	movwf	(printf@exp+1)& (0+255),b
  1754  0011DA  0E00               	movlw	0
  1755  0011DC  6F8A               	movwf	printf@exp& (0+255),b
  1756                           
  1757                           ; BSR set to: 0
  1758                           ;doprnt.c: 836: if( fval!=0) {
  1759  0011DE  0100               	movlb	0	; () banked
  1760  0011E0  5194               	movf	printf@fval& (0+255),w,b
  1761  0011E2  0100               	movlb	0	; () banked
  1762  0011E4  1195               	iorwf	(printf@fval+1)& (0+255),w,b
  1763  0011E6  0100               	movlb	0	; () banked
  1764  0011E8  1196               	iorwf	(printf@fval+2)& (0+255),w,b
  1765  0011EA  B4D8               	btfsc	status,2,c
  1766  0011EC  D08B               	goto	l3105
  1767                           
  1768                           ; BSR set to: 0
  1769                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1770  0011EE  0E82               	movlw	130
  1771  0011F0  6E54               	movwf	??_printf& (0+255),c
  1772  0011F2  0EFF               	movlw	255
  1773  0011F4  6E55               	movwf	(??_printf+1)& (0+255),c
  1774  0011F6  C094  F056         	movff	printf@fval,??_printf+2
  1775  0011FA  C095  F057         	movff	printf@fval+1,??_printf+3
  1776  0011FE  C096  F058         	movff	printf@fval+2,??_printf+4
  1777  001202  C097  F059         	movff	printf@fval+3,??_printf+5
  1778  001206  0E10               	movlw	16
  1779  001208  D005               	goto	u2740
  1780  00120A                     u2745:
  1781  00120A  90D8               	bcf	status,0,c
  1782  00120C  3259               	rrcf	??_printf+5,f,c
  1783  00120E  3258               	rrcf	??_printf+4,f,c
  1784  001210  3257               	rrcf	??_printf+3,f,c
  1785  001212  3256               	rrcf	??_printf+2,f,c
  1786  001214                     u2740:
  1787  001214  2EE8               	decfsz	wreg,f,c
  1788  001216  D7F9               	goto	u2745
  1789  001218  5056               	movf	??_printf+2,w,c
  1790  00121A  2454               	addwf	??_printf,w,c
  1791  00121C  0100               	movlb	0	; () banked
  1792  00121E  6F8A               	movwf	printf@exp& (0+255),b
  1793  001220  0E00               	movlw	0
  1794  001222  2055               	addwfc	??_printf+1,w,c
  1795  001224  0100               	movlb	0	; () banked
  1796  001226  6F8B               	movwf	(printf@exp+1)& (0+255),b
  1797                           
  1798                           ; BSR set to: 0
  1799                           ;doprnt.c: 838: exp--;
  1800  001228  0100               	movlb	0	; () banked
  1801  00122A  078A               	decf	printf@exp& (0+255),f,b
  1802  00122C  A0D8               	btfss	status,0,c
  1803  00122E  078B               	decf	(printf@exp+1)& (0+255),f,b
  1804                           
  1805                           ; BSR set to: 0
  1806                           ;doprnt.c: 839: exp *= 3;
  1807  001230  C08A  F01D         	movff	printf@exp,___wmul@multiplier
  1808  001234  C08B  F01E         	movff	printf@exp+1,___wmul@multiplier+1
  1809  001238  0E00               	movlw	0
  1810  00123A  6E20               	movwf	___wmul@multiplicand+1,c
  1811  00123C  0E03               	movlw	3
  1812  00123E  6E1F               	movwf	___wmul@multiplicand,c
  1813  001240  ECDB  F017         	call	___wmul	;wreg free
  1814  001244  C01D  F08A         	movff	?___wmul,printf@exp
  1815  001248  C01E  F08B         	movff	?___wmul+1,printf@exp+1
  1816                           
  1817                           ;doprnt.c: 840: exp /= 10;
  1818  00124C  C08A  F015         	movff	printf@exp,___awdiv@dividend
  1819  001250  C08B  F016         	movff	printf@exp+1,___awdiv@dividend+1
  1820  001254  0E00               	movlw	0
  1821  001256  6E18               	movwf	___awdiv@divisor+1,c
  1822  001258  0E0A               	movlw	10
  1823  00125A  6E17               	movwf	___awdiv@divisor,c
  1824  00125C  EC52  F015         	call	___awdiv	;wreg free
  1825  001260  C015  F08A         	movff	?___awdiv,printf@exp
  1826  001264  C016  F08B         	movff	?___awdiv+1,printf@exp+1
  1827                           
  1828                           ;doprnt.c: 841: if(exp < 0)
  1829  001268  0100               	movlb	0	; () banked
  1830  00126A  AF8B               	btfss	(printf@exp+1)& (0+255),7,b
  1831  00126C  D004               	goto	l3093
  1832                           
  1833                           ; BSR set to: 0
  1834                           ;doprnt.c: 842: exp--;
  1835  00126E  0100               	movlb	0	; () banked
  1836  001270  078A               	decf	printf@exp& (0+255),f,b
  1837  001272  A0D8               	btfss	status,0,c
  1838  001274  078B               	decf	(printf@exp+1)& (0+255),f,b
  1839  001276                     l3093:
  1840                           
  1841                           ; BSR set to: 0
  1842                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1843  001276  0100               	movlb	0	; () banked
  1844  001278  518A               	movf	printf@exp& (0+255),w,b
  1845  00127A  0800               	sublw	0
  1846  00127C  EC0C  F00D         	call	_scale
  1847  001280  C032  F08C         	movff	?_scale,printf@tmpval
  1848  001284  C033  F08D         	movff	?_scale+1,printf@tmpval+1
  1849  001288  C034  F08E         	movff	?_scale+2,printf@tmpval+2
  1850                           
  1851                           ;doprnt.c: 847: tmpval.integ *= fval;
  1852  00128C  C08C  F023         	movff	printf@tmpval,___ftmul@f1
  1853  001290  C08D  F024         	movff	printf@tmpval+1,___ftmul@f1+1
  1854  001294  C08E  F025         	movff	printf@tmpval+2,___ftmul@f1+2
  1855  001298  C094  F026         	movff	printf@fval,___ftmul@f2
  1856  00129C  C095  F027         	movff	printf@fval+1,___ftmul@f2+1
  1857  0012A0  C096  F028         	movff	printf@fval+2,___ftmul@f2+2
  1858  0012A4  EC4C  F013         	call	___ftmul	;wreg free
  1859  0012A8  C023  F08C         	movff	?___ftmul,printf@tmpval
  1860  0012AC  C024  F08D         	movff	?___ftmul+1,printf@tmpval+1
  1861  0012B0  C025  F08E         	movff	?___ftmul+2,printf@tmpval+2
  1862                           
  1863                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1864  0012B4  C08C  F00F         	movff	printf@tmpval,___ftge@ff1
  1865  0012B8  C08D  F010         	movff	printf@tmpval+1,___ftge@ff1+1
  1866  0012BC  C08E  F011         	movff	printf@tmpval+2,___ftge@ff1+2
  1867  0012C0  0E00               	movlw	0
  1868  0012C2  6E12               	movwf	___ftge@ff2,c
  1869  0012C4  0E80               	movlw	128
  1870  0012C6  6E13               	movwf	___ftge@ff2+1,c
  1871  0012C8  0E3F               	movlw	63
  1872  0012CA  6E14               	movwf	___ftge@ff2+2,c
  1873  0012CC  EC0A  F015         	call	___ftge	;wreg free
  1874  0012D0  B0D8               	btfsc	status,0,c
  1875  0012D2  D005               	goto	l3101
  1876                           
  1877                           ;doprnt.c: 849: exp--;
  1878  0012D4  0100               	movlb	0	; () banked
  1879  0012D6  078A               	decf	printf@exp& (0+255),f,b
  1880  0012D8  A0D8               	btfss	status,0,c
  1881  0012DA  078B               	decf	(printf@exp+1)& (0+255),f,b
  1882  0012DC  D013               	goto	l3105
  1883  0012DE                     l3101:
  1884                           
  1885                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1886  0012DE  C08C  F00F         	movff	printf@tmpval,___ftge@ff1
  1887  0012E2  C08D  F010         	movff	printf@tmpval+1,___ftge@ff1+1
  1888  0012E6  C08E  F011         	movff	printf@tmpval+2,___ftge@ff1+2
  1889  0012EA  0E00               	movlw	0
  1890  0012EC  6E12               	movwf	___ftge@ff2,c
  1891  0012EE  0E20               	movlw	32
  1892  0012F0  6E13               	movwf	___ftge@ff2+1,c
  1893  0012F2  0E41               	movlw	65
  1894  0012F4  6E14               	movwf	___ftge@ff2+2,c
  1895  0012F6  EC0A  F015         	call	___ftge	;wreg free
  1896  0012FA  A0D8               	btfss	status,0,c
  1897  0012FC  D003               	goto	l3105
  1898                           
  1899                           ;doprnt.c: 851: exp++;
  1900  0012FE  0100               	movlb	0	; () banked
  1901  001300  4B8A               	infsnz	printf@exp& (0+255),f,b
  1902  001302  2B8B               	incf	(printf@exp+1)& (0+255),f,b
  1903  001304                     l3105:
  1904                           
  1905                           ;doprnt.c: 852: }
  1906                           ;doprnt.c: 1112: if(prec <= 12)
  1907  001304  0100               	movlb	0	; () banked
  1908  001306  BF87               	btfsc	(printf@prec+1)& (0+255),7,b
  1909  001308  D008               	goto	l3107
  1910  00130A  0100               	movlb	0	; () banked
  1911  00130C  5187               	movf	(printf@prec+1)& (0+255),w,b
  1912  00130E  E11D               	bnz	l3109
  1913  001310  0E0D               	movlw	13
  1914  001312  0100               	movlb	0	; () banked
  1915  001314  5D86               	subwf	printf@prec& (0+255),w,b
  1916  001316  B0D8               	btfsc	status,0,c
  1917  001318  D018               	goto	l3109
  1918  00131A                     l3107:
  1919                           
  1920                           ; BSR set to: 0
  1921                           ;doprnt.c: 1113: fval += fround(prec);
  1922  00131A  C094  F03C         	movff	printf@fval,___ftadd@f1
  1923  00131E  C095  F03D         	movff	printf@fval+1,___ftadd@f1+1
  1924  001322  C096  F03E         	movff	printf@fval+2,___ftadd@f1+2
  1925  001326  0100               	movlb	0	; () banked
  1926  001328  5186               	movf	printf@prec& (0+255),w,b
  1927  00132A  EC04  F00F         	call	_fround
  1928  00132E  C032  F03F         	movff	?_fround,___ftadd@f2
  1929  001332  C033  F040         	movff	?_fround+1,___ftadd@f2+1
  1930  001336  C034  F041         	movff	?_fround+2,___ftadd@f2+2
  1931  00133A  EC49  F011         	call	___ftadd	;wreg free
  1932  00133E  C03C  F094         	movff	?___ftadd,printf@fval
  1933  001342  C03D  F095         	movff	?___ftadd+1,printf@fval+1
  1934  001346  C03E  F096         	movff	?___ftadd+2,printf@fval+2
  1935  00134A                     l3109:
  1936                           
  1937                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1938  00134A  0100               	movlb	0	; () banked
  1939  00134C  BF8B               	btfsc	(printf@exp+1)& (0+255),7,b
  1940  00134E  D008               	goto	l3111
  1941  001350  0100               	movlb	0	; () banked
  1942  001352  518B               	movf	(printf@exp+1)& (0+255),w,b
  1943  001354  E126               	bnz	l3117
  1944  001356  0E0A               	movlw	10
  1945  001358  0100               	movlb	0	; () banked
  1946  00135A  5D8A               	subwf	printf@exp& (0+255),w,b
  1947  00135C  B0D8               	btfsc	status,0,c
  1948  00135E  D021               	goto	l3117
  1949  001360                     l3111:
  1950                           
  1951                           ; BSR set to: 0
  1952  001360  0100               	movlb	0	; () banked
  1953  001362  5194               	movf	printf@fval& (0+255),w,b
  1954  001364  0100               	movlb	0	; () banked
  1955  001366  1195               	iorwf	(printf@fval+1)& (0+255),w,b
  1956  001368  0100               	movlb	0	; () banked
  1957  00136A  1196               	iorwf	(printf@fval+2)& (0+255),w,b
  1958  00136C  B4D8               	btfsc	status,2,c
  1959  00136E  D05B               	goto	l3131
  1960                           
  1961                           ; BSR set to: 0
  1962  001370  C094  F039         	movff	printf@fval,___fttol@f1
  1963  001374  C095  F03A         	movff	printf@fval+1,___fttol@f1+1
  1964  001378  C096  F03B         	movff	printf@fval+2,___fttol@f1+2
  1965  00137C  ECC6  F013         	call	___fttol	;wreg free
  1966  001380  5039               	movf	?___fttol,w,c
  1967  001382  103A               	iorwf	?___fttol+1,w,c
  1968  001384  103B               	iorwf	?___fttol+2,w,c
  1969  001386  103C               	iorwf	?___fttol+3,w,c
  1970  001388  A4D8               	btfss	status,2,c
  1971  00138A  D04D               	goto	l3131
  1972  00138C  0100               	movlb	0	; () banked
  1973  00138E  BF8B               	btfsc	(printf@exp+1)& (0+255),7,b
  1974  001390  D04A               	goto	l3131
  1975  001392  0100               	movlb	0	; () banked
  1976  001394  518B               	movf	(printf@exp+1)& (0+255),w,b
  1977  001396  E105               	bnz	l3117
  1978  001398  0E02               	movlw	2
  1979  00139A  0100               	movlb	0	; () banked
  1980  00139C  5D8A               	subwf	printf@exp& (0+255),w,b
  1981  00139E  A0D8               	btfss	status,0,c
  1982  0013A0  D042               	goto	l3131
  1983  0013A2                     l3117:
  1984                           
  1985                           ; BSR set to: 0
  1986                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1987  0013A2  C08C  F00F         	movff	printf@tmpval,___ftge@ff1
  1988  0013A6  C08D  F010         	movff	printf@tmpval+1,___ftge@ff1+1
  1989  0013AA  C08E  F011         	movff	printf@tmpval+2,___ftge@ff1+2
  1990  0013AE  0E70               	movlw	112
  1991  0013B0  6E12               	movwf	___ftge@ff2,c
  1992  0013B2  0E89               	movlw	137
  1993  0013B4  6E13               	movwf	___ftge@ff2+1,c
  1994  0013B6  0E40               	movlw	64
  1995  0013B8  6E14               	movwf	___ftge@ff2+2,c
  1996  0013BA  EC0A  F015         	call	___ftge	;wreg free
  1997  0013BE  B0D8               	btfsc	status,0,c
  1998  0013C0  D003               	goto	l3121
  1999                           
  2000                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2001  0013C2  0100               	movlb	0	; () banked
  2002  0013C4  0EF7               	movlw	247
  2003  0013C6  D002               	goto	L1
  2004  0013C8                     l3121:
  2005                           
  2006                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2007  0013C8  0100               	movlb	0	; () banked
  2008  0013CA  0EF8               	movlw	248
  2009  0013CC                     L1:
  2010  0013CC  278A               	addwf	printf@exp& (0+255),f,b
  2011  0013CE  0EFF               	movlw	255
  2012  0013D0  238B               	addwfc	(printf@exp+1)& (0+255),f,b
  2013                           
  2014                           ; BSR set to: 0
  2015                           ;doprnt.c: 1124: }
  2016                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2017                           
  2018                           ; BSR set to: 0
  2019  0013D2  0100               	movlb	0	; () banked
  2020  0013D4  518A               	movf	printf@exp& (0+255),w,b
  2021  0013D6  EC0C  F00D         	call	_scale
  2022  0013DA  C032  F08C         	movff	?_scale,printf@tmpval
  2023  0013DE  C033  F08D         	movff	?_scale+1,printf@tmpval+1
  2024  0013E2  C034  F08E         	movff	?_scale+2,printf@tmpval+2
  2025                           
  2026                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2027  0013E6  C094  F00F         	movff	printf@fval,__tdiv_to_l_@f1
  2028  0013EA  C095  F010         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  2029  0013EE  C096  F011         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  2030  0013F2  C08C  F012         	movff	printf@tmpval,__tdiv_to_l_@f2
  2031  0013F6  C08D  F013         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  2032  0013FA  C08E  F014         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  2033  0013FE  EC1F  F012         	call	__tdiv_to_l_	;wreg free
  2034  001402  C00F  F090         	movff	?__tdiv_to_l_,printf@val
  2035  001406  C010  F091         	movff	?__tdiv_to_l_+1,printf@val+1
  2036  00140A  C011  F092         	movff	?__tdiv_to_l_+2,printf@val+2
  2037  00140E  C012  F093         	movff	?__tdiv_to_l_+3,printf@val+3
  2038                           
  2039                           ;doprnt.c: 1129: fval = 0.0;
  2040  001412  0E00               	movlw	0
  2041  001414  0100               	movlb	0	; () banked
  2042  001416  6F94               	movwf	printf@fval& (0+255),b
  2043  001418  0E00               	movlw	0
  2044  00141A  0100               	movlb	0	; () banked
  2045  00141C  6F95               	movwf	(printf@fval+1)& (0+255),b
  2046  00141E  0E00               	movlw	0
  2047  001420  0100               	movlb	0	; () banked
  2048  001422  6F96               	movwf	(printf@fval+2)& (0+255),b
  2049                           
  2050                           ;doprnt.c: 1130: } else {
  2051  001424  D033               	goto	l3135
  2052  001426                     l3131:
  2053                           
  2054                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2055  001426  C094  F039         	movff	printf@fval,___fttol@f1
  2056  00142A  C095  F03A         	movff	printf@fval+1,___fttol@f1+1
  2057  00142E  C096  F03B         	movff	printf@fval+2,___fttol@f1+2
  2058  001432  ECC6  F013         	call	___fttol	;wreg free
  2059  001436  C039  F090         	movff	?___fttol,printf@val
  2060  00143A  C03A  F091         	movff	?___fttol+1,printf@val+1
  2061  00143E  C03B  F092         	movff	?___fttol+2,printf@val+2
  2062  001442  C03C  F093         	movff	?___fttol+3,printf@val+3
  2063                           
  2064                           ;doprnt.c: 1132: fval -= (double)val;
  2065  001446  C094  F048         	movff	printf@fval,___ftsub@f1
  2066  00144A  C095  F049         	movff	printf@fval+1,___ftsub@f1+1
  2067  00144E  C096  F04A         	movff	printf@fval+2,___ftsub@f1+2
  2068  001452  C090  F017         	movff	printf@val,___lltoft@c
  2069  001456  C091  F018         	movff	printf@val+1,___lltoft@c+1
  2070  00145A  C092  F019         	movff	printf@val+2,___lltoft@c+2
  2071  00145E  C093  F01A         	movff	printf@val+3,___lltoft@c+3
  2072  001462  ECEC  F016         	call	___lltoft	;wreg free
  2073  001466  C017  F04B         	movff	?___lltoft,___ftsub@f2
  2074  00146A  C018  F04C         	movff	?___lltoft+1,___ftsub@f2+1
  2075  00146E  C019  F04D         	movff	?___lltoft+2,___ftsub@f2+2
  2076  001472  EC6A  F017         	call	___ftsub	;wreg free
  2077  001476  C048  F094         	movff	?___ftsub,printf@fval
  2078  00147A  C049  F095         	movff	?___ftsub+1,printf@fval+1
  2079  00147E  C04A  F096         	movff	?___ftsub+2,printf@fval+2
  2080                           
  2081                           ;doprnt.c: 1133: exp = 0;
  2082  001482  0E00               	movlw	0
  2083  001484  0100               	movlb	0	; () banked
  2084  001486  6F8B               	movwf	(printf@exp+1)& (0+255),b
  2085  001488  0E00               	movlw	0
  2086  00148A  6F8A               	movwf	printf@exp& (0+255),b
  2087  00148C                     l3135:
  2088                           
  2089                           ; BSR set to: 0
  2090                           ;doprnt.c: 1134: }
  2091                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2092  00148C  0E01               	movlw	1
  2093  00148E  0100               	movlb	0	; () banked
  2094  001490  6F97               	movwf	printf@c& (0+255),b
  2095  001492                     l3137:
  2096                           
  2097                           ; BSR set to: 0
  2098  001492  0E0A               	movlw	10
  2099  001494  0100               	movlb	0	; () banked
  2100  001496  1997               	xorwf	printf@c& (0+255),w,b
  2101  001498  B4D8               	btfsc	status,2,c
  2102  00149A  D01E               	goto	l3149
  2103                           
  2104                           ; BSR set to: 0
  2105                           ;doprnt.c: 1137: if(val < dpowers[c])
  2106                           
  2107                           ; BSR set to: 0
  2108                           
  2109                           ; BSR set to: 0
  2110  00149C  0100               	movlb	0	; () banked
  2111  00149E  5197               	movf	printf@c& (0+255),w,b
  2112  0014A0  0D04               	mullw	4
  2113  0014A2  0E01               	movlw	low _dpowers
  2114  0014A4  24F3               	addwf	prodl,w,c
  2115  0014A6  6EF6               	movwf	tblptrl,c
  2116  0014A8  0E10               	movlw	high _dpowers
  2117  0014AA  20F4               	addwfc	prodh,w,c
  2118  0014AC  6EF7               	movwf	tblptrh,c
  2119  0014AE                     	if	0	;There are less than 3 active tblptr bytes
  2120  0014AE                     	endif
  2121  0014AE  0009               	tblrd		*+
  2122  0014B0  50F5               	movf	tablat,w,c
  2123  0014B2  0100               	movlb	0	; () banked
  2124  0014B4  5D90               	subwf	printf@val& (0+255),w,b
  2125  0014B6  0009               	tblrd		*+
  2126  0014B8  50F5               	movf	tablat,w,c
  2127  0014BA  0100               	movlb	0	; () banked
  2128  0014BC  5991               	subwfb	(printf@val+1)& (0+255),w,b
  2129  0014BE  0009               	tblrd		*+
  2130  0014C0  50F5               	movf	tablat,w,c
  2131  0014C2  0100               	movlb	0	; () banked
  2132  0014C4  5992               	subwfb	(printf@val+2)& (0+255),w,b
  2133  0014C6  0009               	tblrd		*+
  2134  0014C8  50F5               	movf	tablat,w,c
  2135  0014CA  0100               	movlb	0	; () banked
  2136  0014CC  5993               	subwfb	(printf@val+3)& (0+255),w,b
  2137  0014CE  A0D8               	btfss	status,0,c
  2138  0014D0  D003               	goto	l3149
  2139                           
  2140                           ; BSR set to: 0
  2141                           
  2142                           ; BSR set to: 0
  2143                           
  2144                           ; BSR set to: 0
  2145                           ;doprnt.c: 1138: break;
  2146  0014D2  0100               	movlb	0	; () banked
  2147  0014D4  2B97               	incf	printf@c& (0+255),f,b
  2148  0014D6  D7DD               	goto	l3137
  2149  0014D8                     l3149:
  2150                           
  2151                           ; BSR set to: 0
  2152                           ;doprnt.c: 1175: {
  2153                           ;doprnt.c: 1188: if(flag & 0x03)
  2154  0014D8  0E03               	movlw	3
  2155  0014DA  0100               	movlb	0	; () banked
  2156  0014DC  1588               	andwf	printf@flag& (0+255),w,b
  2157  0014DE  6E54               	movwf	??_printf& (0+255),c
  2158  0014E0  0E00               	movlw	0
  2159  0014E2  0100               	movlb	0	; () banked
  2160  0014E4  1589               	andwf	(printf@flag+1)& (0+255),w,b
  2161  0014E6  6E55               	movwf	(??_printf+1)& (0+255),c
  2162  0014E8  5054               	movf	??_printf,w,c
  2163  0014EA  1055               	iorwf	??_printf+1,w,c
  2164  0014EC  B4D8               	btfsc	status,2,c
  2165  0014EE  D04A               	goto	l3159
  2166                           
  2167                           ; BSR set to: 0
  2168                           ;doprnt.c: 1190: (putch('-') );
  2169  0014F0  0E2D               	movlw	45
  2170  0014F2  EC13  F018         	call	_putch
  2171                           
  2172                           ;doprnt.c: 1195: }
  2173                           ;doprnt.c: 1196: while(c--) {
  2174  0014F6  D046               	goto	l3159
  2175  0014F8                     l3153:
  2176                           
  2177                           ;doprnt.c: 1200: {
  2178                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2179  0014F8  C090  F00F         	movff	printf@val,___lldiv@dividend
  2180  0014FC  C091  F010         	movff	printf@val+1,___lldiv@dividend+1
  2181  001500  C092  F011         	movff	printf@val+2,___lldiv@dividend+2
  2182  001504  C093  F012         	movff	printf@val+3,___lldiv@dividend+3
  2183  001508  0100               	movlb	0	; () banked
  2184  00150A  5197               	movf	printf@c& (0+255),w,b
  2185  00150C  0D04               	mullw	4
  2186  00150E  0E01               	movlw	low _dpowers
  2187  001510  24F3               	addwf	prodl,w,c
  2188  001512  6EF6               	movwf	tblptrl,c
  2189  001514  0E10               	movlw	high _dpowers
  2190  001516  20F4               	addwfc	prodh,w,c
  2191  001518  6EF7               	movwf	tblptrh,c
  2192  00151A                     	if	0	;There are less than 3 active tblptr bytes
  2193  00151A                     	endif
  2194  00151A  0009               	tblrd		*+
  2195  00151C  CFF5 F013          	movff	tablat,___lldiv@divisor
  2196  001520  0009               	tblrd		*+
  2197  001522  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  2198  001526  0009               	tblrd		*+
  2199  001528  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  2200  00152C  000A               	tblrd		*-
  2201  00152E  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  2202  001532  EC94  F015         	call	___lldiv	;wreg free
  2203  001536  C00F  F08C         	movff	?___lldiv,printf@tmpval
  2204  00153A  C010  F08D         	movff	?___lldiv+1,printf@tmpval+1
  2205  00153E  C011  F08E         	movff	?___lldiv+2,printf@tmpval+2
  2206  001542  C012  F08F         	movff	?___lldiv+3,printf@tmpval+3
  2207                           
  2208                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2209  001546  C08C  F01C         	movff	printf@tmpval,___llmod@dividend
  2210  00154A  C08D  F01D         	movff	printf@tmpval+1,___llmod@dividend+1
  2211  00154E  C08E  F01E         	movff	printf@tmpval+2,___llmod@dividend+2
  2212  001552  C08F  F01F         	movff	printf@tmpval+3,___llmod@dividend+3
  2213  001556  0E0A               	movlw	10
  2214  001558  6E20               	movwf	___llmod@divisor,c
  2215  00155A  0E00               	movlw	0
  2216  00155C  6E21               	movwf	___llmod@divisor+1,c
  2217  00155E  0E00               	movlw	0
  2218  001560  6E22               	movwf	___llmod@divisor+2,c
  2219  001562  0E00               	movlw	0
  2220  001564  6E23               	movwf	___llmod@divisor+3,c
  2221  001566  EC86  F016         	call	___llmod	;wreg free
  2222  00156A  C01C  F08C         	movff	?___llmod,printf@tmpval
  2223  00156E  C01D  F08D         	movff	?___llmod+1,printf@tmpval+1
  2224  001572  C01E  F08E         	movff	?___llmod+2,printf@tmpval+2
  2225  001576  C01F  F08F         	movff	?___llmod+3,printf@tmpval+3
  2226                           
  2227                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  2228  00157A  0100               	movlb	0	; () banked
  2229  00157C  518C               	movf	printf@tmpval& (0+255),w,b
  2230  00157E  0F30               	addlw	48
  2231  001580  EC13  F018         	call	_putch
  2232  001584                     l3159:
  2233  001584  0100               	movlb	0	; () banked
  2234  001586  0797               	decf	printf@c& (0+255),f,b
  2235  001588  0100               	movlb	0	; () banked
  2236  00158A  2997               	incf	printf@c& (0+255),w,b
  2237  00158C  B4D8               	btfsc	status,2,c
  2238  00158E  D008               	goto	l3165
  2239  001590  D7B3               	goto	l3153
  2240  001592                     l3161:
  2241                           
  2242                           ; BSR set to: 0
  2243                           ;doprnt.c: 1208: (putch('0') );
  2244  001592  0E30               	movlw	48
  2245  001594  EC13  F018         	call	_putch
  2246                           
  2247                           ;doprnt.c: 1209: exp--;
  2248  001598  0100               	movlb	0	; () banked
  2249  00159A  078A               	decf	printf@exp& (0+255),f,b
  2250  00159C  A0D8               	btfss	status,0,c
  2251  00159E  078B               	decf	(printf@exp+1)& (0+255),f,b
  2252  0015A0                     l3165:
  2253                           
  2254                           ; BSR set to: 0
  2255  0015A0  0100               	movlb	0	; () banked
  2256  0015A2  BF8B               	btfsc	(printf@exp+1)& (0+255),7,b
  2257  0015A4  D007               	goto	l3167
  2258  0015A6  0100               	movlb	0	; () banked
  2259  0015A8  518B               	movf	(printf@exp+1)& (0+255),w,b
  2260  0015AA  E1F3               	bnz	l3161
  2261  0015AC  0100               	movlb	0	; () banked
  2262  0015AE  058A               	decf	printf@exp& (0+255),w,b
  2263  0015B0  B0D8               	btfsc	status,0,c
  2264  0015B2  D7EF               	goto	l3161
  2265  0015B4                     l3167:
  2266                           
  2267                           ; BSR set to: 0
  2268                           ;doprnt.c: 1210: }
  2269                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2270  0015B4  0100               	movlb	0	; () banked
  2271  0015B6  BF87               	btfsc	(printf@prec+1)& (0+255),7,b
  2272  0015B8  D00C               	goto	l460
  2273  0015BA  0100               	movlb	0	; () banked
  2274  0015BC  5187               	movf	(printf@prec+1)& (0+255),w,b
  2275  0015BE  E105               	bnz	u2900
  2276  0015C0  0E09               	movlw	9
  2277  0015C2  0100               	movlb	0	; () banked
  2278  0015C4  5D86               	subwf	printf@prec& (0+255),w,b
  2279  0015C6  A0D8               	btfss	status,0,c
  2280  0015C8  D004               	goto	l460
  2281  0015CA                     u2900:
  2282                           
  2283                           ; BSR set to: 0
  2284                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2285  0015CA  0E08               	movlw	8
  2286  0015CC  0100               	movlb	0	; () banked
  2287  0015CE  6F97               	movwf	printf@c& (0+255),b
  2288  0015D0  D002               	goto	l3171
  2289  0015D2                     l460:
  2290                           
  2291                           ; BSR set to: 0
  2292                           ;doprnt.c: 1213: else
  2293                           ;doprnt.c: 1214: c = prec;
  2294  0015D2  C086  F097         	movff	printf@prec,printf@c
  2295  0015D6                     l3171:
  2296                           
  2297                           ; BSR set to: 0
  2298                           ;doprnt.c: 1215: prec -= c;
  2299  0015D6  0100               	movlb	0	; () banked
  2300  0015D8  5197               	movf	printf@c& (0+255),w,b
  2301  0015DA  0100               	movlb	0	; () banked
  2302  0015DC  5F86               	subwf	printf@prec& (0+255),f,b
  2303  0015DE  0E00               	movlw	0
  2304  0015E0  0100               	movlb	0	; () banked
  2305  0015E2  BF97               	btfsc	printf@c& (0+255),7,b
  2306  0015E4  0EFF               	movlw	255
  2307  0015E6  0100               	movlb	0	; () banked
  2308  0015E8  5B87               	subwfb	(printf@prec+1)& (0+255),f,b
  2309                           
  2310                           ; BSR set to: 0
  2311                           ;doprnt.c: 1219: if(c)
  2312  0015EA  0100               	movlb	0	; () banked
  2313  0015EC  5197               	movf	printf@c& (0+255),w,b
  2314  0015EE  0100               	movlb	0	; () banked
  2315  0015F0  B4D8               	btfsc	status,2,c
  2316  0015F2  D003               	goto	l3177
  2317                           
  2318                           ; BSR set to: 0
  2319                           ;doprnt.c: 1221: (putch('.') );
  2320  0015F4  0E2E               	movlw	46
  2321  0015F6  EC13  F018         	call	_putch
  2322  0015FA                     l3177:
  2323                           
  2324                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2325  0015FA  0100               	movlb	0	; () banked
  2326  0015FC  5197               	movf	printf@c& (0+255),w,b
  2327  0015FE  EC0C  F00D         	call	_scale
  2328  001602  C032  F080         	movff	?_scale,_printf$1119
  2329  001606  C033  F081         	movff	?_scale+1,_printf$1119+1
  2330  00160A  C034  F082         	movff	?_scale+2,_printf$1119+2
  2331                           
  2332                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2333  00160E  C094  F026         	movff	printf@fval,___ftmul@f2
  2334  001612  C095  F027         	movff	printf@fval+1,___ftmul@f2+1
  2335  001616  C096  F028         	movff	printf@fval+2,___ftmul@f2+2
  2336  00161A  C080  F023         	movff	_printf$1119,___ftmul@f1
  2337  00161E  C081  F024         	movff	_printf$1119+1,___ftmul@f1+1
  2338  001622  C082  F025         	movff	_printf$1119+2,___ftmul@f1+2
  2339  001626  EC4C  F013         	call	___ftmul	;wreg free
  2340  00162A  C023  F039         	movff	?___ftmul,___fttol@f1
  2341  00162E  C024  F03A         	movff	?___ftmul+1,___fttol@f1+1
  2342  001632  C025  F03B         	movff	?___ftmul+2,___fttol@f1+2
  2343  001636  ECC6  F013         	call	___fttol	;wreg free
  2344  00163A  C039  F090         	movff	?___fttol,printf@val
  2345  00163E  C03A  F091         	movff	?___fttol+1,printf@val+1
  2346  001642  C03B  F092         	movff	?___fttol+2,printf@val+2
  2347  001646  C03C  F093         	movff	?___fttol+3,printf@val+3
  2348                           
  2349                           ;doprnt.c: 1228: while(c--) {
  2350  00164A  D06D               	goto	l3187
  2351  00164C                     l3181:
  2352                           
  2353                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2354  00164C  C090  F00F         	movff	printf@val,___lldiv@dividend
  2355  001650  C091  F010         	movff	printf@val+1,___lldiv@dividend+1
  2356  001654  C092  F011         	movff	printf@val+2,___lldiv@dividend+2
  2357  001658  C093  F012         	movff	printf@val+3,___lldiv@dividend+3
  2358  00165C  0100               	movlb	0	; () banked
  2359  00165E  5197               	movf	printf@c& (0+255),w,b
  2360  001660  0D04               	mullw	4
  2361  001662  0E01               	movlw	low _dpowers
  2362  001664  24F3               	addwf	prodl,w,c
  2363  001666  6EF6               	movwf	tblptrl,c
  2364  001668  0E10               	movlw	high _dpowers
  2365  00166A  20F4               	addwfc	prodh,w,c
  2366  00166C  6EF7               	movwf	tblptrh,c
  2367  00166E                     	if	0	;There are less than 3 active tblptr bytes
  2368  00166E                     	endif
  2369  00166E  0009               	tblrd		*+
  2370  001670  CFF5 F013          	movff	tablat,___lldiv@divisor
  2371  001674  0009               	tblrd		*+
  2372  001676  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  2373  00167A  0009               	tblrd		*+
  2374  00167C  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  2375  001680  000A               	tblrd		*-
  2376  001682  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  2377  001686  EC94  F015         	call	___lldiv	;wreg free
  2378  00168A  C00F  F08C         	movff	?___lldiv,printf@tmpval
  2379  00168E  C010  F08D         	movff	?___lldiv+1,printf@tmpval+1
  2380  001692  C011  F08E         	movff	?___lldiv+2,printf@tmpval+2
  2381  001696  C012  F08F         	movff	?___lldiv+3,printf@tmpval+3
  2382                           
  2383                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2384  00169A  C08C  F01C         	movff	printf@tmpval,___llmod@dividend
  2385  00169E  C08D  F01D         	movff	printf@tmpval+1,___llmod@dividend+1
  2386  0016A2  C08E  F01E         	movff	printf@tmpval+2,___llmod@dividend+2
  2387  0016A6  C08F  F01F         	movff	printf@tmpval+3,___llmod@dividend+3
  2388  0016AA  0E0A               	movlw	10
  2389  0016AC  6E20               	movwf	___llmod@divisor,c
  2390  0016AE  0E00               	movlw	0
  2391  0016B0  6E21               	movwf	___llmod@divisor+1,c
  2392  0016B2  0E00               	movlw	0
  2393  0016B4  6E22               	movwf	___llmod@divisor+2,c
  2394  0016B6  0E00               	movlw	0
  2395  0016B8  6E23               	movwf	___llmod@divisor+3,c
  2396  0016BA  EC86  F016         	call	___llmod	;wreg free
  2397  0016BE  C01C  F08C         	movff	?___llmod,printf@tmpval
  2398  0016C2  C01D  F08D         	movff	?___llmod+1,printf@tmpval+1
  2399  0016C6  C01E  F08E         	movff	?___llmod+2,printf@tmpval+2
  2400  0016CA  C01F  F08F         	movff	?___llmod+3,printf@tmpval+3
  2401                           
  2402                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  2403  0016CE  0100               	movlb	0	; () banked
  2404  0016D0  518C               	movf	printf@tmpval& (0+255),w,b
  2405  0016D2  0F30               	addlw	48
  2406  0016D4  EC13  F018         	call	_putch
  2407                           
  2408                           ;doprnt.c: 1232: val %= dpowers[c];
  2409  0016D8  C090  F01C         	movff	printf@val,___llmod@dividend
  2410  0016DC  C091  F01D         	movff	printf@val+1,___llmod@dividend+1
  2411  0016E0  C092  F01E         	movff	printf@val+2,___llmod@dividend+2
  2412  0016E4  C093  F01F         	movff	printf@val+3,___llmod@dividend+3
  2413  0016E8  0100               	movlb	0	; () banked
  2414  0016EA  5197               	movf	printf@c& (0+255),w,b
  2415  0016EC  0D04               	mullw	4
  2416  0016EE  0E01               	movlw	low _dpowers
  2417  0016F0  24F3               	addwf	prodl,w,c
  2418  0016F2  6EF6               	movwf	tblptrl,c
  2419  0016F4  0E10               	movlw	high _dpowers
  2420  0016F6  20F4               	addwfc	prodh,w,c
  2421  0016F8  6EF7               	movwf	tblptrh,c
  2422  0016FA                     	if	0	;There are less than 3 active tblptr bytes
  2423  0016FA                     	endif
  2424  0016FA  0009               	tblrd		*+
  2425  0016FC  CFF5 F020          	movff	tablat,___llmod@divisor
  2426  001700  0009               	tblrd		*+
  2427  001702  CFF5 F021          	movff	tablat,___llmod@divisor+1
  2428  001706  0009               	tblrd		*+
  2429  001708  CFF5 F022          	movff	tablat,___llmod@divisor+2
  2430  00170C  000A               	tblrd		*-
  2431  00170E  CFF5 F023          	movff	tablat,___llmod@divisor+3
  2432  001712  EC86  F016         	call	___llmod	;wreg free
  2433  001716  C01C  F090         	movff	?___llmod,printf@val
  2434  00171A  C01D  F091         	movff	?___llmod+1,printf@val+1
  2435  00171E  C01E  F092         	movff	?___llmod+2,printf@val+2
  2436  001722  C01F  F093         	movff	?___llmod+3,printf@val+3
  2437  001726                     l3187:
  2438  001726  0100               	movlb	0	; () banked
  2439  001728  0797               	decf	printf@c& (0+255),f,b
  2440  00172A  0100               	movlb	0	; () banked
  2441  00172C  2997               	incf	printf@c& (0+255),w,b
  2442  00172E  B4D8               	btfsc	status,2,c
  2443  001730  D008               	goto	l3193
  2444  001732  D78C               	goto	l3181
  2445  001734                     l3189:
  2446                           
  2447                           ; BSR set to: 0
  2448                           ;doprnt.c: 1236: (putch('0') );
  2449  001734  0E30               	movlw	48
  2450  001736  EC13  F018         	call	_putch
  2451                           
  2452                           ;doprnt.c: 1237: prec--;
  2453  00173A  0100               	movlb	0	; () banked
  2454  00173C  0786               	decf	printf@prec& (0+255),f,b
  2455  00173E  A0D8               	btfss	status,0,c
  2456  001740  0787               	decf	(printf@prec+1)& (0+255),f,b
  2457  001742                     l3193:
  2458                           
  2459                           ; BSR set to: 0
  2460  001742  0100               	movlb	0	; () banked
  2461  001744  5186               	movf	printf@prec& (0+255),w,b
  2462  001746  0100               	movlb	0	; () banked
  2463  001748  1187               	iorwf	(printf@prec+1)& (0+255),w,b
  2464  00174A  B4D8               	btfsc	status,2,c
  2465  00174C  D156               	goto	l3271
  2466  00174E  D7F2               	goto	l3189
  2467  001750                     l432:
  2468                           
  2469                           ; BSR set to: 0
  2470                           ;doprnt.c: 1246: }
  2471                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2472  001750  0100               	movlb	0	; () banked
  2473  001752  BF88               	btfsc	printf@flag& (0+255),7,b
  2474  001754  D034               	goto	l469
  2475                           
  2476                           ; BSR set to: 0
  2477                           ;doprnt.c: 1253: {
  2478                           ;doprnt.c: 1255: if(flag & 0x10)
  2479  001756  0100               	movlb	0	; () banked
  2480  001758  A988               	btfss	printf@flag& (0+255),4,b
  2481  00175A  D00E               	goto	l3201
  2482                           
  2483                           ; BSR set to: 0
  2484                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  2485  00175C  C084  FFD9         	movff	printf@ap,fsr2l
  2486  001760  C085  FFDA         	movff	printf@ap+1,fsr2h
  2487  001764  CFDE F090          	movff	postinc2,printf@val
  2488  001768  CFDE F091          	movff	postinc2,printf@val+1
  2489  00176C  CFDE F092          	movff	postinc2,printf@val+2
  2490  001770  CFDE F093          	movff	postinc2,printf@val+3
  2491                           
  2492                           ; BSR set to: 0
  2493  001774  0E04               	movlw	4
  2494  001776  D00F               	goto	L2
  2495  001778                     l3201:
  2496                           
  2497                           ; BSR set to: 0
  2498                           ;doprnt.c: 1257: else
  2499                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2500  001778  C084  FFD9         	movff	printf@ap,fsr2l
  2501  00177C  C085  FFDA         	movff	printf@ap+1,fsr2h
  2502  001780  CFDE F090          	movff	postinc2,printf@val
  2503  001784  CFDD F091          	movff	postdec2,printf@val+1
  2504  001788  0100               	movlb	0	; () banked
  2505  00178A  0E00               	movlw	0
  2506  00178C  BF91               	btfsc	(printf@val+1)& (0+255),7,b
  2507  00178E  0EFF               	movlw	-1
  2508  001790  6F92               	movwf	(printf@val+2)& (0+255),b
  2509  001792  6F93               	movwf	(printf@val+3)& (0+255),b
  2510                           
  2511                           ; BSR set to: 0
  2512  001794  0E02               	movlw	2
  2513  001796                     L2:
  2514  001796  0100               	movlb	0	; () banked
  2515  001798  2784               	addwf	printf@ap& (0+255),f,b
  2516  00179A  0E00               	movlw	0
  2517  00179C  2385               	addwfc	(printf@ap+1)& (0+255),f,b
  2518                           
  2519                           ; BSR set to: 0
  2520                           ;doprnt.c: 1261: if((long)val < 0) {
  2521                           
  2522                           ; BSR set to: 0
  2523  00179E  0100               	movlb	0	; () banked
  2524  0017A0  AF93               	btfss	(printf@val+3)& (0+255),7,b
  2525  0017A2  D07F               	goto	l3249
  2526                           
  2527                           ; BSR set to: 0
  2528                           ;doprnt.c: 1262: flag |= 0x03;
  2529  0017A4  0E03               	movlw	3
  2530  0017A6  0100               	movlb	0	; () banked
  2531  0017A8  1388               	iorwf	printf@flag& (0+255),f,b
  2532                           
  2533                           ; BSR set to: 0
  2534                           ;doprnt.c: 1263: val = -val;
  2535  0017AA  0100               	movlb	0	; () banked
  2536  0017AC  1F93               	comf	(printf@val+3)& (0+255),f,b
  2537  0017AE  1F92               	comf	(printf@val+2)& (0+255),f,b
  2538  0017B0  1F91               	comf	(printf@val+1)& (0+255),f,b
  2539  0017B2  6D90               	negf	printf@val& (0+255),b
  2540  0017B4  0E00               	movlw	0
  2541  0017B6  2391               	addwfc	(printf@val+1)& (0+255),f,b
  2542  0017B8  2392               	addwfc	(printf@val+2)& (0+255),f,b
  2543  0017BA  2393               	addwfc	(printf@val+3)& (0+255),f,b
  2544                           
  2545                           ; BSR set to: 0
  2546                           ;doprnt.c: 1264: }
  2547                           ;doprnt.c: 1266: }
  2548  0017BC  D072               	goto	l3249
  2549  0017BE                     l469:
  2550                           
  2551                           ; BSR set to: 0
  2552                           ;doprnt.c: 1268: else
  2553                           ;doprnt.c: 1273: {
  2554                           ;doprnt.c: 1281: if(flag & 0x10)
  2555  0017BE  0100               	movlb	0	; () banked
  2556  0017C0  A988               	btfss	printf@flag& (0+255),4,b
  2557  0017C2  D00E               	goto	l3215
  2558                           
  2559                           ; BSR set to: 0
  2560                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2561  0017C4  C084  FFD9         	movff	printf@ap,fsr2l
  2562  0017C8  C085  FFDA         	movff	printf@ap+1,fsr2h
  2563  0017CC  CFDE F090          	movff	postinc2,printf@val
  2564  0017D0  CFDE F091          	movff	postinc2,printf@val+1
  2565  0017D4  CFDE F092          	movff	postinc2,printf@val+2
  2566  0017D8  CFDE F093          	movff	postinc2,printf@val+3
  2567                           
  2568                           ; BSR set to: 0
  2569  0017DC  0E04               	movlw	4
  2570  0017DE  D010               	goto	L3
  2571  0017E0                     l3215:
  2572                           
  2573                           ; BSR set to: 0
  2574                           ;doprnt.c: 1283: else
  2575                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2576  0017E0  C084  FFD9         	movff	printf@ap,fsr2l
  2577  0017E4  C085  FFDA         	movff	printf@ap+1,fsr2h
  2578  0017E8  CFDE F054          	movff	postinc2,??_printf
  2579  0017EC  CFDD F055          	movff	postdec2,??_printf+1
  2580  0017F0  C054  F090         	movff	??_printf,printf@val
  2581  0017F4  C055  F091         	movff	??_printf+1,printf@val+1
  2582  0017F8  0100               	movlb	0	; () banked
  2583  0017FA  6B92               	clrf	(printf@val+2)& (0+255),b
  2584  0017FC  6B93               	clrf	(printf@val+3)& (0+255),b
  2585                           
  2586                           ; BSR set to: 0
  2587  0017FE  0E02               	movlw	2
  2588  001800                     L3:
  2589  001800  0100               	movlb	0	; () banked
  2590  001802  2784               	addwf	printf@ap& (0+255),f,b
  2591  001804  0E00               	movlw	0
  2592  001806  2385               	addwfc	(printf@ap+1)& (0+255),f,b
  2593                           
  2594                           ; BSR set to: 0
  2595                           ;doprnt.c: 1287: }
  2596                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2597                           
  2598                           ; BSR set to: 0
  2599  001808  D04C               	goto	l3249
  2600  00180A                     l3219:
  2601                           
  2602                           ; BSR set to: 0
  2603                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2604  00180A  0E01               	movlw	1
  2605  00180C  0100               	movlb	0	; () banked
  2606  00180E  6F97               	movwf	printf@c& (0+255),b
  2607  001810                     l3221:
  2608                           
  2609                           ; BSR set to: 0
  2610  001810  0E0A               	movlw	10
  2611  001812  0100               	movlb	0	; () banked
  2612  001814  1997               	xorwf	printf@c& (0+255),w,b
  2613  001816  B4D8               	btfsc	status,2,c
  2614  001818  D04D               	goto	l3251
  2615                           
  2616                           ; BSR set to: 0
  2617                           ;doprnt.c: 1306: if(val < dpowers[c])
  2618                           
  2619                           ; BSR set to: 0
  2620                           
  2621                           ; BSR set to: 0
  2622  00181A  0100               	movlb	0	; () banked
  2623  00181C  5197               	movf	printf@c& (0+255),w,b
  2624  00181E  0D04               	mullw	4
  2625  001820  0E01               	movlw	low _dpowers
  2626  001822  24F3               	addwf	prodl,w,c
  2627  001824  6EF6               	movwf	tblptrl,c
  2628  001826  0E10               	movlw	high _dpowers
  2629  001828  20F4               	addwfc	prodh,w,c
  2630  00182A  6EF7               	movwf	tblptrh,c
  2631  00182C                     	if	0	;There are less than 3 active tblptr bytes
  2632  00182C                     	endif
  2633  00182C  0009               	tblrd		*+
  2634  00182E  50F5               	movf	tablat,w,c
  2635  001830  0100               	movlb	0	; () banked
  2636  001832  5D90               	subwf	printf@val& (0+255),w,b
  2637  001834  0009               	tblrd		*+
  2638  001836  50F5               	movf	tablat,w,c
  2639  001838  0100               	movlb	0	; () banked
  2640  00183A  5991               	subwfb	(printf@val+1)& (0+255),w,b
  2641  00183C  0009               	tblrd		*+
  2642  00183E  50F5               	movf	tablat,w,c
  2643  001840  0100               	movlb	0	; () banked
  2644  001842  5992               	subwfb	(printf@val+2)& (0+255),w,b
  2645  001844  0009               	tblrd		*+
  2646  001846  50F5               	movf	tablat,w,c
  2647  001848  0100               	movlb	0	; () banked
  2648  00184A  5993               	subwfb	(printf@val+3)& (0+255),w,b
  2649  00184C  A0D8               	btfss	status,0,c
  2650  00184E  D032               	goto	l3251
  2651                           
  2652                           ; BSR set to: 0
  2653                           
  2654                           ; BSR set to: 0
  2655                           
  2656                           ; BSR set to: 0
  2657                           ;doprnt.c: 1307: break;
  2658  001850  0100               	movlb	0	; () banked
  2659  001852  2B97               	incf	printf@c& (0+255),f,b
  2660  001854  D7DD               	goto	l3221
  2661  001856                     l3233:
  2662                           
  2663                           ; BSR set to: 0
  2664                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2665  001856  0E01               	movlw	1
  2666  001858  0100               	movlb	0	; () banked
  2667  00185A  6F97               	movwf	printf@c& (0+255),b
  2668  00185C                     l3235:
  2669                           
  2670                           ; BSR set to: 0
  2671  00185C  0E08               	movlw	8
  2672  00185E  0100               	movlb	0	; () banked
  2673  001860  1997               	xorwf	printf@c& (0+255),w,b
  2674  001862  B4D8               	btfsc	status,2,c
  2675  001864  D027               	goto	l3251
  2676                           
  2677                           ; BSR set to: 0
  2678                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2679                           
  2680                           ; BSR set to: 0
  2681                           
  2682                           ; BSR set to: 0
  2683  001866  0100               	movlb	0	; () banked
  2684  001868  5197               	movf	printf@c& (0+255),w,b
  2685  00186A  0D04               	mullw	4
  2686  00186C  0E77               	movlw	low _hexpowers
  2687  00186E  24F3               	addwf	prodl,w,c
  2688  001870  6EF6               	movwf	tblptrl,c
  2689  001872  0E10               	movlw	high _hexpowers
  2690  001874  20F4               	addwfc	prodh,w,c
  2691  001876  6EF7               	movwf	tblptrh,c
  2692  001878                     	if	0	;There are less than 3 active tblptr bytes
  2693  001878                     	endif
  2694  001878  0009               	tblrd		*+
  2695  00187A  50F5               	movf	tablat,w,c
  2696  00187C  0100               	movlb	0	; () banked
  2697  00187E  5D90               	subwf	printf@val& (0+255),w,b
  2698  001880  0009               	tblrd		*+
  2699  001882  50F5               	movf	tablat,w,c
  2700  001884  0100               	movlb	0	; () banked
  2701  001886  5991               	subwfb	(printf@val+1)& (0+255),w,b
  2702  001888  0009               	tblrd		*+
  2703  00188A  50F5               	movf	tablat,w,c
  2704  00188C  0100               	movlb	0	; () banked
  2705  00188E  5992               	subwfb	(printf@val+2)& (0+255),w,b
  2706  001890  0009               	tblrd		*+
  2707  001892  50F5               	movf	tablat,w,c
  2708  001894  0100               	movlb	0	; () banked
  2709  001896  5993               	subwfb	(printf@val+3)& (0+255),w,b
  2710  001898  A0D8               	btfss	status,0,c
  2711  00189A  D00C               	goto	l3251
  2712                           
  2713                           ; BSR set to: 0
  2714                           
  2715                           ; BSR set to: 0
  2716                           
  2717                           ; BSR set to: 0
  2718                           ;doprnt.c: 1318: break;
  2719  00189C  0100               	movlb	0	; () banked
  2720  00189E  2B97               	incf	printf@c& (0+255),f,b
  2721  0018A0  D7DD               	goto	l3235
  2722  0018A2                     l3249:
  2723                           
  2724                           ; BSR set to: 0
  2725  0018A2  0100               	movlb	0	; () banked
  2726  0018A4  5188               	movf	printf@flag& (0+255),w,b
  2727  0018A6  0B80               	andlw	128
  2728                           
  2729                           ; Switch size 1, requested type "space"
  2730                           ; Number of cases is 2, Range of values is 0 to 128
  2731                           ; switch strategies available:
  2732                           ; Name         Instructions Cycles
  2733                           ; simple_byte            7     4 (average)
  2734                           ;	Chosen strategy is simple_byte
  2735  0018A8  0A00               	xorlw	0	; case 0
  2736  0018AA  B4D8               	btfsc	status,2,c
  2737  0018AC  D7AE               	goto	l3219
  2738  0018AE  0A80               	xorlw	128	; case 128
  2739  0018B0  B4D8               	btfsc	status,2,c
  2740  0018B2  D7D1               	goto	l3233
  2741  0018B4                     l3251:
  2742                           
  2743                           ; BSR set to: 0
  2744                           ;doprnt.c: 1422: {
  2745                           ;doprnt.c: 1438: if(flag & 0x03)
  2746  0018B4  0E03               	movlw	3
  2747  0018B6  0100               	movlb	0	; () banked
  2748  0018B8  1588               	andwf	printf@flag& (0+255),w,b
  2749  0018BA  6E54               	movwf	??_printf& (0+255),c
  2750  0018BC  0E00               	movlw	0
  2751  0018BE  0100               	movlb	0	; () banked
  2752  0018C0  1589               	andwf	(printf@flag+1)& (0+255),w,b
  2753  0018C2  6E55               	movwf	(??_printf+1)& (0+255),c
  2754  0018C4  5054               	movf	??_printf,w,c
  2755  0018C6  1055               	iorwf	??_printf+1,w,c
  2756  0018C8  B4D8               	btfsc	status,2,c
  2757  0018CA  D003               	goto	l3255
  2758                           
  2759                           ; BSR set to: 0
  2760                           ;doprnt.c: 1439: (putch('-') );
  2761  0018CC  0E2D               	movlw	45
  2762  0018CE  EC13  F018         	call	_putch
  2763  0018D2                     l3255:
  2764                           
  2765                           ;doprnt.c: 1469: }
  2766                           ;doprnt.c: 1472: prec = c;
  2767  0018D2  0100               	movlb	0	; () banked
  2768  0018D4  5197               	movf	printf@c& (0+255),w,b
  2769  0018D6  0100               	movlb	0	; () banked
  2770  0018D8  6F86               	movwf	printf@prec& (0+255),b
  2771  0018DA  6B87               	clrf	(printf@prec+1)& (0+255),b
  2772  0018DC  BF86               	btfsc	printf@prec& (0+255),7,b
  2773  0018DE  0787               	decf	(printf@prec+1)& (0+255),f,b
  2774                           
  2775                           ;doprnt.c: 1474: while(prec--) {
  2776  0018E0  D081               	goto	l3269
  2777  0018E2                     l3257:
  2778                           
  2779                           ; BSR set to: 0
  2780                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2781  0018E2  C086  F054         	movff	printf@prec,??_printf
  2782  0018E6  C087  F055         	movff	printf@prec+1,??_printf+1
  2783  0018EA  90D8               	bcf	status,0,c
  2784  0018EC  3654               	rlcf	??_printf,f,c
  2785  0018EE  3655               	rlcf	??_printf+1,f,c
  2786  0018F0  90D8               	bcf	status,0,c
  2787  0018F2  3654               	rlcf	??_printf,f,c
  2788  0018F4  3655               	rlcf	??_printf+1,f,c
  2789  0018F6  0E01               	movlw	low _dpowers
  2790  0018F8  2454               	addwf	??_printf,w,c
  2791  0018FA  6EF6               	movwf	tblptrl,c
  2792  0018FC  0E10               	movlw	high _dpowers
  2793  0018FE  2055               	addwfc	??_printf+1,w,c
  2794  001900  6EF7               	movwf	tblptrh,c
  2795  001902                     	if	0	;There are less than 3 active tblptr bytes
  2796  001902                     	endif
  2797  001902  0009               	tblrd		*+
  2798  001904  CFF5 F013          	movff	tablat,___lldiv@divisor
  2799  001908  0009               	tblrd		*+
  2800  00190A  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  2801  00190E  0009               	tblrd		*+
  2802  001910  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  2803  001914  000A               	tblrd		*-
  2804  001916  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  2805  00191A  C090  F00F         	movff	printf@val,___lldiv@dividend
  2806  00191E  C091  F010         	movff	printf@val+1,___lldiv@dividend+1
  2807  001922  C092  F011         	movff	printf@val+2,___lldiv@dividend+2
  2808  001926  C093  F012         	movff	printf@val+3,___lldiv@dividend+3
  2809  00192A  EC94  F015         	call	___lldiv	;wreg free
  2810  00192E  C00F  F01C         	movff	?___lldiv,___llmod@dividend
  2811  001932  C010  F01D         	movff	?___lldiv+1,___llmod@dividend+1
  2812  001936  C011  F01E         	movff	?___lldiv+2,___llmod@dividend+2
  2813  00193A  C012  F01F         	movff	?___lldiv+3,___llmod@dividend+3
  2814  00193E  0E0A               	movlw	10
  2815  001940  6E20               	movwf	___llmod@divisor,c
  2816  001942  0E00               	movlw	0
  2817  001944  6E21               	movwf	___llmod@divisor+1,c
  2818  001946  0E00               	movlw	0
  2819  001948  6E22               	movwf	___llmod@divisor+2,c
  2820  00194A  0E00               	movlw	0
  2821  00194C  6E23               	movwf	___llmod@divisor+3,c
  2822  00194E  EC86  F016         	call	___llmod	;wreg free
  2823  001952  501C               	movf	?___llmod,w,c
  2824  001954  0F30               	addlw	48
  2825  001956  0100               	movlb	0	; () banked
  2826  001958  6F97               	movwf	printf@c& (0+255),b
  2827                           
  2828                           ;doprnt.c: 1491: break;
  2829  00195A  D040               	goto	l3267
  2830  00195C                     l3259:
  2831                           
  2832                           ; BSR set to: 0
  2833                           ;doprnt.c: 1499: {
  2834                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2835  00195C  C090  F00F         	movff	printf@val,___lldiv@dividend
  2836  001960  C091  F010         	movff	printf@val+1,___lldiv@dividend+1
  2837  001964  C092  F011         	movff	printf@val+2,___lldiv@dividend+2
  2838  001968  C093  F012         	movff	printf@val+3,___lldiv@dividend+3
  2839  00196C  C086  F054         	movff	printf@prec,??_printf
  2840  001970  C087  F055         	movff	printf@prec+1,??_printf+1
  2841  001974  90D8               	bcf	status,0,c
  2842  001976  3654               	rlcf	??_printf,f,c
  2843  001978  3655               	rlcf	??_printf+1,f,c
  2844  00197A  90D8               	bcf	status,0,c
  2845  00197C  3654               	rlcf	??_printf,f,c
  2846  00197E  3655               	rlcf	??_printf+1,f,c
  2847  001980  0E77               	movlw	low _hexpowers
  2848  001982  2454               	addwf	??_printf,w,c
  2849  001984  6EF6               	movwf	tblptrl,c
  2850  001986  0E10               	movlw	high _hexpowers
  2851  001988  2055               	addwfc	??_printf+1,w,c
  2852  00198A  6EF7               	movwf	tblptrh,c
  2853  00198C                     	if	0	;There are less than 3 active tblptr bytes
  2854  00198C                     	endif
  2855  00198C  0009               	tblrd		*+
  2856  00198E  CFF5 F013          	movff	tablat,___lldiv@divisor
  2857  001992  0009               	tblrd		*+
  2858  001994  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  2859  001998  0009               	tblrd		*+
  2860  00199A  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  2861  00199E  000A               	tblrd		*-
  2862  0019A0  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  2863  0019A4  EC94  F015         	call	___lldiv	;wreg free
  2864  0019A8  500F               	movf	?___lldiv,w,c
  2865  0019AA  0B0F               	andlw	15
  2866  0019AC  0100               	movlb	0	; () banked
  2867  0019AE  6F83               	movwf	printf@idx& (0+255),b
  2868                           
  2869                           ; BSR set to: 0
  2870                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2871  0019B0  0100               	movlb	0	; () banked
  2872  0019B2  5183               	movf	printf@idx& (0+255),w,b
  2873  0019B4  0D01               	mullw	1
  2874  0019B6  0EB6               	movlw	low STR_6
  2875  0019B8  24F3               	addwf	prodl,w,c
  2876  0019BA  6EF6               	movwf	tblptrl,c
  2877  0019BC  0E10               	movlw	high STR_6
  2878  0019BE  20F4               	addwfc	prodh,w,c
  2879  0019C0  6EF7               	movwf	tblptrh,c
  2880  0019C2                     	if	0	;There are less than 3 active tblptr bytes
  2881  0019C2                     	endif
  2882  0019C2  0008               	tblrd		*
  2883  0019C4  CFF5 F097          	movff	tablat,printf@c
  2884                           
  2885                           ; BSR set to: 0
  2886                           ;doprnt.c: 1523: }
  2887                           
  2888                           ;doprnt.c: 1508: }
  2889                           ;doprnt.c: 1510: break;
  2890  0019C8  D009               	goto	l3267
  2891  0019CA                     l3265:
  2892                           
  2893                           ; BSR set to: 0
  2894  0019CA  0100               	movlb	0	; () banked
  2895  0019CC  5188               	movf	printf@flag& (0+255),w,b
  2896  0019CE  0B80               	andlw	128
  2897                           
  2898                           ; Switch size 1, requested type "space"
  2899                           ; Number of cases is 2, Range of values is 0 to 128
  2900                           ; switch strategies available:
  2901                           ; Name         Instructions Cycles
  2902                           ; simple_byte            7     4 (average)
  2903                           ;	Chosen strategy is simple_byte
  2904  0019D0  0A00               	xorlw	0	; case 0
  2905  0019D2  B4D8               	btfsc	status,2,c
  2906  0019D4  D786               	goto	l3257
  2907  0019D6  0A80               	xorlw	128	; case 128
  2908  0019D8  B4D8               	btfsc	status,2,c
  2909  0019DA  D7C0               	goto	l3259
  2910  0019DC                     l3267:
  2911                           
  2912                           ; BSR set to: 0
  2913                           ;doprnt.c: 1524: (putch(c) );
  2914  0019DC  0100               	movlb	0	; () banked
  2915  0019DE  5197               	movf	printf@c& (0+255),w,b
  2916  0019E0  EC13  F018         	call	_putch
  2917  0019E4                     l3269:
  2918  0019E4  0100               	movlb	0	; () banked
  2919  0019E6  0786               	decf	printf@prec& (0+255),f,b
  2920  0019E8  A0D8               	btfss	status,0,c
  2921  0019EA  0787               	decf	(printf@prec+1)& (0+255),f,b
  2922  0019EC  0100               	movlb	0	; () banked
  2923  0019EE  2986               	incf	printf@prec& (0+255),w,b
  2924  0019F0  E1EC               	bnz	l3265
  2925  0019F2  0100               	movlb	0	; () banked
  2926  0019F4  2987               	incf	(printf@prec+1)& (0+255),w,b
  2927  0019F6  A4D8               	btfss	status,2,c
  2928  0019F8  D7E8               	goto	l3265
  2929  0019FA                     l3271:
  2930  0019FA  C04E  FFF6         	movff	printf@f,tblptrl
  2931  0019FE  C04F  FFF7         	movff	printf@f+1,tblptrh
  2932  001A02  4A4E               	infsnz	printf@f,f,c
  2933  001A04  2A4F               	incf	printf@f+1,f,c
  2934  001A06                     	if	0	;tblptru may be non-zero
  2935  001A06                     	endif
  2936  001A06                     	if	0	;tblptru may be non-zero
  2937  001A06                     	endif
  2938  001A06  0008               	tblrd		*
  2939  001A08  CFF5 F097          	movff	tablat,printf@c
  2940  001A0C  0100               	movlb	0	; () banked
  2941  001A0E  5197               	movf	printf@c& (0+255),w,b
  2942  001A10  B4D8               	btfsc	status,2,c
  2943  001A12  0012               	return	
  2944  001A14  EF84  F008         	goto	l3047
  2945  001A18                     __end_of_printf:
  2946                           	opt stack 0
  2947                           tblptru	equ	0xFF8
  2948                           tblptrh	equ	0xFF7
  2949                           tblptrl	equ	0xFF6
  2950                           tablat	equ	0xFF5
  2951                           prodh	equ	0xFF4
  2952                           prodl	equ	0xFF3
  2953                           intcon	equ	0xFF2
  2954                           postinc0	equ	0xFEE
  2955                           wreg	equ	0xFE8
  2956                           postdec1	equ	0xFE5
  2957                           fsr1l	equ	0xFE1
  2958                           indf2	equ	0xFDF
  2959                           postinc2	equ	0xFDE
  2960                           postdec2	equ	0xFDD
  2961                           fsr2h	equ	0xFDA
  2962                           fsr2l	equ	0xFD9
  2963                           status	equ	0xFD8
  2964                           
  2965 ;; *************** function _scale *****************
  2966 ;; Defined at:
  2967 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  2968 ;; Parameters:    Size  Location     Type
  2969 ;;  scl             1    wreg     char 
  2970 ;; Auto vars:     Size  Location     Type
  2971 ;;  scl             1   55[COMRAM] char 
  2972 ;; Return value:  Size  Location     Type
  2973 ;;                  3   49[COMRAM] char 
  2974 ;; Registers used:
  2975 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2976 ;; Tracked objects:
  2977 ;;		On entry : 0/0
  2978 ;;		On exit  : 0/0
  2979 ;;		Unchanged: 0/0
  2980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2981 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2982 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2984 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2985 ;;Total ram usage:        7 bytes
  2986 ;; Hardware stack levels used:    1
  2987 ;; Hardware stack levels required when called:    3
  2988 ;; This function calls:
  2989 ;;		___awdiv
  2990 ;;		___awmod
  2991 ;;		___ftmul
  2992 ;;		___wmul
  2993 ;; This function is called by:
  2994 ;;		_printf
  2995 ;; This function uses a non-reentrant model
  2996 ;;
  2997                           
  2998                           	psect	text3
  2999  001A18                     __ptext3:
  3000                           	opt stack 0
  3001  001A18                     _scale:
  3002                           	opt stack 25
  3003                           
  3004                           ; BSR set to: 0
  3005                           ;incstack = 0
  3006                           ;scale@scl stored from wreg
  3007  001A18  6E38               	movwf	scale@scl,c
  3008                           
  3009                           ;doprnt.c: 428: if(scl < 0) {
  3010  001A1A  AE38               	btfss	scale@scl,7,c
  3011  001A1C  D0FB               	goto	l2787
  3012                           
  3013                           ;doprnt.c: 429: scl = -scl;
  3014  001A1E  6C38               	negf	scale@scl,c
  3015                           
  3016                           ;doprnt.c: 430: if(scl>=110)
  3017  001A20  5038               	movf	scale@scl,w,c
  3018  001A22  0A80               	xorlw	128
  3019  001A24  0F12               	addlw	-238
  3020  001A26  A0D8               	btfss	status,0,c
  3021  001A28  D091               	goto	l2777
  3022                           
  3023                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3024  001A2A  0E00               	movlw	0
  3025  001A2C  6E20               	movwf	___wmul@multiplicand+1,c
  3026  001A2E  0E03               	movlw	3
  3027  001A30  6E1F               	movwf	___wmul@multiplicand,c
  3028  001A32  0E00               	movlw	0
  3029  001A34  6E18               	movwf	___awdiv@divisor+1,c
  3030  001A36  0E0A               	movlw	10
  3031  001A38  6E17               	movwf	___awdiv@divisor,c
  3032  001A3A  0E00               	movlw	0
  3033  001A3C  6E12               	movwf	___awmod@divisor+1,c
  3034  001A3E  0E64               	movlw	100
  3035  001A40  6E11               	movwf	___awmod@divisor,c
  3036  001A42  5038               	movf	scale@scl,w,c
  3037  001A44  6E0F               	movwf	___awmod@dividend,c
  3038  001A46  6A10               	clrf	___awmod@dividend+1,c
  3039  001A48  BE0F               	btfsc	___awmod@dividend,7,c
  3040  001A4A  0610               	decf	___awmod@dividend+1,f,c
  3041  001A4C  EC4E  F016         	call	___awmod	;wreg free
  3042  001A50  C00F  F015         	movff	?___awmod,___awdiv@dividend
  3043  001A54  C010  F016         	movff	?___awmod+1,___awdiv@dividend+1
  3044  001A58  EC52  F015         	call	___awdiv	;wreg free
  3045  001A5C  0E09               	movlw	9
  3046  001A5E  2415               	addwf	?___awdiv,w,c
  3047  001A60  6E1D               	movwf	___wmul@multiplier,c
  3048  001A62  0E00               	movlw	0
  3049  001A64  2016               	addwfc	?___awdiv+1,w,c
  3050  001A66  6E1E               	movwf	___wmul@multiplier+1,c
  3051  001A68  ECDB  F017         	call	___wmul	;wreg free
  3052  001A6C  0E29               	movlw	low __npowers_
  3053  001A6E  241D               	addwf	?___wmul,w,c
  3054  001A70  6EF6               	movwf	tblptrl,c
  3055  001A72  0E10               	movlw	high __npowers_
  3056  001A74  201E               	addwfc	?___wmul+1,w,c
  3057  001A76  6EF7               	movwf	tblptrh,c
  3058  001A78                     	if	0	;There are less than 3 active tblptr bytes
  3059  001A78                     	endif
  3060  001A78  0009               	tblrd		*+
  3061  001A7A  CFF5 F026          	movff	tablat,___ftmul@f2
  3062  001A7E  0009               	tblrd		*+
  3063  001A80  CFF5 F027          	movff	tablat,___ftmul@f2+1
  3064  001A84  000A               	tblrd		*-
  3065  001A86  CFF5 F028          	movff	tablat,___ftmul@f2+2
  3066  001A8A  0E00               	movlw	0
  3067  001A8C  6E18               	movwf	___awdiv@divisor+1,c
  3068  001A8E  0E64               	movlw	100
  3069  001A90  6E17               	movwf	___awdiv@divisor,c
  3070  001A92  5038               	movf	scale@scl,w,c
  3071  001A94  6E15               	movwf	___awdiv@dividend,c
  3072  001A96  6A16               	clrf	___awdiv@dividend+1,c
  3073  001A98  BE15               	btfsc	___awdiv@dividend,7,c
  3074  001A9A  0616               	decf	___awdiv@dividend+1,f,c
  3075  001A9C  EC52  F015         	call	___awdiv	;wreg free
  3076  001AA0  0E12               	movlw	18
  3077  001AA2  2415               	addwf	?___awdiv,w,c
  3078  001AA4  6E1D               	movwf	___wmul@multiplier,c
  3079  001AA6  0E00               	movlw	0
  3080  001AA8  2016               	addwfc	?___awdiv+1,w,c
  3081  001AAA  6E1E               	movwf	___wmul@multiplier+1,c
  3082  001AAC  0E00               	movlw	0
  3083  001AAE  6E20               	movwf	___wmul@multiplicand+1,c
  3084  001AB0  0E03               	movlw	3
  3085  001AB2  6E1F               	movwf	___wmul@multiplicand,c
  3086  001AB4  ECDB  F017         	call	___wmul	;wreg free
  3087  001AB8  0E29               	movlw	low __npowers_
  3088  001ABA  241D               	addwf	?___wmul,w,c
  3089  001ABC  6EF6               	movwf	tblptrl,c
  3090  001ABE  0E10               	movlw	high __npowers_
  3091  001AC0  201E               	addwfc	?___wmul+1,w,c
  3092  001AC2  6EF7               	movwf	tblptrh,c
  3093  001AC4                     	if	0	;There are less than 3 active tblptr bytes
  3094  001AC4                     	endif
  3095  001AC4  0009               	tblrd		*+
  3096  001AC6  CFF5 F023          	movff	tablat,___ftmul@f1
  3097  001ACA  0009               	tblrd		*+
  3098  001ACC  CFF5 F024          	movff	tablat,___ftmul@f1+1
  3099  001AD0  000A               	tblrd		*-
  3100  001AD2  CFF5 F025          	movff	tablat,___ftmul@f1+2
  3101  001AD6  EC4C  F013         	call	___ftmul	;wreg free
  3102  001ADA  C023  F035         	movff	?___ftmul,_scale$1118
  3103  001ADE  C024  F036         	movff	?___ftmul+1,_scale$1118+1
  3104  001AE2  C025  F037         	movff	?___ftmul+2,_scale$1118+2
  3105                           
  3106                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3107  001AE6  C035  F023         	movff	_scale$1118,___ftmul@f1
  3108  001AEA  C036  F024         	movff	_scale$1118+1,___ftmul@f1+1
  3109  001AEE  C037  F025         	movff	_scale$1118+2,___ftmul@f1+2
  3110  001AF2  0E00               	movlw	0
  3111  001AF4  6E20               	movwf	___wmul@multiplicand+1,c
  3112  001AF6  0E03               	movlw	3
  3113  001AF8  6E1F               	movwf	___wmul@multiplicand,c
  3114  001AFA  0E00               	movlw	0
  3115  001AFC  6E12               	movwf	___awmod@divisor+1,c
  3116  001AFE  0E0A               	movlw	10
  3117  001B00  6E11               	movwf	___awmod@divisor,c
  3118  001B02  5038               	movf	scale@scl,w,c
  3119  001B04  6E0F               	movwf	___awmod@dividend,c
  3120  001B06  6A10               	clrf	___awmod@dividend+1,c
  3121  001B08  BE0F               	btfsc	___awmod@dividend,7,c
  3122  001B0A  0610               	decf	___awmod@dividend+1,f,c
  3123  001B0C  EC4E  F016         	call	___awmod	;wreg free
  3124  001B10  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  3125  001B14  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  3126  001B18  ECDB  F017         	call	___wmul	;wreg free
  3127  001B1C  0E29               	movlw	low __npowers_
  3128  001B1E  241D               	addwf	?___wmul,w,c
  3129  001B20  6EF6               	movwf	tblptrl,c
  3130  001B22  0E10               	movlw	high __npowers_
  3131  001B24  201E               	addwfc	?___wmul+1,w,c
  3132  001B26  6EF7               	movwf	tblptrh,c
  3133  001B28                     	if	0	;There are less than 3 active tblptr bytes
  3134  001B28                     	endif
  3135  001B28  0009               	tblrd		*+
  3136  001B2A  CFF5 F026          	movff	tablat,___ftmul@f2
  3137  001B2E  0009               	tblrd		*+
  3138  001B30  CFF5 F027          	movff	tablat,___ftmul@f2+1
  3139  001B34  000A               	tblrd		*-
  3140  001B36  CFF5 F028          	movff	tablat,___ftmul@f2+2
  3141  001B3A  EC4C  F013         	call	___ftmul	;wreg free
  3142  001B3E  C023  F032         	movff	?___ftmul,?_scale
  3143  001B42  C024  F033         	movff	?___ftmul+1,?_scale+1
  3144  001B46  C025  F034         	movff	?___ftmul+2,?_scale+2
  3145  001B4A  0012               	return	
  3146  001B4C                     l2777:
  3147                           
  3148                           ;doprnt.c: 432: else if(scl > 10)
  3149  001B4C  5038               	movf	scale@scl,w,c
  3150  001B4E  0A80               	xorlw	128
  3151  001B50  0F75               	addlw	-139
  3152  001B52  A0D8               	btfss	status,0,c
  3153  001B54  D04D               	goto	l2783
  3154                           
  3155                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3156  001B56  0E00               	movlw	0
  3157  001B58  6E18               	movwf	___awdiv@divisor+1,c
  3158  001B5A  0E0A               	movlw	10
  3159  001B5C  6E17               	movwf	___awdiv@divisor,c
  3160  001B5E  5038               	movf	scale@scl,w,c
  3161  001B60  6E15               	movwf	___awdiv@dividend,c
  3162  001B62  6A16               	clrf	___awdiv@dividend+1,c
  3163  001B64  BE15               	btfsc	___awdiv@dividend,7,c
  3164  001B66  0616               	decf	___awdiv@dividend+1,f,c
  3165  001B68  EC52  F015         	call	___awdiv	;wreg free
  3166  001B6C  0E09               	movlw	9
  3167  001B6E  2415               	addwf	?___awdiv,w,c
  3168  001B70  6E1D               	movwf	___wmul@multiplier,c
  3169  001B72  0E00               	movlw	0
  3170  001B74  2016               	addwfc	?___awdiv+1,w,c
  3171  001B76  6E1E               	movwf	___wmul@multiplier+1,c
  3172  001B78  0E00               	movlw	0
  3173  001B7A  6E20               	movwf	___wmul@multiplicand+1,c
  3174  001B7C  0E03               	movlw	3
  3175  001B7E  6E1F               	movwf	___wmul@multiplicand,c
  3176  001B80  ECDB  F017         	call	___wmul	;wreg free
  3177  001B84  0E29               	movlw	low __npowers_
  3178  001B86  241D               	addwf	?___wmul,w,c
  3179  001B88  6EF6               	movwf	tblptrl,c
  3180  001B8A  0E10               	movlw	high __npowers_
  3181  001B8C  201E               	addwfc	?___wmul+1,w,c
  3182  001B8E  6EF7               	movwf	tblptrh,c
  3183  001B90                     	if	0	;There are less than 3 active tblptr bytes
  3184  001B90                     	endif
  3185  001B90  0009               	tblrd		*+
  3186  001B92  CFF5 F023          	movff	tablat,___ftmul@f1
  3187  001B96  0009               	tblrd		*+
  3188  001B98  CFF5 F024          	movff	tablat,___ftmul@f1+1
  3189  001B9C  000A               	tblrd		*-
  3190  001B9E  CFF5 F025          	movff	tablat,___ftmul@f1+2
  3191  001BA2  0E00               	movlw	0
  3192  001BA4  6E20               	movwf	___wmul@multiplicand+1,c
  3193  001BA6  0E03               	movlw	3
  3194  001BA8  6E1F               	movwf	___wmul@multiplicand,c
  3195  001BAA  0E00               	movlw	0
  3196  001BAC  6E12               	movwf	___awmod@divisor+1,c
  3197  001BAE  0E0A               	movlw	10
  3198  001BB0  6E11               	movwf	___awmod@divisor,c
  3199  001BB2  5038               	movf	scale@scl,w,c
  3200  001BB4  6E0F               	movwf	___awmod@dividend,c
  3201  001BB6  6A10               	clrf	___awmod@dividend+1,c
  3202  001BB8  BE0F               	btfsc	___awmod@dividend,7,c
  3203  001BBA  0610               	decf	___awmod@dividend+1,f,c
  3204  001BBC  EC4E  F016         	call	___awmod	;wreg free
  3205  001BC0  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  3206  001BC4  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  3207  001BC8  ECDB  F017         	call	___wmul	;wreg free
  3208  001BCC  0E29               	movlw	low __npowers_
  3209  001BCE  241D               	addwf	?___wmul,w,c
  3210  001BD0  6EF6               	movwf	tblptrl,c
  3211  001BD2  0E10               	movlw	high __npowers_
  3212  001BD4  201E               	addwfc	?___wmul+1,w,c
  3213  001BD6  6EF7               	movwf	tblptrh,c
  3214  001BD8                     	if	0	;There are less than 3 active tblptr bytes
  3215  001BD8                     	endif
  3216  001BD8  0009               	tblrd		*+
  3217  001BDA  CFF5 F026          	movff	tablat,___ftmul@f2
  3218  001BDE  0009               	tblrd		*+
  3219  001BE0  CFF5 F027          	movff	tablat,___ftmul@f2+1
  3220  001BE4  000A               	tblrd		*-
  3221  001BE6  CFF5 F028          	movff	tablat,___ftmul@f2+2
  3222  001BEA  EC4C  F013         	call	___ftmul	;wreg free
  3223  001BEE  D7A7               	goto	L4
  3224  001BF0                     l2783:
  3225                           
  3226                           ;doprnt.c: 434: return _npowers_[scl];
  3227  001BF0  5038               	movf	scale@scl,w,c
  3228  001BF2  0D03               	mullw	3
  3229  001BF4  0E29               	movlw	low __npowers_
  3230  001BF6  24F3               	addwf	prodl,w,c
  3231  001BF8  6EF6               	movwf	tblptrl,c
  3232  001BFA  0E10               	movlw	high __npowers_
  3233  001BFC  20F4               	addwfc	prodh,w,c
  3234  001BFE  6EF7               	movwf	tblptrh,c
  3235  001C00                     	if	0	;There are less than 3 active tblptr bytes
  3236  001C00                     	endif
  3237  001C00  0009               	tblrd		*+
  3238  001C02  CFF5 F032          	movff	tablat,?_scale
  3239  001C06  0009               	tblrd		*+
  3240  001C08  CFF5 F033          	movff	tablat,?_scale+1
  3241  001C0C  000A               	tblrd		*-
  3242  001C0E  CFF5 F034          	movff	tablat,?_scale+2
  3243  001C12  0012               	return	
  3244  001C14                     l2787:
  3245                           
  3246                           ;doprnt.c: 435: }
  3247                           ;doprnt.c: 436: if(scl>=110)
  3248  001C14  5038               	movf	scale@scl,w,c
  3249  001C16  0A80               	xorlw	128
  3250  001C18  0F12               	addlw	-238
  3251  001C1A  A0D8               	btfss	status,0,c
  3252  001C1C  D091               	goto	l2795
  3253                           
  3254                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3255  001C1E  0E00               	movlw	0
  3256  001C20  6E20               	movwf	___wmul@multiplicand+1,c
  3257  001C22  0E03               	movlw	3
  3258  001C24  6E1F               	movwf	___wmul@multiplicand,c
  3259  001C26  0E00               	movlw	0
  3260  001C28  6E18               	movwf	___awdiv@divisor+1,c
  3261  001C2A  0E0A               	movlw	10
  3262  001C2C  6E17               	movwf	___awdiv@divisor,c
  3263  001C2E  0E00               	movlw	0
  3264  001C30  6E12               	movwf	___awmod@divisor+1,c
  3265  001C32  0E64               	movlw	100
  3266  001C34  6E11               	movwf	___awmod@divisor,c
  3267  001C36  5038               	movf	scale@scl,w,c
  3268  001C38  6E0F               	movwf	___awmod@dividend,c
  3269  001C3A  6A10               	clrf	___awmod@dividend+1,c
  3270  001C3C  BE0F               	btfsc	___awmod@dividend,7,c
  3271  001C3E  0610               	decf	___awmod@dividend+1,f,c
  3272  001C40  EC4E  F016         	call	___awmod	;wreg free
  3273  001C44  C00F  F015         	movff	?___awmod,___awdiv@dividend
  3274  001C48  C010  F016         	movff	?___awmod+1,___awdiv@dividend+1
  3275  001C4C  EC52  F015         	call	___awdiv	;wreg free
  3276  001C50  0E09               	movlw	9
  3277  001C52  2415               	addwf	?___awdiv,w,c
  3278  001C54  6E1D               	movwf	___wmul@multiplier,c
  3279  001C56  0E00               	movlw	0
  3280  001C58  2016               	addwfc	?___awdiv+1,w,c
  3281  001C5A  6E1E               	movwf	___wmul@multiplier+1,c
  3282  001C5C  ECDB  F017         	call	___wmul	;wreg free
  3283  001C60  0E50               	movlw	low __powers_
  3284  001C62  241D               	addwf	?___wmul,w,c
  3285  001C64  6EF6               	movwf	tblptrl,c
  3286  001C66  0E10               	movlw	high __powers_
  3287  001C68  201E               	addwfc	?___wmul+1,w,c
  3288  001C6A  6EF7               	movwf	tblptrh,c
  3289  001C6C                     	if	0	;There are less than 3 active tblptr bytes
  3290  001C6C                     	endif
  3291  001C6C  0009               	tblrd		*+
  3292  001C6E  CFF5 F026          	movff	tablat,___ftmul@f2
  3293  001C72  0009               	tblrd		*+
  3294  001C74  CFF5 F027          	movff	tablat,___ftmul@f2+1
  3295  001C78  000A               	tblrd		*-
  3296  001C7A  CFF5 F028          	movff	tablat,___ftmul@f2+2
  3297  001C7E  0E00               	movlw	0
  3298  001C80  6E18               	movwf	___awdiv@divisor+1,c
  3299  001C82  0E64               	movlw	100
  3300  001C84  6E17               	movwf	___awdiv@divisor,c
  3301  001C86  5038               	movf	scale@scl,w,c
  3302  001C88  6E15               	movwf	___awdiv@dividend,c
  3303  001C8A  6A16               	clrf	___awdiv@dividend+1,c
  3304  001C8C  BE15               	btfsc	___awdiv@dividend,7,c
  3305  001C8E  0616               	decf	___awdiv@dividend+1,f,c
  3306  001C90  EC52  F015         	call	___awdiv	;wreg free
  3307  001C94  0E12               	movlw	18
  3308  001C96  2415               	addwf	?___awdiv,w,c
  3309  001C98  6E1D               	movwf	___wmul@multiplier,c
  3310  001C9A  0E00               	movlw	0
  3311  001C9C  2016               	addwfc	?___awdiv+1,w,c
  3312  001C9E  6E1E               	movwf	___wmul@multiplier+1,c
  3313  001CA0  0E00               	movlw	0
  3314  001CA2  6E20               	movwf	___wmul@multiplicand+1,c
  3315  001CA4  0E03               	movlw	3
  3316  001CA6  6E1F               	movwf	___wmul@multiplicand,c
  3317  001CA8  ECDB  F017         	call	___wmul	;wreg free
  3318  001CAC  0E50               	movlw	low __powers_
  3319  001CAE  241D               	addwf	?___wmul,w,c
  3320  001CB0  6EF6               	movwf	tblptrl,c
  3321  001CB2  0E10               	movlw	high __powers_
  3322  001CB4  201E               	addwfc	?___wmul+1,w,c
  3323  001CB6  6EF7               	movwf	tblptrh,c
  3324  001CB8                     	if	0	;There are less than 3 active tblptr bytes
  3325  001CB8                     	endif
  3326  001CB8  0009               	tblrd		*+
  3327  001CBA  CFF5 F023          	movff	tablat,___ftmul@f1
  3328  001CBE  0009               	tblrd		*+
  3329  001CC0  CFF5 F024          	movff	tablat,___ftmul@f1+1
  3330  001CC4  000A               	tblrd		*-
  3331  001CC6  CFF5 F025          	movff	tablat,___ftmul@f1+2
  3332  001CCA  EC4C  F013         	call	___ftmul	;wreg free
  3333  001CCE  C023  F035         	movff	?___ftmul,_scale$1118
  3334  001CD2  C024  F036         	movff	?___ftmul+1,_scale$1118+1
  3335  001CD6  C025  F037         	movff	?___ftmul+2,_scale$1118+2
  3336                           
  3337                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3338  001CDA  C035  F023         	movff	_scale$1118,___ftmul@f1
  3339  001CDE  C036  F024         	movff	_scale$1118+1,___ftmul@f1+1
  3340  001CE2  C037  F025         	movff	_scale$1118+2,___ftmul@f1+2
  3341  001CE6  0E00               	movlw	0
  3342  001CE8  6E20               	movwf	___wmul@multiplicand+1,c
  3343  001CEA  0E03               	movlw	3
  3344  001CEC  6E1F               	movwf	___wmul@multiplicand,c
  3345  001CEE  0E00               	movlw	0
  3346  001CF0  6E12               	movwf	___awmod@divisor+1,c
  3347  001CF2  0E0A               	movlw	10
  3348  001CF4  6E11               	movwf	___awmod@divisor,c
  3349  001CF6  5038               	movf	scale@scl,w,c
  3350  001CF8  6E0F               	movwf	___awmod@dividend,c
  3351  001CFA  6A10               	clrf	___awmod@dividend+1,c
  3352  001CFC  BE0F               	btfsc	___awmod@dividend,7,c
  3353  001CFE  0610               	decf	___awmod@dividend+1,f,c
  3354  001D00  EC4E  F016         	call	___awmod	;wreg free
  3355  001D04  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  3356  001D08  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  3357  001D0C  ECDB  F017         	call	___wmul	;wreg free
  3358  001D10  0E50               	movlw	low __powers_
  3359  001D12  241D               	addwf	?___wmul,w,c
  3360  001D14  6EF6               	movwf	tblptrl,c
  3361  001D16  0E10               	movlw	high __powers_
  3362  001D18  201E               	addwfc	?___wmul+1,w,c
  3363  001D1A  6EF7               	movwf	tblptrh,c
  3364  001D1C                     	if	0	;There are less than 3 active tblptr bytes
  3365  001D1C                     	endif
  3366  001D1C  0009               	tblrd		*+
  3367  001D1E  CFF5 F026          	movff	tablat,___ftmul@f2
  3368  001D22  0009               	tblrd		*+
  3369  001D24  CFF5 F027          	movff	tablat,___ftmul@f2+1
  3370  001D28  000A               	tblrd		*-
  3371  001D2A  CFF5 F028          	movff	tablat,___ftmul@f2+2
  3372  001D2E  EC4C  F013         	call	___ftmul	;wreg free
  3373  001D32  C023  F032         	movff	?___ftmul,?_scale
  3374  001D36  C024  F033         	movff	?___ftmul+1,?_scale+1
  3375  001D3A  C025  F034         	movff	?___ftmul+2,?_scale+2
  3376  001D3E  0012               	return	
  3377  001D40                     l2795:
  3378                           
  3379                           ;doprnt.c: 438: else if(scl > 10)
  3380  001D40  5038               	movf	scale@scl,w,c
  3381  001D42  0A80               	xorlw	128
  3382  001D44  0F75               	addlw	-139
  3383  001D46  A0D8               	btfss	status,0,c
  3384  001D48  D04D               	goto	l2801
  3385                           
  3386                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3387  001D4A  0E00               	movlw	0
  3388  001D4C  6E18               	movwf	___awdiv@divisor+1,c
  3389  001D4E  0E0A               	movlw	10
  3390  001D50  6E17               	movwf	___awdiv@divisor,c
  3391  001D52  5038               	movf	scale@scl,w,c
  3392  001D54  6E15               	movwf	___awdiv@dividend,c
  3393  001D56  6A16               	clrf	___awdiv@dividend+1,c
  3394  001D58  BE15               	btfsc	___awdiv@dividend,7,c
  3395  001D5A  0616               	decf	___awdiv@dividend+1,f,c
  3396  001D5C  EC52  F015         	call	___awdiv	;wreg free
  3397  001D60  0E09               	movlw	9
  3398  001D62  2415               	addwf	?___awdiv,w,c
  3399  001D64  6E1D               	movwf	___wmul@multiplier,c
  3400  001D66  0E00               	movlw	0
  3401  001D68  2016               	addwfc	?___awdiv+1,w,c
  3402  001D6A  6E1E               	movwf	___wmul@multiplier+1,c
  3403  001D6C  0E00               	movlw	0
  3404  001D6E  6E20               	movwf	___wmul@multiplicand+1,c
  3405  001D70  0E03               	movlw	3
  3406  001D72  6E1F               	movwf	___wmul@multiplicand,c
  3407  001D74  ECDB  F017         	call	___wmul	;wreg free
  3408  001D78  0E50               	movlw	low __powers_
  3409  001D7A  241D               	addwf	?___wmul,w,c
  3410  001D7C  6EF6               	movwf	tblptrl,c
  3411  001D7E  0E10               	movlw	high __powers_
  3412  001D80  201E               	addwfc	?___wmul+1,w,c
  3413  001D82  6EF7               	movwf	tblptrh,c
  3414  001D84                     	if	0	;There are less than 3 active tblptr bytes
  3415  001D84                     	endif
  3416  001D84  0009               	tblrd		*+
  3417  001D86  CFF5 F023          	movff	tablat,___ftmul@f1
  3418  001D8A  0009               	tblrd		*+
  3419  001D8C  CFF5 F024          	movff	tablat,___ftmul@f1+1
  3420  001D90  000A               	tblrd		*-
  3421  001D92  CFF5 F025          	movff	tablat,___ftmul@f1+2
  3422  001D96  0E00               	movlw	0
  3423  001D98  6E20               	movwf	___wmul@multiplicand+1,c
  3424  001D9A  0E03               	movlw	3
  3425  001D9C  6E1F               	movwf	___wmul@multiplicand,c
  3426  001D9E  0E00               	movlw	0
  3427  001DA0  6E12               	movwf	___awmod@divisor+1,c
  3428  001DA2  0E0A               	movlw	10
  3429  001DA4  6E11               	movwf	___awmod@divisor,c
  3430  001DA6  5038               	movf	scale@scl,w,c
  3431  001DA8  6E0F               	movwf	___awmod@dividend,c
  3432  001DAA  6A10               	clrf	___awmod@dividend+1,c
  3433  001DAC  BE0F               	btfsc	___awmod@dividend,7,c
  3434  001DAE  0610               	decf	___awmod@dividend+1,f,c
  3435  001DB0  EC4E  F016         	call	___awmod	;wreg free
  3436  001DB4  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  3437  001DB8  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  3438  001DBC  ECDB  F017         	call	___wmul	;wreg free
  3439  001DC0  0E50               	movlw	low __powers_
  3440  001DC2  241D               	addwf	?___wmul,w,c
  3441  001DC4  6EF6               	movwf	tblptrl,c
  3442  001DC6  0E10               	movlw	high __powers_
  3443  001DC8  201E               	addwfc	?___wmul+1,w,c
  3444  001DCA  6EF7               	movwf	tblptrh,c
  3445  001DCC                     	if	0	;There are less than 3 active tblptr bytes
  3446  001DCC                     	endif
  3447  001DCC  0009               	tblrd		*+
  3448  001DCE  CFF5 F026          	movff	tablat,___ftmul@f2
  3449  001DD2  0009               	tblrd		*+
  3450  001DD4  CFF5 F027          	movff	tablat,___ftmul@f2+1
  3451  001DD8  000A               	tblrd		*-
  3452  001DDA  CFF5 F028          	movff	tablat,___ftmul@f2+2
  3453  001DDE  EC4C  F013         	call	___ftmul	;wreg free
  3454  001DE2  D7A7               	goto	L5
  3455  001DE4                     l2801:
  3456                           
  3457                           ;doprnt.c: 440: return _powers_[scl];
  3458  001DE4  5038               	movf	scale@scl,w,c
  3459  001DE6  0D03               	mullw	3
  3460  001DE8  0E50               	movlw	low __powers_
  3461  001DEA  24F3               	addwf	prodl,w,c
  3462  001DEC  6EF6               	movwf	tblptrl,c
  3463  001DEE  0E10               	movlw	high __powers_
  3464  001DF0  20F4               	addwfc	prodh,w,c
  3465  001DF2  6EF7               	movwf	tblptrh,c
  3466  001DF4                     	if	0	;There are less than 3 active tblptr bytes
  3467  001DF4                     	endif
  3468  001DF4  0009               	tblrd		*+
  3469  001DF6  CFF5 F032          	movff	tablat,?_scale
  3470  001DFA  0009               	tblrd		*+
  3471  001DFC  CFF5 F033          	movff	tablat,?_scale+1
  3472  001E00  000A               	tblrd		*-
  3473  001E02  CFF5 F034          	movff	tablat,?_scale+2
  3474  001E06  0012               	return	
  3475  001E08                     __end_of_scale:
  3476                           	opt stack 0
  3477                           tblptru	equ	0xFF8
  3478                           tblptrh	equ	0xFF7
  3479                           tblptrl	equ	0xFF6
  3480                           tablat	equ	0xFF5
  3481                           prodh	equ	0xFF4
  3482                           prodl	equ	0xFF3
  3483                           intcon	equ	0xFF2
  3484                           postinc0	equ	0xFEE
  3485                           wreg	equ	0xFE8
  3486                           postdec1	equ	0xFE5
  3487                           fsr1l	equ	0xFE1
  3488                           indf2	equ	0xFDF
  3489                           postinc2	equ	0xFDE
  3490                           postdec2	equ	0xFDD
  3491                           fsr2h	equ	0xFDA
  3492                           fsr2l	equ	0xFD9
  3493                           status	equ	0xFD8
  3494                           
  3495 ;; *************** function _putch *****************
  3496 ;; Defined at:
  3497 ;;		line 35 in file "lcd.c"
  3498 ;; Parameters:    Size  Location     Type
  3499 ;;  data            1    wreg     unsigned char 
  3500 ;; Auto vars:     Size  Location     Type
  3501 ;;  data            1   18[COMRAM] unsigned char 
  3502 ;; Return value:  Size  Location     Type
  3503 ;;                  1    wreg      void 
  3504 ;; Registers used:
  3505 ;;		wreg, status,2, status,0, cstack
  3506 ;; Tracked objects:
  3507 ;;		On entry : 0/0
  3508 ;;		On exit  : 0/0
  3509 ;;		Unchanged: 0/0
  3510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3512 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3514 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3515 ;;Total ram usage:        1 bytes
  3516 ;; Hardware stack levels used:    1
  3517 ;; Hardware stack levels required when called:    4
  3518 ;; This function calls:
  3519 ;;		_lcdNewline
  3520 ;;		_lcdNibble
  3521 ;; This function is called by:
  3522 ;;		_printf
  3523 ;; This function uses a non-reentrant model
  3524 ;;
  3525                           
  3526                           	psect	text4
  3527  003026                     __ptext4:
  3528                           	opt stack 0
  3529  003026                     _putch:
  3530                           	opt stack 24
  3531                           
  3532                           ;incstack = 0
  3533                           ;putch@data stored from wreg
  3534  003026  6E13               	movwf	putch@data,c
  3535                           
  3536                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  3537  003028  0E0A               	movlw	10
  3538  00302A  1813               	xorwf	putch@data,w,c
  3539  00302C  A4D8               	btfss	status,2,c
  3540  00302E  D003               	goto	l76
  3541  003030  EC50  F018         	call	_lcdNewline	;wreg free
  3542  003034  0012               	return	
  3543  003036                     l76:
  3544                           
  3545                           ;lcd.c: 37: else
  3546                           ;lcd.c: 38: {
  3547                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  3548  003036  848C               	bsf	3980,2,c	;volatile
  3549                           
  3550                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  3551  003038  0E74               	movlw	116
  3552  00303A                     u3307:
  3553  00303A  2EE8               	decfsz	wreg,f,c
  3554  00303C  D7FE               	bra	u3307
  3555  00303E  D000               	nop2	
  3556                           
  3557                           ;lcd.c: 41: lcdNibble(data);
  3558  003040  5013               	movf	putch@data,w,c
  3559  003042  ECB9  F016         	call	_lcdNibble
  3560  003046  0012               	return	
  3561  003048                     __end_of_putch:
  3562                           	opt stack 0
  3563                           tblptru	equ	0xFF8
  3564                           tblptrh	equ	0xFF7
  3565                           tblptrl	equ	0xFF6
  3566                           tablat	equ	0xFF5
  3567                           prodh	equ	0xFF4
  3568                           prodl	equ	0xFF3
  3569                           intcon	equ	0xFF2
  3570                           postinc0	equ	0xFEE
  3571                           wreg	equ	0xFE8
  3572                           postdec1	equ	0xFE5
  3573                           fsr1l	equ	0xFE1
  3574                           indf2	equ	0xFDF
  3575                           postinc2	equ	0xFDE
  3576                           postdec2	equ	0xFDD
  3577                           fsr2h	equ	0xFDA
  3578                           fsr2l	equ	0xFD9
  3579                           status	equ	0xFD8
  3580                           
  3581 ;; *************** function _lcdNewline *****************
  3582 ;; Defined at:
  3583 ;;		line 78 in file "lcd.c"
  3584 ;; Parameters:    Size  Location     Type
  3585 ;;		None
  3586 ;; Auto vars:     Size  Location     Type
  3587 ;;		None
  3588 ;; Return value:  Size  Location     Type
  3589 ;;                  1    wreg      void 
  3590 ;; Registers used:
  3591 ;;		wreg, status,2, status,0, cstack
  3592 ;; Tracked objects:
  3593 ;;		On entry : 0/0
  3594 ;;		On exit  : 0/0
  3595 ;;		Unchanged: 0/0
  3596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3600 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3601 ;;Total ram usage:        0 bytes
  3602 ;; Hardware stack levels used:    1
  3603 ;; Hardware stack levels required when called:    3
  3604 ;; This function calls:
  3605 ;;		_lcdInst
  3606 ;; This function is called by:
  3607 ;;		_putch
  3608 ;; This function uses a non-reentrant model
  3609 ;;
  3610                           
  3611                           	psect	text5
  3612  0030A0                     __ptext5:
  3613                           	opt stack 0
  3614  0030A0                     _lcdNewline:
  3615                           	opt stack 24
  3616                           
  3617                           ;lcd.c: 79: lcdInst(0b11000000);
  3618                           
  3619                           ;incstack = 0
  3620  0030A0  0EC0               	movlw	192
  3621  0030A2  EC24  F018         	call	_lcdInst
  3622  0030A6  0012               	return		;funcret
  3623  0030A8                     __end_of_lcdNewline:
  3624                           	opt stack 0
  3625                           tblptru	equ	0xFF8
  3626                           tblptrh	equ	0xFF7
  3627                           tblptrl	equ	0xFF6
  3628                           tablat	equ	0xFF5
  3629                           prodh	equ	0xFF4
  3630                           prodl	equ	0xFF3
  3631                           intcon	equ	0xFF2
  3632                           postinc0	equ	0xFEE
  3633                           wreg	equ	0xFE8
  3634                           postdec1	equ	0xFE5
  3635                           fsr1l	equ	0xFE1
  3636                           indf2	equ	0xFDF
  3637                           postinc2	equ	0xFDE
  3638                           postdec2	equ	0xFDD
  3639                           fsr2h	equ	0xFDA
  3640                           fsr2l	equ	0xFD9
  3641                           status	equ	0xFD8
  3642                           
  3643 ;; *************** function _fround *****************
  3644 ;; Defined at:
  3645 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3646 ;; Parameters:    Size  Location     Type
  3647 ;;  prec            1    wreg     unsigned char 
  3648 ;; Auto vars:     Size  Location     Type
  3649 ;;  prec            1   58[COMRAM] unsigned char 
  3650 ;; Return value:  Size  Location     Type
  3651 ;;                  3   49[COMRAM] unsigned char 
  3652 ;; Registers used:
  3653 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3654 ;; Tracked objects:
  3655 ;;		On entry : 0/0
  3656 ;;		On exit  : 0/0
  3657 ;;		Unchanged: 0/0
  3658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3659 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3660 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3662 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3663 ;;Total ram usage:       10 bytes
  3664 ;; Hardware stack levels used:    1
  3665 ;; Hardware stack levels required when called:    3
  3666 ;; This function calls:
  3667 ;;		___awdiv
  3668 ;;		___awmod
  3669 ;;		___ftmul
  3670 ;;		___wmul
  3671 ;; This function is called by:
  3672 ;;		_printf
  3673 ;; This function uses a non-reentrant model
  3674 ;;
  3675                           
  3676                           	psect	text6
  3677  001E08                     __ptext6:
  3678                           	opt stack 0
  3679  001E08                     _fround:
  3680                           	opt stack 25
  3681                           
  3682                           ;incstack = 0
  3683                           ;fround@prec stored from wreg
  3684  001E08  6E3B               	movwf	fround@prec,c
  3685                           
  3686                           ;doprnt.c: 413: if(prec>=110)
  3687  001E0A  0E6D               	movlw	109
  3688  001E0C  643B               	cpfsgt	fround@prec,c
  3689  001E0E  D09F               	goto	l2755
  3690                           
  3691                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3692  001E10  0E00               	movlw	0
  3693  001E12  6E20               	movwf	___wmul@multiplicand+1,c
  3694  001E14  0E03               	movlw	3
  3695  001E16  6E1F               	movwf	___wmul@multiplicand,c
  3696  001E18  0E00               	movlw	0
  3697  001E1A  6E18               	movwf	___awdiv@divisor+1,c
  3698  001E1C  0E0A               	movlw	10
  3699  001E1E  6E17               	movwf	___awdiv@divisor,c
  3700  001E20  0E00               	movlw	0
  3701  001E22  6E12               	movwf	___awmod@divisor+1,c
  3702  001E24  0E64               	movlw	100
  3703  001E26  6E11               	movwf	___awmod@divisor,c
  3704  001E28  C03B  F00F         	movff	fround@prec,___awmod@dividend
  3705  001E2C  6A10               	clrf	___awmod@dividend+1,c
  3706  001E2E  EC4E  F016         	call	___awmod	;wreg free
  3707  001E32  C00F  F015         	movff	?___awmod,___awdiv@dividend
  3708  001E36  C010  F016         	movff	?___awmod+1,___awdiv@dividend+1
  3709  001E3A  EC52  F015         	call	___awdiv	;wreg free
  3710  001E3E  0E09               	movlw	9
  3711  001E40  2415               	addwf	?___awdiv,w,c
  3712  001E42  6E1D               	movwf	___wmul@multiplier,c
  3713  001E44  0E00               	movlw	0
  3714  001E46  2016               	addwfc	?___awdiv+1,w,c
  3715  001E48  6E1E               	movwf	___wmul@multiplier+1,c
  3716  001E4A  ECDB  F017         	call	___wmul	;wreg free
  3717  001E4E  0E29               	movlw	low __npowers_
  3718  001E50  241D               	addwf	?___wmul,w,c
  3719  001E52  6EF6               	movwf	tblptrl,c
  3720  001E54  0E10               	movlw	high __npowers_
  3721  001E56  201E               	addwfc	?___wmul+1,w,c
  3722  001E58  6EF7               	movwf	tblptrh,c
  3723  001E5A                     	if	0	;There are less than 3 active tblptr bytes
  3724  001E5A                     	endif
  3725  001E5A  0009               	tblrd		*+
  3726  001E5C  CFF5 F026          	movff	tablat,___ftmul@f2
  3727  001E60  0009               	tblrd		*+
  3728  001E62  CFF5 F027          	movff	tablat,___ftmul@f2+1
  3729  001E66  000A               	tblrd		*-
  3730  001E68  CFF5 F028          	movff	tablat,___ftmul@f2+2
  3731  001E6C  0E00               	movlw	0
  3732  001E6E  6E18               	movwf	___awdiv@divisor+1,c
  3733  001E70  0E64               	movlw	100
  3734  001E72  6E17               	movwf	___awdiv@divisor,c
  3735  001E74  C03B  F015         	movff	fround@prec,___awdiv@dividend
  3736  001E78  6A16               	clrf	___awdiv@dividend+1,c
  3737  001E7A  EC52  F015         	call	___awdiv	;wreg free
  3738  001E7E  0E12               	movlw	18
  3739  001E80  2415               	addwf	?___awdiv,w,c
  3740  001E82  6E1D               	movwf	___wmul@multiplier,c
  3741  001E84  0E00               	movlw	0
  3742  001E86  2016               	addwfc	?___awdiv+1,w,c
  3743  001E88  6E1E               	movwf	___wmul@multiplier+1,c
  3744  001E8A  0E00               	movlw	0
  3745  001E8C  6E20               	movwf	___wmul@multiplicand+1,c
  3746  001E8E  0E03               	movlw	3
  3747  001E90  6E1F               	movwf	___wmul@multiplicand,c
  3748  001E92  ECDB  F017         	call	___wmul	;wreg free
  3749  001E96  0E29               	movlw	low __npowers_
  3750  001E98  241D               	addwf	?___wmul,w,c
  3751  001E9A  6EF6               	movwf	tblptrl,c
  3752  001E9C  0E10               	movlw	high __npowers_
  3753  001E9E  201E               	addwfc	?___wmul+1,w,c
  3754  001EA0  6EF7               	movwf	tblptrh,c
  3755  001EA2                     	if	0	;There are less than 3 active tblptr bytes
  3756  001EA2                     	endif
  3757  001EA2  0009               	tblrd		*+
  3758  001EA4  CFF5 F023          	movff	tablat,___ftmul@f1
  3759  001EA8  0009               	tblrd		*+
  3760  001EAA  CFF5 F024          	movff	tablat,___ftmul@f1+1
  3761  001EAE  000A               	tblrd		*-
  3762  001EB0  CFF5 F025          	movff	tablat,___ftmul@f1+2
  3763  001EB4  EC4C  F013         	call	___ftmul	;wreg free
  3764  001EB8  C023  F038         	movff	?___ftmul,_fround$1116
  3765  001EBC  C024  F039         	movff	?___ftmul+1,_fround$1116+1
  3766  001EC0  C025  F03A         	movff	?___ftmul+2,_fround$1116+2
  3767                           
  3768                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3769  001EC4  0E00               	movlw	0
  3770  001EC6  6E20               	movwf	___wmul@multiplicand+1,c
  3771  001EC8  0E03               	movlw	3
  3772  001ECA  6E1F               	movwf	___wmul@multiplicand,c
  3773  001ECC  0E00               	movlw	0
  3774  001ECE  6E12               	movwf	___awmod@divisor+1,c
  3775  001ED0  0E0A               	movlw	10
  3776  001ED2  6E11               	movwf	___awmod@divisor,c
  3777  001ED4  C03B  F00F         	movff	fround@prec,___awmod@dividend
  3778  001ED8  6A10               	clrf	___awmod@dividend+1,c
  3779  001EDA  EC4E  F016         	call	___awmod	;wreg free
  3780  001EDE  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  3781  001EE2  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  3782  001EE6  ECDB  F017         	call	___wmul	;wreg free
  3783  001EEA  0E29               	movlw	low __npowers_
  3784  001EEC  241D               	addwf	?___wmul,w,c
  3785  001EEE  6EF6               	movwf	tblptrl,c
  3786  001EF0  0E10               	movlw	high __npowers_
  3787  001EF2  201E               	addwfc	?___wmul+1,w,c
  3788  001EF4  6EF7               	movwf	tblptrh,c
  3789  001EF6                     	if	0	;There are less than 3 active tblptr bytes
  3790  001EF6                     	endif
  3791  001EF6  0009               	tblrd		*+
  3792  001EF8  CFF5 F026          	movff	tablat,___ftmul@f2
  3793  001EFC  0009               	tblrd		*+
  3794  001EFE  CFF5 F027          	movff	tablat,___ftmul@f2+1
  3795  001F02  000A               	tblrd		*-
  3796  001F04  CFF5 F028          	movff	tablat,___ftmul@f2+2
  3797  001F08  C038  F023         	movff	_fround$1116,___ftmul@f1
  3798  001F0C  C039  F024         	movff	_fround$1116+1,___ftmul@f1+1
  3799  001F10  C03A  F025         	movff	_fround$1116+2,___ftmul@f1+2
  3800  001F14  EC4C  F013         	call	___ftmul	;wreg free
  3801  001F18  C023  F035         	movff	?___ftmul,_fround$1117
  3802  001F1C  C024  F036         	movff	?___ftmul+1,_fround$1117+1
  3803  001F20  C025  F037         	movff	?___ftmul+2,_fround$1117+2
  3804                           
  3805                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3806  001F24  C035  F023         	movff	_fround$1117,___ftmul@f1
  3807  001F28  C036  F024         	movff	_fround$1117+1,___ftmul@f1+1
  3808  001F2C  C037  F025         	movff	_fround$1117+2,___ftmul@f1+2
  3809  001F30  0E00               	movlw	0
  3810  001F32  6E26               	movwf	___ftmul@f2,c
  3811  001F34  0E00               	movlw	0
  3812  001F36  6E27               	movwf	___ftmul@f2+1,c
  3813  001F38  0E3F               	movlw	63
  3814  001F3A  6E28               	movwf	___ftmul@f2+2,c
  3815  001F3C  EC4C  F013         	call	___ftmul	;wreg free
  3816  001F40  C023  F032         	movff	?___ftmul,?_fround
  3817  001F44  C024  F033         	movff	?___ftmul+1,?_fround+1
  3818  001F48  C025  F034         	movff	?___ftmul+2,?_fround+2
  3819  001F4C  0012               	return	
  3820  001F4E                     l2755:
  3821                           
  3822                           ;doprnt.c: 415: else if(prec > 10)
  3823  001F4E  0E0A               	movlw	10
  3824  001F50  643B               	cpfsgt	fround@prec,c
  3825  001F52  D05D               	goto	l2763
  3826                           
  3827                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3828  001F54  0E00               	movlw	0
  3829  001F56  6E20               	movwf	___wmul@multiplicand+1,c
  3830  001F58  0E03               	movlw	3
  3831  001F5A  6E1F               	movwf	___wmul@multiplicand,c
  3832  001F5C  0E00               	movlw	0
  3833  001F5E  6E12               	movwf	___awmod@divisor+1,c
  3834  001F60  0E0A               	movlw	10
  3835  001F62  6E11               	movwf	___awmod@divisor,c
  3836  001F64  C03B  F00F         	movff	fround@prec,___awmod@dividend
  3837  001F68  6A10               	clrf	___awmod@dividend+1,c
  3838  001F6A  EC4E  F016         	call	___awmod	;wreg free
  3839  001F6E  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  3840  001F72  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  3841  001F76  ECDB  F017         	call	___wmul	;wreg free
  3842  001F7A  0E29               	movlw	low __npowers_
  3843  001F7C  241D               	addwf	?___wmul,w,c
  3844  001F7E  6EF6               	movwf	tblptrl,c
  3845  001F80  0E10               	movlw	high __npowers_
  3846  001F82  201E               	addwfc	?___wmul+1,w,c
  3847  001F84  6EF7               	movwf	tblptrh,c
  3848  001F86                     	if	0	;There are less than 3 active tblptr bytes
  3849  001F86                     	endif
  3850  001F86  0009               	tblrd		*+
  3851  001F88  CFF5 F026          	movff	tablat,___ftmul@f2
  3852  001F8C  0009               	tblrd		*+
  3853  001F8E  CFF5 F027          	movff	tablat,___ftmul@f2+1
  3854  001F92  000A               	tblrd		*-
  3855  001F94  CFF5 F028          	movff	tablat,___ftmul@f2+2
  3856  001F98  0E00               	movlw	0
  3857  001F9A  6E18               	movwf	___awdiv@divisor+1,c
  3858  001F9C  0E0A               	movlw	10
  3859  001F9E  6E17               	movwf	___awdiv@divisor,c
  3860  001FA0  C03B  F015         	movff	fround@prec,___awdiv@dividend
  3861  001FA4  6A16               	clrf	___awdiv@dividend+1,c
  3862  001FA6  EC52  F015         	call	___awdiv	;wreg free
  3863  001FAA  0E09               	movlw	9
  3864  001FAC  2415               	addwf	?___awdiv,w,c
  3865  001FAE  6E1D               	movwf	___wmul@multiplier,c
  3866  001FB0  0E00               	movlw	0
  3867  001FB2  2016               	addwfc	?___awdiv+1,w,c
  3868  001FB4  6E1E               	movwf	___wmul@multiplier+1,c
  3869  001FB6  0E00               	movlw	0
  3870  001FB8  6E20               	movwf	___wmul@multiplicand+1,c
  3871  001FBA  0E03               	movlw	3
  3872  001FBC  6E1F               	movwf	___wmul@multiplicand,c
  3873  001FBE  ECDB  F017         	call	___wmul	;wreg free
  3874  001FC2  0E29               	movlw	low __npowers_
  3875  001FC4  241D               	addwf	?___wmul,w,c
  3876  001FC6  6EF6               	movwf	tblptrl,c
  3877  001FC8  0E10               	movlw	high __npowers_
  3878  001FCA  201E               	addwfc	?___wmul+1,w,c
  3879  001FCC  6EF7               	movwf	tblptrh,c
  3880  001FCE                     	if	0	;There are less than 3 active tblptr bytes
  3881  001FCE                     	endif
  3882  001FCE  0009               	tblrd		*+
  3883  001FD0  CFF5 F023          	movff	tablat,___ftmul@f1
  3884  001FD4  0009               	tblrd		*+
  3885  001FD6  CFF5 F024          	movff	tablat,___ftmul@f1+1
  3886  001FDA  000A               	tblrd		*-
  3887  001FDC  CFF5 F025          	movff	tablat,___ftmul@f1+2
  3888  001FE0  EC4C  F013         	call	___ftmul	;wreg free
  3889  001FE4  C023  F038         	movff	?___ftmul,_fround$1116
  3890  001FE8  C024  F039         	movff	?___ftmul+1,_fround$1116+1
  3891  001FEC  C025  F03A         	movff	?___ftmul+2,_fround$1116+2
  3892                           
  3893                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3894  001FF0  C038  F023         	movff	_fround$1116,___ftmul@f1
  3895  001FF4  C039  F024         	movff	_fround$1116+1,___ftmul@f1+1
  3896  001FF8  C03A  F025         	movff	_fround$1116+2,___ftmul@f1+2
  3897  001FFC  0E00               	movlw	0
  3898  001FFE  6E26               	movwf	___ftmul@f2,c
  3899  002000  0E00               	movlw	0
  3900  002002  6E27               	movwf	___ftmul@f2+1,c
  3901  002004  0E3F               	movlw	63
  3902  002006  6E28               	movwf	___ftmul@f2+2,c
  3903  002008  EC4C  F013         	call	___ftmul	;wreg free
  3904  00200C  D799               	goto	L6
  3905  00200E                     l2763:
  3906                           
  3907                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3908  00200E  503B               	movf	fround@prec,w,c
  3909  002010  0D03               	mullw	3
  3910  002012  0E29               	movlw	low __npowers_
  3911  002014  24F3               	addwf	prodl,w,c
  3912  002016  6EF6               	movwf	tblptrl,c
  3913  002018  0E10               	movlw	high __npowers_
  3914  00201A  20F4               	addwfc	prodh,w,c
  3915  00201C  6EF7               	movwf	tblptrh,c
  3916  00201E                     	if	0	;There are less than 3 active tblptr bytes
  3917  00201E                     	endif
  3918  00201E  0009               	tblrd		*+
  3919  002020  CFF5 F023          	movff	tablat,___ftmul@f1
  3920  002024  0009               	tblrd		*+
  3921  002026  CFF5 F024          	movff	tablat,___ftmul@f1+1
  3922  00202A  000A               	tblrd		*-
  3923  00202C  CFF5 F025          	movff	tablat,___ftmul@f1+2
  3924  002030  0E00               	movlw	0
  3925  002032  6E26               	movwf	___ftmul@f2,c
  3926  002034  0E00               	movlw	0
  3927  002036  6E27               	movwf	___ftmul@f2+1,c
  3928  002038  0E3F               	movlw	63
  3929  00203A  6E28               	movwf	___ftmul@f2+2,c
  3930  00203C  EC4C  F013         	call	___ftmul	;wreg free
  3931  002040  C023  F032         	movff	?___ftmul,?_fround
  3932  002044  C024  F033         	movff	?___ftmul+1,?_fround+1
  3933  002048  C025  F034         	movff	?___ftmul+2,?_fround+2
  3934  00204C  0012               	return	
  3935  00204E                     __end_of_fround:
  3936                           	opt stack 0
  3937                           tblptru	equ	0xFF8
  3938                           tblptrh	equ	0xFF7
  3939                           tblptrl	equ	0xFF6
  3940                           tablat	equ	0xFF5
  3941                           prodh	equ	0xFF4
  3942                           prodl	equ	0xFF3
  3943                           intcon	equ	0xFF2
  3944                           postinc0	equ	0xFEE
  3945                           wreg	equ	0xFE8
  3946                           postdec1	equ	0xFE5
  3947                           fsr1l	equ	0xFE1
  3948                           indf2	equ	0xFDF
  3949                           postinc2	equ	0xFDE
  3950                           postdec2	equ	0xFDD
  3951                           fsr2h	equ	0xFDA
  3952                           fsr2l	equ	0xFD9
  3953                           status	equ	0xFD8
  3954                           
  3955 ;; *************** function ___wmul *****************
  3956 ;; Defined at:
  3957 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  3958 ;; Parameters:    Size  Location     Type
  3959 ;;  multiplier      2   28[COMRAM] unsigned int 
  3960 ;;  multiplicand    2   30[COMRAM] unsigned int 
  3961 ;; Auto vars:     Size  Location     Type
  3962 ;;  product         2   32[COMRAM] unsigned int 
  3963 ;; Return value:  Size  Location     Type
  3964 ;;                  2   28[COMRAM] unsigned int 
  3965 ;; Registers used:
  3966 ;;		wreg, status,2, status,0, prodl, prodh
  3967 ;; Tracked objects:
  3968 ;;		On entry : 0/0
  3969 ;;		On exit  : 0/0
  3970 ;;		Unchanged: 0/0
  3971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3972 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3973 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3975 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3976 ;;Total ram usage:        6 bytes
  3977 ;; Hardware stack levels used:    1
  3978 ;; Hardware stack levels required when called:    1
  3979 ;; This function calls:
  3980 ;;		Nothing
  3981 ;; This function is called by:
  3982 ;;		_fround
  3983 ;;		_scale
  3984 ;;		_printf
  3985 ;; This function uses a non-reentrant model
  3986 ;;
  3987                           
  3988                           	psect	text7
  3989  002FB6                     __ptext7:
  3990                           	opt stack 0
  3991  002FB6                     ___wmul:
  3992                           	opt stack 26
  3993                           
  3994                           ;incstack = 0
  3995  002FB6  501D               	movf	___wmul@multiplier,w,c
  3996  002FB8  021F               	mulwf	___wmul@multiplicand,c
  3997  002FBA  CFF3 F021          	movff	prodl,___wmul@product
  3998  002FBE  CFF4 F022          	movff	prodh,___wmul@product+1
  3999  002FC2  501D               	movf	___wmul@multiplier,w,c
  4000  002FC4  0220               	mulwf	___wmul@multiplicand+1,c
  4001  002FC6  50F3               	movf	prodl,w,c
  4002  002FC8  2622               	addwf	___wmul@product+1,f,c
  4003  002FCA  501E               	movf	___wmul@multiplier+1,w,c
  4004  002FCC  021F               	mulwf	___wmul@multiplicand,c
  4005  002FCE  50F3               	movf	prodl,w,c
  4006  002FD0  2622               	addwf	___wmul@product+1,f,c
  4007  002FD2  C021  F01D         	movff	___wmul@product,?___wmul
  4008  002FD6  C022  F01E         	movff	___wmul@product+1,?___wmul+1
  4009  002FDA  0012               	return	
  4010  002FDC                     __end_of___wmul:
  4011                           	opt stack 0
  4012                           tblptru	equ	0xFF8
  4013                           tblptrh	equ	0xFF7
  4014                           tblptrl	equ	0xFF6
  4015                           tablat	equ	0xFF5
  4016                           prodh	equ	0xFF4
  4017                           prodl	equ	0xFF3
  4018                           intcon	equ	0xFF2
  4019                           postinc0	equ	0xFEE
  4020                           wreg	equ	0xFE8
  4021                           postdec1	equ	0xFE5
  4022                           fsr1l	equ	0xFE1
  4023                           indf2	equ	0xFDF
  4024                           postinc2	equ	0xFDE
  4025                           postdec2	equ	0xFDD
  4026                           fsr2h	equ	0xFDA
  4027                           fsr2l	equ	0xFD9
  4028                           status	equ	0xFD8
  4029                           
  4030 ;; *************** function ___ftmul *****************
  4031 ;; Defined at:
  4032 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  4033 ;; Parameters:    Size  Location     Type
  4034 ;;  f1              3   34[COMRAM] float 
  4035 ;;  f2              3   37[COMRAM] float 
  4036 ;; Auto vars:     Size  Location     Type
  4037 ;;  f3_as_produc    3   44[COMRAM] unsigned um
  4038 ;;  sign            1   48[COMRAM] unsigned char 
  4039 ;;  cntr            1   47[COMRAM] unsigned char 
  4040 ;;  exp             1   43[COMRAM] unsigned char 
  4041 ;; Return value:  Size  Location     Type
  4042 ;;                  3   34[COMRAM] float 
  4043 ;; Registers used:
  4044 ;;		wreg, status,2, status,0, cstack
  4045 ;; Tracked objects:
  4046 ;;		On entry : 0/0
  4047 ;;		On exit  : 0/0
  4048 ;;		Unchanged: 0/0
  4049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4050 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4051 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4052 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4053 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4054 ;;Total ram usage:       15 bytes
  4055 ;; Hardware stack levels used:    1
  4056 ;; Hardware stack levels required when called:    2
  4057 ;; This function calls:
  4058 ;;		___ftpack
  4059 ;; This function is called by:
  4060 ;;		_fround
  4061 ;;		_scale
  4062 ;;		_printf
  4063 ;;		_angleToPulseLength
  4064 ;; This function uses a non-reentrant model
  4065 ;;
  4066                           
  4067                           	psect	text8
  4068  002698                     __ptext8:
  4069                           	opt stack 0
  4070  002698                     ___ftmul:
  4071                           	opt stack 25
  4072                           
  4073                           ;incstack = 0
  4074  002698  C025  F029         	movff	___ftmul@f1+2,??___ftmul
  4075  00269C  6A2A               	clrf	(??___ftmul+1)& (0+255),c
  4076  00269E  6A2B               	clrf	(??___ftmul+2)& (0+255),c
  4077  0026A0  3424               	rlcf	___ftmul@f1+1,w,c
  4078  0026A2  3629               	rlcf	??___ftmul& (0+255),f,c
  4079  0026A4  E301               	bnc	u2061
  4080  0026A6  802A               	bsf	(??___ftmul+1)& (0+255),0,c
  4081  0026A8                     u2061:
  4082  0026A8  5029               	movf	??___ftmul,w,c
  4083  0026AA  6E2C               	movwf	___ftmul@exp,c
  4084  0026AC  502C               	movf	___ftmul@exp,w,c
  4085  0026AE  A4D8               	btfss	status,2,c
  4086  0026B0  D007               	goto	l2611
  4087  0026B2  0E00               	movlw	0
  4088  0026B4  6E23               	movwf	?___ftmul,c
  4089  0026B6  0E00               	movlw	0
  4090  0026B8  6E24               	movwf	?___ftmul+1,c
  4091  0026BA  0E00               	movlw	0
  4092  0026BC  6E25               	movwf	?___ftmul+2,c
  4093  0026BE  0012               	return	
  4094  0026C0                     l2611:
  4095  0026C0  C028  F029         	movff	___ftmul@f2+2,??___ftmul
  4096  0026C4  6A2A               	clrf	(??___ftmul+1)& (0+255),c
  4097  0026C6  6A2B               	clrf	(??___ftmul+2)& (0+255),c
  4098  0026C8  3427               	rlcf	___ftmul@f2+1,w,c
  4099  0026CA  3629               	rlcf	??___ftmul& (0+255),f,c
  4100  0026CC  E301               	bnc	u2081
  4101  0026CE  802A               	bsf	(??___ftmul+1)& (0+255),0,c
  4102  0026D0                     u2081:
  4103  0026D0  5029               	movf	??___ftmul,w,c
  4104  0026D2  6E31               	movwf	___ftmul@sign,c
  4105  0026D4  5031               	movf	___ftmul@sign,w,c
  4106  0026D6  A4D8               	btfss	status,2,c
  4107  0026D8  D007               	goto	l2617
  4108  0026DA  0E00               	movlw	0
  4109  0026DC  6E23               	movwf	?___ftmul,c
  4110  0026DE  0E00               	movlw	0
  4111  0026E0  6E24               	movwf	?___ftmul+1,c
  4112  0026E2  0E00               	movlw	0
  4113  0026E4  6E25               	movwf	?___ftmul+2,c
  4114  0026E6  0012               	return	
  4115  0026E8                     l2617:
  4116  0026E8  5031               	movf	___ftmul@sign,w,c
  4117  0026EA  0F7B               	addlw	123
  4118  0026EC  262C               	addwf	___ftmul@exp,f,c
  4119  0026EE  C025  F031         	movff	___ftmul@f1+2,___ftmul@sign
  4120  0026F2  5028               	movf	___ftmul@f2+2,w,c
  4121  0026F4  1A31               	xorwf	___ftmul@sign,f,c
  4122  0026F6  0E80               	movlw	128
  4123  0026F8  1631               	andwf	___ftmul@sign,f,c
  4124  0026FA  8E24               	bsf	___ftmul@f1+1,7,c
  4125  0026FC  8E27               	bsf	___ftmul@f2+1,7,c
  4126  0026FE  0EFF               	movlw	255
  4127  002700  1626               	andwf	___ftmul@f2,f,c
  4128  002702  0EFF               	movlw	255
  4129  002704  1627               	andwf	___ftmul@f2+1,f,c
  4130  002706  0E00               	movlw	0
  4131  002708  1628               	andwf	___ftmul@f2+2,f,c
  4132  00270A  0E00               	movlw	0
  4133  00270C  6E2D               	movwf	___ftmul@f3_as_product,c
  4134  00270E  0E00               	movlw	0
  4135  002710  6E2E               	movwf	___ftmul@f3_as_product+1,c
  4136  002712  0E00               	movlw	0
  4137  002714  6E2F               	movwf	___ftmul@f3_as_product+2,c
  4138  002716  0E07               	movlw	7
  4139  002718  6E30               	movwf	___ftmul@cntr,c
  4140  00271A                     l2631:
  4141  00271A  A023               	btfss	___ftmul@f1,0,c
  4142  00271C  D006               	goto	l2635
  4143  00271E  5026               	movf	___ftmul@f2,w,c
  4144  002720  262D               	addwf	___ftmul@f3_as_product,f,c
  4145  002722  5027               	movf	___ftmul@f2+1,w,c
  4146  002724  222E               	addwfc	___ftmul@f3_as_product+1,f,c
  4147  002726  5028               	movf	___ftmul@f2+2,w,c
  4148  002728  222F               	addwfc	___ftmul@f3_as_product+2,f,c
  4149  00272A                     l2635:
  4150  00272A  90D8               	bcf	status,0,c
  4151  00272C  3225               	rrcf	___ftmul@f1+2,f,c
  4152  00272E  3224               	rrcf	___ftmul@f1+1,f,c
  4153  002730  3223               	rrcf	___ftmul@f1,f,c
  4154  002732  90D8               	bcf	status,0,c
  4155  002734  3626               	rlcf	___ftmul@f2,f,c
  4156  002736  3627               	rlcf	___ftmul@f2+1,f,c
  4157  002738  3628               	rlcf	___ftmul@f2+2,f,c
  4158  00273A  2E30               	decfsz	___ftmul@cntr,f,c
  4159  00273C  D7EE               	goto	l2631
  4160  00273E  0E09               	movlw	9
  4161  002740  6E30               	movwf	___ftmul@cntr,c
  4162  002742                     l2641:
  4163  002742  A023               	btfss	___ftmul@f1,0,c
  4164  002744  D006               	goto	l2645
  4165  002746  5026               	movf	___ftmul@f2,w,c
  4166  002748  262D               	addwf	___ftmul@f3_as_product,f,c
  4167  00274A  5027               	movf	___ftmul@f2+1,w,c
  4168  00274C  222E               	addwfc	___ftmul@f3_as_product+1,f,c
  4169  00274E  5028               	movf	___ftmul@f2+2,w,c
  4170  002750  222F               	addwfc	___ftmul@f3_as_product+2,f,c
  4171  002752                     l2645:
  4172  002752  90D8               	bcf	status,0,c
  4173  002754  3225               	rrcf	___ftmul@f1+2,f,c
  4174  002756  3224               	rrcf	___ftmul@f1+1,f,c
  4175  002758  3223               	rrcf	___ftmul@f1,f,c
  4176  00275A  90D8               	bcf	status,0,c
  4177  00275C  322F               	rrcf	___ftmul@f3_as_product+2,f,c
  4178  00275E  322E               	rrcf	___ftmul@f3_as_product+1,f,c
  4179  002760  322D               	rrcf	___ftmul@f3_as_product,f,c
  4180  002762  2E30               	decfsz	___ftmul@cntr,f,c
  4181  002764  D7EE               	goto	l2641
  4182  002766  C02D  F00F         	movff	___ftmul@f3_as_product,___ftpack@arg
  4183  00276A  C02E  F010         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4184  00276E  C02F  F011         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4185  002772  C02C  F012         	movff	___ftmul@exp,___ftpack@exp
  4186  002776  C031  F013         	movff	___ftmul@sign,___ftpack@sign
  4187  00277A  ECB3  F014         	call	___ftpack	;wreg free
  4188  00277E  C00F  F023         	movff	?___ftpack,?___ftmul
  4189  002782  C010  F024         	movff	?___ftpack+1,?___ftmul+1
  4190  002786  C011  F025         	movff	?___ftpack+2,?___ftmul+2
  4191  00278A  0012               	return	
  4192  00278C                     __end_of___ftmul:
  4193                           	opt stack 0
  4194                           tblptru	equ	0xFF8
  4195                           tblptrh	equ	0xFF7
  4196                           tblptrl	equ	0xFF6
  4197                           tablat	equ	0xFF5
  4198                           prodh	equ	0xFF4
  4199                           prodl	equ	0xFF3
  4200                           intcon	equ	0xFF2
  4201                           postinc0	equ	0xFEE
  4202                           wreg	equ	0xFE8
  4203                           postdec1	equ	0xFE5
  4204                           fsr1l	equ	0xFE1
  4205                           indf2	equ	0xFDF
  4206                           postinc2	equ	0xFDE
  4207                           postdec2	equ	0xFDD
  4208                           fsr2h	equ	0xFDA
  4209                           fsr2l	equ	0xFD9
  4210                           status	equ	0xFD8
  4211                           
  4212 ;; *************** function ___awmod *****************
  4213 ;; Defined at:
  4214 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  4215 ;; Parameters:    Size  Location     Type
  4216 ;;  dividend        2   14[COMRAM] int 
  4217 ;;  divisor         2   16[COMRAM] int 
  4218 ;; Auto vars:     Size  Location     Type
  4219 ;;  sign            1   19[COMRAM] unsigned char 
  4220 ;;  counter         1   18[COMRAM] unsigned char 
  4221 ;; Return value:  Size  Location     Type
  4222 ;;                  2   14[COMRAM] int 
  4223 ;; Registers used:
  4224 ;;		wreg, status,2, status,0
  4225 ;; Tracked objects:
  4226 ;;		On entry : 0/0
  4227 ;;		On exit  : 0/0
  4228 ;;		Unchanged: 0/0
  4229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4230 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4231 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4233 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4234 ;;Total ram usage:        6 bytes
  4235 ;; Hardware stack levels used:    1
  4236 ;; Hardware stack levels required when called:    1
  4237 ;; This function calls:
  4238 ;;		Nothing
  4239 ;; This function is called by:
  4240 ;;		_fround
  4241 ;;		_scale
  4242 ;; This function uses a non-reentrant model
  4243 ;;
  4244                           
  4245                           	psect	text9
  4246  002C9C                     __ptext9:
  4247                           	opt stack 0
  4248  002C9C                     ___awmod:
  4249                           	opt stack 26
  4250                           
  4251                           ;incstack = 0
  4252  002C9C  0E00               	movlw	0
  4253  002C9E  6E14               	movwf	___awmod@sign,c
  4254  002CA0  AE10               	btfss	___awmod@dividend+1,7,c
  4255  002CA2  D006               	goto	l2705
  4256  002CA4  6C0F               	negf	___awmod@dividend,c
  4257  002CA6  1E10               	comf	___awmod@dividend+1,f,c
  4258  002CA8  B0D8               	btfsc	status,0,c
  4259  002CAA  2A10               	incf	___awmod@dividend+1,f,c
  4260  002CAC  0E01               	movlw	1
  4261  002CAE  6E14               	movwf	___awmod@sign,c
  4262  002CB0                     l2705:
  4263  002CB0  AE12               	btfss	___awmod@divisor+1,7,c
  4264  002CB2  D004               	goto	l2709
  4265  002CB4  6C11               	negf	___awmod@divisor,c
  4266  002CB6  1E12               	comf	___awmod@divisor+1,f,c
  4267  002CB8  B0D8               	btfsc	status,0,c
  4268  002CBA  2A12               	incf	___awmod@divisor+1,f,c
  4269  002CBC                     l2709:
  4270  002CBC  5011               	movf	___awmod@divisor,w,c
  4271  002CBE  1012               	iorwf	___awmod@divisor+1,w,c
  4272  002CC0  B4D8               	btfsc	status,2,c
  4273  002CC2  D018               	goto	l2725
  4274  002CC4  0E01               	movlw	1
  4275  002CC6  6E13               	movwf	___awmod@counter,c
  4276  002CC8  D004               	goto	l2715
  4277  002CCA                     l2713:
  4278  002CCA  90D8               	bcf	status,0,c
  4279  002CCC  3611               	rlcf	___awmod@divisor,f,c
  4280  002CCE  3612               	rlcf	___awmod@divisor+1,f,c
  4281  002CD0  2A13               	incf	___awmod@counter,f,c
  4282  002CD2                     l2715:
  4283  002CD2  AE12               	btfss	___awmod@divisor+1,7,c
  4284  002CD4  D7FA               	goto	l2713
  4285  002CD6                     l2717:
  4286  002CD6  5011               	movf	___awmod@divisor,w,c
  4287  002CD8  5C0F               	subwf	___awmod@dividend,w,c
  4288  002CDA  5012               	movf	___awmod@divisor+1,w,c
  4289  002CDC  5810               	subwfb	___awmod@dividend+1,w,c
  4290  002CDE  A0D8               	btfss	status,0,c
  4291  002CE0  D004               	goto	l2721
  4292  002CE2  5011               	movf	___awmod@divisor,w,c
  4293  002CE4  5E0F               	subwf	___awmod@dividend,f,c
  4294  002CE6  5012               	movf	___awmod@divisor+1,w,c
  4295  002CE8  5A10               	subwfb	___awmod@dividend+1,f,c
  4296  002CEA                     l2721:
  4297  002CEA  90D8               	bcf	status,0,c
  4298  002CEC  3212               	rrcf	___awmod@divisor+1,f,c
  4299  002CEE  3211               	rrcf	___awmod@divisor,f,c
  4300  002CF0  2E13               	decfsz	___awmod@counter,f,c
  4301  002CF2  D7F1               	goto	l2717
  4302  002CF4                     l2725:
  4303  002CF4  5014               	movf	___awmod@sign,w,c
  4304  002CF6  B4D8               	btfsc	status,2,c
  4305  002CF8  D004               	goto	l2729
  4306  002CFA  6C0F               	negf	___awmod@dividend,c
  4307  002CFC  1E10               	comf	___awmod@dividend+1,f,c
  4308  002CFE  B0D8               	btfsc	status,0,c
  4309  002D00  2A10               	incf	___awmod@dividend+1,f,c
  4310  002D02                     l2729:
  4311  002D02  C00F  F00F         	movff	___awmod@dividend,?___awmod
  4312  002D06  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
  4313  002D0A  0012               	return	
  4314  002D0C                     __end_of___awmod:
  4315                           	opt stack 0
  4316                           tblptru	equ	0xFF8
  4317                           tblptrh	equ	0xFF7
  4318                           tblptrl	equ	0xFF6
  4319                           tablat	equ	0xFF5
  4320                           prodh	equ	0xFF4
  4321                           prodl	equ	0xFF3
  4322                           intcon	equ	0xFF2
  4323                           postinc0	equ	0xFEE
  4324                           wreg	equ	0xFE8
  4325                           postdec1	equ	0xFE5
  4326                           fsr1l	equ	0xFE1
  4327                           indf2	equ	0xFDF
  4328                           postinc2	equ	0xFDE
  4329                           postdec2	equ	0xFDD
  4330                           fsr2h	equ	0xFDA
  4331                           fsr2l	equ	0xFD9
  4332                           status	equ	0xFD8
  4333                           
  4334 ;; *************** function ___awdiv *****************
  4335 ;; Defined at:
  4336 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  4337 ;; Parameters:    Size  Location     Type
  4338 ;;  dividend        2   20[COMRAM] int 
  4339 ;;  divisor         2   22[COMRAM] int 
  4340 ;; Auto vars:     Size  Location     Type
  4341 ;;  quotient        2   26[COMRAM] int 
  4342 ;;  sign            1   25[COMRAM] unsigned char 
  4343 ;;  counter         1   24[COMRAM] unsigned char 
  4344 ;; Return value:  Size  Location     Type
  4345 ;;                  2   20[COMRAM] int 
  4346 ;; Registers used:
  4347 ;;		wreg, status,2, status,0
  4348 ;; Tracked objects:
  4349 ;;		On entry : 0/0
  4350 ;;		On exit  : 0/0
  4351 ;;		Unchanged: 0/0
  4352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4353 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4354 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4356 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4357 ;;Total ram usage:        8 bytes
  4358 ;; Hardware stack levels used:    1
  4359 ;; Hardware stack levels required when called:    1
  4360 ;; This function calls:
  4361 ;;		Nothing
  4362 ;; This function is called by:
  4363 ;;		_fround
  4364 ;;		_scale
  4365 ;;		_printf
  4366 ;; This function uses a non-reentrant model
  4367 ;;
  4368                           
  4369                           	psect	text10
  4370  002AA4                     __ptext10:
  4371                           	opt stack 0
  4372  002AA4                     ___awdiv:
  4373                           	opt stack 26
  4374                           
  4375                           ;incstack = 0
  4376  002AA4  0E00               	movlw	0
  4377  002AA6  6E1A               	movwf	___awdiv@sign,c
  4378  002AA8  AE18               	btfss	___awdiv@divisor+1,7,c
  4379  002AAA  D006               	goto	l2661
  4380  002AAC  6C17               	negf	___awdiv@divisor,c
  4381  002AAE  1E18               	comf	___awdiv@divisor+1,f,c
  4382  002AB0  B0D8               	btfsc	status,0,c
  4383  002AB2  2A18               	incf	___awdiv@divisor+1,f,c
  4384  002AB4  0E01               	movlw	1
  4385  002AB6  6E1A               	movwf	___awdiv@sign,c
  4386  002AB8                     l2661:
  4387  002AB8  AE16               	btfss	___awdiv@dividend+1,7,c
  4388  002ABA  D006               	goto	l2667
  4389  002ABC  6C15               	negf	___awdiv@dividend,c
  4390  002ABE  1E16               	comf	___awdiv@dividend+1,f,c
  4391  002AC0  B0D8               	btfsc	status,0,c
  4392  002AC2  2A16               	incf	___awdiv@dividend+1,f,c
  4393  002AC4  0E01               	movlw	1
  4394  002AC6  1A1A               	xorwf	___awdiv@sign,f,c
  4395  002AC8                     l2667:
  4396  002AC8  0E00               	movlw	0
  4397  002ACA  6E1C               	movwf	___awdiv@quotient+1,c
  4398  002ACC  0E00               	movlw	0
  4399  002ACE  6E1B               	movwf	___awdiv@quotient,c
  4400  002AD0  5017               	movf	___awdiv@divisor,w,c
  4401  002AD2  1018               	iorwf	___awdiv@divisor+1,w,c
  4402  002AD4  B4D8               	btfsc	status,2,c
  4403  002AD6  D01C               	goto	l2689
  4404  002AD8  0E01               	movlw	1
  4405  002ADA  6E19               	movwf	___awdiv@counter,c
  4406  002ADC  D004               	goto	l2675
  4407  002ADE                     l2673:
  4408  002ADE  90D8               	bcf	status,0,c
  4409  002AE0  3617               	rlcf	___awdiv@divisor,f,c
  4410  002AE2  3618               	rlcf	___awdiv@divisor+1,f,c
  4411  002AE4  2A19               	incf	___awdiv@counter,f,c
  4412  002AE6                     l2675:
  4413  002AE6  AE18               	btfss	___awdiv@divisor+1,7,c
  4414  002AE8  D7FA               	goto	l2673
  4415  002AEA                     l2677:
  4416  002AEA  90D8               	bcf	status,0,c
  4417  002AEC  361B               	rlcf	___awdiv@quotient,f,c
  4418  002AEE  361C               	rlcf	___awdiv@quotient+1,f,c
  4419  002AF0  5017               	movf	___awdiv@divisor,w,c
  4420  002AF2  5C15               	subwf	___awdiv@dividend,w,c
  4421  002AF4  5018               	movf	___awdiv@divisor+1,w,c
  4422  002AF6  5816               	subwfb	___awdiv@dividend+1,w,c
  4423  002AF8  A0D8               	btfss	status,0,c
  4424  002AFA  D005               	goto	l2685
  4425  002AFC  5017               	movf	___awdiv@divisor,w,c
  4426  002AFE  5E15               	subwf	___awdiv@dividend,f,c
  4427  002B00  5018               	movf	___awdiv@divisor+1,w,c
  4428  002B02  5A16               	subwfb	___awdiv@dividend+1,f,c
  4429  002B04  801B               	bsf	___awdiv@quotient,0,c
  4430  002B06                     l2685:
  4431  002B06  90D8               	bcf	status,0,c
  4432  002B08  3218               	rrcf	___awdiv@divisor+1,f,c
  4433  002B0A  3217               	rrcf	___awdiv@divisor,f,c
  4434  002B0C  2E19               	decfsz	___awdiv@counter,f,c
  4435  002B0E  D7ED               	goto	l2677
  4436  002B10                     l2689:
  4437  002B10  501A               	movf	___awdiv@sign,w,c
  4438  002B12  B4D8               	btfsc	status,2,c
  4439  002B14  D004               	goto	l2693
  4440  002B16  6C1B               	negf	___awdiv@quotient,c
  4441  002B18  1E1C               	comf	___awdiv@quotient+1,f,c
  4442  002B1A  B0D8               	btfsc	status,0,c
  4443  002B1C  2A1C               	incf	___awdiv@quotient+1,f,c
  4444  002B1E                     l2693:
  4445  002B1E  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  4446  002B22  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  4447  002B26  0012               	return	
  4448  002B28                     __end_of___awdiv:
  4449                           	opt stack 0
  4450                           tblptru	equ	0xFF8
  4451                           tblptrh	equ	0xFF7
  4452                           tblptrl	equ	0xFF6
  4453                           tablat	equ	0xFF5
  4454                           prodh	equ	0xFF4
  4455                           prodl	equ	0xFF3
  4456                           intcon	equ	0xFF2
  4457                           postinc0	equ	0xFEE
  4458                           wreg	equ	0xFE8
  4459                           postdec1	equ	0xFE5
  4460                           fsr1l	equ	0xFE1
  4461                           indf2	equ	0xFDF
  4462                           postinc2	equ	0xFDE
  4463                           postdec2	equ	0xFDD
  4464                           fsr2h	equ	0xFDA
  4465                           fsr2l	equ	0xFD9
  4466                           status	equ	0xFD8
  4467                           
  4468 ;; *************** function __tdiv_to_l_ *****************
  4469 ;; Defined at:
  4470 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  4471 ;; Parameters:    Size  Location     Type
  4472 ;;  f1              3   14[COMRAM] float 
  4473 ;;  f2              3   17[COMRAM] float 
  4474 ;; Auto vars:     Size  Location     Type
  4475 ;;  quot            4   23[COMRAM] unsigned long 
  4476 ;;  exp1            1   28[COMRAM] unsigned char 
  4477 ;;  cntr            1   27[COMRAM] unsigned char 
  4478 ;; Return value:  Size  Location     Type
  4479 ;;                  4   14[COMRAM] unsigned long 
  4480 ;; Registers used:
  4481 ;;		wreg, status,2, status,0
  4482 ;; Tracked objects:
  4483 ;;		On entry : 0/0
  4484 ;;		On exit  : 0/0
  4485 ;;		Unchanged: 0/0
  4486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4487 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4488 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4489 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4490 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4491 ;;Total ram usage:       15 bytes
  4492 ;; Hardware stack levels used:    1
  4493 ;; Hardware stack levels required when called:    1
  4494 ;; This function calls:
  4495 ;;		Nothing
  4496 ;; This function is called by:
  4497 ;;		_printf
  4498 ;; This function uses a non-reentrant model
  4499 ;;
  4500                           
  4501                           	psect	text11
  4502  00243E                     __ptext11:
  4503                           	opt stack 0
  4504  00243E                     __tdiv_to_l_:
  4505                           	opt stack 27
  4506                           
  4507                           ;incstack = 0
  4508  00243E  C011  F015         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4509  002442  6A16               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4510  002444  6A17               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4511  002446  3410               	rlcf	__tdiv_to_l_@f1+1,w,c
  4512  002448  3615               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4513  00244A  E301               	bnc	u2341
  4514  00244C  8016               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4515  00244E                     u2341:
  4516  00244E  5015               	movf	??__tdiv_to_l_,w,c
  4517  002450  6E1D               	movwf	__tdiv_to_l_@exp1,c
  4518  002452  501D               	movf	__tdiv_to_l_@exp1,w,c
  4519  002454  A4D8               	btfss	status,2,c
  4520  002456  D009               	goto	l2811
  4521  002458  0E00               	movlw	0
  4522  00245A  6E0F               	movwf	?__tdiv_to_l_,c
  4523  00245C  0E00               	movlw	0
  4524  00245E  6E10               	movwf	?__tdiv_to_l_+1,c
  4525  002460  0E00               	movlw	0
  4526  002462  6E11               	movwf	?__tdiv_to_l_+2,c
  4527  002464  0E00               	movlw	0
  4528  002466  6E12               	movwf	?__tdiv_to_l_+3,c
  4529  002468  0012               	return	
  4530  00246A                     l2811:
  4531  00246A  C014  F015         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4532  00246E  6A16               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4533  002470  6A17               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4534  002472  3413               	rlcf	__tdiv_to_l_@f2+1,w,c
  4535  002474  3615               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4536  002476  E301               	bnc	u2361
  4537  002478  8016               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4538  00247A                     u2361:
  4539  00247A  5015               	movf	??__tdiv_to_l_,w,c
  4540  00247C  6E1C               	movwf	__tdiv_to_l_@cntr,c
  4541  00247E  501C               	movf	__tdiv_to_l_@cntr,w,c
  4542  002480  A4D8               	btfss	status,2,c
  4543  002482  D009               	goto	l2817
  4544  002484  0E00               	movlw	0
  4545  002486  6E0F               	movwf	?__tdiv_to_l_,c
  4546  002488  0E00               	movlw	0
  4547  00248A  6E10               	movwf	?__tdiv_to_l_+1,c
  4548  00248C  0E00               	movlw	0
  4549  00248E  6E11               	movwf	?__tdiv_to_l_+2,c
  4550  002490  0E00               	movlw	0
  4551  002492  6E12               	movwf	?__tdiv_to_l_+3,c
  4552  002494  0012               	return	
  4553  002496                     l2817:
  4554  002496  8E10               	bsf	__tdiv_to_l_@f1+1,7,c
  4555  002498  0EFF               	movlw	255
  4556  00249A  160F               	andwf	__tdiv_to_l_@f1,f,c
  4557  00249C  0EFF               	movlw	255
  4558  00249E  1610               	andwf	__tdiv_to_l_@f1+1,f,c
  4559  0024A0  0E00               	movlw	0
  4560  0024A2  1611               	andwf	__tdiv_to_l_@f1+2,f,c
  4561  0024A4  8E13               	bsf	__tdiv_to_l_@f2+1,7,c
  4562  0024A6  0EFF               	movlw	255
  4563  0024A8  1612               	andwf	__tdiv_to_l_@f2,f,c
  4564  0024AA  0EFF               	movlw	255
  4565  0024AC  1613               	andwf	__tdiv_to_l_@f2+1,f,c
  4566  0024AE  0E00               	movlw	0
  4567  0024B0  1614               	andwf	__tdiv_to_l_@f2+2,f,c
  4568  0024B2  0E00               	movlw	0
  4569  0024B4  6E18               	movwf	__tdiv_to_l_@quot,c
  4570  0024B6  0E00               	movlw	0
  4571  0024B8  6E19               	movwf	__tdiv_to_l_@quot+1,c
  4572  0024BA  0E00               	movlw	0
  4573  0024BC  6E1A               	movwf	__tdiv_to_l_@quot+2,c
  4574  0024BE  0E00               	movlw	0
  4575  0024C0  6E1B               	movwf	__tdiv_to_l_@quot+3,c
  4576  0024C2  0E7F               	movlw	127
  4577  0024C4  5E1D               	subwf	__tdiv_to_l_@exp1,f,c
  4578  0024C6  501C               	movf	__tdiv_to_l_@cntr,w,c
  4579  0024C8  0F98               	addlw	152
  4580  0024CA  5E1D               	subwf	__tdiv_to_l_@exp1,f,c
  4581  0024CC  0E18               	movlw	24
  4582  0024CE  6E1C               	movwf	__tdiv_to_l_@cntr,c
  4583  0024D0                     l802:
  4584  0024D0  90D8               	bcf	status,0,c
  4585  0024D2  3618               	rlcf	__tdiv_to_l_@quot,f,c
  4586  0024D4  3619               	rlcf	__tdiv_to_l_@quot+1,f,c
  4587  0024D6  361A               	rlcf	__tdiv_to_l_@quot+2,f,c
  4588  0024D8  361B               	rlcf	__tdiv_to_l_@quot+3,f,c
  4589  0024DA  5012               	movf	__tdiv_to_l_@f2,w,c
  4590  0024DC  5C0F               	subwf	__tdiv_to_l_@f1,w,c
  4591  0024DE  5013               	movf	__tdiv_to_l_@f2+1,w,c
  4592  0024E0  5810               	subwfb	__tdiv_to_l_@f1+1,w,c
  4593  0024E2  5014               	movf	__tdiv_to_l_@f2+2,w,c
  4594  0024E4  5811               	subwfb	__tdiv_to_l_@f1+2,w,c
  4595  0024E6  A0D8               	btfss	status,0,c
  4596  0024E8  D007               	goto	l803
  4597  0024EA  5012               	movf	__tdiv_to_l_@f2,w,c
  4598  0024EC  5E0F               	subwf	__tdiv_to_l_@f1,f,c
  4599  0024EE  5013               	movf	__tdiv_to_l_@f2+1,w,c
  4600  0024F0  5A10               	subwfb	__tdiv_to_l_@f1+1,f,c
  4601  0024F2  5014               	movf	__tdiv_to_l_@f2+2,w,c
  4602  0024F4  5A11               	subwfb	__tdiv_to_l_@f1+2,f,c
  4603  0024F6  8018               	bsf	__tdiv_to_l_@quot,0,c
  4604  0024F8                     l803:
  4605  0024F8  90D8               	bcf	status,0,c
  4606  0024FA  360F               	rlcf	__tdiv_to_l_@f1,f,c
  4607  0024FC  3610               	rlcf	__tdiv_to_l_@f1+1,f,c
  4608  0024FE  3611               	rlcf	__tdiv_to_l_@f1+2,f,c
  4609  002500  2E1C               	decfsz	__tdiv_to_l_@cntr,f,c
  4610  002502  D7E6               	goto	l802
  4611  002504  AE1D               	btfss	__tdiv_to_l_@exp1,7,c
  4612  002506  D016               	goto	l2851
  4613  002508  501D               	movf	__tdiv_to_l_@exp1,w,c
  4614  00250A  0A80               	xorlw	128
  4615  00250C  0F97               	addlw	151
  4616  00250E  B0D8               	btfsc	status,0,c
  4617  002510  D009               	goto	l2847
  4618  002512  0E00               	movlw	0
  4619  002514  6E0F               	movwf	?__tdiv_to_l_,c
  4620  002516  0E00               	movlw	0
  4621  002518  6E10               	movwf	?__tdiv_to_l_+1,c
  4622  00251A  0E00               	movlw	0
  4623  00251C  6E11               	movwf	?__tdiv_to_l_+2,c
  4624  00251E  0E00               	movlw	0
  4625  002520  6E12               	movwf	?__tdiv_to_l_+3,c
  4626  002522  0012               	return	
  4627  002524                     l2847:
  4628  002524  90D8               	bcf	status,0,c
  4629  002526  321B               	rrcf	__tdiv_to_l_@quot+3,f,c
  4630  002528  321A               	rrcf	__tdiv_to_l_@quot+2,f,c
  4631  00252A  3219               	rrcf	__tdiv_to_l_@quot+1,f,c
  4632  00252C  3218               	rrcf	__tdiv_to_l_@quot,f,c
  4633  00252E  3E1D               	incfsz	__tdiv_to_l_@exp1,f,c
  4634  002530  D7F9               	goto	l2847
  4635  002532  D015               	goto	l809
  4636  002534                     l2851:
  4637  002534  0E17               	movlw	23
  4638  002536  641D               	cpfsgt	__tdiv_to_l_@exp1,c
  4639  002538  D00F               	goto	l2859
  4640  00253A  0E00               	movlw	0
  4641  00253C  6E0F               	movwf	?__tdiv_to_l_,c
  4642  00253E  0E00               	movlw	0
  4643  002540  6E10               	movwf	?__tdiv_to_l_+1,c
  4644  002542  0E00               	movlw	0
  4645  002544  6E11               	movwf	?__tdiv_to_l_+2,c
  4646  002546  0E00               	movlw	0
  4647  002548  6E12               	movwf	?__tdiv_to_l_+3,c
  4648  00254A  0012               	return	
  4649  00254C                     l2857:
  4650  00254C  90D8               	bcf	status,0,c
  4651  00254E  3618               	rlcf	__tdiv_to_l_@quot,f,c
  4652  002550  3619               	rlcf	__tdiv_to_l_@quot+1,f,c
  4653  002552  361A               	rlcf	__tdiv_to_l_@quot+2,f,c
  4654  002554  361B               	rlcf	__tdiv_to_l_@quot+3,f,c
  4655  002556  061D               	decf	__tdiv_to_l_@exp1,f,c
  4656  002558                     l2859:
  4657  002558  501D               	movf	__tdiv_to_l_@exp1,w,c
  4658  00255A  A4D8               	btfss	status,2,c
  4659  00255C  D7F7               	goto	l2857
  4660  00255E                     l809:
  4661  00255E  C018  F00F         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4662  002562  C019  F010         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4663  002566  C01A  F011         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4664  00256A  C01B  F012         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4665  00256E  0012               	return		;funcret
  4666  002570                     __end_of__tdiv_to_l_:
  4667                           	opt stack 0
  4668                           tblptru	equ	0xFF8
  4669                           tblptrh	equ	0xFF7
  4670                           tblptrl	equ	0xFF6
  4671                           tablat	equ	0xFF5
  4672                           prodh	equ	0xFF4
  4673                           prodl	equ	0xFF3
  4674                           intcon	equ	0xFF2
  4675                           postinc0	equ	0xFEE
  4676                           wreg	equ	0xFE8
  4677                           postdec1	equ	0xFE5
  4678                           fsr1l	equ	0xFE1
  4679                           indf2	equ	0xFDF
  4680                           postinc2	equ	0xFDE
  4681                           postdec2	equ	0xFDD
  4682                           fsr2h	equ	0xFDA
  4683                           fsr2l	equ	0xFD9
  4684                           status	equ	0xFD8
  4685                           
  4686 ;; *************** function __div_to_l_ *****************
  4687 ;; Defined at:
  4688 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  4689 ;; Parameters:    Size  Location     Type
  4690 ;;  f1              3   14[COMRAM] unsigned long 
  4691 ;;  f2              3   17[COMRAM] unsigned long 
  4692 ;; Auto vars:     Size  Location     Type
  4693 ;;  quot            4   20[COMRAM] unsigned long 
  4694 ;;  exp1            1   25[COMRAM] unsigned char 
  4695 ;;  cntr            1   24[COMRAM] unsigned char 
  4696 ;; Return value:  Size  Location     Type
  4697 ;;                  4   14[COMRAM] unsigned long 
  4698 ;; Registers used:
  4699 ;;		wreg, status,2, status,0
  4700 ;; Tracked objects:
  4701 ;;		On entry : 0/0
  4702 ;;		On exit  : 0/0
  4703 ;;		Unchanged: 0/0
  4704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4705 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4706 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4708 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4709 ;;Total ram usage:       12 bytes
  4710 ;; Hardware stack levels used:    1
  4711 ;; Hardware stack levels required when called:    1
  4712 ;; This function calls:
  4713 ;;		Nothing
  4714 ;; This function is called by:
  4715 ;;		_printf
  4716 ;; This function uses a non-reentrant model
  4717 ;;
  4718                           
  4719                           	psect	text12
  4720  002570                     __ptext12:
  4721                           	opt stack 0
  4722  002570                     __div_to_l_:
  4723                           	opt stack 27
  4724                           
  4725                           ;incstack = 0
  4726  002570  3411               	rlcf	__div_to_l_@f1+2,w,c
  4727  002572  3412               	rlcf	__div_to_l_@f1+3,w,c
  4728  002574  6E1A               	movwf	__div_to_l_@exp1,c
  4729  002576  501A               	movf	__div_to_l_@exp1,w,c
  4730  002578  A4D8               	btfss	status,2,c
  4731  00257A  D009               	goto	l2867
  4732  00257C  0E00               	movlw	0
  4733  00257E  6E0F               	movwf	?__div_to_l_,c
  4734  002580  0E00               	movlw	0
  4735  002582  6E10               	movwf	?__div_to_l_+1,c
  4736  002584  0E00               	movlw	0
  4737  002586  6E11               	movwf	?__div_to_l_+2,c
  4738  002588  0E00               	movlw	0
  4739  00258A  6E12               	movwf	?__div_to_l_+3,c
  4740  00258C  0012               	return	
  4741  00258E                     l2867:
  4742  00258E  3414               	rlcf	__div_to_l_@f2+2,w,c
  4743  002590  3415               	rlcf	__div_to_l_@f2+3,w,c
  4744  002592  6E19               	movwf	__div_to_l_@cntr,c
  4745  002594  5019               	movf	__div_to_l_@cntr,w,c
  4746  002596  A4D8               	btfss	status,2,c
  4747  002598  D009               	goto	l2873
  4748  00259A  0E00               	movlw	0
  4749  00259C  6E0F               	movwf	?__div_to_l_,c
  4750  00259E  0E00               	movlw	0
  4751  0025A0  6E10               	movwf	?__div_to_l_+1,c
  4752  0025A2  0E00               	movlw	0
  4753  0025A4  6E11               	movwf	?__div_to_l_+2,c
  4754  0025A6  0E00               	movlw	0
  4755  0025A8  6E12               	movwf	?__div_to_l_+3,c
  4756  0025AA  0012               	return	
  4757  0025AC                     l2873:
  4758  0025AC  8E11               	bsf	__div_to_l_@f1+2,7,c
  4759  0025AE  0EFF               	movlw	255
  4760  0025B0  160F               	andwf	__div_to_l_@f1,f,c
  4761  0025B2  0EFF               	movlw	255
  4762  0025B4  1610               	andwf	__div_to_l_@f1+1,f,c
  4763  0025B6  0EFF               	movlw	255
  4764  0025B8  1611               	andwf	__div_to_l_@f1+2,f,c
  4765  0025BA  0E00               	movlw	0
  4766  0025BC  1612               	andwf	__div_to_l_@f1+3,f,c
  4767  0025BE  8E14               	bsf	__div_to_l_@f2+2,7,c
  4768  0025C0  0EFF               	movlw	255
  4769  0025C2  1612               	andwf	__div_to_l_@f2,f,c
  4770  0025C4  0EFF               	movlw	255
  4771  0025C6  1613               	andwf	__div_to_l_@f2+1,f,c
  4772  0025C8  0EFF               	movlw	255
  4773  0025CA  1614               	andwf	__div_to_l_@f2+2,f,c
  4774  0025CC  0E00               	movlw	0
  4775  0025CE  1615               	andwf	__div_to_l_@f2+3,f,c
  4776  0025D0  0E00               	movlw	0
  4777  0025D2  6E15               	movwf	__div_to_l_@quot,c
  4778  0025D4  0E00               	movlw	0
  4779  0025D6  6E16               	movwf	__div_to_l_@quot+1,c
  4780  0025D8  0E00               	movlw	0
  4781  0025DA  6E17               	movwf	__div_to_l_@quot+2,c
  4782  0025DC  0E00               	movlw	0
  4783  0025DE  6E18               	movwf	__div_to_l_@quot+3,c
  4784  0025E0  0E7F               	movlw	127
  4785  0025E2  5E1A               	subwf	__div_to_l_@exp1,f,c
  4786  0025E4  5019               	movf	__div_to_l_@cntr,w,c
  4787  0025E6  0FA0               	addlw	160
  4788  0025E8  5E1A               	subwf	__div_to_l_@exp1,f,c
  4789  0025EA  0E20               	movlw	32
  4790  0025EC  6E19               	movwf	__div_to_l_@cntr,c
  4791  0025EE                     l2887:
  4792  0025EE  90D8               	bcf	status,0,c
  4793  0025F0  3615               	rlcf	__div_to_l_@quot,f,c
  4794  0025F2  3616               	rlcf	__div_to_l_@quot+1,f,c
  4795  0025F4  3617               	rlcf	__div_to_l_@quot+2,f,c
  4796  0025F6  3618               	rlcf	__div_to_l_@quot+3,f,c
  4797  0025F8  5012               	movf	__div_to_l_@f2,w,c
  4798  0025FA  5C0F               	subwf	__div_to_l_@f1,w,c
  4799  0025FC  5013               	movf	__div_to_l_@f2+1,w,c
  4800  0025FE  5810               	subwfb	__div_to_l_@f1+1,w,c
  4801  002600  5014               	movf	__div_to_l_@f2+2,w,c
  4802  002602  5811               	subwfb	__div_to_l_@f1+2,w,c
  4803  002604  5015               	movf	__div_to_l_@f2+3,w,c
  4804  002606  5812               	subwfb	__div_to_l_@f1+3,w,c
  4805  002608  A0D8               	btfss	status,0,c
  4806  00260A  D009               	goto	l2895
  4807  00260C  5012               	movf	__div_to_l_@f2,w,c
  4808  00260E  5E0F               	subwf	__div_to_l_@f1,f,c
  4809  002610  5013               	movf	__div_to_l_@f2+1,w,c
  4810  002612  5A10               	subwfb	__div_to_l_@f1+1,f,c
  4811  002614  5014               	movf	__div_to_l_@f2+2,w,c
  4812  002616  5A11               	subwfb	__div_to_l_@f1+2,f,c
  4813  002618  5015               	movf	__div_to_l_@f2+3,w,c
  4814  00261A  5A12               	subwfb	__div_to_l_@f1+3,f,c
  4815  00261C  8015               	bsf	__div_to_l_@quot,0,c
  4816  00261E                     l2895:
  4817  00261E  90D8               	bcf	status,0,c
  4818  002620  360F               	rlcf	__div_to_l_@f1,f,c
  4819  002622  3610               	rlcf	__div_to_l_@f1+1,f,c
  4820  002624  3611               	rlcf	__div_to_l_@f1+2,f,c
  4821  002626  3612               	rlcf	__div_to_l_@f1+3,f,c
  4822  002628  2E19               	decfsz	__div_to_l_@cntr,f,c
  4823  00262A  D7E1               	goto	l2887
  4824  00262C  AE1A               	btfss	__div_to_l_@exp1,7,c
  4825  00262E  D016               	goto	l2911
  4826  002630  501A               	movf	__div_to_l_@exp1,w,c
  4827  002632  0A80               	xorlw	128
  4828  002634  0F9F               	addlw	159
  4829  002636  B0D8               	btfsc	status,0,c
  4830  002638  D009               	goto	l2907
  4831  00263A  0E00               	movlw	0
  4832  00263C  6E0F               	movwf	?__div_to_l_,c
  4833  00263E  0E00               	movlw	0
  4834  002640  6E10               	movwf	?__div_to_l_+1,c
  4835  002642  0E00               	movlw	0
  4836  002644  6E11               	movwf	?__div_to_l_+2,c
  4837  002646  0E00               	movlw	0
  4838  002648  6E12               	movwf	?__div_to_l_+3,c
  4839  00264A  0012               	return	
  4840  00264C                     l2907:
  4841  00264C  90D8               	bcf	status,0,c
  4842  00264E  3218               	rrcf	__div_to_l_@quot+3,f,c
  4843  002650  3217               	rrcf	__div_to_l_@quot+2,f,c
  4844  002652  3216               	rrcf	__div_to_l_@quot+1,f,c
  4845  002654  3215               	rrcf	__div_to_l_@quot,f,c
  4846  002656  3E1A               	incfsz	__div_to_l_@exp1,f,c
  4847  002658  D7F9               	goto	l2907
  4848  00265A  D015               	goto	l705
  4849  00265C                     l2911:
  4850  00265C  0E1F               	movlw	31
  4851  00265E  641A               	cpfsgt	__div_to_l_@exp1,c
  4852  002660  D00F               	goto	l2919
  4853  002662  0E00               	movlw	0
  4854  002664  6E0F               	movwf	?__div_to_l_,c
  4855  002666  0E00               	movlw	0
  4856  002668  6E10               	movwf	?__div_to_l_+1,c
  4857  00266A  0E00               	movlw	0
  4858  00266C  6E11               	movwf	?__div_to_l_+2,c
  4859  00266E  0E00               	movlw	0
  4860  002670  6E12               	movwf	?__div_to_l_+3,c
  4861  002672  0012               	return	
  4862  002674                     l2917:
  4863  002674  90D8               	bcf	status,0,c
  4864  002676  3615               	rlcf	__div_to_l_@quot,f,c
  4865  002678  3616               	rlcf	__div_to_l_@quot+1,f,c
  4866  00267A  3617               	rlcf	__div_to_l_@quot+2,f,c
  4867  00267C  3618               	rlcf	__div_to_l_@quot+3,f,c
  4868  00267E  061A               	decf	__div_to_l_@exp1,f,c
  4869  002680                     l2919:
  4870  002680  501A               	movf	__div_to_l_@exp1,w,c
  4871  002682  A4D8               	btfss	status,2,c
  4872  002684  D7F7               	goto	l2917
  4873  002686                     l705:
  4874  002686  C015  F00F         	movff	__div_to_l_@quot,?__div_to_l_
  4875  00268A  C016  F010         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4876  00268E  C017  F011         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4877  002692  C018  F012         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4878  002696  0012               	return		;funcret
  4879  002698                     __end_of__div_to_l_:
  4880                           	opt stack 0
  4881                           tblptru	equ	0xFF8
  4882                           tblptrh	equ	0xFF7
  4883                           tblptrl	equ	0xFF6
  4884                           tablat	equ	0xFF5
  4885                           prodh	equ	0xFF4
  4886                           prodl	equ	0xFF3
  4887                           intcon	equ	0xFF2
  4888                           postinc0	equ	0xFEE
  4889                           wreg	equ	0xFE8
  4890                           postdec1	equ	0xFE5
  4891                           fsr1l	equ	0xFE1
  4892                           indf2	equ	0xFDF
  4893                           postinc2	equ	0xFDE
  4894                           postdec2	equ	0xFDD
  4895                           fsr2h	equ	0xFDA
  4896                           fsr2l	equ	0xFD9
  4897                           status	equ	0xFD8
  4898                           
  4899 ;; *************** function ___lltoft *****************
  4900 ;; Defined at:
  4901 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  4902 ;; Parameters:    Size  Location     Type
  4903 ;;  c               4   22[COMRAM] unsigned long 
  4904 ;; Auto vars:     Size  Location     Type
  4905 ;;  exp             1   30[COMRAM] unsigned char 
  4906 ;; Return value:  Size  Location     Type
  4907 ;;                  3   22[COMRAM] float 
  4908 ;; Registers used:
  4909 ;;		wreg, status,2, status,0, cstack
  4910 ;; Tracked objects:
  4911 ;;		On entry : 0/0
  4912 ;;		On exit  : 0/0
  4913 ;;		Unchanged: 0/0
  4914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4915 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4916 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4917 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4918 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4919 ;;Total ram usage:        9 bytes
  4920 ;; Hardware stack levels used:    1
  4921 ;; Hardware stack levels required when called:    2
  4922 ;; This function calls:
  4923 ;;		___ftpack
  4924 ;; This function is called by:
  4925 ;;		_printf
  4926 ;; This function uses a non-reentrant model
  4927 ;;
  4928                           
  4929                           	psect	text13
  4930  002DD8                     __ptext13:
  4931                           	opt stack 0
  4932  002DD8                     ___lltoft:
  4933                           	opt stack 26
  4934                           
  4935                           ;incstack = 0
  4936  002DD8  0E8E               	movlw	142
  4937  002DDA  6E1F               	movwf	___lltoft@exp,c
  4938  002DDC  D006               	goto	l3039
  4939  002DDE                     l3037:
  4940  002DDE  90D8               	bcf	status,0,c
  4941  002DE0  321A               	rrcf	___lltoft@c+3,f,c
  4942  002DE2  3219               	rrcf	___lltoft@c+2,f,c
  4943  002DE4  3218               	rrcf	___lltoft@c+1,f,c
  4944  002DE6  3217               	rrcf	___lltoft@c,f,c
  4945  002DE8  2A1F               	incf	___lltoft@exp,f,c
  4946  002DEA                     l3039:
  4947  002DEA  0E00               	movlw	0
  4948  002DEC  1417               	andwf	___lltoft@c,w,c
  4949  002DEE  6E1B               	movwf	??___lltoft& (0+255),c
  4950  002DF0  0E00               	movlw	0
  4951  002DF2  1418               	andwf	___lltoft@c+1,w,c
  4952  002DF4  6E1C               	movwf	(??___lltoft+1)& (0+255),c
  4953  002DF6  0E00               	movlw	0
  4954  002DF8  1419               	andwf	___lltoft@c+2,w,c
  4955  002DFA  6E1D               	movwf	(??___lltoft+2)& (0+255),c
  4956  002DFC  0EFF               	movlw	255
  4957  002DFE  141A               	andwf	___lltoft@c+3,w,c
  4958  002E00  6E1E               	movwf	(??___lltoft+3)& (0+255),c
  4959  002E02  501B               	movf	??___lltoft,w,c
  4960  002E04  101C               	iorwf	??___lltoft+1,w,c
  4961  002E06  101D               	iorwf	??___lltoft+2,w,c
  4962  002E08  101E               	iorwf	??___lltoft+3,w,c
  4963  002E0A  A4D8               	btfss	status,2,c
  4964  002E0C  D7E8               	goto	l3037
  4965  002E0E  C017  F00F         	movff	___lltoft@c,___ftpack@arg
  4966  002E12  C018  F010         	movff	___lltoft@c+1,___ftpack@arg+1
  4967  002E16  C019  F011         	movff	___lltoft@c+2,___ftpack@arg+2
  4968  002E1A  C01F  F012         	movff	___lltoft@exp,___ftpack@exp
  4969  002E1E  0E00               	movlw	0
  4970  002E20  6E13               	movwf	___ftpack@sign,c
  4971  002E22  ECB3  F014         	call	___ftpack	;wreg free
  4972  002E26  C00F  F017         	movff	?___ftpack,?___lltoft
  4973  002E2A  C010  F018         	movff	?___ftpack+1,?___lltoft+1
  4974  002E2E  C011  F019         	movff	?___ftpack+2,?___lltoft+2
  4975  002E32  0012               	return	
  4976  002E34                     __end_of___lltoft:
  4977                           	opt stack 0
  4978                           tblptru	equ	0xFF8
  4979                           tblptrh	equ	0xFF7
  4980                           tblptrl	equ	0xFF6
  4981                           tablat	equ	0xFF5
  4982                           prodh	equ	0xFF4
  4983                           prodl	equ	0xFF3
  4984                           intcon	equ	0xFF2
  4985                           postinc0	equ	0xFEE
  4986                           wreg	equ	0xFE8
  4987                           postdec1	equ	0xFE5
  4988                           fsr1l	equ	0xFE1
  4989                           indf2	equ	0xFDF
  4990                           postinc2	equ	0xFDE
  4991                           postdec2	equ	0xFDD
  4992                           fsr2h	equ	0xFDA
  4993                           fsr2l	equ	0xFD9
  4994                           status	equ	0xFD8
  4995                           
  4996 ;; *************** function ___llmod *****************
  4997 ;; Defined at:
  4998 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  4999 ;; Parameters:    Size  Location     Type
  5000 ;;  dividend        4   27[COMRAM] unsigned long 
  5001 ;;  divisor         4   31[COMRAM] unsigned long 
  5002 ;; Auto vars:     Size  Location     Type
  5003 ;;  counter         1   35[COMRAM] unsigned char 
  5004 ;; Return value:  Size  Location     Type
  5005 ;;                  4   27[COMRAM] unsigned long 
  5006 ;; Registers used:
  5007 ;;		wreg, status,2, status,0
  5008 ;; Tracked objects:
  5009 ;;		On entry : 0/0
  5010 ;;		On exit  : 0/0
  5011 ;;		Unchanged: 0/0
  5012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5013 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5014 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5016 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5017 ;;Total ram usage:        9 bytes
  5018 ;; Hardware stack levels used:    1
  5019 ;; Hardware stack levels required when called:    1
  5020 ;; This function calls:
  5021 ;;		Nothing
  5022 ;; This function is called by:
  5023 ;;		_printf
  5024 ;; This function uses a non-reentrant model
  5025 ;;
  5026                           
  5027                           	psect	text14
  5028  002D0C                     __ptext14:
  5029                           	opt stack 0
  5030  002D0C                     ___llmod:
  5031                           	opt stack 27
  5032                           
  5033                           ;incstack = 0
  5034  002D0C  5020               	movf	___llmod@divisor,w,c
  5035  002D0E  1021               	iorwf	___llmod@divisor+1,w,c
  5036  002D10  1022               	iorwf	___llmod@divisor+2,w,c
  5037  002D12  1023               	iorwf	___llmod@divisor+3,w,c
  5038  002D14  B4D8               	btfsc	status,2,c
  5039  002D16  D024               	goto	l889
  5040  002D18  0E01               	movlw	1
  5041  002D1A  6E24               	movwf	___llmod@counter,c
  5042  002D1C  D006               	goto	l3025
  5043  002D1E                     l3023:
  5044  002D1E  90D8               	bcf	status,0,c
  5045  002D20  3620               	rlcf	___llmod@divisor,f,c
  5046  002D22  3621               	rlcf	___llmod@divisor+1,f,c
  5047  002D24  3622               	rlcf	___llmod@divisor+2,f,c
  5048  002D26  3623               	rlcf	___llmod@divisor+3,f,c
  5049  002D28  2A24               	incf	___llmod@counter,f,c
  5050  002D2A                     l3025:
  5051  002D2A  AE23               	btfss	___llmod@divisor+3,7,c
  5052  002D2C  D7F8               	goto	l3023
  5053  002D2E                     l3027:
  5054  002D2E  5020               	movf	___llmod@divisor,w,c
  5055  002D30  5C1C               	subwf	___llmod@dividend,w,c
  5056  002D32  5021               	movf	___llmod@divisor+1,w,c
  5057  002D34  581D               	subwfb	___llmod@dividend+1,w,c
  5058  002D36  5022               	movf	___llmod@divisor+2,w,c
  5059  002D38  581E               	subwfb	___llmod@dividend+2,w,c
  5060  002D3A  5023               	movf	___llmod@divisor+3,w,c
  5061  002D3C  581F               	subwfb	___llmod@dividend+3,w,c
  5062  002D3E  A0D8               	btfss	status,0,c
  5063  002D40  D008               	goto	l3031
  5064  002D42  5020               	movf	___llmod@divisor,w,c
  5065  002D44  5E1C               	subwf	___llmod@dividend,f,c
  5066  002D46  5021               	movf	___llmod@divisor+1,w,c
  5067  002D48  5A1D               	subwfb	___llmod@dividend+1,f,c
  5068  002D4A  5022               	movf	___llmod@divisor+2,w,c
  5069  002D4C  5A1E               	subwfb	___llmod@dividend+2,f,c
  5070  002D4E  5023               	movf	___llmod@divisor+3,w,c
  5071  002D50  5A1F               	subwfb	___llmod@dividend+3,f,c
  5072  002D52                     l3031:
  5073  002D52  90D8               	bcf	status,0,c
  5074  002D54  3223               	rrcf	___llmod@divisor+3,f,c
  5075  002D56  3222               	rrcf	___llmod@divisor+2,f,c
  5076  002D58  3221               	rrcf	___llmod@divisor+1,f,c
  5077  002D5A  3220               	rrcf	___llmod@divisor,f,c
  5078  002D5C  2E24               	decfsz	___llmod@counter,f,c
  5079  002D5E  D7E7               	goto	l3027
  5080  002D60                     l889:
  5081  002D60  C01C  F01C         	movff	___llmod@dividend,?___llmod
  5082  002D64  C01D  F01D         	movff	___llmod@dividend+1,?___llmod+1
  5083  002D68  C01E  F01E         	movff	___llmod@dividend+2,?___llmod+2
  5084  002D6C  C01F  F01F         	movff	___llmod@dividend+3,?___llmod+3
  5085  002D70  0012               	return		;funcret
  5086  002D72                     __end_of___llmod:
  5087                           	opt stack 0
  5088                           tblptru	equ	0xFF8
  5089                           tblptrh	equ	0xFF7
  5090                           tblptrl	equ	0xFF6
  5091                           tablat	equ	0xFF5
  5092                           prodh	equ	0xFF4
  5093                           prodl	equ	0xFF3
  5094                           intcon	equ	0xFF2
  5095                           postinc0	equ	0xFEE
  5096                           wreg	equ	0xFE8
  5097                           postdec1	equ	0xFE5
  5098                           fsr1l	equ	0xFE1
  5099                           indf2	equ	0xFDF
  5100                           postinc2	equ	0xFDE
  5101                           postdec2	equ	0xFDD
  5102                           fsr2h	equ	0xFDA
  5103                           fsr2l	equ	0xFD9
  5104                           status	equ	0xFD8
  5105                           
  5106 ;; *************** function ___fttol *****************
  5107 ;; Defined at:
  5108 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  5109 ;; Parameters:    Size  Location     Type
  5110 ;;  f1              3   56[COMRAM] float 
  5111 ;; Auto vars:     Size  Location     Type
  5112 ;;  lval            4   66[COMRAM] unsigned long 
  5113 ;;  exp1            1   70[COMRAM] unsigned char 
  5114 ;;  sign1           1   65[COMRAM] unsigned char 
  5115 ;; Return value:  Size  Location     Type
  5116 ;;                  4   56[COMRAM] long 
  5117 ;; Registers used:
  5118 ;;		wreg, status,2, status,0
  5119 ;; Tracked objects:
  5120 ;;		On entry : 0/0
  5121 ;;		On exit  : 0/0
  5122 ;;		Unchanged: 0/0
  5123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5124 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5125 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5126 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5127 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5128 ;;Total ram usage:       15 bytes
  5129 ;; Hardware stack levels used:    1
  5130 ;; Hardware stack levels required when called:    1
  5131 ;; This function calls:
  5132 ;;		Nothing
  5133 ;; This function is called by:
  5134 ;;		_printf
  5135 ;;		_angleToPulseLength
  5136 ;; This function uses a non-reentrant model
  5137 ;;
  5138                           
  5139                           	psect	text15
  5140  00278C                     __ptext15:
  5141                           	opt stack 0
  5142  00278C                     ___fttol:
  5143                           	opt stack 27
  5144                           
  5145                           ;incstack = 0
  5146  00278C  C03B  F03D         	movff	___fttol@f1+2,??___fttol
  5147  002790  6A3E               	clrf	(??___fttol+1)& (0+255),c
  5148  002792  6A3F               	clrf	(??___fttol+2)& (0+255),c
  5149  002794  343A               	rlcf	___fttol@f1+1,w,c
  5150  002796  363D               	rlcf	??___fttol& (0+255),f,c
  5151  002798  E301               	bnc	u2551
  5152  00279A  803E               	bsf	(??___fttol+1)& (0+255),0,c
  5153  00279C                     u2551:
  5154  00279C  503D               	movf	??___fttol,w,c
  5155  00279E  6E47               	movwf	___fttol@exp1,c
  5156  0027A0  5047               	movf	___fttol@exp1,w,c
  5157  0027A2  A4D8               	btfss	status,2,c
  5158  0027A4  D009               	goto	l2957
  5159  0027A6  0E00               	movlw	0
  5160  0027A8  6E39               	movwf	?___fttol,c
  5161  0027AA  0E00               	movlw	0
  5162  0027AC  6E3A               	movwf	?___fttol+1,c
  5163  0027AE  0E00               	movlw	0
  5164  0027B0  6E3B               	movwf	?___fttol+2,c
  5165  0027B2  0E00               	movlw	0
  5166  0027B4  6E3C               	movwf	?___fttol+3,c
  5167  0027B6  0012               	return	
  5168  0027B8                     l2957:
  5169  0027B8  0E17               	movlw	23
  5170  0027BA  6E3D               	movwf	??___fttol& (0+255),c
  5171  0027BC  C039  F03E         	movff	___fttol@f1,??___fttol+1
  5172  0027C0  C03A  F03F         	movff	___fttol@f1+1,??___fttol+2
  5173  0027C4  C03B  F040         	movff	___fttol@f1+2,??___fttol+3
  5174  0027C8  283D               	incf	??___fttol,w,c
  5175  0027CA  6E41               	movwf	(??___fttol+4)& (0+255),c
  5176  0027CC  D004               	goto	u2570
  5177  0027CE                     u2575:
  5178  0027CE  90D8               	bcf	status,0,c
  5179  0027D0  3240               	rrcf	??___fttol+3,f,c
  5180  0027D2  323F               	rrcf	??___fttol+2,f,c
  5181  0027D4  323E               	rrcf	??___fttol+1,f,c
  5182  0027D6                     u2570:
  5183  0027D6  2E41               	decfsz	(??___fttol+4)& (0+255),f,c
  5184  0027D8  D7FA               	goto	u2575
  5185  0027DA  503E               	movf	??___fttol+1,w,c
  5186  0027DC  6E42               	movwf	___fttol@sign1,c
  5187  0027DE  8E3A               	bsf	___fttol@f1+1,7,c
  5188  0027E0  0EFF               	movlw	255
  5189  0027E2  1639               	andwf	___fttol@f1,f,c
  5190  0027E4  0EFF               	movlw	255
  5191  0027E6  163A               	andwf	___fttol@f1+1,f,c
  5192  0027E8  0E00               	movlw	0
  5193  0027EA  163B               	andwf	___fttol@f1+2,f,c
  5194  0027EC  5039               	movf	___fttol@f1,w,c
  5195  0027EE  6E43               	movwf	___fttol@lval,c
  5196  0027F0  503A               	movf	___fttol@f1+1,w,c
  5197  0027F2  6E44               	movwf	___fttol@lval+1,c
  5198  0027F4  503B               	movf	___fttol@f1+2,w,c
  5199  0027F6  6E45               	movwf	___fttol@lval+2,c
  5200  0027F8  6A46               	clrf	___fttol@lval+3,c
  5201  0027FA  0E8E               	movlw	142
  5202  0027FC  5E47               	subwf	___fttol@exp1,f,c
  5203  0027FE  AE47               	btfss	___fttol@exp1,7,c
  5204  002800  D016               	goto	l2979
  5205  002802  5047               	movf	___fttol@exp1,w,c
  5206  002804  0A80               	xorlw	128
  5207  002806  0F8F               	addlw	143
  5208  002808  B0D8               	btfsc	status,0,c
  5209  00280A  D009               	goto	l2975
  5210  00280C  0E00               	movlw	0
  5211  00280E  6E39               	movwf	?___fttol,c
  5212  002810  0E00               	movlw	0
  5213  002812  6E3A               	movwf	?___fttol+1,c
  5214  002814  0E00               	movlw	0
  5215  002816  6E3B               	movwf	?___fttol+2,c
  5216  002818  0E00               	movlw	0
  5217  00281A  6E3C               	movwf	?___fttol+3,c
  5218  00281C  0012               	return	
  5219  00281E                     l2975:
  5220  00281E  90D8               	bcf	status,0,c
  5221  002820  3246               	rrcf	___fttol@lval+3,f,c
  5222  002822  3245               	rrcf	___fttol@lval+2,f,c
  5223  002824  3244               	rrcf	___fttol@lval+1,f,c
  5224  002826  3243               	rrcf	___fttol@lval,f,c
  5225  002828  3E47               	incfsz	___fttol@exp1,f,c
  5226  00282A  D7F9               	goto	l2975
  5227  00282C  D015               	goto	l2989
  5228  00282E                     l2979:
  5229  00282E  0E17               	movlw	23
  5230  002830  6447               	cpfsgt	___fttol@exp1,c
  5231  002832  D00F               	goto	l2987
  5232  002834  0E00               	movlw	0
  5233  002836  6E39               	movwf	?___fttol,c
  5234  002838  0E00               	movlw	0
  5235  00283A  6E3A               	movwf	?___fttol+1,c
  5236  00283C  0E00               	movlw	0
  5237  00283E  6E3B               	movwf	?___fttol+2,c
  5238  002840  0E00               	movlw	0
  5239  002842  6E3C               	movwf	?___fttol+3,c
  5240  002844  0012               	return	
  5241  002846                     l2985:
  5242  002846  90D8               	bcf	status,0,c
  5243  002848  3643               	rlcf	___fttol@lval,f,c
  5244  00284A  3644               	rlcf	___fttol@lval+1,f,c
  5245  00284C  3645               	rlcf	___fttol@lval+2,f,c
  5246  00284E  3646               	rlcf	___fttol@lval+3,f,c
  5247  002850  0647               	decf	___fttol@exp1,f,c
  5248  002852                     l2987:
  5249  002852  5047               	movf	___fttol@exp1,w,c
  5250  002854  A4D8               	btfss	status,2,c
  5251  002856  D7F7               	goto	l2985
  5252  002858                     l2989:
  5253  002858  5042               	movf	___fttol@sign1,w,c
  5254  00285A  B4D8               	btfsc	status,2,c
  5255  00285C  D008               	goto	l2993
  5256  00285E  1E46               	comf	___fttol@lval+3,f,c
  5257  002860  1E45               	comf	___fttol@lval+2,f,c
  5258  002862  1E44               	comf	___fttol@lval+1,f,c
  5259  002864  6C43               	negf	___fttol@lval,c
  5260  002866  0E00               	movlw	0
  5261  002868  2244               	addwfc	___fttol@lval+1,f,c
  5262  00286A  2245               	addwfc	___fttol@lval+2,f,c
  5263  00286C  2246               	addwfc	___fttol@lval+3,f,c
  5264  00286E                     l2993:
  5265  00286E  C043  F039         	movff	___fttol@lval,?___fttol
  5266  002872  C044  F03A         	movff	___fttol@lval+1,?___fttol+1
  5267  002876  C045  F03B         	movff	___fttol@lval+2,?___fttol+2
  5268  00287A  C046  F03C         	movff	___fttol@lval+3,?___fttol+3
  5269  00287E  0012               	return	
  5270  002880                     __end_of___fttol:
  5271                           	opt stack 0
  5272                           tblptru	equ	0xFF8
  5273                           tblptrh	equ	0xFF7
  5274                           tblptrl	equ	0xFF6
  5275                           tablat	equ	0xFF5
  5276                           prodh	equ	0xFF4
  5277                           prodl	equ	0xFF3
  5278                           intcon	equ	0xFF2
  5279                           postinc0	equ	0xFEE
  5280                           wreg	equ	0xFE8
  5281                           postdec1	equ	0xFE5
  5282                           fsr1l	equ	0xFE1
  5283                           indf2	equ	0xFDF
  5284                           postinc2	equ	0xFDE
  5285                           postdec2	equ	0xFDD
  5286                           fsr2h	equ	0xFDA
  5287                           fsr2l	equ	0xFD9
  5288                           status	equ	0xFD8
  5289                           
  5290 ;; *************** function ___ftsub *****************
  5291 ;; Defined at:
  5292 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  5293 ;; Parameters:    Size  Location     Type
  5294 ;;  f1              3   71[COMRAM] float 
  5295 ;;  f2              3   74[COMRAM] float 
  5296 ;; Auto vars:     Size  Location     Type
  5297 ;;		None
  5298 ;; Return value:  Size  Location     Type
  5299 ;;                  3   71[COMRAM] float 
  5300 ;; Registers used:
  5301 ;;		wreg, status,2, status,0, cstack
  5302 ;; Tracked objects:
  5303 ;;		On entry : 0/0
  5304 ;;		On exit  : 0/0
  5305 ;;		Unchanged: 0/0
  5306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5307 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5310 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5311 ;;Total ram usage:        6 bytes
  5312 ;; Hardware stack levels used:    1
  5313 ;; Hardware stack levels required when called:    3
  5314 ;; This function calls:
  5315 ;;		___ftadd
  5316 ;; This function is called by:
  5317 ;;		_printf
  5318 ;; This function uses a non-reentrant model
  5319 ;;
  5320                           
  5321                           	psect	text16
  5322  002ED4                     __ptext16:
  5323                           	opt stack 0
  5324  002ED4                     ___ftsub:
  5325                           	opt stack 25
  5326                           
  5327                           ;incstack = 0
  5328  002ED4  504B               	movf	___ftsub@f2,w,c
  5329  002ED6  104C               	iorwf	___ftsub@f2+1,w,c
  5330  002ED8  104D               	iorwf	___ftsub@f2+2,w,c
  5331  002EDA  B4D8               	btfsc	status,2,c
  5332  002EDC  D006               	goto	l2925
  5333  002EDE  0E00               	movlw	0
  5334  002EE0  1A4B               	xorwf	___ftsub@f2,f,c
  5335  002EE2  0E00               	movlw	0
  5336  002EE4  1A4C               	xorwf	___ftsub@f2+1,f,c
  5337  002EE6  0E80               	movlw	128
  5338  002EE8  1A4D               	xorwf	___ftsub@f2+2,f,c
  5339  002EEA                     l2925:
  5340  002EEA  C048  F03C         	movff	___ftsub@f1,___ftadd@f1
  5341  002EEE  C049  F03D         	movff	___ftsub@f1+1,___ftadd@f1+1
  5342  002EF2  C04A  F03E         	movff	___ftsub@f1+2,___ftadd@f1+2
  5343  002EF6  C04B  F03F         	movff	___ftsub@f2,___ftadd@f2
  5344  002EFA  C04C  F040         	movff	___ftsub@f2+1,___ftadd@f2+1
  5345  002EFE  C04D  F041         	movff	___ftsub@f2+2,___ftadd@f2+2
  5346  002F02  EC49  F011         	call	___ftadd	;wreg free
  5347  002F06  C03C  F048         	movff	?___ftadd,?___ftsub
  5348  002F0A  C03D  F049         	movff	?___ftadd+1,?___ftsub+1
  5349  002F0E  C03E  F04A         	movff	?___ftadd+2,?___ftsub+2
  5350  002F12  0012               	return	
  5351  002F14                     __end_of___ftsub:
  5352                           	opt stack 0
  5353                           tblptru	equ	0xFF8
  5354                           tblptrh	equ	0xFF7
  5355                           tblptrl	equ	0xFF6
  5356                           tablat	equ	0xFF5
  5357                           prodh	equ	0xFF4
  5358                           prodl	equ	0xFF3
  5359                           intcon	equ	0xFF2
  5360                           postinc0	equ	0xFEE
  5361                           wreg	equ	0xFE8
  5362                           postdec1	equ	0xFE5
  5363                           fsr1l	equ	0xFE1
  5364                           indf2	equ	0xFDF
  5365                           postinc2	equ	0xFDE
  5366                           postdec2	equ	0xFDD
  5367                           fsr2h	equ	0xFDA
  5368                           fsr2l	equ	0xFD9
  5369                           status	equ	0xFD8
  5370                           
  5371 ;; *************** function ___ftadd *****************
  5372 ;; Defined at:
  5373 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  5374 ;; Parameters:    Size  Location     Type
  5375 ;;  f1              3   59[COMRAM] float 
  5376 ;;  f2              3   62[COMRAM] float 
  5377 ;; Auto vars:     Size  Location     Type
  5378 ;;  exp1            1   70[COMRAM] unsigned char 
  5379 ;;  exp2            1   69[COMRAM] unsigned char 
  5380 ;;  sign            1   68[COMRAM] unsigned char 
  5381 ;; Return value:  Size  Location     Type
  5382 ;;                  3   59[COMRAM] float 
  5383 ;; Registers used:
  5384 ;;		wreg, status,2, status,0, cstack
  5385 ;; Tracked objects:
  5386 ;;		On entry : 0/0
  5387 ;;		On exit  : 0/0
  5388 ;;		Unchanged: 0/0
  5389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5390 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5391 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5392 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5393 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5394 ;;Total ram usage:       12 bytes
  5395 ;; Hardware stack levels used:    1
  5396 ;; Hardware stack levels required when called:    2
  5397 ;; This function calls:
  5398 ;;		___ftpack
  5399 ;; This function is called by:
  5400 ;;		_printf
  5401 ;;		___ftsub
  5402 ;;		_angleToPulseLength
  5403 ;; This function uses a non-reentrant model
  5404 ;;
  5405                           
  5406                           	psect	text17
  5407  002292                     __ptext17:
  5408                           	opt stack 0
  5409  002292                     ___ftadd:
  5410                           	opt stack 25
  5411                           
  5412                           ;incstack = 0
  5413  002292  C03E  F042         	movff	___ftadd@f1+2,??___ftadd
  5414  002296  6A43               	clrf	(??___ftadd+1)& (0+255),c
  5415  002298  6A44               	clrf	(??___ftadd+2)& (0+255),c
  5416  00229A  343D               	rlcf	___ftadd@f1+1,w,c
  5417  00229C  3642               	rlcf	??___ftadd& (0+255),f,c
  5418  00229E  E301               	bnc	u1851
  5419  0022A0  8043               	bsf	(??___ftadd+1)& (0+255),0,c
  5420  0022A2                     u1851:
  5421  0022A2  5042               	movf	??___ftadd,w,c
  5422  0022A4  6E47               	movwf	___ftadd@exp1,c
  5423  0022A6  C041  F042         	movff	___ftadd@f2+2,??___ftadd
  5424  0022AA  6A43               	clrf	(??___ftadd+1)& (0+255),c
  5425  0022AC  6A44               	clrf	(??___ftadd+2)& (0+255),c
  5426  0022AE  3440               	rlcf	___ftadd@f2+1,w,c
  5427  0022B0  3642               	rlcf	??___ftadd& (0+255),f,c
  5428  0022B2  E301               	bnc	u1861
  5429  0022B4  8043               	bsf	(??___ftadd+1)& (0+255),0,c
  5430  0022B6                     u1861:
  5431  0022B6  5042               	movf	??___ftadd,w,c
  5432  0022B8  6E46               	movwf	___ftadd@exp2,c
  5433  0022BA  5047               	movf	___ftadd@exp1,w,c
  5434  0022BC  B4D8               	btfsc	status,2,c
  5435  0022BE  D00B               	goto	l760
  5436  0022C0  5046               	movf	___ftadd@exp2,w,c
  5437  0022C2  5C47               	subwf	___ftadd@exp1,w,c
  5438  0022C4  B0D8               	btfsc	status,0,c
  5439  0022C6  D00E               	goto	l2543
  5440  0022C8  5047               	movf	___ftadd@exp1,w,c
  5441  0022CA  0800               	sublw	0
  5442  0022CC  2446               	addwf	___ftadd@exp2,w,c
  5443  0022CE  6E42               	movwf	??___ftadd& (0+255),c
  5444  0022D0  0E18               	movlw	24
  5445  0022D2  6442               	cpfsgt	??___ftadd,c
  5446  0022D4  D007               	goto	l2543
  5447  0022D6                     l760:
  5448  0022D6  C03F  F03C         	movff	___ftadd@f2,?___ftadd
  5449  0022DA  C040  F03D         	movff	___ftadd@f2+1,?___ftadd+1
  5450  0022DE  C041  F03E         	movff	___ftadd@f2+2,?___ftadd+2
  5451  0022E2  0012               	return	
  5452  0022E4                     l2543:
  5453  0022E4  5046               	movf	___ftadd@exp2,w,c
  5454  0022E6  B4D8               	btfsc	status,2,c
  5455  0022E8  D00B               	goto	l764
  5456  0022EA  5047               	movf	___ftadd@exp1,w,c
  5457  0022EC  5C46               	subwf	___ftadd@exp2,w,c
  5458  0022EE  B0D8               	btfsc	status,0,c
  5459  0022F0  D00E               	goto	l2549
  5460  0022F2  5046               	movf	___ftadd@exp2,w,c
  5461  0022F4  0800               	sublw	0
  5462  0022F6  2447               	addwf	___ftadd@exp1,w,c
  5463  0022F8  6E42               	movwf	??___ftadd& (0+255),c
  5464  0022FA  0E18               	movlw	24
  5465  0022FC  6442               	cpfsgt	??___ftadd,c
  5466  0022FE  D007               	goto	l2549
  5467  002300                     l764:
  5468  002300  C03C  F03C         	movff	___ftadd@f1,?___ftadd
  5469  002304  C03D  F03D         	movff	___ftadd@f1+1,?___ftadd+1
  5470  002308  C03E  F03E         	movff	___ftadd@f1+2,?___ftadd+2
  5471  00230C  0012               	return	
  5472  00230E                     l2549:
  5473  00230E  0E06               	movlw	6
  5474  002310  6E45               	movwf	___ftadd@sign,c
  5475  002312  BE3E               	btfsc	___ftadd@f1+2,7,c
  5476  002314  8E45               	bsf	___ftadd@sign,7,c
  5477  002316  BE41               	btfsc	___ftadd@f2+2,7,c
  5478  002318  8C45               	bsf	___ftadd@sign,6,c
  5479  00231A  8E3D               	bsf	___ftadd@f1+1,7,c
  5480  00231C  0EFF               	movlw	255
  5481  00231E  163C               	andwf	___ftadd@f1,f,c
  5482  002320  0EFF               	movlw	255
  5483  002322  163D               	andwf	___ftadd@f1+1,f,c
  5484  002324  0E00               	movlw	0
  5485  002326  163E               	andwf	___ftadd@f1+2,f,c
  5486  002328  8E40               	bsf	___ftadd@f2+1,7,c
  5487  00232A  0EFF               	movlw	255
  5488  00232C  163F               	andwf	___ftadd@f2,f,c
  5489  00232E  0EFF               	movlw	255
  5490  002330  1640               	andwf	___ftadd@f2+1,f,c
  5491  002332  0E00               	movlw	0
  5492  002334  1641               	andwf	___ftadd@f2+2,f,c
  5493  002336  5046               	movf	___ftadd@exp2,w,c
  5494  002338  5C47               	subwf	___ftadd@exp1,w,c
  5495  00233A  B0D8               	btfsc	status,0,c
  5496  00233C  D01B               	goto	l2575
  5497  00233E                     l2565:
  5498  00233E  90D8               	bcf	status,0,c
  5499  002340  363F               	rlcf	___ftadd@f2,f,c
  5500  002342  3640               	rlcf	___ftadd@f2+1,f,c
  5501  002344  3641               	rlcf	___ftadd@f2+2,f,c
  5502  002346  0646               	decf	___ftadd@exp2,f,c
  5503  002348  5047               	movf	___ftadd@exp1,w,c
  5504  00234A  1846               	xorwf	___ftadd@exp2,w,c
  5505  00234C  B4D8               	btfsc	status,2,c
  5506  00234E  D00D               	goto	l2573
  5507  002350  0645               	decf	___ftadd@sign,f,c
  5508  002352  C045  F042         	movff	___ftadd@sign,??___ftadd
  5509  002356  0E07               	movlw	7
  5510  002358  1642               	andwf	??___ftadd,f,c
  5511  00235A  B4D8               	btfsc	status,2,c
  5512  00235C  D006               	goto	l2573
  5513  00235E  D7EF               	goto	l2565
  5514  002360                     l2571:
  5515  002360  90D8               	bcf	status,0,c
  5516  002362  323E               	rrcf	___ftadd@f1+2,f,c
  5517  002364  323D               	rrcf	___ftadd@f1+1,f,c
  5518  002366  323C               	rrcf	___ftadd@f1,f,c
  5519  002368  2A47               	incf	___ftadd@exp1,f,c
  5520  00236A                     l2573:
  5521  00236A  5046               	movf	___ftadd@exp2,w,c
  5522  00236C  1847               	xorwf	___ftadd@exp1,w,c
  5523  00236E  B4D8               	btfsc	status,2,c
  5524  002370  D01F               	goto	l775
  5525  002372  D7F6               	goto	l2571
  5526  002374                     l2575:
  5527  002374  5047               	movf	___ftadd@exp1,w,c
  5528  002376  5C46               	subwf	___ftadd@exp2,w,c
  5529  002378  B0D8               	btfsc	status,0,c
  5530  00237A  D01A               	goto	l775
  5531  00237C                     l2577:
  5532  00237C  90D8               	bcf	status,0,c
  5533  00237E  363C               	rlcf	___ftadd@f1,f,c
  5534  002380  363D               	rlcf	___ftadd@f1+1,f,c
  5535  002382  363E               	rlcf	___ftadd@f1+2,f,c
  5536  002384  0647               	decf	___ftadd@exp1,f,c
  5537  002386  5047               	movf	___ftadd@exp1,w,c
  5538  002388  1846               	xorwf	___ftadd@exp2,w,c
  5539  00238A  B4D8               	btfsc	status,2,c
  5540  00238C  D00D               	goto	l2585
  5541  00238E  0645               	decf	___ftadd@sign,f,c
  5542  002390  C045  F042         	movff	___ftadd@sign,??___ftadd
  5543  002394  0E07               	movlw	7
  5544  002396  1642               	andwf	??___ftadd,f,c
  5545  002398  B4D8               	btfsc	status,2,c
  5546  00239A  D006               	goto	l2585
  5547  00239C  D7EF               	goto	l2577
  5548  00239E                     l2583:
  5549  00239E  90D8               	bcf	status,0,c
  5550  0023A0  3241               	rrcf	___ftadd@f2+2,f,c
  5551  0023A2  3240               	rrcf	___ftadd@f2+1,f,c
  5552  0023A4  323F               	rrcf	___ftadd@f2,f,c
  5553  0023A6  2A46               	incf	___ftadd@exp2,f,c
  5554  0023A8                     l2585:
  5555  0023A8  5046               	movf	___ftadd@exp2,w,c
  5556  0023AA  1847               	xorwf	___ftadd@exp1,w,c
  5557  0023AC  A4D8               	btfss	status,2,c
  5558  0023AE  D7F7               	goto	l2583
  5559  0023B0                     l775:
  5560  0023B0  AE45               	btfss	___ftadd@sign,7,c
  5561  0023B2  D00C               	goto	l784
  5562  0023B4  0EFF               	movlw	255
  5563  0023B6  1A3C               	xorwf	___ftadd@f1,f,c
  5564  0023B8  0EFF               	movlw	255
  5565  0023BA  1A3D               	xorwf	___ftadd@f1+1,f,c
  5566  0023BC  0EFF               	movlw	255
  5567  0023BE  1A3E               	xorwf	___ftadd@f1+2,f,c
  5568  0023C0  0E01               	movlw	1
  5569  0023C2  263C               	addwf	___ftadd@f1,f,c
  5570  0023C4  0E00               	movlw	0
  5571  0023C6  223D               	addwfc	___ftadd@f1+1,f,c
  5572  0023C8  0E00               	movlw	0
  5573  0023CA  223E               	addwfc	___ftadd@f1+2,f,c
  5574  0023CC                     l784:
  5575  0023CC  AC45               	btfss	___ftadd@sign,6,c
  5576  0023CE  D00C               	goto	l2591
  5577  0023D0  0EFF               	movlw	255
  5578  0023D2  1A3F               	xorwf	___ftadd@f2,f,c
  5579  0023D4  0EFF               	movlw	255
  5580  0023D6  1A40               	xorwf	___ftadd@f2+1,f,c
  5581  0023D8  0EFF               	movlw	255
  5582  0023DA  1A41               	xorwf	___ftadd@f2+2,f,c
  5583  0023DC  0E01               	movlw	1
  5584  0023DE  263F               	addwf	___ftadd@f2,f,c
  5585  0023E0  0E00               	movlw	0
  5586  0023E2  2240               	addwfc	___ftadd@f2+1,f,c
  5587  0023E4  0E00               	movlw	0
  5588  0023E6  2241               	addwfc	___ftadd@f2+2,f,c
  5589  0023E8                     l2591:
  5590  0023E8  0E00               	movlw	0
  5591  0023EA  6E45               	movwf	___ftadd@sign,c
  5592  0023EC  503C               	movf	___ftadd@f1,w,c
  5593  0023EE  263F               	addwf	___ftadd@f2,f,c
  5594  0023F0  503D               	movf	___ftadd@f1+1,w,c
  5595  0023F2  2240               	addwfc	___ftadd@f2+1,f,c
  5596  0023F4  503E               	movf	___ftadd@f1+2,w,c
  5597  0023F6  2241               	addwfc	___ftadd@f2+2,f,c
  5598  0023F8  AE41               	btfss	___ftadd@f2+2,7,c
  5599  0023FA  D00E               	goto	l2601
  5600  0023FC  0EFF               	movlw	255
  5601  0023FE  1A3F               	xorwf	___ftadd@f2,f,c
  5602  002400  0EFF               	movlw	255
  5603  002402  1A40               	xorwf	___ftadd@f2+1,f,c
  5604  002404  0EFF               	movlw	255
  5605  002406  1A41               	xorwf	___ftadd@f2+2,f,c
  5606  002408  0E01               	movlw	1
  5607  00240A  263F               	addwf	___ftadd@f2,f,c
  5608  00240C  0E00               	movlw	0
  5609  00240E  2240               	addwfc	___ftadd@f2+1,f,c
  5610  002410  0E00               	movlw	0
  5611  002412  2241               	addwfc	___ftadd@f2+2,f,c
  5612  002414  0E01               	movlw	1
  5613  002416  6E45               	movwf	___ftadd@sign,c
  5614  002418                     l2601:
  5615  002418  C03F  F00F         	movff	___ftadd@f2,___ftpack@arg
  5616  00241C  C040  F010         	movff	___ftadd@f2+1,___ftpack@arg+1
  5617  002420  C041  F011         	movff	___ftadd@f2+2,___ftpack@arg+2
  5618  002424  C047  F012         	movff	___ftadd@exp1,___ftpack@exp
  5619  002428  C045  F013         	movff	___ftadd@sign,___ftpack@sign
  5620  00242C  ECB3  F014         	call	___ftpack	;wreg free
  5621  002430  C00F  F03C         	movff	?___ftpack,?___ftadd
  5622  002434  C010  F03D         	movff	?___ftpack+1,?___ftadd+1
  5623  002438  C011  F03E         	movff	?___ftpack+2,?___ftadd+2
  5624  00243C  0012               	return	
  5625  00243E                     __end_of___ftadd:
  5626                           	opt stack 0
  5627                           tblptru	equ	0xFF8
  5628                           tblptrh	equ	0xFF7
  5629                           tblptrl	equ	0xFF6
  5630                           tablat	equ	0xFF5
  5631                           prodh	equ	0xFF4
  5632                           prodl	equ	0xFF3
  5633                           intcon	equ	0xFF2
  5634                           postinc0	equ	0xFEE
  5635                           wreg	equ	0xFE8
  5636                           postdec1	equ	0xFE5
  5637                           fsr1l	equ	0xFE1
  5638                           indf2	equ	0xFDF
  5639                           postinc2	equ	0xFDE
  5640                           postdec2	equ	0xFDD
  5641                           fsr2h	equ	0xFDA
  5642                           fsr2l	equ	0xFD9
  5643                           status	equ	0xFD8
  5644                           
  5645 ;; *************** function ___ftneg *****************
  5646 ;; Defined at:
  5647 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  5648 ;; Parameters:    Size  Location     Type
  5649 ;;  f1              3   14[COMRAM] float 
  5650 ;; Auto vars:     Size  Location     Type
  5651 ;;		None
  5652 ;; Return value:  Size  Location     Type
  5653 ;;                  3   14[COMRAM] float 
  5654 ;; Registers used:
  5655 ;;		wreg, status,2, status,0
  5656 ;; Tracked objects:
  5657 ;;		On entry : 0/0
  5658 ;;		On exit  : 0/0
  5659 ;;		Unchanged: 0/0
  5660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5661 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5664 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5665 ;;Total ram usage:        3 bytes
  5666 ;; Hardware stack levels used:    1
  5667 ;; Hardware stack levels required when called:    1
  5668 ;; This function calls:
  5669 ;;		Nothing
  5670 ;; This function is called by:
  5671 ;;		_printf
  5672 ;;		_angleToPulseLength
  5673 ;; This function uses a non-reentrant model
  5674 ;;
  5675                           
  5676                           	psect	text18
  5677  003002                     __ptext18:
  5678                           	opt stack 0
  5679  003002                     ___ftneg:
  5680                           	opt stack 27
  5681                           
  5682                           ;incstack = 0
  5683  003002  500F               	movf	___ftneg@f1,w,c
  5684  003004  1010               	iorwf	___ftneg@f1+1,w,c
  5685  003006  1011               	iorwf	___ftneg@f1+2,w,c
  5686  003008  B4D8               	btfsc	status,2,c
  5687  00300A  D006               	goto	l834
  5688  00300C  0E00               	movlw	0
  5689  00300E  1A0F               	xorwf	___ftneg@f1,f,c
  5690  003010  0E00               	movlw	0
  5691  003012  1A10               	xorwf	___ftneg@f1+1,f,c
  5692  003014  0E80               	movlw	128
  5693  003016  1A11               	xorwf	___ftneg@f1+2,f,c
  5694  003018                     l834:
  5695  003018  C00F  F00F         	movff	___ftneg@f1,?___ftneg
  5696  00301C  C010  F010         	movff	___ftneg@f1+1,?___ftneg+1
  5697  003020  C011  F011         	movff	___ftneg@f1+2,?___ftneg+2
  5698  003024  0012               	return		;funcret
  5699  003026                     __end_of___ftneg:
  5700                           	opt stack 0
  5701                           tblptru	equ	0xFF8
  5702                           tblptrh	equ	0xFF7
  5703                           tblptrl	equ	0xFF6
  5704                           tablat	equ	0xFF5
  5705                           prodh	equ	0xFF4
  5706                           prodl	equ	0xFF3
  5707                           intcon	equ	0xFF2
  5708                           postinc0	equ	0xFEE
  5709                           wreg	equ	0xFE8
  5710                           postdec1	equ	0xFE5
  5711                           fsr1l	equ	0xFE1
  5712                           indf2	equ	0xFDF
  5713                           postinc2	equ	0xFDE
  5714                           postdec2	equ	0xFDD
  5715                           fsr2h	equ	0xFDA
  5716                           fsr2l	equ	0xFD9
  5717                           status	equ	0xFD8
  5718                           
  5719 ;; *************** function ___ftge *****************
  5720 ;; Defined at:
  5721 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  5722 ;; Parameters:    Size  Location     Type
  5723 ;;  ff1             3   14[COMRAM] float 
  5724 ;;  ff2             3   17[COMRAM] float 
  5725 ;; Auto vars:     Size  Location     Type
  5726 ;;		None
  5727 ;; Return value:  Size  Location     Type
  5728 ;;		None               void
  5729 ;; Registers used:
  5730 ;;		wreg, status,2, status,0
  5731 ;; Tracked objects:
  5732 ;;		On entry : 0/0
  5733 ;;		On exit  : 0/0
  5734 ;;		Unchanged: 0/0
  5735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5736 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5738 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5739 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5740 ;;Total ram usage:        9 bytes
  5741 ;; Hardware stack levels used:    1
  5742 ;; Hardware stack levels required when called:    1
  5743 ;; This function calls:
  5744 ;;		Nothing
  5745 ;; This function is called by:
  5746 ;;		_printf
  5747 ;; This function uses a non-reentrant model
  5748 ;;
  5749                           
  5750                           	psect	text19
  5751  002A14                     __ptext19:
  5752                           	opt stack 0
  5753  002A14                     ___ftge:
  5754                           	opt stack 27
  5755                           
  5756                           ;incstack = 0
  5757  002A14  AE11               	btfss	___ftge@ff1+2,7,c
  5758  002A16  D016               	goto	l2933
  5759  002A18  C00F  F015         	movff	___ftge@ff1,??___ftge
  5760  002A1C  C010  F016         	movff	___ftge@ff1+1,??___ftge+1
  5761  002A20  C011  F017         	movff	___ftge@ff1+2,??___ftge+2
  5762  002A24  1E15               	comf	??___ftge,f,c
  5763  002A26  1E16               	comf	??___ftge+1,f,c
  5764  002A28  1E17               	comf	??___ftge+2,f,c
  5765  002A2A  2A15               	incf	??___ftge,f,c
  5766  002A2C  0E00               	movlw	0
  5767  002A2E  2216               	addwfc	??___ftge+1,f,c
  5768  002A30  2217               	addwfc	??___ftge+2,f,c
  5769  002A32  0E00               	movlw	0
  5770  002A34  2415               	addwf	??___ftge,w,c
  5771  002A36  6E0F               	movwf	___ftge@ff1,c
  5772  002A38  0E00               	movlw	0
  5773  002A3A  2016               	addwfc	??___ftge+1,w,c
  5774  002A3C  6E10               	movwf	___ftge@ff1+1,c
  5775  002A3E  0E80               	movlw	128
  5776  002A40  2017               	addwfc	??___ftge+2,w,c
  5777  002A42  6E11               	movwf	___ftge@ff1+2,c
  5778  002A44                     l2933:
  5779  002A44  AE14               	btfss	___ftge@ff2+2,7,c
  5780  002A46  D016               	goto	l2937
  5781  002A48  C012  F015         	movff	___ftge@ff2,??___ftge
  5782  002A4C  C013  F016         	movff	___ftge@ff2+1,??___ftge+1
  5783  002A50  C014  F017         	movff	___ftge@ff2+2,??___ftge+2
  5784  002A54  1E15               	comf	??___ftge,f,c
  5785  002A56  1E16               	comf	??___ftge+1,f,c
  5786  002A58  1E17               	comf	??___ftge+2,f,c
  5787  002A5A  2A15               	incf	??___ftge,f,c
  5788  002A5C  0E00               	movlw	0
  5789  002A5E  2216               	addwfc	??___ftge+1,f,c
  5790  002A60  2217               	addwfc	??___ftge+2,f,c
  5791  002A62  0E00               	movlw	0
  5792  002A64  2415               	addwf	??___ftge,w,c
  5793  002A66  6E12               	movwf	___ftge@ff2,c
  5794  002A68  0E00               	movlw	0
  5795  002A6A  2016               	addwfc	??___ftge+1,w,c
  5796  002A6C  6E13               	movwf	___ftge@ff2+1,c
  5797  002A6E  0E80               	movlw	128
  5798  002A70  2017               	addwfc	??___ftge+2,w,c
  5799  002A72  6E14               	movwf	___ftge@ff2+2,c
  5800  002A74                     l2937:
  5801  002A74  0E00               	movlw	0
  5802  002A76  1A0F               	xorwf	___ftge@ff1,f,c
  5803  002A78  0E00               	movlw	0
  5804  002A7A  1A10               	xorwf	___ftge@ff1+1,f,c
  5805  002A7C  0E80               	movlw	128
  5806  002A7E  1A11               	xorwf	___ftge@ff1+2,f,c
  5807  002A80  0E00               	movlw	0
  5808  002A82  1A12               	xorwf	___ftge@ff2,f,c
  5809  002A84  0E00               	movlw	0
  5810  002A86  1A13               	xorwf	___ftge@ff2+1,f,c
  5811  002A88  0E80               	movlw	128
  5812  002A8A  1A14               	xorwf	___ftge@ff2+2,f,c
  5813  002A8C  5012               	movf	___ftge@ff2,w,c
  5814  002A8E  5C0F               	subwf	___ftge@ff1,w,c
  5815  002A90  5013               	movf	___ftge@ff2+1,w,c
  5816  002A92  5810               	subwfb	___ftge@ff1+1,w,c
  5817  002A94  5014               	movf	___ftge@ff2+2,w,c
  5818  002A96  5811               	subwfb	___ftge@ff1+2,w,c
  5819  002A98  B0D8               	btfsc	status,0,c
  5820  002A9A  D002               	goto	l2943
  5821  002A9C  90D8               	bcf	status,0,c
  5822  002A9E  0012               	return	
  5823  002AA0                     l2943:
  5824  002AA0  80D8               	bsf	status,0,c
  5825  002AA2  0012               	return	
  5826  002AA4                     __end_of___ftge:
  5827                           	opt stack 0
  5828                           tblptru	equ	0xFF8
  5829                           tblptrh	equ	0xFF7
  5830                           tblptrl	equ	0xFF6
  5831                           tablat	equ	0xFF5
  5832                           prodh	equ	0xFF4
  5833                           prodl	equ	0xFF3
  5834                           intcon	equ	0xFF2
  5835                           postinc0	equ	0xFEE
  5836                           wreg	equ	0xFE8
  5837                           postdec1	equ	0xFE5
  5838                           fsr1l	equ	0xFE1
  5839                           indf2	equ	0xFDF
  5840                           postinc2	equ	0xFDE
  5841                           postdec2	equ	0xFDD
  5842                           fsr2h	equ	0xFDA
  5843                           fsr2l	equ	0xFD9
  5844                           status	equ	0xFD8
  5845                           
  5846 ;; *************** function _initT0 *****************
  5847 ;; Defined at:
  5848 ;;		line 52 in file "timer.c"
  5849 ;; Parameters:    Size  Location     Type
  5850 ;;		None
  5851 ;; Auto vars:     Size  Location     Type
  5852 ;;		None
  5853 ;; Return value:  Size  Location     Type
  5854 ;;                  1    wreg      void 
  5855 ;; Registers used:
  5856 ;;		wreg, status,2, status,0
  5857 ;; Tracked objects:
  5858 ;;		On entry : 0/0
  5859 ;;		On exit  : 0/0
  5860 ;;		Unchanged: 0/0
  5861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5865 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5866 ;;Total ram usage:        0 bytes
  5867 ;; Hardware stack levels used:    1
  5868 ;; Hardware stack levels required when called:    1
  5869 ;; This function calls:
  5870 ;;		Nothing
  5871 ;; This function is called by:
  5872 ;;		_testFrequency
  5873 ;;		_initServo
  5874 ;; This function uses a non-reentrant model
  5875 ;;
  5876                           
  5877                           	psect	text20
  5878  00307C                     __ptext20:
  5879                           	opt stack 0
  5880  00307C                     _initT0:
  5881                           	opt stack 28
  5882                           
  5883                           ;timer.c: 53: T0CON = 0;
  5884                           
  5885                           ;incstack = 0
  5886  00307C  0E00               	movlw	0
  5887  00307E  6ED5               	movwf	4053,c	;volatile
  5888                           
  5889                           ;timer.c: 56: T0CON |= 0b111;
  5890  003080  0E07               	movlw	7
  5891  003082  12D5               	iorwf	4053,f,c	;volatile
  5892                           
  5893                           ;timer.c: 58: TMR0IE = 1;
  5894  003084  8AF2               	bsf	intcon,5,c	;volatile
  5895                           
  5896                           ;timer.c: 59: PEIE = 1;
  5897  003086  8CF2               	bsf	intcon,6,c	;volatile
  5898                           
  5899                           ;timer.c: 60: (INTCONbits.GIE = 1);
  5900  003088  8EF2               	bsf	intcon,7,c	;volatile
  5901  00308A  0012               	return		;funcret
  5902  00308C                     __end_of_initT0:
  5903                           	opt stack 0
  5904                           tblptru	equ	0xFF8
  5905                           tblptrh	equ	0xFF7
  5906                           tblptrl	equ	0xFF6
  5907                           tablat	equ	0xFF5
  5908                           prodh	equ	0xFF4
  5909                           prodl	equ	0xFF3
  5910                           intcon	equ	0xFF2
  5911                           postinc0	equ	0xFEE
  5912                           wreg	equ	0xFE8
  5913                           postdec1	equ	0xFE5
  5914                           fsr1l	equ	0xFE1
  5915                           indf2	equ	0xFDF
  5916                           postinc2	equ	0xFDE
  5917                           postdec2	equ	0xFDD
  5918                           fsr2h	equ	0xFDA
  5919                           fsr2l	equ	0xFD9
  5920                           status	equ	0xFD8
  5921                           
  5922 ;; *************** function ___ftdiv *****************
  5923 ;; Defined at:
  5924 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  5925 ;; Parameters:    Size  Location     Type
  5926 ;;  f1              3   32[COMRAM] float 
  5927 ;;  f2              3   35[COMRAM] float 
  5928 ;; Auto vars:     Size  Location     Type
  5929 ;;  f3              3   42[COMRAM] float 
  5930 ;;  sign            1   46[COMRAM] unsigned char 
  5931 ;;  exp             1   45[COMRAM] unsigned char 
  5932 ;;  cntr            1   41[COMRAM] unsigned char 
  5933 ;; Return value:  Size  Location     Type
  5934 ;;                  3   32[COMRAM] float 
  5935 ;; Registers used:
  5936 ;;		wreg, status,2, status,0, cstack
  5937 ;; Tracked objects:
  5938 ;;		On entry : 0/0
  5939 ;;		On exit  : 0/0
  5940 ;;		Unchanged: 0/0
  5941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5942 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5943 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5944 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5945 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5946 ;;Total ram usage:       15 bytes
  5947 ;; Hardware stack levels used:    1
  5948 ;; Hardware stack levels required when called:    2
  5949 ;; This function calls:
  5950 ;;		___ftpack
  5951 ;; This function is called by:
  5952 ;;		_testFrequency
  5953 ;;		_angleToPulseLength
  5954 ;; This function uses a non-reentrant model
  5955 ;;
  5956                           
  5957                           	psect	text21
  5958  002880                     __ptext21:
  5959                           	opt stack 0
  5960  002880                     ___ftdiv:
  5961                           	opt stack 27
  5962                           
  5963                           ;incstack = 0
  5964  002880  C023  F027         	movff	___ftdiv@f1+2,??___ftdiv
  5965  002884  6A28               	clrf	(??___ftdiv+1)& (0+255),c
  5966  002886  6A29               	clrf	(??___ftdiv+2)& (0+255),c
  5967  002888  3422               	rlcf	___ftdiv@f1+1,w,c
  5968  00288A  3627               	rlcf	??___ftdiv& (0+255),f,c
  5969  00288C  E301               	bnc	u3121
  5970  00288E  8028               	bsf	(??___ftdiv+1)& (0+255),0,c
  5971  002890                     u3121:
  5972  002890  5027               	movf	??___ftdiv,w,c
  5973  002892  6E2E               	movwf	___ftdiv@exp,c
  5974  002894  502E               	movf	___ftdiv@exp,w,c
  5975  002896  A4D8               	btfss	status,2,c
  5976  002898  D007               	goto	l3339
  5977  00289A  0E00               	movlw	0
  5978  00289C  6E21               	movwf	?___ftdiv,c
  5979  00289E  0E00               	movlw	0
  5980  0028A0  6E22               	movwf	?___ftdiv+1,c
  5981  0028A2  0E00               	movlw	0
  5982  0028A4  6E23               	movwf	?___ftdiv+2,c
  5983  0028A6  0012               	return	
  5984  0028A8                     l3339:
  5985  0028A8  C026  F027         	movff	___ftdiv@f2+2,??___ftdiv
  5986  0028AC  6A28               	clrf	(??___ftdiv+1)& (0+255),c
  5987  0028AE  6A29               	clrf	(??___ftdiv+2)& (0+255),c
  5988  0028B0  3425               	rlcf	___ftdiv@f2+1,w,c
  5989  0028B2  3627               	rlcf	??___ftdiv& (0+255),f,c
  5990  0028B4  E301               	bnc	u3141
  5991  0028B6  8028               	bsf	(??___ftdiv+1)& (0+255),0,c
  5992  0028B8                     u3141:
  5993  0028B8  5027               	movf	??___ftdiv,w,c
  5994  0028BA  6E2F               	movwf	___ftdiv@sign,c
  5995  0028BC  502F               	movf	___ftdiv@sign,w,c
  5996  0028BE  A4D8               	btfss	status,2,c
  5997  0028C0  D007               	goto	l3345
  5998  0028C2  0E00               	movlw	0
  5999  0028C4  6E21               	movwf	?___ftdiv,c
  6000  0028C6  0E00               	movlw	0
  6001  0028C8  6E22               	movwf	?___ftdiv+1,c
  6002  0028CA  0E00               	movlw	0
  6003  0028CC  6E23               	movwf	?___ftdiv+2,c
  6004  0028CE  0012               	return	
  6005  0028D0                     l3345:
  6006  0028D0  0E00               	movlw	0
  6007  0028D2  6E2B               	movwf	___ftdiv@f3,c
  6008  0028D4  0E00               	movlw	0
  6009  0028D6  6E2C               	movwf	___ftdiv@f3+1,c
  6010  0028D8  0E00               	movlw	0
  6011  0028DA  6E2D               	movwf	___ftdiv@f3+2,c
  6012  0028DC  502F               	movf	___ftdiv@sign,w,c
  6013  0028DE  0F89               	addlw	137
  6014  0028E0  5E2E               	subwf	___ftdiv@exp,f,c
  6015  0028E2  C023  F02F         	movff	___ftdiv@f1+2,___ftdiv@sign
  6016  0028E6  5026               	movf	___ftdiv@f2+2,w,c
  6017  0028E8  1A2F               	xorwf	___ftdiv@sign,f,c
  6018  0028EA  0E80               	movlw	128
  6019  0028EC  162F               	andwf	___ftdiv@sign,f,c
  6020  0028EE  8E22               	bsf	___ftdiv@f1+1,7,c
  6021  0028F0  0EFF               	movlw	255
  6022  0028F2  1621               	andwf	___ftdiv@f1,f,c
  6023  0028F4  0EFF               	movlw	255
  6024  0028F6  1622               	andwf	___ftdiv@f1+1,f,c
  6025  0028F8  0E00               	movlw	0
  6026  0028FA  1623               	andwf	___ftdiv@f1+2,f,c
  6027  0028FC  8E25               	bsf	___ftdiv@f2+1,7,c
  6028  0028FE  0EFF               	movlw	255
  6029  002900  1624               	andwf	___ftdiv@f2,f,c
  6030  002902  0EFF               	movlw	255
  6031  002904  1625               	andwf	___ftdiv@f2+1,f,c
  6032  002906  0E00               	movlw	0
  6033  002908  1626               	andwf	___ftdiv@f2+2,f,c
  6034  00290A  0E18               	movlw	24
  6035  00290C  6E2A               	movwf	___ftdiv@cntr,c
  6036  00290E                     l3365:
  6037  00290E  90D8               	bcf	status,0,c
  6038  002910  362B               	rlcf	___ftdiv@f3,f,c
  6039  002912  362C               	rlcf	___ftdiv@f3+1,f,c
  6040  002914  362D               	rlcf	___ftdiv@f3+2,f,c
  6041  002916  5024               	movf	___ftdiv@f2,w,c
  6042  002918  5C21               	subwf	___ftdiv@f1,w,c
  6043  00291A  5025               	movf	___ftdiv@f2+1,w,c
  6044  00291C  5822               	subwfb	___ftdiv@f1+1,w,c
  6045  00291E  5026               	movf	___ftdiv@f2+2,w,c
  6046  002920  5823               	subwfb	___ftdiv@f1+2,w,c
  6047  002922  A0D8               	btfss	status,0,c
  6048  002924  D007               	goto	l795
  6049  002926  5024               	movf	___ftdiv@f2,w,c
  6050  002928  5E21               	subwf	___ftdiv@f1,f,c
  6051  00292A  5025               	movf	___ftdiv@f2+1,w,c
  6052  00292C  5A22               	subwfb	___ftdiv@f1+1,f,c
  6053  00292E  5026               	movf	___ftdiv@f2+2,w,c
  6054  002930  5A23               	subwfb	___ftdiv@f1+2,f,c
  6055  002932  802B               	bsf	___ftdiv@f3,0,c
  6056  002934                     l795:
  6057  002934  90D8               	bcf	status,0,c
  6058  002936  3621               	rlcf	___ftdiv@f1,f,c
  6059  002938  3622               	rlcf	___ftdiv@f1+1,f,c
  6060  00293A  3623               	rlcf	___ftdiv@f1+2,f,c
  6061  00293C  2E2A               	decfsz	___ftdiv@cntr,f,c
  6062  00293E  D7E7               	goto	l3365
  6063  002940  C02B  F00F         	movff	___ftdiv@f3,___ftpack@arg
  6064  002944  C02C  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6065  002948  C02D  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6066  00294C  C02E  F012         	movff	___ftdiv@exp,___ftpack@exp
  6067  002950  C02F  F013         	movff	___ftdiv@sign,___ftpack@sign
  6068  002954  ECB3  F014         	call	___ftpack	;wreg free
  6069  002958  C00F  F021         	movff	?___ftpack,?___ftdiv
  6070  00295C  C010  F022         	movff	?___ftpack+1,?___ftdiv+1
  6071  002960  C011  F023         	movff	?___ftpack+2,?___ftdiv+2
  6072  002964  0012               	return	
  6073  002966                     __end_of___ftdiv:
  6074                           	opt stack 0
  6075                           tblptru	equ	0xFF8
  6076                           tblptrh	equ	0xFF7
  6077                           tblptrl	equ	0xFF6
  6078                           tablat	equ	0xFF5
  6079                           prodh	equ	0xFF4
  6080                           prodl	equ	0xFF3
  6081                           intcon	equ	0xFF2
  6082                           postinc0	equ	0xFEE
  6083                           wreg	equ	0xFE8
  6084                           postdec1	equ	0xFE5
  6085                           fsr1l	equ	0xFE1
  6086                           indf2	equ	0xFDF
  6087                           postinc2	equ	0xFDE
  6088                           postdec2	equ	0xFDD
  6089                           fsr2h	equ	0xFDA
  6090                           fsr2l	equ	0xFD9
  6091                           status	equ	0xFD8
  6092                           
  6093 ;; *************** function ___altoft *****************
  6094 ;; Defined at:
  6095 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  6096 ;; Parameters:    Size  Location     Type
  6097 ;;  c               4   22[COMRAM] long 
  6098 ;; Auto vars:     Size  Location     Type
  6099 ;;  sign            1   31[COMRAM] unsigned char 
  6100 ;;  exp             1   30[COMRAM] unsigned char 
  6101 ;; Return value:  Size  Location     Type
  6102 ;;                  3   22[COMRAM] float 
  6103 ;; Registers used:
  6104 ;;		wreg, status,2, status,0, cstack
  6105 ;; Tracked objects:
  6106 ;;		On entry : 0/0
  6107 ;;		On exit  : 0/0
  6108 ;;		Unchanged: 0/0
  6109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6110 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6111 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6112 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6113 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6114 ;;Total ram usage:       10 bytes
  6115 ;; Hardware stack levels used:    1
  6116 ;; Hardware stack levels required when called:    2
  6117 ;; This function calls:
  6118 ;;		___ftpack
  6119 ;; This function is called by:
  6120 ;;		_testFrequency
  6121 ;;		_angleToPulseLength
  6122 ;; This function uses a non-reentrant model
  6123 ;;
  6124                           
  6125                           	psect	text22
  6126  002C24                     __ptext22:
  6127                           	opt stack 0
  6128  002C24                     ___altoft:
  6129                           	opt stack 27
  6130                           
  6131                           ;incstack = 0
  6132  002C24  0E00               	movlw	0
  6133  002C26  6E20               	movwf	___altoft@sign,c
  6134  002C28  0E8E               	movlw	142
  6135  002C2A  6E1F               	movwf	___altoft@exp,c
  6136  002C2C  AE1A               	btfss	___altoft@c+3,7,c
  6137  002C2E  D011               	goto	l3327
  6138  002C30  1E1A               	comf	___altoft@c+3,f,c
  6139  002C32  1E19               	comf	___altoft@c+2,f,c
  6140  002C34  1E18               	comf	___altoft@c+1,f,c
  6141  002C36  6C17               	negf	___altoft@c,c
  6142  002C38  0E00               	movlw	0
  6143  002C3A  2218               	addwfc	___altoft@c+1,f,c
  6144  002C3C  2219               	addwfc	___altoft@c+2,f,c
  6145  002C3E  221A               	addwfc	___altoft@c+3,f,c
  6146  002C40  0E01               	movlw	1
  6147  002C42  6E20               	movwf	___altoft@sign,c
  6148  002C44  D006               	goto	l3327
  6149  002C46                     l3325:
  6150  002C46  90D8               	bcf	status,0,c
  6151  002C48  321A               	rrcf	___altoft@c+3,f,c
  6152  002C4A  3219               	rrcf	___altoft@c+2,f,c
  6153  002C4C  3218               	rrcf	___altoft@c+1,f,c
  6154  002C4E  3217               	rrcf	___altoft@c,f,c
  6155  002C50  2A1F               	incf	___altoft@exp,f,c
  6156  002C52                     l3327:
  6157  002C52  0E00               	movlw	0
  6158  002C54  1417               	andwf	___altoft@c,w,c
  6159  002C56  6E1B               	movwf	??___altoft& (0+255),c
  6160  002C58  0E00               	movlw	0
  6161  002C5A  1418               	andwf	___altoft@c+1,w,c
  6162  002C5C  6E1C               	movwf	(??___altoft+1)& (0+255),c
  6163  002C5E  0E00               	movlw	0
  6164  002C60  1419               	andwf	___altoft@c+2,w,c
  6165  002C62  6E1D               	movwf	(??___altoft+2)& (0+255),c
  6166  002C64  0EFF               	movlw	255
  6167  002C66  141A               	andwf	___altoft@c+3,w,c
  6168  002C68  6E1E               	movwf	(??___altoft+3)& (0+255),c
  6169  002C6A  501B               	movf	??___altoft,w,c
  6170  002C6C  101C               	iorwf	??___altoft+1,w,c
  6171  002C6E  101D               	iorwf	??___altoft+2,w,c
  6172  002C70  101E               	iorwf	??___altoft+3,w,c
  6173  002C72  A4D8               	btfss	status,2,c
  6174  002C74  D7E8               	goto	l3325
  6175  002C76  C017  F00F         	movff	___altoft@c,___ftpack@arg
  6176  002C7A  C018  F010         	movff	___altoft@c+1,___ftpack@arg+1
  6177  002C7E  C019  F011         	movff	___altoft@c+2,___ftpack@arg+2
  6178  002C82  C01F  F012         	movff	___altoft@exp,___ftpack@exp
  6179  002C86  C020  F013         	movff	___altoft@sign,___ftpack@sign
  6180  002C8A  ECB3  F014         	call	___ftpack	;wreg free
  6181  002C8E  C00F  F017         	movff	?___ftpack,?___altoft
  6182  002C92  C010  F018         	movff	?___ftpack+1,?___altoft+1
  6183  002C96  C011  F019         	movff	?___ftpack+2,?___altoft+2
  6184  002C9A  0012               	return	
  6185  002C9C                     __end_of___altoft:
  6186                           	opt stack 0
  6187                           tblptru	equ	0xFF8
  6188                           tblptrh	equ	0xFF7
  6189                           tblptrl	equ	0xFF6
  6190                           tablat	equ	0xFF5
  6191                           prodh	equ	0xFF4
  6192                           prodl	equ	0xFF3
  6193                           intcon	equ	0xFF2
  6194                           postinc0	equ	0xFEE
  6195                           wreg	equ	0xFE8
  6196                           postdec1	equ	0xFE5
  6197                           fsr1l	equ	0xFE1
  6198                           indf2	equ	0xFDF
  6199                           postinc2	equ	0xFDE
  6200                           postdec2	equ	0xFDD
  6201                           fsr2h	equ	0xFDA
  6202                           fsr2l	equ	0xFD9
  6203                           status	equ	0xFD8
  6204                           
  6205 ;; *************** function ___ftpack *****************
  6206 ;; Defined at:
  6207 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  6208 ;; Parameters:    Size  Location     Type
  6209 ;;  arg             3   14[COMRAM] unsigned um
  6210 ;;  exp             1   17[COMRAM] unsigned char 
  6211 ;;  sign            1   18[COMRAM] unsigned char 
  6212 ;; Auto vars:     Size  Location     Type
  6213 ;;		None
  6214 ;; Return value:  Size  Location     Type
  6215 ;;                  3   14[COMRAM] float 
  6216 ;; Registers used:
  6217 ;;		wreg, status,2, status,0
  6218 ;; Tracked objects:
  6219 ;;		On entry : 0/0
  6220 ;;		On exit  : 0/0
  6221 ;;		Unchanged: 0/0
  6222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6223 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6225 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6226 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6227 ;;Total ram usage:        8 bytes
  6228 ;; Hardware stack levels used:    1
  6229 ;; Hardware stack levels required when called:    1
  6230 ;; This function calls:
  6231 ;;		Nothing
  6232 ;; This function is called by:
  6233 ;;		___altoft
  6234 ;;		___ftadd
  6235 ;;		___ftdiv
  6236 ;;		___ftmul
  6237 ;;		___lltoft
  6238 ;; This function uses a non-reentrant model
  6239 ;;
  6240                           
  6241                           	psect	text23
  6242  002966                     __ptext23:
  6243                           	opt stack 0
  6244  002966                     ___ftpack:
  6245                           	opt stack 25
  6246                           
  6247                           ;incstack = 0
  6248  002966  5012               	movf	___ftpack@exp,w,c
  6249  002968  B4D8               	btfsc	status,2,c
  6250  00296A  D005               	goto	l2495
  6251  00296C  500F               	movf	___ftpack@arg,w,c
  6252  00296E  1010               	iorwf	___ftpack@arg+1,w,c
  6253  002970  1011               	iorwf	___ftpack@arg+2,w,c
  6254  002972  A4D8               	btfss	status,2,c
  6255  002974  D00C               	goto	l2501
  6256  002976                     l2495:
  6257  002976  0E00               	movlw	0
  6258  002978  6E0F               	movwf	?___ftpack,c
  6259  00297A  0E00               	movlw	0
  6260  00297C  6E10               	movwf	?___ftpack+1,c
  6261  00297E  0E00               	movlw	0
  6262  002980  6E11               	movwf	?___ftpack+2,c
  6263  002982  0012               	return	
  6264  002984                     l2499:
  6265  002984  2A12               	incf	___ftpack@exp,f,c
  6266  002986  90D8               	bcf	status,0,c
  6267  002988  3211               	rrcf	___ftpack@arg+2,f,c
  6268  00298A  3210               	rrcf	___ftpack@arg+1,f,c
  6269  00298C  320F               	rrcf	___ftpack@arg,f,c
  6270  00298E                     l2501:
  6271  00298E  0E00               	movlw	0
  6272  002990  140F               	andwf	___ftpack@arg,w,c
  6273  002992  6E14               	movwf	??___ftpack& (0+255),c
  6274  002994  0E00               	movlw	0
  6275  002996  1410               	andwf	___ftpack@arg+1,w,c
  6276  002998  6E15               	movwf	(??___ftpack+1)& (0+255),c
  6277  00299A  0EFE               	movlw	254
  6278  00299C  1411               	andwf	___ftpack@arg+2,w,c
  6279  00299E  6E16               	movwf	(??___ftpack+2)& (0+255),c
  6280  0029A0  5014               	movf	??___ftpack,w,c
  6281  0029A2  1015               	iorwf	??___ftpack+1,w,c
  6282  0029A4  1016               	iorwf	??___ftpack+2,w,c
  6283  0029A6  B4D8               	btfsc	status,2,c
  6284  0029A8  D00C               	goto	l2507
  6285  0029AA  D7EC               	goto	l2499
  6286  0029AC                     l2503:
  6287  0029AC  2A12               	incf	___ftpack@exp,f,c
  6288  0029AE  0E01               	movlw	1
  6289  0029B0  260F               	addwf	___ftpack@arg,f,c
  6290  0029B2  0E00               	movlw	0
  6291  0029B4  2210               	addwfc	___ftpack@arg+1,f,c
  6292  0029B6  0E00               	movlw	0
  6293  0029B8  2211               	addwfc	___ftpack@arg+2,f,c
  6294  0029BA  90D8               	bcf	status,0,c
  6295  0029BC  3211               	rrcf	___ftpack@arg+2,f,c
  6296  0029BE  3210               	rrcf	___ftpack@arg+1,f,c
  6297  0029C0  320F               	rrcf	___ftpack@arg,f,c
  6298  0029C2                     l2507:
  6299  0029C2  0E00               	movlw	0
  6300  0029C4  140F               	andwf	___ftpack@arg,w,c
  6301  0029C6  6E14               	movwf	??___ftpack& (0+255),c
  6302  0029C8  0E00               	movlw	0
  6303  0029CA  1410               	andwf	___ftpack@arg+1,w,c
  6304  0029CC  6E15               	movwf	(??___ftpack+1)& (0+255),c
  6305  0029CE  0EFF               	movlw	255
  6306  0029D0  1411               	andwf	___ftpack@arg+2,w,c
  6307  0029D2  6E16               	movwf	(??___ftpack+2)& (0+255),c
  6308  0029D4  5014               	movf	??___ftpack,w,c
  6309  0029D6  1015               	iorwf	??___ftpack+1,w,c
  6310  0029D8  1016               	iorwf	??___ftpack+2,w,c
  6311  0029DA  B4D8               	btfsc	status,2,c
  6312  0029DC  D006               	goto	l2511
  6313  0029DE  D7E6               	goto	l2503
  6314  0029E0                     l2509:
  6315  0029E0  0612               	decf	___ftpack@exp,f,c
  6316  0029E2  90D8               	bcf	status,0,c
  6317  0029E4  360F               	rlcf	___ftpack@arg,f,c
  6318  0029E6  3610               	rlcf	___ftpack@arg+1,f,c
  6319  0029E8  3611               	rlcf	___ftpack@arg+2,f,c
  6320  0029EA                     l2511:
  6321  0029EA  BE10               	btfsc	___ftpack@arg+1,7,c
  6322  0029EC  D003               	goto	l737
  6323  0029EE  0E02               	movlw	2
  6324  0029F0  6012               	cpfslt	___ftpack@exp,c
  6325  0029F2  D7F6               	goto	l2509
  6326  0029F4                     l737:
  6327  0029F4  A012               	btfss	___ftpack@exp,0,c
  6328  0029F6  9E10               	bcf	___ftpack@arg+1,7,c
  6329  0029F8  90D8               	bcf	status,0,c
  6330  0029FA  3212               	rrcf	___ftpack@exp,f,c
  6331  0029FC  5012               	movf	___ftpack@exp,w,c
  6332  0029FE  1211               	iorwf	___ftpack@arg+2,f,c
  6333  002A00  5013               	movf	___ftpack@sign,w,c
  6334  002A02  A4D8               	btfss	status,2,c
  6335  002A04  8E11               	bsf	___ftpack@arg+2,7,c
  6336  002A06  C00F  F00F         	movff	___ftpack@arg,?___ftpack
  6337  002A0A  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
  6338  002A0E  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
  6339  002A12  0012               	return	
  6340  002A14                     __end_of___ftpack:
  6341                           	opt stack 0
  6342                           tblptru	equ	0xFF8
  6343                           tblptrh	equ	0xFF7
  6344                           tblptrl	equ	0xFF6
  6345                           tablat	equ	0xFF5
  6346                           prodh	equ	0xFF4
  6347                           prodl	equ	0xFF3
  6348                           intcon	equ	0xFF2
  6349                           postinc0	equ	0xFEE
  6350                           wreg	equ	0xFE8
  6351                           postdec1	equ	0xFE5
  6352                           fsr1l	equ	0xFE1
  6353                           indf2	equ	0xFDF
  6354                           postinc2	equ	0xFDE
  6355                           postdec2	equ	0xFDD
  6356                           fsr2h	equ	0xFDA
  6357                           fsr2l	equ	0xFD9
  6358                           status	equ	0xFD8
  6359                           
  6360 ;; *************** function _I2C_Master_Write *****************
  6361 ;; Defined at:
  6362 ;;		line 47 in file "I2C.c"
  6363 ;; Parameters:    Size  Location     Type
  6364 ;;  d               2   15[COMRAM] unsigned int 
  6365 ;; Auto vars:     Size  Location     Type
  6366 ;;		None
  6367 ;; Return value:  Size  Location     Type
  6368 ;;                  1    wreg      void 
  6369 ;; Registers used:
  6370 ;;		wreg, status,2, status,0, cstack
  6371 ;; Tracked objects:
  6372 ;;		On entry : 0/0
  6373 ;;		On exit  : 0/0
  6374 ;;		Unchanged: 0/0
  6375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6376 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6379 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6380 ;;Total ram usage:        2 bytes
  6381 ;; Hardware stack levels used:    1
  6382 ;; Hardware stack levels required when called:    2
  6383 ;; This function calls:
  6384 ;;		_I2C_Master_Wait
  6385 ;; This function is called by:
  6386 ;;		_testFrequency
  6387 ;;		_getTime
  6388 ;;		_setTime
  6389 ;; This function uses a non-reentrant model
  6390 ;;
  6391                           
  6392                           	psect	text24
  6393  00308C                     __ptext24:
  6394                           	opt stack 0
  6395  00308C                     _I2C_Master_Write:
  6396                           	opt stack 27
  6397                           
  6398                           ;I2C.c: 49: I2C_Master_Wait();
  6399                           
  6400                           ;incstack = 0
  6401  00308C  EC35  F018         	call	_I2C_Master_Wait	;wreg free
  6402                           
  6403                           ;I2C.c: 50: SSPBUF = d;
  6404  003090  C010  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  6405  003094  0012               	return		;funcret
  6406  003096                     __end_of_I2C_Master_Write:
  6407                           	opt stack 0
  6408                           tblptru	equ	0xFF8
  6409                           tblptrh	equ	0xFF7
  6410                           tblptrl	equ	0xFF6
  6411                           tablat	equ	0xFF5
  6412                           prodh	equ	0xFF4
  6413                           prodl	equ	0xFF3
  6414                           intcon	equ	0xFF2
  6415                           postinc0	equ	0xFEE
  6416                           wreg	equ	0xFE8
  6417                           postdec1	equ	0xFE5
  6418                           fsr1l	equ	0xFE1
  6419                           indf2	equ	0xFDF
  6420                           postinc2	equ	0xFDE
  6421                           postdec2	equ	0xFDD
  6422                           fsr2h	equ	0xFDA
  6423                           fsr2l	equ	0xFD9
  6424                           status	equ	0xFD8
  6425                           
  6426 ;; *************** function _I2C_Master_Stop *****************
  6427 ;; Defined at:
  6428 ;;		line 41 in file "I2C.c"
  6429 ;; Parameters:    Size  Location     Type
  6430 ;;		None
  6431 ;; Auto vars:     Size  Location     Type
  6432 ;;		None
  6433 ;; Return value:  Size  Location     Type
  6434 ;;                  2  250[None  ] int 
  6435 ;; Registers used:
  6436 ;;		wreg, status,2, status,0, cstack
  6437 ;; Tracked objects:
  6438 ;;		On entry : 0/0
  6439 ;;		On exit  : 0/0
  6440 ;;		Unchanged: 0/0
  6441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6445 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6446 ;;Total ram usage:        0 bytes
  6447 ;; Hardware stack levels used:    1
  6448 ;; Hardware stack levels required when called:    2
  6449 ;; This function calls:
  6450 ;;		_I2C_Master_Wait
  6451 ;; This function is called by:
  6452 ;;		_testFrequency
  6453 ;;		_getTime
  6454 ;;		_setTime
  6455 ;; This function uses a non-reentrant model
  6456 ;;
  6457                           
  6458                           	psect	text25
  6459  0030A8                     __ptext25:
  6460                           	opt stack 0
  6461  0030A8                     _I2C_Master_Stop:
  6462                           	opt stack 27
  6463                           
  6464                           ;I2C.c: 43: I2C_Master_Wait();
  6465                           
  6466                           ;incstack = 0
  6467  0030A8  EC35  F018         	call	_I2C_Master_Wait	;wreg free
  6468                           
  6469                           ;I2C.c: 44: PEN = 1;
  6470  0030AC  84C5               	bsf	4037,2,c	;volatile
  6471  0030AE  0012               	return		;funcret
  6472  0030B0                     __end_of_I2C_Master_Stop:
  6473                           	opt stack 0
  6474                           tblptru	equ	0xFF8
  6475                           tblptrh	equ	0xFF7
  6476                           tblptrl	equ	0xFF6
  6477                           tablat	equ	0xFF5
  6478                           prodh	equ	0xFF4
  6479                           prodl	equ	0xFF3
  6480                           intcon	equ	0xFF2
  6481                           postinc0	equ	0xFEE
  6482                           wreg	equ	0xFE8
  6483                           postdec1	equ	0xFE5
  6484                           fsr1l	equ	0xFE1
  6485                           indf2	equ	0xFDF
  6486                           postinc2	equ	0xFDE
  6487                           postdec2	equ	0xFDD
  6488                           fsr2h	equ	0xFDA
  6489                           fsr2l	equ	0xFD9
  6490                           status	equ	0xFD8
  6491                           
  6492 ;; *************** function _I2C_Master_Start *****************
  6493 ;; Defined at:
  6494 ;;		line 29 in file "I2C.c"
  6495 ;; Parameters:    Size  Location     Type
  6496 ;;		None
  6497 ;; Auto vars:     Size  Location     Type
  6498 ;;		None
  6499 ;; Return value:  Size  Location     Type
  6500 ;;                  2  246[None  ] int 
  6501 ;; Registers used:
  6502 ;;		wreg, status,2, status,0, cstack
  6503 ;; Tracked objects:
  6504 ;;		On entry : 0/0
  6505 ;;		On exit  : 0/0
  6506 ;;		Unchanged: 0/0
  6507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6512 ;;Total ram usage:        0 bytes
  6513 ;; Hardware stack levels used:    1
  6514 ;; Hardware stack levels required when called:    2
  6515 ;; This function calls:
  6516 ;;		_I2C_Master_Wait
  6517 ;; This function is called by:
  6518 ;;		_testFrequency
  6519 ;;		_getTime
  6520 ;;		_setTime
  6521 ;; This function uses a non-reentrant model
  6522 ;;
  6523                           
  6524                           	psect	text26
  6525  0030B0                     __ptext26:
  6526                           	opt stack 0
  6527  0030B0                     _I2C_Master_Start:
  6528                           	opt stack 27
  6529                           
  6530                           ;I2C.c: 31: I2C_Master_Wait();
  6531                           
  6532                           ;incstack = 0
  6533  0030B0  EC35  F018         	call	_I2C_Master_Wait	;wreg free
  6534                           
  6535                           ;I2C.c: 32: SEN = 1;
  6536  0030B4  80C5               	bsf	4037,0,c	;volatile
  6537  0030B6  0012               	return		;funcret
  6538  0030B8                     __end_of_I2C_Master_Start:
  6539                           	opt stack 0
  6540                           tblptru	equ	0xFF8
  6541                           tblptrh	equ	0xFF7
  6542                           tblptrl	equ	0xFF6
  6543                           tablat	equ	0xFF5
  6544                           prodh	equ	0xFF4
  6545                           prodl	equ	0xFF3
  6546                           intcon	equ	0xFF2
  6547                           postinc0	equ	0xFEE
  6548                           wreg	equ	0xFE8
  6549                           postdec1	equ	0xFE5
  6550                           fsr1l	equ	0xFE1
  6551                           indf2	equ	0xFDF
  6552                           postinc2	equ	0xFDE
  6553                           postdec2	equ	0xFDD
  6554                           fsr2h	equ	0xFDA
  6555                           fsr2l	equ	0xFD9
  6556                           status	equ	0xFD8
  6557                           
  6558 ;; *************** function _I2C_Master_Read *****************
  6559 ;; Defined at:
  6560 ;;		line 53 in file "I2C.c"
  6561 ;; Parameters:    Size  Location     Type
  6562 ;;  a               1    wreg     unsigned char 
  6563 ;; Auto vars:     Size  Location     Type
  6564 ;;  a               1   15[COMRAM] unsigned char 
  6565 ;;  temp            1   16[COMRAM] unsigned char 
  6566 ;; Return value:  Size  Location     Type
  6567 ;;                  1    wreg      unsigned char 
  6568 ;; Registers used:
  6569 ;;		wreg, status,2, status,0, cstack
  6570 ;; Tracked objects:
  6571 ;;		On entry : 0/0
  6572 ;;		On exit  : 0/0
  6573 ;;		Unchanged: 0/0
  6574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6576 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6578 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6579 ;;Total ram usage:        2 bytes
  6580 ;; Hardware stack levels used:    1
  6581 ;; Hardware stack levels required when called:    2
  6582 ;; This function calls:
  6583 ;;		_I2C_Master_Wait
  6584 ;; This function is called by:
  6585 ;;		_testFrequency
  6586 ;;		_getTime
  6587 ;; This function uses a non-reentrant model
  6588 ;;
  6589                           
  6590                           	psect	text27
  6591  002FDC                     __ptext27:
  6592                           	opt stack 0
  6593  002FDC                     _I2C_Master_Read:
  6594                           	opt stack 27
  6595                           
  6596                           ;incstack = 0
  6597                           ;I2C_Master_Read@a stored from wreg
  6598  002FDC  6E10               	movwf	I2C_Master_Read@a,c
  6599                           
  6600                           ;I2C.c: 55: unsigned char temp;
  6601                           ;I2C.c: 56: I2C_Master_Wait();
  6602  002FDE  EC35  F018         	call	_I2C_Master_Wait	;wreg free
  6603                           
  6604                           ;I2C.c: 57: RCEN = 1;
  6605  002FE2  86C5               	bsf	4037,3,c	;volatile
  6606                           
  6607                           ;I2C.c: 58: I2C_Master_Wait();
  6608  002FE4  EC35  F018         	call	_I2C_Master_Wait	;wreg free
  6609                           
  6610                           ;I2C.c: 59: temp = SSPBUF;
  6611  002FE8  CFC9 F011          	movff	4041,I2C_Master_Read@temp	;volatile
  6612                           
  6613                           ;I2C.c: 60: I2C_Master_Wait();
  6614  002FEC  EC35  F018         	call	_I2C_Master_Wait	;wreg free
  6615                           
  6616                           ;I2C.c: 61: ACKDT = (a)?0:1;
  6617  002FF0  5010               	movf	I2C_Master_Read@a,w,c
  6618  002FF2  A4D8               	btfss	status,2,c
  6619  002FF4  D002               	goto	u3080
  6620  002FF6  8AC5               	bsf	4037,5,c	;volatile
  6621  002FF8  D001               	goto	l3311
  6622  002FFA                     u3080:
  6623  002FFA  9AC5               	bcf	4037,5,c	;volatile
  6624  002FFC                     l3311:
  6625                           
  6626                           ;I2C.c: 62: ACKEN = 1;
  6627  002FFC  88C5               	bsf	4037,4,c	;volatile
  6628                           
  6629                           ;I2C.c: 63: return temp;
  6630  002FFE  5011               	movf	I2C_Master_Read@temp,w,c
  6631  003000  0012               	return	
  6632  003002                     __end_of_I2C_Master_Read:
  6633                           	opt stack 0
  6634                           tblptru	equ	0xFF8
  6635                           tblptrh	equ	0xFF7
  6636                           tblptrl	equ	0xFF6
  6637                           tablat	equ	0xFF5
  6638                           prodh	equ	0xFF4
  6639                           prodl	equ	0xFF3
  6640                           intcon	equ	0xFF2
  6641                           postinc0	equ	0xFEE
  6642                           wreg	equ	0xFE8
  6643                           postdec1	equ	0xFE5
  6644                           fsr1l	equ	0xFE1
  6645                           indf2	equ	0xFDF
  6646                           postinc2	equ	0xFDE
  6647                           postdec2	equ	0xFDD
  6648                           fsr2h	equ	0xFDA
  6649                           fsr2l	equ	0xFD9
  6650                           status	equ	0xFD8
  6651                           
  6652 ;; *************** function _I2C_Master_Wait *****************
  6653 ;; Defined at:
  6654 ;;		line 24 in file "I2C.c"
  6655 ;; Parameters:    Size  Location     Type
  6656 ;;		None
  6657 ;; Auto vars:     Size  Location     Type
  6658 ;;		None
  6659 ;; Return value:  Size  Location     Type
  6660 ;;                  1    wreg      void 
  6661 ;; Registers used:
  6662 ;;		wreg, status,2, status,0
  6663 ;; Tracked objects:
  6664 ;;		On entry : 0/0
  6665 ;;		On exit  : 0/0
  6666 ;;		Unchanged: 0/0
  6667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6670 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6671 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6672 ;;Total ram usage:        1 bytes
  6673 ;; Hardware stack levels used:    1
  6674 ;; Hardware stack levels required when called:    1
  6675 ;; This function calls:
  6676 ;;		Nothing
  6677 ;; This function is called by:
  6678 ;;		_I2C_Master_Start
  6679 ;;		_I2C_Master_Stop
  6680 ;;		_I2C_Master_Write
  6681 ;;		_I2C_Master_Read
  6682 ;;		_I2C_Master_RepeatedStart
  6683 ;; This function uses a non-reentrant model
  6684 ;;
  6685                           
  6686                           	psect	text28
  6687  00306A                     __ptext28:
  6688                           	opt stack 0
  6689  00306A                     _I2C_Master_Wait:
  6690                           	opt stack 27
  6691  00306A                     l316:
  6692  00306A  B4C7               	btfsc	4039,2,c	;volatile
  6693  00306C  D7FE               	goto	l316
  6694  00306E  CFC5 F00F          	movff	4037,??_I2C_Master_Wait	;volatile
  6695  003072  0E1F               	movlw	31
  6696  003074  160F               	andwf	??_I2C_Master_Wait,f,c
  6697  003076  B4D8               	btfsc	status,2,c
  6698  003078  0012               	return	
  6699  00307A  D7F7               	goto	l316
  6700  00307C                     __end_of_I2C_Master_Wait:
  6701                           	opt stack 0
  6702                           tblptru	equ	0xFF8
  6703                           tblptrh	equ	0xFF7
  6704                           tblptrl	equ	0xFF6
  6705                           tablat	equ	0xFF5
  6706                           prodh	equ	0xFF4
  6707                           prodl	equ	0xFF3
  6708                           intcon	equ	0xFF2
  6709                           postinc0	equ	0xFEE
  6710                           wreg	equ	0xFE8
  6711                           postdec1	equ	0xFE5
  6712                           fsr1l	equ	0xFE1
  6713                           indf2	equ	0xFDF
  6714                           postinc2	equ	0xFDE
  6715                           postdec2	equ	0xFDD
  6716                           fsr2h	equ	0xFDA
  6717                           fsr2l	equ	0xFD9
  6718                           status	equ	0xFD8
  6719                           
  6720 ;; *************** function _I2C_Master_Init *****************
  6721 ;; Defined at:
  6722 ;;		line 13 in file "I2C.c"
  6723 ;; Parameters:    Size  Location     Type
  6724 ;;  c               4   27[COMRAM] const unsigned long 
  6725 ;; Auto vars:     Size  Location     Type
  6726 ;;		None
  6727 ;; Return value:  Size  Location     Type
  6728 ;;                  1    wreg      void 
  6729 ;; Registers used:
  6730 ;;		wreg, status,2, status,0, cstack
  6731 ;; Tracked objects:
  6732 ;;		On entry : 0/0
  6733 ;;		On exit  : 0/0
  6734 ;;		Unchanged: 0/0
  6735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6736 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6738 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6739 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6740 ;;Total ram usage:        8 bytes
  6741 ;; Hardware stack levels used:    1
  6742 ;; Hardware stack levels required when called:    2
  6743 ;; This function calls:
  6744 ;;		___lldiv
  6745 ;; This function is called by:
  6746 ;;		_testFrequency
  6747 ;; This function uses a non-reentrant model
  6748 ;;
  6749                           
  6750                           	psect	text29
  6751  002E34                     __ptext29:
  6752                           	opt stack 0
  6753  002E34                     _I2C_Master_Init:
  6754                           	opt stack 27
  6755                           
  6756                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  6757                           
  6758                           ;incstack = 0
  6759  002E34  0E00               	movlw	0
  6760  002E36  6EC7               	movwf	4039,c	;volatile
  6761                           
  6762                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  6763  002E38  0E28               	movlw	40
  6764  002E3A  6EC6               	movwf	4038,c	;volatile
  6765                           
  6766                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  6767  002E3C  0E00               	movlw	0
  6768  002E3E  6EC5               	movwf	4037,c	;volatile
  6769                           
  6770                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  6771  002E40  0E80               	movlw	128
  6772  002E42  6E0F               	movwf	___lldiv@dividend,c
  6773  002E44  0E96               	movlw	150
  6774  002E46  6E10               	movwf	___lldiv@dividend+1,c
  6775  002E48  0E98               	movlw	152
  6776  002E4A  6E11               	movwf	___lldiv@dividend+2,c
  6777  002E4C  0E00               	movlw	0
  6778  002E4E  6E12               	movwf	___lldiv@dividend+3,c
  6779  002E50  C01C  F020         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6780  002E54  C01D  F021         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6781  002E58  C01E  F022         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6782  002E5C  C01F  F023         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6783  002E60  0E02               	movlw	2
  6784  002E62                     u3075:
  6785  002E62  90D8               	bcf	status,0,c
  6786  002E64  3620               	rlcf	??_I2C_Master_Init,f,c
  6787  002E66  3621               	rlcf	??_I2C_Master_Init+1,f,c
  6788  002E68  3622               	rlcf	??_I2C_Master_Init+2,f,c
  6789  002E6A  3623               	rlcf	??_I2C_Master_Init+3,f,c
  6790  002E6C  2EE8               	decfsz	wreg,f,c
  6791  002E6E  D7F9               	goto	u3075
  6792  002E70  C020  F013         	movff	??_I2C_Master_Init,___lldiv@divisor
  6793  002E74  C021  F014         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6794  002E78  C022  F015         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6795  002E7C  C023  F016         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6796  002E80  EC94  F015         	call	___lldiv	;wreg free
  6797  002E84  040F               	decf	?___lldiv,w,c
  6798  002E86  6EC8               	movwf	4040,c	;volatile
  6799                           
  6800                           ;I2C.c: 20: TRISC3 = 1;
  6801  002E88  8694               	bsf	3988,3,c	;volatile
  6802                           
  6803                           ;I2C.c: 21: TRISC4 = 1;
  6804  002E8A  8894               	bsf	3988,4,c	;volatile
  6805  002E8C  0012               	return		;funcret
  6806  002E8E                     __end_of_I2C_Master_Init:
  6807                           	opt stack 0
  6808                           tblptru	equ	0xFF8
  6809                           tblptrh	equ	0xFF7
  6810                           tblptrl	equ	0xFF6
  6811                           tablat	equ	0xFF5
  6812                           prodh	equ	0xFF4
  6813                           prodl	equ	0xFF3
  6814                           intcon	equ	0xFF2
  6815                           postinc0	equ	0xFEE
  6816                           wreg	equ	0xFE8
  6817                           postdec1	equ	0xFE5
  6818                           fsr1l	equ	0xFE1
  6819                           indf2	equ	0xFDF
  6820                           postinc2	equ	0xFDE
  6821                           postdec2	equ	0xFDD
  6822                           fsr2h	equ	0xFDA
  6823                           fsr2l	equ	0xFD9
  6824                           status	equ	0xFD8
  6825                           
  6826 ;; *************** function ___lldiv *****************
  6827 ;; Defined at:
  6828 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6829 ;; Parameters:    Size  Location     Type
  6830 ;;  dividend        4   14[COMRAM] unsigned long 
  6831 ;;  divisor         4   18[COMRAM] unsigned long 
  6832 ;; Auto vars:     Size  Location     Type
  6833 ;;  quotient        4   22[COMRAM] unsigned long 
  6834 ;;  counter         1   26[COMRAM] unsigned char 
  6835 ;; Return value:  Size  Location     Type
  6836 ;;                  4   14[COMRAM] unsigned long 
  6837 ;; Registers used:
  6838 ;;		wreg, status,2, status,0
  6839 ;; Tracked objects:
  6840 ;;		On entry : 0/0
  6841 ;;		On exit  : 0/0
  6842 ;;		Unchanged: 0/0
  6843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6844 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6845 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6847 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6848 ;;Total ram usage:       13 bytes
  6849 ;; Hardware stack levels used:    1
  6850 ;; Hardware stack levels required when called:    1
  6851 ;; This function calls:
  6852 ;;		Nothing
  6853 ;; This function is called by:
  6854 ;;		_I2C_Master_Init
  6855 ;;		_printf
  6856 ;; This function uses a non-reentrant model
  6857 ;;
  6858                           
  6859                           	psect	text30
  6860  002B28                     __ptext30:
  6861                           	opt stack 0
  6862  002B28                     ___lldiv:
  6863                           	opt stack 27
  6864                           
  6865                           ;incstack = 0
  6866  002B28  0E00               	movlw	0
  6867  002B2A  6E17               	movwf	___lldiv@quotient,c
  6868  002B2C  0E00               	movlw	0
  6869  002B2E  6E18               	movwf	___lldiv@quotient+1,c
  6870  002B30  0E00               	movlw	0
  6871  002B32  6E19               	movwf	___lldiv@quotient+2,c
  6872  002B34  0E00               	movlw	0
  6873  002B36  6E1A               	movwf	___lldiv@quotient+3,c
  6874  002B38  5013               	movf	___lldiv@divisor,w,c
  6875  002B3A  1014               	iorwf	___lldiv@divisor+1,w,c
  6876  002B3C  1015               	iorwf	___lldiv@divisor+2,w,c
  6877  002B3E  1016               	iorwf	___lldiv@divisor+3,w,c
  6878  002B40  B4D8               	btfsc	status,2,c
  6879  002B42  D02A               	goto	l879
  6880  002B44  0E01               	movlw	1
  6881  002B46  6E1B               	movwf	___lldiv@counter,c
  6882  002B48  D006               	goto	l3005
  6883  002B4A                     l3003:
  6884  002B4A  90D8               	bcf	status,0,c
  6885  002B4C  3613               	rlcf	___lldiv@divisor,f,c
  6886  002B4E  3614               	rlcf	___lldiv@divisor+1,f,c
  6887  002B50  3615               	rlcf	___lldiv@divisor+2,f,c
  6888  002B52  3616               	rlcf	___lldiv@divisor+3,f,c
  6889  002B54  2A1B               	incf	___lldiv@counter,f,c
  6890  002B56                     l3005:
  6891  002B56  AE16               	btfss	___lldiv@divisor+3,7,c
  6892  002B58  D7F8               	goto	l3003
  6893  002B5A                     l3007:
  6894  002B5A  90D8               	bcf	status,0,c
  6895  002B5C  3617               	rlcf	___lldiv@quotient,f,c
  6896  002B5E  3618               	rlcf	___lldiv@quotient+1,f,c
  6897  002B60  3619               	rlcf	___lldiv@quotient+2,f,c
  6898  002B62  361A               	rlcf	___lldiv@quotient+3,f,c
  6899  002B64  5013               	movf	___lldiv@divisor,w,c
  6900  002B66  5C0F               	subwf	___lldiv@dividend,w,c
  6901  002B68  5014               	movf	___lldiv@divisor+1,w,c
  6902  002B6A  5810               	subwfb	___lldiv@dividend+1,w,c
  6903  002B6C  5015               	movf	___lldiv@divisor+2,w,c
  6904  002B6E  5811               	subwfb	___lldiv@dividend+2,w,c
  6905  002B70  5016               	movf	___lldiv@divisor+3,w,c
  6906  002B72  5812               	subwfb	___lldiv@dividend+3,w,c
  6907  002B74  A0D8               	btfss	status,0,c
  6908  002B76  D009               	goto	l3015
  6909  002B78  5013               	movf	___lldiv@divisor,w,c
  6910  002B7A  5E0F               	subwf	___lldiv@dividend,f,c
  6911  002B7C  5014               	movf	___lldiv@divisor+1,w,c
  6912  002B7E  5A10               	subwfb	___lldiv@dividend+1,f,c
  6913  002B80  5015               	movf	___lldiv@divisor+2,w,c
  6914  002B82  5A11               	subwfb	___lldiv@dividend+2,f,c
  6915  002B84  5016               	movf	___lldiv@divisor+3,w,c
  6916  002B86  5A12               	subwfb	___lldiv@dividend+3,f,c
  6917  002B88  8017               	bsf	___lldiv@quotient,0,c
  6918  002B8A                     l3015:
  6919  002B8A  90D8               	bcf	status,0,c
  6920  002B8C  3216               	rrcf	___lldiv@divisor+3,f,c
  6921  002B8E  3215               	rrcf	___lldiv@divisor+2,f,c
  6922  002B90  3214               	rrcf	___lldiv@divisor+1,f,c
  6923  002B92  3213               	rrcf	___lldiv@divisor,f,c
  6924  002B94  2E1B               	decfsz	___lldiv@counter,f,c
  6925  002B96  D7E1               	goto	l3007
  6926  002B98                     l879:
  6927  002B98  C017  F00F         	movff	___lldiv@quotient,?___lldiv
  6928  002B9C  C018  F010         	movff	___lldiv@quotient+1,?___lldiv+1
  6929  002BA0  C019  F011         	movff	___lldiv@quotient+2,?___lldiv+2
  6930  002BA4  C01A  F012         	movff	___lldiv@quotient+3,?___lldiv+3
  6931  002BA8  0012               	return		;funcret
  6932  002BAA                     __end_of___lldiv:
  6933                           	opt stack 0
  6934                           tblptru	equ	0xFF8
  6935                           tblptrh	equ	0xFF7
  6936                           tblptrl	equ	0xFF6
  6937                           tablat	equ	0xFF5
  6938                           prodh	equ	0xFF4
  6939                           prodl	equ	0xFF3
  6940                           intcon	equ	0xFF2
  6941                           postinc0	equ	0xFEE
  6942                           wreg	equ	0xFE8
  6943                           postdec1	equ	0xFE5
  6944                           fsr1l	equ	0xFE1
  6945                           indf2	equ	0xFDF
  6946                           postinc2	equ	0xFDE
  6947                           postdec2	equ	0xFDD
  6948                           fsr2h	equ	0xFDA
  6949                           fsr2l	equ	0xFD9
  6950                           status	equ	0xFD8
  6951                           
  6952 ;; *************** function _pinSetup *****************
  6953 ;; Defined at:
  6954 ;;		line 25 in file "main.c"
  6955 ;; Parameters:    Size  Location     Type
  6956 ;;		None
  6957 ;; Auto vars:     Size  Location     Type
  6958 ;;		None
  6959 ;; Return value:  Size  Location     Type
  6960 ;;                  1    wreg      void 
  6961 ;; Registers used:
  6962 ;;		wreg, status,2, status,0
  6963 ;; Tracked objects:
  6964 ;;		On entry : 0/0
  6965 ;;		On exit  : 0/0
  6966 ;;		Unchanged: 0/0
  6967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6971 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6972 ;;Total ram usage:        0 bytes
  6973 ;; Hardware stack levels used:    1
  6974 ;; Hardware stack levels required when called:    1
  6975 ;; This function calls:
  6976 ;;		Nothing
  6977 ;; This function is called by:
  6978 ;;		_main
  6979 ;; This function uses a non-reentrant model
  6980 ;;
  6981                           
  6982                           	psect	text31
  6983  002F14                     __ptext31:
  6984                           	opt stack 0
  6985  002F14                     _pinSetup:
  6986                           	opt stack 29
  6987                           
  6988                           ;main.c: 31: TRISA = 0xFF;
  6989                           
  6990                           ;incstack = 0
  6991  002F14  6892               	setf	3986,c	;volatile
  6992                           
  6993                           ;main.c: 32: TRISB = 0xFF;
  6994  002F16  6893               	setf	3987,c	;volatile
  6995                           
  6996                           ;main.c: 33: TRISC = 0x00;
  6997  002F18  0E00               	movlw	0
  6998  002F1A  6E94               	movwf	3988,c	;volatile
  6999                           
  7000                           ;main.c: 34: TRISD = 0x00;
  7001  002F1C  0E00               	movlw	0
  7002  002F1E  6E95               	movwf	3989,c	;volatile
  7003                           
  7004                           ;main.c: 35: TRISE = 0x00;
  7005  002F20  0E00               	movlw	0
  7006  002F22  6E96               	movwf	3990,c	;volatile
  7007                           
  7008                           ;main.c: 37: LATA = 0x00;
  7009  002F24  0E00               	movlw	0
  7010  002F26  6E89               	movwf	3977,c	;volatile
  7011                           
  7012                           ;main.c: 38: LATB = 0x00;
  7013  002F28  0E00               	movlw	0
  7014  002F2A  6E8A               	movwf	3978,c	;volatile
  7015                           
  7016                           ;main.c: 39: LATC = 0x00;
  7017  002F2C  0E00               	movlw	0
  7018  002F2E  6E8B               	movwf	3979,c	;volatile
  7019                           
  7020                           ;main.c: 40: LATD = 0x00;
  7021  002F30  0E00               	movlw	0
  7022  002F32  6E8C               	movwf	3980,c	;volatile
  7023                           
  7024                           ;main.c: 41: LATE = 0x00;
  7025  002F34  0E00               	movlw	0
  7026  002F36  6E8D               	movwf	3981,c	;volatile
  7027                           
  7028                           ;main.c: 43: ADCON0 = 0x00;
  7029  002F38  0E00               	movlw	0
  7030  002F3A  6EC2               	movwf	4034,c	;volatile
  7031                           
  7032                           ;main.c: 44: ADCON1 |= 0x0A;
  7033  002F3C  0E0A               	movlw	10
  7034  002F3E  12C1               	iorwf	4033,f,c	;volatile
  7035                           
  7036                           ;main.c: 48: ADCON2 = 0;
  7037  002F40  0E00               	movlw	0
  7038  002F42  6EC0               	movwf	4032,c	;volatile
  7039                           
  7040                           ;main.c: 49: ADCON2 |= 0b010;
  7041  002F44  82C0               	bsf	4032,1,c	;volatile
  7042                           
  7043                           ;main.c: 50: ADCON2 |= 0b110<<3;
  7044  002F46  0E30               	movlw	48
  7045  002F48  12C0               	iorwf	4032,f,c	;volatile
  7046                           
  7047                           ;main.c: 51: ADCON2 |= 1<<7;
  7048  002F4A  8EC0               	bsf	4032,7,c	;volatile
  7049  002F4C  0012               	return		;funcret
  7050  002F4E                     __end_of_pinSetup:
  7051                           	opt stack 0
  7052                           tblptru	equ	0xFF8
  7053                           tblptrh	equ	0xFF7
  7054                           tblptrl	equ	0xFF6
  7055                           tablat	equ	0xFF5
  7056                           prodh	equ	0xFF4
  7057                           prodl	equ	0xFF3
  7058                           intcon	equ	0xFF2
  7059                           postinc0	equ	0xFEE
  7060                           wreg	equ	0xFE8
  7061                           postdec1	equ	0xFE5
  7062                           fsr1l	equ	0xFE1
  7063                           indf2	equ	0xFDF
  7064                           postinc2	equ	0xFDE
  7065                           postdec2	equ	0xFDD
  7066                           fsr2h	equ	0xFDA
  7067                           fsr2l	equ	0xFD9
  7068                           status	equ	0xFD8
  7069                           
  7070 ;; *************** function _initLCD *****************
  7071 ;; Defined at:
  7072 ;;		line 15 in file "lcd.c"
  7073 ;; Parameters:    Size  Location     Type
  7074 ;;		None
  7075 ;; Auto vars:     Size  Location     Type
  7076 ;;		None
  7077 ;; Return value:  Size  Location     Type
  7078 ;;                  1    wreg      void 
  7079 ;; Registers used:
  7080 ;;		wreg, status,2, status,0, cstack
  7081 ;; Tracked objects:
  7082 ;;		On entry : 0/0
  7083 ;;		On exit  : 0/0
  7084 ;;		Unchanged: 0/0
  7085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7088 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7089 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7090 ;;Total ram usage:        1 bytes
  7091 ;; Hardware stack levels used:    1
  7092 ;; Hardware stack levels required when called:    3
  7093 ;; This function calls:
  7094 ;;		_lcdInst
  7095 ;; This function is called by:
  7096 ;;		_main
  7097 ;; This function uses a non-reentrant model
  7098 ;;
  7099                           
  7100                           	psect	text32
  7101  002E8E                     __ptext32:
  7102                           	opt stack 0
  7103  002E8E                     _initLCD:
  7104                           	opt stack 27
  7105                           
  7106                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
  7107                           
  7108                           ;incstack = 0
  7109  002E8E  0E31               	movlw	49
  7110  002E90  6E13               	movwf	??_initLCD& (0+255),c
  7111  002E92  0EB2               	movlw	178
  7112  002E94                     u3317:
  7113  002E94  2EE8               	decfsz	wreg,f,c
  7114  002E96  D7FE               	bra	u3317
  7115  002E98  2E13               	decfsz	??_initLCD& (0+255),f,c
  7116  002E9A  D7FC               	bra	u3317
  7117  002E9C  D000               	nop2	
  7118                           
  7119                           ;lcd.c: 18: lcdInst(0b00110011);
  7120  002E9E  0E33               	movlw	51
  7121  002EA0  EC24  F018         	call	_lcdInst
  7122                           
  7123                           ;lcd.c: 19: lcdInst(0b00110010);
  7124  002EA4  0E32               	movlw	50
  7125  002EA6  EC24  F018         	call	_lcdInst
  7126                           
  7127                           ;lcd.c: 20: lcdInst(0b00101000);
  7128  002EAA  0E28               	movlw	40
  7129  002EAC  EC24  F018         	call	_lcdInst
  7130                           
  7131                           ;lcd.c: 21: lcdInst(0b00001111);
  7132  002EB0  0E0F               	movlw	15
  7133  002EB2  EC24  F018         	call	_lcdInst
  7134                           
  7135                           ;lcd.c: 22: lcdInst(0b00000110);
  7136  002EB6  0E06               	movlw	6
  7137  002EB8  EC24  F018         	call	_lcdInst
  7138                           
  7139                           ;lcd.c: 23: lcdInst(0b00000001);
  7140  002EBC  0E01               	movlw	1
  7141  002EBE  EC24  F018         	call	_lcdInst
  7142                           
  7143                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
  7144  002EC2  0E31               	movlw	49
  7145  002EC4  6E13               	movwf	??_initLCD& (0+255),c
  7146  002EC6  0EB2               	movlw	178
  7147  002EC8                     u3327:
  7148  002EC8  2EE8               	decfsz	wreg,f,c
  7149  002ECA  D7FE               	bra	u3327
  7150  002ECC  2E13               	decfsz	??_initLCD& (0+255),f,c
  7151  002ECE  D7FC               	bra	u3327
  7152  002ED0  D000               	nop2	
  7153  002ED2  0012               	return		;funcret
  7154  002ED4                     __end_of_initLCD:
  7155                           	opt stack 0
  7156                           tblptru	equ	0xFF8
  7157                           tblptrh	equ	0xFF7
  7158                           tblptrl	equ	0xFF6
  7159                           tablat	equ	0xFF5
  7160                           prodh	equ	0xFF4
  7161                           prodl	equ	0xFF3
  7162                           intcon	equ	0xFF2
  7163                           postinc0	equ	0xFEE
  7164                           wreg	equ	0xFE8
  7165                           postdec1	equ	0xFE5
  7166                           fsr1l	equ	0xFE1
  7167                           indf2	equ	0xFDF
  7168                           postinc2	equ	0xFDE
  7169                           postdec2	equ	0xFDD
  7170                           fsr2h	equ	0xFDA
  7171                           fsr2l	equ	0xFD9
  7172                           status	equ	0xFD8
  7173                           
  7174 ;; *************** function _lcdInst *****************
  7175 ;; Defined at:
  7176 ;;		line 27 in file "lcd.c"
  7177 ;; Parameters:    Size  Location     Type
  7178 ;;  data            1    wreg     unsigned char 
  7179 ;; Auto vars:     Size  Location     Type
  7180 ;;  data            1   17[COMRAM] unsigned char 
  7181 ;; Return value:  Size  Location     Type
  7182 ;;                  1    wreg      void 
  7183 ;; Registers used:
  7184 ;;		wreg, status,2, status,0, cstack
  7185 ;; Tracked objects:
  7186 ;;		On entry : 0/0
  7187 ;;		On exit  : 0/0
  7188 ;;		Unchanged: 0/0
  7189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7191 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7192 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7193 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7194 ;;Total ram usage:        2 bytes
  7195 ;; Hardware stack levels used:    1
  7196 ;; Hardware stack levels required when called:    2
  7197 ;; This function calls:
  7198 ;;		_lcdNibble
  7199 ;; This function is called by:
  7200 ;;		_initLCD
  7201 ;;		_lcdNewline
  7202 ;;		_lcdHome
  7203 ;;		_lcdClear
  7204 ;; This function uses a non-reentrant model
  7205 ;;
  7206                           
  7207                           	psect	text33
  7208  003048                     __ptext33:
  7209                           	opt stack 0
  7210  003048                     _lcdInst:
  7211                           	opt stack 24
  7212                           
  7213                           ;incstack = 0
  7214                           ;lcdInst@data stored from wreg
  7215  003048  6E12               	movwf	lcdInst@data,c
  7216                           
  7217                           ;lcd.c: 28: LATDbits.LATD2 = 0;
  7218  00304A  948C               	bcf	3980,2,c	;volatile
  7219                           
  7220                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
  7221  00304C  0E74               	movlw	116
  7222  00304E                     u3337:
  7223  00304E  2EE8               	decfsz	wreg,f,c
  7224  003050  D7FE               	bra	u3337
  7225  003052  D000               	nop2	
  7226                           
  7227                           ;lcd.c: 30: lcdNibble(data);
  7228  003054  5012               	movf	lcdInst@data,w,c
  7229  003056  ECB9  F016         	call	_lcdNibble
  7230                           
  7231                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
  7232  00305A  0E04               	movlw	4
  7233  00305C  6E11               	movwf	??_lcdInst& (0+255),c
  7234  00305E  0E3E               	movlw	62
  7235  003060                     u3347:
  7236  003060  2EE8               	decfsz	wreg,f,c
  7237  003062  D7FE               	bra	u3347
  7238  003064  2E11               	decfsz	??_lcdInst& (0+255),f,c
  7239  003066  D7FC               	bra	u3347
  7240  003068  0012               	return		;funcret
  7241  00306A                     __end_of_lcdInst:
  7242                           	opt stack 0
  7243                           tblptru	equ	0xFF8
  7244                           tblptrh	equ	0xFF7
  7245                           tblptrl	equ	0xFF6
  7246                           tablat	equ	0xFF5
  7247                           prodh	equ	0xFF4
  7248                           prodl	equ	0xFF3
  7249                           intcon	equ	0xFF2
  7250                           postinc0	equ	0xFEE
  7251                           wreg	equ	0xFE8
  7252                           postdec1	equ	0xFE5
  7253                           fsr1l	equ	0xFE1
  7254                           indf2	equ	0xFDF
  7255                           postinc2	equ	0xFDE
  7256                           postdec2	equ	0xFDD
  7257                           fsr2h	equ	0xFDA
  7258                           fsr2l	equ	0xFD9
  7259                           status	equ	0xFD8
  7260                           
  7261 ;; *************** function _lcdNibble *****************
  7262 ;; Defined at:
  7263 ;;		line 46 in file "lcd.c"
  7264 ;; Parameters:    Size  Location     Type
  7265 ;;  data            1    wreg     unsigned char 
  7266 ;; Auto vars:     Size  Location     Type
  7267 ;;  data            1   15[COMRAM] unsigned char 
  7268 ;;  temp            1   14[COMRAM] unsigned char 
  7269 ;; Return value:  Size  Location     Type
  7270 ;;                  1    wreg      void 
  7271 ;; Registers used:
  7272 ;;		wreg, status,2, status,0
  7273 ;; Tracked objects:
  7274 ;;		On entry : 0/0
  7275 ;;		On exit  : 0/0
  7276 ;;		Unchanged: 0/0
  7277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7279 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7281 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7282 ;;Total ram usage:        2 bytes
  7283 ;; Hardware stack levels used:    1
  7284 ;; Hardware stack levels required when called:    1
  7285 ;; This function calls:
  7286 ;;		Nothing
  7287 ;; This function is called by:
  7288 ;;		_lcdInst
  7289 ;;		_putch
  7290 ;; This function uses a non-reentrant model
  7291 ;;
  7292                           
  7293                           	psect	text34
  7294  002D72                     __ptext34:
  7295                           	opt stack 0
  7296  002D72                     _lcdNibble:
  7297                           	opt stack 26
  7298                           
  7299                           ;incstack = 0
  7300                           ;lcdNibble@data stored from wreg
  7301  002D72  6E10               	movwf	lcdNibble@data,c
  7302                           
  7303                           ;lcd.c: 48: char temp = data & 0xF0;
  7304  002D74  5010               	movf	lcdNibble@data,w,c
  7305  002D76  0BF0               	andlw	240
  7306  002D78  6E0F               	movwf	lcdNibble@temp,c
  7307                           
  7308                           ;lcd.c: 49: LATD = LATD & 0x0F;
  7309  002D7A  508C               	movf	3980,w,c	;volatile
  7310  002D7C  0B0F               	andlw	15
  7311  002D7E  6E8C               	movwf	3980,c	;volatile
  7312                           
  7313                           ;lcd.c: 50: LATD = temp | LATD;
  7314  002D80  500F               	movf	lcdNibble@temp,w,c
  7315  002D82  108C               	iorwf	3980,w,c	;volatile
  7316  002D84  6E8C               	movwf	3980,c	;volatile
  7317                           
  7318                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  7319  002D86  968C               	bcf	3980,3,c	;volatile
  7320                           
  7321                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
  7322  002D88  0ED6               	movlw	214
  7323  002D8A                     u3357:
  7324  002D8A  D000               	nop2	
  7325  002D8C  D000               	nop2	
  7326  002D8E  2EE8               	decfsz	wreg,f,c
  7327  002D90  D7FC               	bra	u3357
  7328  002D92  D000               	nop2	
  7329                           
  7330                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  7331  002D94  868C               	bsf	3980,3,c	;volatile
  7332                           
  7333                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
  7334  002D96  0ED6               	movlw	214
  7335  002D98                     u3367:
  7336  002D98  D000               	nop2	
  7337  002D9A  D000               	nop2	
  7338  002D9C  2EE8               	decfsz	wreg,f,c
  7339  002D9E  D7FC               	bra	u3367
  7340  002DA0  D000               	nop2	
  7341                           
  7342                           ;lcd.c: 58: data = data << 4;
  7343  002DA2  3810               	swapf	lcdNibble@data,w,c
  7344  002DA4  0BF0               	andlw	240
  7345  002DA6  6E10               	movwf	lcdNibble@data,c
  7346                           
  7347                           ;lcd.c: 60: temp = data & 0xF0;
  7348  002DA8  5010               	movf	lcdNibble@data,w,c
  7349  002DAA  0BF0               	andlw	240
  7350  002DAC  6E0F               	movwf	lcdNibble@temp,c
  7351                           
  7352                           ;lcd.c: 61: LATD = LATD & 0x0F;
  7353  002DAE  508C               	movf	3980,w,c	;volatile
  7354  002DB0  0B0F               	andlw	15
  7355  002DB2  6E8C               	movwf	3980,c	;volatile
  7356                           
  7357                           ;lcd.c: 62: LATD = temp | LATD;
  7358  002DB4  500F               	movf	lcdNibble@temp,w,c
  7359  002DB6  108C               	iorwf	3980,w,c	;volatile
  7360  002DB8  6E8C               	movwf	3980,c	;volatile
  7361                           
  7362                           ;lcd.c: 64: LATDbits.LATD3 = 0;
  7363  002DBA  968C               	bcf	3980,3,c	;volatile
  7364                           
  7365                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
  7366  002DBC  0ED6               	movlw	214
  7367  002DBE                     u3377:
  7368  002DBE  D000               	nop2	
  7369  002DC0  D000               	nop2	
  7370  002DC2  2EE8               	decfsz	wreg,f,c
  7371  002DC4  D7FC               	bra	u3377
  7372  002DC6  D000               	nop2	
  7373                           
  7374                           ;lcd.c: 66: LATDbits.LATD3 = 1;
  7375  002DC8  868C               	bsf	3980,3,c	;volatile
  7376                           
  7377                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
  7378  002DCA  0ED6               	movlw	214
  7379  002DCC                     u3387:
  7380  002DCC  D000               	nop2	
  7381  002DCE  D000               	nop2	
  7382  002DD0  2EE8               	decfsz	wreg,f,c
  7383  002DD2  D7FC               	bra	u3387
  7384  002DD4  D000               	nop2	
  7385  002DD6  0012               	return		;funcret
  7386  002DD8                     __end_of_lcdNibble:
  7387                           	opt stack 0
  7388                           tblptru	equ	0xFF8
  7389                           tblptrh	equ	0xFF7
  7390                           tblptrl	equ	0xFF6
  7391                           tablat	equ	0xFF5
  7392                           prodh	equ	0xFF4
  7393                           prodl	equ	0xFF3
  7394                           intcon	equ	0xFF2
  7395                           postinc0	equ	0xFEE
  7396                           wreg	equ	0xFE8
  7397                           postdec1	equ	0xFE5
  7398                           fsr1l	equ	0xFE1
  7399                           indf2	equ	0xFDF
  7400                           postinc2	equ	0xFDE
  7401                           postdec2	equ	0xFDD
  7402                           fsr2h	equ	0xFDA
  7403                           fsr2l	equ	0xFD9
  7404                           status	equ	0xFD8
  7405                           
  7406 ;; *************** function _service *****************
  7407 ;; Defined at:
  7408 ;;		line 66 in file "main.c"
  7409 ;; Parameters:    Size  Location     Type
  7410 ;;		None
  7411 ;; Auto vars:     Size  Location     Type
  7412 ;;		None
  7413 ;; Return value:  Size  Location     Type
  7414 ;;                  1    wreg      void 
  7415 ;; Registers used:
  7416 ;;		None
  7417 ;; Tracked objects:
  7418 ;;		On entry : 0/0
  7419 ;;		On exit  : 0/0
  7420 ;;		Unchanged: 0/0
  7421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7424 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7425 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7426 ;;Total ram usage:       14 bytes
  7427 ;; Hardware stack levels used:    1
  7428 ;; This function calls:
  7429 ;;		Nothing
  7430 ;; This function is called by:
  7431 ;;		Interrupt level 2
  7432 ;; This function uses a non-reentrant model
  7433 ;;
  7434                           
  7435                           	psect	intcode
  7436  000008                     __pintcode:
  7437                           	opt stack 0
  7438  000008                     _service:
  7439                           	opt stack 24
  7440                           
  7441                           ;incstack = 0
  7442  000008  8271               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7443  00000A  EDD5  F015         	call	int_func,f	;refresh shadow registers
  7444                           tblptru	equ	0xFF8
  7445                           tblptrh	equ	0xFF7
  7446                           tblptrl	equ	0xFF6
  7447                           tablat	equ	0xFF5
  7448                           prodh	equ	0xFF4
  7449                           prodl	equ	0xFF3
  7450                           intcon	equ	0xFF2
  7451                           postinc0	equ	0xFEE
  7452                           wreg	equ	0xFE8
  7453                           postdec1	equ	0xFE5
  7454                           fsr1l	equ	0xFE1
  7455                           indf2	equ	0xFDF
  7456                           postinc2	equ	0xFDE
  7457                           postdec2	equ	0xFDD
  7458                           fsr2h	equ	0xFDA
  7459                           fsr2l	equ	0xFD9
  7460                           status	equ	0xFD8
  7461                           
  7462                           	psect	intcode_body
  7463  002BAA                     __pintcode_body:
  7464                           	opt stack 24
  7465  002BAA                     int_func:
  7466                           	opt stack 24
  7467  002BAA  0006               	pop		; remove dummy address from shadow register refresh
  7468  002BAC  CFFA F001          	movff	pclath,??_service
  7469  002BB0  CFFB F002          	movff	pclatu,??_service+1
  7470  002BB4  CFE9 F003          	movff	fsr0l,??_service+2
  7471  002BB8  CFEA F004          	movff	fsr0h,??_service+3
  7472  002BBC  CFE1 F005          	movff	fsr1l,??_service+4
  7473  002BC0  CFE2 F006          	movff	fsr1h,??_service+5
  7474  002BC4  CFD9 F007          	movff	fsr2l,??_service+6
  7475  002BC8  CFDA F008          	movff	fsr2h,??_service+7
  7476  002BCC  CFF3 F009          	movff	prodl,??_service+8
  7477  002BD0  CFF4 F00A          	movff	prodh,??_service+9
  7478  002BD4  CFF6 F00B          	movff	tblptrl,??_service+10
  7479  002BD8  CFF7 F00C          	movff	tblptrh,??_service+11
  7480  002BDC  CFF8 F00D          	movff	tblptru,??_service+12
  7481  002BE0  CFF5 F00E          	movff	tablat,??_service+13
  7482                           
  7483                           ;main.c: 69: if(INT1IF){INT1IF = 0;
  7484  002BE4  B0F0               	btfsc	intcon3,0,c	;volatile
  7485  002BE6  90F0               	bcf	intcon3,0,c	;volatile
  7486  002BE8  C00E  FFF5         	movff	??_service+13,tablat
  7487  002BEC  C00D  FFF8         	movff	??_service+12,tblptru
  7488  002BF0  C00C  FFF7         	movff	??_service+11,tblptrh
  7489  002BF4  C00B  FFF6         	movff	??_service+10,tblptrl
  7490  002BF8  C00A  FFF4         	movff	??_service+9,prodh
  7491  002BFC  C009  FFF3         	movff	??_service+8,prodl
  7492  002C00  C008  FFDA         	movff	??_service+7,fsr2h
  7493  002C04  C007  FFD9         	movff	??_service+6,fsr2l
  7494  002C08  C006  FFE2         	movff	??_service+5,fsr1h
  7495  002C0C  C005  FFE1         	movff	??_service+4,fsr1l
  7496  002C10  C004  FFEA         	movff	??_service+3,fsr0h
  7497  002C14  C003  FFE9         	movff	??_service+2,fsr0l
  7498  002C18  C002  FFFB         	movff	??_service+1,pclatu
  7499  002C1C  C001  FFFA         	movff	??_service,pclath
  7500  002C20  9271               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7501  002C22  0011               	retfie		f
  7502  002C24                     __end_of_service:
  7503                           	opt stack 0
  7504                           pclatu	equ	0xFFB
  7505                           pclath	equ	0xFFA
  7506                           tblptru	equ	0xFF8
  7507                           tblptrh	equ	0xFF7
  7508                           tblptrl	equ	0xFF6
  7509                           tablat	equ	0xFF5
  7510                           prodh	equ	0xFF4
  7511                           prodl	equ	0xFF3
  7512                           intcon	equ	0xFF2
  7513                           intcon3	equ	0xFF0
  7514                           postinc0	equ	0xFEE
  7515                           fsr0h	equ	0xFEA
  7516                           fsr0l	equ	0xFE9
  7517                           wreg	equ	0xFE8
  7518                           postdec1	equ	0xFE5
  7519                           fsr1h	equ	0xFE2
  7520                           fsr1l	equ	0xFE1
  7521                           indf2	equ	0xFDF
  7522                           postinc2	equ	0xFDE
  7523                           postdec2	equ	0xFDD
  7524                           fsr2h	equ	0xFDA
  7525                           fsr2l	equ	0xFD9
  7526                           status	equ	0xFD8
  7527                           pclatu	equ	0xFFB
  7528                           pclath	equ	0xFFA
  7529                           tblptru	equ	0xFF8
  7530                           tblptrh	equ	0xFF7
  7531                           tblptrl	equ	0xFF6
  7532                           tablat	equ	0xFF5
  7533                           prodh	equ	0xFF4
  7534                           prodl	equ	0xFF3
  7535                           intcon	equ	0xFF2
  7536                           intcon3	equ	0xFF0
  7537                           postinc0	equ	0xFEE
  7538                           fsr0h	equ	0xFEA
  7539                           fsr0l	equ	0xFE9
  7540                           wreg	equ	0xFE8
  7541                           postdec1	equ	0xFE5
  7542                           fsr1h	equ	0xFE2
  7543                           fsr1l	equ	0xFE1
  7544                           indf2	equ	0xFDF
  7545                           postinc2	equ	0xFDE
  7546                           postdec2	equ	0xFDD
  7547                           fsr2h	equ	0xFDA
  7548                           fsr2l	equ	0xFD9
  7549                           status	equ	0xFD8
  7550                           
  7551                           	psect	rparam
  7552  0000                     pclatu	equ	0xFFB
  7553                           pclath	equ	0xFFA
  7554                           tblptru	equ	0xFF8
  7555                           tblptrh	equ	0xFF7
  7556                           tblptrl	equ	0xFF6
  7557                           tablat	equ	0xFF5
  7558                           prodh	equ	0xFF4
  7559                           prodl	equ	0xFF3
  7560                           intcon	equ	0xFF2
  7561                           intcon3	equ	0xFF0
  7562                           postinc0	equ	0xFEE
  7563                           fsr0h	equ	0xFEA
  7564                           fsr0l	equ	0xFE9
  7565                           wreg	equ	0xFE8
  7566                           postdec1	equ	0xFE5
  7567                           fsr1h	equ	0xFE2
  7568                           fsr1l	equ	0xFE1
  7569                           indf2	equ	0xFDF
  7570                           postinc2	equ	0xFDE
  7571                           postdec2	equ	0xFDD
  7572                           fsr2h	equ	0xFDA
  7573                           fsr2l	equ	0xFD9
  7574                           status	equ	0xFD8
  7575                           
  7576                           	psect	temp
  7577  000071                     btemp:
  7578                           	opt stack 0
  7579  000071                     	ds	1
  7580  0000                     int$flags	set	btemp
  7581                           pclatu	equ	0xFFB
  7582                           pclath	equ	0xFFA
  7583                           tblptru	equ	0xFF8
  7584                           tblptrh	equ	0xFF7
  7585                           tblptrl	equ	0xFF6
  7586                           tablat	equ	0xFF5
  7587                           prodh	equ	0xFF4
  7588                           prodl	equ	0xFF3
  7589                           intcon	equ	0xFF2
  7590                           intcon3	equ	0xFF0
  7591                           postinc0	equ	0xFEE
  7592                           fsr0h	equ	0xFEA
  7593                           fsr0l	equ	0xFE9
  7594                           wreg	equ	0xFE8
  7595                           postdec1	equ	0xFE5
  7596                           fsr1h	equ	0xFE2
  7597                           fsr1l	equ	0xFE1
  7598                           indf2	equ	0xFDF
  7599                           postinc2	equ	0xFDE
  7600                           postdec2	equ	0xFDD
  7601                           fsr2h	equ	0xFDA
  7602                           fsr2l	equ	0xFD9
  7603                           status	equ	0xFD8


Data Sizes:
    Strings     64
    Constant    181
    Data        9
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     99     112
    BANK0           128     57      57
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_5(CODE[10]), STR_4(CODE[11]), STR_3(CODE[9]), STR_2(CODE[8]), 
		 -> STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__getTime	PTR int  size(2) Largest target is 7
		 -> getTime@time(COMRAM[7]), 


Critical Paths under _main in COMRAM

    _main->_testFrequency
    _testFrequency->_printf
    _printf->___ftsub
    _scale->___ftmul
    _lcdNewline->_lcdInst
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftdiv->___altoft
    ___altoft->___ftpack
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _service in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_testFrequency
    _testFrequency->_printf

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   97190
                                             96 COMRAM     3     3      0
                            _initLCD
                           _pinSetup
                             _printf
                      _testFrequency
 ---------------------------------------------------------------------------------
 (1) _testFrequency                                       40    37      3   52475
                                             89 COMRAM     7     4      3
                                             24 BANK0     33    33      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                           ___altoft
                            ___ftdiv
                             _initT0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              44    38      6   44557
                                             77 COMRAM    12     6      6
                                              0 BANK0     24    24      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   10309
                                             49 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     292
                                             18 COMRAM     1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   10111
                                             49 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2207
                                             28 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    4585
                                             34 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1448
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1580
                                             20 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     431
                                             14 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     574
                                             14 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2242
                                             22 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     671
                                             27 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     572
                                             56 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    3732
                                             71 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    3435
                                             59 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     173
                                             14 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     520
                                             14 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) _initT0                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3387
                                             32 COMRAM    15     9      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___altoft                                            10     6      4    2439
                                             22 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2109
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     790
                                             15 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                             15 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     888
                                             27 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     802
                                             14 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             18 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     135
                                             16 COMRAM     2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _service                                             14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _pinSetup
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _putch
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _testFrequency
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___altoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     _initT0
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _putch
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)

 _service (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     39      39       5       44.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     63      70       1       88.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A9      34        0.0%
DATA                 0      0      A9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Mar 10 00:12:27 2017

              ___altoft@exp 001F               ___altoft@sign 0020                          l44 2FB4  
                        l76 3036                ___awdiv@sign 001A         ___wmul@multiplicand 001F  
               __CFG_BORV$3 000000                __CFG_CP0$OFF 000000                __CFG_CP1$OFF 000000  
              __CFG_CP2$OFF 000000                __CFG_CP3$OFF 000000             ??_testFrequency 005D  
               __CFG_OSC$HS 000000                ___ftadd@exp1 0047                ___ftadd@exp2 0046  
              ___ftadd@sign 0045                         l316 306A                         l432 1750  
                       l272 2288                         l275 21E6                         l460 15D2  
                       l705 2686                         l802 24D0                         l803 24F8  
                       l469 17BE                         l760 22D6                         l737 29F4  
                       l809 255E                         l834 3018                         l764 2300  
                       l775 23B0                         l784 23CC                         l795 2934  
                       l879 2B98                         l889 2D60                __CFG_CPB$OFF 000000  
                       _PEN 007E2A                __CFG_CPD$OFF 000000                         _SEN 007E28  
              ___awmod@sign 0014                         prod 000FF3                         wreg 000FE8  
              __CFG_LVP$OFF 000000                ___ftdiv@cntr 002A                ___ftdiv@sign 002F  
              __CFG_WDT$OFF 000000                        l3003 2B4A                        l3005 2B56  
                      l3101 12DE                        l3015 2B8A                        l3007 2B5A  
                      l3031 2D52                        l3023 2D1E                        l3111 1360  
                      l3025 2D2A                        l3201 1778                        l3121 13C8  
                      l3105 1304                        l3027 2D2E                        l3131 1426  
                      l3107 131A                        l3051 111E                        l2501 298E  
                      l3037 2DDE                        l3221 1810                        l3117 13A2  
                      l3109 134A                        l3053 112A                        l3061 113C  
                      l3311 2FFC                        l2511 29EA                        l2503 29AC  
                      l3039 2DEA                        l3215 17E0                        l3135 148C  
                      l3063 117A                        l3055 1130                        l3047 1108  
                      l2601 2418                        l3233 1856                        l3161 1592  
                      l3153 14F8                        l3137 1492                        l3057 1136  
                      l2507 29C2                        l2611 26C0                        l3235 185C  
                      l3251 18B4                        l3219 180A                        l3171 15D6  
                      l2509 29E0                        l3325 2C46                        l3181 164C  
                      l3165 15A0                        l3149 14D8                        l3093 1276  
                      l3077 11D4                        l3327 2C52                        l2543 22E4  
                      l2631 271A                        l3255 18D2                        l3167 15B4  
                      l3159 1584                        l3271 19FA                        l3423 20A8  
                      l3345 28D0                        l2721 2CEA                        l2713 2CCA  
                      l2705 2CB0                        l2641 2742                        l2617 26E8  
                      l2801 1DE4                        l3257 18E2                        l3265 19CA  
                      l3249 18A2                        l3193 1742                        l3177 15FA  
                      l3339 28A8                        l2571 2360                        l2811 246A  
                      l2715 2CD2                        l2635 272A                        l3259 195C  
                      l3267 19DC                        l3187 1726                        l3419 209E  
                      l3365 290E                        l2573 236A                        l2565 233E  
                      l2549 230E                        l2661 2AB8                        l2717 2CD6  
                      l2725 2CF4                        l2709 2CBC                        l2645 2752  
                      l3269 19E4                        l3189 1734                        l3453 2128  
                      l3429 20CE                        l2495 2976                        l2591 23E8  
                      l2583 239E                        l2575 2374                        l2911 265C  
                      l3471 21A4                        l3463 215C                        l3439 20F2  
                      l2585 23A8                        l2577 237C                        l2817 2496  
                      l2673 2ADE                        l2729 2D02                        l3457 2132  
                      l2499 2984                        l2907 264C                        l2851 2534  
                      l2675 2AE6                        l2667 2AC8                        l2763 200E  
                      l2755 1F4E                        l2933 2A44                        l2925 2EEA  
                      l2917 2674                        l2693 2B1E                        l2685 2B06  
                      l2677 2AEA                        l2943 2AA0                        l2919 2680  
                      l2847 2524                        l2783 1BF0                        l2937 2A74  
                      l2873 25AC                        l2857 254C                        l2689 2B10  
                      l2777 1B4C                        l2867 258E                        l2859 2558  
                      l2795 1D40                        l2787 1C14                        l2957 27B8  
                      l2975 281E                        l2895 261E                        l2887 25EE  
                      l2993 286E                        l2985 2846                        l2987 2852  
                      l2979 282E                        l2989 2858                        _EEIF 007D0C  
                      STR_1 10E5                        STR_2 10EE                        STR_3 10DC  
                      STR_4 10C7                        STR_5 10D2                        STR_6 10B6  
                      u2061 26A8                        _LATA 000F89                        _LATB 000F8A  
                      _LATC 000F8B                        _LATD 000F8C                        u3121 2890  
                      u2081 26D0                        _LATE 000F8D                        u3141 28B8  
                      u2341 244E                        u3080 2FFA                        u2361 247A  
                      u3170 205C                        u3075 2E62                        u3307 303A  
                      u3317 2E94                        u3327 2EC8                        u2551 279C  
                      u3255 223C                        u3337 304E                        u2570 27D6  
                      u3347 3060                        u1851 22A2                printf@tmpval 008C  
                      u2900 15CA                        u2740 1214                        u3357 2D8A  
                      u1861 22B6                        u3367 2D98                        u2575 27CE  
                      u3377 2DBE                        u2745 120A                        u3387 2DCC  
                      _PEIE 007F96                        _RCEN 007E2B                        _RSEN 007E29  
                      _main 2F84                ___ftpack@arg 000F                        _keys 1097  
              ___ftpack@exp 0012                        _time 006F                        fsr0h 000FEA  
                      fsr1h 000FE2                        fsr2h 000FDA                        fsr0l 000FE9  
                      indf2 000FDF                        fsr1l 000FE1                        fsr2l 000FD9  
                      btemp 0071                        prodh 000FF4                        prodl 000FF3  
                      start 000E               __CFG_IESO$OFF 000000               __CFG_MCLRE$ON 000000  
              ___ftmul@cntr 0030                ___param_bank 000000                ___ftmul@sign 0031  
              ___fttol@exp1 0047                ___fttol@lval 0043            ?_I2C_Master_Init 001C  
          ?_I2C_Master_Read 0001            ?_I2C_Master_Wait 0001            ?_I2C_Master_Stop 0001  
                     ?_main 0001                       _ACKEN 007E2C                       _ACKDT 007E2D  
           __end_of___awdiv 2B28                       _EEADR 000FA9             __end_of___ftadd 243E  
           __end_of___awmod 2D0C             __end_of___ftdiv 2966             __end_of___ftneg 3026  
           __end_of___lldiv 2BAA             __end_of___ftmul 278C                       _T0CON 000FD5  
           ___awdiv@divisor 0017             __end_of___llmod 2D72             __end_of___ftsub 2F14  
           __end_of___fttol 2880             ___awdiv@counter 0019                       _TMR0H 000FD7  
                     _TMR0L 000FD6                       _PORTA 000F80                       _PORTB 000F81  
                     _PORTC 000F82                       _PORTD 000F83                       _TRISA 000F92  
                     _TRISB 000F93                       _TRISC 000F94                       _TRISD 000F95  
                     _TRISE 000F96               __CFG_PWRT$OFF 000000               __CFG_WRT0$OFF 000000  
             __CFG_WRT1$OFF 000000               __CFG_WRT2$OFF 000000               __CFG_WRT3$OFF 000000  
              ___lltoft@exp 001F             __end_of_lcdInst 306A              __CFG_EBTR0$OFF 000000  
            __CFG_FCMEN$OFF 000000              __CFG_EBTR1$OFF 000000              __CFG_EBTR2$OFF 000000  
            __CFG_EBTR3$OFF 000000               __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000  
             __CFG_WRTD$OFF 000000             __end_of_initLCD 2ED4              __CFG_EBTRB$OFF 000000  
                     _flag0 006B                       _angle 0068             __end_of_dpowers 1029  
                     _count 006D                       _scale 1A18               ___ftpack@sign 0013  
                     _putch 3026                       pclath 000FFA                       tablat 000FF5  
           __end_of_service 2C24                       status 000FD8              __CFG_PBADEN$ON 000000  
           __initialization 2F4E                __end_of_main 2FB6                __end_of_keys 10A8  
                    ??_main 0061               ___fttol@sign1 0042               __activetblptr 000002  
      __size_of__tdiv_to_l_ 0132           ?_I2C_Master_Start 0001           ?_I2C_Master_Write 0010  
        ??_I2C_Master_Start 0010                      _ADCON0 000FC2                      _ADCON1 000FC1  
        ??_I2C_Master_Write 0012                      _ADCON2 000FC0            __end_of___altoft 2C9C  
          ___llmod@dividend 001C                      ?_scale 0032                      _ADRESH 000FC4  
                    _EEADRH 000FAA                      _ADRESL 000FC3                      _EEDATA 000FA8  
                    _EECON1 000FA6                      _EECON2 000FA7            ___awdiv@dividend 0015  
                    ?_putch 0001            __end_of___ftpack 2A14            __end_of___lltoft 2E34  
                    _INT1IF 007F80                      _TMR0IE 007F95                      _TMR0IF 007F92  
                    _SSPADD 000FC8                      _TRISC3 007CA3                      _TRISC4 007CA4  
                    _SSPBUF 000FC9              __CFG_XINST$OFF 000000            __end_of__powers_ 1077  
                    ___ftge 2A14                      ___wmul 2FB6                   ??___awdiv 0019  
                 ??___ftadd 0042              __CFG_STVREN$ON 000000                   ??___awmod 0013  
                 ??___ftdiv 0027                   ??___ftneg 0012                   ??___lldiv 0017  
                 ??___ftmul 0029                   ??___llmod 0024                   ??___ftsub 004E  
                 ??___fttol 003D                      _initT0 307C                      _fround 1E08  
          ___awdiv@quotient 001B             ___awmod@divisor 0011             ___awmod@counter 0013  
                 ??_lcdInst 0011                      _printf 10F8            __end_of_pinSetup 2F4E  
     ___ftmul@f3_as_product 002D                   ??_initLCD 0013                __pdataCOMRAM 0064  
              __mediumconst 0000                      tblptrh 000FF7                      tblptrl 000FF6  
                    tblptru 000FF8                   ??_service 0001                  __accesstop 0080  
   __end_of__initialization 2F76                  ___altoft@c 0017                  ___ftadd@f1 003C  
                ___ftadd@f2 003F                  ___ftge@ff1 000F                  ___ftge@ff2 0012  
             ___rparam_used 000001                  ___ftdiv@f1 0021                  ___ftdiv@f2 0024  
                ___ftdiv@f3 002B                  ___ftneg@f1 000F                  ___ftmul@f1 0023  
                ___ftmul@f2 0026                  ___ftsub@f1 0048                  ___ftsub@f2 004B  
                ___fttol@f1 0039        __end_of_happynewyear 10AF              __pcstackCOMRAM 0001  
                ___lltoft@c 0017               __end_of_scale 1E08               __end_of_putch 3048  
        __size_of_lcdNibble 0066                  __div_to_l_ 2570             __div_to_l_@exp1 001A  
           __div_to_l_@cntr 0019                     ??_scale 0035             __div_to_l_@quot 0015  
                   ??_putch 0013               __div_to_l_@f1 000F               __div_to_l_@f2 0012  
                   ?___ftge 000F                     ?___wmul 001D                     ?_initT0 0001  
                 ?___altoft 0017                     ?_fround 0032                  _lcdNewline 30A0  
                 ?___ftpack 000F                     ?_printf 004E                   ?___lltoft 0017  
     __end_of_testFrequency 2292                     _SSPCON1 000FC6                     _SSPCON2 000FC5  
                   _SSPSTAT 000FC7                   ?_pinSetup 0001           __end_of_lcdNibble 2DD8  
         __end_of__npowers_ 1050                     __Hparam 0000                  _scale$1118 0035  
                   __Lparam 0000             __size_of___ftge 0090                     ___awdiv 2AA4  
                   ___ftadd 2292                     ___awmod 2C9C                     ___ftdiv 2880  
                   ___ftneg 3002                     ___lldiv 2B28             __size_of___wmul 0026  
                   ___ftmul 2698                     ___llmod 2D0C                     ___ftsub 2ED4  
                   ___fttol 278C                __psmallconst 1000                  ??___altoft 001B  
           __size_of_initT0 0010                     __pcinit 2F4E                  ??___ftpack 0014  
           __size_of_fround 0246                     __ramtop 1000  __end_oftestFrequency@F2964 10B6  
                   _lcdInst 3048                  ??___lltoft 001B                     __ptext0 2F84  
                   __ptext1 204E                     __ptext2 10F8                     __ptext3 1A18  
                   __ptext4 3026                     __ptext5 30A0                     __ptext6 1E08  
                   __ptext7 2FB6                     __ptext8 2698                     __ptext9 2C9C  
           __size_of_printf 0920                     _initLCD 2E8E           __end_of_hexpowers 1097  
               ?__div_to_l_ 000F                     _dpowers 1001                     _extFreq 0064  
          ___awmod@dividend 000F    __size_of_I2C_Master_Init 005A    __size_of_I2C_Master_Read 0026  
  __size_of_I2C_Master_Wait 0012    __size_of_I2C_Master_Stop 0008                     _service 0008  
            __pintcode_body 2BAA        end_of_initialization 2F76               __Lmediumconst 0000  
                   int_func 2BAA                  ??_pinSetup 000F   __size_of_I2C_Master_Start 0008  
 __size_of_I2C_Master_Write 000A             ___lldiv@divisor 0013             ___lldiv@counter 001B  
                   printf@c 0097                     printf@f 004E            I2C_Master_Init@c 001C  
          I2C_Master_Read@a 0010                     postdec1 000FE5                     postdec2 000FDD  
                   postinc0 000FEE                     postinc2 000FDE              __tdiv_to_l_@f1 000F  
            __tdiv_to_l_@f2 0012                 ?_lcdNewline 0001               ??__tdiv_to_l_ 0015  
                 _PORTBbits 000F81                _happynewyear 10A8                 ___ftdiv@exp 002E  
       __size_of__div_to_l_ 0128                 ___ftmul@exp 002C              __end_of___ftge 2AA4  
            __end_of___wmul 2FDC               __pidataCOMRAM 3096              __end_of_initT0 308C  
            __end_of_fround 204E              __end_of_printf 1A18         start_initialization 2F4E  
       __end_of__tdiv_to_l_ 2570           ??_I2C_Master_Init 0020           ??_I2C_Master_Read 0010  
         ??_I2C_Master_Wait 000F           ??_I2C_Master_Stop 0010         __size_of_lcdNewline 0008  
           ___llmod@divisor 0020             ___llmod@counter 0024                    ??___ftge 0015  
                  ??___wmul 0021                    ??_initT0 000F            __CFG_LPT1OSC$OFF 000000  
                  ??_fround 0035                    ??_printf 0054           __size_of___altoft 0078  
                fround@prec 003B           __size_of___ftpack 00AE           __size_of___lltoft 005C  
               __pbssCOMRAM 006D               __pcstackBANK0 0080            _I2C_Master_Start 30B0  
          _I2C_Master_Write 308C                   _main$1113 0061           __CFG_CCP2MX$PORTC 000000  
         __size_of_pinSetup 003A                   __pintcode 0008                   _lcdNibble 2D72  
                  ?___awdiv 0015                    ?___ftadd 003C                    ?___awmod 000F  
                  ?___ftdiv 0021                    ?___ftneg 000F                    ?___lldiv 000F  
                  ?___ftmul 0023                    ?___llmod 001C                    ?___ftsub 0048  
                 __npowers_ 1029                    ?___fttol 0039                    ?_lcdInst 0001  
               __tdiv_to_l_ 243E                ??__div_to_l_ 0015                    ?_initLCD 0001  
               __smallconst 1000                    ?_service 0001                   _hexpowers 1077  
            __size_of_scale 03F0          testFrequency@F2964 10AF              __size_of_putch 0022  
            ___wmul@product 0021                    _LATDbits 000F8C          testFrequency@i_389 00B8  
    __size_of_testFrequency 0244          __end_of__div_to_l_ 2698          testFrequency@first 00B5  
        testFrequency@count 00AD            __CFG_WDTPS$32768 000000                  ?_lcdNibble 0001  
              ??_lcdNewline 0013           ___wmul@multiplier 001D               lcdNibble@data 0010  
                printf@flag 0088               lcdNibble@temp 000F                  printf@fval 0094  
                printf@prec 0086         I2C_Master_Read@temp 0011                   copy_data0 2F62  
        __end_of_lcdNewline 30A8                    __Hrparam 0000                    __Lrparam 0000  
        __CFG_BOREN$SBORDIS 000000            __size_of___awdiv 0084            __size_of___ftadd 01AC  
          __size_of___awmod 0070            __size_of___ftdiv 00E6            __size_of___ftneg 0024  
          __size_of___lldiv 0082                    ___altoft 2C24            __size_of___ftmul 00F4  
          __size_of___llmod 0066            __size_of___ftsub 0040            __size_of___fttol 00F4  
                  ___ftpack 2966                 _fround$1116 0038                 _fround$1117 0035  
                  ___lltoft 2DD8            __size_of_lcdInst 0022             _I2C_Master_Init 2E34  
           _I2C_Master_Read 2FDC            __size_of_initLCD 0046             _I2C_Master_Wait 306A  
           _I2C_Master_Stop 30A8               _testFrequency 204E                    __ptext10 2AA4  
                  __ptext11 243E                    __ptext20 307C                    __ptext12 2570  
                  __ptext21 2880                    __ptext13 2DD8                    __ptext30 2B28  
                  __ptext22 2C24                    __ptext14 2D0C                    __ptext31 2F14  
                  __ptext23 2966                    __ptext15 278C                    __ptext32 2E8E  
                  __ptext24 308C                    __ptext16 2ED4                    __ptext33 3048  
                  __ptext25 30A8                    __ptext17 2292                    __ptext34 2D72  
                  __ptext26 30B0                    __ptext18 3002                    __ptext27 2FDC  
                  __ptext19 2A14                    __ptext28 306A                    __ptext29 2E34  
                  __powers_ 1050            __size_of_service 2C1C       testFrequency@datetime 0098  
             __size_of_main 0032              testFrequency@i 00B7                    _pinSetup 2F14  
         testFrequency@time 009F           testFrequency@prev 00B1                 ??_lcdNibble 000F  
                  int$flags 0071                   printf@idx 0083                   printf@exp 008A  
                 printf@val 0090       testFrequency@timerOff 00B3                   putch@data 0013  
            ?_testFrequency 005A    __end_of_I2C_Master_Start 30B8    __end_of_I2C_Master_Write 3096  
                _INTCONbits 000FF2                    scale@scl 0038                    intlevel2 0000  
          __tdiv_to_l_@exp1 001D            __tdiv_to_l_@cntr 001C            __tdiv_to_l_@quot 0018  
          ___lldiv@dividend 000F                    printf@ap 0084     __end_of_I2C_Master_Init 2E8E  
   __end_of_I2C_Master_Read 3002     __end_of_I2C_Master_Wait 307C     __end_of_I2C_Master_Stop 30B0  
               lcdInst@data 0012                ?__tdiv_to_l_ 000F                 _printf$1119 0080  
          ___lldiv@quotient 0017           I2C_Master_Write@d 0010  
