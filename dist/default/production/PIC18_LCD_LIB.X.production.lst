

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Apr 10 14:53:15 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    84                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    91                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    92                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    93  0000                     
    94                           ; Version 1.40
    95                           ; Generated 01/12/2016 GMT
    96                           ; 
    97                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    98                           ; All rights reserved.
    99                           ; 
   100                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   101                           ; 
   102                           ; Redistribution and use in source and binary forms, with or without modification, are
   103                           ; permitted provided that the following conditions are met:
   104                           ; 
   105                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   106                           ;        conditions and the following disclaimer.
   107                           ; 
   108                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   109                           ;        of conditions and the following disclaimer in the documentation and/or other
   110                           ;        materials provided with the distribution.
   111                           ; 
   112                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   113                           ;        software without specific prior written permission.
   114                           ; 
   115                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   116                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   117                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   118                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   119                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   120                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   121                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   122                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   123                           ; 
   124                           ; 
   125                           ; Code-generator required, PIC18F4620 Definitions
   126                           ; 
   127                           ; SFR Addresses
   128  0000                     
   129                           	psect	idataCOMRAM
   130  0045E0                     __pidataCOMRAM:
   131                           	opt stack 0
   132                           
   133                           ;initializer for _angle
   134  0045E0  005A               	dw	90
   135                           
   136                           ;initializer for _AA_float
   137  0045E2  0002               	dw	2
   138  0045E4  0005               	dw	5
   139                           
   140                           ;initializer for _padPin1
   141  0045E6  0002               	dw	2
   142  0045E8  0006               	dw	6
   143                           
   144                           ;initializer for _padPin2
   145  0045EA  0002               	dw	2
   146  0045EC  0007               	dw	7
   147                           
   148                           	psect	idataBANK0
   149  004604                     __pidataBANK0:
   150                           	opt stack 0
   151                           
   152                           ;initializer for _V_LIM_9V
   153  004604  33                 	db	51
   154  004605  A3                 	db	163
   155  004606  3F                 	db	63
   156                           
   157                           ;initializer for _V_LIM_AA
   158  004607  EC                 	db	236
   159  004608  D1                 	db	209
   160  004609  3E                 	db	62
   161                           
   162                           ;initializer for _V_LIM_C
   163  00460A  66                 	db	102
   164  00460B  A6                 	db	166
   165  00460C  3F                 	db	63
   166                           
   167                           	psect	idataBANK1
   168  004636                     __pidataBANK1:
   169                           	opt stack 0
   170                           
   171                           ;initializer for _stoppingTime
   172  004636  012C               	dw	300
   173                           
   174                           	psect	mediumconst
   175  00FD8A                     __pmediumconst:
   176                           	opt stack 0
   177  00FD8A  00                 	db	0
   178  00FD8B                     _dpowers:
   179                           	opt stack 0
   180  00FD8B  0001               	dw	1
   181  00FD8D  0000               	dw	0
   182  00FD8F  000A               	dw	10
   183  00FD91  0000               	dw	0
   184  00FD93  0064               	dw	100
   185  00FD95  0000               	dw	0
   186  00FD97  03E8               	dw	1000
   187  00FD99  0000               	dw	0
   188  00FD9B  2710               	dw	10000
   189  00FD9D  0000               	dw	0
   190  00FD9F  86A0               	dw	34464
   191  00FDA1  0001               	dw	1
   192  00FDA3  4240               	dw	16960
   193  00FDA5  000F               	dw	15
   194  00FDA7  9680               	dw	38528
   195  00FDA9  0098               	dw	152
   196  00FDAB  E100               	dw	57600
   197  00FDAD  05F5               	dw	1525
   198  00FDAF  CA00               	dw	51712
   199  00FDB1  3B9A               	dw	15258
   200  00FDB3                     __end_of_dpowers:
   201                           	opt stack 0
   202  00FDB3                     __npowers_:
   203                           	opt stack 0
   204  00FDB3  00                 	db	0
   205  00FDB4  80                 	db	128
   206  00FDB5  3F                 	db	63
   207  00FDB6  CD                 	db	205
   208  00FDB7  CC                 	db	204
   209  00FDB8  3D                 	db	61
   210  00FDB9  D7                 	db	215
   211  00FDBA  23                 	db	35
   212  00FDBB  3C                 	db	60
   213  00FDBC  12                 	db	18
   214  00FDBD  83                 	db	131
   215  00FDBE  3A                 	db	58
   216  00FDBF  B7                 	db	183
   217  00FDC0  D1                 	db	209
   218  00FDC1  38                 	db	56
   219  00FDC2  C6                 	db	198
   220  00FDC3  27                 	db	39
   221  00FDC4  37                 	db	55
   222  00FDC5  38                 	db	56
   223  00FDC6  86                 	db	134
   224  00FDC7  35                 	db	53
   225  00FDC8  C0                 	db	192
   226  00FDC9  D6                 	db	214
   227  00FDCA  33                 	db	51
   228  00FDCB  CC                 	db	204
   229  00FDCC  2B                 	db	43
   230  00FDCD  32                 	db	50
   231  00FDCE  70                 	db	112
   232  00FDCF  89                 	db	137
   233  00FDD0  30                 	db	48
   234  00FDD1  E7                 	db	231
   235  00FDD2  DB                 	db	219
   236  00FDD3  2E                 	db	46
   237  00FDD4  E5                 	db	229
   238  00FDD5  3C                 	db	60
   239  00FDD6  1E                 	db	30
   240  00FDD7  42                 	db	66
   241  00FDD8  A2                 	db	162
   242  00FDD9  0D                 	db	13
   243  00FDDA                     __end_of__npowers_:
   244                           	opt stack 0
   245  00FDDA                     __powers_:
   246                           	opt stack 0
   247  00FDDA  00                 	db	0
   248  00FDDB  80                 	db	128
   249  00FDDC  3F                 	db	63
   250  00FDDD  00                 	db	0
   251  00FDDE  20                 	db	32
   252  00FDDF  41                 	db	65
   253  00FDE0  00                 	db	0
   254  00FDE1  C8                 	db	200
   255  00FDE2  42                 	db	66
   256  00FDE3  00                 	db	0
   257  00FDE4  7A                 	db	122
   258  00FDE5  44                 	db	68
   259  00FDE6  40                 	db	64
   260  00FDE7  1C                 	db	28
   261  00FDE8  46                 	db	70
   262  00FDE9  50                 	db	80
   263  00FDEA  C3                 	db	195
   264  00FDEB  47                 	db	71
   265  00FDEC  24                 	db	36
   266  00FDED  74                 	db	116
   267  00FDEE  49                 	db	73
   268  00FDEF  97                 	db	151
   269  00FDF0  18                 	db	24
   270  00FDF1  4B                 	db	75
   271  00FDF2  BC                 	db	188
   272  00FDF3  BE                 	db	190
   273  00FDF4  4C                 	db	76
   274  00FDF5  6B                 	db	107
   275  00FDF6  6E                 	db	110
   276  00FDF7  4E                 	db	78
   277  00FDF8  03                 	db	3
   278  00FDF9  15                 	db	21
   279  00FDFA  50                 	db	80
   280  00FDFB  79                 	db	121
   281  00FDFC  AD                 	db	173
   282  00FDFD  60                 	db	96
   283  00FDFE  F3                 	db	243
   284  00FDFF  49                 	db	73
   285  00FE00  71                 	db	113
   286  00FE01                     __end_of__powers_:
   287                           	opt stack 0
   288  00FE01                     _hexpowers:
   289                           	opt stack 0
   290  00FE01  0001               	dw	1
   291  00FE03  0000               	dw	0
   292  00FE05  0010               	dw	16
   293  00FE07  0000               	dw	0
   294  00FE09  0100               	dw	256
   295  00FE0B  0000               	dw	0
   296  00FE0D  1000               	dw	4096
   297  00FE0F  0000               	dw	0
   298  00FE11  0000               	dw	0
   299  00FE13  0001               	dw	1
   300  00FE15  0000               	dw	0
   301  00FE17  0010               	dw	16
   302  00FE19  0000               	dw	0
   303  00FE1B  0100               	dw	256
   304  00FE1D  0000               	dw	0
   305  00FE1F  1000               	dw	4096
   306  00FE21                     __end_of_hexpowers:
   307                           	opt stack 0
   308  00FE21                     _keys:
   309                           	opt stack 0
   310  00FE21  31                 	db	49
   311  00FE22  32                 	db	50
   312  00FE23  33                 	db	51
   313  00FE24  41                 	db	65
   314  00FE25  34                 	db	52
   315  00FE26  35                 	db	53
   316  00FE27  36                 	db	54
   317  00FE28  42                 	db	66
   318  00FE29  37                 	db	55
   319  00FE2A  38                 	db	56
   320  00FE2B  39                 	db	57
   321  00FE2C  43                 	db	67
   322  00FE2D  2A                 	db	42
   323  00FE2E  30                 	db	48
   324  00FE2F  23                 	db	35
   325  00FE30  44                 	db	68
   326  00FE31  00                 	db	0
   327  00FE32                     __end_of_keys:
   328                           	opt stack 0
   329  00FE32                     _happynewyear:
   330                           	opt stack 0
   331  00FE32  00                 	db	0
   332  00FE33  50                 	db	80
   333  00FE34  10                 	db	16
   334  00FE35  01                 	db	1
   335  00FE36  10                 	db	16
   336  00FE37  04                 	db	4
   337  00FE38  17                 	db	23
   338  00FE39                     __end_of_happynewyear:
   339                           	opt stack 0
   340  00FE39                     _Vcc:
   341                           	opt stack 0
   342  00FE39  00                 	db	0
   343  00FE3A  A0                 	db	160
   344  00FE3B  40                 	db	64
   345  00FE3C                     __end_of_Vcc:
   346                           	opt stack 0
   347  00FE3C                     _resolution:
   348                           	opt stack 0
   349  00FE3C  C0                 	db	192
   350  00FE3D  7F                 	db	127
   351  00FE3E  44                 	db	68
   352  00FE3F                     __end_of_resolution:
   353                           	opt stack 0
   354  00FE3F                     _cylinderBackward:
   355                           	opt stack 0
   356  00FE3F  001E               	dw	30
   357  00FE41                     __end_of_cylinderBackward:
   358                           	opt stack 0
   359  00FE41                     _cylinderForward:
   360                           	opt stack 0
   361  00FE41  0064               	dw	100
   362  00FE43                     __end_of_cylinderForward:
   363                           	opt stack 0
   364  00FE43                     _padAngle_CLOSE:
   365                           	opt stack 0
   366  00FE43  0046               	dw	70
   367  00FE45                     __end_of_padAngle_CLOSE:
   368                           	opt stack 0
   369  00FE45                     _padAngle_NEUTRAL:
   370                           	opt stack 0
   371  00FE45  0082               	dw	130
   372  00FE47                     __end_of_padAngle_NEUTRAL:
   373                           	opt stack 0
   374  00FE47                     _padAngle_OPEN:
   375                           	opt stack 0
   376  00FE47  00B4               	dw	180
   377  00FE49                     __end_of_padAngle_OPEN:
   378                           	opt stack 0
   379  00FE49                     _redirectAngle_9V:
   380                           	opt stack 0
   381  00FE49  005A               	dw	90
   382  00FE4B                     __end_of_redirectAngle_9V:
   383                           	opt stack 0
   384  00FE4B                     _redirectAngle_AA:
   385                           	opt stack 0
   386  00FE4B  0069               	dw	105
   387  00FE4D                     __end_of_redirectAngle_AA:
   388                           	opt stack 0
   389  00FE4D                     _redirectAngle_C:
   390                           	opt stack 0
   391  00FE4D  008C               	dw	140
   392  00FE4F                     __end_of_redirectAngle_C:
   393                           	opt stack 0
   394  00FE4F                     _redirectAngle_OTHER:
   395                           	opt stack 0
   396  00FE4F  0075               	dw	117
   397  00FE51                     __end_of_redirectAngle_OTHER:
   398                           	opt stack 0
   399  00FE51                     _conveyorServo:
   400                           	opt stack 0
   401  00FE51  0002               	dw	2
   402  00FE53  0000               	dw	0
   403  00FE55                     __end_of_conveyorServo:
   404                           	opt stack 0
   405  00FE55                     _cylinderMotor1:
   406                           	opt stack 0
   407  00FE55  0003               	dw	3
   408  00FE57  0000               	dw	0
   409  00FE59                     __end_of_cylinderMotor1:
   410                           	opt stack 0
   411  00FE59                     _cylinderMotor2:
   412                           	opt stack 0
   413  00FE59  0003               	dw	3
   414  00FE5B  0001               	dw	1
   415  00FE5D                     __end_of_cylinderMotor2:
   416                           	opt stack 0
   417  00FE5D                     _padServo:
   418                           	opt stack 0
   419  00FE5D  0002               	dw	2
   420  00FE5F  0001               	dw	1
   421  00FE61                     __end_of_padServo:
   422                           	opt stack 0
   423  00FE61                     _redirectingServo:
   424                           	opt stack 0
   425  00FE61  0002               	dw	2
   426  00FE63  0002               	dw	2
   427  00FE65                     __end_of_redirectingServo:
   428                           	opt stack 0
   429  0000                     _ADCON0	set	4034
   430  0000                     _ADCON1	set	4033
   431  0000                     _ADCON2	set	4032
   432  0000                     _ADRESH	set	4036
   433  0000                     _ADRESL	set	4035
   434  0000                     _EEADR	set	4009
   435  0000                     _EEADRH	set	4010
   436  0000                     _EECON1	set	4006
   437  0000                     _EECON2	set	4007
   438  0000                     _EEDATA	set	4008
   439  0000                     _INTCONbits	set	4082
   440  0000                     _LATA	set	3977
   441  0000                     _LATB	set	3978
   442  0000                     _LATC	set	3979
   443  0000                     _LATD	set	3980
   444  0000                     _LATDbits	set	3980
   445  0000                     _LATE	set	3981
   446  0000                     _PORTA	set	3968
   447  0000                     _PORTB	set	3969
   448  0000                     _PORTBbits	set	3969
   449  0000                     _PORTC	set	3970
   450  0000                     _PORTD	set	3971
   451  0000                     _SSPADD	set	4040
   452  0000                     _SSPBUF	set	4041
   453  0000                     _SSPCON1	set	4038
   454  0000                     _SSPCON2	set	4037
   455  0000                     _SSPSTAT	set	4039
   456  0000                     _T0CON	set	4053
   457  0000                     _T1CON	set	4045
   458  0000                     _T3CON	set	4017
   459  0000                     _TMR0H	set	4055
   460  0000                     _TMR0L	set	4054
   461  0000                     _TMR1H	set	4047
   462  0000                     _TMR1L	set	4046
   463  0000                     _TMR3H	set	4019
   464  0000                     _TMR3L	set	4018
   465  0000                     _TRISA	set	3986
   466  0000                     _TRISB	set	3987
   467  0000                     _TRISC	set	3988
   468  0000                     _TRISD	set	3989
   469  0000                     _TRISE	set	3990
   470  0000                     _ACKDT	set	32301
   471  0000                     _ACKEN	set	32300
   472  0000                     _EEIF	set	32012
   473  0000                     _INT0IE	set	32660
   474  0000                     _INT0IF	set	32657
   475  0000                     _INT1IE	set	32643
   476  0000                     _INT1IF	set	32640
   477  0000                     _PEIE	set	32662
   478  0000                     _PEN	set	32298
   479  0000                     _RCEN	set	32299
   480  0000                     _RSEN	set	32297
   481  0000                     _SEN	set	32296
   482  0000                     _TMR0IE	set	32661
   483  0000                     _TMR0IF	set	32658
   484  0000                     _TMR1IE	set	31976
   485  0000                     _TMR1IF	set	31984
   486  0000                     _TMR3IE	set	32001
   487  0000                     _TRISC3	set	31907
   488  0000                     _TRISC4	set	31908
   489  00FE65                     STR_3:
   490  00FE65  73                 	db	115	;'s'
   491  00FE66  74                 	db	116	;'t'
   492  00FE67  6F                 	db	111	;'o'
   493  00FE68  70                 	db	112	;'p'
   494  00FE69  20                 	db	32
   495  00FE6A  69                 	db	105	;'i'
   496  00FE6B  6E                 	db	110	;'n'
   497  00FE6C  3A                 	db	58	;':'
   498  00FE6D  20                 	db	32
   499  00FE6E  25                 	db	37
   500  00FE6F  64                 	db	100	;'d'
   501  00FE70  20                 	db	32
   502  00FE71  20                 	db	32
   503  00FE72  20                 	db	32
   504  00FE73  20                 	db	32
   505  00FE74  20                 	db	32
   506  00FE75  20                 	db	32
   507  00FE76  20                 	db	32
   508  00FE77  20                 	db	32
   509  00FE78  20                 	db	32
   510  00FE79  20                 	db	32
   511  00FE7A  20                 	db	32
   512  00FE7B  20                 	db	32
   513  00FE7C  20                 	db	32
   514  00FE7D  20                 	db	32
   515  00FE7E  20                 	db	32
   516  00FE7F  20                 	db	32
   517  00FE80  20                 	db	32
   518  00FE81  20                 	db	32
   519  00FE82  00                 	db	0
   520  00FE83                     STR_2:
   521  00FE83  74                 	db	116	;'t'
   522  00FE84  69                 	db	105	;'i'
   523  00FE85  6D                 	db	109	;'m'
   524  00FE86  65                 	db	101	;'e'
   525  00FE87  20                 	db	32
   526  00FE88  25                 	db	37
   527  00FE89  30                 	db	48	;'0'
   528  00FE8A  32                 	db	50	;'2'
   529  00FE8B  6C                 	db	108	;'l'
   530  00FE8C  64                 	db	100	;'d'
   531  00FE8D  3A                 	db	58	;':'
   532  00FE8E  25                 	db	37
   533  00FE8F  30                 	db	48	;'0'
   534  00FE90  32                 	db	50	;'2'
   535  00FE91  6C                 	db	108	;'l'
   536  00FE92  64                 	db	100	;'d'
   537  00FE93  2E                 	db	46
   538  00FE94  25                 	db	37
   539  00FE95  30                 	db	48	;'0'
   540  00FE96  31                 	db	49	;'1'
   541  00FE97  6C                 	db	108	;'l'
   542  00FE98  64                 	db	100	;'d'
   543  00FE99  20                 	db	32
   544  00FE9A  20                 	db	32
   545  00FE9B  20                 	db	32
   546  00FE9C  20                 	db	32
   547  00FE9D  20                 	db	32
   548  00FE9E  0A                 	db	10
   549  00FE9F  00                 	db	0
   550  00FEA0                     STR_18:
   551  00FEA0  74                 	db	116	;'t'
   552  00FEA1  69                 	db	105	;'i'
   553  00FEA2  6D                 	db	109	;'m'
   554  00FEA3  65                 	db	101	;'e'
   555  00FEA4  20                 	db	32
   556  00FEA5  25                 	db	37
   557  00FEA6  30                 	db	48	;'0'
   558  00FEA7  32                 	db	50	;'2'
   559  00FEA8  6C                 	db	108	;'l'
   560  00FEA9  64                 	db	100	;'d'
   561  00FEAA  3A                 	db	58	;':'
   562  00FEAB  25                 	db	37
   563  00FEAC  30                 	db	48	;'0'
   564  00FEAD  32                 	db	50	;'2'
   565  00FEAE  6C                 	db	108	;'l'
   566  00FEAF  64                 	db	100	;'d'
   567  00FEB0  2E                 	db	46
   568  00FEB1  25                 	db	37
   569  00FEB2  30                 	db	48	;'0'
   570  00FEB3  31                 	db	49	;'1'
   571  00FEB4  6C                 	db	108	;'l'
   572  00FEB5  64                 	db	100	;'d'
   573  00FEB6  0A                 	db	10
   574  00FEB7  00                 	db	0
   575  00FEB8                     STR_11:
   576  00FEB8  20                 	db	32
   577  00FEB9  20                 	db	32
   578  00FEBA  20                 	db	32
   579  00FEBB  25                 	db	37
   580  00FEBC  30                 	db	48	;'0'
   581  00FEBD  32                 	db	50	;'2'
   582  00FEBE  78                 	db	120	;'x'
   583  00FEBF  3A                 	db	58	;':'
   584  00FEC0  25                 	db	37
   585  00FEC1  30                 	db	48	;'0'
   586  00FEC2  32                 	db	50	;'2'
   587  00FEC3  78                 	db	120	;'x'
   588  00FEC4  3A                 	db	58	;':'
   589  00FEC5  25                 	db	37
   590  00FEC6  30                 	db	48	;'0'
   591  00FEC7  32                 	db	50	;'2'
   592  00FEC8  78                 	db	120	;'x'
   593  00FEC9  20                 	db	32
   594  00FECA  20                 	db	32
   595  00FECB  20                 	db	32
   596  00FECC  41                 	db	65	;'A'
   597  00FECD  3E                 	db	62	;'>'
   598  00FECE  00                 	db	0
   599  00FECF                     STR_10:
   600  00FECF  20                 	db	32
   601  00FED0  20                 	db	32
   602  00FED1  32                 	db	50	;'2'
   603  00FED2  30                 	db	48	;'0'
   604  00FED3  25                 	db	37
   605  00FED4  30                 	db	48	;'0'
   606  00FED5  32                 	db	50	;'2'
   607  00FED6  78                 	db	120	;'x'
   608  00FED7  2F                 	db	47
   609  00FED8  25                 	db	37
   610  00FED9  30                 	db	48	;'0'
   611  00FEDA  32                 	db	50	;'2'
   612  00FEDB  78                 	db	120	;'x'
   613  00FEDC  2F                 	db	47
   614  00FEDD  25                 	db	37
   615  00FEDE  30                 	db	48	;'0'
   616  00FEDF  32                 	db	50	;'2'
   617  00FEE0  78                 	db	120	;'x'
   618  00FEE1  0A                 	db	10
   619  00FEE2  00                 	db	0
   620  00FEE3                     STR_16:
   621  00FEE3  25                 	db	37
   622  00FEE4  63                 	db	99	;'c'
   623  00FEE5  29                 	db	41
   624  00FEE6  20                 	db	32
   625  00FEE7  74                 	db	116	;'t'
   626  00FEE8  69                 	db	105	;'i'
   627  00FEE9  6D                 	db	109	;'m'
   628  00FEEA  65                 	db	101	;'e'
   629  00FEEB  20                 	db	32
   630  00FEEC  20                 	db	32
   631  00FEED  3C                 	db	60	;'<'
   632  00FEEE  41                 	db	65	;'A'
   633  00FEEF  20                 	db	32
   634  00FEF0  20                 	db	32
   635  00FEF1  20                 	db	32
   636  00FEF2  20                 	db	32
   637  00FEF3  20                 	db	32
   638  00FEF4  0A                 	db	10
   639  00FEF5  00                 	db	0
   640  00FEF6                     STR_21:
   641  00FEF6  5B                 	db	91	;'['
   642  00FEF7  25                 	db	37
   643  00FEF8  64                 	db	100	;'d'
   644  00FEF9  2C                 	db	44
   645  00FEFA  25                 	db	37
   646  00FEFB  64                 	db	100	;'d'
   647  00FEFC  2C                 	db	44
   648  00FEFD  25                 	db	37
   649  00FEFE  64                 	db	100	;'d'
   650  00FEFF  2C                 	db	44
   651  00FF00  25                 	db	37
   652  00FF01  64                 	db	100	;'d'
   653  00FF02  5D                 	db	93	;']'
   654  00FF03  20                 	db	32
   655  00FF04  20                 	db	32
   656  00FF05  20                 	db	32
   657  00FF06  2A                 	db	42
   658  00FF07  3E                 	db	62	;'>'
   659  00FF08  00                 	db	0
   660  00FF09                     STR_12:
   661  00FF09  73                 	db	115	;'s'
   662  00FF0A  74                 	db	116	;'t'
   663  00FF0B  61                 	db	97	;'a'
   664  00FF0C  72                 	db	114	;'r'
   665  00FF0D  74                 	db	116	;'t'
   666  00FF0E  20                 	db	32
   667  00FF0F  20                 	db	32
   668  00FF10  20                 	db	32
   669  00FF11  3C                 	db	60	;'<'
   670  00FF12  42                 	db	66	;'B'
   671  00FF13  20                 	db	32
   672  00FF14  20                 	db	32
   673  00FF15  20                 	db	32
   674  00FF16  20                 	db	32
   675  00FF17  20                 	db	32
   676  00FF18  20                 	db	32
   677  00FF19  0A                 	db	10
   678  00FF1A  00                 	db	0
   679  00FF1B                     STR_14:
   680  00FF1B  73                 	db	115	;'s'
   681  00FF1C  65                 	db	101	;'e'
   682  00FF1D  6C                 	db	108	;'l'
   683  00FF1E  65                 	db	101	;'e'
   684  00FF1F  63                 	db	99	;'c'
   685  00FF20  74                 	db	116	;'t'
   686  00FF21  20                 	db	32
   687  00FF22  72                 	db	114	;'r'
   688  00FF23  75                 	db	117	;'u'
   689  00FF24  6E                 	db	110	;'n'
   690  00FF25  3A                 	db	58	;':'
   691  00FF26  20                 	db	32
   692  00FF27  20                 	db	32
   693  00FF28  20                 	db	32
   694  00FF29  20                 	db	32
   695  00FF2A  20                 	db	32
   696  00FF2B  0A                 	db	10
   697  00FF2C  00                 	db	0
   698  00FF2D                     STR_20:
   699  00FF2D  5B                 	db	91	;'['
   700  00FF2E  41                 	db	65	;'A'
   701  00FF2F  41                 	db	65	;'A'
   702  00FF30  2C                 	db	44
   703  00FF31  39                 	db	57	;'9'
   704  00FF32  56                 	db	86	;'V'
   705  00FF33  2C                 	db	44
   706  00FF34  43                 	db	67	;'C'
   707  00FF35  2C                 	db	44
   708  00FF36  6F                 	db	111	;'o'
   709  00FF37  74                 	db	116	;'t'
   710  00FF38  68                 	db	104	;'h'
   711  00FF39  65                 	db	101	;'e'
   712  00FF3A  72                 	db	114	;'r'
   713  00FF3B  5D                 	db	93	;']'
   714  00FF3C  20                 	db	32
   715  00FF3D  0A                 	db	10
   716  00FF3E  00                 	db	0
   717  00FF3F                     STR_24:
   718  00FF3F  30                 	db	48	;'0'
   719  00FF40  31                 	db	49	;'1'
   720  00FF41  32                 	db	50	;'2'
   721  00FF42  33                 	db	51	;'3'
   722  00FF43  34                 	db	52	;'4'
   723  00FF44  35                 	db	53	;'5'
   724  00FF45  36                 	db	54	;'6'
   725  00FF46  37                 	db	55	;'7'
   726  00FF47  38                 	db	56	;'8'
   727  00FF48  39                 	db	57	;'9'
   728  00FF49  61                 	db	97	;'a'
   729  00FF4A  62                 	db	98	;'b'
   730  00FF4B  63                 	db	99	;'c'
   731  00FF4C  64                 	db	100	;'d'
   732  00FF4D  65                 	db	101	;'e'
   733  00FF4E  66                 	db	102	;'f'
   734  00FF4F  00                 	db	0
   735  00FF50                     STR_19:
   736  00FF50  20                 	db	32
   737  00FF51  20                 	db	32
   738  00FF52  20                 	db	32
   739  00FF53  20                 	db	32
   740  00FF54  20                 	db	32
   741  00FF55  20                 	db	32
   742  00FF56  20                 	db	32
   743  00FF57  20                 	db	32
   744  00FF58  20                 	db	32
   745  00FF59  20                 	db	32
   746  00FF5A  20                 	db	32
   747  00FF5B  20                 	db	32
   748  00FF5C  20                 	db	32
   749  00FF5D  20                 	db	32
   750  00FF5E  2A                 	db	42
   751  00FF5F  3E                 	db	62	;'>'
   752  00FF60  00                 	db	0
   753  00FF61                     STR_15:
   754  00FF61  5B                 	db	91	;'['
   755  00FF62  31                 	db	49	;'1'
   756  00FF63  2C                 	db	44
   757  00FF64  32                 	db	50	;'2'
   758  00FF65  2C                 	db	44
   759  00FF66  33                 	db	51	;'3'
   760  00FF67  2C                 	db	44
   761  00FF68  34                 	db	52	;'4'
   762  00FF69  5D                 	db	93	;']'
   763  00FF6A  20                 	db	32
   764  00FF6B  20                 	db	32
   765  00FF6C  20                 	db	32
   766  00FF6D  20                 	db	32
   767  00FF6E  20                 	db	32
   768  00FF6F  2A                 	db	42
   769  00FF70  3E                 	db	62	;'>'
   770  00FF71  00                 	db	0
   771  00FF72                     STR_13:
   772  00FF72  68                 	db	104	;'h'
   773  00FF73  69                 	db	105	;'i'
   774  00FF74  73                 	db	115	;'s'
   775  00FF75  74                 	db	116	;'t'
   776  00FF76  6F                 	db	111	;'o'
   777  00FF77  72                 	db	114	;'r'
   778  00FF78  79                 	db	121	;'y'
   779  00FF79  20                 	db	32
   780  00FF7A  3C                 	db	60	;'<'
   781  00FF7B  43                 	db	67	;'C'
   782  00FF7C  20                 	db	32
   783  00FF7D  20                 	db	32
   784  00FF7E  20                 	db	32
   785  00FF7F  20                 	db	32
   786  00FF80  2A                 	db	42
   787  00FF81  3E                 	db	62	;'>'
   788  00FF82  00                 	db	0
   789  00FF83                     STR_17:
   790  00FF83  20                 	db	32
   791  00FF84  20                 	db	32
   792  00FF85  20                 	db	32
   793  00FF86  73                 	db	115	;'s'
   794  00FF87  74                 	db	116	;'t'
   795  00FF88  61                 	db	97	;'a'
   796  00FF89  74                 	db	116	;'t'
   797  00FF8A  73                 	db	115	;'s'
   798  00FF8B  20                 	db	32
   799  00FF8C  3C                 	db	60	;'<'
   800  00FF8D  42                 	db	66	;'B'
   801  00FF8E  20                 	db	32
   802  00FF8F  20                 	db	32
   803  00FF90  20                 	db	32
   804  00FF91  2A                 	db	42
   805  00FF92  3E                 	db	62	;'>'
   806  00FF93  00                 	db	0
   807  00FF94                     STR_23:
   808  00FF94  20                 	db	32
   809  00FF95  20                 	db	32
   810  00FF96  61                 	db	97	;'a'
   811  00FF97  76                 	db	118	;'v'
   812  00FF98  61                 	db	97	;'a'
   813  00FF99  69                 	db	105	;'i'
   814  00FF9A  6C                 	db	108	;'l'
   815  00FF9B  61                 	db	97	;'a'
   816  00FF9C  62                 	db	98	;'b'
   817  00FF9D  6C                 	db	108	;'l'
   818  00FF9E  65                 	db	101	;'e'
   819  00FF9F  20                 	db	32
   820  00FFA0  20                 	db	32
   821  00FFA1  20                 	db	32
   822  00FFA2  2A                 	db	42
   823  00FFA3  3E                 	db	62	;'>'
   824  00FFA4  00                 	db	0
   825  00FFA5                     STR_4:
   826  00FFA5  56                 	db	86	;'V'
   827  00FFA6  3A                 	db	58	;':'
   828  00FFA7  20                 	db	32
   829  00FFA8  25                 	db	37
   830  00FFA9  2E                 	db	46
   831  00FFAA  33                 	db	51	;'3'
   832  00FFAB  66                 	db	102	;'f'
   833  00FFAC  2C                 	db	44
   834  00FFAD  20                 	db	32
   835  00FFAE  4E                 	db	78	;'N'
   836  00FFAF  3A                 	db	58	;':'
   837  00FFB0  20                 	db	32
   838  00FFB1  25                 	db	37
   839  00FFB2  64                 	db	100	;'d'
   840  00FFB3  0A                 	db	10
   841  00FFB4  00                 	db	0
   842  00FFB5                     STR_5:
   843  00FFB5  56                 	db	86	;'V'
   844  00FFB6  5F                 	db	95	;'_'
   845  00FFB7  6D                 	db	109	;'m'
   846  00FFB8  61                 	db	97	;'a'
   847  00FFB9  78                 	db	120	;'x'
   848  00FFBA  3A                 	db	58	;':'
   849  00FFBB  20                 	db	32
   850  00FFBC  25                 	db	37
   851  00FFBD  2E                 	db	46
   852  00FFBE  33                 	db	51	;'3'
   853  00FFBF  66                 	db	102	;'f'
   854  00FFC0  00                 	db	0
   855  00FFC1                     STR_22:
   856  00FFC1  20                 	db	32
   857  00FFC2  72                 	db	114	;'r'
   858  00FFC3  75                 	db	117	;'u'
   859  00FFC4  6E                 	db	110	;'n'
   860  00FFC5  20                 	db	32
   861  00FFC6  6E                 	db	110	;'n'
   862  00FFC7  6F                 	db	111	;'o'
   863  00FFC8  74                 	db	116	;'t'
   864  00FFC9  20                 	db	32
   865  00FFCA  0A                 	db	10
   866  00FFCB  00                 	db	0
   867  00FFCC                     STR_8:
   868  00FFCC  43                 	db	67	;'C'
   869  00FFCD  20                 	db	32
   870  00FFCE  20                 	db	32
   871  00FFCF  6C                 	db	108	;'l'
   872  00FFD0  69                 	db	105	;'i'
   873  00FFD1  6D                 	db	109	;'m'
   874  00FFD2  3A                 	db	58	;':'
   875  00FFD3  20                 	db	32
   876  00FFD4  25                 	db	37
   877  00FFD5  66                 	db	102	;'f'
   878  00FFD6  00                 	db	0
   879  00FFD7                     STR_6:
   880  00FFD7  41                 	db	65	;'A'
   881  00FFD8  41                 	db	65	;'A'
   882  00FFD9  20                 	db	32
   883  00FFDA  6C                 	db	108	;'l'
   884  00FFDB  69                 	db	105	;'i'
   885  00FFDC  6D                 	db	109	;'m'
   886  00FFDD  3A                 	db	58	;':'
   887  00FFDE  20                 	db	32
   888  00FFDF  25                 	db	37
   889  00FFE0  66                 	db	102	;'f'
   890  00FFE1  00                 	db	0
   891  00FFE2                     STR_7:
   892  00FFE2  39                 	db	57	;'9'
   893  00FFE3  56                 	db	86	;'V'
   894  00FFE4  20                 	db	32
   895  00FFE5  6C                 	db	108	;'l'
   896  00FFE6  69                 	db	105	;'i'
   897  00FFE7  6D                 	db	109	;'m'
   898  00FFE8  3A                 	db	58	;':'
   899  00FFE9  20                 	db	32
   900  00FFEA  25                 	db	37
   901  00FFEB  66                 	db	102	;'f'
   902  00FFEC  00                 	db	0
   903  00FFED  61                 	db	97	;'a'
   904  00FFEE  6E                 	db	110	;'n'
   905  00FFEF  67                 	db	103	;'g'
   906  00FFF0  6C                 	db	108	;'l'
   907  00FFF1  65                 	db	101	;'e'
   908  00FFF2  3A                 	db	58	;':'
   909  00FFF3  20                 	db	32
   910  00FFF4  25                 	db	37
   911  00FFF5  64                 	db	100	;'d'
   912  00FFF6  00                 	db	0
   913  00FFF7  74                 	db	116	;'t'
   914  00FFF8  31                 	db	49	;'1'
   915  00FFF9  3A                 	db	58	;':'
   916  00FFFA  20                 	db	32
   917  00FFFB  25                 	db	37
   918  00FFFC  78                 	db	120	;'x'
   919  00FFFD  20                 	db	32
   920  00FFFE  00                 	db	0
   921                           
   922                           ; #config settings
   923  00FFFF  00                 	db	0	; dummy byte at the end
   924  0000                     
   925                           	psect	cinit
   926  003C64                     __pcinit:
   927                           	opt stack 0
   928  003C64                     start_initialization:
   929                           	opt stack 0
   930  003C64                     __initialization:
   931                           	opt stack 0
   932                           
   933                           ; Initialize objects allocated to BANK1 (2 bytes)
   934                           ; load TBLPTR registers with __pidataBANK1
   935  003C64  0E36               	movlw	low __pidataBANK1
   936  003C66  6EF6               	movwf	tblptrl,c
   937  003C68  0E46               	movlw	high __pidataBANK1
   938  003C6A  6EF7               	movwf	tblptrh,c
   939  003C6C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   940  003C6E  6EF8               	movwf	tblptru,c
   941  003C70  0009               	tblrd		*+	;fetch initializer
   942  003C72  CFF5 F157          	movff	tablat,__pdataBANK1
   943  003C76  0009               	tblrd		*+	;fetch initializer
   944  003C78  CFF5 F158          	movff	tablat,__pdataBANK1+1
   945                           
   946                           ; Initialize objects allocated to BANK0 (9 bytes)
   947                           ; load TBLPTR registers with __pidataBANK0
   948  003C7C  0E04               	movlw	low __pidataBANK0
   949  003C7E  6EF6               	movwf	tblptrl,c
   950  003C80  0E46               	movlw	high __pidataBANK0
   951  003C82  6EF7               	movwf	tblptrh,c
   952  003C84  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   953  003C86  6EF8               	movwf	tblptru,c
   954  003C88  EE00  F0F5         	lfsr	0,__pdataBANK0
   955  003C8C  EE10 F009          	lfsr	1,9
   956  003C90                     copy_data0:
   957  003C90  0009               	tblrd		*+
   958  003C92  CFF5 FFEE          	movff	tablat,postinc0
   959  003C96  50E5               	movf	postdec1,w,c
   960  003C98  50E1               	movf	fsr1l,w,c
   961  003C9A  E1FA               	bnz	copy_data0
   962                           
   963                           ; Initialize objects allocated to COMRAM (14 bytes)
   964                           ; load TBLPTR registers with __pidataCOMRAM
   965  003C9C  0EE0               	movlw	low __pidataCOMRAM
   966  003C9E  6EF6               	movwf	tblptrl,c
   967  003CA0  0E45               	movlw	high __pidataCOMRAM
   968  003CA2  6EF7               	movwf	tblptrh,c
   969  003CA4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   970  003CA6  6EF8               	movwf	tblptru,c
   971  003CA8  EE00  F04D         	lfsr	0,__pdataCOMRAM
   972  003CAC  EE10 F00E          	lfsr	1,14
   973  003CB0                     copy_data1:
   974  003CB0  0009               	tblrd		*+
   975  003CB2  CFF5 FFEE          	movff	tablat,postinc0
   976  003CB6  50E5               	movf	postdec1,w,c
   977  003CB8  50E1               	movf	fsr1l,w,c
   978  003CBA  E1FA               	bnz	copy_data1
   979                           
   980                           ; Clear objects allocated to BANK1 (24 bytes)
   981  003CBC  EE01  F03F         	lfsr	0,__pbssBANK1
   982  003CC0  0E18               	movlw	24
   983  003CC2                     clear_0:
   984  003CC2  6AEE               	clrf	postinc0,c
   985  003CC4  06E8               	decf	wreg,f,c
   986  003CC6  E1FD               	bnz	clear_0
   987                           
   988                           ; Clear objects allocated to BANK0 (2 bytes)
   989  003CC8  0100               	movlb	0
   990  003CCA  6BFF               	clrf	(__pbssBANK0+1)& (0+255),b
   991  003CCC  6BFE               	clrf	__pbssBANK0& (0+255),b
   992                           
   993                           ; Clear objects allocated to COMRAM (19 bytes)
   994  003CCE  EE00  F03A         	lfsr	0,__pbssCOMRAM
   995  003CD2  0E13               	movlw	19
   996  003CD4                     clear_1:
   997  003CD4  6AEE               	clrf	postinc0,c
   998  003CD6  06E8               	decf	wreg,f,c
   999  003CD8  E1FD               	bnz	clear_1
  1000  003CDA                     end_of_initialization:
  1001                           	opt stack 0
  1002  003CDA                     __end_of__initialization:
  1003                           	opt stack 0
  1004  003CDA  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1005  003CDC  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1006  003CDE  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1007  003CE0  6EF8               	movwf	tblptru,c
  1008  003CE2  0100               	movlb	0
  1009  003CE4  EF05  F007         	goto	_main	;jump to C main() function
  1010                           tblptru	equ	0xFF8
  1011                           tblptrh	equ	0xFF7
  1012                           tblptrl	equ	0xFF6
  1013                           tablat	equ	0xFF5
  1014                           postinc0	equ	0xFEE
  1015                           wreg	equ	0xFE8
  1016                           postdec1	equ	0xFE5
  1017                           fsr1l	equ	0xFE1
  1018                           
  1019                           	psect	bssCOMRAM
  1020  00003A                     __pbssCOMRAM:
  1021                           	opt stack 0
  1022  00003A                     _servos:
  1023                           	opt stack 0
  1024  00003A                     	ds	8
  1025  000042                     _padPin3:
  1026                           	opt stack 0
  1027  000042                     	ds	4
  1028  000046                     _count:
  1029                           	opt stack 0
  1030  000046                     	ds	2
  1031  000048                     _curr:
  1032                           	opt stack 0
  1033  000048                     	ds	2
  1034  00004A                     _prevTime:
  1035                           	opt stack 0
  1036  00004A                     	ds	2
  1037  00004C                     _lastKey:
  1038                           	opt stack 0
  1039  00004C                     	ds	1
  1040                           tblptru	equ	0xFF8
  1041                           tblptrh	equ	0xFF7
  1042                           tblptrl	equ	0xFF6
  1043                           tablat	equ	0xFF5
  1044                           postinc0	equ	0xFEE
  1045                           wreg	equ	0xFE8
  1046                           postdec1	equ	0xFE5
  1047                           fsr1l	equ	0xFE1
  1048                           
  1049                           	psect	dataCOMRAM
  1050  00004D                     __pdataCOMRAM:
  1051                           	opt stack 0
  1052  00004D                     _angle:
  1053                           	opt stack 0
  1054  00004D                     	ds	2
  1055  00004F                     _AA_float:
  1056                           	opt stack 0
  1057  00004F                     	ds	4
  1058  000053                     _padPin1:
  1059                           	opt stack 0
  1060  000053                     	ds	4
  1061  000057                     _padPin2:
  1062                           	opt stack 0
  1063  000057                     	ds	4
  1064                           tblptru	equ	0xFF8
  1065                           tblptrh	equ	0xFF7
  1066                           tblptrl	equ	0xFF6
  1067                           tablat	equ	0xFF5
  1068                           postinc0	equ	0xFEE
  1069                           wreg	equ	0xFE8
  1070                           postdec1	equ	0xFE5
  1071                           fsr1l	equ	0xFE1
  1072                           
  1073                           	psect	bssBANK0
  1074  0000FE                     __pbssBANK0:
  1075                           	opt stack 0
  1076  0000FE                     _n:
  1077                           	opt stack 0
  1078  0000FE                     	ds	2
  1079                           tblptru	equ	0xFF8
  1080                           tblptrh	equ	0xFF7
  1081                           tblptrl	equ	0xFF6
  1082                           tablat	equ	0xFF5
  1083                           postinc0	equ	0xFEE
  1084                           wreg	equ	0xFE8
  1085                           postdec1	equ	0xFE5
  1086                           fsr1l	equ	0xFE1
  1087                           
  1088                           	psect	dataBANK0
  1089  0000F5                     __pdataBANK0:
  1090                           	opt stack 0
  1091  0000F5                     _V_LIM_9V:
  1092                           	opt stack 0
  1093  0000F5                     	ds	3
  1094  0000F8                     _V_LIM_AA:
  1095                           	opt stack 0
  1096  0000F8                     	ds	3
  1097  0000FB                     _V_LIM_C:
  1098                           	opt stack 0
  1099  0000FB                     	ds	3
  1100                           tblptru	equ	0xFF8
  1101                           tblptrh	equ	0xFF7
  1102                           tblptrl	equ	0xFF6
  1103                           tablat	equ	0xFF5
  1104                           postinc0	equ	0xFEE
  1105                           wreg	equ	0xFE8
  1106                           postdec1	equ	0xFE5
  1107                           fsr1l	equ	0xFE1
  1108                           
  1109                           	psect	bssBANK1
  1110  00013F                     __pbssBANK1:
  1111                           	opt stack 0
  1112  00013F                     _pulse:
  1113                           	opt stack 0
  1114  00013F                     	ds	8
  1115  000147                     _time:
  1116                           	opt stack 0
  1117  000147                     	ds	4
  1118  00014B                     _batteryDetected:
  1119                           	opt stack 0
  1120  00014B                     	ds	2
  1121  00014D                     _n_9V:
  1122                           	opt stack 0
  1123  00014D                     	ds	2
  1124  00014F                     _n_AA:
  1125                           	opt stack 0
  1126  00014F                     	ds	2
  1127  000151                     _n_C:
  1128                           	opt stack 0
  1129  000151                     	ds	2
  1130  000153                     _n_OTHER:
  1131                           	opt stack 0
  1132  000153                     	ds	2
  1133  000155                     _terminate:
  1134                           	opt stack 0
  1135  000155                     	ds	2
  1136                           tblptru	equ	0xFF8
  1137                           tblptrh	equ	0xFF7
  1138                           tblptrl	equ	0xFF6
  1139                           tablat	equ	0xFF5
  1140                           postinc0	equ	0xFEE
  1141                           wreg	equ	0xFE8
  1142                           postdec1	equ	0xFE5
  1143                           fsr1l	equ	0xFE1
  1144                           
  1145                           	psect	dataBANK1
  1146  000157                     __pdataBANK1:
  1147                           	opt stack 0
  1148  000157                     _stoppingTime:
  1149                           	opt stack 0
  1150  000157                     	ds	2
  1151                           tblptru	equ	0xFF8
  1152                           tblptrh	equ	0xFF7
  1153                           tblptrl	equ	0xFF6
  1154                           tablat	equ	0xFF5
  1155                           postinc0	equ	0xFEE
  1156                           wreg	equ	0xFE8
  1157                           postdec1	equ	0xFE5
  1158                           fsr1l	equ	0xFE1
  1159                           
  1160                           	psect	cstackBANK1
  1161  000100                     __pcstackBANK1:
  1162                           	opt stack 0
  1163  000100                     showDateTime@sec:
  1164                           	opt stack 0
  1165  000100                     _sortBattery$1418:
  1166                           	opt stack 0
  1167  000100                     _showRunTime$1420:
  1168                           	opt stack 0
  1169                           
  1170                           ; 4 bytes @ 0x0
  1171  000100                     	ds	2
  1172  000102                     showDateTime@min:
  1173                           	opt stack 0
  1174  000102                     sortBattery@V_float:
  1175                           	opt stack 0
  1176                           
  1177                           ; 3 bytes @ 0x2
  1178  000102                     	ds	2
  1179  000104                     showDateTime@hour:
  1180                           	opt stack 0
  1181  000104                     showRunTime@t1:
  1182                           	opt stack 0
  1183                           
  1184                           ; 2 bytes @ 0x4
  1185  000104                     	ds	1
  1186  000105                     sortBattery@signal:
  1187                           	opt stack 0
  1188                           
  1189                           ; 2 bytes @ 0x5
  1190  000105                     	ds	1
  1191  000106                     showDateTime@day:
  1192                           	opt stack 0
  1193  000106                     showRunTime@t2:
  1194                           	opt stack 0
  1195                           
  1196                           ; 2 bytes @ 0x6
  1197  000106                     	ds	1
  1198  000107                     sortBattery@V_max:
  1199                           	opt stack 0
  1200                           
  1201                           ; 3 bytes @ 0x7
  1202  000107                     	ds	1
  1203  000108                     showDateTime@mon:
  1204                           	opt stack 0
  1205  000108                     showRunTime@time:
  1206                           	opt stack 0
  1207                           
  1208                           ; 4 bytes @ 0x8
  1209  000108                     	ds	2
  1210  00010A                     sortBattery@pos_v_counter:
  1211                           	opt stack 0
  1212  00010A                     showDateTime@year:
  1213                           	opt stack 0
  1214                           
  1215                           ; 2 bytes @ 0xA
  1216  00010A                     	ds	2
  1217  00010C                     sortBattery@targetAngle:
  1218                           	opt stack 0
  1219  00010C                     showDateTime@t:
  1220                           	opt stack 0
  1221                           
  1222                           ; 2 bytes @ 0xC
  1223  00010C                     	ds	2
  1224  00010E                     ??_showInterface:
  1225  00010E                     sortBattery@V_sum:
  1226                           	opt stack 0
  1227                           
  1228                           ; 3 bytes @ 0xE
  1229  00010E                     	ds	2
  1230  000110                     showInterface@n:
  1231                           	opt stack 0
  1232                           
  1233                           ; 2 bytes @ 0x10
  1234  000110                     	ds	1
  1235  000111                     sortBattery@V_249:
  1236                           	opt stack 0
  1237                           
  1238                           ; 3 bytes @ 0x11
  1239  000111                     	ds	1
  1240  000112                     showInterface@run:
  1241                           	opt stack 0
  1242                           
  1243                           ; 2 bytes @ 0x12
  1244  000112                     	ds	2
  1245  000114                     showInterface@key:
  1246                           	opt stack 0
  1247  000114                     sortBattery@i:
  1248                           	opt stack 0
  1249                           
  1250                           ; 3 bytes @ 0x14
  1251  000114                     	ds	3
  1252  000117                     sortBattery@V:
  1253                           	opt stack 0
  1254                           
  1255                           ; 3 bytes @ 0x17
  1256  000117                     	ds	3
  1257  00011A                     ??_main:
  1258                           
  1259                           ; 1 bytes @ 0x1A
  1260  00011A                     	ds	13
  1261  000127                     _main$1417:
  1262                           	opt stack 0
  1263                           
  1264                           ; 4 bytes @ 0x27
  1265  000127                     	ds	4
  1266  00012B                     main@cylinderStart:
  1267                           	opt stack 0
  1268                           
  1269                           ; 2 bytes @ 0x2B
  1270  00012B                     	ds	2
  1271  00012D                     main@run:
  1272                           	opt stack 0
  1273                           
  1274                           ; 14 bytes @ 0x2D
  1275  00012D                     	ds	14
  1276  00013B                     main@duration:
  1277                           	opt stack 0
  1278                           
  1279                           ; 2 bytes @ 0x3B
  1280  00013B                     	ds	2
  1281  00013D                     main@lastBatteryTime:
  1282                           	opt stack 0
  1283                           
  1284                           ; 2 bytes @ 0x3D
  1285  00013D                     	ds	2
  1286                           tblptru	equ	0xFF8
  1287                           tblptrh	equ	0xFF7
  1288                           tblptrl	equ	0xFF6
  1289                           tablat	equ	0xFF5
  1290                           postinc0	equ	0xFEE
  1291                           wreg	equ	0xFE8
  1292                           postdec1	equ	0xFE5
  1293                           fsr1l	equ	0xFE1
  1294                           
  1295                           	psect	cstackBANK0
  1296  000080                     __pcstackBANK0:
  1297                           	opt stack 0
  1298  000080                     ?_eepromRead:
  1299                           	opt stack 0
  1300  000080                     ?___ftmul:
  1301                           	opt stack 0
  1302  000080                     ___aldiv@counter:
  1303                           	opt stack 0
  1304  000080                     ___llmod@counter:
  1305                           	opt stack 0
  1306  000080                     ___ftmul@f1:
  1307                           	opt stack 0
  1308  000080                     eepromRead@address:
  1309                           	opt stack 0
  1310  000080                     getTime@time:
  1311                           	opt stack 0
  1312                           
  1313                           ; 14 bytes @ 0x0
  1314  000080                     	ds	1
  1315  000081                     ___aldiv@sign:
  1316                           	opt stack 0
  1317                           
  1318                           ; 1 bytes @ 0x1
  1319  000081                     	ds	1
  1320  000082                     ___aldiv@quotient:
  1321                           	opt stack 0
  1322                           
  1323                           ; 4 bytes @ 0x2
  1324  000082                     	ds	1
  1325  000083                     ___ftmul@f2:
  1326                           	opt stack 0
  1327                           
  1328                           ; 3 bytes @ 0x3
  1329  000083                     	ds	1
  1330  000084                     ?_readPastRun:
  1331                           	opt stack 0
  1332  000084                     readPastRun@run:
  1333                           	opt stack 0
  1334  000084                     eepromWrite@data:
  1335                           	opt stack 0
  1336                           
  1337                           ; 2 bytes @ 0x4
  1338  000084                     	ds	2
  1339  000086                     ??___ftmul:
  1340  000086                     eepromWrite@address:
  1341                           	opt stack 0
  1342  000086                     readPastRun@data:
  1343                           	opt stack 0
  1344                           
  1345                           ; 14 bytes @ 0x6
  1346  000086                     	ds	3
  1347  000089                     ___ftmul@exp:
  1348                           	opt stack 0
  1349                           
  1350                           ; 1 bytes @ 0x9
  1351  000089                     	ds	1
  1352  00008A                     eepromWrite@ien:
  1353                           	opt stack 0
  1354  00008A                     ___ftmul@f3_as_product:
  1355                           	opt stack 0
  1356                           
  1357                           ; 3 bytes @ 0xA
  1358  00008A                     	ds	2
  1359  00008C                     saveNewRun@data:
  1360                           	opt stack 0
  1361                           
  1362                           ; 2 bytes @ 0xC
  1363  00008C                     	ds	1
  1364  00008D                     ___ftmul@cntr:
  1365                           	opt stack 0
  1366                           
  1367                           ; 1 bytes @ 0xD
  1368  00008D                     	ds	1
  1369  00008E                     getTime@i:
  1370                           	opt stack 0
  1371  00008E                     ___ftmul@sign:
  1372                           	opt stack 0
  1373  00008E                     saveNewRun@n:
  1374                           	opt stack 0
  1375                           
  1376                           ; 2 bytes @ 0xE
  1377  00008E                     	ds	1
  1378  00008F                     ?___ftdiv:
  1379                           	opt stack 0
  1380  00008F                     ?_fround:
  1381                           	opt stack 0
  1382  00008F                     ?_scale:
  1383                           	opt stack 0
  1384  00008F                     ___ftdiv@f1:
  1385                           	opt stack 0
  1386                           
  1387                           ; 3 bytes @ 0xF
  1388  00008F                     	ds	1
  1389  000090                     saveNewRun@i:
  1390                           	opt stack 0
  1391                           
  1392                           ; 2 bytes @ 0x10
  1393  000090                     	ds	2
  1394  000092                     ___ftdiv@f2:
  1395                           	opt stack 0
  1396  000092                     _fround$1422:
  1397                           	opt stack 0
  1398  000092                     _scale$1423:
  1399                           	opt stack 0
  1400                           
  1401                           ; 3 bytes @ 0x12
  1402  000092                     	ds	2
  1403  000094                     readPastRun@i:
  1404                           	opt stack 0
  1405                           
  1406                           ; 2 bytes @ 0x14
  1407  000094                     	ds	1
  1408  000095                     ??___ftdiv:
  1409  000095                     scale@scl:
  1410                           	opt stack 0
  1411  000095                     _fround$1421:
  1412                           	opt stack 0
  1413                           
  1414                           ; 3 bytes @ 0x15
  1415  000095                     	ds	3
  1416  000098                     fround@prec:
  1417                           	opt stack 0
  1418  000098                     ___ftdiv@cntr:
  1419                           	opt stack 0
  1420                           
  1421                           ; 1 bytes @ 0x18
  1422  000098                     	ds	1
  1423  000099                     ___ftdiv@f3:
  1424                           	opt stack 0
  1425                           
  1426                           ; 3 bytes @ 0x19
  1427  000099                     	ds	3
  1428  00009C                     ___ftdiv@exp:
  1429                           	opt stack 0
  1430                           
  1431                           ; 1 bytes @ 0x1C
  1432  00009C                     	ds	1
  1433  00009D                     ___ftdiv@sign:
  1434                           	opt stack 0
  1435                           
  1436                           ; 1 bytes @ 0x1D
  1437  00009D                     	ds	1
  1438  00009E                     ?___ftadd:
  1439                           	opt stack 0
  1440  00009E                     ___ftadd@f1:
  1441                           	opt stack 0
  1442                           
  1443                           ; 3 bytes @ 0x1E
  1444  00009E                     	ds	3
  1445  0000A1                     ___ftadd@f2:
  1446                           	opt stack 0
  1447                           
  1448                           ; 3 bytes @ 0x21
  1449  0000A1                     	ds	3
  1450  0000A4                     ??___ftadd:
  1451                           
  1452                           ; 1 bytes @ 0x24
  1453  0000A4                     	ds	3
  1454  0000A7                     ___ftadd@sign:
  1455                           	opt stack 0
  1456                           
  1457                           ; 1 bytes @ 0x27
  1458  0000A7                     	ds	1
  1459  0000A8                     ___ftadd@exp2:
  1460                           	opt stack 0
  1461                           
  1462                           ; 1 bytes @ 0x28
  1463  0000A8                     	ds	1
  1464  0000A9                     ___ftadd@exp1:
  1465                           	opt stack 0
  1466                           
  1467                           ; 1 bytes @ 0x29
  1468  0000A9                     	ds	1
  1469  0000AA                     ?___ftsub:
  1470                           	opt stack 0
  1471  0000AA                     ?___fttol:
  1472                           	opt stack 0
  1473  0000AA                     ___ftsub@f1:
  1474                           	opt stack 0
  1475  0000AA                     ___fttol@f1:
  1476                           	opt stack 0
  1477                           
  1478                           ; 3 bytes @ 0x2A
  1479  0000AA                     	ds	3
  1480  0000AD                     ___ftsub@f2:
  1481                           	opt stack 0
  1482                           
  1483                           ; 3 bytes @ 0x2D
  1484  0000AD                     	ds	1
  1485  0000AE                     ??___fttol:
  1486                           
  1487                           ; 1 bytes @ 0x2E
  1488  0000AE                     	ds	5
  1489  0000B3                     ___fttol@sign1:
  1490                           	opt stack 0
  1491                           
  1492                           ; 1 bytes @ 0x33
  1493  0000B3                     	ds	1
  1494  0000B4                     ___fttol@lval:
  1495                           	opt stack 0
  1496                           
  1497                           ; 4 bytes @ 0x34
  1498  0000B4                     	ds	4
  1499  0000B8                     ___fttol@exp1:
  1500                           	opt stack 0
  1501                           
  1502                           ; 1 bytes @ 0x38
  1503  0000B8                     	ds	1
  1504  0000B9                     ?_printf:
  1505                           	opt stack 0
  1506  0000B9                     ?_angleToPulse:
  1507                           	opt stack 0
  1508  0000B9                     angleToPulse@angle:
  1509                           	opt stack 0
  1510  0000B9                     printf@f:
  1511                           	opt stack 0
  1512                           
  1513                           ; 2 bytes @ 0x39
  1514  0000B9                     	ds	4
  1515  0000BD                     ??_angleToPulse:
  1516                           
  1517                           ; 1 bytes @ 0x3D
  1518  0000BD                     	ds	4
  1519  0000C1                     angleToPulse@offset:
  1520                           	opt stack 0
  1521                           
  1522                           ; 4 bytes @ 0x41
  1523  0000C1                     	ds	4
  1524  0000C5                     angleToPulse@a180:
  1525                           	opt stack 0
  1526                           
  1527                           ; 4 bytes @ 0x45
  1528  0000C5                     	ds	2
  1529  0000C7                     ??_printf:
  1530                           
  1531                           ; 1 bytes @ 0x47
  1532  0000C7                     	ds	2
  1533  0000C9                     _angleToPulse$1419:
  1534                           	opt stack 0
  1535                           
  1536                           ; 3 bytes @ 0x49
  1537  0000C9                     	ds	3
  1538  0000CC                     angleToPulse@a000:
  1539                           	opt stack 0
  1540                           
  1541                           ; 4 bytes @ 0x4C
  1542  0000CC                     	ds	1
  1543  0000CD                     _printf$1424:
  1544                           	opt stack 0
  1545                           
  1546                           ; 3 bytes @ 0x4D
  1547  0000CD                     	ds	3
  1548  0000D0                     printf@idx:
  1549                           	opt stack 0
  1550  0000D0                     setAngle@motor:
  1551                           	opt stack 0
  1552                           
  1553                           ; 2 bytes @ 0x50
  1554  0000D0                     	ds	1
  1555  0000D1                     printf@cp:
  1556                           	opt stack 0
  1557                           
  1558                           ; 2 bytes @ 0x51
  1559  0000D1                     	ds	1
  1560  0000D2                     setAngle@angle:
  1561                           	opt stack 0
  1562                           
  1563                           ; 2 bytes @ 0x52
  1564  0000D2                     	ds	1
  1565  0000D3                     printf@len:
  1566                           	opt stack 0
  1567                           
  1568                           ; 2 bytes @ 0x53
  1569  0000D3                     	ds	1
  1570  0000D4                     ??_setAngle:
  1571                           
  1572                           ; 1 bytes @ 0x54
  1573  0000D4                     	ds	1
  1574  0000D5                     printf@ap:
  1575                           	opt stack 0
  1576                           
  1577                           ; 2 bytes @ 0x55
  1578  0000D5                     	ds	1
  1579  0000D6                     setAngle@period:
  1580                           	opt stack 0
  1581                           
  1582                           ; 2 bytes @ 0x56
  1583  0000D6                     	ds	1
  1584  0000D7                     printf@tmpval:
  1585                           	opt stack 0
  1586                           
  1587                           ; 4 bytes @ 0x57
  1588  0000D7                     	ds	1
  1589  0000D8                     setAngle@i:
  1590                           	opt stack 0
  1591                           
  1592                           ; 2 bytes @ 0x58
  1593  0000D8                     	ds	2
  1594  0000DA                     initServo@motor:
  1595                           	opt stack 0
  1596                           
  1597                           ; 2 bytes @ 0x5A
  1598  0000DA                     	ds	1
  1599  0000DB                     printf@exp:
  1600                           	opt stack 0
  1601                           
  1602                           ; 2 bytes @ 0x5B
  1603  0000DB                     	ds	1
  1604  0000DC                     initServo@angle:
  1605                           	opt stack 0
  1606                           
  1607                           ; 2 bytes @ 0x5C
  1608  0000DC                     	ds	1
  1609  0000DD                     printf@fval:
  1610                           	opt stack 0
  1611                           
  1612                           ; 3 bytes @ 0x5D
  1613  0000DD                     	ds	1
  1614  0000DE                     ??_initServo:
  1615                           
  1616                           ; 1 bytes @ 0x5E
  1617  0000DE                     	ds	2
  1618  0000E0                     printf@val:
  1619                           	opt stack 0
  1620                           
  1621                           ; 4 bytes @ 0x60
  1622  0000E0                     	ds	2
  1623  0000E2                     initServo@i:
  1624                           	opt stack 0
  1625                           
  1626                           ; 2 bytes @ 0x62
  1627  0000E2                     	ds	2
  1628  0000E4                     printf@width:
  1629                           	opt stack 0
  1630                           
  1631                           ; 2 bytes @ 0x64
  1632  0000E4                     	ds	2
  1633  0000E6                     printf@flag:
  1634                           	opt stack 0
  1635                           
  1636                           ; 2 bytes @ 0x66
  1637  0000E6                     	ds	2
  1638  0000E8                     printf@prec:
  1639                           	opt stack 0
  1640                           
  1641                           ; 2 bytes @ 0x68
  1642  0000E8                     	ds	2
  1643  0000EA                     printf@c:
  1644                           	opt stack 0
  1645                           
  1646                           ; 1 bytes @ 0x6A
  1647  0000EA                     	ds	1
  1648  0000EB                     ??_sortBattery:
  1649  0000EB                     ??_showDateTime:
  1650  0000EB                     showMainMenu@k:
  1651                           	opt stack 0
  1652  0000EB                     showRunSelect@k:
  1653                           	opt stack 0
  1654  0000EB                     showRunMenu@key:
  1655                           	opt stack 0
  1656  0000EB                     showRunTime@run:
  1657                           	opt stack 0
  1658  0000EB                     showRunStats@run:
  1659                           	opt stack 0
  1660                           
  1661                           ; 2 bytes @ 0x6B
  1662  0000EB                     	ds	1
  1663  0000EC                     showRunMenu@k:
  1664                           	opt stack 0
  1665                           
  1666                           ; 1 bytes @ 0x6C
  1667  0000EC                     	ds	1
  1668  0000ED                     ??_showRunTime:
  1669  0000ED                     showRunStats@n_AA:
  1670                           	opt stack 0
  1671                           
  1672                           ; 2 bytes @ 0x6D
  1673  0000ED                     	ds	2
  1674  0000EF                     showRunStats@n_9V:
  1675                           	opt stack 0
  1676                           
  1677                           ; 2 bytes @ 0x6F
  1678  0000EF                     	ds	2
  1679  0000F1                     showRunStats@n_C:
  1680                           	opt stack 0
  1681                           
  1682                           ; 2 bytes @ 0x71
  1683  0000F1                     	ds	2
  1684  0000F3                     showRunStats@n_OTHER:
  1685                           	opt stack 0
  1686                           
  1687                           ; 2 bytes @ 0x73
  1688  0000F3                     	ds	2
  1689                           tblptru	equ	0xFF8
  1690                           tblptrh	equ	0xFF7
  1691                           tblptrl	equ	0xFF6
  1692                           tablat	equ	0xFF5
  1693                           postinc0	equ	0xFEE
  1694                           wreg	equ	0xFE8
  1695                           postdec1	equ	0xFE5
  1696                           fsr1l	equ	0xFE1
  1697                           
  1698                           	psect	cstackCOMRAM
  1699  000001                     __pcstackCOMRAM:
  1700                           	opt stack 0
  1701  000001                     ?i2___awmod:
  1702                           	opt stack 0
  1703  000001                     keyPressedInterruptService@key:
  1704                           	opt stack 0
  1705  000001                     i2___awmod@dividend:
  1706                           	opt stack 0
  1707                           
  1708                           ; 2 bytes @ 0x0
  1709  000001                     	ds	2
  1710  000003                     i2___awmod@divisor:
  1711                           	opt stack 0
  1712                           
  1713                           ; 2 bytes @ 0x2
  1714  000003                     	ds	2
  1715  000005                     i2___awmod@counter:
  1716                           	opt stack 0
  1717                           
  1718                           ; 1 bytes @ 0x4
  1719  000005                     	ds	1
  1720  000006                     i2___awmod@sign:
  1721                           	opt stack 0
  1722                           
  1723                           ; 1 bytes @ 0x5
  1724  000006                     	ds	1
  1725  000007                     i2digitalWrite@pin:
  1726                           	opt stack 0
  1727  000007                     i2startTimer@timer:
  1728                           	opt stack 0
  1729                           
  1730                           ; 2 bytes @ 0x6
  1731  000007                     	ds	2
  1732  000009                     i2digitalWrite@val:
  1733                           	opt stack 0
  1734  000009                     i2startTimer@val:
  1735                           	opt stack 0
  1736                           
  1737                           ; 4 bytes @ 0x8
  1738  000009                     	ds	2
  1739  00000B                     ??i2_digitalWrite:
  1740                           
  1741                           ; 1 bytes @ 0xA
  1742  00000B                     	ds	2
  1743  00000D                     ??i2_startTimer:
  1744                           
  1745                           ; 1 bytes @ 0xC
  1746  00000D                     	ds	3
  1747  000010                     i2digitalWrite@p:
  1748                           	opt stack 0
  1749                           
  1750                           ; 2 bytes @ 0xF
  1751  000010                     	ds	2
  1752  000012                     ??_servoInterruptService:
  1753                           
  1754                           ; 1 bytes @ 0x11
  1755  000012                     	ds	4
  1756  000016                     ??_service:
  1757                           
  1758                           ; 1 bytes @ 0x15
  1759  000016                     	ds	14
  1760  000024                     service@key:
  1761                           	opt stack 0
  1762                           
  1763                           ; 1 bytes @ 0x23
  1764  000024                     	ds	1
  1765  000025                     ??_isdigit:
  1766  000025                     ??_I2C_Master_Wait:
  1767  000025                     ?_digitalRead:
  1768                           	opt stack 0
  1769  000025                     ?___awmod:
  1770                           	opt stack 0
  1771  000025                     ?___ftpack:
  1772                           	opt stack 0
  1773  000025                     ?___ftneg:
  1774                           	opt stack 0
  1775  000025                     ?_analogRead:
  1776                           	opt stack 0
  1777  000025                     ?__tdiv_to_l_:
  1778                           	opt stack 0
  1779  000025                     ?__div_to_l_:
  1780                           	opt stack 0
  1781  000025                     ?___almod:
  1782                           	opt stack 0
  1783  000025                     ?___lldiv:
  1784                           	opt stack 0
  1785  000025                     lcdNibble@temp:
  1786                           	opt stack 0
  1787  000025                     readKeypad@key:
  1788                           	opt stack 0
  1789  000025                     keyPressed@key:
  1790                           	opt stack 0
  1791  000025                     digitalRead@pin:
  1792                           	opt stack 0
  1793  000025                     digitalWrite@pin:
  1794                           	opt stack 0
  1795  000025                     analogRead@channel:
  1796                           	opt stack 0
  1797  000025                     initTimer@timer:
  1798                           	opt stack 0
  1799  000025                     startTimer@timer:
  1800                           	opt stack 0
  1801  000025                     ___awmod@dividend:
  1802                           	opt stack 0
  1803  000025                     __div_to_l_@f1:
  1804                           	opt stack 0
  1805  000025                     ___ftpack@arg:
  1806                           	opt stack 0
  1807  000025                     __tdiv_to_l_@f1:
  1808                           	opt stack 0
  1809  000025                     ___ftneg@f1:
  1810                           	opt stack 0
  1811  000025                     ___almod@dividend:
  1812                           	opt stack 0
  1813  000025                     ___lldiv@dividend:
  1814                           	opt stack 0
  1815                           
  1816                           ; 4 bytes @ 0x24
  1817  000025                     	ds	1
  1818  000026                     lcdNibble@data:
  1819                           	opt stack 0
  1820  000026                     I2C_Master_Read@a:
  1821                           	opt stack 0
  1822  000026                     _isdigit$1053:
  1823                           	opt stack 0
  1824  000026                     I2C_Master_Write@d:
  1825                           	opt stack 0
  1826                           
  1827                           ; 2 bytes @ 0x25
  1828  000026                     	ds	1
  1829  000027                     ??_initTimer:
  1830  000027                     ??_digitalRead:
  1831  000027                     ??_lcdInst:
  1832  000027                     I2C_Master_Read@temp:
  1833                           	opt stack 0
  1834  000027                     isdigit@c:
  1835                           	opt stack 0
  1836  000027                     digitalWrite@val:
  1837                           	opt stack 0
  1838  000027                     ___awmod@divisor:
  1839                           	opt stack 0
  1840  000027                     startTimer@val:
  1841                           	opt stack 0
  1842                           
  1843                           ; 4 bytes @ 0x26
  1844  000027                     	ds	1
  1845  000028                     ?_getTime:
  1846                           	opt stack 0
  1847  000028                     lcdInst@data:
  1848                           	opt stack 0
  1849  000028                     ___ftpack@exp:
  1850                           	opt stack 0
  1851  000028                     __div_to_l_@f2:
  1852                           	opt stack 0
  1853  000028                     __tdiv_to_l_@f2:
  1854                           	opt stack 0
  1855                           
  1856                           ; 3 bytes @ 0x27
  1857  000028                     	ds	1
  1858  000029                     ??_initLCD:
  1859  000029                     ??_digitalWrite:
  1860  000029                     ??_analogRead:
  1861  000029                     putch@data:
  1862                           	opt stack 0
  1863  000029                     ___awmod@counter:
  1864                           	opt stack 0
  1865  000029                     ___ftpack@sign:
  1866                           	opt stack 0
  1867  000029                     ___almod@divisor:
  1868                           	opt stack 0
  1869  000029                     ___lldiv@divisor:
  1870                           	opt stack 0
  1871                           
  1872                           ; 4 bytes @ 0x28
  1873  000029                     	ds	1
  1874  00002A                     ??___ftpack:
  1875  00002A                     ??_getTime:
  1876  00002A                     ___awmod@sign:
  1877                           	opt stack 0
  1878                           
  1879                           ; 1 bytes @ 0x29
  1880  00002A                     	ds	1
  1881  00002B                     ??_startTimer:
  1882  00002B                     ??__tdiv_to_l_:
  1883  00002B                     ?___awdiv:
  1884                           	opt stack 0
  1885  00002B                     ___awdiv@dividend:
  1886                           	opt stack 0
  1887  00002B                     __div_to_l_@quot:
  1888                           	opt stack 0
  1889                           
  1890                           ; 4 bytes @ 0x2A
  1891  00002B                     	ds	2
  1892  00002D                     ?___altoft:
  1893                           	opt stack 0
  1894  00002D                     ?___awtoft:
  1895                           	opt stack 0
  1896  00002D                     ?___lltoft:
  1897                           	opt stack 0
  1898  00002D                     ___almod@counter:
  1899                           	opt stack 0
  1900  00002D                     ___awdiv@divisor:
  1901                           	opt stack 0
  1902  00002D                     ___awtoft@c:
  1903                           	opt stack 0
  1904  00002D                     ___altoft@c:
  1905                           	opt stack 0
  1906  00002D                     ___lldiv@quotient:
  1907                           	opt stack 0
  1908  00002D                     ___lltoft@c:
  1909                           	opt stack 0
  1910                           
  1911                           ; 4 bytes @ 0x2C
  1912  00002D                     	ds	1
  1913  00002E                     ___almod@sign:
  1914                           	opt stack 0
  1915  00002E                     digitalWrite@p:
  1916                           	opt stack 0
  1917  00002E                     __tdiv_to_l_@quot:
  1918                           	opt stack 0
  1919                           
  1920                           ; 4 bytes @ 0x2D
  1921  00002E                     	ds	1
  1922  00002F                     ?___aldiv:
  1923                           	opt stack 0
  1924  00002F                     ___awdiv@counter:
  1925                           	opt stack 0
  1926  00002F                     __div_to_l_@cntr:
  1927                           	opt stack 0
  1928  00002F                     ___aldiv@dividend:
  1929                           	opt stack 0
  1930                           
  1931                           ; 4 bytes @ 0x2E
  1932  00002F                     	ds	1
  1933  000030                     ___awdiv@sign:
  1934                           	opt stack 0
  1935  000030                     ___awtoft@sign:
  1936                           	opt stack 0
  1937  000030                     __div_to_l_@exp1:
  1938                           	opt stack 0
  1939                           
  1940                           ; 1 bytes @ 0x2F
  1941  000030                     	ds	1
  1942  000031                     ??___altoft:
  1943  000031                     ??___lltoft:
  1944  000031                     ___lldiv@counter:
  1945                           	opt stack 0
  1946  000031                     ___awdiv@quotient:
  1947                           	opt stack 0
  1948  000031                     ___ftge@ff1:
  1949                           	opt stack 0
  1950                           
  1951                           ; 3 bytes @ 0x30
  1952  000031                     	ds	1
  1953  000032                     ?___llmod:
  1954                           	opt stack 0
  1955  000032                     __tdiv_to_l_@cntr:
  1956                           	opt stack 0
  1957  000032                     I2C_Master_Init@c:
  1958                           	opt stack 0
  1959  000032                     ___llmod@dividend:
  1960                           	opt stack 0
  1961                           
  1962                           ; 4 bytes @ 0x31
  1963  000032                     	ds	1
  1964  000033                     ?___wmul:
  1965                           	opt stack 0
  1966  000033                     __tdiv_to_l_@exp1:
  1967                           	opt stack 0
  1968  000033                     ___wmul@multiplier:
  1969                           	opt stack 0
  1970  000033                     ___aldiv@divisor:
  1971                           	opt stack 0
  1972                           
  1973                           ; 4 bytes @ 0x32
  1974  000033                     	ds	1
  1975  000034                     ___ftge@ff2:
  1976                           	opt stack 0
  1977                           
  1978                           ; 3 bytes @ 0x33
  1979  000034                     	ds	1
  1980  000035                     ___altoft@exp:
  1981                           	opt stack 0
  1982  000035                     ___lltoft@exp:
  1983                           	opt stack 0
  1984  000035                     ___wmul@multiplicand:
  1985                           	opt stack 0
  1986                           
  1987                           ; 2 bytes @ 0x34
  1988  000035                     	ds	1
  1989  000036                     ??_I2C_Master_Init:
  1990  000036                     ___altoft@sign:
  1991                           	opt stack 0
  1992  000036                     ___llmod@divisor:
  1993                           	opt stack 0
  1994                           
  1995                           ; 4 bytes @ 0x35
  1996  000036                     	ds	1
  1997  000037                     ??___ftge:
  1998  000037                     ___wmul@product:
  1999                           	opt stack 0
  2000                           
  2001                           ; 2 bytes @ 0x36
  2002  000037                     	ds	2
  2003  000039                     ??_eepromWrite:
  2004  000039                     
  2005                           ; 1 bytes @ 0x38
  2006  000039                     	ds	1
  2007  00003A                     tblptru	equ	0xFF8
  2008                           tblptrh	equ	0xFF7
  2009                           tblptrl	equ	0xFF6
  2010                           tablat	equ	0xFF5
  2011                           postinc0	equ	0xFEE
  2012                           wreg	equ	0xFE8
  2013                           postdec1	equ	0xFE5
  2014                           fsr1l	equ	0xFE1
  2015                           
  2016                           ; 1 bytes @ 0x39
  2017 ;;
  2018 ;;Main: autosize = 0, tempsize = 13, incstack = 0, save=0
  2019 ;;
  2020 ;; *************** function _main *****************
  2021 ;; Defined at:
  2022 ;;		line 129 in file "main.c"
  2023 ;; Parameters:    Size  Location     Type
  2024 ;;		None
  2025 ;; Auto vars:     Size  Location     Type
  2026 ;;  lastBatteryT    2   61[BANK1 ] int 
  2027 ;;  duration        2   59[BANK1 ] int 
  2028 ;;  cylinderStar    2   43[BANK1 ] int 
  2029 ;;  run            14   45[BANK1 ] int [7]
  2030 ;; Return value:  Size  Location     Type
  2031 ;;                  1    wreg      void 
  2032 ;; Registers used:
  2033 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2034 ;; Tracked objects:
  2035 ;;		On entry : 0/0
  2036 ;;		On exit  : 0/0
  2037 ;;		Unchanged: 0/0
  2038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2040 ;;      Locals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2041 ;;      Temps:          0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2042 ;;      Totals:         0       0      37       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2043 ;;Total ram usage:       37 bytes
  2044 ;; Hardware stack levels required when called:   10
  2045 ;; This function calls:
  2046 ;;		___aldiv
  2047 ;;		___almod
  2048 ;;		___awtoft
  2049 ;;		___ftadd
  2050 ;;		___ftdiv
  2051 ;;		___ftmul
  2052 ;;		___fttol
  2053 ;;		_digitalRead
  2054 ;;		_digitalWrite
  2055 ;;		_initLCD
  2056 ;;		_initServo
  2057 ;;		_initTimer
  2058 ;;		_lcdHome
  2059 ;;		_pinSetup
  2060 ;;		_printf
  2061 ;;		_saveNewRun
  2062 ;;		_setAngle
  2063 ;;		_showInterface
  2064 ;;		_showRunStats
  2065 ;;		_showRunTime
  2066 ;;		_sortBattery
  2067 ;;		_startTimer
  2068 ;; This function is called by:
  2069 ;;		Startup code after reset
  2070 ;; This function uses a non-reentrant model
  2071 ;;
  2072                           
  2073                           	psect	text0
  2074  000E0A                     __ptext0:
  2075                           	opt stack 0
  2076  000E0A                     _main:
  2077                           	opt stack 21
  2078                           
  2079                           ;main.c: 133: pinSetup();
  2080                           
  2081                           ;incstack = 0
  2082  000E0A  ECD1  F021         	call	_pinSetup	;wreg free
  2083                           
  2084                           ;main.c: 134: initLCD();
  2085  000E0E  ECAE  F021         	call	_initLCD	;wreg free
  2086  000E12                     l7784:
  2087                           
  2088                           ;main.c: 137: showInterface();
  2089  000E12  ECF0  F01B         	call	_showInterface	;wreg free
  2090                           
  2091                           ;main.c: 140: terminate = 0;
  2092  000E16  0E00               	movlw	0
  2093  000E18  0101               	movlb	1	; () banked
  2094  000E1A  6F56               	movwf	(_terminate+1)& (0+255),b
  2095  000E1C  0E00               	movlw	0
  2096  000E1E  6F55               	movwf	_terminate& (0+255),b
  2097                           
  2098                           ; BSR set to: 1
  2099                           ;main.c: 141: time = 0;
  2100  000E20  0E00               	movlw	0
  2101  000E22  0101               	movlb	1	; () banked
  2102  000E24  6F47               	movwf	_time& (0+255),b
  2103  000E26  0E00               	movlw	0
  2104  000E28  6F48               	movwf	(_time+1)& (0+255),b
  2105  000E2A  0E00               	movlw	0
  2106  000E2C  6F49               	movwf	(_time+2)& (0+255),b
  2107  000E2E  0E00               	movlw	0
  2108  000E30  6F4A               	movwf	(_time+3)& (0+255),b
  2109                           
  2110                           ; BSR set to: 1
  2111                           ;main.c: 142: initTimer(1);
  2112  000E32  0E00               	movlw	0
  2113  000E34  6E26               	movwf	initTimer@timer+1,c
  2114  000E36  0E01               	movlw	1
  2115  000E38  6E25               	movwf	initTimer@timer,c
  2116  000E3A  EC89  F021         	call	_initTimer	;wreg free
  2117                           
  2118                           ;main.c: 143: startTimer(1,0);
  2119  000E3E  0E00               	movlw	0
  2120  000E40  6E26               	movwf	startTimer@timer+1,c
  2121  000E42  0E01               	movlw	1
  2122  000E44  6E25               	movwf	startTimer@timer,c
  2123  000E46  0E00               	movlw	0
  2124  000E48  6E27               	movwf	startTimer@val,c
  2125  000E4A  0E00               	movlw	0
  2126  000E4C  6E28               	movwf	startTimer@val+1,c
  2127  000E4E  0E00               	movlw	0
  2128  000E50  6E29               	movwf	startTimer@val+2,c
  2129  000E52  0E00               	movlw	0
  2130  000E54  6E2A               	movwf	startTimer@val+3,c
  2131  000E56  EC3D  F021         	call	_startTimer	;wreg free
  2132                           
  2133                           ;main.c: 146: digitalWrite(cylinderMotor1, 0);
  2134  000E5A  0E55               	movlw	low _cylinderMotor1
  2135  000E5C  6E25               	movwf	digitalWrite@pin,c
  2136  000E5E  0EFE               	movlw	high _cylinderMotor1
  2137  000E60  6E26               	movwf	digitalWrite@pin+1,c
  2138  000E62  0E00               	movlw	0
  2139  000E64  6E28               	movwf	digitalWrite@val+1,c
  2140  000E66  0E00               	movlw	0
  2141  000E68  6E27               	movwf	digitalWrite@val,c
  2142  000E6A  ECA6  F018         	call	_digitalWrite	;wreg free
  2143                           
  2144                           ;main.c: 147: digitalWrite(cylinderMotor1, 1);
  2145  000E6E  0E55               	movlw	low _cylinderMotor1
  2146  000E70  6E25               	movwf	digitalWrite@pin,c
  2147  000E72  0EFE               	movlw	high _cylinderMotor1
  2148  000E74  6E26               	movwf	digitalWrite@pin+1,c
  2149  000E76  0E00               	movlw	0
  2150  000E78  6E28               	movwf	digitalWrite@val+1,c
  2151  000E7A  0E01               	movlw	1
  2152  000E7C  6E27               	movwf	digitalWrite@val,c
  2153  000E7E  ECA6  F018         	call	_digitalWrite	;wreg free
  2154                           
  2155                           ;main.c: 148: initServo(conveyorServo, 130);
  2156  000E82  0E51               	movlw	low _conveyorServo
  2157  000E84  0100               	movlb	0	; () banked
  2158  000E86  6FDA               	movwf	initServo@motor& (0+255),b
  2159  000E88  0EFE               	movlw	high _conveyorServo
  2160  000E8A  0100               	movlb	0	; () banked
  2161  000E8C  6FDB               	movwf	(initServo@motor+1)& (0+255),b
  2162  000E8E  0E00               	movlw	0
  2163  000E90  0100               	movlb	0	; () banked
  2164  000E92  6FDD               	movwf	(initServo@angle+1)& (0+255),b
  2165  000E94  0E82               	movlw	130
  2166  000E96  6FDC               	movwf	initServo@angle& (0+255),b
  2167  000E98  ECAE  F019         	call	_initServo	;wreg free
  2168                           
  2169                           ;main.c: 149: initServo(padServo, padAngle_NEUTRAL);
  2170  000E9C  0E5D               	movlw	low _padServo
  2171  000E9E  0100               	movlb	0	; () banked
  2172  000EA0  6FDA               	movwf	initServo@motor& (0+255),b
  2173  000EA2  0EFE               	movlw	high _padServo
  2174  000EA4  0100               	movlb	0	; () banked
  2175  000EA6  6FDB               	movwf	(initServo@motor+1)& (0+255),b
  2176  000EA8  0E45               	movlw	low _padAngle_NEUTRAL
  2177  000EAA  6EF6               	movwf	tblptrl,c
  2178  000EAC                     	if	1	;There is more than 1 active tblptr byte
  2179  000EAC  0EFE               	movlw	high _padAngle_NEUTRAL
  2180  000EAE  6EF7               	movwf	tblptrh,c
  2181  000EB0                     	endif
  2182  000EB0                     	if	0	;There are less than 3 active tblptr bytes
  2183  000EB0                     	endif
  2184  000EB0  0009               	tblrd		*+
  2185  000EB2  CFF5 F0DC          	movff	tablat,initServo@angle
  2186  000EB6  000A               	tblrd		*-
  2187  000EB8  CFF5 F0DD          	movff	tablat,initServo@angle+1
  2188  000EBC  ECAE  F019         	call	_initServo	;wreg free
  2189                           
  2190                           ;main.c: 150: initServo(redirectingServo, redirectAngle_AA);
  2191  000EC0  0E61               	movlw	low _redirectingServo
  2192  000EC2  0100               	movlb	0	; () banked
  2193  000EC4  6FDA               	movwf	initServo@motor& (0+255),b
  2194  000EC6  0EFE               	movlw	high _redirectingServo
  2195  000EC8  0100               	movlb	0	; () banked
  2196  000ECA  6FDB               	movwf	(initServo@motor+1)& (0+255),b
  2197  000ECC  0E4B               	movlw	low _redirectAngle_AA
  2198  000ECE  6EF6               	movwf	tblptrl,c
  2199  000ED0                     	if	1	;There is more than 1 active tblptr byte
  2200  000ED0  0EFE               	movlw	high _redirectAngle_AA
  2201  000ED2  6EF7               	movwf	tblptrh,c
  2202  000ED4                     	endif
  2203  000ED4                     	if	0	;There are less than 3 active tblptr bytes
  2204  000ED4                     	endif
  2205  000ED4  0009               	tblrd		*+
  2206  000ED6  CFF5 F0DC          	movff	tablat,initServo@angle
  2207  000EDA  000A               	tblrd		*-
  2208  000EDC  CFF5 F0DD          	movff	tablat,initServo@angle+1
  2209  000EE0  ECAE  F019         	call	_initServo	;wreg free
  2210  000EE4                     l7804:
  2211                           
  2212                           ;main.c: 155: int lastBatteryTime = time;
  2213  000EE4  C147  F13D         	movff	_time,main@lastBatteryTime
  2214  000EE8  C148  F13E         	movff	_time+1,main@lastBatteryTime+1
  2215                           
  2216                           ;main.c: 157: int cylinderStart = time;
  2217  000EEC  C147  F12B         	movff	_time,main@cylinderStart
  2218  000EF0  C148  F12C         	movff	_time+1,main@cylinderStart+1
  2219                           
  2220                           ;main.c: 158: int duration = 0;
  2221  000EF4  0E00               	movlw	0
  2222  000EF6  0101               	movlb	1	; () banked
  2223  000EF8  6F3C               	movwf	(main@duration+1)& (0+255),b
  2224  000EFA  0E00               	movlw	0
  2225  000EFC  6F3B               	movwf	main@duration& (0+255),b
  2226                           
  2227                           ; BSR set to: 1
  2228                           ;main.c: 161: stoppingTime = 300 + 300 * (float)(15 - (n_AA + n_9V + n_C + n_OTHER))/15;
  2229  000EFE  0E00               	movlw	0
  2230  000F00  0100               	movlb	0	; () banked
  2231  000F02  6FA1               	movwf	___ftadd@f2& (0+255),b
  2232  000F04  0E96               	movlw	150
  2233  000F06  0100               	movlb	0	; () banked
  2234  000F08  6FA2               	movwf	(___ftadd@f2+1)& (0+255),b
  2235  000F0A  0E43               	movlw	67
  2236  000F0C  0100               	movlb	0	; () banked
  2237  000F0E  6FA3               	movwf	(___ftadd@f2+2)& (0+255),b
  2238  000F10  0E00               	movlw	0
  2239  000F12  0100               	movlb	0	; () banked
  2240  000F14  6F92               	movwf	___ftdiv@f2& (0+255),b
  2241  000F16  0E70               	movlw	112
  2242  000F18  0100               	movlb	0	; () banked
  2243  000F1A  6F93               	movwf	(___ftdiv@f2+1)& (0+255),b
  2244  000F1C  0E41               	movlw	65
  2245  000F1E  0100               	movlb	0	; () banked
  2246  000F20  6F94               	movwf	(___ftdiv@f2+2)& (0+255),b
  2247  000F22  0E00               	movlw	0
  2248  000F24  0100               	movlb	0	; () banked
  2249  000F26  6F83               	movwf	___ftmul@f2& (0+255),b
  2250  000F28  0E96               	movlw	150
  2251  000F2A  0100               	movlb	0	; () banked
  2252  000F2C  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  2253  000F2E  0E43               	movlw	67
  2254  000F30  0100               	movlb	0	; () banked
  2255  000F32  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  2256  000F34  0101               	movlb	1	; () banked
  2257  000F36  514D               	movf	_n_9V& (0+255),w,b
  2258  000F38  0101               	movlb	1	; () banked
  2259  000F3A  254F               	addwf	_n_AA& (0+255),w,b
  2260  000F3C  0101               	movlb	1	; () banked
  2261  000F3E  6F1A               	movwf	??_main& (0+255),b
  2262  000F40  0101               	movlb	1	; () banked
  2263  000F42  514E               	movf	(_n_9V+1)& (0+255),w,b
  2264  000F44  0101               	movlb	1	; () banked
  2265  000F46  2150               	addwfc	(_n_AA+1)& (0+255),w,b
  2266  000F48  0101               	movlb	1	; () banked
  2267  000F4A  6F1B               	movwf	(??_main+1)& (0+255),b
  2268  000F4C  0101               	movlb	1	; () banked
  2269  000F4E  5151               	movf	_n_C& (0+255),w,b
  2270  000F50  0101               	movlb	1	; () banked
  2271  000F52  271A               	addwf	??_main& (0+255),f,b
  2272  000F54  0101               	movlb	1	; () banked
  2273  000F56  5152               	movf	(_n_C+1)& (0+255),w,b
  2274  000F58  0101               	movlb	1	; () banked
  2275  000F5A  231B               	addwfc	(??_main+1)& (0+255),f,b
  2276  000F5C  0101               	movlb	1	; () banked
  2277  000F5E  5153               	movf	_n_OTHER& (0+255),w,b
  2278  000F60  0101               	movlb	1	; () banked
  2279  000F62  271A               	addwf	??_main& (0+255),f,b
  2280  000F64  0101               	movlb	1	; () banked
  2281  000F66  5154               	movf	(_n_OTHER+1)& (0+255),w,b
  2282  000F68  0101               	movlb	1	; () banked
  2283  000F6A  231B               	addwfc	(??_main+1)& (0+255),f,b
  2284  000F6C  0101               	movlb	1	; () banked
  2285  000F6E  1F1A               	comf	??_main& (0+255),f,b
  2286  000F70  1F1B               	comf	(??_main+1)& (0+255),f,b
  2287  000F72  4B1A               	infsnz	??_main& (0+255),f,b
  2288  000F74  2B1B               	incf	(??_main+1)& (0+255),f,b
  2289  000F76  0E0F               	movlw	15
  2290  000F78  0101               	movlb	1	; () banked
  2291  000F7A  251A               	addwf	??_main& (0+255),w,b
  2292  000F7C  6E2D               	movwf	___awtoft@c,c
  2293  000F7E  0E00               	movlw	0
  2294  000F80  0101               	movlb	1	; () banked
  2295  000F82  211B               	addwfc	(??_main+1)& (0+255),w,b
  2296  000F84  6E2E               	movwf	___awtoft@c+1,c
  2297  000F86  EC0D  F022         	call	___awtoft	;wreg free
  2298  000F8A  C02D  F080         	movff	?___awtoft,___ftmul@f1
  2299  000F8E  C02E  F081         	movff	?___awtoft+1,___ftmul@f1+1
  2300  000F92  C02F  F082         	movff	?___awtoft+2,___ftmul@f1+2
  2301  000F96  EC74  F014         	call	___ftmul	;wreg free
  2302  000F9A  C080  F08F         	movff	?___ftmul,___ftdiv@f1
  2303  000F9E  C081  F090         	movff	?___ftmul+1,___ftdiv@f1+1
  2304  000FA2  C082  F091         	movff	?___ftmul+2,___ftdiv@f1+2
  2305  000FA6  EC23  F015         	call	___ftdiv	;wreg free
  2306  000FAA  C08F  F09E         	movff	?___ftdiv,___ftadd@f1
  2307  000FAE  C090  F09F         	movff	?___ftdiv+1,___ftadd@f1+1
  2308  000FB2  C091  F0A0         	movff	?___ftdiv+2,___ftadd@f1+2
  2309  000FB6  ECE0  F00F         	call	___ftadd	;wreg free
  2310  000FBA  C09E  F0AA         	movff	?___ftadd,___fttol@f1
  2311  000FBE  C09F  F0AB         	movff	?___ftadd+1,___fttol@f1+1
  2312  000FC2  C0A0  F0AC         	movff	?___ftadd+2,___fttol@f1+2
  2313  000FC6  ECC9  F015         	call	___fttol	;wreg free
  2314  000FCA  C0AA  F157         	movff	?___fttol,_stoppingTime
  2315  000FCE  C0AB  F158         	movff	?___fttol+1,_stoppingTime+1
  2316                           
  2317                           ;main.c: 163: while(!batteryDetected && !terminate){
  2318  000FD2  D1F5               	goto	l7838
  2319  000FD4                     l7812:
  2320                           
  2321                           ;main.c: 165: lcdHome();
  2322  000FD4  EC0B  F023         	call	_lcdHome	;wreg free
  2323                           
  2324                           ;main.c: 166: printf("time %02ld:%02ld.%01ld     \n",time/600,(time%600)/10,(time%600)%1
      +                          0);
  2325  000FD8  0E58               	movlw	88
  2326  000FDA  6E29               	movwf	___almod@divisor,c
  2327  000FDC  0E02               	movlw	2
  2328  000FDE  6E2A               	movwf	___almod@divisor+1,c
  2329  000FE0  0E00               	movlw	0
  2330  000FE2  6E2B               	movwf	___almod@divisor+2,c
  2331  000FE4  0E00               	movlw	0
  2332  000FE6  6E2C               	movwf	___almod@divisor+3,c
  2333  000FE8  C147  F025         	movff	_time,___almod@dividend
  2334  000FEC  C148  F026         	movff	_time+1,___almod@dividend+1
  2335  000FF0  C149  F027         	movff	_time+2,___almod@dividend+2
  2336  000FF4  C14A  F028         	movff	_time+3,___almod@dividend+3
  2337  000FF8  ECAE  F01C         	call	___almod	;wreg free
  2338  000FFC  C025  F127         	movff	?___almod,_main$1417
  2339  001000  C026  F128         	movff	?___almod+1,_main$1417+1
  2340  001004  C027  F129         	movff	?___almod+2,_main$1417+2
  2341  001008  C028  F12A         	movff	?___almod+3,_main$1417+3
  2342                           
  2343                           ;main.c: 166: printf("time %02ld:%02ld.%01ld     \n",time/600,(time%600)/10,(time%600)%1
      +                          0);
  2344  00100C  0E83               	movlw	low STR_2
  2345  00100E  0100               	movlb	0	; () banked
  2346  001010  6FB9               	movwf	printf@f& (0+255),b
  2347  001012  0EFE               	movlw	high STR_2
  2348  001014  0100               	movlb	0	; () banked
  2349  001016  6FBA               	movwf	(printf@f+1)& (0+255),b
  2350  001018  C147  F02F         	movff	_time,___aldiv@dividend
  2351  00101C  C148  F030         	movff	_time+1,___aldiv@dividend+1
  2352  001020  C149  F031         	movff	_time+2,___aldiv@dividend+2
  2353  001024  C14A  F032         	movff	_time+3,___aldiv@dividend+3
  2354  001028  0E58               	movlw	88
  2355  00102A  6E33               	movwf	___aldiv@divisor,c
  2356  00102C  0E02               	movlw	2
  2357  00102E  6E34               	movwf	___aldiv@divisor+1,c
  2358  001030  0E00               	movlw	0
  2359  001032  6E35               	movwf	___aldiv@divisor+2,c
  2360  001034  0E00               	movlw	0
  2361  001036  6E36               	movwf	___aldiv@divisor+3,c
  2362  001038  EC14  F01B         	call	___aldiv	;wreg free
  2363  00103C  C02F  F0BB         	movff	?___aldiv,?_printf+2
  2364  001040  C030  F0BC         	movff	?___aldiv+1,?_printf+3
  2365  001044  C031  F0BD         	movff	?___aldiv+2,?_printf+4
  2366  001048  C032  F0BE         	movff	?___aldiv+3,?_printf+5
  2367  00104C  0E58               	movlw	88
  2368  00104E  6E29               	movwf	___almod@divisor,c
  2369  001050  0E02               	movlw	2
  2370  001052  6E2A               	movwf	___almod@divisor+1,c
  2371  001054  0E00               	movlw	0
  2372  001056  6E2B               	movwf	___almod@divisor+2,c
  2373  001058  0E00               	movlw	0
  2374  00105A  6E2C               	movwf	___almod@divisor+3,c
  2375  00105C  C147  F025         	movff	_time,___almod@dividend
  2376  001060  C148  F026         	movff	_time+1,___almod@dividend+1
  2377  001064  C149  F027         	movff	_time+2,___almod@dividend+2
  2378  001068  C14A  F028         	movff	_time+3,___almod@dividend+3
  2379  00106C  ECAE  F01C         	call	___almod	;wreg free
  2380  001070  C025  F02F         	movff	?___almod,___aldiv@dividend
  2381  001074  C026  F030         	movff	?___almod+1,___aldiv@dividend+1
  2382  001078  C027  F031         	movff	?___almod+2,___aldiv@dividend+2
  2383  00107C  C028  F032         	movff	?___almod+3,___aldiv@dividend+3
  2384  001080  0E0A               	movlw	10
  2385  001082  6E33               	movwf	___aldiv@divisor,c
  2386  001084  0E00               	movlw	0
  2387  001086  6E34               	movwf	___aldiv@divisor+1,c
  2388  001088  0E00               	movlw	0
  2389  00108A  6E35               	movwf	___aldiv@divisor+2,c
  2390  00108C  0E00               	movlw	0
  2391  00108E  6E36               	movwf	___aldiv@divisor+3,c
  2392  001090  EC14  F01B         	call	___aldiv	;wreg free
  2393  001094  C02F  F0BF         	movff	?___aldiv,?_printf+6
  2394  001098  C030  F0C0         	movff	?___aldiv+1,?_printf+7
  2395  00109C  C031  F0C1         	movff	?___aldiv+2,?_printf+8
  2396  0010A0  C032  F0C2         	movff	?___aldiv+3,?_printf+9
  2397  0010A4  C127  F025         	movff	_main$1417,___almod@dividend
  2398  0010A8  C128  F026         	movff	_main$1417+1,___almod@dividend+1
  2399  0010AC  C129  F027         	movff	_main$1417+2,___almod@dividend+2
  2400  0010B0  C12A  F028         	movff	_main$1417+3,___almod@dividend+3
  2401  0010B4  0E0A               	movlw	10
  2402  0010B6  6E29               	movwf	___almod@divisor,c
  2403  0010B8  0E00               	movlw	0
  2404  0010BA  6E2A               	movwf	___almod@divisor+1,c
  2405  0010BC  0E00               	movlw	0
  2406  0010BE  6E2B               	movwf	___almod@divisor+2,c
  2407  0010C0  0E00               	movlw	0
  2408  0010C2  6E2C               	movwf	___almod@divisor+3,c
  2409  0010C4  ECAE  F01C         	call	___almod	;wreg free
  2410  0010C8  C025  F0C3         	movff	?___almod,?_printf+10
  2411  0010CC  C026  F0C4         	movff	?___almod+1,?_printf+11
  2412  0010D0  C027  F0C5         	movff	?___almod+2,?_printf+12
  2413  0010D4  C028  F0C6         	movff	?___almod+3,?_printf+13
  2414  0010D8  EC09  F000         	call	_printf	;wreg free
  2415                           
  2416                           ;main.c: 167: printf("stop in: %d                  ",(1+stoppingTime - (time-lastBattery
      +                          Time) )%600/10);
  2417  0010DC  0E65               	movlw	low STR_3
  2418  0010DE  0100               	movlb	0	; () banked
  2419  0010E0  6FB9               	movwf	printf@f& (0+255),b
  2420  0010E2  0EFE               	movlw	high STR_3
  2421  0010E4  0100               	movlb	0	; () banked
  2422  0010E6  6FBA               	movwf	(printf@f+1)& (0+255),b
  2423  0010E8  0E58               	movlw	88
  2424  0010EA  6E29               	movwf	___almod@divisor,c
  2425  0010EC  0E02               	movlw	2
  2426  0010EE  6E2A               	movwf	___almod@divisor+1,c
  2427  0010F0  0E00               	movlw	0
  2428  0010F2  6E2B               	movwf	___almod@divisor+2,c
  2429  0010F4  0E00               	movlw	0
  2430  0010F6  6E2C               	movwf	___almod@divisor+3,c
  2431  0010F8  C13D  F11A         	movff	main@lastBatteryTime,??_main
  2432  0010FC  C13E  F11B         	movff	main@lastBatteryTime+1,??_main+1
  2433  001100  0E00               	movlw	0
  2434  001102  0101               	movlb	1	; () banked
  2435  001104  BF1B               	btfsc	(??_main+1)& (0+255),7,b
  2436  001106  0EFF               	movlw	255
  2437  001108  6F1C               	movwf	(??_main+2)& (0+255),b
  2438  00110A  6F1D               	movwf	(??_main+3)& (0+255),b
  2439  00110C  0101               	movlb	1	; () banked
  2440  00110E  1F1A               	comf	??_main& (0+255),f,b
  2441  001110  1F1B               	comf	(??_main+1)& (0+255),f,b
  2442  001112  1F1C               	comf	(??_main+2)& (0+255),f,b
  2443  001114  1F1D               	comf	(??_main+3)& (0+255),f,b
  2444  001116  2B1A               	incf	??_main& (0+255),f,b
  2445  001118  0E00               	movlw	0
  2446  00111A  231B               	addwfc	(??_main+1)& (0+255),f,b
  2447  00111C  231C               	addwfc	(??_main+2)& (0+255),f,b
  2448  00111E  231D               	addwfc	(??_main+3)& (0+255),f,b
  2449  001120  0101               	movlb	1	; () banked
  2450  001122  5147               	movf	_time& (0+255),w,b
  2451  001124  0101               	movlb	1	; () banked
  2452  001126  251A               	addwf	??_main& (0+255),w,b
  2453  001128  0101               	movlb	1	; () banked
  2454  00112A  6F1E               	movwf	(??_main+4)& (0+255),b
  2455  00112C  0101               	movlb	1	; () banked
  2456  00112E  5148               	movf	(_time+1)& (0+255),w,b
  2457  001130  0101               	movlb	1	; () banked
  2458  001132  211B               	addwfc	(??_main+1)& (0+255),w,b
  2459  001134  0101               	movlb	1	; () banked
  2460  001136  6F1F               	movwf	(??_main+5)& (0+255),b
  2461  001138  0101               	movlb	1	; () banked
  2462  00113A  5149               	movf	(_time+2)& (0+255),w,b
  2463  00113C  0101               	movlb	1	; () banked
  2464  00113E  211C               	addwfc	(??_main+2)& (0+255),w,b
  2465  001140  0101               	movlb	1	; () banked
  2466  001142  6F20               	movwf	(??_main+6)& (0+255),b
  2467  001144  0101               	movlb	1	; () banked
  2468  001146  514A               	movf	(_time+3)& (0+255),w,b
  2469  001148  0101               	movlb	1	; () banked
  2470  00114A  211D               	addwfc	(??_main+3)& (0+255),w,b
  2471  00114C  0101               	movlb	1	; () banked
  2472  00114E  6F21               	movwf	(??_main+7)& (0+255),b
  2473  001150  0101               	movlb	1	; () banked
  2474  001152  1F1E               	comf	(??_main+4)& (0+255),f,b
  2475  001154  1F1F               	comf	(??_main+5)& (0+255),f,b
  2476  001156  1F20               	comf	(??_main+6)& (0+255),f,b
  2477  001158  1F21               	comf	(??_main+7)& (0+255),f,b
  2478  00115A  2B1E               	incf	(??_main+4)& (0+255),f,b
  2479  00115C  0E00               	movlw	0
  2480  00115E  231F               	addwfc	(??_main+5)& (0+255),f,b
  2481  001160  2320               	addwfc	(??_main+6)& (0+255),f,b
  2482  001162  2321               	addwfc	(??_main+7)& (0+255),f,b
  2483  001164  0E01               	movlw	1
  2484  001166  0101               	movlb	1	; () banked
  2485  001168  2557               	addwf	_stoppingTime& (0+255),w,b
  2486  00116A  0101               	movlb	1	; () banked
  2487  00116C  6F22               	movwf	(??_main+8)& (0+255),b
  2488  00116E  0E00               	movlw	0
  2489  001170  0101               	movlb	1	; () banked
  2490  001172  2158               	addwfc	(_stoppingTime+1)& (0+255),w,b
  2491  001174  0101               	movlb	1	; () banked
  2492  001176  6F23               	movwf	(??_main+9)& (0+255),b
  2493  001178  0101               	movlb	1	; () banked
  2494  00117A  6B24               	clrf	(??_main+10)& (0+255),b
  2495  00117C  0101               	movlb	1	; () banked
  2496  00117E  BF23               	btfsc	(??_main+9)& (0+255),7,b
  2497  001180  0724               	decf	(??_main+10)& (0+255),f,b
  2498  001182  0101               	movlb	1	; () banked
  2499  001184  5124               	movf	(??_main+10)& (0+255),w,b
  2500  001186  0101               	movlb	1	; () banked
  2501  001188  6F25               	movwf	(??_main+11)& (0+255),b
  2502  00118A  0101               	movlb	1	; () banked
  2503  00118C  511E               	movf	(??_main+4)& (0+255),w,b
  2504  00118E  0101               	movlb	1	; () banked
  2505  001190  2522               	addwf	(??_main+8)& (0+255),w,b
  2506  001192  6E25               	movwf	___almod@dividend,c
  2507  001194  0101               	movlb	1	; () banked
  2508  001196  511F               	movf	(??_main+5)& (0+255),w,b
  2509  001198  0101               	movlb	1	; () banked
  2510  00119A  2123               	addwfc	(??_main+9)& (0+255),w,b
  2511  00119C  6E26               	movwf	___almod@dividend+1,c
  2512  00119E  0101               	movlb	1	; () banked
  2513  0011A0  5120               	movf	(??_main+6)& (0+255),w,b
  2514  0011A2  0101               	movlb	1	; () banked
  2515  0011A4  2124               	addwfc	(??_main+10)& (0+255),w,b
  2516  0011A6  6E27               	movwf	___almod@dividend+2,c
  2517  0011A8  0101               	movlb	1	; () banked
  2518  0011AA  5121               	movf	(??_main+7)& (0+255),w,b
  2519  0011AC  0101               	movlb	1	; () banked
  2520  0011AE  2125               	addwfc	(??_main+11)& (0+255),w,b
  2521  0011B0  6E28               	movwf	___almod@dividend+3,c
  2522  0011B2  ECAE  F01C         	call	___almod	;wreg free
  2523  0011B6  C025  F02F         	movff	?___almod,___aldiv@dividend
  2524  0011BA  C026  F030         	movff	?___almod+1,___aldiv@dividend+1
  2525  0011BE  C027  F031         	movff	?___almod+2,___aldiv@dividend+2
  2526  0011C2  C028  F032         	movff	?___almod+3,___aldiv@dividend+3
  2527  0011C6  0E0A               	movlw	10
  2528  0011C8  6E33               	movwf	___aldiv@divisor,c
  2529  0011CA  0E00               	movlw	0
  2530  0011CC  6E34               	movwf	___aldiv@divisor+1,c
  2531  0011CE  0E00               	movlw	0
  2532  0011D0  6E35               	movwf	___aldiv@divisor+2,c
  2533  0011D2  0E00               	movlw	0
  2534  0011D4  6E36               	movwf	___aldiv@divisor+3,c
  2535  0011D6  EC14  F01B         	call	___aldiv	;wreg free
  2536  0011DA  C02F  F0BB         	movff	?___aldiv,?_printf+2
  2537  0011DE  C030  F0BC         	movff	?___aldiv+1,?_printf+3
  2538  0011E2  C031  F0BD         	movff	?___aldiv+2,?_printf+4
  2539  0011E6  C032  F0BE         	movff	?___aldiv+3,?_printf+5
  2540  0011EA  EC09  F000         	call	_printf	;wreg free
  2541                           
  2542                           ;main.c: 168: _delay((unsigned long)((45)*(10000000/4000.0)));
  2543  0011EE  0E93               	movlw	147
  2544  0011F0  0101               	movlb	1	; () banked
  2545  0011F2  6F1A               	movwf	??_main& (0+255),b
  2546  0011F4  0E19               	movlw	25
  2547  0011F6                     u8507:
  2548  0011F6  2EE8               	decfsz	wreg,f,c
  2549  0011F8  D7FE               	bra	u8507
  2550  0011FA  2F1A               	decfsz	??_main& (0+255),f,b
  2551  0011FC  D7FC               	bra	u8507
  2552                           
  2553                           ;main.c: 171: if(time - cylinderStart >= duration)
  2554  0011FE  C13B  F11A         	movff	main@duration,??_main
  2555  001202  C13C  F11B         	movff	main@duration+1,??_main+1
  2556  001206  0E00               	movlw	0
  2557  001208  0101               	movlb	1	; () banked
  2558  00120A  BF1B               	btfsc	(??_main+1)& (0+255),7,b
  2559  00120C  0EFF               	movlw	255
  2560  00120E  6F1C               	movwf	(??_main+2)& (0+255),b
  2561  001210  6F1D               	movwf	(??_main+3)& (0+255),b
  2562  001212  C12B  F11E         	movff	main@cylinderStart,??_main+4
  2563  001216  C12C  F11F         	movff	main@cylinderStart+1,??_main+5
  2564  00121A  0E00               	movlw	0
  2565  00121C  0101               	movlb	1	; () banked
  2566  00121E  BF1F               	btfsc	(??_main+5)& (0+255),7,b
  2567  001220  0EFF               	movlw	255
  2568  001222  6F20               	movwf	(??_main+6)& (0+255),b
  2569  001224  6F21               	movwf	(??_main+7)& (0+255),b
  2570  001226  0101               	movlb	1	; () banked
  2571  001228  1F1E               	comf	(??_main+4)& (0+255),f,b
  2572  00122A  1F1F               	comf	(??_main+5)& (0+255),f,b
  2573  00122C  1F20               	comf	(??_main+6)& (0+255),f,b
  2574  00122E  1F21               	comf	(??_main+7)& (0+255),f,b
  2575  001230  2B1E               	incf	(??_main+4)& (0+255),f,b
  2576  001232  0E00               	movlw	0
  2577  001234  231F               	addwfc	(??_main+5)& (0+255),f,b
  2578  001236  2320               	addwfc	(??_main+6)& (0+255),f,b
  2579  001238  2321               	addwfc	(??_main+7)& (0+255),f,b
  2580  00123A  0101               	movlb	1	; () banked
  2581  00123C  5147               	movf	_time& (0+255),w,b
  2582  00123E  0101               	movlb	1	; () banked
  2583  001240  251E               	addwf	(??_main+4)& (0+255),w,b
  2584  001242  0101               	movlb	1	; () banked
  2585  001244  6F22               	movwf	(??_main+8)& (0+255),b
  2586  001246  0101               	movlb	1	; () banked
  2587  001248  5148               	movf	(_time+1)& (0+255),w,b
  2588  00124A  0101               	movlb	1	; () banked
  2589  00124C  211F               	addwfc	(??_main+5)& (0+255),w,b
  2590  00124E  0101               	movlb	1	; () banked
  2591  001250  6F23               	movwf	(??_main+9)& (0+255),b
  2592  001252  0101               	movlb	1	; () banked
  2593  001254  5149               	movf	(_time+2)& (0+255),w,b
  2594  001256  0101               	movlb	1	; () banked
  2595  001258  2120               	addwfc	(??_main+6)& (0+255),w,b
  2596  00125A  0101               	movlb	1	; () banked
  2597  00125C  6F24               	movwf	(??_main+10)& (0+255),b
  2598  00125E  0101               	movlb	1	; () banked
  2599  001260  514A               	movf	(_time+3)& (0+255),w,b
  2600  001262  0101               	movlb	1	; () banked
  2601  001264  2121               	addwfc	(??_main+7)& (0+255),w,b
  2602  001266  0101               	movlb	1	; () banked
  2603  001268  6F25               	movwf	(??_main+11)& (0+255),b
  2604  00126A  0101               	movlb	1	; () banked
  2605  00126C  511A               	movf	??_main& (0+255),w,b
  2606  00126E  0101               	movlb	1	; () banked
  2607  001270  5D22               	subwf	(??_main+8)& (0+255),w,b
  2608  001272  0101               	movlb	1	; () banked
  2609  001274  511B               	movf	(??_main+1)& (0+255),w,b
  2610  001276  0101               	movlb	1	; () banked
  2611  001278  5923               	subwfb	(??_main+9)& (0+255),w,b
  2612  00127A  0101               	movlb	1	; () banked
  2613  00127C  511C               	movf	(??_main+2)& (0+255),w,b
  2614  00127E  0101               	movlb	1	; () banked
  2615  001280  5924               	subwfb	(??_main+10)& (0+255),w,b
  2616  001282  0101               	movlb	1	; () banked
  2617  001284  5125               	movf	(??_main+11)& (0+255),w,b
  2618  001286  0A80               	xorlw	128
  2619  001288  0101               	movlb	1	; () banked
  2620  00128A  6F26               	movwf	(??_main+12)& (0+255),b
  2621  00128C  0101               	movlb	1	; () banked
  2622  00128E  511D               	movf	(??_main+3)& (0+255),w,b
  2623  001290  0A80               	xorlw	128
  2624  001292  0101               	movlb	1	; () banked
  2625  001294  5926               	subwfb	(??_main+12)& (0+255),w,b
  2626  001296  A0D8               	btfss	status,0,c
  2627  001298  D045               	goto	l7834
  2628                           
  2629                           ; BSR set to: 1
  2630                           ;main.c: 172: {
  2631                           ;main.c: 173: if(digitalRead(cylinderMotor1)){
  2632  00129A  0E55               	movlw	low _cylinderMotor1
  2633  00129C  6E25               	movwf	digitalRead@pin,c
  2634  00129E  0EFE               	movlw	high _cylinderMotor1
  2635  0012A0  6E26               	movwf	digitalRead@pin+1,c
  2636  0012A2  EC44  F012         	call	_digitalRead	;wreg free
  2637  0012A6  5025               	movf	?_digitalRead,w,c
  2638  0012A8  1026               	iorwf	?_digitalRead+1,w,c
  2639  0012AA  B4D8               	btfsc	status,2,c
  2640  0012AC  D019               	goto	l7828
  2641                           
  2642                           ;main.c: 174: digitalWrite(cylinderMotor1, 0);
  2643  0012AE  0E55               	movlw	low _cylinderMotor1
  2644  0012B0  6E25               	movwf	digitalWrite@pin,c
  2645  0012B2  0EFE               	movlw	high _cylinderMotor1
  2646  0012B4  6E26               	movwf	digitalWrite@pin+1,c
  2647  0012B6  0E00               	movlw	0
  2648  0012B8  6E28               	movwf	digitalWrite@val+1,c
  2649  0012BA  0E00               	movlw	0
  2650  0012BC  6E27               	movwf	digitalWrite@val,c
  2651  0012BE  ECA6  F018         	call	_digitalWrite	;wreg free
  2652                           
  2653                           ;main.c: 175: digitalWrite(cylinderMotor2, 1);
  2654  0012C2  0E59               	movlw	low _cylinderMotor2
  2655  0012C4  6E25               	movwf	digitalWrite@pin,c
  2656  0012C6  0EFE               	movlw	high _cylinderMotor2
  2657  0012C8  6E26               	movwf	digitalWrite@pin+1,c
  2658  0012CA  0E00               	movlw	0
  2659  0012CC  6E28               	movwf	digitalWrite@val+1,c
  2660  0012CE  0E01               	movlw	1
  2661  0012D0  6E27               	movwf	digitalWrite@val,c
  2662  0012D2  ECA6  F018         	call	_digitalWrite	;wreg free
  2663                           
  2664                           ;main.c: 176: duration = cylinderForward;
  2665  0012D6  0E41               	movlw	low _cylinderForward
  2666  0012D8  6EF6               	movwf	tblptrl,c
  2667  0012DA                     	if	1	;There is more than 1 active tblptr byte
  2668  0012DA  0EFE               	movlw	high _cylinderForward
  2669  0012DC  6EF7               	movwf	tblptrh,c
  2670  0012DE                     	endif
  2671  0012DE                     	if	0	;There are less than 3 active tblptr bytes
  2672  0012DE  D018               	goto	L1
  2673  0012E0                     l7828:
  2674                           
  2675                           ;main.c: 178: digitalWrite(cylinderMotor2, 0);
  2676  0012E0  0E59               	movlw	low _cylinderMotor2
  2677  0012E2  6E25               	movwf	digitalWrite@pin,c
  2678  0012E4  0EFE               	movlw	high _cylinderMotor2
  2679  0012E6  6E26               	movwf	digitalWrite@pin+1,c
  2680  0012E8  0E00               	movlw	0
  2681  0012EA  6E28               	movwf	digitalWrite@val+1,c
  2682  0012EC  0E00               	movlw	0
  2683  0012EE  6E27               	movwf	digitalWrite@val,c
  2684  0012F0  ECA6  F018         	call	_digitalWrite	;wreg free
  2685                           
  2686                           ;main.c: 179: digitalWrite(cylinderMotor1, 1);
  2687  0012F4  0E55               	movlw	low _cylinderMotor1
  2688  0012F6  6E25               	movwf	digitalWrite@pin,c
  2689  0012F8  0EFE               	movlw	high _cylinderMotor1
  2690  0012FA  6E26               	movwf	digitalWrite@pin+1,c
  2691  0012FC  0E00               	movlw	0
  2692  0012FE  6E28               	movwf	digitalWrite@val+1,c
  2693  001300  0E01               	movlw	1
  2694  001302  6E27               	movwf	digitalWrite@val,c
  2695  001304  ECA6  F018         	call	_digitalWrite	;wreg free
  2696                           
  2697                           ;main.c: 180: duration = cylinderBackward;
  2698  001308  0E3F               	movlw	low _cylinderBackward
  2699  00130A  6EF6               	movwf	tblptrl,c
  2700  00130C                     	if	1	;There is more than 1 active tblptr byte
  2701  00130C  0EFE               	movlw	high _cylinderBackward
  2702  00130E  6EF7               	movwf	tblptrh,c
  2703  001310                     	endif
  2704  001310                     	if	0	;There are less than 3 active tblptr bytes
  2705  001310                     L1:
  2706  001310                     	endif
  2707  001310  0009               	tblrd		*+
  2708  001312  CFF5 F13B          	movff	tablat,main@duration
  2709  001316  000A               	tblrd		*-
  2710  001318  CFF5 F13C          	movff	tablat,main@duration+1
  2711                           
  2712                           ;main.c: 181: }
  2713                           ;main.c: 183: cylinderStart = time;
  2714  00131C  C147  F12B         	movff	_time,main@cylinderStart
  2715  001320  C148  F12C         	movff	_time+1,main@cylinderStart+1
  2716  001324                     l7834:
  2717                           
  2718                           ;main.c: 184: }
  2719                           ;main.c: 186: if(time - lastBatteryTime > stoppingTime)
  2720  001324  C13D  F11A         	movff	main@lastBatteryTime,??_main
  2721  001328  C13E  F11B         	movff	main@lastBatteryTime+1,??_main+1
  2722  00132C  0E00               	movlw	0
  2723  00132E  0101               	movlb	1	; () banked
  2724  001330  BF1B               	btfsc	(??_main+1)& (0+255),7,b
  2725  001332  0EFF               	movlw	255
  2726  001334  6F1C               	movwf	(??_main+2)& (0+255),b
  2727  001336  6F1D               	movwf	(??_main+3)& (0+255),b
  2728  001338  0101               	movlb	1	; () banked
  2729  00133A  1F1A               	comf	??_main& (0+255),f,b
  2730  00133C  1F1B               	comf	(??_main+1)& (0+255),f,b
  2731  00133E  1F1C               	comf	(??_main+2)& (0+255),f,b
  2732  001340  1F1D               	comf	(??_main+3)& (0+255),f,b
  2733  001342  2B1A               	incf	??_main& (0+255),f,b
  2734  001344  0E00               	movlw	0
  2735  001346  231B               	addwfc	(??_main+1)& (0+255),f,b
  2736  001348  231C               	addwfc	(??_main+2)& (0+255),f,b
  2737  00134A  231D               	addwfc	(??_main+3)& (0+255),f,b
  2738  00134C  0101               	movlb	1	; () banked
  2739  00134E  5147               	movf	_time& (0+255),w,b
  2740  001350  0101               	movlb	1	; () banked
  2741  001352  251A               	addwf	??_main& (0+255),w,b
  2742  001354  0101               	movlb	1	; () banked
  2743  001356  6F1E               	movwf	(??_main+4)& (0+255),b
  2744  001358  0101               	movlb	1	; () banked
  2745  00135A  5148               	movf	(_time+1)& (0+255),w,b
  2746  00135C  0101               	movlb	1	; () banked
  2747  00135E  211B               	addwfc	(??_main+1)& (0+255),w,b
  2748  001360  0101               	movlb	1	; () banked
  2749  001362  6F1F               	movwf	(??_main+5)& (0+255),b
  2750  001364  0101               	movlb	1	; () banked
  2751  001366  5149               	movf	(_time+2)& (0+255),w,b
  2752  001368  0101               	movlb	1	; () banked
  2753  00136A  211C               	addwfc	(??_main+2)& (0+255),w,b
  2754  00136C  0101               	movlb	1	; () banked
  2755  00136E  6F20               	movwf	(??_main+6)& (0+255),b
  2756  001370  0101               	movlb	1	; () banked
  2757  001372  514A               	movf	(_time+3)& (0+255),w,b
  2758  001374  0101               	movlb	1	; () banked
  2759  001376  211D               	addwfc	(??_main+3)& (0+255),w,b
  2760  001378  0101               	movlb	1	; () banked
  2761  00137A  6F21               	movwf	(??_main+7)& (0+255),b
  2762  00137C  0E00               	movlw	0
  2763  00137E  0101               	movlb	1	; () banked
  2764  001380  BF58               	btfsc	(_stoppingTime+1)& (0+255),7,b
  2765  001382  0EFF               	movlw	255
  2766  001384  0101               	movlb	1	; () banked
  2767  001386  6F23               	movwf	(??_main+9)& (0+255),b
  2768  001388  0A80               	xorlw	128
  2769  00138A  6F22               	movwf	(??_main+8)& (0+255),b
  2770  00138C  0101               	movlb	1	; () banked
  2771  00138E  511E               	movf	(??_main+4)& (0+255),w,b
  2772  001390  0101               	movlb	1	; () banked
  2773  001392  5D57               	subwf	_stoppingTime& (0+255),w,b
  2774  001394  0101               	movlb	1	; () banked
  2775  001396  511F               	movf	(??_main+5)& (0+255),w,b
  2776  001398  0101               	movlb	1	; () banked
  2777  00139A  5958               	subwfb	(_stoppingTime+1)& (0+255),w,b
  2778  00139C  0101               	movlb	1	; () banked
  2779  00139E  5120               	movf	(??_main+6)& (0+255),w,b
  2780  0013A0  0101               	movlb	1	; () banked
  2781  0013A2  5923               	subwfb	(??_main+9)& (0+255),w,b
  2782  0013A4  0101               	movlb	1	; () banked
  2783  0013A6  5121               	movf	(??_main+7)& (0+255),w,b
  2784  0013A8  0A80               	xorlw	128
  2785  0013AA  0101               	movlb	1	; () banked
  2786  0013AC  5922               	subwfb	(??_main+8)& (0+255),w,b
  2787  0013AE  B0D8               	btfsc	status,0,c
  2788  0013B0  D006               	goto	l7838
  2789                           
  2790                           ; BSR set to: 1
  2791                           ;main.c: 187: {
  2792                           ;main.c: 188: terminate = 1;
  2793  0013B2  0E00               	movlw	0
  2794  0013B4  0101               	movlb	1	; () banked
  2795  0013B6  6F56               	movwf	(_terminate+1)& (0+255),b
  2796  0013B8  0E01               	movlw	1
  2797  0013BA  6F55               	movwf	_terminate& (0+255),b
  2798                           
  2799                           ;main.c: 189: break;
  2800  0013BC  D00C               	goto	l7842
  2801  0013BE                     l7838:
  2802  0013BE  0101               	movlb	1	; () banked
  2803  0013C0  514B               	movf	_batteryDetected& (0+255),w,b
  2804  0013C2  0101               	movlb	1	; () banked
  2805  0013C4  114C               	iorwf	(_batteryDetected+1)& (0+255),w,b
  2806  0013C6  A4D8               	btfss	status,2,c
  2807  0013C8  D006               	goto	l7842
  2808                           
  2809                           ; BSR set to: 1
  2810  0013CA  0101               	movlb	1	; () banked
  2811  0013CC  5155               	movf	_terminate& (0+255),w,b
  2812  0013CE  0101               	movlb	1	; () banked
  2813  0013D0  1156               	iorwf	(_terminate+1)& (0+255),w,b
  2814  0013D2  B4D8               	btfsc	status,2,c
  2815  0013D4  D5FF               	goto	l7812
  2816  0013D6                     l7842:
  2817                           
  2818                           ; BSR set to: 1
  2819                           ;main.c: 190: }
  2820                           ;main.c: 191: }
  2821                           ;main.c: 193: if(terminate)break;
  2822  0013D6  0101               	movlb	1	; () banked
  2823  0013D8  5155               	movf	_terminate& (0+255),w,b
  2824  0013DA  0101               	movlb	1	; () banked
  2825  0013DC  1156               	iorwf	(_terminate+1)& (0+255),w,b
  2826  0013DE  A4D8               	btfss	status,2,c
  2827  0013E0  D02F               	goto	l7854
  2828                           
  2829                           ; BSR set to: 1
  2830                           ;main.c: 195: sortBattery();
  2831                           
  2832                           ; BSR set to: 1
  2833                           
  2834                           ; BSR set to: 1
  2835  0013E2  EC76  F00A         	call	_sortBattery	;wreg free
  2836                           
  2837                           ;main.c: 198: if((n_AA + n_9V + n_C + n_OTHER) == 15)break;
  2838  0013E6  0101               	movlb	1	; () banked
  2839  0013E8  514D               	movf	_n_9V& (0+255),w,b
  2840  0013EA  0101               	movlb	1	; () banked
  2841  0013EC  254F               	addwf	_n_AA& (0+255),w,b
  2842  0013EE  0101               	movlb	1	; () banked
  2843  0013F0  6F1A               	movwf	??_main& (0+255),b
  2844  0013F2  0101               	movlb	1	; () banked
  2845  0013F4  514E               	movf	(_n_9V+1)& (0+255),w,b
  2846  0013F6  0101               	movlb	1	; () banked
  2847  0013F8  2150               	addwfc	(_n_AA+1)& (0+255),w,b
  2848  0013FA  0101               	movlb	1	; () banked
  2849  0013FC  6F1B               	movwf	(??_main+1)& (0+255),b
  2850  0013FE  0101               	movlb	1	; () banked
  2851  001400  5151               	movf	_n_C& (0+255),w,b
  2852  001402  0101               	movlb	1	; () banked
  2853  001404  271A               	addwf	??_main& (0+255),f,b
  2854  001406  0101               	movlb	1	; () banked
  2855  001408  5152               	movf	(_n_C+1)& (0+255),w,b
  2856  00140A  0101               	movlb	1	; () banked
  2857  00140C  231B               	addwfc	(??_main+1)& (0+255),f,b
  2858  00140E  0101               	movlb	1	; () banked
  2859  001410  5153               	movf	_n_OTHER& (0+255),w,b
  2860  001412  0101               	movlb	1	; () banked
  2861  001414  271A               	addwf	??_main& (0+255),f,b
  2862  001416  0101               	movlb	1	; () banked
  2863  001418  5154               	movf	(_n_OTHER+1)& (0+255),w,b
  2864  00141A  0101               	movlb	1	; () banked
  2865  00141C  231B               	addwfc	(??_main+1)& (0+255),f,b
  2866  00141E  0E0F               	movlw	15
  2867  001420  0101               	movlb	1	; () banked
  2868  001422  191A               	xorwf	??_main& (0+255),w,b
  2869  001424  0101               	movlb	1	; () banked
  2870  001426  111B               	iorwf	(??_main+1)& (0+255),w,b
  2871  001428  B4D8               	btfsc	status,2,c
  2872  00142A  D00A               	goto	l7854
  2873                           
  2874                           ; BSR set to: 1
  2875                           ;main.c: 201: lastBatteryTime = time;
  2876                           
  2877                           ; BSR set to: 1
  2878  00142C  C147  F13D         	movff	_time,main@lastBatteryTime
  2879  001430  C148  F13E         	movff	_time+1,main@lastBatteryTime+1
  2880                           
  2881                           ; BSR set to: 1
  2882                           ;main.c: 202: batteryDetected = 0;
  2883  001434  0E00               	movlw	0
  2884  001436  0101               	movlb	1	; () banked
  2885  001438  6F4C               	movwf	(_batteryDetected+1)& (0+255),b
  2886  00143A  0E00               	movlw	0
  2887  00143C  6F4B               	movwf	_batteryDetected& (0+255),b
  2888                           
  2889                           ; BSR set to: 1
  2890  00143E  D552               	goto	l7804
  2891  001440                     l7854:
  2892                           
  2893                           ; BSR set to: 1
  2894                           ;main.c: 203: }
  2895                           ;main.c: 206: setAngle(conveyorServo, 90);
  2896  001440  0E51               	movlw	low _conveyorServo
  2897  001442  0100               	movlb	0	; () banked
  2898  001444  6FD0               	movwf	setAngle@motor& (0+255),b
  2899  001446  0EFE               	movlw	high _conveyorServo
  2900  001448  0100               	movlb	0	; () banked
  2901  00144A  6FD1               	movwf	(setAngle@motor+1)& (0+255),b
  2902  00144C  0E00               	movlw	0
  2903  00144E  0100               	movlb	0	; () banked
  2904  001450  6FD3               	movwf	(setAngle@angle+1)& (0+255),b
  2905  001452  0E5A               	movlw	90
  2906  001454  6FD2               	movwf	setAngle@angle& (0+255),b
  2907  001456  EC86  F01B         	call	_setAngle	;wreg free
  2908                           
  2909                           ;main.c: 207: digitalWrite(cylinderMotor1, 0);
  2910  00145A  0E55               	movlw	low _cylinderMotor1
  2911  00145C  6E25               	movwf	digitalWrite@pin,c
  2912  00145E  0EFE               	movlw	high _cylinderMotor1
  2913  001460  6E26               	movwf	digitalWrite@pin+1,c
  2914  001462  0E00               	movlw	0
  2915  001464  6E28               	movwf	digitalWrite@val+1,c
  2916  001466  0E00               	movlw	0
  2917  001468  6E27               	movwf	digitalWrite@val,c
  2918  00146A  ECA6  F018         	call	_digitalWrite	;wreg free
  2919                           
  2920                           ;main.c: 208: digitalWrite(cylinderMotor2, 0);
  2921  00146E  0E59               	movlw	low _cylinderMotor2
  2922  001470  6E25               	movwf	digitalWrite@pin,c
  2923  001472  0EFE               	movlw	high _cylinderMotor2
  2924  001474  6E26               	movwf	digitalWrite@pin+1,c
  2925  001476  0E00               	movlw	0
  2926  001478  6E28               	movwf	digitalWrite@val+1,c
  2927  00147A  0E00               	movlw	0
  2928  00147C  6E27               	movwf	digitalWrite@val,c
  2929  00147E  ECA6  F018         	call	_digitalWrite	;wreg free
  2930                           
  2931                           ;main.c: 210: (INTCONbits.GIE = 0);
  2932  001482  9EF2               	bcf	intcon,7,c	;volatile
  2933                           
  2934                           ;main.c: 213: int run[7];
  2935                           ;main.c: 214: run[0] = time>>8;
  2936  001484  C148  F12D         	movff	_time+1,main@run
  2937  001488  C149  F12E         	movff	_time+2,main@run+1
  2938                           
  2939                           ;main.c: 215: run[1] = time&0xff;
  2940  00148C  0101               	movlb	1	; () banked
  2941  00148E  5147               	movf	_time& (0+255),w,b
  2942  001490  0101               	movlb	1	; () banked
  2943  001492  6F2F               	movwf	(main@run+2)& (0+255),b
  2944  001494  6B30               	clrf	(main@run+3)& (0+255),b
  2945                           
  2946                           ; BSR set to: 1
  2947                           ;main.c: 216: run[2] = n_AA;
  2948  001496  C14F  F131         	movff	_n_AA,main@run+4
  2949  00149A  C150  F132         	movff	_n_AA+1,main@run+5
  2950                           
  2951                           ; BSR set to: 1
  2952                           ;main.c: 217: run[3] = n_9V;
  2953  00149E  C14D  F133         	movff	_n_9V,main@run+6
  2954  0014A2  C14E  F134         	movff	_n_9V+1,main@run+7
  2955                           
  2956                           ; BSR set to: 1
  2957                           ;main.c: 218: run[4] = n_C;
  2958  0014A6  C151  F135         	movff	_n_C,main@run+8
  2959  0014AA  C152  F136         	movff	_n_C+1,main@run+9
  2960                           
  2961                           ; BSR set to: 1
  2962                           ;main.c: 219: run[5] = n_OTHER;
  2963  0014AE  C153  F137         	movff	_n_OTHER,main@run+10
  2964  0014B2  C154  F138         	movff	_n_OTHER+1,main@run+11
  2965                           
  2966                           ; BSR set to: 1
  2967                           ;main.c: 221: saveNewRun(run);
  2968  0014B6  0E2D               	movlw	low main@run
  2969  0014B8  0100               	movlb	0	; () banked
  2970  0014BA  6F8C               	movwf	saveNewRun@data& (0+255),b
  2971  0014BC  0E01               	movlw	high main@run
  2972  0014BE  0100               	movlb	0	; () banked
  2973  0014C0  6F8D               	movwf	(saveNewRun@data+1)& (0+255),b
  2974  0014C2  EC2A  F01A         	call	_saveNewRun	;wreg free
  2975                           
  2976                           ;main.c: 222: showRunTime(run);
  2977  0014C6  0E2D               	movlw	low main@run
  2978  0014C8  0100               	movlb	0	; () banked
  2979  0014CA  6FEB               	movwf	showRunTime@run& (0+255),b
  2980  0014CC  0E01               	movlw	high main@run
  2981  0014CE  0100               	movlb	0	; () banked
  2982  0014D0  6FEC               	movwf	(showRunTime@run+1)& (0+255),b
  2983  0014D2  EC09  F013         	call	_showRunTime	;wreg free
  2984                           
  2985                           ;main.c: 223: showRunStats(run);
  2986  0014D6  0E2D               	movlw	low main@run
  2987  0014D8  0100               	movlb	0	; () banked
  2988  0014DA  6FEB               	movwf	showRunStats@run& (0+255),b
  2989  0014DC  0E01               	movlw	high main@run
  2990  0014DE  0100               	movlb	0	; () banked
  2991  0014E0  6FEC               	movwf	(showRunStats@run+1)& (0+255),b
  2992  0014E2  EC04  F01D         	call	_showRunStats	;wreg free
  2993                           
  2994                           ;main.c: 225: (INTCONbits.GIE = 1);
  2995  0014E6  8EF2               	bsf	intcon,7,c	;volatile
  2996  0014E8  D494               	goto	l7784
  2997  0014EA                     l171:
  2998  0014EA  D7FF               	goto	l171
  2999  0014EC                     __end_of_main:
  3000                           	opt stack 0
  3001                           tblptru	equ	0xFF8
  3002                           tblptrh	equ	0xFF7
  3003                           tblptrl	equ	0xFF6
  3004                           tablat	equ	0xFF5
  3005                           intcon	equ	0xFF2
  3006                           postinc0	equ	0xFEE
  3007                           wreg	equ	0xFE8
  3008                           postdec1	equ	0xFE5
  3009                           fsr1l	equ	0xFE1
  3010                           status	equ	0xFD8
  3011                           
  3012 ;; *************** function _sortBattery *****************
  3013 ;; Defined at:
  3014 ;;		line 232 in file "main.c"
  3015 ;; Parameters:    Size  Location     Type
  3016 ;;		None
  3017 ;; Auto vars:     Size  Location     Type
  3018 ;;  V               3   23[BANK1 ] float 
  3019 ;;  i               3   20[BANK1 ] float 
  3020 ;;  V               3   17[BANK1 ] float 
  3021 ;;  V_sum           3   14[BANK1 ] float 
  3022 ;;  V_max           3    7[BANK1 ] float 
  3023 ;;  V_float         3    2[BANK1 ] float 
  3024 ;;  targetAngle     2   12[BANK1 ] int 
  3025 ;;  pos_v_counte    2   10[BANK1 ] int 
  3026 ;;  signal          2    5[BANK1 ] int 
  3027 ;; Return value:  Size  Location     Type
  3028 ;;                  1    wreg      void 
  3029 ;; Registers used:
  3030 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3031 ;; Tracked objects:
  3032 ;;		On entry : 0/0
  3033 ;;		On exit  : 0/0
  3034 ;;		Unchanged: 0/0
  3035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3037 ;;      Locals:         0       0      26       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3038 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3039 ;;      Totals:         0       2      26       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3040 ;;Total ram usage:       28 bytes
  3041 ;; Hardware stack levels used:    1
  3042 ;; Hardware stack levels required when called:    8
  3043 ;; This function calls:
  3044 ;;		___altoft
  3045 ;;		___awtoft
  3046 ;;		___ftadd
  3047 ;;		___ftdiv
  3048 ;;		___ftge
  3049 ;;		___ftmul
  3050 ;;		___ftsub
  3051 ;;		___fttol
  3052 ;;		_analogRead
  3053 ;;		_digitalRead
  3054 ;;		_digitalWrite
  3055 ;;		_lcdClear
  3056 ;;		_lcdHome
  3057 ;;		_printf
  3058 ;;		_readKeypad
  3059 ;;		_setAngle
  3060 ;; This function is called by:
  3061 ;;		_main
  3062 ;; This function uses a non-reentrant model
  3063 ;;
  3064                           
  3065                           	psect	text1
  3066  0014EC                     __ptext1:
  3067                           	opt stack 0
  3068  0014EC                     _sortBattery:
  3069                           	opt stack 22
  3070                           
  3071                           ;main.c: 235: setAngle(conveyorServo, 90);
  3072                           
  3073                           ;incstack = 0
  3074  0014EC  0E51               	movlw	low _conveyorServo
  3075  0014EE  0100               	movlb	0	; () banked
  3076  0014F0  6FD0               	movwf	setAngle@motor& (0+255),b
  3077  0014F2  0EFE               	movlw	high _conveyorServo
  3078  0014F4  0100               	movlb	0	; () banked
  3079  0014F6  6FD1               	movwf	(setAngle@motor+1)& (0+255),b
  3080  0014F8  0E00               	movlw	0
  3081  0014FA  0100               	movlb	0	; () banked
  3082  0014FC  6FD3               	movwf	(setAngle@angle+1)& (0+255),b
  3083  0014FE  0E5A               	movlw	90
  3084  001500  6FD2               	movwf	setAngle@angle& (0+255),b
  3085  001502  EC86  F01B         	call	_setAngle	;wreg free
  3086                           
  3087                           ;main.c: 236: digitalWrite(cylinderMotor1, 0);
  3088  001506  0E55               	movlw	low _cylinderMotor1
  3089  001508  6E25               	movwf	digitalWrite@pin,c
  3090  00150A  0EFE               	movlw	high _cylinderMotor1
  3091  00150C  6E26               	movwf	digitalWrite@pin+1,c
  3092  00150E  0E00               	movlw	0
  3093  001510  6E28               	movwf	digitalWrite@val+1,c
  3094  001512  0E00               	movlw	0
  3095  001514  6E27               	movwf	digitalWrite@val,c
  3096  001516  ECA6  F018         	call	_digitalWrite	;wreg free
  3097                           
  3098                           ;main.c: 237: digitalWrite(cylinderMotor2, 0);
  3099  00151A  0E59               	movlw	low _cylinderMotor2
  3100  00151C  6E25               	movwf	digitalWrite@pin,c
  3101  00151E  0EFE               	movlw	high _cylinderMotor2
  3102  001520  6E26               	movwf	digitalWrite@pin+1,c
  3103  001522  0E00               	movlw	0
  3104  001524  6E28               	movwf	digitalWrite@val+1,c
  3105  001526  0E00               	movlw	0
  3106  001528  6E27               	movwf	digitalWrite@val,c
  3107  00152A  ECA6  F018         	call	_digitalWrite	;wreg free
  3108                           
  3109                           ;main.c: 240: _delay((unsigned long)((1000)*(10000000/4000.0)));
  3110  00152E  0E0D               	movlw	13
  3111  001530  0100               	movlb	0	; () banked
  3112  001532  6FEC               	movwf	(??_sortBattery+1)& (0+255),b
  3113  001534  0EAF               	movlw	175
  3114  001536  0100               	movlb	0	; () banked
  3115  001538  6FEB               	movwf	??_sortBattery& (0+255),b
  3116  00153A  0EB6               	movlw	182
  3117  00153C                     u8517:
  3118  00153C  2EE8               	decfsz	wreg,f,c
  3119  00153E  D7FE               	bra	u8517
  3120  001540  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  3121  001542  D7FC               	bra	u8517
  3122  001544  2FEC               	decfsz	(??_sortBattery+1)& (0+255),f,b
  3123  001546  D7FA               	bra	u8517
  3124  001548  F000               	nop	
  3125                           
  3126                           ;main.c: 242: float V_max = 0;
  3127  00154A  0E00               	movlw	0
  3128  00154C  0101               	movlb	1	; () banked
  3129  00154E  6F07               	movwf	sortBattery@V_max& (0+255),b
  3130  001550  0E00               	movlw	0
  3131  001552  0101               	movlb	1	; () banked
  3132  001554  6F08               	movwf	(sortBattery@V_max+1)& (0+255),b
  3133  001556  0E00               	movlw	0
  3134  001558  0101               	movlb	1	; () banked
  3135  00155A  6F09               	movwf	(sortBattery@V_max+2)& (0+255),b
  3136                           
  3137                           ; BSR set to: 1
  3138                           ;main.c: 243: float V_sum = 0;
  3139  00155C  0E00               	movlw	0
  3140  00155E  0101               	movlb	1	; () banked
  3141  001560  6F0E               	movwf	sortBattery@V_sum& (0+255),b
  3142  001562  0E00               	movlw	0
  3143  001564  0101               	movlb	1	; () banked
  3144  001566  6F0F               	movwf	(sortBattery@V_sum+1)& (0+255),b
  3145  001568  0E00               	movlw	0
  3146  00156A  0101               	movlb	1	; () banked
  3147  00156C  6F10               	movwf	(sortBattery@V_sum+2)& (0+255),b
  3148                           
  3149                           ; BSR set to: 1
  3150                           ;main.c: 244: float V_float = 0;
  3151  00156E  0E00               	movlw	0
  3152  001570  0101               	movlb	1	; () banked
  3153  001572  6F02               	movwf	sortBattery@V_float& (0+255),b
  3154  001574  0E00               	movlw	0
  3155  001576  0101               	movlb	1	; () banked
  3156  001578  6F03               	movwf	(sortBattery@V_float+1)& (0+255),b
  3157  00157A  0E00               	movlw	0
  3158  00157C  0101               	movlb	1	; () banked
  3159  00157E  6F04               	movwf	(sortBattery@V_float+2)& (0+255),b
  3160                           
  3161                           ; BSR set to: 1
  3162                           ;main.c: 245: int pos_v_counter = 0;
  3163  001580  0E00               	movlw	0
  3164  001582  0101               	movlb	1	; () banked
  3165  001584  6F0B               	movwf	(sortBattery@pos_v_counter+1)& (0+255),b
  3166  001586  0E00               	movlw	0
  3167  001588  6F0A               	movwf	sortBattery@pos_v_counter& (0+255),b
  3168                           
  3169                           ; BSR set to: 1
  3170                           ;main.c: 246: int signal = 0;
  3171  00158A  0E00               	movlw	0
  3172  00158C  0101               	movlb	1	; () banked
  3173  00158E  6F06               	movwf	(sortBattery@signal+1)& (0+255),b
  3174  001590  0E00               	movlw	0
  3175  001592  6F05               	movwf	sortBattery@signal& (0+255),b
  3176                           
  3177                           ; BSR set to: 1
  3178                           ;main.c: 250: for(float i = (float)padAngle_NEUTRAL; i > padAngle_CLOSE; i -= 0.2) {
  3179  001594  0E45               	movlw	low _padAngle_NEUTRAL
  3180  001596  6EF6               	movwf	tblptrl,c
  3181  001598                     	if	1	;There is more than 1 active tblptr byte
  3182  001598  0EFE               	movlw	high _padAngle_NEUTRAL
  3183  00159A  6EF7               	movwf	tblptrh,c
  3184  00159C                     	endif
  3185  00159C                     	if	0	;There are less than 3 active tblptr bytes
  3186  00159C                     	endif
  3187  00159C  0009               	tblrd		*+
  3188  00159E  CFF5 F02D          	movff	tablat,___awtoft@c
  3189  0015A2  000A               	tblrd		*-
  3190  0015A4  CFF5 F02E          	movff	tablat,___awtoft@c+1
  3191  0015A8  EC0D  F022         	call	___awtoft	;wreg free
  3192  0015AC  C02D  F114         	movff	?___awtoft,sortBattery@i
  3193  0015B0  C02E  F115         	movff	?___awtoft+1,sortBattery@i+1
  3194  0015B4  C02F  F116         	movff	?___awtoft+2,sortBattery@i+2
  3195  0015B8  0E43               	movlw	low _padAngle_CLOSE
  3196  0015BA  6EF6               	movwf	tblptrl,c
  3197  0015BC                     	if	1	;There is more than 1 active tblptr byte
  3198  0015BC  0EFE               	movlw	high _padAngle_CLOSE
  3199  0015BE  6EF7               	movwf	tblptrh,c
  3200  0015C0                     	endif
  3201  0015C0                     	if	0	;There are less than 3 active tblptr bytes
  3202  0015C0                     	endif
  3203  0015C0  0009               	tblrd		*+
  3204  0015C2  CFF5 F02D          	movff	tablat,___awtoft@c
  3205  0015C6  000A               	tblrd		*-
  3206  0015C8  CFF5 F02E          	movff	tablat,___awtoft@c+1
  3207  0015CC  EC0D  F022         	call	___awtoft	;wreg free
  3208  0015D0  C02D  F031         	movff	?___awtoft,___ftge@ff1
  3209  0015D4  C02E  F032         	movff	?___awtoft+1,___ftge@ff1+1
  3210  0015D8  C02F  F033         	movff	?___awtoft+2,___ftge@ff1+2
  3211  0015DC  C114  F034         	movff	sortBattery@i,___ftge@ff2
  3212  0015E0  C115  F035         	movff	sortBattery@i+1,___ftge@ff2+1
  3213  0015E4  C116  F036         	movff	sortBattery@i+2,___ftge@ff2+2
  3214  0015E8  ECA4  F01D         	call	___ftge	;wreg free
  3215  0015EC  B0D8               	btfsc	status,0,c
  3216  0015EE  D170               	goto	l178
  3217                           
  3218                           ;main.c: 251: setAngle(padServo, i);
  3219  0015F0  C114  F0AA         	movff	sortBattery@i,___fttol@f1
  3220  0015F4  C115  F0AB         	movff	sortBattery@i+1,___fttol@f1+1
  3221  0015F8  C116  F0AC         	movff	sortBattery@i+2,___fttol@f1+2
  3222  0015FC  ECC9  F015         	call	___fttol	;wreg free
  3223  001600  C0AA  F100         	movff	?___fttol,_sortBattery$1418
  3224  001604  C0AB  F101         	movff	?___fttol+1,_sortBattery$1418+1
  3225                           
  3226                           ;main.c: 251: setAngle(padServo, i);
  3227  001608  0E5D               	movlw	low _padServo
  3228  00160A  0100               	movlb	0	; () banked
  3229  00160C  6FD0               	movwf	setAngle@motor& (0+255),b
  3230  00160E  0EFE               	movlw	high _padServo
  3231  001610  0100               	movlb	0	; () banked
  3232  001612  6FD1               	movwf	(setAngle@motor+1)& (0+255),b
  3233  001614  C100  F0D2         	movff	_sortBattery$1418,setAngle@angle
  3234  001618  C101  F0D3         	movff	_sortBattery$1418+1,setAngle@angle+1
  3235  00161C  EC86  F01B         	call	_setAngle	;wreg free
  3236                           
  3237                           ;main.c: 252: _delay((unsigned long)((100)*(10000000/4000000.0)));
  3238  001620  0E53               	movlw	83
  3239  001622                     u8527:
  3240  001622  2EE8               	decfsz	wreg,f,c
  3241  001624  D7FE               	bra	u8527
  3242  001626  F000               	nop	
  3243                           
  3244                           ;main.c: 254: digitalWrite(AA_float, 1);
  3245  001628  0E4F               	movlw	low _AA_float
  3246  00162A  6E25               	movwf	digitalWrite@pin,c
  3247  00162C  0E00               	movlw	high _AA_float
  3248  00162E  6E26               	movwf	digitalWrite@pin+1,c
  3249  001630  0E00               	movlw	0
  3250  001632  6E28               	movwf	digitalWrite@val+1,c
  3251  001634  0E01               	movlw	1
  3252  001636  6E27               	movwf	digitalWrite@val,c
  3253  001638  ECA6  F018         	call	_digitalWrite	;wreg free
  3254                           
  3255                           ;main.c: 255: float V = analogRead(padPin3[1]) / resolution * Vcc;
  3256  00163C  0E3C               	movlw	low _resolution
  3257  00163E  6EF6               	movwf	tblptrl,c
  3258  001640                     	if	1	;There is more than 1 active tblptr byte
  3259  001640  0EFE               	movlw	high _resolution
  3260  001642  6EF7               	movwf	tblptrh,c
  3261  001644                     	endif
  3262  001644                     	if	0	;There are less than 3 active tblptr bytes
  3263  001644                     	endif
  3264  001644  0009               	tblrd		*+
  3265  001646  CFF5 F092          	movff	tablat,___ftdiv@f2
  3266  00164A  0009               	tblrd		*+
  3267  00164C  CFF5 F093          	movff	tablat,___ftdiv@f2+1
  3268  001650  000A               	tblrd		*-
  3269  001652  CFF5 F094          	movff	tablat,___ftdiv@f2+2
  3270  001656  C044  F025         	movff	_padPin3+2,analogRead@channel
  3271  00165A  C045  F026         	movff	_padPin3+3,analogRead@channel+1
  3272  00165E  ECF1  F021         	call	_analogRead	;wreg free
  3273  001662  C025  F02D         	movff	?_analogRead,___altoft@c
  3274  001666  C026  F02E         	movff	?_analogRead+1,___altoft@c+1
  3275  00166A  C027  F02F         	movff	?_analogRead+2,___altoft@c+2
  3276  00166E  C028  F030         	movff	?_analogRead+3,___altoft@c+3
  3277  001672  ECF7  F01E         	call	___altoft	;wreg free
  3278  001676  C02D  F08F         	movff	?___altoft,___ftdiv@f1
  3279  00167A  C02E  F090         	movff	?___altoft+1,___ftdiv@f1+1
  3280  00167E  C02F  F091         	movff	?___altoft+2,___ftdiv@f1+2
  3281  001682  EC23  F015         	call	___ftdiv	;wreg free
  3282  001686  C08F  F080         	movff	?___ftdiv,___ftmul@f1
  3283  00168A  C090  F081         	movff	?___ftdiv+1,___ftmul@f1+1
  3284  00168E  C091  F082         	movff	?___ftdiv+2,___ftmul@f1+2
  3285  001692  0E39               	movlw	low _Vcc
  3286  001694  6EF6               	movwf	tblptrl,c
  3287  001696                     	if	1	;There is more than 1 active tblptr byte
  3288  001696  0EFE               	movlw	high _Vcc
  3289  001698  6EF7               	movwf	tblptrh,c
  3290  00169A                     	endif
  3291  00169A                     	if	0	;There are less than 3 active tblptr bytes
  3292  00169A                     	endif
  3293  00169A  0009               	tblrd		*+
  3294  00169C  CFF5 F083          	movff	tablat,___ftmul@f2
  3295  0016A0  0009               	tblrd		*+
  3296  0016A2  CFF5 F084          	movff	tablat,___ftmul@f2+1
  3297  0016A6  000A               	tblrd		*-
  3298  0016A8  CFF5 F085          	movff	tablat,___ftmul@f2+2
  3299  0016AC  EC74  F014         	call	___ftmul	;wreg free
  3300  0016B0  C080  F117         	movff	?___ftmul,sortBattery@V
  3301  0016B4  C081  F118         	movff	?___ftmul+1,sortBattery@V+1
  3302  0016B8  C082  F119         	movff	?___ftmul+2,sortBattery@V+2
  3303                           
  3304                           ;main.c: 257: if(V > 0.1)
  3305  0016BC  0ECD               	movlw	205
  3306  0016BE  6E31               	movwf	___ftge@ff1,c
  3307  0016C0  0ECC               	movlw	204
  3308  0016C2  6E32               	movwf	___ftge@ff1+1,c
  3309  0016C4  0E3D               	movlw	61
  3310  0016C6  6E33               	movwf	___ftge@ff1+2,c
  3311  0016C8  C117  F034         	movff	sortBattery@V,___ftge@ff2
  3312  0016CC  C118  F035         	movff	sortBattery@V+1,___ftge@ff2+1
  3313  0016D0  C119  F036         	movff	sortBattery@V+2,___ftge@ff2+2
  3314  0016D4  ECA4  F01D         	call	___ftge	;wreg free
  3315  0016D8  B0D8               	btfsc	status,0,c
  3316  0016DA  D0C8               	goto	l179
  3317                           
  3318                           ;main.c: 258: {
  3319                           ;main.c: 259: pos_v_counter++;
  3320  0016DC  0101               	movlb	1	; () banked
  3321  0016DE  4B0A               	infsnz	sortBattery@pos_v_counter& (0+255),f,b
  3322  0016E0  2B0B               	incf	(sortBattery@pos_v_counter+1)& (0+255),f,b
  3323                           
  3324                           ; BSR set to: 1
  3325                           ;main.c: 260: signal = digitalRead(padPin1)<<1;
  3326  0016E2  0E53               	movlw	low _padPin1
  3327  0016E4  6E25               	movwf	digitalRead@pin,c
  3328  0016E6  0E00               	movlw	high _padPin1
  3329  0016E8  6E26               	movwf	digitalRead@pin+1,c
  3330  0016EA  EC44  F012         	call	_digitalRead	;wreg free
  3331  0016EE  90D8               	bcf	status,0,c
  3332  0016F0  3425               	rlcf	?_digitalRead,w,c
  3333  0016F2  0101               	movlb	1	; () banked
  3334  0016F4  6F05               	movwf	sortBattery@signal& (0+255),b
  3335  0016F6  3426               	rlcf	?_digitalRead+1,w,c
  3336  0016F8  0101               	movlb	1	; () banked
  3337  0016FA  6F06               	movwf	(sortBattery@signal+1)& (0+255),b
  3338                           
  3339                           ; BSR set to: 1
  3340                           ;main.c: 261: signal |= digitalRead(padPin2)<<0;
  3341  0016FC  0E57               	movlw	low _padPin2
  3342  0016FE  6E25               	movwf	digitalRead@pin,c
  3343  001700  0E00               	movlw	high _padPin2
  3344  001702  6E26               	movwf	digitalRead@pin+1,c
  3345  001704  EC44  F012         	call	_digitalRead	;wreg free
  3346  001708  5025               	movf	?_digitalRead,w,c
  3347  00170A  0101               	movlb	1	; () banked
  3348  00170C  1305               	iorwf	sortBattery@signal& (0+255),f,b
  3349  00170E  5026               	movf	?_digitalRead+1,w,c
  3350  001710  0101               	movlb	1	; () banked
  3351  001712  1306               	iorwf	(sortBattery@signal+1)& (0+255),f,b
  3352                           
  3353                           ; BSR set to: 1
  3354                           ;main.c: 263: if(V > V_max)V_max = V;
  3355  001714  C107  F031         	movff	sortBattery@V_max,___ftge@ff1
  3356  001718  C108  F032         	movff	sortBattery@V_max+1,___ftge@ff1+1
  3357  00171C  C109  F033         	movff	sortBattery@V_max+2,___ftge@ff1+2
  3358  001720  C117  F034         	movff	sortBattery@V,___ftge@ff2
  3359  001724  C118  F035         	movff	sortBattery@V+1,___ftge@ff2+1
  3360  001728  C119  F036         	movff	sortBattery@V+2,___ftge@ff2+2
  3361  00172C  ECA4  F01D         	call	___ftge	;wreg free
  3362  001730  B0D8               	btfsc	status,0,c
  3363  001732  D006               	goto	l7664
  3364  001734  C117  F107         	movff	sortBattery@V,sortBattery@V_max
  3365  001738  C118  F108         	movff	sortBattery@V+1,sortBattery@V_max+1
  3366  00173C  C119  F109         	movff	sortBattery@V+2,sortBattery@V_max+2
  3367  001740                     l7664:
  3368                           
  3369                           ;main.c: 266: digitalWrite(AA_float, 0);
  3370  001740  0E4F               	movlw	low _AA_float
  3371  001742  6E25               	movwf	digitalWrite@pin,c
  3372  001744  0E00               	movlw	high _AA_float
  3373  001746  6E26               	movwf	digitalWrite@pin+1,c
  3374  001748  0E00               	movlw	0
  3375  00174A  6E28               	movwf	digitalWrite@val+1,c
  3376  00174C  0E00               	movlw	0
  3377  00174E  6E27               	movwf	digitalWrite@val,c
  3378  001750  ECA6  F018         	call	_digitalWrite	;wreg free
  3379                           
  3380                           ;main.c: 267: _delay((unsigned long)((1)*(10000000/4000.0)));
  3381  001754  0E04               	movlw	4
  3382  001756  0100               	movlb	0	; () banked
  3383  001758  6FEB               	movwf	??_sortBattery& (0+255),b
  3384  00175A  0E3D               	movlw	61
  3385  00175C                     u8537:
  3386  00175C  2EE8               	decfsz	wreg,f,c
  3387  00175E  D7FE               	bra	u8537
  3388  001760  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  3389  001762  D7FC               	bra	u8537
  3390  001764  D000               	nop2	
  3391                           
  3392                           ;main.c: 268: V_float = analogRead(padPin3[1]) / resolution * Vcc;
  3393  001766  0E3C               	movlw	low _resolution
  3394  001768  6EF6               	movwf	tblptrl,c
  3395  00176A                     	if	1	;There is more than 1 active tblptr byte
  3396  00176A  0EFE               	movlw	high _resolution
  3397  00176C  6EF7               	movwf	tblptrh,c
  3398  00176E                     	endif
  3399  00176E                     	if	0	;There are less than 3 active tblptr bytes
  3400  00176E                     	endif
  3401  00176E  0009               	tblrd		*+
  3402  001770  CFF5 F092          	movff	tablat,___ftdiv@f2
  3403  001774  0009               	tblrd		*+
  3404  001776  CFF5 F093          	movff	tablat,___ftdiv@f2+1
  3405  00177A  000A               	tblrd		*-
  3406  00177C  CFF5 F094          	movff	tablat,___ftdiv@f2+2
  3407  001780  C044  F025         	movff	_padPin3+2,analogRead@channel
  3408  001784  C045  F026         	movff	_padPin3+3,analogRead@channel+1
  3409  001788  ECF1  F021         	call	_analogRead	;wreg free
  3410  00178C  C025  F02D         	movff	?_analogRead,___altoft@c
  3411  001790  C026  F02E         	movff	?_analogRead+1,___altoft@c+1
  3412  001794  C027  F02F         	movff	?_analogRead+2,___altoft@c+2
  3413  001798  C028  F030         	movff	?_analogRead+3,___altoft@c+3
  3414  00179C  ECF7  F01E         	call	___altoft	;wreg free
  3415  0017A0  C02D  F08F         	movff	?___altoft,___ftdiv@f1
  3416  0017A4  C02E  F090         	movff	?___altoft+1,___ftdiv@f1+1
  3417  0017A8  C02F  F091         	movff	?___altoft+2,___ftdiv@f1+2
  3418  0017AC  EC23  F015         	call	___ftdiv	;wreg free
  3419  0017B0  C08F  F080         	movff	?___ftdiv,___ftmul@f1
  3420  0017B4  C090  F081         	movff	?___ftdiv+1,___ftmul@f1+1
  3421  0017B8  C091  F082         	movff	?___ftdiv+2,___ftmul@f1+2
  3422  0017BC  0E39               	movlw	low _Vcc
  3423  0017BE  6EF6               	movwf	tblptrl,c
  3424  0017C0                     	if	1	;There is more than 1 active tblptr byte
  3425  0017C0  0EFE               	movlw	high _Vcc
  3426  0017C2  6EF7               	movwf	tblptrh,c
  3427  0017C4                     	endif
  3428  0017C4                     	if	0	;There are less than 3 active tblptr bytes
  3429  0017C4                     	endif
  3430  0017C4  0009               	tblrd		*+
  3431  0017C6  CFF5 F083          	movff	tablat,___ftmul@f2
  3432  0017CA  0009               	tblrd		*+
  3433  0017CC  CFF5 F084          	movff	tablat,___ftmul@f2+1
  3434  0017D0  000A               	tblrd		*-
  3435  0017D2  CFF5 F085          	movff	tablat,___ftmul@f2+2
  3436  0017D6  EC74  F014         	call	___ftmul	;wreg free
  3437  0017DA  C080  F102         	movff	?___ftmul,sortBattery@V_float
  3438  0017DE  C081  F103         	movff	?___ftmul+1,sortBattery@V_float+1
  3439  0017E2  C082  F104         	movff	?___ftmul+2,sortBattery@V_float+2
  3440                           
  3441                           ;main.c: 271: if(pos_v_counter == 1)V_sum = V;
  3442  0017E6  0101               	movlb	1	; () banked
  3443  0017E8  050A               	decf	sortBattery@pos_v_counter& (0+255),w,b
  3444  0017EA  0101               	movlb	1	; () banked
  3445  0017EC  110B               	iorwf	(sortBattery@pos_v_counter+1)& (0+255),w,b
  3446  0017EE  A4D8               	btfss	status,2,c
  3447  0017F0  D007               	goto	l7674
  3448                           
  3449                           ; BSR set to: 1
  3450  0017F2  C117  F10E         	movff	sortBattery@V,sortBattery@V_sum
  3451  0017F6  C118  F10F         	movff	sortBattery@V+1,sortBattery@V_sum+1
  3452  0017FA  C119  F110         	movff	sortBattery@V+2,sortBattery@V_sum+2
  3453  0017FE  D036               	goto	l179
  3454  001800                     l7674:
  3455                           
  3456                           ; BSR set to: 1
  3457                           ;main.c: 272: else V_sum = V_sum * 0.7 + V * 0.3;
  3458  001800  0E33               	movlw	51
  3459  001802  0100               	movlb	0	; () banked
  3460  001804  6F83               	movwf	___ftmul@f2& (0+255),b
  3461  001806  0E33               	movlw	51
  3462  001808  0100               	movlb	0	; () banked
  3463  00180A  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  3464  00180C  0E3F               	movlw	63
  3465  00180E  0100               	movlb	0	; () banked
  3466  001810  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  3467  001812  C10E  F080         	movff	sortBattery@V_sum,___ftmul@f1
  3468  001816  C10F  F081         	movff	sortBattery@V_sum+1,___ftmul@f1+1
  3469  00181A  C110  F082         	movff	sortBattery@V_sum+2,___ftmul@f1+2
  3470  00181E  EC74  F014         	call	___ftmul	;wreg free
  3471  001822  C080  F09E         	movff	?___ftmul,___ftadd@f1
  3472  001826  C081  F09F         	movff	?___ftmul+1,___ftadd@f1+1
  3473  00182A  C082  F0A0         	movff	?___ftmul+2,___ftadd@f1+2
  3474  00182E  0E9A               	movlw	154
  3475  001830  0100               	movlb	0	; () banked
  3476  001832  6F83               	movwf	___ftmul@f2& (0+255),b
  3477  001834  0E99               	movlw	153
  3478  001836  0100               	movlb	0	; () banked
  3479  001838  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  3480  00183A  0E3E               	movlw	62
  3481  00183C  0100               	movlb	0	; () banked
  3482  00183E  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  3483  001840  C117  F080         	movff	sortBattery@V,___ftmul@f1
  3484  001844  C118  F081         	movff	sortBattery@V+1,___ftmul@f1+1
  3485  001848  C119  F082         	movff	sortBattery@V+2,___ftmul@f1+2
  3486  00184C  EC74  F014         	call	___ftmul	;wreg free
  3487  001850  C080  F0A1         	movff	?___ftmul,___ftadd@f2
  3488  001854  C081  F0A2         	movff	?___ftmul+1,___ftadd@f2+1
  3489  001858  C082  F0A3         	movff	?___ftmul+2,___ftadd@f2+2
  3490  00185C  ECE0  F00F         	call	___ftadd	;wreg free
  3491  001860  C09E  F10E         	movff	?___ftadd,sortBattery@V_sum
  3492  001864  C09F  F10F         	movff	?___ftadd+1,sortBattery@V_sum+1
  3493  001868  C0A0  F110         	movff	?___ftadd+2,sortBattery@V_sum+2
  3494  00186C                     l179:
  3495  00186C  C114  F0AA         	movff	sortBattery@i,___ftsub@f1
  3496  001870  C115  F0AB         	movff	sortBattery@i+1,___ftsub@f1+1
  3497  001874  C116  F0AC         	movff	sortBattery@i+2,___ftsub@f1+2
  3498  001878  0ECD               	movlw	205
  3499  00187A  0100               	movlb	0	; () banked
  3500  00187C  6FAD               	movwf	___ftsub@f2& (0+255),b
  3501  00187E  0E4C               	movlw	76
  3502  001880  0100               	movlb	0	; () banked
  3503  001882  6FAE               	movwf	(___ftsub@f2+1)& (0+255),b
  3504  001884  0E3E               	movlw	62
  3505  001886  0100               	movlb	0	; () banked
  3506  001888  6FAF               	movwf	(___ftsub@f2+2)& (0+255),b
  3507  00188A  EC17  F021         	call	___ftsub	;wreg free
  3508  00188E  C0AA  F114         	movff	?___ftsub,sortBattery@i
  3509  001892  C0AB  F115         	movff	?___ftsub+1,sortBattery@i+1
  3510  001896  C0AC  F116         	movff	?___ftsub+2,sortBattery@i+2
  3511  00189A  0E43               	movlw	low _padAngle_CLOSE
  3512  00189C  6EF6               	movwf	tblptrl,c
  3513  00189E                     	if	1	;There is more than 1 active tblptr byte
  3514  00189E  0EFE               	movlw	high _padAngle_CLOSE
  3515  0018A0  6EF7               	movwf	tblptrh,c
  3516  0018A2                     	endif
  3517  0018A2                     	if	0	;There are less than 3 active tblptr bytes
  3518  0018A2                     	endif
  3519  0018A2  0009               	tblrd		*+
  3520  0018A4  CFF5 F02D          	movff	tablat,___awtoft@c
  3521  0018A8  000A               	tblrd		*-
  3522  0018AA  CFF5 F02E          	movff	tablat,___awtoft@c+1
  3523  0018AE  EC0D  F022         	call	___awtoft	;wreg free
  3524  0018B2  C02D  F031         	movff	?___awtoft,___ftge@ff1
  3525  0018B6  C02E  F032         	movff	?___awtoft+1,___ftge@ff1+1
  3526  0018BA  C02F  F033         	movff	?___awtoft+2,___ftge@ff1+2
  3527  0018BE  C114  F034         	movff	sortBattery@i,___ftge@ff2
  3528  0018C2  C115  F035         	movff	sortBattery@i+1,___ftge@ff2+1
  3529  0018C6  C116  F036         	movff	sortBattery@i+2,___ftge@ff2+2
  3530  0018CA  ECA4  F01D         	call	___ftge	;wreg free
  3531  0018CE  D68E               	goto	L2
  3532  0018D0                     l178:
  3533                           
  3534                           ;main.c: 273: }
  3535                           ;main.c: 274: }
  3536                           ;main.c: 276: int targetAngle;
  3537                           ;main.c: 277: float V = V_sum;
  3538  0018D0  C10E  F111         	movff	sortBattery@V_sum,sortBattery@V_249
  3539  0018D4  C10F  F112         	movff	sortBattery@V_sum+1,sortBattery@V_249+1
  3540  0018D8  C110  F113         	movff	sortBattery@V_sum+2,sortBattery@V_249+2
  3541                           
  3542                           ;main.c: 279: lcdClear();
  3543  0018DC  EC0F  F023         	call	_lcdClear	;wreg free
  3544                           
  3545                           ;main.c: 280: printf("V: %.3f, N: %d\n",V,pos_v_counter);
  3546  0018E0  0EA5               	movlw	low STR_4
  3547  0018E2  0100               	movlb	0	; () banked
  3548  0018E4  6FB9               	movwf	printf@f& (0+255),b
  3549  0018E6  0EFF               	movlw	high STR_4
  3550  0018E8  0100               	movlb	0	; () banked
  3551  0018EA  6FBA               	movwf	(printf@f+1)& (0+255),b
  3552  0018EC  C111  F0BB         	movff	sortBattery@V_249,?_printf+2
  3553  0018F0  C112  F0BC         	movff	sortBattery@V_249+1,?_printf+3
  3554  0018F4  C113  F0BD         	movff	sortBattery@V_249+2,?_printf+4
  3555  0018F8  C10A  F0BE         	movff	sortBattery@pos_v_counter,?_printf+5
  3556  0018FC  C10B  F0BF         	movff	sortBattery@pos_v_counter+1,?_printf+6
  3557  001900  EC09  F000         	call	_printf	;wreg free
  3558                           
  3559                           ;main.c: 281: printf("V_max: %.3f",V_max);
  3560  001904  0EB5               	movlw	low STR_5
  3561  001906  0100               	movlb	0	; () banked
  3562  001908  6FB9               	movwf	printf@f& (0+255),b
  3563  00190A  0EFF               	movlw	high STR_5
  3564  00190C  0100               	movlb	0	; () banked
  3565  00190E  6FBA               	movwf	(printf@f+1)& (0+255),b
  3566  001910  C107  F0BB         	movff	sortBattery@V_max,?_printf+2
  3567  001914  C108  F0BC         	movff	sortBattery@V_max+1,?_printf+3
  3568  001918  C109  F0BD         	movff	sortBattery@V_max+2,?_printf+4
  3569  00191C  EC09  F000         	call	_printf	;wreg free
  3570                           
  3571                           ;main.c: 282: readKeypad();
  3572  001920  EC41  F022         	call	_readKeypad	;wreg free
  3573                           
  3574                           ;main.c: 283: lcdHome();
  3575  001924  EC0B  F023         	call	_lcdHome	;wreg free
  3576                           
  3577                           ;main.c: 288: switch(signal){
  3578  001928  D0BE               	goto	l7728
  3579  00192A                     l7688:
  3580                           
  3581                           ;main.c: 290: if(V_float < 0.1){
  3582  00192A  C102  F031         	movff	sortBattery@V_float,___ftge@ff1
  3583  00192E  C103  F032         	movff	sortBattery@V_float+1,___ftge@ff1+1
  3584  001932  C104  F033         	movff	sortBattery@V_float+2,___ftge@ff1+2
  3585  001936  0ECD               	movlw	205
  3586  001938  6E34               	movwf	___ftge@ff2,c
  3587  00193A  0ECC               	movlw	204
  3588  00193C  6E35               	movwf	___ftge@ff2+1,c
  3589  00193E  0E3D               	movlw	61
  3590  001940  6E36               	movwf	___ftge@ff2+2,c
  3591  001942  ECA4  F01D         	call	___ftge	;wreg free
  3592  001946  B0D8               	btfsc	status,0,c
  3593  001948  D03A               	goto	l7702
  3594                           
  3595                           ;main.c: 291: if(V > V_LIM_AA){ targetAngle = redirectAngle_AA; n_AA+=1;}
  3596  00194A  C0F8  F031         	movff	_V_LIM_AA,___ftge@ff1
  3597  00194E  C0F9  F032         	movff	_V_LIM_AA+1,___ftge@ff1+1
  3598  001952  C0FA  F033         	movff	_V_LIM_AA+2,___ftge@ff1+2
  3599  001956  C111  F034         	movff	sortBattery@V_249,___ftge@ff2
  3600  00195A  C112  F035         	movff	sortBattery@V_249+1,___ftge@ff2+1
  3601  00195E  C113  F036         	movff	sortBattery@V_249+2,___ftge@ff2+2
  3602  001962  ECA4  F01D         	call	___ftge	;wreg free
  3603  001966  B0D8               	btfsc	status,0,c
  3604  001968  D00E               	goto	l7696
  3605  00196A  0E4B               	movlw	low _redirectAngle_AA
  3606  00196C  6EF6               	movwf	tblptrl,c
  3607  00196E                     	if	1	;There is more than 1 active tblptr byte
  3608  00196E  0EFE               	movlw	high _redirectAngle_AA
  3609  001970  6EF7               	movwf	tblptrh,c
  3610  001972                     	endif
  3611  001972                     	if	0	;There are less than 3 active tblptr bytes
  3612  001972                     	endif
  3613  001972  0009               	tblrd		*+
  3614  001974  CFF5 F10C          	movff	tablat,sortBattery@targetAngle
  3615  001978  000A               	tblrd		*-
  3616  00197A  CFF5 F10D          	movff	tablat,sortBattery@targetAngle+1
  3617  00197E  0101               	movlb	1	; () banked
  3618  001980  4B4F               	infsnz	_n_AA& (0+255),f,b
  3619  001982  2B50               	incf	(_n_AA+1)& (0+255),f,b
  3620  001984  D00D               	goto	l7700
  3621  001986                     l7696:
  3622                           
  3623                           ;main.c: 292: else { targetAngle = redirectAngle_OTHER; n_OTHER+=1;}
  3624  001986  0E4F               	movlw	low _redirectAngle_OTHER
  3625  001988  6EF6               	movwf	tblptrl,c
  3626  00198A                     	if	1	;There is more than 1 active tblptr byte
  3627  00198A  0EFE               	movlw	high _redirectAngle_OTHER
  3628  00198C  6EF7               	movwf	tblptrh,c
  3629  00198E                     	endif
  3630  00198E                     	if	0	;There are less than 3 active tblptr bytes
  3631  00198E                     	endif
  3632  00198E  0009               	tblrd		*+
  3633  001990  CFF5 F10C          	movff	tablat,sortBattery@targetAngle
  3634  001994  000A               	tblrd		*-
  3635  001996  CFF5 F10D          	movff	tablat,sortBattery@targetAngle+1
  3636  00199A  0101               	movlb	1	; () banked
  3637  00199C  4B53               	infsnz	_n_OTHER& (0+255),f,b
  3638  00199E  2B54               	incf	(_n_OTHER+1)& (0+255),f,b
  3639  0019A0                     l7700:
  3640                           
  3641                           ; BSR set to: 1
  3642                           ;main.c: 293: printf("AA lim: %f",V_LIM_AA);
  3643  0019A0  0ED7               	movlw	low STR_6
  3644  0019A2  0100               	movlb	0	; () banked
  3645  0019A4  6FB9               	movwf	printf@f& (0+255),b
  3646  0019A6  0EFF               	movlw	high STR_6
  3647  0019A8  0100               	movlb	0	; () banked
  3648  0019AA  6FBA               	movwf	(printf@f+1)& (0+255),b
  3649  0019AC  C0F8  F0BB         	movff	_V_LIM_AA,?_printf+2
  3650  0019B0  C0F9  F0BC         	movff	_V_LIM_AA+1,?_printf+3
  3651  0019B4  C0FA  F0BD         	movff	_V_LIM_AA+2,?_printf+4
  3652  0019B8  EC09  F000         	call	_printf	;wreg free
  3653                           
  3654                           ;main.c: 294: break;
  3655  0019BC  D088               	goto	l7730
  3656  0019BE                     l7702:
  3657                           
  3658                           ;main.c: 298: if(V > V_LIM_9V) {targetAngle = redirectAngle_9V; n_9V+=1;}
  3659  0019BE  C0F5  F031         	movff	_V_LIM_9V,___ftge@ff1
  3660  0019C2  C0F6  F032         	movff	_V_LIM_9V+1,___ftge@ff1+1
  3661  0019C6  C0F7  F033         	movff	_V_LIM_9V+2,___ftge@ff1+2
  3662  0019CA  C111  F034         	movff	sortBattery@V_249,___ftge@ff2
  3663  0019CE  C112  F035         	movff	sortBattery@V_249+1,___ftge@ff2+1
  3664  0019D2  C113  F036         	movff	sortBattery@V_249+2,___ftge@ff2+2
  3665  0019D6  ECA4  F01D         	call	___ftge	;wreg free
  3666  0019DA  B0D8               	btfsc	status,0,c
  3667  0019DC  D00E               	goto	l7708
  3668  0019DE  0E49               	movlw	low _redirectAngle_9V
  3669  0019E0  6EF6               	movwf	tblptrl,c
  3670  0019E2                     	if	1	;There is more than 1 active tblptr byte
  3671  0019E2  0EFE               	movlw	high _redirectAngle_9V
  3672  0019E4  6EF7               	movwf	tblptrh,c
  3673  0019E6                     	endif
  3674  0019E6                     	if	0	;There are less than 3 active tblptr bytes
  3675  0019E6                     	endif
  3676  0019E6  0009               	tblrd		*+
  3677  0019E8  CFF5 F10C          	movff	tablat,sortBattery@targetAngle
  3678  0019EC  000A               	tblrd		*-
  3679  0019EE  CFF5 F10D          	movff	tablat,sortBattery@targetAngle+1
  3680  0019F2  0101               	movlb	1	; () banked
  3681  0019F4  4B4D               	infsnz	_n_9V& (0+255),f,b
  3682  0019F6  2B4E               	incf	(_n_9V+1)& (0+255),f,b
  3683  0019F8  D00D               	goto	l7712
  3684  0019FA                     l7708:
  3685                           
  3686                           ;main.c: 299: else {targetAngle = redirectAngle_OTHER; n_OTHER+=1;}
  3687  0019FA  0E4F               	movlw	low _redirectAngle_OTHER
  3688  0019FC  6EF6               	movwf	tblptrl,c
  3689  0019FE                     	if	1	;There is more than 1 active tblptr byte
  3690  0019FE  0EFE               	movlw	high _redirectAngle_OTHER
  3691  001A00  6EF7               	movwf	tblptrh,c
  3692  001A02                     	endif
  3693  001A02                     	if	0	;There are less than 3 active tblptr bytes
  3694  001A02                     	endif
  3695  001A02  0009               	tblrd		*+
  3696  001A04  CFF5 F10C          	movff	tablat,sortBattery@targetAngle
  3697  001A08  000A               	tblrd		*-
  3698  001A0A  CFF5 F10D          	movff	tablat,sortBattery@targetAngle+1
  3699  001A0E  0101               	movlb	1	; () banked
  3700  001A10  4B53               	infsnz	_n_OTHER& (0+255),f,b
  3701  001A12  2B54               	incf	(_n_OTHER+1)& (0+255),f,b
  3702  001A14                     l7712:
  3703                           
  3704                           ; BSR set to: 1
  3705                           ;main.c: 300: printf("9V lim: %f",V_LIM_9V);
  3706  001A14  0EE2               	movlw	low STR_7
  3707  001A16  0100               	movlb	0	; () banked
  3708  001A18  6FB9               	movwf	printf@f& (0+255),b
  3709  001A1A  0EFF               	movlw	high STR_7
  3710  001A1C  0100               	movlb	0	; () banked
  3711  001A1E  6FBA               	movwf	(printf@f+1)& (0+255),b
  3712  001A20  C0F5  F0BB         	movff	_V_LIM_9V,?_printf+2
  3713  001A24  C0F6  F0BC         	movff	_V_LIM_9V+1,?_printf+3
  3714  001A28  C0F7  F0BD         	movff	_V_LIM_9V+2,?_printf+4
  3715  001A2C  EC09  F000         	call	_printf	;wreg free
  3716                           
  3717                           ;main.c: 301: break;
  3718  001A30  D04E               	goto	l7730
  3719  001A32                     l7714:
  3720                           
  3721                           ;main.c: 303: if(V > V_LIM_C) {targetAngle = redirectAngle_C; n_C+=1;}
  3722  001A32  C0FB  F031         	movff	_V_LIM_C,___ftge@ff1
  3723  001A36  C0FC  F032         	movff	_V_LIM_C+1,___ftge@ff1+1
  3724  001A3A  C0FD  F033         	movff	_V_LIM_C+2,___ftge@ff1+2
  3725  001A3E  C111  F034         	movff	sortBattery@V_249,___ftge@ff2
  3726  001A42  C112  F035         	movff	sortBattery@V_249+1,___ftge@ff2+1
  3727  001A46  C113  F036         	movff	sortBattery@V_249+2,___ftge@ff2+2
  3728  001A4A  ECA4  F01D         	call	___ftge	;wreg free
  3729  001A4E  B0D8               	btfsc	status,0,c
  3730  001A50  D00E               	goto	l7720
  3731  001A52  0E4D               	movlw	low _redirectAngle_C
  3732  001A54  6EF6               	movwf	tblptrl,c
  3733  001A56                     	if	1	;There is more than 1 active tblptr byte
  3734  001A56  0EFE               	movlw	high _redirectAngle_C
  3735  001A58  6EF7               	movwf	tblptrh,c
  3736  001A5A                     	endif
  3737  001A5A                     	if	0	;There are less than 3 active tblptr bytes
  3738  001A5A                     	endif
  3739  001A5A  0009               	tblrd		*+
  3740  001A5C  CFF5 F10C          	movff	tablat,sortBattery@targetAngle
  3741  001A60  000A               	tblrd		*-
  3742  001A62  CFF5 F10D          	movff	tablat,sortBattery@targetAngle+1
  3743  001A66  0101               	movlb	1	; () banked
  3744  001A68  4B51               	infsnz	_n_C& (0+255),f,b
  3745  001A6A  2B52               	incf	(_n_C+1)& (0+255),f,b
  3746  001A6C  D00D               	goto	l7724
  3747  001A6E                     l7720:
  3748                           
  3749                           ;main.c: 304: else {targetAngle = redirectAngle_OTHER; n_OTHER+=1;}
  3750  001A6E  0E4F               	movlw	low _redirectAngle_OTHER
  3751  001A70  6EF6               	movwf	tblptrl,c
  3752  001A72                     	if	1	;There is more than 1 active tblptr byte
  3753  001A72  0EFE               	movlw	high _redirectAngle_OTHER
  3754  001A74  6EF7               	movwf	tblptrh,c
  3755  001A76                     	endif
  3756  001A76                     	if	0	;There are less than 3 active tblptr bytes
  3757  001A76                     	endif
  3758  001A76  0009               	tblrd		*+
  3759  001A78  CFF5 F10C          	movff	tablat,sortBattery@targetAngle
  3760  001A7C  000A               	tblrd		*-
  3761  001A7E  CFF5 F10D          	movff	tablat,sortBattery@targetAngle+1
  3762  001A82  0101               	movlb	1	; () banked
  3763  001A84  4B53               	infsnz	_n_OTHER& (0+255),f,b
  3764  001A86  2B54               	incf	(_n_OTHER+1)& (0+255),f,b
  3765  001A88                     l7724:
  3766                           
  3767                           ; BSR set to: 1
  3768                           ;main.c: 305: printf("C  lim: %f",V_LIM_C);
  3769  001A88  0ECC               	movlw	low STR_8
  3770  001A8A  0100               	movlb	0	; () banked
  3771  001A8C  6FB9               	movwf	printf@f& (0+255),b
  3772  001A8E  0EFF               	movlw	high STR_8
  3773  001A90  0100               	movlb	0	; () banked
  3774  001A92  6FBA               	movwf	(printf@f+1)& (0+255),b
  3775  001A94  C0FB  F0BB         	movff	_V_LIM_C,?_printf+2
  3776  001A98  C0FC  F0BC         	movff	_V_LIM_C+1,?_printf+3
  3777  001A9C  C0FD  F0BD         	movff	_V_LIM_C+2,?_printf+4
  3778  001AA0  EC09  F000         	call	_printf	;wreg free
  3779                           
  3780                           ;main.c: 307: }
  3781                           
  3782                           ;main.c: 306: break;
  3783  001AA4  D014               	goto	l7730
  3784  001AA6                     l7728:
  3785  001AA6  C105  F0EB         	movff	sortBattery@signal,??_sortBattery
  3786  001AAA  C106  F0EC         	movff	sortBattery@signal+1,??_sortBattery+1
  3787                           
  3788                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3789                           ; Switch size 1, requested type "space"
  3790                           ; Number of cases is 1, Range of values is 0 to 0
  3791                           ; switch strategies available:
  3792                           ; Name         Instructions Cycles
  3793                           ; simple_byte            4     3 (average)
  3794                           ;	Chosen strategy is simple_byte
  3795  001AAE  0100               	movlb	0	; () banked
  3796  001AB0  51EC               	movf	(??_sortBattery+1)& (0+255),w,b
  3797  001AB2  0A00               	xorlw	0	; case 0
  3798  001AB4  A4D8               	btfss	status,2,c
  3799  001AB6  D00B               	goto	l7730
  3800                           
  3801                           ; BSR set to: 0
  3802                           ; Switch size 1, requested type "space"
  3803                           ; Number of cases is 3, Range of values is 0 to 2
  3804                           ; switch strategies available:
  3805                           ; Name         Instructions Cycles
  3806                           ; simple_byte           10     6 (average)
  3807                           ;	Chosen strategy is simple_byte
  3808  001AB8  0100               	movlb	0	; () banked
  3809  001ABA  51EB               	movf	??_sortBattery& (0+255),w,b
  3810  001ABC  0A00               	xorlw	0	; case 0
  3811  001ABE  B4D8               	btfsc	status,2,c
  3812  001AC0  D77E               	goto	l7702
  3813  001AC2  0A01               	xorlw	1	; case 1
  3814  001AC4  B4D8               	btfsc	status,2,c
  3815  001AC6  D731               	goto	l7688
  3816  001AC8  0A03               	xorlw	3	; case 2
  3817  001ACA  B4D8               	btfsc	status,2,c
  3818  001ACC  D7B2               	goto	l7714
  3819  001ACE                     l7730:
  3820                           
  3821                           ;main.c: 311: setAngle(redirectingServo, targetAngle);
  3822  001ACE  0E61               	movlw	low _redirectingServo
  3823  001AD0  0100               	movlb	0	; () banked
  3824  001AD2  6FD0               	movwf	setAngle@motor& (0+255),b
  3825  001AD4  0EFE               	movlw	high _redirectingServo
  3826  001AD6  0100               	movlb	0	; () banked
  3827  001AD8  6FD1               	movwf	(setAngle@motor+1)& (0+255),b
  3828  001ADA  C10C  F0D2         	movff	sortBattery@targetAngle,setAngle@angle
  3829  001ADE  C10D  F0D3         	movff	sortBattery@targetAngle+1,setAngle@angle+1
  3830  001AE2  EC86  F01B         	call	_setAngle	;wreg free
  3831                           
  3832                           ;main.c: 312: _delay((unsigned long)((500)*(10000000/4000.0)));
  3833  001AE6  0E07               	movlw	7
  3834  001AE8  0100               	movlb	0	; () banked
  3835  001AEA  6FEC               	movwf	(??_sortBattery+1)& (0+255),b
  3836  001AEC  0E58               	movlw	88
  3837  001AEE  0100               	movlb	0	; () banked
  3838  001AF0  6FEB               	movwf	??_sortBattery& (0+255),b
  3839  001AF2  0E59               	movlw	89
  3840  001AF4                     u8547:
  3841  001AF4  2EE8               	decfsz	wreg,f,c
  3842  001AF6  D7FE               	bra	u8547
  3843  001AF8  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  3844  001AFA  D7FC               	bra	u8547
  3845  001AFC  2FEC               	decfsz	(??_sortBattery+1)& (0+255),f,b
  3846  001AFE  D7FA               	bra	u8547
  3847  001B00  D000               	nop2	
  3848                           
  3849                           ;main.c: 321: setAngle(padServo, padAngle_OPEN);
  3850  001B02  0E5D               	movlw	low _padServo
  3851  001B04  0100               	movlb	0	; () banked
  3852  001B06  6FD0               	movwf	setAngle@motor& (0+255),b
  3853  001B08  0EFE               	movlw	high _padServo
  3854  001B0A  0100               	movlb	0	; () banked
  3855  001B0C  6FD1               	movwf	(setAngle@motor+1)& (0+255),b
  3856  001B0E  0E47               	movlw	low _padAngle_OPEN
  3857  001B10  6EF6               	movwf	tblptrl,c
  3858  001B12                     	if	1	;There is more than 1 active tblptr byte
  3859  001B12  0EFE               	movlw	high _padAngle_OPEN
  3860  001B14  6EF7               	movwf	tblptrh,c
  3861  001B16                     	endif
  3862  001B16                     	if	0	;There are less than 3 active tblptr bytes
  3863  001B16                     	endif
  3864  001B16  0009               	tblrd		*+
  3865  001B18  CFF5 F0D2          	movff	tablat,setAngle@angle
  3866  001B1C  000A               	tblrd		*-
  3867  001B1E  CFF5 F0D3          	movff	tablat,setAngle@angle+1
  3868  001B22  EC86  F01B         	call	_setAngle	;wreg free
  3869                           
  3870                           ;main.c: 322: _delay((unsigned long)((1000)*(10000000/4000.0)));
  3871  001B26  0E0D               	movlw	13
  3872  001B28  0100               	movlb	0	; () banked
  3873  001B2A  6FEC               	movwf	(??_sortBattery+1)& (0+255),b
  3874  001B2C  0EAF               	movlw	175
  3875  001B2E  0100               	movlb	0	; () banked
  3876  001B30  6FEB               	movwf	??_sortBattery& (0+255),b
  3877  001B32  0EB6               	movlw	182
  3878  001B34                     u8557:
  3879  001B34  2EE8               	decfsz	wreg,f,c
  3880  001B36  D7FE               	bra	u8557
  3881  001B38  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  3882  001B3A  D7FC               	bra	u8557
  3883  001B3C  2FEC               	decfsz	(??_sortBattery+1)& (0+255),f,b
  3884  001B3E  D7FA               	bra	u8557
  3885  001B40  F000               	nop	
  3886                           
  3887                           ;main.c: 326: setAngle(padServo, padAngle_NEUTRAL);
  3888  001B42  0E5D               	movlw	low _padServo
  3889  001B44  0100               	movlb	0	; () banked
  3890  001B46  6FD0               	movwf	setAngle@motor& (0+255),b
  3891  001B48  0EFE               	movlw	high _padServo
  3892  001B4A  0100               	movlb	0	; () banked
  3893  001B4C  6FD1               	movwf	(setAngle@motor+1)& (0+255),b
  3894  001B4E  0E45               	movlw	low _padAngle_NEUTRAL
  3895  001B50  6EF6               	movwf	tblptrl,c
  3896  001B52                     	if	1	;There is more than 1 active tblptr byte
  3897  001B52  0EFE               	movlw	high _padAngle_NEUTRAL
  3898  001B54  6EF7               	movwf	tblptrh,c
  3899  001B56                     	endif
  3900  001B56                     	if	0	;There are less than 3 active tblptr bytes
  3901  001B56                     	endif
  3902  001B56  0009               	tblrd		*+
  3903  001B58  CFF5 F0D2          	movff	tablat,setAngle@angle
  3904  001B5C  000A               	tblrd		*-
  3905  001B5E  CFF5 F0D3          	movff	tablat,setAngle@angle+1
  3906  001B62  EC86  F01B         	call	_setAngle	;wreg free
  3907                           
  3908                           ;main.c: 330: setAngle(conveyorServo, 130);
  3909  001B66  0E51               	movlw	low _conveyorServo
  3910  001B68  0100               	movlb	0	; () banked
  3911  001B6A  6FD0               	movwf	setAngle@motor& (0+255),b
  3912  001B6C  0EFE               	movlw	high _conveyorServo
  3913  001B6E  0100               	movlb	0	; () banked
  3914  001B70  6FD1               	movwf	(setAngle@motor+1)& (0+255),b
  3915  001B72  0E00               	movlw	0
  3916  001B74  0100               	movlb	0	; () banked
  3917  001B76  6FD3               	movwf	(setAngle@angle+1)& (0+255),b
  3918  001B78  0E82               	movlw	130
  3919  001B7A  6FD2               	movwf	setAngle@angle& (0+255),b
  3920  001B7C  EC86  F01B         	call	_setAngle	;wreg free
  3921                           
  3922                           ;main.c: 331: digitalWrite(cylinderMotor2, 0);
  3923  001B80  0E59               	movlw	low _cylinderMotor2
  3924  001B82  6E25               	movwf	digitalWrite@pin,c
  3925  001B84  0EFE               	movlw	high _cylinderMotor2
  3926  001B86  6E26               	movwf	digitalWrite@pin+1,c
  3927  001B88  0E00               	movlw	0
  3928  001B8A  6E28               	movwf	digitalWrite@val+1,c
  3929  001B8C  0E00               	movlw	0
  3930  001B8E  6E27               	movwf	digitalWrite@val,c
  3931  001B90  ECA6  F018         	call	_digitalWrite	;wreg free
  3932                           
  3933                           ;main.c: 332: digitalWrite(cylinderMotor1, 1);
  3934  001B94  0E55               	movlw	low _cylinderMotor1
  3935  001B96  6E25               	movwf	digitalWrite@pin,c
  3936  001B98  0EFE               	movlw	high _cylinderMotor1
  3937  001B9A  6E26               	movwf	digitalWrite@pin+1,c
  3938  001B9C  0E00               	movlw	0
  3939  001B9E  6E28               	movwf	digitalWrite@val+1,c
  3940  001BA0  0E01               	movlw	1
  3941  001BA2  6E27               	movwf	digitalWrite@val,c
  3942  001BA4  ECA6  F018         	call	_digitalWrite	;wreg free
  3943  001BA8  0012               	return		;funcret
  3944  001BAA                     __end_of_sortBattery:
  3945                           	opt stack 0
  3946                           tblptru	equ	0xFF8
  3947                           tblptrh	equ	0xFF7
  3948                           tblptrl	equ	0xFF6
  3949                           tablat	equ	0xFF5
  3950                           intcon	equ	0xFF2
  3951                           postinc0	equ	0xFEE
  3952                           wreg	equ	0xFE8
  3953                           postdec1	equ	0xFE5
  3954                           fsr1l	equ	0xFE1
  3955                           status	equ	0xFD8
  3956                           
  3957 ;; *************** function _digitalWrite *****************
  3958 ;; Defined at:
  3959 ;;		line 53 in file "iopin.c"
  3960 ;; Parameters:    Size  Location     Type
  3961 ;;  pin             2   36[COMRAM] PTR int 
  3962 ;;		 -> AA_float(4), cylinderMotor2(4), padServo(4), conveyorServo(4), 
  3963 ;;		 -> cylinderMotor1(4), redirectingServo(4), 
  3964 ;;  val             2   38[COMRAM] int 
  3965 ;; Auto vars:     Size  Location     Type
  3966 ;;  p               2   45[COMRAM] int 
  3967 ;; Return value:  Size  Location     Type
  3968 ;;                  1    wreg      void 
  3969 ;; Registers used:
  3970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  3971 ;; Tracked objects:
  3972 ;;		On entry : 0/0
  3973 ;;		On exit  : 0/0
  3974 ;;		Unchanged: 0/0
  3975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3976 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3977 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3978 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3979 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3980 ;;Total ram usage:       11 bytes
  3981 ;; Hardware stack levels used:    1
  3982 ;; Hardware stack levels required when called:    3
  3983 ;; This function calls:
  3984 ;;		Nothing
  3985 ;; This function is called by:
  3986 ;;		_main
  3987 ;;		_sortBattery
  3988 ;; This function uses a non-reentrant model
  3989 ;;
  3990                           
  3991                           	psect	text2
  3992  00314C                     __ptext2:
  3993                           	opt stack 0
  3994  00314C                     _digitalWrite:
  3995                           	opt stack 26
  3996                           
  3997                           ;iopin.c: 54: if(pin){
  3998                           
  3999                           ;incstack = 0
  4000  00314C  5025               	movf	digitalWrite@pin,w,c
  4001  00314E  1026               	iorwf	digitalWrite@pin+1,w,c
  4002  003150  B4D8               	btfsc	status,2,c
  4003  003152  0012               	return	
  4004                           
  4005                           ;iopin.c: 55: int p = 1 << pin[1];
  4006  003154  0E02               	movlw	2
  4007  003156  2425               	addwf	digitalWrite@pin,w,c
  4008  003158  6E29               	movwf	??_digitalWrite& (0+255),c
  4009  00315A  0E00               	movlw	0
  4010  00315C  2026               	addwfc	digitalWrite@pin+1,w,c
  4011  00315E  6E2A               	movwf	(??_digitalWrite+1)& (0+255),c
  4012  003160  C029  FFF6         	movff	??_digitalWrite,tblptrl
  4013  003164  C02A  FFF7         	movff	??_digitalWrite+1,tblptrh
  4014  003168  0E00               	movlw	low (__mediumconst shr (0+16))
  4015  00316A  6EF8               	movwf	tblptru,c
  4016  00316C  0E0F               	movlw	(high __ramtop+-1)
  4017  00316E  64F7               	cpfsgt	tblptrh,c
  4018  003170  D003               	bra	u7777
  4019  003172  0008               	tblrd		*
  4020  003174  50F5               	movf	tablat,w,c
  4021  003176  D005               	bra	u7770
  4022  003178                     u7777:
  4023  003178  CFF6 FFD9          	movff	tblptrl,fsr2l
  4024  00317C  CFF7 FFDA          	movff	tblptrh,fsr2h
  4025  003180  50DF               	movf	indf2,w,c
  4026  003182                     u7770:
  4027  003182  6E2B               	movwf	(??_digitalWrite+2)& (0+255),c
  4028  003184  0E01               	movlw	1
  4029  003186  6E2C               	movwf	(??_digitalWrite+3)& (0+255),c
  4030  003188  0E00               	movlw	0
  4031  00318A  6E2D               	movwf	(??_digitalWrite+4)& (0+255),c
  4032  00318C  2A2B               	incf	??_digitalWrite+2,f,c
  4033  00318E  D003               	goto	u7784
  4034  003190                     u7785:
  4035  003190  90D8               	bcf	status,0,c
  4036  003192  362C               	rlcf	??_digitalWrite+3,f,c
  4037  003194  362D               	rlcf	??_digitalWrite+4,f,c
  4038  003196                     u7784:
  4039  003196  2E2B               	decfsz	??_digitalWrite+2,f,c
  4040  003198  D7FB               	goto	u7785
  4041  00319A  C02C  F02E         	movff	??_digitalWrite+3,digitalWrite@p
  4042  00319E  C02D  F02F         	movff	??_digitalWrite+4,digitalWrite@p+1
  4043                           
  4044                           ;iopin.c: 56: if(val == 0){
  4045  0031A2  5027               	movf	digitalWrite@val,w,c
  4046  0031A4  1028               	iorwf	digitalWrite@val+1,w,c
  4047  0031A6  A4D8               	btfss	status,2,c
  4048  0031A8  D02B               	goto	l7340
  4049                           
  4050                           ;iopin.c: 57: p ^= 0xff;
  4051  0031AA  0EFF               	movlw	255
  4052  0031AC  1A2E               	xorwf	digitalWrite@p,f,c
  4053                           
  4054                           ;iopin.c: 58: }
  4055                           ;iopin.c: 60: switch(pin[0]){
  4056  0031AE  D028               	goto	l7340
  4057  0031B0                     l7316:
  4058  0031B0  0427               	decf	digitalWrite@val,w,c
  4059  0031B2  1028               	iorwf	digitalWrite@val+1,w,c
  4060  0031B4  A4D8               	btfss	status,2,c
  4061  0031B6  D003               	goto	l7320
  4062  0031B8  502E               	movf	digitalWrite@p,w,c
  4063  0031BA  1289               	iorwf	3977,f,c	;volatile
  4064  0031BC  0012               	return	
  4065  0031BE                     l7320:
  4066                           
  4067                           ;iopin.c: 62: else LATA &= p;
  4068  0031BE  502E               	movf	digitalWrite@p,w,c
  4069  0031C0  1689               	andwf	3977,f,c	;volatile
  4070                           
  4071                           ;iopin.c: 63: break;
  4072  0031C2  0012               	return	
  4073  0031C4                     l7322:
  4074  0031C4  0427               	decf	digitalWrite@val,w,c
  4075  0031C6  1028               	iorwf	digitalWrite@val+1,w,c
  4076  0031C8  A4D8               	btfss	status,2,c
  4077  0031CA  D003               	goto	l7326
  4078  0031CC  502E               	movf	digitalWrite@p,w,c
  4079  0031CE  128A               	iorwf	3978,f,c	;volatile
  4080  0031D0  0012               	return	
  4081  0031D2                     l7326:
  4082                           
  4083                           ;iopin.c: 65: else LATB &= p;
  4084  0031D2  502E               	movf	digitalWrite@p,w,c
  4085  0031D4  168A               	andwf	3978,f,c	;volatile
  4086                           
  4087                           ;iopin.c: 66: break;
  4088  0031D6  0012               	return	
  4089  0031D8                     l7328:
  4090  0031D8  0427               	decf	digitalWrite@val,w,c
  4091  0031DA  1028               	iorwf	digitalWrite@val+1,w,c
  4092  0031DC  A4D8               	btfss	status,2,c
  4093  0031DE  D003               	goto	l7332
  4094  0031E0  502E               	movf	digitalWrite@p,w,c
  4095  0031E2  128B               	iorwf	3979,f,c	;volatile
  4096  0031E4  0012               	return	
  4097  0031E6                     l7332:
  4098                           
  4099                           ;iopin.c: 68: else LATC &= p;
  4100  0031E6  502E               	movf	digitalWrite@p,w,c
  4101  0031E8  168B               	andwf	3979,f,c	;volatile
  4102                           
  4103                           ;iopin.c: 69: break;
  4104  0031EA  0012               	return	
  4105  0031EC                     l7334:
  4106  0031EC  0427               	decf	digitalWrite@val,w,c
  4107  0031EE  1028               	iorwf	digitalWrite@val+1,w,c
  4108  0031F0  A4D8               	btfss	status,2,c
  4109  0031F2  D003               	goto	l7338
  4110  0031F4  502E               	movf	digitalWrite@p,w,c
  4111  0031F6  128C               	iorwf	3980,f,c	;volatile
  4112  0031F8  0012               	return	
  4113  0031FA                     l7338:
  4114                           
  4115                           ;iopin.c: 71: else LATD &= p;
  4116  0031FA  502E               	movf	digitalWrite@p,w,c
  4117  0031FC  168C               	andwf	3980,f,c	;volatile
  4118                           
  4119                           ;iopin.c: 72: }
  4120  0031FE  0012               	return	
  4121  003200                     l7340:
  4122  003200  C025  FFF6         	movff	digitalWrite@pin,tblptrl
  4123  003204  C026  FFF7         	movff	digitalWrite@pin+1,tblptrh
  4124  003208  0E00               	movlw	low (__mediumconst shr (0+16))
  4125  00320A  6EF8               	movwf	tblptru,c
  4126  00320C  0E0F               	movlw	(high __ramtop+-1)
  4127  00320E  64F7               	cpfsgt	tblptrh,c
  4128  003210  D007               	bra	u7847
  4129  003212  0009               	tblrd		*+
  4130  003214  CFF5 F029          	movff	tablat,??_digitalWrite
  4131  003218  0009               	tblrd		*+
  4132  00321A  CFF5 F02A          	movff	tablat,??_digitalWrite+1
  4133  00321E  D008               	bra	u7840
  4134  003220                     u7847:
  4135  003220  CFF6 FFD9          	movff	tblptrl,fsr2l
  4136  003224  CFF7 FFDA          	movff	tblptrh,fsr2h
  4137  003228  CFDE F029          	movff	postinc2,??_digitalWrite
  4138  00322C  CFDE F02A          	movff	postinc2,??_digitalWrite+1
  4139  003230                     u7840:
  4140                           
  4141                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4142                           ; Switch size 1, requested type "space"
  4143                           ; Number of cases is 1, Range of values is 0 to 0
  4144                           ; switch strategies available:
  4145                           ; Name         Instructions Cycles
  4146                           ; simple_byte            4     3 (average)
  4147                           ;	Chosen strategy is simple_byte
  4148  003230  502A               	movf	??_digitalWrite+1,w,c
  4149  003232  0A00               	xorlw	0	; case 0
  4150  003234  A4D8               	btfss	status,2,c
  4151  003236  0012               	return	
  4152                           
  4153                           ; Switch size 1, requested type "space"
  4154                           ; Number of cases is 4, Range of values is 0 to 3
  4155                           ; switch strategies available:
  4156                           ; Name         Instructions Cycles
  4157                           ; simple_byte           13     7 (average)
  4158                           ;	Chosen strategy is simple_byte
  4159  003238  5029               	movf	??_digitalWrite,w,c
  4160  00323A  0A00               	xorlw	0	; case 0
  4161  00323C  B4D8               	btfsc	status,2,c
  4162  00323E  D7B8               	goto	l7316
  4163  003240  0A01               	xorlw	1	; case 1
  4164  003242  B4D8               	btfsc	status,2,c
  4165  003244  D7BF               	goto	l7322
  4166  003246  0A03               	xorlw	3	; case 2
  4167  003248  B4D8               	btfsc	status,2,c
  4168  00324A  D7C6               	goto	l7328
  4169  00324C  0A01               	xorlw	1	; case 3
  4170  00324E  A4D8               	btfss	status,2,c
  4171  003250  0012               	return	
  4172  003252  D7CC               	goto	l7334
  4173  003254                     __end_of_digitalWrite:
  4174                           	opt stack 0
  4175                           tblptru	equ	0xFF8
  4176                           tblptrh	equ	0xFF7
  4177                           tblptrl	equ	0xFF6
  4178                           tablat	equ	0xFF5
  4179                           intcon	equ	0xFF2
  4180                           postinc0	equ	0xFEE
  4181                           wreg	equ	0xFE8
  4182                           postdec1	equ	0xFE5
  4183                           fsr1l	equ	0xFE1
  4184                           indf2	equ	0xFDF
  4185                           postinc2	equ	0xFDE
  4186                           fsr2h	equ	0xFDA
  4187                           fsr2l	equ	0xFD9
  4188                           status	equ	0xFD8
  4189                           
  4190 ;; *************** function _digitalRead *****************
  4191 ;; Defined at:
  4192 ;;		line 43 in file "iopin.c"
  4193 ;; Parameters:    Size  Location     Type
  4194 ;;  pin             2   36[COMRAM] PTR int 
  4195 ;;		 -> padPin2(4), padPin1(4), cylinderMotor1(4), 
  4196 ;; Auto vars:     Size  Location     Type
  4197 ;;		None
  4198 ;; Return value:  Size  Location     Type
  4199 ;;                  2   36[COMRAM] int 
  4200 ;; Registers used:
  4201 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4202 ;; Tracked objects:
  4203 ;;		On entry : 0/0
  4204 ;;		On exit  : 0/0
  4205 ;;		Unchanged: 0/0
  4206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4207 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4209 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4210 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4211 ;;Total ram usage:        6 bytes
  4212 ;; Hardware stack levels used:    1
  4213 ;; Hardware stack levels required when called:    3
  4214 ;; This function calls:
  4215 ;;		Nothing
  4216 ;; This function is called by:
  4217 ;;		_main
  4218 ;;		_sortBattery
  4219 ;; This function uses a non-reentrant model
  4220 ;;
  4221                           
  4222                           	psect	text3
  4223  002488                     __ptext3:
  4224                           	opt stack 0
  4225  002488                     _digitalRead:
  4226                           	opt stack 26
  4227                           
  4228                           ;iopin.c: 44: switch(pin[0]){
  4229                           
  4230                           ;incstack = 0
  4231  002488  D098               	goto	l7366
  4232  00248A                     l7348:
  4233  00248A  0E02               	movlw	2
  4234  00248C  2425               	addwf	digitalRead@pin,w,c
  4235  00248E  6E27               	movwf	??_digitalRead& (0+255),c
  4236  002490  0E00               	movlw	0
  4237  002492  2026               	addwfc	digitalRead@pin+1,w,c
  4238  002494  6E28               	movwf	(??_digitalRead+1)& (0+255),c
  4239  002496  C027  FFF6         	movff	??_digitalRead,tblptrl
  4240  00249A  C028  FFF7         	movff	??_digitalRead+1,tblptrh
  4241  00249E  0E00               	movlw	low (__mediumconst shr (0+16))
  4242  0024A0  6EF8               	movwf	tblptru,c
  4243  0024A2  0E0F               	movlw	(high __ramtop+-1)
  4244  0024A4  64F7               	cpfsgt	tblptrh,c
  4245  0024A6  D003               	bra	u7857
  4246  0024A8  0008               	tblrd		*
  4247  0024AA  50F5               	movf	tablat,w,c
  4248  0024AC  D005               	bra	u7850
  4249  0024AE                     u7857:
  4250  0024AE  CFF6 FFD9          	movff	tblptrl,fsr2l
  4251  0024B2  CFF7 FFDA          	movff	tblptrh,fsr2h
  4252  0024B6  50DF               	movf	indf2,w,c
  4253  0024B8                     u7850:
  4254  0024B8  6E29               	movwf	(??_digitalRead+2)& (0+255),c
  4255  0024BA  CF80 F02A          	movff	3968,??_digitalRead+3	;volatile
  4256  0024BE  2A29               	incf	??_digitalRead+2,f,c
  4257  0024C0  D002               	goto	u7864
  4258  0024C2                     u7865:
  4259  0024C2  90D8               	bcf	status,0,c
  4260  0024C4  322A               	rrcf	??_digitalRead+3,f,c
  4261  0024C6                     u7864:
  4262  0024C6  2E29               	decfsz	??_digitalRead+2,f,c
  4263  0024C8  D7FC               	goto	u7865
  4264  0024CA  0E01               	movlw	1
  4265  0024CC  162A               	andwf	??_digitalRead+3,f,c
  4266  0024CE  502A               	movf	??_digitalRead+3,w,c
  4267  0024D0  6E25               	movwf	?_digitalRead,c
  4268  0024D2  6A26               	clrf	?_digitalRead+1,c
  4269  0024D4  0012               	return	
  4270  0024D6                     l7352:
  4271  0024D6  0E02               	movlw	2
  4272  0024D8  2425               	addwf	digitalRead@pin,w,c
  4273  0024DA  6E27               	movwf	??_digitalRead& (0+255),c
  4274  0024DC  0E00               	movlw	0
  4275  0024DE  2026               	addwfc	digitalRead@pin+1,w,c
  4276  0024E0  6E28               	movwf	(??_digitalRead+1)& (0+255),c
  4277  0024E2  C027  FFF6         	movff	??_digitalRead,tblptrl
  4278  0024E6  C028  FFF7         	movff	??_digitalRead+1,tblptrh
  4279  0024EA  0E00               	movlw	low (__mediumconst shr (0+16))
  4280  0024EC  6EF8               	movwf	tblptru,c
  4281  0024EE  0E0F               	movlw	(high __ramtop+-1)
  4282  0024F0  64F7               	cpfsgt	tblptrh,c
  4283  0024F2  D003               	bra	u7877
  4284  0024F4  0008               	tblrd		*
  4285  0024F6  50F5               	movf	tablat,w,c
  4286  0024F8  D005               	bra	u7870
  4287  0024FA                     u7877:
  4288  0024FA  CFF6 FFD9          	movff	tblptrl,fsr2l
  4289  0024FE  CFF7 FFDA          	movff	tblptrh,fsr2h
  4290  002502  50DF               	movf	indf2,w,c
  4291  002504                     u7870:
  4292  002504  6E29               	movwf	(??_digitalRead+2)& (0+255),c
  4293  002506  CF81 F02A          	movff	3969,??_digitalRead+3	;volatile
  4294  00250A  2A29               	incf	??_digitalRead+2,f,c
  4295  00250C  D002               	goto	u7884
  4296  00250E                     u7885:
  4297  00250E  90D8               	bcf	status,0,c
  4298  002510  322A               	rrcf	??_digitalRead+3,f,c
  4299  002512                     u7884:
  4300  002512  2E29               	decfsz	??_digitalRead+2,f,c
  4301  002514  D7FC               	goto	u7885
  4302  002516  0E01               	movlw	1
  4303  002518  162A               	andwf	??_digitalRead+3,f,c
  4304  00251A  502A               	movf	??_digitalRead+3,w,c
  4305  00251C  6E25               	movwf	?_digitalRead,c
  4306  00251E  6A26               	clrf	?_digitalRead+1,c
  4307  002520  0012               	return	
  4308  002522                     l7356:
  4309  002522  0E02               	movlw	2
  4310  002524  2425               	addwf	digitalRead@pin,w,c
  4311  002526  6E27               	movwf	??_digitalRead& (0+255),c
  4312  002528  0E00               	movlw	0
  4313  00252A  2026               	addwfc	digitalRead@pin+1,w,c
  4314  00252C  6E28               	movwf	(??_digitalRead+1)& (0+255),c
  4315  00252E  C027  FFF6         	movff	??_digitalRead,tblptrl
  4316  002532  C028  FFF7         	movff	??_digitalRead+1,tblptrh
  4317  002536  0E00               	movlw	low (__mediumconst shr (0+16))
  4318  002538  6EF8               	movwf	tblptru,c
  4319  00253A  0E0F               	movlw	(high __ramtop+-1)
  4320  00253C  64F7               	cpfsgt	tblptrh,c
  4321  00253E  D003               	bra	u7897
  4322  002540  0008               	tblrd		*
  4323  002542  50F5               	movf	tablat,w,c
  4324  002544  D005               	bra	u7890
  4325  002546                     u7897:
  4326  002546  CFF6 FFD9          	movff	tblptrl,fsr2l
  4327  00254A  CFF7 FFDA          	movff	tblptrh,fsr2h
  4328  00254E  50DF               	movf	indf2,w,c
  4329  002550                     u7890:
  4330  002550  6E29               	movwf	(??_digitalRead+2)& (0+255),c
  4331  002552  CF82 F02A          	movff	3970,??_digitalRead+3	;volatile
  4332  002556  2A29               	incf	??_digitalRead+2,f,c
  4333  002558  D002               	goto	u7904
  4334  00255A                     u7905:
  4335  00255A  90D8               	bcf	status,0,c
  4336  00255C  322A               	rrcf	??_digitalRead+3,f,c
  4337  00255E                     u7904:
  4338  00255E  2E29               	decfsz	??_digitalRead+2,f,c
  4339  002560  D7FC               	goto	u7905
  4340  002562  0E01               	movlw	1
  4341  002564  162A               	andwf	??_digitalRead+3,f,c
  4342  002566  502A               	movf	??_digitalRead+3,w,c
  4343  002568  6E25               	movwf	?_digitalRead,c
  4344  00256A  6A26               	clrf	?_digitalRead+1,c
  4345  00256C  0012               	return	
  4346  00256E                     l7360:
  4347  00256E  0E02               	movlw	2
  4348  002570  2425               	addwf	digitalRead@pin,w,c
  4349  002572  6E27               	movwf	??_digitalRead& (0+255),c
  4350  002574  0E00               	movlw	0
  4351  002576  2026               	addwfc	digitalRead@pin+1,w,c
  4352  002578  6E28               	movwf	(??_digitalRead+1)& (0+255),c
  4353  00257A  C027  FFF6         	movff	??_digitalRead,tblptrl
  4354  00257E  C028  FFF7         	movff	??_digitalRead+1,tblptrh
  4355  002582  0E00               	movlw	low (__mediumconst shr (0+16))
  4356  002584  6EF8               	movwf	tblptru,c
  4357  002586  0E0F               	movlw	(high __ramtop+-1)
  4358  002588  64F7               	cpfsgt	tblptrh,c
  4359  00258A  D003               	bra	u7917
  4360  00258C  0008               	tblrd		*
  4361  00258E  50F5               	movf	tablat,w,c
  4362  002590  D005               	bra	u7910
  4363  002592                     u7917:
  4364  002592  CFF6 FFD9          	movff	tblptrl,fsr2l
  4365  002596  CFF7 FFDA          	movff	tblptrh,fsr2h
  4366  00259A  50DF               	movf	indf2,w,c
  4367  00259C                     u7910:
  4368  00259C  6E29               	movwf	(??_digitalRead+2)& (0+255),c
  4369  00259E  CF83 F02A          	movff	3971,??_digitalRead+3	;volatile
  4370  0025A2  2A29               	incf	??_digitalRead+2,f,c
  4371  0025A4  D002               	goto	u7924
  4372  0025A6                     u7925:
  4373  0025A6  90D8               	bcf	status,0,c
  4374  0025A8  322A               	rrcf	??_digitalRead+3,f,c
  4375  0025AA                     u7924:
  4376  0025AA  2E29               	decfsz	??_digitalRead+2,f,c
  4377  0025AC  D7FC               	goto	u7925
  4378  0025AE  0E01               	movlw	1
  4379  0025B0  162A               	andwf	??_digitalRead+3,f,c
  4380  0025B2  502A               	movf	??_digitalRead+3,w,c
  4381  0025B4  6E25               	movwf	?_digitalRead,c
  4382  0025B6  6A26               	clrf	?_digitalRead+1,c
  4383  0025B8  0012               	return	
  4384  0025BA                     l7366:
  4385  0025BA  C025  FFF6         	movff	digitalRead@pin,tblptrl
  4386  0025BE  C026  FFF7         	movff	digitalRead@pin+1,tblptrh
  4387  0025C2  0E00               	movlw	low (__mediumconst shr (0+16))
  4388  0025C4  6EF8               	movwf	tblptru,c
  4389  0025C6  0E0F               	movlw	(high __ramtop+-1)
  4390  0025C8  64F7               	cpfsgt	tblptrh,c
  4391  0025CA  D007               	bra	u7937
  4392  0025CC  0009               	tblrd		*+
  4393  0025CE  CFF5 F027          	movff	tablat,??_digitalRead
  4394  0025D2  0009               	tblrd		*+
  4395  0025D4  CFF5 F028          	movff	tablat,??_digitalRead+1
  4396  0025D8  D008               	bra	u7930
  4397  0025DA                     u7937:
  4398  0025DA  CFF6 FFD9          	movff	tblptrl,fsr2l
  4399  0025DE  CFF7 FFDA          	movff	tblptrh,fsr2h
  4400  0025E2  CFDE F027          	movff	postinc2,??_digitalRead
  4401  0025E6  CFDE F028          	movff	postinc2,??_digitalRead+1
  4402  0025EA                     u7930:
  4403                           
  4404                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4405                           ; Switch size 1, requested type "space"
  4406                           ; Number of cases is 1, Range of values is 0 to 0
  4407                           ; switch strategies available:
  4408                           ; Name         Instructions Cycles
  4409                           ; simple_byte            4     3 (average)
  4410                           ;	Chosen strategy is simple_byte
  4411  0025EA  5028               	movf	??_digitalRead+1,w,c
  4412  0025EC  0A00               	xorlw	0	; case 0
  4413  0025EE  A4D8               	btfss	status,2,c
  4414  0025F0  D00D               	goto	l341
  4415                           
  4416                           ; Switch size 1, requested type "space"
  4417                           ; Number of cases is 4, Range of values is 0 to 3
  4418                           ; switch strategies available:
  4419                           ; Name         Instructions Cycles
  4420                           ; simple_byte           13     7 (average)
  4421                           ;	Chosen strategy is simple_byte
  4422  0025F2  5027               	movf	??_digitalRead,w,c
  4423  0025F4  0A00               	xorlw	0	; case 0
  4424  0025F6  B4D8               	btfsc	status,2,c
  4425  0025F8  D748               	goto	l7348
  4426  0025FA  0A01               	xorlw	1	; case 1
  4427  0025FC  B4D8               	btfsc	status,2,c
  4428  0025FE  D76B               	goto	l7352
  4429  002600  0A03               	xorlw	3	; case 2
  4430  002602  B4D8               	btfsc	status,2,c
  4431  002604  D78E               	goto	l7356
  4432  002606  0A01               	xorlw	1	; case 3
  4433  002608  B4D8               	btfsc	status,2,c
  4434  00260A  D7B1               	goto	l7360
  4435  00260C                     l341:
  4436                           
  4437                           ;iopin.c: 50: return -1;
  4438  00260C  6825               	setf	?_digitalRead,c
  4439  00260E  6826               	setf	?_digitalRead+1,c
  4440  002610  0012               	return		;funcret
  4441  002612                     __end_of_digitalRead:
  4442                           	opt stack 0
  4443                           tblptru	equ	0xFF8
  4444                           tblptrh	equ	0xFF7
  4445                           tblptrl	equ	0xFF6
  4446                           tablat	equ	0xFF5
  4447                           intcon	equ	0xFF2
  4448                           postinc0	equ	0xFEE
  4449                           wreg	equ	0xFE8
  4450                           postdec1	equ	0xFE5
  4451                           fsr1l	equ	0xFE1
  4452                           indf2	equ	0xFDF
  4453                           postinc2	equ	0xFDE
  4454                           fsr2h	equ	0xFDA
  4455                           fsr2l	equ	0xFD9
  4456                           status	equ	0xFD8
  4457                           
  4458 ;; *************** function _analogRead *****************
  4459 ;; Defined at:
  4460 ;;		line 90 in file "iopin.c"
  4461 ;; Parameters:    Size  Location     Type
  4462 ;;  channel         2   36[COMRAM] int 
  4463 ;; Auto vars:     Size  Location     Type
  4464 ;;		None
  4465 ;; Return value:  Size  Location     Type
  4466 ;;                  4   36[COMRAM] long 
  4467 ;; Registers used:
  4468 ;;		wreg, status,2, status,0
  4469 ;; Tracked objects:
  4470 ;;		On entry : 0/0
  4471 ;;		On exit  : 0/0
  4472 ;;		Unchanged: 0/0
  4473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4474 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4476 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4477 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4478 ;;Total ram usage:        6 bytes
  4479 ;; Hardware stack levels used:    1
  4480 ;; Hardware stack levels required when called:    3
  4481 ;; This function calls:
  4482 ;;		Nothing
  4483 ;; This function is called by:
  4484 ;;		_sortBattery
  4485 ;; This function uses a non-reentrant model
  4486 ;;
  4487                           
  4488                           	psect	text4
  4489  0043E2                     __ptext4:
  4490                           	opt stack 0
  4491  0043E2                     _analogRead:
  4492                           	opt stack 26
  4493                           
  4494                           ;iopin.c: 91: ADCON0 = channel<<2;
  4495                           
  4496                           ;incstack = 0
  4497  0043E2  4425               	rlncf	analogRead@channel,w,c
  4498  0043E4  46E8               	rlncf	wreg,f,c
  4499  0043E6  0BFC               	andlw	252
  4500  0043E8  6EC2               	movwf	4034,c	;volatile
  4501                           
  4502                           ;iopin.c: 92: ADCON0 |= 1<<0;
  4503  0043EA  80C2               	bsf	4034,0,c	;volatile
  4504                           
  4505                           ;iopin.c: 93: ADCON0 |= 1<<1;
  4506  0043EC  82C2               	bsf	4034,1,c	;volatile
  4507  0043EE                     l366:
  4508  0043EE  B2C2               	btfsc	4034,1,c	;volatile
  4509  0043F0  D7FE               	goto	l366
  4510                           
  4511                           ;iopin.c: 97: return (ADRESH<<8) + ADRESL;
  4512  0043F2  50C3               	movf	4035,w,c	;volatile
  4513  0043F4  CFC4 F029          	movff	4036,??_analogRead	;volatile
  4514  0043F8  6A2A               	clrf	(??_analogRead+1)& (0+255),c
  4515  0043FA  C029  F02A         	movff	??_analogRead,??_analogRead+1
  4516  0043FE  6A29               	clrf	??_analogRead,c
  4517  004400  2629               	addwf	??_analogRead,f,c
  4518  004402  0E00               	movlw	0
  4519  004404  222A               	addwfc	??_analogRead+1,f,c
  4520  004406  C029  F025         	movff	??_analogRead,?_analogRead
  4521  00440A  C02A  F026         	movff	??_analogRead+1,?_analogRead+1
  4522  00440E  0E00               	movlw	0
  4523  004410  BE26               	btfsc	?_analogRead+1,7,c
  4524  004412  0EFF               	movlw	-1
  4525  004414  6E27               	movwf	?_analogRead+2,c
  4526  004416  6E28               	movwf	?_analogRead+3,c
  4527  004418  0012               	return	
  4528  00441A                     __end_of_analogRead:
  4529                           	opt stack 0
  4530                           tblptru	equ	0xFF8
  4531                           tblptrh	equ	0xFF7
  4532                           tblptrl	equ	0xFF6
  4533                           tablat	equ	0xFF5
  4534                           intcon	equ	0xFF2
  4535                           postinc0	equ	0xFEE
  4536                           wreg	equ	0xFE8
  4537                           postdec1	equ	0xFE5
  4538                           fsr1l	equ	0xFE1
  4539                           indf2	equ	0xFDF
  4540                           postinc2	equ	0xFDE
  4541                           fsr2h	equ	0xFDA
  4542                           fsr2l	equ	0xFD9
  4543                           status	equ	0xFD8
  4544                           
  4545 ;; *************** function _showInterface *****************
  4546 ;; Defined at:
  4547 ;;		line 18 in file "interface.c"
  4548 ;; Parameters:    Size  Location     Type
  4549 ;;		None
  4550 ;; Auto vars:     Size  Location     Type
  4551 ;;  run             2   18[BANK1 ] PTR int 
  4552 ;;		 -> readPastRun@data(14), 
  4553 ;;  n               2   16[BANK1 ] int 
  4554 ;;  key             1   20[BANK1 ] unsigned char 
  4555 ;; Return value:  Size  Location     Type
  4556 ;;                  1    wreg      void 
  4557 ;; Registers used:
  4558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4559 ;; Tracked objects:
  4560 ;;		On entry : 0/0
  4561 ;;		On exit  : 0/0
  4562 ;;		Unchanged: 0/0
  4563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4565 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4566 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4567 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4568 ;;Total ram usage:        7 bytes
  4569 ;; Hardware stack levels used:    1
  4570 ;; Hardware stack levels required when called:    9
  4571 ;; This function calls:
  4572 ;;		_initRTC
  4573 ;;		_readPastRun
  4574 ;;		_showDateTime
  4575 ;;		_showErrorMessage
  4576 ;;		_showMainMenu
  4577 ;;		_showRunMenu
  4578 ;;		_showRunSelect
  4579 ;;		_showRunStats
  4580 ;;		_showRunTime
  4581 ;; This function is called by:
  4582 ;;		_main
  4583 ;; This function uses a non-reentrant model
  4584 ;;
  4585                           
  4586                           	psect	text5
  4587  0037E0                     __ptext5:
  4588                           	opt stack 0
  4589  0037E0                     _showInterface:
  4590                           	opt stack 21
  4591                           
  4592                           ;interface.c: 20: initRTC();
  4593                           
  4594                           ;incstack = 0
  4595  0037E0  ECDC  F022         	call	_initRTC	;wreg free
  4596  0037E4                     l7576:
  4597                           
  4598                           ;interface.c: 23: showDateTime();
  4599  0037E4  EC98  F017         	call	_showDateTime	;wreg free
  4600  0037E8                     l7578:
  4601                           
  4602                           ;interface.c: 26: key = showMainMenu();
  4603  0037E8  ECC7  F020         	call	_showMainMenu	;wreg free
  4604  0037EC  0101               	movlb	1	; () banked
  4605  0037EE  6F14               	movwf	showInterface@key& (0+255),b
  4606                           
  4607                           ; BSR set to: 1
  4608                           ;interface.c: 28: if(key == 'C'){
  4609  0037F0  0E43               	movlw	67
  4610  0037F2  0101               	movlb	1	; () banked
  4611  0037F4  1914               	xorwf	showInterface@key& (0+255),w,b
  4612  0037F6  A4D8               	btfss	status,2,c
  4613  0037F8  D04F               	goto	l7608
  4614                           
  4615                           ; BSR set to: 1
  4616                           ;interface.c: 30: int n = showRunSelect();
  4617  0037FA  EC0C  F020         	call	_showRunSelect	;wreg free
  4618  0037FE  0101               	movlb	1	; () banked
  4619  003800  6F0E               	movwf	??_showInterface& (0+255),b
  4620  003802  0101               	movlb	1	; () banked
  4621  003804  510E               	movf	??_showInterface& (0+255),w,b
  4622  003806  0101               	movlb	1	; () banked
  4623  003808  6F10               	movwf	showInterface@n& (0+255),b
  4624  00380A  6B11               	clrf	(showInterface@n+1)& (0+255),b
  4625                           
  4626                           ; BSR set to: 1
  4627                           ;interface.c: 32: if(n == '*')continue;
  4628  00380C  0E2A               	movlw	42
  4629  00380E  0101               	movlb	1	; () banked
  4630  003810  1910               	xorwf	showInterface@n& (0+255),w,b
  4631  003812  0101               	movlb	1	; () banked
  4632  003814  1111               	iorwf	(showInterface@n+1)& (0+255),w,b
  4633  003816  B4D8               	btfsc	status,2,c
  4634  003818  D7E7               	goto	l7578
  4635                           
  4636                           ; BSR set to: 1
  4637                           ;interface.c: 34: int* run = readPastRun( n - '1');
  4638                           
  4639                           ; BSR set to: 1
  4640                           
  4641                           ; BSR set to: 1
  4642  00381A  0ECF               	movlw	207
  4643  00381C  0101               	movlb	1	; () banked
  4644  00381E  2510               	addwf	showInterface@n& (0+255),w,b
  4645  003820  0100               	movlb	0	; () banked
  4646  003822  6F84               	movwf	readPastRun@run& (0+255),b
  4647  003824  0EFF               	movlw	255
  4648  003826  0101               	movlb	1	; () banked
  4649  003828  2111               	addwfc	(showInterface@n+1)& (0+255),w,b
  4650  00382A  0100               	movlb	0	; () banked
  4651  00382C  6F85               	movwf	(readPastRun@run+1)& (0+255),b
  4652  00382E  EC58  F01D         	call	_readPastRun	;wreg free
  4653  003832  C084  F112         	movff	?_readPastRun,showInterface@run
  4654  003836  C085  F113         	movff	?_readPastRun+1,showInterface@run+1
  4655                           
  4656                           ;interface.c: 35: if(run[0] == 0xff){
  4657  00383A  C112  FFD9         	movff	showInterface@run,fsr2l
  4658  00383E  C113  FFDA         	movff	showInterface@run+1,fsr2h
  4659  003842  28DE               	incf	postinc2,w,c
  4660  003844  10DE               	iorwf	postinc2,w,c
  4661  003846  A4D8               	btfss	status,2,c
  4662  003848  D003               	goto	l7594
  4663                           
  4664                           ;interface.c: 36: showErrorMessage();
  4665  00384A  EC29  F022         	call	_showErrorMessage	;wreg free
  4666                           
  4667                           ;interface.c: 37: continue;
  4668  00384E  D7CC               	goto	l7578
  4669  003850                     l7594:
  4670                           
  4671                           ;interface.c: 41: key = showRunMenu(n);
  4672  003850  0101               	movlb	1	; () banked
  4673  003852  5110               	movf	showInterface@n& (0+255),w,b
  4674  003854  EC3E  F020         	call	_showRunMenu
  4675  003858  0101               	movlb	1	; () banked
  4676  00385A  6F14               	movwf	showInterface@key& (0+255),b
  4677                           
  4678                           ; BSR set to: 1
  4679                           ;interface.c: 43: if(key == 'A') showRunTime(run);
  4680  00385C  0E41               	movlw	65
  4681  00385E  0101               	movlb	1	; () banked
  4682  003860  1914               	xorwf	showInterface@key& (0+255),w,b
  4683  003862  A4D8               	btfss	status,2,c
  4684  003864  D007               	goto	l7600
  4685                           
  4686                           ; BSR set to: 1
  4687  003866  C112  F0EB         	movff	showInterface@run,showRunTime@run
  4688  00386A  C113  F0EC         	movff	showInterface@run+1,showRunTime@run+1
  4689  00386E  EC09  F013         	call	_showRunTime	;wreg free
  4690  003872  D7EE               	goto	l7594
  4691  003874                     l7600:
  4692                           
  4693                           ;interface.c: 44: else if(key == 'B') showRunStats(run);
  4694  003874  0E42               	movlw	66
  4695  003876  0101               	movlb	1	; () banked
  4696  003878  1914               	xorwf	showInterface@key& (0+255),w,b
  4697  00387A  A4D8               	btfss	status,2,c
  4698  00387C  D007               	goto	l7604
  4699                           
  4700                           ; BSR set to: 1
  4701  00387E  C112  F0EB         	movff	showInterface@run,showRunStats@run
  4702  003882  C113  F0EC         	movff	showInterface@run+1,showRunStats@run+1
  4703  003886  EC04  F01D         	call	_showRunStats	;wreg free
  4704  00388A  D7E2               	goto	l7594
  4705  00388C                     l7604:
  4706                           
  4707                           ;interface.c: 45: else if(key == '*') break;
  4708  00388C  0E2A               	movlw	42
  4709  00388E  0101               	movlb	1	; () banked
  4710  003890  1914               	xorwf	showInterface@key& (0+255),w,b
  4711  003892  B4D8               	btfsc	status,2,c
  4712  003894  D7A9               	goto	l7578
  4713  003896  D7DC               	goto	l7594
  4714  003898                     l7608:
  4715                           
  4716                           ; BSR set to: 1
  4717                           ;interface.c: 49: else if(key == 'B') return;
  4718  003898  0E42               	movlw	66
  4719  00389A  0101               	movlb	1	; () banked
  4720  00389C  1914               	xorwf	showInterface@key& (0+255),w,b
  4721  00389E  B4D8               	btfsc	status,2,c
  4722  0038A0  0012               	return	
  4723                           
  4724                           ; BSR set to: 1
  4725                           ;interface.c: 50: else if(key == '*') break;
  4726                           
  4727                           ; BSR set to: 1
  4728                           
  4729                           ; BSR set to: 1
  4730                           
  4731                           ; BSR set to: 1
  4732  0038A2  0E2A               	movlw	42
  4733  0038A4  0101               	movlb	1	; () banked
  4734  0038A6  1914               	xorwf	showInterface@key& (0+255),w,b
  4735  0038A8  B4D8               	btfsc	status,2,c
  4736  0038AA  D79C               	goto	l7576
  4737  0038AC  D79D               	goto	l7578
  4738  0038AE                     __end_of_showInterface:
  4739                           	opt stack 0
  4740                           tblptru	equ	0xFF8
  4741                           tblptrh	equ	0xFF7
  4742                           tblptrl	equ	0xFF6
  4743                           tablat	equ	0xFF5
  4744                           intcon	equ	0xFF2
  4745                           postinc0	equ	0xFEE
  4746                           wreg	equ	0xFE8
  4747                           postdec1	equ	0xFE5
  4748                           fsr1l	equ	0xFE1
  4749                           indf2	equ	0xFDF
  4750                           postinc2	equ	0xFDE
  4751                           fsr2h	equ	0xFDA
  4752                           fsr2l	equ	0xFD9
  4753                           status	equ	0xFD8
  4754                           
  4755 ;; *************** function _showRunTime *****************
  4756 ;; Defined at:
  4757 ;;		line 108 in file "interface.c"
  4758 ;; Parameters:    Size  Location     Type
  4759 ;;  run             2  107[BANK0 ] PTR int 
  4760 ;;		 -> readPastRun@data(14), main@run(14), 
  4761 ;; Auto vars:     Size  Location     Type
  4762 ;;  time            4    8[BANK1 ] long 
  4763 ;;  t2              2    6[BANK1 ] int 
  4764 ;;  t1              2    4[BANK1 ] int 
  4765 ;; Return value:  Size  Location     Type
  4766 ;;                  1    wreg      unsigned char 
  4767 ;; Registers used:
  4768 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4769 ;; Tracked objects:
  4770 ;;		On entry : 0/0
  4771 ;;		On exit  : 0/0
  4772 ;;		Unchanged: 0/0
  4773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4774 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4775 ;;      Locals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4776 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4777 ;;      Totals:         0       4      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4778 ;;Total ram usage:       16 bytes
  4779 ;; Hardware stack levels used:    1
  4780 ;; Hardware stack levels required when called:    8
  4781 ;; This function calls:
  4782 ;;		___aldiv
  4783 ;;		___almod
  4784 ;;		_lcdClear
  4785 ;;		_printf
  4786 ;;		_readKeypad
  4787 ;; This function is called by:
  4788 ;;		_main
  4789 ;;		_showInterface
  4790 ;; This function uses a non-reentrant model
  4791 ;;
  4792                           
  4793                           	psect	text6
  4794  002612                     __ptext6:
  4795                           	opt stack 0
  4796  002612                     _showRunTime:
  4797                           	opt stack 22
  4798                           
  4799                           ;interface.c: 109: int t1 = run[0], t2 = run[1];
  4800                           
  4801                           ; BSR set to: 1
  4802                           ;incstack = 0
  4803  002612  C0EB  FFD9         	movff	showRunTime@run,fsr2l
  4804  002616  C0EC  FFDA         	movff	showRunTime@run+1,fsr2h
  4805  00261A  CFDE F104          	movff	postinc2,showRunTime@t1
  4806  00261E  CFDD F105          	movff	postdec2,showRunTime@t1+1
  4807  002622  0100               	movlb	0	; () banked
  4808  002624  EE20 F002          	lfsr	2,2
  4809  002628  51EB               	movf	showRunTime@run& (0+255),w,b
  4810  00262A  26D9               	addwf	fsr2l,f,c
  4811  00262C  51EC               	movf	(showRunTime@run+1)& (0+255),w,b
  4812  00262E  22DA               	addwfc	fsr2h,f,c
  4813  002630  CFDE F106          	movff	postinc2,showRunTime@t2
  4814  002634  CFDD F107          	movff	postdec2,showRunTime@t2+1
  4815                           
  4816                           ;interface.c: 110: long time = (t1<<8) + t2;
  4817  002638  0101               	movlb	1	; () banked
  4818  00263A  5104               	movf	showRunTime@t1& (0+255),w,b
  4819  00263C  0100               	movlb	0	; () banked
  4820  00263E  6FEE               	movwf	(??_showRunTime+1)& (0+255),b
  4821  002640  6BED               	clrf	??_showRunTime& (0+255),b
  4822  002642  0101               	movlb	1	; () banked
  4823  002644  5106               	movf	showRunTime@t2& (0+255),w,b
  4824  002646  0100               	movlb	0	; () banked
  4825  002648  27ED               	addwf	??_showRunTime& (0+255),f,b
  4826  00264A  0101               	movlb	1	; () banked
  4827  00264C  5107               	movf	(showRunTime@t2+1)& (0+255),w,b
  4828  00264E  0100               	movlb	0	; () banked
  4829  002650  23EE               	addwfc	(??_showRunTime+1)& (0+255),f,b
  4830  002652  C0ED  F108         	movff	??_showRunTime,showRunTime@time
  4831  002656  C0EE  F109         	movff	??_showRunTime+1,showRunTime@time+1
  4832  00265A  0101               	movlb	1	; () banked
  4833  00265C  0E00               	movlw	0
  4834  00265E  BF09               	btfsc	(showRunTime@time+1)& (0+255),7,b
  4835  002660  0EFF               	movlw	-1
  4836  002662  6F0A               	movwf	(showRunTime@time+2)& (0+255),b
  4837  002664  6F0B               	movwf	(showRunTime@time+3)& (0+255),b
  4838                           
  4839                           ; BSR set to: 1
  4840                           ;interface.c: 112: lcdClear();
  4841  002666  EC0F  F023         	call	_lcdClear	;wreg free
  4842                           
  4843                           ;interface.c: 113: printf("time %02ld:%02ld.%01ld\n",time/600,(time%600)/10,(time%600)%1
      +                          0);
  4844  00266A  0E58               	movlw	88
  4845  00266C  6E29               	movwf	___almod@divisor,c
  4846  00266E  0E02               	movlw	2
  4847  002670  6E2A               	movwf	___almod@divisor+1,c
  4848  002672  0E00               	movlw	0
  4849  002674  6E2B               	movwf	___almod@divisor+2,c
  4850  002676  0E00               	movlw	0
  4851  002678  6E2C               	movwf	___almod@divisor+3,c
  4852  00267A  C108  F025         	movff	showRunTime@time,___almod@dividend
  4853  00267E  C109  F026         	movff	showRunTime@time+1,___almod@dividend+1
  4854  002682  C10A  F027         	movff	showRunTime@time+2,___almod@dividend+2
  4855  002686  C10B  F028         	movff	showRunTime@time+3,___almod@dividend+3
  4856  00268A  ECAE  F01C         	call	___almod	;wreg free
  4857  00268E  C025  F100         	movff	?___almod,_showRunTime$1420
  4858  002692  C026  F101         	movff	?___almod+1,_showRunTime$1420+1
  4859  002696  C027  F102         	movff	?___almod+2,_showRunTime$1420+2
  4860  00269A  C028  F103         	movff	?___almod+3,_showRunTime$1420+3
  4861                           
  4862                           ;interface.c: 113: printf("time %02ld:%02ld.%01ld\n",time/600,(time%600)/10,(time%600)%1
      +                          0);
  4863  00269E  0EA0               	movlw	low STR_18
  4864  0026A0  0100               	movlb	0	; () banked
  4865  0026A2  6FB9               	movwf	printf@f& (0+255),b
  4866  0026A4  0EFE               	movlw	high STR_18
  4867  0026A6  0100               	movlb	0	; () banked
  4868  0026A8  6FBA               	movwf	(printf@f+1)& (0+255),b
  4869  0026AA  C108  F02F         	movff	showRunTime@time,___aldiv@dividend
  4870  0026AE  C109  F030         	movff	showRunTime@time+1,___aldiv@dividend+1
  4871  0026B2  C10A  F031         	movff	showRunTime@time+2,___aldiv@dividend+2
  4872  0026B6  C10B  F032         	movff	showRunTime@time+3,___aldiv@dividend+3
  4873  0026BA  0E58               	movlw	88
  4874  0026BC  6E33               	movwf	___aldiv@divisor,c
  4875  0026BE  0E02               	movlw	2
  4876  0026C0  6E34               	movwf	___aldiv@divisor+1,c
  4877  0026C2  0E00               	movlw	0
  4878  0026C4  6E35               	movwf	___aldiv@divisor+2,c
  4879  0026C6  0E00               	movlw	0
  4880  0026C8  6E36               	movwf	___aldiv@divisor+3,c
  4881  0026CA  EC14  F01B         	call	___aldiv	;wreg free
  4882  0026CE  C02F  F0BB         	movff	?___aldiv,?_printf+2
  4883  0026D2  C030  F0BC         	movff	?___aldiv+1,?_printf+3
  4884  0026D6  C031  F0BD         	movff	?___aldiv+2,?_printf+4
  4885  0026DA  C032  F0BE         	movff	?___aldiv+3,?_printf+5
  4886  0026DE  0E58               	movlw	88
  4887  0026E0  6E29               	movwf	___almod@divisor,c
  4888  0026E2  0E02               	movlw	2
  4889  0026E4  6E2A               	movwf	___almod@divisor+1,c
  4890  0026E6  0E00               	movlw	0
  4891  0026E8  6E2B               	movwf	___almod@divisor+2,c
  4892  0026EA  0E00               	movlw	0
  4893  0026EC  6E2C               	movwf	___almod@divisor+3,c
  4894  0026EE  C108  F025         	movff	showRunTime@time,___almod@dividend
  4895  0026F2  C109  F026         	movff	showRunTime@time+1,___almod@dividend+1
  4896  0026F6  C10A  F027         	movff	showRunTime@time+2,___almod@dividend+2
  4897  0026FA  C10B  F028         	movff	showRunTime@time+3,___almod@dividend+3
  4898  0026FE  ECAE  F01C         	call	___almod	;wreg free
  4899  002702  C025  F02F         	movff	?___almod,___aldiv@dividend
  4900  002706  C026  F030         	movff	?___almod+1,___aldiv@dividend+1
  4901  00270A  C027  F031         	movff	?___almod+2,___aldiv@dividend+2
  4902  00270E  C028  F032         	movff	?___almod+3,___aldiv@dividend+3
  4903  002712  0E0A               	movlw	10
  4904  002714  6E33               	movwf	___aldiv@divisor,c
  4905  002716  0E00               	movlw	0
  4906  002718  6E34               	movwf	___aldiv@divisor+1,c
  4907  00271A  0E00               	movlw	0
  4908  00271C  6E35               	movwf	___aldiv@divisor+2,c
  4909  00271E  0E00               	movlw	0
  4910  002720  6E36               	movwf	___aldiv@divisor+3,c
  4911  002722  EC14  F01B         	call	___aldiv	;wreg free
  4912  002726  C02F  F0BF         	movff	?___aldiv,?_printf+6
  4913  00272A  C030  F0C0         	movff	?___aldiv+1,?_printf+7
  4914  00272E  C031  F0C1         	movff	?___aldiv+2,?_printf+8
  4915  002732  C032  F0C2         	movff	?___aldiv+3,?_printf+9
  4916  002736  C100  F025         	movff	_showRunTime$1420,___almod@dividend
  4917  00273A  C101  F026         	movff	_showRunTime$1420+1,___almod@dividend+1
  4918  00273E  C102  F027         	movff	_showRunTime$1420+2,___almod@dividend+2
  4919  002742  C103  F028         	movff	_showRunTime$1420+3,___almod@dividend+3
  4920  002746  0E0A               	movlw	10
  4921  002748  6E29               	movwf	___almod@divisor,c
  4922  00274A  0E00               	movlw	0
  4923  00274C  6E2A               	movwf	___almod@divisor+1,c
  4924  00274E  0E00               	movlw	0
  4925  002750  6E2B               	movwf	___almod@divisor+2,c
  4926  002752  0E00               	movlw	0
  4927  002754  6E2C               	movwf	___almod@divisor+3,c
  4928  002756  ECAE  F01C         	call	___almod	;wreg free
  4929  00275A  C025  F0C3         	movff	?___almod,?_printf+10
  4930  00275E  C026  F0C4         	movff	?___almod+1,?_printf+11
  4931  002762  C027  F0C5         	movff	?___almod+2,?_printf+12
  4932  002766  C028  F0C6         	movff	?___almod+3,?_printf+13
  4933  00276A  EC09  F000         	call	_printf	;wreg free
  4934                           
  4935                           ;interface.c: 114: printf("              *>");
  4936  00276E  0E50               	movlw	low STR_19
  4937  002770  0100               	movlb	0	; () banked
  4938  002772  6FB9               	movwf	printf@f& (0+255),b
  4939  002774  0EFF               	movlw	high STR_19
  4940  002776  0100               	movlb	0	; () banked
  4941  002778  6FBA               	movwf	(printf@f+1)& (0+255),b
  4942  00277A  EC09  F000         	call	_printf	;wreg free
  4943  00277E                     l7384:
  4944  00277E  EC41  F022         	call	_readKeypad	;wreg free
  4945  002782  0A2A               	xorlw	42
  4946  002784  B4D8               	btfsc	status,2,c
  4947  002786  0012               	return	
  4948  002788  D7FA               	goto	l7384
  4949  00278A                     __end_of_showRunTime:
  4950                           	opt stack 0
  4951                           tblptru	equ	0xFF8
  4952                           tblptrh	equ	0xFF7
  4953                           tblptrl	equ	0xFF6
  4954                           tablat	equ	0xFF5
  4955                           intcon	equ	0xFF2
  4956                           postinc0	equ	0xFEE
  4957                           wreg	equ	0xFE8
  4958                           postdec1	equ	0xFE5
  4959                           fsr1l	equ	0xFE1
  4960                           indf2	equ	0xFDF
  4961                           postinc2	equ	0xFDE
  4962                           postdec2	equ	0xFDD
  4963                           fsr2h	equ	0xFDA
  4964                           fsr2l	equ	0xFD9
  4965                           status	equ	0xFD8
  4966                           
  4967 ;; *************** function ___almod *****************
  4968 ;; Defined at:
  4969 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\almod.c"
  4970 ;; Parameters:    Size  Location     Type
  4971 ;;  dividend        4   36[COMRAM] long 
  4972 ;;  divisor         4   40[COMRAM] long 
  4973 ;; Auto vars:     Size  Location     Type
  4974 ;;  sign            1   45[COMRAM] unsigned char 
  4975 ;;  counter         1   44[COMRAM] unsigned char 
  4976 ;; Return value:  Size  Location     Type
  4977 ;;                  4   36[COMRAM] long 
  4978 ;; Registers used:
  4979 ;;		wreg, status,2, status,0
  4980 ;; Tracked objects:
  4981 ;;		On entry : 0/0
  4982 ;;		On exit  : 0/0
  4983 ;;		Unchanged: 0/0
  4984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4985 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4986 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4988 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4989 ;;Total ram usage:       10 bytes
  4990 ;; Hardware stack levels used:    1
  4991 ;; Hardware stack levels required when called:    3
  4992 ;; This function calls:
  4993 ;;		Nothing
  4994 ;; This function is called by:
  4995 ;;		_main
  4996 ;;		_showRunTime
  4997 ;; This function uses a non-reentrant model
  4998 ;;
  4999                           
  5000                           	psect	text7
  5001  00395C                     __ptext7:
  5002                           	opt stack 0
  5003  00395C                     ___almod:
  5004                           	opt stack 26
  5005                           
  5006                           ;incstack = 0
  5007  00395C  0E00               	movlw	0
  5008  00395E  6E2E               	movwf	___almod@sign,c
  5009  003960  AE28               	btfss	___almod@dividend+3,7,c
  5010  003962  D00A               	goto	l7266
  5011  003964  1E28               	comf	___almod@dividend+3,f,c
  5012  003966  1E27               	comf	___almod@dividend+2,f,c
  5013  003968  1E26               	comf	___almod@dividend+1,f,c
  5014  00396A  6C25               	negf	___almod@dividend,c
  5015  00396C  0E00               	movlw	0
  5016  00396E  2226               	addwfc	___almod@dividend+1,f,c
  5017  003970  2227               	addwfc	___almod@dividend+2,f,c
  5018  003972  2228               	addwfc	___almod@dividend+3,f,c
  5019  003974  0E01               	movlw	1
  5020  003976  6E2E               	movwf	___almod@sign,c
  5021  003978                     l7266:
  5022  003978  AE2C               	btfss	___almod@divisor+3,7,c
  5023  00397A  D008               	goto	l7270
  5024  00397C  1E2C               	comf	___almod@divisor+3,f,c
  5025  00397E  1E2B               	comf	___almod@divisor+2,f,c
  5026  003980  1E2A               	comf	___almod@divisor+1,f,c
  5027  003982  6C29               	negf	___almod@divisor,c
  5028  003984  0E00               	movlw	0
  5029  003986  222A               	addwfc	___almod@divisor+1,f,c
  5030  003988  222B               	addwfc	___almod@divisor+2,f,c
  5031  00398A  222C               	addwfc	___almod@divisor+3,f,c
  5032  00398C                     l7270:
  5033  00398C  5029               	movf	___almod@divisor,w,c
  5034  00398E  102A               	iorwf	___almod@divisor+1,w,c
  5035  003990  102B               	iorwf	___almod@divisor+2,w,c
  5036  003992  102C               	iorwf	___almod@divisor+3,w,c
  5037  003994  B4D8               	btfsc	status,2,c
  5038  003996  D024               	goto	l7286
  5039  003998  0E01               	movlw	1
  5040  00399A  6E2D               	movwf	___almod@counter,c
  5041  00399C  D006               	goto	l7276
  5042  00399E                     l7274:
  5043  00399E  90D8               	bcf	status,0,c
  5044  0039A0  3629               	rlcf	___almod@divisor,f,c
  5045  0039A2  362A               	rlcf	___almod@divisor+1,f,c
  5046  0039A4  362B               	rlcf	___almod@divisor+2,f,c
  5047  0039A6  362C               	rlcf	___almod@divisor+3,f,c
  5048  0039A8  2A2D               	incf	___almod@counter,f,c
  5049  0039AA                     l7276:
  5050  0039AA  AE2C               	btfss	___almod@divisor+3,7,c
  5051  0039AC  D7F8               	goto	l7274
  5052  0039AE                     l7278:
  5053  0039AE  5029               	movf	___almod@divisor,w,c
  5054  0039B0  5C25               	subwf	___almod@dividend,w,c
  5055  0039B2  502A               	movf	___almod@divisor+1,w,c
  5056  0039B4  5826               	subwfb	___almod@dividend+1,w,c
  5057  0039B6  502B               	movf	___almod@divisor+2,w,c
  5058  0039B8  5827               	subwfb	___almod@dividend+2,w,c
  5059  0039BA  502C               	movf	___almod@divisor+3,w,c
  5060  0039BC  5828               	subwfb	___almod@dividend+3,w,c
  5061  0039BE  A0D8               	btfss	status,0,c
  5062  0039C0  D008               	goto	l7282
  5063  0039C2  5029               	movf	___almod@divisor,w,c
  5064  0039C4  5E25               	subwf	___almod@dividend,f,c
  5065  0039C6  502A               	movf	___almod@divisor+1,w,c
  5066  0039C8  5A26               	subwfb	___almod@dividend+1,f,c
  5067  0039CA  502B               	movf	___almod@divisor+2,w,c
  5068  0039CC  5A27               	subwfb	___almod@dividend+2,f,c
  5069  0039CE  502C               	movf	___almod@divisor+3,w,c
  5070  0039D0  5A28               	subwfb	___almod@dividend+3,f,c
  5071  0039D2                     l7282:
  5072  0039D2  90D8               	bcf	status,0,c
  5073  0039D4  322C               	rrcf	___almod@divisor+3,f,c
  5074  0039D6  322B               	rrcf	___almod@divisor+2,f,c
  5075  0039D8  322A               	rrcf	___almod@divisor+1,f,c
  5076  0039DA  3229               	rrcf	___almod@divisor,f,c
  5077  0039DC  2E2D               	decfsz	___almod@counter,f,c
  5078  0039DE  D7E7               	goto	l7278
  5079  0039E0                     l7286:
  5080  0039E0  502E               	movf	___almod@sign,w,c
  5081  0039E2  B4D8               	btfsc	status,2,c
  5082  0039E4  D008               	goto	l7290
  5083  0039E6  1E28               	comf	___almod@dividend+3,f,c
  5084  0039E8  1E27               	comf	___almod@dividend+2,f,c
  5085  0039EA  1E26               	comf	___almod@dividend+1,f,c
  5086  0039EC  6C25               	negf	___almod@dividend,c
  5087  0039EE  0E00               	movlw	0
  5088  0039F0  2226               	addwfc	___almod@dividend+1,f,c
  5089  0039F2  2227               	addwfc	___almod@dividend+2,f,c
  5090  0039F4  2228               	addwfc	___almod@dividend+3,f,c
  5091  0039F6                     l7290:
  5092  0039F6  C025  F025         	movff	___almod@dividend,?___almod
  5093  0039FA  C026  F026         	movff	___almod@dividend+1,?___almod+1
  5094  0039FE  C027  F027         	movff	___almod@dividend+2,?___almod+2
  5095  003A02  C028  F028         	movff	___almod@dividend+3,?___almod+3
  5096  003A06  0012               	return	
  5097  003A08                     __end_of___almod:
  5098                           	opt stack 0
  5099                           tblptru	equ	0xFF8
  5100                           tblptrh	equ	0xFF7
  5101                           tblptrl	equ	0xFF6
  5102                           tablat	equ	0xFF5
  5103                           intcon	equ	0xFF2
  5104                           postinc0	equ	0xFEE
  5105                           wreg	equ	0xFE8
  5106                           postdec1	equ	0xFE5
  5107                           fsr1l	equ	0xFE1
  5108                           indf2	equ	0xFDF
  5109                           postinc2	equ	0xFDE
  5110                           postdec2	equ	0xFDD
  5111                           fsr2h	equ	0xFDA
  5112                           fsr2l	equ	0xFD9
  5113                           status	equ	0xFD8
  5114                           
  5115 ;; *************** function ___aldiv *****************
  5116 ;; Defined at:
  5117 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\aldiv.c"
  5118 ;; Parameters:    Size  Location     Type
  5119 ;;  dividend        4   46[COMRAM] long 
  5120 ;;  divisor         4   50[COMRAM] long 
  5121 ;; Auto vars:     Size  Location     Type
  5122 ;;  quotient        4    2[BANK0 ] long 
  5123 ;;  sign            1    1[BANK0 ] unsigned char 
  5124 ;;  counter         1    0[BANK0 ] unsigned char 
  5125 ;; Return value:  Size  Location     Type
  5126 ;;                  4   46[COMRAM] long 
  5127 ;; Registers used:
  5128 ;;		wreg, status,2, status,0
  5129 ;; Tracked objects:
  5130 ;;		On entry : 0/0
  5131 ;;		On exit  : 0/0
  5132 ;;		Unchanged: 0/0
  5133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5134 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5135 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5137 ;;      Totals:         8       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5138 ;;Total ram usage:       14 bytes
  5139 ;; Hardware stack levels used:    1
  5140 ;; Hardware stack levels required when called:    3
  5141 ;; This function calls:
  5142 ;;		Nothing
  5143 ;; This function is called by:
  5144 ;;		_main
  5145 ;;		_showRunTime
  5146 ;; This function uses a non-reentrant model
  5147 ;;
  5148                           
  5149                           	psect	text8
  5150  003628                     __ptext8:
  5151                           	opt stack 0
  5152  003628                     ___aldiv:
  5153                           	opt stack 26
  5154                           
  5155                           ;incstack = 0
  5156  003628  0E00               	movlw	0
  5157  00362A  0100               	movlb	0	; () banked
  5158  00362C  6F81               	movwf	___aldiv@sign& (0+255),b
  5159                           
  5160                           ; BSR set to: 0
  5161  00362E  AE36               	btfss	___aldiv@divisor+3,7,c
  5162  003630  D00B               	goto	l7222
  5163                           
  5164                           ; BSR set to: 0
  5165  003632  1E36               	comf	___aldiv@divisor+3,f,c
  5166  003634  1E35               	comf	___aldiv@divisor+2,f,c
  5167  003636  1E34               	comf	___aldiv@divisor+1,f,c
  5168  003638  6C33               	negf	___aldiv@divisor,c
  5169  00363A  0E00               	movlw	0
  5170  00363C  2234               	addwfc	___aldiv@divisor+1,f,c
  5171  00363E  2235               	addwfc	___aldiv@divisor+2,f,c
  5172  003640  2236               	addwfc	___aldiv@divisor+3,f,c
  5173                           
  5174                           ; BSR set to: 0
  5175  003642  0E01               	movlw	1
  5176  003644  0100               	movlb	0	; () banked
  5177  003646  6F81               	movwf	___aldiv@sign& (0+255),b
  5178  003648                     l7222:
  5179                           
  5180                           ; BSR set to: 0
  5181  003648  AE32               	btfss	___aldiv@dividend+3,7,c
  5182  00364A  D00B               	goto	l7228
  5183                           
  5184                           ; BSR set to: 0
  5185  00364C  1E32               	comf	___aldiv@dividend+3,f,c
  5186  00364E  1E31               	comf	___aldiv@dividend+2,f,c
  5187  003650  1E30               	comf	___aldiv@dividend+1,f,c
  5188  003652  6C2F               	negf	___aldiv@dividend,c
  5189  003654  0E00               	movlw	0
  5190  003656  2230               	addwfc	___aldiv@dividend+1,f,c
  5191  003658  2231               	addwfc	___aldiv@dividend+2,f,c
  5192  00365A  2232               	addwfc	___aldiv@dividend+3,f,c
  5193                           
  5194                           ; BSR set to: 0
  5195  00365C  0E01               	movlw	1
  5196  00365E  0100               	movlb	0	; () banked
  5197  003660  1B81               	xorwf	___aldiv@sign& (0+255),f,b
  5198  003662                     l7228:
  5199                           
  5200                           ; BSR set to: 0
  5201  003662  0E00               	movlw	0
  5202  003664  0100               	movlb	0	; () banked
  5203  003666  6F82               	movwf	___aldiv@quotient& (0+255),b
  5204  003668  0E00               	movlw	0
  5205  00366A  6F83               	movwf	(___aldiv@quotient+1)& (0+255),b
  5206  00366C  0E00               	movlw	0
  5207  00366E  6F84               	movwf	(___aldiv@quotient+2)& (0+255),b
  5208  003670  0E00               	movlw	0
  5209  003672  6F85               	movwf	(___aldiv@quotient+3)& (0+255),b
  5210                           
  5211                           ; BSR set to: 0
  5212  003674  5033               	movf	___aldiv@divisor,w,c
  5213  003676  1034               	iorwf	___aldiv@divisor+1,w,c
  5214  003678  1035               	iorwf	___aldiv@divisor+2,w,c
  5215  00367A  1036               	iorwf	___aldiv@divisor+3,w,c
  5216  00367C  B4D8               	btfsc	status,2,c
  5217  00367E  D02F               	goto	l7250
  5218                           
  5219                           ; BSR set to: 0
  5220  003680  0E01               	movlw	1
  5221  003682  0100               	movlb	0	; () banked
  5222  003684  6F80               	movwf	___aldiv@counter& (0+255),b
  5223  003686  D007               	goto	l7236
  5224  003688                     l7234:
  5225                           
  5226                           ; BSR set to: 0
  5227  003688  90D8               	bcf	status,0,c
  5228  00368A  3633               	rlcf	___aldiv@divisor,f,c
  5229  00368C  3634               	rlcf	___aldiv@divisor+1,f,c
  5230  00368E  3635               	rlcf	___aldiv@divisor+2,f,c
  5231  003690  3636               	rlcf	___aldiv@divisor+3,f,c
  5232  003692  0100               	movlb	0	; () banked
  5233  003694  2B80               	incf	___aldiv@counter& (0+255),f,b
  5234  003696                     l7236:
  5235                           
  5236                           ; BSR set to: 0
  5237  003696  AE36               	btfss	___aldiv@divisor+3,7,c
  5238  003698  D7F7               	goto	l7234
  5239  00369A                     l7238:
  5240                           
  5241                           ; BSR set to: 0
  5242  00369A  0100               	movlb	0	; () banked
  5243  00369C  90D8               	bcf	status,0,c
  5244  00369E  3782               	rlcf	___aldiv@quotient& (0+255),f,b
  5245  0036A0  3783               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  5246  0036A2  3784               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  5247  0036A4  3785               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  5248                           
  5249                           ; BSR set to: 0
  5250  0036A6  5033               	movf	___aldiv@divisor,w,c
  5251  0036A8  5C2F               	subwf	___aldiv@dividend,w,c
  5252  0036AA  5034               	movf	___aldiv@divisor+1,w,c
  5253  0036AC  5830               	subwfb	___aldiv@dividend+1,w,c
  5254  0036AE  5035               	movf	___aldiv@divisor+2,w,c
  5255  0036B0  5831               	subwfb	___aldiv@dividend+2,w,c
  5256  0036B2  5036               	movf	___aldiv@divisor+3,w,c
  5257  0036B4  5832               	subwfb	___aldiv@dividend+3,w,c
  5258  0036B6  A0D8               	btfss	status,0,c
  5259  0036B8  D00A               	goto	l7246
  5260                           
  5261                           ; BSR set to: 0
  5262  0036BA  5033               	movf	___aldiv@divisor,w,c
  5263  0036BC  5E2F               	subwf	___aldiv@dividend,f,c
  5264  0036BE  5034               	movf	___aldiv@divisor+1,w,c
  5265  0036C0  5A30               	subwfb	___aldiv@dividend+1,f,c
  5266  0036C2  5035               	movf	___aldiv@divisor+2,w,c
  5267  0036C4  5A31               	subwfb	___aldiv@dividend+2,f,c
  5268  0036C6  5036               	movf	___aldiv@divisor+3,w,c
  5269  0036C8  5A32               	subwfb	___aldiv@dividend+3,f,c
  5270                           
  5271                           ; BSR set to: 0
  5272  0036CA  0100               	movlb	0	; () banked
  5273  0036CC  8182               	bsf	___aldiv@quotient& (0+255),0,b
  5274  0036CE                     l7246:
  5275                           
  5276                           ; BSR set to: 0
  5277  0036CE  90D8               	bcf	status,0,c
  5278  0036D0  3236               	rrcf	___aldiv@divisor+3,f,c
  5279  0036D2  3235               	rrcf	___aldiv@divisor+2,f,c
  5280  0036D4  3234               	rrcf	___aldiv@divisor+1,f,c
  5281  0036D6  3233               	rrcf	___aldiv@divisor,f,c
  5282                           
  5283                           ; BSR set to: 0
  5284  0036D8  0100               	movlb	0	; () banked
  5285  0036DA  2F80               	decfsz	___aldiv@counter& (0+255),f,b
  5286  0036DC  D7DE               	goto	l7238
  5287  0036DE                     l7250:
  5288                           
  5289                           ; BSR set to: 0
  5290  0036DE  0100               	movlb	0	; () banked
  5291  0036E0  5181               	movf	___aldiv@sign& (0+255),w,b
  5292  0036E2  0100               	movlb	0	; () banked
  5293  0036E4  B4D8               	btfsc	status,2,c
  5294  0036E6  D009               	goto	l7254
  5295                           
  5296                           ; BSR set to: 0
  5297  0036E8  0100               	movlb	0	; () banked
  5298  0036EA  1F85               	comf	(___aldiv@quotient+3)& (0+255),f,b
  5299  0036EC  1F84               	comf	(___aldiv@quotient+2)& (0+255),f,b
  5300  0036EE  1F83               	comf	(___aldiv@quotient+1)& (0+255),f,b
  5301  0036F0  6D82               	negf	___aldiv@quotient& (0+255),b
  5302  0036F2  0E00               	movlw	0
  5303  0036F4  2383               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  5304  0036F6  2384               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  5305  0036F8  2385               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  5306  0036FA                     l7254:
  5307                           
  5308                           ; BSR set to: 0
  5309  0036FA  C082  F02F         	movff	___aldiv@quotient,?___aldiv
  5310  0036FE  C083  F030         	movff	___aldiv@quotient+1,?___aldiv+1
  5311  003702  C084  F031         	movff	___aldiv@quotient+2,?___aldiv+2
  5312  003706  C085  F032         	movff	___aldiv@quotient+3,?___aldiv+3
  5313  00370A  0012               	return	
  5314  00370C                     __end_of___aldiv:
  5315                           	opt stack 0
  5316                           tblptru	equ	0xFF8
  5317                           tblptrh	equ	0xFF7
  5318                           tblptrl	equ	0xFF6
  5319                           tablat	equ	0xFF5
  5320                           intcon	equ	0xFF2
  5321                           postinc0	equ	0xFEE
  5322                           wreg	equ	0xFE8
  5323                           postdec1	equ	0xFE5
  5324                           fsr1l	equ	0xFE1
  5325                           indf2	equ	0xFDF
  5326                           postinc2	equ	0xFDE
  5327                           postdec2	equ	0xFDD
  5328                           fsr2h	equ	0xFDA
  5329                           fsr2l	equ	0xFD9
  5330                           status	equ	0xFD8
  5331                           
  5332 ;; *************** function _showRunStats *****************
  5333 ;; Defined at:
  5334 ;;		line 119 in file "interface.c"
  5335 ;; Parameters:    Size  Location     Type
  5336 ;;  run             2  107[BANK0 ] PTR int 
  5337 ;;		 -> readPastRun@data(14), main@run(14), 
  5338 ;; Auto vars:     Size  Location     Type
  5339 ;;  n_OTHER         2  115[BANK0 ] int 
  5340 ;;  n_C             2  113[BANK0 ] int 
  5341 ;;  n_9V            2  111[BANK0 ] int 
  5342 ;;  n_AA            2  109[BANK0 ] int 
  5343 ;; Return value:  Size  Location     Type
  5344 ;;                  1    wreg      unsigned char 
  5345 ;; Registers used:
  5346 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5347 ;; Tracked objects:
  5348 ;;		On entry : 0/0
  5349 ;;		On exit  : 0/0
  5350 ;;		Unchanged: 0/0
  5351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5352 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5353 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5355 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5356 ;;Total ram usage:       10 bytes
  5357 ;; Hardware stack levels used:    1
  5358 ;; Hardware stack levels required when called:    8
  5359 ;; This function calls:
  5360 ;;		_lcdClear
  5361 ;;		_printf
  5362 ;;		_readKeypad
  5363 ;; This function is called by:
  5364 ;;		_main
  5365 ;;		_showInterface
  5366 ;; This function uses a non-reentrant model
  5367 ;;
  5368                           
  5369                           	psect	text9
  5370  003A08                     __ptext9:
  5371                           	opt stack 0
  5372  003A08                     _showRunStats:
  5373                           	opt stack 22
  5374                           
  5375                           ;interface.c: 120: int n_AA = run[2], n_9V = run[3], n_C = run[4], n_OTHER = run[5];
  5376                           
  5377                           ; BSR set to: 0
  5378                           ;incstack = 0
  5379  003A08  0100               	movlb	0	; () banked
  5380  003A0A  EE20 F004          	lfsr	2,4
  5381  003A0E  51EB               	movf	showRunStats@run& (0+255),w,b
  5382  003A10  26D9               	addwf	fsr2l,f,c
  5383  003A12  51EC               	movf	(showRunStats@run+1)& (0+255),w,b
  5384  003A14  22DA               	addwfc	fsr2h,f,c
  5385  003A16  CFDE F0ED          	movff	postinc2,showRunStats@n_AA
  5386  003A1A  CFDD F0EE          	movff	postdec2,showRunStats@n_AA+1
  5387  003A1E  0100               	movlb	0	; () banked
  5388  003A20  EE20 F006          	lfsr	2,6
  5389  003A24  51EB               	movf	showRunStats@run& (0+255),w,b
  5390  003A26  26D9               	addwf	fsr2l,f,c
  5391  003A28  51EC               	movf	(showRunStats@run+1)& (0+255),w,b
  5392  003A2A  22DA               	addwfc	fsr2h,f,c
  5393  003A2C  CFDE F0EF          	movff	postinc2,showRunStats@n_9V
  5394  003A30  CFDD F0F0          	movff	postdec2,showRunStats@n_9V+1
  5395  003A34  0100               	movlb	0	; () banked
  5396  003A36  EE20 F008          	lfsr	2,8
  5397  003A3A  51EB               	movf	showRunStats@run& (0+255),w,b
  5398  003A3C  26D9               	addwf	fsr2l,f,c
  5399  003A3E  51EC               	movf	(showRunStats@run+1)& (0+255),w,b
  5400  003A40  22DA               	addwfc	fsr2h,f,c
  5401  003A42  CFDE F0F1          	movff	postinc2,showRunStats@n_C
  5402  003A46  CFDD F0F2          	movff	postdec2,showRunStats@n_C+1
  5403  003A4A  0100               	movlb	0	; () banked
  5404  003A4C  EE20 F00A          	lfsr	2,10
  5405  003A50  51EB               	movf	showRunStats@run& (0+255),w,b
  5406  003A52  26D9               	addwf	fsr2l,f,c
  5407  003A54  51EC               	movf	(showRunStats@run+1)& (0+255),w,b
  5408  003A56  22DA               	addwfc	fsr2h,f,c
  5409  003A58  CFDE F0F3          	movff	postinc2,showRunStats@n_OTHER
  5410  003A5C  CFDD F0F4          	movff	postdec2,showRunStats@n_OTHER+1
  5411                           
  5412                           ; BSR set to: 0
  5413                           ;interface.c: 122: lcdClear();
  5414  003A60  EC0F  F023         	call	_lcdClear	;wreg free
  5415                           
  5416                           ;interface.c: 123: printf("[AA,9V,C,other] \n");
  5417  003A64  0E2D               	movlw	low STR_20
  5418  003A66  0100               	movlb	0	; () banked
  5419  003A68  6FB9               	movwf	printf@f& (0+255),b
  5420  003A6A  0EFF               	movlw	high STR_20
  5421  003A6C  0100               	movlb	0	; () banked
  5422  003A6E  6FBA               	movwf	(printf@f+1)& (0+255),b
  5423  003A70  EC09  F000         	call	_printf	;wreg free
  5424                           
  5425                           ;interface.c: 124: printf("[%d,%d,%d,%d]   *>",n_AA,n_9V,n_C,n_OTHER);
  5426  003A74  0EF6               	movlw	low STR_21
  5427  003A76  0100               	movlb	0	; () banked
  5428  003A78  6FB9               	movwf	printf@f& (0+255),b
  5429  003A7A  0EFE               	movlw	high STR_21
  5430  003A7C  0100               	movlb	0	; () banked
  5431  003A7E  6FBA               	movwf	(printf@f+1)& (0+255),b
  5432  003A80  C0ED  F0BB         	movff	showRunStats@n_AA,?_printf+2
  5433  003A84  C0EE  F0BC         	movff	showRunStats@n_AA+1,?_printf+3
  5434  003A88  C0EF  F0BD         	movff	showRunStats@n_9V,?_printf+4
  5435  003A8C  C0F0  F0BE         	movff	showRunStats@n_9V+1,?_printf+5
  5436  003A90  C0F1  F0BF         	movff	showRunStats@n_C,?_printf+6
  5437  003A94  C0F2  F0C0         	movff	showRunStats@n_C+1,?_printf+7
  5438  003A98  C0F3  F0C1         	movff	showRunStats@n_OTHER,?_printf+8
  5439  003A9C  C0F4  F0C2         	movff	showRunStats@n_OTHER+1,?_printf+9
  5440  003AA0  EC09  F000         	call	_printf	;wreg free
  5441  003AA4                     l7394:
  5442  003AA4  EC41  F022         	call	_readKeypad	;wreg free
  5443  003AA8  0A2A               	xorlw	42
  5444  003AAA  B4D8               	btfsc	status,2,c
  5445  003AAC  0012               	return	
  5446  003AAE  D7FA               	goto	l7394
  5447  003AB0                     __end_of_showRunStats:
  5448                           	opt stack 0
  5449                           tblptru	equ	0xFF8
  5450                           tblptrh	equ	0xFF7
  5451                           tblptrl	equ	0xFF6
  5452                           tablat	equ	0xFF5
  5453                           intcon	equ	0xFF2
  5454                           postinc0	equ	0xFEE
  5455                           wreg	equ	0xFE8
  5456                           postdec1	equ	0xFE5
  5457                           fsr1l	equ	0xFE1
  5458                           indf2	equ	0xFDF
  5459                           postinc2	equ	0xFDE
  5460                           postdec2	equ	0xFDD
  5461                           fsr2h	equ	0xFDA
  5462                           fsr2l	equ	0xFD9
  5463                           status	equ	0xFD8
  5464                           
  5465 ;; *************** function _showRunSelect *****************
  5466 ;; Defined at:
  5467 ;;		line 86 in file "interface.c"
  5468 ;; Parameters:    Size  Location     Type
  5469 ;;		None
  5470 ;; Auto vars:     Size  Location     Type
  5471 ;;  k               1  107[BANK0 ] unsigned char 
  5472 ;; Return value:  Size  Location     Type
  5473 ;;                  1    wreg      unsigned char 
  5474 ;; Registers used:
  5475 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5476 ;; Tracked objects:
  5477 ;;		On entry : 0/0
  5478 ;;		On exit  : 0/0
  5479 ;;		Unchanged: 0/0
  5480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5482 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5484 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5485 ;;Total ram usage:        1 bytes
  5486 ;; Hardware stack levels used:    1
  5487 ;; Hardware stack levels required when called:    8
  5488 ;; This function calls:
  5489 ;;		_lcdClear
  5490 ;;		_printf
  5491 ;;		_readKeypad
  5492 ;; This function is called by:
  5493 ;;		_showInterface
  5494 ;; This function uses a non-reentrant model
  5495 ;;
  5496                           
  5497                           	psect	text10
  5498  004018                     __ptext10:
  5499                           	opt stack 0
  5500  004018                     _showRunSelect:
  5501                           	opt stack 21
  5502                           
  5503                           ;interface.c: 87: lcdClear();
  5504                           
  5505                           ;incstack = 0
  5506  004018  EC0F  F023         	call	_lcdClear	;wreg free
  5507                           
  5508                           ;interface.c: 88: printf("select run:     \n");
  5509  00401C  0E1B               	movlw	low STR_14
  5510  00401E  0100               	movlb	0	; () banked
  5511  004020  6FB9               	movwf	printf@f& (0+255),b
  5512  004022  0EFF               	movlw	high STR_14
  5513  004024  0100               	movlb	0	; () banked
  5514  004026  6FBA               	movwf	(printf@f+1)& (0+255),b
  5515  004028  EC09  F000         	call	_printf	;wreg free
  5516                           
  5517                           ;interface.c: 89: printf("[1,2,3,4]     *>");
  5518  00402C  0E61               	movlw	low STR_15
  5519  00402E  0100               	movlb	0	; () banked
  5520  004030  6FB9               	movwf	printf@f& (0+255),b
  5521  004032  0EFF               	movlw	high STR_15
  5522  004034  0100               	movlb	0	; () banked
  5523  004036  6FBA               	movwf	(printf@f+1)& (0+255),b
  5524  004038  EC09  F000         	call	_printf	;wreg free
  5525  00403C                     l7496:
  5526  00403C  EC41  F022         	call	_readKeypad	;wreg free
  5527  004040  0100               	movlb	0	; () banked
  5528  004042  6FEB               	movwf	showRunSelect@k& (0+255),b
  5529                           
  5530                           ; BSR set to: 0
  5531                           ;interface.c: 93: while(k != '1' && k != '2' && k != '3' && k != '4' && k != '*');
  5532  004044  0E31               	movlw	49
  5533  004046  0100               	movlb	0	; () banked
  5534  004048  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  5535  00404A  B4D8               	btfsc	status,2,c
  5536  00404C  D014               	goto	l7508
  5537                           
  5538                           ; BSR set to: 0
  5539  00404E  0E32               	movlw	50
  5540  004050  0100               	movlb	0	; () banked
  5541  004052  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  5542  004054  B4D8               	btfsc	status,2,c
  5543  004056  D00F               	goto	l7508
  5544                           
  5545                           ; BSR set to: 0
  5546  004058  0E33               	movlw	51
  5547  00405A  0100               	movlb	0	; () banked
  5548  00405C  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  5549  00405E  B4D8               	btfsc	status,2,c
  5550  004060  D00A               	goto	l7508
  5551                           
  5552                           ; BSR set to: 0
  5553  004062  0E34               	movlw	52
  5554  004064  0100               	movlb	0	; () banked
  5555  004066  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  5556  004068  B4D8               	btfsc	status,2,c
  5557  00406A  D005               	goto	l7508
  5558                           
  5559                           ; BSR set to: 0
  5560  00406C  0E2A               	movlw	42
  5561  00406E  0100               	movlb	0	; () banked
  5562  004070  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  5563  004072  A4D8               	btfss	status,2,c
  5564  004074  D7E3               	goto	l7496
  5565  004076                     l7508:
  5566                           
  5567                           ; BSR set to: 0
  5568                           ;interface.c: 94: return k;
  5569  004076  0100               	movlb	0	; () banked
  5570  004078  51EB               	movf	showRunSelect@k& (0+255),w,b
  5571  00407A  0012               	return	
  5572  00407C                     __end_of_showRunSelect:
  5573                           	opt stack 0
  5574                           tblptru	equ	0xFF8
  5575                           tblptrh	equ	0xFF7
  5576                           tblptrl	equ	0xFF6
  5577                           tablat	equ	0xFF5
  5578                           intcon	equ	0xFF2
  5579                           postinc0	equ	0xFEE
  5580                           wreg	equ	0xFE8
  5581                           postdec1	equ	0xFE5
  5582                           fsr1l	equ	0xFE1
  5583                           indf2	equ	0xFDF
  5584                           postinc2	equ	0xFDE
  5585                           postdec2	equ	0xFDD
  5586                           fsr2h	equ	0xFDA
  5587                           fsr2l	equ	0xFD9
  5588                           status	equ	0xFD8
  5589                           
  5590 ;; *************** function _showRunMenu *****************
  5591 ;; Defined at:
  5592 ;;		line 97 in file "interface.c"
  5593 ;; Parameters:    Size  Location     Type
  5594 ;;  key             1    wreg     unsigned char 
  5595 ;; Auto vars:     Size  Location     Type
  5596 ;;  key             1  107[BANK0 ] unsigned char 
  5597 ;;  k               1  108[BANK0 ] unsigned char 
  5598 ;; Return value:  Size  Location     Type
  5599 ;;                  1    wreg      unsigned char 
  5600 ;; Registers used:
  5601 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5602 ;; Tracked objects:
  5603 ;;		On entry : 0/0
  5604 ;;		On exit  : 0/0
  5605 ;;		Unchanged: 0/0
  5606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5608 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5610 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5611 ;;Total ram usage:        2 bytes
  5612 ;; Hardware stack levels used:    1
  5613 ;; Hardware stack levels required when called:    8
  5614 ;; This function calls:
  5615 ;;		_lcdClear
  5616 ;;		_printf
  5617 ;;		_readKeypad
  5618 ;; This function is called by:
  5619 ;;		_showInterface
  5620 ;; This function uses a non-reentrant model
  5621 ;;
  5622                           
  5623                           	psect	text11
  5624  00407C                     __ptext11:
  5625                           	opt stack 0
  5626  00407C                     _showRunMenu:
  5627                           	opt stack 21
  5628                           
  5629                           ; BSR set to: 0
  5630                           ;incstack = 0
  5631                           ;showRunMenu@key stored from wreg
  5632  00407C  0100               	movlb	0	; () banked
  5633  00407E  6FEB               	movwf	showRunMenu@key& (0+255),b
  5634                           
  5635                           ;interface.c: 98: lcdClear();
  5636  004080  EC0F  F023         	call	_lcdClear	;wreg free
  5637                           
  5638                           ;interface.c: 99: printf("%c) time  <A     \n",key);
  5639  004084  0EE3               	movlw	low STR_16
  5640  004086  0100               	movlb	0	; () banked
  5641  004088  6FB9               	movwf	printf@f& (0+255),b
  5642  00408A  0EFE               	movlw	high STR_16
  5643  00408C  0100               	movlb	0	; () banked
  5644  00408E  6FBA               	movwf	(printf@f+1)& (0+255),b
  5645  004090  C0EB  F0BB         	movff	showRunMenu@key,?_printf+2
  5646  004094  0100               	movlb	0	; () banked
  5647  004096  6BBC               	clrf	(?_printf+3)& (0+255),b
  5648  004098  EC09  F000         	call	_printf	;wreg free
  5649                           
  5650                           ;interface.c: 100: printf( "   stats <B   *>");
  5651  00409C  0E83               	movlw	low STR_17
  5652  00409E  0100               	movlb	0	; () banked
  5653  0040A0  6FB9               	movwf	printf@f& (0+255),b
  5654  0040A2  0EFF               	movlw	high STR_17
  5655  0040A4  0100               	movlb	0	; () banked
  5656  0040A6  6FBA               	movwf	(printf@f+1)& (0+255),b
  5657  0040A8  EC09  F000         	call	_printf	;wreg free
  5658  0040AC                     l7526:
  5659  0040AC  EC41  F022         	call	_readKeypad	;wreg free
  5660  0040B0  0100               	movlb	0	; () banked
  5661  0040B2  6FEC               	movwf	showRunMenu@k& (0+255),b
  5662                           
  5663                           ; BSR set to: 0
  5664                           ;interface.c: 104: while(k != 'A' && k != 'B' && k != '*');
  5665  0040B4  0E41               	movlw	65
  5666  0040B6  0100               	movlb	0	; () banked
  5667  0040B8  19EC               	xorwf	showRunMenu@k& (0+255),w,b
  5668  0040BA  B4D8               	btfsc	status,2,c
  5669  0040BC  D00A               	goto	l7534
  5670                           
  5671                           ; BSR set to: 0
  5672  0040BE  0E42               	movlw	66
  5673  0040C0  0100               	movlb	0	; () banked
  5674  0040C2  19EC               	xorwf	showRunMenu@k& (0+255),w,b
  5675  0040C4  B4D8               	btfsc	status,2,c
  5676  0040C6  D005               	goto	l7534
  5677                           
  5678                           ; BSR set to: 0
  5679  0040C8  0E2A               	movlw	42
  5680  0040CA  0100               	movlb	0	; () banked
  5681  0040CC  19EC               	xorwf	showRunMenu@k& (0+255),w,b
  5682  0040CE  A4D8               	btfss	status,2,c
  5683  0040D0  D7ED               	goto	l7526
  5684  0040D2                     l7534:
  5685                           
  5686                           ; BSR set to: 0
  5687                           ;interface.c: 105: return k;
  5688  0040D2  0100               	movlb	0	; () banked
  5689  0040D4  51EC               	movf	showRunMenu@k& (0+255),w,b
  5690  0040D6  0012               	return	
  5691  0040D8                     __end_of_showRunMenu:
  5692                           	opt stack 0
  5693                           tblptru	equ	0xFF8
  5694                           tblptrh	equ	0xFF7
  5695                           tblptrl	equ	0xFF6
  5696                           tablat	equ	0xFF5
  5697                           intcon	equ	0xFF2
  5698                           postinc0	equ	0xFEE
  5699                           wreg	equ	0xFE8
  5700                           postdec1	equ	0xFE5
  5701                           fsr1l	equ	0xFE1
  5702                           indf2	equ	0xFDF
  5703                           postinc2	equ	0xFDE
  5704                           postdec2	equ	0xFDD
  5705                           fsr2h	equ	0xFDA
  5706                           fsr2l	equ	0xFD9
  5707                           status	equ	0xFD8
  5708                           
  5709 ;; *************** function _showMainMenu *****************
  5710 ;; Defined at:
  5711 ;;		line 75 in file "interface.c"
  5712 ;; Parameters:    Size  Location     Type
  5713 ;;		None
  5714 ;; Auto vars:     Size  Location     Type
  5715 ;;  k               1  107[BANK0 ] unsigned char 
  5716 ;; Return value:  Size  Location     Type
  5717 ;;                  1    wreg      unsigned char 
  5718 ;; Registers used:
  5719 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5720 ;; Tracked objects:
  5721 ;;		On entry : 0/0
  5722 ;;		On exit  : 0/0
  5723 ;;		Unchanged: 0/0
  5724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5726 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5728 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5729 ;;Total ram usage:        1 bytes
  5730 ;; Hardware stack levels used:    1
  5731 ;; Hardware stack levels required when called:    8
  5732 ;; This function calls:
  5733 ;;		_lcdClear
  5734 ;;		_printf
  5735 ;;		_readKeypad
  5736 ;; This function is called by:
  5737 ;;		_showInterface
  5738 ;; This function uses a non-reentrant model
  5739 ;;
  5740                           
  5741                           	psect	text12
  5742  00418E                     __ptext12:
  5743                           	opt stack 0
  5744  00418E                     _showMainMenu:
  5745                           	opt stack 21
  5746                           
  5747                           ;interface.c: 76: lcdClear();
  5748                           
  5749                           ; BSR set to: 0
  5750                           ;incstack = 0
  5751  00418E  EC0F  F023         	call	_lcdClear	;wreg free
  5752                           
  5753                           ;interface.c: 77: printf("start   <B      \n");
  5754  004192  0E09               	movlw	low STR_12
  5755  004194  0100               	movlb	0	; () banked
  5756  004196  6FB9               	movwf	printf@f& (0+255),b
  5757  004198  0EFF               	movlw	high STR_12
  5758  00419A  0100               	movlb	0	; () banked
  5759  00419C  6FBA               	movwf	(printf@f+1)& (0+255),b
  5760  00419E  EC09  F000         	call	_printf	;wreg free
  5761                           
  5762                           ;interface.c: 78: printf("history <C    *>");
  5763  0041A2  0E72               	movlw	low STR_13
  5764  0041A4  0100               	movlb	0	; () banked
  5765  0041A6  6FB9               	movwf	printf@f& (0+255),b
  5766  0041A8  0EFF               	movlw	high STR_13
  5767  0041AA  0100               	movlb	0	; () banked
  5768  0041AC  6FBA               	movwf	(printf@f+1)& (0+255),b
  5769  0041AE  EC09  F000         	call	_printf	;wreg free
  5770  0041B2                     l7478:
  5771  0041B2  EC41  F022         	call	_readKeypad	;wreg free
  5772  0041B6  0100               	movlb	0	; () banked
  5773  0041B8  6FEB               	movwf	showMainMenu@k& (0+255),b
  5774                           
  5775                           ; BSR set to: 0
  5776                           ;interface.c: 82: while(k != 'B' && k != 'C' && k != '*');
  5777  0041BA  0E42               	movlw	66
  5778  0041BC  0100               	movlb	0	; () banked
  5779  0041BE  19EB               	xorwf	showMainMenu@k& (0+255),w,b
  5780  0041C0  B4D8               	btfsc	status,2,c
  5781  0041C2  D00A               	goto	l7486
  5782                           
  5783                           ; BSR set to: 0
  5784  0041C4  0E43               	movlw	67
  5785  0041C6  0100               	movlb	0	; () banked
  5786  0041C8  19EB               	xorwf	showMainMenu@k& (0+255),w,b
  5787  0041CA  B4D8               	btfsc	status,2,c
  5788  0041CC  D005               	goto	l7486
  5789                           
  5790                           ; BSR set to: 0
  5791  0041CE  0E2A               	movlw	42
  5792  0041D0  0100               	movlb	0	; () banked
  5793  0041D2  19EB               	xorwf	showMainMenu@k& (0+255),w,b
  5794  0041D4  A4D8               	btfss	status,2,c
  5795  0041D6  D7ED               	goto	l7478
  5796  0041D8                     l7486:
  5797                           
  5798                           ; BSR set to: 0
  5799                           ;interface.c: 83: return k;
  5800  0041D8  0100               	movlb	0	; () banked
  5801  0041DA  51EB               	movf	showMainMenu@k& (0+255),w,b
  5802  0041DC  0012               	return	
  5803  0041DE                     __end_of_showMainMenu:
  5804                           	opt stack 0
  5805                           tblptru	equ	0xFF8
  5806                           tblptrh	equ	0xFF7
  5807                           tblptrl	equ	0xFF6
  5808                           tablat	equ	0xFF5
  5809                           intcon	equ	0xFF2
  5810                           postinc0	equ	0xFEE
  5811                           wreg	equ	0xFE8
  5812                           postdec1	equ	0xFE5
  5813                           fsr1l	equ	0xFE1
  5814                           indf2	equ	0xFDF
  5815                           postinc2	equ	0xFDE
  5816                           postdec2	equ	0xFDD
  5817                           fsr2h	equ	0xFDA
  5818                           fsr2l	equ	0xFD9
  5819                           status	equ	0xFD8
  5820                           
  5821 ;; *************** function _showErrorMessage *****************
  5822 ;; Defined at:
  5823 ;;		line 129 in file "interface.c"
  5824 ;; Parameters:    Size  Location     Type
  5825 ;;		None
  5826 ;; Auto vars:     Size  Location     Type
  5827 ;;		None
  5828 ;; Return value:  Size  Location     Type
  5829 ;;                  1    wreg      void 
  5830 ;; Registers used:
  5831 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5832 ;; Tracked objects:
  5833 ;;		On entry : 0/0
  5834 ;;		On exit  : 0/0
  5835 ;;		Unchanged: 0/0
  5836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5841 ;;Total ram usage:        0 bytes
  5842 ;; Hardware stack levels used:    1
  5843 ;; Hardware stack levels required when called:    8
  5844 ;; This function calls:
  5845 ;;		_lcdClear
  5846 ;;		_printf
  5847 ;;		_readKeypad
  5848 ;; This function is called by:
  5849 ;;		_showInterface
  5850 ;; This function uses a non-reentrant model
  5851 ;;
  5852                           
  5853                           	psect	text13
  5854  004452                     __ptext13:
  5855                           	opt stack 0
  5856  004452                     _showErrorMessage:
  5857                           	opt stack 21
  5858                           
  5859                           ;interface.c: 130: lcdClear();
  5860                           
  5861                           ; BSR set to: 0
  5862                           ;incstack = 0
  5863  004452  EC0F  F023         	call	_lcdClear	;wreg free
  5864                           
  5865                           ;interface.c: 132: printf(" run not \n");
  5866  004456  0EC1               	movlw	low STR_22
  5867  004458  0100               	movlb	0	; () banked
  5868  00445A  6FB9               	movwf	printf@f& (0+255),b
  5869  00445C  0EFF               	movlw	high STR_22
  5870  00445E  0100               	movlb	0	; () banked
  5871  004460  6FBA               	movwf	(printf@f+1)& (0+255),b
  5872  004462  EC09  F000         	call	_printf	;wreg free
  5873                           
  5874                           ;interface.c: 133: printf("  available   *>");
  5875  004466  0E94               	movlw	low STR_23
  5876  004468  0100               	movlb	0	; () banked
  5877  00446A  6FB9               	movwf	printf@f& (0+255),b
  5878  00446C  0EFF               	movlw	high STR_23
  5879  00446E  0100               	movlb	0	; () banked
  5880  004470  6FBA               	movwf	(printf@f+1)& (0+255),b
  5881  004472  EC09  F000         	call	_printf	;wreg free
  5882  004476                     l7518:
  5883  004476  EC41  F022         	call	_readKeypad	;wreg free
  5884  00447A  0A2A               	xorlw	42
  5885  00447C  B4D8               	btfsc	status,2,c
  5886  00447E  0012               	return	
  5887  004480  D7FA               	goto	l7518
  5888  004482                     __end_of_showErrorMessage:
  5889                           	opt stack 0
  5890                           tblptru	equ	0xFF8
  5891                           tblptrh	equ	0xFF7
  5892                           tblptrl	equ	0xFF6
  5893                           tablat	equ	0xFF5
  5894                           intcon	equ	0xFF2
  5895                           postinc0	equ	0xFEE
  5896                           wreg	equ	0xFE8
  5897                           postdec1	equ	0xFE5
  5898                           fsr1l	equ	0xFE1
  5899                           indf2	equ	0xFDF
  5900                           postinc2	equ	0xFDE
  5901                           postdec2	equ	0xFDD
  5902                           fsr2h	equ	0xFDA
  5903                           fsr2l	equ	0xFD9
  5904                           status	equ	0xFD8
  5905                           
  5906 ;; *************** function _readKeypad *****************
  5907 ;; Defined at:
  5908 ;;		line 36 in file "keypad.c"
  5909 ;; Parameters:    Size  Location     Type
  5910 ;;		None
  5911 ;; Auto vars:     Size  Location     Type
  5912 ;;  key             1   36[COMRAM] unsigned char 
  5913 ;; Return value:  Size  Location     Type
  5914 ;;                  1    wreg      unsigned char 
  5915 ;; Registers used:
  5916 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  5917 ;; Tracked objects:
  5918 ;;		On entry : 0/0
  5919 ;;		On exit  : 0/0
  5920 ;;		Unchanged: 0/0
  5921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5923 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5925 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5926 ;;Total ram usage:        1 bytes
  5927 ;; Hardware stack levels used:    1
  5928 ;; Hardware stack levels required when called:    3
  5929 ;; This function calls:
  5930 ;;		Nothing
  5931 ;; This function is called by:
  5932 ;;		_sortBattery
  5933 ;;		_showMainMenu
  5934 ;;		_showRunSelect
  5935 ;;		_showRunMenu
  5936 ;;		_showRunTime
  5937 ;;		_showRunStats
  5938 ;;		_showErrorMessage
  5939 ;;		_debug
  5940 ;;		_pause
  5941 ;; This function uses a non-reentrant model
  5942 ;;
  5943                           
  5944                           	psect	text14
  5945  004482                     __ptext14:
  5946                           	opt stack 0
  5947  004482                     _readKeypad:
  5948                           	opt stack 26
  5949  004482                     l268:
  5950  004482  A281               	btfss	3969,1,c	;volatile
  5951  004484  D7FE               	goto	l268
  5952                           
  5953                           ;keypad.c: 38: char key = (PORTB & 0xF0) >> 4;
  5954  004486  3881               	swapf	3969,w,c	;volatile
  5955  004488  0B0F               	andlw	15
  5956  00448A  0B0F               	andlw	15
  5957  00448C  6E25               	movwf	readKeypad@key,c
  5958  00448E                     l271:
  5959  00448E  B281               	btfsc	3969,1,c	;volatile
  5960  004490  D7FE               	goto	l271
  5961                           
  5962                           ;keypad.c: 40: return keys[key];
  5963  004492  5025               	movf	readKeypad@key,w,c
  5964  004494  0D01               	mullw	1
  5965  004496  0E21               	movlw	low _keys
  5966  004498  24F3               	addwf	prodl,w,c
  5967  00449A  6EF6               	movwf	tblptrl,c
  5968  00449C  0EFE               	movlw	high _keys
  5969  00449E  20F4               	addwfc	prodh,w,c
  5970  0044A0  6EF7               	movwf	tblptrh,c
  5971  0044A2                     	if	0	;There are less than 3 active tblptr bytes
  5972  0044A2                     	endif
  5973  0044A2  0008               	tblrd		*
  5974  0044A4  50F5               	movf	tablat,w,c
  5975  0044A6  0012               	return	
  5976  0044A8                     __end_of_readKeypad:
  5977                           	opt stack 0
  5978                           tblptru	equ	0xFF8
  5979                           tblptrh	equ	0xFF7
  5980                           tblptrl	equ	0xFF6
  5981                           tablat	equ	0xFF5
  5982                           prodh	equ	0xFF4
  5983                           prodl	equ	0xFF3
  5984                           intcon	equ	0xFF2
  5985                           postinc0	equ	0xFEE
  5986                           wreg	equ	0xFE8
  5987                           postdec1	equ	0xFE5
  5988                           fsr1l	equ	0xFE1
  5989                           indf2	equ	0xFDF
  5990                           postinc2	equ	0xFDE
  5991                           postdec2	equ	0xFDD
  5992                           fsr2h	equ	0xFDA
  5993                           fsr2l	equ	0xFD9
  5994                           status	equ	0xFD8
  5995                           
  5996 ;; *************** function _showDateTime *****************
  5997 ;; Defined at:
  5998 ;;		line 59 in file "interface.c"
  5999 ;; Parameters:    Size  Location     Type
  6000 ;;		None
  6001 ;; Auto vars:     Size  Location     Type
  6002 ;;  t               2   12[BANK1 ] PTR int 
  6003 ;;		 -> getTime@time(14), 
  6004 ;;  year            2   10[BANK1 ] int 
  6005 ;;  mon             2    8[BANK1 ] int 
  6006 ;;  day             2    6[BANK1 ] int 
  6007 ;;  hour            2    4[BANK1 ] int 
  6008 ;;  min             2    2[BANK1 ] int 
  6009 ;;  sec             2    0[BANK1 ] int 
  6010 ;; Return value:  Size  Location     Type
  6011 ;;                  1    wreg      void 
  6012 ;; Registers used:
  6013 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6014 ;; Tracked objects:
  6015 ;;		On entry : 0/0
  6016 ;;		On exit  : 0/0
  6017 ;;		Unchanged: 0/0
  6018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6020 ;;      Locals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6021 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6022 ;;      Totals:         0       2      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6023 ;;Total ram usage:       16 bytes
  6024 ;; Hardware stack levels used:    1
  6025 ;; Hardware stack levels required when called:    8
  6026 ;; This function calls:
  6027 ;;		_getTime
  6028 ;;		_initRTC
  6029 ;;		_keyPressed
  6030 ;;		_lcdClear
  6031 ;;		_lcdHome
  6032 ;;		_printf
  6033 ;; This function is called by:
  6034 ;;		_showInterface
  6035 ;; This function uses a non-reentrant model
  6036 ;;
  6037                           
  6038                           	psect	text15
  6039  002F30                     __ptext15:
  6040                           	opt stack 0
  6041  002F30                     _showDateTime:
  6042                           	opt stack 21
  6043                           
  6044                           ;interface.c: 60: lcdClear();
  6045                           
  6046                           ;incstack = 0
  6047  002F30  EC0F  F023         	call	_lcdClear	;wreg free
  6048                           
  6049                           ;interface.c: 61: initRTC();
  6050  002F34  ECDC  F022         	call	_initRTC	;wreg free
  6051                           
  6052                           ;interface.c: 63: while(keyPressed() != 'A'){
  6053  002F38  D07D               	goto	l7470
  6054  002F3A                     l7448:
  6055                           
  6056                           ;interface.c: 64: int* t = getTime();
  6057  002F3A  ECEC  F01D         	call	_getTime	;wreg free
  6058  002F3E  C028  F10C         	movff	?_getTime,showDateTime@t
  6059  002F42  C029  F10D         	movff	?_getTime+1,showDateTime@t+1
  6060                           
  6061                           ;interface.c: 65: int sec = t[0], min = t[1], hour = t[2];
  6062  002F46  C10C  FFD9         	movff	showDateTime@t,fsr2l
  6063  002F4A  C10D  FFDA         	movff	showDateTime@t+1,fsr2h
  6064  002F4E  CFDE F100          	movff	postinc2,showDateTime@sec
  6065  002F52  CFDD F101          	movff	postdec2,showDateTime@sec+1
  6066  002F56  0101               	movlb	1	; () banked
  6067  002F58  EE20 F002          	lfsr	2,2
  6068  002F5C  510C               	movf	showDateTime@t& (0+255),w,b
  6069  002F5E  26D9               	addwf	fsr2l,f,c
  6070  002F60  510D               	movf	(showDateTime@t+1)& (0+255),w,b
  6071  002F62  22DA               	addwfc	fsr2h,f,c
  6072  002F64  CFDE F102          	movff	postinc2,showDateTime@min
  6073  002F68  CFDD F103          	movff	postdec2,showDateTime@min+1
  6074                           
  6075                           ; BSR set to: 1
  6076  002F6C  0101               	movlb	1	; () banked
  6077  002F6E  EE20 F004          	lfsr	2,4
  6078  002F72  510C               	movf	showDateTime@t& (0+255),w,b
  6079  002F74  26D9               	addwf	fsr2l,f,c
  6080  002F76  510D               	movf	(showDateTime@t+1)& (0+255),w,b
  6081  002F78  22DA               	addwfc	fsr2h,f,c
  6082  002F7A  CFDE F104          	movff	postinc2,showDateTime@hour
  6083  002F7E  CFDD F105          	movff	postdec2,showDateTime@hour+1
  6084                           
  6085                           ; BSR set to: 1
  6086                           ;interface.c: 66: int day = t[4], mon = t[5], year = t[6];
  6087  002F82  0101               	movlb	1	; () banked
  6088  002F84  EE20 F008          	lfsr	2,8
  6089  002F88  510C               	movf	showDateTime@t& (0+255),w,b
  6090  002F8A  26D9               	addwf	fsr2l,f,c
  6091  002F8C  510D               	movf	(showDateTime@t+1)& (0+255),w,b
  6092  002F8E  22DA               	addwfc	fsr2h,f,c
  6093  002F90  CFDE F106          	movff	postinc2,showDateTime@day
  6094  002F94  CFDD F107          	movff	postdec2,showDateTime@day+1
  6095                           
  6096                           ; BSR set to: 1
  6097  002F98  0101               	movlb	1	; () banked
  6098  002F9A  EE20 F00A          	lfsr	2,10
  6099  002F9E  510C               	movf	showDateTime@t& (0+255),w,b
  6100  002FA0  26D9               	addwf	fsr2l,f,c
  6101  002FA2  510D               	movf	(showDateTime@t+1)& (0+255),w,b
  6102  002FA4  22DA               	addwfc	fsr2h,f,c
  6103  002FA6  CFDE F108          	movff	postinc2,showDateTime@mon
  6104  002FAA  CFDD F109          	movff	postdec2,showDateTime@mon+1
  6105                           
  6106                           ; BSR set to: 1
  6107  002FAE  0101               	movlb	1	; () banked
  6108  002FB0  EE20 F00C          	lfsr	2,12
  6109  002FB4  510C               	movf	showDateTime@t& (0+255),w,b
  6110  002FB6  26D9               	addwf	fsr2l,f,c
  6111  002FB8  510D               	movf	(showDateTime@t+1)& (0+255),w,b
  6112  002FBA  22DA               	addwfc	fsr2h,f,c
  6113  002FBC  CFDE F10A          	movff	postinc2,showDateTime@year
  6114  002FC0  CFDD F10B          	movff	postdec2,showDateTime@year+1
  6115                           
  6116                           ; BSR set to: 1
  6117                           ;interface.c: 68: lcdHome();
  6118  002FC4  EC0B  F023         	call	_lcdHome	;wreg free
  6119                           
  6120                           ;interface.c: 69: printf("  20%02x/%02x/%02x\n",year,mon,day);
  6121  002FC8  0ECF               	movlw	low STR_10
  6122  002FCA  0100               	movlb	0	; () banked
  6123  002FCC  6FB9               	movwf	printf@f& (0+255),b
  6124  002FCE  0EFE               	movlw	high STR_10
  6125  002FD0  0100               	movlb	0	; () banked
  6126  002FD2  6FBA               	movwf	(printf@f+1)& (0+255),b
  6127  002FD4  C10A  F0BB         	movff	showDateTime@year,?_printf+2
  6128  002FD8  C10B  F0BC         	movff	showDateTime@year+1,?_printf+3
  6129  002FDC  C108  F0BD         	movff	showDateTime@mon,?_printf+4
  6130  002FE0  C109  F0BE         	movff	showDateTime@mon+1,?_printf+5
  6131  002FE4  C106  F0BF         	movff	showDateTime@day,?_printf+6
  6132  002FE8  C107  F0C0         	movff	showDateTime@day+1,?_printf+7
  6133  002FEC  EC09  F000         	call	_printf	;wreg free
  6134                           
  6135                           ;interface.c: 70: printf("   %02x:%02x:%02x   A>",hour,min,sec);
  6136  002FF0  0EB8               	movlw	low STR_11
  6137  002FF2  0100               	movlb	0	; () banked
  6138  002FF4  6FB9               	movwf	printf@f& (0+255),b
  6139  002FF6  0EFE               	movlw	high STR_11
  6140  002FF8  0100               	movlb	0	; () banked
  6141  002FFA  6FBA               	movwf	(printf@f+1)& (0+255),b
  6142  002FFC  C104  F0BB         	movff	showDateTime@hour,?_printf+2
  6143  003000  C105  F0BC         	movff	showDateTime@hour+1,?_printf+3
  6144  003004  C102  F0BD         	movff	showDateTime@min,?_printf+4
  6145  003008  C103  F0BE         	movff	showDateTime@min+1,?_printf+5
  6146  00300C  C100  F0BF         	movff	showDateTime@sec,?_printf+6
  6147  003010  C101  F0C0         	movff	showDateTime@sec+1,?_printf+7
  6148  003014  EC09  F000         	call	_printf	;wreg free
  6149                           
  6150                           ;interface.c: 71: _delay((unsigned long)((100)*(10000000/4000.0)));
  6151  003018  0E02               	movlw	2
  6152  00301A  0100               	movlb	0	; () banked
  6153  00301C  6FEC               	movwf	(??_showDateTime+1)& (0+255),b
  6154  00301E  0E45               	movlw	69
  6155  003020  0100               	movlb	0	; () banked
  6156  003022  6FEB               	movwf	??_showDateTime& (0+255),b
  6157  003024  0EA9               	movlw	169
  6158  003026                     u8567:
  6159  003026  2EE8               	decfsz	wreg,f,c
  6160  003028  D7FE               	bra	u8567
  6161  00302A  2FEB               	decfsz	??_showDateTime& (0+255),f,b
  6162  00302C  D7FC               	bra	u8567
  6163  00302E  2FEC               	decfsz	(??_showDateTime+1)& (0+255),f,b
  6164  003030  D7FA               	bra	u8567
  6165  003032  D000               	nop2	
  6166  003034                     l7470:
  6167  003034  ECF7  F022         	call	_keyPressed	;wreg free
  6168  003038  0A41               	xorlw	65
  6169  00303A  B4D8               	btfsc	status,2,c
  6170  00303C  0012               	return	
  6171  00303E  D77D               	goto	l7448
  6172  003040                     __end_of_showDateTime:
  6173                           	opt stack 0
  6174                           tblptru	equ	0xFF8
  6175                           tblptrh	equ	0xFF7
  6176                           tblptrl	equ	0xFF6
  6177                           tablat	equ	0xFF5
  6178                           prodh	equ	0xFF4
  6179                           prodl	equ	0xFF3
  6180                           intcon	equ	0xFF2
  6181                           postinc0	equ	0xFEE
  6182                           wreg	equ	0xFE8
  6183                           postdec1	equ	0xFE5
  6184                           fsr1l	equ	0xFE1
  6185                           indf2	equ	0xFDF
  6186                           postinc2	equ	0xFDE
  6187                           postdec2	equ	0xFDD
  6188                           fsr2h	equ	0xFDA
  6189                           fsr2l	equ	0xFD9
  6190                           status	equ	0xFD8
  6191                           
  6192 ;; *************** function _printf *****************
  6193 ;; Defined at:
  6194 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6195 ;; Parameters:    Size  Location     Type
  6196 ;;  f               2   57[BANK0 ] PTR const unsigned char 
  6197 ;;		 -> STR_23(17), STR_22(11), STR_21(19), STR_20(18), 
  6198 ;;		 -> STR_19(17), STR_18(24), STR_17(17), STR_16(19), 
  6199 ;;		 -> STR_15(17), STR_14(18), STR_13(17), STR_12(18), 
  6200 ;;		 -> STR_11(23), STR_10(20), STR_9(8), STR_8(11), 
  6201 ;;		 -> STR_7(11), STR_6(11), STR_5(12), STR_4(16), 
  6202 ;;		 -> STR_3(30), STR_2(29), STR_1(10), 
  6203 ;; Auto vars:     Size  Location     Type
  6204 ;;  idx             1   80[BANK0 ] unsigned char 
  6205 ;;  val             4   96[BANK0 ] unsigned long 
  6206 ;;  tmpval          4   87[BANK0 ] struct .
  6207 ;;  fval            3   93[BANK0 ] struct .
  6208 ;;  prec            2  104[BANK0 ] int 
  6209 ;;  flag            2  102[BANK0 ] unsigned short 
  6210 ;;  width           2  100[BANK0 ] int 
  6211 ;;  exp             2   91[BANK0 ] int 
  6212 ;;  ap              2   85[BANK0 ] PTR void [1]
  6213 ;;		 -> ?_printf(2), 
  6214 ;;  len             2   83[BANK0 ] unsigned int 
  6215 ;;  cp              2   81[BANK0 ] PTR const unsigned char 
  6216 ;;		 -> printf@c(1), 
  6217 ;;  c               1  106[BANK0 ] char 
  6218 ;;  d               1    0        unsigned char 
  6219 ;; Return value:  Size  Location     Type
  6220 ;;                  2   57[BANK0 ] int 
  6221 ;; Registers used:
  6222 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6223 ;; Tracked objects:
  6224 ;;		On entry : 0/0
  6225 ;;		On exit  : 0/0
  6226 ;;		Unchanged: 0/0
  6227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6228 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6229 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6230 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6231 ;;      Totals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6232 ;;Total ram usage:       50 bytes
  6233 ;; Hardware stack levels used:    1
  6234 ;; Hardware stack levels required when called:    7
  6235 ;; This function calls:
  6236 ;;		___awdiv
  6237 ;;		___ftadd
  6238 ;;		___ftge
  6239 ;;		___ftmul
  6240 ;;		___ftneg
  6241 ;;		___ftsub
  6242 ;;		___fttol
  6243 ;;		___lldiv
  6244 ;;		___llmod
  6245 ;;		___lltoft
  6246 ;;		___wmul
  6247 ;;		__div_to_l_
  6248 ;;		__tdiv_to_l_
  6249 ;;		_fround
  6250 ;;		_isdigit
  6251 ;;		_putch
  6252 ;;		_scale
  6253 ;; This function is called by:
  6254 ;;		_main
  6255 ;;		_sortBattery
  6256 ;;		_showDateTime
  6257 ;;		_showMainMenu
  6258 ;;		_showRunSelect
  6259 ;;		_showRunMenu
  6260 ;;		_showRunTime
  6261 ;;		_showRunStats
  6262 ;;		_showErrorMessage
  6263 ;;		_debug
  6264 ;;		_pause
  6265 ;;		_testFrequency
  6266 ;; This function uses a non-reentrant model
  6267 ;;
  6268                           
  6269                           	psect	text16
  6270  000012                     __ptext16:
  6271                           	opt stack 0
  6272  000012                     _printf:
  6273                           	opt stack 22
  6274                           
  6275                           ;doprnt.c: 466: va_list ap;
  6276                           ;doprnt.c: 499: signed char c;
  6277                           ;doprnt.c: 501: int width;
  6278                           ;doprnt.c: 504: int prec;
  6279                           ;doprnt.c: 508: unsigned short flag;
  6280                           ;doprnt.c: 515: char d;
  6281                           ;doprnt.c: 516: double fval;
  6282                           ;doprnt.c: 517: int exp;
  6283                           ;doprnt.c: 523: union {
  6284                           ;doprnt.c: 524: unsigned long vd;
  6285                           ;doprnt.c: 525: double integ;
  6286                           ;doprnt.c: 526: } tmpval;
  6287                           ;doprnt.c: 528: unsigned long val;
  6288                           ;doprnt.c: 529: unsigned len;
  6289                           ;doprnt.c: 530: const char * cp;
  6290                           ;doprnt.c: 533: *ap = __va_start();
  6291                           
  6292                           ;incstack = 0
  6293  000012  0EBB               	movlw	low (?_printf+2)
  6294  000014  0100               	movlb	0	; () banked
  6295  000016  6FD5               	movwf	printf@ap& (0+255),b
  6296  000018  0E00               	movlw	high (?_printf+2)
  6297  00001A  0100               	movlb	0	; () banked
  6298  00001C  6FD6               	movwf	(printf@ap+1)& (0+255),b
  6299                           
  6300                           ;doprnt.c: 536: while(c = *f++) {
  6301  00001E  EFF5  F006         	goto	l7158
  6302  000022                     l6792:
  6303                           
  6304                           ; BSR set to: 0
  6305                           ;doprnt.c: 538: if(c != '%')
  6306  000022  0E25               	movlw	37
  6307  000024  0100               	movlb	0	; () banked
  6308  000026  19EA               	xorwf	printf@c& (0+255),w,b
  6309  000028  B4D8               	btfsc	status,2,c
  6310  00002A  D006               	goto	l6796
  6311                           
  6312                           ; BSR set to: 0
  6313                           ;doprnt.c: 540: {
  6314                           ;doprnt.c: 541: (putch(c) );
  6315  00002C  0100               	movlb	0	; () banked
  6316  00002E  51EA               	movf	printf@c& (0+255),w,b
  6317  000030  EC8C  F022         	call	_putch
  6318                           
  6319                           ;doprnt.c: 542: continue;
  6320  000034  EFF5  F006         	goto	l7158
  6321  000038                     l6796:
  6322                           
  6323                           ;doprnt.c: 543: }
  6324                           ;doprnt.c: 546: width = 0;
  6325  000038  0E00               	movlw	0
  6326  00003A  0100               	movlb	0	; () banked
  6327  00003C  6FE5               	movwf	(printf@width+1)& (0+255),b
  6328  00003E  0E00               	movlw	0
  6329  000040  6FE4               	movwf	printf@width& (0+255),b
  6330                           
  6331                           ;doprnt.c: 548: flag = 0;
  6332  000042  0E00               	movlw	0
  6333  000044  0100               	movlb	0	; () banked
  6334  000046  6FE7               	movwf	(printf@flag+1)& (0+255),b
  6335  000048  0E00               	movlw	0
  6336  00004A  6FE6               	movwf	printf@flag& (0+255),b
  6337                           
  6338                           ; BSR set to: 0
  6339                           ;doprnt.c: 551: switch(*f) {
  6340                           
  6341                           ;doprnt.c: 550: for(;;) {
  6342  00004C  D005               	goto	l6802
  6343  00004E                     l6798:
  6344                           
  6345                           ;doprnt.c: 580: flag |= 0x04;
  6346  00004E  0100               	movlb	0	; () banked
  6347  000050  85E6               	bsf	printf@flag& (0+255),2,b
  6348                           
  6349                           ;doprnt.c: 581: f++;
  6350  000052  0100               	movlb	0	; () banked
  6351  000054  4BB9               	infsnz	printf@f& (0+255),f,b
  6352  000056  2BBA               	incf	(printf@f+1)& (0+255),f,b
  6353  000058                     l6802:
  6354  000058  C0B9  FFF6         	movff	printf@f,tblptrl
  6355  00005C  C0BA  FFF7         	movff	printf@f+1,tblptrh
  6356  000060                     	if	0	;tblptru may be non-zero
  6357  000060                     	endif
  6358  000060                     	if	0	;tblptru may be non-zero
  6359  000060                     	endif
  6360  000060  0008               	tblrd		*
  6361  000062  50F5               	movf	tablat,w,c
  6362                           
  6363                           ; Switch size 1, requested type "space"
  6364                           ; Number of cases is 1, Range of values is 48 to 48
  6365                           ; switch strategies available:
  6366                           ; Name         Instructions Cycles
  6367                           ; simple_byte            4     3 (average)
  6368                           ;	Chosen strategy is simple_byte
  6369  000064  0A30               	xorlw	48	; case 48
  6370  000066  B4D8               	btfsc	status,2,c
  6371  000068  D7F2               	goto	l6798
  6372                           
  6373                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6374                           
  6375                           ;doprnt.c: 586: }
  6376                           
  6377                           ;doprnt.c: 585: break;
  6378  00006A  C0B9  FFF6         	movff	printf@f,tblptrl
  6379  00006E  C0BA  FFF7         	movff	printf@f+1,tblptrh
  6380  000072                     	if	0	;tblptru may be non-zero
  6381  000072                     	endif
  6382  000072                     	if	0	;tblptru may be non-zero
  6383  000072                     	endif
  6384  000072  0008               	tblrd		*
  6385  000074  50F5               	movf	tablat,w,c
  6386  000076  ECBE  F022         	call	_isdigit
  6387  00007A  A0D8               	btfss	status,0,c
  6388  00007C  D03F               	goto	l6816
  6389                           
  6390                           ;doprnt.c: 598: width = 0;
  6391  00007E  0E00               	movlw	0
  6392  000080  0100               	movlb	0	; () banked
  6393  000082  6FE5               	movwf	(printf@width+1)& (0+255),b
  6394  000084  0E00               	movlw	0
  6395  000086  6FE4               	movwf	printf@width& (0+255),b
  6396  000088                     l6808:
  6397                           
  6398                           ;doprnt.c: 600: width *= 10;
  6399  000088  C0E4  F033         	movff	printf@width,___wmul@multiplier
  6400  00008C  C0E5  F034         	movff	printf@width+1,___wmul@multiplier+1
  6401  000090  0E00               	movlw	0
  6402  000092  6E36               	movwf	___wmul@multiplicand+1,c
  6403  000094  0E0A               	movlw	10
  6404  000096  6E35               	movwf	___wmul@multiplicand,c
  6405  000098  EC67  F022         	call	___wmul	;wreg free
  6406  00009C  C033  F0E4         	movff	?___wmul,printf@width
  6407  0000A0  C034  F0E5         	movff	?___wmul+1,printf@width+1
  6408                           
  6409                           ;doprnt.c: 601: width += *f++ - '0';
  6410  0000A4  0ED0               	movlw	208
  6411  0000A6  0100               	movlb	0	; () banked
  6412  0000A8  6FC7               	movwf	??_printf& (0+255),b
  6413  0000AA  0EFF               	movlw	255
  6414  0000AC  0100               	movlb	0	; () banked
  6415  0000AE  6FC8               	movwf	(??_printf+1)& (0+255),b
  6416  0000B0  C0B9  FFF6         	movff	printf@f,tblptrl
  6417  0000B4  C0BA  FFF7         	movff	printf@f+1,tblptrh
  6418  0000B8                     	if	0	;tblptru may be non-zero
  6419  0000B8                     	endif
  6420  0000B8                     	if	0	;tblptru may be non-zero
  6421  0000B8                     	endif
  6422  0000B8  0008               	tblrd		*
  6423  0000BA  50F5               	movf	tablat,w,c
  6424  0000BC  0100               	movlb	0	; () banked
  6425  0000BE  6FC9               	movwf	(??_printf+2)& (0+255),b
  6426  0000C0  6BCA               	clrf	(??_printf+3)& (0+255),b
  6427  0000C2  0100               	movlb	0	; () banked
  6428  0000C4  51C7               	movf	??_printf& (0+255),w,b
  6429  0000C6  0100               	movlb	0	; () banked
  6430  0000C8  27C9               	addwf	(??_printf+2)& (0+255),f,b
  6431  0000CA  0100               	movlb	0	; () banked
  6432  0000CC  51C8               	movf	(??_printf+1)& (0+255),w,b
  6433  0000CE  0100               	movlb	0	; () banked
  6434  0000D0  23CA               	addwfc	(??_printf+3)& (0+255),f,b
  6435  0000D2  0100               	movlb	0	; () banked
  6436  0000D4  51C9               	movf	(??_printf+2)& (0+255),w,b
  6437  0000D6  0100               	movlb	0	; () banked
  6438  0000D8  27E4               	addwf	printf@width& (0+255),f,b
  6439  0000DA  0100               	movlb	0	; () banked
  6440  0000DC  51CA               	movf	(??_printf+3)& (0+255),w,b
  6441  0000DE  0100               	movlb	0	; () banked
  6442  0000E0  23E5               	addwfc	(printf@width+1)& (0+255),f,b
  6443                           
  6444                           ; BSR set to: 0
  6445  0000E2  0100               	movlb	0	; () banked
  6446  0000E4  4BB9               	infsnz	printf@f& (0+255),f,b
  6447  0000E6  2BBA               	incf	(printf@f+1)& (0+255),f,b
  6448                           
  6449                           ; BSR set to: 0
  6450                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6451  0000E8  C0B9  FFF6         	movff	printf@f,tblptrl
  6452  0000EC  C0BA  FFF7         	movff	printf@f+1,tblptrh
  6453  0000F0                     	if	0	;tblptru may be non-zero
  6454  0000F0                     	endif
  6455  0000F0                     	if	0	;tblptru may be non-zero
  6456  0000F0                     	endif
  6457  0000F0  0008               	tblrd		*
  6458  0000F2  50F5               	movf	tablat,w,c
  6459  0000F4  ECBE  F022         	call	_isdigit
  6460  0000F8  B0D8               	btfsc	status,0,c
  6461  0000FA  D7C6               	goto	l6808
  6462  0000FC                     l6816:
  6463                           
  6464                           ;doprnt.c: 608: }
  6465                           ;doprnt.c: 611: if(*f == '.') {
  6466  0000FC  C0B9  FFF6         	movff	printf@f,tblptrl
  6467  000100  C0BA  FFF7         	movff	printf@f+1,tblptrh
  6468  000104                     	if	0	;tblptru may be non-zero
  6469  000104                     	endif
  6470  000104                     	if	0	;tblptru may be non-zero
  6471  000104                     	endif
  6472  000104  0008               	tblrd		*
  6473  000106  50F5               	movf	tablat,w,c
  6474  000108  0A2E               	xorlw	46
  6475  00010A  A4D8               	btfss	status,2,c
  6476  00010C  D034               	goto	l6828
  6477                           
  6478                           ;doprnt.c: 612: flag |= 0x4000;
  6479  00010E  0100               	movlb	0	; () banked
  6480  000110  8DE7               	bsf	(printf@flag+1)& (0+255),6,b
  6481                           
  6482                           ;doprnt.c: 613: f++;
  6483  000112  0100               	movlb	0	; () banked
  6484  000114  4BB9               	infsnz	printf@f& (0+255),f,b
  6485  000116  2BBA               	incf	(printf@f+1)& (0+255),f,b
  6486                           
  6487                           ; BSR set to: 0
  6488                           ;doprnt.c: 620: {
  6489                           ;doprnt.c: 621: prec = 0;
  6490  000118  0E00               	movlw	0
  6491  00011A  0100               	movlb	0	; () banked
  6492  00011C  6FE9               	movwf	(printf@prec+1)& (0+255),b
  6493  00011E  0E00               	movlw	0
  6494  000120  6FE8               	movwf	printf@prec& (0+255),b
  6495                           
  6496                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  6497  000122  D01E               	goto	l6826
  6498  000124                     l6822:
  6499                           
  6500                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  6501  000124  C0E8  F033         	movff	printf@prec,___wmul@multiplier
  6502  000128  C0E9  F034         	movff	printf@prec+1,___wmul@multiplier+1
  6503  00012C  0E00               	movlw	0
  6504  00012E  6E36               	movwf	___wmul@multiplicand+1,c
  6505  000130  0E0A               	movlw	10
  6506  000132  6E35               	movwf	___wmul@multiplicand,c
  6507  000134  EC67  F022         	call	___wmul	;wreg free
  6508  000138  C0B9  FFF6         	movff	printf@f,tblptrl
  6509  00013C  C0BA  FFF7         	movff	printf@f+1,tblptrh
  6510  000140                     	if	0	;tblptru may be non-zero
  6511  000140                     	endif
  6512  000140                     	if	0	;tblptru may be non-zero
  6513  000140                     	endif
  6514  000140  0008               	tblrd		*
  6515  000142  50F5               	movf	tablat,w,c
  6516  000144  2633               	addwf	?___wmul,f,c
  6517  000146  0E00               	movlw	0
  6518  000148  2234               	addwfc	?___wmul+1,f,c
  6519  00014A  0ED0               	movlw	208
  6520  00014C  2433               	addwf	?___wmul,w,c
  6521  00014E  0100               	movlb	0	; () banked
  6522  000150  6FE8               	movwf	printf@prec& (0+255),b
  6523  000152  0EFF               	movlw	255
  6524  000154  2034               	addwfc	?___wmul+1,w,c
  6525  000156  0100               	movlb	0	; () banked
  6526  000158  6FE9               	movwf	(printf@prec+1)& (0+255),b
  6527                           
  6528                           ; BSR set to: 0
  6529  00015A  0100               	movlb	0	; () banked
  6530  00015C  4BB9               	infsnz	printf@f& (0+255),f,b
  6531  00015E  2BBA               	incf	(printf@f+1)& (0+255),f,b
  6532  000160                     l6826:
  6533                           
  6534                           ; BSR set to: 0
  6535  000160  C0B9  FFF6         	movff	printf@f,tblptrl
  6536  000164  C0BA  FFF7         	movff	printf@f+1,tblptrh
  6537  000168                     	if	0	;tblptru may be non-zero
  6538  000168                     	endif
  6539  000168                     	if	0	;tblptru may be non-zero
  6540  000168                     	endif
  6541  000168  0008               	tblrd		*
  6542  00016A  50F5               	movf	tablat,w,c
  6543  00016C  ECBE  F022         	call	_isdigit
  6544  000170  A0D8               	btfss	status,0,c
  6545  000172  D07D               	goto	l6870
  6546  000174  D7D7               	goto	l6822
  6547  000176                     l6828:
  6548                           
  6549                           ;doprnt.c: 626: prec = 0;
  6550  000176  0E00               	movlw	0
  6551  000178  0100               	movlb	0	; () banked
  6552  00017A  6FE9               	movwf	(printf@prec+1)& (0+255),b
  6553  00017C  0E00               	movlw	0
  6554  00017E  6FE8               	movwf	printf@prec& (0+255),b
  6555                           
  6556                           ; BSR set to: 0
  6557                           ;doprnt.c: 628: flag |= 0x1000;
  6558  000180  0100               	movlb	0	; () banked
  6559  000182  89E7               	bsf	(printf@flag+1)& (0+255),4,b
  6560                           
  6561                           ; BSR set to: 0
  6562                           ;doprnt.c: 635: switch(c = *f++) {
  6563                           
  6564                           ;doprnt.c: 630: }
  6565                           ;doprnt.c: 633: loop:
  6566                           
  6567                           ; BSR set to: 0
  6568  000184  D074               	goto	l6870
  6569  000186                     l6832:
  6570                           
  6571                           ; BSR set to: 0
  6572                           ;doprnt.c: 643: flag |= 0x10;
  6573  000186  0100               	movlb	0	; () banked
  6574  000188  89E6               	bsf	printf@flag& (0+255),4,b
  6575                           
  6576                           ;doprnt.c: 644: goto loop;
  6577  00018A  D071               	goto	l6870
  6578  00018C                     l6834:
  6579                           
  6580                           ; BSR set to: 0
  6581                           ;doprnt.c: 663: flag |= 0x400;
  6582  00018C  0100               	movlb	0	; () banked
  6583  00018E  85E7               	bsf	(printf@flag+1)& (0+255),2,b
  6584                           
  6585                           ; BSR set to: 0
  6586                           ;doprnt.c: 698: case 'i':
  6587                           ;doprnt.c: 699: break;
  6588                           
  6589                           ; BSR set to: 0
  6590                           
  6591                           ;doprnt.c: 697: case 'd':
  6592                           
  6593                           ;doprnt.c: 664: break;
  6594  000190  D090               	goto	l6872
  6595  000192                     l6836:
  6596                           
  6597                           ; BSR set to: 0
  6598                           ;doprnt.c: 721: flag |= 0x80;
  6599  000192  0100               	movlb	0	; () banked
  6600  000194  8FE6               	bsf	printf@flag& (0+255),7,b
  6601                           
  6602                           ;doprnt.c: 723: break;
  6603  000196  D08D               	goto	l6872
  6604  000198                     l6838:
  6605                           
  6606                           ; BSR set to: 0
  6607                           ;doprnt.c: 753: if(prec && prec < len)
  6608  000198  0100               	movlb	0	; () banked
  6609  00019A  51E8               	movf	printf@prec& (0+255),w,b
  6610  00019C  0100               	movlb	0	; () banked
  6611  00019E  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  6612  0001A0  B4D8               	btfsc	status,2,c
  6613  0001A2  D00E               	goto	l6844
  6614                           
  6615                           ; BSR set to: 0
  6616  0001A4  0100               	movlb	0	; () banked
  6617  0001A6  51D3               	movf	printf@len& (0+255),w,b
  6618  0001A8  0100               	movlb	0	; () banked
  6619  0001AA  5DE8               	subwf	printf@prec& (0+255),w,b
  6620  0001AC  0100               	movlb	0	; () banked
  6621  0001AE  51D4               	movf	(printf@len+1)& (0+255),w,b
  6622  0001B0  0100               	movlb	0	; () banked
  6623  0001B2  59E9               	subwfb	(printf@prec+1)& (0+255),w,b
  6624  0001B4  B0D8               	btfsc	status,0,c
  6625  0001B6  D004               	goto	l6844
  6626                           
  6627                           ; BSR set to: 0
  6628                           ;doprnt.c: 754: len = prec;
  6629  0001B8  C0E8  F0D3         	movff	printf@prec,printf@len
  6630  0001BC  C0E9  F0D4         	movff	printf@prec+1,printf@len+1
  6631  0001C0                     l6844:
  6632                           
  6633                           ; BSR set to: 0
  6634                           ;doprnt.c: 757: if(width > len)
  6635  0001C0  0100               	movlb	0	; () banked
  6636  0001C2  51E4               	movf	printf@width& (0+255),w,b
  6637  0001C4  0100               	movlb	0	; () banked
  6638  0001C6  5DD3               	subwf	printf@len& (0+255),w,b
  6639  0001C8  0100               	movlb	0	; () banked
  6640  0001CA  51E5               	movf	(printf@width+1)& (0+255),w,b
  6641  0001CC  0100               	movlb	0	; () banked
  6642  0001CE  59D4               	subwfb	(printf@len+1)& (0+255),w,b
  6643  0001D0  B0D8               	btfsc	status,0,c
  6644  0001D2  D009               	goto	l6848
  6645                           
  6646                           ; BSR set to: 0
  6647                           ;doprnt.c: 758: width -= len;
  6648  0001D4  0100               	movlb	0	; () banked
  6649  0001D6  51D3               	movf	printf@len& (0+255),w,b
  6650  0001D8  0100               	movlb	0	; () banked
  6651  0001DA  5FE4               	subwf	printf@width& (0+255),f,b
  6652  0001DC  0100               	movlb	0	; () banked
  6653  0001DE  51D4               	movf	(printf@len+1)& (0+255),w,b
  6654  0001E0  0100               	movlb	0	; () banked
  6655  0001E2  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  6656  0001E4  D009               	goto	l6852
  6657  0001E6                     l6848:
  6658                           
  6659                           ; BSR set to: 0
  6660                           ;doprnt.c: 759: else
  6661                           ;doprnt.c: 760: width = 0;
  6662  0001E6  0E00               	movlw	0
  6663  0001E8  0100               	movlb	0	; () banked
  6664  0001EA  6FE5               	movwf	(printf@width+1)& (0+255),b
  6665  0001EC  0E00               	movlw	0
  6666  0001EE  6FE4               	movwf	printf@width& (0+255),b
  6667                           
  6668                           ; BSR set to: 0
  6669                           ;doprnt.c: 764: while(width--)
  6670  0001F0  D003               	goto	l6852
  6671  0001F2                     l6850:
  6672                           
  6673                           ; BSR set to: 0
  6674                           ;doprnt.c: 765: (putch(' ') );
  6675  0001F2  0E20               	movlw	32
  6676  0001F4  EC8C  F022         	call	_putch
  6677  0001F8                     l6852:
  6678  0001F8  0100               	movlb	0	; () banked
  6679  0001FA  07E4               	decf	printf@width& (0+255),f,b
  6680  0001FC  A0D8               	btfss	status,0,c
  6681  0001FE  07E5               	decf	(printf@width+1)& (0+255),f,b
  6682  000200  0100               	movlb	0	; () banked
  6683  000202  29E4               	incf	printf@width& (0+255),w,b
  6684  000204  E1F6               	bnz	l6850
  6685  000206  0100               	movlb	0	; () banked
  6686  000208  29E5               	incf	(printf@width+1)& (0+255),w,b
  6687  00020A  B4D8               	btfsc	status,2,c
  6688  00020C  D00B               	goto	l6858
  6689  00020E  D7F1               	goto	l6850
  6690  000210                     l6854:
  6691                           
  6692                           ; BSR set to: 0
  6693                           ;doprnt.c: 768: (putch(*cp++) );
  6694  000210  C0D1  FFD9         	movff	printf@cp,fsr2l
  6695  000214  C0D2  FFDA         	movff	printf@cp+1,fsr2h
  6696  000218  50DF               	movf	indf2,w,c
  6697  00021A  EC8C  F022         	call	_putch
  6698  00021E  0100               	movlb	0	; () banked
  6699  000220  4BD1               	infsnz	printf@cp& (0+255),f,b
  6700  000222  2BD2               	incf	(printf@cp+1)& (0+255),f,b
  6701  000224                     l6858:
  6702                           
  6703                           ; BSR set to: 0
  6704  000224  0100               	movlb	0	; () banked
  6705  000226  07D3               	decf	printf@len& (0+255),f,b
  6706  000228  A0D8               	btfss	status,0,c
  6707  00022A  07D4               	decf	(printf@len+1)& (0+255),f,b
  6708  00022C  0100               	movlb	0	; () banked
  6709  00022E  29D3               	incf	printf@len& (0+255),w,b
  6710  000230  E1EF               	bnz	l6854
  6711  000232  0100               	movlb	0	; () banked
  6712  000234  29D4               	incf	(printf@len+1)& (0+255),w,b
  6713  000236  B4D8               	btfsc	status,2,c
  6714  000238  EFF5  F006         	goto	l7158
  6715  00023C  D7E9               	goto	l6854
  6716  00023E                     l6860:
  6717                           
  6718                           ; BSR set to: 0
  6719                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  6720  00023E  C0D5  FFD9         	movff	printf@ap,fsr2l
  6721  000242  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  6722  000246  50DF               	movf	indf2,w,c
  6723  000248  0100               	movlb	0	; () banked
  6724  00024A  6FEA               	movwf	printf@c& (0+255),b
  6725                           
  6726                           ; BSR set to: 0
  6727  00024C  0E02               	movlw	2
  6728  00024E  0100               	movlb	0	; () banked
  6729  000250  27D5               	addwf	printf@ap& (0+255),f,b
  6730  000252  0E00               	movlw	0
  6731  000254  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  6732  000256                     l6864:
  6733                           
  6734                           ; BSR set to: 0
  6735                           ;doprnt.c: 805: cp = (char *)&c;
  6736  000256  0EEA               	movlw	low printf@c
  6737  000258  0100               	movlb	0	; () banked
  6738  00025A  6FD1               	movwf	printf@cp& (0+255),b
  6739  00025C  0E00               	movlw	high printf@c
  6740  00025E  0100               	movlb	0	; () banked
  6741  000260  6FD2               	movwf	(printf@cp+1)& (0+255),b
  6742                           
  6743                           ; BSR set to: 0
  6744                           ;doprnt.c: 806: len = 1;
  6745  000262  0E00               	movlw	0
  6746  000264  0100               	movlb	0	; () banked
  6747  000266  6FD4               	movwf	(printf@len+1)& (0+255),b
  6748  000268  0E01               	movlw	1
  6749  00026A  6FD3               	movwf	printf@len& (0+255),b
  6750                           
  6751                           ;doprnt.c: 807: goto dostring;
  6752  00026C  D795               	goto	l6838
  6753  00026E                     l6870:
  6754  00026E  C0B9  FFF6         	movff	printf@f,tblptrl
  6755  000272  C0BA  FFF7         	movff	printf@f+1,tblptrh
  6756  000276  0100               	movlb	0	; () banked
  6757  000278  4BB9               	infsnz	printf@f& (0+255),f,b
  6758  00027A  2BBA               	incf	(printf@f+1)& (0+255),f,b
  6759  00027C                     	if	0	;tblptru may be non-zero
  6760  00027C                     	endif
  6761  00027C                     	if	0	;tblptru may be non-zero
  6762  00027C                     	endif
  6763  00027C  0008               	tblrd		*
  6764  00027E  CFF5 F0EA          	movff	tablat,printf@c
  6765  000282  0100               	movlb	0	; () banked
  6766  000284  51EA               	movf	printf@c& (0+255),w,b
  6767                           
  6768                           ; Switch size 1, requested type "space"
  6769                           ; Number of cases is 7, Range of values is 0 to 120
  6770                           ; switch strategies available:
  6771                           ; Name         Instructions Cycles
  6772                           ; simple_byte           22    12 (average)
  6773                           ;	Chosen strategy is simple_byte
  6774  000286  0A00               	xorlw	0	; case 0
  6775  000288  B4D8               	btfsc	status,2,c
  6776  00028A  0012               	return	
  6777  00028C  0A63               	xorlw	99	; case 99
  6778  00028E  B4D8               	btfsc	status,2,c
  6779  000290  D7D6               	goto	l6860
  6780  000292  0A07               	xorlw	7	; case 100
  6781  000294  B4D8               	btfsc	status,2,c
  6782  000296  D00D               	goto	l6872
  6783  000298  0A02               	xorlw	2	; case 102
  6784  00029A  B4D8               	btfsc	status,2,c
  6785  00029C  D777               	goto	l6834
  6786  00029E  0A0F               	xorlw	15	; case 105
  6787  0002A0  B4D8               	btfsc	status,2,c
  6788  0002A2  D007               	goto	l6872
  6789  0002A4  0A05               	xorlw	5	; case 108
  6790  0002A6  B4D8               	btfsc	status,2,c
  6791  0002A8  D76E               	goto	l6832
  6792  0002AA  0A14               	xorlw	20	; case 120
  6793  0002AC  B4D8               	btfsc	status,2,c
  6794  0002AE  D771               	goto	l6836
  6795  0002B0  D7D2               	goto	l6864
  6796  0002B2                     l6872:
  6797                           
  6798                           ; BSR set to: 0
  6799                           ;doprnt.c: 825: if(flag & (0x700)) {
  6800  0002B2  0E07               	movlw	7
  6801  0002B4  0100               	movlb	0	; () banked
  6802  0002B6  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  6803  0002B8  B4D8               	btfsc	status,2,c
  6804  0002BA  D36D               	goto	l789
  6805                           
  6806                           ; BSR set to: 0
  6807                           ;doprnt.c: 827: if(flag & 0x1000)
  6808  0002BC  0100               	movlb	0	; () banked
  6809  0002BE  A9E7               	btfss	(printf@flag+1)& (0+255),4,b
  6810  0002C0  D005               	goto	l6878
  6811                           
  6812                           ; BSR set to: 0
  6813                           ;doprnt.c: 829: prec = 6;
  6814  0002C2  0E00               	movlw	0
  6815  0002C4  0100               	movlb	0	; () banked
  6816  0002C6  6FE9               	movwf	(printf@prec+1)& (0+255),b
  6817  0002C8  0E06               	movlw	6
  6818  0002CA  6FE8               	movwf	printf@prec& (0+255),b
  6819  0002CC                     l6878:
  6820                           
  6821                           ; BSR set to: 0
  6822                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  6823  0002CC  C0D5  FFD9         	movff	printf@ap,fsr2l
  6824  0002D0  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  6825  0002D4  CFDE F0DD          	movff	postinc2,printf@fval
  6826  0002D8  CFDE F0DE          	movff	postinc2,printf@fval+1
  6827  0002DC  CFDD F0DF          	movff	postdec2,printf@fval+2
  6828                           
  6829                           ; BSR set to: 0
  6830  0002E0  0E03               	movlw	3
  6831  0002E2  0100               	movlb	0	; () banked
  6832  0002E4  27D5               	addwf	printf@ap& (0+255),f,b
  6833  0002E6  0E00               	movlw	0
  6834  0002E8  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  6835                           
  6836                           ; BSR set to: 0
  6837                           ;doprnt.c: 831: if(fval < 0.0) {
  6838  0002EA  0100               	movlb	0	; () banked
  6839  0002EC  AFDF               	btfss	(printf@fval+2)& (0+255),7,b
  6840  0002EE  D011               	goto	l6888
  6841                           
  6842                           ; BSR set to: 0
  6843                           ;doprnt.c: 832: fval = -fval;
  6844  0002F0  C0DD  F025         	movff	printf@fval,___ftneg@f1
  6845  0002F4  C0DE  F026         	movff	printf@fval+1,___ftneg@f1+1
  6846  0002F8  C0DF  F027         	movff	printf@fval+2,___ftneg@f1+2
  6847  0002FC  EC7A  F022         	call	___ftneg	;wreg free
  6848  000300  C025  F0DD         	movff	?___ftneg,printf@fval
  6849  000304  C026  F0DE         	movff	?___ftneg+1,printf@fval+1
  6850  000308  C027  F0DF         	movff	?___ftneg+2,printf@fval+2
  6851                           
  6852                           ;doprnt.c: 833: flag |= 0x03;
  6853  00030C  0E03               	movlw	3
  6854  00030E  0100               	movlb	0	; () banked
  6855  000310  13E6               	iorwf	printf@flag& (0+255),f,b
  6856  000312                     l6888:
  6857                           
  6858                           ; BSR set to: 0
  6859                           ;doprnt.c: 834: }
  6860                           ;doprnt.c: 835: exp = 0;
  6861  000312  0E00               	movlw	0
  6862  000314  0100               	movlb	0	; () banked
  6863  000316  6FDC               	movwf	(printf@exp+1)& (0+255),b
  6864  000318  0E00               	movlw	0
  6865  00031A  6FDB               	movwf	printf@exp& (0+255),b
  6866                           
  6867                           ; BSR set to: 0
  6868                           ;doprnt.c: 836: if( fval!=0) {
  6869  00031C  0100               	movlb	0	; () banked
  6870  00031E  51DD               	movf	printf@fval& (0+255),w,b
  6871  000320  0100               	movlb	0	; () banked
  6872  000322  11DE               	iorwf	(printf@fval+1)& (0+255),w,b
  6873  000324  0100               	movlb	0	; () banked
  6874  000326  11DF               	iorwf	(printf@fval+2)& (0+255),w,b
  6875  000328  B4D8               	btfsc	status,2,c
  6876  00032A  D091               	goto	l6916
  6877                           
  6878                           ; BSR set to: 0
  6879                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  6880  00032C  0E82               	movlw	130
  6881  00032E  0100               	movlb	0	; () banked
  6882  000330  6FC7               	movwf	??_printf& (0+255),b
  6883  000332  0EFF               	movlw	255
  6884  000334  0100               	movlb	0	; () banked
  6885  000336  6FC8               	movwf	(??_printf+1)& (0+255),b
  6886  000338  C0DD  F0C9         	movff	printf@fval,??_printf+2
  6887  00033C  C0DE  F0CA         	movff	printf@fval+1,??_printf+3
  6888  000340  C0DF  F0CB         	movff	printf@fval+2,??_printf+4
  6889  000344  C0E0  F0CC         	movff	printf@fval+3,??_printf+5
  6890  000348  0E10               	movlw	16
  6891  00034A  D006               	goto	u7060
  6892  00034C                     u7065:
  6893  00034C  0100               	movlb	0	; () banked
  6894  00034E  90D8               	bcf	status,0,c
  6895  000350  33CC               	rrcf	(??_printf+5)& (0+255),f,b
  6896  000352  33CB               	rrcf	(??_printf+4)& (0+255),f,b
  6897  000354  33CA               	rrcf	(??_printf+3)& (0+255),f,b
  6898  000356  33C9               	rrcf	(??_printf+2)& (0+255),f,b
  6899  000358                     u7060:
  6900  000358  2EE8               	decfsz	wreg,f,c
  6901  00035A  D7F8               	goto	u7065
  6902  00035C  0100               	movlb	0	; () banked
  6903  00035E  51C9               	movf	(??_printf+2)& (0+255),w,b
  6904  000360  0100               	movlb	0	; () banked
  6905  000362  25C7               	addwf	??_printf& (0+255),w,b
  6906  000364  0100               	movlb	0	; () banked
  6907  000366  6FDB               	movwf	printf@exp& (0+255),b
  6908  000368  0E00               	movlw	0
  6909  00036A  0100               	movlb	0	; () banked
  6910  00036C  21C8               	addwfc	(??_printf+1)& (0+255),w,b
  6911  00036E  0100               	movlb	0	; () banked
  6912  000370  6FDC               	movwf	(printf@exp+1)& (0+255),b
  6913                           
  6914                           ; BSR set to: 0
  6915                           ;doprnt.c: 838: exp--;
  6916  000372  0100               	movlb	0	; () banked
  6917  000374  07DB               	decf	printf@exp& (0+255),f,b
  6918  000376  A0D8               	btfss	status,0,c
  6919  000378  07DC               	decf	(printf@exp+1)& (0+255),f,b
  6920                           
  6921                           ; BSR set to: 0
  6922                           ;doprnt.c: 839: exp *= 3;
  6923  00037A  C0DB  F033         	movff	printf@exp,___wmul@multiplier
  6924  00037E  C0DC  F034         	movff	printf@exp+1,___wmul@multiplier+1
  6925  000382  0E00               	movlw	0
  6926  000384  6E36               	movwf	___wmul@multiplicand+1,c
  6927  000386  0E03               	movlw	3
  6928  000388  6E35               	movwf	___wmul@multiplicand,c
  6929  00038A  EC67  F022         	call	___wmul	;wreg free
  6930  00038E  C033  F0DB         	movff	?___wmul,printf@exp
  6931  000392  C034  F0DC         	movff	?___wmul+1,printf@exp+1
  6932                           
  6933                           ;doprnt.c: 840: exp /= 10;
  6934  000396  C0DB  F02B         	movff	printf@exp,___awdiv@dividend
  6935  00039A  C0DC  F02C         	movff	printf@exp+1,___awdiv@dividend+1
  6936  00039E  0E00               	movlw	0
  6937  0003A0  6E2E               	movwf	___awdiv@divisor+1,c
  6938  0003A2  0E0A               	movlw	10
  6939  0003A4  6E2D               	movwf	___awdiv@divisor,c
  6940  0003A6  EC74  F01E         	call	___awdiv	;wreg free
  6941  0003AA  C02B  F0DB         	movff	?___awdiv,printf@exp
  6942  0003AE  C02C  F0DC         	movff	?___awdiv+1,printf@exp+1
  6943                           
  6944                           ;doprnt.c: 841: if(exp < 0)
  6945  0003B2  0100               	movlb	0	; () banked
  6946  0003B4  AFDC               	btfss	(printf@exp+1)& (0+255),7,b
  6947  0003B6  D004               	goto	l6904
  6948                           
  6949                           ; BSR set to: 0
  6950                           ;doprnt.c: 842: exp--;
  6951  0003B8  0100               	movlb	0	; () banked
  6952  0003BA  07DB               	decf	printf@exp& (0+255),f,b
  6953  0003BC  A0D8               	btfss	status,0,c
  6954  0003BE  07DC               	decf	(printf@exp+1)& (0+255),f,b
  6955  0003C0                     l6904:
  6956                           
  6957                           ; BSR set to: 0
  6958                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  6959  0003C0  0100               	movlb	0	; () banked
  6960  0003C2  51DB               	movf	printf@exp& (0+255),w,b
  6961  0003C4  0800               	sublw	0
  6962  0003C6  ECD5  F00D         	call	_scale
  6963  0003CA  C08F  F0D7         	movff	?_scale,printf@tmpval
  6964  0003CE  C090  F0D8         	movff	?_scale+1,printf@tmpval+1
  6965  0003D2  C091  F0D9         	movff	?_scale+2,printf@tmpval+2
  6966                           
  6967                           ;doprnt.c: 847: tmpval.integ *= fval;
  6968  0003D6  C0D7  F080         	movff	printf@tmpval,___ftmul@f1
  6969  0003DA  C0D8  F081         	movff	printf@tmpval+1,___ftmul@f1+1
  6970  0003DE  C0D9  F082         	movff	printf@tmpval+2,___ftmul@f1+2
  6971  0003E2  C0DD  F083         	movff	printf@fval,___ftmul@f2
  6972  0003E6  C0DE  F084         	movff	printf@fval+1,___ftmul@f2+1
  6973  0003EA  C0DF  F085         	movff	printf@fval+2,___ftmul@f2+2
  6974  0003EE  EC74  F014         	call	___ftmul	;wreg free
  6975  0003F2  C080  F0D7         	movff	?___ftmul,printf@tmpval
  6976  0003F6  C081  F0D8         	movff	?___ftmul+1,printf@tmpval+1
  6977  0003FA  C082  F0D9         	movff	?___ftmul+2,printf@tmpval+2
  6978                           
  6979                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  6980  0003FE  C0D7  F031         	movff	printf@tmpval,___ftge@ff1
  6981  000402  C0D8  F032         	movff	printf@tmpval+1,___ftge@ff1+1
  6982  000406  C0D9  F033         	movff	printf@tmpval+2,___ftge@ff1+2
  6983  00040A  0E00               	movlw	0
  6984  00040C  6E34               	movwf	___ftge@ff2,c
  6985  00040E  0E80               	movlw	128
  6986  000410  6E35               	movwf	___ftge@ff2+1,c
  6987  000412  0E3F               	movlw	63
  6988  000414  6E36               	movwf	___ftge@ff2+2,c
  6989  000416  ECA4  F01D         	call	___ftge	;wreg free
  6990  00041A  B0D8               	btfsc	status,0,c
  6991  00041C  D005               	goto	l6912
  6992                           
  6993                           ;doprnt.c: 849: exp--;
  6994  00041E  0100               	movlb	0	; () banked
  6995  000420  07DB               	decf	printf@exp& (0+255),f,b
  6996  000422  A0D8               	btfss	status,0,c
  6997  000424  07DC               	decf	(printf@exp+1)& (0+255),f,b
  6998  000426  D013               	goto	l6916
  6999  000428                     l6912:
  7000                           
  7001                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  7002  000428  C0D7  F031         	movff	printf@tmpval,___ftge@ff1
  7003  00042C  C0D8  F032         	movff	printf@tmpval+1,___ftge@ff1+1
  7004  000430  C0D9  F033         	movff	printf@tmpval+2,___ftge@ff1+2
  7005  000434  0E00               	movlw	0
  7006  000436  6E34               	movwf	___ftge@ff2,c
  7007  000438  0E20               	movlw	32
  7008  00043A  6E35               	movwf	___ftge@ff2+1,c
  7009  00043C  0E41               	movlw	65
  7010  00043E  6E36               	movwf	___ftge@ff2+2,c
  7011  000440  ECA4  F01D         	call	___ftge	;wreg free
  7012  000444  A0D8               	btfss	status,0,c
  7013  000446  D003               	goto	l6916
  7014                           
  7015                           ;doprnt.c: 851: exp++;
  7016  000448  0100               	movlb	0	; () banked
  7017  00044A  4BDB               	infsnz	printf@exp& (0+255),f,b
  7018  00044C  2BDC               	incf	(printf@exp+1)& (0+255),f,b
  7019  00044E                     l6916:
  7020                           
  7021                           ;doprnt.c: 852: }
  7022                           ;doprnt.c: 1112: if(prec <= 12)
  7023  00044E  0100               	movlb	0	; () banked
  7024  000450  BFE9               	btfsc	(printf@prec+1)& (0+255),7,b
  7025  000452  D008               	goto	l6918
  7026  000454  0100               	movlb	0	; () banked
  7027  000456  51E9               	movf	(printf@prec+1)& (0+255),w,b
  7028  000458  E11D               	bnz	l6920
  7029  00045A  0E0D               	movlw	13
  7030  00045C  0100               	movlb	0	; () banked
  7031  00045E  5DE8               	subwf	printf@prec& (0+255),w,b
  7032  000460  B0D8               	btfsc	status,0,c
  7033  000462  D018               	goto	l6920
  7034  000464                     l6918:
  7035                           
  7036                           ; BSR set to: 0
  7037                           ;doprnt.c: 1113: fval += fround(prec);
  7038  000464  C0DD  F09E         	movff	printf@fval,___ftadd@f1
  7039  000468  C0DE  F09F         	movff	printf@fval+1,___ftadd@f1+1
  7040  00046C  C0DF  F0A0         	movff	printf@fval+2,___ftadd@f1+2
  7041  000470  0100               	movlb	0	; () banked
  7042  000472  51E8               	movf	printf@prec& (0+255),w,b
  7043  000474  EC14  F011         	call	_fround
  7044  000478  C08F  F0A1         	movff	?_fround,___ftadd@f2
  7045  00047C  C090  F0A2         	movff	?_fround+1,___ftadd@f2+1
  7046  000480  C091  F0A3         	movff	?_fround+2,___ftadd@f2+2
  7047  000484  ECE0  F00F         	call	___ftadd	;wreg free
  7048  000488  C09E  F0DD         	movff	?___ftadd,printf@fval
  7049  00048C  C09F  F0DE         	movff	?___ftadd+1,printf@fval+1
  7050  000490  C0A0  F0DF         	movff	?___ftadd+2,printf@fval+2
  7051  000494                     l6920:
  7052                           
  7053                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  7054  000494  0100               	movlb	0	; () banked
  7055  000496  BFDC               	btfsc	(printf@exp+1)& (0+255),7,b
  7056  000498  D008               	goto	l6922
  7057  00049A  0100               	movlb	0	; () banked
  7058  00049C  51DC               	movf	(printf@exp+1)& (0+255),w,b
  7059  00049E  E12A               	bnz	l6928
  7060  0004A0  0E0A               	movlw	10
  7061  0004A2  0100               	movlb	0	; () banked
  7062  0004A4  5DDB               	subwf	printf@exp& (0+255),w,b
  7063  0004A6  B0D8               	btfsc	status,0,c
  7064  0004A8  D025               	goto	l6928
  7065  0004AA                     l6922:
  7066                           
  7067                           ; BSR set to: 0
  7068  0004AA  0100               	movlb	0	; () banked
  7069  0004AC  51DD               	movf	printf@fval& (0+255),w,b
  7070  0004AE  0100               	movlb	0	; () banked
  7071  0004B0  11DE               	iorwf	(printf@fval+1)& (0+255),w,b
  7072  0004B2  0100               	movlb	0	; () banked
  7073  0004B4  11DF               	iorwf	(printf@fval+2)& (0+255),w,b
  7074  0004B6  B4D8               	btfsc	status,2,c
  7075  0004B8  D05F               	goto	l6942
  7076                           
  7077                           ; BSR set to: 0
  7078  0004BA  C0DD  F0AA         	movff	printf@fval,___fttol@f1
  7079  0004BE  C0DE  F0AB         	movff	printf@fval+1,___fttol@f1+1
  7080  0004C2  C0DF  F0AC         	movff	printf@fval+2,___fttol@f1+2
  7081  0004C6  ECC9  F015         	call	___fttol	;wreg free
  7082  0004CA  0100               	movlb	0	; () banked
  7083  0004CC  51AA               	movf	?___fttol& (0+255),w,b
  7084  0004CE  0100               	movlb	0	; () banked
  7085  0004D0  11AB               	iorwf	(?___fttol+1)& (0+255),w,b
  7086  0004D2  0100               	movlb	0	; () banked
  7087  0004D4  11AC               	iorwf	(?___fttol+2)& (0+255),w,b
  7088  0004D6  0100               	movlb	0	; () banked
  7089  0004D8  11AD               	iorwf	(?___fttol+3)& (0+255),w,b
  7090  0004DA  A4D8               	btfss	status,2,c
  7091  0004DC  D04D               	goto	l6942
  7092                           
  7093                           ; BSR set to: 0
  7094  0004DE  0100               	movlb	0	; () banked
  7095  0004E0  BFDC               	btfsc	(printf@exp+1)& (0+255),7,b
  7096  0004E2  D04A               	goto	l6942
  7097  0004E4  0100               	movlb	0	; () banked
  7098  0004E6  51DC               	movf	(printf@exp+1)& (0+255),w,b
  7099  0004E8  E105               	bnz	l6928
  7100  0004EA  0E02               	movlw	2
  7101  0004EC  0100               	movlb	0	; () banked
  7102  0004EE  5DDB               	subwf	printf@exp& (0+255),w,b
  7103  0004F0  A0D8               	btfss	status,0,c
  7104  0004F2  D042               	goto	l6942
  7105  0004F4                     l6928:
  7106                           
  7107                           ; BSR set to: 0
  7108                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  7109  0004F4  C0D7  F031         	movff	printf@tmpval,___ftge@ff1
  7110  0004F8  C0D8  F032         	movff	printf@tmpval+1,___ftge@ff1+1
  7111  0004FC  C0D9  F033         	movff	printf@tmpval+2,___ftge@ff1+2
  7112  000500  0E70               	movlw	112
  7113  000502  6E34               	movwf	___ftge@ff2,c
  7114  000504  0E89               	movlw	137
  7115  000506  6E35               	movwf	___ftge@ff2+1,c
  7116  000508  0E40               	movlw	64
  7117  00050A  6E36               	movwf	___ftge@ff2+2,c
  7118  00050C  ECA4  F01D         	call	___ftge	;wreg free
  7119  000510  B0D8               	btfsc	status,0,c
  7120  000512  D003               	goto	l6932
  7121                           
  7122                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  7123  000514  0100               	movlb	0	; () banked
  7124  000516  0EF7               	movlw	247
  7125  000518  D002               	goto	L3
  7126  00051A                     l6932:
  7127                           
  7128                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  7129  00051A  0100               	movlb	0	; () banked
  7130  00051C  0EF8               	movlw	248
  7131  00051E                     L3:
  7132  00051E  27DB               	addwf	printf@exp& (0+255),f,b
  7133  000520  0EFF               	movlw	255
  7134  000522  23DC               	addwfc	(printf@exp+1)& (0+255),f,b
  7135                           
  7136                           ; BSR set to: 0
  7137                           ;doprnt.c: 1124: }
  7138                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  7139                           
  7140                           ; BSR set to: 0
  7141  000524  0100               	movlb	0	; () banked
  7142  000526  51DB               	movf	printf@exp& (0+255),w,b
  7143  000528  ECD5  F00D         	call	_scale
  7144  00052C  C08F  F0D7         	movff	?_scale,printf@tmpval
  7145  000530  C090  F0D8         	movff	?_scale+1,printf@tmpval+1
  7146  000534  C091  F0D9         	movff	?_scale+2,printf@tmpval+2
  7147                           
  7148                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  7149  000538  C0DD  F025         	movff	printf@fval,__tdiv_to_l_@f1
  7150  00053C  C0DE  F026         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  7151  000540  C0DF  F027         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  7152  000544  C0D7  F028         	movff	printf@tmpval,__tdiv_to_l_@f2
  7153  000548  C0D8  F029         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  7154  00054C  C0D9  F02A         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  7155  000550  EC6B  F016         	call	__tdiv_to_l_	;wreg free
  7156  000554  C025  F0E0         	movff	?__tdiv_to_l_,printf@val
  7157  000558  C026  F0E1         	movff	?__tdiv_to_l_+1,printf@val+1
  7158  00055C  C027  F0E2         	movff	?__tdiv_to_l_+2,printf@val+2
  7159  000560  C028  F0E3         	movff	?__tdiv_to_l_+3,printf@val+3
  7160                           
  7161                           ;doprnt.c: 1129: fval = 0.0;
  7162  000564  0E00               	movlw	0
  7163  000566  0100               	movlb	0	; () banked
  7164  000568  6FDD               	movwf	printf@fval& (0+255),b
  7165  00056A  0E00               	movlw	0
  7166  00056C  0100               	movlb	0	; () banked
  7167  00056E  6FDE               	movwf	(printf@fval+1)& (0+255),b
  7168  000570  0E00               	movlw	0
  7169  000572  0100               	movlb	0	; () banked
  7170  000574  6FDF               	movwf	(printf@fval+2)& (0+255),b
  7171                           
  7172                           ;doprnt.c: 1130: } else {
  7173  000576  D033               	goto	l6946
  7174  000578                     l6942:
  7175                           
  7176                           ; BSR set to: 0
  7177                           ;doprnt.c: 1131: val = (unsigned long)fval;
  7178  000578  C0DD  F0AA         	movff	printf@fval,___fttol@f1
  7179  00057C  C0DE  F0AB         	movff	printf@fval+1,___fttol@f1+1
  7180  000580  C0DF  F0AC         	movff	printf@fval+2,___fttol@f1+2
  7181  000584  ECC9  F015         	call	___fttol	;wreg free
  7182  000588  C0AA  F0E0         	movff	?___fttol,printf@val
  7183  00058C  C0AB  F0E1         	movff	?___fttol+1,printf@val+1
  7184  000590  C0AC  F0E2         	movff	?___fttol+2,printf@val+2
  7185  000594  C0AD  F0E3         	movff	?___fttol+3,printf@val+3
  7186                           
  7187                           ;doprnt.c: 1132: fval -= (double)val;
  7188  000598  C0DD  F0AA         	movff	printf@fval,___ftsub@f1
  7189  00059C  C0DE  F0AB         	movff	printf@fval+1,___ftsub@f1+1
  7190  0005A0  C0DF  F0AC         	movff	printf@fval+2,___ftsub@f1+2
  7191  0005A4  C0E0  F02D         	movff	printf@val,___lltoft@c
  7192  0005A8  C0E1  F02E         	movff	printf@val+1,___lltoft@c+1
  7193  0005AC  C0E2  F02F         	movff	printf@val+2,___lltoft@c+2
  7194  0005B0  C0E3  F030         	movff	printf@val+3,___lltoft@c+3
  7195  0005B4  EC6C  F020         	call	___lltoft	;wreg free
  7196  0005B8  C02D  F0AD         	movff	?___lltoft,___ftsub@f2
  7197  0005BC  C02E  F0AE         	movff	?___lltoft+1,___ftsub@f2+1
  7198  0005C0  C02F  F0AF         	movff	?___lltoft+2,___ftsub@f2+2
  7199  0005C4  EC17  F021         	call	___ftsub	;wreg free
  7200  0005C8  C0AA  F0DD         	movff	?___ftsub,printf@fval
  7201  0005CC  C0AB  F0DE         	movff	?___ftsub+1,printf@fval+1
  7202  0005D0  C0AC  F0DF         	movff	?___ftsub+2,printf@fval+2
  7203                           
  7204                           ;doprnt.c: 1133: exp = 0;
  7205  0005D4  0E00               	movlw	0
  7206  0005D6  0100               	movlb	0	; () banked
  7207  0005D8  6FDC               	movwf	(printf@exp+1)& (0+255),b
  7208  0005DA  0E00               	movlw	0
  7209  0005DC  6FDB               	movwf	printf@exp& (0+255),b
  7210  0005DE                     l6946:
  7211                           
  7212                           ; BSR set to: 0
  7213                           ;doprnt.c: 1134: }
  7214                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  7215  0005DE  0E01               	movlw	1
  7216  0005E0  0100               	movlb	0	; () banked
  7217  0005E2  6FEA               	movwf	printf@c& (0+255),b
  7218  0005E4                     l6948:
  7219                           
  7220                           ; BSR set to: 0
  7221  0005E4  0E0A               	movlw	10
  7222  0005E6  0100               	movlb	0	; () banked
  7223  0005E8  19EA               	xorwf	printf@c& (0+255),w,b
  7224  0005EA  B4D8               	btfsc	status,2,c
  7225  0005EC  D01E               	goto	l6960
  7226                           
  7227                           ; BSR set to: 0
  7228                           ;doprnt.c: 1137: if(val < dpowers[c])
  7229                           
  7230                           ; BSR set to: 0
  7231                           
  7232                           ; BSR set to: 0
  7233  0005EE  0100               	movlb	0	; () banked
  7234  0005F0  51EA               	movf	printf@c& (0+255),w,b
  7235  0005F2  0D04               	mullw	4
  7236  0005F4  0E8B               	movlw	low _dpowers
  7237  0005F6  24F3               	addwf	prodl,w,c
  7238  0005F8  6EF6               	movwf	tblptrl,c
  7239  0005FA  0EFD               	movlw	high _dpowers
  7240  0005FC  20F4               	addwfc	prodh,w,c
  7241  0005FE  6EF7               	movwf	tblptrh,c
  7242  000600                     	if	0	;There are less than 3 active tblptr bytes
  7243  000600                     	endif
  7244  000600  0009               	tblrd		*+
  7245  000602  50F5               	movf	tablat,w,c
  7246  000604  0100               	movlb	0	; () banked
  7247  000606  5DE0               	subwf	printf@val& (0+255),w,b
  7248  000608  0009               	tblrd		*+
  7249  00060A  50F5               	movf	tablat,w,c
  7250  00060C  0100               	movlb	0	; () banked
  7251  00060E  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  7252  000610  0009               	tblrd		*+
  7253  000612  50F5               	movf	tablat,w,c
  7254  000614  0100               	movlb	0	; () banked
  7255  000616  59E2               	subwfb	(printf@val+2)& (0+255),w,b
  7256  000618  0009               	tblrd		*+
  7257  00061A  50F5               	movf	tablat,w,c
  7258  00061C  0100               	movlb	0	; () banked
  7259  00061E  59E3               	subwfb	(printf@val+3)& (0+255),w,b
  7260  000620  A0D8               	btfss	status,0,c
  7261  000622  D003               	goto	l6960
  7262                           
  7263                           ; BSR set to: 0
  7264                           
  7265                           ; BSR set to: 0
  7266                           
  7267                           ; BSR set to: 0
  7268                           ;doprnt.c: 1138: break;
  7269  000624  0100               	movlb	0	; () banked
  7270  000626  2BEA               	incf	printf@c& (0+255),f,b
  7271  000628  D7DD               	goto	l6948
  7272  00062A                     l6960:
  7273                           
  7274                           ; BSR set to: 0
  7275                           ;doprnt.c: 1142: width -= prec + c + exp;
  7276  00062A  C0EA  F0C7         	movff	printf@c,??_printf
  7277  00062E  0100               	movlb	0	; () banked
  7278  000630  6BC8               	clrf	(??_printf+1)& (0+255),b
  7279  000632  BFC7               	btfsc	??_printf& (0+255),7,b
  7280  000634  07C8               	decf	(??_printf+1)& (0+255),f,b
  7281  000636  0100               	movlb	0	; () banked
  7282  000638  51E8               	movf	printf@prec& (0+255),w,b
  7283  00063A  0100               	movlb	0	; () banked
  7284  00063C  27C7               	addwf	??_printf& (0+255),f,b
  7285  00063E  0100               	movlb	0	; () banked
  7286  000640  51E9               	movf	(printf@prec+1)& (0+255),w,b
  7287  000642  0100               	movlb	0	; () banked
  7288  000644  23C8               	addwfc	(??_printf+1)& (0+255),f,b
  7289  000646  0100               	movlb	0	; () banked
  7290  000648  51DB               	movf	printf@exp& (0+255),w,b
  7291  00064A  0100               	movlb	0	; () banked
  7292  00064C  27C7               	addwf	??_printf& (0+255),f,b
  7293  00064E  0100               	movlb	0	; () banked
  7294  000650  51DC               	movf	(printf@exp+1)& (0+255),w,b
  7295  000652  0100               	movlb	0	; () banked
  7296  000654  23C8               	addwfc	(??_printf+1)& (0+255),f,b
  7297  000656  0100               	movlb	0	; () banked
  7298  000658  51C7               	movf	??_printf& (0+255),w,b
  7299  00065A  0100               	movlb	0	; () banked
  7300  00065C  5FE4               	subwf	printf@width& (0+255),f,b
  7301  00065E  0100               	movlb	0	; () banked
  7302  000660  51C8               	movf	(??_printf+1)& (0+255),w,b
  7303  000662  0100               	movlb	0	; () banked
  7304  000664  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  7305                           
  7306                           ;doprnt.c: 1143: if(
  7307                           ;doprnt.c: 1147: prec)
  7308  000666  0100               	movlb	0	; () banked
  7309  000668  51E8               	movf	printf@prec& (0+255),w,b
  7310  00066A  0100               	movlb	0	; () banked
  7311  00066C  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  7312  00066E  B4D8               	btfsc	status,2,c
  7313  000670  D004               	goto	l6964
  7314                           
  7315                           ; BSR set to: 0
  7316                           ;doprnt.c: 1148: width--;
  7317  000672  0100               	movlb	0	; () banked
  7318  000674  07E4               	decf	printf@width& (0+255),f,b
  7319  000676  A0D8               	btfss	status,0,c
  7320  000678  07E5               	decf	(printf@width+1)& (0+255),f,b
  7321  00067A                     l6964:
  7322                           
  7323                           ; BSR set to: 0
  7324                           ;doprnt.c: 1149: if(flag & 0x03)
  7325  00067A  0E03               	movlw	3
  7326  00067C  0100               	movlb	0	; () banked
  7327  00067E  15E6               	andwf	printf@flag& (0+255),w,b
  7328  000680  0100               	movlb	0	; () banked
  7329  000682  6FC7               	movwf	??_printf& (0+255),b
  7330  000684  0E00               	movlw	0
  7331  000686  0100               	movlb	0	; () banked
  7332  000688  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  7333  00068A  0100               	movlb	0	; () banked
  7334  00068C  6FC8               	movwf	(??_printf+1)& (0+255),b
  7335  00068E  0100               	movlb	0	; () banked
  7336  000690  51C7               	movf	??_printf& (0+255),w,b
  7337  000692  0100               	movlb	0	; () banked
  7338  000694  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  7339  000696  B4D8               	btfsc	status,2,c
  7340  000698  D004               	goto	l6968
  7341                           
  7342                           ; BSR set to: 0
  7343                           ;doprnt.c: 1150: width--;
  7344  00069A  0100               	movlb	0	; () banked
  7345  00069C  07E4               	decf	printf@width& (0+255),f,b
  7346  00069E  A0D8               	btfss	status,0,c
  7347  0006A0  07E5               	decf	(printf@width+1)& (0+255),f,b
  7348  0006A2                     l6968:
  7349                           
  7350                           ; BSR set to: 0
  7351                           ;doprnt.c: 1153: if(flag & 0x04) {
  7352  0006A2  0100               	movlb	0	; () banked
  7353  0006A4  A5E6               	btfss	printf@flag& (0+255),2,b
  7354  0006A6  D02D               	goto	l6984
  7355                           
  7356                           ; BSR set to: 0
  7357                           ;doprnt.c: 1157: if(flag & 0x03)
  7358  0006A8  0E03               	movlw	3
  7359  0006AA  0100               	movlb	0	; () banked
  7360  0006AC  15E6               	andwf	printf@flag& (0+255),w,b
  7361  0006AE  0100               	movlb	0	; () banked
  7362  0006B0  6FC7               	movwf	??_printf& (0+255),b
  7363  0006B2  0E00               	movlw	0
  7364  0006B4  0100               	movlb	0	; () banked
  7365  0006B6  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  7366  0006B8  0100               	movlb	0	; () banked
  7367  0006BA  6FC8               	movwf	(??_printf+1)& (0+255),b
  7368  0006BC  0100               	movlb	0	; () banked
  7369  0006BE  51C7               	movf	??_printf& (0+255),w,b
  7370  0006C0  0100               	movlb	0	; () banked
  7371  0006C2  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  7372  0006C4  B4D8               	btfsc	status,2,c
  7373  0006C6  D00B               	goto	l6978
  7374                           
  7375                           ; BSR set to: 0
  7376                           ;doprnt.c: 1159: (putch('-') );
  7377  0006C8  0E2D               	movlw	45
  7378  0006CA  EC8C  F022         	call	_putch
  7379                           
  7380                           ;doprnt.c: 1168: while(width > 0) {
  7381  0006CE  D007               	goto	l6978
  7382  0006D0                     l6974:
  7383                           
  7384                           ;doprnt.c: 1169: (putch('0') );
  7385  0006D0  0E30               	movlw	48
  7386  0006D2  EC8C  F022         	call	_putch
  7387                           
  7388                           ;doprnt.c: 1170: width--;
  7389  0006D6  0100               	movlb	0	; () banked
  7390  0006D8  07E4               	decf	printf@width& (0+255),f,b
  7391  0006DA  A0D8               	btfss	status,0,c
  7392  0006DC  07E5               	decf	(printf@width+1)& (0+255),f,b
  7393  0006DE                     l6978:
  7394  0006DE  0100               	movlb	0	; () banked
  7395  0006E0  BFE5               	btfsc	(printf@width+1)& (0+255),7,b
  7396  0006E2  D073               	goto	l6996
  7397  0006E4  0100               	movlb	0	; () banked
  7398  0006E6  51E5               	movf	(printf@width+1)& (0+255),w,b
  7399  0006E8  E1F3               	bnz	l6974
  7400  0006EA  0100               	movlb	0	; () banked
  7401  0006EC  05E4               	decf	printf@width& (0+255),w,b
  7402  0006EE  A0D8               	btfss	status,0,c
  7403  0006F0  D06C               	goto	l6996
  7404  0006F2  D7EE               	goto	l6974
  7405  0006F4                     l6980:
  7406                           
  7407                           ; BSR set to: 0
  7408                           ;doprnt.c: 1181: (putch(' ') );
  7409  0006F4  0E20               	movlw	32
  7410  0006F6  EC8C  F022         	call	_putch
  7411                           
  7412                           ;doprnt.c: 1182: width--;
  7413  0006FA  0100               	movlb	0	; () banked
  7414  0006FC  07E4               	decf	printf@width& (0+255),f,b
  7415  0006FE  A0D8               	btfss	status,0,c
  7416  000700  07E5               	decf	(printf@width+1)& (0+255),f,b
  7417  000702                     l6984:
  7418                           
  7419                           ; BSR set to: 0
  7420  000702  0100               	movlb	0	; () banked
  7421  000704  BFE5               	btfsc	(printf@width+1)& (0+255),7,b
  7422  000706  D007               	goto	l6986
  7423  000708  0100               	movlb	0	; () banked
  7424  00070A  51E5               	movf	(printf@width+1)& (0+255),w,b
  7425  00070C  E1F3               	bnz	l6980
  7426  00070E  0100               	movlb	0	; () banked
  7427  000710  05E4               	decf	printf@width& (0+255),w,b
  7428  000712  B0D8               	btfsc	status,0,c
  7429  000714  D7EF               	goto	l6980
  7430  000716                     l6986:
  7431                           
  7432                           ; BSR set to: 0
  7433                           ;doprnt.c: 1183: }
  7434                           ;doprnt.c: 1188: if(flag & 0x03)
  7435  000716  0E03               	movlw	3
  7436  000718  0100               	movlb	0	; () banked
  7437  00071A  15E6               	andwf	printf@flag& (0+255),w,b
  7438  00071C  0100               	movlb	0	; () banked
  7439  00071E  6FC7               	movwf	??_printf& (0+255),b
  7440  000720  0E00               	movlw	0
  7441  000722  0100               	movlb	0	; () banked
  7442  000724  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  7443  000726  0100               	movlb	0	; () banked
  7444  000728  6FC8               	movwf	(??_printf+1)& (0+255),b
  7445  00072A  0100               	movlb	0	; () banked
  7446  00072C  51C7               	movf	??_printf& (0+255),w,b
  7447  00072E  0100               	movlb	0	; () banked
  7448  000730  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  7449  000732  B4D8               	btfsc	status,2,c
  7450  000734  D04A               	goto	l6996
  7451                           
  7452                           ; BSR set to: 0
  7453                           ;doprnt.c: 1190: (putch('-') );
  7454  000736  0E2D               	movlw	45
  7455  000738  EC8C  F022         	call	_putch
  7456                           
  7457                           ;doprnt.c: 1195: }
  7458                           ;doprnt.c: 1196: while(c--) {
  7459  00073C  D046               	goto	l6996
  7460  00073E                     l6990:
  7461                           
  7462                           ;doprnt.c: 1200: {
  7463                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  7464  00073E  C0E0  F025         	movff	printf@val,___lldiv@dividend
  7465  000742  C0E1  F026         	movff	printf@val+1,___lldiv@dividend+1
  7466  000746  C0E2  F027         	movff	printf@val+2,___lldiv@dividend+2
  7467  00074A  C0E3  F028         	movff	printf@val+3,___lldiv@dividend+3
  7468  00074E  0100               	movlb	0	; () banked
  7469  000750  51EA               	movf	printf@c& (0+255),w,b
  7470  000752  0D04               	mullw	4
  7471  000754  0E8B               	movlw	low _dpowers
  7472  000756  24F3               	addwf	prodl,w,c
  7473  000758  6EF6               	movwf	tblptrl,c
  7474  00075A  0EFD               	movlw	high _dpowers
  7475  00075C  20F4               	addwfc	prodh,w,c
  7476  00075E  6EF7               	movwf	tblptrh,c
  7477  000760                     	if	0	;There are less than 3 active tblptr bytes
  7478  000760                     	endif
  7479  000760  0009               	tblrd		*+
  7480  000762  CFF5 F029          	movff	tablat,___lldiv@divisor
  7481  000766  0009               	tblrd		*+
  7482  000768  CFF5 F02A          	movff	tablat,___lldiv@divisor+1
  7483  00076C  0009               	tblrd		*+
  7484  00076E  CFF5 F02B          	movff	tablat,___lldiv@divisor+2
  7485  000772  000A               	tblrd		*-
  7486  000774  CFF5 F02C          	movff	tablat,___lldiv@divisor+3
  7487  000778  ECB6  F01E         	call	___lldiv	;wreg free
  7488  00077C  C025  F0D7         	movff	?___lldiv,printf@tmpval
  7489  000780  C026  F0D8         	movff	?___lldiv+1,printf@tmpval+1
  7490  000784  C027  F0D9         	movff	?___lldiv+2,printf@tmpval+2
  7491  000788  C028  F0DA         	movff	?___lldiv+3,printf@tmpval+3
  7492                           
  7493                           ;doprnt.c: 1202: tmpval.vd %= 10;
  7494  00078C  C0D7  F032         	movff	printf@tmpval,___llmod@dividend
  7495  000790  C0D8  F033         	movff	printf@tmpval+1,___llmod@dividend+1
  7496  000794  C0D9  F034         	movff	printf@tmpval+2,___llmod@dividend+2
  7497  000798  C0DA  F035         	movff	printf@tmpval+3,___llmod@dividend+3
  7498  00079C  0E0A               	movlw	10
  7499  00079E  6E36               	movwf	___llmod@divisor,c
  7500  0007A0  0E00               	movlw	0
  7501  0007A2  6E37               	movwf	___llmod@divisor+1,c
  7502  0007A4  0E00               	movlw	0
  7503  0007A6  6E38               	movwf	___llmod@divisor+2,c
  7504  0007A8  0E00               	movlw	0
  7505  0007AA  6E39               	movwf	___llmod@divisor+3,c
  7506  0007AC  ECA3  F01F         	call	___llmod	;wreg free
  7507  0007B0  C032  F0D7         	movff	?___llmod,printf@tmpval
  7508  0007B4  C033  F0D8         	movff	?___llmod+1,printf@tmpval+1
  7509  0007B8  C034  F0D9         	movff	?___llmod+2,printf@tmpval+2
  7510  0007BC  C035  F0DA         	movff	?___llmod+3,printf@tmpval+3
  7511                           
  7512                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  7513  0007C0  0100               	movlb	0	; () banked
  7514  0007C2  51D7               	movf	printf@tmpval& (0+255),w,b
  7515  0007C4  0F30               	addlw	48
  7516  0007C6  EC8C  F022         	call	_putch
  7517  0007CA                     l6996:
  7518  0007CA  0100               	movlb	0	; () banked
  7519  0007CC  07EA               	decf	printf@c& (0+255),f,b
  7520  0007CE  0100               	movlb	0	; () banked
  7521  0007D0  29EA               	incf	printf@c& (0+255),w,b
  7522  0007D2  B4D8               	btfsc	status,2,c
  7523  0007D4  D008               	goto	l7002
  7524  0007D6  D7B3               	goto	l6990
  7525  0007D8                     l6998:
  7526                           
  7527                           ; BSR set to: 0
  7528                           ;doprnt.c: 1208: (putch('0') );
  7529  0007D8  0E30               	movlw	48
  7530  0007DA  EC8C  F022         	call	_putch
  7531                           
  7532                           ;doprnt.c: 1209: exp--;
  7533  0007DE  0100               	movlb	0	; () banked
  7534  0007E0  07DB               	decf	printf@exp& (0+255),f,b
  7535  0007E2  A0D8               	btfss	status,0,c
  7536  0007E4  07DC               	decf	(printf@exp+1)& (0+255),f,b
  7537  0007E6                     l7002:
  7538                           
  7539                           ; BSR set to: 0
  7540  0007E6  0100               	movlb	0	; () banked
  7541  0007E8  BFDC               	btfsc	(printf@exp+1)& (0+255),7,b
  7542  0007EA  D007               	goto	l7004
  7543  0007EC  0100               	movlb	0	; () banked
  7544  0007EE  51DC               	movf	(printf@exp+1)& (0+255),w,b
  7545  0007F0  E1F3               	bnz	l6998
  7546  0007F2  0100               	movlb	0	; () banked
  7547  0007F4  05DB               	decf	printf@exp& (0+255),w,b
  7548  0007F6  B0D8               	btfsc	status,0,c
  7549  0007F8  D7EF               	goto	l6998
  7550  0007FA                     l7004:
  7551                           
  7552                           ; BSR set to: 0
  7553                           ;doprnt.c: 1210: }
  7554                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  7555  0007FA  0100               	movlb	0	; () banked
  7556  0007FC  BFE9               	btfsc	(printf@prec+1)& (0+255),7,b
  7557  0007FE  D00C               	goto	l829
  7558  000800  0100               	movlb	0	; () banked
  7559  000802  51E9               	movf	(printf@prec+1)& (0+255),w,b
  7560  000804  E105               	bnz	u7280
  7561  000806  0E09               	movlw	9
  7562  000808  0100               	movlb	0	; () banked
  7563  00080A  5DE8               	subwf	printf@prec& (0+255),w,b
  7564  00080C  A0D8               	btfss	status,0,c
  7565  00080E  D004               	goto	l829
  7566  000810                     u7280:
  7567                           
  7568                           ; BSR set to: 0
  7569                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  7570  000810  0E08               	movlw	8
  7571  000812  0100               	movlb	0	; () banked
  7572  000814  6FEA               	movwf	printf@c& (0+255),b
  7573  000816  D002               	goto	l7008
  7574  000818                     l829:
  7575                           
  7576                           ; BSR set to: 0
  7577                           ;doprnt.c: 1213: else
  7578                           ;doprnt.c: 1214: c = prec;
  7579  000818  C0E8  F0EA         	movff	printf@prec,printf@c
  7580  00081C                     l7008:
  7581                           
  7582                           ; BSR set to: 0
  7583                           ;doprnt.c: 1215: prec -= c;
  7584  00081C  0100               	movlb	0	; () banked
  7585  00081E  51EA               	movf	printf@c& (0+255),w,b
  7586  000820  0100               	movlb	0	; () banked
  7587  000822  5FE8               	subwf	printf@prec& (0+255),f,b
  7588  000824  0E00               	movlw	0
  7589  000826  0100               	movlb	0	; () banked
  7590  000828  BFEA               	btfsc	printf@c& (0+255),7,b
  7591  00082A  0EFF               	movlw	255
  7592  00082C  0100               	movlb	0	; () banked
  7593  00082E  5BE9               	subwfb	(printf@prec+1)& (0+255),f,b
  7594                           
  7595                           ; BSR set to: 0
  7596                           ;doprnt.c: 1219: if(c)
  7597  000830  0100               	movlb	0	; () banked
  7598  000832  51EA               	movf	printf@c& (0+255),w,b
  7599  000834  0100               	movlb	0	; () banked
  7600  000836  B4D8               	btfsc	status,2,c
  7601  000838  D003               	goto	l7014
  7602                           
  7603                           ; BSR set to: 0
  7604                           ;doprnt.c: 1221: (putch('.') );
  7605  00083A  0E2E               	movlw	46
  7606  00083C  EC8C  F022         	call	_putch
  7607  000840                     l7014:
  7608                           
  7609                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7610  000840  0100               	movlb	0	; () banked
  7611  000842  51EA               	movf	printf@c& (0+255),w,b
  7612  000844  ECD5  F00D         	call	_scale
  7613  000848  C08F  F0CD         	movff	?_scale,_printf$1424
  7614  00084C  C090  F0CE         	movff	?_scale+1,_printf$1424+1
  7615  000850  C091  F0CF         	movff	?_scale+2,_printf$1424+2
  7616                           
  7617                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7618  000854  C0DD  F083         	movff	printf@fval,___ftmul@f2
  7619  000858  C0DE  F084         	movff	printf@fval+1,___ftmul@f2+1
  7620  00085C  C0DF  F085         	movff	printf@fval+2,___ftmul@f2+2
  7621  000860  C0CD  F080         	movff	_printf$1424,___ftmul@f1
  7622  000864  C0CE  F081         	movff	_printf$1424+1,___ftmul@f1+1
  7623  000868  C0CF  F082         	movff	_printf$1424+2,___ftmul@f1+2
  7624  00086C  EC74  F014         	call	___ftmul	;wreg free
  7625  000870  C080  F0AA         	movff	?___ftmul,___fttol@f1
  7626  000874  C081  F0AB         	movff	?___ftmul+1,___fttol@f1+1
  7627  000878  C082  F0AC         	movff	?___ftmul+2,___fttol@f1+2
  7628  00087C  ECC9  F015         	call	___fttol	;wreg free
  7629  000880  C0AA  F0E0         	movff	?___fttol,printf@val
  7630  000884  C0AB  F0E1         	movff	?___fttol+1,printf@val+1
  7631  000888  C0AC  F0E2         	movff	?___fttol+2,printf@val+2
  7632  00088C  C0AD  F0E3         	movff	?___fttol+3,printf@val+3
  7633                           
  7634                           ;doprnt.c: 1228: while(c--) {
  7635  000890  D06D               	goto	l7024
  7636  000892                     l7018:
  7637                           
  7638                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  7639  000892  C0E0  F025         	movff	printf@val,___lldiv@dividend
  7640  000896  C0E1  F026         	movff	printf@val+1,___lldiv@dividend+1
  7641  00089A  C0E2  F027         	movff	printf@val+2,___lldiv@dividend+2
  7642  00089E  C0E3  F028         	movff	printf@val+3,___lldiv@dividend+3
  7643  0008A2  0100               	movlb	0	; () banked
  7644  0008A4  51EA               	movf	printf@c& (0+255),w,b
  7645  0008A6  0D04               	mullw	4
  7646  0008A8  0E8B               	movlw	low _dpowers
  7647  0008AA  24F3               	addwf	prodl,w,c
  7648  0008AC  6EF6               	movwf	tblptrl,c
  7649  0008AE  0EFD               	movlw	high _dpowers
  7650  0008B0  20F4               	addwfc	prodh,w,c
  7651  0008B2  6EF7               	movwf	tblptrh,c
  7652  0008B4                     	if	0	;There are less than 3 active tblptr bytes
  7653  0008B4                     	endif
  7654  0008B4  0009               	tblrd		*+
  7655  0008B6  CFF5 F029          	movff	tablat,___lldiv@divisor
  7656  0008BA  0009               	tblrd		*+
  7657  0008BC  CFF5 F02A          	movff	tablat,___lldiv@divisor+1
  7658  0008C0  0009               	tblrd		*+
  7659  0008C2  CFF5 F02B          	movff	tablat,___lldiv@divisor+2
  7660  0008C6  000A               	tblrd		*-
  7661  0008C8  CFF5 F02C          	movff	tablat,___lldiv@divisor+3
  7662  0008CC  ECB6  F01E         	call	___lldiv	;wreg free
  7663  0008D0  C025  F0D7         	movff	?___lldiv,printf@tmpval
  7664  0008D4  C026  F0D8         	movff	?___lldiv+1,printf@tmpval+1
  7665  0008D8  C027  F0D9         	movff	?___lldiv+2,printf@tmpval+2
  7666  0008DC  C028  F0DA         	movff	?___lldiv+3,printf@tmpval+3
  7667                           
  7668                           ;doprnt.c: 1230: tmpval.vd %= 10;
  7669  0008E0  C0D7  F032         	movff	printf@tmpval,___llmod@dividend
  7670  0008E4  C0D8  F033         	movff	printf@tmpval+1,___llmod@dividend+1
  7671  0008E8  C0D9  F034         	movff	printf@tmpval+2,___llmod@dividend+2
  7672  0008EC  C0DA  F035         	movff	printf@tmpval+3,___llmod@dividend+3
  7673  0008F0  0E0A               	movlw	10
  7674  0008F2  6E36               	movwf	___llmod@divisor,c
  7675  0008F4  0E00               	movlw	0
  7676  0008F6  6E37               	movwf	___llmod@divisor+1,c
  7677  0008F8  0E00               	movlw	0
  7678  0008FA  6E38               	movwf	___llmod@divisor+2,c
  7679  0008FC  0E00               	movlw	0
  7680  0008FE  6E39               	movwf	___llmod@divisor+3,c
  7681  000900  ECA3  F01F         	call	___llmod	;wreg free
  7682  000904  C032  F0D7         	movff	?___llmod,printf@tmpval
  7683  000908  C033  F0D8         	movff	?___llmod+1,printf@tmpval+1
  7684  00090C  C034  F0D9         	movff	?___llmod+2,printf@tmpval+2
  7685  000910  C035  F0DA         	movff	?___llmod+3,printf@tmpval+3
  7686                           
  7687                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  7688  000914  0100               	movlb	0	; () banked
  7689  000916  51D7               	movf	printf@tmpval& (0+255),w,b
  7690  000918  0F30               	addlw	48
  7691  00091A  EC8C  F022         	call	_putch
  7692                           
  7693                           ;doprnt.c: 1232: val %= dpowers[c];
  7694  00091E  C0E0  F032         	movff	printf@val,___llmod@dividend
  7695  000922  C0E1  F033         	movff	printf@val+1,___llmod@dividend+1
  7696  000926  C0E2  F034         	movff	printf@val+2,___llmod@dividend+2
  7697  00092A  C0E3  F035         	movff	printf@val+3,___llmod@dividend+3
  7698  00092E  0100               	movlb	0	; () banked
  7699  000930  51EA               	movf	printf@c& (0+255),w,b
  7700  000932  0D04               	mullw	4
  7701  000934  0E8B               	movlw	low _dpowers
  7702  000936  24F3               	addwf	prodl,w,c
  7703  000938  6EF6               	movwf	tblptrl,c
  7704  00093A  0EFD               	movlw	high _dpowers
  7705  00093C  20F4               	addwfc	prodh,w,c
  7706  00093E  6EF7               	movwf	tblptrh,c
  7707  000940                     	if	0	;There are less than 3 active tblptr bytes
  7708  000940                     	endif
  7709  000940  0009               	tblrd		*+
  7710  000942  CFF5 F036          	movff	tablat,___llmod@divisor
  7711  000946  0009               	tblrd		*+
  7712  000948  CFF5 F037          	movff	tablat,___llmod@divisor+1
  7713  00094C  0009               	tblrd		*+
  7714  00094E  CFF5 F038          	movff	tablat,___llmod@divisor+2
  7715  000952  000A               	tblrd		*-
  7716  000954  CFF5 F039          	movff	tablat,___llmod@divisor+3
  7717  000958  ECA3  F01F         	call	___llmod	;wreg free
  7718  00095C  C032  F0E0         	movff	?___llmod,printf@val
  7719  000960  C033  F0E1         	movff	?___llmod+1,printf@val+1
  7720  000964  C034  F0E2         	movff	?___llmod+2,printf@val+2
  7721  000968  C035  F0E3         	movff	?___llmod+3,printf@val+3
  7722  00096C                     l7024:
  7723  00096C  0100               	movlb	0	; () banked
  7724  00096E  07EA               	decf	printf@c& (0+255),f,b
  7725  000970  0100               	movlb	0	; () banked
  7726  000972  29EA               	incf	printf@c& (0+255),w,b
  7727  000974  B4D8               	btfsc	status,2,c
  7728  000976  D008               	goto	l7030
  7729  000978  D78C               	goto	l7018
  7730  00097A                     l7026:
  7731                           
  7732                           ; BSR set to: 0
  7733                           ;doprnt.c: 1236: (putch('0') );
  7734  00097A  0E30               	movlw	48
  7735  00097C  EC8C  F022         	call	_putch
  7736                           
  7737                           ;doprnt.c: 1237: prec--;
  7738  000980  0100               	movlb	0	; () banked
  7739  000982  07E8               	decf	printf@prec& (0+255),f,b
  7740  000984  A0D8               	btfss	status,0,c
  7741  000986  07E9               	decf	(printf@prec+1)& (0+255),f,b
  7742  000988                     l7030:
  7743                           
  7744                           ; BSR set to: 0
  7745  000988  0100               	movlb	0	; () banked
  7746  00098A  51E8               	movf	printf@prec& (0+255),w,b
  7747  00098C  0100               	movlb	0	; () banked
  7748  00098E  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  7749  000990  B4D8               	btfsc	status,2,c
  7750  000992  D22B               	goto	l7158
  7751  000994  D7F2               	goto	l7026
  7752  000996                     l789:
  7753                           
  7754                           ; BSR set to: 0
  7755                           ;doprnt.c: 1246: }
  7756                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  7757  000996  0100               	movlb	0	; () banked
  7758  000998  BFE6               	btfsc	printf@flag& (0+255),7,b
  7759  00099A  D034               	goto	l838
  7760                           
  7761                           ; BSR set to: 0
  7762                           ;doprnt.c: 1253: {
  7763                           ;doprnt.c: 1255: if(flag & 0x10)
  7764  00099C  0100               	movlb	0	; () banked
  7765  00099E  A9E6               	btfss	printf@flag& (0+255),4,b
  7766  0009A0  D00E               	goto	l7038
  7767                           
  7768                           ; BSR set to: 0
  7769                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  7770  0009A2  C0D5  FFD9         	movff	printf@ap,fsr2l
  7771  0009A6  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  7772  0009AA  CFDE F0E0          	movff	postinc2,printf@val
  7773  0009AE  CFDE F0E1          	movff	postinc2,printf@val+1
  7774  0009B2  CFDE F0E2          	movff	postinc2,printf@val+2
  7775  0009B6  CFDE F0E3          	movff	postinc2,printf@val+3
  7776                           
  7777                           ; BSR set to: 0
  7778  0009BA  0E04               	movlw	4
  7779  0009BC  D00F               	goto	L4
  7780  0009BE                     l7038:
  7781                           
  7782                           ; BSR set to: 0
  7783                           ;doprnt.c: 1257: else
  7784                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  7785  0009BE  C0D5  FFD9         	movff	printf@ap,fsr2l
  7786  0009C2  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  7787  0009C6  CFDE F0E0          	movff	postinc2,printf@val
  7788  0009CA  CFDD F0E1          	movff	postdec2,printf@val+1
  7789  0009CE  0100               	movlb	0	; () banked
  7790  0009D0  0E00               	movlw	0
  7791  0009D2  BFE1               	btfsc	(printf@val+1)& (0+255),7,b
  7792  0009D4  0EFF               	movlw	-1
  7793  0009D6  6FE2               	movwf	(printf@val+2)& (0+255),b
  7794  0009D8  6FE3               	movwf	(printf@val+3)& (0+255),b
  7795                           
  7796                           ; BSR set to: 0
  7797  0009DA  0E02               	movlw	2
  7798  0009DC                     L4:
  7799  0009DC  0100               	movlb	0	; () banked
  7800  0009DE  27D5               	addwf	printf@ap& (0+255),f,b
  7801  0009E0  0E00               	movlw	0
  7802  0009E2  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  7803                           
  7804                           ; BSR set to: 0
  7805                           ;doprnt.c: 1261: if((long)val < 0) {
  7806                           
  7807                           ; BSR set to: 0
  7808  0009E4  0100               	movlb	0	; () banked
  7809  0009E6  AFE3               	btfss	(printf@val+3)& (0+255),7,b
  7810  0009E8  D032               	goto	l7056
  7811                           
  7812                           ; BSR set to: 0
  7813                           ;doprnt.c: 1262: flag |= 0x03;
  7814  0009EA  0E03               	movlw	3
  7815  0009EC  0100               	movlb	0	; () banked
  7816  0009EE  13E6               	iorwf	printf@flag& (0+255),f,b
  7817                           
  7818                           ; BSR set to: 0
  7819                           ;doprnt.c: 1263: val = -val;
  7820  0009F0  0100               	movlb	0	; () banked
  7821  0009F2  1FE3               	comf	(printf@val+3)& (0+255),f,b
  7822  0009F4  1FE2               	comf	(printf@val+2)& (0+255),f,b
  7823  0009F6  1FE1               	comf	(printf@val+1)& (0+255),f,b
  7824  0009F8  6DE0               	negf	printf@val& (0+255),b
  7825  0009FA  0E00               	movlw	0
  7826  0009FC  23E1               	addwfc	(printf@val+1)& (0+255),f,b
  7827  0009FE  23E2               	addwfc	(printf@val+2)& (0+255),f,b
  7828  000A00  23E3               	addwfc	(printf@val+3)& (0+255),f,b
  7829                           
  7830                           ; BSR set to: 0
  7831                           ;doprnt.c: 1264: }
  7832                           ;doprnt.c: 1266: }
  7833  000A02  D025               	goto	l7056
  7834  000A04                     l838:
  7835                           
  7836                           ; BSR set to: 0
  7837                           ;doprnt.c: 1268: else
  7838                           ;doprnt.c: 1273: {
  7839                           ;doprnt.c: 1281: if(flag & 0x10)
  7840  000A04  0100               	movlb	0	; () banked
  7841  000A06  A9E6               	btfss	printf@flag& (0+255),4,b
  7842  000A08  D00E               	goto	l7052
  7843                           
  7844                           ; BSR set to: 0
  7845                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  7846  000A0A  C0D5  FFD9         	movff	printf@ap,fsr2l
  7847  000A0E  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  7848  000A12  CFDE F0E0          	movff	postinc2,printf@val
  7849  000A16  CFDE F0E1          	movff	postinc2,printf@val+1
  7850  000A1A  CFDE F0E2          	movff	postinc2,printf@val+2
  7851  000A1E  CFDE F0E3          	movff	postinc2,printf@val+3
  7852                           
  7853                           ; BSR set to: 0
  7854  000A22  0E04               	movlw	4
  7855  000A24  D010               	goto	L5
  7856  000A26                     l7052:
  7857                           
  7858                           ; BSR set to: 0
  7859                           ;doprnt.c: 1283: else
  7860                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7861  000A26  C0D5  FFD9         	movff	printf@ap,fsr2l
  7862  000A2A  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  7863  000A2E  CFDE F0C7          	movff	postinc2,??_printf
  7864  000A32  CFDD F0C8          	movff	postdec2,??_printf+1
  7865  000A36  C0C7  F0E0         	movff	??_printf,printf@val
  7866  000A3A  C0C8  F0E1         	movff	??_printf+1,printf@val+1
  7867  000A3E  0100               	movlb	0	; () banked
  7868  000A40  6BE2               	clrf	(printf@val+2)& (0+255),b
  7869  000A42  6BE3               	clrf	(printf@val+3)& (0+255),b
  7870                           
  7871                           ; BSR set to: 0
  7872  000A44  0E02               	movlw	2
  7873  000A46                     L5:
  7874  000A46  0100               	movlb	0	; () banked
  7875  000A48  27D5               	addwf	printf@ap& (0+255),f,b
  7876  000A4A  0E00               	movlw	0
  7877  000A4C  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  7878  000A4E                     l7056:
  7879                           
  7880                           ; BSR set to: 0
  7881                           ;doprnt.c: 1287: }
  7882                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  7883  000A4E  0100               	movlb	0	; () banked
  7884  000A50  51E8               	movf	printf@prec& (0+255),w,b
  7885  000A52  0100               	movlb	0	; () banked
  7886  000A54  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  7887  000A56  A4D8               	btfss	status,2,c
  7888  000A58  D05A               	goto	l7092
  7889                           
  7890                           ; BSR set to: 0
  7891  000A5A  0100               	movlb	0	; () banked
  7892  000A5C  51E0               	movf	printf@val& (0+255),w,b
  7893  000A5E  0100               	movlb	0	; () banked
  7894  000A60  11E1               	iorwf	(printf@val+1)& (0+255),w,b
  7895  000A62  0100               	movlb	0	; () banked
  7896  000A64  11E2               	iorwf	(printf@val+2)& (0+255),w,b
  7897  000A66  0100               	movlb	0	; () banked
  7898  000A68  11E3               	iorwf	(printf@val+3)& (0+255),w,b
  7899  000A6A  A4D8               	btfss	status,2,c
  7900  000A6C  D050               	goto	l7092
  7901                           
  7902                           ; BSR set to: 0
  7903                           ;doprnt.c: 1291: prec++;
  7904  000A6E  0100               	movlb	0	; () banked
  7905  000A70  4BE8               	infsnz	printf@prec& (0+255),f,b
  7906  000A72  2BE9               	incf	(printf@prec+1)& (0+255),f,b
  7907                           
  7908                           ; BSR set to: 0
  7909                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  7910  000A74  D04C               	goto	l7092
  7911  000A76                     l7062:
  7912                           
  7913                           ; BSR set to: 0
  7914                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7915  000A76  0E01               	movlw	1
  7916  000A78  0100               	movlb	0	; () banked
  7917  000A7A  6FEA               	movwf	printf@c& (0+255),b
  7918  000A7C                     l7064:
  7919                           
  7920                           ; BSR set to: 0
  7921  000A7C  0E0A               	movlw	10
  7922  000A7E  0100               	movlb	0	; () banked
  7923  000A80  19EA               	xorwf	printf@c& (0+255),w,b
  7924  000A82  B4D8               	btfsc	status,2,c
  7925  000A84  D04D               	goto	l7094
  7926                           
  7927                           ; BSR set to: 0
  7928                           ;doprnt.c: 1306: if(val < dpowers[c])
  7929                           
  7930                           ; BSR set to: 0
  7931                           
  7932                           ; BSR set to: 0
  7933  000A86  0100               	movlb	0	; () banked
  7934  000A88  51EA               	movf	printf@c& (0+255),w,b
  7935  000A8A  0D04               	mullw	4
  7936  000A8C  0E8B               	movlw	low _dpowers
  7937  000A8E  24F3               	addwf	prodl,w,c
  7938  000A90  6EF6               	movwf	tblptrl,c
  7939  000A92  0EFD               	movlw	high _dpowers
  7940  000A94  20F4               	addwfc	prodh,w,c
  7941  000A96  6EF7               	movwf	tblptrh,c
  7942  000A98                     	if	0	;There are less than 3 active tblptr bytes
  7943  000A98                     	endif
  7944  000A98  0009               	tblrd		*+
  7945  000A9A  50F5               	movf	tablat,w,c
  7946  000A9C  0100               	movlb	0	; () banked
  7947  000A9E  5DE0               	subwf	printf@val& (0+255),w,b
  7948  000AA0  0009               	tblrd		*+
  7949  000AA2  50F5               	movf	tablat,w,c
  7950  000AA4  0100               	movlb	0	; () banked
  7951  000AA6  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  7952  000AA8  0009               	tblrd		*+
  7953  000AAA  50F5               	movf	tablat,w,c
  7954  000AAC  0100               	movlb	0	; () banked
  7955  000AAE  59E2               	subwfb	(printf@val+2)& (0+255),w,b
  7956  000AB0  0009               	tblrd		*+
  7957  000AB2  50F5               	movf	tablat,w,c
  7958  000AB4  0100               	movlb	0	; () banked
  7959  000AB6  59E3               	subwfb	(printf@val+3)& (0+255),w,b
  7960  000AB8  A0D8               	btfss	status,0,c
  7961  000ABA  D032               	goto	l7094
  7962                           
  7963                           ; BSR set to: 0
  7964                           
  7965                           ; BSR set to: 0
  7966                           
  7967                           ; BSR set to: 0
  7968                           ;doprnt.c: 1307: break;
  7969  000ABC  0100               	movlb	0	; () banked
  7970  000ABE  2BEA               	incf	printf@c& (0+255),f,b
  7971  000AC0  D7DD               	goto	l7064
  7972  000AC2                     l7076:
  7973                           
  7974                           ; BSR set to: 0
  7975                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7976  000AC2  0E01               	movlw	1
  7977  000AC4  0100               	movlb	0	; () banked
  7978  000AC6  6FEA               	movwf	printf@c& (0+255),b
  7979  000AC8                     l7078:
  7980                           
  7981                           ; BSR set to: 0
  7982  000AC8  0E08               	movlw	8
  7983  000ACA  0100               	movlb	0	; () banked
  7984  000ACC  19EA               	xorwf	printf@c& (0+255),w,b
  7985  000ACE  B4D8               	btfsc	status,2,c
  7986  000AD0  D027               	goto	l7094
  7987                           
  7988                           ; BSR set to: 0
  7989                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7990                           
  7991                           ; BSR set to: 0
  7992                           
  7993                           ; BSR set to: 0
  7994  000AD2  0100               	movlb	0	; () banked
  7995  000AD4  51EA               	movf	printf@c& (0+255),w,b
  7996  000AD6  0D04               	mullw	4
  7997  000AD8  0E01               	movlw	low _hexpowers
  7998  000ADA  24F3               	addwf	prodl,w,c
  7999  000ADC  6EF6               	movwf	tblptrl,c
  8000  000ADE  0EFE               	movlw	high _hexpowers
  8001  000AE0  20F4               	addwfc	prodh,w,c
  8002  000AE2  6EF7               	movwf	tblptrh,c
  8003  000AE4                     	if	0	;There are less than 3 active tblptr bytes
  8004  000AE4                     	endif
  8005  000AE4  0009               	tblrd		*+
  8006  000AE6  50F5               	movf	tablat,w,c
  8007  000AE8  0100               	movlb	0	; () banked
  8008  000AEA  5DE0               	subwf	printf@val& (0+255),w,b
  8009  000AEC  0009               	tblrd		*+
  8010  000AEE  50F5               	movf	tablat,w,c
  8011  000AF0  0100               	movlb	0	; () banked
  8012  000AF2  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  8013  000AF4  0009               	tblrd		*+
  8014  000AF6  50F5               	movf	tablat,w,c
  8015  000AF8  0100               	movlb	0	; () banked
  8016  000AFA  59E2               	subwfb	(printf@val+2)& (0+255),w,b
  8017  000AFC  0009               	tblrd		*+
  8018  000AFE  50F5               	movf	tablat,w,c
  8019  000B00  0100               	movlb	0	; () banked
  8020  000B02  59E3               	subwfb	(printf@val+3)& (0+255),w,b
  8021  000B04  A0D8               	btfss	status,0,c
  8022  000B06  D00C               	goto	l7094
  8023                           
  8024                           ; BSR set to: 0
  8025                           
  8026                           ; BSR set to: 0
  8027                           
  8028                           ; BSR set to: 0
  8029                           ;doprnt.c: 1318: break;
  8030  000B08  0100               	movlb	0	; () banked
  8031  000B0A  2BEA               	incf	printf@c& (0+255),f,b
  8032  000B0C  D7DD               	goto	l7078
  8033  000B0E                     l7092:
  8034                           
  8035                           ; BSR set to: 0
  8036  000B0E  0100               	movlb	0	; () banked
  8037  000B10  51E6               	movf	printf@flag& (0+255),w,b
  8038  000B12  0B80               	andlw	128
  8039                           
  8040                           ; Switch size 1, requested type "space"
  8041                           ; Number of cases is 2, Range of values is 0 to 128
  8042                           ; switch strategies available:
  8043                           ; Name         Instructions Cycles
  8044                           ; simple_byte            7     4 (average)
  8045                           ;	Chosen strategy is simple_byte
  8046  000B14  0A00               	xorlw	0	; case 0
  8047  000B16  B4D8               	btfsc	status,2,c
  8048  000B18  D7AE               	goto	l7062
  8049  000B1A  0A80               	xorlw	128	; case 128
  8050  000B1C  B4D8               	btfsc	status,2,c
  8051  000B1E  D7D1               	goto	l7076
  8052  000B20                     l7094:
  8053                           
  8054                           ; BSR set to: 0
  8055                           ;doprnt.c: 1339: if(c < prec)
  8056  000B20  0E80               	movlw	128
  8057  000B22  0100               	movlb	0	; () banked
  8058  000B24  BFEA               	btfsc	printf@c& (0+255),7,b
  8059  000B26  0E7F               	movlw	127
  8060  000B28  0100               	movlb	0	; () banked
  8061  000B2A  6FC7               	movwf	??_printf& (0+255),b
  8062  000B2C  0100               	movlb	0	; () banked
  8063  000B2E  51E8               	movf	printf@prec& (0+255),w,b
  8064  000B30  0100               	movlb	0	; () banked
  8065  000B32  5DEA               	subwf	printf@c& (0+255),w,b
  8066  000B34  0100               	movlb	0	; () banked
  8067  000B36  51E9               	movf	(printf@prec+1)& (0+255),w,b
  8068  000B38  0A80               	xorlw	128
  8069  000B3A  0100               	movlb	0	; () banked
  8070  000B3C  59C7               	subwfb	??_printf& (0+255),w,b
  8071  000B3E  B0D8               	btfsc	status,0,c
  8072  000B40  D003               	goto	l7098
  8073                           
  8074                           ; BSR set to: 0
  8075                           ;doprnt.c: 1340: c = prec;
  8076  000B42  C0E8  F0EA         	movff	printf@prec,printf@c
  8077  000B46  D018               	goto	l7102
  8078  000B48                     l7098:
  8079                           
  8080                           ; BSR set to: 0
  8081                           ;doprnt.c: 1341: else if(prec < c)
  8082  000B48  0100               	movlb	0	; () banked
  8083  000B4A  51E9               	movf	(printf@prec+1)& (0+255),w,b
  8084  000B4C  0A80               	xorlw	128
  8085  000B4E  0100               	movlb	0	; () banked
  8086  000B50  6FC7               	movwf	??_printf& (0+255),b
  8087  000B52  0100               	movlb	0	; () banked
  8088  000B54  51EA               	movf	printf@c& (0+255),w,b
  8089  000B56  0100               	movlb	0	; () banked
  8090  000B58  5DE8               	subwf	printf@prec& (0+255),w,b
  8091  000B5A  0E80               	movlw	128
  8092  000B5C  0100               	movlb	0	; () banked
  8093  000B5E  BFEA               	btfsc	printf@c& (0+255),7,b
  8094  000B60  0E7F               	movlw	127
  8095  000B62  0100               	movlb	0	; () banked
  8096  000B64  59C7               	subwfb	??_printf& (0+255),w,b
  8097  000B66  B0D8               	btfsc	status,0,c
  8098  000B68  D007               	goto	l7102
  8099                           
  8100                           ; BSR set to: 0
  8101                           ;doprnt.c: 1342: prec = c;
  8102  000B6A  0100               	movlb	0	; () banked
  8103  000B6C  51EA               	movf	printf@c& (0+255),w,b
  8104  000B6E  0100               	movlb	0	; () banked
  8105  000B70  6FE8               	movwf	printf@prec& (0+255),b
  8106  000B72  6BE9               	clrf	(printf@prec+1)& (0+255),b
  8107  000B74  BFE8               	btfsc	printf@prec& (0+255),7,b
  8108  000B76  07E9               	decf	(printf@prec+1)& (0+255),f,b
  8109  000B78                     l7102:
  8110                           
  8111                           ; BSR set to: 0
  8112                           ;doprnt.c: 1345: if(width && flag & 0x03)
  8113  000B78  0100               	movlb	0	; () banked
  8114  000B7A  51E4               	movf	printf@width& (0+255),w,b
  8115  000B7C  0100               	movlb	0	; () banked
  8116  000B7E  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  8117  000B80  B4D8               	btfsc	status,2,c
  8118  000B82  D014               	goto	l7108
  8119                           
  8120                           ; BSR set to: 0
  8121  000B84  0E03               	movlw	3
  8122  000B86  0100               	movlb	0	; () banked
  8123  000B88  15E6               	andwf	printf@flag& (0+255),w,b
  8124  000B8A  0100               	movlb	0	; () banked
  8125  000B8C  6FC7               	movwf	??_printf& (0+255),b
  8126  000B8E  0E00               	movlw	0
  8127  000B90  0100               	movlb	0	; () banked
  8128  000B92  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  8129  000B94  0100               	movlb	0	; () banked
  8130  000B96  6FC8               	movwf	(??_printf+1)& (0+255),b
  8131  000B98  0100               	movlb	0	; () banked
  8132  000B9A  51C7               	movf	??_printf& (0+255),w,b
  8133  000B9C  0100               	movlb	0	; () banked
  8134  000B9E  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  8135  000BA0  B4D8               	btfsc	status,2,c
  8136  000BA2  D004               	goto	l7108
  8137                           
  8138                           ; BSR set to: 0
  8139                           ;doprnt.c: 1346: width--;
  8140  000BA4  0100               	movlb	0	; () banked
  8141  000BA6  07E4               	decf	printf@width& (0+255),f,b
  8142  000BA8  A0D8               	btfss	status,0,c
  8143  000BAA  07E5               	decf	(printf@width+1)& (0+255),f,b
  8144  000BAC                     l7108:
  8145                           
  8146                           ; BSR set to: 0
  8147                           ;doprnt.c: 1348: if(flag & 0x4000) {
  8148  000BAC  0100               	movlb	0	; () banked
  8149  000BAE  ADE7               	btfss	(printf@flag+1)& (0+255),6,b
  8150  000BB0  D01E               	goto	l7116
  8151                           
  8152                           ; BSR set to: 0
  8153                           ;doprnt.c: 1349: if(width > prec)
  8154  000BB2  0100               	movlb	0	; () banked
  8155  000BB4  51E4               	movf	printf@width& (0+255),w,b
  8156  000BB6  0100               	movlb	0	; () banked
  8157  000BB8  5DE8               	subwf	printf@prec& (0+255),w,b
  8158  000BBA  0100               	movlb	0	; () banked
  8159  000BBC  51E9               	movf	(printf@prec+1)& (0+255),w,b
  8160  000BBE  0A80               	xorlw	128
  8161  000BC0  0100               	movlb	0	; () banked
  8162  000BC2  6FC7               	movwf	??_printf& (0+255),b
  8163  000BC4  0100               	movlb	0	; () banked
  8164  000BC6  51E5               	movf	(printf@width+1)& (0+255),w,b
  8165  000BC8  0A80               	xorlw	128
  8166  000BCA  0100               	movlb	0	; () banked
  8167  000BCC  59C7               	subwfb	??_printf& (0+255),w,b
  8168  000BCE  B0D8               	btfsc	status,0,c
  8169  000BD0  D009               	goto	l7114
  8170                           
  8171                           ; BSR set to: 0
  8172                           ;doprnt.c: 1350: width -= prec;
  8173  000BD2  0100               	movlb	0	; () banked
  8174  000BD4  51E8               	movf	printf@prec& (0+255),w,b
  8175  000BD6  0100               	movlb	0	; () banked
  8176  000BD8  5FE4               	subwf	printf@width& (0+255),f,b
  8177  000BDA  0100               	movlb	0	; () banked
  8178  000BDC  51E9               	movf	(printf@prec+1)& (0+255),w,b
  8179  000BDE  0100               	movlb	0	; () banked
  8180  000BE0  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  8181  000BE2  D005               	goto	l7116
  8182  000BE4                     l7114:
  8183                           
  8184                           ; BSR set to: 0
  8185                           ;doprnt.c: 1351: else
  8186                           ;doprnt.c: 1352: width = 0;
  8187  000BE4  0E00               	movlw	0
  8188  000BE6  0100               	movlb	0	; () banked
  8189  000BE8  6FE5               	movwf	(printf@width+1)& (0+255),b
  8190  000BEA  0E00               	movlw	0
  8191  000BEC  6FE4               	movwf	printf@width& (0+255),b
  8192  000BEE                     l7116:
  8193                           
  8194                           ; BSR set to: 0
  8195                           ;doprnt.c: 1353: }
  8196                           ;doprnt.c: 1381: if(width > c)
  8197  000BEE  0E80               	movlw	128
  8198  000BF0  0100               	movlb	0	; () banked
  8199  000BF2  BFEA               	btfsc	printf@c& (0+255),7,b
  8200  000BF4  0E7F               	movlw	127
  8201  000BF6  0100               	movlb	0	; () banked
  8202  000BF8  6FC7               	movwf	??_printf& (0+255),b
  8203  000BFA  0100               	movlb	0	; () banked
  8204  000BFC  51E4               	movf	printf@width& (0+255),w,b
  8205  000BFE  0100               	movlb	0	; () banked
  8206  000C00  5DEA               	subwf	printf@c& (0+255),w,b
  8207  000C02  0100               	movlb	0	; () banked
  8208  000C04  51E5               	movf	(printf@width+1)& (0+255),w,b
  8209  000C06  0A80               	xorlw	128
  8210  000C08  0100               	movlb	0	; () banked
  8211  000C0A  59C7               	subwfb	??_printf& (0+255),w,b
  8212  000C0C  B0D8               	btfsc	status,0,c
  8213  000C0E  D00B               	goto	l7120
  8214                           
  8215                           ; BSR set to: 0
  8216                           ;doprnt.c: 1382: width -= c;
  8217  000C10  0100               	movlb	0	; () banked
  8218  000C12  51EA               	movf	printf@c& (0+255),w,b
  8219  000C14  0100               	movlb	0	; () banked
  8220  000C16  5FE4               	subwf	printf@width& (0+255),f,b
  8221  000C18  0E00               	movlw	0
  8222  000C1A  0100               	movlb	0	; () banked
  8223  000C1C  BFEA               	btfsc	printf@c& (0+255),7,b
  8224  000C1E  0EFF               	movlw	255
  8225  000C20  0100               	movlb	0	; () banked
  8226  000C22  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  8227  000C24  D005               	goto	l7122
  8228  000C26                     l7120:
  8229                           
  8230                           ; BSR set to: 0
  8231                           ;doprnt.c: 1383: else
  8232                           ;doprnt.c: 1384: width = 0;
  8233  000C26  0E00               	movlw	0
  8234  000C28  0100               	movlb	0	; () banked
  8235  000C2A  6FE5               	movwf	(printf@width+1)& (0+255),b
  8236  000C2C  0E00               	movlw	0
  8237  000C2E  6FE4               	movwf	printf@width& (0+255),b
  8238  000C30                     l7122:
  8239                           
  8240                           ; BSR set to: 0
  8241                           ;doprnt.c: 1387: if(flag & 0x04) {
  8242  000C30  0100               	movlb	0	; () banked
  8243  000C32  A5E6               	btfss	printf@flag& (0+255),2,b
  8244  000C34  D021               	goto	l7134
  8245                           
  8246                           ; BSR set to: 0
  8247                           ;doprnt.c: 1392: if(flag & 0x03)
  8248  000C36  0E03               	movlw	3
  8249  000C38  0100               	movlb	0	; () banked
  8250  000C3A  15E6               	andwf	printf@flag& (0+255),w,b
  8251  000C3C  0100               	movlb	0	; () banked
  8252  000C3E  6FC7               	movwf	??_printf& (0+255),b
  8253  000C40  0E00               	movlw	0
  8254  000C42  0100               	movlb	0	; () banked
  8255  000C44  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  8256  000C46  0100               	movlb	0	; () banked
  8257  000C48  6FC8               	movwf	(??_printf+1)& (0+255),b
  8258  000C4A  0100               	movlb	0	; () banked
  8259  000C4C  51C7               	movf	??_printf& (0+255),w,b
  8260  000C4E  0100               	movlb	0	; () banked
  8261  000C50  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  8262  000C52  B4D8               	btfsc	status,2,c
  8263  000C54  D003               	goto	l7128
  8264                           
  8265                           ; BSR set to: 0
  8266                           ;doprnt.c: 1393: (putch('-') );
  8267  000C56  0E2D               	movlw	45
  8268  000C58  EC8C  F022         	call	_putch
  8269  000C5C                     l7128:
  8270                           
  8271                           ;doprnt.c: 1415: if(width)
  8272  000C5C  0100               	movlb	0	; () banked
  8273  000C5E  51E4               	movf	printf@width& (0+255),w,b
  8274  000C60  0100               	movlb	0	; () banked
  8275  000C62  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  8276  000C64  B4D8               	btfsc	status,2,c
  8277  000C66  D0B6               	goto	l7156
  8278                           
  8279                           ; BSR set to: 0
  8280                           ;doprnt.c: 1417: (putch('0') );
  8281                           
  8282                           ; BSR set to: 0
  8283                           
  8284                           ;doprnt.c: 1416: do
  8285  000C68  0E30               	movlw	48
  8286  000C6A  EC8C  F022         	call	_putch
  8287                           
  8288                           ;doprnt.c: 1418: while(--width);
  8289  000C6E  0100               	movlb	0	; () banked
  8290  000C70  07E4               	decf	printf@width& (0+255),f,b
  8291  000C72  A0D8               	btfss	status,0,c
  8292  000C74  07E5               	decf	(printf@width+1)& (0+255),f,b
  8293  000C76  D7F2               	goto	l7128
  8294  000C78                     l7134:
  8295                           
  8296                           ; BSR set to: 0
  8297                           ;doprnt.c: 1422: {
  8298                           ;doprnt.c: 1424: if(width
  8299                           ;doprnt.c: 1428: )
  8300  000C78  0100               	movlb	0	; () banked
  8301  000C7A  51E4               	movf	printf@width& (0+255),w,b
  8302  000C7C  0100               	movlb	0	; () banked
  8303  000C7E  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  8304  000C80  B4D8               	btfsc	status,2,c
  8305  000C82  D00D               	goto	l7140
  8306  000C84                     l7136:
  8307                           
  8308                           ; BSR set to: 0
  8309                           ;doprnt.c: 1430: (putch(' ') );
  8310  000C84  0E20               	movlw	32
  8311  000C86  EC8C  F022         	call	_putch
  8312                           
  8313                           ;doprnt.c: 1431: while(--width);
  8314  000C8A  0100               	movlb	0	; () banked
  8315  000C8C  07E4               	decf	printf@width& (0+255),f,b
  8316  000C8E  A0D8               	btfss	status,0,c
  8317  000C90  07E5               	decf	(printf@width+1)& (0+255),f,b
  8318  000C92  0100               	movlb	0	; () banked
  8319  000C94  51E4               	movf	printf@width& (0+255),w,b
  8320  000C96  0100               	movlb	0	; () banked
  8321  000C98  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  8322  000C9A  A4D8               	btfss	status,2,c
  8323  000C9C  D7F3               	goto	l7136
  8324  000C9E                     l7140:
  8325                           
  8326                           ; BSR set to: 0
  8327                           ;doprnt.c: 1438: if(flag & 0x03)
  8328  000C9E  0E03               	movlw	3
  8329  000CA0  0100               	movlb	0	; () banked
  8330  000CA2  15E6               	andwf	printf@flag& (0+255),w,b
  8331  000CA4  0100               	movlb	0	; () banked
  8332  000CA6  6FC7               	movwf	??_printf& (0+255),b
  8333  000CA8  0E00               	movlw	0
  8334  000CAA  0100               	movlb	0	; () banked
  8335  000CAC  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  8336  000CAE  0100               	movlb	0	; () banked
  8337  000CB0  6FC8               	movwf	(??_printf+1)& (0+255),b
  8338  000CB2  0100               	movlb	0	; () banked
  8339  000CB4  51C7               	movf	??_printf& (0+255),w,b
  8340  000CB6  0100               	movlb	0	; () banked
  8341  000CB8  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  8342  000CBA  B4D8               	btfsc	status,2,c
  8343  000CBC  D08B               	goto	l7156
  8344                           
  8345                           ; BSR set to: 0
  8346                           ;doprnt.c: 1439: (putch('-') );
  8347  000CBE  0E2D               	movlw	45
  8348  000CC0  EC8C  F022         	call	_putch
  8349                           
  8350                           ;doprnt.c: 1469: }
  8351                           ;doprnt.c: 1474: while(prec--) {
  8352  000CC4  D087               	goto	l7156
  8353  000CC6                     l7144:
  8354                           
  8355                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8356  000CC6  C0E8  F0C7         	movff	printf@prec,??_printf
  8357  000CCA  C0E9  F0C8         	movff	printf@prec+1,??_printf+1
  8358  000CCE  0100               	movlb	0	; () banked
  8359  000CD0  90D8               	bcf	status,0,c
  8360  000CD2  37C7               	rlcf	??_printf& (0+255),f,b
  8361  000CD4  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  8362  000CD6  0100               	movlb	0	; () banked
  8363  000CD8  90D8               	bcf	status,0,c
  8364  000CDA  37C7               	rlcf	??_printf& (0+255),f,b
  8365  000CDC  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  8366  000CDE  0E8B               	movlw	low _dpowers
  8367  000CE0  0100               	movlb	0	; () banked
  8368  000CE2  25C7               	addwf	??_printf& (0+255),w,b
  8369  000CE4  6EF6               	movwf	tblptrl,c
  8370  000CE6  0EFD               	movlw	high _dpowers
  8371  000CE8  21C8               	addwfc	(??_printf+1)& (0+255),w,b
  8372  000CEA  6EF7               	movwf	tblptrh,c
  8373  000CEC                     	if	0	;There are less than 3 active tblptr bytes
  8374  000CEC                     	endif
  8375  000CEC  0009               	tblrd		*+
  8376  000CEE  CFF5 F029          	movff	tablat,___lldiv@divisor
  8377  000CF2  0009               	tblrd		*+
  8378  000CF4  CFF5 F02A          	movff	tablat,___lldiv@divisor+1
  8379  000CF8  0009               	tblrd		*+
  8380  000CFA  CFF5 F02B          	movff	tablat,___lldiv@divisor+2
  8381  000CFE  000A               	tblrd		*-
  8382  000D00  CFF5 F02C          	movff	tablat,___lldiv@divisor+3
  8383  000D04  C0E0  F025         	movff	printf@val,___lldiv@dividend
  8384  000D08  C0E1  F026         	movff	printf@val+1,___lldiv@dividend+1
  8385  000D0C  C0E2  F027         	movff	printf@val+2,___lldiv@dividend+2
  8386  000D10  C0E3  F028         	movff	printf@val+3,___lldiv@dividend+3
  8387  000D14  ECB6  F01E         	call	___lldiv	;wreg free
  8388  000D18  C025  F032         	movff	?___lldiv,___llmod@dividend
  8389  000D1C  C026  F033         	movff	?___lldiv+1,___llmod@dividend+1
  8390  000D20  C027  F034         	movff	?___lldiv+2,___llmod@dividend+2
  8391  000D24  C028  F035         	movff	?___lldiv+3,___llmod@dividend+3
  8392  000D28  0E0A               	movlw	10
  8393  000D2A  6E36               	movwf	___llmod@divisor,c
  8394  000D2C  0E00               	movlw	0
  8395  000D2E  6E37               	movwf	___llmod@divisor+1,c
  8396  000D30  0E00               	movlw	0
  8397  000D32  6E38               	movwf	___llmod@divisor+2,c
  8398  000D34  0E00               	movlw	0
  8399  000D36  6E39               	movwf	___llmod@divisor+3,c
  8400  000D38  ECA3  F01F         	call	___llmod	;wreg free
  8401  000D3C  5032               	movf	?___llmod,w,c
  8402  000D3E  0F30               	addlw	48
  8403  000D40  0100               	movlb	0	; () banked
  8404  000D42  6FEA               	movwf	printf@c& (0+255),b
  8405                           
  8406                           ;doprnt.c: 1491: break;
  8407  000D44  D043               	goto	l7154
  8408  000D46                     l7146:
  8409                           
  8410                           ; BSR set to: 0
  8411                           ;doprnt.c: 1499: {
  8412                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  8413  000D46  C0E0  F025         	movff	printf@val,___lldiv@dividend
  8414  000D4A  C0E1  F026         	movff	printf@val+1,___lldiv@dividend+1
  8415  000D4E  C0E2  F027         	movff	printf@val+2,___lldiv@dividend+2
  8416  000D52  C0E3  F028         	movff	printf@val+3,___lldiv@dividend+3
  8417  000D56  C0E8  F0C7         	movff	printf@prec,??_printf
  8418  000D5A  C0E9  F0C8         	movff	printf@prec+1,??_printf+1
  8419  000D5E  0100               	movlb	0	; () banked
  8420  000D60  90D8               	bcf	status,0,c
  8421  000D62  37C7               	rlcf	??_printf& (0+255),f,b
  8422  000D64  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  8423  000D66  0100               	movlb	0	; () banked
  8424  000D68  90D8               	bcf	status,0,c
  8425  000D6A  37C7               	rlcf	??_printf& (0+255),f,b
  8426  000D6C  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  8427  000D6E  0E01               	movlw	low _hexpowers
  8428  000D70  0100               	movlb	0	; () banked
  8429  000D72  25C7               	addwf	??_printf& (0+255),w,b
  8430  000D74  6EF6               	movwf	tblptrl,c
  8431  000D76  0EFE               	movlw	high _hexpowers
  8432  000D78  21C8               	addwfc	(??_printf+1)& (0+255),w,b
  8433  000D7A  6EF7               	movwf	tblptrh,c
  8434  000D7C                     	if	0	;There are less than 3 active tblptr bytes
  8435  000D7C                     	endif
  8436  000D7C  0009               	tblrd		*+
  8437  000D7E  CFF5 F029          	movff	tablat,___lldiv@divisor
  8438  000D82  0009               	tblrd		*+
  8439  000D84  CFF5 F02A          	movff	tablat,___lldiv@divisor+1
  8440  000D88  0009               	tblrd		*+
  8441  000D8A  CFF5 F02B          	movff	tablat,___lldiv@divisor+2
  8442  000D8E  000A               	tblrd		*-
  8443  000D90  CFF5 F02C          	movff	tablat,___lldiv@divisor+3
  8444  000D94  ECB6  F01E         	call	___lldiv	;wreg free
  8445  000D98  5025               	movf	?___lldiv,w,c
  8446  000D9A  0B0F               	andlw	15
  8447  000D9C  0100               	movlb	0	; () banked
  8448  000D9E  6FD0               	movwf	printf@idx& (0+255),b
  8449                           
  8450                           ; BSR set to: 0
  8451                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  8452  000DA0  0100               	movlb	0	; () banked
  8453  000DA2  51D0               	movf	printf@idx& (0+255),w,b
  8454  000DA4  0D01               	mullw	1
  8455  000DA6  0E3F               	movlw	low STR_24
  8456  000DA8  24F3               	addwf	prodl,w,c
  8457  000DAA  6EF6               	movwf	tblptrl,c
  8458  000DAC  0EFF               	movlw	high STR_24
  8459  000DAE  20F4               	addwfc	prodh,w,c
  8460  000DB0  6EF7               	movwf	tblptrh,c
  8461  000DB2                     	if	0	;There are less than 3 active tblptr bytes
  8462  000DB2                     	endif
  8463  000DB2  0008               	tblrd		*
  8464  000DB4  CFF5 F0EA          	movff	tablat,printf@c
  8465                           
  8466                           ; BSR set to: 0
  8467                           ;doprnt.c: 1523: }
  8468                           
  8469                           ;doprnt.c: 1508: }
  8470                           ;doprnt.c: 1510: break;
  8471  000DB8  D009               	goto	l7154
  8472  000DBA                     l7152:
  8473  000DBA  0100               	movlb	0	; () banked
  8474  000DBC  51E6               	movf	printf@flag& (0+255),w,b
  8475  000DBE  0B80               	andlw	128
  8476                           
  8477                           ; Switch size 1, requested type "space"
  8478                           ; Number of cases is 2, Range of values is 0 to 128
  8479                           ; switch strategies available:
  8480                           ; Name         Instructions Cycles
  8481                           ; simple_byte            7     4 (average)
  8482                           ;	Chosen strategy is simple_byte
  8483  000DC0  0A00               	xorlw	0	; case 0
  8484  000DC2  B4D8               	btfsc	status,2,c
  8485  000DC4  D780               	goto	l7144
  8486  000DC6  0A80               	xorlw	128	; case 128
  8487  000DC8  B4D8               	btfsc	status,2,c
  8488  000DCA  D7BD               	goto	l7146
  8489  000DCC                     l7154:
  8490                           
  8491                           ; BSR set to: 0
  8492                           ;doprnt.c: 1524: (putch(c) );
  8493  000DCC  0100               	movlb	0	; () banked
  8494  000DCE  51EA               	movf	printf@c& (0+255),w,b
  8495  000DD0  EC8C  F022         	call	_putch
  8496  000DD4                     l7156:
  8497  000DD4  0100               	movlb	0	; () banked
  8498  000DD6  07E8               	decf	printf@prec& (0+255),f,b
  8499  000DD8  A0D8               	btfss	status,0,c
  8500  000DDA  07E9               	decf	(printf@prec+1)& (0+255),f,b
  8501  000DDC  0100               	movlb	0	; () banked
  8502  000DDE  29E8               	incf	printf@prec& (0+255),w,b
  8503  000DE0  E1EC               	bnz	l7152
  8504  000DE2  0100               	movlb	0	; () banked
  8505  000DE4  29E9               	incf	(printf@prec+1)& (0+255),w,b
  8506  000DE6  A4D8               	btfss	status,2,c
  8507  000DE8  D7E8               	goto	l7152
  8508  000DEA                     l7158:
  8509  000DEA  C0B9  FFF6         	movff	printf@f,tblptrl
  8510  000DEE  C0BA  FFF7         	movff	printf@f+1,tblptrh
  8511  000DF2  0100               	movlb	0	; () banked
  8512  000DF4  4BB9               	infsnz	printf@f& (0+255),f,b
  8513  000DF6  2BBA               	incf	(printf@f+1)& (0+255),f,b
  8514  000DF8                     	if	0	;tblptru may be non-zero
  8515  000DF8                     	endif
  8516  000DF8                     	if	0	;tblptru may be non-zero
  8517  000DF8                     	endif
  8518  000DF8  0008               	tblrd		*
  8519  000DFA  CFF5 F0EA          	movff	tablat,printf@c
  8520  000DFE  0100               	movlb	0	; () banked
  8521  000E00  51EA               	movf	printf@c& (0+255),w,b
  8522  000E02  B4D8               	btfsc	status,2,c
  8523  000E04  0012               	return	
  8524  000E06  EF11  F000         	goto	l6792
  8525  000E0A                     __end_of_printf:
  8526                           	opt stack 0
  8527                           tblptru	equ	0xFF8
  8528                           tblptrh	equ	0xFF7
  8529                           tblptrl	equ	0xFF6
  8530                           tablat	equ	0xFF5
  8531                           prodh	equ	0xFF4
  8532                           prodl	equ	0xFF3
  8533                           intcon	equ	0xFF2
  8534                           postinc0	equ	0xFEE
  8535                           wreg	equ	0xFE8
  8536                           postdec1	equ	0xFE5
  8537                           fsr1l	equ	0xFE1
  8538                           indf2	equ	0xFDF
  8539                           postinc2	equ	0xFDE
  8540                           postdec2	equ	0xFDD
  8541                           fsr2h	equ	0xFDA
  8542                           fsr2l	equ	0xFD9
  8543                           status	equ	0xFD8
  8544                           
  8545 ;; *************** function _scale *****************
  8546 ;; Defined at:
  8547 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  8548 ;; Parameters:    Size  Location     Type
  8549 ;;  scl             1    wreg     char 
  8550 ;; Auto vars:     Size  Location     Type
  8551 ;;  scl             1   21[BANK0 ] char 
  8552 ;; Return value:  Size  Location     Type
  8553 ;;                  3   15[BANK0 ] char 
  8554 ;; Registers used:
  8555 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8556 ;; Tracked objects:
  8557 ;;		On entry : 0/0
  8558 ;;		On exit  : 0/0
  8559 ;;		Unchanged: 0/0
  8560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8561 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8562 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8564 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8565 ;;Total ram usage:        7 bytes
  8566 ;; Hardware stack levels used:    1
  8567 ;; Hardware stack levels required when called:    5
  8568 ;; This function calls:
  8569 ;;		___awdiv
  8570 ;;		___awmod
  8571 ;;		___ftmul
  8572 ;;		___wmul
  8573 ;; This function is called by:
  8574 ;;		_printf
  8575 ;; This function uses a non-reentrant model
  8576 ;;
  8577                           
  8578                           	psect	text17
  8579  001BAA                     __ptext17:
  8580                           	opt stack 0
  8581  001BAA                     _scale:
  8582                           	opt stack 23
  8583                           
  8584                           ; BSR set to: 0
  8585                           ;incstack = 0
  8586                           ;scale@scl stored from wreg
  8587  001BAA  0100               	movlb	0	; () banked
  8588  001BAC  6F95               	movwf	scale@scl& (0+255),b
  8589                           
  8590                           ;doprnt.c: 428: if(scl < 0) {
  8591  001BAE  0100               	movlb	0	; () banked
  8592  001BB0  AF95               	btfss	scale@scl& (0+255),7,b
  8593  001BB2  D104               	goto	l6458
  8594                           
  8595                           ; BSR set to: 0
  8596                           ;doprnt.c: 429: scl = -scl;
  8597  001BB4  0100               	movlb	0	; () banked
  8598  001BB6  6D95               	negf	scale@scl& (0+255),b
  8599                           
  8600                           ;doprnt.c: 430: if(scl>=110)
  8601  001BB8  0100               	movlb	0	; () banked
  8602  001BBA  5195               	movf	scale@scl& (0+255),w,b
  8603  001BBC  0A80               	xorlw	128
  8604  001BBE  0F12               	addlw	-238
  8605  001BC0  A0D8               	btfss	status,0,c
  8606  001BC2  D094               	goto	l6448
  8607                           
  8608                           ; BSR set to: 0
  8609                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  8610  001BC4  0E00               	movlw	0
  8611  001BC6  6E36               	movwf	___wmul@multiplicand+1,c
  8612  001BC8  0E03               	movlw	3
  8613  001BCA  6E35               	movwf	___wmul@multiplicand,c
  8614  001BCC  0E00               	movlw	0
  8615  001BCE  6E2E               	movwf	___awdiv@divisor+1,c
  8616  001BD0  0E0A               	movlw	10
  8617  001BD2  6E2D               	movwf	___awdiv@divisor,c
  8618  001BD4  0E00               	movlw	0
  8619  001BD6  6E28               	movwf	___awmod@divisor+1,c
  8620  001BD8  0E64               	movlw	100
  8621  001BDA  6E27               	movwf	___awmod@divisor,c
  8622  001BDC  0100               	movlb	0	; () banked
  8623  001BDE  5195               	movf	scale@scl& (0+255),w,b
  8624  001BE0  6E25               	movwf	___awmod@dividend,c
  8625  001BE2  6A26               	clrf	___awmod@dividend+1,c
  8626  001BE4  BE25               	btfsc	___awmod@dividend,7,c
  8627  001BE6  0626               	decf	___awmod@dividend+1,f,c
  8628  001BE8  EC33  F01F         	call	___awmod	;wreg free
  8629  001BEC  C025  F02B         	movff	?___awmod,___awdiv@dividend
  8630  001BF0  C026  F02C         	movff	?___awmod+1,___awdiv@dividend+1
  8631  001BF4  EC74  F01E         	call	___awdiv	;wreg free
  8632  001BF8  0E09               	movlw	9
  8633  001BFA  242B               	addwf	?___awdiv,w,c
  8634  001BFC  6E33               	movwf	___wmul@multiplier,c
  8635  001BFE  0E00               	movlw	0
  8636  001C00  202C               	addwfc	?___awdiv+1,w,c
  8637  001C02  6E34               	movwf	___wmul@multiplier+1,c
  8638  001C04  EC67  F022         	call	___wmul	;wreg free
  8639  001C08  0EB3               	movlw	low __npowers_
  8640  001C0A  2433               	addwf	?___wmul,w,c
  8641  001C0C  6EF6               	movwf	tblptrl,c
  8642  001C0E  0EFD               	movlw	high __npowers_
  8643  001C10  2034               	addwfc	?___wmul+1,w,c
  8644  001C12  6EF7               	movwf	tblptrh,c
  8645  001C14                     	if	0	;There are less than 3 active tblptr bytes
  8646  001C14                     	endif
  8647  001C14  0009               	tblrd		*+
  8648  001C16  CFF5 F083          	movff	tablat,___ftmul@f2
  8649  001C1A  0009               	tblrd		*+
  8650  001C1C  CFF5 F084          	movff	tablat,___ftmul@f2+1
  8651  001C20  000A               	tblrd		*-
  8652  001C22  CFF5 F085          	movff	tablat,___ftmul@f2+2
  8653  001C26  0E00               	movlw	0
  8654  001C28  6E2E               	movwf	___awdiv@divisor+1,c
  8655  001C2A  0E64               	movlw	100
  8656  001C2C  6E2D               	movwf	___awdiv@divisor,c
  8657  001C2E  0100               	movlb	0	; () banked
  8658  001C30  5195               	movf	scale@scl& (0+255),w,b
  8659  001C32  6E2B               	movwf	___awdiv@dividend,c
  8660  001C34  6A2C               	clrf	___awdiv@dividend+1,c
  8661  001C36  BE2B               	btfsc	___awdiv@dividend,7,c
  8662  001C38  062C               	decf	___awdiv@dividend+1,f,c
  8663  001C3A  EC74  F01E         	call	___awdiv	;wreg free
  8664  001C3E  0E12               	movlw	18
  8665  001C40  242B               	addwf	?___awdiv,w,c
  8666  001C42  6E33               	movwf	___wmul@multiplier,c
  8667  001C44  0E00               	movlw	0
  8668  001C46  202C               	addwfc	?___awdiv+1,w,c
  8669  001C48  6E34               	movwf	___wmul@multiplier+1,c
  8670  001C4A  0E00               	movlw	0
  8671  001C4C  6E36               	movwf	___wmul@multiplicand+1,c
  8672  001C4E  0E03               	movlw	3
  8673  001C50  6E35               	movwf	___wmul@multiplicand,c
  8674  001C52  EC67  F022         	call	___wmul	;wreg free
  8675  001C56  0EB3               	movlw	low __npowers_
  8676  001C58  2433               	addwf	?___wmul,w,c
  8677  001C5A  6EF6               	movwf	tblptrl,c
  8678  001C5C  0EFD               	movlw	high __npowers_
  8679  001C5E  2034               	addwfc	?___wmul+1,w,c
  8680  001C60  6EF7               	movwf	tblptrh,c
  8681  001C62                     	if	0	;There are less than 3 active tblptr bytes
  8682  001C62                     	endif
  8683  001C62  0009               	tblrd		*+
  8684  001C64  CFF5 F080          	movff	tablat,___ftmul@f1
  8685  001C68  0009               	tblrd		*+
  8686  001C6A  CFF5 F081          	movff	tablat,___ftmul@f1+1
  8687  001C6E  000A               	tblrd		*-
  8688  001C70  CFF5 F082          	movff	tablat,___ftmul@f1+2
  8689  001C74  EC74  F014         	call	___ftmul	;wreg free
  8690  001C78  C080  F092         	movff	?___ftmul,_scale$1423
  8691  001C7C  C081  F093         	movff	?___ftmul+1,_scale$1423+1
  8692  001C80  C082  F094         	movff	?___ftmul+2,_scale$1423+2
  8693                           
  8694                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  8695  001C84  C092  F080         	movff	_scale$1423,___ftmul@f1
  8696  001C88  C093  F081         	movff	_scale$1423+1,___ftmul@f1+1
  8697  001C8C  C094  F082         	movff	_scale$1423+2,___ftmul@f1+2
  8698  001C90  0E00               	movlw	0
  8699  001C92  6E36               	movwf	___wmul@multiplicand+1,c
  8700  001C94  0E03               	movlw	3
  8701  001C96  6E35               	movwf	___wmul@multiplicand,c
  8702  001C98  0E00               	movlw	0
  8703  001C9A  6E28               	movwf	___awmod@divisor+1,c
  8704  001C9C  0E0A               	movlw	10
  8705  001C9E  6E27               	movwf	___awmod@divisor,c
  8706  001CA0  0100               	movlb	0	; () banked
  8707  001CA2  5195               	movf	scale@scl& (0+255),w,b
  8708  001CA4  6E25               	movwf	___awmod@dividend,c
  8709  001CA6  6A26               	clrf	___awmod@dividend+1,c
  8710  001CA8  BE25               	btfsc	___awmod@dividend,7,c
  8711  001CAA  0626               	decf	___awmod@dividend+1,f,c
  8712  001CAC  EC33  F01F         	call	___awmod	;wreg free
  8713  001CB0  C025  F033         	movff	?___awmod,___wmul@multiplier
  8714  001CB4  C026  F034         	movff	?___awmod+1,___wmul@multiplier+1
  8715  001CB8  EC67  F022         	call	___wmul	;wreg free
  8716  001CBC  0EB3               	movlw	low __npowers_
  8717  001CBE  2433               	addwf	?___wmul,w,c
  8718  001CC0  6EF6               	movwf	tblptrl,c
  8719  001CC2  0EFD               	movlw	high __npowers_
  8720  001CC4  2034               	addwfc	?___wmul+1,w,c
  8721  001CC6  6EF7               	movwf	tblptrh,c
  8722  001CC8                     	if	0	;There are less than 3 active tblptr bytes
  8723  001CC8                     	endif
  8724  001CC8  0009               	tblrd		*+
  8725  001CCA  CFF5 F083          	movff	tablat,___ftmul@f2
  8726  001CCE  0009               	tblrd		*+
  8727  001CD0  CFF5 F084          	movff	tablat,___ftmul@f2+1
  8728  001CD4  000A               	tblrd		*-
  8729  001CD6  CFF5 F085          	movff	tablat,___ftmul@f2+2
  8730  001CDA  EC74  F014         	call	___ftmul	;wreg free
  8731  001CDE  C080  F08F         	movff	?___ftmul,?_scale
  8732  001CE2  C081  F090         	movff	?___ftmul+1,?_scale+1
  8733  001CE6  C082  F091         	movff	?___ftmul+2,?_scale+2
  8734  001CEA  0012               	return	
  8735  001CEC                     l6448:
  8736                           
  8737                           ;doprnt.c: 432: else if(scl > 10)
  8738  001CEC  0100               	movlb	0	; () banked
  8739  001CEE  5195               	movf	scale@scl& (0+255),w,b
  8740  001CF0  0A80               	xorlw	128
  8741  001CF2  0F75               	addlw	-139
  8742  001CF4  A0D8               	btfss	status,0,c
  8743  001CF6  D04F               	goto	l6454
  8744                           
  8745                           ; BSR set to: 0
  8746                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  8747  001CF8  0E00               	movlw	0
  8748  001CFA  6E2E               	movwf	___awdiv@divisor+1,c
  8749  001CFC  0E0A               	movlw	10
  8750  001CFE  6E2D               	movwf	___awdiv@divisor,c
  8751  001D00  0100               	movlb	0	; () banked
  8752  001D02  5195               	movf	scale@scl& (0+255),w,b
  8753  001D04  6E2B               	movwf	___awdiv@dividend,c
  8754  001D06  6A2C               	clrf	___awdiv@dividend+1,c
  8755  001D08  BE2B               	btfsc	___awdiv@dividend,7,c
  8756  001D0A  062C               	decf	___awdiv@dividend+1,f,c
  8757  001D0C  EC74  F01E         	call	___awdiv	;wreg free
  8758  001D10  0E09               	movlw	9
  8759  001D12  242B               	addwf	?___awdiv,w,c
  8760  001D14  6E33               	movwf	___wmul@multiplier,c
  8761  001D16  0E00               	movlw	0
  8762  001D18  202C               	addwfc	?___awdiv+1,w,c
  8763  001D1A  6E34               	movwf	___wmul@multiplier+1,c
  8764  001D1C  0E00               	movlw	0
  8765  001D1E  6E36               	movwf	___wmul@multiplicand+1,c
  8766  001D20  0E03               	movlw	3
  8767  001D22  6E35               	movwf	___wmul@multiplicand,c
  8768  001D24  EC67  F022         	call	___wmul	;wreg free
  8769  001D28  0EB3               	movlw	low __npowers_
  8770  001D2A  2433               	addwf	?___wmul,w,c
  8771  001D2C  6EF6               	movwf	tblptrl,c
  8772  001D2E  0EFD               	movlw	high __npowers_
  8773  001D30  2034               	addwfc	?___wmul+1,w,c
  8774  001D32  6EF7               	movwf	tblptrh,c
  8775  001D34                     	if	0	;There are less than 3 active tblptr bytes
  8776  001D34                     	endif
  8777  001D34  0009               	tblrd		*+
  8778  001D36  CFF5 F080          	movff	tablat,___ftmul@f1
  8779  001D3A  0009               	tblrd		*+
  8780  001D3C  CFF5 F081          	movff	tablat,___ftmul@f1+1
  8781  001D40  000A               	tblrd		*-
  8782  001D42  CFF5 F082          	movff	tablat,___ftmul@f1+2
  8783  001D46  0E00               	movlw	0
  8784  001D48  6E36               	movwf	___wmul@multiplicand+1,c
  8785  001D4A  0E03               	movlw	3
  8786  001D4C  6E35               	movwf	___wmul@multiplicand,c
  8787  001D4E  0E00               	movlw	0
  8788  001D50  6E28               	movwf	___awmod@divisor+1,c
  8789  001D52  0E0A               	movlw	10
  8790  001D54  6E27               	movwf	___awmod@divisor,c
  8791  001D56  0100               	movlb	0	; () banked
  8792  001D58  5195               	movf	scale@scl& (0+255),w,b
  8793  001D5A  6E25               	movwf	___awmod@dividend,c
  8794  001D5C  6A26               	clrf	___awmod@dividend+1,c
  8795  001D5E  BE25               	btfsc	___awmod@dividend,7,c
  8796  001D60  0626               	decf	___awmod@dividend+1,f,c
  8797  001D62  EC33  F01F         	call	___awmod	;wreg free
  8798  001D66  C025  F033         	movff	?___awmod,___wmul@multiplier
  8799  001D6A  C026  F034         	movff	?___awmod+1,___wmul@multiplier+1
  8800  001D6E  EC67  F022         	call	___wmul	;wreg free
  8801  001D72  0EB3               	movlw	low __npowers_
  8802  001D74  2433               	addwf	?___wmul,w,c
  8803  001D76  6EF6               	movwf	tblptrl,c
  8804  001D78  0EFD               	movlw	high __npowers_
  8805  001D7A  2034               	addwfc	?___wmul+1,w,c
  8806  001D7C  6EF7               	movwf	tblptrh,c
  8807  001D7E                     	if	0	;There are less than 3 active tblptr bytes
  8808  001D7E                     	endif
  8809  001D7E  0009               	tblrd		*+
  8810  001D80  CFF5 F083          	movff	tablat,___ftmul@f2
  8811  001D84  0009               	tblrd		*+
  8812  001D86  CFF5 F084          	movff	tablat,___ftmul@f2+1
  8813  001D8A  000A               	tblrd		*-
  8814  001D8C  CFF5 F085          	movff	tablat,___ftmul@f2+2
  8815  001D90  EC74  F014         	call	___ftmul	;wreg free
  8816  001D94  D7A4               	goto	L6
  8817  001D96                     l6454:
  8818                           
  8819                           ;doprnt.c: 434: return _npowers_[scl];
  8820  001D96  0100               	movlb	0	; () banked
  8821  001D98  5195               	movf	scale@scl& (0+255),w,b
  8822  001D9A  0D03               	mullw	3
  8823  001D9C  0EB3               	movlw	low __npowers_
  8824  001D9E  24F3               	addwf	prodl,w,c
  8825  001DA0  6EF6               	movwf	tblptrl,c
  8826  001DA2  0EFD               	movlw	high __npowers_
  8827  001DA4  20F4               	addwfc	prodh,w,c
  8828  001DA6  6EF7               	movwf	tblptrh,c
  8829  001DA8                     	if	0	;There are less than 3 active tblptr bytes
  8830  001DA8                     	endif
  8831  001DA8  0009               	tblrd		*+
  8832  001DAA  CFF5 F08F          	movff	tablat,?_scale
  8833  001DAE  0009               	tblrd		*+
  8834  001DB0  CFF5 F090          	movff	tablat,?_scale+1
  8835  001DB4  000A               	tblrd		*-
  8836  001DB6  CFF5 F091          	movff	tablat,?_scale+2
  8837                           
  8838                           ; BSR set to: 0
  8839  001DBA  0012               	return	
  8840  001DBC                     l6458:
  8841                           
  8842                           ; BSR set to: 0
  8843                           ;doprnt.c: 435: }
  8844                           ;doprnt.c: 436: if(scl>=110)
  8845  001DBC  0100               	movlb	0	; () banked
  8846  001DBE  5195               	movf	scale@scl& (0+255),w,b
  8847  001DC0  0A80               	xorlw	128
  8848  001DC2  0F12               	addlw	-238
  8849  001DC4  A0D8               	btfss	status,0,c
  8850  001DC6  D094               	goto	l6466
  8851                           
  8852                           ; BSR set to: 0
  8853                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8854  001DC8  0E00               	movlw	0
  8855  001DCA  6E36               	movwf	___wmul@multiplicand+1,c
  8856  001DCC  0E03               	movlw	3
  8857  001DCE  6E35               	movwf	___wmul@multiplicand,c
  8858  001DD0  0E00               	movlw	0
  8859  001DD2  6E2E               	movwf	___awdiv@divisor+1,c
  8860  001DD4  0E0A               	movlw	10
  8861  001DD6  6E2D               	movwf	___awdiv@divisor,c
  8862  001DD8  0E00               	movlw	0
  8863  001DDA  6E28               	movwf	___awmod@divisor+1,c
  8864  001DDC  0E64               	movlw	100
  8865  001DDE  6E27               	movwf	___awmod@divisor,c
  8866  001DE0  0100               	movlb	0	; () banked
  8867  001DE2  5195               	movf	scale@scl& (0+255),w,b
  8868  001DE4  6E25               	movwf	___awmod@dividend,c
  8869  001DE6  6A26               	clrf	___awmod@dividend+1,c
  8870  001DE8  BE25               	btfsc	___awmod@dividend,7,c
  8871  001DEA  0626               	decf	___awmod@dividend+1,f,c
  8872  001DEC  EC33  F01F         	call	___awmod	;wreg free
  8873  001DF0  C025  F02B         	movff	?___awmod,___awdiv@dividend
  8874  001DF4  C026  F02C         	movff	?___awmod+1,___awdiv@dividend+1
  8875  001DF8  EC74  F01E         	call	___awdiv	;wreg free
  8876  001DFC  0E09               	movlw	9
  8877  001DFE  242B               	addwf	?___awdiv,w,c
  8878  001E00  6E33               	movwf	___wmul@multiplier,c
  8879  001E02  0E00               	movlw	0
  8880  001E04  202C               	addwfc	?___awdiv+1,w,c
  8881  001E06  6E34               	movwf	___wmul@multiplier+1,c
  8882  001E08  EC67  F022         	call	___wmul	;wreg free
  8883  001E0C  0EDA               	movlw	low __powers_
  8884  001E0E  2433               	addwf	?___wmul,w,c
  8885  001E10  6EF6               	movwf	tblptrl,c
  8886  001E12  0EFD               	movlw	high __powers_
  8887  001E14  2034               	addwfc	?___wmul+1,w,c
  8888  001E16  6EF7               	movwf	tblptrh,c
  8889  001E18                     	if	0	;There are less than 3 active tblptr bytes
  8890  001E18                     	endif
  8891  001E18  0009               	tblrd		*+
  8892  001E1A  CFF5 F083          	movff	tablat,___ftmul@f2
  8893  001E1E  0009               	tblrd		*+
  8894  001E20  CFF5 F084          	movff	tablat,___ftmul@f2+1
  8895  001E24  000A               	tblrd		*-
  8896  001E26  CFF5 F085          	movff	tablat,___ftmul@f2+2
  8897  001E2A  0E00               	movlw	0
  8898  001E2C  6E2E               	movwf	___awdiv@divisor+1,c
  8899  001E2E  0E64               	movlw	100
  8900  001E30  6E2D               	movwf	___awdiv@divisor,c
  8901  001E32  0100               	movlb	0	; () banked
  8902  001E34  5195               	movf	scale@scl& (0+255),w,b
  8903  001E36  6E2B               	movwf	___awdiv@dividend,c
  8904  001E38  6A2C               	clrf	___awdiv@dividend+1,c
  8905  001E3A  BE2B               	btfsc	___awdiv@dividend,7,c
  8906  001E3C  062C               	decf	___awdiv@dividend+1,f,c
  8907  001E3E  EC74  F01E         	call	___awdiv	;wreg free
  8908  001E42  0E12               	movlw	18
  8909  001E44  242B               	addwf	?___awdiv,w,c
  8910  001E46  6E33               	movwf	___wmul@multiplier,c
  8911  001E48  0E00               	movlw	0
  8912  001E4A  202C               	addwfc	?___awdiv+1,w,c
  8913  001E4C  6E34               	movwf	___wmul@multiplier+1,c
  8914  001E4E  0E00               	movlw	0
  8915  001E50  6E36               	movwf	___wmul@multiplicand+1,c
  8916  001E52  0E03               	movlw	3
  8917  001E54  6E35               	movwf	___wmul@multiplicand,c
  8918  001E56  EC67  F022         	call	___wmul	;wreg free
  8919  001E5A  0EDA               	movlw	low __powers_
  8920  001E5C  2433               	addwf	?___wmul,w,c
  8921  001E5E  6EF6               	movwf	tblptrl,c
  8922  001E60  0EFD               	movlw	high __powers_
  8923  001E62  2034               	addwfc	?___wmul+1,w,c
  8924  001E64  6EF7               	movwf	tblptrh,c
  8925  001E66                     	if	0	;There are less than 3 active tblptr bytes
  8926  001E66                     	endif
  8927  001E66  0009               	tblrd		*+
  8928  001E68  CFF5 F080          	movff	tablat,___ftmul@f1
  8929  001E6C  0009               	tblrd		*+
  8930  001E6E  CFF5 F081          	movff	tablat,___ftmul@f1+1
  8931  001E72  000A               	tblrd		*-
  8932  001E74  CFF5 F082          	movff	tablat,___ftmul@f1+2
  8933  001E78  EC74  F014         	call	___ftmul	;wreg free
  8934  001E7C  C080  F092         	movff	?___ftmul,_scale$1423
  8935  001E80  C081  F093         	movff	?___ftmul+1,_scale$1423+1
  8936  001E84  C082  F094         	movff	?___ftmul+2,_scale$1423+2
  8937                           
  8938                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8939  001E88  C092  F080         	movff	_scale$1423,___ftmul@f1
  8940  001E8C  C093  F081         	movff	_scale$1423+1,___ftmul@f1+1
  8941  001E90  C094  F082         	movff	_scale$1423+2,___ftmul@f1+2
  8942  001E94  0E00               	movlw	0
  8943  001E96  6E36               	movwf	___wmul@multiplicand+1,c
  8944  001E98  0E03               	movlw	3
  8945  001E9A  6E35               	movwf	___wmul@multiplicand,c
  8946  001E9C  0E00               	movlw	0
  8947  001E9E  6E28               	movwf	___awmod@divisor+1,c
  8948  001EA0  0E0A               	movlw	10
  8949  001EA2  6E27               	movwf	___awmod@divisor,c
  8950  001EA4  0100               	movlb	0	; () banked
  8951  001EA6  5195               	movf	scale@scl& (0+255),w,b
  8952  001EA8  6E25               	movwf	___awmod@dividend,c
  8953  001EAA  6A26               	clrf	___awmod@dividend+1,c
  8954  001EAC  BE25               	btfsc	___awmod@dividend,7,c
  8955  001EAE  0626               	decf	___awmod@dividend+1,f,c
  8956  001EB0  EC33  F01F         	call	___awmod	;wreg free
  8957  001EB4  C025  F033         	movff	?___awmod,___wmul@multiplier
  8958  001EB8  C026  F034         	movff	?___awmod+1,___wmul@multiplier+1
  8959  001EBC  EC67  F022         	call	___wmul	;wreg free
  8960  001EC0  0EDA               	movlw	low __powers_
  8961  001EC2  2433               	addwf	?___wmul,w,c
  8962  001EC4  6EF6               	movwf	tblptrl,c
  8963  001EC6  0EFD               	movlw	high __powers_
  8964  001EC8  2034               	addwfc	?___wmul+1,w,c
  8965  001ECA  6EF7               	movwf	tblptrh,c
  8966  001ECC                     	if	0	;There are less than 3 active tblptr bytes
  8967  001ECC                     	endif
  8968  001ECC  0009               	tblrd		*+
  8969  001ECE  CFF5 F083          	movff	tablat,___ftmul@f2
  8970  001ED2  0009               	tblrd		*+
  8971  001ED4  CFF5 F084          	movff	tablat,___ftmul@f2+1
  8972  001ED8  000A               	tblrd		*-
  8973  001EDA  CFF5 F085          	movff	tablat,___ftmul@f2+2
  8974  001EDE  EC74  F014         	call	___ftmul	;wreg free
  8975  001EE2  C080  F08F         	movff	?___ftmul,?_scale
  8976  001EE6  C081  F090         	movff	?___ftmul+1,?_scale+1
  8977  001EEA  C082  F091         	movff	?___ftmul+2,?_scale+2
  8978  001EEE  0012               	return	
  8979  001EF0                     l6466:
  8980                           
  8981                           ;doprnt.c: 438: else if(scl > 10)
  8982  001EF0  0100               	movlb	0	; () banked
  8983  001EF2  5195               	movf	scale@scl& (0+255),w,b
  8984  001EF4  0A80               	xorlw	128
  8985  001EF6  0F75               	addlw	-139
  8986  001EF8  A0D8               	btfss	status,0,c
  8987  001EFA  D04F               	goto	l6472
  8988                           
  8989                           ; BSR set to: 0
  8990                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  8991  001EFC  0E00               	movlw	0
  8992  001EFE  6E2E               	movwf	___awdiv@divisor+1,c
  8993  001F00  0E0A               	movlw	10
  8994  001F02  6E2D               	movwf	___awdiv@divisor,c
  8995  001F04  0100               	movlb	0	; () banked
  8996  001F06  5195               	movf	scale@scl& (0+255),w,b
  8997  001F08  6E2B               	movwf	___awdiv@dividend,c
  8998  001F0A  6A2C               	clrf	___awdiv@dividend+1,c
  8999  001F0C  BE2B               	btfsc	___awdiv@dividend,7,c
  9000  001F0E  062C               	decf	___awdiv@dividend+1,f,c
  9001  001F10  EC74  F01E         	call	___awdiv	;wreg free
  9002  001F14  0E09               	movlw	9
  9003  001F16  242B               	addwf	?___awdiv,w,c
  9004  001F18  6E33               	movwf	___wmul@multiplier,c
  9005  001F1A  0E00               	movlw	0
  9006  001F1C  202C               	addwfc	?___awdiv+1,w,c
  9007  001F1E  6E34               	movwf	___wmul@multiplier+1,c
  9008  001F20  0E00               	movlw	0
  9009  001F22  6E36               	movwf	___wmul@multiplicand+1,c
  9010  001F24  0E03               	movlw	3
  9011  001F26  6E35               	movwf	___wmul@multiplicand,c
  9012  001F28  EC67  F022         	call	___wmul	;wreg free
  9013  001F2C  0EDA               	movlw	low __powers_
  9014  001F2E  2433               	addwf	?___wmul,w,c
  9015  001F30  6EF6               	movwf	tblptrl,c
  9016  001F32  0EFD               	movlw	high __powers_
  9017  001F34  2034               	addwfc	?___wmul+1,w,c
  9018  001F36  6EF7               	movwf	tblptrh,c
  9019  001F38                     	if	0	;There are less than 3 active tblptr bytes
  9020  001F38                     	endif
  9021  001F38  0009               	tblrd		*+
  9022  001F3A  CFF5 F080          	movff	tablat,___ftmul@f1
  9023  001F3E  0009               	tblrd		*+
  9024  001F40  CFF5 F081          	movff	tablat,___ftmul@f1+1
  9025  001F44  000A               	tblrd		*-
  9026  001F46  CFF5 F082          	movff	tablat,___ftmul@f1+2
  9027  001F4A  0E00               	movlw	0
  9028  001F4C  6E36               	movwf	___wmul@multiplicand+1,c
  9029  001F4E  0E03               	movlw	3
  9030  001F50  6E35               	movwf	___wmul@multiplicand,c
  9031  001F52  0E00               	movlw	0
  9032  001F54  6E28               	movwf	___awmod@divisor+1,c
  9033  001F56  0E0A               	movlw	10
  9034  001F58  6E27               	movwf	___awmod@divisor,c
  9035  001F5A  0100               	movlb	0	; () banked
  9036  001F5C  5195               	movf	scale@scl& (0+255),w,b
  9037  001F5E  6E25               	movwf	___awmod@dividend,c
  9038  001F60  6A26               	clrf	___awmod@dividend+1,c
  9039  001F62  BE25               	btfsc	___awmod@dividend,7,c
  9040  001F64  0626               	decf	___awmod@dividend+1,f,c
  9041  001F66  EC33  F01F         	call	___awmod	;wreg free
  9042  001F6A  C025  F033         	movff	?___awmod,___wmul@multiplier
  9043  001F6E  C026  F034         	movff	?___awmod+1,___wmul@multiplier+1
  9044  001F72  EC67  F022         	call	___wmul	;wreg free
  9045  001F76  0EDA               	movlw	low __powers_
  9046  001F78  2433               	addwf	?___wmul,w,c
  9047  001F7A  6EF6               	movwf	tblptrl,c
  9048  001F7C  0EFD               	movlw	high __powers_
  9049  001F7E  2034               	addwfc	?___wmul+1,w,c
  9050  001F80  6EF7               	movwf	tblptrh,c
  9051  001F82                     	if	0	;There are less than 3 active tblptr bytes
  9052  001F82                     	endif
  9053  001F82  0009               	tblrd		*+
  9054  001F84  CFF5 F083          	movff	tablat,___ftmul@f2
  9055  001F88  0009               	tblrd		*+
  9056  001F8A  CFF5 F084          	movff	tablat,___ftmul@f2+1
  9057  001F8E  000A               	tblrd		*-
  9058  001F90  CFF5 F085          	movff	tablat,___ftmul@f2+2
  9059  001F94  EC74  F014         	call	___ftmul	;wreg free
  9060  001F98  D7A4               	goto	L7
  9061  001F9A                     l6472:
  9062                           
  9063                           ;doprnt.c: 440: return _powers_[scl];
  9064  001F9A  0100               	movlb	0	; () banked
  9065  001F9C  5195               	movf	scale@scl& (0+255),w,b
  9066  001F9E  0D03               	mullw	3
  9067  001FA0  0EDA               	movlw	low __powers_
  9068  001FA2  24F3               	addwf	prodl,w,c
  9069  001FA4  6EF6               	movwf	tblptrl,c
  9070  001FA6  0EFD               	movlw	high __powers_
  9071  001FA8  20F4               	addwfc	prodh,w,c
  9072  001FAA  6EF7               	movwf	tblptrh,c
  9073  001FAC                     	if	0	;There are less than 3 active tblptr bytes
  9074  001FAC                     	endif
  9075  001FAC  0009               	tblrd		*+
  9076  001FAE  CFF5 F08F          	movff	tablat,?_scale
  9077  001FB2  0009               	tblrd		*+
  9078  001FB4  CFF5 F090          	movff	tablat,?_scale+1
  9079  001FB8  000A               	tblrd		*-
  9080  001FBA  CFF5 F091          	movff	tablat,?_scale+2
  9081  001FBE  0012               	return	
  9082  001FC0                     __end_of_scale:
  9083                           	opt stack 0
  9084                           tblptru	equ	0xFF8
  9085                           tblptrh	equ	0xFF7
  9086                           tblptrl	equ	0xFF6
  9087                           tablat	equ	0xFF5
  9088                           prodh	equ	0xFF4
  9089                           prodl	equ	0xFF3
  9090                           intcon	equ	0xFF2
  9091                           postinc0	equ	0xFEE
  9092                           wreg	equ	0xFE8
  9093                           postdec1	equ	0xFE5
  9094                           fsr1l	equ	0xFE1
  9095                           indf2	equ	0xFDF
  9096                           postinc2	equ	0xFDE
  9097                           postdec2	equ	0xFDD
  9098                           fsr2h	equ	0xFDA
  9099                           fsr2l	equ	0xFD9
  9100                           status	equ	0xFD8
  9101                           
  9102 ;; *************** function _putch *****************
  9103 ;; Defined at:
  9104 ;;		line 35 in file "lcd.c"
  9105 ;; Parameters:    Size  Location     Type
  9106 ;;  data            1    wreg     unsigned char 
  9107 ;; Auto vars:     Size  Location     Type
  9108 ;;  data            1   40[COMRAM] unsigned char 
  9109 ;; Return value:  Size  Location     Type
  9110 ;;                  1    wreg      void 
  9111 ;; Registers used:
  9112 ;;		wreg, status,2, status,0, cstack
  9113 ;; Tracked objects:
  9114 ;;		On entry : 0/0
  9115 ;;		On exit  : 0/0
  9116 ;;		Unchanged: 0/0
  9117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9119 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9121 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9122 ;;Total ram usage:        1 bytes
  9123 ;; Hardware stack levels used:    1
  9124 ;; Hardware stack levels required when called:    6
  9125 ;; This function calls:
  9126 ;;		_lcdNewline
  9127 ;;		_lcdNibble
  9128 ;; This function is called by:
  9129 ;;		_printf
  9130 ;; This function uses a non-reentrant model
  9131 ;;
  9132                           
  9133                           	psect	text18
  9134  004518                     __ptext18:
  9135                           	opt stack 0
  9136  004518                     _putch:
  9137                           	opt stack 22
  9138                           
  9139                           ;incstack = 0
  9140                           ;putch@data stored from wreg
  9141  004518  6E29               	movwf	putch@data,c
  9142                           
  9143                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  9144  00451A  0E0A               	movlw	10
  9145  00451C  1829               	xorwf	putch@data,w,c
  9146  00451E  A4D8               	btfss	status,2,c
  9147  004520  D003               	goto	l232
  9148  004522  EC07  F023         	call	_lcdNewline	;wreg free
  9149  004526  0012               	return	
  9150  004528                     l232:
  9151                           
  9152                           ;lcd.c: 37: else
  9153                           ;lcd.c: 38: {
  9154                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  9155  004528  848C               	bsf	3980,2,c	;volatile
  9156                           
  9157                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  9158  00452A  0E74               	movlw	116
  9159  00452C                     u8577:
  9160  00452C  2EE8               	decfsz	wreg,f,c
  9161  00452E  D7FE               	bra	u8577
  9162  004530  D000               	nop2	
  9163                           
  9164                           ;lcd.c: 41: lcdNibble(data);
  9165  004532  5029               	movf	putch@data,w,c
  9166  004534  ECD9  F01F         	call	_lcdNibble
  9167  004538  0012               	return	
  9168  00453A                     __end_of_putch:
  9169                           	opt stack 0
  9170                           tblptru	equ	0xFF8
  9171                           tblptrh	equ	0xFF7
  9172                           tblptrl	equ	0xFF6
  9173                           tablat	equ	0xFF5
  9174                           prodh	equ	0xFF4
  9175                           prodl	equ	0xFF3
  9176                           intcon	equ	0xFF2
  9177                           postinc0	equ	0xFEE
  9178                           wreg	equ	0xFE8
  9179                           postdec1	equ	0xFE5
  9180                           fsr1l	equ	0xFE1
  9181                           indf2	equ	0xFDF
  9182                           postinc2	equ	0xFDE
  9183                           postdec2	equ	0xFDD
  9184                           fsr2h	equ	0xFDA
  9185                           fsr2l	equ	0xFD9
  9186                           status	equ	0xFD8
  9187                           
  9188 ;; *************** function _lcdNewline *****************
  9189 ;; Defined at:
  9190 ;;		line 78 in file "lcd.c"
  9191 ;; Parameters:    Size  Location     Type
  9192 ;;		None
  9193 ;; Auto vars:     Size  Location     Type
  9194 ;;		None
  9195 ;; Return value:  Size  Location     Type
  9196 ;;                  1    wreg      void 
  9197 ;; Registers used:
  9198 ;;		wreg, status,2, status,0, cstack
  9199 ;; Tracked objects:
  9200 ;;		On entry : 0/0
  9201 ;;		On exit  : 0/0
  9202 ;;		Unchanged: 0/0
  9203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9208 ;;Total ram usage:        0 bytes
  9209 ;; Hardware stack levels used:    1
  9210 ;; Hardware stack levels required when called:    5
  9211 ;; This function calls:
  9212 ;;		_lcdInst
  9213 ;; This function is called by:
  9214 ;;		_putch
  9215 ;; This function uses a non-reentrant model
  9216 ;;
  9217                           
  9218                           	psect	text19
  9219  00460E                     __ptext19:
  9220                           	opt stack 0
  9221  00460E                     _lcdNewline:
  9222                           	opt stack 22
  9223                           
  9224                           ;lcd.c: 79: lcdInst(0b11000000);
  9225                           
  9226                           ;incstack = 0
  9227  00460E  0EC0               	movlw	192
  9228  004610  EC9D  F022         	call	_lcdInst
  9229  004614  0012               	return		;funcret
  9230  004616                     __end_of_lcdNewline:
  9231                           	opt stack 0
  9232                           tblptru	equ	0xFF8
  9233                           tblptrh	equ	0xFF7
  9234                           tblptrl	equ	0xFF6
  9235                           tablat	equ	0xFF5
  9236                           prodh	equ	0xFF4
  9237                           prodl	equ	0xFF3
  9238                           intcon	equ	0xFF2
  9239                           postinc0	equ	0xFEE
  9240                           wreg	equ	0xFE8
  9241                           postdec1	equ	0xFE5
  9242                           fsr1l	equ	0xFE1
  9243                           indf2	equ	0xFDF
  9244                           postinc2	equ	0xFDE
  9245                           postdec2	equ	0xFDD
  9246                           fsr2h	equ	0xFDA
  9247                           fsr2l	equ	0xFD9
  9248                           status	equ	0xFD8
  9249                           
  9250 ;; *************** function _isdigit *****************
  9251 ;; Defined at:
  9252 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  9253 ;; Parameters:    Size  Location     Type
  9254 ;;  c               1    wreg     unsigned char 
  9255 ;; Auto vars:     Size  Location     Type
  9256 ;;  c               1   38[COMRAM] unsigned char 
  9257 ;; Return value:  Size  Location     Type
  9258 ;;		None               void
  9259 ;; Registers used:
  9260 ;;		wreg, status,2, status,0
  9261 ;; Tracked objects:
  9262 ;;		On entry : 0/0
  9263 ;;		On exit  : 0/0
  9264 ;;		Unchanged: 0/0
  9265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9267 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9268 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9269 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9270 ;;Total ram usage:        3 bytes
  9271 ;; Hardware stack levels used:    1
  9272 ;; Hardware stack levels required when called:    3
  9273 ;; This function calls:
  9274 ;;		Nothing
  9275 ;; This function is called by:
  9276 ;;		_printf
  9277 ;; This function uses a non-reentrant model
  9278 ;;
  9279                           
  9280                           	psect	text20
  9281  00457C                     __ptext20:
  9282                           	opt stack 0
  9283  00457C                     _isdigit:
  9284                           	opt stack 25
  9285                           
  9286                           ;incstack = 0
  9287                           ;isdigit@c stored from wreg
  9288  00457C  6E27               	movwf	isdigit@c,c
  9289  00457E  0E00               	movlw	0
  9290  004580  6E26               	movwf	_isdigit$1053,c
  9291  004582  0E3A               	movlw	58
  9292  004584  6027               	cpfslt	isdigit@c,c
  9293  004586  D005               	goto	l6484
  9294  004588  0E2F               	movlw	47
  9295  00458A  6427               	cpfsgt	isdigit@c,c
  9296  00458C  D002               	goto	l6484
  9297  00458E  0E01               	movlw	1
  9298  004590  6E26               	movwf	_isdigit$1053,c
  9299  004592                     l6484:
  9300  004592  C026  F025         	movff	_isdigit$1053,??_isdigit
  9301  004596  3025               	rrcf	??_isdigit,w,c
  9302  004598  0012               	return	
  9303  00459A                     __end_of_isdigit:
  9304                           	opt stack 0
  9305                           tblptru	equ	0xFF8
  9306                           tblptrh	equ	0xFF7
  9307                           tblptrl	equ	0xFF6
  9308                           tablat	equ	0xFF5
  9309                           prodh	equ	0xFF4
  9310                           prodl	equ	0xFF3
  9311                           intcon	equ	0xFF2
  9312                           postinc0	equ	0xFEE
  9313                           wreg	equ	0xFE8
  9314                           postdec1	equ	0xFE5
  9315                           fsr1l	equ	0xFE1
  9316                           indf2	equ	0xFDF
  9317                           postinc2	equ	0xFDE
  9318                           postdec2	equ	0xFDD
  9319                           fsr2h	equ	0xFDA
  9320                           fsr2l	equ	0xFD9
  9321                           status	equ	0xFD8
  9322                           
  9323 ;; *************** function _fround *****************
  9324 ;; Defined at:
  9325 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  9326 ;; Parameters:    Size  Location     Type
  9327 ;;  prec            1    wreg     unsigned char 
  9328 ;; Auto vars:     Size  Location     Type
  9329 ;;  prec            1   24[BANK0 ] unsigned char 
  9330 ;; Return value:  Size  Location     Type
  9331 ;;                  3   15[BANK0 ] unsigned char 
  9332 ;; Registers used:
  9333 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9334 ;; Tracked objects:
  9335 ;;		On entry : 0/0
  9336 ;;		On exit  : 0/0
  9337 ;;		Unchanged: 0/0
  9338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9339 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9340 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9342 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9343 ;;Total ram usage:       10 bytes
  9344 ;; Hardware stack levels used:    1
  9345 ;; Hardware stack levels required when called:    5
  9346 ;; This function calls:
  9347 ;;		___awdiv
  9348 ;;		___awmod
  9349 ;;		___ftmul
  9350 ;;		___wmul
  9351 ;; This function is called by:
  9352 ;;		_printf
  9353 ;; This function uses a non-reentrant model
  9354 ;;
  9355                           
  9356                           	psect	text21
  9357  002228                     __ptext21:
  9358                           	opt stack 0
  9359  002228                     _fround:
  9360                           	opt stack 23
  9361                           
  9362                           ;incstack = 0
  9363                           ;fround@prec stored from wreg
  9364  002228  0100               	movlb	0	; () banked
  9365  00222A  6F98               	movwf	fround@prec& (0+255),b
  9366                           
  9367                           ;doprnt.c: 413: if(prec>=110)
  9368  00222C  0E6D               	movlw	109
  9369  00222E  0100               	movlb	0	; () banked
  9370  002230  6598               	cpfsgt	fround@prec& (0+255),b
  9371  002232  D0A2               	goto	l6426
  9372                           
  9373                           ; BSR set to: 0
  9374                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9375  002234  0E00               	movlw	0
  9376  002236  6E36               	movwf	___wmul@multiplicand+1,c
  9377  002238  0E03               	movlw	3
  9378  00223A  6E35               	movwf	___wmul@multiplicand,c
  9379  00223C  0E00               	movlw	0
  9380  00223E  6E2E               	movwf	___awdiv@divisor+1,c
  9381  002240  0E0A               	movlw	10
  9382  002242  6E2D               	movwf	___awdiv@divisor,c
  9383  002244  0E00               	movlw	0
  9384  002246  6E28               	movwf	___awmod@divisor+1,c
  9385  002248  0E64               	movlw	100
  9386  00224A  6E27               	movwf	___awmod@divisor,c
  9387  00224C  C098  F025         	movff	fround@prec,___awmod@dividend
  9388  002250  6A26               	clrf	___awmod@dividend+1,c
  9389  002252  EC33  F01F         	call	___awmod	;wreg free
  9390  002256  C025  F02B         	movff	?___awmod,___awdiv@dividend
  9391  00225A  C026  F02C         	movff	?___awmod+1,___awdiv@dividend+1
  9392  00225E  EC74  F01E         	call	___awdiv	;wreg free
  9393  002262  0E09               	movlw	9
  9394  002264  242B               	addwf	?___awdiv,w,c
  9395  002266  6E33               	movwf	___wmul@multiplier,c
  9396  002268  0E00               	movlw	0
  9397  00226A  202C               	addwfc	?___awdiv+1,w,c
  9398  00226C  6E34               	movwf	___wmul@multiplier+1,c
  9399  00226E  EC67  F022         	call	___wmul	;wreg free
  9400  002272  0EB3               	movlw	low __npowers_
  9401  002274  2433               	addwf	?___wmul,w,c
  9402  002276  6EF6               	movwf	tblptrl,c
  9403  002278  0EFD               	movlw	high __npowers_
  9404  00227A  2034               	addwfc	?___wmul+1,w,c
  9405  00227C  6EF7               	movwf	tblptrh,c
  9406  00227E                     	if	0	;There are less than 3 active tblptr bytes
  9407  00227E                     	endif
  9408  00227E  0009               	tblrd		*+
  9409  002280  CFF5 F083          	movff	tablat,___ftmul@f2
  9410  002284  0009               	tblrd		*+
  9411  002286  CFF5 F084          	movff	tablat,___ftmul@f2+1
  9412  00228A  000A               	tblrd		*-
  9413  00228C  CFF5 F085          	movff	tablat,___ftmul@f2+2
  9414  002290  0E00               	movlw	0
  9415  002292  6E2E               	movwf	___awdiv@divisor+1,c
  9416  002294  0E64               	movlw	100
  9417  002296  6E2D               	movwf	___awdiv@divisor,c
  9418  002298  C098  F02B         	movff	fround@prec,___awdiv@dividend
  9419  00229C  6A2C               	clrf	___awdiv@dividend+1,c
  9420  00229E  EC74  F01E         	call	___awdiv	;wreg free
  9421  0022A2  0E12               	movlw	18
  9422  0022A4  242B               	addwf	?___awdiv,w,c
  9423  0022A6  6E33               	movwf	___wmul@multiplier,c
  9424  0022A8  0E00               	movlw	0
  9425  0022AA  202C               	addwfc	?___awdiv+1,w,c
  9426  0022AC  6E34               	movwf	___wmul@multiplier+1,c
  9427  0022AE  0E00               	movlw	0
  9428  0022B0  6E36               	movwf	___wmul@multiplicand+1,c
  9429  0022B2  0E03               	movlw	3
  9430  0022B4  6E35               	movwf	___wmul@multiplicand,c
  9431  0022B6  EC67  F022         	call	___wmul	;wreg free
  9432  0022BA  0EB3               	movlw	low __npowers_
  9433  0022BC  2433               	addwf	?___wmul,w,c
  9434  0022BE  6EF6               	movwf	tblptrl,c
  9435  0022C0  0EFD               	movlw	high __npowers_
  9436  0022C2  2034               	addwfc	?___wmul+1,w,c
  9437  0022C4  6EF7               	movwf	tblptrh,c
  9438  0022C6                     	if	0	;There are less than 3 active tblptr bytes
  9439  0022C6                     	endif
  9440  0022C6  0009               	tblrd		*+
  9441  0022C8  CFF5 F080          	movff	tablat,___ftmul@f1
  9442  0022CC  0009               	tblrd		*+
  9443  0022CE  CFF5 F081          	movff	tablat,___ftmul@f1+1
  9444  0022D2  000A               	tblrd		*-
  9445  0022D4  CFF5 F082          	movff	tablat,___ftmul@f1+2
  9446  0022D8  EC74  F014         	call	___ftmul	;wreg free
  9447  0022DC  C080  F095         	movff	?___ftmul,_fround$1421
  9448  0022E0  C081  F096         	movff	?___ftmul+1,_fround$1421+1
  9449  0022E4  C082  F097         	movff	?___ftmul+2,_fround$1421+2
  9450                           
  9451                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9452  0022E8  0E00               	movlw	0
  9453  0022EA  6E36               	movwf	___wmul@multiplicand+1,c
  9454  0022EC  0E03               	movlw	3
  9455  0022EE  6E35               	movwf	___wmul@multiplicand,c
  9456  0022F0  0E00               	movlw	0
  9457  0022F2  6E28               	movwf	___awmod@divisor+1,c
  9458  0022F4  0E0A               	movlw	10
  9459  0022F6  6E27               	movwf	___awmod@divisor,c
  9460  0022F8  C098  F025         	movff	fround@prec,___awmod@dividend
  9461  0022FC  6A26               	clrf	___awmod@dividend+1,c
  9462  0022FE  EC33  F01F         	call	___awmod	;wreg free
  9463  002302  C025  F033         	movff	?___awmod,___wmul@multiplier
  9464  002306  C026  F034         	movff	?___awmod+1,___wmul@multiplier+1
  9465  00230A  EC67  F022         	call	___wmul	;wreg free
  9466  00230E  0EB3               	movlw	low __npowers_
  9467  002310  2433               	addwf	?___wmul,w,c
  9468  002312  6EF6               	movwf	tblptrl,c
  9469  002314  0EFD               	movlw	high __npowers_
  9470  002316  2034               	addwfc	?___wmul+1,w,c
  9471  002318  6EF7               	movwf	tblptrh,c
  9472  00231A                     	if	0	;There are less than 3 active tblptr bytes
  9473  00231A                     	endif
  9474  00231A  0009               	tblrd		*+
  9475  00231C  CFF5 F083          	movff	tablat,___ftmul@f2
  9476  002320  0009               	tblrd		*+
  9477  002322  CFF5 F084          	movff	tablat,___ftmul@f2+1
  9478  002326  000A               	tblrd		*-
  9479  002328  CFF5 F085          	movff	tablat,___ftmul@f2+2
  9480  00232C  C095  F080         	movff	_fround$1421,___ftmul@f1
  9481  002330  C096  F081         	movff	_fround$1421+1,___ftmul@f1+1
  9482  002334  C097  F082         	movff	_fround$1421+2,___ftmul@f1+2
  9483  002338  EC74  F014         	call	___ftmul	;wreg free
  9484  00233C  C080  F092         	movff	?___ftmul,_fround$1422
  9485  002340  C081  F093         	movff	?___ftmul+1,_fround$1422+1
  9486  002344  C082  F094         	movff	?___ftmul+2,_fround$1422+2
  9487                           
  9488                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9489  002348  C092  F080         	movff	_fround$1422,___ftmul@f1
  9490  00234C  C093  F081         	movff	_fround$1422+1,___ftmul@f1+1
  9491  002350  C094  F082         	movff	_fround$1422+2,___ftmul@f1+2
  9492  002354  0E00               	movlw	0
  9493  002356  0100               	movlb	0	; () banked
  9494  002358  6F83               	movwf	___ftmul@f2& (0+255),b
  9495  00235A  0E00               	movlw	0
  9496  00235C  0100               	movlb	0	; () banked
  9497  00235E  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  9498  002360  0E3F               	movlw	63
  9499  002362  0100               	movlb	0	; () banked
  9500  002364  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  9501  002366  EC74  F014         	call	___ftmul	;wreg free
  9502  00236A  C080  F08F         	movff	?___ftmul,?_fround
  9503  00236E  C081  F090         	movff	?___ftmul+1,?_fround+1
  9504  002372  C082  F091         	movff	?___ftmul+2,?_fround+2
  9505  002376  0012               	return	
  9506  002378                     l6426:
  9507                           
  9508                           ;doprnt.c: 415: else if(prec > 10)
  9509  002378  0E0A               	movlw	10
  9510  00237A  0100               	movlb	0	; () banked
  9511  00237C  6598               	cpfsgt	fround@prec& (0+255),b
  9512  00237E  D060               	goto	l6434
  9513                           
  9514                           ; BSR set to: 0
  9515                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9516  002380  0E00               	movlw	0
  9517  002382  6E36               	movwf	___wmul@multiplicand+1,c
  9518  002384  0E03               	movlw	3
  9519  002386  6E35               	movwf	___wmul@multiplicand,c
  9520  002388  0E00               	movlw	0
  9521  00238A  6E28               	movwf	___awmod@divisor+1,c
  9522  00238C  0E0A               	movlw	10
  9523  00238E  6E27               	movwf	___awmod@divisor,c
  9524  002390  C098  F025         	movff	fround@prec,___awmod@dividend
  9525  002394  6A26               	clrf	___awmod@dividend+1,c
  9526  002396  EC33  F01F         	call	___awmod	;wreg free
  9527  00239A  C025  F033         	movff	?___awmod,___wmul@multiplier
  9528  00239E  C026  F034         	movff	?___awmod+1,___wmul@multiplier+1
  9529  0023A2  EC67  F022         	call	___wmul	;wreg free
  9530  0023A6  0EB3               	movlw	low __npowers_
  9531  0023A8  2433               	addwf	?___wmul,w,c
  9532  0023AA  6EF6               	movwf	tblptrl,c
  9533  0023AC  0EFD               	movlw	high __npowers_
  9534  0023AE  2034               	addwfc	?___wmul+1,w,c
  9535  0023B0  6EF7               	movwf	tblptrh,c
  9536  0023B2                     	if	0	;There are less than 3 active tblptr bytes
  9537  0023B2                     	endif
  9538  0023B2  0009               	tblrd		*+
  9539  0023B4  CFF5 F083          	movff	tablat,___ftmul@f2
  9540  0023B8  0009               	tblrd		*+
  9541  0023BA  CFF5 F084          	movff	tablat,___ftmul@f2+1
  9542  0023BE  000A               	tblrd		*-
  9543  0023C0  CFF5 F085          	movff	tablat,___ftmul@f2+2
  9544  0023C4  0E00               	movlw	0
  9545  0023C6  6E2E               	movwf	___awdiv@divisor+1,c
  9546  0023C8  0E0A               	movlw	10
  9547  0023CA  6E2D               	movwf	___awdiv@divisor,c
  9548  0023CC  C098  F02B         	movff	fround@prec,___awdiv@dividend
  9549  0023D0  6A2C               	clrf	___awdiv@dividend+1,c
  9550  0023D2  EC74  F01E         	call	___awdiv	;wreg free
  9551  0023D6  0E09               	movlw	9
  9552  0023D8  242B               	addwf	?___awdiv,w,c
  9553  0023DA  6E33               	movwf	___wmul@multiplier,c
  9554  0023DC  0E00               	movlw	0
  9555  0023DE  202C               	addwfc	?___awdiv+1,w,c
  9556  0023E0  6E34               	movwf	___wmul@multiplier+1,c
  9557  0023E2  0E00               	movlw	0
  9558  0023E4  6E36               	movwf	___wmul@multiplicand+1,c
  9559  0023E6  0E03               	movlw	3
  9560  0023E8  6E35               	movwf	___wmul@multiplicand,c
  9561  0023EA  EC67  F022         	call	___wmul	;wreg free
  9562  0023EE  0EB3               	movlw	low __npowers_
  9563  0023F0  2433               	addwf	?___wmul,w,c
  9564  0023F2  6EF6               	movwf	tblptrl,c
  9565  0023F4  0EFD               	movlw	high __npowers_
  9566  0023F6  2034               	addwfc	?___wmul+1,w,c
  9567  0023F8  6EF7               	movwf	tblptrh,c
  9568  0023FA                     	if	0	;There are less than 3 active tblptr bytes
  9569  0023FA                     	endif
  9570  0023FA  0009               	tblrd		*+
  9571  0023FC  CFF5 F080          	movff	tablat,___ftmul@f1
  9572  002400  0009               	tblrd		*+
  9573  002402  CFF5 F081          	movff	tablat,___ftmul@f1+1
  9574  002406  000A               	tblrd		*-
  9575  002408  CFF5 F082          	movff	tablat,___ftmul@f1+2
  9576  00240C  EC74  F014         	call	___ftmul	;wreg free
  9577  002410  C080  F095         	movff	?___ftmul,_fround$1421
  9578  002414  C081  F096         	movff	?___ftmul+1,_fround$1421+1
  9579  002418  C082  F097         	movff	?___ftmul+2,_fround$1421+2
  9580                           
  9581                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9582  00241C  C095  F080         	movff	_fround$1421,___ftmul@f1
  9583  002420  C096  F081         	movff	_fround$1421+1,___ftmul@f1+1
  9584  002424  C097  F082         	movff	_fround$1421+2,___ftmul@f1+2
  9585  002428  0E00               	movlw	0
  9586  00242A  0100               	movlb	0	; () banked
  9587  00242C  6F83               	movwf	___ftmul@f2& (0+255),b
  9588  00242E  0E00               	movlw	0
  9589  002430  0100               	movlb	0	; () banked
  9590  002432  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  9591  002434  0E3F               	movlw	63
  9592  002436  0100               	movlb	0	; () banked
  9593  002438  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  9594  00243A  EC74  F014         	call	___ftmul	;wreg free
  9595  00243E  D795               	goto	L8
  9596  002440                     l6434:
  9597                           
  9598                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  9599  002440  0100               	movlb	0	; () banked
  9600  002442  5198               	movf	fround@prec& (0+255),w,b
  9601  002444  0D03               	mullw	3
  9602  002446  0EB3               	movlw	low __npowers_
  9603  002448  24F3               	addwf	prodl,w,c
  9604  00244A  6EF6               	movwf	tblptrl,c
  9605  00244C  0EFD               	movlw	high __npowers_
  9606  00244E  20F4               	addwfc	prodh,w,c
  9607  002450  6EF7               	movwf	tblptrh,c
  9608  002452                     	if	0	;There are less than 3 active tblptr bytes
  9609  002452                     	endif
  9610  002452  0009               	tblrd		*+
  9611  002454  CFF5 F080          	movff	tablat,___ftmul@f1
  9612  002458  0009               	tblrd		*+
  9613  00245A  CFF5 F081          	movff	tablat,___ftmul@f1+1
  9614  00245E  000A               	tblrd		*-
  9615  002460  CFF5 F082          	movff	tablat,___ftmul@f1+2
  9616  002464  0E00               	movlw	0
  9617  002466  0100               	movlb	0	; () banked
  9618  002468  6F83               	movwf	___ftmul@f2& (0+255),b
  9619  00246A  0E00               	movlw	0
  9620  00246C  0100               	movlb	0	; () banked
  9621  00246E  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  9622  002470  0E3F               	movlw	63
  9623  002472  0100               	movlb	0	; () banked
  9624  002474  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  9625  002476  EC74  F014         	call	___ftmul	;wreg free
  9626  00247A  C080  F08F         	movff	?___ftmul,?_fround
  9627  00247E  C081  F090         	movff	?___ftmul+1,?_fround+1
  9628  002482  C082  F091         	movff	?___ftmul+2,?_fround+2
  9629  002486  0012               	return	
  9630  002488                     __end_of_fround:
  9631                           	opt stack 0
  9632                           tblptru	equ	0xFF8
  9633                           tblptrh	equ	0xFF7
  9634                           tblptrl	equ	0xFF6
  9635                           tablat	equ	0xFF5
  9636                           prodh	equ	0xFF4
  9637                           prodl	equ	0xFF3
  9638                           intcon	equ	0xFF2
  9639                           postinc0	equ	0xFEE
  9640                           wreg	equ	0xFE8
  9641                           postdec1	equ	0xFE5
  9642                           fsr1l	equ	0xFE1
  9643                           indf2	equ	0xFDF
  9644                           postinc2	equ	0xFDE
  9645                           postdec2	equ	0xFDD
  9646                           fsr2h	equ	0xFDA
  9647                           fsr2l	equ	0xFD9
  9648                           status	equ	0xFD8
  9649                           
  9650 ;; *************** function ___awmod *****************
  9651 ;; Defined at:
  9652 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  9653 ;; Parameters:    Size  Location     Type
  9654 ;;  dividend        2   36[COMRAM] int 
  9655 ;;  divisor         2   38[COMRAM] int 
  9656 ;; Auto vars:     Size  Location     Type
  9657 ;;  sign            1   41[COMRAM] unsigned char 
  9658 ;;  counter         1   40[COMRAM] unsigned char 
  9659 ;; Return value:  Size  Location     Type
  9660 ;;                  2   36[COMRAM] int 
  9661 ;; Registers used:
  9662 ;;		wreg, status,2, status,0
  9663 ;; Tracked objects:
  9664 ;;		On entry : 0/0
  9665 ;;		On exit  : 0/0
  9666 ;;		Unchanged: 0/0
  9667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9668 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9669 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9671 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9672 ;;Total ram usage:        6 bytes
  9673 ;; Hardware stack levels used:    1
  9674 ;; Hardware stack levels required when called:    3
  9675 ;; This function calls:
  9676 ;;		Nothing
  9677 ;; This function is called by:
  9678 ;;		_fround
  9679 ;;		_scale
  9680 ;; This function uses a non-reentrant model
  9681 ;;
  9682                           
  9683                           	psect	text22
  9684  003E66                     __ptext22:
  9685                           	opt stack 0
  9686  003E66                     ___awmod:
  9687                           	opt stack 24
  9688                           
  9689                           ;incstack = 0
  9690  003E66  0E00               	movlw	0
  9691  003E68  6E2A               	movwf	___awmod@sign,c
  9692  003E6A  AE26               	btfss	___awmod@dividend+1,7,c
  9693  003E6C  D006               	goto	l6324
  9694  003E6E  6C25               	negf	___awmod@dividend,c
  9695  003E70  1E26               	comf	___awmod@dividend+1,f,c
  9696  003E72  B0D8               	btfsc	status,0,c
  9697  003E74  2A26               	incf	___awmod@dividend+1,f,c
  9698  003E76  0E01               	movlw	1
  9699  003E78  6E2A               	movwf	___awmod@sign,c
  9700  003E7A                     l6324:
  9701  003E7A  AE28               	btfss	___awmod@divisor+1,7,c
  9702  003E7C  D004               	goto	l6328
  9703  003E7E  6C27               	negf	___awmod@divisor,c
  9704  003E80  1E28               	comf	___awmod@divisor+1,f,c
  9705  003E82  B0D8               	btfsc	status,0,c
  9706  003E84  2A28               	incf	___awmod@divisor+1,f,c
  9707  003E86                     l6328:
  9708  003E86  5027               	movf	___awmod@divisor,w,c
  9709  003E88  1028               	iorwf	___awmod@divisor+1,w,c
  9710  003E8A  B4D8               	btfsc	status,2,c
  9711  003E8C  D018               	goto	l6344
  9712  003E8E  0E01               	movlw	1
  9713  003E90  6E29               	movwf	___awmod@counter,c
  9714  003E92  D004               	goto	l6334
  9715  003E94                     l6332:
  9716  003E94  90D8               	bcf	status,0,c
  9717  003E96  3627               	rlcf	___awmod@divisor,f,c
  9718  003E98  3628               	rlcf	___awmod@divisor+1,f,c
  9719  003E9A  2A29               	incf	___awmod@counter,f,c
  9720  003E9C                     l6334:
  9721  003E9C  AE28               	btfss	___awmod@divisor+1,7,c
  9722  003E9E  D7FA               	goto	l6332
  9723  003EA0                     l6336:
  9724  003EA0  5027               	movf	___awmod@divisor,w,c
  9725  003EA2  5C25               	subwf	___awmod@dividend,w,c
  9726  003EA4  5028               	movf	___awmod@divisor+1,w,c
  9727  003EA6  5826               	subwfb	___awmod@dividend+1,w,c
  9728  003EA8  A0D8               	btfss	status,0,c
  9729  003EAA  D004               	goto	l6340
  9730  003EAC  5027               	movf	___awmod@divisor,w,c
  9731  003EAE  5E25               	subwf	___awmod@dividend,f,c
  9732  003EB0  5028               	movf	___awmod@divisor+1,w,c
  9733  003EB2  5A26               	subwfb	___awmod@dividend+1,f,c
  9734  003EB4                     l6340:
  9735  003EB4  90D8               	bcf	status,0,c
  9736  003EB6  3228               	rrcf	___awmod@divisor+1,f,c
  9737  003EB8  3227               	rrcf	___awmod@divisor,f,c
  9738  003EBA  2E29               	decfsz	___awmod@counter,f,c
  9739  003EBC  D7F1               	goto	l6336
  9740  003EBE                     l6344:
  9741  003EBE  502A               	movf	___awmod@sign,w,c
  9742  003EC0  B4D8               	btfsc	status,2,c
  9743  003EC2  D004               	goto	l6348
  9744  003EC4  6C25               	negf	___awmod@dividend,c
  9745  003EC6  1E26               	comf	___awmod@dividend+1,f,c
  9746  003EC8  B0D8               	btfsc	status,0,c
  9747  003ECA  2A26               	incf	___awmod@dividend+1,f,c
  9748  003ECC                     l6348:
  9749  003ECC  C025  F025         	movff	___awmod@dividend,?___awmod
  9750  003ED0  C026  F026         	movff	___awmod@dividend+1,?___awmod+1
  9751  003ED4  0012               	return	
  9752  003ED6                     __end_of___awmod:
  9753                           	opt stack 0
  9754                           tblptru	equ	0xFF8
  9755                           tblptrh	equ	0xFF7
  9756                           tblptrl	equ	0xFF6
  9757                           tablat	equ	0xFF5
  9758                           prodh	equ	0xFF4
  9759                           prodl	equ	0xFF3
  9760                           intcon	equ	0xFF2
  9761                           postinc0	equ	0xFEE
  9762                           wreg	equ	0xFE8
  9763                           postdec1	equ	0xFE5
  9764                           fsr1l	equ	0xFE1
  9765                           indf2	equ	0xFDF
  9766                           postinc2	equ	0xFDE
  9767                           postdec2	equ	0xFDD
  9768                           fsr2h	equ	0xFDA
  9769                           fsr2l	equ	0xFD9
  9770                           status	equ	0xFD8
  9771                           
  9772 ;; *************** function ___awdiv *****************
  9773 ;; Defined at:
  9774 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9775 ;; Parameters:    Size  Location     Type
  9776 ;;  dividend        2   42[COMRAM] int 
  9777 ;;  divisor         2   44[COMRAM] int 
  9778 ;; Auto vars:     Size  Location     Type
  9779 ;;  quotient        2   48[COMRAM] int 
  9780 ;;  sign            1   47[COMRAM] unsigned char 
  9781 ;;  counter         1   46[COMRAM] unsigned char 
  9782 ;; Return value:  Size  Location     Type
  9783 ;;                  2   42[COMRAM] int 
  9784 ;; Registers used:
  9785 ;;		wreg, status,2, status,0
  9786 ;; Tracked objects:
  9787 ;;		On entry : 0/0
  9788 ;;		On exit  : 0/0
  9789 ;;		Unchanged: 0/0
  9790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9791 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9792 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9794 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9795 ;;Total ram usage:        8 bytes
  9796 ;; Hardware stack levels used:    1
  9797 ;; Hardware stack levels required when called:    3
  9798 ;; This function calls:
  9799 ;;		Nothing
  9800 ;; This function is called by:
  9801 ;;		_fround
  9802 ;;		_scale
  9803 ;;		_printf
  9804 ;; This function uses a non-reentrant model
  9805 ;;
  9806                           
  9807                           	psect	text23
  9808  003CE8                     __ptext23:
  9809                           	opt stack 0
  9810  003CE8                     ___awdiv:
  9811                           	opt stack 24
  9812                           
  9813                           ;incstack = 0
  9814  003CE8  0E00               	movlw	0
  9815  003CEA  6E30               	movwf	___awdiv@sign,c
  9816  003CEC  AE2E               	btfss	___awdiv@divisor+1,7,c
  9817  003CEE  D006               	goto	l6280
  9818  003CF0  6C2D               	negf	___awdiv@divisor,c
  9819  003CF2  1E2E               	comf	___awdiv@divisor+1,f,c
  9820  003CF4  B0D8               	btfsc	status,0,c
  9821  003CF6  2A2E               	incf	___awdiv@divisor+1,f,c
  9822  003CF8  0E01               	movlw	1
  9823  003CFA  6E30               	movwf	___awdiv@sign,c
  9824  003CFC                     l6280:
  9825  003CFC  AE2C               	btfss	___awdiv@dividend+1,7,c
  9826  003CFE  D006               	goto	l6286
  9827  003D00  6C2B               	negf	___awdiv@dividend,c
  9828  003D02  1E2C               	comf	___awdiv@dividend+1,f,c
  9829  003D04  B0D8               	btfsc	status,0,c
  9830  003D06  2A2C               	incf	___awdiv@dividend+1,f,c
  9831  003D08  0E01               	movlw	1
  9832  003D0A  1A30               	xorwf	___awdiv@sign,f,c
  9833  003D0C                     l6286:
  9834  003D0C  0E00               	movlw	0
  9835  003D0E  6E32               	movwf	___awdiv@quotient+1,c
  9836  003D10  0E00               	movlw	0
  9837  003D12  6E31               	movwf	___awdiv@quotient,c
  9838  003D14  502D               	movf	___awdiv@divisor,w,c
  9839  003D16  102E               	iorwf	___awdiv@divisor+1,w,c
  9840  003D18  B4D8               	btfsc	status,2,c
  9841  003D1A  D01C               	goto	l6308
  9842  003D1C  0E01               	movlw	1
  9843  003D1E  6E2F               	movwf	___awdiv@counter,c
  9844  003D20  D004               	goto	l6294
  9845  003D22                     l6292:
  9846  003D22  90D8               	bcf	status,0,c
  9847  003D24  362D               	rlcf	___awdiv@divisor,f,c
  9848  003D26  362E               	rlcf	___awdiv@divisor+1,f,c
  9849  003D28  2A2F               	incf	___awdiv@counter,f,c
  9850  003D2A                     l6294:
  9851  003D2A  AE2E               	btfss	___awdiv@divisor+1,7,c
  9852  003D2C  D7FA               	goto	l6292
  9853  003D2E                     l6296:
  9854  003D2E  90D8               	bcf	status,0,c
  9855  003D30  3631               	rlcf	___awdiv@quotient,f,c
  9856  003D32  3632               	rlcf	___awdiv@quotient+1,f,c
  9857  003D34  502D               	movf	___awdiv@divisor,w,c
  9858  003D36  5C2B               	subwf	___awdiv@dividend,w,c
  9859  003D38  502E               	movf	___awdiv@divisor+1,w,c
  9860  003D3A  582C               	subwfb	___awdiv@dividend+1,w,c
  9861  003D3C  A0D8               	btfss	status,0,c
  9862  003D3E  D005               	goto	l6304
  9863  003D40  502D               	movf	___awdiv@divisor,w,c
  9864  003D42  5E2B               	subwf	___awdiv@dividend,f,c
  9865  003D44  502E               	movf	___awdiv@divisor+1,w,c
  9866  003D46  5A2C               	subwfb	___awdiv@dividend+1,f,c
  9867  003D48  8031               	bsf	___awdiv@quotient,0,c
  9868  003D4A                     l6304:
  9869  003D4A  90D8               	bcf	status,0,c
  9870  003D4C  322E               	rrcf	___awdiv@divisor+1,f,c
  9871  003D4E  322D               	rrcf	___awdiv@divisor,f,c
  9872  003D50  2E2F               	decfsz	___awdiv@counter,f,c
  9873  003D52  D7ED               	goto	l6296
  9874  003D54                     l6308:
  9875  003D54  5030               	movf	___awdiv@sign,w,c
  9876  003D56  B4D8               	btfsc	status,2,c
  9877  003D58  D004               	goto	l6312
  9878  003D5A  6C31               	negf	___awdiv@quotient,c
  9879  003D5C  1E32               	comf	___awdiv@quotient+1,f,c
  9880  003D5E  B0D8               	btfsc	status,0,c
  9881  003D60  2A32               	incf	___awdiv@quotient+1,f,c
  9882  003D62                     l6312:
  9883  003D62  C031  F02B         	movff	___awdiv@quotient,?___awdiv
  9884  003D66  C032  F02C         	movff	___awdiv@quotient+1,?___awdiv+1
  9885  003D6A  0012               	return	
  9886  003D6C                     __end_of___awdiv:
  9887                           	opt stack 0
  9888                           tblptru	equ	0xFF8
  9889                           tblptrh	equ	0xFF7
  9890                           tblptrl	equ	0xFF6
  9891                           tablat	equ	0xFF5
  9892                           prodh	equ	0xFF4
  9893                           prodl	equ	0xFF3
  9894                           intcon	equ	0xFF2
  9895                           postinc0	equ	0xFEE
  9896                           wreg	equ	0xFE8
  9897                           postdec1	equ	0xFE5
  9898                           fsr1l	equ	0xFE1
  9899                           indf2	equ	0xFDF
  9900                           postinc2	equ	0xFDE
  9901                           postdec2	equ	0xFDD
  9902                           fsr2h	equ	0xFDA
  9903                           fsr2l	equ	0xFD9
  9904                           status	equ	0xFD8
  9905                           
  9906 ;; *************** function __tdiv_to_l_ *****************
  9907 ;; Defined at:
  9908 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  9909 ;; Parameters:    Size  Location     Type
  9910 ;;  f1              3   36[COMRAM] float 
  9911 ;;  f2              3   39[COMRAM] float 
  9912 ;; Auto vars:     Size  Location     Type
  9913 ;;  quot            4   45[COMRAM] unsigned long 
  9914 ;;  exp1            1   50[COMRAM] unsigned char 
  9915 ;;  cntr            1   49[COMRAM] unsigned char 
  9916 ;; Return value:  Size  Location     Type
  9917 ;;                  4   36[COMRAM] unsigned long 
  9918 ;; Registers used:
  9919 ;;		wreg, status,2, status,0
  9920 ;; Tracked objects:
  9921 ;;		On entry : 0/0
  9922 ;;		On exit  : 0/0
  9923 ;;		Unchanged: 0/0
  9924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9925 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9926 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9927 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9928 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9929 ;;Total ram usage:       15 bytes
  9930 ;; Hardware stack levels used:    1
  9931 ;; Hardware stack levels required when called:    3
  9932 ;; This function calls:
  9933 ;;		Nothing
  9934 ;; This function is called by:
  9935 ;;		_printf
  9936 ;; This function uses a non-reentrant model
  9937 ;;
  9938                           
  9939                           	psect	text24
  9940  002CD6                     __ptext24:
  9941                           	opt stack 0
  9942  002CD6                     __tdiv_to_l_:
  9943                           	opt stack 25
  9944                           
  9945                           ;incstack = 0
  9946  002CD6  C027  F02B         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  9947  002CDA  6A2C               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  9948  002CDC  6A2D               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  9949  002CDE  3426               	rlcf	__tdiv_to_l_@f1+1,w,c
  9950  002CE0  362B               	rlcf	??__tdiv_to_l_& (0+255),f,c
  9951  002CE2  E301               	bnc	u6491
  9952  002CE4  802C               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  9953  002CE6                     u6491:
  9954  002CE6  502B               	movf	??__tdiv_to_l_,w,c
  9955  002CE8  6E33               	movwf	__tdiv_to_l_@exp1,c
  9956  002CEA  5033               	movf	__tdiv_to_l_@exp1,w,c
  9957  002CEC  A4D8               	btfss	status,2,c
  9958  002CEE  D009               	goto	l6494
  9959  002CF0  0E00               	movlw	0
  9960  002CF2  6E25               	movwf	?__tdiv_to_l_,c
  9961  002CF4  0E00               	movlw	0
  9962  002CF6  6E26               	movwf	?__tdiv_to_l_+1,c
  9963  002CF8  0E00               	movlw	0
  9964  002CFA  6E27               	movwf	?__tdiv_to_l_+2,c
  9965  002CFC  0E00               	movlw	0
  9966  002CFE  6E28               	movwf	?__tdiv_to_l_+3,c
  9967  002D00  0012               	return	
  9968  002D02                     l6494:
  9969  002D02  C02A  F02B         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  9970  002D06  6A2C               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  9971  002D08  6A2D               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  9972  002D0A  3429               	rlcf	__tdiv_to_l_@f2+1,w,c
  9973  002D0C  362B               	rlcf	??__tdiv_to_l_& (0+255),f,c
  9974  002D0E  E301               	bnc	u6511
  9975  002D10  802C               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  9976  002D12                     u6511:
  9977  002D12  502B               	movf	??__tdiv_to_l_,w,c
  9978  002D14  6E32               	movwf	__tdiv_to_l_@cntr,c
  9979  002D16  5032               	movf	__tdiv_to_l_@cntr,w,c
  9980  002D18  A4D8               	btfss	status,2,c
  9981  002D1A  D009               	goto	l6500
  9982  002D1C  0E00               	movlw	0
  9983  002D1E  6E25               	movwf	?__tdiv_to_l_,c
  9984  002D20  0E00               	movlw	0
  9985  002D22  6E26               	movwf	?__tdiv_to_l_+1,c
  9986  002D24  0E00               	movlw	0
  9987  002D26  6E27               	movwf	?__tdiv_to_l_+2,c
  9988  002D28  0E00               	movlw	0
  9989  002D2A  6E28               	movwf	?__tdiv_to_l_+3,c
  9990  002D2C  0012               	return	
  9991  002D2E                     l6500:
  9992  002D2E  8E26               	bsf	__tdiv_to_l_@f1+1,7,c
  9993  002D30  0EFF               	movlw	255
  9994  002D32  1625               	andwf	__tdiv_to_l_@f1,f,c
  9995  002D34  0EFF               	movlw	255
  9996  002D36  1626               	andwf	__tdiv_to_l_@f1+1,f,c
  9997  002D38  0E00               	movlw	0
  9998  002D3A  1627               	andwf	__tdiv_to_l_@f1+2,f,c
  9999  002D3C  8E29               	bsf	__tdiv_to_l_@f2+1,7,c
 10000  002D3E  0EFF               	movlw	255
 10001  002D40  1628               	andwf	__tdiv_to_l_@f2,f,c
 10002  002D42  0EFF               	movlw	255
 10003  002D44  1629               	andwf	__tdiv_to_l_@f2+1,f,c
 10004  002D46  0E00               	movlw	0
 10005  002D48  162A               	andwf	__tdiv_to_l_@f2+2,f,c
 10006  002D4A  0E00               	movlw	0
 10007  002D4C  6E2E               	movwf	__tdiv_to_l_@quot,c
 10008  002D4E  0E00               	movlw	0
 10009  002D50  6E2F               	movwf	__tdiv_to_l_@quot+1,c
 10010  002D52  0E00               	movlw	0
 10011  002D54  6E30               	movwf	__tdiv_to_l_@quot+2,c
 10012  002D56  0E00               	movlw	0
 10013  002D58  6E31               	movwf	__tdiv_to_l_@quot+3,c
 10014  002D5A  0E7F               	movlw	127
 10015  002D5C  5E33               	subwf	__tdiv_to_l_@exp1,f,c
 10016  002D5E  5032               	movf	__tdiv_to_l_@cntr,w,c
 10017  002D60  0F98               	addlw	152
 10018  002D62  5E33               	subwf	__tdiv_to_l_@exp1,f,c
 10019  002D64  0E18               	movlw	24
 10020  002D66  6E32               	movwf	__tdiv_to_l_@cntr,c
 10021  002D68                     l1190:
 10022  002D68  90D8               	bcf	status,0,c
 10023  002D6A  362E               	rlcf	__tdiv_to_l_@quot,f,c
 10024  002D6C  362F               	rlcf	__tdiv_to_l_@quot+1,f,c
 10025  002D6E  3630               	rlcf	__tdiv_to_l_@quot+2,f,c
 10026  002D70  3631               	rlcf	__tdiv_to_l_@quot+3,f,c
 10027  002D72  5028               	movf	__tdiv_to_l_@f2,w,c
 10028  002D74  5C25               	subwf	__tdiv_to_l_@f1,w,c
 10029  002D76  5029               	movf	__tdiv_to_l_@f2+1,w,c
 10030  002D78  5826               	subwfb	__tdiv_to_l_@f1+1,w,c
 10031  002D7A  502A               	movf	__tdiv_to_l_@f2+2,w,c
 10032  002D7C  5827               	subwfb	__tdiv_to_l_@f1+2,w,c
 10033  002D7E  A0D8               	btfss	status,0,c
 10034  002D80  D007               	goto	l1191
 10035  002D82  5028               	movf	__tdiv_to_l_@f2,w,c
 10036  002D84  5E25               	subwf	__tdiv_to_l_@f1,f,c
 10037  002D86  5029               	movf	__tdiv_to_l_@f2+1,w,c
 10038  002D88  5A26               	subwfb	__tdiv_to_l_@f1+1,f,c
 10039  002D8A  502A               	movf	__tdiv_to_l_@f2+2,w,c
 10040  002D8C  5A27               	subwfb	__tdiv_to_l_@f1+2,f,c
 10041  002D8E  802E               	bsf	__tdiv_to_l_@quot,0,c
 10042  002D90                     l1191:
 10043  002D90  90D8               	bcf	status,0,c
 10044  002D92  3625               	rlcf	__tdiv_to_l_@f1,f,c
 10045  002D94  3626               	rlcf	__tdiv_to_l_@f1+1,f,c
 10046  002D96  3627               	rlcf	__tdiv_to_l_@f1+2,f,c
 10047  002D98  2E32               	decfsz	__tdiv_to_l_@cntr,f,c
 10048  002D9A  D7E6               	goto	l1190
 10049  002D9C  AE33               	btfss	__tdiv_to_l_@exp1,7,c
 10050  002D9E  D016               	goto	l6534
 10051  002DA0  5033               	movf	__tdiv_to_l_@exp1,w,c
 10052  002DA2  0A80               	xorlw	128
 10053  002DA4  0F97               	addlw	151
 10054  002DA6  B0D8               	btfsc	status,0,c
 10055  002DA8  D009               	goto	l6530
 10056  002DAA  0E00               	movlw	0
 10057  002DAC  6E25               	movwf	?__tdiv_to_l_,c
 10058  002DAE  0E00               	movlw	0
 10059  002DB0  6E26               	movwf	?__tdiv_to_l_+1,c
 10060  002DB2  0E00               	movlw	0
 10061  002DB4  6E27               	movwf	?__tdiv_to_l_+2,c
 10062  002DB6  0E00               	movlw	0
 10063  002DB8  6E28               	movwf	?__tdiv_to_l_+3,c
 10064  002DBA  0012               	return	
 10065  002DBC                     l6530:
 10066  002DBC  90D8               	bcf	status,0,c
 10067  002DBE  3231               	rrcf	__tdiv_to_l_@quot+3,f,c
 10068  002DC0  3230               	rrcf	__tdiv_to_l_@quot+2,f,c
 10069  002DC2  322F               	rrcf	__tdiv_to_l_@quot+1,f,c
 10070  002DC4  322E               	rrcf	__tdiv_to_l_@quot,f,c
 10071  002DC6  3E33               	incfsz	__tdiv_to_l_@exp1,f,c
 10072  002DC8  D7F9               	goto	l6530
 10073  002DCA  D015               	goto	l1197
 10074  002DCC                     l6534:
 10075  002DCC  0E17               	movlw	23
 10076  002DCE  6433               	cpfsgt	__tdiv_to_l_@exp1,c
 10077  002DD0  D00F               	goto	l6542
 10078  002DD2  0E00               	movlw	0
 10079  002DD4  6E25               	movwf	?__tdiv_to_l_,c
 10080  002DD6  0E00               	movlw	0
 10081  002DD8  6E26               	movwf	?__tdiv_to_l_+1,c
 10082  002DDA  0E00               	movlw	0
 10083  002DDC  6E27               	movwf	?__tdiv_to_l_+2,c
 10084  002DDE  0E00               	movlw	0
 10085  002DE0  6E28               	movwf	?__tdiv_to_l_+3,c
 10086  002DE2  0012               	return	
 10087  002DE4                     l6540:
 10088  002DE4  90D8               	bcf	status,0,c
 10089  002DE6  362E               	rlcf	__tdiv_to_l_@quot,f,c
 10090  002DE8  362F               	rlcf	__tdiv_to_l_@quot+1,f,c
 10091  002DEA  3630               	rlcf	__tdiv_to_l_@quot+2,f,c
 10092  002DEC  3631               	rlcf	__tdiv_to_l_@quot+3,f,c
 10093  002DEE  0633               	decf	__tdiv_to_l_@exp1,f,c
 10094  002DF0                     l6542:
 10095  002DF0  5033               	movf	__tdiv_to_l_@exp1,w,c
 10096  002DF2  A4D8               	btfss	status,2,c
 10097  002DF4  D7F7               	goto	l6540
 10098  002DF6                     l1197:
 10099  002DF6  C02E  F025         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 10100  002DFA  C02F  F026         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 10101  002DFE  C030  F027         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 10102  002E02  C031  F028         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 10103  002E06  0012               	return		;funcret
 10104  002E08                     __end_of__tdiv_to_l_:
 10105                           	opt stack 0
 10106                           tblptru	equ	0xFF8
 10107                           tblptrh	equ	0xFF7
 10108                           tblptrl	equ	0xFF6
 10109                           tablat	equ	0xFF5
 10110                           prodh	equ	0xFF4
 10111                           prodl	equ	0xFF3
 10112                           intcon	equ	0xFF2
 10113                           postinc0	equ	0xFEE
 10114                           wreg	equ	0xFE8
 10115                           postdec1	equ	0xFE5
 10116                           fsr1l	equ	0xFE1
 10117                           indf2	equ	0xFDF
 10118                           postinc2	equ	0xFDE
 10119                           postdec2	equ	0xFDD
 10120                           fsr2h	equ	0xFDA
 10121                           fsr2l	equ	0xFD9
 10122                           status	equ	0xFD8
 10123                           
 10124 ;; *************** function __div_to_l_ *****************
 10125 ;; Defined at:
 10126 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
 10127 ;; Parameters:    Size  Location     Type
 10128 ;;  f1              3   36[COMRAM] unsigned long 
 10129 ;;  f2              3   39[COMRAM] unsigned long 
 10130 ;; Auto vars:     Size  Location     Type
 10131 ;;  quot            4   42[COMRAM] unsigned long 
 10132 ;;  exp1            1   47[COMRAM] unsigned char 
 10133 ;;  cntr            1   46[COMRAM] unsigned char 
 10134 ;; Return value:  Size  Location     Type
 10135 ;;                  4   36[COMRAM] unsigned long 
 10136 ;; Registers used:
 10137 ;;		wreg, status,2, status,0
 10138 ;; Tracked objects:
 10139 ;;		On entry : 0/0
 10140 ;;		On exit  : 0/0
 10141 ;;		Unchanged: 0/0
 10142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10143 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10144 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10146 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10147 ;;Total ram usage:       12 bytes
 10148 ;; Hardware stack levels used:    1
 10149 ;; Hardware stack levels required when called:    3
 10150 ;; This function calls:
 10151 ;;		Nothing
 10152 ;; This function is called by:
 10153 ;;		_printf
 10154 ;; This function uses a non-reentrant model
 10155 ;;
 10156                           
 10157                           	psect	text25
 10158  002E08                     __ptext25:
 10159                           	opt stack 0
 10160  002E08                     __div_to_l_:
 10161                           	opt stack 25
 10162                           
 10163                           ;incstack = 0
 10164  002E08  3427               	rlcf	__div_to_l_@f1+2,w,c
 10165  002E0A  3428               	rlcf	__div_to_l_@f1+3,w,c
 10166  002E0C  6E30               	movwf	__div_to_l_@exp1,c
 10167  002E0E  5030               	movf	__div_to_l_@exp1,w,c
 10168  002E10  A4D8               	btfss	status,2,c
 10169  002E12  D009               	goto	l6550
 10170  002E14  0E00               	movlw	0
 10171  002E16  6E25               	movwf	?__div_to_l_,c
 10172  002E18  0E00               	movlw	0
 10173  002E1A  6E26               	movwf	?__div_to_l_+1,c
 10174  002E1C  0E00               	movlw	0
 10175  002E1E  6E27               	movwf	?__div_to_l_+2,c
 10176  002E20  0E00               	movlw	0
 10177  002E22  6E28               	movwf	?__div_to_l_+3,c
 10178  002E24  0012               	return	
 10179  002E26                     l6550:
 10180  002E26  342A               	rlcf	__div_to_l_@f2+2,w,c
 10181  002E28  342B               	rlcf	__div_to_l_@f2+3,w,c
 10182  002E2A  6E2F               	movwf	__div_to_l_@cntr,c
 10183  002E2C  502F               	movf	__div_to_l_@cntr,w,c
 10184  002E2E  A4D8               	btfss	status,2,c
 10185  002E30  D009               	goto	l6556
 10186  002E32  0E00               	movlw	0
 10187  002E34  6E25               	movwf	?__div_to_l_,c
 10188  002E36  0E00               	movlw	0
 10189  002E38  6E26               	movwf	?__div_to_l_+1,c
 10190  002E3A  0E00               	movlw	0
 10191  002E3C  6E27               	movwf	?__div_to_l_+2,c
 10192  002E3E  0E00               	movlw	0
 10193  002E40  6E28               	movwf	?__div_to_l_+3,c
 10194  002E42  0012               	return	
 10195  002E44                     l6556:
 10196  002E44  8E27               	bsf	__div_to_l_@f1+2,7,c
 10197  002E46  0EFF               	movlw	255
 10198  002E48  1625               	andwf	__div_to_l_@f1,f,c
 10199  002E4A  0EFF               	movlw	255
 10200  002E4C  1626               	andwf	__div_to_l_@f1+1,f,c
 10201  002E4E  0EFF               	movlw	255
 10202  002E50  1627               	andwf	__div_to_l_@f1+2,f,c
 10203  002E52  0E00               	movlw	0
 10204  002E54  1628               	andwf	__div_to_l_@f1+3,f,c
 10205  002E56  8E2A               	bsf	__div_to_l_@f2+2,7,c
 10206  002E58  0EFF               	movlw	255
 10207  002E5A  1628               	andwf	__div_to_l_@f2,f,c
 10208  002E5C  0EFF               	movlw	255
 10209  002E5E  1629               	andwf	__div_to_l_@f2+1,f,c
 10210  002E60  0EFF               	movlw	255
 10211  002E62  162A               	andwf	__div_to_l_@f2+2,f,c
 10212  002E64  0E00               	movlw	0
 10213  002E66  162B               	andwf	__div_to_l_@f2+3,f,c
 10214  002E68  0E00               	movlw	0
 10215  002E6A  6E2B               	movwf	__div_to_l_@quot,c
 10216  002E6C  0E00               	movlw	0
 10217  002E6E  6E2C               	movwf	__div_to_l_@quot+1,c
 10218  002E70  0E00               	movlw	0
 10219  002E72  6E2D               	movwf	__div_to_l_@quot+2,c
 10220  002E74  0E00               	movlw	0
 10221  002E76  6E2E               	movwf	__div_to_l_@quot+3,c
 10222  002E78  0E7F               	movlw	127
 10223  002E7A  5E30               	subwf	__div_to_l_@exp1,f,c
 10224  002E7C  502F               	movf	__div_to_l_@cntr,w,c
 10225  002E7E  0FA0               	addlw	160
 10226  002E80  5E30               	subwf	__div_to_l_@exp1,f,c
 10227  002E82  0E20               	movlw	32
 10228  002E84  6E2F               	movwf	__div_to_l_@cntr,c
 10229  002E86                     l6570:
 10230  002E86  90D8               	bcf	status,0,c
 10231  002E88  362B               	rlcf	__div_to_l_@quot,f,c
 10232  002E8A  362C               	rlcf	__div_to_l_@quot+1,f,c
 10233  002E8C  362D               	rlcf	__div_to_l_@quot+2,f,c
 10234  002E8E  362E               	rlcf	__div_to_l_@quot+3,f,c
 10235  002E90  5028               	movf	__div_to_l_@f2,w,c
 10236  002E92  5C25               	subwf	__div_to_l_@f1,w,c
 10237  002E94  5029               	movf	__div_to_l_@f2+1,w,c
 10238  002E96  5826               	subwfb	__div_to_l_@f1+1,w,c
 10239  002E98  502A               	movf	__div_to_l_@f2+2,w,c
 10240  002E9A  5827               	subwfb	__div_to_l_@f1+2,w,c
 10241  002E9C  502B               	movf	__div_to_l_@f2+3,w,c
 10242  002E9E  5828               	subwfb	__div_to_l_@f1+3,w,c
 10243  002EA0  A0D8               	btfss	status,0,c
 10244  002EA2  D009               	goto	l6578
 10245  002EA4  5028               	movf	__div_to_l_@f2,w,c
 10246  002EA6  5E25               	subwf	__div_to_l_@f1,f,c
 10247  002EA8  5029               	movf	__div_to_l_@f2+1,w,c
 10248  002EAA  5A26               	subwfb	__div_to_l_@f1+1,f,c
 10249  002EAC  502A               	movf	__div_to_l_@f2+2,w,c
 10250  002EAE  5A27               	subwfb	__div_to_l_@f1+2,f,c
 10251  002EB0  502B               	movf	__div_to_l_@f2+3,w,c
 10252  002EB2  5A28               	subwfb	__div_to_l_@f1+3,f,c
 10253  002EB4  802B               	bsf	__div_to_l_@quot,0,c
 10254  002EB6                     l6578:
 10255  002EB6  90D8               	bcf	status,0,c
 10256  002EB8  3625               	rlcf	__div_to_l_@f1,f,c
 10257  002EBA  3626               	rlcf	__div_to_l_@f1+1,f,c
 10258  002EBC  3627               	rlcf	__div_to_l_@f1+2,f,c
 10259  002EBE  3628               	rlcf	__div_to_l_@f1+3,f,c
 10260  002EC0  2E2F               	decfsz	__div_to_l_@cntr,f,c
 10261  002EC2  D7E1               	goto	l6570
 10262  002EC4  AE30               	btfss	__div_to_l_@exp1,7,c
 10263  002EC6  D016               	goto	l6594
 10264  002EC8  5030               	movf	__div_to_l_@exp1,w,c
 10265  002ECA  0A80               	xorlw	128
 10266  002ECC  0F9F               	addlw	159
 10267  002ECE  B0D8               	btfsc	status,0,c
 10268  002ED0  D009               	goto	l6590
 10269  002ED2  0E00               	movlw	0
 10270  002ED4  6E25               	movwf	?__div_to_l_,c
 10271  002ED6  0E00               	movlw	0
 10272  002ED8  6E26               	movwf	?__div_to_l_+1,c
 10273  002EDA  0E00               	movlw	0
 10274  002EDC  6E27               	movwf	?__div_to_l_+2,c
 10275  002EDE  0E00               	movlw	0
 10276  002EE0  6E28               	movwf	?__div_to_l_+3,c
 10277  002EE2  0012               	return	
 10278  002EE4                     l6590:
 10279  002EE4  90D8               	bcf	status,0,c
 10280  002EE6  322E               	rrcf	__div_to_l_@quot+3,f,c
 10281  002EE8  322D               	rrcf	__div_to_l_@quot+2,f,c
 10282  002EEA  322C               	rrcf	__div_to_l_@quot+1,f,c
 10283  002EEC  322B               	rrcf	__div_to_l_@quot,f,c
 10284  002EEE  3E30               	incfsz	__div_to_l_@exp1,f,c
 10285  002EF0  D7F9               	goto	l6590
 10286  002EF2  D015               	goto	l1093
 10287  002EF4                     l6594:
 10288  002EF4  0E1F               	movlw	31
 10289  002EF6  6430               	cpfsgt	__div_to_l_@exp1,c
 10290  002EF8  D00F               	goto	l6602
 10291  002EFA  0E00               	movlw	0
 10292  002EFC  6E25               	movwf	?__div_to_l_,c
 10293  002EFE  0E00               	movlw	0
 10294  002F00  6E26               	movwf	?__div_to_l_+1,c
 10295  002F02  0E00               	movlw	0
 10296  002F04  6E27               	movwf	?__div_to_l_+2,c
 10297  002F06  0E00               	movlw	0
 10298  002F08  6E28               	movwf	?__div_to_l_+3,c
 10299  002F0A  0012               	return	
 10300  002F0C                     l6600:
 10301  002F0C  90D8               	bcf	status,0,c
 10302  002F0E  362B               	rlcf	__div_to_l_@quot,f,c
 10303  002F10  362C               	rlcf	__div_to_l_@quot+1,f,c
 10304  002F12  362D               	rlcf	__div_to_l_@quot+2,f,c
 10305  002F14  362E               	rlcf	__div_to_l_@quot+3,f,c
 10306  002F16  0630               	decf	__div_to_l_@exp1,f,c
 10307  002F18                     l6602:
 10308  002F18  5030               	movf	__div_to_l_@exp1,w,c
 10309  002F1A  A4D8               	btfss	status,2,c
 10310  002F1C  D7F7               	goto	l6600
 10311  002F1E                     l1093:
 10312  002F1E  C02B  F025         	movff	__div_to_l_@quot,?__div_to_l_
 10313  002F22  C02C  F026         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 10314  002F26  C02D  F027         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 10315  002F2A  C02E  F028         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 10316  002F2E  0012               	return		;funcret
 10317  002F30                     __end_of__div_to_l_:
 10318                           	opt stack 0
 10319                           tblptru	equ	0xFF8
 10320                           tblptrh	equ	0xFF7
 10321                           tblptrl	equ	0xFF6
 10322                           tablat	equ	0xFF5
 10323                           prodh	equ	0xFF4
 10324                           prodl	equ	0xFF3
 10325                           intcon	equ	0xFF2
 10326                           postinc0	equ	0xFEE
 10327                           wreg	equ	0xFE8
 10328                           postdec1	equ	0xFE5
 10329                           fsr1l	equ	0xFE1
 10330                           indf2	equ	0xFDF
 10331                           postinc2	equ	0xFDE
 10332                           postdec2	equ	0xFDD
 10333                           fsr2h	equ	0xFDA
 10334                           fsr2l	equ	0xFD9
 10335                           status	equ	0xFD8
 10336                           
 10337 ;; *************** function ___lltoft *****************
 10338 ;; Defined at:
 10339 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 10340 ;; Parameters:    Size  Location     Type
 10341 ;;  c               4   44[COMRAM] unsigned long 
 10342 ;; Auto vars:     Size  Location     Type
 10343 ;;  exp             1   52[COMRAM] unsigned char 
 10344 ;; Return value:  Size  Location     Type
 10345 ;;                  3   44[COMRAM] float 
 10346 ;; Registers used:
 10347 ;;		wreg, status,2, status,0, cstack
 10348 ;; Tracked objects:
 10349 ;;		On entry : 0/0
 10350 ;;		On exit  : 0/0
 10351 ;;		Unchanged: 0/0
 10352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10353 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10354 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10355 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10356 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10357 ;;Total ram usage:        9 bytes
 10358 ;; Hardware stack levels used:    1
 10359 ;; Hardware stack levels required when called:    4
 10360 ;; This function calls:
 10361 ;;		___ftpack
 10362 ;; This function is called by:
 10363 ;;		_printf
 10364 ;; This function uses a non-reentrant model
 10365 ;;
 10366                           
 10367                           	psect	text26
 10368  0040D8                     __ptext26:
 10369                           	opt stack 0
 10370  0040D8                     ___lltoft:
 10371                           	opt stack 24
 10372                           
 10373                           ;incstack = 0
 10374  0040D8  0E8E               	movlw	142
 10375  0040DA  6E35               	movwf	___lltoft@exp,c
 10376  0040DC  D006               	goto	l6774
 10377  0040DE                     l6772:
 10378  0040DE  90D8               	bcf	status,0,c
 10379  0040E0  3230               	rrcf	___lltoft@c+3,f,c
 10380  0040E2  322F               	rrcf	___lltoft@c+2,f,c
 10381  0040E4  322E               	rrcf	___lltoft@c+1,f,c
 10382  0040E6  322D               	rrcf	___lltoft@c,f,c
 10383  0040E8  2A35               	incf	___lltoft@exp,f,c
 10384  0040EA                     l6774:
 10385  0040EA  0E00               	movlw	0
 10386  0040EC  142D               	andwf	___lltoft@c,w,c
 10387  0040EE  6E31               	movwf	??___lltoft& (0+255),c
 10388  0040F0  0E00               	movlw	0
 10389  0040F2  142E               	andwf	___lltoft@c+1,w,c
 10390  0040F4  6E32               	movwf	(??___lltoft+1)& (0+255),c
 10391  0040F6  0E00               	movlw	0
 10392  0040F8  142F               	andwf	___lltoft@c+2,w,c
 10393  0040FA  6E33               	movwf	(??___lltoft+2)& (0+255),c
 10394  0040FC  0EFF               	movlw	255
 10395  0040FE  1430               	andwf	___lltoft@c+3,w,c
 10396  004100  6E34               	movwf	(??___lltoft+3)& (0+255),c
 10397  004102  5031               	movf	??___lltoft,w,c
 10398  004104  1032               	iorwf	??___lltoft+1,w,c
 10399  004106  1033               	iorwf	??___lltoft+2,w,c
 10400  004108  1034               	iorwf	??___lltoft+3,w,c
 10401  00410A  A4D8               	btfss	status,2,c
 10402  00410C  D7E8               	goto	l6772
 10403  00410E  C02D  F025         	movff	___lltoft@c,___ftpack@arg
 10404  004112  C02E  F026         	movff	___lltoft@c+1,___ftpack@arg+1
 10405  004116  C02F  F027         	movff	___lltoft@c+2,___ftpack@arg+2
 10406  00411A  C035  F028         	movff	___lltoft@exp,___ftpack@exp
 10407  00411E  0E00               	movlw	0
 10408  004120  6E29               	movwf	___ftpack@sign,c
 10409  004122  EC57  F01C         	call	___ftpack	;wreg free
 10410  004126  C025  F02D         	movff	?___ftpack,?___lltoft
 10411  00412A  C026  F02E         	movff	?___ftpack+1,?___lltoft+1
 10412  00412E  C027  F02F         	movff	?___ftpack+2,?___lltoft+2
 10413  004132  0012               	return	
 10414  004134                     __end_of___lltoft:
 10415                           	opt stack 0
 10416                           tblptru	equ	0xFF8
 10417                           tblptrh	equ	0xFF7
 10418                           tblptrl	equ	0xFF6
 10419                           tablat	equ	0xFF5
 10420                           prodh	equ	0xFF4
 10421                           prodl	equ	0xFF3
 10422                           intcon	equ	0xFF2
 10423                           postinc0	equ	0xFEE
 10424                           wreg	equ	0xFE8
 10425                           postdec1	equ	0xFE5
 10426                           fsr1l	equ	0xFE1
 10427                           indf2	equ	0xFDF
 10428                           postinc2	equ	0xFDE
 10429                           postdec2	equ	0xFDD
 10430                           fsr2h	equ	0xFDA
 10431                           fsr2l	equ	0xFD9
 10432                           status	equ	0xFD8
 10433                           
 10434 ;; *************** function ___llmod *****************
 10435 ;; Defined at:
 10436 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
 10437 ;; Parameters:    Size  Location     Type
 10438 ;;  dividend        4   49[COMRAM] unsigned long 
 10439 ;;  divisor         4   53[COMRAM] unsigned long 
 10440 ;; Auto vars:     Size  Location     Type
 10441 ;;  counter         1    0[BANK0 ] unsigned char 
 10442 ;; Return value:  Size  Location     Type
 10443 ;;                  4   49[COMRAM] unsigned long 
 10444 ;; Registers used:
 10445 ;;		wreg, status,2, status,0
 10446 ;; Tracked objects:
 10447 ;;		On entry : 0/0
 10448 ;;		On exit  : 0/0
 10449 ;;		Unchanged: 0/0
 10450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10451 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10452 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10454 ;;      Totals:         8       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10455 ;;Total ram usage:        9 bytes
 10456 ;; Hardware stack levels used:    1
 10457 ;; Hardware stack levels required when called:    3
 10458 ;; This function calls:
 10459 ;;		Nothing
 10460 ;; This function is called by:
 10461 ;;		_printf
 10462 ;; This function uses a non-reentrant model
 10463 ;;
 10464                           
 10465                           	psect	text27
 10466  003F46                     __ptext27:
 10467                           	opt stack 0
 10468  003F46                     ___llmod:
 10469                           	opt stack 25
 10470                           
 10471                           ;incstack = 0
 10472  003F46  5036               	movf	___llmod@divisor,w,c
 10473  003F48  1037               	iorwf	___llmod@divisor+1,w,c
 10474  003F4A  1038               	iorwf	___llmod@divisor+2,w,c
 10475  003F4C  1039               	iorwf	___llmod@divisor+3,w,c
 10476  003F4E  B4D8               	btfsc	status,2,c
 10477  003F50  D027               	goto	l1282
 10478  003F52  0E01               	movlw	1
 10479  003F54  0100               	movlb	0	; () banked
 10480  003F56  6F80               	movwf	___llmod@counter& (0+255),b
 10481  003F58  D007               	goto	l6760
 10482  003F5A                     l6758:
 10483                           
 10484                           ; BSR set to: 0
 10485  003F5A  90D8               	bcf	status,0,c
 10486  003F5C  3636               	rlcf	___llmod@divisor,f,c
 10487  003F5E  3637               	rlcf	___llmod@divisor+1,f,c
 10488  003F60  3638               	rlcf	___llmod@divisor+2,f,c
 10489  003F62  3639               	rlcf	___llmod@divisor+3,f,c
 10490  003F64  0100               	movlb	0	; () banked
 10491  003F66  2B80               	incf	___llmod@counter& (0+255),f,b
 10492  003F68                     l6760:
 10493                           
 10494                           ; BSR set to: 0
 10495  003F68  AE39               	btfss	___llmod@divisor+3,7,c
 10496  003F6A  D7F7               	goto	l6758
 10497  003F6C                     l6762:
 10498                           
 10499                           ; BSR set to: 0
 10500  003F6C  5036               	movf	___llmod@divisor,w,c
 10501  003F6E  5C32               	subwf	___llmod@dividend,w,c
 10502  003F70  5037               	movf	___llmod@divisor+1,w,c
 10503  003F72  5833               	subwfb	___llmod@dividend+1,w,c
 10504  003F74  5038               	movf	___llmod@divisor+2,w,c
 10505  003F76  5834               	subwfb	___llmod@dividend+2,w,c
 10506  003F78  5039               	movf	___llmod@divisor+3,w,c
 10507  003F7A  5835               	subwfb	___llmod@dividend+3,w,c
 10508  003F7C  A0D8               	btfss	status,0,c
 10509  003F7E  D008               	goto	l6766
 10510                           
 10511                           ; BSR set to: 0
 10512  003F80  5036               	movf	___llmod@divisor,w,c
 10513  003F82  5E32               	subwf	___llmod@dividend,f,c
 10514  003F84  5037               	movf	___llmod@divisor+1,w,c
 10515  003F86  5A33               	subwfb	___llmod@dividend+1,f,c
 10516  003F88  5038               	movf	___llmod@divisor+2,w,c
 10517  003F8A  5A34               	subwfb	___llmod@dividend+2,f,c
 10518  003F8C  5039               	movf	___llmod@divisor+3,w,c
 10519  003F8E  5A35               	subwfb	___llmod@dividend+3,f,c
 10520  003F90                     l6766:
 10521                           
 10522                           ; BSR set to: 0
 10523  003F90  90D8               	bcf	status,0,c
 10524  003F92  3239               	rrcf	___llmod@divisor+3,f,c
 10525  003F94  3238               	rrcf	___llmod@divisor+2,f,c
 10526  003F96  3237               	rrcf	___llmod@divisor+1,f,c
 10527  003F98  3236               	rrcf	___llmod@divisor,f,c
 10528                           
 10529                           ; BSR set to: 0
 10530  003F9A  0100               	movlb	0	; () banked
 10531  003F9C  2F80               	decfsz	___llmod@counter& (0+255),f,b
 10532  003F9E  D7E6               	goto	l6762
 10533  003FA0                     l1282:
 10534  003FA0  C032  F032         	movff	___llmod@dividend,?___llmod
 10535  003FA4  C033  F033         	movff	___llmod@dividend+1,?___llmod+1
 10536  003FA8  C034  F034         	movff	___llmod@dividend+2,?___llmod+2
 10537  003FAC  C035  F035         	movff	___llmod@dividend+3,?___llmod+3
 10538  003FB0  0012               	return		;funcret
 10539  003FB2                     __end_of___llmod:
 10540                           	opt stack 0
 10541                           tblptru	equ	0xFF8
 10542                           tblptrh	equ	0xFF7
 10543                           tblptrl	equ	0xFF6
 10544                           tablat	equ	0xFF5
 10545                           prodh	equ	0xFF4
 10546                           prodl	equ	0xFF3
 10547                           intcon	equ	0xFF2
 10548                           postinc0	equ	0xFEE
 10549                           wreg	equ	0xFE8
 10550                           postdec1	equ	0xFE5
 10551                           fsr1l	equ	0xFE1
 10552                           indf2	equ	0xFDF
 10553                           postinc2	equ	0xFDE
 10554                           postdec2	equ	0xFDD
 10555                           fsr2h	equ	0xFDA
 10556                           fsr2l	equ	0xFD9
 10557                           status	equ	0xFD8
 10558                           
 10559 ;; *************** function ___ftsub *****************
 10560 ;; Defined at:
 10561 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 10562 ;; Parameters:    Size  Location     Type
 10563 ;;  f1              3   42[BANK0 ] float 
 10564 ;;  f2              3   45[BANK0 ] float 
 10565 ;; Auto vars:     Size  Location     Type
 10566 ;;		None
 10567 ;; Return value:  Size  Location     Type
 10568 ;;                  3   42[BANK0 ] float 
 10569 ;; Registers used:
 10570 ;;		wreg, status,2, status,0, cstack
 10571 ;; Tracked objects:
 10572 ;;		On entry : 0/0
 10573 ;;		On exit  : 0/0
 10574 ;;		Unchanged: 0/0
 10575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10576 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10579 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10580 ;;Total ram usage:        6 bytes
 10581 ;; Hardware stack levels used:    1
 10582 ;; Hardware stack levels required when called:    5
 10583 ;; This function calls:
 10584 ;;		___ftadd
 10585 ;; This function is called by:
 10586 ;;		_sortBattery
 10587 ;;		_printf
 10588 ;; This function uses a non-reentrant model
 10589 ;;
 10590                           
 10591                           	psect	text28
 10592  00422E                     __ptext28:
 10593                           	opt stack 0
 10594  00422E                     ___ftsub:
 10595                           	opt stack 23
 10596                           
 10597                           ;incstack = 0
 10598  00422E  0100               	movlb	0	; () banked
 10599  004230  51AD               	movf	___ftsub@f2& (0+255),w,b
 10600  004232  0100               	movlb	0	; () banked
 10601  004234  11AE               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 10602  004236  0100               	movlb	0	; () banked
 10603  004238  11AF               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 10604  00423A  B4D8               	btfsc	status,2,c
 10605  00423C  D009               	goto	l6670
 10606                           
 10607                           ; BSR set to: 0
 10608  00423E  0E00               	movlw	0
 10609  004240  0100               	movlb	0	; () banked
 10610  004242  1BAD               	xorwf	___ftsub@f2& (0+255),f,b
 10611  004244  0E00               	movlw	0
 10612  004246  0100               	movlb	0	; () banked
 10613  004248  1BAE               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 10614  00424A  0E80               	movlw	128
 10615  00424C  0100               	movlb	0	; () banked
 10616  00424E  1BAF               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 10617  004250                     l6670:
 10618                           
 10619                           ; BSR set to: 0
 10620  004250  C0AA  F09E         	movff	___ftsub@f1,___ftadd@f1
 10621  004254  C0AB  F09F         	movff	___ftsub@f1+1,___ftadd@f1+1
 10622  004258  C0AC  F0A0         	movff	___ftsub@f1+2,___ftadd@f1+2
 10623  00425C  C0AD  F0A1         	movff	___ftsub@f2,___ftadd@f2
 10624  004260  C0AE  F0A2         	movff	___ftsub@f2+1,___ftadd@f2+1
 10625  004264  C0AF  F0A3         	movff	___ftsub@f2+2,___ftadd@f2+2
 10626  004268  ECE0  F00F         	call	___ftadd	;wreg free
 10627  00426C  C09E  F0AA         	movff	?___ftadd,?___ftsub
 10628  004270  C09F  F0AB         	movff	?___ftadd+1,?___ftsub+1
 10629  004274  C0A0  F0AC         	movff	?___ftadd+2,?___ftsub+2
 10630  004278  0012               	return	
 10631  00427A                     __end_of___ftsub:
 10632                           	opt stack 0
 10633                           tblptru	equ	0xFF8
 10634                           tblptrh	equ	0xFF7
 10635                           tblptrl	equ	0xFF6
 10636                           tablat	equ	0xFF5
 10637                           prodh	equ	0xFF4
 10638                           prodl	equ	0xFF3
 10639                           intcon	equ	0xFF2
 10640                           postinc0	equ	0xFEE
 10641                           wreg	equ	0xFE8
 10642                           postdec1	equ	0xFE5
 10643                           fsr1l	equ	0xFE1
 10644                           indf2	equ	0xFDF
 10645                           postinc2	equ	0xFDE
 10646                           postdec2	equ	0xFDD
 10647                           fsr2h	equ	0xFDA
 10648                           fsr2l	equ	0xFD9
 10649                           status	equ	0xFD8
 10650                           
 10651 ;; *************** function ___ftneg *****************
 10652 ;; Defined at:
 10653 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 10654 ;; Parameters:    Size  Location     Type
 10655 ;;  f1              3   36[COMRAM] float 
 10656 ;; Auto vars:     Size  Location     Type
 10657 ;;		None
 10658 ;; Return value:  Size  Location     Type
 10659 ;;                  3   36[COMRAM] float 
 10660 ;; Registers used:
 10661 ;;		wreg, status,2, status,0
 10662 ;; Tracked objects:
 10663 ;;		On entry : 0/0
 10664 ;;		On exit  : 0/0
 10665 ;;		Unchanged: 0/0
 10666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10667 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10670 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10671 ;;Total ram usage:        3 bytes
 10672 ;; Hardware stack levels used:    1
 10673 ;; Hardware stack levels required when called:    3
 10674 ;; This function calls:
 10675 ;;		Nothing
 10676 ;; This function is called by:
 10677 ;;		_printf
 10678 ;; This function uses a non-reentrant model
 10679 ;;
 10680                           
 10681                           	psect	text29
 10682  0044F4                     __ptext29:
 10683                           	opt stack 0
 10684  0044F4                     ___ftneg:
 10685                           	opt stack 25
 10686                           
 10687                           ;incstack = 0
 10688  0044F4  5025               	movf	___ftneg@f1,w,c
 10689  0044F6  1026               	iorwf	___ftneg@f1+1,w,c
 10690  0044F8  1027               	iorwf	___ftneg@f1+2,w,c
 10691  0044FA  B4D8               	btfsc	status,2,c
 10692  0044FC  D006               	goto	l1222
 10693  0044FE  0E00               	movlw	0
 10694  004500  1A25               	xorwf	___ftneg@f1,f,c
 10695  004502  0E00               	movlw	0
 10696  004504  1A26               	xorwf	___ftneg@f1+1,f,c
 10697  004506  0E80               	movlw	128
 10698  004508  1A27               	xorwf	___ftneg@f1+2,f,c
 10699  00450A                     l1222:
 10700  00450A  C025  F025         	movff	___ftneg@f1,?___ftneg
 10701  00450E  C026  F026         	movff	___ftneg@f1+1,?___ftneg+1
 10702  004512  C027  F027         	movff	___ftneg@f1+2,?___ftneg+2
 10703  004516  0012               	return		;funcret
 10704  004518                     __end_of___ftneg:
 10705                           	opt stack 0
 10706                           tblptru	equ	0xFF8
 10707                           tblptrh	equ	0xFF7
 10708                           tblptrl	equ	0xFF6
 10709                           tablat	equ	0xFF5
 10710                           prodh	equ	0xFF4
 10711                           prodl	equ	0xFF3
 10712                           intcon	equ	0xFF2
 10713                           postinc0	equ	0xFEE
 10714                           wreg	equ	0xFE8
 10715                           postdec1	equ	0xFE5
 10716                           fsr1l	equ	0xFE1
 10717                           indf2	equ	0xFDF
 10718                           postinc2	equ	0xFDE
 10719                           postdec2	equ	0xFDD
 10720                           fsr2h	equ	0xFDA
 10721                           fsr2l	equ	0xFD9
 10722                           status	equ	0xFD8
 10723                           
 10724 ;; *************** function ___ftge *****************
 10725 ;; Defined at:
 10726 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 10727 ;; Parameters:    Size  Location     Type
 10728 ;;  ff1             3   48[COMRAM] float 
 10729 ;;  ff2             3   51[COMRAM] float 
 10730 ;; Auto vars:     Size  Location     Type
 10731 ;;		None
 10732 ;; Return value:  Size  Location     Type
 10733 ;;		None               void
 10734 ;; Registers used:
 10735 ;;		wreg, status,2, status,0
 10736 ;; Tracked objects:
 10737 ;;		On entry : 0/0
 10738 ;;		On exit  : 0/0
 10739 ;;		Unchanged: 0/0
 10740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10741 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10743 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10744 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10745 ;;Total ram usage:        9 bytes
 10746 ;; Hardware stack levels used:    1
 10747 ;; Hardware stack levels required when called:    3
 10748 ;; This function calls:
 10749 ;;		Nothing
 10750 ;; This function is called by:
 10751 ;;		_sortBattery
 10752 ;;		_printf
 10753 ;; This function uses a non-reentrant model
 10754 ;;
 10755                           
 10756                           	psect	text30
 10757  003B48                     __ptext30:
 10758                           	opt stack 0
 10759  003B48                     ___ftge:
 10760                           	opt stack 25
 10761                           
 10762                           ;incstack = 0
 10763  003B48  AE33               	btfss	___ftge@ff1+2,7,c
 10764  003B4A  D016               	goto	l6690
 10765  003B4C  C031  F037         	movff	___ftge@ff1,??___ftge
 10766  003B50  C032  F038         	movff	___ftge@ff1+1,??___ftge+1
 10767  003B54  C033  F039         	movff	___ftge@ff1+2,??___ftge+2
 10768  003B58  1E37               	comf	??___ftge,f,c
 10769  003B5A  1E38               	comf	??___ftge+1,f,c
 10770  003B5C  1E39               	comf	??___ftge+2,f,c
 10771  003B5E  2A37               	incf	??___ftge,f,c
 10772  003B60  0E00               	movlw	0
 10773  003B62  2238               	addwfc	??___ftge+1,f,c
 10774  003B64  2239               	addwfc	??___ftge+2,f,c
 10775  003B66  0E00               	movlw	0
 10776  003B68  2437               	addwf	??___ftge,w,c
 10777  003B6A  6E31               	movwf	___ftge@ff1,c
 10778  003B6C  0E00               	movlw	0
 10779  003B6E  2038               	addwfc	??___ftge+1,w,c
 10780  003B70  6E32               	movwf	___ftge@ff1+1,c
 10781  003B72  0E80               	movlw	128
 10782  003B74  2039               	addwfc	??___ftge+2,w,c
 10783  003B76  6E33               	movwf	___ftge@ff1+2,c
 10784  003B78                     l6690:
 10785  003B78  AE36               	btfss	___ftge@ff2+2,7,c
 10786  003B7A  D016               	goto	l6694
 10787  003B7C  C034  F037         	movff	___ftge@ff2,??___ftge
 10788  003B80  C035  F038         	movff	___ftge@ff2+1,??___ftge+1
 10789  003B84  C036  F039         	movff	___ftge@ff2+2,??___ftge+2
 10790  003B88  1E37               	comf	??___ftge,f,c
 10791  003B8A  1E38               	comf	??___ftge+1,f,c
 10792  003B8C  1E39               	comf	??___ftge+2,f,c
 10793  003B8E  2A37               	incf	??___ftge,f,c
 10794  003B90  0E00               	movlw	0
 10795  003B92  2238               	addwfc	??___ftge+1,f,c
 10796  003B94  2239               	addwfc	??___ftge+2,f,c
 10797  003B96  0E00               	movlw	0
 10798  003B98  2437               	addwf	??___ftge,w,c
 10799  003B9A  6E34               	movwf	___ftge@ff2,c
 10800  003B9C  0E00               	movlw	0
 10801  003B9E  2038               	addwfc	??___ftge+1,w,c
 10802  003BA0  6E35               	movwf	___ftge@ff2+1,c
 10803  003BA2  0E80               	movlw	128
 10804  003BA4  2039               	addwfc	??___ftge+2,w,c
 10805  003BA6  6E36               	movwf	___ftge@ff2+2,c
 10806  003BA8                     l6694:
 10807  003BA8  0E00               	movlw	0
 10808  003BAA  1A31               	xorwf	___ftge@ff1,f,c
 10809  003BAC  0E00               	movlw	0
 10810  003BAE  1A32               	xorwf	___ftge@ff1+1,f,c
 10811  003BB0  0E80               	movlw	128
 10812  003BB2  1A33               	xorwf	___ftge@ff1+2,f,c
 10813  003BB4  0E00               	movlw	0
 10814  003BB6  1A34               	xorwf	___ftge@ff2,f,c
 10815  003BB8  0E00               	movlw	0
 10816  003BBA  1A35               	xorwf	___ftge@ff2+1,f,c
 10817  003BBC  0E80               	movlw	128
 10818  003BBE  1A36               	xorwf	___ftge@ff2+2,f,c
 10819  003BC0  5034               	movf	___ftge@ff2,w,c
 10820  003BC2  5C31               	subwf	___ftge@ff1,w,c
 10821  003BC4  5035               	movf	___ftge@ff2+1,w,c
 10822  003BC6  5832               	subwfb	___ftge@ff1+1,w,c
 10823  003BC8  5036               	movf	___ftge@ff2+2,w,c
 10824  003BCA  5833               	subwfb	___ftge@ff1+2,w,c
 10825  003BCC  B0D8               	btfsc	status,0,c
 10826  003BCE  D002               	goto	l6700
 10827  003BD0  90D8               	bcf	status,0,c
 10828  003BD2  0012               	return	
 10829  003BD4                     l6700:
 10830  003BD4  80D8               	bsf	status,0,c
 10831  003BD6  0012               	return	
 10832  003BD8                     __end_of___ftge:
 10833                           	opt stack 0
 10834                           tblptru	equ	0xFF8
 10835                           tblptrh	equ	0xFF7
 10836                           tblptrl	equ	0xFF6
 10837                           tablat	equ	0xFF5
 10838                           prodh	equ	0xFF4
 10839                           prodl	equ	0xFF3
 10840                           intcon	equ	0xFF2
 10841                           postinc0	equ	0xFEE
 10842                           wreg	equ	0xFE8
 10843                           postdec1	equ	0xFE5
 10844                           fsr1l	equ	0xFE1
 10845                           indf2	equ	0xFDF
 10846                           postinc2	equ	0xFDE
 10847                           postdec2	equ	0xFDD
 10848                           fsr2h	equ	0xFDA
 10849                           fsr2l	equ	0xFD9
 10850                           status	equ	0xFD8
 10851                           
 10852 ;; *************** function _lcdHome *****************
 10853 ;; Defined at:
 10854 ;;		line 70 in file "lcd.c"
 10855 ;; Parameters:    Size  Location     Type
 10856 ;;		None
 10857 ;; Auto vars:     Size  Location     Type
 10858 ;;		None
 10859 ;; Return value:  Size  Location     Type
 10860 ;;                  2   10[None  ] int 
 10861 ;; Registers used:
 10862 ;;		wreg, status,2, status,0, cstack
 10863 ;; Tracked objects:
 10864 ;;		On entry : 0/0
 10865 ;;		On exit  : 0/0
 10866 ;;		Unchanged: 0/0
 10867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10871 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10872 ;;Total ram usage:        0 bytes
 10873 ;; Hardware stack levels used:    1
 10874 ;; Hardware stack levels required when called:    5
 10875 ;; This function calls:
 10876 ;;		_lcdInst
 10877 ;; This function is called by:
 10878 ;;		_main
 10879 ;;		_sortBattery
 10880 ;;		_showDateTime
 10881 ;;		_debug
 10882 ;; This function uses a non-reentrant model
 10883 ;;
 10884                           
 10885                           	psect	text31
 10886  004616                     __ptext31:
 10887                           	opt stack 0
 10888  004616                     _lcdHome:
 10889                           	opt stack 24
 10890                           
 10891                           ;lcd.c: 71: lcdInst(0b00000010);
 10892                           
 10893                           ;incstack = 0
 10894  004616  0E02               	movlw	2
 10895  004618  EC9D  F022         	call	_lcdInst
 10896  00461C  0012               	return		;funcret
 10897  00461E                     __end_of_lcdHome:
 10898                           	opt stack 0
 10899                           tblptru	equ	0xFF8
 10900                           tblptrh	equ	0xFF7
 10901                           tblptrl	equ	0xFF6
 10902                           tablat	equ	0xFF5
 10903                           prodh	equ	0xFF4
 10904                           prodl	equ	0xFF3
 10905                           intcon	equ	0xFF2
 10906                           postinc0	equ	0xFEE
 10907                           wreg	equ	0xFE8
 10908                           postdec1	equ	0xFE5
 10909                           fsr1l	equ	0xFE1
 10910                           indf2	equ	0xFDF
 10911                           postinc2	equ	0xFDE
 10912                           postdec2	equ	0xFDD
 10913                           fsr2h	equ	0xFDA
 10914                           fsr2l	equ	0xFD9
 10915                           status	equ	0xFD8
 10916                           
 10917 ;; *************** function _lcdClear *****************
 10918 ;; Defined at:
 10919 ;;		line 74 in file "lcd.c"
 10920 ;; Parameters:    Size  Location     Type
 10921 ;;		None
 10922 ;; Auto vars:     Size  Location     Type
 10923 ;;		None
 10924 ;; Return value:  Size  Location     Type
 10925 ;;                  1    wreg      void 
 10926 ;; Registers used:
 10927 ;;		wreg, status,2, status,0, cstack
 10928 ;; Tracked objects:
 10929 ;;		On entry : 0/0
 10930 ;;		On exit  : 0/0
 10931 ;;		Unchanged: 0/0
 10932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10936 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10937 ;;Total ram usage:        0 bytes
 10938 ;; Hardware stack levels used:    1
 10939 ;; Hardware stack levels required when called:    5
 10940 ;; This function calls:
 10941 ;;		_lcdInst
 10942 ;; This function is called by:
 10943 ;;		_sortBattery
 10944 ;;		_showDateTime
 10945 ;;		_showMainMenu
 10946 ;;		_showRunSelect
 10947 ;;		_showRunMenu
 10948 ;;		_showRunTime
 10949 ;;		_showRunStats
 10950 ;;		_showErrorMessage
 10951 ;;		_pause
 10952 ;; This function uses a non-reentrant model
 10953 ;;
 10954                           
 10955                           	psect	text32
 10956  00461E                     __ptext32:
 10957                           	opt stack 0
 10958  00461E                     _lcdClear:
 10959                           	opt stack 24
 10960                           
 10961                           ;lcd.c: 75: lcdInst(0b00000001);
 10962                           
 10963                           ;incstack = 0
 10964  00461E  0E01               	movlw	1
 10965  004620  EC9D  F022         	call	_lcdInst
 10966  004624  0012               	return		;funcret
 10967  004626                     __end_of_lcdClear:
 10968                           	opt stack 0
 10969                           tblptru	equ	0xFF8
 10970                           tblptrh	equ	0xFF7
 10971                           tblptrl	equ	0xFF6
 10972                           tablat	equ	0xFF5
 10973                           prodh	equ	0xFF4
 10974                           prodl	equ	0xFF3
 10975                           intcon	equ	0xFF2
 10976                           postinc0	equ	0xFEE
 10977                           wreg	equ	0xFE8
 10978                           postdec1	equ	0xFE5
 10979                           fsr1l	equ	0xFE1
 10980                           indf2	equ	0xFDF
 10981                           postinc2	equ	0xFDE
 10982                           postdec2	equ	0xFDD
 10983                           fsr2h	equ	0xFDA
 10984                           fsr2l	equ	0xFD9
 10985                           status	equ	0xFD8
 10986                           
 10987 ;; *************** function _keyPressed *****************
 10988 ;; Defined at:
 10989 ;;		line 43 in file "keypad.c"
 10990 ;; Parameters:    Size  Location     Type
 10991 ;;		None
 10992 ;; Auto vars:     Size  Location     Type
 10993 ;;  key             1   36[COMRAM] unsigned char 
 10994 ;; Return value:  Size  Location     Type
 10995 ;;                  1    wreg      unsigned char 
 10996 ;; Registers used:
 10997 ;;		wreg, status,2
 10998 ;; Tracked objects:
 10999 ;;		On entry : 0/0
 11000 ;;		On exit  : 0/0
 11001 ;;		Unchanged: 0/0
 11002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11004 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11006 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11007 ;;Total ram usage:        1 bytes
 11008 ;; Hardware stack levels used:    1
 11009 ;; Hardware stack levels required when called:    3
 11010 ;; This function calls:
 11011 ;;		Nothing
 11012 ;; This function is called by:
 11013 ;;		_showDateTime
 11014 ;; This function uses a non-reentrant model
 11015 ;;
 11016                           
 11017                           	psect	text33
 11018  0045EE                     __ptext33:
 11019                           	opt stack 0
 11020  0045EE                     _keyPressed:
 11021                           	opt stack 25
 11022                           
 11023                           ;keypad.c: 44: char key = lastKey;
 11024                           
 11025                           ;incstack = 0
 11026  0045EE  C04C  F025         	movff	_lastKey,keyPressed@key
 11027                           
 11028                           ;keypad.c: 45: lastKey = 0;
 11029  0045F2  0E00               	movlw	0
 11030  0045F4  6E4C               	movwf	_lastKey,c
 11031                           
 11032                           ;keypad.c: 46: return key;
 11033  0045F6  5025               	movf	keyPressed@key,w,c
 11034  0045F8  0012               	return	
 11035  0045FA                     __end_of_keyPressed:
 11036                           	opt stack 0
 11037                           tblptru	equ	0xFF8
 11038                           tblptrh	equ	0xFF7
 11039                           tblptrl	equ	0xFF6
 11040                           tablat	equ	0xFF5
 11041                           prodh	equ	0xFF4
 11042                           prodl	equ	0xFF3
 11043                           intcon	equ	0xFF2
 11044                           postinc0	equ	0xFEE
 11045                           wreg	equ	0xFE8
 11046                           postdec1	equ	0xFE5
 11047                           fsr1l	equ	0xFE1
 11048                           indf2	equ	0xFDF
 11049                           postinc2	equ	0xFDE
 11050                           postdec2	equ	0xFDD
 11051                           fsr2h	equ	0xFDA
 11052                           fsr2l	equ	0xFD9
 11053                           status	equ	0xFD8
 11054                           
 11055 ;; *************** function _initRTC *****************
 11056 ;; Defined at:
 11057 ;;		line 19 in file "RTC.c"
 11058 ;; Parameters:    Size  Location     Type
 11059 ;;		None
 11060 ;; Auto vars:     Size  Location     Type
 11061 ;;		None
 11062 ;; Return value:  Size  Location     Type
 11063 ;;                  1    wreg      void 
 11064 ;; Registers used:
 11065 ;;		wreg, status,2, status,0, cstack
 11066 ;; Tracked objects:
 11067 ;;		On entry : 0/0
 11068 ;;		On exit  : 0/0
 11069 ;;		Unchanged: 0/0
 11070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11074 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11075 ;;Total ram usage:        0 bytes
 11076 ;; Hardware stack levels used:    1
 11077 ;; Hardware stack levels required when called:    5
 11078 ;; This function calls:
 11079 ;;		_I2C_Master_Init
 11080 ;; This function is called by:
 11081 ;;		_showInterface
 11082 ;;		_showDateTime
 11083 ;; This function uses a non-reentrant model
 11084 ;;
 11085                           
 11086                           	psect	text34
 11087  0045B8                     __ptext34:
 11088                           	opt stack 0
 11089  0045B8                     _initRTC:
 11090                           	opt stack 23
 11091                           
 11092                           ;RTC.c: 20: I2C_Master_Init(10000);
 11093                           
 11094                           ;incstack = 0
 11095  0045B8  0E10               	movlw	16
 11096  0045BA  6E32               	movwf	I2C_Master_Init@c,c
 11097  0045BC  0E27               	movlw	39
 11098  0045BE  6E33               	movwf	I2C_Master_Init@c+1,c
 11099  0045C0  0E00               	movlw	0
 11100  0045C2  6E34               	movwf	I2C_Master_Init@c+2,c
 11101  0045C4  0E00               	movlw	0
 11102  0045C6  6E35               	movwf	I2C_Master_Init@c+3,c
 11103  0045C8  EC9A  F020         	call	_I2C_Master_Init	;wreg free
 11104  0045CC  0012               	return		;funcret
 11105  0045CE                     __end_of_initRTC:
 11106                           	opt stack 0
 11107                           tblptru	equ	0xFF8
 11108                           tblptrh	equ	0xFF7
 11109                           tblptrl	equ	0xFF6
 11110                           tablat	equ	0xFF5
 11111                           prodh	equ	0xFF4
 11112                           prodl	equ	0xFF3
 11113                           intcon	equ	0xFF2
 11114                           postinc0	equ	0xFEE
 11115                           wreg	equ	0xFE8
 11116                           postdec1	equ	0xFE5
 11117                           fsr1l	equ	0xFE1
 11118                           indf2	equ	0xFDF
 11119                           postinc2	equ	0xFDE
 11120                           postdec2	equ	0xFDD
 11121                           fsr2h	equ	0xFDA
 11122                           fsr2l	equ	0xFD9
 11123                           status	equ	0xFD8
 11124                           
 11125 ;; *************** function _I2C_Master_Init *****************
 11126 ;; Defined at:
 11127 ;;		line 13 in file "I2C.c"
 11128 ;; Parameters:    Size  Location     Type
 11129 ;;  c               4   49[COMRAM] const unsigned long 
 11130 ;; Auto vars:     Size  Location     Type
 11131 ;;		None
 11132 ;; Return value:  Size  Location     Type
 11133 ;;                  1    wreg      void 
 11134 ;; Registers used:
 11135 ;;		wreg, status,2, status,0, cstack
 11136 ;; Tracked objects:
 11137 ;;		On entry : 0/0
 11138 ;;		On exit  : 0/0
 11139 ;;		Unchanged: 0/0
 11140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11141 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11143 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11144 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11145 ;;Total ram usage:        8 bytes
 11146 ;; Hardware stack levels used:    1
 11147 ;; Hardware stack levels required when called:    4
 11148 ;; This function calls:
 11149 ;;		___lldiv
 11150 ;; This function is called by:
 11151 ;;		_initRTC
 11152 ;;		_testFrequency
 11153 ;; This function uses a non-reentrant model
 11154 ;;
 11155                           
 11156                           	psect	text35
 11157  004134                     __ptext35:
 11158                           	opt stack 0
 11159  004134                     _I2C_Master_Init:
 11160                           	opt stack 23
 11161                           
 11162                           ;I2C.c: 16: SSPSTAT = 0b00000000;
 11163                           
 11164                           ;incstack = 0
 11165  004134  0E00               	movlw	0
 11166  004136  6EC7               	movwf	4039,c	;volatile
 11167                           
 11168                           ;I2C.c: 17: SSPCON1 = 0b00101000;
 11169  004138  0E28               	movlw	40
 11170  00413A  6EC6               	movwf	4038,c	;volatile
 11171                           
 11172                           ;I2C.c: 18: SSPCON2 = 0b00000000;
 11173  00413C  0E00               	movlw	0
 11174  00413E  6EC5               	movwf	4037,c	;volatile
 11175                           
 11176                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
 11177  004140  0E80               	movlw	128
 11178  004142  6E25               	movwf	___lldiv@dividend,c
 11179  004144  0E96               	movlw	150
 11180  004146  6E26               	movwf	___lldiv@dividend+1,c
 11181  004148  0E98               	movlw	152
 11182  00414A  6E27               	movwf	___lldiv@dividend+2,c
 11183  00414C  0E00               	movlw	0
 11184  00414E  6E28               	movwf	___lldiv@dividend+3,c
 11185  004150  C032  F036         	movff	I2C_Master_Init@c,??_I2C_Master_Init
 11186  004154  C033  F037         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
 11187  004158  C034  F038         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
 11188  00415C  C035  F039         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
 11189  004160  0E02               	movlw	2
 11190  004162                     u6375:
 11191  004162  90D8               	bcf	status,0,c
 11192  004164  3636               	rlcf	??_I2C_Master_Init,f,c
 11193  004166  3637               	rlcf	??_I2C_Master_Init+1,f,c
 11194  004168  3638               	rlcf	??_I2C_Master_Init+2,f,c
 11195  00416A  3639               	rlcf	??_I2C_Master_Init+3,f,c
 11196  00416C  2EE8               	decfsz	wreg,f,c
 11197  00416E  D7F9               	goto	u6375
 11198  004170  C036  F029         	movff	??_I2C_Master_Init,___lldiv@divisor
 11199  004174  C037  F02A         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 11200  004178  C038  F02B         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 11201  00417C  C039  F02C         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 11202  004180  ECB6  F01E         	call	___lldiv	;wreg free
 11203  004184  0425               	decf	?___lldiv,w,c
 11204  004186  6EC8               	movwf	4040,c	;volatile
 11205                           
 11206                           ;I2C.c: 20: TRISC3 = 1;
 11207  004188  8694               	bsf	3988,3,c	;volatile
 11208                           
 11209                           ;I2C.c: 21: TRISC4 = 1;
 11210  00418A  8894               	bsf	3988,4,c	;volatile
 11211  00418C  0012               	return		;funcret
 11212  00418E                     __end_of_I2C_Master_Init:
 11213                           	opt stack 0
 11214                           tblptru	equ	0xFF8
 11215                           tblptrh	equ	0xFF7
 11216                           tblptrl	equ	0xFF6
 11217                           tablat	equ	0xFF5
 11218                           prodh	equ	0xFF4
 11219                           prodl	equ	0xFF3
 11220                           intcon	equ	0xFF2
 11221                           postinc0	equ	0xFEE
 11222                           wreg	equ	0xFE8
 11223                           postdec1	equ	0xFE5
 11224                           fsr1l	equ	0xFE1
 11225                           indf2	equ	0xFDF
 11226                           postinc2	equ	0xFDE
 11227                           postdec2	equ	0xFDD
 11228                           fsr2h	equ	0xFDA
 11229                           fsr2l	equ	0xFD9
 11230                           status	equ	0xFD8
 11231                           
 11232 ;; *************** function ___lldiv *****************
 11233 ;; Defined at:
 11234 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
 11235 ;; Parameters:    Size  Location     Type
 11236 ;;  dividend        4   36[COMRAM] unsigned long 
 11237 ;;  divisor         4   40[COMRAM] unsigned long 
 11238 ;; Auto vars:     Size  Location     Type
 11239 ;;  quotient        4   44[COMRAM] unsigned long 
 11240 ;;  counter         1   48[COMRAM] unsigned char 
 11241 ;; Return value:  Size  Location     Type
 11242 ;;                  4   36[COMRAM] unsigned long 
 11243 ;; Registers used:
 11244 ;;		wreg, status,2, status,0
 11245 ;; Tracked objects:
 11246 ;;		On entry : 0/0
 11247 ;;		On exit  : 0/0
 11248 ;;		Unchanged: 0/0
 11249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11250 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11251 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11253 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11254 ;;Total ram usage:       13 bytes
 11255 ;; Hardware stack levels used:    1
 11256 ;; Hardware stack levels required when called:    3
 11257 ;; This function calls:
 11258 ;;		Nothing
 11259 ;; This function is called by:
 11260 ;;		_I2C_Master_Init
 11261 ;;		_printf
 11262 ;; This function uses a non-reentrant model
 11263 ;;
 11264                           
 11265                           	psect	text36
 11266  003D6C                     __ptext36:
 11267                           	opt stack 0
 11268  003D6C                     ___lldiv:
 11269                           	opt stack 25
 11270                           
 11271                           ;incstack = 0
 11272  003D6C  0E00               	movlw	0
 11273  003D6E  6E2D               	movwf	___lldiv@quotient,c
 11274  003D70  0E00               	movlw	0
 11275  003D72  6E2E               	movwf	___lldiv@quotient+1,c
 11276  003D74  0E00               	movlw	0
 11277  003D76  6E2F               	movwf	___lldiv@quotient+2,c
 11278  003D78  0E00               	movlw	0
 11279  003D7A  6E30               	movwf	___lldiv@quotient+3,c
 11280  003D7C  5029               	movf	___lldiv@divisor,w,c
 11281  003D7E  102A               	iorwf	___lldiv@divisor+1,w,c
 11282  003D80  102B               	iorwf	___lldiv@divisor+2,w,c
 11283  003D82  102C               	iorwf	___lldiv@divisor+3,w,c
 11284  003D84  B4D8               	btfsc	status,2,c
 11285  003D86  D02A               	goto	l1272
 11286  003D88  0E01               	movlw	1
 11287  003D8A  6E31               	movwf	___lldiv@counter,c
 11288  003D8C  D006               	goto	l6360
 11289  003D8E                     l6358:
 11290  003D8E  90D8               	bcf	status,0,c
 11291  003D90  3629               	rlcf	___lldiv@divisor,f,c
 11292  003D92  362A               	rlcf	___lldiv@divisor+1,f,c
 11293  003D94  362B               	rlcf	___lldiv@divisor+2,f,c
 11294  003D96  362C               	rlcf	___lldiv@divisor+3,f,c
 11295  003D98  2A31               	incf	___lldiv@counter,f,c
 11296  003D9A                     l6360:
 11297  003D9A  AE2C               	btfss	___lldiv@divisor+3,7,c
 11298  003D9C  D7F8               	goto	l6358
 11299  003D9E                     l6362:
 11300  003D9E  90D8               	bcf	status,0,c
 11301  003DA0  362D               	rlcf	___lldiv@quotient,f,c
 11302  003DA2  362E               	rlcf	___lldiv@quotient+1,f,c
 11303  003DA4  362F               	rlcf	___lldiv@quotient+2,f,c
 11304  003DA6  3630               	rlcf	___lldiv@quotient+3,f,c
 11305  003DA8  5029               	movf	___lldiv@divisor,w,c
 11306  003DAA  5C25               	subwf	___lldiv@dividend,w,c
 11307  003DAC  502A               	movf	___lldiv@divisor+1,w,c
 11308  003DAE  5826               	subwfb	___lldiv@dividend+1,w,c
 11309  003DB0  502B               	movf	___lldiv@divisor+2,w,c
 11310  003DB2  5827               	subwfb	___lldiv@dividend+2,w,c
 11311  003DB4  502C               	movf	___lldiv@divisor+3,w,c
 11312  003DB6  5828               	subwfb	___lldiv@dividend+3,w,c
 11313  003DB8  A0D8               	btfss	status,0,c
 11314  003DBA  D009               	goto	l6370
 11315  003DBC  5029               	movf	___lldiv@divisor,w,c
 11316  003DBE  5E25               	subwf	___lldiv@dividend,f,c
 11317  003DC0  502A               	movf	___lldiv@divisor+1,w,c
 11318  003DC2  5A26               	subwfb	___lldiv@dividend+1,f,c
 11319  003DC4  502B               	movf	___lldiv@divisor+2,w,c
 11320  003DC6  5A27               	subwfb	___lldiv@dividend+2,f,c
 11321  003DC8  502C               	movf	___lldiv@divisor+3,w,c
 11322  003DCA  5A28               	subwfb	___lldiv@dividend+3,f,c
 11323  003DCC  802D               	bsf	___lldiv@quotient,0,c
 11324  003DCE                     l6370:
 11325  003DCE  90D8               	bcf	status,0,c
 11326  003DD0  322C               	rrcf	___lldiv@divisor+3,f,c
 11327  003DD2  322B               	rrcf	___lldiv@divisor+2,f,c
 11328  003DD4  322A               	rrcf	___lldiv@divisor+1,f,c
 11329  003DD6  3229               	rrcf	___lldiv@divisor,f,c
 11330  003DD8  2E31               	decfsz	___lldiv@counter,f,c
 11331  003DDA  D7E1               	goto	l6362
 11332  003DDC                     l1272:
 11333  003DDC  C02D  F025         	movff	___lldiv@quotient,?___lldiv
 11334  003DE0  C02E  F026         	movff	___lldiv@quotient+1,?___lldiv+1
 11335  003DE4  C02F  F027         	movff	___lldiv@quotient+2,?___lldiv+2
 11336  003DE8  C030  F028         	movff	___lldiv@quotient+3,?___lldiv+3
 11337  003DEC  0012               	return		;funcret
 11338  003DEE                     __end_of___lldiv:
 11339                           	opt stack 0
 11340                           tblptru	equ	0xFF8
 11341                           tblptrh	equ	0xFF7
 11342                           tblptrl	equ	0xFF6
 11343                           tablat	equ	0xFF5
 11344                           prodh	equ	0xFF4
 11345                           prodl	equ	0xFF3
 11346                           intcon	equ	0xFF2
 11347                           postinc0	equ	0xFEE
 11348                           wreg	equ	0xFE8
 11349                           postdec1	equ	0xFE5
 11350                           fsr1l	equ	0xFE1
 11351                           indf2	equ	0xFDF
 11352                           postinc2	equ	0xFDE
 11353                           postdec2	equ	0xFDD
 11354                           fsr2h	equ	0xFDA
 11355                           fsr2l	equ	0xFD9
 11356                           status	equ	0xFD8
 11357                           
 11358 ;; *************** function _getTime *****************
 11359 ;; Defined at:
 11360 ;;		line 23 in file "RTC.c"
 11361 ;; Parameters:    Size  Location     Type
 11362 ;;		None
 11363 ;; Auto vars:     Size  Location     Type
 11364 ;;  i               1   14[BANK0 ] unsigned char 
 11365 ;;  time           14    0[BANK0 ] int [7]
 11366 ;; Return value:  Size  Location     Type
 11367 ;;                  2   39[COMRAM] PTR int 
 11368 ;; Registers used:
 11369 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11370 ;; Tracked objects:
 11371 ;;		On entry : 0/0
 11372 ;;		On exit  : 0/0
 11373 ;;		Unchanged: 0/0
 11374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11375 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11376 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11377 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11378 ;;      Totals:         4      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11379 ;;Total ram usage:       19 bytes
 11380 ;; Hardware stack levels used:    1
 11381 ;; Hardware stack levels required when called:    5
 11382 ;; This function calls:
 11383 ;;		_I2C_Master_Read
 11384 ;;		_I2C_Master_Start
 11385 ;;		_I2C_Master_Stop
 11386 ;;		_I2C_Master_Write
 11387 ;; This function is called by:
 11388 ;;		_showDateTime
 11389 ;; This function uses a non-reentrant model
 11390 ;;
 11391                           
 11392                           	psect	text37
 11393  003BD8                     __ptext37:
 11394                           	opt stack 0
 11395  003BD8                     _getTime:
 11396                           	opt stack 23
 11397                           
 11398                           ;RTC.c: 24: int time[7];
 11399                           ;RTC.c: 26: (INTCONbits.GIE = 0);
 11400                           
 11401                           ;incstack = 0
 11402  003BD8  9EF2               	bcf	intcon,7,c	;volatile
 11403                           
 11404                           ;RTC.c: 29: I2C_Master_Start();
 11405  003BDA  EC17  F023         	call	_I2C_Master_Start	;wreg free
 11406                           
 11407                           ;RTC.c: 30: I2C_Master_Write(0b11010000);
 11408  003BDE  0E00               	movlw	0
 11409  003BE0  6E27               	movwf	I2C_Master_Write@d+1,c
 11410  003BE2  0ED0               	movlw	208
 11411  003BE4  6E26               	movwf	I2C_Master_Write@d,c
 11412  003BE6  ECFD  F022         	call	_I2C_Master_Write	;wreg free
 11413                           
 11414                           ;RTC.c: 31: I2C_Master_Write(0x00);
 11415  003BEA  0E00               	movlw	0
 11416  003BEC  6E27               	movwf	I2C_Master_Write@d+1,c
 11417  003BEE  0E00               	movlw	0
 11418  003BF0  6E26               	movwf	I2C_Master_Write@d,c
 11419  003BF2  ECFD  F022         	call	_I2C_Master_Write	;wreg free
 11420                           
 11421                           ;RTC.c: 32: I2C_Master_Stop();
 11422  003BF6  EC13  F023         	call	_I2C_Master_Stop	;wreg free
 11423                           
 11424                           ;RTC.c: 35: I2C_Master_Start();
 11425  003BFA  EC17  F023         	call	_I2C_Master_Start	;wreg free
 11426                           
 11427                           ;RTC.c: 36: I2C_Master_Write(0b11010001);
 11428  003BFE  0E00               	movlw	0
 11429  003C00  6E27               	movwf	I2C_Master_Write@d+1,c
 11430  003C02  0ED1               	movlw	209
 11431  003C04  6E26               	movwf	I2C_Master_Write@d,c
 11432  003C06  ECFD  F022         	call	_I2C_Master_Write	;wreg free
 11433                           
 11434                           ;RTC.c: 37: for(unsigned char i=0;i<6;i++){
 11435  003C0A  0E00               	movlw	0
 11436  003C0C  0100               	movlb	0	; () banked
 11437  003C0E  6F8E               	movwf	getTime@i& (0+255),b
 11438  003C10                     l7196:
 11439                           
 11440                           ; BSR set to: 0
 11441  003C10  0E05               	movlw	5
 11442  003C12  0100               	movlb	0	; () banked
 11443  003C14  658E               	cpfsgt	getTime@i& (0+255),b
 11444  003C16  D001               	goto	l7200
 11445  003C18  D015               	goto	l7206
 11446  003C1A                     l7200:
 11447                           
 11448                           ; BSR set to: 0
 11449                           ;RTC.c: 38: time[i] = I2C_Master_Read(1);
 11450  003C1A  0E01               	movlw	1
 11451  003C1C  EC54  F022         	call	_I2C_Master_Read
 11452  003C20  6E2A               	movwf	??_getTime& (0+255),c
 11453  003C22  6A2B               	clrf	(??_getTime+1)& (0+255),c
 11454  003C24  0100               	movlb	0	; () banked
 11455  003C26  518E               	movf	getTime@i& (0+255),w,b
 11456  003C28  0D02               	mullw	2
 11457  003C2A  0E80               	movlw	low getTime@time
 11458  003C2C  24F3               	addwf	prodl,w,c
 11459  003C2E  6ED9               	movwf	fsr2l,c
 11460  003C30  0E00               	movlw	high getTime@time
 11461  003C32  20F4               	addwfc	prodh,w,c
 11462  003C34  6EDA               	movwf	fsr2h,c
 11463  003C36  C02A  FFDE         	movff	??_getTime,postinc2
 11464  003C3A  C02B  FFDD         	movff	??_getTime+1,postdec2
 11465                           
 11466                           ; BSR set to: 0
 11467  003C3E  0100               	movlb	0	; () banked
 11468  003C40  2B8E               	incf	getTime@i& (0+255),f,b
 11469  003C42  D7E6               	goto	l7196
 11470  003C44                     l7206:
 11471                           
 11472                           ; BSR set to: 0
 11473                           ;RTC.c: 39: }
 11474                           ;RTC.c: 40: time[6] = I2C_Master_Read(0);
 11475  003C44  0E00               	movlw	0
 11476  003C46  EC54  F022         	call	_I2C_Master_Read
 11477  003C4A  6E2A               	movwf	??_getTime& (0+255),c
 11478  003C4C  502A               	movf	??_getTime,w,c
 11479  003C4E  0100               	movlb	0	; () banked
 11480  003C50  6F8C               	movwf	(getTime@time+12)& (0+255),b
 11481  003C52  6B8D               	clrf	(getTime@time+13)& (0+255),b
 11482                           
 11483                           ;RTC.c: 41: I2C_Master_Stop();
 11484  003C54  EC13  F023         	call	_I2C_Master_Stop	;wreg free
 11485                           
 11486                           ;RTC.c: 43: (INTCONbits.GIE = 1);
 11487  003C58  8EF2               	bsf	intcon,7,c	;volatile
 11488                           
 11489                           ;RTC.c: 45: return time;
 11490  003C5A  0E80               	movlw	low getTime@time
 11491  003C5C  6E28               	movwf	?_getTime,c
 11492  003C5E  0E00               	movlw	high getTime@time
 11493  003C60  6E29               	movwf	?_getTime+1,c
 11494  003C62  0012               	return	
 11495  003C64                     __end_of_getTime:
 11496                           	opt stack 0
 11497                           tblptru	equ	0xFF8
 11498                           tblptrh	equ	0xFF7
 11499                           tblptrl	equ	0xFF6
 11500                           tablat	equ	0xFF5
 11501                           prodh	equ	0xFF4
 11502                           prodl	equ	0xFF3
 11503                           intcon	equ	0xFF2
 11504                           postinc0	equ	0xFEE
 11505                           wreg	equ	0xFE8
 11506                           postdec1	equ	0xFE5
 11507                           fsr1l	equ	0xFE1
 11508                           indf2	equ	0xFDF
 11509                           postinc2	equ	0xFDE
 11510                           postdec2	equ	0xFDD
 11511                           fsr2h	equ	0xFDA
 11512                           fsr2l	equ	0xFD9
 11513                           status	equ	0xFD8
 11514                           
 11515 ;; *************** function _I2C_Master_Write *****************
 11516 ;; Defined at:
 11517 ;;		line 47 in file "I2C.c"
 11518 ;; Parameters:    Size  Location     Type
 11519 ;;  d               2   37[COMRAM] unsigned int 
 11520 ;; Auto vars:     Size  Location     Type
 11521 ;;		None
 11522 ;; Return value:  Size  Location     Type
 11523 ;;                  1    wreg      void 
 11524 ;; Registers used:
 11525 ;;		wreg, status,2, status,0, cstack
 11526 ;; Tracked objects:
 11527 ;;		On entry : 0/0
 11528 ;;		On exit  : 0/0
 11529 ;;		Unchanged: 0/0
 11530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11531 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11534 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11535 ;;Total ram usage:        2 bytes
 11536 ;; Hardware stack levels used:    1
 11537 ;; Hardware stack levels required when called:    4
 11538 ;; This function calls:
 11539 ;;		_I2C_Master_Wait
 11540 ;; This function is called by:
 11541 ;;		_getTime
 11542 ;;		_testFrequency
 11543 ;;		_setTime
 11544 ;; This function uses a non-reentrant model
 11545 ;;
 11546                           
 11547                           	psect	text38
 11548  0045FA                     __ptext38:
 11549                           	opt stack 0
 11550  0045FA                     _I2C_Master_Write:
 11551                           	opt stack 23
 11552                           
 11553                           ;I2C.c: 49: I2C_Master_Wait();
 11554                           
 11555                           ;incstack = 0
 11556  0045FA  ECE7  F022         	call	_I2C_Master_Wait	;wreg free
 11557                           
 11558                           ;I2C.c: 50: SSPBUF = d;
 11559  0045FE  C026  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 11560  004602  0012               	return		;funcret
 11561  004604                     __end_of_I2C_Master_Write:
 11562                           	opt stack 0
 11563                           tblptru	equ	0xFF8
 11564                           tblptrh	equ	0xFF7
 11565                           tblptrl	equ	0xFF6
 11566                           tablat	equ	0xFF5
 11567                           prodh	equ	0xFF4
 11568                           prodl	equ	0xFF3
 11569                           intcon	equ	0xFF2
 11570                           postinc0	equ	0xFEE
 11571                           wreg	equ	0xFE8
 11572                           postdec1	equ	0xFE5
 11573                           fsr1l	equ	0xFE1
 11574                           indf2	equ	0xFDF
 11575                           postinc2	equ	0xFDE
 11576                           postdec2	equ	0xFDD
 11577                           fsr2h	equ	0xFDA
 11578                           fsr2l	equ	0xFD9
 11579                           status	equ	0xFD8
 11580                           
 11581 ;; *************** function _I2C_Master_Stop *****************
 11582 ;; Defined at:
 11583 ;;		line 41 in file "I2C.c"
 11584 ;; Parameters:    Size  Location     Type
 11585 ;;		None
 11586 ;; Auto vars:     Size  Location     Type
 11587 ;;		None
 11588 ;; Return value:  Size  Location     Type
 11589 ;;                  2  445[None  ] int 
 11590 ;; Registers used:
 11591 ;;		wreg, status,2, status,0, cstack
 11592 ;; Tracked objects:
 11593 ;;		On entry : 0/0
 11594 ;;		On exit  : 0/0
 11595 ;;		Unchanged: 0/0
 11596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11600 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11601 ;;Total ram usage:        0 bytes
 11602 ;; Hardware stack levels used:    1
 11603 ;; Hardware stack levels required when called:    4
 11604 ;; This function calls:
 11605 ;;		_I2C_Master_Wait
 11606 ;; This function is called by:
 11607 ;;		_getTime
 11608 ;;		_testFrequency
 11609 ;;		_setTime
 11610 ;; This function uses a non-reentrant model
 11611 ;;
 11612                           
 11613                           	psect	text39
 11614  004626                     __ptext39:
 11615                           	opt stack 0
 11616  004626                     _I2C_Master_Stop:
 11617                           	opt stack 23
 11618                           
 11619                           ;I2C.c: 43: I2C_Master_Wait();
 11620                           
 11621                           ;incstack = 0
 11622  004626  ECE7  F022         	call	_I2C_Master_Wait	;wreg free
 11623                           
 11624                           ;I2C.c: 44: PEN = 1;
 11625  00462A  84C5               	bsf	4037,2,c	;volatile
 11626  00462C  0012               	return		;funcret
 11627  00462E                     __end_of_I2C_Master_Stop:
 11628                           	opt stack 0
 11629                           tblptru	equ	0xFF8
 11630                           tblptrh	equ	0xFF7
 11631                           tblptrl	equ	0xFF6
 11632                           tablat	equ	0xFF5
 11633                           prodh	equ	0xFF4
 11634                           prodl	equ	0xFF3
 11635                           intcon	equ	0xFF2
 11636                           postinc0	equ	0xFEE
 11637                           wreg	equ	0xFE8
 11638                           postdec1	equ	0xFE5
 11639                           fsr1l	equ	0xFE1
 11640                           indf2	equ	0xFDF
 11641                           postinc2	equ	0xFDE
 11642                           postdec2	equ	0xFDD
 11643                           fsr2h	equ	0xFDA
 11644                           fsr2l	equ	0xFD9
 11645                           status	equ	0xFD8
 11646                           
 11647 ;; *************** function _I2C_Master_Start *****************
 11648 ;; Defined at:
 11649 ;;		line 29 in file "I2C.c"
 11650 ;; Parameters:    Size  Location     Type
 11651 ;;		None
 11652 ;; Auto vars:     Size  Location     Type
 11653 ;;		None
 11654 ;; Return value:  Size  Location     Type
 11655 ;;                  2  441[None  ] int 
 11656 ;; Registers used:
 11657 ;;		wreg, status,2, status,0, cstack
 11658 ;; Tracked objects:
 11659 ;;		On entry : 0/0
 11660 ;;		On exit  : 0/0
 11661 ;;		Unchanged: 0/0
 11662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11667 ;;Total ram usage:        0 bytes
 11668 ;; Hardware stack levels used:    1
 11669 ;; Hardware stack levels required when called:    4
 11670 ;; This function calls:
 11671 ;;		_I2C_Master_Wait
 11672 ;; This function is called by:
 11673 ;;		_getTime
 11674 ;;		_testFrequency
 11675 ;;		_setTime
 11676 ;; This function uses a non-reentrant model
 11677 ;;
 11678                           
 11679                           	psect	text40
 11680  00462E                     __ptext40:
 11681                           	opt stack 0
 11682  00462E                     _I2C_Master_Start:
 11683                           	opt stack 23
 11684                           
 11685                           ;I2C.c: 31: I2C_Master_Wait();
 11686                           
 11687                           ;incstack = 0
 11688  00462E  ECE7  F022         	call	_I2C_Master_Wait	;wreg free
 11689                           
 11690                           ;I2C.c: 32: SEN = 1;
 11691  004632  80C5               	bsf	4037,0,c	;volatile
 11692  004634  0012               	return		;funcret
 11693  004636                     __end_of_I2C_Master_Start:
 11694                           	opt stack 0
 11695                           tblptru	equ	0xFF8
 11696                           tblptrh	equ	0xFF7
 11697                           tblptrl	equ	0xFF6
 11698                           tablat	equ	0xFF5
 11699                           prodh	equ	0xFF4
 11700                           prodl	equ	0xFF3
 11701                           intcon	equ	0xFF2
 11702                           postinc0	equ	0xFEE
 11703                           wreg	equ	0xFE8
 11704                           postdec1	equ	0xFE5
 11705                           fsr1l	equ	0xFE1
 11706                           indf2	equ	0xFDF
 11707                           postinc2	equ	0xFDE
 11708                           postdec2	equ	0xFDD
 11709                           fsr2h	equ	0xFDA
 11710                           fsr2l	equ	0xFD9
 11711                           status	equ	0xFD8
 11712                           
 11713 ;; *************** function _I2C_Master_Read *****************
 11714 ;; Defined at:
 11715 ;;		line 53 in file "I2C.c"
 11716 ;; Parameters:    Size  Location     Type
 11717 ;;  a               1    wreg     unsigned char 
 11718 ;; Auto vars:     Size  Location     Type
 11719 ;;  a               1   37[COMRAM] unsigned char 
 11720 ;;  temp            1   38[COMRAM] unsigned char 
 11721 ;; Return value:  Size  Location     Type
 11722 ;;                  1    wreg      unsigned char 
 11723 ;; Registers used:
 11724 ;;		wreg, status,2, status,0, cstack
 11725 ;; Tracked objects:
 11726 ;;		On entry : 0/0
 11727 ;;		On exit  : 0/0
 11728 ;;		Unchanged: 0/0
 11729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11731 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11733 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11734 ;;Total ram usage:        2 bytes
 11735 ;; Hardware stack levels used:    1
 11736 ;; Hardware stack levels required when called:    4
 11737 ;; This function calls:
 11738 ;;		_I2C_Master_Wait
 11739 ;; This function is called by:
 11740 ;;		_getTime
 11741 ;;		_testFrequency
 11742 ;; This function uses a non-reentrant model
 11743 ;;
 11744                           
 11745                           	psect	text41
 11746  0044A8                     __ptext41:
 11747                           	opt stack 0
 11748  0044A8                     _I2C_Master_Read:
 11749                           	opt stack 23
 11750                           
 11751                           ;incstack = 0
 11752                           ;I2C_Master_Read@a stored from wreg
 11753  0044A8  6E26               	movwf	I2C_Master_Read@a,c
 11754                           
 11755                           ;I2C.c: 55: unsigned char temp;
 11756                           ;I2C.c: 56: I2C_Master_Wait();
 11757  0044AA  ECE7  F022         	call	_I2C_Master_Wait	;wreg free
 11758                           
 11759                           ;I2C.c: 57: RCEN = 1;
 11760  0044AE  86C5               	bsf	4037,3,c	;volatile
 11761                           
 11762                           ;I2C.c: 58: I2C_Master_Wait();
 11763  0044B0  ECE7  F022         	call	_I2C_Master_Wait	;wreg free
 11764                           
 11765                           ;I2C.c: 59: temp = SSPBUF;
 11766  0044B4  CFC9 F027          	movff	4041,I2C_Master_Read@temp	;volatile
 11767                           
 11768                           ;I2C.c: 60: I2C_Master_Wait();
 11769  0044B8  ECE7  F022         	call	_I2C_Master_Wait	;wreg free
 11770                           
 11771                           ;I2C.c: 61: ACKDT = (a)?0:1;
 11772  0044BC  5026               	movf	I2C_Master_Read@a,w,c
 11773  0044BE  A4D8               	btfss	status,2,c
 11774  0044C0  D002               	goto	u6380
 11775  0044C2  8AC5               	bsf	4037,5,c	;volatile
 11776  0044C4  D001               	goto	l6410
 11777  0044C6                     u6380:
 11778  0044C6  9AC5               	bcf	4037,5,c	;volatile
 11779  0044C8                     l6410:
 11780                           
 11781                           ;I2C.c: 62: ACKEN = 1;
 11782  0044C8  88C5               	bsf	4037,4,c	;volatile
 11783                           
 11784                           ;I2C.c: 63: return temp;
 11785  0044CA  5027               	movf	I2C_Master_Read@temp,w,c
 11786  0044CC  0012               	return	
 11787  0044CE                     __end_of_I2C_Master_Read:
 11788                           	opt stack 0
 11789                           tblptru	equ	0xFF8
 11790                           tblptrh	equ	0xFF7
 11791                           tblptrl	equ	0xFF6
 11792                           tablat	equ	0xFF5
 11793                           prodh	equ	0xFF4
 11794                           prodl	equ	0xFF3
 11795                           intcon	equ	0xFF2
 11796                           postinc0	equ	0xFEE
 11797                           wreg	equ	0xFE8
 11798                           postdec1	equ	0xFE5
 11799                           fsr1l	equ	0xFE1
 11800                           indf2	equ	0xFDF
 11801                           postinc2	equ	0xFDE
 11802                           postdec2	equ	0xFDD
 11803                           fsr2h	equ	0xFDA
 11804                           fsr2l	equ	0xFD9
 11805                           status	equ	0xFD8
 11806                           
 11807 ;; *************** function _I2C_Master_Wait *****************
 11808 ;; Defined at:
 11809 ;;		line 24 in file "I2C.c"
 11810 ;; Parameters:    Size  Location     Type
 11811 ;;		None
 11812 ;; Auto vars:     Size  Location     Type
 11813 ;;		None
 11814 ;; Return value:  Size  Location     Type
 11815 ;;                  1    wreg      void 
 11816 ;; Registers used:
 11817 ;;		wreg, status,2, status,0
 11818 ;; Tracked objects:
 11819 ;;		On entry : 0/0
 11820 ;;		On exit  : 0/0
 11821 ;;		Unchanged: 0/0
 11822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11825 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11826 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11827 ;;Total ram usage:        1 bytes
 11828 ;; Hardware stack levels used:    1
 11829 ;; Hardware stack levels required when called:    3
 11830 ;; This function calls:
 11831 ;;		Nothing
 11832 ;; This function is called by:
 11833 ;;		_I2C_Master_Start
 11834 ;;		_I2C_Master_Stop
 11835 ;;		_I2C_Master_Write
 11836 ;;		_I2C_Master_Read
 11837 ;;		_I2C_Master_RepeatedStart
 11838 ;; This function uses a non-reentrant model
 11839 ;;
 11840                           
 11841                           	psect	text42
 11842  0045CE                     __ptext42:
 11843                           	opt stack 0
 11844  0045CE                     _I2C_Master_Wait:
 11845                           	opt stack 23
 11846  0045CE                     l516:
 11847  0045CE  B4C7               	btfsc	4039,2,c	;volatile
 11848  0045D0  D7FE               	goto	l516
 11849  0045D2  CFC5 F025          	movff	4037,??_I2C_Master_Wait	;volatile
 11850  0045D6  0E1F               	movlw	31
 11851  0045D8  1625               	andwf	??_I2C_Master_Wait,f,c
 11852  0045DA  B4D8               	btfsc	status,2,c
 11853  0045DC  0012               	return	
 11854  0045DE  D7F7               	goto	l516
 11855  0045E0                     __end_of_I2C_Master_Wait:
 11856                           	opt stack 0
 11857                           tblptru	equ	0xFF8
 11858                           tblptrh	equ	0xFF7
 11859                           tblptrl	equ	0xFF6
 11860                           tablat	equ	0xFF5
 11861                           prodh	equ	0xFF4
 11862                           prodl	equ	0xFF3
 11863                           intcon	equ	0xFF2
 11864                           postinc0	equ	0xFEE
 11865                           wreg	equ	0xFE8
 11866                           postdec1	equ	0xFE5
 11867                           fsr1l	equ	0xFE1
 11868                           indf2	equ	0xFDF
 11869                           postinc2	equ	0xFDE
 11870                           postdec2	equ	0xFDD
 11871                           fsr2h	equ	0xFDA
 11872                           fsr2l	equ	0xFD9
 11873                           status	equ	0xFD8
 11874                           
 11875 ;; *************** function _readPastRun *****************
 11876 ;; Defined at:
 11877 ;;		line 23 in file "eeprom.c"
 11878 ;; Parameters:    Size  Location     Type
 11879 ;;  run             2    4[BANK0 ] int 
 11880 ;; Auto vars:     Size  Location     Type
 11881 ;;  i               2   20[BANK0 ] int 
 11882 ;;  data           14    6[BANK0 ] int [7]
 11883 ;; Return value:  Size  Location     Type
 11884 ;;                  2    4[BANK0 ] PTR int 
 11885 ;; Registers used:
 11886 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11887 ;; Tracked objects:
 11888 ;;		On entry : 0/0
 11889 ;;		On exit  : 0/0
 11890 ;;		Unchanged: 0/0
 11891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11892 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11893 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11895 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11896 ;;Total ram usage:       18 bytes
 11897 ;; Hardware stack levels used:    1
 11898 ;; Hardware stack levels required when called:    4
 11899 ;; This function calls:
 11900 ;;		___wmul
 11901 ;;		_eepromRead
 11902 ;; This function is called by:
 11903 ;;		_showInterface
 11904 ;; This function uses a non-reentrant model
 11905 ;;
 11906                           
 11907                           	psect	text43
 11908  003AB0                     __ptext43:
 11909                           	opt stack 0
 11910  003AB0                     _readPastRun:
 11911                           	opt stack 25
 11912                           
 11913                           ;eeprom.c: 24: int data[7];
 11914                           ;eeprom.c: 25: for(int i = 0; i < 7; i++){
 11915                           
 11916                           ;incstack = 0
 11917  003AB0  0E00               	movlw	0
 11918  003AB2  0100               	movlb	0	; () banked
 11919  003AB4  6F95               	movwf	(readPastRun@i+1)& (0+255),b
 11920  003AB6  0E00               	movlw	0
 11921  003AB8  6F94               	movwf	readPastRun@i& (0+255),b
 11922  003ABA                     l7408:
 11923                           
 11924                           ; BSR set to: 0
 11925  003ABA  0100               	movlb	0	; () banked
 11926  003ABC  BF95               	btfsc	(readPastRun@i+1)& (0+255),7,b
 11927  003ABE  D008               	goto	l7412
 11928  003AC0  0100               	movlb	0	; () banked
 11929  003AC2  5195               	movf	(readPastRun@i+1)& (0+255),w,b
 11930  003AC4  E13A               	bnz	l7418
 11931  003AC6  0E07               	movlw	7
 11932  003AC8  0100               	movlb	0	; () banked
 11933  003ACA  5D94               	subwf	readPastRun@i& (0+255),w,b
 11934  003ACC  B0D8               	btfsc	status,0,c
 11935  003ACE  D035               	goto	l7418
 11936  003AD0                     l7412:
 11937                           
 11938                           ; BSR set to: 0
 11939                           ;eeprom.c: 26: data[i] = eepromRead((run*7+1) + i);
 11940  003AD0  C084  F033         	movff	readPastRun@run,___wmul@multiplier
 11941  003AD4  C085  F034         	movff	readPastRun@run+1,___wmul@multiplier+1
 11942  003AD8  0E00               	movlw	0
 11943  003ADA  6E36               	movwf	___wmul@multiplicand+1,c
 11944  003ADC  0E07               	movlw	7
 11945  003ADE  6E35               	movwf	___wmul@multiplicand,c
 11946  003AE0  EC67  F022         	call	___wmul	;wreg free
 11947  003AE4  0100               	movlb	0	; () banked
 11948  003AE6  5194               	movf	readPastRun@i& (0+255),w,b
 11949  003AE8  2633               	addwf	?___wmul,f,c
 11950  003AEA  0100               	movlb	0	; () banked
 11951  003AEC  5195               	movf	(readPastRun@i+1)& (0+255),w,b
 11952  003AEE  2234               	addwfc	?___wmul+1,f,c
 11953  003AF0  0E01               	movlw	1
 11954  003AF2  2633               	addwf	?___wmul,f,c
 11955  003AF4  0E00               	movlw	0
 11956  003AF6  2234               	addwfc	?___wmul+1,f,c
 11957  003AF8  C033  F080         	movff	?___wmul,eepromRead@address
 11958  003AFC  C034  F081         	movff	?___wmul+1,eepromRead@address+1
 11959  003B00  0100               	movlb	0	; () banked
 11960  003B02  0E00               	movlw	0
 11961  003B04  BF81               	btfsc	(eepromRead@address+1)& (0+255),7,b
 11962  003B06  0EFF               	movlw	-1
 11963  003B08  6F82               	movwf	(eepromRead@address+2)& (0+255),b
 11964  003B0A  6F83               	movwf	(eepromRead@address+3)& (0+255),b
 11965  003B0C  ECCD  F022         	call	_eepromRead	;wreg free
 11966  003B10  90D8               	bcf	status,0,c
 11967  003B12  0100               	movlb	0	; () banked
 11968  003B14  3594               	rlcf	readPastRun@i& (0+255),w,b
 11969  003B16  6ED9               	movwf	fsr2l,c
 11970  003B18  0100               	movlb	0	; () banked
 11971  003B1A  3595               	rlcf	(readPastRun@i+1)& (0+255),w,b
 11972  003B1C  6EDA               	movwf	fsr2h,c
 11973  003B1E  0E86               	movlw	low readPastRun@data
 11974  003B20  26D9               	addwf	fsr2l,f,c
 11975  003B22  0E00               	movlw	high readPastRun@data
 11976  003B24  22DA               	addwfc	fsr2h,f,c
 11977  003B26  0100               	movlb	0	; () banked
 11978  003B28  C080  FFDE         	movff	?_eepromRead,postinc2
 11979  003B2C  0100               	movlb	0	; () banked
 11980  003B2E  C081  FFDD         	movff	?_eepromRead+1,postdec2
 11981                           
 11982                           ; BSR set to: 0
 11983  003B32  0100               	movlb	0	; () banked
 11984  003B34  4B94               	infsnz	readPastRun@i& (0+255),f,b
 11985  003B36  2B95               	incf	(readPastRun@i+1)& (0+255),f,b
 11986  003B38  D7C0               	goto	l7408
 11987  003B3A                     l7418:
 11988                           
 11989                           ; BSR set to: 0
 11990                           ;eeprom.c: 27: }
 11991                           ;eeprom.c: 28: return data;
 11992  003B3A  0E86               	movlw	low readPastRun@data
 11993  003B3C  0100               	movlb	0	; () banked
 11994  003B3E  6F84               	movwf	?_readPastRun& (0+255),b
 11995  003B40  0E00               	movlw	high readPastRun@data
 11996  003B42  0100               	movlb	0	; () banked
 11997  003B44  6F85               	movwf	(?_readPastRun+1)& (0+255),b
 11998  003B46  0012               	return	
 11999  003B48                     __end_of_readPastRun:
 12000                           	opt stack 0
 12001                           tblptru	equ	0xFF8
 12002                           tblptrh	equ	0xFF7
 12003                           tblptrl	equ	0xFF6
 12004                           tablat	equ	0xFF5
 12005                           prodh	equ	0xFF4
 12006                           prodl	equ	0xFF3
 12007                           intcon	equ	0xFF2
 12008                           postinc0	equ	0xFEE
 12009                           wreg	equ	0xFE8
 12010                           postdec1	equ	0xFE5
 12011                           fsr1l	equ	0xFE1
 12012                           indf2	equ	0xFDF
 12013                           postinc2	equ	0xFDE
 12014                           postdec2	equ	0xFDD
 12015                           fsr2h	equ	0xFDA
 12016                           fsr2l	equ	0xFD9
 12017                           status	equ	0xFD8
 12018                           
 12019 ;; *************** function _saveNewRun *****************
 12020 ;; Defined at:
 12021 ;;		line 31 in file "eeprom.c"
 12022 ;; Parameters:    Size  Location     Type
 12023 ;;  data            2   12[BANK0 ] PTR int 
 12024 ;;		 -> main@run(14), 
 12025 ;; Auto vars:     Size  Location     Type
 12026 ;;  i               2   16[BANK0 ] int 
 12027 ;;  n               2   14[BANK0 ] int 
 12028 ;; Return value:  Size  Location     Type
 12029 ;;                  1    wreg      void 
 12030 ;; Registers used:
 12031 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12032 ;; Tracked objects:
 12033 ;;		On entry : 0/0
 12034 ;;		On exit  : 0/0
 12035 ;;		Unchanged: 0/0
 12036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12037 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12038 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12040 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12041 ;;Total ram usage:        6 bytes
 12042 ;; Hardware stack levels used:    1
 12043 ;; Hardware stack levels required when called:    4
 12044 ;; This function calls:
 12045 ;;		___wmul
 12046 ;;		_eepromRead
 12047 ;;		_eepromWrite
 12048 ;; This function is called by:
 12049 ;;		_main
 12050 ;; This function uses a non-reentrant model
 12051 ;;
 12052                           
 12053                           	psect	text44
 12054  003454                     __ptext44:
 12055                           	opt stack 0
 12056  003454                     _saveNewRun:
 12057                           	opt stack 26
 12058                           
 12059                           ;eeprom.c: 33: eepromWrite(eepromRead(0)+1,0);
 12060                           
 12061                           ; BSR set to: 0
 12062                           ;incstack = 0
 12063  003454  0E00               	movlw	0
 12064  003456  0100               	movlb	0	; () banked
 12065  003458  6F80               	movwf	eepromRead@address& (0+255),b
 12066  00345A  0E00               	movlw	0
 12067  00345C  6F81               	movwf	(eepromRead@address+1)& (0+255),b
 12068  00345E  0E00               	movlw	0
 12069  003460  6F82               	movwf	(eepromRead@address+2)& (0+255),b
 12070  003462  0E00               	movlw	0
 12071  003464  6F83               	movwf	(eepromRead@address+3)& (0+255),b
 12072  003466  ECCD  F022         	call	_eepromRead	;wreg free
 12073  00346A  0E01               	movlw	1
 12074  00346C  0100               	movlb	0	; () banked
 12075  00346E  2580               	addwf	?_eepromRead& (0+255),w,b
 12076  003470  0100               	movlb	0	; () banked
 12077  003472  6F84               	movwf	eepromWrite@data& (0+255),b
 12078  003474  0E00               	movlw	0
 12079  003476  0100               	movlb	0	; () banked
 12080  003478  2181               	addwfc	(?_eepromRead+1)& (0+255),w,b
 12081  00347A  0100               	movlb	0	; () banked
 12082  00347C  6F85               	movwf	(eepromWrite@data+1)& (0+255),b
 12083  00347E  0E00               	movlw	0
 12084  003480  0100               	movlb	0	; () banked
 12085  003482  6F86               	movwf	eepromWrite@address& (0+255),b
 12086  003484  0E00               	movlw	0
 12087  003486  6F87               	movwf	(eepromWrite@address+1)& (0+255),b
 12088  003488  0E00               	movlw	0
 12089  00348A  6F88               	movwf	(eepromWrite@address+2)& (0+255),b
 12090  00348C  0E00               	movlw	0
 12091  00348E  6F89               	movwf	(eepromWrite@address+3)& (0+255),b
 12092  003490  ECEF  F020         	call	_eepromWrite	;wreg free
 12093                           
 12094                           ;eeprom.c: 34: int n = eepromRead(0);
 12095  003494  0E00               	movlw	0
 12096  003496  0100               	movlb	0	; () banked
 12097  003498  6F80               	movwf	eepromRead@address& (0+255),b
 12098  00349A  0E00               	movlw	0
 12099  00349C  6F81               	movwf	(eepromRead@address+1)& (0+255),b
 12100  00349E  0E00               	movlw	0
 12101  0034A0  6F82               	movwf	(eepromRead@address+2)& (0+255),b
 12102  0034A2  0E00               	movlw	0
 12103  0034A4  6F83               	movwf	(eepromRead@address+3)& (0+255),b
 12104  0034A6  ECCD  F022         	call	_eepromRead	;wreg free
 12105  0034AA  C080  F08E         	movff	?_eepromRead,saveNewRun@n
 12106  0034AE  C081  F08F         	movff	?_eepromRead+1,saveNewRun@n+1
 12107                           
 12108                           ;eeprom.c: 36: for(int i = 0; i < 7; i++){
 12109  0034B2  0E00               	movlw	0
 12110  0034B4  0100               	movlb	0	; () banked
 12111  0034B6  6F91               	movwf	(saveNewRun@i+1)& (0+255),b
 12112  0034B8  0E00               	movlw	0
 12113  0034BA  6F90               	movwf	saveNewRun@i& (0+255),b
 12114  0034BC                     l7752:
 12115                           
 12116                           ; BSR set to: 0
 12117  0034BC  0100               	movlb	0	; () banked
 12118  0034BE  BF91               	btfsc	(saveNewRun@i+1)& (0+255),7,b
 12119  0034C0  D008               	goto	l7756
 12120  0034C2  0100               	movlb	0	; () banked
 12121  0034C4  5191               	movf	(saveNewRun@i+1)& (0+255),w,b
 12122  0034C6  E13A               	bnz	l397
 12123  0034C8  0E07               	movlw	7
 12124  0034CA  0100               	movlb	0	; () banked
 12125  0034CC  5D90               	subwf	saveNewRun@i& (0+255),w,b
 12126  0034CE  B0D8               	btfsc	status,0,c
 12127  0034D0  0012               	return	
 12128  0034D2                     l7756:
 12129                           
 12130                           ; BSR set to: 0
 12131                           ;eeprom.c: 37: eepromWrite(data[i], (n*7+1) + i);
 12132  0034D2  90D8               	bcf	status,0,c
 12133  0034D4  0100               	movlb	0	; () banked
 12134  0034D6  3590               	rlcf	saveNewRun@i& (0+255),w,b
 12135  0034D8  6ED9               	movwf	fsr2l,c
 12136  0034DA  0100               	movlb	0	; () banked
 12137  0034DC  3591               	rlcf	(saveNewRun@i+1)& (0+255),w,b
 12138  0034DE  6EDA               	movwf	fsr2h,c
 12139  0034E0  0100               	movlb	0	; () banked
 12140  0034E2  518C               	movf	saveNewRun@data& (0+255),w,b
 12141  0034E4  26D9               	addwf	fsr2l,f,c
 12142  0034E6  0100               	movlb	0	; () banked
 12143  0034E8  518D               	movf	(saveNewRun@data+1)& (0+255),w,b
 12144  0034EA  22DA               	addwfc	fsr2h,f,c
 12145  0034EC  CFDE F084          	movff	postinc2,eepromWrite@data
 12146  0034F0  CFDD F085          	movff	postdec2,eepromWrite@data+1
 12147  0034F4  C08E  F033         	movff	saveNewRun@n,___wmul@multiplier
 12148  0034F8  C08F  F034         	movff	saveNewRun@n+1,___wmul@multiplier+1
 12149  0034FC  0E00               	movlw	0
 12150  0034FE  6E36               	movwf	___wmul@multiplicand+1,c
 12151  003500  0E07               	movlw	7
 12152  003502  6E35               	movwf	___wmul@multiplicand,c
 12153  003504  EC67  F022         	call	___wmul	;wreg free
 12154  003508  0100               	movlb	0	; () banked
 12155  00350A  5190               	movf	saveNewRun@i& (0+255),w,b
 12156  00350C  2633               	addwf	?___wmul,f,c
 12157  00350E  0100               	movlb	0	; () banked
 12158  003510  5191               	movf	(saveNewRun@i+1)& (0+255),w,b
 12159  003512  2234               	addwfc	?___wmul+1,f,c
 12160  003514  0E01               	movlw	1
 12161  003516  2633               	addwf	?___wmul,f,c
 12162  003518  0E00               	movlw	0
 12163  00351A  2234               	addwfc	?___wmul+1,f,c
 12164  00351C  C033  F086         	movff	?___wmul,eepromWrite@address
 12165  003520  C034  F087         	movff	?___wmul+1,eepromWrite@address+1
 12166  003524  0100               	movlb	0	; () banked
 12167  003526  0E00               	movlw	0
 12168  003528  BF87               	btfsc	(eepromWrite@address+1)& (0+255),7,b
 12169  00352A  0EFF               	movlw	-1
 12170  00352C  6F88               	movwf	(eepromWrite@address+2)& (0+255),b
 12171  00352E  6F89               	movwf	(eepromWrite@address+3)& (0+255),b
 12172  003530  ECEF  F020         	call	_eepromWrite	;wreg free
 12173  003534  0100               	movlb	0	; () banked
 12174  003536  4B90               	infsnz	saveNewRun@i& (0+255),f,b
 12175  003538  2B91               	incf	(saveNewRun@i+1)& (0+255),f,b
 12176  00353A  D7C0               	goto	l7752
 12177  00353C                     l397:
 12178                           
 12179                           ; BSR set to: 0
 12180  00353C  0012               	return		;funcret
 12181  00353E                     __end_of_saveNewRun:
 12182                           	opt stack 0
 12183                           tblptru	equ	0xFF8
 12184                           tblptrh	equ	0xFF7
 12185                           tblptrl	equ	0xFF6
 12186                           tablat	equ	0xFF5
 12187                           prodh	equ	0xFF4
 12188                           prodl	equ	0xFF3
 12189                           intcon	equ	0xFF2
 12190                           postinc0	equ	0xFEE
 12191                           wreg	equ	0xFE8
 12192                           postdec1	equ	0xFE5
 12193                           fsr1l	equ	0xFE1
 12194                           indf2	equ	0xFDF
 12195                           postinc2	equ	0xFDE
 12196                           postdec2	equ	0xFDD
 12197                           fsr2h	equ	0xFDA
 12198                           fsr2l	equ	0xFD9
 12199                           status	equ	0xFD8
 12200                           
 12201 ;; *************** function _eepromWrite *****************
 12202 ;; Defined at:
 12203 ;;		line 41 in file "eeprom.c"
 12204 ;; Parameters:    Size  Location     Type
 12205 ;;  data            2    4[BANK0 ] int 
 12206 ;;  address         4    6[BANK0 ] long 
 12207 ;; Auto vars:     Size  Location     Type
 12208 ;;  ien             2   10[BANK0 ] int 
 12209 ;; Return value:  Size  Location     Type
 12210 ;;                  1    wreg      void 
 12211 ;; Registers used:
 12212 ;;		wreg, status,2, status,0
 12213 ;; Tracked objects:
 12214 ;;		On entry : 0/0
 12215 ;;		On exit  : 0/0
 12216 ;;		Unchanged: 0/0
 12217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12218 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12219 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12220 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12221 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12222 ;;Total ram usage:        9 bytes
 12223 ;; Hardware stack levels used:    1
 12224 ;; Hardware stack levels required when called:    3
 12225 ;; This function calls:
 12226 ;;		Nothing
 12227 ;; This function is called by:
 12228 ;;		_saveNewRun
 12229 ;; This function uses a non-reentrant model
 12230 ;;
 12231                           
 12232                           	psect	text45
 12233  0041DE                     __ptext45:
 12234                           	opt stack 0
 12235  0041DE                     _eepromWrite:
 12236                           	opt stack 26
 12237  0041DE                     l400:
 12238  0041DE  B2A6               	btfsc	4006,1,c	;volatile
 12239  0041E0  D7FE               	goto	l400
 12240                           
 12241                           ;eeprom.c: 45: int ien = INTCONbits.GIE;
 12242  0041E2  AEF2               	btfss	intcon,7,c	;volatile
 12243  0041E4  D003               	goto	u8000
 12244  0041E6  6A39               	clrf	??_eepromWrite& (0+255),c
 12245  0041E8  2A39               	incf	??_eepromWrite& (0+255),f,c
 12246  0041EA  D001               	goto	u8008
 12247  0041EC                     u8000:
 12248  0041EC  6A39               	clrf	??_eepromWrite& (0+255),c
 12249  0041EE                     u8008:
 12250  0041EE  5039               	movf	??_eepromWrite,w,c
 12251  0041F0  0100               	movlb	0	; () banked
 12252  0041F2  6F8A               	movwf	eepromWrite@ien& (0+255),b
 12253  0041F4  6B8B               	clrf	(eepromWrite@ien+1)& (0+255),b
 12254                           
 12255                           ; BSR set to: 0
 12256                           ;eeprom.c: 46: (INTCONbits.GIE = 0);
 12257  0041F6  9EF2               	bcf	intcon,7,c	;volatile
 12258                           
 12259                           ; BSR set to: 0
 12260                           ;eeprom.c: 47: EEADR = address;
 12261  0041F8  C086  FFA9         	movff	eepromWrite@address,4009	;volatile
 12262                           
 12263                           ; BSR set to: 0
 12264                           ;eeprom.c: 48: EEADRH = (address>>8) & 0b11;
 12265  0041FC  0100               	movlb	0	; () banked
 12266  0041FE  5187               	movf	(eepromWrite@address+1)& (0+255),w,b
 12267  004200  0B03               	andlw	3
 12268  004202  6EAA               	movwf	4010,c	;volatile
 12269                           
 12270                           ; BSR set to: 0
 12271                           ;eeprom.c: 49: EEDATA = data;
 12272  004204  C084  FFA8         	movff	eepromWrite@data,4008	;volatile
 12273                           
 12274                           ; BSR set to: 0
 12275                           ;eeprom.c: 50: EECON1 = 0b100;
 12276  004208  0E04               	movlw	4
 12277  00420A  6EA6               	movwf	4006,c	;volatile
 12278                           
 12279                           ; BSR set to: 0
 12280                           ;eeprom.c: 52: EECON2 = 0x55;
 12281  00420C  0E55               	movlw	85
 12282  00420E  6EA7               	movwf	4007,c	;volatile
 12283                           
 12284                           ; BSR set to: 0
 12285                           ;eeprom.c: 53: EECON2 = 0xaa;
 12286  004210  0EAA               	movlw	170
 12287  004212  6EA7               	movwf	4007,c	;volatile
 12288                           
 12289                           ; BSR set to: 0
 12290                           ;eeprom.c: 57: EECON1 |= 0b10;
 12291  004214  82A6               	bsf	4006,1,c	;volatile
 12292  004216                     l403:
 12293  004216  B2A6               	btfsc	4006,1,c	;volatile
 12294  004218  D7FE               	goto	l403
 12295                           
 12296                           ;eeprom.c: 60: EEIF = 0;
 12297  00421A  98A1               	bcf	4001,4,c	;volatile
 12298                           
 12299                           ;eeprom.c: 62: EECON1 = 0;
 12300  00421C  0E00               	movlw	0
 12301  00421E  6EA6               	movwf	4006,c	;volatile
 12302                           
 12303                           ;eeprom.c: 63: INTCONbits.GIE = ien;
 12304  004220  0100               	movlb	0	; () banked
 12305  004222  B18A               	btfsc	eepromWrite@ien& (0+255),0,b
 12306  004224  D002               	bra	u8025
 12307  004226  9EF2               	bcf	intcon,7,c	;volatile
 12308  004228  D001               	bra	u8026
 12309  00422A                     u8025:
 12310  00422A  8EF2               	bsf	intcon,7,c	;volatile
 12311  00422C                     u8026:
 12312  00422C  0012               	return		;funcret
 12313  00422E                     __end_of_eepromWrite:
 12314                           	opt stack 0
 12315                           tblptru	equ	0xFF8
 12316                           tblptrh	equ	0xFF7
 12317                           tblptrl	equ	0xFF6
 12318                           tablat	equ	0xFF5
 12319                           prodh	equ	0xFF4
 12320                           prodl	equ	0xFF3
 12321                           intcon	equ	0xFF2
 12322                           postinc0	equ	0xFEE
 12323                           wreg	equ	0xFE8
 12324                           postdec1	equ	0xFE5
 12325                           fsr1l	equ	0xFE1
 12326                           indf2	equ	0xFDF
 12327                           postinc2	equ	0xFDE
 12328                           postdec2	equ	0xFDD
 12329                           fsr2h	equ	0xFDA
 12330                           fsr2l	equ	0xFD9
 12331                           status	equ	0xFD8
 12332                           
 12333 ;; *************** function _eepromRead *****************
 12334 ;; Defined at:
 12335 ;;		line 66 in file "eeprom.c"
 12336 ;; Parameters:    Size  Location     Type
 12337 ;;  address         4    0[BANK0 ] long 
 12338 ;; Auto vars:     Size  Location     Type
 12339 ;;		None
 12340 ;; Return value:  Size  Location     Type
 12341 ;;                  2    0[BANK0 ] int 
 12342 ;; Registers used:
 12343 ;;		wreg, status,2, status,0
 12344 ;; Tracked objects:
 12345 ;;		On entry : 0/0
 12346 ;;		On exit  : 0/0
 12347 ;;		Unchanged: 0/0
 12348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12349 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12352 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12353 ;;Total ram usage:        4 bytes
 12354 ;; Hardware stack levels used:    1
 12355 ;; Hardware stack levels required when called:    3
 12356 ;; This function calls:
 12357 ;;		Nothing
 12358 ;; This function is called by:
 12359 ;;		_readPastRun
 12360 ;;		_saveNewRun
 12361 ;; This function uses a non-reentrant model
 12362 ;;
 12363                           
 12364                           	psect	text46
 12365  00459A                     __ptext46:
 12366                           	opt stack 0
 12367  00459A                     _eepromRead:
 12368                           	opt stack 25
 12369                           
 12370                           ;eeprom.c: 67: EEADR = address;
 12371                           
 12372                           ;incstack = 0
 12373  00459A  C080  FFA9         	movff	eepromRead@address,4009	;volatile
 12374                           
 12375                           ;eeprom.c: 68: EEADRH = (address>>8) & 0b11;
 12376  00459E  0100               	movlb	0	; () banked
 12377  0045A0  5181               	movf	(eepromRead@address+1)& (0+255),w,b
 12378  0045A2  0B03               	andlw	3
 12379  0045A4  6EAA               	movwf	4010,c	;volatile
 12380                           
 12381                           ; BSR set to: 0
 12382                           ;eeprom.c: 69: EECON1 = 0;
 12383  0045A6  0E00               	movlw	0
 12384  0045A8  6EA6               	movwf	4006,c	;volatile
 12385                           
 12386                           ; BSR set to: 0
 12387                           ;eeprom.c: 70: EECON1 = 1;
 12388  0045AA  0E01               	movlw	1
 12389  0045AC  6EA6               	movwf	4006,c	;volatile
 12390                           
 12391                           ; BSR set to: 0
 12392                           ;eeprom.c: 71: return EEDATA;
 12393  0045AE  CFA8 F080          	movff	4008,?_eepromRead	;volatile
 12394  0045B2  0100               	movlb	0	; () banked
 12395  0045B4  6B81               	clrf	(?_eepromRead+1)& (0+255),b
 12396  0045B6  0012               	return	
 12397  0045B8                     __end_of_eepromRead:
 12398                           	opt stack 0
 12399                           tblptru	equ	0xFF8
 12400                           tblptrh	equ	0xFF7
 12401                           tblptrl	equ	0xFF6
 12402                           tablat	equ	0xFF5
 12403                           prodh	equ	0xFF4
 12404                           prodl	equ	0xFF3
 12405                           intcon	equ	0xFF2
 12406                           postinc0	equ	0xFEE
 12407                           wreg	equ	0xFE8
 12408                           postdec1	equ	0xFE5
 12409                           fsr1l	equ	0xFE1
 12410                           indf2	equ	0xFDF
 12411                           postinc2	equ	0xFDE
 12412                           postdec2	equ	0xFDD
 12413                           fsr2h	equ	0xFDA
 12414                           fsr2l	equ	0xFD9
 12415                           status	equ	0xFD8
 12416                           
 12417 ;; *************** function ___wmul *****************
 12418 ;; Defined at:
 12419 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 12420 ;; Parameters:    Size  Location     Type
 12421 ;;  multiplier      2   50[COMRAM] unsigned int 
 12422 ;;  multiplicand    2   52[COMRAM] unsigned int 
 12423 ;; Auto vars:     Size  Location     Type
 12424 ;;  product         2   54[COMRAM] unsigned int 
 12425 ;; Return value:  Size  Location     Type
 12426 ;;                  2   50[COMRAM] unsigned int 
 12427 ;; Registers used:
 12428 ;;		wreg, status,2, status,0, prodl, prodh
 12429 ;; Tracked objects:
 12430 ;;		On entry : 0/0
 12431 ;;		On exit  : 0/0
 12432 ;;		Unchanged: 0/0
 12433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12434 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12435 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12437 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12438 ;;Total ram usage:        6 bytes
 12439 ;; Hardware stack levels used:    1
 12440 ;; Hardware stack levels required when called:    3
 12441 ;; This function calls:
 12442 ;;		Nothing
 12443 ;; This function is called by:
 12444 ;;		_readPastRun
 12445 ;;		_saveNewRun
 12446 ;;		_fround
 12447 ;;		_scale
 12448 ;;		_printf
 12449 ;; This function uses a non-reentrant model
 12450 ;;
 12451                           
 12452                           	psect	text47
 12453  0044CE                     __ptext47:
 12454                           	opt stack 0
 12455  0044CE                     ___wmul:
 12456                           	opt stack 24
 12457                           
 12458                           ; BSR set to: 0
 12459                           ;incstack = 0
 12460  0044CE  5033               	movf	___wmul@multiplier,w,c
 12461  0044D0  0235               	mulwf	___wmul@multiplicand,c
 12462  0044D2  CFF3 F037          	movff	prodl,___wmul@product
 12463  0044D6  CFF4 F038          	movff	prodh,___wmul@product+1
 12464  0044DA  5033               	movf	___wmul@multiplier,w,c
 12465  0044DC  0236               	mulwf	___wmul@multiplicand+1,c
 12466  0044DE  50F3               	movf	prodl,w,c
 12467  0044E0  2638               	addwf	___wmul@product+1,f,c
 12468  0044E2  5034               	movf	___wmul@multiplier+1,w,c
 12469  0044E4  0235               	mulwf	___wmul@multiplicand,c
 12470  0044E6  50F3               	movf	prodl,w,c
 12471  0044E8  2638               	addwf	___wmul@product+1,f,c
 12472  0044EA  C037  F033         	movff	___wmul@product,?___wmul
 12473  0044EE  C038  F034         	movff	___wmul@product+1,?___wmul+1
 12474  0044F2  0012               	return	
 12475  0044F4                     __end_of___wmul:
 12476                           	opt stack 0
 12477                           tblptru	equ	0xFF8
 12478                           tblptrh	equ	0xFF7
 12479                           tblptrl	equ	0xFF6
 12480                           tablat	equ	0xFF5
 12481                           prodh	equ	0xFF4
 12482                           prodl	equ	0xFF3
 12483                           intcon	equ	0xFF2
 12484                           postinc0	equ	0xFEE
 12485                           wreg	equ	0xFE8
 12486                           postdec1	equ	0xFE5
 12487                           fsr1l	equ	0xFE1
 12488                           indf2	equ	0xFDF
 12489                           postinc2	equ	0xFDE
 12490                           postdec2	equ	0xFDD
 12491                           fsr2h	equ	0xFDA
 12492                           fsr2l	equ	0xFD9
 12493                           status	equ	0xFD8
 12494                           
 12495 ;; *************** function _pinSetup *****************
 12496 ;; Defined at:
 12497 ;;		line 335 in file "main.c"
 12498 ;; Parameters:    Size  Location     Type
 12499 ;;		None
 12500 ;; Auto vars:     Size  Location     Type
 12501 ;;		None
 12502 ;; Return value:  Size  Location     Type
 12503 ;;                  1    wreg      void 
 12504 ;; Registers used:
 12505 ;;		wreg, status,2, status,0
 12506 ;; Tracked objects:
 12507 ;;		On entry : 0/0
 12508 ;;		On exit  : 0/0
 12509 ;;		Unchanged: 0/0
 12510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12515 ;;Total ram usage:        0 bytes
 12516 ;; Hardware stack levels used:    1
 12517 ;; Hardware stack levels required when called:    3
 12518 ;; This function calls:
 12519 ;;		Nothing
 12520 ;; This function is called by:
 12521 ;;		_main
 12522 ;;		_debug
 12523 ;; This function uses a non-reentrant model
 12524 ;;
 12525                           
 12526                           	psect	text48
 12527  0043A2                     __ptext48:
 12528                           	opt stack 0
 12529  0043A2                     _pinSetup:
 12530                           	opt stack 27
 12531                           
 12532                           ;main.c: 341: TRISA = 0xFF;
 12533                           
 12534                           ;incstack = 0
 12535  0043A2  6892               	setf	3986,c	;volatile
 12536                           
 12537                           ;main.c: 342: TRISB = 0xFF;
 12538  0043A4  6893               	setf	3987,c	;volatile
 12539                           
 12540                           ;main.c: 343: TRISC = 0b11000000;
 12541  0043A6  0EC0               	movlw	192
 12542  0043A8  6E94               	movwf	3988,c	;volatile
 12543                           
 12544                           ;main.c: 344: TRISD = 0x00;
 12545  0043AA  0E00               	movlw	0
 12546  0043AC  6E95               	movwf	3989,c	;volatile
 12547                           
 12548                           ;main.c: 345: TRISE = 0x00;
 12549  0043AE  0E00               	movlw	0
 12550  0043B0  6E96               	movwf	3990,c	;volatile
 12551                           
 12552                           ;main.c: 347: LATA = 0x00;
 12553  0043B2  0E00               	movlw	0
 12554  0043B4  6E89               	movwf	3977,c	;volatile
 12555                           
 12556                           ;main.c: 348: LATB = 0x00;
 12557  0043B6  0E00               	movlw	0
 12558  0043B8  6E8A               	movwf	3978,c	;volatile
 12559                           
 12560                           ;main.c: 349: LATC = 0x00;
 12561  0043BA  0E00               	movlw	0
 12562  0043BC  6E8B               	movwf	3979,c	;volatile
 12563                           
 12564                           ;main.c: 350: LATD = 0x00;
 12565  0043BE  0E00               	movlw	0
 12566  0043C0  6E8C               	movwf	3980,c	;volatile
 12567                           
 12568                           ;main.c: 351: LATE = 0x00;
 12569  0043C2  0E00               	movlw	0
 12570  0043C4  6E8D               	movwf	3981,c	;volatile
 12571                           
 12572                           ;main.c: 353: ADCON0 = 0x00;
 12573  0043C6  0E00               	movlw	0
 12574  0043C8  6EC2               	movwf	4034,c	;volatile
 12575                           
 12576                           ;main.c: 355: ADCON1 |= 0x0B;
 12577  0043CA  0E0B               	movlw	11
 12578  0043CC  12C1               	iorwf	4033,f,c	;volatile
 12579                           
 12580                           ;main.c: 360: ADCON2 = 0;
 12581  0043CE  0E00               	movlw	0
 12582  0043D0  6EC0               	movwf	4032,c	;volatile
 12583                           
 12584                           ;main.c: 361: ADCON2 |= 0b010;
 12585  0043D2  82C0               	bsf	4032,1,c	;volatile
 12586                           
 12587                           ;main.c: 362: ADCON2 |= 0b110<<3;
 12588  0043D4  0E30               	movlw	48
 12589  0043D6  12C0               	iorwf	4032,f,c	;volatile
 12590                           
 12591                           ;main.c: 363: ADCON2 |= 1<<7;
 12592  0043D8  8EC0               	bsf	4032,7,c	;volatile
 12593                           
 12594                           ;main.c: 366: INT1IE = 1;
 12595  0043DA  86F0               	bsf	intcon3,3,c	;volatile
 12596                           
 12597                           ;main.c: 367: INT0IE = 1;
 12598  0043DC  88F2               	bsf	intcon,4,c	;volatile
 12599                           
 12600                           ;main.c: 368: (INTCONbits.GIE = 1);
 12601  0043DE  8EF2               	bsf	intcon,7,c	;volatile
 12602  0043E0  0012               	return		;funcret
 12603  0043E2                     __end_of_pinSetup:
 12604                           	opt stack 0
 12605                           tblptru	equ	0xFF8
 12606                           tblptrh	equ	0xFF7
 12607                           tblptrl	equ	0xFF6
 12608                           tablat	equ	0xFF5
 12609                           prodh	equ	0xFF4
 12610                           prodl	equ	0xFF3
 12611                           intcon	equ	0xFF2
 12612                           intcon3	equ	0xFF0
 12613                           postinc0	equ	0xFEE
 12614                           wreg	equ	0xFE8
 12615                           postdec1	equ	0xFE5
 12616                           fsr1l	equ	0xFE1
 12617                           indf2	equ	0xFDF
 12618                           postinc2	equ	0xFDE
 12619                           postdec2	equ	0xFDD
 12620                           fsr2h	equ	0xFDA
 12621                           fsr2l	equ	0xFD9
 12622                           status	equ	0xFD8
 12623                           
 12624 ;; *************** function _initServo *****************
 12625 ;; Defined at:
 12626 ;;		line 21 in file "servo.c"
 12627 ;; Parameters:    Size  Location     Type
 12628 ;;  motor           2   90[BANK0 ] PTR int 
 12629 ;;		 -> padServo(4), conveyorServo(4), redirectingServo(4), 
 12630 ;;  angle           2   92[BANK0 ] int 
 12631 ;; Auto vars:     Size  Location     Type
 12632 ;;  i               2   98[BANK0 ] int 
 12633 ;; Return value:  Size  Location     Type
 12634 ;;                  1    wreg      void 
 12635 ;; Registers used:
 12636 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12637 ;; Tracked objects:
 12638 ;;		On entry : 0/0
 12639 ;;		On exit  : 0/0
 12640 ;;		Unchanged: 0/0
 12641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12642 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12643 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12644 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12645 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12646 ;;Total ram usage:       10 bytes
 12647 ;; Hardware stack levels used:    1
 12648 ;; Hardware stack levels required when called:    7
 12649 ;; This function calls:
 12650 ;;		_initTimer
 12651 ;;		_setAngle
 12652 ;;		_startTimer
 12653 ;; This function is called by:
 12654 ;;		_main
 12655 ;;		_debug
 12656 ;; This function uses a non-reentrant model
 12657 ;;
 12658                           
 12659                           	psect	text49
 12660  00335C                     __ptext49:
 12661                           	opt stack 0
 12662  00335C                     _initServo:
 12663                           	opt stack 23
 12664                           
 12665                           ;servo.c: 24: for(int i = 0; i < n; i++){
 12666                           
 12667                           ;incstack = 0
 12668  00335C  0E00               	movlw	0
 12669  00335E  0100               	movlb	0	; () banked
 12670  003360  6FE3               	movwf	(initServo@i+1)& (0+255),b
 12671  003362  0E00               	movlw	0
 12672  003364  6FE2               	movwf	initServo@i& (0+255),b
 12673  003366  D022               	goto	l7562
 12674  003368                     l7554:
 12675                           
 12676                           ; BSR set to: 0
 12677                           ;servo.c: 25: if(servos[i] == motor){
 12678  003368  90D8               	bcf	status,0,c
 12679  00336A  0100               	movlb	0	; () banked
 12680  00336C  35E2               	rlcf	initServo@i& (0+255),w,b
 12681  00336E  6ED9               	movwf	fsr2l,c
 12682  003370  0100               	movlb	0	; () banked
 12683  003372  35E3               	rlcf	(initServo@i+1)& (0+255),w,b
 12684  003374  6EDA               	movwf	fsr2h,c
 12685  003376  0E3A               	movlw	low _servos
 12686  003378  26D9               	addwf	fsr2l,f,c
 12687  00337A  0E00               	movlw	high _servos
 12688  00337C  22DA               	addwfc	fsr2h,f,c
 12689  00337E  0100               	movlb	0	; () banked
 12690  003380  51DA               	movf	initServo@motor& (0+255),w,b
 12691  003382  18DE               	xorwf	postinc2,w,c
 12692  003384  E110               	bnz	l7560
 12693  003386  0100               	movlb	0	; () banked
 12694  003388  51DB               	movf	(initServo@motor+1)& (0+255),w,b
 12695  00338A  18DE               	xorwf	postinc2,w,c
 12696  00338C  A4D8               	btfss	status,2,c
 12697  00338E  D00B               	goto	l7560
 12698                           
 12699                           ; BSR set to: 0
 12700                           ;servo.c: 26: setAngle(motor, angle);
 12701  003390  C0DA  F0D0         	movff	initServo@motor,setAngle@motor
 12702  003394  C0DB  F0D1         	movff	initServo@motor+1,setAngle@motor+1
 12703  003398  C0DC  F0D2         	movff	initServo@angle,setAngle@angle
 12704  00339C  C0DD  F0D3         	movff	initServo@angle+1,setAngle@angle+1
 12705  0033A0  EC86  F01B         	call	_setAngle	;wreg free
 12706                           
 12707                           ;servo.c: 27: return;
 12708  0033A4  0012               	return	
 12709  0033A6                     l7560:
 12710                           
 12711                           ;servo.c: 28: };
 12712  0033A6  0100               	movlb	0	; () banked
 12713  0033A8  4BE2               	infsnz	initServo@i& (0+255),f,b
 12714  0033AA  2BE3               	incf	(initServo@i+1)& (0+255),f,b
 12715  0033AC                     l7562:
 12716                           
 12717                           ; BSR set to: 0
 12718  0033AC  0100               	movlb	0	; () banked
 12719  0033AE  51FE               	movf	_n& (0+255),w,b
 12720  0033B0  0100               	movlb	0	; () banked
 12721  0033B2  5DE2               	subwf	initServo@i& (0+255),w,b
 12722  0033B4  0100               	movlb	0	; () banked
 12723  0033B6  51E3               	movf	(initServo@i+1)& (0+255),w,b
 12724  0033B8  0A80               	xorlw	128
 12725  0033BA  0100               	movlb	0	; () banked
 12726  0033BC  6FDE               	movwf	??_initServo& (0+255),b
 12727  0033BE  0100               	movlb	0	; () banked
 12728  0033C0  51FF               	movf	(_n+1)& (0+255),w,b
 12729  0033C2  0A80               	xorlw	128
 12730  0033C4  0100               	movlb	0	; () banked
 12731  0033C6  59DE               	subwfb	??_initServo& (0+255),w,b
 12732  0033C8  A0D8               	btfss	status,0,c
 12733  0033CA  D7CE               	goto	l7554
 12734                           
 12735                           ; BSR set to: 0
 12736                           ;servo.c: 29: }
 12737                           ;servo.c: 31: n++;
 12738                           
 12739                           ; BSR set to: 0
 12740  0033CC  0100               	movlb	0	; () banked
 12741  0033CE  4BFE               	infsnz	_n& (0+255),f,b
 12742  0033D0  2BFF               	incf	(_n+1)& (0+255),f,b
 12743                           
 12744                           ; BSR set to: 0
 12745                           ;servo.c: 32: servos[n-1] = motor;
 12746  0033D2  0EFE               	movlw	254
 12747  0033D4  0100               	movlb	0	; () banked
 12748  0033D6  6FDE               	movwf	??_initServo& (0+255),b
 12749  0033D8  0EFF               	movlw	255
 12750  0033DA  0100               	movlb	0	; () banked
 12751  0033DC  6FDF               	movwf	(??_initServo+1)& (0+255),b
 12752  0033DE  C0FE  F0E0         	movff	_n,??_initServo+2
 12753  0033E2  C0FF  F0E1         	movff	_n+1,??_initServo+3
 12754  0033E6  90D8               	bcf	status,0,c
 12755  0033E8  0100               	movlb	0	; () banked
 12756  0033EA  37E0               	rlcf	(??_initServo+2)& (0+255),f,b
 12757  0033EC  37E1               	rlcf	(??_initServo+3)& (0+255),f,b
 12758  0033EE  0100               	movlb	0	; () banked
 12759  0033F0  51DE               	movf	??_initServo& (0+255),w,b
 12760  0033F2  0100               	movlb	0	; () banked
 12761  0033F4  27E0               	addwf	(??_initServo+2)& (0+255),f,b
 12762  0033F6  0100               	movlb	0	; () banked
 12763  0033F8  51DF               	movf	(??_initServo+1)& (0+255),w,b
 12764  0033FA  0100               	movlb	0	; () banked
 12765  0033FC  23E1               	addwfc	(??_initServo+3)& (0+255),f,b
 12766  0033FE  0E3A               	movlw	low _servos
 12767  003400  0100               	movlb	0	; () banked
 12768  003402  25E0               	addwf	(??_initServo+2)& (0+255),w,b
 12769  003404  6ED9               	movwf	fsr2l,c
 12770  003406  0E00               	movlw	high _servos
 12771  003408  0100               	movlb	0	; () banked
 12772  00340A  21E1               	addwfc	(??_initServo+3)& (0+255),w,b
 12773  00340C  6EDA               	movwf	fsr2h,c
 12774  00340E  C0DA  FFDE         	movff	initServo@motor,postinc2
 12775  003412  C0DB  FFDD         	movff	initServo@motor+1,postdec2
 12776                           
 12777                           ; BSR set to: 0
 12778                           ;servo.c: 33: setAngle(motor, angle);
 12779  003416  C0DA  F0D0         	movff	initServo@motor,setAngle@motor
 12780  00341A  C0DB  F0D1         	movff	initServo@motor+1,setAngle@motor+1
 12781  00341E  C0DC  F0D2         	movff	initServo@angle,setAngle@angle
 12782  003422  C0DD  F0D3         	movff	initServo@angle+1,setAngle@angle+1
 12783  003426  EC86  F01B         	call	_setAngle	;wreg free
 12784                           
 12785                           ;servo.c: 35: initTimer(0);
 12786  00342A  0E00               	movlw	0
 12787  00342C  6E26               	movwf	initTimer@timer+1,c
 12788  00342E  0E00               	movlw	0
 12789  003430  6E25               	movwf	initTimer@timer,c
 12790  003432  EC89  F021         	call	_initTimer	;wreg free
 12791                           
 12792                           ;servo.c: 36: startTimer(0,0);
 12793  003436  0E00               	movlw	0
 12794  003438  6E26               	movwf	startTimer@timer+1,c
 12795  00343A  0E00               	movlw	0
 12796  00343C  6E25               	movwf	startTimer@timer,c
 12797  00343E  0E00               	movlw	0
 12798  003440  6E27               	movwf	startTimer@val,c
 12799  003442  0E00               	movlw	0
 12800  003444  6E28               	movwf	startTimer@val+1,c
 12801  003446  0E00               	movlw	0
 12802  003448  6E29               	movwf	startTimer@val+2,c
 12803  00344A  0E00               	movlw	0
 12804  00344C  6E2A               	movwf	startTimer@val+3,c
 12805  00344E  EC3D  F021         	call	_startTimer	;wreg free
 12806  003452  0012               	return		;funcret
 12807  003454                     __end_of_initServo:
 12808                           	opt stack 0
 12809                           tblptru	equ	0xFF8
 12810                           tblptrh	equ	0xFF7
 12811                           tblptrl	equ	0xFF6
 12812                           tablat	equ	0xFF5
 12813                           prodh	equ	0xFF4
 12814                           prodl	equ	0xFF3
 12815                           intcon	equ	0xFF2
 12816                           intcon3	equ	0xFF0
 12817                           postinc0	equ	0xFEE
 12818                           wreg	equ	0xFE8
 12819                           postdec1	equ	0xFE5
 12820                           fsr1l	equ	0xFE1
 12821                           indf2	equ	0xFDF
 12822                           postinc2	equ	0xFDE
 12823                           postdec2	equ	0xFDD
 12824                           fsr2h	equ	0xFDA
 12825                           fsr2l	equ	0xFD9
 12826                           status	equ	0xFD8
 12827                           
 12828 ;; *************** function _startTimer *****************
 12829 ;; Defined at:
 12830 ;;		line 77 in file "timer.c"
 12831 ;; Parameters:    Size  Location     Type
 12832 ;;  timer           2   36[COMRAM] int 
 12833 ;;  val             4   38[COMRAM] long 
 12834 ;; Auto vars:     Size  Location     Type
 12835 ;;		None
 12836 ;; Return value:  Size  Location     Type
 12837 ;;                  1    wreg      void 
 12838 ;; Registers used:
 12839 ;;		wreg, status,2, status,0
 12840 ;; Tracked objects:
 12841 ;;		On entry : 0/0
 12842 ;;		On exit  : 0/0
 12843 ;;		Unchanged: 0/0
 12844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12845 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12847 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12848 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12849 ;;Total ram usage:        8 bytes
 12850 ;; Hardware stack levels used:    1
 12851 ;; Hardware stack levels required when called:    3
 12852 ;; This function calls:
 12853 ;;		Nothing
 12854 ;; This function is called by:
 12855 ;;		_main
 12856 ;;		_initServo
 12857 ;;		_testFrequency
 12858 ;; This function uses a non-reentrant model
 12859 ;;
 12860                           
 12861                           	psect	text50
 12862  00427A                     __ptext50:
 12863                           	opt stack 0
 12864  00427A                     _startTimer:
 12865                           	opt stack 27
 12866                           
 12867                           ;timer.c: 78: switch(timer){
 12868                           
 12869                           ;incstack = 0
 12870  00427A  D012               	goto	l5122
 12871  00427C                     l461:
 12872                           
 12873                           ;timer.c: 80: TMR0H = val>>8;
 12874  00427C  C028  FFD7         	movff	startTimer@val+1,4055	;volatile
 12875                           
 12876                           ;timer.c: 81: TMR0L = val;
 12877  004280  C027  FFD6         	movff	startTimer@val,4054	;volatile
 12878                           
 12879                           ;timer.c: 82: T0CON |= 1<<7;
 12880  004284  8ED5               	bsf	4053,7,c	;volatile
 12881                           
 12882                           ;timer.c: 83: break;
 12883  004286  0012               	return	
 12884  004288                     l463:
 12885                           
 12886                           ;timer.c: 85: TMR1H = val>>8;
 12887  004288  C028  FFCF         	movff	startTimer@val+1,4047	;volatile
 12888                           
 12889                           ;timer.c: 86: TMR1L = val;
 12890  00428C  C027  FFCE         	movff	startTimer@val,4046	;volatile
 12891                           
 12892                           ;timer.c: 87: T1CON |= 1<<0;
 12893  004290  80CD               	bsf	4045,0,c	;volatile
 12894                           
 12895                           ;timer.c: 88: break;
 12896  004292  0012               	return	
 12897  004294                     l464:
 12898                           
 12899                           ;timer.c: 90: TMR3H = val>>8;
 12900  004294  C028  FFB3         	movff	startTimer@val+1,4019	;volatile
 12901                           
 12902                           ;timer.c: 91: TMR3L = val;
 12903  004298  C027  FFB2         	movff	startTimer@val,4018	;volatile
 12904                           
 12905                           ;timer.c: 92: T3CON |= 1<<0;
 12906  00429C  80B1               	bsf	4017,0,c	;volatile
 12907                           
 12908                           ;timer.c: 93: }
 12909  00429E  0012               	return	
 12910  0042A0                     l5122:
 12911  0042A0  C025  F02B         	movff	startTimer@timer,??_startTimer
 12912  0042A4  C026  F02C         	movff	startTimer@timer+1,??_startTimer+1
 12913                           
 12914                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12915                           ; Switch size 1, requested type "space"
 12916                           ; Number of cases is 1, Range of values is 0 to 0
 12917                           ; switch strategies available:
 12918                           ; Name         Instructions Cycles
 12919                           ; simple_byte            4     3 (average)
 12920                           ;	Chosen strategy is simple_byte
 12921  0042A8  502C               	movf	??_startTimer+1,w,c
 12922  0042AA  0A00               	xorlw	0	; case 0
 12923  0042AC  A4D8               	btfss	status,2,c
 12924  0042AE  0012               	return	
 12925                           
 12926                           ; Switch size 1, requested type "space"
 12927                           ; Number of cases is 3, Range of values is 0 to 3
 12928                           ; switch strategies available:
 12929                           ; Name         Instructions Cycles
 12930                           ; simple_byte           10     6 (average)
 12931                           ;	Chosen strategy is simple_byte
 12932  0042B0  502B               	movf	??_startTimer,w,c
 12933  0042B2  0A00               	xorlw	0	; case 0
 12934  0042B4  B4D8               	btfsc	status,2,c
 12935  0042B6  D7E2               	goto	l461
 12936  0042B8  0A01               	xorlw	1	; case 1
 12937  0042BA  B4D8               	btfsc	status,2,c
 12938  0042BC  D7E5               	goto	l463
 12939  0042BE  0A02               	xorlw	2	; case 3
 12940  0042C0  A4D8               	btfss	status,2,c
 12941  0042C2  0012               	return	
 12942  0042C4  D7E7               	goto	l464
 12943  0042C6                     __end_of_startTimer:
 12944                           	opt stack 0
 12945                           tblptru	equ	0xFF8
 12946                           tblptrh	equ	0xFF7
 12947                           tblptrl	equ	0xFF6
 12948                           tablat	equ	0xFF5
 12949                           prodh	equ	0xFF4
 12950                           prodl	equ	0xFF3
 12951                           intcon	equ	0xFF2
 12952                           intcon3	equ	0xFF0
 12953                           postinc0	equ	0xFEE
 12954                           wreg	equ	0xFE8
 12955                           postdec1	equ	0xFE5
 12956                           fsr1l	equ	0xFE1
 12957                           indf2	equ	0xFDF
 12958                           postinc2	equ	0xFDE
 12959                           postdec2	equ	0xFDD
 12960                           fsr2h	equ	0xFDA
 12961                           fsr2l	equ	0xFD9
 12962                           status	equ	0xFD8
 12963                           
 12964 ;; *************** function _setAngle *****************
 12965 ;; Defined at:
 12966 ;;		line 47 in file "servo.c"
 12967 ;; Parameters:    Size  Location     Type
 12968 ;;  motor           2   80[BANK0 ] PTR int 
 12969 ;;		 -> padServo(4), conveyorServo(4), redirectingServo(4), 
 12970 ;;  angle           2   82[BANK0 ] int 
 12971 ;; Auto vars:     Size  Location     Type
 12972 ;;  i               2   88[BANK0 ] int 
 12973 ;;  period          2   86[BANK0 ] unsigned int 
 12974 ;; Return value:  Size  Location     Type
 12975 ;;                  1    wreg      void 
 12976 ;; Registers used:
 12977 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12978 ;; Tracked objects:
 12979 ;;		On entry : 0/0
 12980 ;;		On exit  : 0/0
 12981 ;;		Unchanged: 0/0
 12982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12983 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12984 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12985 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12986 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12987 ;;Total ram usage:       10 bytes
 12988 ;; Hardware stack levels used:    1
 12989 ;; Hardware stack levels required when called:    6
 12990 ;; This function calls:
 12991 ;;		_angleToPulse
 12992 ;; This function is called by:
 12993 ;;		_main
 12994 ;;		_sortBattery
 12995 ;;		_initServo
 12996 ;;		_debug
 12997 ;; This function uses a non-reentrant model
 12998 ;;
 12999                           
 13000                           	psect	text51
 13001  00370C                     __ptext51:
 13002                           	opt stack 0
 13003  00370C                     _setAngle:
 13004                           	opt stack 23
 13005                           
 13006                           ;servo.c: 48: unsigned int period = 50000;
 13007                           
 13008                           ;incstack = 0
 13009  00370C  0EC3               	movlw	195
 13010  00370E  0100               	movlb	0	; () banked
 13011  003710  6FD7               	movwf	(setAngle@period+1)& (0+255),b
 13012  003712  0E50               	movlw	80
 13013  003714  6FD6               	movwf	setAngle@period& (0+255),b
 13014                           
 13015                           ;servo.c: 49: for(int i = 0; i < n; i++){
 13016  003716  0E00               	movlw	0
 13017  003718  0100               	movlb	0	; () banked
 13018  00371A  6FD9               	movwf	(setAngle@i+1)& (0+255),b
 13019  00371C  0E00               	movlw	0
 13020  00371E  6FD8               	movwf	setAngle@i& (0+255),b
 13021  003720  D03F               	goto	l7304
 13022  003722                     l7296:
 13023                           
 13024                           ; BSR set to: 0
 13025                           ;servo.c: 50: if(servos[i] == motor){
 13026  003722  90D8               	bcf	status,0,c
 13027  003724  0100               	movlb	0	; () banked
 13028  003726  35D8               	rlcf	setAngle@i& (0+255),w,b
 13029  003728  6ED9               	movwf	fsr2l,c
 13030  00372A  0100               	movlb	0	; () banked
 13031  00372C  35D9               	rlcf	(setAngle@i+1)& (0+255),w,b
 13032  00372E  6EDA               	movwf	fsr2h,c
 13033  003730  0E3A               	movlw	low _servos
 13034  003732  26D9               	addwf	fsr2l,f,c
 13035  003734  0E00               	movlw	high _servos
 13036  003736  22DA               	addwfc	fsr2h,f,c
 13037  003738  0100               	movlb	0	; () banked
 13038  00373A  51D0               	movf	setAngle@motor& (0+255),w,b
 13039  00373C  18DE               	xorwf	postinc2,w,c
 13040  00373E  E11C               	bnz	l7300
 13041  003740  0100               	movlb	0	; () banked
 13042  003742  51D1               	movf	(setAngle@motor+1)& (0+255),w,b
 13043  003744  18DE               	xorwf	postinc2,w,c
 13044  003746  A4D8               	btfss	status,2,c
 13045  003748  D017               	goto	l7300
 13046                           
 13047                           ; BSR set to: 0
 13048                           ;servo.c: 51: pulse[i] = angleToPulse(angle);
 13049  00374A  C0D2  F0B9         	movff	setAngle@angle,angleToPulse@angle
 13050  00374E  C0D3  F0BA         	movff	setAngle@angle+1,angleToPulse@angle+1
 13051  003752  ECC5  F013         	call	_angleToPulse	;wreg free
 13052  003756  90D8               	bcf	status,0,c
 13053  003758  0100               	movlb	0	; () banked
 13054  00375A  35D8               	rlcf	setAngle@i& (0+255),w,b
 13055  00375C  6ED9               	movwf	fsr2l,c
 13056  00375E  0100               	movlb	0	; () banked
 13057  003760  35D9               	rlcf	(setAngle@i+1)& (0+255),w,b
 13058  003762  6EDA               	movwf	fsr2h,c
 13059  003764  0E3F               	movlw	low _pulse
 13060  003766  26D9               	addwf	fsr2l,f,c
 13061  003768  0E01               	movlw	high _pulse
 13062  00376A  22DA               	addwfc	fsr2h,f,c
 13063  00376C  0100               	movlb	0	; () banked
 13064  00376E  C0B9  FFDE         	movff	?_angleToPulse,postinc2
 13065  003772  0100               	movlb	0	; () banked
 13066  003774  C0BA  FFDD         	movff	?_angleToPulse+1,postdec2
 13067  003778                     l7300:
 13068                           
 13069                           ; BSR set to: 0
 13070                           ;servo.c: 52: }
 13071                           ;servo.c: 53: period-=pulse[i];
 13072  003778  90D8               	bcf	status,0,c
 13073  00377A  0100               	movlb	0	; () banked
 13074  00377C  35D8               	rlcf	setAngle@i& (0+255),w,b
 13075  00377E  6ED9               	movwf	fsr2l,c
 13076  003780  0100               	movlb	0	; () banked
 13077  003782  35D9               	rlcf	(setAngle@i+1)& (0+255),w,b
 13078  003784  6EDA               	movwf	fsr2h,c
 13079  003786  0E3F               	movlw	low _pulse
 13080  003788  26D9               	addwf	fsr2l,f,c
 13081  00378A  0E01               	movlw	high _pulse
 13082  00378C  22DA               	addwfc	fsr2h,f,c
 13083  00378E  50DE               	movf	postinc2,w,c
 13084  003790  0100               	movlb	0	; () banked
 13085  003792  5FD6               	subwf	setAngle@period& (0+255),f,b
 13086  003794  50DD               	movf	postdec2,w,c
 13087  003796  0100               	movlb	0	; () banked
 13088  003798  5BD7               	subwfb	(setAngle@period+1)& (0+255),f,b
 13089                           
 13090                           ; BSR set to: 0
 13091  00379A  0100               	movlb	0	; () banked
 13092  00379C  4BD8               	infsnz	setAngle@i& (0+255),f,b
 13093  00379E  2BD9               	incf	(setAngle@i+1)& (0+255),f,b
 13094  0037A0                     l7304:
 13095                           
 13096                           ; BSR set to: 0
 13097  0037A0  0100               	movlb	0	; () banked
 13098  0037A2  51FE               	movf	_n& (0+255),w,b
 13099  0037A4  0100               	movlb	0	; () banked
 13100  0037A6  5DD8               	subwf	setAngle@i& (0+255),w,b
 13101  0037A8  0100               	movlb	0	; () banked
 13102  0037AA  51D9               	movf	(setAngle@i+1)& (0+255),w,b
 13103  0037AC  0A80               	xorlw	128
 13104  0037AE  0100               	movlb	0	; () banked
 13105  0037B0  6FD4               	movwf	??_setAngle& (0+255),b
 13106  0037B2  0100               	movlb	0	; () banked
 13107  0037B4  51FF               	movf	(_n+1)& (0+255),w,b
 13108  0037B6  0A80               	xorlw	128
 13109  0037B8  0100               	movlb	0	; () banked
 13110  0037BA  59D4               	subwfb	??_setAngle& (0+255),w,b
 13111  0037BC  A0D8               	btfss	status,0,c
 13112  0037BE  D7B1               	goto	l7296
 13113                           
 13114                           ; BSR set to: 0
 13115                           ;servo.c: 54: }
 13116                           ;servo.c: 55: pulse[n] = period;
 13117                           
 13118                           ; BSR set to: 0
 13119  0037C0  90D8               	bcf	status,0,c
 13120  0037C2  0100               	movlb	0	; () banked
 13121  0037C4  35FE               	rlcf	_n& (0+255),w,b
 13122  0037C6  6ED9               	movwf	fsr2l,c
 13123  0037C8  0100               	movlb	0	; () banked
 13124  0037CA  35FF               	rlcf	(_n+1)& (0+255),w,b
 13125  0037CC  6EDA               	movwf	fsr2h,c
 13126  0037CE  0E3F               	movlw	low _pulse
 13127  0037D0  26D9               	addwf	fsr2l,f,c
 13128  0037D2  0E01               	movlw	high _pulse
 13129  0037D4  22DA               	addwfc	fsr2h,f,c
 13130  0037D6  C0D6  FFDE         	movff	setAngle@period,postinc2
 13131  0037DA  C0D7  FFDD         	movff	setAngle@period+1,postdec2
 13132                           
 13133                           ; BSR set to: 0
 13134  0037DE  0012               	return		;funcret
 13135  0037E0                     __end_of_setAngle:
 13136                           	opt stack 0
 13137                           tblptru	equ	0xFF8
 13138                           tblptrh	equ	0xFF7
 13139                           tblptrl	equ	0xFF6
 13140                           tablat	equ	0xFF5
 13141                           prodh	equ	0xFF4
 13142                           prodl	equ	0xFF3
 13143                           intcon	equ	0xFF2
 13144                           intcon3	equ	0xFF0
 13145                           postinc0	equ	0xFEE
 13146                           wreg	equ	0xFE8
 13147                           postdec1	equ	0xFE5
 13148                           fsr1l	equ	0xFE1
 13149                           indf2	equ	0xFDF
 13150                           postinc2	equ	0xFDE
 13151                           postdec2	equ	0xFDD
 13152                           fsr2h	equ	0xFDA
 13153                           fsr2l	equ	0xFD9
 13154                           status	equ	0xFD8
 13155                           
 13156 ;; *************** function _angleToPulse *****************
 13157 ;; Defined at:
 13158 ;;		line 39 in file "servo.c"
 13159 ;; Parameters:    Size  Location     Type
 13160 ;;  angle           2   57[BANK0 ] int 
 13161 ;; Auto vars:     Size  Location     Type
 13162 ;;  a000            4   76[BANK0 ] long 
 13163 ;;  a180            4   69[BANK0 ] long 
 13164 ;;  offset          4   65[BANK0 ] long 
 13165 ;; Return value:  Size  Location     Type
 13166 ;;                  4   57[BANK0 ] long 
 13167 ;; Registers used:
 13168 ;;		wreg, status,2, status,0, cstack
 13169 ;; Tracked objects:
 13170 ;;		On entry : 0/0
 13171 ;;		On exit  : 0/0
 13172 ;;		Unchanged: 0/0
 13173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13174 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13175 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13176 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13177 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13178 ;;Total ram usage:       23 bytes
 13179 ;; Hardware stack levels used:    1
 13180 ;; Hardware stack levels required when called:    5
 13181 ;; This function calls:
 13182 ;;		___altoft
 13183 ;;		___awtoft
 13184 ;;		___ftadd
 13185 ;;		___ftdiv
 13186 ;;		___ftmul
 13187 ;;		___fttol
 13188 ;; This function is called by:
 13189 ;;		_setAngle
 13190 ;; This function uses a non-reentrant model
 13191 ;;
 13192                           
 13193                           	psect	text52
 13194  00278A                     __ptext52:
 13195                           	opt stack 0
 13196  00278A                     _angleToPulse:
 13197                           	opt stack 23
 13198                           
 13199                           ;servo.c: 40: long offset = -600;
 13200                           
 13201                           ; BSR set to: 0
 13202                           ;incstack = 0
 13203  00278A  0EA8               	movlw	168
 13204  00278C  0100               	movlb	0	; () banked
 13205  00278E  6FC1               	movwf	angleToPulse@offset& (0+255),b
 13206  002790  0EFD               	movlw	253
 13207  002792  6FC2               	movwf	(angleToPulse@offset+1)& (0+255),b
 13208  002794  0EFF               	movlw	255
 13209  002796  6FC3               	movwf	(angleToPulse@offset+2)& (0+255),b
 13210  002798  0EFF               	movlw	255
 13211  00279A  6FC4               	movwf	(angleToPulse@offset+3)& (0+255),b
 13212                           
 13213                           ;servo.c: 41: long a000 = 1250;
 13214  00279C  0EE2               	movlw	226
 13215  00279E  0100               	movlb	0	; () banked
 13216  0027A0  6FCC               	movwf	angleToPulse@a000& (0+255),b
 13217  0027A2  0E04               	movlw	4
 13218  0027A4  6FCD               	movwf	(angleToPulse@a000+1)& (0+255),b
 13219  0027A6  0E00               	movlw	0
 13220  0027A8  6FCE               	movwf	(angleToPulse@a000+2)& (0+255),b
 13221  0027AA  0E00               	movlw	0
 13222  0027AC  6FCF               	movwf	(angleToPulse@a000+3)& (0+255),b
 13223                           
 13224                           ;servo.c: 42: long a180 = 6250;
 13225  0027AE  0E6A               	movlw	106
 13226  0027B0  0100               	movlb	0	; () banked
 13227  0027B2  6FC5               	movwf	angleToPulse@a180& (0+255),b
 13228  0027B4  0E18               	movlw	24
 13229  0027B6  6FC6               	movwf	(angleToPulse@a180+1)& (0+255),b
 13230  0027B8  0E00               	movlw	0
 13231  0027BA  6FC7               	movwf	(angleToPulse@a180+2)& (0+255),b
 13232  0027BC  0E00               	movlw	0
 13233  0027BE  6FC8               	movwf	(angleToPulse@a180+3)& (0+255),b
 13234                           
 13235                           ; BSR set to: 0
 13236                           ;servo.c: 44: return a000 + angle/180.0*(a180-a000) + offset;
 13237  0027C0  C0CC  F0BD         	movff	angleToPulse@a000,??_angleToPulse
 13238  0027C4  C0CD  F0BE         	movff	angleToPulse@a000+1,??_angleToPulse+1
 13239  0027C8  C0CE  F0BF         	movff	angleToPulse@a000+2,??_angleToPulse+2
 13240  0027CC  C0CF  F0C0         	movff	angleToPulse@a000+3,??_angleToPulse+3
 13241  0027D0  0100               	movlb	0	; () banked
 13242  0027D2  1FBD               	comf	??_angleToPulse& (0+255),f,b
 13243  0027D4  1FBE               	comf	(??_angleToPulse+1)& (0+255),f,b
 13244  0027D6  1FBF               	comf	(??_angleToPulse+2)& (0+255),f,b
 13245  0027D8  1FC0               	comf	(??_angleToPulse+3)& (0+255),f,b
 13246  0027DA  2BBD               	incf	??_angleToPulse& (0+255),f,b
 13247  0027DC  0E00               	movlw	0
 13248  0027DE  23BE               	addwfc	(??_angleToPulse+1)& (0+255),f,b
 13249  0027E0  23BF               	addwfc	(??_angleToPulse+2)& (0+255),f,b
 13250  0027E2  23C0               	addwfc	(??_angleToPulse+3)& (0+255),f,b
 13251  0027E4  0100               	movlb	0	; () banked
 13252  0027E6  51C5               	movf	angleToPulse@a180& (0+255),w,b
 13253  0027E8  0100               	movlb	0	; () banked
 13254  0027EA  25BD               	addwf	??_angleToPulse& (0+255),w,b
 13255  0027EC  6E2D               	movwf	___altoft@c,c
 13256  0027EE  0100               	movlb	0	; () banked
 13257  0027F0  51C6               	movf	(angleToPulse@a180+1)& (0+255),w,b
 13258  0027F2  0100               	movlb	0	; () banked
 13259  0027F4  21BE               	addwfc	(??_angleToPulse+1)& (0+255),w,b
 13260  0027F6  6E2E               	movwf	___altoft@c+1,c
 13261  0027F8  0100               	movlb	0	; () banked
 13262  0027FA  51C7               	movf	(angleToPulse@a180+2)& (0+255),w,b
 13263  0027FC  0100               	movlb	0	; () banked
 13264  0027FE  21BF               	addwfc	(??_angleToPulse+2)& (0+255),w,b
 13265  002800  6E2F               	movwf	___altoft@c+2,c
 13266  002802  0100               	movlb	0	; () banked
 13267  002804  51C8               	movf	(angleToPulse@a180+3)& (0+255),w,b
 13268  002806  0100               	movlb	0	; () banked
 13269  002808  21C0               	addwfc	(??_angleToPulse+3)& (0+255),w,b
 13270  00280A  6E30               	movwf	___altoft@c+3,c
 13271  00280C  ECF7  F01E         	call	___altoft	;wreg free
 13272  002810  C02D  F083         	movff	?___altoft,___ftmul@f2
 13273  002814  C02E  F084         	movff	?___altoft+1,___ftmul@f2+1
 13274  002818  C02F  F085         	movff	?___altoft+2,___ftmul@f2+2
 13275  00281C  0E00               	movlw	0
 13276  00281E  0100               	movlb	0	; () banked
 13277  002820  6F92               	movwf	___ftdiv@f2& (0+255),b
 13278  002822  0E34               	movlw	52
 13279  002824  0100               	movlb	0	; () banked
 13280  002826  6F93               	movwf	(___ftdiv@f2+1)& (0+255),b
 13281  002828  0E43               	movlw	67
 13282  00282A  0100               	movlb	0	; () banked
 13283  00282C  6F94               	movwf	(___ftdiv@f2+2)& (0+255),b
 13284  00282E  C0B9  F02D         	movff	angleToPulse@angle,___awtoft@c
 13285  002832  C0BA  F02E         	movff	angleToPulse@angle+1,___awtoft@c+1
 13286  002836  EC0D  F022         	call	___awtoft	;wreg free
 13287  00283A  C02D  F08F         	movff	?___awtoft,___ftdiv@f1
 13288  00283E  C02E  F090         	movff	?___awtoft+1,___ftdiv@f1+1
 13289  002842  C02F  F091         	movff	?___awtoft+2,___ftdiv@f1+2
 13290  002846  EC23  F015         	call	___ftdiv	;wreg free
 13291  00284A  C08F  F080         	movff	?___ftdiv,___ftmul@f1
 13292  00284E  C090  F081         	movff	?___ftdiv+1,___ftmul@f1+1
 13293  002852  C091  F082         	movff	?___ftdiv+2,___ftmul@f1+2
 13294  002856  EC74  F014         	call	___ftmul	;wreg free
 13295  00285A  C080  F0A1         	movff	?___ftmul,___ftadd@f2
 13296  00285E  C081  F0A2         	movff	?___ftmul+1,___ftadd@f2+1
 13297  002862  C082  F0A3         	movff	?___ftmul+2,___ftadd@f2+2
 13298  002866  C0CC  F02D         	movff	angleToPulse@a000,___altoft@c
 13299  00286A  C0CD  F02E         	movff	angleToPulse@a000+1,___altoft@c+1
 13300  00286E  C0CE  F02F         	movff	angleToPulse@a000+2,___altoft@c+2
 13301  002872  C0CF  F030         	movff	angleToPulse@a000+3,___altoft@c+3
 13302  002876  ECF7  F01E         	call	___altoft	;wreg free
 13303  00287A  C02D  F09E         	movff	?___altoft,___ftadd@f1
 13304  00287E  C02E  F09F         	movff	?___altoft+1,___ftadd@f1+1
 13305  002882  C02F  F0A0         	movff	?___altoft+2,___ftadd@f1+2
 13306  002886  ECE0  F00F         	call	___ftadd	;wreg free
 13307  00288A  C09E  F0C9         	movff	?___ftadd,_angleToPulse$1419
 13308  00288E  C09F  F0CA         	movff	?___ftadd+1,_angleToPulse$1419+1
 13309  002892  C0A0  F0CB         	movff	?___ftadd+2,_angleToPulse$1419+2
 13310                           
 13311                           ;servo.c: 44: return a000 + angle/180.0*(a180-a000) + offset;
 13312  002896  C0C1  F02D         	movff	angleToPulse@offset,___altoft@c
 13313  00289A  C0C2  F02E         	movff	angleToPulse@offset+1,___altoft@c+1
 13314  00289E  C0C3  F02F         	movff	angleToPulse@offset+2,___altoft@c+2
 13315  0028A2  C0C4  F030         	movff	angleToPulse@offset+3,___altoft@c+3
 13316  0028A6  ECF7  F01E         	call	___altoft	;wreg free
 13317  0028AA  C02D  F0A1         	movff	?___altoft,___ftadd@f2
 13318  0028AE  C02E  F0A2         	movff	?___altoft+1,___ftadd@f2+1
 13319  0028B2  C02F  F0A3         	movff	?___altoft+2,___ftadd@f2+2
 13320  0028B6  C0C9  F09E         	movff	_angleToPulse$1419,___ftadd@f1
 13321  0028BA  C0CA  F09F         	movff	_angleToPulse$1419+1,___ftadd@f1+1
 13322  0028BE  C0CB  F0A0         	movff	_angleToPulse$1419+2,___ftadd@f1+2
 13323  0028C2  ECE0  F00F         	call	___ftadd	;wreg free
 13324  0028C6  C09E  F0AA         	movff	?___ftadd,___fttol@f1
 13325  0028CA  C09F  F0AB         	movff	?___ftadd+1,___fttol@f1+1
 13326  0028CE  C0A0  F0AC         	movff	?___ftadd+2,___fttol@f1+2
 13327  0028D2  ECC9  F015         	call	___fttol	;wreg free
 13328  0028D6  C0AA  F0B9         	movff	?___fttol,?_angleToPulse
 13329  0028DA  C0AB  F0BA         	movff	?___fttol+1,?_angleToPulse+1
 13330  0028DE  C0AC  F0BB         	movff	?___fttol+2,?_angleToPulse+2
 13331  0028E2  C0AD  F0BC         	movff	?___fttol+3,?_angleToPulse+3
 13332  0028E6  0012               	return	
 13333  0028E8                     __end_of_angleToPulse:
 13334                           	opt stack 0
 13335                           tblptru	equ	0xFF8
 13336                           tblptrh	equ	0xFF7
 13337                           tblptrl	equ	0xFF6
 13338                           tablat	equ	0xFF5
 13339                           prodh	equ	0xFF4
 13340                           prodl	equ	0xFF3
 13341                           intcon	equ	0xFF2
 13342                           intcon3	equ	0xFF0
 13343                           postinc0	equ	0xFEE
 13344                           wreg	equ	0xFE8
 13345                           postdec1	equ	0xFE5
 13346                           fsr1l	equ	0xFE1
 13347                           indf2	equ	0xFDF
 13348                           postinc2	equ	0xFDE
 13349                           postdec2	equ	0xFDD
 13350                           fsr2h	equ	0xFDA
 13351                           fsr2l	equ	0xFD9
 13352                           status	equ	0xFD8
 13353                           
 13354 ;; *************** function ___fttol *****************
 13355 ;; Defined at:
 13356 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 13357 ;; Parameters:    Size  Location     Type
 13358 ;;  f1              3   42[BANK0 ] float 
 13359 ;; Auto vars:     Size  Location     Type
 13360 ;;  lval            4   52[BANK0 ] unsigned long 
 13361 ;;  exp1            1   56[BANK0 ] unsigned char 
 13362 ;;  sign1           1   51[BANK0 ] unsigned char 
 13363 ;; Return value:  Size  Location     Type
 13364 ;;                  4   42[BANK0 ] long 
 13365 ;; Registers used:
 13366 ;;		wreg, status,2, status,0
 13367 ;; Tracked objects:
 13368 ;;		On entry : 0/0
 13369 ;;		On exit  : 0/0
 13370 ;;		Unchanged: 0/0
 13371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13372 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13373 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13374 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13375 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13376 ;;Total ram usage:       15 bytes
 13377 ;; Hardware stack levels used:    1
 13378 ;; Hardware stack levels required when called:    3
 13379 ;; This function calls:
 13380 ;;		Nothing
 13381 ;; This function is called by:
 13382 ;;		_main
 13383 ;;		_sortBattery
 13384 ;;		_angleToPulse
 13385 ;;		_printf
 13386 ;; This function uses a non-reentrant model
 13387 ;;
 13388                           
 13389                           	psect	text53
 13390  002B92                     __ptext53:
 13391                           	opt stack 0
 13392  002B92                     ___fttol:
 13393                           	opt stack 24
 13394                           
 13395                           ;incstack = 0
 13396  002B92  C0AC  F0AE         	movff	___fttol@f1+2,??___fttol
 13397  002B96  0100               	movlb	0	; () banked
 13398  002B98  6BAF               	clrf	(??___fttol+1)& (0+255),b
 13399  002B9A  6BB0               	clrf	(??___fttol+2)& (0+255),b
 13400  002B9C  0100               	movlb	0	; () banked
 13401  002B9E  35AB               	rlcf	(___fttol@f1+1)& (0+255),w,b
 13402  002BA0  0100               	movlb	0	; () banked
 13403  002BA2  37AE               	rlcf	??___fttol& (0+255),f,b
 13404  002BA4  E301               	bnc	u6781
 13405  002BA6  81AF               	bsf	(??___fttol+1)& (0+255),0,b
 13406  002BA8                     u6781:
 13407  002BA8  0100               	movlb	0	; () banked
 13408  002BAA  51AE               	movf	??___fttol& (0+255),w,b
 13409  002BAC  0100               	movlb	0	; () banked
 13410  002BAE  6FB8               	movwf	___fttol@exp1& (0+255),b
 13411  002BB0  0100               	movlb	0	; () banked
 13412  002BB2  51B8               	movf	___fttol@exp1& (0+255),w,b
 13413  002BB4  A4D8               	btfss	status,2,c
 13414  002BB6  D00A               	goto	l6714
 13415                           
 13416                           ; BSR set to: 0
 13417  002BB8  0E00               	movlw	0
 13418  002BBA  0100               	movlb	0	; () banked
 13419  002BBC  6FAA               	movwf	?___fttol& (0+255),b
 13420  002BBE  0E00               	movlw	0
 13421  002BC0  6FAB               	movwf	(?___fttol+1)& (0+255),b
 13422  002BC2  0E00               	movlw	0
 13423  002BC4  6FAC               	movwf	(?___fttol+2)& (0+255),b
 13424  002BC6  0E00               	movlw	0
 13425  002BC8  6FAD               	movwf	(?___fttol+3)& (0+255),b
 13426                           
 13427                           ; BSR set to: 0
 13428  002BCA  0012               	return	
 13429  002BCC                     l6714:
 13430                           
 13431                           ; BSR set to: 0
 13432  002BCC  0E17               	movlw	23
 13433  002BCE  0100               	movlb	0	; () banked
 13434  002BD0  6FAE               	movwf	??___fttol& (0+255),b
 13435  002BD2  C0AA  F0AF         	movff	___fttol@f1,??___fttol+1
 13436  002BD6  C0AB  F0B0         	movff	___fttol@f1+1,??___fttol+2
 13437  002BDA  C0AC  F0B1         	movff	___fttol@f1+2,??___fttol+3
 13438  002BDE  0100               	movlb	0	; () banked
 13439  002BE0  29AE               	incf	??___fttol& (0+255),w,b
 13440  002BE2  0100               	movlb	0	; () banked
 13441  002BE4  6FB2               	movwf	(??___fttol+4)& (0+255),b
 13442  002BE6  D005               	goto	u6800
 13443  002BE8                     u6805:
 13444  002BE8  0100               	movlb	0	; () banked
 13445  002BEA  90D8               	bcf	status,0,c
 13446  002BEC  33B1               	rrcf	(??___fttol+3)& (0+255),f,b
 13447  002BEE  33B0               	rrcf	(??___fttol+2)& (0+255),f,b
 13448  002BF0  33AF               	rrcf	(??___fttol+1)& (0+255),f,b
 13449  002BF2                     u6800:
 13450  002BF2  0100               	movlb	0	; () banked
 13451  002BF4  2FB2               	decfsz	(??___fttol+4)& (0+255),f,b
 13452  002BF6  D7F8               	goto	u6805
 13453  002BF8  0100               	movlb	0	; () banked
 13454  002BFA  51AF               	movf	(??___fttol+1)& (0+255),w,b
 13455  002BFC  0100               	movlb	0	; () banked
 13456  002BFE  6FB3               	movwf	___fttol@sign1& (0+255),b
 13457                           
 13458                           ; BSR set to: 0
 13459  002C00  0100               	movlb	0	; () banked
 13460  002C02  8FAB               	bsf	(___fttol@f1+1)& (0+255),7,b
 13461                           
 13462                           ; BSR set to: 0
 13463  002C04  0EFF               	movlw	255
 13464  002C06  0100               	movlb	0	; () banked
 13465  002C08  17AA               	andwf	___fttol@f1& (0+255),f,b
 13466  002C0A  0EFF               	movlw	255
 13467  002C0C  0100               	movlb	0	; () banked
 13468  002C0E  17AB               	andwf	(___fttol@f1+1)& (0+255),f,b
 13469  002C10  0E00               	movlw	0
 13470  002C12  0100               	movlb	0	; () banked
 13471  002C14  17AC               	andwf	(___fttol@f1+2)& (0+255),f,b
 13472                           
 13473                           ; BSR set to: 0
 13474  002C16  0100               	movlb	0	; () banked
 13475  002C18  51AA               	movf	___fttol@f1& (0+255),w,b
 13476  002C1A  0100               	movlb	0	; () banked
 13477  002C1C  6FB4               	movwf	___fttol@lval& (0+255),b
 13478  002C1E  0100               	movlb	0	; () banked
 13479  002C20  51AB               	movf	(___fttol@f1+1)& (0+255),w,b
 13480  002C22  0100               	movlb	0	; () banked
 13481  002C24  6FB5               	movwf	(___fttol@lval+1)& (0+255),b
 13482  002C26  0100               	movlb	0	; () banked
 13483  002C28  51AC               	movf	(___fttol@f1+2)& (0+255),w,b
 13484  002C2A  0100               	movlb	0	; () banked
 13485  002C2C  6FB6               	movwf	(___fttol@lval+2)& (0+255),b
 13486  002C2E  0100               	movlb	0	; () banked
 13487  002C30  6BB7               	clrf	(___fttol@lval+3)& (0+255),b
 13488                           
 13489                           ; BSR set to: 0
 13490  002C32  0E8E               	movlw	142
 13491  002C34  0100               	movlb	0	; () banked
 13492  002C36  5FB8               	subwf	___fttol@exp1& (0+255),f,b
 13493                           
 13494                           ; BSR set to: 0
 13495  002C38  0100               	movlb	0	; () banked
 13496  002C3A  AFB8               	btfss	___fttol@exp1& (0+255),7,b
 13497  002C3C  D01A               	goto	l6736
 13498                           
 13499                           ; BSR set to: 0
 13500  002C3E  0100               	movlb	0	; () banked
 13501  002C40  51B8               	movf	___fttol@exp1& (0+255),w,b
 13502  002C42  0A80               	xorlw	128
 13503  002C44  0F8F               	addlw	143
 13504  002C46  B0D8               	btfsc	status,0,c
 13505  002C48  D00A               	goto	l6732
 13506                           
 13507                           ; BSR set to: 0
 13508  002C4A  0E00               	movlw	0
 13509  002C4C  0100               	movlb	0	; () banked
 13510  002C4E  6FAA               	movwf	?___fttol& (0+255),b
 13511  002C50  0E00               	movlw	0
 13512  002C52  6FAB               	movwf	(?___fttol+1)& (0+255),b
 13513  002C54  0E00               	movlw	0
 13514  002C56  6FAC               	movwf	(?___fttol+2)& (0+255),b
 13515  002C58  0E00               	movlw	0
 13516  002C5A  6FAD               	movwf	(?___fttol+3)& (0+255),b
 13517                           
 13518                           ; BSR set to: 0
 13519  002C5C  0012               	return	
 13520  002C5E                     l6732:
 13521                           
 13522                           ; BSR set to: 0
 13523  002C5E  0100               	movlb	0	; () banked
 13524  002C60  90D8               	bcf	status,0,c
 13525  002C62  33B7               	rrcf	(___fttol@lval+3)& (0+255),f,b
 13526  002C64  33B6               	rrcf	(___fttol@lval+2)& (0+255),f,b
 13527  002C66  33B5               	rrcf	(___fttol@lval+1)& (0+255),f,b
 13528  002C68  33B4               	rrcf	___fttol@lval& (0+255),f,b
 13529                           
 13530                           ; BSR set to: 0
 13531  002C6A  0100               	movlb	0	; () banked
 13532  002C6C  3FB8               	incfsz	___fttol@exp1& (0+255),f,b
 13533  002C6E  D7F7               	goto	l6732
 13534                           
 13535                           ; BSR set to: 0
 13536  002C70  D01B               	goto	l6746
 13537  002C72                     l6736:
 13538                           
 13539                           ; BSR set to: 0
 13540  002C72  0E17               	movlw	23
 13541  002C74  0100               	movlb	0	; () banked
 13542  002C76  65B8               	cpfsgt	___fttol@exp1& (0+255),b
 13543  002C78  D012               	goto	l6744
 13544                           
 13545                           ; BSR set to: 0
 13546  002C7A  0E00               	movlw	0
 13547  002C7C  0100               	movlb	0	; () banked
 13548  002C7E  6FAA               	movwf	?___fttol& (0+255),b
 13549  002C80  0E00               	movlw	0
 13550  002C82  6FAB               	movwf	(?___fttol+1)& (0+255),b
 13551  002C84  0E00               	movlw	0
 13552  002C86  6FAC               	movwf	(?___fttol+2)& (0+255),b
 13553  002C88  0E00               	movlw	0
 13554  002C8A  6FAD               	movwf	(?___fttol+3)& (0+255),b
 13555                           
 13556                           ; BSR set to: 0
 13557  002C8C  0012               	return	
 13558  002C8E                     l6742:
 13559                           
 13560                           ; BSR set to: 0
 13561  002C8E  0100               	movlb	0	; () banked
 13562  002C90  90D8               	bcf	status,0,c
 13563  002C92  37B4               	rlcf	___fttol@lval& (0+255),f,b
 13564  002C94  37B5               	rlcf	(___fttol@lval+1)& (0+255),f,b
 13565  002C96  37B6               	rlcf	(___fttol@lval+2)& (0+255),f,b
 13566  002C98  37B7               	rlcf	(___fttol@lval+3)& (0+255),f,b
 13567  002C9A  0100               	movlb	0	; () banked
 13568  002C9C  07B8               	decf	___fttol@exp1& (0+255),f,b
 13569  002C9E                     l6744:
 13570                           
 13571                           ; BSR set to: 0
 13572  002C9E  0100               	movlb	0	; () banked
 13573  002CA0  51B8               	movf	___fttol@exp1& (0+255),w,b
 13574  002CA2  0100               	movlb	0	; () banked
 13575  002CA4  A4D8               	btfss	status,2,c
 13576  002CA6  D7F3               	goto	l6742
 13577  002CA8                     l6746:
 13578                           
 13579                           ; BSR set to: 0
 13580  002CA8  0100               	movlb	0	; () banked
 13581  002CAA  51B3               	movf	___fttol@sign1& (0+255),w,b
 13582  002CAC  0100               	movlb	0	; () banked
 13583  002CAE  B4D8               	btfsc	status,2,c
 13584  002CB0  D009               	goto	l6750
 13585                           
 13586                           ; BSR set to: 0
 13587  002CB2  0100               	movlb	0	; () banked
 13588  002CB4  1FB7               	comf	(___fttol@lval+3)& (0+255),f,b
 13589  002CB6  1FB6               	comf	(___fttol@lval+2)& (0+255),f,b
 13590  002CB8  1FB5               	comf	(___fttol@lval+1)& (0+255),f,b
 13591  002CBA  6DB4               	negf	___fttol@lval& (0+255),b
 13592  002CBC  0E00               	movlw	0
 13593  002CBE  23B5               	addwfc	(___fttol@lval+1)& (0+255),f,b
 13594  002CC0  23B6               	addwfc	(___fttol@lval+2)& (0+255),f,b
 13595  002CC2  23B7               	addwfc	(___fttol@lval+3)& (0+255),f,b
 13596  002CC4                     l6750:
 13597                           
 13598                           ; BSR set to: 0
 13599  002CC4  C0B4  F0AA         	movff	___fttol@lval,?___fttol
 13600  002CC8  C0B5  F0AB         	movff	___fttol@lval+1,?___fttol+1
 13601  002CCC  C0B6  F0AC         	movff	___fttol@lval+2,?___fttol+2
 13602  002CD0  C0B7  F0AD         	movff	___fttol@lval+3,?___fttol+3
 13603  002CD4  0012               	return	
 13604  002CD6                     __end_of___fttol:
 13605                           	opt stack 0
 13606                           tblptru	equ	0xFF8
 13607                           tblptrh	equ	0xFF7
 13608                           tblptrl	equ	0xFF6
 13609                           tablat	equ	0xFF5
 13610                           prodh	equ	0xFF4
 13611                           prodl	equ	0xFF3
 13612                           intcon	equ	0xFF2
 13613                           intcon3	equ	0xFF0
 13614                           postinc0	equ	0xFEE
 13615                           wreg	equ	0xFE8
 13616                           postdec1	equ	0xFE5
 13617                           fsr1l	equ	0xFE1
 13618                           indf2	equ	0xFDF
 13619                           postinc2	equ	0xFDE
 13620                           postdec2	equ	0xFDD
 13621                           fsr2h	equ	0xFDA
 13622                           fsr2l	equ	0xFD9
 13623                           status	equ	0xFD8
 13624                           
 13625 ;; *************** function ___ftmul *****************
 13626 ;; Defined at:
 13627 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 13628 ;; Parameters:    Size  Location     Type
 13629 ;;  f1              3    0[BANK0 ] float 
 13630 ;;  f2              3    3[BANK0 ] float 
 13631 ;; Auto vars:     Size  Location     Type
 13632 ;;  f3_as_produc    3   10[BANK0 ] unsigned um
 13633 ;;  sign            1   14[BANK0 ] unsigned char 
 13634 ;;  cntr            1   13[BANK0 ] unsigned char 
 13635 ;;  exp             1    9[BANK0 ] unsigned char 
 13636 ;; Return value:  Size  Location     Type
 13637 ;;                  3    0[BANK0 ] float 
 13638 ;; Registers used:
 13639 ;;		wreg, status,2, status,0, cstack
 13640 ;; Tracked objects:
 13641 ;;		On entry : 0/0
 13642 ;;		On exit  : 0/0
 13643 ;;		Unchanged: 0/0
 13644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13645 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13646 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13647 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13648 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13649 ;;Total ram usage:       15 bytes
 13650 ;; Hardware stack levels used:    1
 13651 ;; Hardware stack levels required when called:    4
 13652 ;; This function calls:
 13653 ;;		___ftpack
 13654 ;; This function is called by:
 13655 ;;		_main
 13656 ;;		_sortBattery
 13657 ;;		_angleToPulse
 13658 ;;		_fround
 13659 ;;		_scale
 13660 ;;		_printf
 13661 ;; This function uses a non-reentrant model
 13662 ;;
 13663                           
 13664                           	psect	text54
 13665  0028E8                     __ptext54:
 13666                           	opt stack 0
 13667  0028E8                     ___ftmul:
 13668                           	opt stack 23
 13669                           
 13670                           ; BSR set to: 0
 13671                           ;incstack = 0
 13672  0028E8  C082  F086         	movff	___ftmul@f1+2,??___ftmul
 13673  0028EC  0100               	movlb	0	; () banked
 13674  0028EE  6B87               	clrf	(??___ftmul+1)& (0+255),b
 13675  0028F0  6B88               	clrf	(??___ftmul+2)& (0+255),b
 13676  0028F2  0100               	movlb	0	; () banked
 13677  0028F4  3581               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 13678  0028F6  0100               	movlb	0	; () banked
 13679  0028F8  3786               	rlcf	??___ftmul& (0+255),f,b
 13680  0028FA  E301               	bnc	u6151
 13681  0028FC  8187               	bsf	(??___ftmul+1)& (0+255),0,b
 13682  0028FE                     u6151:
 13683  0028FE  0100               	movlb	0	; () banked
 13684  002900  5186               	movf	??___ftmul& (0+255),w,b
 13685  002902  0100               	movlb	0	; () banked
 13686  002904  6F89               	movwf	___ftmul@exp& (0+255),b
 13687  002906  0100               	movlb	0	; () banked
 13688  002908  5189               	movf	___ftmul@exp& (0+255),w,b
 13689  00290A  A4D8               	btfss	status,2,c
 13690  00290C  D00A               	goto	l6230
 13691                           
 13692                           ; BSR set to: 0
 13693  00290E  0E00               	movlw	0
 13694  002910  0100               	movlb	0	; () banked
 13695  002912  6F80               	movwf	?___ftmul& (0+255),b
 13696  002914  0E00               	movlw	0
 13697  002916  0100               	movlb	0	; () banked
 13698  002918  6F81               	movwf	(?___ftmul+1)& (0+255),b
 13699  00291A  0E00               	movlw	0
 13700  00291C  0100               	movlb	0	; () banked
 13701  00291E  6F82               	movwf	(?___ftmul+2)& (0+255),b
 13702                           
 13703                           ; BSR set to: 0
 13704  002920  0012               	return	
 13705  002922                     l6230:
 13706                           
 13707                           ; BSR set to: 0
 13708  002922  C085  F086         	movff	___ftmul@f2+2,??___ftmul
 13709  002926  0100               	movlb	0	; () banked
 13710  002928  6B87               	clrf	(??___ftmul+1)& (0+255),b
 13711  00292A  6B88               	clrf	(??___ftmul+2)& (0+255),b
 13712  00292C  0100               	movlb	0	; () banked
 13713  00292E  3584               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 13714  002930  0100               	movlb	0	; () banked
 13715  002932  3786               	rlcf	??___ftmul& (0+255),f,b
 13716  002934  E301               	bnc	u6171
 13717  002936  8187               	bsf	(??___ftmul+1)& (0+255),0,b
 13718  002938                     u6171:
 13719  002938  0100               	movlb	0	; () banked
 13720  00293A  5186               	movf	??___ftmul& (0+255),w,b
 13721  00293C  0100               	movlb	0	; () banked
 13722  00293E  6F8E               	movwf	___ftmul@sign& (0+255),b
 13723  002940  0100               	movlb	0	; () banked
 13724  002942  518E               	movf	___ftmul@sign& (0+255),w,b
 13725  002944  A4D8               	btfss	status,2,c
 13726  002946  D00A               	goto	l6236
 13727                           
 13728                           ; BSR set to: 0
 13729  002948  0E00               	movlw	0
 13730  00294A  0100               	movlb	0	; () banked
 13731  00294C  6F80               	movwf	?___ftmul& (0+255),b
 13732  00294E  0E00               	movlw	0
 13733  002950  0100               	movlb	0	; () banked
 13734  002952  6F81               	movwf	(?___ftmul+1)& (0+255),b
 13735  002954  0E00               	movlw	0
 13736  002956  0100               	movlb	0	; () banked
 13737  002958  6F82               	movwf	(?___ftmul+2)& (0+255),b
 13738                           
 13739                           ; BSR set to: 0
 13740  00295A  0012               	return	
 13741  00295C                     l6236:
 13742                           
 13743                           ; BSR set to: 0
 13744  00295C  0100               	movlb	0	; () banked
 13745  00295E  518E               	movf	___ftmul@sign& (0+255),w,b
 13746  002960  0F7B               	addlw	123
 13747  002962  0100               	movlb	0	; () banked
 13748  002964  2789               	addwf	___ftmul@exp& (0+255),f,b
 13749                           
 13750                           ; BSR set to: 0
 13751  002966  C082  F08E         	movff	___ftmul@f1+2,___ftmul@sign
 13752  00296A  0100               	movlb	0	; () banked
 13753  00296C  5185               	movf	(___ftmul@f2+2)& (0+255),w,b
 13754  00296E  0100               	movlb	0	; () banked
 13755  002970  1B8E               	xorwf	___ftmul@sign& (0+255),f,b
 13756  002972  0E80               	movlw	128
 13757  002974  0100               	movlb	0	; () banked
 13758  002976  178E               	andwf	___ftmul@sign& (0+255),f,b
 13759                           
 13760                           ; BSR set to: 0
 13761  002978  0100               	movlb	0	; () banked
 13762  00297A  8F81               	bsf	(___ftmul@f1+1)& (0+255),7,b
 13763                           
 13764                           ; BSR set to: 0
 13765  00297C  0100               	movlb	0	; () banked
 13766  00297E  8F84               	bsf	(___ftmul@f2+1)& (0+255),7,b
 13767                           
 13768                           ; BSR set to: 0
 13769  002980  0EFF               	movlw	255
 13770  002982  0100               	movlb	0	; () banked
 13771  002984  1783               	andwf	___ftmul@f2& (0+255),f,b
 13772  002986  0EFF               	movlw	255
 13773  002988  0100               	movlb	0	; () banked
 13774  00298A  1784               	andwf	(___ftmul@f2+1)& (0+255),f,b
 13775  00298C  0E00               	movlw	0
 13776  00298E  0100               	movlb	0	; () banked
 13777  002990  1785               	andwf	(___ftmul@f2+2)& (0+255),f,b
 13778                           
 13779                           ; BSR set to: 0
 13780  002992  0E00               	movlw	0
 13781  002994  0100               	movlb	0	; () banked
 13782  002996  6F8A               	movwf	___ftmul@f3_as_product& (0+255),b
 13783  002998  0E00               	movlw	0
 13784  00299A  0100               	movlb	0	; () banked
 13785  00299C  6F8B               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 13786  00299E  0E00               	movlw	0
 13787  0029A0  0100               	movlb	0	; () banked
 13788  0029A2  6F8C               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 13789                           
 13790                           ; BSR set to: 0
 13791  0029A4  0E07               	movlw	7
 13792  0029A6  0100               	movlb	0	; () banked
 13793  0029A8  6F8D               	movwf	___ftmul@cntr& (0+255),b
 13794  0029AA                     l6250:
 13795                           
 13796                           ; BSR set to: 0
 13797  0029AA  0100               	movlb	0	; () banked
 13798  0029AC  A180               	btfss	___ftmul@f1& (0+255),0,b
 13799  0029AE  D00C               	goto	l6254
 13800                           
 13801                           ; BSR set to: 0
 13802  0029B0  0100               	movlb	0	; () banked
 13803  0029B2  5183               	movf	___ftmul@f2& (0+255),w,b
 13804  0029B4  0100               	movlb	0	; () banked
 13805  0029B6  278A               	addwf	___ftmul@f3_as_product& (0+255),f,b
 13806  0029B8  0100               	movlb	0	; () banked
 13807  0029BA  5184               	movf	(___ftmul@f2+1)& (0+255),w,b
 13808  0029BC  0100               	movlb	0	; () banked
 13809  0029BE  238B               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 13810  0029C0  0100               	movlb	0	; () banked
 13811  0029C2  5185               	movf	(___ftmul@f2+2)& (0+255),w,b
 13812  0029C4  0100               	movlb	0	; () banked
 13813  0029C6  238C               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 13814  0029C8                     l6254:
 13815                           
 13816                           ; BSR set to: 0
 13817  0029C8  0100               	movlb	0	; () banked
 13818  0029CA  90D8               	bcf	status,0,c
 13819  0029CC  3382               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 13820  0029CE  3381               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 13821  0029D0  3380               	rrcf	___ftmul@f1& (0+255),f,b
 13822  0029D2  0100               	movlb	0	; () banked
 13823  0029D4  90D8               	bcf	status,0,c
 13824  0029D6  3783               	rlcf	___ftmul@f2& (0+255),f,b
 13825  0029D8  3784               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 13826  0029DA  3785               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 13827                           
 13828                           ; BSR set to: 0
 13829  0029DC  0100               	movlb	0	; () banked
 13830  0029DE  2F8D               	decfsz	___ftmul@cntr& (0+255),f,b
 13831  0029E0  D7E4               	goto	l6250
 13832                           
 13833                           ; BSR set to: 0
 13834                           
 13835                           ; BSR set to: 0
 13836  0029E2  0E09               	movlw	9
 13837  0029E4  0100               	movlb	0	; () banked
 13838  0029E6  6F8D               	movwf	___ftmul@cntr& (0+255),b
 13839  0029E8                     l6260:
 13840                           
 13841                           ; BSR set to: 0
 13842  0029E8  0100               	movlb	0	; () banked
 13843  0029EA  A180               	btfss	___ftmul@f1& (0+255),0,b
 13844  0029EC  D00C               	goto	l6264
 13845                           
 13846                           ; BSR set to: 0
 13847  0029EE  0100               	movlb	0	; () banked
 13848  0029F0  5183               	movf	___ftmul@f2& (0+255),w,b
 13849  0029F2  0100               	movlb	0	; () banked
 13850  0029F4  278A               	addwf	___ftmul@f3_as_product& (0+255),f,b
 13851  0029F6  0100               	movlb	0	; () banked
 13852  0029F8  5184               	movf	(___ftmul@f2+1)& (0+255),w,b
 13853  0029FA  0100               	movlb	0	; () banked
 13854  0029FC  238B               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 13855  0029FE  0100               	movlb	0	; () banked
 13856  002A00  5185               	movf	(___ftmul@f2+2)& (0+255),w,b
 13857  002A02  0100               	movlb	0	; () banked
 13858  002A04  238C               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 13859  002A06                     l6264:
 13860                           
 13861                           ; BSR set to: 0
 13862  002A06  0100               	movlb	0	; () banked
 13863  002A08  90D8               	bcf	status,0,c
 13864  002A0A  3382               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 13865  002A0C  3381               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 13866  002A0E  3380               	rrcf	___ftmul@f1& (0+255),f,b
 13867  002A10  0100               	movlb	0	; () banked
 13868  002A12  90D8               	bcf	status,0,c
 13869  002A14  338C               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 13870  002A16  338B               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 13871  002A18  338A               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 13872                           
 13873                           ; BSR set to: 0
 13874  002A1A  0100               	movlb	0	; () banked
 13875  002A1C  2F8D               	decfsz	___ftmul@cntr& (0+255),f,b
 13876  002A1E  D7E4               	goto	l6260
 13877                           
 13878                           ; BSR set to: 0
 13879                           
 13880                           ; BSR set to: 0
 13881  002A20  C08A  F025         	movff	___ftmul@f3_as_product,___ftpack@arg
 13882  002A24  C08B  F026         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 13883  002A28  C08C  F027         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 13884  002A2C  C089  F028         	movff	___ftmul@exp,___ftpack@exp
 13885  002A30  C08E  F029         	movff	___ftmul@sign,___ftpack@sign
 13886  002A34  EC57  F01C         	call	___ftpack	;wreg free
 13887  002A38  C025  F080         	movff	?___ftpack,?___ftmul
 13888  002A3C  C026  F081         	movff	?___ftpack+1,?___ftmul+1
 13889  002A40  C027  F082         	movff	?___ftpack+2,?___ftmul+2
 13890  002A44  0012               	return	
 13891  002A46                     __end_of___ftmul:
 13892                           	opt stack 0
 13893                           tblptru	equ	0xFF8
 13894                           tblptrh	equ	0xFF7
 13895                           tblptrl	equ	0xFF6
 13896                           tablat	equ	0xFF5
 13897                           prodh	equ	0xFF4
 13898                           prodl	equ	0xFF3
 13899                           intcon	equ	0xFF2
 13900                           intcon3	equ	0xFF0
 13901                           postinc0	equ	0xFEE
 13902                           wreg	equ	0xFE8
 13903                           postdec1	equ	0xFE5
 13904                           fsr1l	equ	0xFE1
 13905                           indf2	equ	0xFDF
 13906                           postinc2	equ	0xFDE
 13907                           postdec2	equ	0xFDD
 13908                           fsr2h	equ	0xFDA
 13909                           fsr2l	equ	0xFD9
 13910                           status	equ	0xFD8
 13911                           
 13912 ;; *************** function ___ftdiv *****************
 13913 ;; Defined at:
 13914 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 13915 ;; Parameters:    Size  Location     Type
 13916 ;;  f1              3   15[BANK0 ] float 
 13917 ;;  f2              3   18[BANK0 ] float 
 13918 ;; Auto vars:     Size  Location     Type
 13919 ;;  f3              3   25[BANK0 ] float 
 13920 ;;  sign            1   29[BANK0 ] unsigned char 
 13921 ;;  exp             1   28[BANK0 ] unsigned char 
 13922 ;;  cntr            1   24[BANK0 ] unsigned char 
 13923 ;; Return value:  Size  Location     Type
 13924 ;;                  3   15[BANK0 ] float 
 13925 ;; Registers used:
 13926 ;;		wreg, status,2, status,0, cstack
 13927 ;; Tracked objects:
 13928 ;;		On entry : 0/0
 13929 ;;		On exit  : 0/0
 13930 ;;		Unchanged: 0/0
 13931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13932 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13933 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13934 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13935 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13936 ;;Total ram usage:       15 bytes
 13937 ;; Hardware stack levels used:    1
 13938 ;; Hardware stack levels required when called:    4
 13939 ;; This function calls:
 13940 ;;		___ftpack
 13941 ;; This function is called by:
 13942 ;;		_main
 13943 ;;		_sortBattery
 13944 ;;		_angleToPulse
 13945 ;; This function uses a non-reentrant model
 13946 ;;
 13947                           
 13948                           	psect	text55
 13949  002A46                     __ptext55:
 13950                           	opt stack 0
 13951  002A46                     ___ftdiv:
 13952                           	opt stack 23
 13953                           
 13954                           ;incstack = 0
 13955  002A46  C091  F095         	movff	___ftdiv@f1+2,??___ftdiv
 13956  002A4A  0100               	movlb	0	; () banked
 13957  002A4C  6B96               	clrf	(??___ftdiv+1)& (0+255),b
 13958  002A4E  6B97               	clrf	(??___ftdiv+2)& (0+255),b
 13959  002A50  0100               	movlb	0	; () banked
 13960  002A52  3590               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 13961  002A54  0100               	movlb	0	; () banked
 13962  002A56  3795               	rlcf	??___ftdiv& (0+255),f,b
 13963  002A58  E301               	bnc	u6671
 13964  002A5A  8196               	bsf	(??___ftdiv+1)& (0+255),0,b
 13965  002A5C                     u6671:
 13966  002A5C  0100               	movlb	0	; () banked
 13967  002A5E  5195               	movf	??___ftdiv& (0+255),w,b
 13968  002A60  0100               	movlb	0	; () banked
 13969  002A62  6F9C               	movwf	___ftdiv@exp& (0+255),b
 13970  002A64  0100               	movlb	0	; () banked
 13971  002A66  519C               	movf	___ftdiv@exp& (0+255),w,b
 13972  002A68  A4D8               	btfss	status,2,c
 13973  002A6A  D00A               	goto	l6626
 13974                           
 13975                           ; BSR set to: 0
 13976  002A6C  0E00               	movlw	0
 13977  002A6E  0100               	movlb	0	; () banked
 13978  002A70  6F8F               	movwf	?___ftdiv& (0+255),b
 13979  002A72  0E00               	movlw	0
 13980  002A74  0100               	movlb	0	; () banked
 13981  002A76  6F90               	movwf	(?___ftdiv+1)& (0+255),b
 13982  002A78  0E00               	movlw	0
 13983  002A7A  0100               	movlb	0	; () banked
 13984  002A7C  6F91               	movwf	(?___ftdiv+2)& (0+255),b
 13985                           
 13986                           ; BSR set to: 0
 13987  002A7E  0012               	return	
 13988  002A80                     l6626:
 13989                           
 13990                           ; BSR set to: 0
 13991  002A80  C094  F095         	movff	___ftdiv@f2+2,??___ftdiv
 13992  002A84  0100               	movlb	0	; () banked
 13993  002A86  6B96               	clrf	(??___ftdiv+1)& (0+255),b
 13994  002A88  6B97               	clrf	(??___ftdiv+2)& (0+255),b
 13995  002A8A  0100               	movlb	0	; () banked
 13996  002A8C  3593               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 13997  002A8E  0100               	movlb	0	; () banked
 13998  002A90  3795               	rlcf	??___ftdiv& (0+255),f,b
 13999  002A92  E301               	bnc	u6691
 14000  002A94  8196               	bsf	(??___ftdiv+1)& (0+255),0,b
 14001  002A96                     u6691:
 14002  002A96  0100               	movlb	0	; () banked
 14003  002A98  5195               	movf	??___ftdiv& (0+255),w,b
 14004  002A9A  0100               	movlb	0	; () banked
 14005  002A9C  6F9D               	movwf	___ftdiv@sign& (0+255),b
 14006  002A9E  0100               	movlb	0	; () banked
 14007  002AA0  519D               	movf	___ftdiv@sign& (0+255),w,b
 14008  002AA2  A4D8               	btfss	status,2,c
 14009  002AA4  D00A               	goto	l6632
 14010                           
 14011                           ; BSR set to: 0
 14012  002AA6  0E00               	movlw	0
 14013  002AA8  0100               	movlb	0	; () banked
 14014  002AAA  6F8F               	movwf	?___ftdiv& (0+255),b
 14015  002AAC  0E00               	movlw	0
 14016  002AAE  0100               	movlb	0	; () banked
 14017  002AB0  6F90               	movwf	(?___ftdiv+1)& (0+255),b
 14018  002AB2  0E00               	movlw	0
 14019  002AB4  0100               	movlb	0	; () banked
 14020  002AB6  6F91               	movwf	(?___ftdiv+2)& (0+255),b
 14021                           
 14022                           ; BSR set to: 0
 14023  002AB8  0012               	return	
 14024  002ABA                     l6632:
 14025                           
 14026                           ; BSR set to: 0
 14027  002ABA  0E00               	movlw	0
 14028  002ABC  0100               	movlb	0	; () banked
 14029  002ABE  6F99               	movwf	___ftdiv@f3& (0+255),b
 14030  002AC0  0E00               	movlw	0
 14031  002AC2  0100               	movlb	0	; () banked
 14032  002AC4  6F9A               	movwf	(___ftdiv@f3+1)& (0+255),b
 14033  002AC6  0E00               	movlw	0
 14034  002AC8  0100               	movlb	0	; () banked
 14035  002ACA  6F9B               	movwf	(___ftdiv@f3+2)& (0+255),b
 14036                           
 14037                           ; BSR set to: 0
 14038  002ACC  0100               	movlb	0	; () banked
 14039  002ACE  519D               	movf	___ftdiv@sign& (0+255),w,b
 14040  002AD0  0F89               	addlw	137
 14041  002AD2  0100               	movlb	0	; () banked
 14042  002AD4  5F9C               	subwf	___ftdiv@exp& (0+255),f,b
 14043                           
 14044                           ; BSR set to: 0
 14045  002AD6  C091  F09D         	movff	___ftdiv@f1+2,___ftdiv@sign
 14046                           
 14047                           ; BSR set to: 0
 14048  002ADA  0100               	movlb	0	; () banked
 14049  002ADC  5194               	movf	(___ftdiv@f2+2)& (0+255),w,b
 14050  002ADE  0100               	movlb	0	; () banked
 14051  002AE0  1B9D               	xorwf	___ftdiv@sign& (0+255),f,b
 14052                           
 14053                           ; BSR set to: 0
 14054  002AE2  0E80               	movlw	128
 14055  002AE4  0100               	movlb	0	; () banked
 14056  002AE6  179D               	andwf	___ftdiv@sign& (0+255),f,b
 14057                           
 14058                           ; BSR set to: 0
 14059  002AE8  0100               	movlb	0	; () banked
 14060  002AEA  8F90               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 14061                           
 14062                           ; BSR set to: 0
 14063  002AEC  0EFF               	movlw	255
 14064  002AEE  0100               	movlb	0	; () banked
 14065  002AF0  178F               	andwf	___ftdiv@f1& (0+255),f,b
 14066  002AF2  0EFF               	movlw	255
 14067  002AF4  0100               	movlb	0	; () banked
 14068  002AF6  1790               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 14069  002AF8  0E00               	movlw	0
 14070  002AFA  0100               	movlb	0	; () banked
 14071  002AFC  1791               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 14072                           
 14073                           ; BSR set to: 0
 14074  002AFE  0100               	movlb	0	; () banked
 14075  002B00  8F93               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 14076                           
 14077                           ; BSR set to: 0
 14078  002B02  0EFF               	movlw	255
 14079  002B04  0100               	movlb	0	; () banked
 14080  002B06  1792               	andwf	___ftdiv@f2& (0+255),f,b
 14081  002B08  0EFF               	movlw	255
 14082  002B0A  0100               	movlb	0	; () banked
 14083  002B0C  1793               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 14084  002B0E  0E00               	movlw	0
 14085  002B10  0100               	movlb	0	; () banked
 14086  002B12  1794               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 14087                           
 14088                           ; BSR set to: 0
 14089  002B14  0E18               	movlw	24
 14090  002B16  0100               	movlb	0	; () banked
 14091  002B18  6F98               	movwf	___ftdiv@cntr& (0+255),b
 14092  002B1A                     l6652:
 14093                           
 14094                           ; BSR set to: 0
 14095  002B1A  0100               	movlb	0	; () banked
 14096  002B1C  90D8               	bcf	status,0,c
 14097  002B1E  3799               	rlcf	___ftdiv@f3& (0+255),f,b
 14098  002B20  379A               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 14099  002B22  379B               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 14100                           
 14101                           ; BSR set to: 0
 14102  002B24  0100               	movlb	0	; () banked
 14103  002B26  5192               	movf	___ftdiv@f2& (0+255),w,b
 14104  002B28  0100               	movlb	0	; () banked
 14105  002B2A  5D8F               	subwf	___ftdiv@f1& (0+255),w,b
 14106  002B2C  0100               	movlb	0	; () banked
 14107  002B2E  5193               	movf	(___ftdiv@f2+1)& (0+255),w,b
 14108  002B30  0100               	movlb	0	; () banked
 14109  002B32  5990               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 14110  002B34  0100               	movlb	0	; () banked
 14111  002B36  5194               	movf	(___ftdiv@f2+2)& (0+255),w,b
 14112  002B38  0100               	movlb	0	; () banked
 14113  002B3A  5991               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 14114  002B3C  A0D8               	btfss	status,0,c
 14115  002B3E  D00E               	goto	l1183
 14116                           
 14117                           ; BSR set to: 0
 14118  002B40  0100               	movlb	0	; () banked
 14119  002B42  5192               	movf	___ftdiv@f2& (0+255),w,b
 14120  002B44  0100               	movlb	0	; () banked
 14121  002B46  5F8F               	subwf	___ftdiv@f1& (0+255),f,b
 14122  002B48  0100               	movlb	0	; () banked
 14123  002B4A  5193               	movf	(___ftdiv@f2+1)& (0+255),w,b
 14124  002B4C  0100               	movlb	0	; () banked
 14125  002B4E  5B90               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 14126  002B50  0100               	movlb	0	; () banked
 14127  002B52  5194               	movf	(___ftdiv@f2+2)& (0+255),w,b
 14128  002B54  0100               	movlb	0	; () banked
 14129  002B56  5B91               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 14130                           
 14131                           ; BSR set to: 0
 14132  002B58  0100               	movlb	0	; () banked
 14133  002B5A  8199               	bsf	___ftdiv@f3& (0+255),0,b
 14134  002B5C                     l1183:
 14135                           
 14136                           ; BSR set to: 0
 14137  002B5C  0100               	movlb	0	; () banked
 14138  002B5E  90D8               	bcf	status,0,c
 14139  002B60  378F               	rlcf	___ftdiv@f1& (0+255),f,b
 14140  002B62  3790               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 14141  002B64  3791               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 14142                           
 14143                           ; BSR set to: 0
 14144  002B66  0100               	movlb	0	; () banked
 14145  002B68  2F98               	decfsz	___ftdiv@cntr& (0+255),f,b
 14146  002B6A  D7D7               	goto	l6652
 14147                           
 14148                           ; BSR set to: 0
 14149                           
 14150                           ; BSR set to: 0
 14151  002B6C  C099  F025         	movff	___ftdiv@f3,___ftpack@arg
 14152  002B70  C09A  F026         	movff	___ftdiv@f3+1,___ftpack@arg+1
 14153  002B74  C09B  F027         	movff	___ftdiv@f3+2,___ftpack@arg+2
 14154  002B78  C09C  F028         	movff	___ftdiv@exp,___ftpack@exp
 14155  002B7C  C09D  F029         	movff	___ftdiv@sign,___ftpack@sign
 14156  002B80  EC57  F01C         	call	___ftpack	;wreg free
 14157  002B84  C025  F08F         	movff	?___ftpack,?___ftdiv
 14158  002B88  C026  F090         	movff	?___ftpack+1,?___ftdiv+1
 14159  002B8C  C027  F091         	movff	?___ftpack+2,?___ftdiv+2
 14160  002B90  0012               	return	
 14161  002B92                     __end_of___ftdiv:
 14162                           	opt stack 0
 14163                           tblptru	equ	0xFF8
 14164                           tblptrh	equ	0xFF7
 14165                           tblptrl	equ	0xFF6
 14166                           tablat	equ	0xFF5
 14167                           prodh	equ	0xFF4
 14168                           prodl	equ	0xFF3
 14169                           intcon	equ	0xFF2
 14170                           intcon3	equ	0xFF0
 14171                           postinc0	equ	0xFEE
 14172                           wreg	equ	0xFE8
 14173                           postdec1	equ	0xFE5
 14174                           fsr1l	equ	0xFE1
 14175                           indf2	equ	0xFDF
 14176                           postinc2	equ	0xFDE
 14177                           postdec2	equ	0xFDD
 14178                           fsr2h	equ	0xFDA
 14179                           fsr2l	equ	0xFD9
 14180                           status	equ	0xFD8
 14181                           
 14182 ;; *************** function ___ftadd *****************
 14183 ;; Defined at:
 14184 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 14185 ;; Parameters:    Size  Location     Type
 14186 ;;  f1              3   30[BANK0 ] float 
 14187 ;;  f2              3   33[BANK0 ] float 
 14188 ;; Auto vars:     Size  Location     Type
 14189 ;;  exp1            1   41[BANK0 ] unsigned char 
 14190 ;;  exp2            1   40[BANK0 ] unsigned char 
 14191 ;;  sign            1   39[BANK0 ] unsigned char 
 14192 ;; Return value:  Size  Location     Type
 14193 ;;                  3   30[BANK0 ] float 
 14194 ;; Registers used:
 14195 ;;		wreg, status,2, status,0, cstack
 14196 ;; Tracked objects:
 14197 ;;		On entry : 0/0
 14198 ;;		On exit  : 0/0
 14199 ;;		Unchanged: 0/0
 14200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14201 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14202 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14203 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14204 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14205 ;;Total ram usage:       12 bytes
 14206 ;; Hardware stack levels used:    1
 14207 ;; Hardware stack levels required when called:    4
 14208 ;; This function calls:
 14209 ;;		___ftpack
 14210 ;; This function is called by:
 14211 ;;		_main
 14212 ;;		_sortBattery
 14213 ;;		_angleToPulse
 14214 ;;		_printf
 14215 ;;		___ftsub
 14216 ;; This function uses a non-reentrant model
 14217 ;;
 14218                           
 14219                           	psect	text56
 14220  001FC0                     __ptext56:
 14221                           	opt stack 0
 14222  001FC0                     ___ftadd:
 14223                           	opt stack 23
 14224                           
 14225                           ;incstack = 0
 14226  001FC0  C0A0  F0A4         	movff	___ftadd@f1+2,??___ftadd
 14227  001FC4  0100               	movlb	0	; () banked
 14228  001FC6  6BA5               	clrf	(??___ftadd+1)& (0+255),b
 14229  001FC8  6BA6               	clrf	(??___ftadd+2)& (0+255),b
 14230  001FCA  0100               	movlb	0	; () banked
 14231  001FCC  359F               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 14232  001FCE  0100               	movlb	0	; () banked
 14233  001FD0  37A4               	rlcf	??___ftadd& (0+255),f,b
 14234  001FD2  E301               	bnc	u5941
 14235  001FD4  81A5               	bsf	(??___ftadd+1)& (0+255),0,b
 14236  001FD6                     u5941:
 14237  001FD6  0100               	movlb	0	; () banked
 14238  001FD8  51A4               	movf	??___ftadd& (0+255),w,b
 14239  001FDA  0100               	movlb	0	; () banked
 14240  001FDC  6FA9               	movwf	___ftadd@exp1& (0+255),b
 14241  001FDE  C0A3  F0A4         	movff	___ftadd@f2+2,??___ftadd
 14242  001FE2  0100               	movlb	0	; () banked
 14243  001FE4  6BA5               	clrf	(??___ftadd+1)& (0+255),b
 14244  001FE6  6BA6               	clrf	(??___ftadd+2)& (0+255),b
 14245  001FE8  0100               	movlb	0	; () banked
 14246  001FEA  35A2               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 14247  001FEC  0100               	movlb	0	; () banked
 14248  001FEE  37A4               	rlcf	??___ftadd& (0+255),f,b
 14249  001FF0  E301               	bnc	u5951
 14250  001FF2  81A5               	bsf	(??___ftadd+1)& (0+255),0,b
 14251  001FF4                     u5951:
 14252  001FF4  0100               	movlb	0	; () banked
 14253  001FF6  51A4               	movf	??___ftadd& (0+255),w,b
 14254  001FF8  0100               	movlb	0	; () banked
 14255  001FFA  6FA8               	movwf	___ftadd@exp2& (0+255),b
 14256                           
 14257                           ; BSR set to: 0
 14258  001FFC  0100               	movlb	0	; () banked
 14259  001FFE  51A9               	movf	___ftadd@exp1& (0+255),w,b
 14260  002000  0100               	movlb	0	; () banked
 14261  002002  B4D8               	btfsc	status,2,c
 14262  002004  D011               	goto	l1148
 14263                           
 14264                           ; BSR set to: 0
 14265  002006  0100               	movlb	0	; () banked
 14266  002008  51A8               	movf	___ftadd@exp2& (0+255),w,b
 14267  00200A  0100               	movlb	0	; () banked
 14268  00200C  5DA9               	subwf	___ftadd@exp1& (0+255),w,b
 14269  00200E  B0D8               	btfsc	status,0,c
 14270  002010  D012               	goto	l6162
 14271                           
 14272                           ; BSR set to: 0
 14273  002012  0100               	movlb	0	; () banked
 14274  002014  51A9               	movf	___ftadd@exp1& (0+255),w,b
 14275  002016  0800               	sublw	0
 14276  002018  0100               	movlb	0	; () banked
 14277  00201A  25A8               	addwf	___ftadd@exp2& (0+255),w,b
 14278  00201C  0100               	movlb	0	; () banked
 14279  00201E  6FA4               	movwf	??___ftadd& (0+255),b
 14280  002020  0E18               	movlw	24
 14281  002022  0100               	movlb	0	; () banked
 14282  002024  65A4               	cpfsgt	??___ftadd& (0+255),b
 14283  002026  D007               	goto	l6162
 14284  002028                     l1148:
 14285                           
 14286                           ; BSR set to: 0
 14287  002028  C0A1  F09E         	movff	___ftadd@f2,?___ftadd
 14288  00202C  C0A2  F09F         	movff	___ftadd@f2+1,?___ftadd+1
 14289  002030  C0A3  F0A0         	movff	___ftadd@f2+2,?___ftadd+2
 14290  002034  0012               	return	
 14291  002036                     l6162:
 14292                           
 14293                           ; BSR set to: 0
 14294  002036  0100               	movlb	0	; () banked
 14295  002038  51A8               	movf	___ftadd@exp2& (0+255),w,b
 14296  00203A  0100               	movlb	0	; () banked
 14297  00203C  B4D8               	btfsc	status,2,c
 14298  00203E  D011               	goto	l1152
 14299                           
 14300                           ; BSR set to: 0
 14301  002040  0100               	movlb	0	; () banked
 14302  002042  51A9               	movf	___ftadd@exp1& (0+255),w,b
 14303  002044  0100               	movlb	0	; () banked
 14304  002046  5DA8               	subwf	___ftadd@exp2& (0+255),w,b
 14305  002048  B0D8               	btfsc	status,0,c
 14306  00204A  D012               	goto	l6168
 14307                           
 14308                           ; BSR set to: 0
 14309  00204C  0100               	movlb	0	; () banked
 14310  00204E  51A8               	movf	___ftadd@exp2& (0+255),w,b
 14311  002050  0800               	sublw	0
 14312  002052  0100               	movlb	0	; () banked
 14313  002054  25A9               	addwf	___ftadd@exp1& (0+255),w,b
 14314  002056  0100               	movlb	0	; () banked
 14315  002058  6FA4               	movwf	??___ftadd& (0+255),b
 14316  00205A  0E18               	movlw	24
 14317  00205C  0100               	movlb	0	; () banked
 14318  00205E  65A4               	cpfsgt	??___ftadd& (0+255),b
 14319  002060  D007               	goto	l6168
 14320  002062                     l1152:
 14321                           
 14322                           ; BSR set to: 0
 14323  002062  C09E  F09E         	movff	___ftadd@f1,?___ftadd
 14324  002066  C09F  F09F         	movff	___ftadd@f1+1,?___ftadd+1
 14325  00206A  C0A0  F0A0         	movff	___ftadd@f1+2,?___ftadd+2
 14326  00206E  0012               	return	
 14327  002070                     l6168:
 14328                           
 14329                           ; BSR set to: 0
 14330  002070  0E06               	movlw	6
 14331  002072  0100               	movlb	0	; () banked
 14332  002074  6FA7               	movwf	___ftadd@sign& (0+255),b
 14333                           
 14334                           ; BSR set to: 0
 14335  002076  0100               	movlb	0	; () banked
 14336  002078  AFA0               	btfss	(___ftadd@f1+2)& (0+255),7,b
 14337  00207A  D002               	goto	l6174
 14338                           
 14339                           ; BSR set to: 0
 14340  00207C  0100               	movlb	0	; () banked
 14341  00207E  8FA7               	bsf	___ftadd@sign& (0+255),7,b
 14342  002080                     l6174:
 14343                           
 14344                           ; BSR set to: 0
 14345  002080  0100               	movlb	0	; () banked
 14346  002082  AFA3               	btfss	(___ftadd@f2+2)& (0+255),7,b
 14347  002084  D002               	goto	l1154
 14348                           
 14349                           ; BSR set to: 0
 14350  002086  0100               	movlb	0	; () banked
 14351  002088  8DA7               	bsf	___ftadd@sign& (0+255),6,b
 14352  00208A                     l1154:
 14353                           
 14354                           ; BSR set to: 0
 14355  00208A  0100               	movlb	0	; () banked
 14356  00208C  8F9F               	bsf	(___ftadd@f1+1)& (0+255),7,b
 14357                           
 14358                           ; BSR set to: 0
 14359  00208E  0EFF               	movlw	255
 14360  002090  0100               	movlb	0	; () banked
 14361  002092  179E               	andwf	___ftadd@f1& (0+255),f,b
 14362  002094  0EFF               	movlw	255
 14363  002096  0100               	movlb	0	; () banked
 14364  002098  179F               	andwf	(___ftadd@f1+1)& (0+255),f,b
 14365  00209A  0E00               	movlw	0
 14366  00209C  0100               	movlb	0	; () banked
 14367  00209E  17A0               	andwf	(___ftadd@f1+2)& (0+255),f,b
 14368  0020A0  0100               	movlb	0	; () banked
 14369  0020A2  8FA2               	bsf	(___ftadd@f2+1)& (0+255),7,b
 14370                           
 14371                           ; BSR set to: 0
 14372  0020A4  0EFF               	movlw	255
 14373  0020A6  0100               	movlb	0	; () banked
 14374  0020A8  17A1               	andwf	___ftadd@f2& (0+255),f,b
 14375  0020AA  0EFF               	movlw	255
 14376  0020AC  0100               	movlb	0	; () banked
 14377  0020AE  17A2               	andwf	(___ftadd@f2+1)& (0+255),f,b
 14378  0020B0  0E00               	movlw	0
 14379  0020B2  0100               	movlb	0	; () banked
 14380  0020B4  17A3               	andwf	(___ftadd@f2+2)& (0+255),f,b
 14381                           
 14382                           ; BSR set to: 0
 14383  0020B6  0100               	movlb	0	; () banked
 14384  0020B8  51A8               	movf	___ftadd@exp2& (0+255),w,b
 14385  0020BA  0100               	movlb	0	; () banked
 14386  0020BC  5DA9               	subwf	___ftadd@exp1& (0+255),w,b
 14387  0020BE  B0D8               	btfsc	status,0,c
 14388  0020C0  D025               	goto	l6194
 14389  0020C2                     l6184:
 14390                           
 14391                           ; BSR set to: 0
 14392  0020C2  0100               	movlb	0	; () banked
 14393  0020C4  90D8               	bcf	status,0,c
 14394  0020C6  37A1               	rlcf	___ftadd@f2& (0+255),f,b
 14395  0020C8  37A2               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 14396  0020CA  37A3               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 14397  0020CC  0100               	movlb	0	; () banked
 14398  0020CE  07A8               	decf	___ftadd@exp2& (0+255),f,b
 14399                           
 14400                           ; BSR set to: 0
 14401  0020D0  0100               	movlb	0	; () banked
 14402  0020D2  51A9               	movf	___ftadd@exp1& (0+255),w,b
 14403  0020D4  0100               	movlb	0	; () banked
 14404  0020D6  19A8               	xorwf	___ftadd@exp2& (0+255),w,b
 14405  0020D8  B4D8               	btfsc	status,2,c
 14406  0020DA  D011               	goto	l6192
 14407                           
 14408                           ; BSR set to: 0
 14409  0020DC  0100               	movlb	0	; () banked
 14410  0020DE  07A7               	decf	___ftadd@sign& (0+255),f,b
 14411  0020E0  C0A7  F0A4         	movff	___ftadd@sign,??___ftadd
 14412  0020E4  0E07               	movlw	7
 14413  0020E6  0100               	movlb	0	; () banked
 14414  0020E8  17A4               	andwf	??___ftadd& (0+255),f,b
 14415  0020EA  B4D8               	btfsc	status,2,c
 14416  0020EC  D008               	goto	l6192
 14417  0020EE  D7E9               	goto	l6184
 14418  0020F0                     l6190:
 14419                           
 14420                           ; BSR set to: 0
 14421  0020F0  0100               	movlb	0	; () banked
 14422  0020F2  90D8               	bcf	status,0,c
 14423  0020F4  33A0               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 14424  0020F6  339F               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 14425  0020F8  339E               	rrcf	___ftadd@f1& (0+255),f,b
 14426  0020FA  0100               	movlb	0	; () banked
 14427  0020FC  2BA9               	incf	___ftadd@exp1& (0+255),f,b
 14428  0020FE                     l6192:
 14429                           
 14430                           ; BSR set to: 0
 14431  0020FE  0100               	movlb	0	; () banked
 14432  002100  51A8               	movf	___ftadd@exp2& (0+255),w,b
 14433  002102  0100               	movlb	0	; () banked
 14434  002104  19A9               	xorwf	___ftadd@exp1& (0+255),w,b
 14435  002106  B4D8               	btfsc	status,2,c
 14436  002108  D02B               	goto	l1163
 14437  00210A  D7F2               	goto	l6190
 14438  00210C                     l6194:
 14439                           
 14440                           ; BSR set to: 0
 14441  00210C  0100               	movlb	0	; () banked
 14442  00210E  51A9               	movf	___ftadd@exp1& (0+255),w,b
 14443  002110  0100               	movlb	0	; () banked
 14444  002112  5DA8               	subwf	___ftadd@exp2& (0+255),w,b
 14445  002114  B0D8               	btfsc	status,0,c
 14446  002116  D024               	goto	l1163
 14447  002118                     l6196:
 14448                           
 14449                           ; BSR set to: 0
 14450  002118  0100               	movlb	0	; () banked
 14451  00211A  90D8               	bcf	status,0,c
 14452  00211C  379E               	rlcf	___ftadd@f1& (0+255),f,b
 14453  00211E  379F               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 14454  002120  37A0               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 14455  002122  0100               	movlb	0	; () banked
 14456  002124  07A9               	decf	___ftadd@exp1& (0+255),f,b
 14457                           
 14458                           ; BSR set to: 0
 14459  002126  0100               	movlb	0	; () banked
 14460  002128  51A9               	movf	___ftadd@exp1& (0+255),w,b
 14461  00212A  0100               	movlb	0	; () banked
 14462  00212C  19A8               	xorwf	___ftadd@exp2& (0+255),w,b
 14463  00212E  B4D8               	btfsc	status,2,c
 14464  002130  D011               	goto	l6204
 14465                           
 14466                           ; BSR set to: 0
 14467  002132  0100               	movlb	0	; () banked
 14468  002134  07A7               	decf	___ftadd@sign& (0+255),f,b
 14469  002136  C0A7  F0A4         	movff	___ftadd@sign,??___ftadd
 14470  00213A  0E07               	movlw	7
 14471  00213C  0100               	movlb	0	; () banked
 14472  00213E  17A4               	andwf	??___ftadd& (0+255),f,b
 14473  002140  B4D8               	btfsc	status,2,c
 14474  002142  D008               	goto	l6204
 14475  002144  D7E9               	goto	l6196
 14476  002146                     l6202:
 14477                           
 14478                           ; BSR set to: 0
 14479  002146  0100               	movlb	0	; () banked
 14480  002148  90D8               	bcf	status,0,c
 14481  00214A  33A3               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 14482  00214C  33A2               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 14483  00214E  33A1               	rrcf	___ftadd@f2& (0+255),f,b
 14484  002150  0100               	movlb	0	; () banked
 14485  002152  2BA8               	incf	___ftadd@exp2& (0+255),f,b
 14486  002154                     l6204:
 14487                           
 14488                           ; BSR set to: 0
 14489  002154  0100               	movlb	0	; () banked
 14490  002156  51A8               	movf	___ftadd@exp2& (0+255),w,b
 14491  002158  0100               	movlb	0	; () banked
 14492  00215A  19A9               	xorwf	___ftadd@exp1& (0+255),w,b
 14493  00215C  A4D8               	btfss	status,2,c
 14494  00215E  D7F3               	goto	l6202
 14495  002160                     l1163:
 14496                           
 14497                           ; BSR set to: 0
 14498  002160  0100               	movlb	0	; () banked
 14499  002162  AFA7               	btfss	___ftadd@sign& (0+255),7,b
 14500  002164  D012               	goto	l1172
 14501                           
 14502                           ; BSR set to: 0
 14503  002166  0EFF               	movlw	255
 14504  002168  0100               	movlb	0	; () banked
 14505  00216A  1B9E               	xorwf	___ftadd@f1& (0+255),f,b
 14506  00216C  0EFF               	movlw	255
 14507  00216E  0100               	movlb	0	; () banked
 14508  002170  1B9F               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 14509  002172  0EFF               	movlw	255
 14510  002174  0100               	movlb	0	; () banked
 14511  002176  1BA0               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 14512  002178  0E01               	movlw	1
 14513  00217A  0100               	movlb	0	; () banked
 14514  00217C  279E               	addwf	___ftadd@f1& (0+255),f,b
 14515  00217E  0E00               	movlw	0
 14516  002180  0100               	movlb	0	; () banked
 14517  002182  239F               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 14518  002184  0E00               	movlw	0
 14519  002186  0100               	movlb	0	; () banked
 14520  002188  23A0               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 14521  00218A                     l1172:
 14522                           
 14523                           ; BSR set to: 0
 14524  00218A  0100               	movlb	0	; () banked
 14525  00218C  ADA7               	btfss	___ftadd@sign& (0+255),6,b
 14526  00218E  D012               	goto	l6210
 14527                           
 14528                           ; BSR set to: 0
 14529  002190  0EFF               	movlw	255
 14530  002192  0100               	movlb	0	; () banked
 14531  002194  1BA1               	xorwf	___ftadd@f2& (0+255),f,b
 14532  002196  0EFF               	movlw	255
 14533  002198  0100               	movlb	0	; () banked
 14534  00219A  1BA2               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 14535  00219C  0EFF               	movlw	255
 14536  00219E  0100               	movlb	0	; () banked
 14537  0021A0  1BA3               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 14538  0021A2  0E01               	movlw	1
 14539  0021A4  0100               	movlb	0	; () banked
 14540  0021A6  27A1               	addwf	___ftadd@f2& (0+255),f,b
 14541  0021A8  0E00               	movlw	0
 14542  0021AA  0100               	movlb	0	; () banked
 14543  0021AC  23A2               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 14544  0021AE  0E00               	movlw	0
 14545  0021B0  0100               	movlb	0	; () banked
 14546  0021B2  23A3               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 14547  0021B4                     l6210:
 14548                           
 14549                           ; BSR set to: 0
 14550  0021B4  0E00               	movlw	0
 14551  0021B6  0100               	movlb	0	; () banked
 14552  0021B8  6FA7               	movwf	___ftadd@sign& (0+255),b
 14553                           
 14554                           ; BSR set to: 0
 14555  0021BA  0100               	movlb	0	; () banked
 14556  0021BC  519E               	movf	___ftadd@f1& (0+255),w,b
 14557  0021BE  0100               	movlb	0	; () banked
 14558  0021C0  27A1               	addwf	___ftadd@f2& (0+255),f,b
 14559  0021C2  0100               	movlb	0	; () banked
 14560  0021C4  519F               	movf	(___ftadd@f1+1)& (0+255),w,b
 14561  0021C6  0100               	movlb	0	; () banked
 14562  0021C8  23A2               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 14563  0021CA  0100               	movlb	0	; () banked
 14564  0021CC  51A0               	movf	(___ftadd@f1+2)& (0+255),w,b
 14565  0021CE  0100               	movlb	0	; () banked
 14566  0021D0  23A3               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 14567                           
 14568                           ; BSR set to: 0
 14569  0021D2  0100               	movlb	0	; () banked
 14570  0021D4  AFA3               	btfss	(___ftadd@f2+2)& (0+255),7,b
 14571  0021D6  D015               	goto	l6220
 14572                           
 14573                           ; BSR set to: 0
 14574  0021D8  0EFF               	movlw	255
 14575  0021DA  0100               	movlb	0	; () banked
 14576  0021DC  1BA1               	xorwf	___ftadd@f2& (0+255),f,b
 14577  0021DE  0EFF               	movlw	255
 14578  0021E0  0100               	movlb	0	; () banked
 14579  0021E2  1BA2               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 14580  0021E4  0EFF               	movlw	255
 14581  0021E6  0100               	movlb	0	; () banked
 14582  0021E8  1BA3               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 14583  0021EA  0E01               	movlw	1
 14584  0021EC  0100               	movlb	0	; () banked
 14585  0021EE  27A1               	addwf	___ftadd@f2& (0+255),f,b
 14586  0021F0  0E00               	movlw	0
 14587  0021F2  0100               	movlb	0	; () banked
 14588  0021F4  23A2               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 14589  0021F6  0E00               	movlw	0
 14590  0021F8  0100               	movlb	0	; () banked
 14591  0021FA  23A3               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 14592                           
 14593                           ; BSR set to: 0
 14594  0021FC  0E01               	movlw	1
 14595  0021FE  0100               	movlb	0	; () banked
 14596  002200  6FA7               	movwf	___ftadd@sign& (0+255),b
 14597  002202                     l6220:
 14598                           
 14599                           ; BSR set to: 0
 14600  002202  C0A1  F025         	movff	___ftadd@f2,___ftpack@arg
 14601  002206  C0A2  F026         	movff	___ftadd@f2+1,___ftpack@arg+1
 14602  00220A  C0A3  F027         	movff	___ftadd@f2+2,___ftpack@arg+2
 14603  00220E  C0A9  F028         	movff	___ftadd@exp1,___ftpack@exp
 14604  002212  C0A7  F029         	movff	___ftadd@sign,___ftpack@sign
 14605  002216  EC57  F01C         	call	___ftpack	;wreg free
 14606  00221A  C025  F09E         	movff	?___ftpack,?___ftadd
 14607  00221E  C026  F09F         	movff	?___ftpack+1,?___ftadd+1
 14608  002222  C027  F0A0         	movff	?___ftpack+2,?___ftadd+2
 14609  002226  0012               	return	
 14610  002228                     __end_of___ftadd:
 14611                           	opt stack 0
 14612                           tblptru	equ	0xFF8
 14613                           tblptrh	equ	0xFF7
 14614                           tblptrl	equ	0xFF6
 14615                           tablat	equ	0xFF5
 14616                           prodh	equ	0xFF4
 14617                           prodl	equ	0xFF3
 14618                           intcon	equ	0xFF2
 14619                           intcon3	equ	0xFF0
 14620                           postinc0	equ	0xFEE
 14621                           wreg	equ	0xFE8
 14622                           postdec1	equ	0xFE5
 14623                           fsr1l	equ	0xFE1
 14624                           indf2	equ	0xFDF
 14625                           postinc2	equ	0xFDE
 14626                           postdec2	equ	0xFDD
 14627                           fsr2h	equ	0xFDA
 14628                           fsr2l	equ	0xFD9
 14629                           status	equ	0xFD8
 14630                           
 14631 ;; *************** function ___awtoft *****************
 14632 ;; Defined at:
 14633 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 14634 ;; Parameters:    Size  Location     Type
 14635 ;;  c               2   44[COMRAM] int 
 14636 ;; Auto vars:     Size  Location     Type
 14637 ;;  sign            1   47[COMRAM] unsigned char 
 14638 ;; Return value:  Size  Location     Type
 14639 ;;                  3   44[COMRAM] float 
 14640 ;; Registers used:
 14641 ;;		wreg, status,2, status,0, cstack
 14642 ;; Tracked objects:
 14643 ;;		On entry : 0/0
 14644 ;;		On exit  : 0/0
 14645 ;;		Unchanged: 0/0
 14646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14647 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14648 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14650 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14651 ;;Total ram usage:        4 bytes
 14652 ;; Hardware stack levels used:    1
 14653 ;; Hardware stack levels required when called:    4
 14654 ;; This function calls:
 14655 ;;		___ftpack
 14656 ;; This function is called by:
 14657 ;;		_main
 14658 ;;		_sortBattery
 14659 ;;		_angleToPulse
 14660 ;;		_testFrequency
 14661 ;; This function uses a non-reentrant model
 14662 ;;
 14663                           
 14664                           	psect	text57
 14665  00441A                     __ptext57:
 14666                           	opt stack 0
 14667  00441A                     ___awtoft:
 14668                           	opt stack 23
 14669                           
 14670                           ;incstack = 0
 14671  00441A  0E00               	movlw	0
 14672  00441C  6E30               	movwf	___awtoft@sign,c
 14673  00441E  AE2E               	btfss	___awtoft@c+1,7,c
 14674  004420  D006               	goto	l6682
 14675  004422  6C2D               	negf	___awtoft@c,c
 14676  004424  1E2E               	comf	___awtoft@c+1,f,c
 14677  004426  B0D8               	btfsc	status,0,c
 14678  004428  2A2E               	incf	___awtoft@c+1,f,c
 14679  00442A  0E01               	movlw	1
 14680  00442C  6E30               	movwf	___awtoft@sign,c
 14681  00442E                     l6682:
 14682  00442E  C02D  F025         	movff	___awtoft@c,___ftpack@arg
 14683  004432  C02E  F026         	movff	___awtoft@c+1,___ftpack@arg+1
 14684  004436  6A27               	clrf	___ftpack@arg+2,c
 14685  004438  0E8E               	movlw	142
 14686  00443A  6E28               	movwf	___ftpack@exp,c
 14687  00443C  C030  F029         	movff	___awtoft@sign,___ftpack@sign
 14688  004440  EC57  F01C         	call	___ftpack	;wreg free
 14689  004444  C025  F02D         	movff	?___ftpack,?___awtoft
 14690  004448  C026  F02E         	movff	?___ftpack+1,?___awtoft+1
 14691  00444C  C027  F02F         	movff	?___ftpack+2,?___awtoft+2
 14692  004450  0012               	return	
 14693  004452                     __end_of___awtoft:
 14694                           	opt stack 0
 14695                           tblptru	equ	0xFF8
 14696                           tblptrh	equ	0xFF7
 14697                           tblptrl	equ	0xFF6
 14698                           tablat	equ	0xFF5
 14699                           prodh	equ	0xFF4
 14700                           prodl	equ	0xFF3
 14701                           intcon	equ	0xFF2
 14702                           intcon3	equ	0xFF0
 14703                           postinc0	equ	0xFEE
 14704                           wreg	equ	0xFE8
 14705                           postdec1	equ	0xFE5
 14706                           fsr1l	equ	0xFE1
 14707                           indf2	equ	0xFDF
 14708                           postinc2	equ	0xFDE
 14709                           postdec2	equ	0xFDD
 14710                           fsr2h	equ	0xFDA
 14711                           fsr2l	equ	0xFD9
 14712                           status	equ	0xFD8
 14713                           
 14714 ;; *************** function ___altoft *****************
 14715 ;; Defined at:
 14716 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 14717 ;; Parameters:    Size  Location     Type
 14718 ;;  c               4   44[COMRAM] long 
 14719 ;; Auto vars:     Size  Location     Type
 14720 ;;  sign            1   53[COMRAM] unsigned char 
 14721 ;;  exp             1   52[COMRAM] unsigned char 
 14722 ;; Return value:  Size  Location     Type
 14723 ;;                  3   44[COMRAM] float 
 14724 ;; Registers used:
 14725 ;;		wreg, status,2, status,0, cstack
 14726 ;; Tracked objects:
 14727 ;;		On entry : 0/0
 14728 ;;		On exit  : 0/0
 14729 ;;		Unchanged: 0/0
 14730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14731 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14732 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14733 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14734 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14735 ;;Total ram usage:       10 bytes
 14736 ;; Hardware stack levels used:    1
 14737 ;; Hardware stack levels required when called:    4
 14738 ;; This function calls:
 14739 ;;		___ftpack
 14740 ;; This function is called by:
 14741 ;;		_sortBattery
 14742 ;;		_angleToPulse
 14743 ;; This function uses a non-reentrant model
 14744 ;;
 14745                           
 14746                           	psect	text58
 14747  003DEE                     __ptext58:
 14748                           	opt stack 0
 14749  003DEE                     ___altoft:
 14750                           	opt stack 23
 14751                           
 14752                           ;incstack = 0
 14753  003DEE  0E00               	movlw	0
 14754  003DF0  6E36               	movwf	___altoft@sign,c
 14755  003DF2  0E8E               	movlw	142
 14756  003DF4  6E35               	movwf	___altoft@exp,c
 14757  003DF6  AE30               	btfss	___altoft@c+3,7,c
 14758  003DF8  D011               	goto	l6614
 14759  003DFA  1E30               	comf	___altoft@c+3,f,c
 14760  003DFC  1E2F               	comf	___altoft@c+2,f,c
 14761  003DFE  1E2E               	comf	___altoft@c+1,f,c
 14762  003E00  6C2D               	negf	___altoft@c,c
 14763  003E02  0E00               	movlw	0
 14764  003E04  222E               	addwfc	___altoft@c+1,f,c
 14765  003E06  222F               	addwfc	___altoft@c+2,f,c
 14766  003E08  2230               	addwfc	___altoft@c+3,f,c
 14767  003E0A  0E01               	movlw	1
 14768  003E0C  6E36               	movwf	___altoft@sign,c
 14769  003E0E  D006               	goto	l6614
 14770  003E10                     l6612:
 14771  003E10  90D8               	bcf	status,0,c
 14772  003E12  3230               	rrcf	___altoft@c+3,f,c
 14773  003E14  322F               	rrcf	___altoft@c+2,f,c
 14774  003E16  322E               	rrcf	___altoft@c+1,f,c
 14775  003E18  322D               	rrcf	___altoft@c,f,c
 14776  003E1A  2A35               	incf	___altoft@exp,f,c
 14777  003E1C                     l6614:
 14778  003E1C  0E00               	movlw	0
 14779  003E1E  142D               	andwf	___altoft@c,w,c
 14780  003E20  6E31               	movwf	??___altoft& (0+255),c
 14781  003E22  0E00               	movlw	0
 14782  003E24  142E               	andwf	___altoft@c+1,w,c
 14783  003E26  6E32               	movwf	(??___altoft+1)& (0+255),c
 14784  003E28  0E00               	movlw	0
 14785  003E2A  142F               	andwf	___altoft@c+2,w,c
 14786  003E2C  6E33               	movwf	(??___altoft+2)& (0+255),c
 14787  003E2E  0EFF               	movlw	255
 14788  003E30  1430               	andwf	___altoft@c+3,w,c
 14789  003E32  6E34               	movwf	(??___altoft+3)& (0+255),c
 14790  003E34  5031               	movf	??___altoft,w,c
 14791  003E36  1032               	iorwf	??___altoft+1,w,c
 14792  003E38  1033               	iorwf	??___altoft+2,w,c
 14793  003E3A  1034               	iorwf	??___altoft+3,w,c
 14794  003E3C  A4D8               	btfss	status,2,c
 14795  003E3E  D7E8               	goto	l6612
 14796  003E40  C02D  F025         	movff	___altoft@c,___ftpack@arg
 14797  003E44  C02E  F026         	movff	___altoft@c+1,___ftpack@arg+1
 14798  003E48  C02F  F027         	movff	___altoft@c+2,___ftpack@arg+2
 14799  003E4C  C035  F028         	movff	___altoft@exp,___ftpack@exp
 14800  003E50  C036  F029         	movff	___altoft@sign,___ftpack@sign
 14801  003E54  EC57  F01C         	call	___ftpack	;wreg free
 14802  003E58  C025  F02D         	movff	?___ftpack,?___altoft
 14803  003E5C  C026  F02E         	movff	?___ftpack+1,?___altoft+1
 14804  003E60  C027  F02F         	movff	?___ftpack+2,?___altoft+2
 14805  003E64  0012               	return	
 14806  003E66                     __end_of___altoft:
 14807                           	opt stack 0
 14808                           tblptru	equ	0xFF8
 14809                           tblptrh	equ	0xFF7
 14810                           tblptrl	equ	0xFF6
 14811                           tablat	equ	0xFF5
 14812                           prodh	equ	0xFF4
 14813                           prodl	equ	0xFF3
 14814                           intcon	equ	0xFF2
 14815                           intcon3	equ	0xFF0
 14816                           postinc0	equ	0xFEE
 14817                           wreg	equ	0xFE8
 14818                           postdec1	equ	0xFE5
 14819                           fsr1l	equ	0xFE1
 14820                           indf2	equ	0xFDF
 14821                           postinc2	equ	0xFDE
 14822                           postdec2	equ	0xFDD
 14823                           fsr2h	equ	0xFDA
 14824                           fsr2l	equ	0xFD9
 14825                           status	equ	0xFD8
 14826                           
 14827 ;; *************** function ___ftpack *****************
 14828 ;; Defined at:
 14829 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 14830 ;; Parameters:    Size  Location     Type
 14831 ;;  arg             3   36[COMRAM] unsigned um
 14832 ;;  exp             1   39[COMRAM] unsigned char 
 14833 ;;  sign            1   40[COMRAM] unsigned char 
 14834 ;; Auto vars:     Size  Location     Type
 14835 ;;		None
 14836 ;; Return value:  Size  Location     Type
 14837 ;;                  3   36[COMRAM] float 
 14838 ;; Registers used:
 14839 ;;		wreg, status,2, status,0
 14840 ;; Tracked objects:
 14841 ;;		On entry : 0/0
 14842 ;;		On exit  : 0/0
 14843 ;;		Unchanged: 0/0
 14844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14845 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14847 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14848 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14849 ;;Total ram usage:        8 bytes
 14850 ;; Hardware stack levels used:    1
 14851 ;; Hardware stack levels required when called:    3
 14852 ;; This function calls:
 14853 ;;		Nothing
 14854 ;; This function is called by:
 14855 ;;		___altoft
 14856 ;;		___awtoft
 14857 ;;		___ftadd
 14858 ;;		___ftdiv
 14859 ;;		___ftmul
 14860 ;;		___lltoft
 14861 ;; This function uses a non-reentrant model
 14862 ;;
 14863                           
 14864                           	psect	text59
 14865  0038AE                     __ptext59:
 14866                           	opt stack 0
 14867  0038AE                     ___ftpack:
 14868                           	opt stack 23
 14869                           
 14870                           ;incstack = 0
 14871  0038AE  5028               	movf	___ftpack@exp,w,c
 14872  0038B0  B4D8               	btfsc	status,2,c
 14873  0038B2  D005               	goto	l6110
 14874  0038B4  5025               	movf	___ftpack@arg,w,c
 14875  0038B6  1026               	iorwf	___ftpack@arg+1,w,c
 14876  0038B8  1027               	iorwf	___ftpack@arg+2,w,c
 14877  0038BA  A4D8               	btfss	status,2,c
 14878  0038BC  D00C               	goto	l6116
 14879  0038BE                     l6110:
 14880  0038BE  0E00               	movlw	0
 14881  0038C0  6E25               	movwf	?___ftpack,c
 14882  0038C2  0E00               	movlw	0
 14883  0038C4  6E26               	movwf	?___ftpack+1,c
 14884  0038C6  0E00               	movlw	0
 14885  0038C8  6E27               	movwf	?___ftpack+2,c
 14886  0038CA  0012               	return	
 14887  0038CC                     l6114:
 14888  0038CC  2A28               	incf	___ftpack@exp,f,c
 14889  0038CE  90D8               	bcf	status,0,c
 14890  0038D0  3227               	rrcf	___ftpack@arg+2,f,c
 14891  0038D2  3226               	rrcf	___ftpack@arg+1,f,c
 14892  0038D4  3225               	rrcf	___ftpack@arg,f,c
 14893  0038D6                     l6116:
 14894  0038D6  0E00               	movlw	0
 14895  0038D8  1425               	andwf	___ftpack@arg,w,c
 14896  0038DA  6E2A               	movwf	??___ftpack& (0+255),c
 14897  0038DC  0E00               	movlw	0
 14898  0038DE  1426               	andwf	___ftpack@arg+1,w,c
 14899  0038E0  6E2B               	movwf	(??___ftpack+1)& (0+255),c
 14900  0038E2  0EFE               	movlw	254
 14901  0038E4  1427               	andwf	___ftpack@arg+2,w,c
 14902  0038E6  6E2C               	movwf	(??___ftpack+2)& (0+255),c
 14903  0038E8  502A               	movf	??___ftpack,w,c
 14904  0038EA  102B               	iorwf	??___ftpack+1,w,c
 14905  0038EC  102C               	iorwf	??___ftpack+2,w,c
 14906  0038EE  B4D8               	btfsc	status,2,c
 14907  0038F0  D00C               	goto	l6122
 14908  0038F2  D7EC               	goto	l6114
 14909  0038F4                     l6118:
 14910  0038F4  2A28               	incf	___ftpack@exp,f,c
 14911  0038F6  0E01               	movlw	1
 14912  0038F8  2625               	addwf	___ftpack@arg,f,c
 14913  0038FA  0E00               	movlw	0
 14914  0038FC  2226               	addwfc	___ftpack@arg+1,f,c
 14915  0038FE  0E00               	movlw	0
 14916  003900  2227               	addwfc	___ftpack@arg+2,f,c
 14917  003902  90D8               	bcf	status,0,c
 14918  003904  3227               	rrcf	___ftpack@arg+2,f,c
 14919  003906  3226               	rrcf	___ftpack@arg+1,f,c
 14920  003908  3225               	rrcf	___ftpack@arg,f,c
 14921  00390A                     l6122:
 14922  00390A  0E00               	movlw	0
 14923  00390C  1425               	andwf	___ftpack@arg,w,c
 14924  00390E  6E2A               	movwf	??___ftpack& (0+255),c
 14925  003910  0E00               	movlw	0
 14926  003912  1426               	andwf	___ftpack@arg+1,w,c
 14927  003914  6E2B               	movwf	(??___ftpack+1)& (0+255),c
 14928  003916  0EFF               	movlw	255
 14929  003918  1427               	andwf	___ftpack@arg+2,w,c
 14930  00391A  6E2C               	movwf	(??___ftpack+2)& (0+255),c
 14931  00391C  502A               	movf	??___ftpack,w,c
 14932  00391E  102B               	iorwf	??___ftpack+1,w,c
 14933  003920  102C               	iorwf	??___ftpack+2,w,c
 14934  003922  B4D8               	btfsc	status,2,c
 14935  003924  D006               	goto	l6126
 14936  003926  D7E6               	goto	l6118
 14937  003928                     l6124:
 14938  003928  0628               	decf	___ftpack@exp,f,c
 14939  00392A  90D8               	bcf	status,0,c
 14940  00392C  3625               	rlcf	___ftpack@arg,f,c
 14941  00392E  3626               	rlcf	___ftpack@arg+1,f,c
 14942  003930  3627               	rlcf	___ftpack@arg+2,f,c
 14943  003932                     l6126:
 14944  003932  BE26               	btfsc	___ftpack@arg+1,7,c
 14945  003934  D003               	goto	l1125
 14946  003936  0E02               	movlw	2
 14947  003938  6028               	cpfslt	___ftpack@exp,c
 14948  00393A  D7F6               	goto	l6124
 14949  00393C                     l1125:
 14950  00393C  A028               	btfss	___ftpack@exp,0,c
 14951  00393E  9E26               	bcf	___ftpack@arg+1,7,c
 14952  003940  90D8               	bcf	status,0,c
 14953  003942  3228               	rrcf	___ftpack@exp,f,c
 14954  003944  5028               	movf	___ftpack@exp,w,c
 14955  003946  1227               	iorwf	___ftpack@arg+2,f,c
 14956  003948  5029               	movf	___ftpack@sign,w,c
 14957  00394A  A4D8               	btfss	status,2,c
 14958  00394C  8E27               	bsf	___ftpack@arg+2,7,c
 14959  00394E  C025  F025         	movff	___ftpack@arg,?___ftpack
 14960  003952  C026  F026         	movff	___ftpack@arg+1,?___ftpack+1
 14961  003956  C027  F027         	movff	___ftpack@arg+2,?___ftpack+2
 14962  00395A  0012               	return	
 14963  00395C                     __end_of___ftpack:
 14964                           	opt stack 0
 14965                           tblptru	equ	0xFF8
 14966                           tblptrh	equ	0xFF7
 14967                           tblptrl	equ	0xFF6
 14968                           tablat	equ	0xFF5
 14969                           prodh	equ	0xFF4
 14970                           prodl	equ	0xFF3
 14971                           intcon	equ	0xFF2
 14972                           intcon3	equ	0xFF0
 14973                           postinc0	equ	0xFEE
 14974                           wreg	equ	0xFE8
 14975                           postdec1	equ	0xFE5
 14976                           fsr1l	equ	0xFE1
 14977                           indf2	equ	0xFDF
 14978                           postinc2	equ	0xFDE
 14979                           postdec2	equ	0xFDD
 14980                           fsr2h	equ	0xFDA
 14981                           fsr2l	equ	0xFD9
 14982                           status	equ	0xFD8
 14983                           
 14984 ;; *************** function _initTimer *****************
 14985 ;; Defined at:
 14986 ;;		line 53 in file "timer.c"
 14987 ;; Parameters:    Size  Location     Type
 14988 ;;  timer           2   36[COMRAM] int 
 14989 ;; Auto vars:     Size  Location     Type
 14990 ;;		None
 14991 ;; Return value:  Size  Location     Type
 14992 ;;                  1    wreg      void 
 14993 ;; Registers used:
 14994 ;;		wreg, status,2, status,0
 14995 ;; Tracked objects:
 14996 ;;		On entry : 0/0
 14997 ;;		On exit  : 0/0
 14998 ;;		Unchanged: 0/0
 14999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15000 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15002 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15003 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15004 ;;Total ram usage:        4 bytes
 15005 ;; Hardware stack levels used:    1
 15006 ;; Hardware stack levels required when called:    3
 15007 ;; This function calls:
 15008 ;;		Nothing
 15009 ;; This function is called by:
 15010 ;;		_main
 15011 ;;		_initServo
 15012 ;;		_testFrequency
 15013 ;; This function uses a non-reentrant model
 15014 ;;
 15015                           
 15016                           	psect	text60
 15017  004312                     __ptext60:
 15018                           	opt stack 0
 15019  004312                     _initTimer:
 15020                           	opt stack 27
 15021                           
 15022                           ;timer.c: 54: switch(timer){
 15023                           
 15024                           ;incstack = 0
 15025  004312  D00F               	goto	l5108
 15026  004314                     l5090:
 15027                           
 15028                           ;timer.c: 56: T0CON = 0;
 15029  004314  0E00               	movlw	0
 15030  004316  6ED5               	movwf	4053,c	;volatile
 15031                           
 15032                           ;timer.c: 57: T0CON |= 1<<3;
 15033  004318  86D5               	bsf	4053,3,c	;volatile
 15034                           
 15035                           ;timer.c: 59: TMR0IE = 1;
 15036  00431A  8AF2               	bsf	intcon,5,c	;volatile
 15037                           
 15038                           ;timer.c: 60: break;
 15039  00431C  D01C               	goto	l454
 15040  00431E                     l5096:
 15041                           
 15042                           ;timer.c: 62: T1CON = 0;
 15043  00431E  0E00               	movlw	0
 15044  004320  6ECD               	movwf	4045,c	;volatile
 15045                           
 15046                           ;timer.c: 64: T1CON |= 0b11<<4;
 15047  004322  0E30               	movlw	48
 15048  004324  12CD               	iorwf	4045,f,c	;volatile
 15049                           
 15050                           ;timer.c: 65: TMR1IE = 1;
 15051  004326  809D               	bsf	3997,0,c	;volatile
 15052                           
 15053                           ;timer.c: 66: break;
 15054  004328  D016               	goto	l454
 15055  00432A                     l5102:
 15056                           
 15057                           ;timer.c: 68: T3CON = 0;
 15058  00432A  0E00               	movlw	0
 15059  00432C  6EB1               	movwf	4017,c	;volatile
 15060                           
 15061                           ;timer.c: 69: TMR3IE = 1;
 15062  00432E  82A0               	bsf	4000,1,c	;volatile
 15063                           
 15064                           ;timer.c: 71: }
 15065                           
 15066                           ;timer.c: 70: break;
 15067  004330  D012               	goto	l454
 15068  004332                     l5108:
 15069  004332  C025  F027         	movff	initTimer@timer,??_initTimer
 15070  004336  C026  F028         	movff	initTimer@timer+1,??_initTimer+1
 15071                           
 15072                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15073                           ; Switch size 1, requested type "space"
 15074                           ; Number of cases is 1, Range of values is 0 to 0
 15075                           ; switch strategies available:
 15076                           ; Name         Instructions Cycles
 15077                           ; simple_byte            4     3 (average)
 15078                           ;	Chosen strategy is simple_byte
 15079  00433A  5028               	movf	??_initTimer+1,w,c
 15080  00433C  0A00               	xorlw	0	; case 0
 15081  00433E  A4D8               	btfss	status,2,c
 15082  004340  D00A               	goto	l454
 15083                           
 15084                           ; Switch size 1, requested type "space"
 15085                           ; Number of cases is 3, Range of values is 0 to 3
 15086                           ; switch strategies available:
 15087                           ; Name         Instructions Cycles
 15088                           ; simple_byte           10     6 (average)
 15089                           ;	Chosen strategy is simple_byte
 15090  004342  5027               	movf	??_initTimer,w,c
 15091  004344  0A00               	xorlw	0	; case 0
 15092  004346  B4D8               	btfsc	status,2,c
 15093  004348  D7E5               	goto	l5090
 15094  00434A  0A01               	xorlw	1	; case 1
 15095  00434C  B4D8               	btfsc	status,2,c
 15096  00434E  D7E7               	goto	l5096
 15097  004350  0A02               	xorlw	2	; case 3
 15098  004352  B4D8               	btfsc	status,2,c
 15099  004354  D7EA               	goto	l5102
 15100  004356                     l454:
 15101                           
 15102                           ;timer.c: 72: PEIE = 1;
 15103  004356  8CF2               	bsf	intcon,6,c	;volatile
 15104                           
 15105                           ;timer.c: 73: (INTCONbits.GIE = 1);
 15106  004358  8EF2               	bsf	intcon,7,c	;volatile
 15107  00435A  0012               	return		;funcret
 15108  00435C                     __end_of_initTimer:
 15109                           	opt stack 0
 15110                           tblptru	equ	0xFF8
 15111                           tblptrh	equ	0xFF7
 15112                           tblptrl	equ	0xFF6
 15113                           tablat	equ	0xFF5
 15114                           prodh	equ	0xFF4
 15115                           prodl	equ	0xFF3
 15116                           intcon	equ	0xFF2
 15117                           intcon3	equ	0xFF0
 15118                           postinc0	equ	0xFEE
 15119                           wreg	equ	0xFE8
 15120                           postdec1	equ	0xFE5
 15121                           fsr1l	equ	0xFE1
 15122                           indf2	equ	0xFDF
 15123                           postinc2	equ	0xFDE
 15124                           postdec2	equ	0xFDD
 15125                           fsr2h	equ	0xFDA
 15126                           fsr2l	equ	0xFD9
 15127                           status	equ	0xFD8
 15128                           
 15129 ;; *************** function _initLCD *****************
 15130 ;; Defined at:
 15131 ;;		line 15 in file "lcd.c"
 15132 ;; Parameters:    Size  Location     Type
 15133 ;;		None
 15134 ;; Auto vars:     Size  Location     Type
 15135 ;;		None
 15136 ;; Return value:  Size  Location     Type
 15137 ;;                  1    wreg      void 
 15138 ;; Registers used:
 15139 ;;		wreg, status,2, status,0, cstack
 15140 ;; Tracked objects:
 15141 ;;		On entry : 0/0
 15142 ;;		On exit  : 0/0
 15143 ;;		Unchanged: 0/0
 15144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15147 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15148 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15149 ;;Total ram usage:        1 bytes
 15150 ;; Hardware stack levels used:    1
 15151 ;; Hardware stack levels required when called:    5
 15152 ;; This function calls:
 15153 ;;		_lcdInst
 15154 ;; This function is called by:
 15155 ;;		_main
 15156 ;;		_debug
 15157 ;; This function uses a non-reentrant model
 15158 ;;
 15159                           
 15160                           	psect	text61
 15161  00435C                     __ptext61:
 15162                           	opt stack 0
 15163  00435C                     _initLCD:
 15164                           	opt stack 25
 15165                           
 15166                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
 15167                           
 15168                           ;incstack = 0
 15169  00435C  0E31               	movlw	49
 15170  00435E  6E29               	movwf	??_initLCD& (0+255),c
 15171  004360  0EB2               	movlw	178
 15172  004362                     u8587:
 15173  004362  2EE8               	decfsz	wreg,f,c
 15174  004364  D7FE               	bra	u8587
 15175  004366  2E29               	decfsz	??_initLCD& (0+255),f,c
 15176  004368  D7FC               	bra	u8587
 15177  00436A  D000               	nop2	
 15178                           
 15179                           ;lcd.c: 18: lcdInst(0b00110011);
 15180  00436C  0E33               	movlw	51
 15181  00436E  EC9D  F022         	call	_lcdInst
 15182                           
 15183                           ;lcd.c: 19: lcdInst(0b00110010);
 15184  004372  0E32               	movlw	50
 15185  004374  EC9D  F022         	call	_lcdInst
 15186                           
 15187                           ;lcd.c: 20: lcdInst(0b00101000);
 15188  004378  0E28               	movlw	40
 15189  00437A  EC9D  F022         	call	_lcdInst
 15190                           
 15191                           ;lcd.c: 21: lcdInst(0b00001111);
 15192  00437E  0E0F               	movlw	15
 15193  004380  EC9D  F022         	call	_lcdInst
 15194                           
 15195                           ;lcd.c: 22: lcdInst(0b00000110);
 15196  004384  0E06               	movlw	6
 15197  004386  EC9D  F022         	call	_lcdInst
 15198                           
 15199                           ;lcd.c: 23: lcdInst(0b00000001);
 15200  00438A  0E01               	movlw	1
 15201  00438C  EC9D  F022         	call	_lcdInst
 15202                           
 15203                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
 15204  004390  0E31               	movlw	49
 15205  004392  6E29               	movwf	??_initLCD& (0+255),c
 15206  004394  0EB2               	movlw	178
 15207  004396                     u8597:
 15208  004396  2EE8               	decfsz	wreg,f,c
 15209  004398  D7FE               	bra	u8597
 15210  00439A  2E29               	decfsz	??_initLCD& (0+255),f,c
 15211  00439C  D7FC               	bra	u8597
 15212  00439E  D000               	nop2	
 15213  0043A0  0012               	return		;funcret
 15214  0043A2                     __end_of_initLCD:
 15215                           	opt stack 0
 15216                           tblptru	equ	0xFF8
 15217                           tblptrh	equ	0xFF7
 15218                           tblptrl	equ	0xFF6
 15219                           tablat	equ	0xFF5
 15220                           prodh	equ	0xFF4
 15221                           prodl	equ	0xFF3
 15222                           intcon	equ	0xFF2
 15223                           intcon3	equ	0xFF0
 15224                           postinc0	equ	0xFEE
 15225                           wreg	equ	0xFE8
 15226                           postdec1	equ	0xFE5
 15227                           fsr1l	equ	0xFE1
 15228                           indf2	equ	0xFDF
 15229                           postinc2	equ	0xFDE
 15230                           postdec2	equ	0xFDD
 15231                           fsr2h	equ	0xFDA
 15232                           fsr2l	equ	0xFD9
 15233                           status	equ	0xFD8
 15234                           
 15235 ;; *************** function _lcdInst *****************
 15236 ;; Defined at:
 15237 ;;		line 27 in file "lcd.c"
 15238 ;; Parameters:    Size  Location     Type
 15239 ;;  data            1    wreg     unsigned char 
 15240 ;; Auto vars:     Size  Location     Type
 15241 ;;  data            1   39[COMRAM] unsigned char 
 15242 ;; Return value:  Size  Location     Type
 15243 ;;                  1    wreg      void 
 15244 ;; Registers used:
 15245 ;;		wreg, status,2, status,0, cstack
 15246 ;; Tracked objects:
 15247 ;;		On entry : 0/0
 15248 ;;		On exit  : 0/0
 15249 ;;		Unchanged: 0/0
 15250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15252 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15253 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15254 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15255 ;;Total ram usage:        2 bytes
 15256 ;; Hardware stack levels used:    1
 15257 ;; Hardware stack levels required when called:    4
 15258 ;; This function calls:
 15259 ;;		_lcdNibble
 15260 ;; This function is called by:
 15261 ;;		_initLCD
 15262 ;;		_lcdHome
 15263 ;;		_lcdClear
 15264 ;;		_lcdNewline
 15265 ;; This function uses a non-reentrant model
 15266 ;;
 15267                           
 15268                           	psect	text62
 15269  00453A                     __ptext62:
 15270                           	opt stack 0
 15271  00453A                     _lcdInst:
 15272                           	opt stack 22
 15273                           
 15274                           ;incstack = 0
 15275                           ;lcdInst@data stored from wreg
 15276  00453A  6E28               	movwf	lcdInst@data,c
 15277                           
 15278                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 15279  00453C  948C               	bcf	3980,2,c	;volatile
 15280                           
 15281                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 15282  00453E  0E74               	movlw	116
 15283  004540                     u8607:
 15284  004540  2EE8               	decfsz	wreg,f,c
 15285  004542  D7FE               	bra	u8607
 15286  004544  D000               	nop2	
 15287                           
 15288                           ;lcd.c: 30: lcdNibble(data);
 15289  004546  5028               	movf	lcdInst@data,w,c
 15290  004548  ECD9  F01F         	call	_lcdNibble
 15291                           
 15292                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 15293  00454C  0E04               	movlw	4
 15294  00454E  6E27               	movwf	??_lcdInst& (0+255),c
 15295  004550  0E3E               	movlw	62
 15296  004552                     u8617:
 15297  004552  2EE8               	decfsz	wreg,f,c
 15298  004554  D7FE               	bra	u8617
 15299  004556  2E27               	decfsz	??_lcdInst& (0+255),f,c
 15300  004558  D7FC               	bra	u8617
 15301  00455A  0012               	return		;funcret
 15302  00455C                     __end_of_lcdInst:
 15303                           	opt stack 0
 15304                           tblptru	equ	0xFF8
 15305                           tblptrh	equ	0xFF7
 15306                           tblptrl	equ	0xFF6
 15307                           tablat	equ	0xFF5
 15308                           prodh	equ	0xFF4
 15309                           prodl	equ	0xFF3
 15310                           intcon	equ	0xFF2
 15311                           intcon3	equ	0xFF0
 15312                           postinc0	equ	0xFEE
 15313                           wreg	equ	0xFE8
 15314                           postdec1	equ	0xFE5
 15315                           fsr1l	equ	0xFE1
 15316                           indf2	equ	0xFDF
 15317                           postinc2	equ	0xFDE
 15318                           postdec2	equ	0xFDD
 15319                           fsr2h	equ	0xFDA
 15320                           fsr2l	equ	0xFD9
 15321                           status	equ	0xFD8
 15322                           
 15323 ;; *************** function _lcdNibble *****************
 15324 ;; Defined at:
 15325 ;;		line 46 in file "lcd.c"
 15326 ;; Parameters:    Size  Location     Type
 15327 ;;  data            1    wreg     unsigned char 
 15328 ;; Auto vars:     Size  Location     Type
 15329 ;;  data            1   37[COMRAM] unsigned char 
 15330 ;;  temp            1   36[COMRAM] unsigned char 
 15331 ;; Return value:  Size  Location     Type
 15332 ;;                  1    wreg      void 
 15333 ;; Registers used:
 15334 ;;		wreg, status,2, status,0
 15335 ;; Tracked objects:
 15336 ;;		On entry : 0/0
 15337 ;;		On exit  : 0/0
 15338 ;;		Unchanged: 0/0
 15339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15341 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15343 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15344 ;;Total ram usage:        2 bytes
 15345 ;; Hardware stack levels used:    1
 15346 ;; Hardware stack levels required when called:    3
 15347 ;; This function calls:
 15348 ;;		Nothing
 15349 ;; This function is called by:
 15350 ;;		_lcdInst
 15351 ;;		_putch
 15352 ;; This function uses a non-reentrant model
 15353 ;;
 15354                           
 15355                           	psect	text63
 15356  003FB2                     __ptext63:
 15357                           	opt stack 0
 15358  003FB2                     _lcdNibble:
 15359                           	opt stack 24
 15360                           
 15361                           ;incstack = 0
 15362                           ;lcdNibble@data stored from wreg
 15363  003FB2  6E26               	movwf	lcdNibble@data,c
 15364                           
 15365                           ;lcd.c: 48: char temp = data & 0xF0;
 15366  003FB4  5026               	movf	lcdNibble@data,w,c
 15367  003FB6  0BF0               	andlw	240
 15368  003FB8  6E25               	movwf	lcdNibble@temp,c
 15369                           
 15370                           ;lcd.c: 49: LATD = LATD & 0x0F;
 15371  003FBA  508C               	movf	3980,w,c	;volatile
 15372  003FBC  0B0F               	andlw	15
 15373  003FBE  6E8C               	movwf	3980,c	;volatile
 15374                           
 15375                           ;lcd.c: 50: LATD = temp | LATD;
 15376  003FC0  5025               	movf	lcdNibble@temp,w,c
 15377  003FC2  108C               	iorwf	3980,w,c	;volatile
 15378  003FC4  6E8C               	movwf	3980,c	;volatile
 15379                           
 15380                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 15381  003FC6  968C               	bcf	3980,3,c	;volatile
 15382                           
 15383                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 15384  003FC8  0ED6               	movlw	214
 15385  003FCA                     u8627:
 15386  003FCA  D000               	nop2	
 15387  003FCC  D000               	nop2	
 15388  003FCE  2EE8               	decfsz	wreg,f,c
 15389  003FD0  D7FC               	bra	u8627
 15390  003FD2  D000               	nop2	
 15391                           
 15392                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 15393  003FD4  868C               	bsf	3980,3,c	;volatile
 15394                           
 15395                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 15396  003FD6  0ED6               	movlw	214
 15397  003FD8                     u8637:
 15398  003FD8  D000               	nop2	
 15399  003FDA  D000               	nop2	
 15400  003FDC  2EE8               	decfsz	wreg,f,c
 15401  003FDE  D7FC               	bra	u8637
 15402  003FE0  D000               	nop2	
 15403                           
 15404                           ;lcd.c: 58: data = data << 4;
 15405  003FE2  3826               	swapf	lcdNibble@data,w,c
 15406  003FE4  0BF0               	andlw	240
 15407  003FE6  6E26               	movwf	lcdNibble@data,c
 15408                           
 15409                           ;lcd.c: 60: temp = data & 0xF0;
 15410  003FE8  5026               	movf	lcdNibble@data,w,c
 15411  003FEA  0BF0               	andlw	240
 15412  003FEC  6E25               	movwf	lcdNibble@temp,c
 15413                           
 15414                           ;lcd.c: 61: LATD = LATD & 0x0F;
 15415  003FEE  508C               	movf	3980,w,c	;volatile
 15416  003FF0  0B0F               	andlw	15
 15417  003FF2  6E8C               	movwf	3980,c	;volatile
 15418                           
 15419                           ;lcd.c: 62: LATD = temp | LATD;
 15420  003FF4  5025               	movf	lcdNibble@temp,w,c
 15421  003FF6  108C               	iorwf	3980,w,c	;volatile
 15422  003FF8  6E8C               	movwf	3980,c	;volatile
 15423                           
 15424                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 15425  003FFA  968C               	bcf	3980,3,c	;volatile
 15426                           
 15427                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 15428  003FFC  0ED6               	movlw	214
 15429  003FFE                     u8647:
 15430  003FFE  D000               	nop2	
 15431  004000  D000               	nop2	
 15432  004002  2EE8               	decfsz	wreg,f,c
 15433  004004  D7FC               	bra	u8647
 15434  004006  D000               	nop2	
 15435                           
 15436                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 15437  004008  868C               	bsf	3980,3,c	;volatile
 15438                           
 15439                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 15440  00400A  0ED6               	movlw	214
 15441  00400C                     u8657:
 15442  00400C  D000               	nop2	
 15443  00400E  D000               	nop2	
 15444  004010  2EE8               	decfsz	wreg,f,c
 15445  004012  D7FC               	bra	u8657
 15446  004014  D000               	nop2	
 15447  004016  0012               	return		;funcret
 15448  004018                     __end_of_lcdNibble:
 15449                           	opt stack 0
 15450                           tblptru	equ	0xFF8
 15451                           tblptrh	equ	0xFF7
 15452                           tblptrl	equ	0xFF6
 15453                           tablat	equ	0xFF5
 15454                           prodh	equ	0xFF4
 15455                           prodl	equ	0xFF3
 15456                           intcon	equ	0xFF2
 15457                           intcon3	equ	0xFF0
 15458                           postinc0	equ	0xFEE
 15459                           wreg	equ	0xFE8
 15460                           postdec1	equ	0xFE5
 15461                           fsr1l	equ	0xFE1
 15462                           indf2	equ	0xFDF
 15463                           postinc2	equ	0xFDE
 15464                           postdec2	equ	0xFDD
 15465                           fsr2h	equ	0xFDA
 15466                           fsr2l	equ	0xFD9
 15467                           status	equ	0xFD8
 15468                           
 15469 ;; *************** function _service *****************
 15470 ;; Defined at:
 15471 ;;		line 375 in file "main.c"
 15472 ;; Parameters:    Size  Location     Type
 15473 ;;		None
 15474 ;; Auto vars:     Size  Location     Type
 15475 ;;  key             1   35[COMRAM] unsigned char 
 15476 ;; Return value:  Size  Location     Type
 15477 ;;                  1    wreg      void 
 15478 ;; Registers used:
 15479 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15480 ;; Tracked objects:
 15481 ;;		On entry : 0/0
 15482 ;;		On exit  : 0/0
 15483 ;;		Unchanged: 0/0
 15484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15486 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15487 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15488 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15489 ;;Total ram usage:       15 bytes
 15490 ;; Hardware stack levels used:    1
 15491 ;; Hardware stack levels required when called:    2
 15492 ;; This function calls:
 15493 ;;		_keyPressedInterruptService
 15494 ;;		_servoInterruptService
 15495 ;;		i2_startTimer
 15496 ;; This function is called by:
 15497 ;;		Interrupt level 2
 15498 ;; This function uses a non-reentrant model
 15499 ;;
 15500                           
 15501                           	psect	intcode
 15502  000008                     __pintcode:
 15503                           	opt stack 0
 15504  000008                     _service:
 15505                           	opt stack 21
 15506                           
 15507                           ;incstack = 0
 15508  000008  825B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 15509  00000A  ED9F  F01A         	call	int_func,f	;refresh shadow registers
 15510                           tblptru	equ	0xFF8
 15511                           tblptrh	equ	0xFF7
 15512                           tblptrl	equ	0xFF6
 15513                           tablat	equ	0xFF5
 15514                           prodh	equ	0xFF4
 15515                           prodl	equ	0xFF3
 15516                           intcon	equ	0xFF2
 15517                           intcon3	equ	0xFF0
 15518                           postinc0	equ	0xFEE
 15519                           wreg	equ	0xFE8
 15520                           postdec1	equ	0xFE5
 15521                           fsr1l	equ	0xFE1
 15522                           indf2	equ	0xFDF
 15523                           postinc2	equ	0xFDE
 15524                           postdec2	equ	0xFDD
 15525                           fsr2h	equ	0xFDA
 15526                           fsr2l	equ	0xFD9
 15527                           status	equ	0xFD8
 15528                           
 15529                           	psect	intcode_body
 15530  00353E                     __pintcode_body:
 15531                           	opt stack 21
 15532  00353E                     int_func:
 15533                           	opt stack 21
 15534  00353E  0006               	pop		; remove dummy address from shadow register refresh
 15535  003540  CFFA F016          	movff	pclath,??_service
 15536  003544  CFFB F017          	movff	pclatu,??_service+1
 15537  003548  CFE9 F018          	movff	fsr0l,??_service+2
 15538  00354C  CFEA F019          	movff	fsr0h,??_service+3
 15539  003550  CFE1 F01A          	movff	fsr1l,??_service+4
 15540  003554  CFE2 F01B          	movff	fsr1h,??_service+5
 15541  003558  CFD9 F01C          	movff	fsr2l,??_service+6
 15542  00355C  CFDA F01D          	movff	fsr2h,??_service+7
 15543  003560  CFF3 F01E          	movff	prodl,??_service+8
 15544  003564  CFF4 F01F          	movff	prodh,??_service+9
 15545  003568  CFF6 F020          	movff	tblptrl,??_service+10
 15546  00356C  CFF7 F021          	movff	tblptrh,??_service+11
 15547  003570  CFF8 F022          	movff	tblptru,??_service+12
 15548  003574  CFF5 F023          	movff	tablat,??_service+13
 15549                           
 15550                           ;main.c: 377: if( servoInterruptService() )return;
 15551  003578  EC20  F018         	call	_servoInterruptService	;wreg free
 15552  00357C  0900               	iorlw	0
 15553  00357E  A4D8               	btfss	status,2,c
 15554  003580  D035               	goto	i2l204
 15555                           
 15556                           ;main.c: 382: if(TMR1IF){
 15557  003582  A09E               	btfss	3998,0,c	;volatile
 15558  003584  D017               	goto	i2l205
 15559                           
 15560                           ;main.c: 383: startTimer(1,0x8683);
 15561  003586  0E00               	movlw	0
 15562  003588  6E08               	movwf	i2startTimer@timer+1,c
 15563  00358A  0E01               	movlw	1
 15564  00358C  6E07               	movwf	i2startTimer@timer,c
 15565  00358E  0E83               	movlw	131
 15566  003590  6E09               	movwf	i2startTimer@val,c
 15567  003592  0E86               	movlw	134
 15568  003594  6E0A               	movwf	i2startTimer@val+1,c
 15569  003596  0E00               	movlw	0
 15570  003598  6E0B               	movwf	i2startTimer@val+2,c
 15571  00359A  0E00               	movlw	0
 15572  00359C  6E0C               	movwf	i2startTimer@val+3,c
 15573  00359E  EC63  F021         	call	i2_startTimer	;wreg free
 15574                           
 15575                           ;main.c: 384: time+=1;
 15576  0035A2  0E01               	movlw	1
 15577  0035A4  0101               	movlb	1	; () banked
 15578  0035A6  2747               	addwf	_time& (0+255),f,b
 15579  0035A8  0E00               	movlw	0
 15580  0035AA  2348               	addwfc	(_time+1)& (0+255),f,b
 15581  0035AC  2349               	addwfc	(_time+2)& (0+255),f,b
 15582  0035AE  234A               	addwfc	(_time+3)& (0+255),f,b
 15583                           
 15584                           ; BSR set to: 1
 15585                           ;main.c: 385: TMR1IF = 0;
 15586  0035B0  909E               	bcf	3998,0,c	;volatile
 15587                           
 15588                           ; BSR set to: 1
 15589                           ;main.c: 386: return;
 15590  0035B2  D01C               	goto	i2l204
 15591  0035B4                     i2l205:
 15592                           
 15593                           ;main.c: 387: }
 15594                           ;main.c: 390: if(INT0IF){ INT0IF = 0;
 15595  0035B4  A2F2               	btfss	intcon,1,c	;volatile
 15596  0035B6  D007               	goto	i2l206
 15597  0035B8  92F2               	bcf	intcon,1,c	;volatile
 15598                           
 15599                           ;main.c: 391: batteryDetected = 1;
 15600  0035BA  0E00               	movlw	0
 15601  0035BC  0101               	movlb	1	; () banked
 15602  0035BE  6F4C               	movwf	(_batteryDetected+1)& (0+255),b
 15603  0035C0  0E01               	movlw	1
 15604  0035C2  6F4B               	movwf	_batteryDetected& (0+255),b
 15605                           
 15606                           ; BSR set to: 1
 15607                           ;main.c: 392: return;
 15608  0035C4  D013               	goto	i2l204
 15609  0035C6                     i2l206:
 15610                           
 15611                           ;main.c: 393: }
 15612                           ;main.c: 396: if(INT1IF && INT1IE){INT1IF = 0;
 15613  0035C6  B0F0               	btfsc	intcon3,0,c	;volatile
 15614  0035C8  A6F0               	btfss	intcon3,3,c	;volatile
 15615  0035CA  D010               	goto	i2l204
 15616  0035CC  90F0               	bcf	intcon3,0,c	;volatile
 15617                           
 15618                           ;main.c: 397: keyPressedInterruptService();
 15619  0035CE  ECAE  F022         	call	_keyPressedInterruptService	;wreg free
 15620                           
 15621                           ;main.c: 398: char key = (PORTB & 0xF0) >> 4;
 15622  0035D2  3881               	swapf	3969,w,c	;volatile
 15623  0035D4  0B0F               	andlw	15
 15624  0035D6  0B0F               	andlw	15
 15625  0035D8  6E24               	movwf	service@key,c
 15626                           
 15627                           ;main.c: 399: if(key == 12)terminate = 1;
 15628  0035DA  0E0C               	movlw	12
 15629  0035DC  1824               	xorwf	service@key,w,c
 15630  0035DE  A4D8               	btfss	status,2,c
 15631  0035E0  D005               	goto	i2l204
 15632  0035E2  0E00               	movlw	0
 15633  0035E4  0101               	movlb	1	; () banked
 15634  0035E6  6F56               	movwf	(_terminate+1)& (0+255),b
 15635  0035E8  0E01               	movlw	1
 15636  0035EA  6F55               	movwf	_terminate& (0+255),b
 15637  0035EC                     i2l204:
 15638  0035EC  C023  FFF5         	movff	??_service+13,tablat
 15639  0035F0  C022  FFF8         	movff	??_service+12,tblptru
 15640  0035F4  C021  FFF7         	movff	??_service+11,tblptrh
 15641  0035F8  C020  FFF6         	movff	??_service+10,tblptrl
 15642  0035FC  C01F  FFF4         	movff	??_service+9,prodh
 15643  003600  C01E  FFF3         	movff	??_service+8,prodl
 15644  003604  C01D  FFDA         	movff	??_service+7,fsr2h
 15645  003608  C01C  FFD9         	movff	??_service+6,fsr2l
 15646  00360C  C01B  FFE2         	movff	??_service+5,fsr1h
 15647  003610  C01A  FFE1         	movff	??_service+4,fsr1l
 15648  003614  C019  FFEA         	movff	??_service+3,fsr0h
 15649  003618  C018  FFE9         	movff	??_service+2,fsr0l
 15650  00361C  C017  FFFB         	movff	??_service+1,pclatu
 15651  003620  C016  FFFA         	movff	??_service,pclath
 15652  003624  925B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15653  003626  0011               	retfie		f
 15654  003628                     __end_of_service:
 15655                           	opt stack 0
 15656                           pclatu	equ	0xFFB
 15657                           pclath	equ	0xFFA
 15658                           tblptru	equ	0xFF8
 15659                           tblptrh	equ	0xFF7
 15660                           tblptrl	equ	0xFF6
 15661                           tablat	equ	0xFF5
 15662                           prodh	equ	0xFF4
 15663                           prodl	equ	0xFF3
 15664                           intcon	equ	0xFF2
 15665                           intcon3	equ	0xFF0
 15666                           postinc0	equ	0xFEE
 15667                           fsr0h	equ	0xFEA
 15668                           fsr0l	equ	0xFE9
 15669                           wreg	equ	0xFE8
 15670                           postdec1	equ	0xFE5
 15671                           fsr1h	equ	0xFE2
 15672                           fsr1l	equ	0xFE1
 15673                           indf2	equ	0xFDF
 15674                           postinc2	equ	0xFDE
 15675                           postdec2	equ	0xFDD
 15676                           fsr2h	equ	0xFDA
 15677                           fsr2l	equ	0xFD9
 15678                           status	equ	0xFD8
 15679                           
 15680 ;; *************** function _servoInterruptService *****************
 15681 ;; Defined at:
 15682 ;;		line 58 in file "servo.c"
 15683 ;; Parameters:    Size  Location     Type
 15684 ;;		None
 15685 ;; Auto vars:     Size  Location     Type
 15686 ;;		None
 15687 ;; Return value:  Size  Location     Type
 15688 ;;                  1    wreg      unsigned char 
 15689 ;; Registers used:
 15690 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15691 ;; Tracked objects:
 15692 ;;		On entry : 0/0
 15693 ;;		On exit  : 0/0
 15694 ;;		Unchanged: 0/0
 15695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15698 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15699 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15700 ;;Total ram usage:        4 bytes
 15701 ;; Hardware stack levels used:    1
 15702 ;; Hardware stack levels required when called:    1
 15703 ;; This function calls:
 15704 ;;		i2___awmod
 15705 ;;		i2_digitalWrite
 15706 ;;		i2_startTimer
 15707 ;; This function is called by:
 15708 ;;		_service
 15709 ;; This function uses a non-reentrant model
 15710 ;;
 15711                           
 15712                           	psect	text65
 15713  003040                     __ptext65:
 15714                           	opt stack 0
 15715  003040                     _servoInterruptService:
 15716                           	opt stack 21
 15717                           
 15718                           ;servo.c: 60: if(TMR0IF){TMR0IF = 0;
 15719                           
 15720                           ;incstack = 0
 15721  003040  A4F2               	btfss	intcon,2,c	;volatile
 15722  003042  D082               	goto	i2l5702
 15723  003044  94F2               	bcf	intcon,2,c	;volatile
 15724                           
 15725                           ;servo.c: 61: digitalWrite(servos[curr],0);
 15726  003046  90D8               	bcf	status,0,c
 15727  003048  3448               	rlcf	_curr,w,c
 15728  00304A  6ED9               	movwf	fsr2l,c
 15729  00304C  3449               	rlcf	_curr+1,w,c
 15730  00304E  6EDA               	movwf	fsr2h,c
 15731  003050  0E3A               	movlw	low _servos
 15732  003052  26D9               	addwf	fsr2l,f,c
 15733  003054  0E00               	movlw	high _servos
 15734  003056  22DA               	addwfc	fsr2h,f,c
 15735  003058  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 15736  00305C  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 15737  003060  0E00               	movlw	0
 15738  003062  6E0A               	movwf	i2digitalWrite@val+1,c
 15739  003064  0E00               	movlw	0
 15740  003066  6E09               	movwf	i2digitalWrite@val,c
 15741  003068  EC2A  F019         	call	i2_digitalWrite	;wreg free
 15742                           
 15743                           ;servo.c: 62: digitalWrite(servos[ (curr+1)%(n+1) ],1);
 15744  00306C  0E01               	movlw	1
 15745  00306E  2448               	addwf	_curr,w,c
 15746  003070  6E01               	movwf	i2___awmod@dividend,c
 15747  003072  0E00               	movlw	0
 15748  003074  2049               	addwfc	_curr+1,w,c
 15749  003076  6E02               	movwf	i2___awmod@dividend+1,c
 15750  003078  0E01               	movlw	1
 15751  00307A  0100               	movlb	0	; () banked
 15752  00307C  25FE               	addwf	_n& (0+255),w,b
 15753  00307E  6E03               	movwf	i2___awmod@divisor,c
 15754  003080  0E00               	movlw	0
 15755  003082  0100               	movlb	0	; () banked
 15756  003084  21FF               	addwfc	(_n+1)& (0+255),w,b
 15757  003086  6E04               	movwf	i2___awmod@divisor+1,c
 15758  003088  EC6B  F01F         	call	i2___awmod	;wreg free
 15759  00308C  90D8               	bcf	status,0,c
 15760  00308E  3601               	rlcf	?i2___awmod,f,c
 15761  003090  3602               	rlcf	?i2___awmod+1,f,c
 15762  003092  0E3A               	movlw	low _servos
 15763  003094  2401               	addwf	?i2___awmod,w,c
 15764  003096  6ED9               	movwf	fsr2l,c
 15765  003098  0E00               	movlw	high _servos
 15766  00309A  2002               	addwfc	?i2___awmod+1,w,c
 15767  00309C  6EDA               	movwf	fsr2h,c
 15768  00309E  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 15769  0030A2  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 15770  0030A6  0E00               	movlw	0
 15771  0030A8  6E0A               	movwf	i2digitalWrite@val+1,c
 15772  0030AA  0E01               	movlw	1
 15773  0030AC  6E09               	movwf	i2digitalWrite@val,c
 15774  0030AE  EC2A  F019         	call	i2_digitalWrite	;wreg free
 15775                           
 15776                           ;servo.c: 63: startTimer(0, 0xFFFF - pulse[ (curr+1)%(n+1) ]);
 15777  0030B2  0E00               	movlw	0
 15778  0030B4  6E08               	movwf	i2startTimer@timer+1,c
 15779  0030B6  0E00               	movlw	0
 15780  0030B8  6E07               	movwf	i2startTimer@timer,c
 15781  0030BA  0EFF               	movlw	255
 15782  0030BC  6E12               	movwf	??_servoInterruptService& (0+255),c
 15783  0030BE  0EFF               	movlw	255
 15784  0030C0  6E13               	movwf	(??_servoInterruptService+1)& (0+255),c
 15785  0030C2  0E01               	movlw	1
 15786  0030C4  2448               	addwf	_curr,w,c
 15787  0030C6  6E01               	movwf	i2___awmod@dividend,c
 15788  0030C8  0E00               	movlw	0
 15789  0030CA  2049               	addwfc	_curr+1,w,c
 15790  0030CC  6E02               	movwf	i2___awmod@dividend+1,c
 15791  0030CE  0E01               	movlw	1
 15792  0030D0  0100               	movlb	0	; () banked
 15793  0030D2  25FE               	addwf	_n& (0+255),w,b
 15794  0030D4  6E03               	movwf	i2___awmod@divisor,c
 15795  0030D6  0E00               	movlw	0
 15796  0030D8  0100               	movlb	0	; () banked
 15797  0030DA  21FF               	addwfc	(_n+1)& (0+255),w,b
 15798  0030DC  6E04               	movwf	i2___awmod@divisor+1,c
 15799  0030DE  EC6B  F01F         	call	i2___awmod	;wreg free
 15800  0030E2  90D8               	bcf	status,0,c
 15801  0030E4  3601               	rlcf	?i2___awmod,f,c
 15802  0030E6  3602               	rlcf	?i2___awmod+1,f,c
 15803  0030E8  0E3F               	movlw	low _pulse
 15804  0030EA  2401               	addwf	?i2___awmod,w,c
 15805  0030EC  6ED9               	movwf	fsr2l,c
 15806  0030EE  0E01               	movlw	high _pulse
 15807  0030F0  2002               	addwfc	?i2___awmod+1,w,c
 15808  0030F2  6EDA               	movwf	fsr2h,c
 15809  0030F4  CFDE F014          	movff	postinc2,??_servoInterruptService+2
 15810  0030F8  CFDD F015          	movff	postdec2,??_servoInterruptService+3
 15811  0030FC  1E14               	comf	??_servoInterruptService+2,f,c
 15812  0030FE  1E15               	comf	??_servoInterruptService+3,f,c
 15813  003100  4A14               	infsnz	??_servoInterruptService+2,f,c
 15814  003102  2A15               	incf	??_servoInterruptService+3,f,c
 15815  003104  5012               	movf	??_servoInterruptService,w,c
 15816  003106  2614               	addwf	??_servoInterruptService+2,f,c
 15817  003108  5013               	movf	??_servoInterruptService+1,w,c
 15818  00310A  2215               	addwfc	??_servoInterruptService+3,f,c
 15819  00310C  C014  F009         	movff	??_servoInterruptService+2,i2startTimer@val
 15820  003110  C015  F00A         	movff	??_servoInterruptService+3,i2startTimer@val+1
 15821  003114  6A0B               	clrf	i2startTimer@val+2,c
 15822  003116  6A0C               	clrf	i2startTimer@val+3,c
 15823  003118  EC63  F021         	call	i2_startTimer	;wreg free
 15824                           
 15825                           ;servo.c: 65: curr = (curr+1)%(n+1);
 15826  00311C  0E01               	movlw	1
 15827  00311E  2448               	addwf	_curr,w,c
 15828  003120  6E01               	movwf	i2___awmod@dividend,c
 15829  003122  0E00               	movlw	0
 15830  003124  2049               	addwfc	_curr+1,w,c
 15831  003126  6E02               	movwf	i2___awmod@dividend+1,c
 15832  003128  0E01               	movlw	1
 15833  00312A  0100               	movlb	0	; () banked
 15834  00312C  25FE               	addwf	_n& (0+255),w,b
 15835  00312E  6E03               	movwf	i2___awmod@divisor,c
 15836  003130  0E00               	movlw	0
 15837  003132  0100               	movlb	0	; () banked
 15838  003134  21FF               	addwfc	(_n+1)& (0+255),w,b
 15839  003136  6E04               	movwf	i2___awmod@divisor+1,c
 15840  003138  EC6B  F01F         	call	i2___awmod	;wreg free
 15841  00313C  C001  F048         	movff	?i2___awmod,_curr
 15842  003140  C002  F049         	movff	?i2___awmod+1,_curr+1
 15843                           
 15844                           ;servo.c: 66: return 1;
 15845  003144  0E01               	movlw	1
 15846  003146  0012               	return	
 15847  003148                     i2l5702:
 15848                           
 15849                           ;servo.c: 67: }
 15850                           ;servo.c: 68: return 0;
 15851  003148  0E00               	movlw	0
 15852  00314A  0012               	return	
 15853  00314C                     __end_of_servoInterruptService:
 15854                           	opt stack 0
 15855                           pclatu	equ	0xFFB
 15856                           pclath	equ	0xFFA
 15857                           tblptru	equ	0xFF8
 15858                           tblptrh	equ	0xFF7
 15859                           tblptrl	equ	0xFF6
 15860                           tablat	equ	0xFF5
 15861                           prodh	equ	0xFF4
 15862                           prodl	equ	0xFF3
 15863                           intcon	equ	0xFF2
 15864                           intcon3	equ	0xFF0
 15865                           postinc0	equ	0xFEE
 15866                           fsr0h	equ	0xFEA
 15867                           fsr0l	equ	0xFE9
 15868                           wreg	equ	0xFE8
 15869                           postdec1	equ	0xFE5
 15870                           fsr1h	equ	0xFE2
 15871                           fsr1l	equ	0xFE1
 15872                           indf2	equ	0xFDF
 15873                           postinc2	equ	0xFDE
 15874                           postdec2	equ	0xFDD
 15875                           fsr2h	equ	0xFDA
 15876                           fsr2l	equ	0xFD9
 15877                           status	equ	0xFD8
 15878                           
 15879 ;; *************** function i2_startTimer *****************
 15880 ;; Defined at:
 15881 ;;		line 77 in file "timer.c"
 15882 ;; Parameters:    Size  Location     Type
 15883 ;;  timer           2    6[COMRAM] int 
 15884 ;;  val             4    8[COMRAM] long 
 15885 ;; Auto vars:     Size  Location     Type
 15886 ;;		None
 15887 ;; Return value:  Size  Location     Type
 15888 ;;                  1    wreg      void 
 15889 ;; Registers used:
 15890 ;;		wreg, status,2, status,0
 15891 ;; Tracked objects:
 15892 ;;		On entry : 0/0
 15893 ;;		On exit  : 0/0
 15894 ;;		Unchanged: 0/0
 15895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15896 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15898 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15899 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15900 ;;Total ram usage:        8 bytes
 15901 ;; Hardware stack levels used:    1
 15902 ;; This function calls:
 15903 ;;		Nothing
 15904 ;; This function is called by:
 15905 ;;		_service
 15906 ;;		_servoInterruptService
 15907 ;; This function uses a non-reentrant model
 15908 ;;
 15909                           
 15910                           	psect	text66
 15911  0042C6                     __ptext66:
 15912                           	opt stack 0
 15913  0042C6                     i2_startTimer:
 15914                           	opt stack 22
 15915                           
 15916                           ;timer.c: 78: switch(timer){
 15917                           
 15918                           ;incstack = 0
 15919  0042C6  D012               	goto	i2l5404
 15920  0042C8                     i2l461:
 15921                           
 15922                           ;timer.c: 80: TMR0H = val>>8;
 15923  0042C8  C00A  FFD7         	movff	i2startTimer@val+1,4055	;volatile
 15924                           
 15925                           ;timer.c: 81: TMR0L = val;
 15926  0042CC  C009  FFD6         	movff	i2startTimer@val,4054	;volatile
 15927                           
 15928                           ;timer.c: 82: T0CON |= 1<<7;
 15929  0042D0  8ED5               	bsf	4053,7,c	;volatile
 15930                           
 15931                           ;timer.c: 83: break;
 15932  0042D2  0012               	return	
 15933  0042D4                     i2l463:
 15934                           
 15935                           ;timer.c: 85: TMR1H = val>>8;
 15936  0042D4  C00A  FFCF         	movff	i2startTimer@val+1,4047	;volatile
 15937                           
 15938                           ;timer.c: 86: TMR1L = val;
 15939  0042D8  C009  FFCE         	movff	i2startTimer@val,4046	;volatile
 15940                           
 15941                           ;timer.c: 87: T1CON |= 1<<0;
 15942  0042DC  80CD               	bsf	4045,0,c	;volatile
 15943                           
 15944                           ;timer.c: 88: break;
 15945  0042DE  0012               	return	
 15946  0042E0                     i2l464:
 15947                           
 15948                           ;timer.c: 90: TMR3H = val>>8;
 15949  0042E0  C00A  FFB3         	movff	i2startTimer@val+1,4019	;volatile
 15950                           
 15951                           ;timer.c: 91: TMR3L = val;
 15952  0042E4  C009  FFB2         	movff	i2startTimer@val,4018	;volatile
 15953                           
 15954                           ;timer.c: 92: T3CON |= 1<<0;
 15955  0042E8  80B1               	bsf	4017,0,c	;volatile
 15956                           
 15957                           ;timer.c: 93: }
 15958  0042EA  0012               	return	
 15959  0042EC                     i2l5404:
 15960  0042EC  C007  F00D         	movff	i2startTimer@timer,??i2_startTimer
 15961  0042F0  C008  F00E         	movff	i2startTimer@timer+1,??i2_startTimer+1
 15962                           
 15963                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15964                           ; Switch size 1, requested type "space"
 15965                           ; Number of cases is 1, Range of values is 0 to 0
 15966                           ; switch strategies available:
 15967                           ; Name         Instructions Cycles
 15968                           ; simple_byte            4     3 (average)
 15969                           ;	Chosen strategy is simple_byte
 15970  0042F4  500E               	movf	??i2_startTimer+1,w,c
 15971  0042F6  0A00               	xorlw	0	; case 0
 15972  0042F8  A4D8               	btfss	status,2,c
 15973  0042FA  0012               	return	
 15974                           
 15975                           ; Switch size 1, requested type "space"
 15976                           ; Number of cases is 3, Range of values is 0 to 3
 15977                           ; switch strategies available:
 15978                           ; Name         Instructions Cycles
 15979                           ; simple_byte           10     6 (average)
 15980                           ;	Chosen strategy is simple_byte
 15981  0042FC  500D               	movf	??i2_startTimer,w,c
 15982  0042FE  0A00               	xorlw	0	; case 0
 15983  004300  B4D8               	btfsc	status,2,c
 15984  004302  D7E2               	goto	i2l461
 15985  004304  0A01               	xorlw	1	; case 1
 15986  004306  B4D8               	btfsc	status,2,c
 15987  004308  D7E5               	goto	i2l463
 15988  00430A  0A02               	xorlw	2	; case 3
 15989  00430C  A4D8               	btfss	status,2,c
 15990  00430E  0012               	return	
 15991  004310  D7E7               	goto	i2l464
 15992  004312                     __end_ofi2_startTimer:
 15993                           	opt stack 0
 15994                           pclatu	equ	0xFFB
 15995                           pclath	equ	0xFFA
 15996                           tblptru	equ	0xFF8
 15997                           tblptrh	equ	0xFF7
 15998                           tblptrl	equ	0xFF6
 15999                           tablat	equ	0xFF5
 16000                           prodh	equ	0xFF4
 16001                           prodl	equ	0xFF3
 16002                           intcon	equ	0xFF2
 16003                           intcon3	equ	0xFF0
 16004                           postinc0	equ	0xFEE
 16005                           fsr0h	equ	0xFEA
 16006                           fsr0l	equ	0xFE9
 16007                           wreg	equ	0xFE8
 16008                           postdec1	equ	0xFE5
 16009                           fsr1h	equ	0xFE2
 16010                           fsr1l	equ	0xFE1
 16011                           indf2	equ	0xFDF
 16012                           postinc2	equ	0xFDE
 16013                           postdec2	equ	0xFDD
 16014                           fsr2h	equ	0xFDA
 16015                           fsr2l	equ	0xFD9
 16016                           status	equ	0xFD8
 16017                           
 16018 ;; *************** function i2_digitalWrite *****************
 16019 ;; Defined at:
 16020 ;;		line 53 in file "iopin.c"
 16021 ;; Parameters:    Size  Location     Type
 16022 ;;  pin             2    6[COMRAM] PTR int 
 16023 ;;		 -> AA_float(4), cylinderMotor2(4), padServo(4), conveyorServo(4), 
 16024 ;;		 -> cylinderMotor1(4), redirectingServo(4), 
 16025 ;;  val             2    8[COMRAM] int 
 16026 ;; Auto vars:     Size  Location     Type
 16027 ;;  digitalWrite    2   15[COMRAM] int 
 16028 ;; Return value:  Size  Location     Type
 16029 ;;                  1    wreg      void 
 16030 ;; Registers used:
 16031 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 16032 ;; Tracked objects:
 16033 ;;		On entry : 0/0
 16034 ;;		On exit  : 0/0
 16035 ;;		Unchanged: 0/0
 16036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16037 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16038 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16039 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16040 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16041 ;;Total ram usage:       11 bytes
 16042 ;; Hardware stack levels used:    1
 16043 ;; This function calls:
 16044 ;;		Nothing
 16045 ;; This function is called by:
 16046 ;;		_servoInterruptService
 16047 ;; This function uses a non-reentrant model
 16048 ;;
 16049                           
 16050                           	psect	text67
 16051  003254                     __ptext67:
 16052                           	opt stack 0
 16053  003254                     i2_digitalWrite:
 16054                           	opt stack 21
 16055                           
 16056                           ;iopin.c: 54: if(pin){
 16057                           
 16058                           ;incstack = 0
 16059  003254  5007               	movf	i2digitalWrite@pin,w,c
 16060  003256  1008               	iorwf	i2digitalWrite@pin+1,w,c
 16061  003258  B4D8               	btfsc	status,2,c
 16062  00325A  0012               	return	
 16063                           
 16064                           ;iopin.c: 55: int p = 1 << pin[1];
 16065  00325C  0E02               	movlw	2
 16066  00325E  2407               	addwf	i2digitalWrite@pin,w,c
 16067  003260  6E0B               	movwf	??i2_digitalWrite& (0+255),c
 16068  003262  0E00               	movlw	0
 16069  003264  2008               	addwfc	i2digitalWrite@pin+1,w,c
 16070  003266  6E0C               	movwf	(??i2_digitalWrite+1)& (0+255),c
 16071  003268  C00B  FFF6         	movff	??i2_digitalWrite,tblptrl
 16072  00326C  C00C  FFF7         	movff	??i2_digitalWrite+1,tblptrh
 16073  003270  0E00               	movlw	low (__mediumconst shr (0+16))
 16074  003272  6EF8               	movwf	tblptru,c
 16075  003274  0E0F               	movlw	(high __ramtop+-1)
 16076  003276  64F7               	cpfsgt	tblptrh,c
 16077  003278  D003               	bra	i2u529_47
 16078  00327A  0008               	tblrd		*
 16079  00327C  50F5               	movf	tablat,w,c
 16080  00327E  D005               	bra	i2u529_40
 16081  003280                     i2u529_47:
 16082  003280  CFF6 FFD9          	movff	tblptrl,fsr2l
 16083  003284  CFF7 FFDA          	movff	tblptrh,fsr2h
 16084  003288  50DF               	movf	indf2,w,c
 16085  00328A                     i2u529_40:
 16086  00328A  6E0D               	movwf	(??i2_digitalWrite+2)& (0+255),c
 16087  00328C  0E01               	movlw	1
 16088  00328E  6E0E               	movwf	(??i2_digitalWrite+3)& (0+255),c
 16089  003290  0E00               	movlw	0
 16090  003292  6E0F               	movwf	(??i2_digitalWrite+4)& (0+255),c
 16091  003294  2A0D               	incf	??i2_digitalWrite+2,f,c
 16092  003296  D003               	goto	i2u530_44
 16093  003298                     i2u530_45:
 16094  003298  90D8               	bcf	status,0,c
 16095  00329A  360E               	rlcf	??i2_digitalWrite+3,f,c
 16096  00329C  360F               	rlcf	??i2_digitalWrite+4,f,c
 16097  00329E                     i2u530_44:
 16098  00329E  2E0D               	decfsz	??i2_digitalWrite+2,f,c
 16099  0032A0  D7FB               	goto	i2u530_45
 16100  0032A2  C00E  F010         	movff	??i2_digitalWrite+3,i2digitalWrite@p
 16101  0032A6  C00F  F011         	movff	??i2_digitalWrite+4,i2digitalWrite@p+1
 16102                           
 16103                           ;iopin.c: 56: if(val == 0){
 16104  0032AA  5009               	movf	i2digitalWrite@val,w,c
 16105  0032AC  100A               	iorwf	i2digitalWrite@val+1,w,c
 16106  0032AE  A4D8               	btfss	status,2,c
 16107  0032B0  D02B               	goto	i2l5390
 16108                           
 16109                           ;iopin.c: 57: p ^= 0xff;
 16110  0032B2  0EFF               	movlw	255
 16111  0032B4  1A10               	xorwf	i2digitalWrite@p,f,c
 16112                           
 16113                           ;iopin.c: 58: }
 16114                           ;iopin.c: 60: switch(pin[0]){
 16115  0032B6  D028               	goto	i2l5390
 16116  0032B8                     i2l5366:
 16117  0032B8  0409               	decf	i2digitalWrite@val,w,c
 16118  0032BA  100A               	iorwf	i2digitalWrite@val+1,w,c
 16119  0032BC  A4D8               	btfss	status,2,c
 16120  0032BE  D003               	goto	i2l5370
 16121  0032C0  5010               	movf	i2digitalWrite@p,w,c
 16122  0032C2  1289               	iorwf	3977,f,c	;volatile
 16123  0032C4  0012               	return	
 16124  0032C6                     i2l5370:
 16125                           
 16126                           ;iopin.c: 62: else LATA &= p;
 16127  0032C6  5010               	movf	i2digitalWrite@p,w,c
 16128  0032C8  1689               	andwf	3977,f,c	;volatile
 16129                           
 16130                           ;iopin.c: 63: break;
 16131  0032CA  0012               	return	
 16132  0032CC                     i2l5372:
 16133  0032CC  0409               	decf	i2digitalWrite@val,w,c
 16134  0032CE  100A               	iorwf	i2digitalWrite@val+1,w,c
 16135  0032D0  A4D8               	btfss	status,2,c
 16136  0032D2  D003               	goto	i2l5376
 16137  0032D4  5010               	movf	i2digitalWrite@p,w,c
 16138  0032D6  128A               	iorwf	3978,f,c	;volatile
 16139  0032D8  0012               	return	
 16140  0032DA                     i2l5376:
 16141                           
 16142                           ;iopin.c: 65: else LATB &= p;
 16143  0032DA  5010               	movf	i2digitalWrite@p,w,c
 16144  0032DC  168A               	andwf	3978,f,c	;volatile
 16145                           
 16146                           ;iopin.c: 66: break;
 16147  0032DE  0012               	return	
 16148  0032E0                     i2l5378:
 16149  0032E0  0409               	decf	i2digitalWrite@val,w,c
 16150  0032E2  100A               	iorwf	i2digitalWrite@val+1,w,c
 16151  0032E4  A4D8               	btfss	status,2,c
 16152  0032E6  D003               	goto	i2l5382
 16153  0032E8  5010               	movf	i2digitalWrite@p,w,c
 16154  0032EA  128B               	iorwf	3979,f,c	;volatile
 16155  0032EC  0012               	return	
 16156  0032EE                     i2l5382:
 16157                           
 16158                           ;iopin.c: 68: else LATC &= p;
 16159  0032EE  5010               	movf	i2digitalWrite@p,w,c
 16160  0032F0  168B               	andwf	3979,f,c	;volatile
 16161                           
 16162                           ;iopin.c: 69: break;
 16163  0032F2  0012               	return	
 16164  0032F4                     i2l5384:
 16165  0032F4  0409               	decf	i2digitalWrite@val,w,c
 16166  0032F6  100A               	iorwf	i2digitalWrite@val+1,w,c
 16167  0032F8  A4D8               	btfss	status,2,c
 16168  0032FA  D003               	goto	i2l5388
 16169  0032FC  5010               	movf	i2digitalWrite@p,w,c
 16170  0032FE  128C               	iorwf	3980,f,c	;volatile
 16171  003300  0012               	return	
 16172  003302                     i2l5388:
 16173                           
 16174                           ;iopin.c: 71: else LATD &= p;
 16175  003302  5010               	movf	i2digitalWrite@p,w,c
 16176  003304  168C               	andwf	3980,f,c	;volatile
 16177                           
 16178                           ;iopin.c: 72: }
 16179  003306  0012               	return	
 16180  003308                     i2l5390:
 16181  003308  C007  FFF6         	movff	i2digitalWrite@pin,tblptrl
 16182  00330C  C008  FFF7         	movff	i2digitalWrite@pin+1,tblptrh
 16183  003310  0E00               	movlw	low (__mediumconst shr (0+16))
 16184  003312  6EF8               	movwf	tblptru,c
 16185  003314  0E0F               	movlw	(high __ramtop+-1)
 16186  003316  64F7               	cpfsgt	tblptrh,c
 16187  003318  D007               	bra	i2u536_47
 16188  00331A  0009               	tblrd		*+
 16189  00331C  CFF5 F00B          	movff	tablat,??i2_digitalWrite
 16190  003320  0009               	tblrd		*+
 16191  003322  CFF5 F00C          	movff	tablat,??i2_digitalWrite+1
 16192  003326  D008               	bra	i2u536_40
 16193  003328                     i2u536_47:
 16194  003328  CFF6 FFD9          	movff	tblptrl,fsr2l
 16195  00332C  CFF7 FFDA          	movff	tblptrh,fsr2h
 16196  003330  CFDE F00B          	movff	postinc2,??i2_digitalWrite
 16197  003334  CFDE F00C          	movff	postinc2,??i2_digitalWrite+1
 16198  003338                     i2u536_40:
 16199                           
 16200                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16201                           ; Switch size 1, requested type "space"
 16202                           ; Number of cases is 1, Range of values is 0 to 0
 16203                           ; switch strategies available:
 16204                           ; Name         Instructions Cycles
 16205                           ; simple_byte            4     3 (average)
 16206                           ;	Chosen strategy is simple_byte
 16207  003338  500C               	movf	??i2_digitalWrite+1,w,c
 16208  00333A  0A00               	xorlw	0	; case 0
 16209  00333C  A4D8               	btfss	status,2,c
 16210  00333E  0012               	return	
 16211                           
 16212                           ; Switch size 1, requested type "space"
 16213                           ; Number of cases is 4, Range of values is 0 to 3
 16214                           ; switch strategies available:
 16215                           ; Name         Instructions Cycles
 16216                           ; simple_byte           13     7 (average)
 16217                           ;	Chosen strategy is simple_byte
 16218  003340  500B               	movf	??i2_digitalWrite,w,c
 16219  003342  0A00               	xorlw	0	; case 0
 16220  003344  B4D8               	btfsc	status,2,c
 16221  003346  D7B8               	goto	i2l5366
 16222  003348  0A01               	xorlw	1	; case 1
 16223  00334A  B4D8               	btfsc	status,2,c
 16224  00334C  D7BF               	goto	i2l5372
 16225  00334E  0A03               	xorlw	3	; case 2
 16226  003350  B4D8               	btfsc	status,2,c
 16227  003352  D7C6               	goto	i2l5378
 16228  003354  0A01               	xorlw	1	; case 3
 16229  003356  A4D8               	btfss	status,2,c
 16230  003358  0012               	return	
 16231  00335A  D7CC               	goto	i2l5384
 16232  00335C                     __end_ofi2_digitalWrite:
 16233                           	opt stack 0
 16234                           pclatu	equ	0xFFB
 16235                           pclath	equ	0xFFA
 16236                           tblptru	equ	0xFF8
 16237                           tblptrh	equ	0xFF7
 16238                           tblptrl	equ	0xFF6
 16239                           tablat	equ	0xFF5
 16240                           prodh	equ	0xFF4
 16241                           prodl	equ	0xFF3
 16242                           intcon	equ	0xFF2
 16243                           intcon3	equ	0xFF0
 16244                           postinc0	equ	0xFEE
 16245                           fsr0h	equ	0xFEA
 16246                           fsr0l	equ	0xFE9
 16247                           wreg	equ	0xFE8
 16248                           postdec1	equ	0xFE5
 16249                           fsr1h	equ	0xFE2
 16250                           fsr1l	equ	0xFE1
 16251                           indf2	equ	0xFDF
 16252                           postinc2	equ	0xFDE
 16253                           postdec2	equ	0xFDD
 16254                           fsr2h	equ	0xFDA
 16255                           fsr2l	equ	0xFD9
 16256                           status	equ	0xFD8
 16257                           
 16258 ;; *************** function i2___awmod *****************
 16259 ;; Defined at:
 16260 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 16261 ;; Parameters:    Size  Location     Type
 16262 ;;  dividend        2    0[COMRAM] int 
 16263 ;;  divisor         2    2[COMRAM] int 
 16264 ;; Auto vars:     Size  Location     Type
 16265 ;;  __awmod         1    5[COMRAM] unsigned char 
 16266 ;;  __awmod         1    4[COMRAM] unsigned char 
 16267 ;; Return value:  Size  Location     Type
 16268 ;;                  2    0[COMRAM] int 
 16269 ;; Registers used:
 16270 ;;		wreg, status,2, status,0
 16271 ;; Tracked objects:
 16272 ;;		On entry : 0/0
 16273 ;;		On exit  : 0/0
 16274 ;;		Unchanged: 0/0
 16275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16276 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16277 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16279 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16280 ;;Total ram usage:        6 bytes
 16281 ;; Hardware stack levels used:    1
 16282 ;; This function calls:
 16283 ;;		Nothing
 16284 ;; This function is called by:
 16285 ;;		_servoInterruptService
 16286 ;; This function uses a non-reentrant model
 16287 ;;
 16288                           
 16289                           	psect	text68
 16290  003ED6                     __ptext68:
 16291                           	opt stack 0
 16292  003ED6                     i2___awmod:
 16293                           	opt stack 21
 16294                           
 16295                           ;incstack = 0
 16296  003ED6  0E00               	movlw	0
 16297  003ED8  6E06               	movwf	i2___awmod@sign,c
 16298  003EDA  AE02               	btfss	i2___awmod@dividend+1,7,c
 16299  003EDC  D006               	goto	i2l5418
 16300  003EDE  6C01               	negf	i2___awmod@dividend,c
 16301  003EE0  1E02               	comf	i2___awmod@dividend+1,f,c
 16302  003EE2  B0D8               	btfsc	status,0,c
 16303  003EE4  2A02               	incf	i2___awmod@dividend+1,f,c
 16304  003EE6  0E01               	movlw	1
 16305  003EE8  6E06               	movwf	i2___awmod@sign,c
 16306  003EEA                     i2l5418:
 16307  003EEA  AE04               	btfss	i2___awmod@divisor+1,7,c
 16308  003EEC  D004               	goto	i2l5422
 16309  003EEE  6C03               	negf	i2___awmod@divisor,c
 16310  003EF0  1E04               	comf	i2___awmod@divisor+1,f,c
 16311  003EF2  B0D8               	btfsc	status,0,c
 16312  003EF4  2A04               	incf	i2___awmod@divisor+1,f,c
 16313  003EF6                     i2l5422:
 16314  003EF6  5003               	movf	i2___awmod@divisor,w,c
 16315  003EF8  1004               	iorwf	i2___awmod@divisor+1,w,c
 16316  003EFA  B4D8               	btfsc	status,2,c
 16317  003EFC  D018               	goto	i2l5438
 16318  003EFE  0E01               	movlw	1
 16319  003F00  6E05               	movwf	i2___awmod@counter,c
 16320  003F02  D004               	goto	i2l5428
 16321  003F04                     i2l5426:
 16322  003F04  90D8               	bcf	status,0,c
 16323  003F06  3603               	rlcf	i2___awmod@divisor,f,c
 16324  003F08  3604               	rlcf	i2___awmod@divisor+1,f,c
 16325  003F0A  2A05               	incf	i2___awmod@counter,f,c
 16326  003F0C                     i2l5428:
 16327  003F0C  AE04               	btfss	i2___awmod@divisor+1,7,c
 16328  003F0E  D7FA               	goto	i2l5426
 16329  003F10                     i2l5430:
 16330  003F10  5003               	movf	i2___awmod@divisor,w,c
 16331  003F12  5C01               	subwf	i2___awmod@dividend,w,c
 16332  003F14  5004               	movf	i2___awmod@divisor+1,w,c
 16333  003F16  5802               	subwfb	i2___awmod@dividend+1,w,c
 16334  003F18  A0D8               	btfss	status,0,c
 16335  003F1A  D004               	goto	i2l5434
 16336  003F1C  5003               	movf	i2___awmod@divisor,w,c
 16337  003F1E  5E01               	subwf	i2___awmod@dividend,f,c
 16338  003F20  5004               	movf	i2___awmod@divisor+1,w,c
 16339  003F22  5A02               	subwfb	i2___awmod@dividend+1,f,c
 16340  003F24                     i2l5434:
 16341  003F24  90D8               	bcf	status,0,c
 16342  003F26  3204               	rrcf	i2___awmod@divisor+1,f,c
 16343  003F28  3203               	rrcf	i2___awmod@divisor,f,c
 16344  003F2A  2E05               	decfsz	i2___awmod@counter,f,c
 16345  003F2C  D7F1               	goto	i2l5430
 16346  003F2E                     i2l5438:
 16347  003F2E  5006               	movf	i2___awmod@sign,w,c
 16348  003F30  B4D8               	btfsc	status,2,c
 16349  003F32  D004               	goto	i2l5442
 16350  003F34  6C01               	negf	i2___awmod@dividend,c
 16351  003F36  1E02               	comf	i2___awmod@dividend+1,f,c
 16352  003F38  B0D8               	btfsc	status,0,c
 16353  003F3A  2A02               	incf	i2___awmod@dividend+1,f,c
 16354  003F3C                     i2l5442:
 16355  003F3C  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 16356  003F40  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 16357  003F44  0012               	return	
 16358  003F46                     __end_ofi2___awmod:
 16359                           	opt stack 0
 16360                           pclatu	equ	0xFFB
 16361                           pclath	equ	0xFFA
 16362                           tblptru	equ	0xFF8
 16363                           tblptrh	equ	0xFF7
 16364                           tblptrl	equ	0xFF6
 16365                           tablat	equ	0xFF5
 16366                           prodh	equ	0xFF4
 16367                           prodl	equ	0xFF3
 16368                           intcon	equ	0xFF2
 16369                           intcon3	equ	0xFF0
 16370                           postinc0	equ	0xFEE
 16371                           fsr0h	equ	0xFEA
 16372                           fsr0l	equ	0xFE9
 16373                           wreg	equ	0xFE8
 16374                           postdec1	equ	0xFE5
 16375                           fsr1h	equ	0xFE2
 16376                           fsr1l	equ	0xFE1
 16377                           indf2	equ	0xFDF
 16378                           postinc2	equ	0xFDE
 16379                           postdec2	equ	0xFDD
 16380                           fsr2h	equ	0xFDA
 16381                           fsr2l	equ	0xFD9
 16382                           status	equ	0xFD8
 16383                           
 16384 ;; *************** function _keyPressedInterruptService *****************
 16385 ;; Defined at:
 16386 ;;		line 49 in file "keypad.c"
 16387 ;; Parameters:    Size  Location     Type
 16388 ;;		None
 16389 ;; Auto vars:     Size  Location     Type
 16390 ;;  key             1    0[COMRAM] unsigned char 
 16391 ;; Return value:  Size  Location     Type
 16392 ;;                  1    wreg      void 
 16393 ;; Registers used:
 16394 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 16395 ;; Tracked objects:
 16396 ;;		On entry : 0/0
 16397 ;;		On exit  : 0/0
 16398 ;;		Unchanged: 0/0
 16399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16401 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16403 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16404 ;;Total ram usage:        1 bytes
 16405 ;; Hardware stack levels used:    1
 16406 ;; This function calls:
 16407 ;;		Nothing
 16408 ;; This function is called by:
 16409 ;;		_service
 16410 ;; This function uses a non-reentrant model
 16411 ;;
 16412                           
 16413                           	psect	text69
 16414  00455C                     __ptext69:
 16415                           	opt stack 0
 16416  00455C                     _keyPressedInterruptService:
 16417                           	opt stack 22
 16418                           
 16419                           ;keypad.c: 50: char key = (PORTB & 0xF0) >> 4;
 16420                           
 16421                           ;incstack = 0
 16422  00455C  3881               	swapf	3969,w,c	;volatile
 16423  00455E  0B0F               	andlw	15
 16424  004560  0B0F               	andlw	15
 16425  004562  6E01               	movwf	keyPressedInterruptService@key,c
 16426                           
 16427                           ;keypad.c: 51: lastKey = keys[key];
 16428  004564  5001               	movf	keyPressedInterruptService@key,w,c
 16429  004566  0D01               	mullw	1
 16430  004568  0E21               	movlw	low _keys
 16431  00456A  24F3               	addwf	prodl,w,c
 16432  00456C  6EF6               	movwf	tblptrl,c
 16433  00456E  0EFE               	movlw	high _keys
 16434  004570  20F4               	addwfc	prodh,w,c
 16435  004572  6EF7               	movwf	tblptrh,c
 16436  004574                     	if	0	;There are less than 3 active tblptr bytes
 16437  004574                     	endif
 16438  004574  0008               	tblrd		*
 16439  004576  CFF5 F04C          	movff	tablat,_lastKey
 16440  00457A  0012               	return		;funcret
 16441  00457C                     __end_of_keyPressedInterruptService:
 16442                           	opt stack 0
 16443                           pclatu	equ	0xFFB
 16444                           pclath	equ	0xFFA
 16445                           tblptru	equ	0xFF8
 16446                           tblptrh	equ	0xFF7
 16447                           tblptrl	equ	0xFF6
 16448                           tablat	equ	0xFF5
 16449                           prodh	equ	0xFF4
 16450                           prodl	equ	0xFF3
 16451                           intcon	equ	0xFF2
 16452                           intcon3	equ	0xFF0
 16453                           postinc0	equ	0xFEE
 16454                           fsr0h	equ	0xFEA
 16455                           fsr0l	equ	0xFE9
 16456                           wreg	equ	0xFE8
 16457                           postdec1	equ	0xFE5
 16458                           fsr1h	equ	0xFE2
 16459                           fsr1l	equ	0xFE1
 16460                           indf2	equ	0xFDF
 16461                           postinc2	equ	0xFDE
 16462                           postdec2	equ	0xFDD
 16463                           fsr2h	equ	0xFDA
 16464                           fsr2l	equ	0xFD9
 16465                           status	equ	0xFD8
 16466                           pclatu	equ	0xFFB
 16467                           pclath	equ	0xFFA
 16468                           tblptru	equ	0xFF8
 16469                           tblptrh	equ	0xFF7
 16470                           tblptrl	equ	0xFF6
 16471                           tablat	equ	0xFF5
 16472                           prodh	equ	0xFF4
 16473                           prodl	equ	0xFF3
 16474                           intcon	equ	0xFF2
 16475                           intcon3	equ	0xFF0
 16476                           postinc0	equ	0xFEE
 16477                           fsr0h	equ	0xFEA
 16478                           fsr0l	equ	0xFE9
 16479                           wreg	equ	0xFE8
 16480                           postdec1	equ	0xFE5
 16481                           fsr1h	equ	0xFE2
 16482                           fsr1l	equ	0xFE1
 16483                           indf2	equ	0xFDF
 16484                           postinc2	equ	0xFDE
 16485                           postdec2	equ	0xFDD
 16486                           fsr2h	equ	0xFDA
 16487                           fsr2l	equ	0xFD9
 16488                           status	equ	0xFD8
 16489                           
 16490                           	psect	rparam
 16491  0000                     pclatu	equ	0xFFB
 16492                           pclath	equ	0xFFA
 16493                           tblptru	equ	0xFF8
 16494                           tblptrh	equ	0xFF7
 16495                           tblptrl	equ	0xFF6
 16496                           tablat	equ	0xFF5
 16497                           prodh	equ	0xFF4
 16498                           prodl	equ	0xFF3
 16499                           intcon	equ	0xFF2
 16500                           intcon3	equ	0xFF0
 16501                           postinc0	equ	0xFEE
 16502                           fsr0h	equ	0xFEA
 16503                           fsr0l	equ	0xFE9
 16504                           wreg	equ	0xFE8
 16505                           postdec1	equ	0xFE5
 16506                           fsr1h	equ	0xFE2
 16507                           fsr1l	equ	0xFE1
 16508                           indf2	equ	0xFDF
 16509                           postinc2	equ	0xFDE
 16510                           postdec2	equ	0xFDD
 16511                           fsr2h	equ	0xFDA
 16512                           fsr2l	equ	0xFD9
 16513                           status	equ	0xFD8
 16514                           
 16515                           	psect	temp
 16516  00005B                     btemp:
 16517                           	opt stack 0
 16518  00005B                     	ds	1
 16519  0000                     int$flags	set	btemp
 16520                           pclatu	equ	0xFFB
 16521                           pclath	equ	0xFFA
 16522                           tblptru	equ	0xFF8
 16523                           tblptrh	equ	0xFF7
 16524                           tblptrl	equ	0xFF6
 16525                           tablat	equ	0xFF5
 16526                           prodh	equ	0xFF4
 16527                           prodl	equ	0xFF3
 16528                           intcon	equ	0xFF2
 16529                           intcon3	equ	0xFF0
 16530                           postinc0	equ	0xFEE
 16531                           fsr0h	equ	0xFEA
 16532                           fsr0l	equ	0xFE9
 16533                           wreg	equ	0xFE8
 16534                           postdec1	equ	0xFE5
 16535                           fsr1h	equ	0xFE2
 16536                           fsr1l	equ	0xFE1
 16537                           indf2	equ	0xFDF
 16538                           postinc2	equ	0xFDE
 16539                           postdec2	equ	0xFDD
 16540                           fsr2h	equ	0xFDA
 16541                           fsr2l	equ	0xFD9
 16542                           status	equ	0xFD8


Data Sizes:
    Strings     410
    Constant    218
    Data        25
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     57      90
    BANK0           128    117     128
    BANK1           256     63      89
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_23(CODE[17]), STR_22(CODE[11]), STR_21(CODE[19]), STR_20(CODE[18]), 
		 -> STR_19(CODE[17]), STR_18(CODE[24]), STR_17(CODE[17]), STR_16(CODE[19]), 
		 -> STR_15(CODE[17]), STR_14(CODE[18]), STR_13(CODE[17]), STR_12(CODE[18]), 
		 -> STR_11(CODE[23]), STR_10(CODE[20]), STR_9(CODE[8]), STR_8(CODE[11]), 
		 -> STR_7(CODE[11]), STR_6(CODE[11]), STR_5(CODE[12]), STR_4(CODE[16]), 
		 -> STR_3(CODE[30]), STR_2(CODE[29]), STR_1(CODE[10]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    showRunStats@run	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), main@run(BANK1[14]), 

    showRunTime@run	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), main@run(BANK1[14]), 

    showDateTime@t	PTR int  size(2) Largest target is 14
		 -> getTime@time(BANK0[14]), 

    showInterface@run	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(BANK0[14]), 

    setAngle@motor	PTR int  size(2) Largest target is 4
		 -> padServo(CODE[4]), conveyorServo(CODE[4]), redirectingServo(CODE[4]), 

    initServo@motor	PTR int  size(2) Largest target is 4
		 -> padServo(CODE[4]), conveyorServo(CODE[4]), redirectingServo(CODE[4]), 

    servos	PTR int [4] size(2) Largest target is 4
		 -> padServo(CODE[4]), conveyorServo(CODE[4]), redirectingServo(CODE[4]), 

    saveNewRun@data	PTR int  size(2) Largest target is 14
		 -> main@run(BANK1[14]), 

    sp__readPastRun	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), 

    digitalWrite@pin	PTR int  size(2) Largest target is 4
		 -> AA_float(COMRAM[4]), cylinderMotor2(CODE[4]), padServo(CODE[4]), conveyorServo(CODE[4]), 
		 -> cylinderMotor1(CODE[4]), redirectingServo(CODE[4]), 

    digitalRead@pin	PTR int  size(2) Largest target is 4
		 -> padPin2(COMRAM[4]), padPin1(COMRAM[4]), cylinderMotor1(CODE[4]), 


Critical Paths under _main in COMRAM

    _sortBattery->___ftge
    ___aldiv->___almod
    _printf->___ftge
    _printf->___llmod
    _scale->___wmul
    _lcdNewline->_lcdInst
    _fround->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftge->___awtoft
    _lcdHome->_lcdInst
    _lcdClear->_lcdInst
    _initRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _getTime->_I2C_Master_Read
    _getTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _readPastRun->___wmul
    _saveNewRun->_eepromWrite
    _eepromWrite->___wmul
    _eepromRead->___wmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _service in COMRAM

    _service->_servoInterruptService
    _servoInterruptService->i2_digitalWrite
    i2_startTimer->i2___awmod
    i2_digitalWrite->i2___awmod

Critical Paths under _main in BANK0

    _main->_showRunStats
    _sortBattery->_printf
    _showInterface->_showRunStats
    _showRunTime->_printf
    _showRunStats->_printf
    _showRunSelect->_printf
    _showRunMenu->_printf
    _showMainMenu->_printf
    _showErrorMessage->_printf
    _showDateTime->_printf
    _printf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___ftsub->___ftadd
    _readPastRun->_eepromRead
    _saveNewRun->_eepromWrite
    _eepromWrite->_eepromRead
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    ___fttol->___ftadd
    ___ftdiv->___ftmul
    ___ftadd->___ftdiv

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sortBattery
    _showInterface->_showDateTime

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                37    37      0  898899
                                             26 BANK1     37    37      0
                            ___aldiv
                            ___almod
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                        _digitalRead
                       _digitalWrite
                            _initLCD
                          _initServo
                          _initTimer
                            _lcdHome
                           _pinSetup
                             _printf
                         _saveNewRun
                           _setAngle
                      _showInterface
                       _showRunStats
                        _showRunTime
                        _sortBattery
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _sortBattery                                         28    28      0  125361
                                            107 BANK0      2     2      0
                                              0 BANK1     26    26      0
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                         _analogRead
                        _digitalRead
                       _digitalWrite
                           _lcdClear
                            _lcdHome
                             _printf
                         _readKeypad
                           _setAngle
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                        11     7      4    2826
                                             36 COMRAM    11     7      4
 ---------------------------------------------------------------------------------
 (2) _digitalRead                                          6     4      2     386
                                             36 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           6     2      4     185
                                             36 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _showInterface                                        7     7      0  486113
                                             14 BANK1      7     7      0
                            _initRTC
                        _readPastRun
                       _showDateTime
                   _showErrorMessage
                       _showMainMenu
                        _showRunMenu
                      _showRunSelect
                       _showRunStats
                        _showRunTime
 ---------------------------------------------------------------------------------
 (1) _showRunTime                                         16    14      2   70762
                                            107 BANK0      4     2      2
                                              0 BANK1     12    12      0
                            ___aldiv
                            ___almod
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) ___almod                                             10     2      8    1511
                                             36 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8    1215
                                             46 COMRAM     8     0      8
                                              0 BANK0      6     6      0
                            ___almod (ARG)
 ---------------------------------------------------------------------------------
 (1) _showRunStats                                        10     8      2   68036
                                            107 BANK0     10     8      2
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showRunSelect                                        1     1      0   67811
                                            107 BANK0      1     1      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showRunMenu                                          2     2      0   67780
                                            107 BANK0      2     2      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showMainMenu                                         1     1      0   67749
                                            107 BANK0      1     1      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showErrorMessage                                     0     0      0   67622
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _readKeypad                                           1     1      0      34
                                             36 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _showDateTime                                        16    16      0   70417
                                            107 BANK0      2     2      0
                                              0 BANK1     14    14      0
                            _getTime
                            _initRTC
                         _keyPressed
                           _lcdClear
                            _lcdHome
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              51    37     14   67393
                                             57 BANK0     50    36     14
                            ___aldiv (ARG)
                            ___almod (ARG)
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   14755
                                             15 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     421
                                             40 COMRAM     1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             36 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   14476
                                             15 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2071
                                             36 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1985
                                             42 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     608
                                             36 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     827
                                             36 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2763
                                             44 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     848
                                             49 COMRAM     8     0      8
                                              0 BANK0      1     1      0
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    5365
                                             42 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     142
                                             36 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1892
                                             48 COMRAM     9     3      6
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _lcdHome                                              0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdClear                                             0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _keyPressed                                           1     1      0      34
                                             36 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _initRTC                                              0     0      0    1196
                    _I2C_Master_Init
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Init                                      8     4      4    1196
                                             49 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1011
                                             36 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _getTime                                             19    17      2    1011
                                             39 COMRAM     4     2      2
                                              0 BANK0     15    15      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Write                                     2     0      2     724
                                             37 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Read                                      2     2      0      65
                                             37 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Wait                                      1     1      0       0
                                             36 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _readPastRun                                         18    16      2    4356
                                              4 BANK0     18    16      2
                             ___wmul
                         _eepromRead
 ---------------------------------------------------------------------------------
 (1) _saveNewRun                                           6     4      2    4736
                                             12 BANK0      6     4      2
                             ___wmul
                         _eepromRead
                        _eepromWrite
 ---------------------------------------------------------------------------------
 (2) _eepromWrite                                          9     3      6     435
                                             56 COMRAM     1     1      0
                                              4 BANK0      8     2      6
                             ___wmul (ARG)
                         _eepromRead (ARG)
 ---------------------------------------------------------------------------------
 (3) _eepromRead                                           4     0      4     293
                                              0 BANK0      4     0      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3736
                                             50 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initServo                                           10     6      4   25850
                                             90 BANK0     10     6      4
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _startTimer                                           8     2      6     690
                                             36 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            10     6      4   24076
                                             80 BANK0     10     6      4
                       _angleToPulse
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        23    19      4   22307
                                             57 BANK0     23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     833
                                             42 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    6266
                                              0 BANK0     15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                             ___wmul (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3734
                                             15 BANK0     15     9      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4847
                                             30 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3179
                                             44 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    3173
                                             44 COMRAM    10     6      4
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2584
                                             36 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            4     2      2     214
                                             36 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             40 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     195
                                             38 COMRAM     2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                             36 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _service                                             15    15      0    1472
                                             21 COMRAM    15    15      0
         _keyPressedInterruptService
              _servoInterruptService
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) _servoInterruptService                                4     4      0    1168
                                             17 COMRAM     4     4      0
                          i2___awmod
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) i2_startTimer                                         8     2      6     258
                                              6 COMRAM     8     2      6
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_digitalWrite                                     11     7      4     458
                                              6 COMRAM    11     7      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___awmod                                           6     2      4     452
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _keyPressedInterruptService                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv
     ___almod (ARG)
   ___almod
   ___awtoft
     ___ftpack
   ___ftadd
     ___altoft (ARG)
       ___ftpack
       _analogRead (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftpack (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___ftdiv
     ___altoft (ARG)
       ___ftpack
       _analogRead (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftpack (ARG)
     _analogRead (ARG)
   ___ftmul
     ___altoft (ARG)
       ___ftpack
       _analogRead (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _analogRead (ARG)
   ___fttol
     ___altoft (ARG)
       ___ftpack
       _analogRead (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _digitalRead
   _digitalWrite
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _startTimer
   _initTimer
   _lcdHome
     _lcdInst
       _lcdNibble
   _pinSetup
   _printf
     ___aldiv (ARG)
       ___almod (ARG)
     ___almod (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
       ___awtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _saveNewRun
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _eepromRead
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _eepromWrite
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _eepromRead (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _setAngle
     _angleToPulse
       ___altoft
         ___ftpack
         _analogRead (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _showInterface
     _initRTC
       _I2C_Master_Init
         ___lldiv
     _readPastRun
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _eepromRead
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _showDateTime
       _getTime
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _initRTC
         _I2C_Master_Init
           ___lldiv
       _keyPressed
       _lcdClear
         _lcdInst
           _lcdNibble
       _lcdHome
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _showErrorMessage
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showMainMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunSelect
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunStats
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunTime
       ___aldiv
         ___almod (ARG)
       ___almod
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
   _showRunStats
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___aldiv (ARG)
         ___almod (ARG)
       ___almod (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
   _showRunTime
     ___aldiv
       ___almod (ARG)
     ___almod
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___aldiv (ARG)
         ___almod (ARG)
       ___almod (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
   _sortBattery
     ___altoft
       ___ftpack
       _analogRead (ARG)
     ___awtoft
       ___ftpack
     ___ftadd
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftge
       ___awtoft (ARG)
         ___ftpack
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _analogRead
     _digitalRead
     _digitalWrite
     _lcdClear
       _lcdInst
         _lcdNibble
     _lcdHome
       _lcdInst
         _lcdNibble
     _printf
       ___aldiv (ARG)
         ___almod (ARG)
       ___almod (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _startTimer

 _service (ROOT)
   _keyPressedInterruptService
   _servoInterruptService
     i2___awmod
     i2_digitalWrite
       i2___awmod (ARG)
     i2_startTimer
       i2___awmod (ARG)
   i2_startTimer
     i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     3F      59       7       34.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     75      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     39      5A       1       71.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     133      34        0.0%
DATA                 0      0     133       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Apr 10 14:53:15 2017

                       ___altoft@exp 0035                        showRunTime@t1 0104  
                      showRunTime@t2 0106                                    _n 00FE  
                  main@cylinderStart 012B                        ___altoft@sign 0036  
                        _sortBattery 14EC                       showRunSelect@k 00EB  
                       ___awdiv@sign 0030                  ___wmul@multiplicand 0035  
                        __CFG_BORV$3 000000                       showRunTime@run 00EB  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                        __CFG_OSC$HS 000000                     _redirectingServo FE61  
                       ___ftadd@exp1 00A9                         ___ftadd@exp2 00A8  
                       ___ftadd@sign 00A7                                  l400 41DE  
                                l232 4528                                  l403 4216  
                                l171 14EA                                  l341 260C  
                                l271 448E                                  l178 18D0  
                                l179 186C                                  l516 45CE  
                                l268 4482                                  l461 427C  
                                l454 4356                                  l366 43EE  
                                l463 4288                                  l464 4294  
                                l397 353C                      ??_showInterface 010E  
                                l829 0818                                  l838 0A04  
                                l789 0996                         __CFG_CPB$OFF 000000  
                                _PEN 007E2A                         __CFG_CPD$OFF 000000  
                                _SEN 007E28                                  _Vcc FE39  
                                _n_C 0151                         ___awmod@sign 002A  
                                prod 000FF3                                  wreg 000FE8  
                    showRunTime@time 0108                         __CFG_LVP$OFF 000000  
                       ___ftdiv@cntr 0098                         ___ftdiv@sign 009D  
                       __CFG_WDT$OFF 000000                                 l1125 393C  
                               l1222 450A                                 l1152 2062  
                               l1154 208A                                 l1163 2160  
                               l1172 218A                                 l1148 2028  
                               l1093 2F1E                                 l1190 2D68  
                               l1183 2B5C                                 l1191 2D90  
                               l1272 3DDC                                 l1282 3FA0  
                               l1197 2DF6                                 l5102 432A  
                               l5122 42A0                                 l5108 4332  
                               l6110 38BE                                 l5090 4314  
                               l6122 390A                                 l6114 38CC  
                               l6210 21B4                                 l6202 2146  
                               l7002 07E6                                 l6124 3928  
                               l6116 38D6                                 l6220 2202  
                               l6204 2154                                 l7004 07FA  
                               l6126 3932                                 l6118 38F4  
                               l6230 2922                                 l7102 0B78  
                               l7030 0988                                 l7014 0840  
                               l5096 431E                                 l7200 3C1A  
                               l6312 3D62                                 l6304 3D4A  
                               l7120 0C26                                 l7024 096C  
                               l7008 081C                                 l6162 2036  
                               l6250 29AA                                 l6410 44C8  
                               l7122 0C30                                 l7114 0BE4  
                               l7026 097A                                 l7018 0892  
                               l6260 29E8                                 l6236 295C  
                               l7300 3778                                 l6500 2D2E  
                               l6308 3D54                                 l6340 3EB4  
                               l6332 3E94                                 l6324 3E7A  
                               l7140 0C9E                                 l7116 0BEE  
                               l7108 0BAC                                 l7052 0A26  
                               l6190 20F0                                 l6174 2080  
                               l6254 29C8                                 l7206 3C44  
                               l6334 3E9C                                 l7134 0C78  
                               l7062 0A76                                 l7038 09BE  
                               l7222 3648                                 l6192 20FE  
                               l6184 20C2                                 l6168 2070  
                               l6264 2A06                                 l7304 37A0  
                               l6360 3D9A                                 l6600 2F0C  
                               l6280 3CFC                                 l6336 3EA0  
                               l6344 3EBE                                 l6328 3E86  
                               l7144 0CC6                                 l7152 0DBA  
                               l7136 0C84                                 l7128 0C5C  
                               l7064 0A7C                                 l7056 0A4E  
                               l7320 31BE                                 l6194 210C  
                               l6370 3DCE                                 l6362 3D9E  
                               l6602 2F18                                 l6530 2DBC  
                               l6434 2440                                 l6426 2378  
                               l7146 0D46                                 l7154 0DCC  
                               l7234 3688                                 l7250 36DE  
                               l7322 31C4                                 l6612 3E10  
                               l6196 2118                                 l7412 3AD0  
                               l6700 3BD4                                 l6540 2DE4  
                               l6292 3D22                                 l6348 3ECC  
                               l7156 0DD4                                 l7076 0AC2  
                               l7092 0B0E                                 l7236 3696  
                               l7228 3662                                 l7332 31E6  
                               l7316 31B0                                 l7340 3200  
                               l6614 3E1C                                 l6358 3D8E  
                               l6550 2E26                                 l6542 2DF0  
                               l6534 2DCC                                 l6294 3D2A  
                               l6286 3D0C                                 l6454 1D96  
                               l7078 0AC8                                 l7094 0B20  
                               l7158 0DEA                                 l7254 36FA  
                               l7246 36CE                                 l7238 369A  
                               l7270 398C                                 l7334 31EC  
                               l7326 31D2                                 l6632 2ABA  
                               l7408 3ABA                                 l6296 3D2E  
                               l6472 1F9A                                 l6448 1CEC  
                               l7600 3874                                 l7360 256E  
                               l7352 24D6                                 l7328 31D8  
                               l6626 2A80                                 l6714 2BCC  
                               l7418 3B3A                                 l6570 2E86  
                               l6466 1EF0                                 l6458 1DBC  
                               l7098 0B48                                 l6802 0058  
                               l7290 39F6                                 l7282 39D2  
                               l7274 399E                                 l7266 3978  
                               l7338 31FA                                 l6652 2B1A  
                               l6732 2C5E                                 l7196 3C10  
                               l6556 2E44                                 l6484 4592  
                               l7508 4076                                 l7276 39AA  
                               l7604 388C                                 l7356 2522  
                               l7348 248A                                 l7700 19A0  
                               l6750 2CC4                                 l6742 2C8E  
                               l6670 4250                                 l6590 2EE4  
                               l6494 2D02                                 l6822 0124  
                               l7470 3034                                 l7518 4476  
                               l7534 40D2                                 l7526 40AC  
                               l7278 39AE                                 l7286 39E0  
                               l7366 25BA                                 l7702 19BE  
                               l6744 2C9E                                 l6736 2C72  
                               l7296 3722                                 l7560 33A6  
                               l6760 3F68                                 l6920 0494  
                               l6912 0428                                 l6904 03C0  
                               l6832 0186                                 l6808 0088  
                               l6816 00FC                                 l7448 2F3A  
                               l7384 277E                                 l7608 3898  
                               l7720 1A6E                                 l7712 1A14  
                               l6682 442E                                 l6746 2CA8  
                               l7554 3368                                 l7562 33AC  
                               l6690 3B78                                 l6762 3F6C  
                               l6594 2EF4                                 l6578 2EB6  
                               l6922 04AA                                 l6850 01F2  
                               l6834 018C                                 l6826 0160  
                               l7394 3AA4                                 l7714 1A32  
                               l7730 1ACE                                 l6772 40DE  
                               l6932 051A                                 l6916 044E  
                               l6860 023E                                 l6852 01F8  
                               l6844 01C0                                 l6836 0192  
                               l6828 0176                                 l7724 1A88  
                               l7708 19FA                                 l7812 0FD4  
                               l7804 0EE4                                 l6694 3BA8  
                               l6766 3F90                                 l6758 3F5A  
                               l6774 40EA                                 l6942 0578  
                               l6918 0464                                 l6854 0210  
                               l6838 0198                                 l6870 026E  
                               l7486 41D8                                 l7478 41B2  
                               l7752 34BC                                 l6960 062A  
                               l6928 04F4                                 l6864 0256  
                               l6848 01E6                                 l6872 02B2  
                               l6792 0022                                 l7496 403C  
                               l7576 37E4                                 l7728 1AA6  
                               l7664 1740                                 l6946 05DE  
                               l6858 0224                                 l7594 3850  
                               l7578 37E8                                 l7674 1800  
                               l7842 13D6                                 l7834 1324  
                               l7756 34D2                                 l6980 06F4  
                               l6964 067A                                 l6948 05E4  
                               l6796 0038                                 l7828 12E0  
                               l6990 073E                                 l6974 06D0  
                               l6878 02CC                                 l6798 004E  
                               l7854 1440                                 l7838 13BE  
                               l6984 0702                                 l6968 06A2  
                               l6888 0312                                 l7696 1986  
                               l7688 192A                                 l7784 0E12  
                               l6986 0716                                 l6978 06DE  
                               l6996 07CA                                 l6998 07D8  
                               _EEIF 007D0C                                 STR_1 FFED  
                               STR_2 FE83                                 STR_3 FE65  
                               STR_4 FFA5                                 STR_5 FFB5  
                               STR_6 FFD7                                 STR_7 FFE2  
                               STR_8 FFCC                                 STR_9 FFF7  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               _LATE 000F8D                         printf@tmpval 00D7  
                               _PEIE 007F96                                 u6151 28FE  
                               u8000 41EC                                 u6171 2938  
                               u7060 0358                                 _RCEN 007E2B  
                               u6511 2D12                                 u8008 41EE  
                               u8025 422A                                 u7065 034C  
                               u8026 422C                                 u6380 44C6  
                               u6375 4162                                 u6800 2BF2  
                               u7280 0810                                 u6491 2CE6  
                               u5941 1FD6                                 u6805 2BE8  
                               u5951 1FF4                                 u6671 2A5C  
                               u6691 2A96                                 u8507 11F6  
                               u6781 2BA8                                 u8517 153C  
                               u7910 259C                                 u8607 4540  
                               u8527 1622                                 u7904 255E  
                               u7840 3230                                 u8617 4552  
                               u7905 255A                                 u8537 175C  
                               u7930 25EA                                 u7850 24B8  
                               u7770 3182                                 u8627 3FCA  
                               u8547 1AF4                                 u7924 25AA  
                               u8637 3FD8                                 u7925 25A6  
                               u7917 2592                                 u8557 1B34  
                               u7870 2504                                 u8647 3FFE  
                               u8567 3026                                 u7847 3220  
                               u7864 24C6                                 u7784 3196  
                               u8657 400C                                 u8577 452C  
                               u7937 25DA                                 u7865 24C2  
                               u7857 24AE                                 u7785 3190  
                               u7777 3178                                 u7890 2550  
                               u8587 4362                                 u7884 2512  
                               u8597 4396                                 u7885 250E  
                               u7877 24FA                                 u7897 2546  
                               _RSEN 007E29                      showRunStats@n_C 00F1  
                               _n_AA 014F                                 _n_9V 014D  
                    showRunStats@run 00EB                                 _main 0E0A  
                               _curr 0048                         ___ftpack@arg 0025  
                               _keys FE21                         ___ftpack@exp 0028  
                               _time 0147                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr2h 000FDA  
                               fsr0l 000FE9                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 005B                      ??_showRunSelect 003A  
                               prodh 000FF4                                 prodl 000FF3  
                               start 000E                        __CFG_IESO$OFF 000000  
                      __CFG_MCLRE$ON 000000                         ___ftmul@cntr 008D  
                       ___param_bank 000000                         ___ftmul@sign 008E  
                       ___fttol@exp1 00B8                         ___fttol@lval 00B4  
               __end_ofi2_startTimer 4312                     ?_I2C_Master_Init 0032  
                   ?_I2C_Master_Read 0001                     ?_I2C_Master_Wait 0001  
                   ?_I2C_Master_Stop 0001                         ?_readPastRun 0084  
               __end_of_angleToPulse 28E8                      __end_of___aldiv 370C  
                    __end_of___almod 3A08              __end_of_redirectAngle_C FE4F  
                              ?_main 0001                                _ACKEN 007E2C  
                              _ACKDT 007E2D                      __end_of___awdiv 3D6C  
                              _EEADR 000FA9                      __end_of___ftadd 2228  
                              STR_10 FECF                                STR_11 FEB8  
                              STR_20 FF2D                                STR_12 FF09  
                              STR_13 FF72                                STR_21 FEF6  
                              STR_22 FFC1                                STR_14 FF1B  
                              STR_23 FF94                                STR_15 FF61  
                              STR_24 FF3F                                STR_16 FEE3  
                              STR_17 FF83                                STR_18 FEA0  
                              STR_19 FF50                      __end_of___awmod 3ED6  
                    __end_of___ftdiv 2B92              ??_servoInterruptService 0012  
                    __end_of___ftneg 4518                      __end_of___lldiv 3DEE  
                    __end_of___ftmul 2A46                                _T0CON 000FD5  
                    ___awdiv@divisor 002D                                _T1CON 000FCD  
                    __end_of___llmod 3FB2                      __end_of___ftsub 427A  
                    __end_of___fttol 2CD6                                _T3CON 000FB1  
                              i2l204 35EC                                i2l205 35B4  
                              i2l206 35C6                                i2l461 42C8  
                              i2l463 42D4                                i2l464 42E0  
                    ___awdiv@counter 002F                                _TMR0H 000FD7  
                              _TMR1H 000FCF                                _TMR0L 000FD6  
                              _TMR3H 000FB3                                _TMR1L 000FCE  
                              _TMR3L 000FB2                                _PORTA 000F80  
                              _PORTB 000F81                                _PORTC 000F82  
                              _PORTD 000F83                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                                _TRISE 000F96  
                       main@duration 013B                        __CFG_PWRT$OFF 000000  
                    _cylinderForward FE41                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                      __end_of_lcdHome 461E  
                       ___lltoft@exp 0035                        _conveyorServo FE51  
                    __end_of_lcdInst 455C                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                      __end_of_getTime 3C64  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                     showRunStats@n_AA 00ED  
                   showRunStats@n_9V 00EF                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                    __end_of_initLCD 43A2                       __CFG_EBTRB$OFF 000000  
                      ___awtoft@sign 0030                                _angle 004D  
                    __end_of_initRTC 45CE                      __end_of_dpowers FDB3  
                              _count 0046                                _scale 1BAA  
                    __end_of_isdigit 459A                       eepromWrite@ien 008A  
                      ___ftpack@sign 0029                    ?_showErrorMessage 0001  
                              _pulse 013F                                _putch 4518  
                              pclath 000FFA                                tablat 000FF5  
                    __end_of_service 3628                   ??_showErrorMessage 003A  
                              status 000FD8                   __size_ofi2___awmod 0070  
                     __CFG_PBADEN$ON 000000                 __end_of_digitalWrite 3254  
                    __initialization 3C64                         __end_of_main 14EC  
                       __end_of_keys FE32                               ??_main 011A  
                      ___fttol@sign1 00B3                        __activetblptr 000002  
               __size_of_digitalRead 018A                     _cylinderBackward FE3F  
               __size_of__tdiv_to_l_ 0132                         _stoppingTime 0157  
                  ?_I2C_Master_Start 0001                      i2digitalWrite@p 0010  
                  ?_I2C_Master_Write 0026                   ??_I2C_Master_Start 0026  
           __end_of_redirectAngle_AA FE4D             __end_of_redirectAngle_9V FE4B  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                 ??_I2C_Master_Write 0028                               _ADCON2 000FC0  
                   __end_of___altoft 3E66                     ___llmod@dividend 0032  
                             ?_scale 008F                               _ADRESH 000FC4  
                             _EEADRH 000FAA                               _ADRESL 000FC3  
                             _EEDATA 000FA8                               _EECON1 000FA6  
                             _EECON2 000FA7        keyPressedInterruptService@key 0001  
                   ___awdiv@dividend 002B                     __end_of___awtoft 4452  
                             ?_putch 0001                     __end_of___ftpack 395C  
                   __end_of___lltoft 4134                               _INT0IE 007F94  
                             _INT0IF 007F91                               _INT1IE 007F83  
                             _INT1IF 007F80                         sortBattery@V 0117  
                       sortBattery@i 0114                               i2l5404 42EC  
                             i2l5430 3F10                               i2l5422 3EF6  
                             i2l5442 3F3C                               i2l5434 3F24  
                             i2l5426 3F04                               i2l5418 3EEA  
                             i2l5370 32C6                               i2l5428 3F0C  
                             i2l5372 32CC                               i2l5438 3F2E  
                             i2l5382 32EE                               i2l5366 32B8  
                             i2l5390 3308                               i2l5702 3148  
                             i2l5384 32F4                               i2l5376 32DA  
                             i2l5378 32E0                               i2l5388 3302  
                             _TMR0IE 007F95                               _TMR0IF 007F92  
                             _TMR1IE 007CE8                               _TMR1IF 007CF0  
                             _TMR3IE 007D01                               _SSPADD 000FC8  
                             _TRISC3 007CA3                               _TRISC4 007CA4  
                             _SSPBUF 000FC9                     __end_of_lcdClear 4626  
                  _angleToPulse$1419 00C9                       __CFG_XINST$OFF 000000  
               __size_of_eepromWrite 0050                     __end_of__powers_ FE01  
                             ___ftge 3B48                     __end_of_padServo FE61  
                          ??___aldiv 0037                            ??___almod 002D  
                             ___wmul 44CE                            ??___awdiv 002F  
                          ??___ftadd 00A4                       __CFG_STVREN$ON 000000  
                          ??___awmod 0029                            ??___ftdiv 0095  
                          ??___ftneg 0028                            ??___lldiv 002D  
                          ??___ftmul 0086                            ??___llmod 003A  
                          ??___ftsub 0039                            ??___fttol 00AE  
           __end_of_padAngle_NEUTRAL FE47              __end_of_cylinderForward FE43  
                             _fround 2228                               clear_0 3CC2  
                             clear_1 3CD4                      eepromWrite@data 0084  
                   ___awdiv@quotient 0031                      ___awmod@divisor 0027  
                          ??_lcdHome 0029                      ___awmod@counter 0029  
                             _servos 003A                            ??_lcdInst 0027  
                             _printf 0012                            ??_getTime 002A  
                   __end_of_pinSetup 43E2                     __end_of_setAngle 37E0  
                  analogRead@channel 0025                ___ftmul@f3_as_product 008A  
                          ??_initLCD 0029                            ??_initRTC 003A  
                       __pdataCOMRAM 004D                            ??_isdigit 0025  
                    readPastRun@data 0086                    __end_ofi2___awmod 3F46  
                      setAngle@angle 00D2                         __mediumconst FD8A  
                       ?_showRunMenu 0001                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                       ?_showRunTime 00EB                        setAngle@motor 00D0  
                          ??_service 0016                       i2___awmod@sign 0006  
                         __accesstop 0080              __end_of__initialization 3CDA  
                         ___altoft@c 002D             __end_of_redirectingServo FE65  
                         ___ftadd@f1 009E                           ___ftadd@f2 00A1  
                         ___ftge@ff1 0031                           ___ftge@ff2 0034  
                      ___rparam_used 000001                           ___ftdiv@f1 008F  
                         ___ftdiv@f2 0092                           ___ftdiv@f3 0099  
                         ___ftneg@f1 0025                           ___awtoft@c 002D  
              __size_ofi2_startTimer 004C                           ___ftmul@f1 0080  
                         ___ftmul@f2 0083                           ___ftsub@f1 00AA  
                         ___ftsub@f2 00AD                           ___fttol@f1 00AA  
               __end_of_happynewyear FE39                       __pcstackCOMRAM 0001  
              __size_of_angleToPulse 015E                         __pidataBANK0 4604  
                       __pidataBANK1 4636                           ___lltoft@c 002D  
                      __end_of_scale 1FC0                         ?_sortBattery 0001  
                      __end_of_putch 453A                   __size_of_lcdNibble 0066  
                         __div_to_l_ 2E08                    eepromRead@address 0080  
               __size_of_readPastRun 0098                      showDateTime@day 0106  
                    showDateTime@min 0102                      showDateTime@sec 0100  
                    showDateTime@mon 0108                      __div_to_l_@exp1 0030  
                    __div_to_l_@cntr 002F                              ??_scale 0039  
                    __div_to_l_@quot 002B                              ??_putch 0029  
                       i2_startTimer 42C6                           __pbssBANK0 00FE  
                         __pbssBANK1 013F                         _angleToPulse 278A  
              __size_of_digitalWrite 0108                   __size_of_initTimer 004A  
                 __size_of_initServo 00F8                           _analogRead 43E2  
                      __div_to_l_@f1 0025                        __div_to_l_@f2 0028  
                            ?___ftge 0031                              ?___wmul 0033  
                   _sortBattery$1418 0100                          saveNewRun@i 0090  
                          ?___altoft 002D                          saveNewRun@n 008E  
                            ?_fround 008F                           _lcdNewline 460E  
                          ?___awtoft 002D                            ?___ftpack 0025  
                            ?_printf 00B9                            ?___lltoft 002D  
                         _eepromRead 459A       __size_of_servoInterruptService 010C  
      __end_of_servoInterruptService 314C                __end_of_showInterface 38AE  
                  i2startTimer@timer 0007                            ?_lcdClear 0001  
                   angleToPulse@a000 00CC                     angleToPulse@a180 00C5  
                       _digitalWrite 314C                              _SSPCON1 000FC6  
                            _SSPCON2 000FC5                              _SSPSTAT 000FC7  
            __size_ofi2_digitalWrite 0108                              _V_LIM_C 00FB  
                main@lastBatteryTime 013D                            ?_pinSetup 0001  
                          ?_setAngle 00D0                    __end_of_lcdNibble 4018  
           __end_of_cylinderBackward FE41                    __end_of__npowers_ FDDA  
                            __Hparam 0000                           _scale$1423 0092  
              __end_of_showRunSelect 407C                           _keyPressed 45EE  
                            __Lparam 0000                __end_of_padAngle_OPEN FE49  
                       readPastRun@i 0094                              ___aldiv 3628  
          __size_of_showErrorMessage 0030                              ___almod 395C  
                    __size_of___ftge 0090                              ___awdiv 3CE8  
                            ___ftadd 1FC0                              ___awmod 3E66  
                         _readKeypad 4482                              ___ftdiv 2A46  
                            ___ftneg 44F4                              ___lldiv 3D6C  
                    __size_of___wmul 0026                              ___ftmul 28E8  
                            ___llmod 3F46                              ___ftsub 422E  
                            ___fttol 2B92                              _n_OTHER 0153  
                         ??___altoft 0031                              __pcinit 3C64  
                         ??___awtoft 0030                           ??___ftpack 002A  
                    __size_of_fround 0260                              __ramtop 1000  
                            _lcdHome 4616                              _lcdInst 453A  
                         ??___lltoft 0031                              __ptext0 0E0A  
                            __ptext1 14EC                              __ptext2 314C  
                            __ptext3 2488                              _getTime 3BD8  
                            __ptext4 43E2                              __ptext5 37E0  
                            __ptext6 2612                              __ptext7 395C  
                            __ptext8 3628                              __ptext9 3A08  
                      ?_showDateTime 0001                      __size_of_printf 0DF8  
                            _padPin1 0053                              _padPin2 0057  
                            _padPin3 0042                        startTimer@val 0027  
                            _initLCD 435C                    __end_of_hexpowers FE21  
                        ?__div_to_l_ 0025                              _lastKey 004C  
                            _initRTC 45B8                    __end_of_initTimer 435C  
                  __end_of_initServo 3454                              _dpowers FD8B  
                            _isdigit 457C                     ___awmod@dividend 0025  
                   ___aldiv@dividend 002F             __size_of_I2C_Master_Init 005A  
           __size_of_I2C_Master_Read 0026                           ??_lcdClear 0029  
           __size_of_I2C_Master_Wait 0012             __size_of_I2C_Master_Stop 0008  
                      ?_showMainMenu 0001                              _service 0008  
                            main@run 012D                 __size_of_showRunMenu 005C  
                     __pintcode_body 353E                 __size_of_showRunTime 0178  
               end_of_initialization 3CDA                           _saveNewRun 3454  
                      __Lmediumconst FD8A                              int_func 353E  
                     digitalRead@pin 0025                          ?_analogRead 0025  
                         ??_pinSetup 0025                           ??_setAngle 00D4  
          __size_of_I2C_Master_Start 0008            __size_of_I2C_Master_Write 000A  
                    ___lldiv@divisor 0029                      ___lldiv@counter 0031  
                     setAngle@period 00D6                        ?_showRunStats 00EB  
                            printf@c 00EA                              printf@f 00B9  
                   ___aldiv@quotient 0082                     I2C_Master_Init@c 0032  
                   I2C_Master_Read@a 0026                              postdec1 000FE5  
                            postdec2 000FDD                      _batteryDetected 014B  
                            postinc0 000FEE                              postinc2 000FDE  
                     __tdiv_to_l_@f1 0025                       __tdiv_to_l_@f2 0028  
                         _resolution FE3C                        ??_digitalRead 0027  
                        ?_lcdNewline 0001                        ??__tdiv_to_l_ 002B  
                     ??_showDateTime 00EB                            _PORTBbits 000F81  
               __size_of_sortBattery 06BE                     showInterface@key 0114  
                   showInterface@run 0112                          ?_eepromRead 0080  
                     ??_showMainMenu 003A         ??_keyPressedInterruptService 0001  
                _redirectAngle_OTHER FE4F                         _happynewyear FE32  
                 angleToPulse@offset 00C1                   sortBattery@V_float 0102  
                          i2___awmod 3ED6                           _startTimer 427A  
                      ??_eepromWrite 0039                          ___ftdiv@exp 009C  
                        printf@width 00E4                  __size_of__div_to_l_ 0128  
                     ??_showRunStats 003A                          ?_keyPressed 0001  
                        ___ftmul@exp 0089                          ?_readKeypad 0001  
                     __end_of___ftge 3BD8                       __end_of___wmul 44F4  
                      __pidataCOMRAM 45E0  __size_of_keyPressedInterruptService 0020  
                     _cylinderMotor1 FE55                       _cylinderMotor2 FE59  
                     __end_of_fround 2488                       __end_of_printf 0E0A  
                __size_of_analogRead 0038                  start_initialization 3C64  
                __end_of_digitalRead 2612                          __end_of_Vcc FE3C  
                __end_of__tdiv_to_l_ 2E08                       initServo@angle 00DC  
                     initTimer@timer 0025                       initServo@motor 00DA  
                         ?i2___awmod 0001                          ?_saveNewRun 008C  
                     i2_digitalWrite 3254                    ??_I2C_Master_Init 0036  
                  ??_I2C_Master_Read 0026                    ??_I2C_Master_Wait 0025  
                  ??_I2C_Master_Stop 0026                  __size_of_lcdNewline 0008  
                    ___llmod@divisor 0036                      ___llmod@counter 0080  
                __size_of_eepromRead 001E                           initServo@i 00E2  
                   showDateTime@hour 0104                     showDateTime@year 010A  
                           ??___ftge 0037                     _showErrorMessage 4452  
                __end_of_eepromWrite 422E                             ??___wmul 0037  
             __end_of_cylinderMotor1 FE59               __end_of_cylinderMotor2 FE5D  
                        __pdataBANK0 00F5                          __pdataBANK1 0157  
                   __CFG_LPT1OSC$OFF 000000                             ??_fround 0039  
                      ??_readPastRun 0039                       readPastRun@run 0084  
                           ??_printf 00C7                    __size_of___altoft 0078  
                         fround@prec 0098                    __size_of___awtoft 0038  
                  __size_of___ftpack 00AE                __end_of_conveyorServo FE55  
                  __size_of___lltoft 005C                          __pbssCOMRAM 003A  
                      __pcstackBANK0 0080                        __pcstackBANK1 0100  
                __size_of_keyPressed 000C               __end_ofi2_digitalWrite 335C  
             sortBattery@targetAngle 010C                         _isdigit$1053 0026  
                      keyPressed@key 0025                          ?_startTimer 0025  
                  __size_of_lcdClear 0008                  __size_of_readKeypad 0026  
               __end_of_showDateTime 3040                    i2digitalWrite@pin 0007  
                  i2digitalWrite@val 0009                     _I2C_Master_Start 462E  
                   _I2C_Master_Write 45FA                            _main$1417 0127  
                  __CFG_CCP2MX$PORTC 000000                    __size_of_pinSetup 0040  
               __end_of_showMainMenu 41DE                    __size_of_setAngle 00D4  
                          __pintcode 0008                        __pmediumconst FD8A  
                          _lcdNibble 3FB2                             ?___aldiv 002F  
                           ?___almod 0025                             ?___awdiv 002B  
                           ?___ftadd 009E                             ?___awmod 0025  
                           ?___ftdiv 008F                             ?___ftneg 0025  
                           ?___lldiv 0025                             ?___ftmul 0080  
                           ?___llmod 0032                             ?___ftsub 00AA  
                          __npowers_ FDB3                             ?___fttol 00AA  
                        _digitalRead 2488                  __size_of_saveNewRun 00EA  
                   ___almod@dividend 0025                             ?_lcdHome 0001  
                           ?_lcdInst 0001                          __tdiv_to_l_ 2CD6  
                           ?_getTime 0028                         ??__div_to_l_ 002B  
                           ?_initLCD 0001                             ?_initRTC 0001  
                    startTimer@timer 0025                             ?_isdigit 0001  
 __end_of_keyPressedInterruptService 457C           _keyPressedInterruptService 455C  
                __end_of_readPastRun 3B48                 __end_of_showRunStats 3AB0  
                           ?_service 0001                            _hexpowers FE01  
                          _initTimer 4312                            _initServo 335C  
                    ?i2_digitalWrite 0007                _servoInterruptService 3040  
                        ??i2___awmod 0005                       __size_of_scale 0416  
                     __size_of_putch 0022                             _AA_float 004F  
                 eepromWrite@address 0086                      ___aldiv@divisor 0033  
                    ___aldiv@counter 0080                       ___wmul@product 0037  
                           _LATDbits 000F8C                         ??_analogRead 0029  
                        _eepromWrite 41DE                   __end_of__div_to_l_ 2F30  
                           i2u530_44 329E                             i2u530_45 3298  
                           i2u536_40 3338                             i2u536_47 3328  
                           i2u529_40 328A                             i2u529_47 3280  
             __size_of_showInterface 00CE                     __CFG_WDTPS$32768 000000  
                         ?_lcdNibble 0001                       _padAngle_CLOSE FE43  
                          _terminate 0155                        digitalWrite@p 002E  
                         service@key 0024                         ??_lcdNewline 0029  
                __size_of_startTimer 004C                    angleToPulse@angle 00B9  
                  ___wmul@multiplier 0033                        lcdNibble@data 0026  
                       ??_eepromRead 0039                           printf@flag 00E6  
                      lcdNibble@temp 0025                           printf@fval 00DD  
                         printf@prec 00E8                        ??_showRunMenu 003A  
                      ??_showRunTime 00ED                   __end_of_analogRead 441A  
                           _V_LIM_AA 00F8                             _V_LIM_9V 00F5  
             __size_of_showRunSelect 0064                       saveNewRun@data 008C  
                         ?_initTimer 0025                           ?_initServo 00DA  
                  sortBattery@signal 0105             sortBattery@pos_v_counter 010A  
                I2C_Master_Read@temp 0027                            copy_data0 3C90  
                          copy_data1 3CB0                   i2___awmod@dividend 0001  
                 __end_of_lcdNewline 4616                        readKeypad@key 0025  
                           __Hrparam 0000                         ??_keyPressed 0025  
             __end_of_padAngle_CLOSE FE45                             __Lrparam 0000  
                 __end_of_eepromRead 45B8                   __CFG_BOREN$SBORDIS 000000  
                       ??_readKeypad 0025                  showRunStats@n_OTHER 00F3  
                      ??_sortBattery 00EB                     __size_of___aldiv 00E4  
                   __size_of___almod 00AC                     __size_of___awdiv 0084  
                   __size_of___ftadd 0268                     __size_of___awmod 0070  
                   __size_of___ftdiv 014C                     __size_of___ftneg 0024  
                   __size_of___lldiv 0082                             ___altoft 3DEE  
                   __size_of___ftmul 015E                     __size_of___llmod 006C  
                   __size_of___ftsub 004C                     __size_of___fttol 0144  
                           ___awtoft 441A                             ___ftpack 38AE  
                        _readPastRun 3AB0                          _fround$1421 0095  
                        _fround$1422 0092                             ___lltoft 40D8  
                   __size_of_lcdHome 0008                     __size_of_lcdInst 0022  
                   __size_of_getTime 008C                        showDateTime@t 010C  
                          setAngle@i 00D8                      _I2C_Master_Init 4134  
                    _I2C_Master_Read 44A8                     __size_of_initLCD 0046  
                    _I2C_Master_Wait 45CE                     __size_of_initRTC 0016  
                    _I2C_Master_Stop 4626                     __size_of_isdigit 001E  
             ?_servoInterruptService 0001                        _showInterface 37E0  
                           _lcdClear 461E                             __ptext10 4018  
                           __ptext11 407C                             __ptext20 457C  
                           __ptext12 418E                             __ptext21 2228  
                           __ptext13 4452                             __ptext30 3B48  
                           __ptext22 3E66                             __ptext14 4482  
                           __ptext31 4616                             __ptext23 3CE8  
                           __ptext15 2F30                             __ptext40 462E  
                           __ptext32 461E                             __ptext24 2CD6  
                           __ptext16 0012                             __ptext41 44A8  
                           __ptext33 45EE                             __ptext25 2E08  
                           __ptext17 1BAA                             __ptext50 427A  
                           __ptext42 45CE                             __ptext34 45B8  
                           __ptext26 40D8                             __ptext18 4518  
                           __ptext51 370C                             __ptext43 3AB0  
                           __ptext35 4134                             __ptext27 3F46  
                           __ptext19 460E                             __ptext60 4312  
                           __ptext52 278A                             __ptext44 3454  
                           __ptext36 3D6C                             __ptext28 422E  
                           __ptext61 435C                             __ptext53 2B92  
                           __ptext45 41DE                             __ptext37 3BD8  
                           __ptext29 44F4                             __ptext62 453A  
                           __ptext54 28E8                             __ptext46 459A  
                           __ptext38 45FA                             __ptext63 3FB2  
                           __ptext55 2A46                             __ptext47 44CE  
                           __ptext39 4626                             __ptext56 1FC0  
                           __ptext48 43A2                             __ptext65 3040  
                           __ptext57 441A                             __ptext49 335C  
                           __ptext66 42C6                             __ptext58 3DEE  
                           __ptext67 3254                             __ptext59 38AE  
                           __ptext68 3ED6                             __ptext69 455C  
           __end_of_showErrorMessage 4482                   __end_of_keyPressed 45FA  
              __size_of_showDateTime 0110                             __powers_ FDDA  
                   __size_of_service 3620                      i2startTimer@val 0009  
                    ___almod@divisor 0029                         ??_saveNewRun 003A  
                      ?i2_startTimer 0007                             _padServo FE5D  
                    ___almod@counter 002D                  __end_of_showRunMenu 40D8  
                 __end_of_readKeypad 44A8                  __end_of_showRunTime 278A  
                      ?_angleToPulse 00B9                        __size_of_main 06E2  
              __size_of_showMainMenu 0050                             _pinSetup 43A2  
                           _setAngle 370C                        _showRunSelect 4018  
                           _prevTime 004A                     sortBattery@V_249 0111  
                        ??_lcdNibble 0025                             getTime@i 008E  
                     showInterface@n 0110                        _padAngle_OPEN FE47  
                           int$flags 005B                     sortBattery@V_max 0107  
                   sortBattery@V_sum 010E                            printf@idx 00D0  
                          printf@len 00D3                            printf@exp 00DB  
                          printf@val 00E0                        showMainMenu@k 00EB  
                 __end_of_saveNewRun 353E                __size_of_showRunStats 00A8  
                       _showDateTime 2F30                    i2___awmod@divisor 0003  
                          putch@data 0029                    i2___awmod@counter 0005  
           __end_of_I2C_Master_Start 4636                  __end_of_sortBattery 1BAA  
           __end_of_I2C_Master_Write 4604                           _INTCONbits 000FF2  
                     ?_showInterface 0001                        ?_digitalWrite 0025  
                        ??_initTimer 0027                          ??_initServo 00DE  
                           isdigit@c 0027                         _showMainMenu 418E  
                           scale@scl 0095                       ??i2_startTimer 000D  
                       ??_startTimer 002B                             intlevel2 0000  
                   __tdiv_to_l_@exp1 0033                     __tdiv_to_l_@cntr 0032  
                     ??_angleToPulse 00BD                     __tdiv_to_l_@quot 002E  
        __end_of_redirectAngle_OTHER FE51                     ___lldiv@dividend 0025  
                 __end_of_resolution FE3F                     _showRunTime$1420 0100  
                     ?_showRunSelect 0001                         _showRunStats 3A08  
                   _redirectAngle_AA FE4B                     _redirectAngle_9V FE49  
                           printf@ap 00D5                             printf@cp 00D1  
            __end_of_I2C_Master_Init 418E              __end_of_I2C_Master_Read 44CE  
            __end_of_I2C_Master_Wait 45E0              __end_of_I2C_Master_Stop 462E  
                        lcdInst@data 0028                         ?_digitalRead 0025  
                       ?__tdiv_to_l_ 0025                   __end_of_startTimer 42C6  
                        _printf$1424 00CD                     ??i2_digitalWrite 000B  
                   ___lldiv@quotient 002D                    I2C_Master_Write@d 0026  
                     ??_digitalWrite 0029          ?_keyPressedInterruptService 0001  
                       ___aldiv@sign 0081                          _showRunMenu 407C  
                        _showRunTime 2612                      _redirectAngle_C FE4D  
                        getTime@time 0080                     _padAngle_NEUTRAL FE45  
                    digitalWrite@pin 0025                      digitalWrite@val 0027  
                       ___almod@sign 002E                         ?_eepromWrite 0084  
                       showRunMenu@k 00EC                       showRunMenu@key 00EB  
