

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Apr 09 12:06:59 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    84                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    91                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    92                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    93  0000                     
    94                           ; Version 1.40
    95                           ; Generated 01/12/2016 GMT
    96                           ; 
    97                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    98                           ; All rights reserved.
    99                           ; 
   100                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   101                           ; 
   102                           ; Redistribution and use in source and binary forms, with or without modification, are
   103                           ; permitted provided that the following conditions are met:
   104                           ; 
   105                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   106                           ;        conditions and the following disclaimer.
   107                           ; 
   108                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   109                           ;        of conditions and the following disclaimer in the documentation and/or other
   110                           ;        materials provided with the distribution.
   111                           ; 
   112                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   113                           ;        software without specific prior written permission.
   114                           ; 
   115                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   116                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   117                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   118                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   119                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   120                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   121                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   122                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   123                           ; 
   124                           ; 
   125                           ; Code-generator required, PIC18F4620 Definitions
   126                           ; 
   127                           ; SFR Addresses
   128  0000                     
   129                           	psect	idataCOMRAM
   130  003F48                     __pidataCOMRAM:
   131                           	opt stack 0
   132                           
   133                           ;initializer for _V_LIM_9V
   134  003F48  77                 	db	119
   135  003F49  EE                 	db	238
   136  003F4A  3F                 	db	63
   137                           
   138                           ;initializer for _V_LIM_AA
   139  003F4B  C1                 	db	193
   140  003F4C  4A                 	db	74
   141  003F4D  3E                 	db	62
   142                           
   143                           ;initializer for _V_LIM_C
   144  003F4E  A7                 	db	167
   145  003F4F  A9                 	db	169
   146  003F50  3F                 	db	63
   147                           
   148                           ;initializer for _angle
   149  003F51  005A               	dw	90
   150                           
   151                           ;initializer for _padAngle_OPEN
   152  003F53  00B4               	dw	180
   153                           
   154                           ;initializer for _redirectAngle_9V
   155  003F55  0076               	dw	118
   156                           
   157                           ;initializer for _AA_float
   158  003F57  0002               	dw	2
   159  003F59  0005               	dw	5
   160                           
   161                           ;initializer for _padPin1
   162  003F5B  0002               	dw	2
   163  003F5D  0006               	dw	6
   164                           
   165                           	psect	idataBANK0
   166  003FC6                     __pidataBANK0:
   167                           	opt stack 0
   168                           
   169                           ;initializer for _padAngle_CLOSE
   170  003FC6  0046               	dw	70
   171                           
   172                           ;initializer for _redirectAngle_C
   173  003FC8  00A6               	dw	166
   174                           
   175                           ;initializer for _redirectAngle_OTHER
   176  003FCA  0099               	dw	153
   177                           
   178                           	psect	idataBANK1
   179  003EF2                     __pidataBANK1:
   180                           	opt stack 0
   181                           
   182                           ;initializer for _cylinderDir
   183  003EF2  0003               	dw	3
   184  003EF4  0001               	dw	1
   185                           
   186                           ;initializer for _padAngle_NEUTRAL
   187  003EF6  0082               	dw	130
   188                           
   189                           ;initializer for _redirectAngle_AA
   190  003EF8  008A               	dw	138
   191                           
   192                           ;initializer for _stoppingTime
   193  003EFA  2710               	dw	10000
   194                           
   195                           ;initializer for _conveyorServo
   196  003EFC  0002               	dw	2
   197  003EFE  0002               	dw	2
   198                           
   199                           ;initializer for _cylinderMotor
   200  003F00  0002               	dw	2
   201  003F02  0000               	dw	0
   202                           
   203                           ;initializer for _padPin2
   204  003F04  0002               	dw	2
   205  003F06  0007               	dw	7
   206                           
   207                           ;initializer for _padServo
   208  003F08  0002               	dw	2
   209  003F0A  0001               	dw	1
   210                           
   211                           ;initializer for _redirectingServo
   212  003F0C  0003               	dw	3
   213  003F0E  0000               	dw	0
   214                           
   215                           	psect	mediumconst
   216  00FDDE                     __pmediumconst:
   217                           	opt stack 0
   218  00FDDE  00                 	db	0
   219  00FDDF                     _dpowers:
   220                           	opt stack 0
   221  00FDDF  0001               	dw	1
   222  00FDE1  0000               	dw	0
   223  00FDE3  000A               	dw	10
   224  00FDE5  0000               	dw	0
   225  00FDE7  0064               	dw	100
   226  00FDE9  0000               	dw	0
   227  00FDEB  03E8               	dw	1000
   228  00FDED  0000               	dw	0
   229  00FDEF  2710               	dw	10000
   230  00FDF1  0000               	dw	0
   231  00FDF3  86A0               	dw	34464
   232  00FDF5  0001               	dw	1
   233  00FDF7  4240               	dw	16960
   234  00FDF9  000F               	dw	15
   235  00FDFB  9680               	dw	38528
   236  00FDFD  0098               	dw	152
   237  00FDFF  E100               	dw	57600
   238  00FE01  05F5               	dw	1525
   239  00FE03  CA00               	dw	51712
   240  00FE05  3B9A               	dw	15258
   241  00FE07                     __end_of_dpowers:
   242                           	opt stack 0
   243  00FE07                     __npowers_:
   244                           	opt stack 0
   245  00FE07  00                 	db	0
   246  00FE08  80                 	db	128
   247  00FE09  3F                 	db	63
   248  00FE0A  CD                 	db	205
   249  00FE0B  CC                 	db	204
   250  00FE0C  3D                 	db	61
   251  00FE0D  D7                 	db	215
   252  00FE0E  23                 	db	35
   253  00FE0F  3C                 	db	60
   254  00FE10  12                 	db	18
   255  00FE11  83                 	db	131
   256  00FE12  3A                 	db	58
   257  00FE13  B7                 	db	183
   258  00FE14  D1                 	db	209
   259  00FE15  38                 	db	56
   260  00FE16  C6                 	db	198
   261  00FE17  27                 	db	39
   262  00FE18  37                 	db	55
   263  00FE19  38                 	db	56
   264  00FE1A  86                 	db	134
   265  00FE1B  35                 	db	53
   266  00FE1C  C0                 	db	192
   267  00FE1D  D6                 	db	214
   268  00FE1E  33                 	db	51
   269  00FE1F  CC                 	db	204
   270  00FE20  2B                 	db	43
   271  00FE21  32                 	db	50
   272  00FE22  70                 	db	112
   273  00FE23  89                 	db	137
   274  00FE24  30                 	db	48
   275  00FE25  E7                 	db	231
   276  00FE26  DB                 	db	219
   277  00FE27  2E                 	db	46
   278  00FE28  E5                 	db	229
   279  00FE29  3C                 	db	60
   280  00FE2A  1E                 	db	30
   281  00FE2B  42                 	db	66
   282  00FE2C  A2                 	db	162
   283  00FE2D  0D                 	db	13
   284  00FE2E                     __end_of__npowers_:
   285                           	opt stack 0
   286  00FE2E                     __powers_:
   287                           	opt stack 0
   288  00FE2E  00                 	db	0
   289  00FE2F  80                 	db	128
   290  00FE30  3F                 	db	63
   291  00FE31  00                 	db	0
   292  00FE32  20                 	db	32
   293  00FE33  41                 	db	65
   294  00FE34  00                 	db	0
   295  00FE35  C8                 	db	200
   296  00FE36  42                 	db	66
   297  00FE37  00                 	db	0
   298  00FE38  7A                 	db	122
   299  00FE39  44                 	db	68
   300  00FE3A  40                 	db	64
   301  00FE3B  1C                 	db	28
   302  00FE3C  46                 	db	70
   303  00FE3D  50                 	db	80
   304  00FE3E  C3                 	db	195
   305  00FE3F  47                 	db	71
   306  00FE40  24                 	db	36
   307  00FE41  74                 	db	116
   308  00FE42  49                 	db	73
   309  00FE43  97                 	db	151
   310  00FE44  18                 	db	24
   311  00FE45  4B                 	db	75
   312  00FE46  BC                 	db	188
   313  00FE47  BE                 	db	190
   314  00FE48  4C                 	db	76
   315  00FE49  6B                 	db	107
   316  00FE4A  6E                 	db	110
   317  00FE4B  4E                 	db	78
   318  00FE4C  03                 	db	3
   319  00FE4D  15                 	db	21
   320  00FE4E  50                 	db	80
   321  00FE4F  79                 	db	121
   322  00FE50  AD                 	db	173
   323  00FE51  60                 	db	96
   324  00FE52  F3                 	db	243
   325  00FE53  49                 	db	73
   326  00FE54  71                 	db	113
   327  00FE55                     __end_of__powers_:
   328                           	opt stack 0
   329  00FE55                     _hexpowers:
   330                           	opt stack 0
   331  00FE55  0001               	dw	1
   332  00FE57  0000               	dw	0
   333  00FE59  0010               	dw	16
   334  00FE5B  0000               	dw	0
   335  00FE5D  0100               	dw	256
   336  00FE5F  0000               	dw	0
   337  00FE61  1000               	dw	4096
   338  00FE63  0000               	dw	0
   339  00FE65  0000               	dw	0
   340  00FE67  0001               	dw	1
   341  00FE69  0000               	dw	0
   342  00FE6B  0010               	dw	16
   343  00FE6D  0000               	dw	0
   344  00FE6F  0100               	dw	256
   345  00FE71  0000               	dw	0
   346  00FE73  1000               	dw	4096
   347  00FE75                     __end_of_hexpowers:
   348                           	opt stack 0
   349  00FE75                     _keys:
   350                           	opt stack 0
   351  00FE75  31                 	db	49
   352  00FE76  32                 	db	50
   353  00FE77  33                 	db	51
   354  00FE78  41                 	db	65
   355  00FE79  34                 	db	52
   356  00FE7A  35                 	db	53
   357  00FE7B  36                 	db	54
   358  00FE7C  42                 	db	66
   359  00FE7D  37                 	db	55
   360  00FE7E  38                 	db	56
   361  00FE7F  39                 	db	57
   362  00FE80  43                 	db	67
   363  00FE81  2A                 	db	42
   364  00FE82  30                 	db	48
   365  00FE83  23                 	db	35
   366  00FE84  44                 	db	68
   367  00FE85  00                 	db	0
   368  00FE86                     __end_of_keys:
   369                           	opt stack 0
   370  00FE86                     _happynewyear:
   371                           	opt stack 0
   372  00FE86  00                 	db	0
   373  00FE87  00                 	db	0
   374  00FE88  00                 	db	0
   375  00FE89  01                 	db	1
   376  00FE8A  08                 	db	8
   377  00FE8B  04                 	db	4
   378  00FE8C  17                 	db	23
   379  00FE8D                     __end_of_happynewyear:
   380                           	opt stack 0
   381  0000                     _ADCON0	set	4034
   382  0000                     _ADCON1	set	4033
   383  0000                     _ADCON2	set	4032
   384  0000                     _ADRESH	set	4036
   385  0000                     _ADRESL	set	4035
   386  0000                     _EEADR	set	4009
   387  0000                     _EEADRH	set	4010
   388  0000                     _EECON1	set	4006
   389  0000                     _EECON2	set	4007
   390  0000                     _EEDATA	set	4008
   391  0000                     _INTCONbits	set	4082
   392  0000                     _LATA	set	3977
   393  0000                     _LATB	set	3978
   394  0000                     _LATC	set	3979
   395  0000                     _LATD	set	3980
   396  0000                     _LATDbits	set	3980
   397  0000                     _LATE	set	3981
   398  0000                     _PORTA	set	3968
   399  0000                     _PORTB	set	3969
   400  0000                     _PORTBbits	set	3969
   401  0000                     _PORTC	set	3970
   402  0000                     _PORTD	set	3971
   403  0000                     _SSPADD	set	4040
   404  0000                     _SSPBUF	set	4041
   405  0000                     _SSPCON1	set	4038
   406  0000                     _SSPCON2	set	4037
   407  0000                     _SSPSTAT	set	4039
   408  0000                     _T0CON	set	4053
   409  0000                     _T1CON	set	4045
   410  0000                     _T3CON	set	4017
   411  0000                     _TMR0H	set	4055
   412  0000                     _TMR0L	set	4054
   413  0000                     _TMR1H	set	4047
   414  0000                     _TMR1L	set	4046
   415  0000                     _TMR3H	set	4019
   416  0000                     _TMR3L	set	4018
   417  0000                     _TRISA	set	3986
   418  0000                     _TRISB	set	3987
   419  0000                     _TRISC	set	3988
   420  0000                     _TRISD	set	3989
   421  0000                     _TRISE	set	3990
   422  0000                     _ACKDT	set	32301
   423  0000                     _ACKEN	set	32300
   424  0000                     _EEIF	set	32012
   425  0000                     _INT0IE	set	32660
   426  0000                     _INT0IF	set	32657
   427  0000                     _INT1IE	set	32643
   428  0000                     _INT1IF	set	32640
   429  0000                     _PEIE	set	32662
   430  0000                     _PEN	set	32298
   431  0000                     _RCEN	set	32299
   432  0000                     _RSEN	set	32297
   433  0000                     _SEN	set	32296
   434  0000                     _TMR0IE	set	32661
   435  0000                     _TMR0IF	set	32658
   436  0000                     _TMR1IE	set	31976
   437  0000                     _TMR1IF	set	31984
   438  0000                     _TMR3IE	set	32001
   439  0000                     _TRISC3	set	31907
   440  0000                     _TRISC4	set	31908
   441  00FE8D                     STR_17:
   442  00FE8D  74                 	db	116	;'t'
   443  00FE8E  69                 	db	105	;'i'
   444  00FE8F  6D                 	db	109	;'m'
   445  00FE90  65                 	db	101	;'e'
   446  00FE91  20                 	db	32
   447  00FE92  25                 	db	37
   448  00FE93  30                 	db	48	;'0'
   449  00FE94  32                 	db	50	;'2'
   450  00FE95  6C                 	db	108	;'l'
   451  00FE96  64                 	db	100	;'d'
   452  00FE97  3A                 	db	58	;':'
   453  00FE98  25                 	db	37
   454  00FE99  30                 	db	48	;'0'
   455  00FE9A  32                 	db	50	;'2'
   456  00FE9B  6C                 	db	108	;'l'
   457  00FE9C  64                 	db	100	;'d'
   458  00FE9D  2E                 	db	46
   459  00FE9E  25                 	db	37
   460  00FE9F  30                 	db	48	;'0'
   461  00FEA0  31                 	db	49	;'1'
   462  00FEA1  6C                 	db	108	;'l'
   463  00FEA2  64                 	db	100	;'d'
   464  00FEA3  0A                 	db	10
   465  00FEA4  00                 	db	0
   466  00FEA5                     STR_10:
   467  00FEA5  20                 	db	32
   468  00FEA6  20                 	db	32
   469  00FEA7  20                 	db	32
   470  00FEA8  25                 	db	37
   471  00FEA9  30                 	db	48	;'0'
   472  00FEAA  32                 	db	50	;'2'
   473  00FEAB  78                 	db	120	;'x'
   474  00FEAC  3A                 	db	58	;':'
   475  00FEAD  25                 	db	37
   476  00FEAE  30                 	db	48	;'0'
   477  00FEAF  32                 	db	50	;'2'
   478  00FEB0  78                 	db	120	;'x'
   479  00FEB1  3A                 	db	58	;':'
   480  00FEB2  25                 	db	37
   481  00FEB3  30                 	db	48	;'0'
   482  00FEB4  32                 	db	50	;'2'
   483  00FEB5  78                 	db	120	;'x'
   484  00FEB6  20                 	db	32
   485  00FEB7  20                 	db	32
   486  00FEB8  20                 	db	32
   487  00FEB9  41                 	db	65	;'A'
   488  00FEBA  3E                 	db	62	;'>'
   489  00FEBB  00                 	db	0
   490  00FEBC                     STR_3:
   491  00FEBC  74                 	db	116	;'t'
   492  00FEBD  69                 	db	105	;'i'
   493  00FEBE  6D                 	db	109	;'m'
   494  00FEBF  65                 	db	101	;'e'
   495  00FEC0  20                 	db	32
   496  00FEC1  25                 	db	37
   497  00FEC2  30                 	db	48	;'0'
   498  00FEC3  32                 	db	50	;'2'
   499  00FEC4  6C                 	db	108	;'l'
   500  00FEC5  64                 	db	100	;'d'
   501  00FEC6  3A                 	db	58	;':'
   502  00FEC7  25                 	db	37
   503  00FEC8  30                 	db	48	;'0'
   504  00FEC9  32                 	db	50	;'2'
   505  00FECA  6C                 	db	108	;'l'
   506  00FECB  64                 	db	100	;'d'
   507  00FECC  2E                 	db	46
   508  00FECD  25                 	db	37
   509  00FECE  30                 	db	48	;'0'
   510  00FECF  31                 	db	49	;'1'
   511  00FED0  6C                 	db	108	;'l'
   512  00FED1  64                 	db	100	;'d'
   513  00FED2  00                 	db	0
   514  00FED3                     STR_9:
   515  00FED3  20                 	db	32
   516  00FED4  20                 	db	32
   517  00FED5  32                 	db	50	;'2'
   518  00FED6  30                 	db	48	;'0'
   519  00FED7  25                 	db	37
   520  00FED8  30                 	db	48	;'0'
   521  00FED9  32                 	db	50	;'2'
   522  00FEDA  78                 	db	120	;'x'
   523  00FEDB  2F                 	db	47
   524  00FEDC  25                 	db	37
   525  00FEDD  30                 	db	48	;'0'
   526  00FEDE  32                 	db	50	;'2'
   527  00FEDF  78                 	db	120	;'x'
   528  00FEE0  2F                 	db	47
   529  00FEE1  25                 	db	37
   530  00FEE2  30                 	db	48	;'0'
   531  00FEE3  32                 	db	50	;'2'
   532  00FEE4  78                 	db	120	;'x'
   533  00FEE5  0A                 	db	10
   534  00FEE6  00                 	db	0
   535  00FEE7                     STR_15:
   536  00FEE7  25                 	db	37
   537  00FEE8  63                 	db	99	;'c'
   538  00FEE9  29                 	db	41
   539  00FEEA  20                 	db	32
   540  00FEEB  74                 	db	116	;'t'
   541  00FEEC  69                 	db	105	;'i'
   542  00FEED  6D                 	db	109	;'m'
   543  00FEEE  65                 	db	101	;'e'
   544  00FEEF  20                 	db	32
   545  00FEF0  20                 	db	32
   546  00FEF1  3C                 	db	60	;'<'
   547  00FEF2  41                 	db	65	;'A'
   548  00FEF3  20                 	db	32
   549  00FEF4  20                 	db	32
   550  00FEF5  20                 	db	32
   551  00FEF6  20                 	db	32
   552  00FEF7  20                 	db	32
   553  00FEF8  0A                 	db	10
   554  00FEF9  00                 	db	0
   555  00FEFA                     STR_20:
   556  00FEFA  5B                 	db	91	;'['
   557  00FEFB  25                 	db	37
   558  00FEFC  64                 	db	100	;'d'
   559  00FEFD  2C                 	db	44
   560  00FEFE  25                 	db	37
   561  00FEFF  64                 	db	100	;'d'
   562  00FF00  2C                 	db	44
   563  00FF01  25                 	db	37
   564  00FF02  64                 	db	100	;'d'
   565  00FF03  2C                 	db	44
   566  00FF04  25                 	db	37
   567  00FF05  64                 	db	100	;'d'
   568  00FF06  5D                 	db	93	;']'
   569  00FF07  20                 	db	32
   570  00FF08  20                 	db	32
   571  00FF09  20                 	db	32
   572  00FF0A  2A                 	db	42
   573  00FF0B  3E                 	db	62	;'>'
   574  00FF0C  00                 	db	0
   575  00FF0D                     STR_11:
   576  00FF0D  73                 	db	115	;'s'
   577  00FF0E  74                 	db	116	;'t'
   578  00FF0F  61                 	db	97	;'a'
   579  00FF10  72                 	db	114	;'r'
   580  00FF11  74                 	db	116	;'t'
   581  00FF12  20                 	db	32
   582  00FF13  20                 	db	32
   583  00FF14  20                 	db	32
   584  00FF15  3C                 	db	60	;'<'
   585  00FF16  42                 	db	66	;'B'
   586  00FF17  20                 	db	32
   587  00FF18  20                 	db	32
   588  00FF19  20                 	db	32
   589  00FF1A  20                 	db	32
   590  00FF1B  20                 	db	32
   591  00FF1C  20                 	db	32
   592  00FF1D  0A                 	db	10
   593  00FF1E  00                 	db	0
   594  00FF1F                     STR_13:
   595  00FF1F  73                 	db	115	;'s'
   596  00FF20  65                 	db	101	;'e'
   597  00FF21  6C                 	db	108	;'l'
   598  00FF22  65                 	db	101	;'e'
   599  00FF23  63                 	db	99	;'c'
   600  00FF24  74                 	db	116	;'t'
   601  00FF25  20                 	db	32
   602  00FF26  72                 	db	114	;'r'
   603  00FF27  75                 	db	117	;'u'
   604  00FF28  6E                 	db	110	;'n'
   605  00FF29  3A                 	db	58	;':'
   606  00FF2A  20                 	db	32
   607  00FF2B  20                 	db	32
   608  00FF2C  20                 	db	32
   609  00FF2D  20                 	db	32
   610  00FF2E  20                 	db	32
   611  00FF2F  0A                 	db	10
   612  00FF30  00                 	db	0
   613  00FF31                     STR_19:
   614  00FF31  5B                 	db	91	;'['
   615  00FF32  41                 	db	65	;'A'
   616  00FF33  41                 	db	65	;'A'
   617  00FF34  2C                 	db	44
   618  00FF35  39                 	db	57	;'9'
   619  00FF36  56                 	db	86	;'V'
   620  00FF37  2C                 	db	44
   621  00FF38  43                 	db	67	;'C'
   622  00FF39  2C                 	db	44
   623  00FF3A  6F                 	db	111	;'o'
   624  00FF3B  74                 	db	116	;'t'
   625  00FF3C  68                 	db	104	;'h'
   626  00FF3D  65                 	db	101	;'e'
   627  00FF3E  72                 	db	114	;'r'
   628  00FF3F  5D                 	db	93	;']'
   629  00FF40  20                 	db	32
   630  00FF41  0A                 	db	10
   631  00FF42  00                 	db	0
   632  00FF43                     STR_23:
   633  00FF43  30                 	db	48	;'0'
   634  00FF44  31                 	db	49	;'1'
   635  00FF45  32                 	db	50	;'2'
   636  00FF46  33                 	db	51	;'3'
   637  00FF47  34                 	db	52	;'4'
   638  00FF48  35                 	db	53	;'5'
   639  00FF49  36                 	db	54	;'6'
   640  00FF4A  37                 	db	55	;'7'
   641  00FF4B  38                 	db	56	;'8'
   642  00FF4C  39                 	db	57	;'9'
   643  00FF4D  61                 	db	97	;'a'
   644  00FF4E  62                 	db	98	;'b'
   645  00FF4F  63                 	db	99	;'c'
   646  00FF50  64                 	db	100	;'d'
   647  00FF51  65                 	db	101	;'e'
   648  00FF52  66                 	db	102	;'f'
   649  00FF53  00                 	db	0
   650  00FF54                     STR_18:
   651  00FF54  20                 	db	32
   652  00FF55  20                 	db	32
   653  00FF56  20                 	db	32
   654  00FF57  20                 	db	32
   655  00FF58  20                 	db	32
   656  00FF59  20                 	db	32
   657  00FF5A  20                 	db	32
   658  00FF5B  20                 	db	32
   659  00FF5C  20                 	db	32
   660  00FF5D  20                 	db	32
   661  00FF5E  20                 	db	32
   662  00FF5F  20                 	db	32
   663  00FF60  20                 	db	32
   664  00FF61  20                 	db	32
   665  00FF62  2A                 	db	42
   666  00FF63  3E                 	db	62	;'>'
   667  00FF64  00                 	db	0
   668  00FF65                     STR_14:
   669  00FF65  5B                 	db	91	;'['
   670  00FF66  31                 	db	49	;'1'
   671  00FF67  2C                 	db	44
   672  00FF68  32                 	db	50	;'2'
   673  00FF69  2C                 	db	44
   674  00FF6A  33                 	db	51	;'3'
   675  00FF6B  2C                 	db	44
   676  00FF6C  34                 	db	52	;'4'
   677  00FF6D  5D                 	db	93	;']'
   678  00FF6E  20                 	db	32
   679  00FF6F  20                 	db	32
   680  00FF70  20                 	db	32
   681  00FF71  20                 	db	32
   682  00FF72  20                 	db	32
   683  00FF73  2A                 	db	42
   684  00FF74  3E                 	db	62	;'>'
   685  00FF75  00                 	db	0
   686  00FF76                     STR_12:
   687  00FF76  68                 	db	104	;'h'
   688  00FF77  69                 	db	105	;'i'
   689  00FF78  73                 	db	115	;'s'
   690  00FF79  74                 	db	116	;'t'
   691  00FF7A  6F                 	db	111	;'o'
   692  00FF7B  72                 	db	114	;'r'
   693  00FF7C  79                 	db	121	;'y'
   694  00FF7D  20                 	db	32
   695  00FF7E  3C                 	db	60	;'<'
   696  00FF7F  43                 	db	67	;'C'
   697  00FF80  20                 	db	32
   698  00FF81  20                 	db	32
   699  00FF82  20                 	db	32
   700  00FF83  20                 	db	32
   701  00FF84  2A                 	db	42
   702  00FF85  3E                 	db	62	;'>'
   703  00FF86  00                 	db	0
   704  00FF87                     STR_16:
   705  00FF87  20                 	db	32
   706  00FF88  20                 	db	32
   707  00FF89  20                 	db	32
   708  00FF8A  73                 	db	115	;'s'
   709  00FF8B  74                 	db	116	;'t'
   710  00FF8C  61                 	db	97	;'a'
   711  00FF8D  74                 	db	116	;'t'
   712  00FF8E  73                 	db	115	;'s'
   713  00FF8F  20                 	db	32
   714  00FF90  3C                 	db	60	;'<'
   715  00FF91  42                 	db	66	;'B'
   716  00FF92  20                 	db	32
   717  00FF93  20                 	db	32
   718  00FF94  20                 	db	32
   719  00FF95  2A                 	db	42
   720  00FF96  3E                 	db	62	;'>'
   721  00FF97  00                 	db	0
   722  00FF98                     STR_22:
   723  00FF98  20                 	db	32
   724  00FF99  20                 	db	32
   725  00FF9A  61                 	db	97	;'a'
   726  00FF9B  76                 	db	118	;'v'
   727  00FF9C  61                 	db	97	;'a'
   728  00FF9D  69                 	db	105	;'i'
   729  00FF9E  6C                 	db	108	;'l'
   730  00FF9F  61                 	db	97	;'a'
   731  00FFA0  62                 	db	98	;'b'
   732  00FFA1  6C                 	db	108	;'l'
   733  00FFA2  65                 	db	101	;'e'
   734  00FFA3  20                 	db	32
   735  00FFA4  20                 	db	32
   736  00FFA5  20                 	db	32
   737  00FFA6  2A                 	db	42
   738  00FFA7  3E                 	db	62	;'>'
   739  00FFA8  00                 	db	0
   740  00FFA9                     STR_4:
   741  00FFA9  56                 	db	86	;'V'
   742  00FFAA  3A                 	db	58	;':'
   743  00FFAB  20                 	db	32
   744  00FFAC  25                 	db	37
   745  00FFAD  2E                 	db	46
   746  00FFAE  33                 	db	51	;'3'
   747  00FFAF  66                 	db	102	;'f'
   748  00FFB0  2C                 	db	44
   749  00FFB1  20                 	db	32
   750  00FFB2  4E                 	db	78	;'N'
   751  00FFB3  3A                 	db	58	;':'
   752  00FFB4  20                 	db	32
   753  00FFB5  25                 	db	37
   754  00FFB6  64                 	db	100	;'d'
   755  00FFB7  0A                 	db	10
   756  00FFB8  00                 	db	0
   757  00FFB9                     STR_21:
   758  00FFB9  20                 	db	32
   759  00FFBA  72                 	db	114	;'r'
   760  00FFBB  75                 	db	117	;'u'
   761  00FFBC  6E                 	db	110	;'n'
   762  00FFBD  20                 	db	32
   763  00FFBE  6E                 	db	110	;'n'
   764  00FFBF  6F                 	db	111	;'o'
   765  00FFC0  74                 	db	116	;'t'
   766  00FFC1  20                 	db	32
   767  00FFC2  0A                 	db	10
   768  00FFC3  00                 	db	0
   769  00FFC4                     STR_7:
   770  00FFC4  43                 	db	67	;'C'
   771  00FFC5  20                 	db	32
   772  00FFC6  20                 	db	32
   773  00FFC7  6C                 	db	108	;'l'
   774  00FFC8  69                 	db	105	;'i'
   775  00FFC9  6D                 	db	109	;'m'
   776  00FFCA  3A                 	db	58	;':'
   777  00FFCB  20                 	db	32
   778  00FFCC  25                 	db	37
   779  00FFCD  66                 	db	102	;'f'
   780  00FFCE  00                 	db	0
   781  00FFCF                     STR_5:
   782  00FFCF  41                 	db	65	;'A'
   783  00FFD0  41                 	db	65	;'A'
   784  00FFD1  20                 	db	32
   785  00FFD2  6C                 	db	108	;'l'
   786  00FFD3  69                 	db	105	;'i'
   787  00FFD4  6D                 	db	109	;'m'
   788  00FFD5  3A                 	db	58	;':'
   789  00FFD6  20                 	db	32
   790  00FFD7  25                 	db	37
   791  00FFD8  66                 	db	102	;'f'
   792  00FFD9  00                 	db	0
   793  00FFDA                     STR_6:
   794  00FFDA  39                 	db	57	;'9'
   795  00FFDB  56                 	db	86	;'V'
   796  00FFDC  20                 	db	32
   797  00FFDD  6C                 	db	108	;'l'
   798  00FFDE  69                 	db	105	;'i'
   799  00FFDF  6D                 	db	109	;'m'
   800  00FFE0  3A                 	db	58	;':'
   801  00FFE1  20                 	db	32
   802  00FFE2  25                 	db	37
   803  00FFE3  66                 	db	102	;'f'
   804  00FFE4  00                 	db	0
   805  00FFE5  25                 	db	37
   806  00FFE6  64                 	db	100	;'d'
   807  00FFE7  2C                 	db	44
   808  00FFE8  20                 	db	32
   809  00FFE9  25                 	db	37
   810  00FFEA  30                 	db	48	;'0'
   811  00FFEB  32                 	db	50	;'2'
   812  00FFEC  78                 	db	120	;'x'
   813  00FFED  00                 	db	0
   814  00FFEE  74                 	db	116	;'t'
   815  00FFEF  31                 	db	49	;'1'
   816  00FFF0  3A                 	db	58	;':'
   817  00FFF1  20                 	db	32
   818  00FFF2  25                 	db	37
   819  00FFF3  78                 	db	120	;'x'
   820  00FFF4  20                 	db	32
   821  00FFF5  00                 	db	0
   822  00FFF6                     STR_2:
   823  00FFF6  72                 	db	114	;'r'
   824  00FFF7  75                 	db	117	;'u'
   825  00FFF8  6E                 	db	110	;'n'
   826  00FFF9  6E                 	db	110	;'n'
   827  00FFFA  69                 	db	105	;'i'
   828  00FFFB  6E                 	db	110	;'n'
   829  00FFFC  67                 	db	103	;'g'
   830  00FFFD  00                 	db	0
   831                           
   832                           ; #config settings
   833  00FFFE  00                 	db	0	; dummy byte at the end
   834  0000                     
   835                           	psect	cinit
   836  003550                     __pcinit:
   837                           	opt stack 0
   838  003550                     start_initialization:
   839                           	opt stack 0
   840  003550                     __initialization:
   841                           	opt stack 0
   842                           
   843                           ; Initialize objects allocated to BANK1 (30 bytes)
   844                           ; load TBLPTR registers with __pidataBANK1
   845  003550  0EF2               	movlw	low __pidataBANK1
   846  003552  6EF6               	movwf	tblptrl,c
   847  003554  0E3E               	movlw	high __pidataBANK1
   848  003556  6EF7               	movwf	tblptrh,c
   849  003558  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   850  00355A  6EF8               	movwf	tblptru,c
   851  00355C  EE01  F065         	lfsr	0,__pdataBANK1
   852  003560  EE10 F01E          	lfsr	1,30
   853  003564                     copy_data0:
   854  003564  0009               	tblrd		*+
   855  003566  CFF5 FFEE          	movff	tablat,postinc0
   856  00356A  50E5               	movf	postdec1,w,c
   857  00356C  50E1               	movf	fsr1l,w,c
   858  00356E  E1FA               	bnz	copy_data0
   859                           
   860                           ; Initialize objects allocated to BANK0 (6 bytes)
   861                           ; load TBLPTR registers with __pidataBANK0
   862  003570  0EC6               	movlw	low __pidataBANK0
   863  003572  6EF6               	movwf	tblptrl,c
   864  003574  0E3F               	movlw	high __pidataBANK0
   865  003576  6EF7               	movwf	tblptrh,c
   866  003578  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   867  00357A  6EF8               	movwf	tblptru,c
   868  00357C  EE00  F0F5         	lfsr	0,__pdataBANK0
   869  003580  EE10 F006          	lfsr	1,6
   870  003584                     copy_data1:
   871  003584  0009               	tblrd		*+
   872  003586  CFF5 FFEE          	movff	tablat,postinc0
   873  00358A  50E5               	movf	postdec1,w,c
   874  00358C  50E1               	movf	fsr1l,w,c
   875  00358E  E1FA               	bnz	copy_data1
   876                           
   877                           ; Initialize objects allocated to COMRAM (23 bytes)
   878                           ; load TBLPTR registers with __pidataCOMRAM
   879  003590  0E48               	movlw	low __pidataCOMRAM
   880  003592  6EF6               	movwf	tblptrl,c
   881  003594  0E3F               	movlw	high __pidataCOMRAM
   882  003596  6EF7               	movwf	tblptrh,c
   883  003598  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   884  00359A  6EF8               	movwf	tblptru,c
   885  00359C  EE00  F03B         	lfsr	0,__pdataCOMRAM
   886  0035A0  EE10 F017          	lfsr	1,23
   887  0035A4                     copy_data2:
   888  0035A4  0009               	tblrd		*+
   889  0035A6  CFF5 FFEE          	movff	tablat,postinc0
   890  0035AA  50E5               	movf	postdec1,w,c
   891  0035AC  50E1               	movf	fsr1l,w,c
   892  0035AE  E1FA               	bnz	copy_data2
   893                           
   894                           ; Clear objects allocated to BANK1 (32 bytes)
   895  0035B0  EE01  F045         	lfsr	0,__pbssBANK1
   896  0035B4  0E20               	movlw	32
   897  0035B6                     clear_0:
   898  0035B6  6AEE               	clrf	postinc0,c
   899  0035B8  06E8               	decf	wreg,f,c
   900  0035BA  E1FD               	bnz	clear_0
   901                           
   902                           ; Clear objects allocated to BANK0 (2 bytes)
   903  0035BC  0100               	movlb	0
   904  0035BE  6BFC               	clrf	(__pbssBANK0+1)& (0+255),b
   905  0035C0  6BFB               	clrf	__pbssBANK0& (0+255),b
   906                           
   907                           ; Clear objects allocated to COMRAM (11 bytes)
   908  0035C2  EE00  F052         	lfsr	0,__pbssCOMRAM
   909  0035C6  0E0B               	movlw	11
   910  0035C8                     clear_1:
   911  0035C8  6AEE               	clrf	postinc0,c
   912  0035CA  06E8               	decf	wreg,f,c
   913  0035CC  E1FD               	bnz	clear_1
   914  0035CE                     end_of_initialization:
   915                           	opt stack 0
   916  0035CE                     __end_of__initialization:
   917                           	opt stack 0
   918  0035CE  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   919  0035D0  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   920  0035D2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   921  0035D4  6EF8               	movwf	tblptru,c
   922  0035D6  0100               	movlb	0
   923  0035D8  EFBE  F00B         	goto	_main	;jump to C main() function
   924                           tblptru	equ	0xFF8
   925                           tblptrh	equ	0xFF7
   926                           tblptrl	equ	0xFF6
   927                           tablat	equ	0xFF5
   928                           postinc0	equ	0xFEE
   929                           wreg	equ	0xFE8
   930                           postdec1	equ	0xFE5
   931                           fsr1l	equ	0xFE1
   932                           
   933                           	psect	bssCOMRAM
   934  000052                     __pbssCOMRAM:
   935                           	opt stack 0
   936  000052                     _padPin3:
   937                           	opt stack 0
   938  000052                     	ds	4
   939  000056                     _count:
   940                           	opt stack 0
   941  000056                     	ds	2
   942  000058                     _curr:
   943                           	opt stack 0
   944  000058                     	ds	2
   945  00005A                     _prevTime:
   946                           	opt stack 0
   947  00005A                     	ds	2
   948  00005C                     _lastKey:
   949                           	opt stack 0
   950  00005C                     	ds	1
   951                           tblptru	equ	0xFF8
   952                           tblptrh	equ	0xFF7
   953                           tblptrl	equ	0xFF6
   954                           tablat	equ	0xFF5
   955                           postinc0	equ	0xFEE
   956                           wreg	equ	0xFE8
   957                           postdec1	equ	0xFE5
   958                           fsr1l	equ	0xFE1
   959                           
   960                           	psect	dataCOMRAM
   961  00003B                     __pdataCOMRAM:
   962                           	opt stack 0
   963  00003B                     _V_LIM_9V:
   964                           	opt stack 0
   965  00003B                     	ds	3
   966  00003E                     _V_LIM_AA:
   967                           	opt stack 0
   968  00003E                     	ds	3
   969  000041                     _V_LIM_C:
   970                           	opt stack 0
   971  000041                     	ds	3
   972  000044                     _angle:
   973                           	opt stack 0
   974  000044                     	ds	2
   975  000046                     _padAngle_OPEN:
   976                           	opt stack 0
   977  000046                     	ds	2
   978  000048                     _redirectAngle_9V:
   979                           	opt stack 0
   980  000048                     	ds	2
   981  00004A                     _AA_float:
   982                           	opt stack 0
   983  00004A                     	ds	4
   984  00004E                     _padPin1:
   985                           	opt stack 0
   986  00004E                     	ds	4
   987                           tblptru	equ	0xFF8
   988                           tblptrh	equ	0xFF7
   989                           tblptrl	equ	0xFF6
   990                           tablat	equ	0xFF5
   991                           postinc0	equ	0xFEE
   992                           wreg	equ	0xFE8
   993                           postdec1	equ	0xFE5
   994                           fsr1l	equ	0xFE1
   995                           
   996                           	psect	bssBANK0
   997  0000FB                     __pbssBANK0:
   998                           	opt stack 0
   999  0000FB                     _n:
  1000                           	opt stack 0
  1001  0000FB                     	ds	2
  1002                           tblptru	equ	0xFF8
  1003                           tblptrh	equ	0xFF7
  1004                           tblptrl	equ	0xFF6
  1005                           tablat	equ	0xFF5
  1006                           postinc0	equ	0xFEE
  1007                           wreg	equ	0xFE8
  1008                           postdec1	equ	0xFE5
  1009                           fsr1l	equ	0xFE1
  1010                           
  1011                           	psect	dataBANK0
  1012  0000F5                     __pdataBANK0:
  1013                           	opt stack 0
  1014  0000F5                     _padAngle_CLOSE:
  1015                           	opt stack 0
  1016  0000F5                     	ds	2
  1017  0000F7                     _redirectAngle_C:
  1018                           	opt stack 0
  1019  0000F7                     	ds	2
  1020  0000F9                     _redirectAngle_OTHER:
  1021                           	opt stack 0
  1022  0000F9                     	ds	2
  1023                           tblptru	equ	0xFF8
  1024                           tblptrh	equ	0xFF7
  1025                           tblptrl	equ	0xFF6
  1026                           tablat	equ	0xFF5
  1027                           postinc0	equ	0xFEE
  1028                           wreg	equ	0xFE8
  1029                           postdec1	equ	0xFE5
  1030                           fsr1l	equ	0xFE1
  1031                           
  1032                           	psect	bssBANK1
  1033  000145                     __pbssBANK1:
  1034                           	opt stack 0
  1035  000145                     _pulse:
  1036                           	opt stack 0
  1037  000145                     	ds	8
  1038  00014D                     _servos:
  1039                           	opt stack 0
  1040  00014D                     	ds	8
  1041  000155                     _time:
  1042                           	opt stack 0
  1043  000155                     	ds	4
  1044  000159                     _batteryDetected:
  1045                           	opt stack 0
  1046  000159                     	ds	2
  1047  00015B                     _n_9V:
  1048                           	opt stack 0
  1049  00015B                     	ds	2
  1050  00015D                     _n_AA:
  1051                           	opt stack 0
  1052  00015D                     	ds	2
  1053  00015F                     _n_C:
  1054                           	opt stack 0
  1055  00015F                     	ds	2
  1056  000161                     _n_OTHER:
  1057                           	opt stack 0
  1058  000161                     	ds	2
  1059  000163                     _terminate:
  1060                           	opt stack 0
  1061  000163                     	ds	2
  1062                           tblptru	equ	0xFF8
  1063                           tblptrh	equ	0xFF7
  1064                           tblptrl	equ	0xFF6
  1065                           tablat	equ	0xFF5
  1066                           postinc0	equ	0xFEE
  1067                           wreg	equ	0xFE8
  1068                           postdec1	equ	0xFE5
  1069                           fsr1l	equ	0xFE1
  1070                           
  1071                           	psect	dataBANK1
  1072  000165                     __pdataBANK1:
  1073                           	opt stack 0
  1074  000165                     _cylinderDir:
  1075                           	opt stack 0
  1076  000165                     	ds	4
  1077  000169                     _padAngle_NEUTRAL:
  1078                           	opt stack 0
  1079  000169                     	ds	2
  1080  00016B                     _redirectAngle_AA:
  1081                           	opt stack 0
  1082  00016B                     	ds	2
  1083  00016D                     _stoppingTime:
  1084                           	opt stack 0
  1085  00016D                     	ds	2
  1086  00016F                     _conveyorServo:
  1087                           	opt stack 0
  1088  00016F                     	ds	4
  1089  000173                     _cylinderMotor:
  1090                           	opt stack 0
  1091  000173                     	ds	4
  1092  000177                     _padPin2:
  1093                           	opt stack 0
  1094  000177                     	ds	4
  1095  00017B                     _padServo:
  1096                           	opt stack 0
  1097  00017B                     	ds	4
  1098  00017F                     _redirectingServo:
  1099                           	opt stack 0
  1100  00017F                     	ds	4
  1101                           tblptru	equ	0xFF8
  1102                           tblptrh	equ	0xFF7
  1103                           tblptrl	equ	0xFF6
  1104                           tablat	equ	0xFF5
  1105                           postinc0	equ	0xFEE
  1106                           wreg	equ	0xFE8
  1107                           postdec1	equ	0xFE5
  1108                           fsr1l	equ	0xFE1
  1109                           
  1110                           	psect	cstackBANK1
  1111  000100                     __pcstackBANK1:
  1112                           	opt stack 0
  1113  000100                     showDateTime@sec:
  1114                           	opt stack 0
  1115  000100                     showRunStats@n_AA:
  1116                           	opt stack 0
  1117  000100                     _sortBattery$1417:
  1118                           	opt stack 0
  1119  000100                     _showRunTime$1419:
  1120                           	opt stack 0
  1121                           
  1122                           ; 4 bytes @ 0x0
  1123  000100                     	ds	2
  1124  000102                     showDateTime@min:
  1125                           	opt stack 0
  1126  000102                     showRunStats@n_9V:
  1127                           	opt stack 0
  1128  000102                     sortBattery@V_float:
  1129                           	opt stack 0
  1130                           
  1131                           ; 3 bytes @ 0x2
  1132  000102                     	ds	2
  1133  000104                     showDateTime@hour:
  1134                           	opt stack 0
  1135  000104                     showRunTime@t1:
  1136                           	opt stack 0
  1137  000104                     showRunStats@n_C:
  1138                           	opt stack 0
  1139                           
  1140                           ; 2 bytes @ 0x4
  1141  000104                     	ds	1
  1142  000105                     sortBattery@pos_v_counter:
  1143                           	opt stack 0
  1144                           
  1145                           ; 2 bytes @ 0x5
  1146  000105                     	ds	1
  1147  000106                     showDateTime@day:
  1148                           	opt stack 0
  1149  000106                     showRunTime@t2:
  1150                           	opt stack 0
  1151  000106                     showRunStats@n_OTHER:
  1152                           	opt stack 0
  1153                           
  1154                           ; 2 bytes @ 0x6
  1155  000106                     	ds	1
  1156  000107                     sortBattery@signal:
  1157                           	opt stack 0
  1158                           
  1159                           ; 2 bytes @ 0x7
  1160  000107                     	ds	1
  1161  000108                     showDateTime@mon:
  1162                           	opt stack 0
  1163  000108                     showRunTime@time:
  1164                           	opt stack 0
  1165                           
  1166                           ; 4 bytes @ 0x8
  1167  000108                     	ds	1
  1168  000109                     sortBattery@Vcc:
  1169                           	opt stack 0
  1170                           
  1171                           ; 3 bytes @ 0x9
  1172  000109                     	ds	1
  1173  00010A                     showDateTime@year:
  1174                           	opt stack 0
  1175                           
  1176                           ; 2 bytes @ 0xA
  1177  00010A                     	ds	2
  1178  00010C                     showDateTime@t:
  1179                           	opt stack 0
  1180  00010C                     sortBattery@resolution:
  1181                           	opt stack 0
  1182                           
  1183                           ; 3 bytes @ 0xC
  1184  00010C                     	ds	2
  1185  00010E                     showInterface@n:
  1186                           	opt stack 0
  1187                           
  1188                           ; 2 bytes @ 0xE
  1189  00010E                     	ds	1
  1190  00010F                     sortBattery@V_max:
  1191                           	opt stack 0
  1192                           
  1193                           ; 3 bytes @ 0xF
  1194  00010F                     	ds	1
  1195  000110                     showInterface@run:
  1196                           	opt stack 0
  1197                           
  1198                           ; 2 bytes @ 0x10
  1199  000110                     	ds	2
  1200  000112                     showInterface@key:
  1201                           	opt stack 0
  1202  000112                     sortBattery@i_249:
  1203                           	opt stack 0
  1204                           
  1205                           ; 2 bytes @ 0x12
  1206  000112                     	ds	2
  1207  000114                     sortBattery@targetAngle:
  1208                           	opt stack 0
  1209                           
  1210                           ; 2 bytes @ 0x14
  1211  000114                     	ds	2
  1212  000116                     sortBattery@V:
  1213                           	opt stack 0
  1214                           
  1215                           ; 3 bytes @ 0x16
  1216  000116                     	ds	3
  1217  000119                     sortBattery@i:
  1218                           	opt stack 0
  1219                           
  1220                           ; 3 bytes @ 0x19
  1221  000119                     	ds	3
  1222  00011C                     sortBattery@V_244:
  1223                           	opt stack 0
  1224                           
  1225                           ; 3 bytes @ 0x1C
  1226  00011C                     	ds	3
  1227  00011F                     ??_main:
  1228                           
  1229                           ; 1 bytes @ 0x1F
  1230  00011F                     	ds	10
  1231  000129                     main@cylinderStart:
  1232                           	opt stack 0
  1233                           
  1234                           ; 2 bytes @ 0x29
  1235  000129                     	ds	2
  1236  00012B                     main@cylinderDur:
  1237                           	opt stack 0
  1238                           
  1239                           ; 2 bytes @ 0x2B
  1240  00012B                     	ds	2
  1241  00012D                     main@cylinderForward:
  1242                           	opt stack 0
  1243                           
  1244                           ; 2 bytes @ 0x2D
  1245  00012D                     	ds	2
  1246  00012F                     main@cylinderBackward:
  1247                           	opt stack 0
  1248                           
  1249                           ; 2 bytes @ 0x2F
  1250  00012F                     	ds	2
  1251  000131                     _main$1416:
  1252                           	opt stack 0
  1253                           
  1254                           ; 4 bytes @ 0x31
  1255  000131                     	ds	4
  1256  000135                     main@lastBatteryTime:
  1257                           	opt stack 0
  1258                           
  1259                           ; 2 bytes @ 0x35
  1260  000135                     	ds	2
  1261  000137                     main@run:
  1262                           	opt stack 0
  1263                           
  1264                           ; 14 bytes @ 0x37
  1265  000137                     	ds	14
  1266                           tblptru	equ	0xFF8
  1267                           tblptrh	equ	0xFF7
  1268                           tblptrl	equ	0xFF6
  1269                           tablat	equ	0xFF5
  1270                           postinc0	equ	0xFEE
  1271                           wreg	equ	0xFE8
  1272                           postdec1	equ	0xFE5
  1273                           fsr1l	equ	0xFE1
  1274                           
  1275                           	psect	cstackBANK0
  1276  000080                     __pcstackBANK0:
  1277                           	opt stack 0
  1278  000080                     ??___ftdiv:
  1279  000080                     ?_readPastRun:
  1280                           	opt stack 0
  1281  000080                     readPastRun@run:
  1282                           	opt stack 0
  1283  000080                     eepromWrite@data:
  1284                           	opt stack 0
  1285                           
  1286                           ; 2 bytes @ 0x0
  1287  000080                     	ds	2
  1288  000082                     eepromWrite@address:
  1289                           	opt stack 0
  1290  000082                     readPastRun@data:
  1291                           	opt stack 0
  1292                           
  1293                           ; 14 bytes @ 0x2
  1294  000082                     	ds	1
  1295  000083                     ___ftdiv@cntr:
  1296                           	opt stack 0
  1297                           
  1298                           ; 1 bytes @ 0x3
  1299  000083                     	ds	1
  1300  000084                     ___ftdiv@f3:
  1301                           	opt stack 0
  1302                           
  1303                           ; 3 bytes @ 0x4
  1304  000084                     	ds	2
  1305  000086                     ??_eepromWrite:
  1306                           
  1307                           ; 1 bytes @ 0x6
  1308  000086                     	ds	1
  1309  000087                     ___ftdiv@exp:
  1310                           	opt stack 0
  1311  000087                     eepromWrite@ien:
  1312                           	opt stack 0
  1313                           
  1314                           ; 2 bytes @ 0x7
  1315  000087                     	ds	1
  1316  000088                     ___ftdiv@sign:
  1317                           	opt stack 0
  1318                           
  1319                           ; 1 bytes @ 0x8
  1320  000088                     	ds	1
  1321  000089                     ?___ftmul:
  1322                           	opt stack 0
  1323  000089                     saveNewRun@data:
  1324                           	opt stack 0
  1325  000089                     ___ftmul@f1:
  1326                           	opt stack 0
  1327                           
  1328                           ; 3 bytes @ 0x9
  1329  000089                     	ds	2
  1330  00008B                     saveNewRun@n:
  1331                           	opt stack 0
  1332                           
  1333                           ; 2 bytes @ 0xB
  1334  00008B                     	ds	1
  1335  00008C                     ___ftmul@f2:
  1336                           	opt stack 0
  1337                           
  1338                           ; 3 bytes @ 0xC
  1339  00008C                     	ds	1
  1340  00008D                     saveNewRun@i:
  1341                           	opt stack 0
  1342                           
  1343                           ; 2 bytes @ 0xD
  1344  00008D                     	ds	2
  1345  00008F                     ??___ftmul:
  1346                           
  1347                           ; 1 bytes @ 0xF
  1348  00008F                     	ds	1
  1349  000090                     readPastRun@i:
  1350                           	opt stack 0
  1351                           
  1352                           ; 2 bytes @ 0x10
  1353  000090                     	ds	2
  1354  000092                     ___ftmul@exp:
  1355                           	opt stack 0
  1356                           
  1357                           ; 1 bytes @ 0x12
  1358  000092                     	ds	1
  1359  000093                     ___ftmul@f3_as_product:
  1360                           	opt stack 0
  1361                           
  1362                           ; 3 bytes @ 0x13
  1363  000093                     	ds	3
  1364  000096                     ___ftmul@cntr:
  1365                           	opt stack 0
  1366                           
  1367                           ; 1 bytes @ 0x16
  1368  000096                     	ds	1
  1369  000097                     ___ftmul@sign:
  1370                           	opt stack 0
  1371                           
  1372                           ; 1 bytes @ 0x17
  1373  000097                     	ds	1
  1374  000098                     ?_fround:
  1375                           	opt stack 0
  1376  000098                     ?_scale:
  1377                           	opt stack 0
  1378                           
  1379                           ; 3 bytes @ 0x18
  1380  000098                     	ds	3
  1381  00009B                     _fround$1421:
  1382                           	opt stack 0
  1383  00009B                     _scale$1422:
  1384                           	opt stack 0
  1385                           
  1386                           ; 3 bytes @ 0x1B
  1387  00009B                     	ds	3
  1388  00009E                     scale@scl:
  1389                           	opt stack 0
  1390  00009E                     _fround$1420:
  1391                           	opt stack 0
  1392                           
  1393                           ; 3 bytes @ 0x1E
  1394  00009E                     	ds	3
  1395  0000A1                     fround@prec:
  1396                           	opt stack 0
  1397                           
  1398                           ; 1 bytes @ 0x21
  1399  0000A1                     	ds	1
  1400  0000A2                     ?___ftadd:
  1401                           	opt stack 0
  1402  0000A2                     ___ftadd@f1:
  1403                           	opt stack 0
  1404                           
  1405                           ; 3 bytes @ 0x22
  1406  0000A2                     	ds	3
  1407  0000A5                     ___ftadd@f2:
  1408                           	opt stack 0
  1409                           
  1410                           ; 3 bytes @ 0x25
  1411  0000A5                     	ds	3
  1412  0000A8                     ??___ftadd:
  1413                           
  1414                           ; 1 bytes @ 0x28
  1415  0000A8                     	ds	3
  1416  0000AB                     ___ftadd@sign:
  1417                           	opt stack 0
  1418                           
  1419                           ; 1 bytes @ 0x2B
  1420  0000AB                     	ds	1
  1421  0000AC                     ___ftadd@exp2:
  1422                           	opt stack 0
  1423                           
  1424                           ; 1 bytes @ 0x2C
  1425  0000AC                     	ds	1
  1426  0000AD                     ___ftadd@exp1:
  1427                           	opt stack 0
  1428                           
  1429                           ; 1 bytes @ 0x2D
  1430  0000AD                     	ds	1
  1431  0000AE                     ?___ftsub:
  1432                           	opt stack 0
  1433  0000AE                     ?___fttol:
  1434                           	opt stack 0
  1435  0000AE                     ___ftsub@f1:
  1436                           	opt stack 0
  1437  0000AE                     ___fttol@f1:
  1438                           	opt stack 0
  1439                           
  1440                           ; 3 bytes @ 0x2E
  1441  0000AE                     	ds	3
  1442  0000B1                     ___ftsub@f2:
  1443                           	opt stack 0
  1444                           
  1445                           ; 3 bytes @ 0x31
  1446  0000B1                     	ds	1
  1447  0000B2                     ??___fttol:
  1448                           
  1449                           ; 1 bytes @ 0x32
  1450  0000B2                     	ds	5
  1451  0000B7                     ___fttol@sign1:
  1452                           	opt stack 0
  1453                           
  1454                           ; 1 bytes @ 0x37
  1455  0000B7                     	ds	1
  1456  0000B8                     ___fttol@lval:
  1457                           	opt stack 0
  1458                           
  1459                           ; 4 bytes @ 0x38
  1460  0000B8                     	ds	4
  1461  0000BC                     ___fttol@exp1:
  1462                           	opt stack 0
  1463                           
  1464                           ; 1 bytes @ 0x3C
  1465  0000BC                     	ds	1
  1466  0000BD                     ?_printf:
  1467                           	opt stack 0
  1468  0000BD                     ?_angleToPulse:
  1469                           	opt stack 0
  1470  0000BD                     angleToPulse@angle:
  1471                           	opt stack 0
  1472  0000BD                     printf@f:
  1473                           	opt stack 0
  1474                           
  1475                           ; 2 bytes @ 0x3D
  1476  0000BD                     	ds	4
  1477  0000C1                     ??_angleToPulse:
  1478                           
  1479                           ; 1 bytes @ 0x41
  1480  0000C1                     	ds	4
  1481  0000C5                     angleToPulse@offset:
  1482                           	opt stack 0
  1483                           
  1484                           ; 4 bytes @ 0x45
  1485  0000C5                     	ds	4
  1486  0000C9                     angleToPulse@a180:
  1487                           	opt stack 0
  1488                           
  1489                           ; 4 bytes @ 0x49
  1490  0000C9                     	ds	2
  1491  0000CB                     ??_printf:
  1492                           
  1493                           ; 1 bytes @ 0x4B
  1494  0000CB                     	ds	2
  1495  0000CD                     _angleToPulse$1418:
  1496                           	opt stack 0
  1497                           
  1498                           ; 3 bytes @ 0x4D
  1499  0000CD                     	ds	3
  1500  0000D0                     angleToPulse@a000:
  1501                           	opt stack 0
  1502                           
  1503                           ; 4 bytes @ 0x50
  1504  0000D0                     	ds	1
  1505  0000D1                     _printf$1423:
  1506                           	opt stack 0
  1507                           
  1508                           ; 3 bytes @ 0x51
  1509  0000D1                     	ds	3
  1510  0000D4                     printf@idx:
  1511                           	opt stack 0
  1512  0000D4                     setAngle@motor:
  1513                           	opt stack 0
  1514                           
  1515                           ; 2 bytes @ 0x54
  1516  0000D4                     	ds	1
  1517  0000D5                     printf@cp:
  1518                           	opt stack 0
  1519                           
  1520                           ; 2 bytes @ 0x55
  1521  0000D5                     	ds	1
  1522  0000D6                     setAngle@angle:
  1523                           	opt stack 0
  1524                           
  1525                           ; 2 bytes @ 0x56
  1526  0000D6                     	ds	1
  1527  0000D7                     printf@len:
  1528                           	opt stack 0
  1529                           
  1530                           ; 2 bytes @ 0x57
  1531  0000D7                     	ds	1
  1532  0000D8                     ??_setAngle:
  1533                           
  1534                           ; 1 bytes @ 0x58
  1535  0000D8                     	ds	1
  1536  0000D9                     printf@ap:
  1537                           	opt stack 0
  1538                           
  1539                           ; 2 bytes @ 0x59
  1540  0000D9                     	ds	1
  1541  0000DA                     setAngle@period:
  1542                           	opt stack 0
  1543                           
  1544                           ; 2 bytes @ 0x5A
  1545  0000DA                     	ds	1
  1546  0000DB                     printf@tmpval:
  1547                           	opt stack 0
  1548                           
  1549                           ; 4 bytes @ 0x5B
  1550  0000DB                     	ds	1
  1551  0000DC                     setAngle@i:
  1552                           	opt stack 0
  1553                           
  1554                           ; 2 bytes @ 0x5C
  1555  0000DC                     	ds	2
  1556  0000DE                     initServo@motor:
  1557                           	opt stack 0
  1558                           
  1559                           ; 2 bytes @ 0x5E
  1560  0000DE                     	ds	1
  1561  0000DF                     printf@exp:
  1562                           	opt stack 0
  1563                           
  1564                           ; 2 bytes @ 0x5F
  1565  0000DF                     	ds	1
  1566  0000E0                     initServo@angle:
  1567                           	opt stack 0
  1568                           
  1569                           ; 2 bytes @ 0x60
  1570  0000E0                     	ds	1
  1571  0000E1                     printf@fval:
  1572                           	opt stack 0
  1573                           
  1574                           ; 3 bytes @ 0x61
  1575  0000E1                     	ds	1
  1576  0000E2                     ??_initServo:
  1577                           
  1578                           ; 1 bytes @ 0x62
  1579  0000E2                     	ds	2
  1580  0000E4                     printf@val:
  1581                           	opt stack 0
  1582                           
  1583                           ; 4 bytes @ 0x64
  1584  0000E4                     	ds	2
  1585  0000E6                     initServo@i:
  1586                           	opt stack 0
  1587                           
  1588                           ; 2 bytes @ 0x66
  1589  0000E6                     	ds	2
  1590  0000E8                     printf@width:
  1591                           	opt stack 0
  1592                           
  1593                           ; 2 bytes @ 0x68
  1594  0000E8                     	ds	2
  1595  0000EA                     printf@flag:
  1596                           	opt stack 0
  1597                           
  1598                           ; 2 bytes @ 0x6A
  1599  0000EA                     	ds	2
  1600  0000EC                     printf@prec:
  1601                           	opt stack 0
  1602                           
  1603                           ; 2 bytes @ 0x6C
  1604  0000EC                     	ds	2
  1605  0000EE                     printf@c:
  1606                           	opt stack 0
  1607                           
  1608                           ; 1 bytes @ 0x6E
  1609  0000EE                     	ds	1
  1610  0000EF                     ??_sortBattery:
  1611  0000EF                     ??_showDateTime:
  1612  0000EF                     showMainMenu@k:
  1613                           	opt stack 0
  1614  0000EF                     showRunSelect@k:
  1615                           	opt stack 0
  1616  0000EF                     showRunMenu@key:
  1617                           	opt stack 0
  1618  0000EF                     showRunTime@run:
  1619                           	opt stack 0
  1620  0000EF                     showRunStats@run:
  1621                           	opt stack 0
  1622                           
  1623                           ; 2 bytes @ 0x6F
  1624  0000EF                     	ds	1
  1625  0000F0                     showRunMenu@k:
  1626                           	opt stack 0
  1627                           
  1628                           ; 1 bytes @ 0x70
  1629  0000F0                     	ds	1
  1630  0000F1                     ??_showRunTime:
  1631                           
  1632                           ; 1 bytes @ 0x71
  1633  0000F1                     	ds	2
  1634  0000F3                     ??_showInterface:
  1635                           
  1636                           ; 1 bytes @ 0x73
  1637  0000F3                     	ds	2
  1638                           tblptru	equ	0xFF8
  1639                           tblptrh	equ	0xFF7
  1640                           tblptrl	equ	0xFF6
  1641                           tablat	equ	0xFF5
  1642                           postinc0	equ	0xFEE
  1643                           wreg	equ	0xFE8
  1644                           postdec1	equ	0xFE5
  1645                           fsr1l	equ	0xFE1
  1646                           
  1647                           	psect	cstackCOMRAM
  1648  000001                     __pcstackCOMRAM:
  1649                           	opt stack 0
  1650  000001                     ?i2___awmod:
  1651                           	opt stack 0
  1652  000001                     keyPressedInterruptService@key:
  1653                           	opt stack 0
  1654  000001                     i2___awmod@dividend:
  1655                           	opt stack 0
  1656                           
  1657                           ; 2 bytes @ 0x0
  1658  000001                     	ds	2
  1659  000003                     i2___awmod@divisor:
  1660                           	opt stack 0
  1661                           
  1662                           ; 2 bytes @ 0x2
  1663  000003                     	ds	2
  1664  000005                     i2___awmod@counter:
  1665                           	opt stack 0
  1666                           
  1667                           ; 1 bytes @ 0x4
  1668  000005                     	ds	1
  1669  000006                     i2___awmod@sign:
  1670                           	opt stack 0
  1671                           
  1672                           ; 1 bytes @ 0x5
  1673  000006                     	ds	1
  1674  000007                     i2digitalWrite@pin:
  1675                           	opt stack 0
  1676  000007                     i2startTimer@timer:
  1677                           	opt stack 0
  1678                           
  1679                           ; 2 bytes @ 0x6
  1680  000007                     	ds	2
  1681  000009                     i2digitalWrite@val:
  1682                           	opt stack 0
  1683  000009                     i2startTimer@val:
  1684                           	opt stack 0
  1685                           
  1686                           ; 4 bytes @ 0x8
  1687  000009                     	ds	2
  1688  00000B                     ??i2_digitalWrite:
  1689                           
  1690                           ; 1 bytes @ 0xA
  1691  00000B                     	ds	2
  1692  00000D                     ??i2_startTimer:
  1693                           
  1694                           ; 1 bytes @ 0xC
  1695  00000D                     	ds	1
  1696  00000E                     i2digitalWrite@p:
  1697                           	opt stack 0
  1698                           
  1699                           ; 2 bytes @ 0xD
  1700  00000E                     	ds	2
  1701  000010                     ??_servoInterruptService:
  1702                           
  1703                           ; 1 bytes @ 0xF
  1704  000010                     	ds	4
  1705  000014                     ??_service:
  1706                           
  1707                           ; 1 bytes @ 0x13
  1708  000014                     	ds	14
  1709  000022                     service@key:
  1710                           	opt stack 0
  1711                           
  1712                           ; 1 bytes @ 0x21
  1713  000022                     	ds	1
  1714  000023                     ??_isdigit:
  1715  000023                     ??_I2C_Master_Wait:
  1716  000023                     ?_digitalRead:
  1717                           	opt stack 0
  1718  000023                     ?___awmod:
  1719                           	opt stack 0
  1720  000023                     ?___ftpack:
  1721                           	opt stack 0
  1722  000023                     ?___ftneg:
  1723                           	opt stack 0
  1724  000023                     ?_analogRead:
  1725                           	opt stack 0
  1726  000023                     ?__tdiv_to_l_:
  1727                           	opt stack 0
  1728  000023                     ?__div_to_l_:
  1729                           	opt stack 0
  1730  000023                     ?___almod:
  1731                           	opt stack 0
  1732  000023                     ?___lldiv:
  1733                           	opt stack 0
  1734  000023                     lcdNibble@temp:
  1735                           	opt stack 0
  1736  000023                     readKeypad@key:
  1737                           	opt stack 0
  1738  000023                     keyPressed@key:
  1739                           	opt stack 0
  1740  000023                     digitalRead@pin:
  1741                           	opt stack 0
  1742  000023                     digitalWrite@pin:
  1743                           	opt stack 0
  1744  000023                     analogRead@channel:
  1745                           	opt stack 0
  1746  000023                     initTimer@timer:
  1747                           	opt stack 0
  1748  000023                     startTimer@timer:
  1749                           	opt stack 0
  1750  000023                     ___awmod@dividend:
  1751                           	opt stack 0
  1752  000023                     __div_to_l_@f1:
  1753                           	opt stack 0
  1754  000023                     ___ftpack@arg:
  1755                           	opt stack 0
  1756  000023                     __tdiv_to_l_@f1:
  1757                           	opt stack 0
  1758  000023                     ___ftneg@f1:
  1759                           	opt stack 0
  1760  000023                     ___almod@dividend:
  1761                           	opt stack 0
  1762  000023                     ___lldiv@dividend:
  1763                           	opt stack 0
  1764                           
  1765                           ; 4 bytes @ 0x22
  1766  000023                     	ds	1
  1767  000024                     lcdNibble@data:
  1768                           	opt stack 0
  1769  000024                     I2C_Master_Read@a:
  1770                           	opt stack 0
  1771  000024                     _isdigit$1052:
  1772                           	opt stack 0
  1773  000024                     I2C_Master_Write@d:
  1774                           	opt stack 0
  1775                           
  1776                           ; 2 bytes @ 0x23
  1777  000024                     	ds	1
  1778  000025                     ??_initTimer:
  1779  000025                     ??_digitalRead:
  1780  000025                     ??_lcdInst:
  1781  000025                     I2C_Master_Read@temp:
  1782                           	opt stack 0
  1783  000025                     isdigit@c:
  1784                           	opt stack 0
  1785  000025                     digitalWrite@val:
  1786                           	opt stack 0
  1787  000025                     ___awmod@divisor:
  1788                           	opt stack 0
  1789  000025                     startTimer@val:
  1790                           	opt stack 0
  1791                           
  1792                           ; 4 bytes @ 0x24
  1793  000025                     	ds	1
  1794  000026                     ?_getTime:
  1795                           	opt stack 0
  1796  000026                     lcdInst@data:
  1797                           	opt stack 0
  1798  000026                     ___ftpack@exp:
  1799                           	opt stack 0
  1800  000026                     __div_to_l_@f2:
  1801                           	opt stack 0
  1802  000026                     __tdiv_to_l_@f2:
  1803                           	opt stack 0
  1804                           
  1805                           ; 3 bytes @ 0x25
  1806  000026                     	ds	1
  1807  000027                     ??_initLCD:
  1808  000027                     ??_digitalWrite:
  1809  000027                     ??_analogRead:
  1810  000027                     putch@data:
  1811                           	opt stack 0
  1812  000027                     ___awmod@counter:
  1813                           	opt stack 0
  1814  000027                     ___ftpack@sign:
  1815                           	opt stack 0
  1816  000027                     ___almod@divisor:
  1817                           	opt stack 0
  1818  000027                     ___lldiv@divisor:
  1819                           	opt stack 0
  1820                           
  1821                           ; 4 bytes @ 0x26
  1822  000027                     	ds	1
  1823  000028                     ??___ftpack:
  1824  000028                     ??_getTime:
  1825  000028                     ___awmod@sign:
  1826                           	opt stack 0
  1827                           
  1828                           ; 1 bytes @ 0x27
  1829  000028                     	ds	1
  1830  000029                     ??_startTimer:
  1831  000029                     ??__tdiv_to_l_:
  1832  000029                     ?___awdiv:
  1833                           	opt stack 0
  1834  000029                     ___awdiv@dividend:
  1835                           	opt stack 0
  1836  000029                     __div_to_l_@quot:
  1837                           	opt stack 0
  1838                           
  1839                           ; 4 bytes @ 0x28
  1840  000029                     	ds	1
  1841  00002A                     digitalWrite@p:
  1842                           	opt stack 0
  1843  00002A                     getTime@time:
  1844                           	opt stack 0
  1845                           
  1846                           ; 14 bytes @ 0x29
  1847  00002A                     	ds	1
  1848  00002B                     ?___altoft:
  1849                           	opt stack 0
  1850  00002B                     ?___awtoft:
  1851                           	opt stack 0
  1852  00002B                     ?___lltoft:
  1853                           	opt stack 0
  1854  00002B                     ___almod@counter:
  1855                           	opt stack 0
  1856  00002B                     ___awdiv@divisor:
  1857                           	opt stack 0
  1858  00002B                     ___awtoft@c:
  1859                           	opt stack 0
  1860  00002B                     ___altoft@c:
  1861                           	opt stack 0
  1862  00002B                     ___lldiv@quotient:
  1863                           	opt stack 0
  1864  00002B                     ___lltoft@c:
  1865                           	opt stack 0
  1866                           
  1867                           ; 4 bytes @ 0x2A
  1868  00002B                     	ds	1
  1869  00002C                     ___almod@sign:
  1870                           	opt stack 0
  1871  00002C                     __tdiv_to_l_@quot:
  1872                           	opt stack 0
  1873                           
  1874                           ; 4 bytes @ 0x2B
  1875  00002C                     	ds	1
  1876  00002D                     ?___aldiv:
  1877                           	opt stack 0
  1878  00002D                     ___awdiv@counter:
  1879                           	opt stack 0
  1880  00002D                     __div_to_l_@cntr:
  1881                           	opt stack 0
  1882  00002D                     ___aldiv@dividend:
  1883                           	opt stack 0
  1884                           
  1885                           ; 4 bytes @ 0x2C
  1886  00002D                     	ds	1
  1887  00002E                     ___awdiv@sign:
  1888                           	opt stack 0
  1889  00002E                     ___awtoft@sign:
  1890                           	opt stack 0
  1891  00002E                     __div_to_l_@exp1:
  1892                           	opt stack 0
  1893                           
  1894                           ; 1 bytes @ 0x2D
  1895  00002E                     	ds	1
  1896  00002F                     ??___altoft:
  1897  00002F                     ??___lltoft:
  1898  00002F                     ___lldiv@counter:
  1899                           	opt stack 0
  1900  00002F                     ___awdiv@quotient:
  1901                           	opt stack 0
  1902  00002F                     ___ftge@ff1:
  1903                           	opt stack 0
  1904                           
  1905                           ; 3 bytes @ 0x2E
  1906  00002F                     	ds	1
  1907  000030                     ?___llmod:
  1908                           	opt stack 0
  1909  000030                     __tdiv_to_l_@cntr:
  1910                           	opt stack 0
  1911  000030                     I2C_Master_Init@c:
  1912                           	opt stack 0
  1913  000030                     ___llmod@dividend:
  1914                           	opt stack 0
  1915                           
  1916                           ; 4 bytes @ 0x2F
  1917  000030                     	ds	1
  1918  000031                     ?___wmul:
  1919                           	opt stack 0
  1920  000031                     __tdiv_to_l_@exp1:
  1921                           	opt stack 0
  1922  000031                     ___wmul@multiplier:
  1923                           	opt stack 0
  1924  000031                     ___aldiv@divisor:
  1925                           	opt stack 0
  1926                           
  1927                           ; 4 bytes @ 0x30
  1928  000031                     	ds	1
  1929  000032                     ___ftge@ff2:
  1930                           	opt stack 0
  1931                           
  1932                           ; 3 bytes @ 0x31
  1933  000032                     	ds	1
  1934  000033                     ___altoft@exp:
  1935                           	opt stack 0
  1936  000033                     ___lltoft@exp:
  1937                           	opt stack 0
  1938  000033                     ___wmul@multiplicand:
  1939                           	opt stack 0
  1940                           
  1941                           ; 2 bytes @ 0x32
  1942  000033                     	ds	1
  1943  000034                     ??_I2C_Master_Init:
  1944  000034                     ___altoft@sign:
  1945                           	opt stack 0
  1946  000034                     ___llmod@divisor:
  1947                           	opt stack 0
  1948                           
  1949                           ; 4 bytes @ 0x33
  1950  000034                     	ds	1
  1951  000035                     ??___ftge:
  1952  000035                     ?___ftdiv:
  1953                           	opt stack 0
  1954  000035                     ___aldiv@counter:
  1955                           	opt stack 0
  1956  000035                     ___wmul@product:
  1957                           	opt stack 0
  1958  000035                     ___ftdiv@f1:
  1959                           	opt stack 0
  1960                           
  1961                           ; 3 bytes @ 0x34
  1962  000035                     	ds	1
  1963  000036                     ___aldiv@sign:
  1964                           	opt stack 0
  1965                           
  1966                           ; 1 bytes @ 0x35
  1967  000036                     	ds	1
  1968  000037                     ?_eepromRead:
  1969                           	opt stack 0
  1970  000037                     eepromRead@address:
  1971                           	opt stack 0
  1972  000037                     ___aldiv@quotient:
  1973                           	opt stack 0
  1974                           
  1975                           ; 4 bytes @ 0x36
  1976  000037                     	ds	1
  1977  000038                     getTime@i:
  1978                           	opt stack 0
  1979  000038                     ___llmod@counter:
  1980                           	opt stack 0
  1981  000038                     ___ftdiv@f2:
  1982                           	opt stack 0
  1983                           
  1984                           ; 3 bytes @ 0x37
  1985  000038                     	ds	3
  1986  00003B                     tblptru	equ	0xFF8
  1987                           tblptrh	equ	0xFF7
  1988                           tblptrl	equ	0xFF6
  1989                           tablat	equ	0xFF5
  1990                           postinc0	equ	0xFEE
  1991                           wreg	equ	0xFE8
  1992                           postdec1	equ	0xFE5
  1993                           fsr1l	equ	0xFE1
  1994                           
  1995                           ; 1 bytes @ 0x3A
  1996 ;;
  1997 ;;Main: autosize = 0, tempsize = 10, incstack = 0, save=0
  1998 ;;
  1999 ;; *************** function _main *****************
  2000 ;; Defined at:
  2001 ;;		line 118 in file "main.c"
  2002 ;; Parameters:    Size  Location     Type
  2003 ;;		None
  2004 ;; Auto vars:     Size  Location     Type
  2005 ;;  lastBatteryT    2   53[BANK1 ] int 
  2006 ;;  cylinderBack    2   47[BANK1 ] int 
  2007 ;;  cylinderForw    2   45[BANK1 ] int 
  2008 ;;  cylinderDur     2   43[BANK1 ] int 
  2009 ;;  cylinderStar    2   41[BANK1 ] int 
  2010 ;;  run            14   55[BANK1 ] int [7]
  2011 ;; Return value:  Size  Location     Type
  2012 ;;                  1    wreg      void 
  2013 ;; Registers used:
  2014 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2015 ;; Tracked objects:
  2016 ;;		On entry : 0/0
  2017 ;;		On exit  : 0/0
  2018 ;;		Unchanged: 0/0
  2019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2021 ;;      Locals:         0       0      28       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2022 ;;      Temps:          0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2023 ;;      Totals:         0       0      38       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2024 ;;Total ram usage:       38 bytes
  2025 ;; Hardware stack levels required when called:   10
  2026 ;; This function calls:
  2027 ;;		___aldiv
  2028 ;;		___almod
  2029 ;;		_digitalWrite
  2030 ;;		_initLCD
  2031 ;;		_initServo
  2032 ;;		_initTimer
  2033 ;;		_lcdClear
  2034 ;;		_lcdHome
  2035 ;;		_pinSetup
  2036 ;;		_printf
  2037 ;;		_saveNewRun
  2038 ;;		_showInterface
  2039 ;;		_showRunStats
  2040 ;;		_showRunTime
  2041 ;;		_sortBattery
  2042 ;;		_startTimer
  2043 ;; This function is called by:
  2044 ;;		Startup code after reset
  2045 ;; This function uses a non-reentrant model
  2046 ;;
  2047                           
  2048                           	psect	text0
  2049  00177C                     __ptext0:
  2050                           	opt stack 0
  2051  00177C                     _main:
  2052                           	opt stack 21
  2053                           
  2054                           ;main.c: 122: pinSetup();
  2055                           
  2056                           ;incstack = 0
  2057  00177C  EC8C  F01E         	call	_pinSetup	;wreg free
  2058                           
  2059                           ;main.c: 123: initLCD();
  2060  001780  EC69  F01E         	call	_initLCD	;wreg free
  2061  001784                     l7648:
  2062                           
  2063                           ;main.c: 126: showInterface();
  2064  001784  EC81  F017         	call	_showInterface	;wreg free
  2065                           
  2066                           ;main.c: 130: terminate = 0;
  2067  001788  0E00               	movlw	0
  2068  00178A  0101               	movlb	1	; () banked
  2069  00178C  6F64               	movwf	(_terminate+1)& (0+255),b
  2070  00178E  0E00               	movlw	0
  2071  001790  6F63               	movwf	_terminate& (0+255),b
  2072                           
  2073                           ; BSR set to: 1
  2074                           ;main.c: 131: time = 0;
  2075  001792  0E00               	movlw	0
  2076  001794  0101               	movlb	1	; () banked
  2077  001796  6F55               	movwf	_time& (0+255),b
  2078  001798  0E00               	movlw	0
  2079  00179A  6F56               	movwf	(_time+1)& (0+255),b
  2080  00179C  0E00               	movlw	0
  2081  00179E  6F57               	movwf	(_time+2)& (0+255),b
  2082  0017A0  0E00               	movlw	0
  2083  0017A2  6F58               	movwf	(_time+3)& (0+255),b
  2084                           
  2085                           ; BSR set to: 1
  2086                           ;main.c: 132: initTimer(1);
  2087  0017A4  0E00               	movlw	0
  2088  0017A6  6E24               	movwf	initTimer@timer+1,c
  2089  0017A8  0E01               	movlw	1
  2090  0017AA  6E23               	movwf	initTimer@timer,c
  2091  0017AC  EC44  F01E         	call	_initTimer	;wreg free
  2092                           
  2093                           ;main.c: 133: startTimer(1,0);
  2094  0017B0  0E00               	movlw	0
  2095  0017B2  6E24               	movwf	startTimer@timer+1,c
  2096  0017B4  0E01               	movlw	1
  2097  0017B6  6E23               	movwf	startTimer@timer,c
  2098  0017B8  0E00               	movlw	0
  2099  0017BA  6E25               	movwf	startTimer@val,c
  2100  0017BC  0E00               	movlw	0
  2101  0017BE  6E26               	movwf	startTimer@val+1,c
  2102  0017C0  0E00               	movlw	0
  2103  0017C2  6E27               	movwf	startTimer@val+2,c
  2104  0017C4  0E00               	movlw	0
  2105  0017C6  6E28               	movwf	startTimer@val+3,c
  2106  0017C8  ECF8  F01D         	call	_startTimer	;wreg free
  2107                           
  2108                           ;main.c: 136: digitalWrite(cylinderMotor, 1);
  2109  0017CC  0E73               	movlw	low _cylinderMotor
  2110  0017CE  6E23               	movwf	digitalWrite@pin,c
  2111  0017D0  0E01               	movlw	high _cylinderMotor
  2112  0017D2  6E24               	movwf	digitalWrite@pin+1,c
  2113  0017D4  0E00               	movlw	0
  2114  0017D6  6E26               	movwf	digitalWrite@val+1,c
  2115  0017D8  0E01               	movlw	1
  2116  0017DA  6E25               	movwf	digitalWrite@val,c
  2117  0017DC  EC4E  F018         	call	_digitalWrite	;wreg free
  2118                           
  2119                           ;main.c: 137: initServo(conveyorServo, 130);
  2120  0017E0  0E6F               	movlw	low _conveyorServo
  2121  0017E2  0100               	movlb	0	; () banked
  2122  0017E4  6FDE               	movwf	initServo@motor& (0+255),b
  2123  0017E6  0E01               	movlw	high _conveyorServo
  2124  0017E8  0100               	movlb	0	; () banked
  2125  0017EA  6FDF               	movwf	(initServo@motor+1)& (0+255),b
  2126  0017EC  0E00               	movlw	0
  2127  0017EE  0100               	movlb	0	; () banked
  2128  0017F0  6FE1               	movwf	(initServo@angle+1)& (0+255),b
  2129  0017F2  0E82               	movlw	130
  2130  0017F4  6FE0               	movwf	initServo@angle& (0+255),b
  2131  0017F6  ECA6  F016         	call	_initServo	;wreg free
  2132                           
  2133                           ;main.c: 138: initServo(padServo, padAngle_NEUTRAL);
  2134  0017FA  0E7B               	movlw	low _padServo
  2135  0017FC  0100               	movlb	0	; () banked
  2136  0017FE  6FDE               	movwf	initServo@motor& (0+255),b
  2137  001800  0E01               	movlw	high _padServo
  2138  001802  0100               	movlb	0	; () banked
  2139  001804  6FDF               	movwf	(initServo@motor+1)& (0+255),b
  2140  001806  C169  F0E0         	movff	_padAngle_NEUTRAL,initServo@angle
  2141  00180A  C16A  F0E1         	movff	_padAngle_NEUTRAL+1,initServo@angle+1
  2142  00180E  ECA6  F016         	call	_initServo	;wreg free
  2143                           
  2144                           ;main.c: 139: initServo(redirectingServo, redirectAngle_AA);
  2145  001812  0E7F               	movlw	low _redirectingServo
  2146  001814  0100               	movlb	0	; () banked
  2147  001816  6FDE               	movwf	initServo@motor& (0+255),b
  2148  001818  0E01               	movlw	high _redirectingServo
  2149  00181A  0100               	movlb	0	; () banked
  2150  00181C  6FDF               	movwf	(initServo@motor+1)& (0+255),b
  2151  00181E  C16B  F0E0         	movff	_redirectAngle_AA,initServo@angle
  2152  001822  C16C  F0E1         	movff	_redirectAngle_AA+1,initServo@angle+1
  2153  001826  ECA6  F016         	call	_initServo	;wreg free
  2154  00182A                     l7666:
  2155                           
  2156                           ;main.c: 143: lcdClear();
  2157  00182A  ECD7  F01F         	call	_lcdClear	;wreg free
  2158                           
  2159                           ;main.c: 144: printf("running");
  2160  00182E  0EF6               	movlw	low STR_2
  2161  001830  0100               	movlb	0	; () banked
  2162  001832  6FBD               	movwf	printf@f& (0+255),b
  2163  001834  0EFF               	movlw	high STR_2
  2164  001836  0100               	movlb	0	; () banked
  2165  001838  6FBE               	movwf	(printf@f+1)& (0+255),b
  2166  00183A  EC09  F000         	call	_printf	;wreg free
  2167                           
  2168                           ;main.c: 146: int lastBatteryTime = time;
  2169  00183E  C155  F135         	movff	_time,main@lastBatteryTime
  2170  001842  C156  F136         	movff	_time+1,main@lastBatteryTime+1
  2171                           
  2172                           ;main.c: 148: int cylinderStart = time;
  2173  001846  C155  F129         	movff	_time,main@cylinderStart
  2174  00184A  C156  F12A         	movff	_time+1,main@cylinderStart+1
  2175                           
  2176                           ;main.c: 149: int cylinderDur = 0;
  2177  00184E  0E00               	movlw	0
  2178  001850  0101               	movlb	1	; () banked
  2179  001852  6F2C               	movwf	(main@cylinderDur+1)& (0+255),b
  2180  001854  0E00               	movlw	0
  2181  001856  6F2B               	movwf	main@cylinderDur& (0+255),b
  2182                           
  2183                           ; BSR set to: 1
  2184                           ;main.c: 150: int cylinderForward = 70;
  2185  001858  0E00               	movlw	0
  2186  00185A  0101               	movlb	1	; () banked
  2187  00185C  6F2E               	movwf	(main@cylinderForward+1)& (0+255),b
  2188  00185E  0E46               	movlw	70
  2189  001860  6F2D               	movwf	main@cylinderForward& (0+255),b
  2190                           
  2191                           ; BSR set to: 1
  2192                           ;main.c: 151: int cylinderBackward = 30;
  2193  001862  0E00               	movlw	0
  2194  001864  0101               	movlb	1	; () banked
  2195  001866  6F30               	movwf	(main@cylinderBackward+1)& (0+255),b
  2196  001868  0E1E               	movlw	30
  2197  00186A  6F2F               	movwf	main@cylinderBackward& (0+255),b
  2198                           
  2199                           ;main.c: 153: while(!batteryDetected && !terminate){
  2200  00186C  D0D9               	goto	l7688
  2201  00186E                     l7678:
  2202                           
  2203                           ; BSR set to: 1
  2204                           ;main.c: 155: lcdHome();
  2205  00186E  ECD3  F01F         	call	_lcdHome	;wreg free
  2206                           
  2207                           ;main.c: 156: printf("time %02ld:%02ld.%01ld",time/600,(time%600)/10,(time%600)%10);
  2208  001872  0E58               	movlw	88
  2209  001874  6E27               	movwf	___almod@divisor,c
  2210  001876  0E02               	movlw	2
  2211  001878  6E28               	movwf	___almod@divisor+1,c
  2212  00187A  0E00               	movlw	0
  2213  00187C  6E29               	movwf	___almod@divisor+2,c
  2214  00187E  0E00               	movlw	0
  2215  001880  6E2A               	movwf	___almod@divisor+3,c
  2216  001882  C155  F023         	movff	_time,___almod@dividend
  2217  001886  C156  F024         	movff	_time+1,___almod@dividend+1
  2218  00188A  C157  F025         	movff	_time+2,___almod@dividend+2
  2219  00188E  C158  F026         	movff	_time+3,___almod@dividend+3
  2220  001892  EC6D  F019         	call	___almod	;wreg free
  2221  001896  C023  F131         	movff	?___almod,_main$1416
  2222  00189A  C024  F132         	movff	?___almod+1,_main$1416+1
  2223  00189E  C025  F133         	movff	?___almod+2,_main$1416+2
  2224  0018A2  C026  F134         	movff	?___almod+3,_main$1416+3
  2225                           
  2226                           ;main.c: 156: printf("time %02ld:%02ld.%01ld",time/600,(time%600)/10,(time%600)%10);
  2227  0018A6  0EBC               	movlw	low STR_3
  2228  0018A8  0100               	movlb	0	; () banked
  2229  0018AA  6FBD               	movwf	printf@f& (0+255),b
  2230  0018AC  0EFE               	movlw	high STR_3
  2231  0018AE  0100               	movlb	0	; () banked
  2232  0018B0  6FBE               	movwf	(printf@f+1)& (0+255),b
  2233  0018B2  C155  F02D         	movff	_time,___aldiv@dividend
  2234  0018B6  C156  F02E         	movff	_time+1,___aldiv@dividend+1
  2235  0018BA  C157  F02F         	movff	_time+2,___aldiv@dividend+2
  2236  0018BE  C158  F030         	movff	_time+3,___aldiv@dividend+3
  2237  0018C2  0E58               	movlw	88
  2238  0018C4  6E31               	movwf	___aldiv@divisor,c
  2239  0018C6  0E02               	movlw	2
  2240  0018C8  6E32               	movwf	___aldiv@divisor+1,c
  2241  0018CA  0E00               	movlw	0
  2242  0018CC  6E33               	movwf	___aldiv@divisor+2,c
  2243  0018CE  0E00               	movlw	0
  2244  0018D0  6E34               	movwf	___aldiv@divisor+3,c
  2245  0018D2  ECE8  F017         	call	___aldiv	;wreg free
  2246  0018D6  C02D  F0BF         	movff	?___aldiv,?_printf+2
  2247  0018DA  C02E  F0C0         	movff	?___aldiv+1,?_printf+3
  2248  0018DE  C02F  F0C1         	movff	?___aldiv+2,?_printf+4
  2249  0018E2  C030  F0C2         	movff	?___aldiv+3,?_printf+5
  2250  0018E6  0E58               	movlw	88
  2251  0018E8  6E27               	movwf	___almod@divisor,c
  2252  0018EA  0E02               	movlw	2
  2253  0018EC  6E28               	movwf	___almod@divisor+1,c
  2254  0018EE  0E00               	movlw	0
  2255  0018F0  6E29               	movwf	___almod@divisor+2,c
  2256  0018F2  0E00               	movlw	0
  2257  0018F4  6E2A               	movwf	___almod@divisor+3,c
  2258  0018F6  C155  F023         	movff	_time,___almod@dividend
  2259  0018FA  C156  F024         	movff	_time+1,___almod@dividend+1
  2260  0018FE  C157  F025         	movff	_time+2,___almod@dividend+2
  2261  001902  C158  F026         	movff	_time+3,___almod@dividend+3
  2262  001906  EC6D  F019         	call	___almod	;wreg free
  2263  00190A  C023  F02D         	movff	?___almod,___aldiv@dividend
  2264  00190E  C024  F02E         	movff	?___almod+1,___aldiv@dividend+1
  2265  001912  C025  F02F         	movff	?___almod+2,___aldiv@dividend+2
  2266  001916  C026  F030         	movff	?___almod+3,___aldiv@dividend+3
  2267  00191A  0E0A               	movlw	10
  2268  00191C  6E31               	movwf	___aldiv@divisor,c
  2269  00191E  0E00               	movlw	0
  2270  001920  6E32               	movwf	___aldiv@divisor+1,c
  2271  001922  0E00               	movlw	0
  2272  001924  6E33               	movwf	___aldiv@divisor+2,c
  2273  001926  0E00               	movlw	0
  2274  001928  6E34               	movwf	___aldiv@divisor+3,c
  2275  00192A  ECE8  F017         	call	___aldiv	;wreg free
  2276  00192E  C02D  F0C3         	movff	?___aldiv,?_printf+6
  2277  001932  C02E  F0C4         	movff	?___aldiv+1,?_printf+7
  2278  001936  C02F  F0C5         	movff	?___aldiv+2,?_printf+8
  2279  00193A  C030  F0C6         	movff	?___aldiv+3,?_printf+9
  2280  00193E  C131  F023         	movff	_main$1416,___almod@dividend
  2281  001942  C132  F024         	movff	_main$1416+1,___almod@dividend+1
  2282  001946  C133  F025         	movff	_main$1416+2,___almod@dividend+2
  2283  00194A  C134  F026         	movff	_main$1416+3,___almod@dividend+3
  2284  00194E  0E0A               	movlw	10
  2285  001950  6E27               	movwf	___almod@divisor,c
  2286  001952  0E00               	movlw	0
  2287  001954  6E28               	movwf	___almod@divisor+1,c
  2288  001956  0E00               	movlw	0
  2289  001958  6E29               	movwf	___almod@divisor+2,c
  2290  00195A  0E00               	movlw	0
  2291  00195C  6E2A               	movwf	___almod@divisor+3,c
  2292  00195E  EC6D  F019         	call	___almod	;wreg free
  2293  001962  C023  F0C7         	movff	?___almod,?_printf+10
  2294  001966  C024  F0C8         	movff	?___almod+1,?_printf+11
  2295  00196A  C025  F0C9         	movff	?___almod+2,?_printf+12
  2296  00196E  C026  F0CA         	movff	?___almod+3,?_printf+13
  2297  001972  EC09  F000         	call	_printf	;wreg free
  2298                           
  2299                           ;main.c: 157: _delay((unsigned long)((77)*(10000000/4000.0)));
  2300  001976  0EFA               	movlw	250
  2301  001978  0101               	movlb	1	; () banked
  2302  00197A  6F1F               	movwf	??_main& (0+255),b
  2303  00197C  0EFF               	movlw	255
  2304  00197E                     u8077:
  2305  00197E  2EE8               	decfsz	wreg,f,c
  2306  001980  D7FE               	bra	u8077
  2307  001982  2F1F               	decfsz	??_main& (0+255),f,b
  2308  001984  D7FC               	bra	u8077
  2309                           
  2310                           ;main.c: 169: if(time - lastBatteryTime > stoppingTime)
  2311  001986  C135  F11F         	movff	main@lastBatteryTime,??_main
  2312  00198A  C136  F120         	movff	main@lastBatteryTime+1,??_main+1
  2313  00198E  0E00               	movlw	0
  2314  001990  0101               	movlb	1	; () banked
  2315  001992  BF20               	btfsc	(??_main+1)& (0+255),7,b
  2316  001994  0EFF               	movlw	255
  2317  001996  6F21               	movwf	(??_main+2)& (0+255),b
  2318  001998  6F22               	movwf	(??_main+3)& (0+255),b
  2319  00199A  0101               	movlb	1	; () banked
  2320  00199C  1F1F               	comf	??_main& (0+255),f,b
  2321  00199E  1F20               	comf	(??_main+1)& (0+255),f,b
  2322  0019A0  1F21               	comf	(??_main+2)& (0+255),f,b
  2323  0019A2  1F22               	comf	(??_main+3)& (0+255),f,b
  2324  0019A4  2B1F               	incf	??_main& (0+255),f,b
  2325  0019A6  0E00               	movlw	0
  2326  0019A8  2320               	addwfc	(??_main+1)& (0+255),f,b
  2327  0019AA  2321               	addwfc	(??_main+2)& (0+255),f,b
  2328  0019AC  2322               	addwfc	(??_main+3)& (0+255),f,b
  2329  0019AE  0101               	movlb	1	; () banked
  2330  0019B0  5155               	movf	_time& (0+255),w,b
  2331  0019B2  0101               	movlb	1	; () banked
  2332  0019B4  251F               	addwf	??_main& (0+255),w,b
  2333  0019B6  0101               	movlb	1	; () banked
  2334  0019B8  6F23               	movwf	(??_main+4)& (0+255),b
  2335  0019BA  0101               	movlb	1	; () banked
  2336  0019BC  5156               	movf	(_time+1)& (0+255),w,b
  2337  0019BE  0101               	movlb	1	; () banked
  2338  0019C0  2120               	addwfc	(??_main+1)& (0+255),w,b
  2339  0019C2  0101               	movlb	1	; () banked
  2340  0019C4  6F24               	movwf	(??_main+5)& (0+255),b
  2341  0019C6  0101               	movlb	1	; () banked
  2342  0019C8  5157               	movf	(_time+2)& (0+255),w,b
  2343  0019CA  0101               	movlb	1	; () banked
  2344  0019CC  2121               	addwfc	(??_main+2)& (0+255),w,b
  2345  0019CE  0101               	movlb	1	; () banked
  2346  0019D0  6F25               	movwf	(??_main+6)& (0+255),b
  2347  0019D2  0101               	movlb	1	; () banked
  2348  0019D4  5158               	movf	(_time+3)& (0+255),w,b
  2349  0019D6  0101               	movlb	1	; () banked
  2350  0019D8  2122               	addwfc	(??_main+3)& (0+255),w,b
  2351  0019DA  0101               	movlb	1	; () banked
  2352  0019DC  6F26               	movwf	(??_main+7)& (0+255),b
  2353  0019DE  0E00               	movlw	0
  2354  0019E0  0101               	movlb	1	; () banked
  2355  0019E2  BF6E               	btfsc	(_stoppingTime+1)& (0+255),7,b
  2356  0019E4  0EFF               	movlw	255
  2357  0019E6  0101               	movlb	1	; () banked
  2358  0019E8  6F28               	movwf	(??_main+9)& (0+255),b
  2359  0019EA  0A80               	xorlw	128
  2360  0019EC  6F27               	movwf	(??_main+8)& (0+255),b
  2361  0019EE  0101               	movlb	1	; () banked
  2362  0019F0  5123               	movf	(??_main+4)& (0+255),w,b
  2363  0019F2  0101               	movlb	1	; () banked
  2364  0019F4  5D6D               	subwf	_stoppingTime& (0+255),w,b
  2365  0019F6  0101               	movlb	1	; () banked
  2366  0019F8  5124               	movf	(??_main+5)& (0+255),w,b
  2367  0019FA  0101               	movlb	1	; () banked
  2368  0019FC  596E               	subwfb	(_stoppingTime+1)& (0+255),w,b
  2369  0019FE  0101               	movlb	1	; () banked
  2370  001A00  5125               	movf	(??_main+6)& (0+255),w,b
  2371  001A02  0101               	movlb	1	; () banked
  2372  001A04  5928               	subwfb	(??_main+9)& (0+255),w,b
  2373  001A06  0101               	movlb	1	; () banked
  2374  001A08  5126               	movf	(??_main+7)& (0+255),w,b
  2375  001A0A  0A80               	xorlw	128
  2376  001A0C  0101               	movlb	1	; () banked
  2377  001A0E  5927               	subwfb	(??_main+8)& (0+255),w,b
  2378  001A10  B0D8               	btfsc	status,0,c
  2379  001A12  D006               	goto	l7688
  2380                           
  2381                           ; BSR set to: 1
  2382                           ;main.c: 170: {
  2383                           ;main.c: 171: terminate = 1;
  2384  001A14  0E00               	movlw	0
  2385  001A16  0101               	movlb	1	; () banked
  2386  001A18  6F64               	movwf	(_terminate+1)& (0+255),b
  2387  001A1A  0E01               	movlw	1
  2388  001A1C  6F63               	movwf	_terminate& (0+255),b
  2389                           
  2390                           ;main.c: 172: break;
  2391  001A1E  D00C               	goto	l7692
  2392  001A20                     l7688:
  2393                           
  2394                           ; BSR set to: 1
  2395  001A20  0101               	movlb	1	; () banked
  2396  001A22  5159               	movf	_batteryDetected& (0+255),w,b
  2397  001A24  0101               	movlb	1	; () banked
  2398  001A26  115A               	iorwf	(_batteryDetected+1)& (0+255),w,b
  2399  001A28  A4D8               	btfss	status,2,c
  2400  001A2A  D006               	goto	l7692
  2401                           
  2402                           ; BSR set to: 1
  2403  001A2C  0101               	movlb	1	; () banked
  2404  001A2E  5163               	movf	_terminate& (0+255),w,b
  2405  001A30  0101               	movlb	1	; () banked
  2406  001A32  1164               	iorwf	(_terminate+1)& (0+255),w,b
  2407  001A34  B4D8               	btfsc	status,2,c
  2408  001A36  D71B               	goto	l7678
  2409  001A38                     l7692:
  2410                           
  2411                           ; BSR set to: 1
  2412                           ;main.c: 173: }
  2413                           ;main.c: 174: }
  2414                           ;main.c: 176: if(terminate)break;
  2415  001A38  0101               	movlb	1	; () banked
  2416  001A3A  5163               	movf	_terminate& (0+255),w,b
  2417  001A3C  0101               	movlb	1	; () banked
  2418  001A3E  1164               	iorwf	(_terminate+1)& (0+255),w,b
  2419  001A40  A4D8               	btfss	status,2,c
  2420  001A42  D00C               	goto	l7702
  2421                           
  2422                           ; BSR set to: 1
  2423                           ;main.c: 178: sortBattery();
  2424                           
  2425                           ; BSR set to: 1
  2426                           
  2427                           ; BSR set to: 1
  2428  001A44  EC05  F007         	call	_sortBattery	;wreg free
  2429                           
  2430                           ;main.c: 181: lastBatteryTime = time;
  2431  001A48  C155  F135         	movff	_time,main@lastBatteryTime
  2432  001A4C  C156  F136         	movff	_time+1,main@lastBatteryTime+1
  2433                           
  2434                           ;main.c: 182: batteryDetected = 0;
  2435  001A50  0E00               	movlw	0
  2436  001A52  0101               	movlb	1	; () banked
  2437  001A54  6F5A               	movwf	(_batteryDetected+1)& (0+255),b
  2438  001A56  0E00               	movlw	0
  2439  001A58  6F59               	movwf	_batteryDetected& (0+255),b
  2440                           
  2441                           ; BSR set to: 1
  2442  001A5A  D6E7               	goto	l7666
  2443  001A5C                     l7702:
  2444                           
  2445                           ; BSR set to: 1
  2446                           ;main.c: 183: }
  2447                           ;main.c: 186: digitalWrite(cylinderMotor, 0);
  2448  001A5C  0E73               	movlw	low _cylinderMotor
  2449  001A5E  6E23               	movwf	digitalWrite@pin,c
  2450  001A60  0E01               	movlw	high _cylinderMotor
  2451  001A62  6E24               	movwf	digitalWrite@pin+1,c
  2452  001A64  0E00               	movlw	0
  2453  001A66  6E26               	movwf	digitalWrite@val+1,c
  2454  001A68  0E00               	movlw	0
  2455  001A6A  6E25               	movwf	digitalWrite@val,c
  2456  001A6C  EC4E  F018         	call	_digitalWrite	;wreg free
  2457                           
  2458                           ;main.c: 189: int run[7];
  2459                           ;main.c: 190: run[0] = time>>8;
  2460  001A70  C156  F137         	movff	_time+1,main@run
  2461  001A74  C157  F138         	movff	_time+2,main@run+1
  2462                           
  2463                           ;main.c: 191: run[1] = time&0xff;
  2464  001A78  0101               	movlb	1	; () banked
  2465  001A7A  5155               	movf	_time& (0+255),w,b
  2466  001A7C  0101               	movlb	1	; () banked
  2467  001A7E  6F39               	movwf	(main@run+2)& (0+255),b
  2468  001A80  6B3A               	clrf	(main@run+3)& (0+255),b
  2469                           
  2470                           ; BSR set to: 1
  2471                           ;main.c: 192: run[2] = n_AA;
  2472  001A82  C15D  F13B         	movff	_n_AA,main@run+4
  2473  001A86  C15E  F13C         	movff	_n_AA+1,main@run+5
  2474                           
  2475                           ; BSR set to: 1
  2476                           ;main.c: 193: run[3] = n_9V;
  2477  001A8A  C15B  F13D         	movff	_n_9V,main@run+6
  2478  001A8E  C15C  F13E         	movff	_n_9V+1,main@run+7
  2479                           
  2480                           ; BSR set to: 1
  2481                           ;main.c: 194: run[4] = n_C;
  2482  001A92  C15F  F13F         	movff	_n_C,main@run+8
  2483  001A96  C160  F140         	movff	_n_C+1,main@run+9
  2484                           
  2485                           ; BSR set to: 1
  2486                           ;main.c: 195: run[5] = n_OTHER;
  2487  001A9A  C161  F141         	movff	_n_OTHER,main@run+10
  2488  001A9E  C162  F142         	movff	_n_OTHER+1,main@run+11
  2489                           
  2490                           ; BSR set to: 1
  2491                           ;main.c: 197: saveNewRun(run);
  2492  001AA2  0E37               	movlw	low main@run
  2493  001AA4  0100               	movlb	0	; () banked
  2494  001AA6  6F89               	movwf	saveNewRun@data& (0+255),b
  2495  001AA8  0E01               	movlw	high main@run
  2496  001AAA  0100               	movlb	0	; () banked
  2497  001AAC  6F8A               	movwf	(saveNewRun@data+1)& (0+255),b
  2498  001AAE  EC35  F016         	call	_saveNewRun	;wreg free
  2499                           
  2500                           ;main.c: 198: showRunTime(run);
  2501  001AB2  0E37               	movlw	low main@run
  2502  001AB4  0100               	movlb	0	; () banked
  2503  001AB6  6FEF               	movwf	showRunTime@run& (0+255),b
  2504  001AB8  0E01               	movlw	high main@run
  2505  001ABA  0100               	movlb	0	; () banked
  2506  001ABC  6FF0               	movwf	(showRunTime@run+1)& (0+255),b
  2507  001ABE  ECCF  F00F         	call	_showRunTime	;wreg free
  2508                           
  2509                           ;main.c: 199: showRunStats(run);
  2510  001AC2  0E37               	movlw	low main@run
  2511  001AC4  0100               	movlb	0	; () banked
  2512  001AC6  6FEF               	movwf	showRunStats@run& (0+255),b
  2513  001AC8  0E01               	movlw	high main@run
  2514  001ACA  0100               	movlb	0	; () banked
  2515  001ACC  6FF0               	movwf	(showRunStats@run+1)& (0+255),b
  2516  001ACE  ECC3  F019         	call	_showRunStats	;wreg free
  2517  001AD2  D658               	goto	l7648
  2518  001AD4                     l163:
  2519  001AD4  D7FF               	goto	l163
  2520  001AD6                     __end_of_main:
  2521                           	opt stack 0
  2522                           tblptru	equ	0xFF8
  2523                           tblptrh	equ	0xFF7
  2524                           tblptrl	equ	0xFF6
  2525                           tablat	equ	0xFF5
  2526                           postinc0	equ	0xFEE
  2527                           wreg	equ	0xFE8
  2528                           postdec1	equ	0xFE5
  2529                           fsr1l	equ	0xFE1
  2530                           status	equ	0xFD8
  2531                           
  2532 ;; *************** function _sortBattery *****************
  2533 ;; Defined at:
  2534 ;;		line 207 in file "main.c"
  2535 ;; Parameters:    Size  Location     Type
  2536 ;;		None
  2537 ;; Auto vars:     Size  Location     Type
  2538 ;;  V               3   22[BANK1 ] float 
  2539 ;;  i               2   18[BANK1 ] int 
  2540 ;;  i               3   25[BANK1 ] float 
  2541 ;;  V               3   28[BANK1 ] float 
  2542 ;;  V_max           3   15[BANK1 ] float 
  2543 ;;  resolution      3   12[BANK1 ] float 
  2544 ;;  Vcc             3    9[BANK1 ] float 
  2545 ;;  V_float         3    2[BANK1 ] float 
  2546 ;;  targetAngle     2   20[BANK1 ] int 
  2547 ;;  signal          2    7[BANK1 ] int 
  2548 ;;  pos_v_counte    2    5[BANK1 ] int 
  2549 ;; Return value:  Size  Location     Type
  2550 ;;                  1    wreg      void 
  2551 ;; Registers used:
  2552 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2553 ;; Tracked objects:
  2554 ;;		On entry : 0/0
  2555 ;;		On exit  : 0/0
  2556 ;;		Unchanged: 0/0
  2557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2559 ;;      Locals:         0       0      31       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2560 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2561 ;;      Totals:         0       2      31       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2562 ;;Total ram usage:       33 bytes
  2563 ;; Hardware stack levels used:    1
  2564 ;; Hardware stack levels required when called:    8
  2565 ;; This function calls:
  2566 ;;		___altoft
  2567 ;;		___awtoft
  2568 ;;		___ftdiv
  2569 ;;		___ftge
  2570 ;;		___ftmul
  2571 ;;		___ftsub
  2572 ;;		___fttol
  2573 ;;		_analogRead
  2574 ;;		_digitalRead
  2575 ;;		_digitalWrite
  2576 ;;		_lcdClear
  2577 ;;		_printf
  2578 ;;		_readKeypad
  2579 ;;		_setAngle
  2580 ;; This function is called by:
  2581 ;;		_main
  2582 ;; This function uses a non-reentrant model
  2583 ;;
  2584                           
  2585                           	psect	text1
  2586  000E0A                     __ptext1:
  2587                           	opt stack 0
  2588  000E0A                     _sortBattery:
  2589                           	opt stack 22
  2590                           
  2591                           ;main.c: 210: setAngle(conveyorServo, 90);
  2592                           
  2593                           ;incstack = 0
  2594  000E0A  0E6F               	movlw	low _conveyorServo
  2595  000E0C  0100               	movlb	0	; () banked
  2596  000E0E  6FD4               	movwf	setAngle@motor& (0+255),b
  2597  000E10  0E01               	movlw	high _conveyorServo
  2598  000E12  0100               	movlb	0	; () banked
  2599  000E14  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2600  000E16  0E00               	movlw	0
  2601  000E18  0100               	movlb	0	; () banked
  2602  000E1A  6FD7               	movwf	(setAngle@angle+1)& (0+255),b
  2603  000E1C  0E5A               	movlw	90
  2604  000E1E  6FD6               	movwf	setAngle@angle& (0+255),b
  2605  000E20  EC17  F017         	call	_setAngle	;wreg free
  2606                           
  2607                           ;main.c: 211: digitalWrite(cylinderMotor, 0);
  2608  000E24  0E73               	movlw	low _cylinderMotor
  2609  000E26  6E23               	movwf	digitalWrite@pin,c
  2610  000E28  0E01               	movlw	high _cylinderMotor
  2611  000E2A  6E24               	movwf	digitalWrite@pin+1,c
  2612  000E2C  0E00               	movlw	0
  2613  000E2E  6E26               	movwf	digitalWrite@val+1,c
  2614  000E30  0E00               	movlw	0
  2615  000E32  6E25               	movwf	digitalWrite@val,c
  2616  000E34  EC4E  F018         	call	_digitalWrite	;wreg free
  2617                           
  2618                           ;main.c: 214: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2619  000E38  0E0D               	movlw	13
  2620  000E3A  0100               	movlb	0	; () banked
  2621  000E3C  6FF0               	movwf	(??_sortBattery+1)& (0+255),b
  2622  000E3E  0EAF               	movlw	175
  2623  000E40  0100               	movlb	0	; () banked
  2624  000E42  6FEF               	movwf	??_sortBattery& (0+255),b
  2625  000E44  0EB6               	movlw	182
  2626  000E46                     u8087:
  2627  000E46  2EE8               	decfsz	wreg,f,c
  2628  000E48  D7FE               	bra	u8087
  2629  000E4A  2FEF               	decfsz	??_sortBattery& (0+255),f,b
  2630  000E4C  D7FC               	bra	u8087
  2631  000E4E  2FF0               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2632  000E50  D7FA               	bra	u8087
  2633  000E52  F000               	nop	
  2634                           
  2635                           ;main.c: 216: float Vcc = 5.00;
  2636  000E54  0E00               	movlw	0
  2637  000E56  0101               	movlb	1	; () banked
  2638  000E58  6F09               	movwf	sortBattery@Vcc& (0+255),b
  2639  000E5A  0EA0               	movlw	160
  2640  000E5C  0101               	movlb	1	; () banked
  2641  000E5E  6F0A               	movwf	(sortBattery@Vcc+1)& (0+255),b
  2642  000E60  0E40               	movlw	64
  2643  000E62  0101               	movlb	1	; () banked
  2644  000E64  6F0B               	movwf	(sortBattery@Vcc+2)& (0+255),b
  2645                           
  2646                           ; BSR set to: 1
  2647                           ;main.c: 217: float resolution = (1<<10) - 1;
  2648  000E66  0EC0               	movlw	192
  2649  000E68  0101               	movlb	1	; () banked
  2650  000E6A  6F0C               	movwf	sortBattery@resolution& (0+255),b
  2651  000E6C  0E7F               	movlw	127
  2652  000E6E  0101               	movlb	1	; () banked
  2653  000E70  6F0D               	movwf	(sortBattery@resolution+1)& (0+255),b
  2654  000E72  0E44               	movlw	68
  2655  000E74  0101               	movlb	1	; () banked
  2656  000E76  6F0E               	movwf	(sortBattery@resolution+2)& (0+255),b
  2657                           
  2658                           ; BSR set to: 1
  2659                           ;main.c: 218: float V_max = 0;
  2660  000E78  0E00               	movlw	0
  2661  000E7A  0101               	movlb	1	; () banked
  2662  000E7C  6F0F               	movwf	sortBattery@V_max& (0+255),b
  2663  000E7E  0E00               	movlw	0
  2664  000E80  0101               	movlb	1	; () banked
  2665  000E82  6F10               	movwf	(sortBattery@V_max+1)& (0+255),b
  2666  000E84  0E00               	movlw	0
  2667  000E86  0101               	movlb	1	; () banked
  2668  000E88  6F11               	movwf	(sortBattery@V_max+2)& (0+255),b
  2669                           
  2670                           ; BSR set to: 1
  2671                           ;main.c: 219: float V_float = 0;
  2672  000E8A  0E00               	movlw	0
  2673  000E8C  0101               	movlb	1	; () banked
  2674  000E8E  6F02               	movwf	sortBattery@V_float& (0+255),b
  2675  000E90  0E00               	movlw	0
  2676  000E92  0101               	movlb	1	; () banked
  2677  000E94  6F03               	movwf	(sortBattery@V_float+1)& (0+255),b
  2678  000E96  0E00               	movlw	0
  2679  000E98  0101               	movlb	1	; () banked
  2680  000E9A  6F04               	movwf	(sortBattery@V_float+2)& (0+255),b
  2681                           
  2682                           ; BSR set to: 1
  2683                           ;main.c: 220: int pos_v_counter = 1;
  2684  000E9C  0E00               	movlw	0
  2685  000E9E  0101               	movlb	1	; () banked
  2686  000EA0  6F06               	movwf	(sortBattery@pos_v_counter+1)& (0+255),b
  2687  000EA2  0E01               	movlw	1
  2688  000EA4  6F05               	movwf	sortBattery@pos_v_counter& (0+255),b
  2689                           
  2690                           ; BSR set to: 1
  2691                           ;main.c: 221: int signal = 0;
  2692  000EA6  0E00               	movlw	0
  2693  000EA8  0101               	movlb	1	; () banked
  2694  000EAA  6F08               	movwf	(sortBattery@signal+1)& (0+255),b
  2695  000EAC  0E00               	movlw	0
  2696  000EAE  6F07               	movwf	sortBattery@signal& (0+255),b
  2697                           
  2698                           ; BSR set to: 1
  2699                           ;main.c: 225: for(float i = (float)padAngle_NEUTRAL; i > padAngle_CLOSE; i -= 0.1) {
  2700  000EB0  C169  F02B         	movff	_padAngle_NEUTRAL,___awtoft@c
  2701  000EB4  C16A  F02C         	movff	_padAngle_NEUTRAL+1,___awtoft@c+1
  2702  000EB8  ECC8  F01E         	call	___awtoft	;wreg free
  2703  000EBC  C02B  F119         	movff	?___awtoft,sortBattery@i
  2704  000EC0  C02C  F11A         	movff	?___awtoft+1,sortBattery@i+1
  2705  000EC4  C02D  F11B         	movff	?___awtoft+2,sortBattery@i+2
  2706  000EC8  D0F6               	goto	l7550
  2707  000ECA                     l7524:
  2708                           
  2709                           ;main.c: 226: setAngle(padServo, i);
  2710  000ECA  C119  F0AE         	movff	sortBattery@i,___fttol@f1
  2711  000ECE  C11A  F0AF         	movff	sortBattery@i+1,___fttol@f1+1
  2712  000ED2  C11B  F0B0         	movff	sortBattery@i+2,___fttol@f1+2
  2713  000ED6  ECE6  F011         	call	___fttol	;wreg free
  2714  000EDA  C0AE  F100         	movff	?___fttol,_sortBattery$1417
  2715  000EDE  C0AF  F101         	movff	?___fttol+1,_sortBattery$1417+1
  2716                           
  2717                           ;main.c: 226: setAngle(padServo, i);
  2718  000EE2  0E7B               	movlw	low _padServo
  2719  000EE4  0100               	movlb	0	; () banked
  2720  000EE6  6FD4               	movwf	setAngle@motor& (0+255),b
  2721  000EE8  0E01               	movlw	high _padServo
  2722  000EEA  0100               	movlb	0	; () banked
  2723  000EEC  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2724  000EEE  C100  F0D6         	movff	_sortBattery$1417,setAngle@angle
  2725  000EF2  C101  F0D7         	movff	_sortBattery$1417+1,setAngle@angle+1
  2726  000EF6  EC17  F017         	call	_setAngle	;wreg free
  2727                           
  2728                           ;main.c: 227: _delay((unsigned long)((100)*(10000000/4000000.0)));
  2729  000EFA  0E53               	movlw	83
  2730  000EFC                     u8097:
  2731  000EFC  2EE8               	decfsz	wreg,f,c
  2732  000EFE  D7FE               	bra	u8097
  2733  000F00  F000               	nop	
  2734                           
  2735                           ;main.c: 228: digitalWrite(AA_float, 1);
  2736  000F02  0E4A               	movlw	low _AA_float
  2737  000F04  6E23               	movwf	digitalWrite@pin,c
  2738  000F06  0E00               	movlw	high _AA_float
  2739  000F08  6E24               	movwf	digitalWrite@pin+1,c
  2740  000F0A  0E00               	movlw	0
  2741  000F0C  6E26               	movwf	digitalWrite@val+1,c
  2742  000F0E  0E01               	movlw	1
  2743  000F10  6E25               	movwf	digitalWrite@val,c
  2744  000F12  EC4E  F018         	call	_digitalWrite	;wreg free
  2745                           
  2746                           ;main.c: 229: float V = analogRead(padPin3[1]) / resolution * Vcc;
  2747  000F16  C10C  F038         	movff	sortBattery@resolution,___ftdiv@f2
  2748  000F1A  C10D  F039         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2749  000F1E  C10E  F03A         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2750  000F22  C054  F023         	movff	_padPin3+2,analogRead@channel
  2751  000F26  C055  F024         	movff	_padPin3+3,analogRead@channel+1
  2752  000F2A  ECAC  F01E         	call	_analogRead	;wreg free
  2753  000F2E  C023  F02B         	movff	?_analogRead,___altoft@c
  2754  000F32  C024  F02C         	movff	?_analogRead+1,___altoft@c+1
  2755  000F36  C025  F02D         	movff	?_analogRead+2,___altoft@c+2
  2756  000F3A  C026  F02E         	movff	?_analogRead+3,___altoft@c+3
  2757  000F3E  ECB2  F01B         	call	___altoft	;wreg free
  2758  000F42  C02B  F035         	movff	?___altoft,___ftdiv@f1
  2759  000F46  C02C  F036         	movff	?___altoft+1,___ftdiv@f1+1
  2760  000F4A  C02D  F037         	movff	?___altoft+2,___ftdiv@f1+2
  2761  000F4E  EC3D  F014         	call	___ftdiv	;wreg free
  2762  000F52  C035  F089         	movff	?___ftdiv,___ftmul@f1
  2763  000F56  C036  F08A         	movff	?___ftdiv+1,___ftmul@f1+1
  2764  000F5A  C037  F08B         	movff	?___ftdiv+2,___ftmul@f1+2
  2765  000F5E  C109  F08C         	movff	sortBattery@Vcc,___ftmul@f2
  2766  000F62  C10A  F08D         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2767  000F66  C10B  F08E         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2768  000F6A  EC8B  F010         	call	___ftmul	;wreg free
  2769  000F6E  C089  F116         	movff	?___ftmul,sortBattery@V
  2770  000F72  C08A  F117         	movff	?___ftmul+1,sortBattery@V+1
  2771  000F76  C08B  F118         	movff	?___ftmul+2,sortBattery@V+2
  2772                           
  2773                           ;main.c: 231: if(V > 0.1)pos_v_counter++;
  2774  000F7A  0ECD               	movlw	205
  2775  000F7C  6E2F               	movwf	___ftge@ff1,c
  2776  000F7E  0ECC               	movlw	204
  2777  000F80  6E30               	movwf	___ftge@ff1+1,c
  2778  000F82  0E3D               	movlw	61
  2779  000F84  6E31               	movwf	___ftge@ff1+2,c
  2780  000F86  C116  F032         	movff	sortBattery@V,___ftge@ff2
  2781  000F8A  C117  F033         	movff	sortBattery@V+1,___ftge@ff2+1
  2782  000F8E  C118  F034         	movff	sortBattery@V+2,___ftge@ff2+2
  2783  000F92  EC60  F01A         	call	___ftge	;wreg free
  2784  000F96  B0D8               	btfsc	status,0,c
  2785  000F98  D003               	goto	l7538
  2786  000F9A  0101               	movlb	1	; () banked
  2787  000F9C  4B05               	infsnz	sortBattery@pos_v_counter& (0+255),f,b
  2788  000F9E  2B06               	incf	(sortBattery@pos_v_counter+1)& (0+255),f,b
  2789  000FA0                     l7538:
  2790                           
  2791                           ;main.c: 233: if(V > V_max) {
  2792  000FA0  C10F  F02F         	movff	sortBattery@V_max,___ftge@ff1
  2793  000FA4  C110  F030         	movff	sortBattery@V_max+1,___ftge@ff1+1
  2794  000FA8  C111  F031         	movff	sortBattery@V_max+2,___ftge@ff1+2
  2795  000FAC  C116  F032         	movff	sortBattery@V,___ftge@ff2
  2796  000FB0  C117  F033         	movff	sortBattery@V+1,___ftge@ff2+1
  2797  000FB4  C118  F034         	movff	sortBattery@V+2,___ftge@ff2+2
  2798  000FB8  EC60  F01A         	call	___ftge	;wreg free
  2799  000FBC  B0D8               	btfsc	status,0,c
  2800  000FBE  D064               	goto	l7548
  2801                           
  2802                           ;main.c: 234: signal = digitalRead(padPin1)<<1;
  2803  000FC0  0E4E               	movlw	low _padPin1
  2804  000FC2  6E23               	movwf	digitalRead@pin,c
  2805  000FC4  0E00               	movlw	high _padPin1
  2806  000FC6  6E24               	movwf	digitalRead@pin+1,c
  2807  000FC8  EC4B  F015         	call	_digitalRead	;wreg free
  2808  000FCC  90D8               	bcf	status,0,c
  2809  000FCE  3423               	rlcf	?_digitalRead,w,c
  2810  000FD0  0101               	movlb	1	; () banked
  2811  000FD2  6F07               	movwf	sortBattery@signal& (0+255),b
  2812  000FD4  3424               	rlcf	?_digitalRead+1,w,c
  2813  000FD6  0101               	movlb	1	; () banked
  2814  000FD8  6F08               	movwf	(sortBattery@signal+1)& (0+255),b
  2815                           
  2816                           ;main.c: 235: signal |= digitalRead(padPin2)<<0;
  2817  000FDA  0E77               	movlw	low _padPin2
  2818  000FDC  6E23               	movwf	digitalRead@pin,c
  2819  000FDE  0E01               	movlw	high _padPin2
  2820  000FE0  6E24               	movwf	digitalRead@pin+1,c
  2821  000FE2  EC4B  F015         	call	_digitalRead	;wreg free
  2822  000FE6  5023               	movf	?_digitalRead,w,c
  2823  000FE8  0101               	movlb	1	; () banked
  2824  000FEA  1307               	iorwf	sortBattery@signal& (0+255),f,b
  2825  000FEC  5024               	movf	?_digitalRead+1,w,c
  2826  000FEE  0101               	movlb	1	; () banked
  2827  000FF0  1308               	iorwf	(sortBattery@signal+1)& (0+255),f,b
  2828                           
  2829                           ; BSR set to: 1
  2830                           ;main.c: 237: V_max = V;
  2831  000FF2  C116  F10F         	movff	sortBattery@V,sortBattery@V_max
  2832  000FF6  C117  F110         	movff	sortBattery@V+1,sortBattery@V_max+1
  2833  000FFA  C118  F111         	movff	sortBattery@V+2,sortBattery@V_max+2
  2834                           
  2835                           ;main.c: 240: digitalWrite(AA_float, 0);
  2836  000FFE  0E4A               	movlw	low _AA_float
  2837  001000  6E23               	movwf	digitalWrite@pin,c
  2838  001002  0E00               	movlw	high _AA_float
  2839  001004  6E24               	movwf	digitalWrite@pin+1,c
  2840  001006  0E00               	movlw	0
  2841  001008  6E26               	movwf	digitalWrite@val+1,c
  2842  00100A  0E00               	movlw	0
  2843  00100C  6E25               	movwf	digitalWrite@val,c
  2844  00100E  EC4E  F018         	call	_digitalWrite	;wreg free
  2845                           
  2846                           ;main.c: 241: _delay((unsigned long)((1)*(10000000/4000.0)));
  2847  001012  0E04               	movlw	4
  2848  001014  0100               	movlb	0	; () banked
  2849  001016  6FEF               	movwf	??_sortBattery& (0+255),b
  2850  001018  0E3D               	movlw	61
  2851  00101A                     u8107:
  2852  00101A  2EE8               	decfsz	wreg,f,c
  2853  00101C  D7FE               	bra	u8107
  2854  00101E  2FEF               	decfsz	??_sortBattery& (0+255),f,b
  2855  001020  D7FC               	bra	u8107
  2856  001022  D000               	nop2	
  2857                           
  2858                           ;main.c: 242: V_float = analogRead(padPin3[1]) / resolution * Vcc;
  2859  001024  C10C  F038         	movff	sortBattery@resolution,___ftdiv@f2
  2860  001028  C10D  F039         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2861  00102C  C10E  F03A         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2862  001030  C054  F023         	movff	_padPin3+2,analogRead@channel
  2863  001034  C055  F024         	movff	_padPin3+3,analogRead@channel+1
  2864  001038  ECAC  F01E         	call	_analogRead	;wreg free
  2865  00103C  C023  F02B         	movff	?_analogRead,___altoft@c
  2866  001040  C024  F02C         	movff	?_analogRead+1,___altoft@c+1
  2867  001044  C025  F02D         	movff	?_analogRead+2,___altoft@c+2
  2868  001048  C026  F02E         	movff	?_analogRead+3,___altoft@c+3
  2869  00104C  ECB2  F01B         	call	___altoft	;wreg free
  2870  001050  C02B  F035         	movff	?___altoft,___ftdiv@f1
  2871  001054  C02C  F036         	movff	?___altoft+1,___ftdiv@f1+1
  2872  001058  C02D  F037         	movff	?___altoft+2,___ftdiv@f1+2
  2873  00105C  EC3D  F014         	call	___ftdiv	;wreg free
  2874  001060  C035  F089         	movff	?___ftdiv,___ftmul@f1
  2875  001064  C036  F08A         	movff	?___ftdiv+1,___ftmul@f1+1
  2876  001068  C037  F08B         	movff	?___ftdiv+2,___ftmul@f1+2
  2877  00106C  C109  F08C         	movff	sortBattery@Vcc,___ftmul@f2
  2878  001070  C10A  F08D         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2879  001074  C10B  F08E         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2880  001078  EC8B  F010         	call	___ftmul	;wreg free
  2881  00107C  C089  F102         	movff	?___ftmul,sortBattery@V_float
  2882  001080  C08A  F103         	movff	?___ftmul+1,sortBattery@V_float+1
  2883  001084  C08B  F104         	movff	?___ftmul+2,sortBattery@V_float+2
  2884  001088                     l7548:
  2885  001088  C119  F0AE         	movff	sortBattery@i,___ftsub@f1
  2886  00108C  C11A  F0AF         	movff	sortBattery@i+1,___ftsub@f1+1
  2887  001090  C11B  F0B0         	movff	sortBattery@i+2,___ftsub@f1+2
  2888  001094  0ECD               	movlw	205
  2889  001096  0100               	movlb	0	; () banked
  2890  001098  6FB1               	movwf	___ftsub@f2& (0+255),b
  2891  00109A  0ECC               	movlw	204
  2892  00109C  0100               	movlb	0	; () banked
  2893  00109E  6FB2               	movwf	(___ftsub@f2+1)& (0+255),b
  2894  0010A0  0E3D               	movlw	61
  2895  0010A2  0100               	movlb	0	; () banked
  2896  0010A4  6FB3               	movwf	(___ftsub@f2+2)& (0+255),b
  2897  0010A6  ECD2  F01D         	call	___ftsub	;wreg free
  2898  0010AA  C0AE  F119         	movff	?___ftsub,sortBattery@i
  2899  0010AE  C0AF  F11A         	movff	?___ftsub+1,sortBattery@i+1
  2900  0010B2  C0B0  F11B         	movff	?___ftsub+2,sortBattery@i+2
  2901  0010B6                     l7550:
  2902  0010B6  C0F5  F02B         	movff	_padAngle_CLOSE,___awtoft@c
  2903  0010BA  C0F6  F02C         	movff	_padAngle_CLOSE+1,___awtoft@c+1
  2904  0010BE  ECC8  F01E         	call	___awtoft	;wreg free
  2905  0010C2  C02B  F02F         	movff	?___awtoft,___ftge@ff1
  2906  0010C6  C02C  F030         	movff	?___awtoft+1,___ftge@ff1+1
  2907  0010CA  C02D  F031         	movff	?___awtoft+2,___ftge@ff1+2
  2908  0010CE  C119  F032         	movff	sortBattery@i,___ftge@ff2
  2909  0010D2  C11A  F033         	movff	sortBattery@i+1,___ftge@ff2+1
  2910  0010D6  C11B  F034         	movff	sortBattery@i+2,___ftge@ff2+2
  2911  0010DA  EC60  F01A         	call	___ftge	;wreg free
  2912  0010DE  A0D8               	btfss	status,0,c
  2913  0010E0  D6F4               	goto	l7524
  2914                           
  2915                           ;main.c: 244: }
  2916                           ;main.c: 245: }
  2917                           ;main.c: 247: int targetAngle;
  2918                           ;main.c: 248: float V = V_max;
  2919  0010E2  C10F  F11C         	movff	sortBattery@V_max,sortBattery@V_244
  2920  0010E6  C110  F11D         	movff	sortBattery@V_max+1,sortBattery@V_244+1
  2921  0010EA  C111  F11E         	movff	sortBattery@V_max+2,sortBattery@V_244+2
  2922                           
  2923                           ;main.c: 250: lcdClear();
  2924  0010EE  ECD7  F01F         	call	_lcdClear	;wreg free
  2925                           
  2926                           ;main.c: 251: printf("V: %.3f, N: %d\n",V,pos_v_counter);
  2927  0010F2  0EA9               	movlw	low STR_4
  2928  0010F4  0100               	movlb	0	; () banked
  2929  0010F6  6FBD               	movwf	printf@f& (0+255),b
  2930  0010F8  0EFF               	movlw	high STR_4
  2931  0010FA  0100               	movlb	0	; () banked
  2932  0010FC  6FBE               	movwf	(printf@f+1)& (0+255),b
  2933  0010FE  C11C  F0BF         	movff	sortBattery@V_244,?_printf+2
  2934  001102  C11D  F0C0         	movff	sortBattery@V_244+1,?_printf+3
  2935  001106  C11E  F0C1         	movff	sortBattery@V_244+2,?_printf+4
  2936  00110A  C105  F0C2         	movff	sortBattery@pos_v_counter,?_printf+5
  2937  00110E  C106  F0C3         	movff	sortBattery@pos_v_counter+1,?_printf+6
  2938  001112  EC09  F000         	call	_printf	;wreg free
  2939                           
  2940                           ;main.c: 256: switch(signal){
  2941  001116  D09A               	goto	l7590
  2942  001118                     l7556:
  2943                           
  2944                           ;main.c: 258: if(V_float < 0.1){
  2945  001118  C102  F02F         	movff	sortBattery@V_float,___ftge@ff1
  2946  00111C  C103  F030         	movff	sortBattery@V_float+1,___ftge@ff1+1
  2947  001120  C104  F031         	movff	sortBattery@V_float+2,___ftge@ff1+2
  2948  001124  0ECD               	movlw	205
  2949  001126  6E32               	movwf	___ftge@ff2,c
  2950  001128  0ECC               	movlw	204
  2951  00112A  6E33               	movwf	___ftge@ff2+1,c
  2952  00112C  0E3D               	movlw	61
  2953  00112E  6E34               	movwf	___ftge@ff2+2,c
  2954  001130  EC60  F01A         	call	___ftge	;wreg free
  2955  001134  B0D8               	btfsc	status,0,c
  2956  001136  D02E               	goto	l7568
  2957                           
  2958                           ;main.c: 259: if(V > V_LIM_AA){ targetAngle = redirectAngle_AA; n_AA+=1;}
  2959  001138  C03E  F02F         	movff	_V_LIM_AA,___ftge@ff1
  2960  00113C  C03F  F030         	movff	_V_LIM_AA+1,___ftge@ff1+1
  2961  001140  C040  F031         	movff	_V_LIM_AA+2,___ftge@ff1+2
  2962  001144  C11C  F032         	movff	sortBattery@V_244,___ftge@ff2
  2963  001148  C11D  F033         	movff	sortBattery@V_244+1,___ftge@ff2+1
  2964  00114C  C11E  F034         	movff	sortBattery@V_244+2,___ftge@ff2+2
  2965  001150  EC60  F01A         	call	___ftge	;wreg free
  2966  001154  B0D8               	btfsc	status,0,c
  2967  001156  D008               	goto	l177
  2968  001158  C16B  F114         	movff	_redirectAngle_AA,sortBattery@targetAngle
  2969  00115C  C16C  F115         	movff	_redirectAngle_AA+1,sortBattery@targetAngle+1
  2970  001160  0101               	movlb	1	; () banked
  2971  001162  4B5D               	infsnz	_n_AA& (0+255),f,b
  2972  001164  2B5E               	incf	(_n_AA+1)& (0+255),f,b
  2973  001166  D007               	goto	l7566
  2974  001168                     l177:
  2975                           
  2976                           ;main.c: 260: else { targetAngle = redirectAngle_OTHER; n_OTHER+=1;}
  2977  001168  C0F9  F114         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  2978  00116C  C0FA  F115         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  2979  001170  0101               	movlb	1	; () banked
  2980  001172  4B61               	infsnz	_n_OTHER& (0+255),f,b
  2981  001174  2B62               	incf	(_n_OTHER+1)& (0+255),f,b
  2982  001176                     l7566:
  2983                           
  2984                           ; BSR set to: 1
  2985                           ;main.c: 261: printf("AA lim: %f",V_LIM_AA);
  2986  001176  0ECF               	movlw	low STR_5
  2987  001178  0100               	movlb	0	; () banked
  2988  00117A  6FBD               	movwf	printf@f& (0+255),b
  2989  00117C  0EFF               	movlw	high STR_5
  2990  00117E  0100               	movlb	0	; () banked
  2991  001180  6FBE               	movwf	(printf@f+1)& (0+255),b
  2992  001182  C03E  F0BF         	movff	_V_LIM_AA,?_printf+2
  2993  001186  C03F  F0C0         	movff	_V_LIM_AA+1,?_printf+3
  2994  00118A  C040  F0C1         	movff	_V_LIM_AA+2,?_printf+4
  2995  00118E  EC09  F000         	call	_printf	;wreg free
  2996                           
  2997                           ;main.c: 262: break;
  2998  001192  D070               	goto	l7592
  2999  001194                     l7568:
  3000                           
  3001                           ;main.c: 266: if(V > V_LIM_9V) {targetAngle = redirectAngle_9V; n_9V+=1;}
  3002  001194  C03B  F02F         	movff	_V_LIM_9V,___ftge@ff1
  3003  001198  C03C  F030         	movff	_V_LIM_9V+1,___ftge@ff1+1
  3004  00119C  C03D  F031         	movff	_V_LIM_9V+2,___ftge@ff1+2
  3005  0011A0  C11C  F032         	movff	sortBattery@V_244,___ftge@ff2
  3006  0011A4  C11D  F033         	movff	sortBattery@V_244+1,___ftge@ff2+1
  3007  0011A8  C11E  F034         	movff	sortBattery@V_244+2,___ftge@ff2+2
  3008  0011AC  EC60  F01A         	call	___ftge	;wreg free
  3009  0011B0  B0D8               	btfsc	status,0,c
  3010  0011B2  D008               	goto	l181
  3011  0011B4  C048  F114         	movff	_redirectAngle_9V,sortBattery@targetAngle
  3012  0011B8  C049  F115         	movff	_redirectAngle_9V+1,sortBattery@targetAngle+1
  3013  0011BC  0101               	movlb	1	; () banked
  3014  0011BE  4B5B               	infsnz	_n_9V& (0+255),f,b
  3015  0011C0  2B5C               	incf	(_n_9V+1)& (0+255),f,b
  3016  0011C2  D007               	goto	l7576
  3017  0011C4                     l181:
  3018                           
  3019                           ;main.c: 267: else {targetAngle = redirectAngle_OTHER; n_OTHER+=1;}
  3020  0011C4  C0F9  F114         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  3021  0011C8  C0FA  F115         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  3022  0011CC  0101               	movlb	1	; () banked
  3023  0011CE  4B61               	infsnz	_n_OTHER& (0+255),f,b
  3024  0011D0  2B62               	incf	(_n_OTHER+1)& (0+255),f,b
  3025  0011D2                     l7576:
  3026                           
  3027                           ; BSR set to: 1
  3028                           ;main.c: 268: printf("9V lim: %f",V_LIM_9V);
  3029  0011D2  0EDA               	movlw	low STR_6
  3030  0011D4  0100               	movlb	0	; () banked
  3031  0011D6  6FBD               	movwf	printf@f& (0+255),b
  3032  0011D8  0EFF               	movlw	high STR_6
  3033  0011DA  0100               	movlb	0	; () banked
  3034  0011DC  6FBE               	movwf	(printf@f+1)& (0+255),b
  3035  0011DE  C03B  F0BF         	movff	_V_LIM_9V,?_printf+2
  3036  0011E2  C03C  F0C0         	movff	_V_LIM_9V+1,?_printf+3
  3037  0011E6  C03D  F0C1         	movff	_V_LIM_9V+2,?_printf+4
  3038  0011EA  EC09  F000         	call	_printf	;wreg free
  3039                           
  3040                           ;main.c: 269: break;
  3041  0011EE  D042               	goto	l7592
  3042  0011F0                     l7578:
  3043                           
  3044                           ;main.c: 271: if(V > V_LIM_C) {targetAngle = redirectAngle_C; n_C+=1;}
  3045  0011F0  C041  F02F         	movff	_V_LIM_C,___ftge@ff1
  3046  0011F4  C042  F030         	movff	_V_LIM_C+1,___ftge@ff1+1
  3047  0011F8  C043  F031         	movff	_V_LIM_C+2,___ftge@ff1+2
  3048  0011FC  C11C  F032         	movff	sortBattery@V_244,___ftge@ff2
  3049  001200  C11D  F033         	movff	sortBattery@V_244+1,___ftge@ff2+1
  3050  001204  C11E  F034         	movff	sortBattery@V_244+2,___ftge@ff2+2
  3051  001208  EC60  F01A         	call	___ftge	;wreg free
  3052  00120C  B0D8               	btfsc	status,0,c
  3053  00120E  D008               	goto	l184
  3054  001210  C0F7  F114         	movff	_redirectAngle_C,sortBattery@targetAngle
  3055  001214  C0F8  F115         	movff	_redirectAngle_C+1,sortBattery@targetAngle+1
  3056  001218  0101               	movlb	1	; () banked
  3057  00121A  4B5F               	infsnz	_n_C& (0+255),f,b
  3058  00121C  2B60               	incf	(_n_C+1)& (0+255),f,b
  3059  00121E  D007               	goto	l7586
  3060  001220                     l184:
  3061                           
  3062                           ;main.c: 272: else {targetAngle = redirectAngle_OTHER; n_OTHER+=1;}
  3063  001220  C0F9  F114         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  3064  001224  C0FA  F115         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  3065  001228  0101               	movlb	1	; () banked
  3066  00122A  4B61               	infsnz	_n_OTHER& (0+255),f,b
  3067  00122C  2B62               	incf	(_n_OTHER+1)& (0+255),f,b
  3068  00122E                     l7586:
  3069                           
  3070                           ; BSR set to: 1
  3071                           ;main.c: 273: printf("C  lim: %f",V_LIM_C);
  3072  00122E  0EC4               	movlw	low STR_7
  3073  001230  0100               	movlb	0	; () banked
  3074  001232  6FBD               	movwf	printf@f& (0+255),b
  3075  001234  0EFF               	movlw	high STR_7
  3076  001236  0100               	movlb	0	; () banked
  3077  001238  6FBE               	movwf	(printf@f+1)& (0+255),b
  3078  00123A  C041  F0BF         	movff	_V_LIM_C,?_printf+2
  3079  00123E  C042  F0C0         	movff	_V_LIM_C+1,?_printf+3
  3080  001242  C043  F0C1         	movff	_V_LIM_C+2,?_printf+4
  3081  001246  EC09  F000         	call	_printf	;wreg free
  3082                           
  3083                           ;main.c: 275: }
  3084                           
  3085                           ;main.c: 274: break;
  3086  00124A  D014               	goto	l7592
  3087  00124C                     l7590:
  3088  00124C  C107  F0EF         	movff	sortBattery@signal,??_sortBattery
  3089  001250  C108  F0F0         	movff	sortBattery@signal+1,??_sortBattery+1
  3090                           
  3091                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3092                           ; Switch size 1, requested type "space"
  3093                           ; Number of cases is 1, Range of values is 0 to 0
  3094                           ; switch strategies available:
  3095                           ; Name         Instructions Cycles
  3096                           ; simple_byte            4     3 (average)
  3097                           ;	Chosen strategy is simple_byte
  3098  001254  0100               	movlb	0	; () banked
  3099  001256  51F0               	movf	(??_sortBattery+1)& (0+255),w,b
  3100  001258  0A00               	xorlw	0	; case 0
  3101  00125A  A4D8               	btfss	status,2,c
  3102  00125C  D00B               	goto	l7592
  3103                           
  3104                           ; BSR set to: 0
  3105                           ; Switch size 1, requested type "space"
  3106                           ; Number of cases is 3, Range of values is 0 to 2
  3107                           ; switch strategies available:
  3108                           ; Name         Instructions Cycles
  3109                           ; simple_byte           10     6 (average)
  3110                           ;	Chosen strategy is simple_byte
  3111  00125E  0100               	movlb	0	; () banked
  3112  001260  51EF               	movf	??_sortBattery& (0+255),w,b
  3113  001262  0A00               	xorlw	0	; case 0
  3114  001264  B4D8               	btfsc	status,2,c
  3115  001266  D758               	goto	l7556
  3116  001268  0A01               	xorlw	1	; case 1
  3117  00126A  B4D8               	btfsc	status,2,c
  3118  00126C  D7C1               	goto	l7578
  3119  00126E  0A03               	xorlw	3	; case 2
  3120  001270  B4D8               	btfsc	status,2,c
  3121  001272  D790               	goto	l7568
  3122  001274                     l7592:
  3123                           
  3124                           ;main.c: 278: readKeypad();
  3125  001274  ECFC  F01E         	call	_readKeypad	;wreg free
  3126                           
  3127                           ;main.c: 279: setAngle(redirectingServo, targetAngle);
  3128  001278  0E7F               	movlw	low _redirectingServo
  3129  00127A  0100               	movlb	0	; () banked
  3130  00127C  6FD4               	movwf	setAngle@motor& (0+255),b
  3131  00127E  0E01               	movlw	high _redirectingServo
  3132  001280  0100               	movlb	0	; () banked
  3133  001282  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  3134  001284  C114  F0D6         	movff	sortBattery@targetAngle,setAngle@angle
  3135  001288  C115  F0D7         	movff	sortBattery@targetAngle+1,setAngle@angle+1
  3136  00128C  EC17  F017         	call	_setAngle	;wreg free
  3137                           
  3138                           ;main.c: 280: _delay((unsigned long)((500)*(10000000/4000.0)));
  3139  001290  0E07               	movlw	7
  3140  001292  0100               	movlb	0	; () banked
  3141  001294  6FF0               	movwf	(??_sortBattery+1)& (0+255),b
  3142  001296  0E58               	movlw	88
  3143  001298  0100               	movlb	0	; () banked
  3144  00129A  6FEF               	movwf	??_sortBattery& (0+255),b
  3145  00129C  0E59               	movlw	89
  3146  00129E                     u8117:
  3147  00129E  2EE8               	decfsz	wreg,f,c
  3148  0012A0  D7FE               	bra	u8117
  3149  0012A2  2FEF               	decfsz	??_sortBattery& (0+255),f,b
  3150  0012A4  D7FC               	bra	u8117
  3151  0012A6  2FF0               	decfsz	(??_sortBattery+1)& (0+255),f,b
  3152  0012A8  D7FA               	bra	u8117
  3153  0012AA  D000               	nop2	
  3154                           
  3155                           ;main.c: 284: for(int i = padAngle_CLOSE; i < padAngle_OPEN; i++) {
  3156  0012AC  C0F5  F112         	movff	_padAngle_CLOSE,sortBattery@i_249
  3157  0012B0  C0F6  F113         	movff	_padAngle_CLOSE+1,sortBattery@i_249+1
  3158  0012B4  D018               	goto	l7606
  3159  0012B6                     l7600:
  3160                           
  3161                           ;main.c: 285: setAngle(padServo, i);
  3162  0012B6  0E7B               	movlw	low _padServo
  3163  0012B8  0100               	movlb	0	; () banked
  3164  0012BA  6FD4               	movwf	setAngle@motor& (0+255),b
  3165  0012BC  0E01               	movlw	high _padServo
  3166  0012BE  0100               	movlb	0	; () banked
  3167  0012C0  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  3168  0012C2  C112  F0D6         	movff	sortBattery@i_249,setAngle@angle
  3169  0012C6  C113  F0D7         	movff	sortBattery@i_249+1,setAngle@angle+1
  3170  0012CA  EC17  F017         	call	_setAngle	;wreg free
  3171                           
  3172                           ;main.c: 286: _delay((unsigned long)((3)*(10000000/4000.0)));
  3173  0012CE  0E0A               	movlw	10
  3174  0012D0  0100               	movlb	0	; () banked
  3175  0012D2  6FEF               	movwf	??_sortBattery& (0+255),b
  3176  0012D4  0EBC               	movlw	188
  3177  0012D6                     u8127:
  3178  0012D6  2EE8               	decfsz	wreg,f,c
  3179  0012D8  D7FE               	bra	u8127
  3180  0012DA  2FEF               	decfsz	??_sortBattery& (0+255),f,b
  3181  0012DC  D7FC               	bra	u8127
  3182  0012DE  F000               	nop	
  3183  0012E0  0101               	movlb	1	; () banked
  3184  0012E2  4B12               	infsnz	sortBattery@i_249& (0+255),f,b
  3185  0012E4  2B13               	incf	(sortBattery@i_249+1)& (0+255),f,b
  3186  0012E6                     l7606:
  3187  0012E6  5046               	movf	_padAngle_OPEN,w,c
  3188  0012E8  0101               	movlb	1	; () banked
  3189  0012EA  5D12               	subwf	sortBattery@i_249& (0+255),w,b
  3190  0012EC  0101               	movlb	1	; () banked
  3191  0012EE  5113               	movf	(sortBattery@i_249+1)& (0+255),w,b
  3192  0012F0  0A80               	xorlw	128
  3193  0012F2  0100               	movlb	0	; () banked
  3194  0012F4  6FEF               	movwf	??_sortBattery& (0+255),b
  3195  0012F6  5047               	movf	_padAngle_OPEN+1,w,c
  3196  0012F8  0A80               	xorlw	128
  3197  0012FA  0100               	movlb	0	; () banked
  3198  0012FC  59EF               	subwfb	??_sortBattery& (0+255),w,b
  3199  0012FE  A0D8               	btfss	status,0,c
  3200  001300  D7DA               	goto	l7600
  3201                           
  3202                           ; BSR set to: 0
  3203                           ;main.c: 287: }
  3204                           ;main.c: 289: _delay((unsigned long)((1000)*(10000000/4000.0)));
  3205                           
  3206                           ; BSR set to: 0
  3207  001302  0E0D               	movlw	13
  3208  001304  0100               	movlb	0	; () banked
  3209  001306  6FF0               	movwf	(??_sortBattery+1)& (0+255),b
  3210  001308  0EAF               	movlw	175
  3211  00130A  0100               	movlb	0	; () banked
  3212  00130C  6FEF               	movwf	??_sortBattery& (0+255),b
  3213  00130E  0EB6               	movlw	182
  3214  001310                     u8137:
  3215  001310  2EE8               	decfsz	wreg,f,c
  3216  001312  D7FE               	bra	u8137
  3217  001314  2FEF               	decfsz	??_sortBattery& (0+255),f,b
  3218  001316  D7FC               	bra	u8137
  3219  001318  2FF0               	decfsz	(??_sortBattery+1)& (0+255),f,b
  3220  00131A  D7FA               	bra	u8137
  3221  00131C  F000               	nop	
  3222                           
  3223                           ;main.c: 293: setAngle(padServo, padAngle_NEUTRAL);
  3224  00131E  0E7B               	movlw	low _padServo
  3225  001320  0100               	movlb	0	; () banked
  3226  001322  6FD4               	movwf	setAngle@motor& (0+255),b
  3227  001324  0E01               	movlw	high _padServo
  3228  001326  0100               	movlb	0	; () banked
  3229  001328  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  3230  00132A  C169  F0D6         	movff	_padAngle_NEUTRAL,setAngle@angle
  3231  00132E  C16A  F0D7         	movff	_padAngle_NEUTRAL+1,setAngle@angle+1
  3232  001332  EC17  F017         	call	_setAngle	;wreg free
  3233                           
  3234                           ;main.c: 297: setAngle(conveyorServo, 130);
  3235  001336  0E6F               	movlw	low _conveyorServo
  3236  001338  0100               	movlb	0	; () banked
  3237  00133A  6FD4               	movwf	setAngle@motor& (0+255),b
  3238  00133C  0E01               	movlw	high _conveyorServo
  3239  00133E  0100               	movlb	0	; () banked
  3240  001340  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  3241  001342  0E00               	movlw	0
  3242  001344  0100               	movlb	0	; () banked
  3243  001346  6FD7               	movwf	(setAngle@angle+1)& (0+255),b
  3244  001348  0E82               	movlw	130
  3245  00134A  6FD6               	movwf	setAngle@angle& (0+255),b
  3246  00134C  EC17  F017         	call	_setAngle	;wreg free
  3247                           
  3248                           ;main.c: 298: digitalWrite(cylinderMotor, 1);
  3249  001350  0E73               	movlw	low _cylinderMotor
  3250  001352  6E23               	movwf	digitalWrite@pin,c
  3251  001354  0E01               	movlw	high _cylinderMotor
  3252  001356  6E24               	movwf	digitalWrite@pin+1,c
  3253  001358  0E00               	movlw	0
  3254  00135A  6E26               	movwf	digitalWrite@val+1,c
  3255  00135C  0E01               	movlw	1
  3256  00135E  6E25               	movwf	digitalWrite@val,c
  3257  001360  EC4E  F018         	call	_digitalWrite	;wreg free
  3258  001364  0012               	return		;funcret
  3259  001366                     __end_of_sortBattery:
  3260                           	opt stack 0
  3261                           tblptru	equ	0xFF8
  3262                           tblptrh	equ	0xFF7
  3263                           tblptrl	equ	0xFF6
  3264                           tablat	equ	0xFF5
  3265                           postinc0	equ	0xFEE
  3266                           wreg	equ	0xFE8
  3267                           postdec1	equ	0xFE5
  3268                           fsr1l	equ	0xFE1
  3269                           status	equ	0xFD8
  3270                           
  3271 ;; *************** function _digitalWrite *****************
  3272 ;; Defined at:
  3273 ;;		line 53 in file "iopin.c"
  3274 ;; Parameters:    Size  Location     Type
  3275 ;;  pin             2   34[COMRAM] PTR int 
  3276 ;;		 -> AA_float(4), redirectingServo(4), padServo(4), conveyorServo(4), 
  3277 ;;		 -> cylinderMotor(4), 
  3278 ;;  val             2   36[COMRAM] int 
  3279 ;; Auto vars:     Size  Location     Type
  3280 ;;  p               2   41[COMRAM] int 
  3281 ;; Return value:  Size  Location     Type
  3282 ;;                  1    wreg      void 
  3283 ;; Registers used:
  3284 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3285 ;; Tracked objects:
  3286 ;;		On entry : 0/0
  3287 ;;		On exit  : 0/0
  3288 ;;		Unchanged: 0/0
  3289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3290 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3291 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3292 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3293 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3294 ;;Total ram usage:        9 bytes
  3295 ;; Hardware stack levels used:    1
  3296 ;; Hardware stack levels required when called:    3
  3297 ;; This function calls:
  3298 ;;		Nothing
  3299 ;; This function is called by:
  3300 ;;		_main
  3301 ;;		_sortBattery
  3302 ;; This function uses a non-reentrant model
  3303 ;;
  3304                           
  3305                           	psect	text2
  3306  00309C                     __ptext2:
  3307                           	opt stack 0
  3308  00309C                     _digitalWrite:
  3309                           	opt stack 26
  3310                           
  3311                           ;iopin.c: 54: if(pin){
  3312                           
  3313                           ;incstack = 0
  3314  00309C  5023               	movf	digitalWrite@pin,w,c
  3315  00309E  1024               	iorwf	digitalWrite@pin+1,w,c
  3316  0030A0  B4D8               	btfsc	status,2,c
  3317  0030A2  0012               	return	
  3318                           
  3319                           ;iopin.c: 55: int p = 1 << pin[1];
  3320  0030A4  EE20 F002          	lfsr	2,2
  3321  0030A8  5023               	movf	digitalWrite@pin,w,c
  3322  0030AA  26D9               	addwf	fsr2l,f,c
  3323  0030AC  5024               	movf	digitalWrite@pin+1,w,c
  3324  0030AE  22DA               	addwfc	fsr2h,f,c
  3325  0030B0  50DF               	movf	indf2,w,c
  3326  0030B2  6E27               	movwf	??_digitalWrite& (0+255),c
  3327  0030B4  0E01               	movlw	1
  3328  0030B6  6E28               	movwf	(??_digitalWrite+1)& (0+255),c
  3329  0030B8  0E00               	movlw	0
  3330  0030BA  6E29               	movwf	(??_digitalWrite+2)& (0+255),c
  3331  0030BC  2A27               	incf	??_digitalWrite,f,c
  3332  0030BE  D003               	goto	u7454
  3333  0030C0                     u7455:
  3334  0030C0  90D8               	bcf	status,0,c
  3335  0030C2  3628               	rlcf	??_digitalWrite+1,f,c
  3336  0030C4  3629               	rlcf	??_digitalWrite+2,f,c
  3337  0030C6                     u7454:
  3338  0030C6  2E27               	decfsz	??_digitalWrite,f,c
  3339  0030C8  D7FB               	goto	u7455
  3340  0030CA  C028  F02A         	movff	??_digitalWrite+1,digitalWrite@p
  3341  0030CE  C029  F02B         	movff	??_digitalWrite+2,digitalWrite@p+1
  3342                           
  3343                           ;iopin.c: 56: if(val == 0){
  3344  0030D2  5025               	movf	digitalWrite@val,w,c
  3345  0030D4  1026               	iorwf	digitalWrite@val+1,w,c
  3346  0030D6  A4D8               	btfss	status,2,c
  3347  0030D8  D02B               	goto	l7216
  3348                           
  3349                           ;iopin.c: 57: p ^= 0xff;
  3350  0030DA  0EFF               	movlw	255
  3351  0030DC  1A2A               	xorwf	digitalWrite@p,f,c
  3352                           
  3353                           ;iopin.c: 58: }
  3354                           ;iopin.c: 60: switch(pin[0]){
  3355  0030DE  D028               	goto	l7216
  3356  0030E0                     l7192:
  3357  0030E0  0425               	decf	digitalWrite@val,w,c
  3358  0030E2  1026               	iorwf	digitalWrite@val+1,w,c
  3359  0030E4  A4D8               	btfss	status,2,c
  3360  0030E6  D003               	goto	l7196
  3361  0030E8  502A               	movf	digitalWrite@p,w,c
  3362  0030EA  1289               	iorwf	3977,f,c	;volatile
  3363  0030EC  0012               	return	
  3364  0030EE                     l7196:
  3365                           
  3366                           ;iopin.c: 62: else LATA &= p;
  3367  0030EE  502A               	movf	digitalWrite@p,w,c
  3368  0030F0  1689               	andwf	3977,f,c	;volatile
  3369                           
  3370                           ;iopin.c: 63: break;
  3371  0030F2  0012               	return	
  3372  0030F4                     l7198:
  3373  0030F4  0425               	decf	digitalWrite@val,w,c
  3374  0030F6  1026               	iorwf	digitalWrite@val+1,w,c
  3375  0030F8  A4D8               	btfss	status,2,c
  3376  0030FA  D003               	goto	l7202
  3377  0030FC  502A               	movf	digitalWrite@p,w,c
  3378  0030FE  128A               	iorwf	3978,f,c	;volatile
  3379  003100  0012               	return	
  3380  003102                     l7202:
  3381                           
  3382                           ;iopin.c: 65: else LATB &= p;
  3383  003102  502A               	movf	digitalWrite@p,w,c
  3384  003104  168A               	andwf	3978,f,c	;volatile
  3385                           
  3386                           ;iopin.c: 66: break;
  3387  003106  0012               	return	
  3388  003108                     l7204:
  3389  003108  0425               	decf	digitalWrite@val,w,c
  3390  00310A  1026               	iorwf	digitalWrite@val+1,w,c
  3391  00310C  A4D8               	btfss	status,2,c
  3392  00310E  D003               	goto	l7208
  3393  003110  502A               	movf	digitalWrite@p,w,c
  3394  003112  128B               	iorwf	3979,f,c	;volatile
  3395  003114  0012               	return	
  3396  003116                     l7208:
  3397                           
  3398                           ;iopin.c: 68: else LATC &= p;
  3399  003116  502A               	movf	digitalWrite@p,w,c
  3400  003118  168B               	andwf	3979,f,c	;volatile
  3401                           
  3402                           ;iopin.c: 69: break;
  3403  00311A  0012               	return	
  3404  00311C                     l7210:
  3405  00311C  0425               	decf	digitalWrite@val,w,c
  3406  00311E  1026               	iorwf	digitalWrite@val+1,w,c
  3407  003120  A4D8               	btfss	status,2,c
  3408  003122  D003               	goto	l7214
  3409  003124  502A               	movf	digitalWrite@p,w,c
  3410  003126  128C               	iorwf	3980,f,c	;volatile
  3411  003128  0012               	return	
  3412  00312A                     l7214:
  3413                           
  3414                           ;iopin.c: 71: else LATD &= p;
  3415  00312A  502A               	movf	digitalWrite@p,w,c
  3416  00312C  168C               	andwf	3980,f,c	;volatile
  3417                           
  3418                           ;iopin.c: 72: }
  3419  00312E  0012               	return	
  3420  003130                     l7216:
  3421  003130  C023  FFD9         	movff	digitalWrite@pin,fsr2l
  3422  003134  C024  FFDA         	movff	digitalWrite@pin+1,fsr2h
  3423  003138  CFDE F027          	movff	postinc2,??_digitalWrite
  3424  00313C  CFDD F028          	movff	postdec2,??_digitalWrite+1
  3425                           
  3426                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3427                           ; Switch size 1, requested type "space"
  3428                           ; Number of cases is 1, Range of values is 0 to 0
  3429                           ; switch strategies available:
  3430                           ; Name         Instructions Cycles
  3431                           ; simple_byte            4     3 (average)
  3432                           ;	Chosen strategy is simple_byte
  3433  003140  5028               	movf	??_digitalWrite+1,w,c
  3434  003142  0A00               	xorlw	0	; case 0
  3435  003144  A4D8               	btfss	status,2,c
  3436  003146  0012               	return	
  3437                           
  3438                           ; Switch size 1, requested type "space"
  3439                           ; Number of cases is 4, Range of values is 0 to 3
  3440                           ; switch strategies available:
  3441                           ; Name         Instructions Cycles
  3442                           ; simple_byte           13     7 (average)
  3443                           ;	Chosen strategy is simple_byte
  3444  003148  5027               	movf	??_digitalWrite,w,c
  3445  00314A  0A00               	xorlw	0	; case 0
  3446  00314C  B4D8               	btfsc	status,2,c
  3447  00314E  D7C8               	goto	l7192
  3448  003150  0A01               	xorlw	1	; case 1
  3449  003152  B4D8               	btfsc	status,2,c
  3450  003154  D7CF               	goto	l7198
  3451  003156  0A03               	xorlw	3	; case 2
  3452  003158  B4D8               	btfsc	status,2,c
  3453  00315A  D7D6               	goto	l7204
  3454  00315C  0A01               	xorlw	1	; case 3
  3455  00315E  A4D8               	btfss	status,2,c
  3456  003160  0012               	return	
  3457  003162  D7DC               	goto	l7210
  3458  003164                     __end_of_digitalWrite:
  3459                           	opt stack 0
  3460                           tblptru	equ	0xFF8
  3461                           tblptrh	equ	0xFF7
  3462                           tblptrl	equ	0xFF6
  3463                           tablat	equ	0xFF5
  3464                           postinc0	equ	0xFEE
  3465                           wreg	equ	0xFE8
  3466                           postdec1	equ	0xFE5
  3467                           fsr1l	equ	0xFE1
  3468                           indf2	equ	0xFDF
  3469                           postinc2	equ	0xFDE
  3470                           postdec2	equ	0xFDD
  3471                           fsr2h	equ	0xFDA
  3472                           fsr2l	equ	0xFD9
  3473                           status	equ	0xFD8
  3474                           
  3475 ;; *************** function _digitalRead *****************
  3476 ;; Defined at:
  3477 ;;		line 43 in file "iopin.c"
  3478 ;; Parameters:    Size  Location     Type
  3479 ;;  pin             2   34[COMRAM] PTR int 
  3480 ;;		 -> padPin2(4), padPin1(4), 
  3481 ;; Auto vars:     Size  Location     Type
  3482 ;;		None
  3483 ;; Return value:  Size  Location     Type
  3484 ;;                  2   34[COMRAM] int 
  3485 ;; Registers used:
  3486 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3487 ;; Tracked objects:
  3488 ;;		On entry : 0/0
  3489 ;;		On exit  : 0/0
  3490 ;;		Unchanged: 0/0
  3491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3492 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3494 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3495 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3496 ;;Total ram usage:        4 bytes
  3497 ;; Hardware stack levels used:    1
  3498 ;; Hardware stack levels required when called:    3
  3499 ;; This function calls:
  3500 ;;		Nothing
  3501 ;; This function is called by:
  3502 ;;		_sortBattery
  3503 ;; This function uses a non-reentrant model
  3504 ;;
  3505                           
  3506                           	psect	text3
  3507  002A96                     __ptext3:
  3508                           	opt stack 0
  3509  002A96                     _digitalRead:
  3510                           	opt stack 26
  3511                           
  3512                           ;iopin.c: 44: switch(pin[0]){
  3513                           
  3514                           ;incstack = 0
  3515  002A96  D058               	goto	l7290
  3516  002A98                     l7272:
  3517  002A98  EE20 F002          	lfsr	2,2
  3518  002A9C  5023               	movf	digitalRead@pin,w,c
  3519  002A9E  26D9               	addwf	fsr2l,f,c
  3520  002AA0  5024               	movf	digitalRead@pin+1,w,c
  3521  002AA2  22DA               	addwfc	fsr2h,f,c
  3522  002AA4  50DF               	movf	indf2,w,c
  3523  002AA6  6E25               	movwf	??_digitalRead& (0+255),c
  3524  002AA8  CF80 F026          	movff	3968,??_digitalRead+1	;volatile
  3525  002AAC  2A25               	incf	??_digitalRead,f,c
  3526  002AAE  D002               	goto	u7564
  3527  002AB0                     u7565:
  3528  002AB0  90D8               	bcf	status,0,c
  3529  002AB2  3226               	rrcf	??_digitalRead+1,f,c
  3530  002AB4                     u7564:
  3531  002AB4  2E25               	decfsz	??_digitalRead,f,c
  3532  002AB6  D7FC               	goto	u7565
  3533  002AB8  0E01               	movlw	1
  3534  002ABA  1626               	andwf	??_digitalRead+1,f,c
  3535  002ABC  5026               	movf	??_digitalRead+1,w,c
  3536  002ABE  6E23               	movwf	?_digitalRead,c
  3537  002AC0  6A24               	clrf	?_digitalRead+1,c
  3538  002AC2  0012               	return	
  3539  002AC4                     l7276:
  3540  002AC4  EE20 F002          	lfsr	2,2
  3541  002AC8  5023               	movf	digitalRead@pin,w,c
  3542  002ACA  26D9               	addwf	fsr2l,f,c
  3543  002ACC  5024               	movf	digitalRead@pin+1,w,c
  3544  002ACE  22DA               	addwfc	fsr2h,f,c
  3545  002AD0  50DF               	movf	indf2,w,c
  3546  002AD2  6E25               	movwf	??_digitalRead& (0+255),c
  3547  002AD4  CF81 F026          	movff	3969,??_digitalRead+1	;volatile
  3548  002AD8  2A25               	incf	??_digitalRead,f,c
  3549  002ADA  D002               	goto	u7574
  3550  002ADC                     u7575:
  3551  002ADC  90D8               	bcf	status,0,c
  3552  002ADE  3226               	rrcf	??_digitalRead+1,f,c
  3553  002AE0                     u7574:
  3554  002AE0  2E25               	decfsz	??_digitalRead,f,c
  3555  002AE2  D7FC               	goto	u7575
  3556  002AE4  0E01               	movlw	1
  3557  002AE6  1626               	andwf	??_digitalRead+1,f,c
  3558  002AE8  5026               	movf	??_digitalRead+1,w,c
  3559  002AEA  6E23               	movwf	?_digitalRead,c
  3560  002AEC  6A24               	clrf	?_digitalRead+1,c
  3561  002AEE  0012               	return	
  3562  002AF0                     l7280:
  3563  002AF0  EE20 F002          	lfsr	2,2
  3564  002AF4  5023               	movf	digitalRead@pin,w,c
  3565  002AF6  26D9               	addwf	fsr2l,f,c
  3566  002AF8  5024               	movf	digitalRead@pin+1,w,c
  3567  002AFA  22DA               	addwfc	fsr2h,f,c
  3568  002AFC  50DF               	movf	indf2,w,c
  3569  002AFE  6E25               	movwf	??_digitalRead& (0+255),c
  3570  002B00  CF82 F026          	movff	3970,??_digitalRead+1	;volatile
  3571  002B04  2A25               	incf	??_digitalRead,f,c
  3572  002B06  D002               	goto	u7584
  3573  002B08                     u7585:
  3574  002B08  90D8               	bcf	status,0,c
  3575  002B0A  3226               	rrcf	??_digitalRead+1,f,c
  3576  002B0C                     u7584:
  3577  002B0C  2E25               	decfsz	??_digitalRead,f,c
  3578  002B0E  D7FC               	goto	u7585
  3579  002B10  0E01               	movlw	1
  3580  002B12  1626               	andwf	??_digitalRead+1,f,c
  3581  002B14  5026               	movf	??_digitalRead+1,w,c
  3582  002B16  6E23               	movwf	?_digitalRead,c
  3583  002B18  6A24               	clrf	?_digitalRead+1,c
  3584  002B1A  0012               	return	
  3585  002B1C                     l7284:
  3586  002B1C  EE20 F002          	lfsr	2,2
  3587  002B20  5023               	movf	digitalRead@pin,w,c
  3588  002B22  26D9               	addwf	fsr2l,f,c
  3589  002B24  5024               	movf	digitalRead@pin+1,w,c
  3590  002B26  22DA               	addwfc	fsr2h,f,c
  3591  002B28  50DF               	movf	indf2,w,c
  3592  002B2A  6E25               	movwf	??_digitalRead& (0+255),c
  3593  002B2C  CF83 F026          	movff	3971,??_digitalRead+1	;volatile
  3594  002B30  2A25               	incf	??_digitalRead,f,c
  3595  002B32  D002               	goto	u7594
  3596  002B34                     u7595:
  3597  002B34  90D8               	bcf	status,0,c
  3598  002B36  3226               	rrcf	??_digitalRead+1,f,c
  3599  002B38                     u7594:
  3600  002B38  2E25               	decfsz	??_digitalRead,f,c
  3601  002B3A  D7FC               	goto	u7595
  3602  002B3C  0E01               	movlw	1
  3603  002B3E  1626               	andwf	??_digitalRead+1,f,c
  3604  002B40  5026               	movf	??_digitalRead+1,w,c
  3605  002B42  6E23               	movwf	?_digitalRead,c
  3606  002B44  6A24               	clrf	?_digitalRead+1,c
  3607  002B46  0012               	return	
  3608  002B48                     l7290:
  3609  002B48  C023  FFD9         	movff	digitalRead@pin,fsr2l
  3610  002B4C  C024  FFDA         	movff	digitalRead@pin+1,fsr2h
  3611  002B50  CFDE F025          	movff	postinc2,??_digitalRead
  3612  002B54  CFDD F026          	movff	postdec2,??_digitalRead+1
  3613                           
  3614                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3615                           ; Switch size 1, requested type "space"
  3616                           ; Number of cases is 1, Range of values is 0 to 0
  3617                           ; switch strategies available:
  3618                           ; Name         Instructions Cycles
  3619                           ; simple_byte            4     3 (average)
  3620                           ;	Chosen strategy is simple_byte
  3621  002B58  5026               	movf	??_digitalRead+1,w,c
  3622  002B5A  0A00               	xorlw	0	; case 0
  3623  002B5C  A4D8               	btfss	status,2,c
  3624  002B5E  D00D               	goto	l335
  3625                           
  3626                           ; Switch size 1, requested type "space"
  3627                           ; Number of cases is 4, Range of values is 0 to 3
  3628                           ; switch strategies available:
  3629                           ; Name         Instructions Cycles
  3630                           ; simple_byte           13     7 (average)
  3631                           ;	Chosen strategy is simple_byte
  3632  002B60  5025               	movf	??_digitalRead,w,c
  3633  002B62  0A00               	xorlw	0	; case 0
  3634  002B64  B4D8               	btfsc	status,2,c
  3635  002B66  D798               	goto	l7272
  3636  002B68  0A01               	xorlw	1	; case 1
  3637  002B6A  B4D8               	btfsc	status,2,c
  3638  002B6C  D7AB               	goto	l7276
  3639  002B6E  0A03               	xorlw	3	; case 2
  3640  002B70  B4D8               	btfsc	status,2,c
  3641  002B72  D7BE               	goto	l7280
  3642  002B74  0A01               	xorlw	1	; case 3
  3643  002B76  B4D8               	btfsc	status,2,c
  3644  002B78  D7D1               	goto	l7284
  3645  002B7A                     l335:
  3646                           
  3647                           ;iopin.c: 50: return -1;
  3648  002B7A  6823               	setf	?_digitalRead,c
  3649  002B7C  6824               	setf	?_digitalRead+1,c
  3650  002B7E  0012               	return		;funcret
  3651  002B80                     __end_of_digitalRead:
  3652                           	opt stack 0
  3653                           tblptru	equ	0xFF8
  3654                           tblptrh	equ	0xFF7
  3655                           tblptrl	equ	0xFF6
  3656                           tablat	equ	0xFF5
  3657                           postinc0	equ	0xFEE
  3658                           wreg	equ	0xFE8
  3659                           postdec1	equ	0xFE5
  3660                           fsr1l	equ	0xFE1
  3661                           indf2	equ	0xFDF
  3662                           postinc2	equ	0xFDE
  3663                           postdec2	equ	0xFDD
  3664                           fsr2h	equ	0xFDA
  3665                           fsr2l	equ	0xFD9
  3666                           status	equ	0xFD8
  3667                           
  3668 ;; *************** function _analogRead *****************
  3669 ;; Defined at:
  3670 ;;		line 90 in file "iopin.c"
  3671 ;; Parameters:    Size  Location     Type
  3672 ;;  channel         2   34[COMRAM] int 
  3673 ;; Auto vars:     Size  Location     Type
  3674 ;;		None
  3675 ;; Return value:  Size  Location     Type
  3676 ;;                  4   34[COMRAM] long 
  3677 ;; Registers used:
  3678 ;;		wreg, status,2, status,0
  3679 ;; Tracked objects:
  3680 ;;		On entry : 0/0
  3681 ;;		On exit  : 0/0
  3682 ;;		Unchanged: 0/0
  3683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3684 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3686 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3687 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3688 ;;Total ram usage:        6 bytes
  3689 ;; Hardware stack levels used:    1
  3690 ;; Hardware stack levels required when called:    3
  3691 ;; This function calls:
  3692 ;;		Nothing
  3693 ;; This function is called by:
  3694 ;;		_sortBattery
  3695 ;; This function uses a non-reentrant model
  3696 ;;
  3697                           
  3698                           	psect	text4
  3699  003D58                     __ptext4:
  3700                           	opt stack 0
  3701  003D58                     _analogRead:
  3702                           	opt stack 26
  3703                           
  3704                           ;iopin.c: 91: ADCON0 = channel<<2;
  3705                           
  3706                           ;incstack = 0
  3707  003D58  4423               	rlncf	analogRead@channel,w,c
  3708  003D5A  46E8               	rlncf	wreg,f,c
  3709  003D5C  0BFC               	andlw	252
  3710  003D5E  6EC2               	movwf	4034,c	;volatile
  3711                           
  3712                           ;iopin.c: 92: ADCON0 |= 1<<0;
  3713  003D60  80C2               	bsf	4034,0,c	;volatile
  3714                           
  3715                           ;iopin.c: 93: ADCON0 |= 1<<1;
  3716  003D62  82C2               	bsf	4034,1,c	;volatile
  3717  003D64                     l360:
  3718  003D64  B2C2               	btfsc	4034,1,c	;volatile
  3719  003D66  D7FE               	goto	l360
  3720                           
  3721                           ;iopin.c: 97: return (ADRESH<<8) + ADRESL;
  3722  003D68  50C3               	movf	4035,w,c	;volatile
  3723  003D6A  CFC4 F027          	movff	4036,??_analogRead	;volatile
  3724  003D6E  6A28               	clrf	(??_analogRead+1)& (0+255),c
  3725  003D70  C027  F028         	movff	??_analogRead,??_analogRead+1
  3726  003D74  6A27               	clrf	??_analogRead,c
  3727  003D76  2627               	addwf	??_analogRead,f,c
  3728  003D78  0E00               	movlw	0
  3729  003D7A  2228               	addwfc	??_analogRead+1,f,c
  3730  003D7C  C027  F023         	movff	??_analogRead,?_analogRead
  3731  003D80  C028  F024         	movff	??_analogRead+1,?_analogRead+1
  3732  003D84  0E00               	movlw	0
  3733  003D86  BE24               	btfsc	?_analogRead+1,7,c
  3734  003D88  0EFF               	movlw	-1
  3735  003D8A  6E25               	movwf	?_analogRead+2,c
  3736  003D8C  6E26               	movwf	?_analogRead+3,c
  3737  003D8E  0012               	return	
  3738  003D90                     __end_of_analogRead:
  3739                           	opt stack 0
  3740                           tblptru	equ	0xFF8
  3741                           tblptrh	equ	0xFF7
  3742                           tblptrl	equ	0xFF6
  3743                           tablat	equ	0xFF5
  3744                           postinc0	equ	0xFEE
  3745                           wreg	equ	0xFE8
  3746                           postdec1	equ	0xFE5
  3747                           fsr1l	equ	0xFE1
  3748                           indf2	equ	0xFDF
  3749                           postinc2	equ	0xFDE
  3750                           postdec2	equ	0xFDD
  3751                           fsr2h	equ	0xFDA
  3752                           fsr2l	equ	0xFD9
  3753                           status	equ	0xFD8
  3754                           
  3755 ;; *************** function _showInterface *****************
  3756 ;; Defined at:
  3757 ;;		line 18 in file "interface.c"
  3758 ;; Parameters:    Size  Location     Type
  3759 ;;		None
  3760 ;; Auto vars:     Size  Location     Type
  3761 ;;  run             2   16[BANK1 ] PTR int 
  3762 ;;		 -> readPastRun@data(14), 
  3763 ;;  n               2   14[BANK1 ] int 
  3764 ;;  key             1   18[BANK1 ] unsigned char 
  3765 ;; Return value:  Size  Location     Type
  3766 ;;                  1    wreg      void 
  3767 ;; Registers used:
  3768 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3769 ;; Tracked objects:
  3770 ;;		On entry : 0/0
  3771 ;;		On exit  : 0/0
  3772 ;;		Unchanged: 0/0
  3773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3775 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3776 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3777 ;;      Totals:         0       2       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3778 ;;Total ram usage:        7 bytes
  3779 ;; Hardware stack levels used:    1
  3780 ;; Hardware stack levels required when called:    9
  3781 ;; This function calls:
  3782 ;;		_initRTC
  3783 ;;		_readPastRun
  3784 ;;		_showDateTime
  3785 ;;		_showErrorMessage
  3786 ;;		_showMainMenu
  3787 ;;		_showRunMenu
  3788 ;;		_showRunSelect
  3789 ;;		_showRunStats
  3790 ;;		_showRunTime
  3791 ;; This function is called by:
  3792 ;;		_main
  3793 ;; This function uses a non-reentrant model
  3794 ;;
  3795                           
  3796                           	psect	text5
  3797  002F02                     __ptext5:
  3798                           	opt stack 0
  3799  002F02                     _showInterface:
  3800                           	opt stack 21
  3801                           
  3802                           ;interface.c: 20: initRTC();
  3803                           
  3804                           ;incstack = 0
  3805  002F02  ECB0  F01F         	call	_initRTC	;wreg free
  3806  002F06                     l7444:
  3807                           
  3808                           ;interface.c: 23: showDateTime();
  3809  002F06  ECB5  F013         	call	_showDateTime	;wreg free
  3810  002F0A                     l7446:
  3811                           
  3812                           ;interface.c: 26: key = showMainMenu();
  3813  002F0A  ECAA  F01D         	call	_showMainMenu	;wreg free
  3814  002F0E  0101               	movlb	1	; () banked
  3815  002F10  6F12               	movwf	showInterface@key& (0+255),b
  3816                           
  3817                           ; BSR set to: 1
  3818                           ;interface.c: 28: if(key == 'C'){
  3819  002F12  0E43               	movlw	67
  3820  002F14  0101               	movlb	1	; () banked
  3821  002F16  1912               	xorwf	showInterface@key& (0+255),w,b
  3822  002F18  A4D8               	btfss	status,2,c
  3823  002F1A  D04F               	goto	l7476
  3824                           
  3825                           ; BSR set to: 1
  3826                           ;interface.c: 30: int n = showRunSelect();
  3827  002F1C  ECC4  F01C         	call	_showRunSelect	;wreg free
  3828  002F20  0100               	movlb	0	; () banked
  3829  002F22  6FF3               	movwf	??_showInterface& (0+255),b
  3830  002F24  0100               	movlb	0	; () banked
  3831  002F26  51F3               	movf	??_showInterface& (0+255),w,b
  3832  002F28  0101               	movlb	1	; () banked
  3833  002F2A  6F0E               	movwf	showInterface@n& (0+255),b
  3834  002F2C  6B0F               	clrf	(showInterface@n+1)& (0+255),b
  3835                           
  3836                           ; BSR set to: 1
  3837                           ;interface.c: 32: if(n == '*')continue;
  3838  002F2E  0E2A               	movlw	42
  3839  002F30  0101               	movlb	1	; () banked
  3840  002F32  190E               	xorwf	showInterface@n& (0+255),w,b
  3841  002F34  0101               	movlb	1	; () banked
  3842  002F36  110F               	iorwf	(showInterface@n+1)& (0+255),w,b
  3843  002F38  B4D8               	btfsc	status,2,c
  3844  002F3A  D7E7               	goto	l7446
  3845                           
  3846                           ; BSR set to: 1
  3847                           ;interface.c: 34: int* run = readPastRun( n - '1');
  3848                           
  3849                           ; BSR set to: 1
  3850                           
  3851                           ; BSR set to: 1
  3852  002F3C  0ECF               	movlw	207
  3853  002F3E  0101               	movlb	1	; () banked
  3854  002F40  250E               	addwf	showInterface@n& (0+255),w,b
  3855  002F42  0100               	movlb	0	; () banked
  3856  002F44  6F80               	movwf	readPastRun@run& (0+255),b
  3857  002F46  0EFF               	movlw	255
  3858  002F48  0101               	movlb	1	; () banked
  3859  002F4A  210F               	addwfc	(showInterface@n+1)& (0+255),w,b
  3860  002F4C  0100               	movlb	0	; () banked
  3861  002F4E  6F81               	movwf	(readPastRun@run+1)& (0+255),b
  3862  002F50  EC17  F01A         	call	_readPastRun	;wreg free
  3863  002F54  C080  F110         	movff	?_readPastRun,showInterface@run
  3864  002F58  C081  F111         	movff	?_readPastRun+1,showInterface@run+1
  3865                           
  3866                           ;interface.c: 35: if(run[0] == 0xff){
  3867  002F5C  C110  FFD9         	movff	showInterface@run,fsr2l
  3868  002F60  C111  FFDA         	movff	showInterface@run+1,fsr2h
  3869  002F64  28DE               	incf	postinc2,w,c
  3870  002F66  10DE               	iorwf	postinc2,w,c
  3871  002F68  A4D8               	btfss	status,2,c
  3872  002F6A  D003               	goto	l7462
  3873                           
  3874                           ;interface.c: 36: showErrorMessage();
  3875  002F6C  ECE4  F01E         	call	_showErrorMessage	;wreg free
  3876                           
  3877                           ;interface.c: 37: continue;
  3878  002F70  D7CC               	goto	l7446
  3879  002F72                     l7462:
  3880                           
  3881                           ;interface.c: 41: key = showRunMenu(n);
  3882  002F72  0101               	movlb	1	; () banked
  3883  002F74  510E               	movf	showInterface@n& (0+255),w,b
  3884  002F76  ECF6  F01C         	call	_showRunMenu
  3885  002F7A  0101               	movlb	1	; () banked
  3886  002F7C  6F12               	movwf	showInterface@key& (0+255),b
  3887                           
  3888                           ; BSR set to: 1
  3889                           ;interface.c: 43: if(key == 'A') showRunTime(run);
  3890  002F7E  0E41               	movlw	65
  3891  002F80  0101               	movlb	1	; () banked
  3892  002F82  1912               	xorwf	showInterface@key& (0+255),w,b
  3893  002F84  A4D8               	btfss	status,2,c
  3894  002F86  D007               	goto	l7468
  3895                           
  3896                           ; BSR set to: 1
  3897  002F88  C110  F0EF         	movff	showInterface@run,showRunTime@run
  3898  002F8C  C111  F0F0         	movff	showInterface@run+1,showRunTime@run+1
  3899  002F90  ECCF  F00F         	call	_showRunTime	;wreg free
  3900  002F94  D7EE               	goto	l7462
  3901  002F96                     l7468:
  3902                           
  3903                           ;interface.c: 44: else if(key == 'B') showRunStats(run);
  3904  002F96  0E42               	movlw	66
  3905  002F98  0101               	movlb	1	; () banked
  3906  002F9A  1912               	xorwf	showInterface@key& (0+255),w,b
  3907  002F9C  A4D8               	btfss	status,2,c
  3908  002F9E  D007               	goto	l7472
  3909                           
  3910                           ; BSR set to: 1
  3911  002FA0  C110  F0EF         	movff	showInterface@run,showRunStats@run
  3912  002FA4  C111  F0F0         	movff	showInterface@run+1,showRunStats@run+1
  3913  002FA8  ECC3  F019         	call	_showRunStats	;wreg free
  3914  002FAC  D7E2               	goto	l7462
  3915  002FAE                     l7472:
  3916                           
  3917                           ;interface.c: 45: else if(key == '*') break;
  3918  002FAE  0E2A               	movlw	42
  3919  002FB0  0101               	movlb	1	; () banked
  3920  002FB2  1912               	xorwf	showInterface@key& (0+255),w,b
  3921  002FB4  B4D8               	btfsc	status,2,c
  3922  002FB6  D7A9               	goto	l7446
  3923  002FB8  D7DC               	goto	l7462
  3924  002FBA                     l7476:
  3925                           
  3926                           ; BSR set to: 1
  3927                           ;interface.c: 49: else if(key == 'B') return;
  3928  002FBA  0E42               	movlw	66
  3929  002FBC  0101               	movlb	1	; () banked
  3930  002FBE  1912               	xorwf	showInterface@key& (0+255),w,b
  3931  002FC0  B4D8               	btfsc	status,2,c
  3932  002FC2  0012               	return	
  3933                           
  3934                           ; BSR set to: 1
  3935                           ;interface.c: 50: else if(key == '*') break;
  3936                           
  3937                           ; BSR set to: 1
  3938                           
  3939                           ; BSR set to: 1
  3940                           
  3941                           ; BSR set to: 1
  3942  002FC4  0E2A               	movlw	42
  3943  002FC6  0101               	movlb	1	; () banked
  3944  002FC8  1912               	xorwf	showInterface@key& (0+255),w,b
  3945  002FCA  B4D8               	btfsc	status,2,c
  3946  002FCC  D79C               	goto	l7444
  3947  002FCE  D79D               	goto	l7446
  3948  002FD0                     __end_of_showInterface:
  3949                           	opt stack 0
  3950                           tblptru	equ	0xFF8
  3951                           tblptrh	equ	0xFF7
  3952                           tblptrl	equ	0xFF6
  3953                           tablat	equ	0xFF5
  3954                           postinc0	equ	0xFEE
  3955                           wreg	equ	0xFE8
  3956                           postdec1	equ	0xFE5
  3957                           fsr1l	equ	0xFE1
  3958                           indf2	equ	0xFDF
  3959                           postinc2	equ	0xFDE
  3960                           postdec2	equ	0xFDD
  3961                           fsr2h	equ	0xFDA
  3962                           fsr2l	equ	0xFD9
  3963                           status	equ	0xFD8
  3964                           
  3965 ;; *************** function _showRunTime *****************
  3966 ;; Defined at:
  3967 ;;		line 108 in file "interface.c"
  3968 ;; Parameters:    Size  Location     Type
  3969 ;;  run             2  111[BANK0 ] PTR int 
  3970 ;;		 -> readPastRun@data(14), main@run(14), 
  3971 ;; Auto vars:     Size  Location     Type
  3972 ;;  time            4    8[BANK1 ] long 
  3973 ;;  t2              2    6[BANK1 ] int 
  3974 ;;  t1              2    4[BANK1 ] int 
  3975 ;; Return value:  Size  Location     Type
  3976 ;;                  1    wreg      unsigned char 
  3977 ;; Registers used:
  3978 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3979 ;; Tracked objects:
  3980 ;;		On entry : 0/0
  3981 ;;		On exit  : 0/0
  3982 ;;		Unchanged: 0/0
  3983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3984 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3985 ;;      Locals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3986 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3987 ;;      Totals:         0       4      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3988 ;;Total ram usage:       16 bytes
  3989 ;; Hardware stack levels used:    1
  3990 ;; Hardware stack levels required when called:    8
  3991 ;; This function calls:
  3992 ;;		___aldiv
  3993 ;;		___almod
  3994 ;;		_lcdClear
  3995 ;;		_printf
  3996 ;;		_readKeypad
  3997 ;; This function is called by:
  3998 ;;		_main
  3999 ;;		_showInterface
  4000 ;; This function uses a non-reentrant model
  4001 ;;
  4002                           
  4003                           	psect	text6
  4004  001F9E                     __ptext6:
  4005                           	opt stack 0
  4006  001F9E                     _showRunTime:
  4007                           	opt stack 22
  4008                           
  4009                           ;interface.c: 109: int t1 = run[0], t2 = run[1];
  4010                           
  4011                           ; BSR set to: 1
  4012                           ;incstack = 0
  4013  001F9E  C0EF  FFD9         	movff	showRunTime@run,fsr2l
  4014  001FA2  C0F0  FFDA         	movff	showRunTime@run+1,fsr2h
  4015  001FA6  CFDE F104          	movff	postinc2,showRunTime@t1
  4016  001FAA  CFDD F105          	movff	postdec2,showRunTime@t1+1
  4017  001FAE  0100               	movlb	0	; () banked
  4018  001FB0  EE20 F002          	lfsr	2,2
  4019  001FB4  51EF               	movf	showRunTime@run& (0+255),w,b
  4020  001FB6  26D9               	addwf	fsr2l,f,c
  4021  001FB8  51F0               	movf	(showRunTime@run+1)& (0+255),w,b
  4022  001FBA  22DA               	addwfc	fsr2h,f,c
  4023  001FBC  CFDE F106          	movff	postinc2,showRunTime@t2
  4024  001FC0  CFDD F107          	movff	postdec2,showRunTime@t2+1
  4025                           
  4026                           ;interface.c: 110: long time = (t1<<8) + t2;
  4027  001FC4  0101               	movlb	1	; () banked
  4028  001FC6  5104               	movf	showRunTime@t1& (0+255),w,b
  4029  001FC8  0100               	movlb	0	; () banked
  4030  001FCA  6FF2               	movwf	(??_showRunTime+1)& (0+255),b
  4031  001FCC  6BF1               	clrf	??_showRunTime& (0+255),b
  4032  001FCE  0101               	movlb	1	; () banked
  4033  001FD0  5106               	movf	showRunTime@t2& (0+255),w,b
  4034  001FD2  0100               	movlb	0	; () banked
  4035  001FD4  27F1               	addwf	??_showRunTime& (0+255),f,b
  4036  001FD6  0101               	movlb	1	; () banked
  4037  001FD8  5107               	movf	(showRunTime@t2+1)& (0+255),w,b
  4038  001FDA  0100               	movlb	0	; () banked
  4039  001FDC  23F2               	addwfc	(??_showRunTime+1)& (0+255),f,b
  4040  001FDE  C0F1  F108         	movff	??_showRunTime,showRunTime@time
  4041  001FE2  C0F2  F109         	movff	??_showRunTime+1,showRunTime@time+1
  4042  001FE6  0101               	movlb	1	; () banked
  4043  001FE8  0E00               	movlw	0
  4044  001FEA  BF09               	btfsc	(showRunTime@time+1)& (0+255),7,b
  4045  001FEC  0EFF               	movlw	-1
  4046  001FEE  6F0A               	movwf	(showRunTime@time+2)& (0+255),b
  4047  001FF0  6F0B               	movwf	(showRunTime@time+3)& (0+255),b
  4048                           
  4049                           ; BSR set to: 1
  4050                           ;interface.c: 112: lcdClear();
  4051  001FF2  ECD7  F01F         	call	_lcdClear	;wreg free
  4052                           
  4053                           ;interface.c: 113: printf("time %02ld:%02ld.%01ld\n",time/600,(time%600)/10,(time%600)%1
      +                          0);
  4054  001FF6  0E58               	movlw	88
  4055  001FF8  6E27               	movwf	___almod@divisor,c
  4056  001FFA  0E02               	movlw	2
  4057  001FFC  6E28               	movwf	___almod@divisor+1,c
  4058  001FFE  0E00               	movlw	0
  4059  002000  6E29               	movwf	___almod@divisor+2,c
  4060  002002  0E00               	movlw	0
  4061  002004  6E2A               	movwf	___almod@divisor+3,c
  4062  002006  C108  F023         	movff	showRunTime@time,___almod@dividend
  4063  00200A  C109  F024         	movff	showRunTime@time+1,___almod@dividend+1
  4064  00200E  C10A  F025         	movff	showRunTime@time+2,___almod@dividend+2
  4065  002012  C10B  F026         	movff	showRunTime@time+3,___almod@dividend+3
  4066  002016  EC6D  F019         	call	___almod	;wreg free
  4067  00201A  C023  F100         	movff	?___almod,_showRunTime$1419
  4068  00201E  C024  F101         	movff	?___almod+1,_showRunTime$1419+1
  4069  002022  C025  F102         	movff	?___almod+2,_showRunTime$1419+2
  4070  002026  C026  F103         	movff	?___almod+3,_showRunTime$1419+3
  4071                           
  4072                           ;interface.c: 113: printf("time %02ld:%02ld.%01ld\n",time/600,(time%600)/10,(time%600)%1
      +                          0);
  4073  00202A  0E8D               	movlw	low STR_17
  4074  00202C  0100               	movlb	0	; () banked
  4075  00202E  6FBD               	movwf	printf@f& (0+255),b
  4076  002030  0EFE               	movlw	high STR_17
  4077  002032  0100               	movlb	0	; () banked
  4078  002034  6FBE               	movwf	(printf@f+1)& (0+255),b
  4079  002036  C108  F02D         	movff	showRunTime@time,___aldiv@dividend
  4080  00203A  C109  F02E         	movff	showRunTime@time+1,___aldiv@dividend+1
  4081  00203E  C10A  F02F         	movff	showRunTime@time+2,___aldiv@dividend+2
  4082  002042  C10B  F030         	movff	showRunTime@time+3,___aldiv@dividend+3
  4083  002046  0E58               	movlw	88
  4084  002048  6E31               	movwf	___aldiv@divisor,c
  4085  00204A  0E02               	movlw	2
  4086  00204C  6E32               	movwf	___aldiv@divisor+1,c
  4087  00204E  0E00               	movlw	0
  4088  002050  6E33               	movwf	___aldiv@divisor+2,c
  4089  002052  0E00               	movlw	0
  4090  002054  6E34               	movwf	___aldiv@divisor+3,c
  4091  002056  ECE8  F017         	call	___aldiv	;wreg free
  4092  00205A  C02D  F0BF         	movff	?___aldiv,?_printf+2
  4093  00205E  C02E  F0C0         	movff	?___aldiv+1,?_printf+3
  4094  002062  C02F  F0C1         	movff	?___aldiv+2,?_printf+4
  4095  002066  C030  F0C2         	movff	?___aldiv+3,?_printf+5
  4096  00206A  0E58               	movlw	88
  4097  00206C  6E27               	movwf	___almod@divisor,c
  4098  00206E  0E02               	movlw	2
  4099  002070  6E28               	movwf	___almod@divisor+1,c
  4100  002072  0E00               	movlw	0
  4101  002074  6E29               	movwf	___almod@divisor+2,c
  4102  002076  0E00               	movlw	0
  4103  002078  6E2A               	movwf	___almod@divisor+3,c
  4104  00207A  C108  F023         	movff	showRunTime@time,___almod@dividend
  4105  00207E  C109  F024         	movff	showRunTime@time+1,___almod@dividend+1
  4106  002082  C10A  F025         	movff	showRunTime@time+2,___almod@dividend+2
  4107  002086  C10B  F026         	movff	showRunTime@time+3,___almod@dividend+3
  4108  00208A  EC6D  F019         	call	___almod	;wreg free
  4109  00208E  C023  F02D         	movff	?___almod,___aldiv@dividend
  4110  002092  C024  F02E         	movff	?___almod+1,___aldiv@dividend+1
  4111  002096  C025  F02F         	movff	?___almod+2,___aldiv@dividend+2
  4112  00209A  C026  F030         	movff	?___almod+3,___aldiv@dividend+3
  4113  00209E  0E0A               	movlw	10
  4114  0020A0  6E31               	movwf	___aldiv@divisor,c
  4115  0020A2  0E00               	movlw	0
  4116  0020A4  6E32               	movwf	___aldiv@divisor+1,c
  4117  0020A6  0E00               	movlw	0
  4118  0020A8  6E33               	movwf	___aldiv@divisor+2,c
  4119  0020AA  0E00               	movlw	0
  4120  0020AC  6E34               	movwf	___aldiv@divisor+3,c
  4121  0020AE  ECE8  F017         	call	___aldiv	;wreg free
  4122  0020B2  C02D  F0C3         	movff	?___aldiv,?_printf+6
  4123  0020B6  C02E  F0C4         	movff	?___aldiv+1,?_printf+7
  4124  0020BA  C02F  F0C5         	movff	?___aldiv+2,?_printf+8
  4125  0020BE  C030  F0C6         	movff	?___aldiv+3,?_printf+9
  4126  0020C2  C100  F023         	movff	_showRunTime$1419,___almod@dividend
  4127  0020C6  C101  F024         	movff	_showRunTime$1419+1,___almod@dividend+1
  4128  0020CA  C102  F025         	movff	_showRunTime$1419+2,___almod@dividend+2
  4129  0020CE  C103  F026         	movff	_showRunTime$1419+3,___almod@dividend+3
  4130  0020D2  0E0A               	movlw	10
  4131  0020D4  6E27               	movwf	___almod@divisor,c
  4132  0020D6  0E00               	movlw	0
  4133  0020D8  6E28               	movwf	___almod@divisor+1,c
  4134  0020DA  0E00               	movlw	0
  4135  0020DC  6E29               	movwf	___almod@divisor+2,c
  4136  0020DE  0E00               	movlw	0
  4137  0020E0  6E2A               	movwf	___almod@divisor+3,c
  4138  0020E2  EC6D  F019         	call	___almod	;wreg free
  4139  0020E6  C023  F0C7         	movff	?___almod,?_printf+10
  4140  0020EA  C024  F0C8         	movff	?___almod+1,?_printf+11
  4141  0020EE  C025  F0C9         	movff	?___almod+2,?_printf+12
  4142  0020F2  C026  F0CA         	movff	?___almod+3,?_printf+13
  4143  0020F6  EC09  F000         	call	_printf	;wreg free
  4144                           
  4145                           ;interface.c: 114: printf("              *>");
  4146  0020FA  0E54               	movlw	low STR_18
  4147  0020FC  0100               	movlb	0	; () banked
  4148  0020FE  6FBD               	movwf	printf@f& (0+255),b
  4149  002100  0EFF               	movlw	high STR_18
  4150  002102  0100               	movlb	0	; () banked
  4151  002104  6FBE               	movwf	(printf@f+1)& (0+255),b
  4152  002106  EC09  F000         	call	_printf	;wreg free
  4153  00210A                     l7234:
  4154  00210A  ECFC  F01E         	call	_readKeypad	;wreg free
  4155  00210E  0A2A               	xorlw	42
  4156  002110  B4D8               	btfsc	status,2,c
  4157  002112  0012               	return	
  4158  002114  D7FA               	goto	l7234
  4159  002116                     __end_of_showRunTime:
  4160                           	opt stack 0
  4161                           tblptru	equ	0xFF8
  4162                           tblptrh	equ	0xFF7
  4163                           tblptrl	equ	0xFF6
  4164                           tablat	equ	0xFF5
  4165                           postinc0	equ	0xFEE
  4166                           wreg	equ	0xFE8
  4167                           postdec1	equ	0xFE5
  4168                           fsr1l	equ	0xFE1
  4169                           indf2	equ	0xFDF
  4170                           postinc2	equ	0xFDE
  4171                           postdec2	equ	0xFDD
  4172                           fsr2h	equ	0xFDA
  4173                           fsr2l	equ	0xFD9
  4174                           status	equ	0xFD8
  4175                           
  4176 ;; *************** function ___almod *****************
  4177 ;; Defined at:
  4178 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\almod.c"
  4179 ;; Parameters:    Size  Location     Type
  4180 ;;  dividend        4   34[COMRAM] long 
  4181 ;;  divisor         4   38[COMRAM] long 
  4182 ;; Auto vars:     Size  Location     Type
  4183 ;;  sign            1   43[COMRAM] unsigned char 
  4184 ;;  counter         1   42[COMRAM] unsigned char 
  4185 ;; Return value:  Size  Location     Type
  4186 ;;                  4   34[COMRAM] long 
  4187 ;; Registers used:
  4188 ;;		wreg, status,2, status,0
  4189 ;; Tracked objects:
  4190 ;;		On entry : 0/0
  4191 ;;		On exit  : 0/0
  4192 ;;		Unchanged: 0/0
  4193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4194 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4195 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4197 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4198 ;;Total ram usage:       10 bytes
  4199 ;; Hardware stack levels used:    1
  4200 ;; Hardware stack levels required when called:    3
  4201 ;; This function calls:
  4202 ;;		Nothing
  4203 ;; This function is called by:
  4204 ;;		_main
  4205 ;;		_showRunTime
  4206 ;; This function uses a non-reentrant model
  4207 ;;
  4208                           
  4209                           	psect	text7
  4210  0032DA                     __ptext7:
  4211                           	opt stack 0
  4212  0032DA                     ___almod:
  4213                           	opt stack 26
  4214                           
  4215                           ;incstack = 0
  4216  0032DA  0E00               	movlw	0
  4217  0032DC  6E2C               	movwf	___almod@sign,c
  4218  0032DE  AE26               	btfss	___almod@dividend+3,7,c
  4219  0032E0  D00A               	goto	l7156
  4220  0032E2  1E26               	comf	___almod@dividend+3,f,c
  4221  0032E4  1E25               	comf	___almod@dividend+2,f,c
  4222  0032E6  1E24               	comf	___almod@dividend+1,f,c
  4223  0032E8  6C23               	negf	___almod@dividend,c
  4224  0032EA  0E00               	movlw	0
  4225  0032EC  2224               	addwfc	___almod@dividend+1,f,c
  4226  0032EE  2225               	addwfc	___almod@dividend+2,f,c
  4227  0032F0  2226               	addwfc	___almod@dividend+3,f,c
  4228  0032F2  0E01               	movlw	1
  4229  0032F4  6E2C               	movwf	___almod@sign,c
  4230  0032F6                     l7156:
  4231  0032F6  AE2A               	btfss	___almod@divisor+3,7,c
  4232  0032F8  D008               	goto	l7160
  4233  0032FA  1E2A               	comf	___almod@divisor+3,f,c
  4234  0032FC  1E29               	comf	___almod@divisor+2,f,c
  4235  0032FE  1E28               	comf	___almod@divisor+1,f,c
  4236  003300  6C27               	negf	___almod@divisor,c
  4237  003302  0E00               	movlw	0
  4238  003304  2228               	addwfc	___almod@divisor+1,f,c
  4239  003306  2229               	addwfc	___almod@divisor+2,f,c
  4240  003308  222A               	addwfc	___almod@divisor+3,f,c
  4241  00330A                     l7160:
  4242  00330A  5027               	movf	___almod@divisor,w,c
  4243  00330C  1028               	iorwf	___almod@divisor+1,w,c
  4244  00330E  1029               	iorwf	___almod@divisor+2,w,c
  4245  003310  102A               	iorwf	___almod@divisor+3,w,c
  4246  003312  B4D8               	btfsc	status,2,c
  4247  003314  D024               	goto	l7176
  4248  003316  0E01               	movlw	1
  4249  003318  6E2B               	movwf	___almod@counter,c
  4250  00331A  D006               	goto	l7166
  4251  00331C                     l7164:
  4252  00331C  90D8               	bcf	status,0,c
  4253  00331E  3627               	rlcf	___almod@divisor,f,c
  4254  003320  3628               	rlcf	___almod@divisor+1,f,c
  4255  003322  3629               	rlcf	___almod@divisor+2,f,c
  4256  003324  362A               	rlcf	___almod@divisor+3,f,c
  4257  003326  2A2B               	incf	___almod@counter,f,c
  4258  003328                     l7166:
  4259  003328  AE2A               	btfss	___almod@divisor+3,7,c
  4260  00332A  D7F8               	goto	l7164
  4261  00332C                     l7168:
  4262  00332C  5027               	movf	___almod@divisor,w,c
  4263  00332E  5C23               	subwf	___almod@dividend,w,c
  4264  003330  5028               	movf	___almod@divisor+1,w,c
  4265  003332  5824               	subwfb	___almod@dividend+1,w,c
  4266  003334  5029               	movf	___almod@divisor+2,w,c
  4267  003336  5825               	subwfb	___almod@dividend+2,w,c
  4268  003338  502A               	movf	___almod@divisor+3,w,c
  4269  00333A  5826               	subwfb	___almod@dividend+3,w,c
  4270  00333C  A0D8               	btfss	status,0,c
  4271  00333E  D008               	goto	l7172
  4272  003340  5027               	movf	___almod@divisor,w,c
  4273  003342  5E23               	subwf	___almod@dividend,f,c
  4274  003344  5028               	movf	___almod@divisor+1,w,c
  4275  003346  5A24               	subwfb	___almod@dividend+1,f,c
  4276  003348  5029               	movf	___almod@divisor+2,w,c
  4277  00334A  5A25               	subwfb	___almod@dividend+2,f,c
  4278  00334C  502A               	movf	___almod@divisor+3,w,c
  4279  00334E  5A26               	subwfb	___almod@dividend+3,f,c
  4280  003350                     l7172:
  4281  003350  90D8               	bcf	status,0,c
  4282  003352  322A               	rrcf	___almod@divisor+3,f,c
  4283  003354  3229               	rrcf	___almod@divisor+2,f,c
  4284  003356  3228               	rrcf	___almod@divisor+1,f,c
  4285  003358  3227               	rrcf	___almod@divisor,f,c
  4286  00335A  2E2B               	decfsz	___almod@counter,f,c
  4287  00335C  D7E7               	goto	l7168
  4288  00335E                     l7176:
  4289  00335E  502C               	movf	___almod@sign,w,c
  4290  003360  B4D8               	btfsc	status,2,c
  4291  003362  D008               	goto	l7180
  4292  003364  1E26               	comf	___almod@dividend+3,f,c
  4293  003366  1E25               	comf	___almod@dividend+2,f,c
  4294  003368  1E24               	comf	___almod@dividend+1,f,c
  4295  00336A  6C23               	negf	___almod@dividend,c
  4296  00336C  0E00               	movlw	0
  4297  00336E  2224               	addwfc	___almod@dividend+1,f,c
  4298  003370  2225               	addwfc	___almod@dividend+2,f,c
  4299  003372  2226               	addwfc	___almod@dividend+3,f,c
  4300  003374                     l7180:
  4301  003374  C023  F023         	movff	___almod@dividend,?___almod
  4302  003378  C024  F024         	movff	___almod@dividend+1,?___almod+1
  4303  00337C  C025  F025         	movff	___almod@dividend+2,?___almod+2
  4304  003380  C026  F026         	movff	___almod@dividend+3,?___almod+3
  4305  003384  0012               	return	
  4306  003386                     __end_of___almod:
  4307                           	opt stack 0
  4308                           tblptru	equ	0xFF8
  4309                           tblptrh	equ	0xFF7
  4310                           tblptrl	equ	0xFF6
  4311                           tablat	equ	0xFF5
  4312                           postinc0	equ	0xFEE
  4313                           wreg	equ	0xFE8
  4314                           postdec1	equ	0xFE5
  4315                           fsr1l	equ	0xFE1
  4316                           indf2	equ	0xFDF
  4317                           postinc2	equ	0xFDE
  4318                           postdec2	equ	0xFDD
  4319                           fsr2h	equ	0xFDA
  4320                           fsr2l	equ	0xFD9
  4321                           status	equ	0xFD8
  4322                           
  4323 ;; *************** function ___aldiv *****************
  4324 ;; Defined at:
  4325 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\aldiv.c"
  4326 ;; Parameters:    Size  Location     Type
  4327 ;;  dividend        4   44[COMRAM] long 
  4328 ;;  divisor         4   48[COMRAM] long 
  4329 ;; Auto vars:     Size  Location     Type
  4330 ;;  quotient        4   54[COMRAM] long 
  4331 ;;  sign            1   53[COMRAM] unsigned char 
  4332 ;;  counter         1   52[COMRAM] unsigned char 
  4333 ;; Return value:  Size  Location     Type
  4334 ;;                  4   44[COMRAM] long 
  4335 ;; Registers used:
  4336 ;;		wreg, status,2, status,0
  4337 ;; Tracked objects:
  4338 ;;		On entry : 0/0
  4339 ;;		On exit  : 0/0
  4340 ;;		Unchanged: 0/0
  4341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4342 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4343 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4345 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4346 ;;Total ram usage:       14 bytes
  4347 ;; Hardware stack levels used:    1
  4348 ;; Hardware stack levels required when called:    3
  4349 ;; This function calls:
  4350 ;;		Nothing
  4351 ;; This function is called by:
  4352 ;;		_main
  4353 ;;		_showRunTime
  4354 ;; This function uses a non-reentrant model
  4355 ;;
  4356                           
  4357                           	psect	text8
  4358  002FD0                     __ptext8:
  4359                           	opt stack 0
  4360  002FD0                     ___aldiv:
  4361                           	opt stack 26
  4362                           
  4363                           ;incstack = 0
  4364  002FD0  0E00               	movlw	0
  4365  002FD2  6E36               	movwf	___aldiv@sign,c
  4366  002FD4  AE34               	btfss	___aldiv@divisor+3,7,c
  4367  002FD6  D00A               	goto	l7112
  4368  002FD8  1E34               	comf	___aldiv@divisor+3,f,c
  4369  002FDA  1E33               	comf	___aldiv@divisor+2,f,c
  4370  002FDC  1E32               	comf	___aldiv@divisor+1,f,c
  4371  002FDE  6C31               	negf	___aldiv@divisor,c
  4372  002FE0  0E00               	movlw	0
  4373  002FE2  2232               	addwfc	___aldiv@divisor+1,f,c
  4374  002FE4  2233               	addwfc	___aldiv@divisor+2,f,c
  4375  002FE6  2234               	addwfc	___aldiv@divisor+3,f,c
  4376  002FE8  0E01               	movlw	1
  4377  002FEA  6E36               	movwf	___aldiv@sign,c
  4378  002FEC                     l7112:
  4379  002FEC  AE30               	btfss	___aldiv@dividend+3,7,c
  4380  002FEE  D00A               	goto	l7118
  4381  002FF0  1E30               	comf	___aldiv@dividend+3,f,c
  4382  002FF2  1E2F               	comf	___aldiv@dividend+2,f,c
  4383  002FF4  1E2E               	comf	___aldiv@dividend+1,f,c
  4384  002FF6  6C2D               	negf	___aldiv@dividend,c
  4385  002FF8  0E00               	movlw	0
  4386  002FFA  222E               	addwfc	___aldiv@dividend+1,f,c
  4387  002FFC  222F               	addwfc	___aldiv@dividend+2,f,c
  4388  002FFE  2230               	addwfc	___aldiv@dividend+3,f,c
  4389  003000  0E01               	movlw	1
  4390  003002  1A36               	xorwf	___aldiv@sign,f,c
  4391  003004                     l7118:
  4392  003004  0E00               	movlw	0
  4393  003006  6E37               	movwf	___aldiv@quotient,c
  4394  003008  0E00               	movlw	0
  4395  00300A  6E38               	movwf	___aldiv@quotient+1,c
  4396  00300C  0E00               	movlw	0
  4397  00300E  6E39               	movwf	___aldiv@quotient+2,c
  4398  003010  0E00               	movlw	0
  4399  003012  6E3A               	movwf	___aldiv@quotient+3,c
  4400  003014  5031               	movf	___aldiv@divisor,w,c
  4401  003016  1032               	iorwf	___aldiv@divisor+1,w,c
  4402  003018  1033               	iorwf	___aldiv@divisor+2,w,c
  4403  00301A  1034               	iorwf	___aldiv@divisor+3,w,c
  4404  00301C  B4D8               	btfsc	status,2,c
  4405  00301E  D02A               	goto	l7140
  4406  003020  0E01               	movlw	1
  4407  003022  6E35               	movwf	___aldiv@counter,c
  4408  003024  D006               	goto	l7126
  4409  003026                     l7124:
  4410  003026  90D8               	bcf	status,0,c
  4411  003028  3631               	rlcf	___aldiv@divisor,f,c
  4412  00302A  3632               	rlcf	___aldiv@divisor+1,f,c
  4413  00302C  3633               	rlcf	___aldiv@divisor+2,f,c
  4414  00302E  3634               	rlcf	___aldiv@divisor+3,f,c
  4415  003030  2A35               	incf	___aldiv@counter,f,c
  4416  003032                     l7126:
  4417  003032  AE34               	btfss	___aldiv@divisor+3,7,c
  4418  003034  D7F8               	goto	l7124
  4419  003036                     l7128:
  4420  003036  90D8               	bcf	status,0,c
  4421  003038  3637               	rlcf	___aldiv@quotient,f,c
  4422  00303A  3638               	rlcf	___aldiv@quotient+1,f,c
  4423  00303C  3639               	rlcf	___aldiv@quotient+2,f,c
  4424  00303E  363A               	rlcf	___aldiv@quotient+3,f,c
  4425  003040  5031               	movf	___aldiv@divisor,w,c
  4426  003042  5C2D               	subwf	___aldiv@dividend,w,c
  4427  003044  5032               	movf	___aldiv@divisor+1,w,c
  4428  003046  582E               	subwfb	___aldiv@dividend+1,w,c
  4429  003048  5033               	movf	___aldiv@divisor+2,w,c
  4430  00304A  582F               	subwfb	___aldiv@dividend+2,w,c
  4431  00304C  5034               	movf	___aldiv@divisor+3,w,c
  4432  00304E  5830               	subwfb	___aldiv@dividend+3,w,c
  4433  003050  A0D8               	btfss	status,0,c
  4434  003052  D009               	goto	l7136
  4435  003054  5031               	movf	___aldiv@divisor,w,c
  4436  003056  5E2D               	subwf	___aldiv@dividend,f,c
  4437  003058  5032               	movf	___aldiv@divisor+1,w,c
  4438  00305A  5A2E               	subwfb	___aldiv@dividend+1,f,c
  4439  00305C  5033               	movf	___aldiv@divisor+2,w,c
  4440  00305E  5A2F               	subwfb	___aldiv@dividend+2,f,c
  4441  003060  5034               	movf	___aldiv@divisor+3,w,c
  4442  003062  5A30               	subwfb	___aldiv@dividend+3,f,c
  4443  003064  8037               	bsf	___aldiv@quotient,0,c
  4444  003066                     l7136:
  4445  003066  90D8               	bcf	status,0,c
  4446  003068  3234               	rrcf	___aldiv@divisor+3,f,c
  4447  00306A  3233               	rrcf	___aldiv@divisor+2,f,c
  4448  00306C  3232               	rrcf	___aldiv@divisor+1,f,c
  4449  00306E  3231               	rrcf	___aldiv@divisor,f,c
  4450  003070  2E35               	decfsz	___aldiv@counter,f,c
  4451  003072  D7E1               	goto	l7128
  4452  003074                     l7140:
  4453  003074  5036               	movf	___aldiv@sign,w,c
  4454  003076  B4D8               	btfsc	status,2,c
  4455  003078  D008               	goto	l7144
  4456  00307A  1E3A               	comf	___aldiv@quotient+3,f,c
  4457  00307C  1E39               	comf	___aldiv@quotient+2,f,c
  4458  00307E  1E38               	comf	___aldiv@quotient+1,f,c
  4459  003080  6C37               	negf	___aldiv@quotient,c
  4460  003082  0E00               	movlw	0
  4461  003084  2238               	addwfc	___aldiv@quotient+1,f,c
  4462  003086  2239               	addwfc	___aldiv@quotient+2,f,c
  4463  003088  223A               	addwfc	___aldiv@quotient+3,f,c
  4464  00308A                     l7144:
  4465  00308A  C037  F02D         	movff	___aldiv@quotient,?___aldiv
  4466  00308E  C038  F02E         	movff	___aldiv@quotient+1,?___aldiv+1
  4467  003092  C039  F02F         	movff	___aldiv@quotient+2,?___aldiv+2
  4468  003096  C03A  F030         	movff	___aldiv@quotient+3,?___aldiv+3
  4469  00309A  0012               	return	
  4470  00309C                     __end_of___aldiv:
  4471                           	opt stack 0
  4472                           tblptru	equ	0xFF8
  4473                           tblptrh	equ	0xFF7
  4474                           tblptrl	equ	0xFF6
  4475                           tablat	equ	0xFF5
  4476                           postinc0	equ	0xFEE
  4477                           wreg	equ	0xFE8
  4478                           postdec1	equ	0xFE5
  4479                           fsr1l	equ	0xFE1
  4480                           indf2	equ	0xFDF
  4481                           postinc2	equ	0xFDE
  4482                           postdec2	equ	0xFDD
  4483                           fsr2h	equ	0xFDA
  4484                           fsr2l	equ	0xFD9
  4485                           status	equ	0xFD8
  4486                           
  4487 ;; *************** function _showRunStats *****************
  4488 ;; Defined at:
  4489 ;;		line 119 in file "interface.c"
  4490 ;; Parameters:    Size  Location     Type
  4491 ;;  run             2  111[BANK0 ] PTR int 
  4492 ;;		 -> readPastRun@data(14), main@run(14), 
  4493 ;; Auto vars:     Size  Location     Type
  4494 ;;  n_OTHER         2    6[BANK1 ] int 
  4495 ;;  n_C             2    4[BANK1 ] int 
  4496 ;;  n_9V            2    2[BANK1 ] int 
  4497 ;;  n_AA            2    0[BANK1 ] int 
  4498 ;; Return value:  Size  Location     Type
  4499 ;;                  1    wreg      unsigned char 
  4500 ;; Registers used:
  4501 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4502 ;; Tracked objects:
  4503 ;;		On entry : 0/0
  4504 ;;		On exit  : 0/0
  4505 ;;		Unchanged: 0/0
  4506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4507 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4508 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4510 ;;      Totals:         0       2       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4511 ;;Total ram usage:       10 bytes
  4512 ;; Hardware stack levels used:    1
  4513 ;; Hardware stack levels required when called:    8
  4514 ;; This function calls:
  4515 ;;		_lcdClear
  4516 ;;		_printf
  4517 ;;		_readKeypad
  4518 ;; This function is called by:
  4519 ;;		_main
  4520 ;;		_showInterface
  4521 ;; This function uses a non-reentrant model
  4522 ;;
  4523                           
  4524                           	psect	text9
  4525  003386                     __ptext9:
  4526                           	opt stack 0
  4527  003386                     _showRunStats:
  4528                           	opt stack 22
  4529                           
  4530                           ;interface.c: 120: int n_AA = run[2], n_9V = run[3], n_C = run[4], n_OTHER = run[5];
  4531                           
  4532                           ;incstack = 0
  4533  003386  0100               	movlb	0	; () banked
  4534  003388  EE20 F004          	lfsr	2,4
  4535  00338C  51EF               	movf	showRunStats@run& (0+255),w,b
  4536  00338E  26D9               	addwf	fsr2l,f,c
  4537  003390  51F0               	movf	(showRunStats@run+1)& (0+255),w,b
  4538  003392  22DA               	addwfc	fsr2h,f,c
  4539  003394  CFDE F100          	movff	postinc2,showRunStats@n_AA
  4540  003398  CFDD F101          	movff	postdec2,showRunStats@n_AA+1
  4541  00339C  0100               	movlb	0	; () banked
  4542  00339E  EE20 F006          	lfsr	2,6
  4543  0033A2  51EF               	movf	showRunStats@run& (0+255),w,b
  4544  0033A4  26D9               	addwf	fsr2l,f,c
  4545  0033A6  51F0               	movf	(showRunStats@run+1)& (0+255),w,b
  4546  0033A8  22DA               	addwfc	fsr2h,f,c
  4547  0033AA  CFDE F102          	movff	postinc2,showRunStats@n_9V
  4548  0033AE  CFDD F103          	movff	postdec2,showRunStats@n_9V+1
  4549  0033B2  0100               	movlb	0	; () banked
  4550  0033B4  EE20 F008          	lfsr	2,8
  4551  0033B8  51EF               	movf	showRunStats@run& (0+255),w,b
  4552  0033BA  26D9               	addwf	fsr2l,f,c
  4553  0033BC  51F0               	movf	(showRunStats@run+1)& (0+255),w,b
  4554  0033BE  22DA               	addwfc	fsr2h,f,c
  4555  0033C0  CFDE F104          	movff	postinc2,showRunStats@n_C
  4556  0033C4  CFDD F105          	movff	postdec2,showRunStats@n_C+1
  4557  0033C8  0100               	movlb	0	; () banked
  4558  0033CA  EE20 F00A          	lfsr	2,10
  4559  0033CE  51EF               	movf	showRunStats@run& (0+255),w,b
  4560  0033D0  26D9               	addwf	fsr2l,f,c
  4561  0033D2  51F0               	movf	(showRunStats@run+1)& (0+255),w,b
  4562  0033D4  22DA               	addwfc	fsr2h,f,c
  4563  0033D6  CFDE F106          	movff	postinc2,showRunStats@n_OTHER
  4564  0033DA  CFDD F107          	movff	postdec2,showRunStats@n_OTHER+1
  4565                           
  4566                           ; BSR set to: 0
  4567                           ;interface.c: 122: lcdClear();
  4568  0033DE  ECD7  F01F         	call	_lcdClear	;wreg free
  4569                           
  4570                           ;interface.c: 123: printf("[AA,9V,C,other] \n");
  4571  0033E2  0E31               	movlw	low STR_19
  4572  0033E4  0100               	movlb	0	; () banked
  4573  0033E6  6FBD               	movwf	printf@f& (0+255),b
  4574  0033E8  0EFF               	movlw	high STR_19
  4575  0033EA  0100               	movlb	0	; () banked
  4576  0033EC  6FBE               	movwf	(printf@f+1)& (0+255),b
  4577  0033EE  EC09  F000         	call	_printf	;wreg free
  4578                           
  4579                           ;interface.c: 124: printf("[%d,%d,%d,%d]   *>",n_AA,n_9V,n_C,n_OTHER);
  4580  0033F2  0EFA               	movlw	low STR_20
  4581  0033F4  0100               	movlb	0	; () banked
  4582  0033F6  6FBD               	movwf	printf@f& (0+255),b
  4583  0033F8  0EFE               	movlw	high STR_20
  4584  0033FA  0100               	movlb	0	; () banked
  4585  0033FC  6FBE               	movwf	(printf@f+1)& (0+255),b
  4586  0033FE  C100  F0BF         	movff	showRunStats@n_AA,?_printf+2
  4587  003402  C101  F0C0         	movff	showRunStats@n_AA+1,?_printf+3
  4588  003406  C102  F0C1         	movff	showRunStats@n_9V,?_printf+4
  4589  00340A  C103  F0C2         	movff	showRunStats@n_9V+1,?_printf+5
  4590  00340E  C104  F0C3         	movff	showRunStats@n_C,?_printf+6
  4591  003412  C105  F0C4         	movff	showRunStats@n_C+1,?_printf+7
  4592  003416  C106  F0C5         	movff	showRunStats@n_OTHER,?_printf+8
  4593  00341A  C107  F0C6         	movff	showRunStats@n_OTHER+1,?_printf+9
  4594  00341E  EC09  F000         	call	_printf	;wreg free
  4595  003422                     l7244:
  4596  003422  ECFC  F01E         	call	_readKeypad	;wreg free
  4597  003426  0A2A               	xorlw	42
  4598  003428  B4D8               	btfsc	status,2,c
  4599  00342A  0012               	return	
  4600  00342C  D7FA               	goto	l7244
  4601  00342E                     __end_of_showRunStats:
  4602                           	opt stack 0
  4603                           tblptru	equ	0xFF8
  4604                           tblptrh	equ	0xFF7
  4605                           tblptrl	equ	0xFF6
  4606                           tablat	equ	0xFF5
  4607                           postinc0	equ	0xFEE
  4608                           wreg	equ	0xFE8
  4609                           postdec1	equ	0xFE5
  4610                           fsr1l	equ	0xFE1
  4611                           indf2	equ	0xFDF
  4612                           postinc2	equ	0xFDE
  4613                           postdec2	equ	0xFDD
  4614                           fsr2h	equ	0xFDA
  4615                           fsr2l	equ	0xFD9
  4616                           status	equ	0xFD8
  4617                           
  4618 ;; *************** function _showRunSelect *****************
  4619 ;; Defined at:
  4620 ;;		line 86 in file "interface.c"
  4621 ;; Parameters:    Size  Location     Type
  4622 ;;		None
  4623 ;; Auto vars:     Size  Location     Type
  4624 ;;  k               1  111[BANK0 ] unsigned char 
  4625 ;; Return value:  Size  Location     Type
  4626 ;;                  1    wreg      unsigned char 
  4627 ;; Registers used:
  4628 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4629 ;; Tracked objects:
  4630 ;;		On entry : 0/0
  4631 ;;		On exit  : 0/0
  4632 ;;		Unchanged: 0/0
  4633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4635 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4637 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4638 ;;Total ram usage:        1 bytes
  4639 ;; Hardware stack levels used:    1
  4640 ;; Hardware stack levels required when called:    8
  4641 ;; This function calls:
  4642 ;;		_lcdClear
  4643 ;;		_printf
  4644 ;;		_readKeypad
  4645 ;; This function is called by:
  4646 ;;		_showInterface
  4647 ;; This function uses a non-reentrant model
  4648 ;;
  4649                           
  4650                           	psect	text10
  4651  003988                     __ptext10:
  4652                           	opt stack 0
  4653  003988                     _showRunSelect:
  4654                           	opt stack 21
  4655                           
  4656                           ;interface.c: 87: lcdClear();
  4657                           
  4658                           ;incstack = 0
  4659  003988  ECD7  F01F         	call	_lcdClear	;wreg free
  4660                           
  4661                           ;interface.c: 88: printf("select run:     \n");
  4662  00398C  0E1F               	movlw	low STR_13
  4663  00398E  0100               	movlb	0	; () banked
  4664  003990  6FBD               	movwf	printf@f& (0+255),b
  4665  003992  0EFF               	movlw	high STR_13
  4666  003994  0100               	movlb	0	; () banked
  4667  003996  6FBE               	movwf	(printf@f+1)& (0+255),b
  4668  003998  EC09  F000         	call	_printf	;wreg free
  4669                           
  4670                           ;interface.c: 89: printf("[1,2,3,4]     *>");
  4671  00399C  0E65               	movlw	low STR_14
  4672  00399E  0100               	movlb	0	; () banked
  4673  0039A0  6FBD               	movwf	printf@f& (0+255),b
  4674  0039A2  0EFF               	movlw	high STR_14
  4675  0039A4  0100               	movlb	0	; () banked
  4676  0039A6  6FBE               	movwf	(printf@f+1)& (0+255),b
  4677  0039A8  EC09  F000         	call	_printf	;wreg free
  4678  0039AC                     l7386:
  4679  0039AC  ECFC  F01E         	call	_readKeypad	;wreg free
  4680  0039B0  0100               	movlb	0	; () banked
  4681  0039B2  6FEF               	movwf	showRunSelect@k& (0+255),b
  4682                           
  4683                           ; BSR set to: 0
  4684                           ;interface.c: 93: while(k != '1' && k != '2' && k != '3' && k != '4' && k != '*');
  4685  0039B4  0E31               	movlw	49
  4686  0039B6  0100               	movlb	0	; () banked
  4687  0039B8  19EF               	xorwf	showRunSelect@k& (0+255),w,b
  4688  0039BA  B4D8               	btfsc	status,2,c
  4689  0039BC  D014               	goto	l7398
  4690                           
  4691                           ; BSR set to: 0
  4692  0039BE  0E32               	movlw	50
  4693  0039C0  0100               	movlb	0	; () banked
  4694  0039C2  19EF               	xorwf	showRunSelect@k& (0+255),w,b
  4695  0039C4  B4D8               	btfsc	status,2,c
  4696  0039C6  D00F               	goto	l7398
  4697                           
  4698                           ; BSR set to: 0
  4699  0039C8  0E33               	movlw	51
  4700  0039CA  0100               	movlb	0	; () banked
  4701  0039CC  19EF               	xorwf	showRunSelect@k& (0+255),w,b
  4702  0039CE  B4D8               	btfsc	status,2,c
  4703  0039D0  D00A               	goto	l7398
  4704                           
  4705                           ; BSR set to: 0
  4706  0039D2  0E34               	movlw	52
  4707  0039D4  0100               	movlb	0	; () banked
  4708  0039D6  19EF               	xorwf	showRunSelect@k& (0+255),w,b
  4709  0039D8  B4D8               	btfsc	status,2,c
  4710  0039DA  D005               	goto	l7398
  4711                           
  4712                           ; BSR set to: 0
  4713  0039DC  0E2A               	movlw	42
  4714  0039DE  0100               	movlb	0	; () banked
  4715  0039E0  19EF               	xorwf	showRunSelect@k& (0+255),w,b
  4716  0039E2  A4D8               	btfss	status,2,c
  4717  0039E4  D7E3               	goto	l7386
  4718  0039E6                     l7398:
  4719                           
  4720                           ; BSR set to: 0
  4721                           ;interface.c: 94: return k;
  4722  0039E6  0100               	movlb	0	; () banked
  4723  0039E8  51EF               	movf	showRunSelect@k& (0+255),w,b
  4724  0039EA  0012               	return	
  4725  0039EC                     __end_of_showRunSelect:
  4726                           	opt stack 0
  4727                           tblptru	equ	0xFF8
  4728                           tblptrh	equ	0xFF7
  4729                           tblptrl	equ	0xFF6
  4730                           tablat	equ	0xFF5
  4731                           postinc0	equ	0xFEE
  4732                           wreg	equ	0xFE8
  4733                           postdec1	equ	0xFE5
  4734                           fsr1l	equ	0xFE1
  4735                           indf2	equ	0xFDF
  4736                           postinc2	equ	0xFDE
  4737                           postdec2	equ	0xFDD
  4738                           fsr2h	equ	0xFDA
  4739                           fsr2l	equ	0xFD9
  4740                           status	equ	0xFD8
  4741                           
  4742 ;; *************** function _showRunMenu *****************
  4743 ;; Defined at:
  4744 ;;		line 97 in file "interface.c"
  4745 ;; Parameters:    Size  Location     Type
  4746 ;;  key             1    wreg     unsigned char 
  4747 ;; Auto vars:     Size  Location     Type
  4748 ;;  key             1  111[BANK0 ] unsigned char 
  4749 ;;  k               1  112[BANK0 ] unsigned char 
  4750 ;; Return value:  Size  Location     Type
  4751 ;;                  1    wreg      unsigned char 
  4752 ;; Registers used:
  4753 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4754 ;; Tracked objects:
  4755 ;;		On entry : 0/0
  4756 ;;		On exit  : 0/0
  4757 ;;		Unchanged: 0/0
  4758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4760 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4762 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4763 ;;Total ram usage:        2 bytes
  4764 ;; Hardware stack levels used:    1
  4765 ;; Hardware stack levels required when called:    8
  4766 ;; This function calls:
  4767 ;;		_lcdClear
  4768 ;;		_printf
  4769 ;;		_readKeypad
  4770 ;; This function is called by:
  4771 ;;		_showInterface
  4772 ;; This function uses a non-reentrant model
  4773 ;;
  4774                           
  4775                           	psect	text11
  4776  0039EC                     __ptext11:
  4777                           	opt stack 0
  4778  0039EC                     _showRunMenu:
  4779                           	opt stack 21
  4780                           
  4781                           ; BSR set to: 0
  4782                           ;incstack = 0
  4783                           ;showRunMenu@key stored from wreg
  4784  0039EC  0100               	movlb	0	; () banked
  4785  0039EE  6FEF               	movwf	showRunMenu@key& (0+255),b
  4786                           
  4787                           ;interface.c: 98: lcdClear();
  4788  0039F0  ECD7  F01F         	call	_lcdClear	;wreg free
  4789                           
  4790                           ;interface.c: 99: printf("%c) time  <A     \n",key);
  4791  0039F4  0EE7               	movlw	low STR_15
  4792  0039F6  0100               	movlb	0	; () banked
  4793  0039F8  6FBD               	movwf	printf@f& (0+255),b
  4794  0039FA  0EFE               	movlw	high STR_15
  4795  0039FC  0100               	movlb	0	; () banked
  4796  0039FE  6FBE               	movwf	(printf@f+1)& (0+255),b
  4797  003A00  C0EF  F0BF         	movff	showRunMenu@key,?_printf+2
  4798  003A04  0100               	movlb	0	; () banked
  4799  003A06  6BC0               	clrf	(?_printf+3)& (0+255),b
  4800  003A08  EC09  F000         	call	_printf	;wreg free
  4801                           
  4802                           ;interface.c: 100: printf( "   stats <B   *>");
  4803  003A0C  0E87               	movlw	low STR_16
  4804  003A0E  0100               	movlb	0	; () banked
  4805  003A10  6FBD               	movwf	printf@f& (0+255),b
  4806  003A12  0EFF               	movlw	high STR_16
  4807  003A14  0100               	movlb	0	; () banked
  4808  003A16  6FBE               	movwf	(printf@f+1)& (0+255),b
  4809  003A18  EC09  F000         	call	_printf	;wreg free
  4810  003A1C                     l7416:
  4811  003A1C  ECFC  F01E         	call	_readKeypad	;wreg free
  4812  003A20  0100               	movlb	0	; () banked
  4813  003A22  6FF0               	movwf	showRunMenu@k& (0+255),b
  4814                           
  4815                           ; BSR set to: 0
  4816                           ;interface.c: 104: while(k != 'A' && k != 'B' && k != '*');
  4817  003A24  0E41               	movlw	65
  4818  003A26  0100               	movlb	0	; () banked
  4819  003A28  19F0               	xorwf	showRunMenu@k& (0+255),w,b
  4820  003A2A  B4D8               	btfsc	status,2,c
  4821  003A2C  D00A               	goto	l7424
  4822                           
  4823                           ; BSR set to: 0
  4824  003A2E  0E42               	movlw	66
  4825  003A30  0100               	movlb	0	; () banked
  4826  003A32  19F0               	xorwf	showRunMenu@k& (0+255),w,b
  4827  003A34  B4D8               	btfsc	status,2,c
  4828  003A36  D005               	goto	l7424
  4829                           
  4830                           ; BSR set to: 0
  4831  003A38  0E2A               	movlw	42
  4832  003A3A  0100               	movlb	0	; () banked
  4833  003A3C  19F0               	xorwf	showRunMenu@k& (0+255),w,b
  4834  003A3E  A4D8               	btfss	status,2,c
  4835  003A40  D7ED               	goto	l7416
  4836  003A42                     l7424:
  4837                           
  4838                           ; BSR set to: 0
  4839                           ;interface.c: 105: return k;
  4840  003A42  0100               	movlb	0	; () banked
  4841  003A44  51F0               	movf	showRunMenu@k& (0+255),w,b
  4842  003A46  0012               	return	
  4843  003A48                     __end_of_showRunMenu:
  4844                           	opt stack 0
  4845                           tblptru	equ	0xFF8
  4846                           tblptrh	equ	0xFF7
  4847                           tblptrl	equ	0xFF6
  4848                           tablat	equ	0xFF5
  4849                           postinc0	equ	0xFEE
  4850                           wreg	equ	0xFE8
  4851                           postdec1	equ	0xFE5
  4852                           fsr1l	equ	0xFE1
  4853                           indf2	equ	0xFDF
  4854                           postinc2	equ	0xFDE
  4855                           postdec2	equ	0xFDD
  4856                           fsr2h	equ	0xFDA
  4857                           fsr2l	equ	0xFD9
  4858                           status	equ	0xFD8
  4859                           
  4860 ;; *************** function _showMainMenu *****************
  4861 ;; Defined at:
  4862 ;;		line 75 in file "interface.c"
  4863 ;; Parameters:    Size  Location     Type
  4864 ;;		None
  4865 ;; Auto vars:     Size  Location     Type
  4866 ;;  k               1  111[BANK0 ] unsigned char 
  4867 ;; Return value:  Size  Location     Type
  4868 ;;                  1    wreg      unsigned char 
  4869 ;; Registers used:
  4870 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4871 ;; Tracked objects:
  4872 ;;		On entry : 0/0
  4873 ;;		On exit  : 0/0
  4874 ;;		Unchanged: 0/0
  4875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4877 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4879 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4880 ;;Total ram usage:        1 bytes
  4881 ;; Hardware stack levels used:    1
  4882 ;; Hardware stack levels required when called:    8
  4883 ;; This function calls:
  4884 ;;		_lcdClear
  4885 ;;		_printf
  4886 ;;		_readKeypad
  4887 ;; This function is called by:
  4888 ;;		_showInterface
  4889 ;; This function uses a non-reentrant model
  4890 ;;
  4891                           
  4892                           	psect	text12
  4893  003B54                     __ptext12:
  4894                           	opt stack 0
  4895  003B54                     _showMainMenu:
  4896                           	opt stack 21
  4897                           
  4898                           ;interface.c: 76: lcdClear();
  4899                           
  4900                           ; BSR set to: 0
  4901                           ;incstack = 0
  4902  003B54  ECD7  F01F         	call	_lcdClear	;wreg free
  4903                           
  4904                           ;interface.c: 77: printf("start   <B      \n");
  4905  003B58  0E0D               	movlw	low STR_11
  4906  003B5A  0100               	movlb	0	; () banked
  4907  003B5C  6FBD               	movwf	printf@f& (0+255),b
  4908  003B5E  0EFF               	movlw	high STR_11
  4909  003B60  0100               	movlb	0	; () banked
  4910  003B62  6FBE               	movwf	(printf@f+1)& (0+255),b
  4911  003B64  EC09  F000         	call	_printf	;wreg free
  4912                           
  4913                           ;interface.c: 78: printf("history <C    *>");
  4914  003B68  0E76               	movlw	low STR_12
  4915  003B6A  0100               	movlb	0	; () banked
  4916  003B6C  6FBD               	movwf	printf@f& (0+255),b
  4917  003B6E  0EFF               	movlw	high STR_12
  4918  003B70  0100               	movlb	0	; () banked
  4919  003B72  6FBE               	movwf	(printf@f+1)& (0+255),b
  4920  003B74  EC09  F000         	call	_printf	;wreg free
  4921  003B78                     l7368:
  4922  003B78  ECFC  F01E         	call	_readKeypad	;wreg free
  4923  003B7C  0100               	movlb	0	; () banked
  4924  003B7E  6FEF               	movwf	showMainMenu@k& (0+255),b
  4925                           
  4926                           ; BSR set to: 0
  4927                           ;interface.c: 82: while(k != 'B' && k != 'C' && k != '*');
  4928  003B80  0E42               	movlw	66
  4929  003B82  0100               	movlb	0	; () banked
  4930  003B84  19EF               	xorwf	showMainMenu@k& (0+255),w,b
  4931  003B86  B4D8               	btfsc	status,2,c
  4932  003B88  D00A               	goto	l7376
  4933                           
  4934                           ; BSR set to: 0
  4935  003B8A  0E43               	movlw	67
  4936  003B8C  0100               	movlb	0	; () banked
  4937  003B8E  19EF               	xorwf	showMainMenu@k& (0+255),w,b
  4938  003B90  B4D8               	btfsc	status,2,c
  4939  003B92  D005               	goto	l7376
  4940                           
  4941                           ; BSR set to: 0
  4942  003B94  0E2A               	movlw	42
  4943  003B96  0100               	movlb	0	; () banked
  4944  003B98  19EF               	xorwf	showMainMenu@k& (0+255),w,b
  4945  003B9A  A4D8               	btfss	status,2,c
  4946  003B9C  D7ED               	goto	l7368
  4947  003B9E                     l7376:
  4948                           
  4949                           ; BSR set to: 0
  4950                           ;interface.c: 83: return k;
  4951  003B9E  0100               	movlb	0	; () banked
  4952  003BA0  51EF               	movf	showMainMenu@k& (0+255),w,b
  4953  003BA2  0012               	return	
  4954  003BA4                     __end_of_showMainMenu:
  4955                           	opt stack 0
  4956                           tblptru	equ	0xFF8
  4957                           tblptrh	equ	0xFF7
  4958                           tblptrl	equ	0xFF6
  4959                           tablat	equ	0xFF5
  4960                           postinc0	equ	0xFEE
  4961                           wreg	equ	0xFE8
  4962                           postdec1	equ	0xFE5
  4963                           fsr1l	equ	0xFE1
  4964                           indf2	equ	0xFDF
  4965                           postinc2	equ	0xFDE
  4966                           postdec2	equ	0xFDD
  4967                           fsr2h	equ	0xFDA
  4968                           fsr2l	equ	0xFD9
  4969                           status	equ	0xFD8
  4970                           
  4971 ;; *************** function _showErrorMessage *****************
  4972 ;; Defined at:
  4973 ;;		line 129 in file "interface.c"
  4974 ;; Parameters:    Size  Location     Type
  4975 ;;		None
  4976 ;; Auto vars:     Size  Location     Type
  4977 ;;		None
  4978 ;; Return value:  Size  Location     Type
  4979 ;;                  1    wreg      void 
  4980 ;; Registers used:
  4981 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4982 ;; Tracked objects:
  4983 ;;		On entry : 0/0
  4984 ;;		On exit  : 0/0
  4985 ;;		Unchanged: 0/0
  4986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4990 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4991 ;;Total ram usage:        0 bytes
  4992 ;; Hardware stack levels used:    1
  4993 ;; Hardware stack levels required when called:    8
  4994 ;; This function calls:
  4995 ;;		_lcdClear
  4996 ;;		_printf
  4997 ;;		_readKeypad
  4998 ;; This function is called by:
  4999 ;;		_showInterface
  5000 ;; This function uses a non-reentrant model
  5001 ;;
  5002                           
  5003                           	psect	text13
  5004  003DC8                     __ptext13:
  5005                           	opt stack 0
  5006  003DC8                     _showErrorMessage:
  5007                           	opt stack 21
  5008                           
  5009                           ;interface.c: 130: lcdClear();
  5010                           
  5011                           ; BSR set to: 0
  5012                           ;incstack = 0
  5013  003DC8  ECD7  F01F         	call	_lcdClear	;wreg free
  5014                           
  5015                           ;interface.c: 132: printf(" run not \n");
  5016  003DCC  0EB9               	movlw	low STR_21
  5017  003DCE  0100               	movlb	0	; () banked
  5018  003DD0  6FBD               	movwf	printf@f& (0+255),b
  5019  003DD2  0EFF               	movlw	high STR_21
  5020  003DD4  0100               	movlb	0	; () banked
  5021  003DD6  6FBE               	movwf	(printf@f+1)& (0+255),b
  5022  003DD8  EC09  F000         	call	_printf	;wreg free
  5023                           
  5024                           ;interface.c: 133: printf("  available   *>");
  5025  003DDC  0E98               	movlw	low STR_22
  5026  003DDE  0100               	movlb	0	; () banked
  5027  003DE0  6FBD               	movwf	printf@f& (0+255),b
  5028  003DE2  0EFF               	movlw	high STR_22
  5029  003DE4  0100               	movlb	0	; () banked
  5030  003DE6  6FBE               	movwf	(printf@f+1)& (0+255),b
  5031  003DE8  EC09  F000         	call	_printf	;wreg free
  5032  003DEC                     l7408:
  5033  003DEC  ECFC  F01E         	call	_readKeypad	;wreg free
  5034  003DF0  0A2A               	xorlw	42
  5035  003DF2  B4D8               	btfsc	status,2,c
  5036  003DF4  0012               	return	
  5037  003DF6  D7FA               	goto	l7408
  5038  003DF8                     __end_of_showErrorMessage:
  5039                           	opt stack 0
  5040                           tblptru	equ	0xFF8
  5041                           tblptrh	equ	0xFF7
  5042                           tblptrl	equ	0xFF6
  5043                           tablat	equ	0xFF5
  5044                           postinc0	equ	0xFEE
  5045                           wreg	equ	0xFE8
  5046                           postdec1	equ	0xFE5
  5047                           fsr1l	equ	0xFE1
  5048                           indf2	equ	0xFDF
  5049                           postinc2	equ	0xFDE
  5050                           postdec2	equ	0xFDD
  5051                           fsr2h	equ	0xFDA
  5052                           fsr2l	equ	0xFD9
  5053                           status	equ	0xFD8
  5054                           
  5055 ;; *************** function _readKeypad *****************
  5056 ;; Defined at:
  5057 ;;		line 36 in file "keypad.c"
  5058 ;; Parameters:    Size  Location     Type
  5059 ;;		None
  5060 ;; Auto vars:     Size  Location     Type
  5061 ;;  key             1   34[COMRAM] unsigned char 
  5062 ;; Return value:  Size  Location     Type
  5063 ;;                  1    wreg      unsigned char 
  5064 ;; Registers used:
  5065 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  5066 ;; Tracked objects:
  5067 ;;		On entry : 0/0
  5068 ;;		On exit  : 0/0
  5069 ;;		Unchanged: 0/0
  5070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5072 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5074 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5075 ;;Total ram usage:        1 bytes
  5076 ;; Hardware stack levels used:    1
  5077 ;; Hardware stack levels required when called:    3
  5078 ;; This function calls:
  5079 ;;		Nothing
  5080 ;; This function is called by:
  5081 ;;		_sortBattery
  5082 ;;		_showMainMenu
  5083 ;;		_showRunSelect
  5084 ;;		_showRunMenu
  5085 ;;		_showRunTime
  5086 ;;		_showRunStats
  5087 ;;		_showErrorMessage
  5088 ;;		_debug
  5089 ;;		_pause
  5090 ;; This function uses a non-reentrant model
  5091 ;;
  5092                           
  5093                           	psect	text14
  5094  003DF8                     __ptext14:
  5095                           	opt stack 0
  5096  003DF8                     _readKeypad:
  5097                           	opt stack 26
  5098  003DF8                     l262:
  5099  003DF8  A281               	btfss	3969,1,c	;volatile
  5100  003DFA  D7FE               	goto	l262
  5101                           
  5102                           ;keypad.c: 38: char key = (PORTB & 0xF0) >> 4;
  5103  003DFC  3881               	swapf	3969,w,c	;volatile
  5104  003DFE  0B0F               	andlw	15
  5105  003E00  0B0F               	andlw	15
  5106  003E02  6E23               	movwf	readKeypad@key,c
  5107  003E04                     l265:
  5108  003E04  B281               	btfsc	3969,1,c	;volatile
  5109  003E06  D7FE               	goto	l265
  5110                           
  5111                           ;keypad.c: 40: return keys[key];
  5112  003E08  5023               	movf	readKeypad@key,w,c
  5113  003E0A  0D01               	mullw	1
  5114  003E0C  0E75               	movlw	low _keys
  5115  003E0E  24F3               	addwf	prodl,w,c
  5116  003E10  6EF6               	movwf	tblptrl,c
  5117  003E12  0EFE               	movlw	high _keys
  5118  003E14  20F4               	addwfc	prodh,w,c
  5119  003E16  6EF7               	movwf	tblptrh,c
  5120  003E18                     	if	0	;There are less than 3 active tblptr bytes
  5121  003E18                     	endif
  5122  003E18  0008               	tblrd		*
  5123  003E1A  50F5               	movf	tablat,w,c
  5124  003E1C  0012               	return	
  5125  003E1E                     __end_of_readKeypad:
  5126                           	opt stack 0
  5127                           tblptru	equ	0xFF8
  5128                           tblptrh	equ	0xFF7
  5129                           tblptrl	equ	0xFF6
  5130                           tablat	equ	0xFF5
  5131                           prodh	equ	0xFF4
  5132                           prodl	equ	0xFF3
  5133                           postinc0	equ	0xFEE
  5134                           wreg	equ	0xFE8
  5135                           postdec1	equ	0xFE5
  5136                           fsr1l	equ	0xFE1
  5137                           indf2	equ	0xFDF
  5138                           postinc2	equ	0xFDE
  5139                           postdec2	equ	0xFDD
  5140                           fsr2h	equ	0xFDA
  5141                           fsr2l	equ	0xFD9
  5142                           status	equ	0xFD8
  5143                           
  5144 ;; *************** function _showDateTime *****************
  5145 ;; Defined at:
  5146 ;;		line 59 in file "interface.c"
  5147 ;; Parameters:    Size  Location     Type
  5148 ;;		None
  5149 ;; Auto vars:     Size  Location     Type
  5150 ;;  t               2   12[BANK1 ] PTR int 
  5151 ;;		 -> getTime@time(14), 
  5152 ;;  year            2   10[BANK1 ] int 
  5153 ;;  mon             2    8[BANK1 ] int 
  5154 ;;  day             2    6[BANK1 ] int 
  5155 ;;  hour            2    4[BANK1 ] int 
  5156 ;;  min             2    2[BANK1 ] int 
  5157 ;;  sec             2    0[BANK1 ] int 
  5158 ;; Return value:  Size  Location     Type
  5159 ;;                  1    wreg      void 
  5160 ;; Registers used:
  5161 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5162 ;; Tracked objects:
  5163 ;;		On entry : 0/0
  5164 ;;		On exit  : 0/0
  5165 ;;		Unchanged: 0/0
  5166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5168 ;;      Locals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5169 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5170 ;;      Totals:         0       2      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5171 ;;Total ram usage:       16 bytes
  5172 ;; Hardware stack levels used:    1
  5173 ;; Hardware stack levels required when called:    8
  5174 ;; This function calls:
  5175 ;;		_getTime
  5176 ;;		_initRTC
  5177 ;;		_keyPressed
  5178 ;;		_lcdClear
  5179 ;;		_lcdHome
  5180 ;;		_printf
  5181 ;; This function is called by:
  5182 ;;		_showInterface
  5183 ;; This function uses a non-reentrant model
  5184 ;;
  5185                           
  5186                           	psect	text15
  5187  00276A                     __ptext15:
  5188                           	opt stack 0
  5189  00276A                     _showDateTime:
  5190                           	opt stack 21
  5191                           
  5192                           ;interface.c: 60: lcdClear();
  5193                           
  5194                           ;incstack = 0
  5195  00276A  ECD7  F01F         	call	_lcdClear	;wreg free
  5196                           
  5197                           ;interface.c: 61: initRTC();
  5198  00276E  ECB0  F01F         	call	_initRTC	;wreg free
  5199                           
  5200                           ;interface.c: 63: while(keyPressed() != 'A'){
  5201  002772  D07D               	goto	l7360
  5202  002774                     l7338:
  5203                           
  5204                           ;interface.c: 64: int* t = getTime();
  5205  002774  EC71  F01B         	call	_getTime	;wreg free
  5206  002778  C026  F10C         	movff	?_getTime,showDateTime@t
  5207  00277C  C027  F10D         	movff	?_getTime+1,showDateTime@t+1
  5208                           
  5209                           ;interface.c: 65: int sec = t[0], min = t[1], hour = t[2];
  5210  002780  C10C  FFD9         	movff	showDateTime@t,fsr2l
  5211  002784  C10D  FFDA         	movff	showDateTime@t+1,fsr2h
  5212  002788  CFDE F100          	movff	postinc2,showDateTime@sec
  5213  00278C  CFDD F101          	movff	postdec2,showDateTime@sec+1
  5214  002790  0101               	movlb	1	; () banked
  5215  002792  EE20 F002          	lfsr	2,2
  5216  002796  510C               	movf	showDateTime@t& (0+255),w,b
  5217  002798  26D9               	addwf	fsr2l,f,c
  5218  00279A  510D               	movf	(showDateTime@t+1)& (0+255),w,b
  5219  00279C  22DA               	addwfc	fsr2h,f,c
  5220  00279E  CFDE F102          	movff	postinc2,showDateTime@min
  5221  0027A2  CFDD F103          	movff	postdec2,showDateTime@min+1
  5222                           
  5223                           ; BSR set to: 1
  5224  0027A6  0101               	movlb	1	; () banked
  5225  0027A8  EE20 F004          	lfsr	2,4
  5226  0027AC  510C               	movf	showDateTime@t& (0+255),w,b
  5227  0027AE  26D9               	addwf	fsr2l,f,c
  5228  0027B0  510D               	movf	(showDateTime@t+1)& (0+255),w,b
  5229  0027B2  22DA               	addwfc	fsr2h,f,c
  5230  0027B4  CFDE F104          	movff	postinc2,showDateTime@hour
  5231  0027B8  CFDD F105          	movff	postdec2,showDateTime@hour+1
  5232                           
  5233                           ; BSR set to: 1
  5234                           ;interface.c: 66: int day = t[4], mon = t[5], year = t[6];
  5235  0027BC  0101               	movlb	1	; () banked
  5236  0027BE  EE20 F008          	lfsr	2,8
  5237  0027C2  510C               	movf	showDateTime@t& (0+255),w,b
  5238  0027C4  26D9               	addwf	fsr2l,f,c
  5239  0027C6  510D               	movf	(showDateTime@t+1)& (0+255),w,b
  5240  0027C8  22DA               	addwfc	fsr2h,f,c
  5241  0027CA  CFDE F106          	movff	postinc2,showDateTime@day
  5242  0027CE  CFDD F107          	movff	postdec2,showDateTime@day+1
  5243                           
  5244                           ; BSR set to: 1
  5245  0027D2  0101               	movlb	1	; () banked
  5246  0027D4  EE20 F00A          	lfsr	2,10
  5247  0027D8  510C               	movf	showDateTime@t& (0+255),w,b
  5248  0027DA  26D9               	addwf	fsr2l,f,c
  5249  0027DC  510D               	movf	(showDateTime@t+1)& (0+255),w,b
  5250  0027DE  22DA               	addwfc	fsr2h,f,c
  5251  0027E0  CFDE F108          	movff	postinc2,showDateTime@mon
  5252  0027E4  CFDD F109          	movff	postdec2,showDateTime@mon+1
  5253                           
  5254                           ; BSR set to: 1
  5255  0027E8  0101               	movlb	1	; () banked
  5256  0027EA  EE20 F00C          	lfsr	2,12
  5257  0027EE  510C               	movf	showDateTime@t& (0+255),w,b
  5258  0027F0  26D9               	addwf	fsr2l,f,c
  5259  0027F2  510D               	movf	(showDateTime@t+1)& (0+255),w,b
  5260  0027F4  22DA               	addwfc	fsr2h,f,c
  5261  0027F6  CFDE F10A          	movff	postinc2,showDateTime@year
  5262  0027FA  CFDD F10B          	movff	postdec2,showDateTime@year+1
  5263                           
  5264                           ; BSR set to: 1
  5265                           ;interface.c: 68: printf("  20%02x/%02x/%02x\n",year,mon,day);
  5266  0027FE  0ED3               	movlw	low STR_9
  5267  002800  0100               	movlb	0	; () banked
  5268  002802  6FBD               	movwf	printf@f& (0+255),b
  5269  002804  0EFE               	movlw	high STR_9
  5270  002806  0100               	movlb	0	; () banked
  5271  002808  6FBE               	movwf	(printf@f+1)& (0+255),b
  5272  00280A  C10A  F0BF         	movff	showDateTime@year,?_printf+2
  5273  00280E  C10B  F0C0         	movff	showDateTime@year+1,?_printf+3
  5274  002812  C108  F0C1         	movff	showDateTime@mon,?_printf+4
  5275  002816  C109  F0C2         	movff	showDateTime@mon+1,?_printf+5
  5276  00281A  C106  F0C3         	movff	showDateTime@day,?_printf+6
  5277  00281E  C107  F0C4         	movff	showDateTime@day+1,?_printf+7
  5278  002822  EC09  F000         	call	_printf	;wreg free
  5279                           
  5280                           ;interface.c: 69: lcdHome();
  5281  002826  ECD3  F01F         	call	_lcdHome	;wreg free
  5282                           
  5283                           ;interface.c: 70: printf("   %02x:%02x:%02x   A>",hour,min,sec);
  5284  00282A  0EA5               	movlw	low STR_10
  5285  00282C  0100               	movlb	0	; () banked
  5286  00282E  6FBD               	movwf	printf@f& (0+255),b
  5287  002830  0EFE               	movlw	high STR_10
  5288  002832  0100               	movlb	0	; () banked
  5289  002834  6FBE               	movwf	(printf@f+1)& (0+255),b
  5290  002836  C104  F0BF         	movff	showDateTime@hour,?_printf+2
  5291  00283A  C105  F0C0         	movff	showDateTime@hour+1,?_printf+3
  5292  00283E  C102  F0C1         	movff	showDateTime@min,?_printf+4
  5293  002842  C103  F0C2         	movff	showDateTime@min+1,?_printf+5
  5294  002846  C100  F0C3         	movff	showDateTime@sec,?_printf+6
  5295  00284A  C101  F0C4         	movff	showDateTime@sec+1,?_printf+7
  5296  00284E  EC09  F000         	call	_printf	;wreg free
  5297                           
  5298                           ;interface.c: 71: _delay((unsigned long)((100)*(10000000/4000.0)));
  5299  002852  0E02               	movlw	2
  5300  002854  0100               	movlb	0	; () banked
  5301  002856  6FF0               	movwf	(??_showDateTime+1)& (0+255),b
  5302  002858  0E45               	movlw	69
  5303  00285A  0100               	movlb	0	; () banked
  5304  00285C  6FEF               	movwf	??_showDateTime& (0+255),b
  5305  00285E  0EA9               	movlw	169
  5306  002860                     u8147:
  5307  002860  2EE8               	decfsz	wreg,f,c
  5308  002862  D7FE               	bra	u8147
  5309  002864  2FEF               	decfsz	??_showDateTime& (0+255),f,b
  5310  002866  D7FC               	bra	u8147
  5311  002868  2FF0               	decfsz	(??_showDateTime+1)& (0+255),f,b
  5312  00286A  D7FA               	bra	u8147
  5313  00286C  D000               	nop2	
  5314  00286E                     l7360:
  5315  00286E  ECC4  F01F         	call	_keyPressed	;wreg free
  5316  002872  0A41               	xorlw	65
  5317  002874  B4D8               	btfsc	status,2,c
  5318  002876  0012               	return	
  5319  002878  D77D               	goto	l7338
  5320  00287A                     __end_of_showDateTime:
  5321                           	opt stack 0
  5322                           tblptru	equ	0xFF8
  5323                           tblptrh	equ	0xFF7
  5324                           tblptrl	equ	0xFF6
  5325                           tablat	equ	0xFF5
  5326                           prodh	equ	0xFF4
  5327                           prodl	equ	0xFF3
  5328                           postinc0	equ	0xFEE
  5329                           wreg	equ	0xFE8
  5330                           postdec1	equ	0xFE5
  5331                           fsr1l	equ	0xFE1
  5332                           indf2	equ	0xFDF
  5333                           postinc2	equ	0xFDE
  5334                           postdec2	equ	0xFDD
  5335                           fsr2h	equ	0xFDA
  5336                           fsr2l	equ	0xFD9
  5337                           status	equ	0xFD8
  5338                           
  5339 ;; *************** function _printf *****************
  5340 ;; Defined at:
  5341 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  5342 ;; Parameters:    Size  Location     Type
  5343 ;;  f               2   61[BANK0 ] PTR const unsigned char 
  5344 ;;		 -> STR_22(17), STR_21(11), STR_20(19), STR_19(18), 
  5345 ;;		 -> STR_18(17), STR_17(24), STR_16(17), STR_15(19), 
  5346 ;;		 -> STR_14(17), STR_13(18), STR_12(17), STR_11(18), 
  5347 ;;		 -> STR_10(23), STR_9(20), STR_8(8), STR_7(11), 
  5348 ;;		 -> STR_6(11), STR_5(11), STR_4(16), STR_3(23), 
  5349 ;;		 -> STR_2(8), STR_1(9), 
  5350 ;; Auto vars:     Size  Location     Type
  5351 ;;  idx             1   84[BANK0 ] unsigned char 
  5352 ;;  val             4  100[BANK0 ] unsigned long 
  5353 ;;  tmpval          4   91[BANK0 ] struct .
  5354 ;;  fval            3   97[BANK0 ] struct .
  5355 ;;  prec            2  108[BANK0 ] int 
  5356 ;;  flag            2  106[BANK0 ] unsigned short 
  5357 ;;  width           2  104[BANK0 ] int 
  5358 ;;  exp             2   95[BANK0 ] int 
  5359 ;;  ap              2   89[BANK0 ] PTR void [1]
  5360 ;;		 -> ?_printf(2), 
  5361 ;;  len             2   87[BANK0 ] unsigned int 
  5362 ;;  cp              2   85[BANK0 ] PTR const unsigned char 
  5363 ;;		 -> printf@c(1), 
  5364 ;;  c               1  110[BANK0 ] char 
  5365 ;;  d               1    0        unsigned char 
  5366 ;; Return value:  Size  Location     Type
  5367 ;;                  2   61[BANK0 ] int 
  5368 ;; Registers used:
  5369 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5370 ;; Tracked objects:
  5371 ;;		On entry : 0/0
  5372 ;;		On exit  : 0/0
  5373 ;;		Unchanged: 0/0
  5374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5375 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5376 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5377 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5378 ;;      Totals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5379 ;;Total ram usage:       50 bytes
  5380 ;; Hardware stack levels used:    1
  5381 ;; Hardware stack levels required when called:    7
  5382 ;; This function calls:
  5383 ;;		___awdiv
  5384 ;;		___ftadd
  5385 ;;		___ftge
  5386 ;;		___ftmul
  5387 ;;		___ftneg
  5388 ;;		___ftsub
  5389 ;;		___fttol
  5390 ;;		___lldiv
  5391 ;;		___llmod
  5392 ;;		___lltoft
  5393 ;;		___wmul
  5394 ;;		__div_to_l_
  5395 ;;		__tdiv_to_l_
  5396 ;;		_fround
  5397 ;;		_isdigit
  5398 ;;		_putch
  5399 ;;		_scale
  5400 ;; This function is called by:
  5401 ;;		_main
  5402 ;;		_sortBattery
  5403 ;;		_showDateTime
  5404 ;;		_showMainMenu
  5405 ;;		_showRunSelect
  5406 ;;		_showRunMenu
  5407 ;;		_showRunTime
  5408 ;;		_showRunStats
  5409 ;;		_showErrorMessage
  5410 ;;		_debug
  5411 ;;		_pause
  5412 ;;		_testFrequency
  5413 ;; This function uses a non-reentrant model
  5414 ;;
  5415                           
  5416                           	psect	text16
  5417  000012                     __ptext16:
  5418                           	opt stack 0
  5419  000012                     _printf:
  5420                           	opt stack 22
  5421                           
  5422                           ;doprnt.c: 466: va_list ap;
  5423                           ;doprnt.c: 499: signed char c;
  5424                           ;doprnt.c: 501: int width;
  5425                           ;doprnt.c: 504: int prec;
  5426                           ;doprnt.c: 508: unsigned short flag;
  5427                           ;doprnt.c: 515: char d;
  5428                           ;doprnt.c: 516: double fval;
  5429                           ;doprnt.c: 517: int exp;
  5430                           ;doprnt.c: 523: union {
  5431                           ;doprnt.c: 524: unsigned long vd;
  5432                           ;doprnt.c: 525: double integ;
  5433                           ;doprnt.c: 526: } tmpval;
  5434                           ;doprnt.c: 528: unsigned long val;
  5435                           ;doprnt.c: 529: unsigned len;
  5436                           ;doprnt.c: 530: const char * cp;
  5437                           ;doprnt.c: 533: *ap = __va_start();
  5438                           
  5439                           ;incstack = 0
  5440  000012  0EBF               	movlw	low (?_printf+2)
  5441  000014  0100               	movlb	0	; () banked
  5442  000016  6FD9               	movwf	printf@ap& (0+255),b
  5443  000018  0E00               	movlw	high (?_printf+2)
  5444  00001A  0100               	movlb	0	; () banked
  5445  00001C  6FDA               	movwf	(printf@ap+1)& (0+255),b
  5446                           
  5447                           ;doprnt.c: 536: while(c = *f++) {
  5448  00001E  EFF5  F006         	goto	l7052
  5449  000022                     l6686:
  5450                           
  5451                           ; BSR set to: 0
  5452                           ;doprnt.c: 538: if(c != '%')
  5453  000022  0E25               	movlw	37
  5454  000024  0100               	movlb	0	; () banked
  5455  000026  19EE               	xorwf	printf@c& (0+255),w,b
  5456  000028  B4D8               	btfsc	status,2,c
  5457  00002A  D006               	goto	l6690
  5458                           
  5459                           ; BSR set to: 0
  5460                           ;doprnt.c: 540: {
  5461                           ;doprnt.c: 541: (putch(c) );
  5462  00002C  0100               	movlb	0	; () banked
  5463  00002E  51EE               	movf	printf@c& (0+255),w,b
  5464  000030  EC47  F01F         	call	_putch
  5465                           
  5466                           ;doprnt.c: 542: continue;
  5467  000034  EFF5  F006         	goto	l7052
  5468  000038                     l6690:
  5469                           
  5470                           ;doprnt.c: 543: }
  5471                           ;doprnt.c: 546: width = 0;
  5472  000038  0E00               	movlw	0
  5473  00003A  0100               	movlb	0	; () banked
  5474  00003C  6FE9               	movwf	(printf@width+1)& (0+255),b
  5475  00003E  0E00               	movlw	0
  5476  000040  6FE8               	movwf	printf@width& (0+255),b
  5477                           
  5478                           ;doprnt.c: 548: flag = 0;
  5479  000042  0E00               	movlw	0
  5480  000044  0100               	movlb	0	; () banked
  5481  000046  6FEB               	movwf	(printf@flag+1)& (0+255),b
  5482  000048  0E00               	movlw	0
  5483  00004A  6FEA               	movwf	printf@flag& (0+255),b
  5484                           
  5485                           ; BSR set to: 0
  5486                           ;doprnt.c: 551: switch(*f) {
  5487                           
  5488                           ;doprnt.c: 550: for(;;) {
  5489  00004C  D005               	goto	l6696
  5490  00004E                     l6692:
  5491                           
  5492                           ;doprnt.c: 580: flag |= 0x04;
  5493  00004E  0100               	movlb	0	; () banked
  5494  000050  85EA               	bsf	printf@flag& (0+255),2,b
  5495                           
  5496                           ;doprnt.c: 581: f++;
  5497  000052  0100               	movlb	0	; () banked
  5498  000054  4BBD               	infsnz	printf@f& (0+255),f,b
  5499  000056  2BBE               	incf	(printf@f+1)& (0+255),f,b
  5500  000058                     l6696:
  5501  000058  C0BD  FFF6         	movff	printf@f,tblptrl
  5502  00005C  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5503  000060                     	if	0	;tblptru may be non-zero
  5504  000060                     	endif
  5505  000060                     	if	0	;tblptru may be non-zero
  5506  000060                     	endif
  5507  000060  0008               	tblrd		*
  5508  000062  50F5               	movf	tablat,w,c
  5509                           
  5510                           ; Switch size 1, requested type "space"
  5511                           ; Number of cases is 1, Range of values is 48 to 48
  5512                           ; switch strategies available:
  5513                           ; Name         Instructions Cycles
  5514                           ; simple_byte            4     3 (average)
  5515                           ;	Chosen strategy is simple_byte
  5516  000064  0A30               	xorlw	48	; case 48
  5517  000066  B4D8               	btfsc	status,2,c
  5518  000068  D7F2               	goto	l6692
  5519                           
  5520                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5521                           
  5522                           ;doprnt.c: 586: }
  5523                           
  5524                           ;doprnt.c: 585: break;
  5525  00006A  C0BD  FFF6         	movff	printf@f,tblptrl
  5526  00006E  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5527  000072                     	if	0	;tblptru may be non-zero
  5528  000072                     	endif
  5529  000072                     	if	0	;tblptru may be non-zero
  5530  000072                     	endif
  5531  000072  0008               	tblrd		*
  5532  000074  50F5               	movf	tablat,w,c
  5533  000076  EC88  F01F         	call	_isdigit
  5534  00007A  A0D8               	btfss	status,0,c
  5535  00007C  D03F               	goto	l6710
  5536                           
  5537                           ;doprnt.c: 598: width = 0;
  5538  00007E  0E00               	movlw	0
  5539  000080  0100               	movlb	0	; () banked
  5540  000082  6FE9               	movwf	(printf@width+1)& (0+255),b
  5541  000084  0E00               	movlw	0
  5542  000086  6FE8               	movwf	printf@width& (0+255),b
  5543  000088                     l6702:
  5544                           
  5545                           ;doprnt.c: 600: width *= 10;
  5546  000088  C0E8  F031         	movff	printf@width,___wmul@multiplier
  5547  00008C  C0E9  F032         	movff	printf@width+1,___wmul@multiplier+1
  5548  000090  0E00               	movlw	0
  5549  000092  6E34               	movwf	___wmul@multiplicand+1,c
  5550  000094  0E0A               	movlw	10
  5551  000096  6E33               	movwf	___wmul@multiplicand,c
  5552  000098  EC22  F01F         	call	___wmul	;wreg free
  5553  00009C  C031  F0E8         	movff	?___wmul,printf@width
  5554  0000A0  C032  F0E9         	movff	?___wmul+1,printf@width+1
  5555                           
  5556                           ;doprnt.c: 601: width += *f++ - '0';
  5557  0000A4  0ED0               	movlw	208
  5558  0000A6  0100               	movlb	0	; () banked
  5559  0000A8  6FCB               	movwf	??_printf& (0+255),b
  5560  0000AA  0EFF               	movlw	255
  5561  0000AC  0100               	movlb	0	; () banked
  5562  0000AE  6FCC               	movwf	(??_printf+1)& (0+255),b
  5563  0000B0  C0BD  FFF6         	movff	printf@f,tblptrl
  5564  0000B4  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5565  0000B8                     	if	0	;tblptru may be non-zero
  5566  0000B8                     	endif
  5567  0000B8                     	if	0	;tblptru may be non-zero
  5568  0000B8                     	endif
  5569  0000B8  0008               	tblrd		*
  5570  0000BA  50F5               	movf	tablat,w,c
  5571  0000BC  0100               	movlb	0	; () banked
  5572  0000BE  6FCD               	movwf	(??_printf+2)& (0+255),b
  5573  0000C0  6BCE               	clrf	(??_printf+3)& (0+255),b
  5574  0000C2  0100               	movlb	0	; () banked
  5575  0000C4  51CB               	movf	??_printf& (0+255),w,b
  5576  0000C6  0100               	movlb	0	; () banked
  5577  0000C8  27CD               	addwf	(??_printf+2)& (0+255),f,b
  5578  0000CA  0100               	movlb	0	; () banked
  5579  0000CC  51CC               	movf	(??_printf+1)& (0+255),w,b
  5580  0000CE  0100               	movlb	0	; () banked
  5581  0000D0  23CE               	addwfc	(??_printf+3)& (0+255),f,b
  5582  0000D2  0100               	movlb	0	; () banked
  5583  0000D4  51CD               	movf	(??_printf+2)& (0+255),w,b
  5584  0000D6  0100               	movlb	0	; () banked
  5585  0000D8  27E8               	addwf	printf@width& (0+255),f,b
  5586  0000DA  0100               	movlb	0	; () banked
  5587  0000DC  51CE               	movf	(??_printf+3)& (0+255),w,b
  5588  0000DE  0100               	movlb	0	; () banked
  5589  0000E0  23E9               	addwfc	(printf@width+1)& (0+255),f,b
  5590                           
  5591                           ; BSR set to: 0
  5592  0000E2  0100               	movlb	0	; () banked
  5593  0000E4  4BBD               	infsnz	printf@f& (0+255),f,b
  5594  0000E6  2BBE               	incf	(printf@f+1)& (0+255),f,b
  5595                           
  5596                           ; BSR set to: 0
  5597                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5598  0000E8  C0BD  FFF6         	movff	printf@f,tblptrl
  5599  0000EC  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5600  0000F0                     	if	0	;tblptru may be non-zero
  5601  0000F0                     	endif
  5602  0000F0                     	if	0	;tblptru may be non-zero
  5603  0000F0                     	endif
  5604  0000F0  0008               	tblrd		*
  5605  0000F2  50F5               	movf	tablat,w,c
  5606  0000F4  EC88  F01F         	call	_isdigit
  5607  0000F8  B0D8               	btfsc	status,0,c
  5608  0000FA  D7C6               	goto	l6702
  5609  0000FC                     l6710:
  5610                           
  5611                           ;doprnt.c: 608: }
  5612                           ;doprnt.c: 611: if(*f == '.') {
  5613  0000FC  C0BD  FFF6         	movff	printf@f,tblptrl
  5614  000100  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5615  000104                     	if	0	;tblptru may be non-zero
  5616  000104                     	endif
  5617  000104                     	if	0	;tblptru may be non-zero
  5618  000104                     	endif
  5619  000104  0008               	tblrd		*
  5620  000106  50F5               	movf	tablat,w,c
  5621  000108  0A2E               	xorlw	46
  5622  00010A  A4D8               	btfss	status,2,c
  5623  00010C  D034               	goto	l6722
  5624                           
  5625                           ;doprnt.c: 612: flag |= 0x4000;
  5626  00010E  0100               	movlb	0	; () banked
  5627  000110  8DEB               	bsf	(printf@flag+1)& (0+255),6,b
  5628                           
  5629                           ;doprnt.c: 613: f++;
  5630  000112  0100               	movlb	0	; () banked
  5631  000114  4BBD               	infsnz	printf@f& (0+255),f,b
  5632  000116  2BBE               	incf	(printf@f+1)& (0+255),f,b
  5633                           
  5634                           ; BSR set to: 0
  5635                           ;doprnt.c: 620: {
  5636                           ;doprnt.c: 621: prec = 0;
  5637  000118  0E00               	movlw	0
  5638  00011A  0100               	movlb	0	; () banked
  5639  00011C  6FED               	movwf	(printf@prec+1)& (0+255),b
  5640  00011E  0E00               	movlw	0
  5641  000120  6FEC               	movwf	printf@prec& (0+255),b
  5642                           
  5643                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  5644  000122  D01E               	goto	l6720
  5645  000124                     l6716:
  5646                           
  5647                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  5648  000124  C0EC  F031         	movff	printf@prec,___wmul@multiplier
  5649  000128  C0ED  F032         	movff	printf@prec+1,___wmul@multiplier+1
  5650  00012C  0E00               	movlw	0
  5651  00012E  6E34               	movwf	___wmul@multiplicand+1,c
  5652  000130  0E0A               	movlw	10
  5653  000132  6E33               	movwf	___wmul@multiplicand,c
  5654  000134  EC22  F01F         	call	___wmul	;wreg free
  5655  000138  C0BD  FFF6         	movff	printf@f,tblptrl
  5656  00013C  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5657  000140                     	if	0	;tblptru may be non-zero
  5658  000140                     	endif
  5659  000140                     	if	0	;tblptru may be non-zero
  5660  000140                     	endif
  5661  000140  0008               	tblrd		*
  5662  000142  50F5               	movf	tablat,w,c
  5663  000144  2631               	addwf	?___wmul,f,c
  5664  000146  0E00               	movlw	0
  5665  000148  2232               	addwfc	?___wmul+1,f,c
  5666  00014A  0ED0               	movlw	208
  5667  00014C  2431               	addwf	?___wmul,w,c
  5668  00014E  0100               	movlb	0	; () banked
  5669  000150  6FEC               	movwf	printf@prec& (0+255),b
  5670  000152  0EFF               	movlw	255
  5671  000154  2032               	addwfc	?___wmul+1,w,c
  5672  000156  0100               	movlb	0	; () banked
  5673  000158  6FED               	movwf	(printf@prec+1)& (0+255),b
  5674                           
  5675                           ; BSR set to: 0
  5676  00015A  0100               	movlb	0	; () banked
  5677  00015C  4BBD               	infsnz	printf@f& (0+255),f,b
  5678  00015E  2BBE               	incf	(printf@f+1)& (0+255),f,b
  5679  000160                     l6720:
  5680                           
  5681                           ; BSR set to: 0
  5682  000160  C0BD  FFF6         	movff	printf@f,tblptrl
  5683  000164  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5684  000168                     	if	0	;tblptru may be non-zero
  5685  000168                     	endif
  5686  000168                     	if	0	;tblptru may be non-zero
  5687  000168                     	endif
  5688  000168  0008               	tblrd		*
  5689  00016A  50F5               	movf	tablat,w,c
  5690  00016C  EC88  F01F         	call	_isdigit
  5691  000170  A0D8               	btfss	status,0,c
  5692  000172  D07D               	goto	l6764
  5693  000174  D7D7               	goto	l6716
  5694  000176                     l6722:
  5695                           
  5696                           ;doprnt.c: 626: prec = 0;
  5697  000176  0E00               	movlw	0
  5698  000178  0100               	movlb	0	; () banked
  5699  00017A  6FED               	movwf	(printf@prec+1)& (0+255),b
  5700  00017C  0E00               	movlw	0
  5701  00017E  6FEC               	movwf	printf@prec& (0+255),b
  5702                           
  5703                           ; BSR set to: 0
  5704                           ;doprnt.c: 628: flag |= 0x1000;
  5705  000180  0100               	movlb	0	; () banked
  5706  000182  89EB               	bsf	(printf@flag+1)& (0+255),4,b
  5707                           
  5708                           ; BSR set to: 0
  5709                           ;doprnt.c: 635: switch(c = *f++) {
  5710                           
  5711                           ;doprnt.c: 630: }
  5712                           ;doprnt.c: 633: loop:
  5713                           
  5714                           ; BSR set to: 0
  5715  000184  D074               	goto	l6764
  5716  000186                     l6726:
  5717                           
  5718                           ; BSR set to: 0
  5719                           ;doprnt.c: 643: flag |= 0x10;
  5720  000186  0100               	movlb	0	; () banked
  5721  000188  89EA               	bsf	printf@flag& (0+255),4,b
  5722                           
  5723                           ;doprnt.c: 644: goto loop;
  5724  00018A  D071               	goto	l6764
  5725  00018C                     l6728:
  5726                           
  5727                           ; BSR set to: 0
  5728                           ;doprnt.c: 663: flag |= 0x400;
  5729  00018C  0100               	movlb	0	; () banked
  5730  00018E  85EB               	bsf	(printf@flag+1)& (0+255),2,b
  5731                           
  5732                           ; BSR set to: 0
  5733                           ;doprnt.c: 698: case 'i':
  5734                           ;doprnt.c: 699: break;
  5735                           
  5736                           ; BSR set to: 0
  5737                           
  5738                           ;doprnt.c: 697: case 'd':
  5739                           
  5740                           ;doprnt.c: 664: break;
  5741  000190  D090               	goto	l6766
  5742  000192                     l6730:
  5743                           
  5744                           ; BSR set to: 0
  5745                           ;doprnt.c: 721: flag |= 0x80;
  5746  000192  0100               	movlb	0	; () banked
  5747  000194  8FEA               	bsf	printf@flag& (0+255),7,b
  5748                           
  5749                           ;doprnt.c: 723: break;
  5750  000196  D08D               	goto	l6766
  5751  000198                     l6732:
  5752                           
  5753                           ; BSR set to: 0
  5754                           ;doprnt.c: 753: if(prec && prec < len)
  5755  000198  0100               	movlb	0	; () banked
  5756  00019A  51EC               	movf	printf@prec& (0+255),w,b
  5757  00019C  0100               	movlb	0	; () banked
  5758  00019E  11ED               	iorwf	(printf@prec+1)& (0+255),w,b
  5759  0001A0  B4D8               	btfsc	status,2,c
  5760  0001A2  D00E               	goto	l6738
  5761                           
  5762                           ; BSR set to: 0
  5763  0001A4  0100               	movlb	0	; () banked
  5764  0001A6  51D7               	movf	printf@len& (0+255),w,b
  5765  0001A8  0100               	movlb	0	; () banked
  5766  0001AA  5DEC               	subwf	printf@prec& (0+255),w,b
  5767  0001AC  0100               	movlb	0	; () banked
  5768  0001AE  51D8               	movf	(printf@len+1)& (0+255),w,b
  5769  0001B0  0100               	movlb	0	; () banked
  5770  0001B2  59ED               	subwfb	(printf@prec+1)& (0+255),w,b
  5771  0001B4  B0D8               	btfsc	status,0,c
  5772  0001B6  D004               	goto	l6738
  5773                           
  5774                           ; BSR set to: 0
  5775                           ;doprnt.c: 754: len = prec;
  5776  0001B8  C0EC  F0D7         	movff	printf@prec,printf@len
  5777  0001BC  C0ED  F0D8         	movff	printf@prec+1,printf@len+1
  5778  0001C0                     l6738:
  5779                           
  5780                           ; BSR set to: 0
  5781                           ;doprnt.c: 757: if(width > len)
  5782  0001C0  0100               	movlb	0	; () banked
  5783  0001C2  51E8               	movf	printf@width& (0+255),w,b
  5784  0001C4  0100               	movlb	0	; () banked
  5785  0001C6  5DD7               	subwf	printf@len& (0+255),w,b
  5786  0001C8  0100               	movlb	0	; () banked
  5787  0001CA  51E9               	movf	(printf@width+1)& (0+255),w,b
  5788  0001CC  0100               	movlb	0	; () banked
  5789  0001CE  59D8               	subwfb	(printf@len+1)& (0+255),w,b
  5790  0001D0  B0D8               	btfsc	status,0,c
  5791  0001D2  D009               	goto	l6742
  5792                           
  5793                           ; BSR set to: 0
  5794                           ;doprnt.c: 758: width -= len;
  5795  0001D4  0100               	movlb	0	; () banked
  5796  0001D6  51D7               	movf	printf@len& (0+255),w,b
  5797  0001D8  0100               	movlb	0	; () banked
  5798  0001DA  5FE8               	subwf	printf@width& (0+255),f,b
  5799  0001DC  0100               	movlb	0	; () banked
  5800  0001DE  51D8               	movf	(printf@len+1)& (0+255),w,b
  5801  0001E0  0100               	movlb	0	; () banked
  5802  0001E2  5BE9               	subwfb	(printf@width+1)& (0+255),f,b
  5803  0001E4  D009               	goto	l6746
  5804  0001E6                     l6742:
  5805                           
  5806                           ; BSR set to: 0
  5807                           ;doprnt.c: 759: else
  5808                           ;doprnt.c: 760: width = 0;
  5809  0001E6  0E00               	movlw	0
  5810  0001E8  0100               	movlb	0	; () banked
  5811  0001EA  6FE9               	movwf	(printf@width+1)& (0+255),b
  5812  0001EC  0E00               	movlw	0
  5813  0001EE  6FE8               	movwf	printf@width& (0+255),b
  5814                           
  5815                           ; BSR set to: 0
  5816                           ;doprnt.c: 764: while(width--)
  5817  0001F0  D003               	goto	l6746
  5818  0001F2                     l6744:
  5819                           
  5820                           ; BSR set to: 0
  5821                           ;doprnt.c: 765: (putch(' ') );
  5822  0001F2  0E20               	movlw	32
  5823  0001F4  EC47  F01F         	call	_putch
  5824  0001F8                     l6746:
  5825  0001F8  0100               	movlb	0	; () banked
  5826  0001FA  07E8               	decf	printf@width& (0+255),f,b
  5827  0001FC  A0D8               	btfss	status,0,c
  5828  0001FE  07E9               	decf	(printf@width+1)& (0+255),f,b
  5829  000200  0100               	movlb	0	; () banked
  5830  000202  29E8               	incf	printf@width& (0+255),w,b
  5831  000204  E1F6               	bnz	l6744
  5832  000206  0100               	movlb	0	; () banked
  5833  000208  29E9               	incf	(printf@width+1)& (0+255),w,b
  5834  00020A  B4D8               	btfsc	status,2,c
  5835  00020C  D00B               	goto	l6752
  5836  00020E  D7F1               	goto	l6744
  5837  000210                     l6748:
  5838                           
  5839                           ; BSR set to: 0
  5840                           ;doprnt.c: 768: (putch(*cp++) );
  5841  000210  C0D5  FFD9         	movff	printf@cp,fsr2l
  5842  000214  C0D6  FFDA         	movff	printf@cp+1,fsr2h
  5843  000218  50DF               	movf	indf2,w,c
  5844  00021A  EC47  F01F         	call	_putch
  5845  00021E  0100               	movlb	0	; () banked
  5846  000220  4BD5               	infsnz	printf@cp& (0+255),f,b
  5847  000222  2BD6               	incf	(printf@cp+1)& (0+255),f,b
  5848  000224                     l6752:
  5849                           
  5850                           ; BSR set to: 0
  5851  000224  0100               	movlb	0	; () banked
  5852  000226  07D7               	decf	printf@len& (0+255),f,b
  5853  000228  A0D8               	btfss	status,0,c
  5854  00022A  07D8               	decf	(printf@len+1)& (0+255),f,b
  5855  00022C  0100               	movlb	0	; () banked
  5856  00022E  29D7               	incf	printf@len& (0+255),w,b
  5857  000230  E1EF               	bnz	l6748
  5858  000232  0100               	movlb	0	; () banked
  5859  000234  29D8               	incf	(printf@len+1)& (0+255),w,b
  5860  000236  B4D8               	btfsc	status,2,c
  5861  000238  EFF5  F006         	goto	l7052
  5862  00023C  D7E9               	goto	l6748
  5863  00023E                     l6754:
  5864                           
  5865                           ; BSR set to: 0
  5866                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  5867  00023E  C0D9  FFD9         	movff	printf@ap,fsr2l
  5868  000242  C0DA  FFDA         	movff	printf@ap+1,fsr2h
  5869  000246  50DF               	movf	indf2,w,c
  5870  000248  0100               	movlb	0	; () banked
  5871  00024A  6FEE               	movwf	printf@c& (0+255),b
  5872                           
  5873                           ; BSR set to: 0
  5874  00024C  0E02               	movlw	2
  5875  00024E  0100               	movlb	0	; () banked
  5876  000250  27D9               	addwf	printf@ap& (0+255),f,b
  5877  000252  0E00               	movlw	0
  5878  000254  23DA               	addwfc	(printf@ap+1)& (0+255),f,b
  5879  000256                     l6758:
  5880                           
  5881                           ; BSR set to: 0
  5882                           ;doprnt.c: 805: cp = (char *)&c;
  5883  000256  0EEE               	movlw	low printf@c
  5884  000258  0100               	movlb	0	; () banked
  5885  00025A  6FD5               	movwf	printf@cp& (0+255),b
  5886  00025C  0E00               	movlw	high printf@c
  5887  00025E  0100               	movlb	0	; () banked
  5888  000260  6FD6               	movwf	(printf@cp+1)& (0+255),b
  5889                           
  5890                           ; BSR set to: 0
  5891                           ;doprnt.c: 806: len = 1;
  5892  000262  0E00               	movlw	0
  5893  000264  0100               	movlb	0	; () banked
  5894  000266  6FD8               	movwf	(printf@len+1)& (0+255),b
  5895  000268  0E01               	movlw	1
  5896  00026A  6FD7               	movwf	printf@len& (0+255),b
  5897                           
  5898                           ;doprnt.c: 807: goto dostring;
  5899  00026C  D795               	goto	l6732
  5900  00026E                     l6764:
  5901  00026E  C0BD  FFF6         	movff	printf@f,tblptrl
  5902  000272  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5903  000276  0100               	movlb	0	; () banked
  5904  000278  4BBD               	infsnz	printf@f& (0+255),f,b
  5905  00027A  2BBE               	incf	(printf@f+1)& (0+255),f,b
  5906  00027C                     	if	0	;tblptru may be non-zero
  5907  00027C                     	endif
  5908  00027C                     	if	0	;tblptru may be non-zero
  5909  00027C                     	endif
  5910  00027C  0008               	tblrd		*
  5911  00027E  CFF5 F0EE          	movff	tablat,printf@c
  5912  000282  0100               	movlb	0	; () banked
  5913  000284  51EE               	movf	printf@c& (0+255),w,b
  5914                           
  5915                           ; Switch size 1, requested type "space"
  5916                           ; Number of cases is 7, Range of values is 0 to 120
  5917                           ; switch strategies available:
  5918                           ; Name         Instructions Cycles
  5919                           ; simple_byte           22    12 (average)
  5920                           ;	Chosen strategy is simple_byte
  5921  000286  0A00               	xorlw	0	; case 0
  5922  000288  B4D8               	btfsc	status,2,c
  5923  00028A  0012               	return	
  5924  00028C  0A63               	xorlw	99	; case 99
  5925  00028E  B4D8               	btfsc	status,2,c
  5926  000290  D7D6               	goto	l6754
  5927  000292  0A07               	xorlw	7	; case 100
  5928  000294  B4D8               	btfsc	status,2,c
  5929  000296  D00D               	goto	l6766
  5930  000298  0A02               	xorlw	2	; case 102
  5931  00029A  B4D8               	btfsc	status,2,c
  5932  00029C  D777               	goto	l6728
  5933  00029E  0A0F               	xorlw	15	; case 105
  5934  0002A0  B4D8               	btfsc	status,2,c
  5935  0002A2  D007               	goto	l6766
  5936  0002A4  0A05               	xorlw	5	; case 108
  5937  0002A6  B4D8               	btfsc	status,2,c
  5938  0002A8  D76E               	goto	l6726
  5939  0002AA  0A14               	xorlw	20	; case 120
  5940  0002AC  B4D8               	btfsc	status,2,c
  5941  0002AE  D771               	goto	l6730
  5942  0002B0  D7D2               	goto	l6758
  5943  0002B2                     l6766:
  5944                           
  5945                           ; BSR set to: 0
  5946                           ;doprnt.c: 825: if(flag & (0x700)) {
  5947  0002B2  0E07               	movlw	7
  5948  0002B4  0100               	movlb	0	; () banked
  5949  0002B6  15EB               	andwf	(printf@flag+1)& (0+255),w,b
  5950  0002B8  B4D8               	btfsc	status,2,c
  5951  0002BA  D36D               	goto	l783
  5952                           
  5953                           ; BSR set to: 0
  5954                           ;doprnt.c: 827: if(flag & 0x1000)
  5955  0002BC  0100               	movlb	0	; () banked
  5956  0002BE  A9EB               	btfss	(printf@flag+1)& (0+255),4,b
  5957  0002C0  D005               	goto	l6772
  5958                           
  5959                           ; BSR set to: 0
  5960                           ;doprnt.c: 829: prec = 6;
  5961  0002C2  0E00               	movlw	0
  5962  0002C4  0100               	movlb	0	; () banked
  5963  0002C6  6FED               	movwf	(printf@prec+1)& (0+255),b
  5964  0002C8  0E06               	movlw	6
  5965  0002CA  6FEC               	movwf	printf@prec& (0+255),b
  5966  0002CC                     l6772:
  5967                           
  5968                           ; BSR set to: 0
  5969                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  5970  0002CC  C0D9  FFD9         	movff	printf@ap,fsr2l
  5971  0002D0  C0DA  FFDA         	movff	printf@ap+1,fsr2h
  5972  0002D4  CFDE F0E1          	movff	postinc2,printf@fval
  5973  0002D8  CFDE F0E2          	movff	postinc2,printf@fval+1
  5974  0002DC  CFDD F0E3          	movff	postdec2,printf@fval+2
  5975                           
  5976                           ; BSR set to: 0
  5977  0002E0  0E03               	movlw	3
  5978  0002E2  0100               	movlb	0	; () banked
  5979  0002E4  27D9               	addwf	printf@ap& (0+255),f,b
  5980  0002E6  0E00               	movlw	0
  5981  0002E8  23DA               	addwfc	(printf@ap+1)& (0+255),f,b
  5982                           
  5983                           ; BSR set to: 0
  5984                           ;doprnt.c: 831: if(fval < 0.0) {
  5985  0002EA  0100               	movlb	0	; () banked
  5986  0002EC  AFE3               	btfss	(printf@fval+2)& (0+255),7,b
  5987  0002EE  D011               	goto	l6782
  5988                           
  5989                           ; BSR set to: 0
  5990                           ;doprnt.c: 832: fval = -fval;
  5991  0002F0  C0E1  F023         	movff	printf@fval,___ftneg@f1
  5992  0002F4  C0E2  F024         	movff	printf@fval+1,___ftneg@f1+1
  5993  0002F8  C0E3  F025         	movff	printf@fval+2,___ftneg@f1+2
  5994  0002FC  EC35  F01F         	call	___ftneg	;wreg free
  5995  000300  C023  F0E1         	movff	?___ftneg,printf@fval
  5996  000304  C024  F0E2         	movff	?___ftneg+1,printf@fval+1
  5997  000308  C025  F0E3         	movff	?___ftneg+2,printf@fval+2
  5998                           
  5999                           ;doprnt.c: 833: flag |= 0x03;
  6000  00030C  0E03               	movlw	3
  6001  00030E  0100               	movlb	0	; () banked
  6002  000310  13EA               	iorwf	printf@flag& (0+255),f,b
  6003  000312                     l6782:
  6004                           
  6005                           ; BSR set to: 0
  6006                           ;doprnt.c: 834: }
  6007                           ;doprnt.c: 835: exp = 0;
  6008  000312  0E00               	movlw	0
  6009  000314  0100               	movlb	0	; () banked
  6010  000316  6FE0               	movwf	(printf@exp+1)& (0+255),b
  6011  000318  0E00               	movlw	0
  6012  00031A  6FDF               	movwf	printf@exp& (0+255),b
  6013                           
  6014                           ; BSR set to: 0
  6015                           ;doprnt.c: 836: if( fval!=0) {
  6016  00031C  0100               	movlb	0	; () banked
  6017  00031E  51E1               	movf	printf@fval& (0+255),w,b
  6018  000320  0100               	movlb	0	; () banked
  6019  000322  11E2               	iorwf	(printf@fval+1)& (0+255),w,b
  6020  000324  0100               	movlb	0	; () banked
  6021  000326  11E3               	iorwf	(printf@fval+2)& (0+255),w,b
  6022  000328  B4D8               	btfsc	status,2,c
  6023  00032A  D091               	goto	l6810
  6024                           
  6025                           ; BSR set to: 0
  6026                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  6027  00032C  0E82               	movlw	130
  6028  00032E  0100               	movlb	0	; () banked
  6029  000330  6FCB               	movwf	??_printf& (0+255),b
  6030  000332  0EFF               	movlw	255
  6031  000334  0100               	movlb	0	; () banked
  6032  000336  6FCC               	movwf	(??_printf+1)& (0+255),b
  6033  000338  C0E1  F0CD         	movff	printf@fval,??_printf+2
  6034  00033C  C0E2  F0CE         	movff	printf@fval+1,??_printf+3
  6035  000340  C0E3  F0CF         	movff	printf@fval+2,??_printf+4
  6036  000344  C0E4  F0D0         	movff	printf@fval+3,??_printf+5
  6037  000348  0E10               	movlw	16
  6038  00034A  D006               	goto	u6740
  6039  00034C                     u6745:
  6040  00034C  0100               	movlb	0	; () banked
  6041  00034E  90D8               	bcf	status,0,c
  6042  000350  33D0               	rrcf	(??_printf+5)& (0+255),f,b
  6043  000352  33CF               	rrcf	(??_printf+4)& (0+255),f,b
  6044  000354  33CE               	rrcf	(??_printf+3)& (0+255),f,b
  6045  000356  33CD               	rrcf	(??_printf+2)& (0+255),f,b
  6046  000358                     u6740:
  6047  000358  2EE8               	decfsz	wreg,f,c
  6048  00035A  D7F8               	goto	u6745
  6049  00035C  0100               	movlb	0	; () banked
  6050  00035E  51CD               	movf	(??_printf+2)& (0+255),w,b
  6051  000360  0100               	movlb	0	; () banked
  6052  000362  25CB               	addwf	??_printf& (0+255),w,b
  6053  000364  0100               	movlb	0	; () banked
  6054  000366  6FDF               	movwf	printf@exp& (0+255),b
  6055  000368  0E00               	movlw	0
  6056  00036A  0100               	movlb	0	; () banked
  6057  00036C  21CC               	addwfc	(??_printf+1)& (0+255),w,b
  6058  00036E  0100               	movlb	0	; () banked
  6059  000370  6FE0               	movwf	(printf@exp+1)& (0+255),b
  6060                           
  6061                           ; BSR set to: 0
  6062                           ;doprnt.c: 838: exp--;
  6063  000372  0100               	movlb	0	; () banked
  6064  000374  07DF               	decf	printf@exp& (0+255),f,b
  6065  000376  A0D8               	btfss	status,0,c
  6066  000378  07E0               	decf	(printf@exp+1)& (0+255),f,b
  6067                           
  6068                           ; BSR set to: 0
  6069                           ;doprnt.c: 839: exp *= 3;
  6070  00037A  C0DF  F031         	movff	printf@exp,___wmul@multiplier
  6071  00037E  C0E0  F032         	movff	printf@exp+1,___wmul@multiplier+1
  6072  000382  0E00               	movlw	0
  6073  000384  6E34               	movwf	___wmul@multiplicand+1,c
  6074  000386  0E03               	movlw	3
  6075  000388  6E33               	movwf	___wmul@multiplicand,c
  6076  00038A  EC22  F01F         	call	___wmul	;wreg free
  6077  00038E  C031  F0DF         	movff	?___wmul,printf@exp
  6078  000392  C032  F0E0         	movff	?___wmul+1,printf@exp+1
  6079                           
  6080                           ;doprnt.c: 840: exp /= 10;
  6081  000396  C0DF  F029         	movff	printf@exp,___awdiv@dividend
  6082  00039A  C0E0  F02A         	movff	printf@exp+1,___awdiv@dividend+1
  6083  00039E  0E00               	movlw	0
  6084  0003A0  6E2C               	movwf	___awdiv@divisor+1,c
  6085  0003A2  0E0A               	movlw	10
  6086  0003A4  6E2B               	movwf	___awdiv@divisor,c
  6087  0003A6  ECEE  F01A         	call	___awdiv	;wreg free
  6088  0003AA  C029  F0DF         	movff	?___awdiv,printf@exp
  6089  0003AE  C02A  F0E0         	movff	?___awdiv+1,printf@exp+1
  6090                           
  6091                           ;doprnt.c: 841: if(exp < 0)
  6092  0003B2  0100               	movlb	0	; () banked
  6093  0003B4  AFE0               	btfss	(printf@exp+1)& (0+255),7,b
  6094  0003B6  D004               	goto	l6798
  6095                           
  6096                           ; BSR set to: 0
  6097                           ;doprnt.c: 842: exp--;
  6098  0003B8  0100               	movlb	0	; () banked
  6099  0003BA  07DF               	decf	printf@exp& (0+255),f,b
  6100  0003BC  A0D8               	btfss	status,0,c
  6101  0003BE  07E0               	decf	(printf@exp+1)& (0+255),f,b
  6102  0003C0                     l6798:
  6103                           
  6104                           ; BSR set to: 0
  6105                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  6106  0003C0  0100               	movlb	0	; () banked
  6107  0003C2  51DF               	movf	printf@exp& (0+255),w,b
  6108  0003C4  0800               	sublw	0
  6109  0003C6  ECB3  F009         	call	_scale
  6110  0003CA  C098  F0DB         	movff	?_scale,printf@tmpval
  6111  0003CE  C099  F0DC         	movff	?_scale+1,printf@tmpval+1
  6112  0003D2  C09A  F0DD         	movff	?_scale+2,printf@tmpval+2
  6113                           
  6114                           ;doprnt.c: 847: tmpval.integ *= fval;
  6115  0003D6  C0DB  F089         	movff	printf@tmpval,___ftmul@f1
  6116  0003DA  C0DC  F08A         	movff	printf@tmpval+1,___ftmul@f1+1
  6117  0003DE  C0DD  F08B         	movff	printf@tmpval+2,___ftmul@f1+2
  6118  0003E2  C0E1  F08C         	movff	printf@fval,___ftmul@f2
  6119  0003E6  C0E2  F08D         	movff	printf@fval+1,___ftmul@f2+1
  6120  0003EA  C0E3  F08E         	movff	printf@fval+2,___ftmul@f2+2
  6121  0003EE  EC8B  F010         	call	___ftmul	;wreg free
  6122  0003F2  C089  F0DB         	movff	?___ftmul,printf@tmpval
  6123  0003F6  C08A  F0DC         	movff	?___ftmul+1,printf@tmpval+1
  6124  0003FA  C08B  F0DD         	movff	?___ftmul+2,printf@tmpval+2
  6125                           
  6126                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  6127  0003FE  C0DB  F02F         	movff	printf@tmpval,___ftge@ff1
  6128  000402  C0DC  F030         	movff	printf@tmpval+1,___ftge@ff1+1
  6129  000406  C0DD  F031         	movff	printf@tmpval+2,___ftge@ff1+2
  6130  00040A  0E00               	movlw	0
  6131  00040C  6E32               	movwf	___ftge@ff2,c
  6132  00040E  0E80               	movlw	128
  6133  000410  6E33               	movwf	___ftge@ff2+1,c
  6134  000412  0E3F               	movlw	63
  6135  000414  6E34               	movwf	___ftge@ff2+2,c
  6136  000416  EC60  F01A         	call	___ftge	;wreg free
  6137  00041A  B0D8               	btfsc	status,0,c
  6138  00041C  D005               	goto	l6806
  6139                           
  6140                           ;doprnt.c: 849: exp--;
  6141  00041E  0100               	movlb	0	; () banked
  6142  000420  07DF               	decf	printf@exp& (0+255),f,b
  6143  000422  A0D8               	btfss	status,0,c
  6144  000424  07E0               	decf	(printf@exp+1)& (0+255),f,b
  6145  000426  D013               	goto	l6810
  6146  000428                     l6806:
  6147                           
  6148                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  6149  000428  C0DB  F02F         	movff	printf@tmpval,___ftge@ff1
  6150  00042C  C0DC  F030         	movff	printf@tmpval+1,___ftge@ff1+1
  6151  000430  C0DD  F031         	movff	printf@tmpval+2,___ftge@ff1+2
  6152  000434  0E00               	movlw	0
  6153  000436  6E32               	movwf	___ftge@ff2,c
  6154  000438  0E20               	movlw	32
  6155  00043A  6E33               	movwf	___ftge@ff2+1,c
  6156  00043C  0E41               	movlw	65
  6157  00043E  6E34               	movwf	___ftge@ff2+2,c
  6158  000440  EC60  F01A         	call	___ftge	;wreg free
  6159  000444  A0D8               	btfss	status,0,c
  6160  000446  D003               	goto	l6810
  6161                           
  6162                           ;doprnt.c: 851: exp++;
  6163  000448  0100               	movlb	0	; () banked
  6164  00044A  4BDF               	infsnz	printf@exp& (0+255),f,b
  6165  00044C  2BE0               	incf	(printf@exp+1)& (0+255),f,b
  6166  00044E                     l6810:
  6167                           
  6168                           ;doprnt.c: 852: }
  6169                           ;doprnt.c: 1112: if(prec <= 12)
  6170  00044E  0100               	movlb	0	; () banked
  6171  000450  BFED               	btfsc	(printf@prec+1)& (0+255),7,b
  6172  000452  D008               	goto	l6812
  6173  000454  0100               	movlb	0	; () banked
  6174  000456  51ED               	movf	(printf@prec+1)& (0+255),w,b
  6175  000458  E11D               	bnz	l6814
  6176  00045A  0E0D               	movlw	13
  6177  00045C  0100               	movlb	0	; () banked
  6178  00045E  5DEC               	subwf	printf@prec& (0+255),w,b
  6179  000460  B0D8               	btfsc	status,0,c
  6180  000462  D018               	goto	l6814
  6181  000464                     l6812:
  6182                           
  6183                           ; BSR set to: 0
  6184                           ;doprnt.c: 1113: fval += fround(prec);
  6185  000464  C0E1  F0A2         	movff	printf@fval,___ftadd@f1
  6186  000468  C0E2  F0A3         	movff	printf@fval+1,___ftadd@f1+1
  6187  00046C  C0E3  F0A4         	movff	printf@fval+2,___ftadd@f1+2
  6188  000470  0100               	movlb	0	; () banked
  6189  000472  51EC               	movf	printf@prec& (0+255),w,b
  6190  000474  EC9F  F00E         	call	_fround
  6191  000478  C098  F0A5         	movff	?_fround,___ftadd@f2
  6192  00047C  C099  F0A6         	movff	?_fround+1,___ftadd@f2+1
  6193  000480  C09A  F0A7         	movff	?_fround+2,___ftadd@f2+2
  6194  000484  EC6B  F00D         	call	___ftadd	;wreg free
  6195  000488  C0A2  F0E1         	movff	?___ftadd,printf@fval
  6196  00048C  C0A3  F0E2         	movff	?___ftadd+1,printf@fval+1
  6197  000490  C0A4  F0E3         	movff	?___ftadd+2,printf@fval+2
  6198  000494                     l6814:
  6199                           
  6200                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  6201  000494  0100               	movlb	0	; () banked
  6202  000496  BFE0               	btfsc	(printf@exp+1)& (0+255),7,b
  6203  000498  D008               	goto	l6816
  6204  00049A  0100               	movlb	0	; () banked
  6205  00049C  51E0               	movf	(printf@exp+1)& (0+255),w,b
  6206  00049E  E12A               	bnz	l6822
  6207  0004A0  0E0A               	movlw	10
  6208  0004A2  0100               	movlb	0	; () banked
  6209  0004A4  5DDF               	subwf	printf@exp& (0+255),w,b
  6210  0004A6  B0D8               	btfsc	status,0,c
  6211  0004A8  D025               	goto	l6822
  6212  0004AA                     l6816:
  6213                           
  6214                           ; BSR set to: 0
  6215  0004AA  0100               	movlb	0	; () banked
  6216  0004AC  51E1               	movf	printf@fval& (0+255),w,b
  6217  0004AE  0100               	movlb	0	; () banked
  6218  0004B0  11E2               	iorwf	(printf@fval+1)& (0+255),w,b
  6219  0004B2  0100               	movlb	0	; () banked
  6220  0004B4  11E3               	iorwf	(printf@fval+2)& (0+255),w,b
  6221  0004B6  B4D8               	btfsc	status,2,c
  6222  0004B8  D05F               	goto	l6836
  6223                           
  6224                           ; BSR set to: 0
  6225  0004BA  C0E1  F0AE         	movff	printf@fval,___fttol@f1
  6226  0004BE  C0E2  F0AF         	movff	printf@fval+1,___fttol@f1+1
  6227  0004C2  C0E3  F0B0         	movff	printf@fval+2,___fttol@f1+2
  6228  0004C6  ECE6  F011         	call	___fttol	;wreg free
  6229  0004CA  0100               	movlb	0	; () banked
  6230  0004CC  51AE               	movf	?___fttol& (0+255),w,b
  6231  0004CE  0100               	movlb	0	; () banked
  6232  0004D0  11AF               	iorwf	(?___fttol+1)& (0+255),w,b
  6233  0004D2  0100               	movlb	0	; () banked
  6234  0004D4  11B0               	iorwf	(?___fttol+2)& (0+255),w,b
  6235  0004D6  0100               	movlb	0	; () banked
  6236  0004D8  11B1               	iorwf	(?___fttol+3)& (0+255),w,b
  6237  0004DA  A4D8               	btfss	status,2,c
  6238  0004DC  D04D               	goto	l6836
  6239                           
  6240                           ; BSR set to: 0
  6241  0004DE  0100               	movlb	0	; () banked
  6242  0004E0  BFE0               	btfsc	(printf@exp+1)& (0+255),7,b
  6243  0004E2  D04A               	goto	l6836
  6244  0004E4  0100               	movlb	0	; () banked
  6245  0004E6  51E0               	movf	(printf@exp+1)& (0+255),w,b
  6246  0004E8  E105               	bnz	l6822
  6247  0004EA  0E02               	movlw	2
  6248  0004EC  0100               	movlb	0	; () banked
  6249  0004EE  5DDF               	subwf	printf@exp& (0+255),w,b
  6250  0004F0  A0D8               	btfss	status,0,c
  6251  0004F2  D042               	goto	l6836
  6252  0004F4                     l6822:
  6253                           
  6254                           ; BSR set to: 0
  6255                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  6256  0004F4  C0DB  F02F         	movff	printf@tmpval,___ftge@ff1
  6257  0004F8  C0DC  F030         	movff	printf@tmpval+1,___ftge@ff1+1
  6258  0004FC  C0DD  F031         	movff	printf@tmpval+2,___ftge@ff1+2
  6259  000500  0E70               	movlw	112
  6260  000502  6E32               	movwf	___ftge@ff2,c
  6261  000504  0E89               	movlw	137
  6262  000506  6E33               	movwf	___ftge@ff2+1,c
  6263  000508  0E40               	movlw	64
  6264  00050A  6E34               	movwf	___ftge@ff2+2,c
  6265  00050C  EC60  F01A         	call	___ftge	;wreg free
  6266  000510  B0D8               	btfsc	status,0,c
  6267  000512  D003               	goto	l6826
  6268                           
  6269                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  6270  000514  0100               	movlb	0	; () banked
  6271  000516  0EF7               	movlw	247
  6272  000518  D002               	goto	L1
  6273  00051A                     l6826:
  6274                           
  6275                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  6276  00051A  0100               	movlb	0	; () banked
  6277  00051C  0EF8               	movlw	248
  6278  00051E                     L1:
  6279  00051E  27DF               	addwf	printf@exp& (0+255),f,b
  6280  000520  0EFF               	movlw	255
  6281  000522  23E0               	addwfc	(printf@exp+1)& (0+255),f,b
  6282                           
  6283                           ; BSR set to: 0
  6284                           ;doprnt.c: 1124: }
  6285                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  6286                           
  6287                           ; BSR set to: 0
  6288  000524  0100               	movlb	0	; () banked
  6289  000526  51DF               	movf	printf@exp& (0+255),w,b
  6290  000528  ECB3  F009         	call	_scale
  6291  00052C  C098  F0DB         	movff	?_scale,printf@tmpval
  6292  000530  C099  F0DC         	movff	?_scale+1,printf@tmpval+1
  6293  000534  C09A  F0DD         	movff	?_scale+2,printf@tmpval+2
  6294                           
  6295                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  6296  000538  C0E1  F023         	movff	printf@fval,__tdiv_to_l_@f1
  6297  00053C  C0E2  F024         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  6298  000540  C0E3  F025         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  6299  000544  C0DB  F026         	movff	printf@tmpval,__tdiv_to_l_@f2
  6300  000548  C0DC  F027         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  6301  00054C  C0DD  F028         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  6302  000550  EC88  F012         	call	__tdiv_to_l_	;wreg free
  6303  000554  C023  F0E4         	movff	?__tdiv_to_l_,printf@val
  6304  000558  C024  F0E5         	movff	?__tdiv_to_l_+1,printf@val+1
  6305  00055C  C025  F0E6         	movff	?__tdiv_to_l_+2,printf@val+2
  6306  000560  C026  F0E7         	movff	?__tdiv_to_l_+3,printf@val+3
  6307                           
  6308                           ;doprnt.c: 1129: fval = 0.0;
  6309  000564  0E00               	movlw	0
  6310  000566  0100               	movlb	0	; () banked
  6311  000568  6FE1               	movwf	printf@fval& (0+255),b
  6312  00056A  0E00               	movlw	0
  6313  00056C  0100               	movlb	0	; () banked
  6314  00056E  6FE2               	movwf	(printf@fval+1)& (0+255),b
  6315  000570  0E00               	movlw	0
  6316  000572  0100               	movlb	0	; () banked
  6317  000574  6FE3               	movwf	(printf@fval+2)& (0+255),b
  6318                           
  6319                           ;doprnt.c: 1130: } else {
  6320  000576  D033               	goto	l6840
  6321  000578                     l6836:
  6322                           
  6323                           ; BSR set to: 0
  6324                           ;doprnt.c: 1131: val = (unsigned long)fval;
  6325  000578  C0E1  F0AE         	movff	printf@fval,___fttol@f1
  6326  00057C  C0E2  F0AF         	movff	printf@fval+1,___fttol@f1+1
  6327  000580  C0E3  F0B0         	movff	printf@fval+2,___fttol@f1+2
  6328  000584  ECE6  F011         	call	___fttol	;wreg free
  6329  000588  C0AE  F0E4         	movff	?___fttol,printf@val
  6330  00058C  C0AF  F0E5         	movff	?___fttol+1,printf@val+1
  6331  000590  C0B0  F0E6         	movff	?___fttol+2,printf@val+2
  6332  000594  C0B1  F0E7         	movff	?___fttol+3,printf@val+3
  6333                           
  6334                           ;doprnt.c: 1132: fval -= (double)val;
  6335  000598  C0E1  F0AE         	movff	printf@fval,___ftsub@f1
  6336  00059C  C0E2  F0AF         	movff	printf@fval+1,___ftsub@f1+1
  6337  0005A0  C0E3  F0B0         	movff	printf@fval+2,___ftsub@f1+2
  6338  0005A4  C0E4  F02B         	movff	printf@val,___lltoft@c
  6339  0005A8  C0E5  F02C         	movff	printf@val+1,___lltoft@c+1
  6340  0005AC  C0E6  F02D         	movff	printf@val+2,___lltoft@c+2
  6341  0005B0  C0E7  F02E         	movff	printf@val+3,___lltoft@c+3
  6342  0005B4  EC24  F01D         	call	___lltoft	;wreg free
  6343  0005B8  C02B  F0B1         	movff	?___lltoft,___ftsub@f2
  6344  0005BC  C02C  F0B2         	movff	?___lltoft+1,___ftsub@f2+1
  6345  0005C0  C02D  F0B3         	movff	?___lltoft+2,___ftsub@f2+2
  6346  0005C4  ECD2  F01D         	call	___ftsub	;wreg free
  6347  0005C8  C0AE  F0E1         	movff	?___ftsub,printf@fval
  6348  0005CC  C0AF  F0E2         	movff	?___ftsub+1,printf@fval+1
  6349  0005D0  C0B0  F0E3         	movff	?___ftsub+2,printf@fval+2
  6350                           
  6351                           ;doprnt.c: 1133: exp = 0;
  6352  0005D4  0E00               	movlw	0
  6353  0005D6  0100               	movlb	0	; () banked
  6354  0005D8  6FE0               	movwf	(printf@exp+1)& (0+255),b
  6355  0005DA  0E00               	movlw	0
  6356  0005DC  6FDF               	movwf	printf@exp& (0+255),b
  6357  0005DE                     l6840:
  6358                           
  6359                           ; BSR set to: 0
  6360                           ;doprnt.c: 1134: }
  6361                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  6362  0005DE  0E01               	movlw	1
  6363  0005E0  0100               	movlb	0	; () banked
  6364  0005E2  6FEE               	movwf	printf@c& (0+255),b
  6365  0005E4                     l6842:
  6366                           
  6367                           ; BSR set to: 0
  6368  0005E4  0E0A               	movlw	10
  6369  0005E6  0100               	movlb	0	; () banked
  6370  0005E8  19EE               	xorwf	printf@c& (0+255),w,b
  6371  0005EA  B4D8               	btfsc	status,2,c
  6372  0005EC  D01E               	goto	l6854
  6373                           
  6374                           ; BSR set to: 0
  6375                           ;doprnt.c: 1137: if(val < dpowers[c])
  6376                           
  6377                           ; BSR set to: 0
  6378                           
  6379                           ; BSR set to: 0
  6380  0005EE  0100               	movlb	0	; () banked
  6381  0005F0  51EE               	movf	printf@c& (0+255),w,b
  6382  0005F2  0D04               	mullw	4
  6383  0005F4  0EDF               	movlw	low _dpowers
  6384  0005F6  24F3               	addwf	prodl,w,c
  6385  0005F8  6EF6               	movwf	tblptrl,c
  6386  0005FA  0EFD               	movlw	high _dpowers
  6387  0005FC  20F4               	addwfc	prodh,w,c
  6388  0005FE  6EF7               	movwf	tblptrh,c
  6389  000600                     	if	0	;There are less than 3 active tblptr bytes
  6390  000600                     	endif
  6391  000600  0009               	tblrd		*+
  6392  000602  50F5               	movf	tablat,w,c
  6393  000604  0100               	movlb	0	; () banked
  6394  000606  5DE4               	subwf	printf@val& (0+255),w,b
  6395  000608  0009               	tblrd		*+
  6396  00060A  50F5               	movf	tablat,w,c
  6397  00060C  0100               	movlb	0	; () banked
  6398  00060E  59E5               	subwfb	(printf@val+1)& (0+255),w,b
  6399  000610  0009               	tblrd		*+
  6400  000612  50F5               	movf	tablat,w,c
  6401  000614  0100               	movlb	0	; () banked
  6402  000616  59E6               	subwfb	(printf@val+2)& (0+255),w,b
  6403  000618  0009               	tblrd		*+
  6404  00061A  50F5               	movf	tablat,w,c
  6405  00061C  0100               	movlb	0	; () banked
  6406  00061E  59E7               	subwfb	(printf@val+3)& (0+255),w,b
  6407  000620  A0D8               	btfss	status,0,c
  6408  000622  D003               	goto	l6854
  6409                           
  6410                           ; BSR set to: 0
  6411                           
  6412                           ; BSR set to: 0
  6413                           
  6414                           ; BSR set to: 0
  6415                           ;doprnt.c: 1138: break;
  6416  000624  0100               	movlb	0	; () banked
  6417  000626  2BEE               	incf	printf@c& (0+255),f,b
  6418  000628  D7DD               	goto	l6842
  6419  00062A                     l6854:
  6420                           
  6421                           ; BSR set to: 0
  6422                           ;doprnt.c: 1142: width -= prec + c + exp;
  6423  00062A  C0EE  F0CB         	movff	printf@c,??_printf
  6424  00062E  0100               	movlb	0	; () banked
  6425  000630  6BCC               	clrf	(??_printf+1)& (0+255),b
  6426  000632  BFCB               	btfsc	??_printf& (0+255),7,b
  6427  000634  07CC               	decf	(??_printf+1)& (0+255),f,b
  6428  000636  0100               	movlb	0	; () banked
  6429  000638  51EC               	movf	printf@prec& (0+255),w,b
  6430  00063A  0100               	movlb	0	; () banked
  6431  00063C  27CB               	addwf	??_printf& (0+255),f,b
  6432  00063E  0100               	movlb	0	; () banked
  6433  000640  51ED               	movf	(printf@prec+1)& (0+255),w,b
  6434  000642  0100               	movlb	0	; () banked
  6435  000644  23CC               	addwfc	(??_printf+1)& (0+255),f,b
  6436  000646  0100               	movlb	0	; () banked
  6437  000648  51DF               	movf	printf@exp& (0+255),w,b
  6438  00064A  0100               	movlb	0	; () banked
  6439  00064C  27CB               	addwf	??_printf& (0+255),f,b
  6440  00064E  0100               	movlb	0	; () banked
  6441  000650  51E0               	movf	(printf@exp+1)& (0+255),w,b
  6442  000652  0100               	movlb	0	; () banked
  6443  000654  23CC               	addwfc	(??_printf+1)& (0+255),f,b
  6444  000656  0100               	movlb	0	; () banked
  6445  000658  51CB               	movf	??_printf& (0+255),w,b
  6446  00065A  0100               	movlb	0	; () banked
  6447  00065C  5FE8               	subwf	printf@width& (0+255),f,b
  6448  00065E  0100               	movlb	0	; () banked
  6449  000660  51CC               	movf	(??_printf+1)& (0+255),w,b
  6450  000662  0100               	movlb	0	; () banked
  6451  000664  5BE9               	subwfb	(printf@width+1)& (0+255),f,b
  6452                           
  6453                           ;doprnt.c: 1143: if(
  6454                           ;doprnt.c: 1147: prec)
  6455  000666  0100               	movlb	0	; () banked
  6456  000668  51EC               	movf	printf@prec& (0+255),w,b
  6457  00066A  0100               	movlb	0	; () banked
  6458  00066C  11ED               	iorwf	(printf@prec+1)& (0+255),w,b
  6459  00066E  B4D8               	btfsc	status,2,c
  6460  000670  D004               	goto	l6858
  6461                           
  6462                           ; BSR set to: 0
  6463                           ;doprnt.c: 1148: width--;
  6464  000672  0100               	movlb	0	; () banked
  6465  000674  07E8               	decf	printf@width& (0+255),f,b
  6466  000676  A0D8               	btfss	status,0,c
  6467  000678  07E9               	decf	(printf@width+1)& (0+255),f,b
  6468  00067A                     l6858:
  6469                           
  6470                           ; BSR set to: 0
  6471                           ;doprnt.c: 1149: if(flag & 0x03)
  6472  00067A  0E03               	movlw	3
  6473  00067C  0100               	movlb	0	; () banked
  6474  00067E  15EA               	andwf	printf@flag& (0+255),w,b
  6475  000680  0100               	movlb	0	; () banked
  6476  000682  6FCB               	movwf	??_printf& (0+255),b
  6477  000684  0E00               	movlw	0
  6478  000686  0100               	movlb	0	; () banked
  6479  000688  15EB               	andwf	(printf@flag+1)& (0+255),w,b
  6480  00068A  0100               	movlb	0	; () banked
  6481  00068C  6FCC               	movwf	(??_printf+1)& (0+255),b
  6482  00068E  0100               	movlb	0	; () banked
  6483  000690  51CB               	movf	??_printf& (0+255),w,b
  6484  000692  0100               	movlb	0	; () banked
  6485  000694  11CC               	iorwf	(??_printf+1)& (0+255),w,b
  6486  000696  B4D8               	btfsc	status,2,c
  6487  000698  D004               	goto	l6862
  6488                           
  6489                           ; BSR set to: 0
  6490                           ;doprnt.c: 1150: width--;
  6491  00069A  0100               	movlb	0	; () banked
  6492  00069C  07E8               	decf	printf@width& (0+255),f,b
  6493  00069E  A0D8               	btfss	status,0,c
  6494  0006A0  07E9               	decf	(printf@width+1)& (0+255),f,b
  6495  0006A2                     l6862:
  6496                           
  6497                           ; BSR set to: 0
  6498                           ;doprnt.c: 1153: if(flag & 0x04) {
  6499  0006A2  0100               	movlb	0	; () banked
  6500  0006A4  A5EA               	btfss	printf@flag& (0+255),2,b
  6501  0006A6  D02D               	goto	l6878
  6502                           
  6503                           ; BSR set to: 0
  6504                           ;doprnt.c: 1157: if(flag & 0x03)
  6505  0006A8  0E03               	movlw	3
  6506  0006AA  0100               	movlb	0	; () banked
  6507  0006AC  15EA               	andwf	printf@flag& (0+255),w,b
  6508  0006AE  0100               	movlb	0	; () banked
  6509  0006B0  6FCB               	movwf	??_printf& (0+255),b
  6510  0006B2  0E00               	movlw	0
  6511  0006B4  0100               	movlb	0	; () banked
  6512  0006B6  15EB               	andwf	(printf@flag+1)& (0+255),w,b
  6513  0006B8  0100               	movlb	0	; () banked
  6514  0006BA  6FCC               	movwf	(??_printf+1)& (0+255),b
  6515  0006BC  0100               	movlb	0	; () banked
  6516  0006BE  51CB               	movf	??_printf& (0+255),w,b
  6517  0006C0  0100               	movlb	0	; () banked
  6518  0006C2  11CC               	iorwf	(??_printf+1)& (0+255),w,b
  6519  0006C4  B4D8               	btfsc	status,2,c
  6520  0006C6  D00B               	goto	l6872
  6521                           
  6522                           ; BSR set to: 0
  6523                           ;doprnt.c: 1159: (putch('-') );
  6524  0006C8  0E2D               	movlw	45
  6525  0006CA  EC47  F01F         	call	_putch
  6526                           
  6527                           ;doprnt.c: 1168: while(width > 0) {
  6528  0006CE  D007               	goto	l6872
  6529  0006D0                     l6868:
  6530                           
  6531                           ;doprnt.c: 1169: (putch('0') );
  6532  0006D0  0E30               	movlw	48
  6533  0006D2  EC47  F01F         	call	_putch
  6534                           
  6535                           ;doprnt.c: 1170: width--;
  6536  0006D6  0100               	movlb	0	; () banked
  6537  0006D8  07E8               	decf	printf@width& (0+255),f,b
  6538  0006DA  A0D8               	btfss	status,0,c
  6539  0006DC  07E9               	decf	(printf@width+1)& (0+255),f,b
  6540  0006DE                     l6872:
  6541  0006DE  0100               	movlb	0	; () banked
  6542  0006E0  BFE9               	btfsc	(printf@width+1)& (0+255),7,b
  6543  0006E2  D073               	goto	l6890
  6544  0006E4  0100               	movlb	0	; () banked
  6545  0006E6  51E9               	movf	(printf@width+1)& (0+255),w,b
  6546  0006E8  E1F3               	bnz	l6868
  6547  0006EA  0100               	movlb	0	; () banked
  6548  0006EC  05E8               	decf	printf@width& (0+255),w,b
  6549  0006EE  A0D8               	btfss	status,0,c
  6550  0006F0  D06C               	goto	l6890
  6551  0006F2  D7EE               	goto	l6868
  6552  0006F4                     l6874:
  6553                           
  6554                           ; BSR set to: 0
  6555                           ;doprnt.c: 1181: (putch(' ') );
  6556  0006F4  0E20               	movlw	32
  6557  0006F6  EC47  F01F         	call	_putch
  6558                           
  6559                           ;doprnt.c: 1182: width--;
  6560  0006FA  0100               	movlb	0	; () banked
  6561  0006FC  07E8               	decf	printf@width& (0+255),f,b
  6562  0006FE  A0D8               	btfss	status,0,c
  6563  000700  07E9               	decf	(printf@width+1)& (0+255),f,b
  6564  000702                     l6878:
  6565                           
  6566                           ; BSR set to: 0
  6567  000702  0100               	movlb	0	; () banked
  6568  000704  BFE9               	btfsc	(printf@width+1)& (0+255),7,b
  6569  000706  D007               	goto	l6880
  6570  000708  0100               	movlb	0	; () banked
  6571  00070A  51E9               	movf	(printf@width+1)& (0+255),w,b
  6572  00070C  E1F3               	bnz	l6874
  6573  00070E  0100               	movlb	0	; () banked
  6574  000710  05E8               	decf	printf@width& (0+255),w,b
  6575  000712  B0D8               	btfsc	status,0,c
  6576  000714  D7EF               	goto	l6874
  6577  000716                     l6880:
  6578                           
  6579                           ; BSR set to: 0
  6580                           ;doprnt.c: 1183: }
  6581                           ;doprnt.c: 1188: if(flag & 0x03)
  6582  000716  0E03               	movlw	3
  6583  000718  0100               	movlb	0	; () banked
  6584  00071A  15EA               	andwf	printf@flag& (0+255),w,b
  6585  00071C  0100               	movlb	0	; () banked
  6586  00071E  6FCB               	movwf	??_printf& (0+255),b
  6587  000720  0E00               	movlw	0
  6588  000722  0100               	movlb	0	; () banked
  6589  000724  15EB               	andwf	(printf@flag+1)& (0+255),w,b
  6590  000726  0100               	movlb	0	; () banked
  6591  000728  6FCC               	movwf	(??_printf+1)& (0+255),b
  6592  00072A  0100               	movlb	0	; () banked
  6593  00072C  51CB               	movf	??_printf& (0+255),w,b
  6594  00072E  0100               	movlb	0	; () banked
  6595  000730  11CC               	iorwf	(??_printf+1)& (0+255),w,b
  6596  000732  B4D8               	btfsc	status,2,c
  6597  000734  D04A               	goto	l6890
  6598                           
  6599                           ; BSR set to: 0
  6600                           ;doprnt.c: 1190: (putch('-') );
  6601  000736  0E2D               	movlw	45
  6602  000738  EC47  F01F         	call	_putch
  6603                           
  6604                           ;doprnt.c: 1195: }
  6605                           ;doprnt.c: 1196: while(c--) {
  6606  00073C  D046               	goto	l6890
  6607  00073E                     l6884:
  6608                           
  6609                           ;doprnt.c: 1200: {
  6610                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  6611  00073E  C0E4  F023         	movff	printf@val,___lldiv@dividend
  6612  000742  C0E5  F024         	movff	printf@val+1,___lldiv@dividend+1
  6613  000746  C0E6  F025         	movff	printf@val+2,___lldiv@dividend+2
  6614  00074A  C0E7  F026         	movff	printf@val+3,___lldiv@dividend+3
  6615  00074E  0100               	movlb	0	; () banked
  6616  000750  51EE               	movf	printf@c& (0+255),w,b
  6617  000752  0D04               	mullw	4
  6618  000754  0EDF               	movlw	low _dpowers
  6619  000756  24F3               	addwf	prodl,w,c
  6620  000758  6EF6               	movwf	tblptrl,c
  6621  00075A  0EFD               	movlw	high _dpowers
  6622  00075C  20F4               	addwfc	prodh,w,c
  6623  00075E  6EF7               	movwf	tblptrh,c
  6624  000760                     	if	0	;There are less than 3 active tblptr bytes
  6625  000760                     	endif
  6626  000760  0009               	tblrd		*+
  6627  000762  CFF5 F027          	movff	tablat,___lldiv@divisor
  6628  000766  0009               	tblrd		*+
  6629  000768  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  6630  00076C  0009               	tblrd		*+
  6631  00076E  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  6632  000772  000A               	tblrd		*-
  6633  000774  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  6634  000778  EC30  F01B         	call	___lldiv	;wreg free
  6635  00077C  C023  F0DB         	movff	?___lldiv,printf@tmpval
  6636  000780  C024  F0DC         	movff	?___lldiv+1,printf@tmpval+1
  6637  000784  C025  F0DD         	movff	?___lldiv+2,printf@tmpval+2
  6638  000788  C026  F0DE         	movff	?___lldiv+3,printf@tmpval+3
  6639                           
  6640                           ;doprnt.c: 1202: tmpval.vd %= 10;
  6641  00078C  C0DB  F030         	movff	printf@tmpval,___llmod@dividend
  6642  000790  C0DC  F031         	movff	printf@tmpval+1,___llmod@dividend+1
  6643  000794  C0DD  F032         	movff	printf@tmpval+2,___llmod@dividend+2
  6644  000798  C0DE  F033         	movff	printf@tmpval+3,___llmod@dividend+3
  6645  00079C  0E0A               	movlw	10
  6646  00079E  6E34               	movwf	___llmod@divisor,c
  6647  0007A0  0E00               	movlw	0
  6648  0007A2  6E35               	movwf	___llmod@divisor+1,c
  6649  0007A4  0E00               	movlw	0
  6650  0007A6  6E36               	movwf	___llmod@divisor+2,c
  6651  0007A8  0E00               	movlw	0
  6652  0007AA  6E37               	movwf	___llmod@divisor+3,c
  6653  0007AC  EC5E  F01C         	call	___llmod	;wreg free
  6654  0007B0  C030  F0DB         	movff	?___llmod,printf@tmpval
  6655  0007B4  C031  F0DC         	movff	?___llmod+1,printf@tmpval+1
  6656  0007B8  C032  F0DD         	movff	?___llmod+2,printf@tmpval+2
  6657  0007BC  C033  F0DE         	movff	?___llmod+3,printf@tmpval+3
  6658                           
  6659                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  6660  0007C0  0100               	movlb	0	; () banked
  6661  0007C2  51DB               	movf	printf@tmpval& (0+255),w,b
  6662  0007C4  0F30               	addlw	48
  6663  0007C6  EC47  F01F         	call	_putch
  6664  0007CA                     l6890:
  6665  0007CA  0100               	movlb	0	; () banked
  6666  0007CC  07EE               	decf	printf@c& (0+255),f,b
  6667  0007CE  0100               	movlb	0	; () banked
  6668  0007D0  29EE               	incf	printf@c& (0+255),w,b
  6669  0007D2  B4D8               	btfsc	status,2,c
  6670  0007D4  D008               	goto	l6896
  6671  0007D6  D7B3               	goto	l6884
  6672  0007D8                     l6892:
  6673                           
  6674                           ; BSR set to: 0
  6675                           ;doprnt.c: 1208: (putch('0') );
  6676  0007D8  0E30               	movlw	48
  6677  0007DA  EC47  F01F         	call	_putch
  6678                           
  6679                           ;doprnt.c: 1209: exp--;
  6680  0007DE  0100               	movlb	0	; () banked
  6681  0007E0  07DF               	decf	printf@exp& (0+255),f,b
  6682  0007E2  A0D8               	btfss	status,0,c
  6683  0007E4  07E0               	decf	(printf@exp+1)& (0+255),f,b
  6684  0007E6                     l6896:
  6685                           
  6686                           ; BSR set to: 0
  6687  0007E6  0100               	movlb	0	; () banked
  6688  0007E8  BFE0               	btfsc	(printf@exp+1)& (0+255),7,b
  6689  0007EA  D007               	goto	l6898
  6690  0007EC  0100               	movlb	0	; () banked
  6691  0007EE  51E0               	movf	(printf@exp+1)& (0+255),w,b
  6692  0007F0  E1F3               	bnz	l6892
  6693  0007F2  0100               	movlb	0	; () banked
  6694  0007F4  05DF               	decf	printf@exp& (0+255),w,b
  6695  0007F6  B0D8               	btfsc	status,0,c
  6696  0007F8  D7EF               	goto	l6892
  6697  0007FA                     l6898:
  6698                           
  6699                           ; BSR set to: 0
  6700                           ;doprnt.c: 1210: }
  6701                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  6702  0007FA  0100               	movlb	0	; () banked
  6703  0007FC  BFED               	btfsc	(printf@prec+1)& (0+255),7,b
  6704  0007FE  D00C               	goto	l823
  6705  000800  0100               	movlb	0	; () banked
  6706  000802  51ED               	movf	(printf@prec+1)& (0+255),w,b
  6707  000804  E105               	bnz	u6960
  6708  000806  0E09               	movlw	9
  6709  000808  0100               	movlb	0	; () banked
  6710  00080A  5DEC               	subwf	printf@prec& (0+255),w,b
  6711  00080C  A0D8               	btfss	status,0,c
  6712  00080E  D004               	goto	l823
  6713  000810                     u6960:
  6714                           
  6715                           ; BSR set to: 0
  6716                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  6717  000810  0E08               	movlw	8
  6718  000812  0100               	movlb	0	; () banked
  6719  000814  6FEE               	movwf	printf@c& (0+255),b
  6720  000816  D002               	goto	l6902
  6721  000818                     l823:
  6722                           
  6723                           ; BSR set to: 0
  6724                           ;doprnt.c: 1213: else
  6725                           ;doprnt.c: 1214: c = prec;
  6726  000818  C0EC  F0EE         	movff	printf@prec,printf@c
  6727  00081C                     l6902:
  6728                           
  6729                           ; BSR set to: 0
  6730                           ;doprnt.c: 1215: prec -= c;
  6731  00081C  0100               	movlb	0	; () banked
  6732  00081E  51EE               	movf	printf@c& (0+255),w,b
  6733  000820  0100               	movlb	0	; () banked
  6734  000822  5FEC               	subwf	printf@prec& (0+255),f,b
  6735  000824  0E00               	movlw	0
  6736  000826  0100               	movlb	0	; () banked
  6737  000828  BFEE               	btfsc	printf@c& (0+255),7,b
  6738  00082A  0EFF               	movlw	255
  6739  00082C  0100               	movlb	0	; () banked
  6740  00082E  5BED               	subwfb	(printf@prec+1)& (0+255),f,b
  6741                           
  6742                           ; BSR set to: 0
  6743                           ;doprnt.c: 1219: if(c)
  6744  000830  0100               	movlb	0	; () banked
  6745  000832  51EE               	movf	printf@c& (0+255),w,b
  6746  000834  0100               	movlb	0	; () banked
  6747  000836  B4D8               	btfsc	status,2,c
  6748  000838  D003               	goto	l6908
  6749                           
  6750                           ; BSR set to: 0
  6751                           ;doprnt.c: 1221: (putch('.') );
  6752  00083A  0E2E               	movlw	46
  6753  00083C  EC47  F01F         	call	_putch
  6754  000840                     l6908:
  6755                           
  6756                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6757  000840  0100               	movlb	0	; () banked
  6758  000842  51EE               	movf	printf@c& (0+255),w,b
  6759  000844  ECB3  F009         	call	_scale
  6760  000848  C098  F0D1         	movff	?_scale,_printf$1423
  6761  00084C  C099  F0D2         	movff	?_scale+1,_printf$1423+1
  6762  000850  C09A  F0D3         	movff	?_scale+2,_printf$1423+2
  6763                           
  6764                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6765  000854  C0E1  F08C         	movff	printf@fval,___ftmul@f2
  6766  000858  C0E2  F08D         	movff	printf@fval+1,___ftmul@f2+1
  6767  00085C  C0E3  F08E         	movff	printf@fval+2,___ftmul@f2+2
  6768  000860  C0D1  F089         	movff	_printf$1423,___ftmul@f1
  6769  000864  C0D2  F08A         	movff	_printf$1423+1,___ftmul@f1+1
  6770  000868  C0D3  F08B         	movff	_printf$1423+2,___ftmul@f1+2
  6771  00086C  EC8B  F010         	call	___ftmul	;wreg free
  6772  000870  C089  F0AE         	movff	?___ftmul,___fttol@f1
  6773  000874  C08A  F0AF         	movff	?___ftmul+1,___fttol@f1+1
  6774  000878  C08B  F0B0         	movff	?___ftmul+2,___fttol@f1+2
  6775  00087C  ECE6  F011         	call	___fttol	;wreg free
  6776  000880  C0AE  F0E4         	movff	?___fttol,printf@val
  6777  000884  C0AF  F0E5         	movff	?___fttol+1,printf@val+1
  6778  000888  C0B0  F0E6         	movff	?___fttol+2,printf@val+2
  6779  00088C  C0B1  F0E7         	movff	?___fttol+3,printf@val+3
  6780                           
  6781                           ;doprnt.c: 1228: while(c--) {
  6782  000890  D06D               	goto	l6918
  6783  000892                     l6912:
  6784                           
  6785                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  6786  000892  C0E4  F023         	movff	printf@val,___lldiv@dividend
  6787  000896  C0E5  F024         	movff	printf@val+1,___lldiv@dividend+1
  6788  00089A  C0E6  F025         	movff	printf@val+2,___lldiv@dividend+2
  6789  00089E  C0E7  F026         	movff	printf@val+3,___lldiv@dividend+3
  6790  0008A2  0100               	movlb	0	; () banked
  6791  0008A4  51EE               	movf	printf@c& (0+255),w,b
  6792  0008A6  0D04               	mullw	4
  6793  0008A8  0EDF               	movlw	low _dpowers
  6794  0008AA  24F3               	addwf	prodl,w,c
  6795  0008AC  6EF6               	movwf	tblptrl,c
  6796  0008AE  0EFD               	movlw	high _dpowers
  6797  0008B0  20F4               	addwfc	prodh,w,c
  6798  0008B2  6EF7               	movwf	tblptrh,c
  6799  0008B4                     	if	0	;There are less than 3 active tblptr bytes
  6800  0008B4                     	endif
  6801  0008B4  0009               	tblrd		*+
  6802  0008B6  CFF5 F027          	movff	tablat,___lldiv@divisor
  6803  0008BA  0009               	tblrd		*+
  6804  0008BC  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  6805  0008C0  0009               	tblrd		*+
  6806  0008C2  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  6807  0008C6  000A               	tblrd		*-
  6808  0008C8  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  6809  0008CC  EC30  F01B         	call	___lldiv	;wreg free
  6810  0008D0  C023  F0DB         	movff	?___lldiv,printf@tmpval
  6811  0008D4  C024  F0DC         	movff	?___lldiv+1,printf@tmpval+1
  6812  0008D8  C025  F0DD         	movff	?___lldiv+2,printf@tmpval+2
  6813  0008DC  C026  F0DE         	movff	?___lldiv+3,printf@tmpval+3
  6814                           
  6815                           ;doprnt.c: 1230: tmpval.vd %= 10;
  6816  0008E0  C0DB  F030         	movff	printf@tmpval,___llmod@dividend
  6817  0008E4  C0DC  F031         	movff	printf@tmpval+1,___llmod@dividend+1
  6818  0008E8  C0DD  F032         	movff	printf@tmpval+2,___llmod@dividend+2
  6819  0008EC  C0DE  F033         	movff	printf@tmpval+3,___llmod@dividend+3
  6820  0008F0  0E0A               	movlw	10
  6821  0008F2  6E34               	movwf	___llmod@divisor,c
  6822  0008F4  0E00               	movlw	0
  6823  0008F6  6E35               	movwf	___llmod@divisor+1,c
  6824  0008F8  0E00               	movlw	0
  6825  0008FA  6E36               	movwf	___llmod@divisor+2,c
  6826  0008FC  0E00               	movlw	0
  6827  0008FE  6E37               	movwf	___llmod@divisor+3,c
  6828  000900  EC5E  F01C         	call	___llmod	;wreg free
  6829  000904  C030  F0DB         	movff	?___llmod,printf@tmpval
  6830  000908  C031  F0DC         	movff	?___llmod+1,printf@tmpval+1
  6831  00090C  C032  F0DD         	movff	?___llmod+2,printf@tmpval+2
  6832  000910  C033  F0DE         	movff	?___llmod+3,printf@tmpval+3
  6833                           
  6834                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  6835  000914  0100               	movlb	0	; () banked
  6836  000916  51DB               	movf	printf@tmpval& (0+255),w,b
  6837  000918  0F30               	addlw	48
  6838  00091A  EC47  F01F         	call	_putch
  6839                           
  6840                           ;doprnt.c: 1232: val %= dpowers[c];
  6841  00091E  C0E4  F030         	movff	printf@val,___llmod@dividend
  6842  000922  C0E5  F031         	movff	printf@val+1,___llmod@dividend+1
  6843  000926  C0E6  F032         	movff	printf@val+2,___llmod@dividend+2
  6844  00092A  C0E7  F033         	movff	printf@val+3,___llmod@dividend+3
  6845  00092E  0100               	movlb	0	; () banked
  6846  000930  51EE               	movf	printf@c& (0+255),w,b
  6847  000932  0D04               	mullw	4
  6848  000934  0EDF               	movlw	low _dpowers
  6849  000936  24F3               	addwf	prodl,w,c
  6850  000938  6EF6               	movwf	tblptrl,c
  6851  00093A  0EFD               	movlw	high _dpowers
  6852  00093C  20F4               	addwfc	prodh,w,c
  6853  00093E  6EF7               	movwf	tblptrh,c
  6854  000940                     	if	0	;There are less than 3 active tblptr bytes
  6855  000940                     	endif
  6856  000940  0009               	tblrd		*+
  6857  000942  CFF5 F034          	movff	tablat,___llmod@divisor
  6858  000946  0009               	tblrd		*+
  6859  000948  CFF5 F035          	movff	tablat,___llmod@divisor+1
  6860  00094C  0009               	tblrd		*+
  6861  00094E  CFF5 F036          	movff	tablat,___llmod@divisor+2
  6862  000952  000A               	tblrd		*-
  6863  000954  CFF5 F037          	movff	tablat,___llmod@divisor+3
  6864  000958  EC5E  F01C         	call	___llmod	;wreg free
  6865  00095C  C030  F0E4         	movff	?___llmod,printf@val
  6866  000960  C031  F0E5         	movff	?___llmod+1,printf@val+1
  6867  000964  C032  F0E6         	movff	?___llmod+2,printf@val+2
  6868  000968  C033  F0E7         	movff	?___llmod+3,printf@val+3
  6869  00096C                     l6918:
  6870  00096C  0100               	movlb	0	; () banked
  6871  00096E  07EE               	decf	printf@c& (0+255),f,b
  6872  000970  0100               	movlb	0	; () banked
  6873  000972  29EE               	incf	printf@c& (0+255),w,b
  6874  000974  B4D8               	btfsc	status,2,c
  6875  000976  D008               	goto	l6924
  6876  000978  D78C               	goto	l6912
  6877  00097A                     l6920:
  6878                           
  6879                           ; BSR set to: 0
  6880                           ;doprnt.c: 1236: (putch('0') );
  6881  00097A  0E30               	movlw	48
  6882  00097C  EC47  F01F         	call	_putch
  6883                           
  6884                           ;doprnt.c: 1237: prec--;
  6885  000980  0100               	movlb	0	; () banked
  6886  000982  07EC               	decf	printf@prec& (0+255),f,b
  6887  000984  A0D8               	btfss	status,0,c
  6888  000986  07ED               	decf	(printf@prec+1)& (0+255),f,b
  6889  000988                     l6924:
  6890                           
  6891                           ; BSR set to: 0
  6892  000988  0100               	movlb	0	; () banked
  6893  00098A  51EC               	movf	printf@prec& (0+255),w,b
  6894  00098C  0100               	movlb	0	; () banked
  6895  00098E  11ED               	iorwf	(printf@prec+1)& (0+255),w,b
  6896  000990  B4D8               	btfsc	status,2,c
  6897  000992  D22B               	goto	l7052
  6898  000994  D7F2               	goto	l6920
  6899  000996                     l783:
  6900                           
  6901                           ; BSR set to: 0
  6902                           ;doprnt.c: 1246: }
  6903                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  6904  000996  0100               	movlb	0	; () banked
  6905  000998  BFEA               	btfsc	printf@flag& (0+255),7,b
  6906  00099A  D034               	goto	l832
  6907                           
  6908                           ; BSR set to: 0
  6909                           ;doprnt.c: 1253: {
  6910                           ;doprnt.c: 1255: if(flag & 0x10)
  6911  00099C  0100               	movlb	0	; () banked
  6912  00099E  A9EA               	btfss	printf@flag& (0+255),4,b
  6913  0009A0  D00E               	goto	l6932
  6914                           
  6915                           ; BSR set to: 0
  6916                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  6917  0009A2  C0D9  FFD9         	movff	printf@ap,fsr2l
  6918  0009A6  C0DA  FFDA         	movff	printf@ap+1,fsr2h
  6919  0009AA  CFDE F0E4          	movff	postinc2,printf@val
  6920  0009AE  CFDE F0E5          	movff	postinc2,printf@val+1
  6921  0009B2  CFDE F0E6          	movff	postinc2,printf@val+2
  6922  0009B6  CFDE F0E7          	movff	postinc2,printf@val+3
  6923                           
  6924                           ; BSR set to: 0
  6925  0009BA  0E04               	movlw	4
  6926  0009BC  D00F               	goto	L2
  6927  0009BE                     l6932:
  6928                           
  6929                           ; BSR set to: 0
  6930                           ;doprnt.c: 1257: else
  6931                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  6932  0009BE  C0D9  FFD9         	movff	printf@ap,fsr2l
  6933  0009C2  C0DA  FFDA         	movff	printf@ap+1,fsr2h
  6934  0009C6  CFDE F0E4          	movff	postinc2,printf@val
  6935  0009CA  CFDD F0E5          	movff	postdec2,printf@val+1
  6936  0009CE  0100               	movlb	0	; () banked
  6937  0009D0  0E00               	movlw	0
  6938  0009D2  BFE5               	btfsc	(printf@val+1)& (0+255),7,b
  6939  0009D4  0EFF               	movlw	-1
  6940  0009D6  6FE6               	movwf	(printf@val+2)& (0+255),b
  6941  0009D8  6FE7               	movwf	(printf@val+3)& (0+255),b
  6942                           
  6943                           ; BSR set to: 0
  6944  0009DA  0E02               	movlw	2
  6945  0009DC                     L2:
  6946  0009DC  0100               	movlb	0	; () banked
  6947  0009DE  27D9               	addwf	printf@ap& (0+255),f,b
  6948  0009E0  0E00               	movlw	0
  6949  0009E2  23DA               	addwfc	(printf@ap+1)& (0+255),f,b
  6950                           
  6951                           ; BSR set to: 0
  6952                           ;doprnt.c: 1261: if((long)val < 0) {
  6953                           
  6954                           ; BSR set to: 0
  6955  0009E4  0100               	movlb	0	; () banked
  6956  0009E6  AFE7               	btfss	(printf@val+3)& (0+255),7,b
  6957  0009E8  D032               	goto	l6950
  6958                           
  6959                           ; BSR set to: 0
  6960                           ;doprnt.c: 1262: flag |= 0x03;
  6961  0009EA  0E03               	movlw	3
  6962  0009EC  0100               	movlb	0	; () banked
  6963  0009EE  13EA               	iorwf	printf@flag& (0+255),f,b
  6964                           
  6965                           ; BSR set to: 0
  6966                           ;doprnt.c: 1263: val = -val;
  6967  0009F0  0100               	movlb	0	; () banked
  6968  0009F2  1FE7               	comf	(printf@val+3)& (0+255),f,b
  6969  0009F4  1FE6               	comf	(printf@val+2)& (0+255),f,b
  6970  0009F6  1FE5               	comf	(printf@val+1)& (0+255),f,b
  6971  0009F8  6DE4               	negf	printf@val& (0+255),b
  6972  0009FA  0E00               	movlw	0
  6973  0009FC  23E5               	addwfc	(printf@val+1)& (0+255),f,b
  6974  0009FE  23E6               	addwfc	(printf@val+2)& (0+255),f,b
  6975  000A00  23E7               	addwfc	(printf@val+3)& (0+255),f,b
  6976                           
  6977                           ; BSR set to: 0
  6978                           ;doprnt.c: 1264: }
  6979                           ;doprnt.c: 1266: }
  6980  000A02  D025               	goto	l6950
  6981  000A04                     l832:
  6982                           
  6983                           ; BSR set to: 0
  6984                           ;doprnt.c: 1268: else
  6985                           ;doprnt.c: 1273: {
  6986                           ;doprnt.c: 1281: if(flag & 0x10)
  6987  000A04  0100               	movlb	0	; () banked
  6988  000A06  A9EA               	btfss	printf@flag& (0+255),4,b
  6989  000A08  D00E               	goto	l6946
  6990                           
  6991                           ; BSR set to: 0
  6992                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  6993  000A0A  C0D9  FFD9         	movff	printf@ap,fsr2l
  6994  000A0E  C0DA  FFDA         	movff	printf@ap+1,fsr2h
  6995  000A12  CFDE F0E4          	movff	postinc2,printf@val
  6996  000A16  CFDE F0E5          	movff	postinc2,printf@val+1
  6997  000A1A  CFDE F0E6          	movff	postinc2,printf@val+2
  6998  000A1E  CFDE F0E7          	movff	postinc2,printf@val+3
  6999                           
  7000                           ; BSR set to: 0
  7001  000A22  0E04               	movlw	4
  7002  000A24  D010               	goto	L3
  7003  000A26                     l6946:
  7004                           
  7005                           ; BSR set to: 0
  7006                           ;doprnt.c: 1283: else
  7007                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7008  000A26  C0D9  FFD9         	movff	printf@ap,fsr2l
  7009  000A2A  C0DA  FFDA         	movff	printf@ap+1,fsr2h
  7010  000A2E  CFDE F0CB          	movff	postinc2,??_printf
  7011  000A32  CFDD F0CC          	movff	postdec2,??_printf+1
  7012  000A36  C0CB  F0E4         	movff	??_printf,printf@val
  7013  000A3A  C0CC  F0E5         	movff	??_printf+1,printf@val+1
  7014  000A3E  0100               	movlb	0	; () banked
  7015  000A40  6BE6               	clrf	(printf@val+2)& (0+255),b
  7016  000A42  6BE7               	clrf	(printf@val+3)& (0+255),b
  7017                           
  7018                           ; BSR set to: 0
  7019  000A44  0E02               	movlw	2
  7020  000A46                     L3:
  7021  000A46  0100               	movlb	0	; () banked
  7022  000A48  27D9               	addwf	printf@ap& (0+255),f,b
  7023  000A4A  0E00               	movlw	0
  7024  000A4C  23DA               	addwfc	(printf@ap+1)& (0+255),f,b
  7025  000A4E                     l6950:
  7026                           
  7027                           ; BSR set to: 0
  7028                           ;doprnt.c: 1287: }
  7029                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  7030  000A4E  0100               	movlb	0	; () banked
  7031  000A50  51EC               	movf	printf@prec& (0+255),w,b
  7032  000A52  0100               	movlb	0	; () banked
  7033  000A54  11ED               	iorwf	(printf@prec+1)& (0+255),w,b
  7034  000A56  A4D8               	btfss	status,2,c
  7035  000A58  D05A               	goto	l6986
  7036                           
  7037                           ; BSR set to: 0
  7038  000A5A  0100               	movlb	0	; () banked
  7039  000A5C  51E4               	movf	printf@val& (0+255),w,b
  7040  000A5E  0100               	movlb	0	; () banked
  7041  000A60  11E5               	iorwf	(printf@val+1)& (0+255),w,b
  7042  000A62  0100               	movlb	0	; () banked
  7043  000A64  11E6               	iorwf	(printf@val+2)& (0+255),w,b
  7044  000A66  0100               	movlb	0	; () banked
  7045  000A68  11E7               	iorwf	(printf@val+3)& (0+255),w,b
  7046  000A6A  A4D8               	btfss	status,2,c
  7047  000A6C  D050               	goto	l6986
  7048                           
  7049                           ; BSR set to: 0
  7050                           ;doprnt.c: 1291: prec++;
  7051  000A6E  0100               	movlb	0	; () banked
  7052  000A70  4BEC               	infsnz	printf@prec& (0+255),f,b
  7053  000A72  2BED               	incf	(printf@prec+1)& (0+255),f,b
  7054                           
  7055                           ; BSR set to: 0
  7056                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  7057  000A74  D04C               	goto	l6986
  7058  000A76                     l6956:
  7059                           
  7060                           ; BSR set to: 0
  7061                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7062  000A76  0E01               	movlw	1
  7063  000A78  0100               	movlb	0	; () banked
  7064  000A7A  6FEE               	movwf	printf@c& (0+255),b
  7065  000A7C                     l6958:
  7066                           
  7067                           ; BSR set to: 0
  7068  000A7C  0E0A               	movlw	10
  7069  000A7E  0100               	movlb	0	; () banked
  7070  000A80  19EE               	xorwf	printf@c& (0+255),w,b
  7071  000A82  B4D8               	btfsc	status,2,c
  7072  000A84  D04D               	goto	l6988
  7073                           
  7074                           ; BSR set to: 0
  7075                           ;doprnt.c: 1306: if(val < dpowers[c])
  7076                           
  7077                           ; BSR set to: 0
  7078                           
  7079                           ; BSR set to: 0
  7080  000A86  0100               	movlb	0	; () banked
  7081  000A88  51EE               	movf	printf@c& (0+255),w,b
  7082  000A8A  0D04               	mullw	4
  7083  000A8C  0EDF               	movlw	low _dpowers
  7084  000A8E  24F3               	addwf	prodl,w,c
  7085  000A90  6EF6               	movwf	tblptrl,c
  7086  000A92  0EFD               	movlw	high _dpowers
  7087  000A94  20F4               	addwfc	prodh,w,c
  7088  000A96  6EF7               	movwf	tblptrh,c
  7089  000A98                     	if	0	;There are less than 3 active tblptr bytes
  7090  000A98                     	endif
  7091  000A98  0009               	tblrd		*+
  7092  000A9A  50F5               	movf	tablat,w,c
  7093  000A9C  0100               	movlb	0	; () banked
  7094  000A9E  5DE4               	subwf	printf@val& (0+255),w,b
  7095  000AA0  0009               	tblrd		*+
  7096  000AA2  50F5               	movf	tablat,w,c
  7097  000AA4  0100               	movlb	0	; () banked
  7098  000AA6  59E5               	subwfb	(printf@val+1)& (0+255),w,b
  7099  000AA8  0009               	tblrd		*+
  7100  000AAA  50F5               	movf	tablat,w,c
  7101  000AAC  0100               	movlb	0	; () banked
  7102  000AAE  59E6               	subwfb	(printf@val+2)& (0+255),w,b
  7103  000AB0  0009               	tblrd		*+
  7104  000AB2  50F5               	movf	tablat,w,c
  7105  000AB4  0100               	movlb	0	; () banked
  7106  000AB6  59E7               	subwfb	(printf@val+3)& (0+255),w,b
  7107  000AB8  A0D8               	btfss	status,0,c
  7108  000ABA  D032               	goto	l6988
  7109                           
  7110                           ; BSR set to: 0
  7111                           
  7112                           ; BSR set to: 0
  7113                           
  7114                           ; BSR set to: 0
  7115                           ;doprnt.c: 1307: break;
  7116  000ABC  0100               	movlb	0	; () banked
  7117  000ABE  2BEE               	incf	printf@c& (0+255),f,b
  7118  000AC0  D7DD               	goto	l6958
  7119  000AC2                     l6970:
  7120                           
  7121                           ; BSR set to: 0
  7122                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7123  000AC2  0E01               	movlw	1
  7124  000AC4  0100               	movlb	0	; () banked
  7125  000AC6  6FEE               	movwf	printf@c& (0+255),b
  7126  000AC8                     l6972:
  7127                           
  7128                           ; BSR set to: 0
  7129  000AC8  0E08               	movlw	8
  7130  000ACA  0100               	movlb	0	; () banked
  7131  000ACC  19EE               	xorwf	printf@c& (0+255),w,b
  7132  000ACE  B4D8               	btfsc	status,2,c
  7133  000AD0  D027               	goto	l6988
  7134                           
  7135                           ; BSR set to: 0
  7136                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7137                           
  7138                           ; BSR set to: 0
  7139                           
  7140                           ; BSR set to: 0
  7141  000AD2  0100               	movlb	0	; () banked
  7142  000AD4  51EE               	movf	printf@c& (0+255),w,b
  7143  000AD6  0D04               	mullw	4
  7144  000AD8  0E55               	movlw	low _hexpowers
  7145  000ADA  24F3               	addwf	prodl,w,c
  7146  000ADC  6EF6               	movwf	tblptrl,c
  7147  000ADE  0EFE               	movlw	high _hexpowers
  7148  000AE0  20F4               	addwfc	prodh,w,c
  7149  000AE2  6EF7               	movwf	tblptrh,c
  7150  000AE4                     	if	0	;There are less than 3 active tblptr bytes
  7151  000AE4                     	endif
  7152  000AE4  0009               	tblrd		*+
  7153  000AE6  50F5               	movf	tablat,w,c
  7154  000AE8  0100               	movlb	0	; () banked
  7155  000AEA  5DE4               	subwf	printf@val& (0+255),w,b
  7156  000AEC  0009               	tblrd		*+
  7157  000AEE  50F5               	movf	tablat,w,c
  7158  000AF0  0100               	movlb	0	; () banked
  7159  000AF2  59E5               	subwfb	(printf@val+1)& (0+255),w,b
  7160  000AF4  0009               	tblrd		*+
  7161  000AF6  50F5               	movf	tablat,w,c
  7162  000AF8  0100               	movlb	0	; () banked
  7163  000AFA  59E6               	subwfb	(printf@val+2)& (0+255),w,b
  7164  000AFC  0009               	tblrd		*+
  7165  000AFE  50F5               	movf	tablat,w,c
  7166  000B00  0100               	movlb	0	; () banked
  7167  000B02  59E7               	subwfb	(printf@val+3)& (0+255),w,b
  7168  000B04  A0D8               	btfss	status,0,c
  7169  000B06  D00C               	goto	l6988
  7170                           
  7171                           ; BSR set to: 0
  7172                           
  7173                           ; BSR set to: 0
  7174                           
  7175                           ; BSR set to: 0
  7176                           ;doprnt.c: 1318: break;
  7177  000B08  0100               	movlb	0	; () banked
  7178  000B0A  2BEE               	incf	printf@c& (0+255),f,b
  7179  000B0C  D7DD               	goto	l6972
  7180  000B0E                     l6986:
  7181                           
  7182                           ; BSR set to: 0
  7183  000B0E  0100               	movlb	0	; () banked
  7184  000B10  51EA               	movf	printf@flag& (0+255),w,b
  7185  000B12  0B80               	andlw	128
  7186                           
  7187                           ; Switch size 1, requested type "space"
  7188                           ; Number of cases is 2, Range of values is 0 to 128
  7189                           ; switch strategies available:
  7190                           ; Name         Instructions Cycles
  7191                           ; simple_byte            7     4 (average)
  7192                           ;	Chosen strategy is simple_byte
  7193  000B14  0A00               	xorlw	0	; case 0
  7194  000B16  B4D8               	btfsc	status,2,c
  7195  000B18  D7AE               	goto	l6956
  7196  000B1A  0A80               	xorlw	128	; case 128
  7197  000B1C  B4D8               	btfsc	status,2,c
  7198  000B1E  D7D1               	goto	l6970
  7199  000B20                     l6988:
  7200                           
  7201                           ; BSR set to: 0
  7202                           ;doprnt.c: 1339: if(c < prec)
  7203  000B20  0E80               	movlw	128
  7204  000B22  0100               	movlb	0	; () banked
  7205  000B24  BFEE               	btfsc	printf@c& (0+255),7,b
  7206  000B26  0E7F               	movlw	127
  7207  000B28  0100               	movlb	0	; () banked
  7208  000B2A  6FCB               	movwf	??_printf& (0+255),b
  7209  000B2C  0100               	movlb	0	; () banked
  7210  000B2E  51EC               	movf	printf@prec& (0+255),w,b
  7211  000B30  0100               	movlb	0	; () banked
  7212  000B32  5DEE               	subwf	printf@c& (0+255),w,b
  7213  000B34  0100               	movlb	0	; () banked
  7214  000B36  51ED               	movf	(printf@prec+1)& (0+255),w,b
  7215  000B38  0A80               	xorlw	128
  7216  000B3A  0100               	movlb	0	; () banked
  7217  000B3C  59CB               	subwfb	??_printf& (0+255),w,b
  7218  000B3E  B0D8               	btfsc	status,0,c
  7219  000B40  D003               	goto	l6992
  7220                           
  7221                           ; BSR set to: 0
  7222                           ;doprnt.c: 1340: c = prec;
  7223  000B42  C0EC  F0EE         	movff	printf@prec,printf@c
  7224  000B46  D018               	goto	l6996
  7225  000B48                     l6992:
  7226                           
  7227                           ; BSR set to: 0
  7228                           ;doprnt.c: 1341: else if(prec < c)
  7229  000B48  0100               	movlb	0	; () banked
  7230  000B4A  51ED               	movf	(printf@prec+1)& (0+255),w,b
  7231  000B4C  0A80               	xorlw	128
  7232  000B4E  0100               	movlb	0	; () banked
  7233  000B50  6FCB               	movwf	??_printf& (0+255),b
  7234  000B52  0100               	movlb	0	; () banked
  7235  000B54  51EE               	movf	printf@c& (0+255),w,b
  7236  000B56  0100               	movlb	0	; () banked
  7237  000B58  5DEC               	subwf	printf@prec& (0+255),w,b
  7238  000B5A  0E80               	movlw	128
  7239  000B5C  0100               	movlb	0	; () banked
  7240  000B5E  BFEE               	btfsc	printf@c& (0+255),7,b
  7241  000B60  0E7F               	movlw	127
  7242  000B62  0100               	movlb	0	; () banked
  7243  000B64  59CB               	subwfb	??_printf& (0+255),w,b
  7244  000B66  B0D8               	btfsc	status,0,c
  7245  000B68  D007               	goto	l6996
  7246                           
  7247                           ; BSR set to: 0
  7248                           ;doprnt.c: 1342: prec = c;
  7249  000B6A  0100               	movlb	0	; () banked
  7250  000B6C  51EE               	movf	printf@c& (0+255),w,b
  7251  000B6E  0100               	movlb	0	; () banked
  7252  000B70  6FEC               	movwf	printf@prec& (0+255),b
  7253  000B72  6BED               	clrf	(printf@prec+1)& (0+255),b
  7254  000B74  BFEC               	btfsc	printf@prec& (0+255),7,b
  7255  000B76  07ED               	decf	(printf@prec+1)& (0+255),f,b
  7256  000B78                     l6996:
  7257                           
  7258                           ; BSR set to: 0
  7259                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7260  000B78  0100               	movlb	0	; () banked
  7261  000B7A  51E8               	movf	printf@width& (0+255),w,b
  7262  000B7C  0100               	movlb	0	; () banked
  7263  000B7E  11E9               	iorwf	(printf@width+1)& (0+255),w,b
  7264  000B80  B4D8               	btfsc	status,2,c
  7265  000B82  D014               	goto	l7002
  7266                           
  7267                           ; BSR set to: 0
  7268  000B84  0E03               	movlw	3
  7269  000B86  0100               	movlb	0	; () banked
  7270  000B88  15EA               	andwf	printf@flag& (0+255),w,b
  7271  000B8A  0100               	movlb	0	; () banked
  7272  000B8C  6FCB               	movwf	??_printf& (0+255),b
  7273  000B8E  0E00               	movlw	0
  7274  000B90  0100               	movlb	0	; () banked
  7275  000B92  15EB               	andwf	(printf@flag+1)& (0+255),w,b
  7276  000B94  0100               	movlb	0	; () banked
  7277  000B96  6FCC               	movwf	(??_printf+1)& (0+255),b
  7278  000B98  0100               	movlb	0	; () banked
  7279  000B9A  51CB               	movf	??_printf& (0+255),w,b
  7280  000B9C  0100               	movlb	0	; () banked
  7281  000B9E  11CC               	iorwf	(??_printf+1)& (0+255),w,b
  7282  000BA0  B4D8               	btfsc	status,2,c
  7283  000BA2  D004               	goto	l7002
  7284                           
  7285                           ; BSR set to: 0
  7286                           ;doprnt.c: 1346: width--;
  7287  000BA4  0100               	movlb	0	; () banked
  7288  000BA6  07E8               	decf	printf@width& (0+255),f,b
  7289  000BA8  A0D8               	btfss	status,0,c
  7290  000BAA  07E9               	decf	(printf@width+1)& (0+255),f,b
  7291  000BAC                     l7002:
  7292                           
  7293                           ; BSR set to: 0
  7294                           ;doprnt.c: 1348: if(flag & 0x4000) {
  7295  000BAC  0100               	movlb	0	; () banked
  7296  000BAE  ADEB               	btfss	(printf@flag+1)& (0+255),6,b
  7297  000BB0  D01E               	goto	l7010
  7298                           
  7299                           ; BSR set to: 0
  7300                           ;doprnt.c: 1349: if(width > prec)
  7301  000BB2  0100               	movlb	0	; () banked
  7302  000BB4  51E8               	movf	printf@width& (0+255),w,b
  7303  000BB6  0100               	movlb	0	; () banked
  7304  000BB8  5DEC               	subwf	printf@prec& (0+255),w,b
  7305  000BBA  0100               	movlb	0	; () banked
  7306  000BBC  51ED               	movf	(printf@prec+1)& (0+255),w,b
  7307  000BBE  0A80               	xorlw	128
  7308  000BC0  0100               	movlb	0	; () banked
  7309  000BC2  6FCB               	movwf	??_printf& (0+255),b
  7310  000BC4  0100               	movlb	0	; () banked
  7311  000BC6  51E9               	movf	(printf@width+1)& (0+255),w,b
  7312  000BC8  0A80               	xorlw	128
  7313  000BCA  0100               	movlb	0	; () banked
  7314  000BCC  59CB               	subwfb	??_printf& (0+255),w,b
  7315  000BCE  B0D8               	btfsc	status,0,c
  7316  000BD0  D009               	goto	l7008
  7317                           
  7318                           ; BSR set to: 0
  7319                           ;doprnt.c: 1350: width -= prec;
  7320  000BD2  0100               	movlb	0	; () banked
  7321  000BD4  51EC               	movf	printf@prec& (0+255),w,b
  7322  000BD6  0100               	movlb	0	; () banked
  7323  000BD8  5FE8               	subwf	printf@width& (0+255),f,b
  7324  000BDA  0100               	movlb	0	; () banked
  7325  000BDC  51ED               	movf	(printf@prec+1)& (0+255),w,b
  7326  000BDE  0100               	movlb	0	; () banked
  7327  000BE0  5BE9               	subwfb	(printf@width+1)& (0+255),f,b
  7328  000BE2  D005               	goto	l7010
  7329  000BE4                     l7008:
  7330                           
  7331                           ; BSR set to: 0
  7332                           ;doprnt.c: 1351: else
  7333                           ;doprnt.c: 1352: width = 0;
  7334  000BE4  0E00               	movlw	0
  7335  000BE6  0100               	movlb	0	; () banked
  7336  000BE8  6FE9               	movwf	(printf@width+1)& (0+255),b
  7337  000BEA  0E00               	movlw	0
  7338  000BEC  6FE8               	movwf	printf@width& (0+255),b
  7339  000BEE                     l7010:
  7340                           
  7341                           ; BSR set to: 0
  7342                           ;doprnt.c: 1353: }
  7343                           ;doprnt.c: 1381: if(width > c)
  7344  000BEE  0E80               	movlw	128
  7345  000BF0  0100               	movlb	0	; () banked
  7346  000BF2  BFEE               	btfsc	printf@c& (0+255),7,b
  7347  000BF4  0E7F               	movlw	127
  7348  000BF6  0100               	movlb	0	; () banked
  7349  000BF8  6FCB               	movwf	??_printf& (0+255),b
  7350  000BFA  0100               	movlb	0	; () banked
  7351  000BFC  51E8               	movf	printf@width& (0+255),w,b
  7352  000BFE  0100               	movlb	0	; () banked
  7353  000C00  5DEE               	subwf	printf@c& (0+255),w,b
  7354  000C02  0100               	movlb	0	; () banked
  7355  000C04  51E9               	movf	(printf@width+1)& (0+255),w,b
  7356  000C06  0A80               	xorlw	128
  7357  000C08  0100               	movlb	0	; () banked
  7358  000C0A  59CB               	subwfb	??_printf& (0+255),w,b
  7359  000C0C  B0D8               	btfsc	status,0,c
  7360  000C0E  D00B               	goto	l7014
  7361                           
  7362                           ; BSR set to: 0
  7363                           ;doprnt.c: 1382: width -= c;
  7364  000C10  0100               	movlb	0	; () banked
  7365  000C12  51EE               	movf	printf@c& (0+255),w,b
  7366  000C14  0100               	movlb	0	; () banked
  7367  000C16  5FE8               	subwf	printf@width& (0+255),f,b
  7368  000C18  0E00               	movlw	0
  7369  000C1A  0100               	movlb	0	; () banked
  7370  000C1C  BFEE               	btfsc	printf@c& (0+255),7,b
  7371  000C1E  0EFF               	movlw	255
  7372  000C20  0100               	movlb	0	; () banked
  7373  000C22  5BE9               	subwfb	(printf@width+1)& (0+255),f,b
  7374  000C24  D005               	goto	l7016
  7375  000C26                     l7014:
  7376                           
  7377                           ; BSR set to: 0
  7378                           ;doprnt.c: 1383: else
  7379                           ;doprnt.c: 1384: width = 0;
  7380  000C26  0E00               	movlw	0
  7381  000C28  0100               	movlb	0	; () banked
  7382  000C2A  6FE9               	movwf	(printf@width+1)& (0+255),b
  7383  000C2C  0E00               	movlw	0
  7384  000C2E  6FE8               	movwf	printf@width& (0+255),b
  7385  000C30                     l7016:
  7386                           
  7387                           ; BSR set to: 0
  7388                           ;doprnt.c: 1387: if(flag & 0x04) {
  7389  000C30  0100               	movlb	0	; () banked
  7390  000C32  A5EA               	btfss	printf@flag& (0+255),2,b
  7391  000C34  D021               	goto	l7028
  7392                           
  7393                           ; BSR set to: 0
  7394                           ;doprnt.c: 1392: if(flag & 0x03)
  7395  000C36  0E03               	movlw	3
  7396  000C38  0100               	movlb	0	; () banked
  7397  000C3A  15EA               	andwf	printf@flag& (0+255),w,b
  7398  000C3C  0100               	movlb	0	; () banked
  7399  000C3E  6FCB               	movwf	??_printf& (0+255),b
  7400  000C40  0E00               	movlw	0
  7401  000C42  0100               	movlb	0	; () banked
  7402  000C44  15EB               	andwf	(printf@flag+1)& (0+255),w,b
  7403  000C46  0100               	movlb	0	; () banked
  7404  000C48  6FCC               	movwf	(??_printf+1)& (0+255),b
  7405  000C4A  0100               	movlb	0	; () banked
  7406  000C4C  51CB               	movf	??_printf& (0+255),w,b
  7407  000C4E  0100               	movlb	0	; () banked
  7408  000C50  11CC               	iorwf	(??_printf+1)& (0+255),w,b
  7409  000C52  B4D8               	btfsc	status,2,c
  7410  000C54  D003               	goto	l7022
  7411                           
  7412                           ; BSR set to: 0
  7413                           ;doprnt.c: 1393: (putch('-') );
  7414  000C56  0E2D               	movlw	45
  7415  000C58  EC47  F01F         	call	_putch
  7416  000C5C                     l7022:
  7417                           
  7418                           ;doprnt.c: 1415: if(width)
  7419  000C5C  0100               	movlb	0	; () banked
  7420  000C5E  51E8               	movf	printf@width& (0+255),w,b
  7421  000C60  0100               	movlb	0	; () banked
  7422  000C62  11E9               	iorwf	(printf@width+1)& (0+255),w,b
  7423  000C64  B4D8               	btfsc	status,2,c
  7424  000C66  D0B6               	goto	l7050
  7425                           
  7426                           ; BSR set to: 0
  7427                           ;doprnt.c: 1417: (putch('0') );
  7428                           
  7429                           ; BSR set to: 0
  7430                           
  7431                           ;doprnt.c: 1416: do
  7432  000C68  0E30               	movlw	48
  7433  000C6A  EC47  F01F         	call	_putch
  7434                           
  7435                           ;doprnt.c: 1418: while(--width);
  7436  000C6E  0100               	movlb	0	; () banked
  7437  000C70  07E8               	decf	printf@width& (0+255),f,b
  7438  000C72  A0D8               	btfss	status,0,c
  7439  000C74  07E9               	decf	(printf@width+1)& (0+255),f,b
  7440  000C76  D7F2               	goto	l7022
  7441  000C78                     l7028:
  7442                           
  7443                           ; BSR set to: 0
  7444                           ;doprnt.c: 1422: {
  7445                           ;doprnt.c: 1424: if(width
  7446                           ;doprnt.c: 1428: )
  7447  000C78  0100               	movlb	0	; () banked
  7448  000C7A  51E8               	movf	printf@width& (0+255),w,b
  7449  000C7C  0100               	movlb	0	; () banked
  7450  000C7E  11E9               	iorwf	(printf@width+1)& (0+255),w,b
  7451  000C80  B4D8               	btfsc	status,2,c
  7452  000C82  D00D               	goto	l7034
  7453  000C84                     l7030:
  7454                           
  7455                           ; BSR set to: 0
  7456                           ;doprnt.c: 1430: (putch(' ') );
  7457  000C84  0E20               	movlw	32
  7458  000C86  EC47  F01F         	call	_putch
  7459                           
  7460                           ;doprnt.c: 1431: while(--width);
  7461  000C8A  0100               	movlb	0	; () banked
  7462  000C8C  07E8               	decf	printf@width& (0+255),f,b
  7463  000C8E  A0D8               	btfss	status,0,c
  7464  000C90  07E9               	decf	(printf@width+1)& (0+255),f,b
  7465  000C92  0100               	movlb	0	; () banked
  7466  000C94  51E8               	movf	printf@width& (0+255),w,b
  7467  000C96  0100               	movlb	0	; () banked
  7468  000C98  11E9               	iorwf	(printf@width+1)& (0+255),w,b
  7469  000C9A  A4D8               	btfss	status,2,c
  7470  000C9C  D7F3               	goto	l7030
  7471  000C9E                     l7034:
  7472                           
  7473                           ; BSR set to: 0
  7474                           ;doprnt.c: 1438: if(flag & 0x03)
  7475  000C9E  0E03               	movlw	3
  7476  000CA0  0100               	movlb	0	; () banked
  7477  000CA2  15EA               	andwf	printf@flag& (0+255),w,b
  7478  000CA4  0100               	movlb	0	; () banked
  7479  000CA6  6FCB               	movwf	??_printf& (0+255),b
  7480  000CA8  0E00               	movlw	0
  7481  000CAA  0100               	movlb	0	; () banked
  7482  000CAC  15EB               	andwf	(printf@flag+1)& (0+255),w,b
  7483  000CAE  0100               	movlb	0	; () banked
  7484  000CB0  6FCC               	movwf	(??_printf+1)& (0+255),b
  7485  000CB2  0100               	movlb	0	; () banked
  7486  000CB4  51CB               	movf	??_printf& (0+255),w,b
  7487  000CB6  0100               	movlb	0	; () banked
  7488  000CB8  11CC               	iorwf	(??_printf+1)& (0+255),w,b
  7489  000CBA  B4D8               	btfsc	status,2,c
  7490  000CBC  D08B               	goto	l7050
  7491                           
  7492                           ; BSR set to: 0
  7493                           ;doprnt.c: 1439: (putch('-') );
  7494  000CBE  0E2D               	movlw	45
  7495  000CC0  EC47  F01F         	call	_putch
  7496                           
  7497                           ;doprnt.c: 1469: }
  7498                           ;doprnt.c: 1474: while(prec--) {
  7499  000CC4  D087               	goto	l7050
  7500  000CC6                     l7038:
  7501                           
  7502                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7503  000CC6  C0EC  F0CB         	movff	printf@prec,??_printf
  7504  000CCA  C0ED  F0CC         	movff	printf@prec+1,??_printf+1
  7505  000CCE  0100               	movlb	0	; () banked
  7506  000CD0  90D8               	bcf	status,0,c
  7507  000CD2  37CB               	rlcf	??_printf& (0+255),f,b
  7508  000CD4  37CC               	rlcf	(??_printf+1)& (0+255),f,b
  7509  000CD6  0100               	movlb	0	; () banked
  7510  000CD8  90D8               	bcf	status,0,c
  7511  000CDA  37CB               	rlcf	??_printf& (0+255),f,b
  7512  000CDC  37CC               	rlcf	(??_printf+1)& (0+255),f,b
  7513  000CDE  0EDF               	movlw	low _dpowers
  7514  000CE0  0100               	movlb	0	; () banked
  7515  000CE2  25CB               	addwf	??_printf& (0+255),w,b
  7516  000CE4  6EF6               	movwf	tblptrl,c
  7517  000CE6  0EFD               	movlw	high _dpowers
  7518  000CE8  21CC               	addwfc	(??_printf+1)& (0+255),w,b
  7519  000CEA  6EF7               	movwf	tblptrh,c
  7520  000CEC                     	if	0	;There are less than 3 active tblptr bytes
  7521  000CEC                     	endif
  7522  000CEC  0009               	tblrd		*+
  7523  000CEE  CFF5 F027          	movff	tablat,___lldiv@divisor
  7524  000CF2  0009               	tblrd		*+
  7525  000CF4  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  7526  000CF8  0009               	tblrd		*+
  7527  000CFA  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  7528  000CFE  000A               	tblrd		*-
  7529  000D00  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  7530  000D04  C0E4  F023         	movff	printf@val,___lldiv@dividend
  7531  000D08  C0E5  F024         	movff	printf@val+1,___lldiv@dividend+1
  7532  000D0C  C0E6  F025         	movff	printf@val+2,___lldiv@dividend+2
  7533  000D10  C0E7  F026         	movff	printf@val+3,___lldiv@dividend+3
  7534  000D14  EC30  F01B         	call	___lldiv	;wreg free
  7535  000D18  C023  F030         	movff	?___lldiv,___llmod@dividend
  7536  000D1C  C024  F031         	movff	?___lldiv+1,___llmod@dividend+1
  7537  000D20  C025  F032         	movff	?___lldiv+2,___llmod@dividend+2
  7538  000D24  C026  F033         	movff	?___lldiv+3,___llmod@dividend+3
  7539  000D28  0E0A               	movlw	10
  7540  000D2A  6E34               	movwf	___llmod@divisor,c
  7541  000D2C  0E00               	movlw	0
  7542  000D2E  6E35               	movwf	___llmod@divisor+1,c
  7543  000D30  0E00               	movlw	0
  7544  000D32  6E36               	movwf	___llmod@divisor+2,c
  7545  000D34  0E00               	movlw	0
  7546  000D36  6E37               	movwf	___llmod@divisor+3,c
  7547  000D38  EC5E  F01C         	call	___llmod	;wreg free
  7548  000D3C  5030               	movf	?___llmod,w,c
  7549  000D3E  0F30               	addlw	48
  7550  000D40  0100               	movlb	0	; () banked
  7551  000D42  6FEE               	movwf	printf@c& (0+255),b
  7552                           
  7553                           ;doprnt.c: 1491: break;
  7554  000D44  D043               	goto	l7048
  7555  000D46                     l7040:
  7556                           
  7557                           ; BSR set to: 0
  7558                           ;doprnt.c: 1499: {
  7559                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7560  000D46  C0E4  F023         	movff	printf@val,___lldiv@dividend
  7561  000D4A  C0E5  F024         	movff	printf@val+1,___lldiv@dividend+1
  7562  000D4E  C0E6  F025         	movff	printf@val+2,___lldiv@dividend+2
  7563  000D52  C0E7  F026         	movff	printf@val+3,___lldiv@dividend+3
  7564  000D56  C0EC  F0CB         	movff	printf@prec,??_printf
  7565  000D5A  C0ED  F0CC         	movff	printf@prec+1,??_printf+1
  7566  000D5E  0100               	movlb	0	; () banked
  7567  000D60  90D8               	bcf	status,0,c
  7568  000D62  37CB               	rlcf	??_printf& (0+255),f,b
  7569  000D64  37CC               	rlcf	(??_printf+1)& (0+255),f,b
  7570  000D66  0100               	movlb	0	; () banked
  7571  000D68  90D8               	bcf	status,0,c
  7572  000D6A  37CB               	rlcf	??_printf& (0+255),f,b
  7573  000D6C  37CC               	rlcf	(??_printf+1)& (0+255),f,b
  7574  000D6E  0E55               	movlw	low _hexpowers
  7575  000D70  0100               	movlb	0	; () banked
  7576  000D72  25CB               	addwf	??_printf& (0+255),w,b
  7577  000D74  6EF6               	movwf	tblptrl,c
  7578  000D76  0EFE               	movlw	high _hexpowers
  7579  000D78  21CC               	addwfc	(??_printf+1)& (0+255),w,b
  7580  000D7A  6EF7               	movwf	tblptrh,c
  7581  000D7C                     	if	0	;There are less than 3 active tblptr bytes
  7582  000D7C                     	endif
  7583  000D7C  0009               	tblrd		*+
  7584  000D7E  CFF5 F027          	movff	tablat,___lldiv@divisor
  7585  000D82  0009               	tblrd		*+
  7586  000D84  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  7587  000D88  0009               	tblrd		*+
  7588  000D8A  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  7589  000D8E  000A               	tblrd		*-
  7590  000D90  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  7591  000D94  EC30  F01B         	call	___lldiv	;wreg free
  7592  000D98  5023               	movf	?___lldiv,w,c
  7593  000D9A  0B0F               	andlw	15
  7594  000D9C  0100               	movlb	0	; () banked
  7595  000D9E  6FD4               	movwf	printf@idx& (0+255),b
  7596                           
  7597                           ; BSR set to: 0
  7598                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7599  000DA0  0100               	movlb	0	; () banked
  7600  000DA2  51D4               	movf	printf@idx& (0+255),w,b
  7601  000DA4  0D01               	mullw	1
  7602  000DA6  0E43               	movlw	low STR_23
  7603  000DA8  24F3               	addwf	prodl,w,c
  7604  000DAA  6EF6               	movwf	tblptrl,c
  7605  000DAC  0EFF               	movlw	high STR_23
  7606  000DAE  20F4               	addwfc	prodh,w,c
  7607  000DB0  6EF7               	movwf	tblptrh,c
  7608  000DB2                     	if	0	;There are less than 3 active tblptr bytes
  7609  000DB2                     	endif
  7610  000DB2  0008               	tblrd		*
  7611  000DB4  CFF5 F0EE          	movff	tablat,printf@c
  7612                           
  7613                           ; BSR set to: 0
  7614                           ;doprnt.c: 1523: }
  7615                           
  7616                           ;doprnt.c: 1508: }
  7617                           ;doprnt.c: 1510: break;
  7618  000DB8  D009               	goto	l7048
  7619  000DBA                     l7046:
  7620  000DBA  0100               	movlb	0	; () banked
  7621  000DBC  51EA               	movf	printf@flag& (0+255),w,b
  7622  000DBE  0B80               	andlw	128
  7623                           
  7624                           ; Switch size 1, requested type "space"
  7625                           ; Number of cases is 2, Range of values is 0 to 128
  7626                           ; switch strategies available:
  7627                           ; Name         Instructions Cycles
  7628                           ; simple_byte            7     4 (average)
  7629                           ;	Chosen strategy is simple_byte
  7630  000DC0  0A00               	xorlw	0	; case 0
  7631  000DC2  B4D8               	btfsc	status,2,c
  7632  000DC4  D780               	goto	l7038
  7633  000DC6  0A80               	xorlw	128	; case 128
  7634  000DC8  B4D8               	btfsc	status,2,c
  7635  000DCA  D7BD               	goto	l7040
  7636  000DCC                     l7048:
  7637                           
  7638                           ; BSR set to: 0
  7639                           ;doprnt.c: 1524: (putch(c) );
  7640  000DCC  0100               	movlb	0	; () banked
  7641  000DCE  51EE               	movf	printf@c& (0+255),w,b
  7642  000DD0  EC47  F01F         	call	_putch
  7643  000DD4                     l7050:
  7644  000DD4  0100               	movlb	0	; () banked
  7645  000DD6  07EC               	decf	printf@prec& (0+255),f,b
  7646  000DD8  A0D8               	btfss	status,0,c
  7647  000DDA  07ED               	decf	(printf@prec+1)& (0+255),f,b
  7648  000DDC  0100               	movlb	0	; () banked
  7649  000DDE  29EC               	incf	printf@prec& (0+255),w,b
  7650  000DE0  E1EC               	bnz	l7046
  7651  000DE2  0100               	movlb	0	; () banked
  7652  000DE4  29ED               	incf	(printf@prec+1)& (0+255),w,b
  7653  000DE6  A4D8               	btfss	status,2,c
  7654  000DE8  D7E8               	goto	l7046
  7655  000DEA                     l7052:
  7656  000DEA  C0BD  FFF6         	movff	printf@f,tblptrl
  7657  000DEE  C0BE  FFF7         	movff	printf@f+1,tblptrh
  7658  000DF2  0100               	movlb	0	; () banked
  7659  000DF4  4BBD               	infsnz	printf@f& (0+255),f,b
  7660  000DF6  2BBE               	incf	(printf@f+1)& (0+255),f,b
  7661  000DF8                     	if	0	;tblptru may be non-zero
  7662  000DF8                     	endif
  7663  000DF8                     	if	0	;tblptru may be non-zero
  7664  000DF8                     	endif
  7665  000DF8  0008               	tblrd		*
  7666  000DFA  CFF5 F0EE          	movff	tablat,printf@c
  7667  000DFE  0100               	movlb	0	; () banked
  7668  000E00  51EE               	movf	printf@c& (0+255),w,b
  7669  000E02  B4D8               	btfsc	status,2,c
  7670  000E04  0012               	return	
  7671  000E06  EF11  F000         	goto	l6686
  7672  000E0A                     __end_of_printf:
  7673                           	opt stack 0
  7674                           tblptru	equ	0xFF8
  7675                           tblptrh	equ	0xFF7
  7676                           tblptrl	equ	0xFF6
  7677                           tablat	equ	0xFF5
  7678                           prodh	equ	0xFF4
  7679                           prodl	equ	0xFF3
  7680                           postinc0	equ	0xFEE
  7681                           wreg	equ	0xFE8
  7682                           postdec1	equ	0xFE5
  7683                           fsr1l	equ	0xFE1
  7684                           indf2	equ	0xFDF
  7685                           postinc2	equ	0xFDE
  7686                           postdec2	equ	0xFDD
  7687                           fsr2h	equ	0xFDA
  7688                           fsr2l	equ	0xFD9
  7689                           status	equ	0xFD8
  7690                           
  7691 ;; *************** function _scale *****************
  7692 ;; Defined at:
  7693 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7694 ;; Parameters:    Size  Location     Type
  7695 ;;  scl             1    wreg     char 
  7696 ;; Auto vars:     Size  Location     Type
  7697 ;;  scl             1   30[BANK0 ] char 
  7698 ;; Return value:  Size  Location     Type
  7699 ;;                  3   24[BANK0 ] char 
  7700 ;; Registers used:
  7701 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7702 ;; Tracked objects:
  7703 ;;		On entry : 0/0
  7704 ;;		On exit  : 0/0
  7705 ;;		Unchanged: 0/0
  7706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7707 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7708 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7710 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7711 ;;Total ram usage:        7 bytes
  7712 ;; Hardware stack levels used:    1
  7713 ;; Hardware stack levels required when called:    5
  7714 ;; This function calls:
  7715 ;;		___awdiv
  7716 ;;		___awmod
  7717 ;;		___ftmul
  7718 ;;		___wmul
  7719 ;; This function is called by:
  7720 ;;		_printf
  7721 ;; This function uses a non-reentrant model
  7722 ;;
  7723                           
  7724                           	psect	text17
  7725  001366                     __ptext17:
  7726                           	opt stack 0
  7727  001366                     _scale:
  7728                           	opt stack 23
  7729                           
  7730                           ; BSR set to: 0
  7731                           ;incstack = 0
  7732                           ;scale@scl stored from wreg
  7733  001366  0100               	movlb	0	; () banked
  7734  001368  6F9E               	movwf	scale@scl& (0+255),b
  7735                           
  7736                           ;doprnt.c: 428: if(scl < 0) {
  7737  00136A  0100               	movlb	0	; () banked
  7738  00136C  AF9E               	btfss	scale@scl& (0+255),7,b
  7739  00136E  D104               	goto	l6348
  7740                           
  7741                           ; BSR set to: 0
  7742                           ;doprnt.c: 429: scl = -scl;
  7743  001370  0100               	movlb	0	; () banked
  7744  001372  6D9E               	negf	scale@scl& (0+255),b
  7745                           
  7746                           ;doprnt.c: 430: if(scl>=110)
  7747  001374  0100               	movlb	0	; () banked
  7748  001376  519E               	movf	scale@scl& (0+255),w,b
  7749  001378  0A80               	xorlw	128
  7750  00137A  0F12               	addlw	-238
  7751  00137C  A0D8               	btfss	status,0,c
  7752  00137E  D094               	goto	l6338
  7753                           
  7754                           ; BSR set to: 0
  7755                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7756  001380  0E00               	movlw	0
  7757  001382  6E34               	movwf	___wmul@multiplicand+1,c
  7758  001384  0E03               	movlw	3
  7759  001386  6E33               	movwf	___wmul@multiplicand,c
  7760  001388  0E00               	movlw	0
  7761  00138A  6E2C               	movwf	___awdiv@divisor+1,c
  7762  00138C  0E0A               	movlw	10
  7763  00138E  6E2B               	movwf	___awdiv@divisor,c
  7764  001390  0E00               	movlw	0
  7765  001392  6E26               	movwf	___awmod@divisor+1,c
  7766  001394  0E64               	movlw	100
  7767  001396  6E25               	movwf	___awmod@divisor,c
  7768  001398  0100               	movlb	0	; () banked
  7769  00139A  519E               	movf	scale@scl& (0+255),w,b
  7770  00139C  6E23               	movwf	___awmod@dividend,c
  7771  00139E  6A24               	clrf	___awmod@dividend+1,c
  7772  0013A0  BE23               	btfsc	___awmod@dividend,7,c
  7773  0013A2  0624               	decf	___awmod@dividend+1,f,c
  7774  0013A4  ECEE  F01B         	call	___awmod	;wreg free
  7775  0013A8  C023  F029         	movff	?___awmod,___awdiv@dividend
  7776  0013AC  C024  F02A         	movff	?___awmod+1,___awdiv@dividend+1
  7777  0013B0  ECEE  F01A         	call	___awdiv	;wreg free
  7778  0013B4  0E09               	movlw	9
  7779  0013B6  2429               	addwf	?___awdiv,w,c
  7780  0013B8  6E31               	movwf	___wmul@multiplier,c
  7781  0013BA  0E00               	movlw	0
  7782  0013BC  202A               	addwfc	?___awdiv+1,w,c
  7783  0013BE  6E32               	movwf	___wmul@multiplier+1,c
  7784  0013C0  EC22  F01F         	call	___wmul	;wreg free
  7785  0013C4  0E07               	movlw	low __npowers_
  7786  0013C6  2431               	addwf	?___wmul,w,c
  7787  0013C8  6EF6               	movwf	tblptrl,c
  7788  0013CA  0EFE               	movlw	high __npowers_
  7789  0013CC  2032               	addwfc	?___wmul+1,w,c
  7790  0013CE  6EF7               	movwf	tblptrh,c
  7791  0013D0                     	if	0	;There are less than 3 active tblptr bytes
  7792  0013D0                     	endif
  7793  0013D0  0009               	tblrd		*+
  7794  0013D2  CFF5 F08C          	movff	tablat,___ftmul@f2
  7795  0013D6  0009               	tblrd		*+
  7796  0013D8  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7797  0013DC  000A               	tblrd		*-
  7798  0013DE  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7799  0013E2  0E00               	movlw	0
  7800  0013E4  6E2C               	movwf	___awdiv@divisor+1,c
  7801  0013E6  0E64               	movlw	100
  7802  0013E8  6E2B               	movwf	___awdiv@divisor,c
  7803  0013EA  0100               	movlb	0	; () banked
  7804  0013EC  519E               	movf	scale@scl& (0+255),w,b
  7805  0013EE  6E29               	movwf	___awdiv@dividend,c
  7806  0013F0  6A2A               	clrf	___awdiv@dividend+1,c
  7807  0013F2  BE29               	btfsc	___awdiv@dividend,7,c
  7808  0013F4  062A               	decf	___awdiv@dividend+1,f,c
  7809  0013F6  ECEE  F01A         	call	___awdiv	;wreg free
  7810  0013FA  0E12               	movlw	18
  7811  0013FC  2429               	addwf	?___awdiv,w,c
  7812  0013FE  6E31               	movwf	___wmul@multiplier,c
  7813  001400  0E00               	movlw	0
  7814  001402  202A               	addwfc	?___awdiv+1,w,c
  7815  001404  6E32               	movwf	___wmul@multiplier+1,c
  7816  001406  0E00               	movlw	0
  7817  001408  6E34               	movwf	___wmul@multiplicand+1,c
  7818  00140A  0E03               	movlw	3
  7819  00140C  6E33               	movwf	___wmul@multiplicand,c
  7820  00140E  EC22  F01F         	call	___wmul	;wreg free
  7821  001412  0E07               	movlw	low __npowers_
  7822  001414  2431               	addwf	?___wmul,w,c
  7823  001416  6EF6               	movwf	tblptrl,c
  7824  001418  0EFE               	movlw	high __npowers_
  7825  00141A  2032               	addwfc	?___wmul+1,w,c
  7826  00141C  6EF7               	movwf	tblptrh,c
  7827  00141E                     	if	0	;There are less than 3 active tblptr bytes
  7828  00141E                     	endif
  7829  00141E  0009               	tblrd		*+
  7830  001420  CFF5 F089          	movff	tablat,___ftmul@f1
  7831  001424  0009               	tblrd		*+
  7832  001426  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  7833  00142A  000A               	tblrd		*-
  7834  00142C  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  7835  001430  EC8B  F010         	call	___ftmul	;wreg free
  7836  001434  C089  F09B         	movff	?___ftmul,_scale$1422
  7837  001438  C08A  F09C         	movff	?___ftmul+1,_scale$1422+1
  7838  00143C  C08B  F09D         	movff	?___ftmul+2,_scale$1422+2
  7839                           
  7840                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7841  001440  C09B  F089         	movff	_scale$1422,___ftmul@f1
  7842  001444  C09C  F08A         	movff	_scale$1422+1,___ftmul@f1+1
  7843  001448  C09D  F08B         	movff	_scale$1422+2,___ftmul@f1+2
  7844  00144C  0E00               	movlw	0
  7845  00144E  6E34               	movwf	___wmul@multiplicand+1,c
  7846  001450  0E03               	movlw	3
  7847  001452  6E33               	movwf	___wmul@multiplicand,c
  7848  001454  0E00               	movlw	0
  7849  001456  6E26               	movwf	___awmod@divisor+1,c
  7850  001458  0E0A               	movlw	10
  7851  00145A  6E25               	movwf	___awmod@divisor,c
  7852  00145C  0100               	movlb	0	; () banked
  7853  00145E  519E               	movf	scale@scl& (0+255),w,b
  7854  001460  6E23               	movwf	___awmod@dividend,c
  7855  001462  6A24               	clrf	___awmod@dividend+1,c
  7856  001464  BE23               	btfsc	___awmod@dividend,7,c
  7857  001466  0624               	decf	___awmod@dividend+1,f,c
  7858  001468  ECEE  F01B         	call	___awmod	;wreg free
  7859  00146C  C023  F031         	movff	?___awmod,___wmul@multiplier
  7860  001470  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  7861  001474  EC22  F01F         	call	___wmul	;wreg free
  7862  001478  0E07               	movlw	low __npowers_
  7863  00147A  2431               	addwf	?___wmul,w,c
  7864  00147C  6EF6               	movwf	tblptrl,c
  7865  00147E  0EFE               	movlw	high __npowers_
  7866  001480  2032               	addwfc	?___wmul+1,w,c
  7867  001482  6EF7               	movwf	tblptrh,c
  7868  001484                     	if	0	;There are less than 3 active tblptr bytes
  7869  001484                     	endif
  7870  001484  0009               	tblrd		*+
  7871  001486  CFF5 F08C          	movff	tablat,___ftmul@f2
  7872  00148A  0009               	tblrd		*+
  7873  00148C  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7874  001490  000A               	tblrd		*-
  7875  001492  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7876  001496  EC8B  F010         	call	___ftmul	;wreg free
  7877  00149A  C089  F098         	movff	?___ftmul,?_scale
  7878  00149E  C08A  F099         	movff	?___ftmul+1,?_scale+1
  7879  0014A2  C08B  F09A         	movff	?___ftmul+2,?_scale+2
  7880  0014A6  0012               	return	
  7881  0014A8                     l6338:
  7882                           
  7883                           ;doprnt.c: 432: else if(scl > 10)
  7884  0014A8  0100               	movlb	0	; () banked
  7885  0014AA  519E               	movf	scale@scl& (0+255),w,b
  7886  0014AC  0A80               	xorlw	128
  7887  0014AE  0F75               	addlw	-139
  7888  0014B0  A0D8               	btfss	status,0,c
  7889  0014B2  D04F               	goto	l6344
  7890                           
  7891                           ; BSR set to: 0
  7892                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  7893  0014B4  0E00               	movlw	0
  7894  0014B6  6E2C               	movwf	___awdiv@divisor+1,c
  7895  0014B8  0E0A               	movlw	10
  7896  0014BA  6E2B               	movwf	___awdiv@divisor,c
  7897  0014BC  0100               	movlb	0	; () banked
  7898  0014BE  519E               	movf	scale@scl& (0+255),w,b
  7899  0014C0  6E29               	movwf	___awdiv@dividend,c
  7900  0014C2  6A2A               	clrf	___awdiv@dividend+1,c
  7901  0014C4  BE29               	btfsc	___awdiv@dividend,7,c
  7902  0014C6  062A               	decf	___awdiv@dividend+1,f,c
  7903  0014C8  ECEE  F01A         	call	___awdiv	;wreg free
  7904  0014CC  0E09               	movlw	9
  7905  0014CE  2429               	addwf	?___awdiv,w,c
  7906  0014D0  6E31               	movwf	___wmul@multiplier,c
  7907  0014D2  0E00               	movlw	0
  7908  0014D4  202A               	addwfc	?___awdiv+1,w,c
  7909  0014D6  6E32               	movwf	___wmul@multiplier+1,c
  7910  0014D8  0E00               	movlw	0
  7911  0014DA  6E34               	movwf	___wmul@multiplicand+1,c
  7912  0014DC  0E03               	movlw	3
  7913  0014DE  6E33               	movwf	___wmul@multiplicand,c
  7914  0014E0  EC22  F01F         	call	___wmul	;wreg free
  7915  0014E4  0E07               	movlw	low __npowers_
  7916  0014E6  2431               	addwf	?___wmul,w,c
  7917  0014E8  6EF6               	movwf	tblptrl,c
  7918  0014EA  0EFE               	movlw	high __npowers_
  7919  0014EC  2032               	addwfc	?___wmul+1,w,c
  7920  0014EE  6EF7               	movwf	tblptrh,c
  7921  0014F0                     	if	0	;There are less than 3 active tblptr bytes
  7922  0014F0                     	endif
  7923  0014F0  0009               	tblrd		*+
  7924  0014F2  CFF5 F089          	movff	tablat,___ftmul@f1
  7925  0014F6  0009               	tblrd		*+
  7926  0014F8  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  7927  0014FC  000A               	tblrd		*-
  7928  0014FE  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  7929  001502  0E00               	movlw	0
  7930  001504  6E34               	movwf	___wmul@multiplicand+1,c
  7931  001506  0E03               	movlw	3
  7932  001508  6E33               	movwf	___wmul@multiplicand,c
  7933  00150A  0E00               	movlw	0
  7934  00150C  6E26               	movwf	___awmod@divisor+1,c
  7935  00150E  0E0A               	movlw	10
  7936  001510  6E25               	movwf	___awmod@divisor,c
  7937  001512  0100               	movlb	0	; () banked
  7938  001514  519E               	movf	scale@scl& (0+255),w,b
  7939  001516  6E23               	movwf	___awmod@dividend,c
  7940  001518  6A24               	clrf	___awmod@dividend+1,c
  7941  00151A  BE23               	btfsc	___awmod@dividend,7,c
  7942  00151C  0624               	decf	___awmod@dividend+1,f,c
  7943  00151E  ECEE  F01B         	call	___awmod	;wreg free
  7944  001522  C023  F031         	movff	?___awmod,___wmul@multiplier
  7945  001526  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  7946  00152A  EC22  F01F         	call	___wmul	;wreg free
  7947  00152E  0E07               	movlw	low __npowers_
  7948  001530  2431               	addwf	?___wmul,w,c
  7949  001532  6EF6               	movwf	tblptrl,c
  7950  001534  0EFE               	movlw	high __npowers_
  7951  001536  2032               	addwfc	?___wmul+1,w,c
  7952  001538  6EF7               	movwf	tblptrh,c
  7953  00153A                     	if	0	;There are less than 3 active tblptr bytes
  7954  00153A                     	endif
  7955  00153A  0009               	tblrd		*+
  7956  00153C  CFF5 F08C          	movff	tablat,___ftmul@f2
  7957  001540  0009               	tblrd		*+
  7958  001542  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7959  001546  000A               	tblrd		*-
  7960  001548  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7961  00154C  EC8B  F010         	call	___ftmul	;wreg free
  7962  001550  D7A4               	goto	L4
  7963  001552                     l6344:
  7964                           
  7965                           ;doprnt.c: 434: return _npowers_[scl];
  7966  001552  0100               	movlb	0	; () banked
  7967  001554  519E               	movf	scale@scl& (0+255),w,b
  7968  001556  0D03               	mullw	3
  7969  001558  0E07               	movlw	low __npowers_
  7970  00155A  24F3               	addwf	prodl,w,c
  7971  00155C  6EF6               	movwf	tblptrl,c
  7972  00155E  0EFE               	movlw	high __npowers_
  7973  001560  20F4               	addwfc	prodh,w,c
  7974  001562  6EF7               	movwf	tblptrh,c
  7975  001564                     	if	0	;There are less than 3 active tblptr bytes
  7976  001564                     	endif
  7977  001564  0009               	tblrd		*+
  7978  001566  CFF5 F098          	movff	tablat,?_scale
  7979  00156A  0009               	tblrd		*+
  7980  00156C  CFF5 F099          	movff	tablat,?_scale+1
  7981  001570  000A               	tblrd		*-
  7982  001572  CFF5 F09A          	movff	tablat,?_scale+2
  7983                           
  7984                           ; BSR set to: 0
  7985  001576  0012               	return	
  7986  001578                     l6348:
  7987                           
  7988                           ; BSR set to: 0
  7989                           ;doprnt.c: 435: }
  7990                           ;doprnt.c: 436: if(scl>=110)
  7991  001578  0100               	movlb	0	; () banked
  7992  00157A  519E               	movf	scale@scl& (0+255),w,b
  7993  00157C  0A80               	xorlw	128
  7994  00157E  0F12               	addlw	-238
  7995  001580  A0D8               	btfss	status,0,c
  7996  001582  D094               	goto	l6356
  7997                           
  7998                           ; BSR set to: 0
  7999                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8000  001584  0E00               	movlw	0
  8001  001586  6E34               	movwf	___wmul@multiplicand+1,c
  8002  001588  0E03               	movlw	3
  8003  00158A  6E33               	movwf	___wmul@multiplicand,c
  8004  00158C  0E00               	movlw	0
  8005  00158E  6E2C               	movwf	___awdiv@divisor+1,c
  8006  001590  0E0A               	movlw	10
  8007  001592  6E2B               	movwf	___awdiv@divisor,c
  8008  001594  0E00               	movlw	0
  8009  001596  6E26               	movwf	___awmod@divisor+1,c
  8010  001598  0E64               	movlw	100
  8011  00159A  6E25               	movwf	___awmod@divisor,c
  8012  00159C  0100               	movlb	0	; () banked
  8013  00159E  519E               	movf	scale@scl& (0+255),w,b
  8014  0015A0  6E23               	movwf	___awmod@dividend,c
  8015  0015A2  6A24               	clrf	___awmod@dividend+1,c
  8016  0015A4  BE23               	btfsc	___awmod@dividend,7,c
  8017  0015A6  0624               	decf	___awmod@dividend+1,f,c
  8018  0015A8  ECEE  F01B         	call	___awmod	;wreg free
  8019  0015AC  C023  F029         	movff	?___awmod,___awdiv@dividend
  8020  0015B0  C024  F02A         	movff	?___awmod+1,___awdiv@dividend+1
  8021  0015B4  ECEE  F01A         	call	___awdiv	;wreg free
  8022  0015B8  0E09               	movlw	9
  8023  0015BA  2429               	addwf	?___awdiv,w,c
  8024  0015BC  6E31               	movwf	___wmul@multiplier,c
  8025  0015BE  0E00               	movlw	0
  8026  0015C0  202A               	addwfc	?___awdiv+1,w,c
  8027  0015C2  6E32               	movwf	___wmul@multiplier+1,c
  8028  0015C4  EC22  F01F         	call	___wmul	;wreg free
  8029  0015C8  0E2E               	movlw	low __powers_
  8030  0015CA  2431               	addwf	?___wmul,w,c
  8031  0015CC  6EF6               	movwf	tblptrl,c
  8032  0015CE  0EFE               	movlw	high __powers_
  8033  0015D0  2032               	addwfc	?___wmul+1,w,c
  8034  0015D2  6EF7               	movwf	tblptrh,c
  8035  0015D4                     	if	0	;There are less than 3 active tblptr bytes
  8036  0015D4                     	endif
  8037  0015D4  0009               	tblrd		*+
  8038  0015D6  CFF5 F08C          	movff	tablat,___ftmul@f2
  8039  0015DA  0009               	tblrd		*+
  8040  0015DC  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  8041  0015E0  000A               	tblrd		*-
  8042  0015E2  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  8043  0015E6  0E00               	movlw	0
  8044  0015E8  6E2C               	movwf	___awdiv@divisor+1,c
  8045  0015EA  0E64               	movlw	100
  8046  0015EC  6E2B               	movwf	___awdiv@divisor,c
  8047  0015EE  0100               	movlb	0	; () banked
  8048  0015F0  519E               	movf	scale@scl& (0+255),w,b
  8049  0015F2  6E29               	movwf	___awdiv@dividend,c
  8050  0015F4  6A2A               	clrf	___awdiv@dividend+1,c
  8051  0015F6  BE29               	btfsc	___awdiv@dividend,7,c
  8052  0015F8  062A               	decf	___awdiv@dividend+1,f,c
  8053  0015FA  ECEE  F01A         	call	___awdiv	;wreg free
  8054  0015FE  0E12               	movlw	18
  8055  001600  2429               	addwf	?___awdiv,w,c
  8056  001602  6E31               	movwf	___wmul@multiplier,c
  8057  001604  0E00               	movlw	0
  8058  001606  202A               	addwfc	?___awdiv+1,w,c
  8059  001608  6E32               	movwf	___wmul@multiplier+1,c
  8060  00160A  0E00               	movlw	0
  8061  00160C  6E34               	movwf	___wmul@multiplicand+1,c
  8062  00160E  0E03               	movlw	3
  8063  001610  6E33               	movwf	___wmul@multiplicand,c
  8064  001612  EC22  F01F         	call	___wmul	;wreg free
  8065  001616  0E2E               	movlw	low __powers_
  8066  001618  2431               	addwf	?___wmul,w,c
  8067  00161A  6EF6               	movwf	tblptrl,c
  8068  00161C  0EFE               	movlw	high __powers_
  8069  00161E  2032               	addwfc	?___wmul+1,w,c
  8070  001620  6EF7               	movwf	tblptrh,c
  8071  001622                     	if	0	;There are less than 3 active tblptr bytes
  8072  001622                     	endif
  8073  001622  0009               	tblrd		*+
  8074  001624  CFF5 F089          	movff	tablat,___ftmul@f1
  8075  001628  0009               	tblrd		*+
  8076  00162A  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  8077  00162E  000A               	tblrd		*-
  8078  001630  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  8079  001634  EC8B  F010         	call	___ftmul	;wreg free
  8080  001638  C089  F09B         	movff	?___ftmul,_scale$1422
  8081  00163C  C08A  F09C         	movff	?___ftmul+1,_scale$1422+1
  8082  001640  C08B  F09D         	movff	?___ftmul+2,_scale$1422+2
  8083                           
  8084                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8085  001644  C09B  F089         	movff	_scale$1422,___ftmul@f1
  8086  001648  C09C  F08A         	movff	_scale$1422+1,___ftmul@f1+1
  8087  00164C  C09D  F08B         	movff	_scale$1422+2,___ftmul@f1+2
  8088  001650  0E00               	movlw	0
  8089  001652  6E34               	movwf	___wmul@multiplicand+1,c
  8090  001654  0E03               	movlw	3
  8091  001656  6E33               	movwf	___wmul@multiplicand,c
  8092  001658  0E00               	movlw	0
  8093  00165A  6E26               	movwf	___awmod@divisor+1,c
  8094  00165C  0E0A               	movlw	10
  8095  00165E  6E25               	movwf	___awmod@divisor,c
  8096  001660  0100               	movlb	0	; () banked
  8097  001662  519E               	movf	scale@scl& (0+255),w,b
  8098  001664  6E23               	movwf	___awmod@dividend,c
  8099  001666  6A24               	clrf	___awmod@dividend+1,c
  8100  001668  BE23               	btfsc	___awmod@dividend,7,c
  8101  00166A  0624               	decf	___awmod@dividend+1,f,c
  8102  00166C  ECEE  F01B         	call	___awmod	;wreg free
  8103  001670  C023  F031         	movff	?___awmod,___wmul@multiplier
  8104  001674  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  8105  001678  EC22  F01F         	call	___wmul	;wreg free
  8106  00167C  0E2E               	movlw	low __powers_
  8107  00167E  2431               	addwf	?___wmul,w,c
  8108  001680  6EF6               	movwf	tblptrl,c
  8109  001682  0EFE               	movlw	high __powers_
  8110  001684  2032               	addwfc	?___wmul+1,w,c
  8111  001686  6EF7               	movwf	tblptrh,c
  8112  001688                     	if	0	;There are less than 3 active tblptr bytes
  8113  001688                     	endif
  8114  001688  0009               	tblrd		*+
  8115  00168A  CFF5 F08C          	movff	tablat,___ftmul@f2
  8116  00168E  0009               	tblrd		*+
  8117  001690  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  8118  001694  000A               	tblrd		*-
  8119  001696  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  8120  00169A  EC8B  F010         	call	___ftmul	;wreg free
  8121  00169E  C089  F098         	movff	?___ftmul,?_scale
  8122  0016A2  C08A  F099         	movff	?___ftmul+1,?_scale+1
  8123  0016A6  C08B  F09A         	movff	?___ftmul+2,?_scale+2
  8124  0016AA  0012               	return	
  8125  0016AC                     l6356:
  8126                           
  8127                           ;doprnt.c: 438: else if(scl > 10)
  8128  0016AC  0100               	movlb	0	; () banked
  8129  0016AE  519E               	movf	scale@scl& (0+255),w,b
  8130  0016B0  0A80               	xorlw	128
  8131  0016B2  0F75               	addlw	-139
  8132  0016B4  A0D8               	btfss	status,0,c
  8133  0016B6  D04F               	goto	l6362
  8134                           
  8135                           ; BSR set to: 0
  8136                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  8137  0016B8  0E00               	movlw	0
  8138  0016BA  6E2C               	movwf	___awdiv@divisor+1,c
  8139  0016BC  0E0A               	movlw	10
  8140  0016BE  6E2B               	movwf	___awdiv@divisor,c
  8141  0016C0  0100               	movlb	0	; () banked
  8142  0016C2  519E               	movf	scale@scl& (0+255),w,b
  8143  0016C4  6E29               	movwf	___awdiv@dividend,c
  8144  0016C6  6A2A               	clrf	___awdiv@dividend+1,c
  8145  0016C8  BE29               	btfsc	___awdiv@dividend,7,c
  8146  0016CA  062A               	decf	___awdiv@dividend+1,f,c
  8147  0016CC  ECEE  F01A         	call	___awdiv	;wreg free
  8148  0016D0  0E09               	movlw	9
  8149  0016D2  2429               	addwf	?___awdiv,w,c
  8150  0016D4  6E31               	movwf	___wmul@multiplier,c
  8151  0016D6  0E00               	movlw	0
  8152  0016D8  202A               	addwfc	?___awdiv+1,w,c
  8153  0016DA  6E32               	movwf	___wmul@multiplier+1,c
  8154  0016DC  0E00               	movlw	0
  8155  0016DE  6E34               	movwf	___wmul@multiplicand+1,c
  8156  0016E0  0E03               	movlw	3
  8157  0016E2  6E33               	movwf	___wmul@multiplicand,c
  8158  0016E4  EC22  F01F         	call	___wmul	;wreg free
  8159  0016E8  0E2E               	movlw	low __powers_
  8160  0016EA  2431               	addwf	?___wmul,w,c
  8161  0016EC  6EF6               	movwf	tblptrl,c
  8162  0016EE  0EFE               	movlw	high __powers_
  8163  0016F0  2032               	addwfc	?___wmul+1,w,c
  8164  0016F2  6EF7               	movwf	tblptrh,c
  8165  0016F4                     	if	0	;There are less than 3 active tblptr bytes
  8166  0016F4                     	endif
  8167  0016F4  0009               	tblrd		*+
  8168  0016F6  CFF5 F089          	movff	tablat,___ftmul@f1
  8169  0016FA  0009               	tblrd		*+
  8170  0016FC  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  8171  001700  000A               	tblrd		*-
  8172  001702  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  8173  001706  0E00               	movlw	0
  8174  001708  6E34               	movwf	___wmul@multiplicand+1,c
  8175  00170A  0E03               	movlw	3
  8176  00170C  6E33               	movwf	___wmul@multiplicand,c
  8177  00170E  0E00               	movlw	0
  8178  001710  6E26               	movwf	___awmod@divisor+1,c
  8179  001712  0E0A               	movlw	10
  8180  001714  6E25               	movwf	___awmod@divisor,c
  8181  001716  0100               	movlb	0	; () banked
  8182  001718  519E               	movf	scale@scl& (0+255),w,b
  8183  00171A  6E23               	movwf	___awmod@dividend,c
  8184  00171C  6A24               	clrf	___awmod@dividend+1,c
  8185  00171E  BE23               	btfsc	___awmod@dividend,7,c
  8186  001720  0624               	decf	___awmod@dividend+1,f,c
  8187  001722  ECEE  F01B         	call	___awmod	;wreg free
  8188  001726  C023  F031         	movff	?___awmod,___wmul@multiplier
  8189  00172A  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  8190  00172E  EC22  F01F         	call	___wmul	;wreg free
  8191  001732  0E2E               	movlw	low __powers_
  8192  001734  2431               	addwf	?___wmul,w,c
  8193  001736  6EF6               	movwf	tblptrl,c
  8194  001738  0EFE               	movlw	high __powers_
  8195  00173A  2032               	addwfc	?___wmul+1,w,c
  8196  00173C  6EF7               	movwf	tblptrh,c
  8197  00173E                     	if	0	;There are less than 3 active tblptr bytes
  8198  00173E                     	endif
  8199  00173E  0009               	tblrd		*+
  8200  001740  CFF5 F08C          	movff	tablat,___ftmul@f2
  8201  001744  0009               	tblrd		*+
  8202  001746  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  8203  00174A  000A               	tblrd		*-
  8204  00174C  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  8205  001750  EC8B  F010         	call	___ftmul	;wreg free
  8206  001754  D7A4               	goto	L5
  8207  001756                     l6362:
  8208                           
  8209                           ;doprnt.c: 440: return _powers_[scl];
  8210  001756  0100               	movlb	0	; () banked
  8211  001758  519E               	movf	scale@scl& (0+255),w,b
  8212  00175A  0D03               	mullw	3
  8213  00175C  0E2E               	movlw	low __powers_
  8214  00175E  24F3               	addwf	prodl,w,c
  8215  001760  6EF6               	movwf	tblptrl,c
  8216  001762  0EFE               	movlw	high __powers_
  8217  001764  20F4               	addwfc	prodh,w,c
  8218  001766  6EF7               	movwf	tblptrh,c
  8219  001768                     	if	0	;There are less than 3 active tblptr bytes
  8220  001768                     	endif
  8221  001768  0009               	tblrd		*+
  8222  00176A  CFF5 F098          	movff	tablat,?_scale
  8223  00176E  0009               	tblrd		*+
  8224  001770  CFF5 F099          	movff	tablat,?_scale+1
  8225  001774  000A               	tblrd		*-
  8226  001776  CFF5 F09A          	movff	tablat,?_scale+2
  8227  00177A  0012               	return	
  8228  00177C                     __end_of_scale:
  8229                           	opt stack 0
  8230                           tblptru	equ	0xFF8
  8231                           tblptrh	equ	0xFF7
  8232                           tblptrl	equ	0xFF6
  8233                           tablat	equ	0xFF5
  8234                           prodh	equ	0xFF4
  8235                           prodl	equ	0xFF3
  8236                           postinc0	equ	0xFEE
  8237                           wreg	equ	0xFE8
  8238                           postdec1	equ	0xFE5
  8239                           fsr1l	equ	0xFE1
  8240                           indf2	equ	0xFDF
  8241                           postinc2	equ	0xFDE
  8242                           postdec2	equ	0xFDD
  8243                           fsr2h	equ	0xFDA
  8244                           fsr2l	equ	0xFD9
  8245                           status	equ	0xFD8
  8246                           
  8247 ;; *************** function _putch *****************
  8248 ;; Defined at:
  8249 ;;		line 35 in file "lcd.c"
  8250 ;; Parameters:    Size  Location     Type
  8251 ;;  data            1    wreg     unsigned char 
  8252 ;; Auto vars:     Size  Location     Type
  8253 ;;  data            1   38[COMRAM] unsigned char 
  8254 ;; Return value:  Size  Location     Type
  8255 ;;                  1    wreg      void 
  8256 ;; Registers used:
  8257 ;;		wreg, status,2, status,0, cstack
  8258 ;; Tracked objects:
  8259 ;;		On entry : 0/0
  8260 ;;		On exit  : 0/0
  8261 ;;		Unchanged: 0/0
  8262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8264 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8266 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8267 ;;Total ram usage:        1 bytes
  8268 ;; Hardware stack levels used:    1
  8269 ;; Hardware stack levels required when called:    6
  8270 ;; This function calls:
  8271 ;;		_lcdNewline
  8272 ;;		_lcdNibble
  8273 ;; This function is called by:
  8274 ;;		_printf
  8275 ;; This function uses a non-reentrant model
  8276 ;;
  8277                           
  8278                           	psect	text18
  8279  003E8E                     __ptext18:
  8280                           	opt stack 0
  8281  003E8E                     _putch:
  8282                           	opt stack 22
  8283                           
  8284                           ;incstack = 0
  8285                           ;putch@data stored from wreg
  8286  003E8E  6E27               	movwf	putch@data,c
  8287                           
  8288                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  8289  003E90  0E0A               	movlw	10
  8290  003E92  1827               	xorwf	putch@data,w,c
  8291  003E94  A4D8               	btfss	status,2,c
  8292  003E96  D003               	goto	l226
  8293  003E98  ECCF  F01F         	call	_lcdNewline	;wreg free
  8294  003E9C  0012               	return	
  8295  003E9E                     l226:
  8296                           
  8297                           ;lcd.c: 37: else
  8298                           ;lcd.c: 38: {
  8299                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  8300  003E9E  848C               	bsf	3980,2,c	;volatile
  8301                           
  8302                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  8303  003EA0  0E74               	movlw	116
  8304  003EA2                     u8157:
  8305  003EA2  2EE8               	decfsz	wreg,f,c
  8306  003EA4  D7FE               	bra	u8157
  8307  003EA6  D000               	nop2	
  8308                           
  8309                           ;lcd.c: 41: lcdNibble(data);
  8310  003EA8  5027               	movf	putch@data,w,c
  8311  003EAA  EC91  F01C         	call	_lcdNibble
  8312  003EAE  0012               	return	
  8313  003EB0                     __end_of_putch:
  8314                           	opt stack 0
  8315                           tblptru	equ	0xFF8
  8316                           tblptrh	equ	0xFF7
  8317                           tblptrl	equ	0xFF6
  8318                           tablat	equ	0xFF5
  8319                           prodh	equ	0xFF4
  8320                           prodl	equ	0xFF3
  8321                           postinc0	equ	0xFEE
  8322                           wreg	equ	0xFE8
  8323                           postdec1	equ	0xFE5
  8324                           fsr1l	equ	0xFE1
  8325                           indf2	equ	0xFDF
  8326                           postinc2	equ	0xFDE
  8327                           postdec2	equ	0xFDD
  8328                           fsr2h	equ	0xFDA
  8329                           fsr2l	equ	0xFD9
  8330                           status	equ	0xFD8
  8331                           
  8332 ;; *************** function _lcdNewline *****************
  8333 ;; Defined at:
  8334 ;;		line 78 in file "lcd.c"
  8335 ;; Parameters:    Size  Location     Type
  8336 ;;		None
  8337 ;; Auto vars:     Size  Location     Type
  8338 ;;		None
  8339 ;; Return value:  Size  Location     Type
  8340 ;;                  1    wreg      void 
  8341 ;; Registers used:
  8342 ;;		wreg, status,2, status,0, cstack
  8343 ;; Tracked objects:
  8344 ;;		On entry : 0/0
  8345 ;;		On exit  : 0/0
  8346 ;;		Unchanged: 0/0
  8347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8351 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8352 ;;Total ram usage:        0 bytes
  8353 ;; Hardware stack levels used:    1
  8354 ;; Hardware stack levels required when called:    5
  8355 ;; This function calls:
  8356 ;;		_lcdInst
  8357 ;; This function is called by:
  8358 ;;		_putch
  8359 ;; This function uses a non-reentrant model
  8360 ;;
  8361                           
  8362                           	psect	text19
  8363  003F9E                     __ptext19:
  8364                           	opt stack 0
  8365  003F9E                     _lcdNewline:
  8366                           	opt stack 22
  8367                           
  8368                           ;lcd.c: 79: lcdInst(0b11000000);
  8369                           
  8370                           ;incstack = 0
  8371  003F9E  0EC0               	movlw	192
  8372  003FA0  EC58  F01F         	call	_lcdInst
  8373  003FA4  0012               	return		;funcret
  8374  003FA6                     __end_of_lcdNewline:
  8375                           	opt stack 0
  8376                           tblptru	equ	0xFF8
  8377                           tblptrh	equ	0xFF7
  8378                           tblptrl	equ	0xFF6
  8379                           tablat	equ	0xFF5
  8380                           prodh	equ	0xFF4
  8381                           prodl	equ	0xFF3
  8382                           postinc0	equ	0xFEE
  8383                           wreg	equ	0xFE8
  8384                           postdec1	equ	0xFE5
  8385                           fsr1l	equ	0xFE1
  8386                           indf2	equ	0xFDF
  8387                           postinc2	equ	0xFDE
  8388                           postdec2	equ	0xFDD
  8389                           fsr2h	equ	0xFDA
  8390                           fsr2l	equ	0xFD9
  8391                           status	equ	0xFD8
  8392                           
  8393 ;; *************** function _isdigit *****************
  8394 ;; Defined at:
  8395 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  8396 ;; Parameters:    Size  Location     Type
  8397 ;;  c               1    wreg     unsigned char 
  8398 ;; Auto vars:     Size  Location     Type
  8399 ;;  c               1   36[COMRAM] unsigned char 
  8400 ;; Return value:  Size  Location     Type
  8401 ;;		None               void
  8402 ;; Registers used:
  8403 ;;		wreg, status,2, status,0
  8404 ;; Tracked objects:
  8405 ;;		On entry : 0/0
  8406 ;;		On exit  : 0/0
  8407 ;;		Unchanged: 0/0
  8408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8410 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8411 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8412 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8413 ;;Total ram usage:        3 bytes
  8414 ;; Hardware stack levels used:    1
  8415 ;; Hardware stack levels required when called:    3
  8416 ;; This function calls:
  8417 ;;		Nothing
  8418 ;; This function is called by:
  8419 ;;		_printf
  8420 ;; This function uses a non-reentrant model
  8421 ;;
  8422                           
  8423                           	psect	text20
  8424  003F10                     __ptext20:
  8425                           	opt stack 0
  8426  003F10                     _isdigit:
  8427                           	opt stack 25
  8428                           
  8429                           ;incstack = 0
  8430                           ;isdigit@c stored from wreg
  8431  003F10  6E25               	movwf	isdigit@c,c
  8432  003F12  0E00               	movlw	0
  8433  003F14  6E24               	movwf	_isdigit$1052,c
  8434  003F16  0E3A               	movlw	58
  8435  003F18  6025               	cpfslt	isdigit@c,c
  8436  003F1A  D005               	goto	l6374
  8437  003F1C  0E2F               	movlw	47
  8438  003F1E  6425               	cpfsgt	isdigit@c,c
  8439  003F20  D002               	goto	l6374
  8440  003F22  0E01               	movlw	1
  8441  003F24  6E24               	movwf	_isdigit$1052,c
  8442  003F26                     l6374:
  8443  003F26  C024  F023         	movff	_isdigit$1052,??_isdigit
  8444  003F2A  3023               	rrcf	??_isdigit,w,c
  8445  003F2C  0012               	return	
  8446  003F2E                     __end_of_isdigit:
  8447                           	opt stack 0
  8448                           tblptru	equ	0xFF8
  8449                           tblptrh	equ	0xFF7
  8450                           tblptrl	equ	0xFF6
  8451                           tablat	equ	0xFF5
  8452                           prodh	equ	0xFF4
  8453                           prodl	equ	0xFF3
  8454                           postinc0	equ	0xFEE
  8455                           wreg	equ	0xFE8
  8456                           postdec1	equ	0xFE5
  8457                           fsr1l	equ	0xFE1
  8458                           indf2	equ	0xFDF
  8459                           postinc2	equ	0xFDE
  8460                           postdec2	equ	0xFDD
  8461                           fsr2h	equ	0xFDA
  8462                           fsr2l	equ	0xFD9
  8463                           status	equ	0xFD8
  8464                           
  8465 ;; *************** function _fround *****************
  8466 ;; Defined at:
  8467 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  8468 ;; Parameters:    Size  Location     Type
  8469 ;;  prec            1    wreg     unsigned char 
  8470 ;; Auto vars:     Size  Location     Type
  8471 ;;  prec            1   33[BANK0 ] unsigned char 
  8472 ;; Return value:  Size  Location     Type
  8473 ;;                  3   24[BANK0 ] unsigned char 
  8474 ;; Registers used:
  8475 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8476 ;; Tracked objects:
  8477 ;;		On entry : 0/0
  8478 ;;		On exit  : 0/0
  8479 ;;		Unchanged: 0/0
  8480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8481 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8482 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8484 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8485 ;;Total ram usage:       10 bytes
  8486 ;; Hardware stack levels used:    1
  8487 ;; Hardware stack levels required when called:    5
  8488 ;; This function calls:
  8489 ;;		___awdiv
  8490 ;;		___awmod
  8491 ;;		___ftmul
  8492 ;;		___wmul
  8493 ;; This function is called by:
  8494 ;;		_printf
  8495 ;; This function uses a non-reentrant model
  8496 ;;
  8497                           
  8498                           	psect	text21
  8499  001D3E                     __ptext21:
  8500                           	opt stack 0
  8501  001D3E                     _fround:
  8502                           	opt stack 23
  8503                           
  8504                           ;incstack = 0
  8505                           ;fround@prec stored from wreg
  8506  001D3E  0100               	movlb	0	; () banked
  8507  001D40  6FA1               	movwf	fround@prec& (0+255),b
  8508                           
  8509                           ;doprnt.c: 413: if(prec>=110)
  8510  001D42  0E6D               	movlw	109
  8511  001D44  0100               	movlb	0	; () banked
  8512  001D46  65A1               	cpfsgt	fround@prec& (0+255),b
  8513  001D48  D0A2               	goto	l6316
  8514                           
  8515                           ; BSR set to: 0
  8516                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8517  001D4A  0E00               	movlw	0
  8518  001D4C  6E34               	movwf	___wmul@multiplicand+1,c
  8519  001D4E  0E03               	movlw	3
  8520  001D50  6E33               	movwf	___wmul@multiplicand,c
  8521  001D52  0E00               	movlw	0
  8522  001D54  6E2C               	movwf	___awdiv@divisor+1,c
  8523  001D56  0E0A               	movlw	10
  8524  001D58  6E2B               	movwf	___awdiv@divisor,c
  8525  001D5A  0E00               	movlw	0
  8526  001D5C  6E26               	movwf	___awmod@divisor+1,c
  8527  001D5E  0E64               	movlw	100
  8528  001D60  6E25               	movwf	___awmod@divisor,c
  8529  001D62  C0A1  F023         	movff	fround@prec,___awmod@dividend
  8530  001D66  6A24               	clrf	___awmod@dividend+1,c
  8531  001D68  ECEE  F01B         	call	___awmod	;wreg free
  8532  001D6C  C023  F029         	movff	?___awmod,___awdiv@dividend
  8533  001D70  C024  F02A         	movff	?___awmod+1,___awdiv@dividend+1
  8534  001D74  ECEE  F01A         	call	___awdiv	;wreg free
  8535  001D78  0E09               	movlw	9
  8536  001D7A  2429               	addwf	?___awdiv,w,c
  8537  001D7C  6E31               	movwf	___wmul@multiplier,c
  8538  001D7E  0E00               	movlw	0
  8539  001D80  202A               	addwfc	?___awdiv+1,w,c
  8540  001D82  6E32               	movwf	___wmul@multiplier+1,c
  8541  001D84  EC22  F01F         	call	___wmul	;wreg free
  8542  001D88  0E07               	movlw	low __npowers_
  8543  001D8A  2431               	addwf	?___wmul,w,c
  8544  001D8C  6EF6               	movwf	tblptrl,c
  8545  001D8E  0EFE               	movlw	high __npowers_
  8546  001D90  2032               	addwfc	?___wmul+1,w,c
  8547  001D92  6EF7               	movwf	tblptrh,c
  8548  001D94                     	if	0	;There are less than 3 active tblptr bytes
  8549  001D94                     	endif
  8550  001D94  0009               	tblrd		*+
  8551  001D96  CFF5 F08C          	movff	tablat,___ftmul@f2
  8552  001D9A  0009               	tblrd		*+
  8553  001D9C  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  8554  001DA0  000A               	tblrd		*-
  8555  001DA2  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  8556  001DA6  0E00               	movlw	0
  8557  001DA8  6E2C               	movwf	___awdiv@divisor+1,c
  8558  001DAA  0E64               	movlw	100
  8559  001DAC  6E2B               	movwf	___awdiv@divisor,c
  8560  001DAE  C0A1  F029         	movff	fround@prec,___awdiv@dividend
  8561  001DB2  6A2A               	clrf	___awdiv@dividend+1,c
  8562  001DB4  ECEE  F01A         	call	___awdiv	;wreg free
  8563  001DB8  0E12               	movlw	18
  8564  001DBA  2429               	addwf	?___awdiv,w,c
  8565  001DBC  6E31               	movwf	___wmul@multiplier,c
  8566  001DBE  0E00               	movlw	0
  8567  001DC0  202A               	addwfc	?___awdiv+1,w,c
  8568  001DC2  6E32               	movwf	___wmul@multiplier+1,c
  8569  001DC4  0E00               	movlw	0
  8570  001DC6  6E34               	movwf	___wmul@multiplicand+1,c
  8571  001DC8  0E03               	movlw	3
  8572  001DCA  6E33               	movwf	___wmul@multiplicand,c
  8573  001DCC  EC22  F01F         	call	___wmul	;wreg free
  8574  001DD0  0E07               	movlw	low __npowers_
  8575  001DD2  2431               	addwf	?___wmul,w,c
  8576  001DD4  6EF6               	movwf	tblptrl,c
  8577  001DD6  0EFE               	movlw	high __npowers_
  8578  001DD8  2032               	addwfc	?___wmul+1,w,c
  8579  001DDA  6EF7               	movwf	tblptrh,c
  8580  001DDC                     	if	0	;There are less than 3 active tblptr bytes
  8581  001DDC                     	endif
  8582  001DDC  0009               	tblrd		*+
  8583  001DDE  CFF5 F089          	movff	tablat,___ftmul@f1
  8584  001DE2  0009               	tblrd		*+
  8585  001DE4  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  8586  001DE8  000A               	tblrd		*-
  8587  001DEA  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  8588  001DEE  EC8B  F010         	call	___ftmul	;wreg free
  8589  001DF2  C089  F09E         	movff	?___ftmul,_fround$1420
  8590  001DF6  C08A  F09F         	movff	?___ftmul+1,_fround$1420+1
  8591  001DFA  C08B  F0A0         	movff	?___ftmul+2,_fround$1420+2
  8592                           
  8593                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8594  001DFE  0E00               	movlw	0
  8595  001E00  6E34               	movwf	___wmul@multiplicand+1,c
  8596  001E02  0E03               	movlw	3
  8597  001E04  6E33               	movwf	___wmul@multiplicand,c
  8598  001E06  0E00               	movlw	0
  8599  001E08  6E26               	movwf	___awmod@divisor+1,c
  8600  001E0A  0E0A               	movlw	10
  8601  001E0C  6E25               	movwf	___awmod@divisor,c
  8602  001E0E  C0A1  F023         	movff	fround@prec,___awmod@dividend
  8603  001E12  6A24               	clrf	___awmod@dividend+1,c
  8604  001E14  ECEE  F01B         	call	___awmod	;wreg free
  8605  001E18  C023  F031         	movff	?___awmod,___wmul@multiplier
  8606  001E1C  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  8607  001E20  EC22  F01F         	call	___wmul	;wreg free
  8608  001E24  0E07               	movlw	low __npowers_
  8609  001E26  2431               	addwf	?___wmul,w,c
  8610  001E28  6EF6               	movwf	tblptrl,c
  8611  001E2A  0EFE               	movlw	high __npowers_
  8612  001E2C  2032               	addwfc	?___wmul+1,w,c
  8613  001E2E  6EF7               	movwf	tblptrh,c
  8614  001E30                     	if	0	;There are less than 3 active tblptr bytes
  8615  001E30                     	endif
  8616  001E30  0009               	tblrd		*+
  8617  001E32  CFF5 F08C          	movff	tablat,___ftmul@f2
  8618  001E36  0009               	tblrd		*+
  8619  001E38  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  8620  001E3C  000A               	tblrd		*-
  8621  001E3E  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  8622  001E42  C09E  F089         	movff	_fround$1420,___ftmul@f1
  8623  001E46  C09F  F08A         	movff	_fround$1420+1,___ftmul@f1+1
  8624  001E4A  C0A0  F08B         	movff	_fround$1420+2,___ftmul@f1+2
  8625  001E4E  EC8B  F010         	call	___ftmul	;wreg free
  8626  001E52  C089  F09B         	movff	?___ftmul,_fround$1421
  8627  001E56  C08A  F09C         	movff	?___ftmul+1,_fround$1421+1
  8628  001E5A  C08B  F09D         	movff	?___ftmul+2,_fround$1421+2
  8629                           
  8630                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8631  001E5E  C09B  F089         	movff	_fround$1421,___ftmul@f1
  8632  001E62  C09C  F08A         	movff	_fround$1421+1,___ftmul@f1+1
  8633  001E66  C09D  F08B         	movff	_fround$1421+2,___ftmul@f1+2
  8634  001E6A  0E00               	movlw	0
  8635  001E6C  0100               	movlb	0	; () banked
  8636  001E6E  6F8C               	movwf	___ftmul@f2& (0+255),b
  8637  001E70  0E00               	movlw	0
  8638  001E72  0100               	movlb	0	; () banked
  8639  001E74  6F8D               	movwf	(___ftmul@f2+1)& (0+255),b
  8640  001E76  0E3F               	movlw	63
  8641  001E78  0100               	movlb	0	; () banked
  8642  001E7A  6F8E               	movwf	(___ftmul@f2+2)& (0+255),b
  8643  001E7C  EC8B  F010         	call	___ftmul	;wreg free
  8644  001E80  C089  F098         	movff	?___ftmul,?_fround
  8645  001E84  C08A  F099         	movff	?___ftmul+1,?_fround+1
  8646  001E88  C08B  F09A         	movff	?___ftmul+2,?_fround+2
  8647  001E8C  0012               	return	
  8648  001E8E                     l6316:
  8649                           
  8650                           ;doprnt.c: 415: else if(prec > 10)
  8651  001E8E  0E0A               	movlw	10
  8652  001E90  0100               	movlb	0	; () banked
  8653  001E92  65A1               	cpfsgt	fround@prec& (0+255),b
  8654  001E94  D060               	goto	l6324
  8655                           
  8656                           ; BSR set to: 0
  8657                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8658  001E96  0E00               	movlw	0
  8659  001E98  6E34               	movwf	___wmul@multiplicand+1,c
  8660  001E9A  0E03               	movlw	3
  8661  001E9C  6E33               	movwf	___wmul@multiplicand,c
  8662  001E9E  0E00               	movlw	0
  8663  001EA0  6E26               	movwf	___awmod@divisor+1,c
  8664  001EA2  0E0A               	movlw	10
  8665  001EA4  6E25               	movwf	___awmod@divisor,c
  8666  001EA6  C0A1  F023         	movff	fround@prec,___awmod@dividend
  8667  001EAA  6A24               	clrf	___awmod@dividend+1,c
  8668  001EAC  ECEE  F01B         	call	___awmod	;wreg free
  8669  001EB0  C023  F031         	movff	?___awmod,___wmul@multiplier
  8670  001EB4  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  8671  001EB8  EC22  F01F         	call	___wmul	;wreg free
  8672  001EBC  0E07               	movlw	low __npowers_
  8673  001EBE  2431               	addwf	?___wmul,w,c
  8674  001EC0  6EF6               	movwf	tblptrl,c
  8675  001EC2  0EFE               	movlw	high __npowers_
  8676  001EC4  2032               	addwfc	?___wmul+1,w,c
  8677  001EC6  6EF7               	movwf	tblptrh,c
  8678  001EC8                     	if	0	;There are less than 3 active tblptr bytes
  8679  001EC8                     	endif
  8680  001EC8  0009               	tblrd		*+
  8681  001ECA  CFF5 F08C          	movff	tablat,___ftmul@f2
  8682  001ECE  0009               	tblrd		*+
  8683  001ED0  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  8684  001ED4  000A               	tblrd		*-
  8685  001ED6  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  8686  001EDA  0E00               	movlw	0
  8687  001EDC  6E2C               	movwf	___awdiv@divisor+1,c
  8688  001EDE  0E0A               	movlw	10
  8689  001EE0  6E2B               	movwf	___awdiv@divisor,c
  8690  001EE2  C0A1  F029         	movff	fround@prec,___awdiv@dividend
  8691  001EE6  6A2A               	clrf	___awdiv@dividend+1,c
  8692  001EE8  ECEE  F01A         	call	___awdiv	;wreg free
  8693  001EEC  0E09               	movlw	9
  8694  001EEE  2429               	addwf	?___awdiv,w,c
  8695  001EF0  6E31               	movwf	___wmul@multiplier,c
  8696  001EF2  0E00               	movlw	0
  8697  001EF4  202A               	addwfc	?___awdiv+1,w,c
  8698  001EF6  6E32               	movwf	___wmul@multiplier+1,c
  8699  001EF8  0E00               	movlw	0
  8700  001EFA  6E34               	movwf	___wmul@multiplicand+1,c
  8701  001EFC  0E03               	movlw	3
  8702  001EFE  6E33               	movwf	___wmul@multiplicand,c
  8703  001F00  EC22  F01F         	call	___wmul	;wreg free
  8704  001F04  0E07               	movlw	low __npowers_
  8705  001F06  2431               	addwf	?___wmul,w,c
  8706  001F08  6EF6               	movwf	tblptrl,c
  8707  001F0A  0EFE               	movlw	high __npowers_
  8708  001F0C  2032               	addwfc	?___wmul+1,w,c
  8709  001F0E  6EF7               	movwf	tblptrh,c
  8710  001F10                     	if	0	;There are less than 3 active tblptr bytes
  8711  001F10                     	endif
  8712  001F10  0009               	tblrd		*+
  8713  001F12  CFF5 F089          	movff	tablat,___ftmul@f1
  8714  001F16  0009               	tblrd		*+
  8715  001F18  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  8716  001F1C  000A               	tblrd		*-
  8717  001F1E  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  8718  001F22  EC8B  F010         	call	___ftmul	;wreg free
  8719  001F26  C089  F09E         	movff	?___ftmul,_fround$1420
  8720  001F2A  C08A  F09F         	movff	?___ftmul+1,_fround$1420+1
  8721  001F2E  C08B  F0A0         	movff	?___ftmul+2,_fround$1420+2
  8722                           
  8723                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8724  001F32  C09E  F089         	movff	_fround$1420,___ftmul@f1
  8725  001F36  C09F  F08A         	movff	_fround$1420+1,___ftmul@f1+1
  8726  001F3A  C0A0  F08B         	movff	_fround$1420+2,___ftmul@f1+2
  8727  001F3E  0E00               	movlw	0
  8728  001F40  0100               	movlb	0	; () banked
  8729  001F42  6F8C               	movwf	___ftmul@f2& (0+255),b
  8730  001F44  0E00               	movlw	0
  8731  001F46  0100               	movlb	0	; () banked
  8732  001F48  6F8D               	movwf	(___ftmul@f2+1)& (0+255),b
  8733  001F4A  0E3F               	movlw	63
  8734  001F4C  0100               	movlb	0	; () banked
  8735  001F4E  6F8E               	movwf	(___ftmul@f2+2)& (0+255),b
  8736  001F50  EC8B  F010         	call	___ftmul	;wreg free
  8737  001F54  D795               	goto	L6
  8738  001F56                     l6324:
  8739                           
  8740                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  8741  001F56  0100               	movlb	0	; () banked
  8742  001F58  51A1               	movf	fround@prec& (0+255),w,b
  8743  001F5A  0D03               	mullw	3
  8744  001F5C  0E07               	movlw	low __npowers_
  8745  001F5E  24F3               	addwf	prodl,w,c
  8746  001F60  6EF6               	movwf	tblptrl,c
  8747  001F62  0EFE               	movlw	high __npowers_
  8748  001F64  20F4               	addwfc	prodh,w,c
  8749  001F66  6EF7               	movwf	tblptrh,c
  8750  001F68                     	if	0	;There are less than 3 active tblptr bytes
  8751  001F68                     	endif
  8752  001F68  0009               	tblrd		*+
  8753  001F6A  CFF5 F089          	movff	tablat,___ftmul@f1
  8754  001F6E  0009               	tblrd		*+
  8755  001F70  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  8756  001F74  000A               	tblrd		*-
  8757  001F76  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  8758  001F7A  0E00               	movlw	0
  8759  001F7C  0100               	movlb	0	; () banked
  8760  001F7E  6F8C               	movwf	___ftmul@f2& (0+255),b
  8761  001F80  0E00               	movlw	0
  8762  001F82  0100               	movlb	0	; () banked
  8763  001F84  6F8D               	movwf	(___ftmul@f2+1)& (0+255),b
  8764  001F86  0E3F               	movlw	63
  8765  001F88  0100               	movlb	0	; () banked
  8766  001F8A  6F8E               	movwf	(___ftmul@f2+2)& (0+255),b
  8767  001F8C  EC8B  F010         	call	___ftmul	;wreg free
  8768  001F90  C089  F098         	movff	?___ftmul,?_fround
  8769  001F94  C08A  F099         	movff	?___ftmul+1,?_fround+1
  8770  001F98  C08B  F09A         	movff	?___ftmul+2,?_fround+2
  8771  001F9C  0012               	return	
  8772  001F9E                     __end_of_fround:
  8773                           	opt stack 0
  8774                           tblptru	equ	0xFF8
  8775                           tblptrh	equ	0xFF7
  8776                           tblptrl	equ	0xFF6
  8777                           tablat	equ	0xFF5
  8778                           prodh	equ	0xFF4
  8779                           prodl	equ	0xFF3
  8780                           postinc0	equ	0xFEE
  8781                           wreg	equ	0xFE8
  8782                           postdec1	equ	0xFE5
  8783                           fsr1l	equ	0xFE1
  8784                           indf2	equ	0xFDF
  8785                           postinc2	equ	0xFDE
  8786                           postdec2	equ	0xFDD
  8787                           fsr2h	equ	0xFDA
  8788                           fsr2l	equ	0xFD9
  8789                           status	equ	0xFD8
  8790                           
  8791 ;; *************** function ___awmod *****************
  8792 ;; Defined at:
  8793 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8794 ;; Parameters:    Size  Location     Type
  8795 ;;  dividend        2   34[COMRAM] int 
  8796 ;;  divisor         2   36[COMRAM] int 
  8797 ;; Auto vars:     Size  Location     Type
  8798 ;;  sign            1   39[COMRAM] unsigned char 
  8799 ;;  counter         1   38[COMRAM] unsigned char 
  8800 ;; Return value:  Size  Location     Type
  8801 ;;                  2   34[COMRAM] int 
  8802 ;; Registers used:
  8803 ;;		wreg, status,2, status,0
  8804 ;; Tracked objects:
  8805 ;;		On entry : 0/0
  8806 ;;		On exit  : 0/0
  8807 ;;		Unchanged: 0/0
  8808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8809 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8810 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8812 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8813 ;;Total ram usage:        6 bytes
  8814 ;; Hardware stack levels used:    1
  8815 ;; Hardware stack levels required when called:    3
  8816 ;; This function calls:
  8817 ;;		Nothing
  8818 ;; This function is called by:
  8819 ;;		_fround
  8820 ;;		_scale
  8821 ;; This function uses a non-reentrant model
  8822 ;;
  8823                           
  8824                           	psect	text22
  8825  0037DC                     __ptext22:
  8826                           	opt stack 0
  8827  0037DC                     ___awmod:
  8828                           	opt stack 24
  8829                           
  8830                           ;incstack = 0
  8831  0037DC  0E00               	movlw	0
  8832  0037DE  6E28               	movwf	___awmod@sign,c
  8833  0037E0  AE24               	btfss	___awmod@dividend+1,7,c
  8834  0037E2  D006               	goto	l6214
  8835  0037E4  6C23               	negf	___awmod@dividend,c
  8836  0037E6  1E24               	comf	___awmod@dividend+1,f,c
  8837  0037E8  B0D8               	btfsc	status,0,c
  8838  0037EA  2A24               	incf	___awmod@dividend+1,f,c
  8839  0037EC  0E01               	movlw	1
  8840  0037EE  6E28               	movwf	___awmod@sign,c
  8841  0037F0                     l6214:
  8842  0037F0  AE26               	btfss	___awmod@divisor+1,7,c
  8843  0037F2  D004               	goto	l6218
  8844  0037F4  6C25               	negf	___awmod@divisor,c
  8845  0037F6  1E26               	comf	___awmod@divisor+1,f,c
  8846  0037F8  B0D8               	btfsc	status,0,c
  8847  0037FA  2A26               	incf	___awmod@divisor+1,f,c
  8848  0037FC                     l6218:
  8849  0037FC  5025               	movf	___awmod@divisor,w,c
  8850  0037FE  1026               	iorwf	___awmod@divisor+1,w,c
  8851  003800  B4D8               	btfsc	status,2,c
  8852  003802  D018               	goto	l6234
  8853  003804  0E01               	movlw	1
  8854  003806  6E27               	movwf	___awmod@counter,c
  8855  003808  D004               	goto	l6224
  8856  00380A                     l6222:
  8857  00380A  90D8               	bcf	status,0,c
  8858  00380C  3625               	rlcf	___awmod@divisor,f,c
  8859  00380E  3626               	rlcf	___awmod@divisor+1,f,c
  8860  003810  2A27               	incf	___awmod@counter,f,c
  8861  003812                     l6224:
  8862  003812  AE26               	btfss	___awmod@divisor+1,7,c
  8863  003814  D7FA               	goto	l6222
  8864  003816                     l6226:
  8865  003816  5025               	movf	___awmod@divisor,w,c
  8866  003818  5C23               	subwf	___awmod@dividend,w,c
  8867  00381A  5026               	movf	___awmod@divisor+1,w,c
  8868  00381C  5824               	subwfb	___awmod@dividend+1,w,c
  8869  00381E  A0D8               	btfss	status,0,c
  8870  003820  D004               	goto	l6230
  8871  003822  5025               	movf	___awmod@divisor,w,c
  8872  003824  5E23               	subwf	___awmod@dividend,f,c
  8873  003826  5026               	movf	___awmod@divisor+1,w,c
  8874  003828  5A24               	subwfb	___awmod@dividend+1,f,c
  8875  00382A                     l6230:
  8876  00382A  90D8               	bcf	status,0,c
  8877  00382C  3226               	rrcf	___awmod@divisor+1,f,c
  8878  00382E  3225               	rrcf	___awmod@divisor,f,c
  8879  003830  2E27               	decfsz	___awmod@counter,f,c
  8880  003832  D7F1               	goto	l6226
  8881  003834                     l6234:
  8882  003834  5028               	movf	___awmod@sign,w,c
  8883  003836  B4D8               	btfsc	status,2,c
  8884  003838  D004               	goto	l6238
  8885  00383A  6C23               	negf	___awmod@dividend,c
  8886  00383C  1E24               	comf	___awmod@dividend+1,f,c
  8887  00383E  B0D8               	btfsc	status,0,c
  8888  003840  2A24               	incf	___awmod@dividend+1,f,c
  8889  003842                     l6238:
  8890  003842  C023  F023         	movff	___awmod@dividend,?___awmod
  8891  003846  C024  F024         	movff	___awmod@dividend+1,?___awmod+1
  8892  00384A  0012               	return	
  8893  00384C                     __end_of___awmod:
  8894                           	opt stack 0
  8895                           tblptru	equ	0xFF8
  8896                           tblptrh	equ	0xFF7
  8897                           tblptrl	equ	0xFF6
  8898                           tablat	equ	0xFF5
  8899                           prodh	equ	0xFF4
  8900                           prodl	equ	0xFF3
  8901                           postinc0	equ	0xFEE
  8902                           wreg	equ	0xFE8
  8903                           postdec1	equ	0xFE5
  8904                           fsr1l	equ	0xFE1
  8905                           indf2	equ	0xFDF
  8906                           postinc2	equ	0xFDE
  8907                           postdec2	equ	0xFDD
  8908                           fsr2h	equ	0xFDA
  8909                           fsr2l	equ	0xFD9
  8910                           status	equ	0xFD8
  8911                           
  8912 ;; *************** function ___awdiv *****************
  8913 ;; Defined at:
  8914 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8915 ;; Parameters:    Size  Location     Type
  8916 ;;  dividend        2   40[COMRAM] int 
  8917 ;;  divisor         2   42[COMRAM] int 
  8918 ;; Auto vars:     Size  Location     Type
  8919 ;;  quotient        2   46[COMRAM] int 
  8920 ;;  sign            1   45[COMRAM] unsigned char 
  8921 ;;  counter         1   44[COMRAM] unsigned char 
  8922 ;; Return value:  Size  Location     Type
  8923 ;;                  2   40[COMRAM] int 
  8924 ;; Registers used:
  8925 ;;		wreg, status,2, status,0
  8926 ;; Tracked objects:
  8927 ;;		On entry : 0/0
  8928 ;;		On exit  : 0/0
  8929 ;;		Unchanged: 0/0
  8930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8931 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8932 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8934 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8935 ;;Total ram usage:        8 bytes
  8936 ;; Hardware stack levels used:    1
  8937 ;; Hardware stack levels required when called:    3
  8938 ;; This function calls:
  8939 ;;		Nothing
  8940 ;; This function is called by:
  8941 ;;		_fround
  8942 ;;		_scale
  8943 ;;		_printf
  8944 ;; This function uses a non-reentrant model
  8945 ;;
  8946                           
  8947                           	psect	text23
  8948  0035DC                     __ptext23:
  8949                           	opt stack 0
  8950  0035DC                     ___awdiv:
  8951                           	opt stack 24
  8952                           
  8953                           ;incstack = 0
  8954  0035DC  0E00               	movlw	0
  8955  0035DE  6E2E               	movwf	___awdiv@sign,c
  8956  0035E0  AE2C               	btfss	___awdiv@divisor+1,7,c
  8957  0035E2  D006               	goto	l6170
  8958  0035E4  6C2B               	negf	___awdiv@divisor,c
  8959  0035E6  1E2C               	comf	___awdiv@divisor+1,f,c
  8960  0035E8  B0D8               	btfsc	status,0,c
  8961  0035EA  2A2C               	incf	___awdiv@divisor+1,f,c
  8962  0035EC  0E01               	movlw	1
  8963  0035EE  6E2E               	movwf	___awdiv@sign,c
  8964  0035F0                     l6170:
  8965  0035F0  AE2A               	btfss	___awdiv@dividend+1,7,c
  8966  0035F2  D006               	goto	l6176
  8967  0035F4  6C29               	negf	___awdiv@dividend,c
  8968  0035F6  1E2A               	comf	___awdiv@dividend+1,f,c
  8969  0035F8  B0D8               	btfsc	status,0,c
  8970  0035FA  2A2A               	incf	___awdiv@dividend+1,f,c
  8971  0035FC  0E01               	movlw	1
  8972  0035FE  1A2E               	xorwf	___awdiv@sign,f,c
  8973  003600                     l6176:
  8974  003600  0E00               	movlw	0
  8975  003602  6E30               	movwf	___awdiv@quotient+1,c
  8976  003604  0E00               	movlw	0
  8977  003606  6E2F               	movwf	___awdiv@quotient,c
  8978  003608  502B               	movf	___awdiv@divisor,w,c
  8979  00360A  102C               	iorwf	___awdiv@divisor+1,w,c
  8980  00360C  B4D8               	btfsc	status,2,c
  8981  00360E  D01C               	goto	l6198
  8982  003610  0E01               	movlw	1
  8983  003612  6E2D               	movwf	___awdiv@counter,c
  8984  003614  D004               	goto	l6184
  8985  003616                     l6182:
  8986  003616  90D8               	bcf	status,0,c
  8987  003618  362B               	rlcf	___awdiv@divisor,f,c
  8988  00361A  362C               	rlcf	___awdiv@divisor+1,f,c
  8989  00361C  2A2D               	incf	___awdiv@counter,f,c
  8990  00361E                     l6184:
  8991  00361E  AE2C               	btfss	___awdiv@divisor+1,7,c
  8992  003620  D7FA               	goto	l6182
  8993  003622                     l6186:
  8994  003622  90D8               	bcf	status,0,c
  8995  003624  362F               	rlcf	___awdiv@quotient,f,c
  8996  003626  3630               	rlcf	___awdiv@quotient+1,f,c
  8997  003628  502B               	movf	___awdiv@divisor,w,c
  8998  00362A  5C29               	subwf	___awdiv@dividend,w,c
  8999  00362C  502C               	movf	___awdiv@divisor+1,w,c
  9000  00362E  582A               	subwfb	___awdiv@dividend+1,w,c
  9001  003630  A0D8               	btfss	status,0,c
  9002  003632  D005               	goto	l6194
  9003  003634  502B               	movf	___awdiv@divisor,w,c
  9004  003636  5E29               	subwf	___awdiv@dividend,f,c
  9005  003638  502C               	movf	___awdiv@divisor+1,w,c
  9006  00363A  5A2A               	subwfb	___awdiv@dividend+1,f,c
  9007  00363C  802F               	bsf	___awdiv@quotient,0,c
  9008  00363E                     l6194:
  9009  00363E  90D8               	bcf	status,0,c
  9010  003640  322C               	rrcf	___awdiv@divisor+1,f,c
  9011  003642  322B               	rrcf	___awdiv@divisor,f,c
  9012  003644  2E2D               	decfsz	___awdiv@counter,f,c
  9013  003646  D7ED               	goto	l6186
  9014  003648                     l6198:
  9015  003648  502E               	movf	___awdiv@sign,w,c
  9016  00364A  B4D8               	btfsc	status,2,c
  9017  00364C  D004               	goto	l6202
  9018  00364E  6C2F               	negf	___awdiv@quotient,c
  9019  003650  1E30               	comf	___awdiv@quotient+1,f,c
  9020  003652  B0D8               	btfsc	status,0,c
  9021  003654  2A30               	incf	___awdiv@quotient+1,f,c
  9022  003656                     l6202:
  9023  003656  C02F  F029         	movff	___awdiv@quotient,?___awdiv
  9024  00365A  C030  F02A         	movff	___awdiv@quotient+1,?___awdiv+1
  9025  00365E  0012               	return	
  9026  003660                     __end_of___awdiv:
  9027                           	opt stack 0
  9028                           tblptru	equ	0xFF8
  9029                           tblptrh	equ	0xFF7
  9030                           tblptrl	equ	0xFF6
  9031                           tablat	equ	0xFF5
  9032                           prodh	equ	0xFF4
  9033                           prodl	equ	0xFF3
  9034                           postinc0	equ	0xFEE
  9035                           wreg	equ	0xFE8
  9036                           postdec1	equ	0xFE5
  9037                           fsr1l	equ	0xFE1
  9038                           indf2	equ	0xFDF
  9039                           postinc2	equ	0xFDE
  9040                           postdec2	equ	0xFDD
  9041                           fsr2h	equ	0xFDA
  9042                           fsr2l	equ	0xFD9
  9043                           status	equ	0xFD8
  9044                           
  9045 ;; *************** function __tdiv_to_l_ *****************
  9046 ;; Defined at:
  9047 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  9048 ;; Parameters:    Size  Location     Type
  9049 ;;  f1              3   34[COMRAM] float 
  9050 ;;  f2              3   37[COMRAM] float 
  9051 ;; Auto vars:     Size  Location     Type
  9052 ;;  quot            4   43[COMRAM] unsigned long 
  9053 ;;  exp1            1   48[COMRAM] unsigned char 
  9054 ;;  cntr            1   47[COMRAM] unsigned char 
  9055 ;; Return value:  Size  Location     Type
  9056 ;;                  4   34[COMRAM] unsigned long 
  9057 ;; Registers used:
  9058 ;;		wreg, status,2, status,0
  9059 ;; Tracked objects:
  9060 ;;		On entry : 0/0
  9061 ;;		On exit  : 0/0
  9062 ;;		Unchanged: 0/0
  9063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9064 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9065 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9066 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9067 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9068 ;;Total ram usage:       15 bytes
  9069 ;; Hardware stack levels used:    1
  9070 ;; Hardware stack levels required when called:    3
  9071 ;; This function calls:
  9072 ;;		Nothing
  9073 ;; This function is called by:
  9074 ;;		_printf
  9075 ;; This function uses a non-reentrant model
  9076 ;;
  9077                           
  9078                           	psect	text24
  9079  002510                     __ptext24:
  9080                           	opt stack 0
  9081  002510                     __tdiv_to_l_:
  9082                           	opt stack 25
  9083                           
  9084                           ;incstack = 0
  9085  002510  C025  F029         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  9086  002514  6A2A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  9087  002516  6A2B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  9088  002518  3424               	rlcf	__tdiv_to_l_@f1+1,w,c
  9089  00251A  3629               	rlcf	??__tdiv_to_l_& (0+255),f,c
  9090  00251C  E301               	bnc	u6191
  9091  00251E  802A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  9092  002520                     u6191:
  9093  002520  5029               	movf	??__tdiv_to_l_,w,c
  9094  002522  6E31               	movwf	__tdiv_to_l_@exp1,c
  9095  002524  5031               	movf	__tdiv_to_l_@exp1,w,c
  9096  002526  A4D8               	btfss	status,2,c
  9097  002528  D009               	goto	l6384
  9098  00252A  0E00               	movlw	0
  9099  00252C  6E23               	movwf	?__tdiv_to_l_,c
  9100  00252E  0E00               	movlw	0
  9101  002530  6E24               	movwf	?__tdiv_to_l_+1,c
  9102  002532  0E00               	movlw	0
  9103  002534  6E25               	movwf	?__tdiv_to_l_+2,c
  9104  002536  0E00               	movlw	0
  9105  002538  6E26               	movwf	?__tdiv_to_l_+3,c
  9106  00253A  0012               	return	
  9107  00253C                     l6384:
  9108  00253C  C028  F029         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  9109  002540  6A2A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  9110  002542  6A2B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  9111  002544  3427               	rlcf	__tdiv_to_l_@f2+1,w,c
  9112  002546  3629               	rlcf	??__tdiv_to_l_& (0+255),f,c
  9113  002548  E301               	bnc	u6211
  9114  00254A  802A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  9115  00254C                     u6211:
  9116  00254C  5029               	movf	??__tdiv_to_l_,w,c
  9117  00254E  6E30               	movwf	__tdiv_to_l_@cntr,c
  9118  002550  5030               	movf	__tdiv_to_l_@cntr,w,c
  9119  002552  A4D8               	btfss	status,2,c
  9120  002554  D009               	goto	l6390
  9121  002556  0E00               	movlw	0
  9122  002558  6E23               	movwf	?__tdiv_to_l_,c
  9123  00255A  0E00               	movlw	0
  9124  00255C  6E24               	movwf	?__tdiv_to_l_+1,c
  9125  00255E  0E00               	movlw	0
  9126  002560  6E25               	movwf	?__tdiv_to_l_+2,c
  9127  002562  0E00               	movlw	0
  9128  002564  6E26               	movwf	?__tdiv_to_l_+3,c
  9129  002566  0012               	return	
  9130  002568                     l6390:
  9131  002568  8E24               	bsf	__tdiv_to_l_@f1+1,7,c
  9132  00256A  0EFF               	movlw	255
  9133  00256C  1623               	andwf	__tdiv_to_l_@f1,f,c
  9134  00256E  0EFF               	movlw	255
  9135  002570  1624               	andwf	__tdiv_to_l_@f1+1,f,c
  9136  002572  0E00               	movlw	0
  9137  002574  1625               	andwf	__tdiv_to_l_@f1+2,f,c
  9138  002576  8E27               	bsf	__tdiv_to_l_@f2+1,7,c
  9139  002578  0EFF               	movlw	255
  9140  00257A  1626               	andwf	__tdiv_to_l_@f2,f,c
  9141  00257C  0EFF               	movlw	255
  9142  00257E  1627               	andwf	__tdiv_to_l_@f2+1,f,c
  9143  002580  0E00               	movlw	0
  9144  002582  1628               	andwf	__tdiv_to_l_@f2+2,f,c
  9145  002584  0E00               	movlw	0
  9146  002586  6E2C               	movwf	__tdiv_to_l_@quot,c
  9147  002588  0E00               	movlw	0
  9148  00258A  6E2D               	movwf	__tdiv_to_l_@quot+1,c
  9149  00258C  0E00               	movlw	0
  9150  00258E  6E2E               	movwf	__tdiv_to_l_@quot+2,c
  9151  002590  0E00               	movlw	0
  9152  002592  6E2F               	movwf	__tdiv_to_l_@quot+3,c
  9153  002594  0E7F               	movlw	127
  9154  002596  5E31               	subwf	__tdiv_to_l_@exp1,f,c
  9155  002598  5030               	movf	__tdiv_to_l_@cntr,w,c
  9156  00259A  0F98               	addlw	152
  9157  00259C  5E31               	subwf	__tdiv_to_l_@exp1,f,c
  9158  00259E  0E18               	movlw	24
  9159  0025A0  6E30               	movwf	__tdiv_to_l_@cntr,c
  9160  0025A2                     l1184:
  9161  0025A2  90D8               	bcf	status,0,c
  9162  0025A4  362C               	rlcf	__tdiv_to_l_@quot,f,c
  9163  0025A6  362D               	rlcf	__tdiv_to_l_@quot+1,f,c
  9164  0025A8  362E               	rlcf	__tdiv_to_l_@quot+2,f,c
  9165  0025AA  362F               	rlcf	__tdiv_to_l_@quot+3,f,c
  9166  0025AC  5026               	movf	__tdiv_to_l_@f2,w,c
  9167  0025AE  5C23               	subwf	__tdiv_to_l_@f1,w,c
  9168  0025B0  5027               	movf	__tdiv_to_l_@f2+1,w,c
  9169  0025B2  5824               	subwfb	__tdiv_to_l_@f1+1,w,c
  9170  0025B4  5028               	movf	__tdiv_to_l_@f2+2,w,c
  9171  0025B6  5825               	subwfb	__tdiv_to_l_@f1+2,w,c
  9172  0025B8  A0D8               	btfss	status,0,c
  9173  0025BA  D007               	goto	l1185
  9174  0025BC  5026               	movf	__tdiv_to_l_@f2,w,c
  9175  0025BE  5E23               	subwf	__tdiv_to_l_@f1,f,c
  9176  0025C0  5027               	movf	__tdiv_to_l_@f2+1,w,c
  9177  0025C2  5A24               	subwfb	__tdiv_to_l_@f1+1,f,c
  9178  0025C4  5028               	movf	__tdiv_to_l_@f2+2,w,c
  9179  0025C6  5A25               	subwfb	__tdiv_to_l_@f1+2,f,c
  9180  0025C8  802C               	bsf	__tdiv_to_l_@quot,0,c
  9181  0025CA                     l1185:
  9182  0025CA  90D8               	bcf	status,0,c
  9183  0025CC  3623               	rlcf	__tdiv_to_l_@f1,f,c
  9184  0025CE  3624               	rlcf	__tdiv_to_l_@f1+1,f,c
  9185  0025D0  3625               	rlcf	__tdiv_to_l_@f1+2,f,c
  9186  0025D2  2E30               	decfsz	__tdiv_to_l_@cntr,f,c
  9187  0025D4  D7E6               	goto	l1184
  9188  0025D6  AE31               	btfss	__tdiv_to_l_@exp1,7,c
  9189  0025D8  D016               	goto	l6424
  9190  0025DA  5031               	movf	__tdiv_to_l_@exp1,w,c
  9191  0025DC  0A80               	xorlw	128
  9192  0025DE  0F97               	addlw	151
  9193  0025E0  B0D8               	btfsc	status,0,c
  9194  0025E2  D009               	goto	l6420
  9195  0025E4  0E00               	movlw	0
  9196  0025E6  6E23               	movwf	?__tdiv_to_l_,c
  9197  0025E8  0E00               	movlw	0
  9198  0025EA  6E24               	movwf	?__tdiv_to_l_+1,c
  9199  0025EC  0E00               	movlw	0
  9200  0025EE  6E25               	movwf	?__tdiv_to_l_+2,c
  9201  0025F0  0E00               	movlw	0
  9202  0025F2  6E26               	movwf	?__tdiv_to_l_+3,c
  9203  0025F4  0012               	return	
  9204  0025F6                     l6420:
  9205  0025F6  90D8               	bcf	status,0,c
  9206  0025F8  322F               	rrcf	__tdiv_to_l_@quot+3,f,c
  9207  0025FA  322E               	rrcf	__tdiv_to_l_@quot+2,f,c
  9208  0025FC  322D               	rrcf	__tdiv_to_l_@quot+1,f,c
  9209  0025FE  322C               	rrcf	__tdiv_to_l_@quot,f,c
  9210  002600  3E31               	incfsz	__tdiv_to_l_@exp1,f,c
  9211  002602  D7F9               	goto	l6420
  9212  002604  D015               	goto	l1191
  9213  002606                     l6424:
  9214  002606  0E17               	movlw	23
  9215  002608  6431               	cpfsgt	__tdiv_to_l_@exp1,c
  9216  00260A  D00F               	goto	l6432
  9217  00260C  0E00               	movlw	0
  9218  00260E  6E23               	movwf	?__tdiv_to_l_,c
  9219  002610  0E00               	movlw	0
  9220  002612  6E24               	movwf	?__tdiv_to_l_+1,c
  9221  002614  0E00               	movlw	0
  9222  002616  6E25               	movwf	?__tdiv_to_l_+2,c
  9223  002618  0E00               	movlw	0
  9224  00261A  6E26               	movwf	?__tdiv_to_l_+3,c
  9225  00261C  0012               	return	
  9226  00261E                     l6430:
  9227  00261E  90D8               	bcf	status,0,c
  9228  002620  362C               	rlcf	__tdiv_to_l_@quot,f,c
  9229  002622  362D               	rlcf	__tdiv_to_l_@quot+1,f,c
  9230  002624  362E               	rlcf	__tdiv_to_l_@quot+2,f,c
  9231  002626  362F               	rlcf	__tdiv_to_l_@quot+3,f,c
  9232  002628  0631               	decf	__tdiv_to_l_@exp1,f,c
  9233  00262A                     l6432:
  9234  00262A  5031               	movf	__tdiv_to_l_@exp1,w,c
  9235  00262C  A4D8               	btfss	status,2,c
  9236  00262E  D7F7               	goto	l6430
  9237  002630                     l1191:
  9238  002630  C02C  F023         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  9239  002634  C02D  F024         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  9240  002638  C02E  F025         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  9241  00263C  C02F  F026         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  9242  002640  0012               	return		;funcret
  9243  002642                     __end_of__tdiv_to_l_:
  9244                           	opt stack 0
  9245                           tblptru	equ	0xFF8
  9246                           tblptrh	equ	0xFF7
  9247                           tblptrl	equ	0xFF6
  9248                           tablat	equ	0xFF5
  9249                           prodh	equ	0xFF4
  9250                           prodl	equ	0xFF3
  9251                           postinc0	equ	0xFEE
  9252                           wreg	equ	0xFE8
  9253                           postdec1	equ	0xFE5
  9254                           fsr1l	equ	0xFE1
  9255                           indf2	equ	0xFDF
  9256                           postinc2	equ	0xFDE
  9257                           postdec2	equ	0xFDD
  9258                           fsr2h	equ	0xFDA
  9259                           fsr2l	equ	0xFD9
  9260                           status	equ	0xFD8
  9261                           
  9262 ;; *************** function __div_to_l_ *****************
  9263 ;; Defined at:
  9264 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  9265 ;; Parameters:    Size  Location     Type
  9266 ;;  f1              3   34[COMRAM] unsigned long 
  9267 ;;  f2              3   37[COMRAM] unsigned long 
  9268 ;; Auto vars:     Size  Location     Type
  9269 ;;  quot            4   40[COMRAM] unsigned long 
  9270 ;;  exp1            1   45[COMRAM] unsigned char 
  9271 ;;  cntr            1   44[COMRAM] unsigned char 
  9272 ;; Return value:  Size  Location     Type
  9273 ;;                  4   34[COMRAM] unsigned long 
  9274 ;; Registers used:
  9275 ;;		wreg, status,2, status,0
  9276 ;; Tracked objects:
  9277 ;;		On entry : 0/0
  9278 ;;		On exit  : 0/0
  9279 ;;		Unchanged: 0/0
  9280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9281 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9282 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9284 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9285 ;;Total ram usage:       12 bytes
  9286 ;; Hardware stack levels used:    1
  9287 ;; Hardware stack levels required when called:    3
  9288 ;; This function calls:
  9289 ;;		Nothing
  9290 ;; This function is called by:
  9291 ;;		_printf
  9292 ;; This function uses a non-reentrant model
  9293 ;;
  9294                           
  9295                           	psect	text25
  9296  002642                     __ptext25:
  9297                           	opt stack 0
  9298  002642                     __div_to_l_:
  9299                           	opt stack 25
  9300                           
  9301                           ;incstack = 0
  9302  002642  3425               	rlcf	__div_to_l_@f1+2,w,c
  9303  002644  3426               	rlcf	__div_to_l_@f1+3,w,c
  9304  002646  6E2E               	movwf	__div_to_l_@exp1,c
  9305  002648  502E               	movf	__div_to_l_@exp1,w,c
  9306  00264A  A4D8               	btfss	status,2,c
  9307  00264C  D009               	goto	l6440
  9308  00264E  0E00               	movlw	0
  9309  002650  6E23               	movwf	?__div_to_l_,c
  9310  002652  0E00               	movlw	0
  9311  002654  6E24               	movwf	?__div_to_l_+1,c
  9312  002656  0E00               	movlw	0
  9313  002658  6E25               	movwf	?__div_to_l_+2,c
  9314  00265A  0E00               	movlw	0
  9315  00265C  6E26               	movwf	?__div_to_l_+3,c
  9316  00265E  0012               	return	
  9317  002660                     l6440:
  9318  002660  3428               	rlcf	__div_to_l_@f2+2,w,c
  9319  002662  3429               	rlcf	__div_to_l_@f2+3,w,c
  9320  002664  6E2D               	movwf	__div_to_l_@cntr,c
  9321  002666  502D               	movf	__div_to_l_@cntr,w,c
  9322  002668  A4D8               	btfss	status,2,c
  9323  00266A  D009               	goto	l6446
  9324  00266C  0E00               	movlw	0
  9325  00266E  6E23               	movwf	?__div_to_l_,c
  9326  002670  0E00               	movlw	0
  9327  002672  6E24               	movwf	?__div_to_l_+1,c
  9328  002674  0E00               	movlw	0
  9329  002676  6E25               	movwf	?__div_to_l_+2,c
  9330  002678  0E00               	movlw	0
  9331  00267A  6E26               	movwf	?__div_to_l_+3,c
  9332  00267C  0012               	return	
  9333  00267E                     l6446:
  9334  00267E  8E25               	bsf	__div_to_l_@f1+2,7,c
  9335  002680  0EFF               	movlw	255
  9336  002682  1623               	andwf	__div_to_l_@f1,f,c
  9337  002684  0EFF               	movlw	255
  9338  002686  1624               	andwf	__div_to_l_@f1+1,f,c
  9339  002688  0EFF               	movlw	255
  9340  00268A  1625               	andwf	__div_to_l_@f1+2,f,c
  9341  00268C  0E00               	movlw	0
  9342  00268E  1626               	andwf	__div_to_l_@f1+3,f,c
  9343  002690  8E28               	bsf	__div_to_l_@f2+2,7,c
  9344  002692  0EFF               	movlw	255
  9345  002694  1626               	andwf	__div_to_l_@f2,f,c
  9346  002696  0EFF               	movlw	255
  9347  002698  1627               	andwf	__div_to_l_@f2+1,f,c
  9348  00269A  0EFF               	movlw	255
  9349  00269C  1628               	andwf	__div_to_l_@f2+2,f,c
  9350  00269E  0E00               	movlw	0
  9351  0026A0  1629               	andwf	__div_to_l_@f2+3,f,c
  9352  0026A2  0E00               	movlw	0
  9353  0026A4  6E29               	movwf	__div_to_l_@quot,c
  9354  0026A6  0E00               	movlw	0
  9355  0026A8  6E2A               	movwf	__div_to_l_@quot+1,c
  9356  0026AA  0E00               	movlw	0
  9357  0026AC  6E2B               	movwf	__div_to_l_@quot+2,c
  9358  0026AE  0E00               	movlw	0
  9359  0026B0  6E2C               	movwf	__div_to_l_@quot+3,c
  9360  0026B2  0E7F               	movlw	127
  9361  0026B4  5E2E               	subwf	__div_to_l_@exp1,f,c
  9362  0026B6  502D               	movf	__div_to_l_@cntr,w,c
  9363  0026B8  0FA0               	addlw	160
  9364  0026BA  5E2E               	subwf	__div_to_l_@exp1,f,c
  9365  0026BC  0E20               	movlw	32
  9366  0026BE  6E2D               	movwf	__div_to_l_@cntr,c
  9367  0026C0                     l6460:
  9368  0026C0  90D8               	bcf	status,0,c
  9369  0026C2  3629               	rlcf	__div_to_l_@quot,f,c
  9370  0026C4  362A               	rlcf	__div_to_l_@quot+1,f,c
  9371  0026C6  362B               	rlcf	__div_to_l_@quot+2,f,c
  9372  0026C8  362C               	rlcf	__div_to_l_@quot+3,f,c
  9373  0026CA  5026               	movf	__div_to_l_@f2,w,c
  9374  0026CC  5C23               	subwf	__div_to_l_@f1,w,c
  9375  0026CE  5027               	movf	__div_to_l_@f2+1,w,c
  9376  0026D0  5824               	subwfb	__div_to_l_@f1+1,w,c
  9377  0026D2  5028               	movf	__div_to_l_@f2+2,w,c
  9378  0026D4  5825               	subwfb	__div_to_l_@f1+2,w,c
  9379  0026D6  5029               	movf	__div_to_l_@f2+3,w,c
  9380  0026D8  5826               	subwfb	__div_to_l_@f1+3,w,c
  9381  0026DA  A0D8               	btfss	status,0,c
  9382  0026DC  D009               	goto	l6468
  9383  0026DE  5026               	movf	__div_to_l_@f2,w,c
  9384  0026E0  5E23               	subwf	__div_to_l_@f1,f,c
  9385  0026E2  5027               	movf	__div_to_l_@f2+1,w,c
  9386  0026E4  5A24               	subwfb	__div_to_l_@f1+1,f,c
  9387  0026E6  5028               	movf	__div_to_l_@f2+2,w,c
  9388  0026E8  5A25               	subwfb	__div_to_l_@f1+2,f,c
  9389  0026EA  5029               	movf	__div_to_l_@f2+3,w,c
  9390  0026EC  5A26               	subwfb	__div_to_l_@f1+3,f,c
  9391  0026EE  8029               	bsf	__div_to_l_@quot,0,c
  9392  0026F0                     l6468:
  9393  0026F0  90D8               	bcf	status,0,c
  9394  0026F2  3623               	rlcf	__div_to_l_@f1,f,c
  9395  0026F4  3624               	rlcf	__div_to_l_@f1+1,f,c
  9396  0026F6  3625               	rlcf	__div_to_l_@f1+2,f,c
  9397  0026F8  3626               	rlcf	__div_to_l_@f1+3,f,c
  9398  0026FA  2E2D               	decfsz	__div_to_l_@cntr,f,c
  9399  0026FC  D7E1               	goto	l6460
  9400  0026FE  AE2E               	btfss	__div_to_l_@exp1,7,c
  9401  002700  D016               	goto	l6484
  9402  002702  502E               	movf	__div_to_l_@exp1,w,c
  9403  002704  0A80               	xorlw	128
  9404  002706  0F9F               	addlw	159
  9405  002708  B0D8               	btfsc	status,0,c
  9406  00270A  D009               	goto	l6480
  9407  00270C  0E00               	movlw	0
  9408  00270E  6E23               	movwf	?__div_to_l_,c
  9409  002710  0E00               	movlw	0
  9410  002712  6E24               	movwf	?__div_to_l_+1,c
  9411  002714  0E00               	movlw	0
  9412  002716  6E25               	movwf	?__div_to_l_+2,c
  9413  002718  0E00               	movlw	0
  9414  00271A  6E26               	movwf	?__div_to_l_+3,c
  9415  00271C  0012               	return	
  9416  00271E                     l6480:
  9417  00271E  90D8               	bcf	status,0,c
  9418  002720  322C               	rrcf	__div_to_l_@quot+3,f,c
  9419  002722  322B               	rrcf	__div_to_l_@quot+2,f,c
  9420  002724  322A               	rrcf	__div_to_l_@quot+1,f,c
  9421  002726  3229               	rrcf	__div_to_l_@quot,f,c
  9422  002728  3E2E               	incfsz	__div_to_l_@exp1,f,c
  9423  00272A  D7F9               	goto	l6480
  9424  00272C  D015               	goto	l1087
  9425  00272E                     l6484:
  9426  00272E  0E1F               	movlw	31
  9427  002730  642E               	cpfsgt	__div_to_l_@exp1,c
  9428  002732  D00F               	goto	l6492
  9429  002734  0E00               	movlw	0
  9430  002736  6E23               	movwf	?__div_to_l_,c
  9431  002738  0E00               	movlw	0
  9432  00273A  6E24               	movwf	?__div_to_l_+1,c
  9433  00273C  0E00               	movlw	0
  9434  00273E  6E25               	movwf	?__div_to_l_+2,c
  9435  002740  0E00               	movlw	0
  9436  002742  6E26               	movwf	?__div_to_l_+3,c
  9437  002744  0012               	return	
  9438  002746                     l6490:
  9439  002746  90D8               	bcf	status,0,c
  9440  002748  3629               	rlcf	__div_to_l_@quot,f,c
  9441  00274A  362A               	rlcf	__div_to_l_@quot+1,f,c
  9442  00274C  362B               	rlcf	__div_to_l_@quot+2,f,c
  9443  00274E  362C               	rlcf	__div_to_l_@quot+3,f,c
  9444  002750  062E               	decf	__div_to_l_@exp1,f,c
  9445  002752                     l6492:
  9446  002752  502E               	movf	__div_to_l_@exp1,w,c
  9447  002754  A4D8               	btfss	status,2,c
  9448  002756  D7F7               	goto	l6490
  9449  002758                     l1087:
  9450  002758  C029  F023         	movff	__div_to_l_@quot,?__div_to_l_
  9451  00275C  C02A  F024         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  9452  002760  C02B  F025         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  9453  002764  C02C  F026         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  9454  002768  0012               	return		;funcret
  9455  00276A                     __end_of__div_to_l_:
  9456                           	opt stack 0
  9457                           tblptru	equ	0xFF8
  9458                           tblptrh	equ	0xFF7
  9459                           tblptrl	equ	0xFF6
  9460                           tablat	equ	0xFF5
  9461                           prodh	equ	0xFF4
  9462                           prodl	equ	0xFF3
  9463                           postinc0	equ	0xFEE
  9464                           wreg	equ	0xFE8
  9465                           postdec1	equ	0xFE5
  9466                           fsr1l	equ	0xFE1
  9467                           indf2	equ	0xFDF
  9468                           postinc2	equ	0xFDE
  9469                           postdec2	equ	0xFDD
  9470                           fsr2h	equ	0xFDA
  9471                           fsr2l	equ	0xFD9
  9472                           status	equ	0xFD8
  9473                           
  9474 ;; *************** function ___lltoft *****************
  9475 ;; Defined at:
  9476 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  9477 ;; Parameters:    Size  Location     Type
  9478 ;;  c               4   42[COMRAM] unsigned long 
  9479 ;; Auto vars:     Size  Location     Type
  9480 ;;  exp             1   50[COMRAM] unsigned char 
  9481 ;; Return value:  Size  Location     Type
  9482 ;;                  3   42[COMRAM] float 
  9483 ;; Registers used:
  9484 ;;		wreg, status,2, status,0, cstack
  9485 ;; Tracked objects:
  9486 ;;		On entry : 0/0
  9487 ;;		On exit  : 0/0
  9488 ;;		Unchanged: 0/0
  9489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9490 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9491 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9492 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9493 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9494 ;;Total ram usage:        9 bytes
  9495 ;; Hardware stack levels used:    1
  9496 ;; Hardware stack levels required when called:    4
  9497 ;; This function calls:
  9498 ;;		___ftpack
  9499 ;; This function is called by:
  9500 ;;		_printf
  9501 ;; This function uses a non-reentrant model
  9502 ;;
  9503                           
  9504                           	psect	text26
  9505  003A48                     __ptext26:
  9506                           	opt stack 0
  9507  003A48                     ___lltoft:
  9508                           	opt stack 24
  9509                           
  9510                           ;incstack = 0
  9511  003A48  0E8E               	movlw	142
  9512  003A4A  6E33               	movwf	___lltoft@exp,c
  9513  003A4C  D006               	goto	l6664
  9514  003A4E                     l6662:
  9515  003A4E  90D8               	bcf	status,0,c
  9516  003A50  322E               	rrcf	___lltoft@c+3,f,c
  9517  003A52  322D               	rrcf	___lltoft@c+2,f,c
  9518  003A54  322C               	rrcf	___lltoft@c+1,f,c
  9519  003A56  322B               	rrcf	___lltoft@c,f,c
  9520  003A58  2A33               	incf	___lltoft@exp,f,c
  9521  003A5A                     l6664:
  9522  003A5A  0E00               	movlw	0
  9523  003A5C  142B               	andwf	___lltoft@c,w,c
  9524  003A5E  6E2F               	movwf	??___lltoft& (0+255),c
  9525  003A60  0E00               	movlw	0
  9526  003A62  142C               	andwf	___lltoft@c+1,w,c
  9527  003A64  6E30               	movwf	(??___lltoft+1)& (0+255),c
  9528  003A66  0E00               	movlw	0
  9529  003A68  142D               	andwf	___lltoft@c+2,w,c
  9530  003A6A  6E31               	movwf	(??___lltoft+2)& (0+255),c
  9531  003A6C  0EFF               	movlw	255
  9532  003A6E  142E               	andwf	___lltoft@c+3,w,c
  9533  003A70  6E32               	movwf	(??___lltoft+3)& (0+255),c
  9534  003A72  502F               	movf	??___lltoft,w,c
  9535  003A74  1030               	iorwf	??___lltoft+1,w,c
  9536  003A76  1031               	iorwf	??___lltoft+2,w,c
  9537  003A78  1032               	iorwf	??___lltoft+3,w,c
  9538  003A7A  A4D8               	btfss	status,2,c
  9539  003A7C  D7E8               	goto	l6662
  9540  003A7E  C02B  F023         	movff	___lltoft@c,___ftpack@arg
  9541  003A82  C02C  F024         	movff	___lltoft@c+1,___ftpack@arg+1
  9542  003A86  C02D  F025         	movff	___lltoft@c+2,___ftpack@arg+2
  9543  003A8A  C033  F026         	movff	___lltoft@exp,___ftpack@exp
  9544  003A8E  0E00               	movlw	0
  9545  003A90  6E27               	movwf	___ftpack@sign,c
  9546  003A92  EC16  F019         	call	___ftpack	;wreg free
  9547  003A96  C023  F02B         	movff	?___ftpack,?___lltoft
  9548  003A9A  C024  F02C         	movff	?___ftpack+1,?___lltoft+1
  9549  003A9E  C025  F02D         	movff	?___ftpack+2,?___lltoft+2
  9550  003AA2  0012               	return	
  9551  003AA4                     __end_of___lltoft:
  9552                           	opt stack 0
  9553                           tblptru	equ	0xFF8
  9554                           tblptrh	equ	0xFF7
  9555                           tblptrl	equ	0xFF6
  9556                           tablat	equ	0xFF5
  9557                           prodh	equ	0xFF4
  9558                           prodl	equ	0xFF3
  9559                           postinc0	equ	0xFEE
  9560                           wreg	equ	0xFE8
  9561                           postdec1	equ	0xFE5
  9562                           fsr1l	equ	0xFE1
  9563                           indf2	equ	0xFDF
  9564                           postinc2	equ	0xFDE
  9565                           postdec2	equ	0xFDD
  9566                           fsr2h	equ	0xFDA
  9567                           fsr2l	equ	0xFD9
  9568                           status	equ	0xFD8
  9569                           
  9570 ;; *************** function ___llmod *****************
  9571 ;; Defined at:
  9572 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  9573 ;; Parameters:    Size  Location     Type
  9574 ;;  dividend        4   47[COMRAM] unsigned long 
  9575 ;;  divisor         4   51[COMRAM] unsigned long 
  9576 ;; Auto vars:     Size  Location     Type
  9577 ;;  counter         1   55[COMRAM] unsigned char 
  9578 ;; Return value:  Size  Location     Type
  9579 ;;                  4   47[COMRAM] unsigned long 
  9580 ;; Registers used:
  9581 ;;		wreg, status,2, status,0
  9582 ;; Tracked objects:
  9583 ;;		On entry : 0/0
  9584 ;;		On exit  : 0/0
  9585 ;;		Unchanged: 0/0
  9586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9587 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9588 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9590 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9591 ;;Total ram usage:        9 bytes
  9592 ;; Hardware stack levels used:    1
  9593 ;; Hardware stack levels required when called:    3
  9594 ;; This function calls:
  9595 ;;		Nothing
  9596 ;; This function is called by:
  9597 ;;		_printf
  9598 ;; This function uses a non-reentrant model
  9599 ;;
  9600                           
  9601                           	psect	text27
  9602  0038BC                     __ptext27:
  9603                           	opt stack 0
  9604  0038BC                     ___llmod:
  9605                           	opt stack 25
  9606                           
  9607                           ;incstack = 0
  9608  0038BC  5034               	movf	___llmod@divisor,w,c
  9609  0038BE  1035               	iorwf	___llmod@divisor+1,w,c
  9610  0038C0  1036               	iorwf	___llmod@divisor+2,w,c
  9611  0038C2  1037               	iorwf	___llmod@divisor+3,w,c
  9612  0038C4  B4D8               	btfsc	status,2,c
  9613  0038C6  D024               	goto	l1276
  9614  0038C8  0E01               	movlw	1
  9615  0038CA  6E38               	movwf	___llmod@counter,c
  9616  0038CC  D006               	goto	l6650
  9617  0038CE                     l6648:
  9618  0038CE  90D8               	bcf	status,0,c
  9619  0038D0  3634               	rlcf	___llmod@divisor,f,c
  9620  0038D2  3635               	rlcf	___llmod@divisor+1,f,c
  9621  0038D4  3636               	rlcf	___llmod@divisor+2,f,c
  9622  0038D6  3637               	rlcf	___llmod@divisor+3,f,c
  9623  0038D8  2A38               	incf	___llmod@counter,f,c
  9624  0038DA                     l6650:
  9625  0038DA  AE37               	btfss	___llmod@divisor+3,7,c
  9626  0038DC  D7F8               	goto	l6648
  9627  0038DE                     l6652:
  9628  0038DE  5034               	movf	___llmod@divisor,w,c
  9629  0038E0  5C30               	subwf	___llmod@dividend,w,c
  9630  0038E2  5035               	movf	___llmod@divisor+1,w,c
  9631  0038E4  5831               	subwfb	___llmod@dividend+1,w,c
  9632  0038E6  5036               	movf	___llmod@divisor+2,w,c
  9633  0038E8  5832               	subwfb	___llmod@dividend+2,w,c
  9634  0038EA  5037               	movf	___llmod@divisor+3,w,c
  9635  0038EC  5833               	subwfb	___llmod@dividend+3,w,c
  9636  0038EE  A0D8               	btfss	status,0,c
  9637  0038F0  D008               	goto	l6656
  9638  0038F2  5034               	movf	___llmod@divisor,w,c
  9639  0038F4  5E30               	subwf	___llmod@dividend,f,c
  9640  0038F6  5035               	movf	___llmod@divisor+1,w,c
  9641  0038F8  5A31               	subwfb	___llmod@dividend+1,f,c
  9642  0038FA  5036               	movf	___llmod@divisor+2,w,c
  9643  0038FC  5A32               	subwfb	___llmod@dividend+2,f,c
  9644  0038FE  5037               	movf	___llmod@divisor+3,w,c
  9645  003900  5A33               	subwfb	___llmod@dividend+3,f,c
  9646  003902                     l6656:
  9647  003902  90D8               	bcf	status,0,c
  9648  003904  3237               	rrcf	___llmod@divisor+3,f,c
  9649  003906  3236               	rrcf	___llmod@divisor+2,f,c
  9650  003908  3235               	rrcf	___llmod@divisor+1,f,c
  9651  00390A  3234               	rrcf	___llmod@divisor,f,c
  9652  00390C  2E38               	decfsz	___llmod@counter,f,c
  9653  00390E  D7E7               	goto	l6652
  9654  003910                     l1276:
  9655  003910  C030  F030         	movff	___llmod@dividend,?___llmod
  9656  003914  C031  F031         	movff	___llmod@dividend+1,?___llmod+1
  9657  003918  C032  F032         	movff	___llmod@dividend+2,?___llmod+2
  9658  00391C  C033  F033         	movff	___llmod@dividend+3,?___llmod+3
  9659  003920  0012               	return		;funcret
  9660  003922                     __end_of___llmod:
  9661                           	opt stack 0
  9662                           tblptru	equ	0xFF8
  9663                           tblptrh	equ	0xFF7
  9664                           tblptrl	equ	0xFF6
  9665                           tablat	equ	0xFF5
  9666                           prodh	equ	0xFF4
  9667                           prodl	equ	0xFF3
  9668                           postinc0	equ	0xFEE
  9669                           wreg	equ	0xFE8
  9670                           postdec1	equ	0xFE5
  9671                           fsr1l	equ	0xFE1
  9672                           indf2	equ	0xFDF
  9673                           postinc2	equ	0xFDE
  9674                           postdec2	equ	0xFDD
  9675                           fsr2h	equ	0xFDA
  9676                           fsr2l	equ	0xFD9
  9677                           status	equ	0xFD8
  9678                           
  9679 ;; *************** function ___ftsub *****************
  9680 ;; Defined at:
  9681 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  9682 ;; Parameters:    Size  Location     Type
  9683 ;;  f1              3   46[BANK0 ] float 
  9684 ;;  f2              3   49[BANK0 ] float 
  9685 ;; Auto vars:     Size  Location     Type
  9686 ;;		None
  9687 ;; Return value:  Size  Location     Type
  9688 ;;                  3   46[BANK0 ] float 
  9689 ;; Registers used:
  9690 ;;		wreg, status,2, status,0, cstack
  9691 ;; Tracked objects:
  9692 ;;		On entry : 0/0
  9693 ;;		On exit  : 0/0
  9694 ;;		Unchanged: 0/0
  9695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9696 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9699 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9700 ;;Total ram usage:        6 bytes
  9701 ;; Hardware stack levels used:    1
  9702 ;; Hardware stack levels required when called:    5
  9703 ;; This function calls:
  9704 ;;		___ftadd
  9705 ;; This function is called by:
  9706 ;;		_sortBattery
  9707 ;;		_printf
  9708 ;; This function uses a non-reentrant model
  9709 ;;
  9710                           
  9711                           	psect	text28
  9712  003BA4                     __ptext28:
  9713                           	opt stack 0
  9714  003BA4                     ___ftsub:
  9715                           	opt stack 23
  9716                           
  9717                           ;incstack = 0
  9718  003BA4  0100               	movlb	0	; () banked
  9719  003BA6  51B1               	movf	___ftsub@f2& (0+255),w,b
  9720  003BA8  0100               	movlb	0	; () banked
  9721  003BAA  11B2               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  9722  003BAC  0100               	movlb	0	; () banked
  9723  003BAE  11B3               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  9724  003BB0  B4D8               	btfsc	status,2,c
  9725  003BB2  D009               	goto	l6560
  9726                           
  9727                           ; BSR set to: 0
  9728  003BB4  0E00               	movlw	0
  9729  003BB6  0100               	movlb	0	; () banked
  9730  003BB8  1BB1               	xorwf	___ftsub@f2& (0+255),f,b
  9731  003BBA  0E00               	movlw	0
  9732  003BBC  0100               	movlb	0	; () banked
  9733  003BBE  1BB2               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  9734  003BC0  0E80               	movlw	128
  9735  003BC2  0100               	movlb	0	; () banked
  9736  003BC4  1BB3               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  9737  003BC6                     l6560:
  9738                           
  9739                           ; BSR set to: 0
  9740  003BC6  C0AE  F0A2         	movff	___ftsub@f1,___ftadd@f1
  9741  003BCA  C0AF  F0A3         	movff	___ftsub@f1+1,___ftadd@f1+1
  9742  003BCE  C0B0  F0A4         	movff	___ftsub@f1+2,___ftadd@f1+2
  9743  003BD2  C0B1  F0A5         	movff	___ftsub@f2,___ftadd@f2
  9744  003BD6  C0B2  F0A6         	movff	___ftsub@f2+1,___ftadd@f2+1
  9745  003BDA  C0B3  F0A7         	movff	___ftsub@f2+2,___ftadd@f2+2
  9746  003BDE  EC6B  F00D         	call	___ftadd	;wreg free
  9747  003BE2  C0A2  F0AE         	movff	?___ftadd,?___ftsub
  9748  003BE6  C0A3  F0AF         	movff	?___ftadd+1,?___ftsub+1
  9749  003BEA  C0A4  F0B0         	movff	?___ftadd+2,?___ftsub+2
  9750  003BEE  0012               	return	
  9751  003BF0                     __end_of___ftsub:
  9752                           	opt stack 0
  9753                           tblptru	equ	0xFF8
  9754                           tblptrh	equ	0xFF7
  9755                           tblptrl	equ	0xFF6
  9756                           tablat	equ	0xFF5
  9757                           prodh	equ	0xFF4
  9758                           prodl	equ	0xFF3
  9759                           postinc0	equ	0xFEE
  9760                           wreg	equ	0xFE8
  9761                           postdec1	equ	0xFE5
  9762                           fsr1l	equ	0xFE1
  9763                           indf2	equ	0xFDF
  9764                           postinc2	equ	0xFDE
  9765                           postdec2	equ	0xFDD
  9766                           fsr2h	equ	0xFDA
  9767                           fsr2l	equ	0xFD9
  9768                           status	equ	0xFD8
  9769                           
  9770 ;; *************** function ___ftneg *****************
  9771 ;; Defined at:
  9772 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  9773 ;; Parameters:    Size  Location     Type
  9774 ;;  f1              3   34[COMRAM] float 
  9775 ;; Auto vars:     Size  Location     Type
  9776 ;;		None
  9777 ;; Return value:  Size  Location     Type
  9778 ;;                  3   34[COMRAM] float 
  9779 ;; Registers used:
  9780 ;;		wreg, status,2, status,0
  9781 ;; Tracked objects:
  9782 ;;		On entry : 0/0
  9783 ;;		On exit  : 0/0
  9784 ;;		Unchanged: 0/0
  9785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9786 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9789 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9790 ;;Total ram usage:        3 bytes
  9791 ;; Hardware stack levels used:    1
  9792 ;; Hardware stack levels required when called:    3
  9793 ;; This function calls:
  9794 ;;		Nothing
  9795 ;; This function is called by:
  9796 ;;		_printf
  9797 ;; This function uses a non-reentrant model
  9798 ;;
  9799                           
  9800                           	psect	text29
  9801  003E6A                     __ptext29:
  9802                           	opt stack 0
  9803  003E6A                     ___ftneg:
  9804                           	opt stack 25
  9805                           
  9806                           ;incstack = 0
  9807  003E6A  5023               	movf	___ftneg@f1,w,c
  9808  003E6C  1024               	iorwf	___ftneg@f1+1,w,c
  9809  003E6E  1025               	iorwf	___ftneg@f1+2,w,c
  9810  003E70  B4D8               	btfsc	status,2,c
  9811  003E72  D006               	goto	l1216
  9812  003E74  0E00               	movlw	0
  9813  003E76  1A23               	xorwf	___ftneg@f1,f,c
  9814  003E78  0E00               	movlw	0
  9815  003E7A  1A24               	xorwf	___ftneg@f1+1,f,c
  9816  003E7C  0E80               	movlw	128
  9817  003E7E  1A25               	xorwf	___ftneg@f1+2,f,c
  9818  003E80                     l1216:
  9819  003E80  C023  F023         	movff	___ftneg@f1,?___ftneg
  9820  003E84  C024  F024         	movff	___ftneg@f1+1,?___ftneg+1
  9821  003E88  C025  F025         	movff	___ftneg@f1+2,?___ftneg+2
  9822  003E8C  0012               	return		;funcret
  9823  003E8E                     __end_of___ftneg:
  9824                           	opt stack 0
  9825                           tblptru	equ	0xFF8
  9826                           tblptrh	equ	0xFF7
  9827                           tblptrl	equ	0xFF6
  9828                           tablat	equ	0xFF5
  9829                           prodh	equ	0xFF4
  9830                           prodl	equ	0xFF3
  9831                           postinc0	equ	0xFEE
  9832                           wreg	equ	0xFE8
  9833                           postdec1	equ	0xFE5
  9834                           fsr1l	equ	0xFE1
  9835                           indf2	equ	0xFDF
  9836                           postinc2	equ	0xFDE
  9837                           postdec2	equ	0xFDD
  9838                           fsr2h	equ	0xFDA
  9839                           fsr2l	equ	0xFD9
  9840                           status	equ	0xFD8
  9841                           
  9842 ;; *************** function ___ftge *****************
  9843 ;; Defined at:
  9844 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  9845 ;; Parameters:    Size  Location     Type
  9846 ;;  ff1             3   46[COMRAM] float 
  9847 ;;  ff2             3   49[COMRAM] float 
  9848 ;; Auto vars:     Size  Location     Type
  9849 ;;		None
  9850 ;; Return value:  Size  Location     Type
  9851 ;;		None               void
  9852 ;; Registers used:
  9853 ;;		wreg, status,2, status,0
  9854 ;; Tracked objects:
  9855 ;;		On entry : 0/0
  9856 ;;		On exit  : 0/0
  9857 ;;		Unchanged: 0/0
  9858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9859 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9861 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9862 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9863 ;;Total ram usage:        9 bytes
  9864 ;; Hardware stack levels used:    1
  9865 ;; Hardware stack levels required when called:    3
  9866 ;; This function calls:
  9867 ;;		Nothing
  9868 ;; This function is called by:
  9869 ;;		_sortBattery
  9870 ;;		_printf
  9871 ;; This function uses a non-reentrant model
  9872 ;;
  9873                           
  9874                           	psect	text30
  9875  0034C0                     __ptext30:
  9876                           	opt stack 0
  9877  0034C0                     ___ftge:
  9878                           	opt stack 25
  9879                           
  9880                           ;incstack = 0
  9881  0034C0  AE31               	btfss	___ftge@ff1+2,7,c
  9882  0034C2  D016               	goto	l6580
  9883  0034C4  C02F  F035         	movff	___ftge@ff1,??___ftge
  9884  0034C8  C030  F036         	movff	___ftge@ff1+1,??___ftge+1
  9885  0034CC  C031  F037         	movff	___ftge@ff1+2,??___ftge+2
  9886  0034D0  1E35               	comf	??___ftge,f,c
  9887  0034D2  1E36               	comf	??___ftge+1,f,c
  9888  0034D4  1E37               	comf	??___ftge+2,f,c
  9889  0034D6  2A35               	incf	??___ftge,f,c
  9890  0034D8  0E00               	movlw	0
  9891  0034DA  2236               	addwfc	??___ftge+1,f,c
  9892  0034DC  2237               	addwfc	??___ftge+2,f,c
  9893  0034DE  0E00               	movlw	0
  9894  0034E0  2435               	addwf	??___ftge,w,c
  9895  0034E2  6E2F               	movwf	___ftge@ff1,c
  9896  0034E4  0E00               	movlw	0
  9897  0034E6  2036               	addwfc	??___ftge+1,w,c
  9898  0034E8  6E30               	movwf	___ftge@ff1+1,c
  9899  0034EA  0E80               	movlw	128
  9900  0034EC  2037               	addwfc	??___ftge+2,w,c
  9901  0034EE  6E31               	movwf	___ftge@ff1+2,c
  9902  0034F0                     l6580:
  9903  0034F0  AE34               	btfss	___ftge@ff2+2,7,c
  9904  0034F2  D016               	goto	l6584
  9905  0034F4  C032  F035         	movff	___ftge@ff2,??___ftge
  9906  0034F8  C033  F036         	movff	___ftge@ff2+1,??___ftge+1
  9907  0034FC  C034  F037         	movff	___ftge@ff2+2,??___ftge+2
  9908  003500  1E35               	comf	??___ftge,f,c
  9909  003502  1E36               	comf	??___ftge+1,f,c
  9910  003504  1E37               	comf	??___ftge+2,f,c
  9911  003506  2A35               	incf	??___ftge,f,c
  9912  003508  0E00               	movlw	0
  9913  00350A  2236               	addwfc	??___ftge+1,f,c
  9914  00350C  2237               	addwfc	??___ftge+2,f,c
  9915  00350E  0E00               	movlw	0
  9916  003510  2435               	addwf	??___ftge,w,c
  9917  003512  6E32               	movwf	___ftge@ff2,c
  9918  003514  0E00               	movlw	0
  9919  003516  2036               	addwfc	??___ftge+1,w,c
  9920  003518  6E33               	movwf	___ftge@ff2+1,c
  9921  00351A  0E80               	movlw	128
  9922  00351C  2037               	addwfc	??___ftge+2,w,c
  9923  00351E  6E34               	movwf	___ftge@ff2+2,c
  9924  003520                     l6584:
  9925  003520  0E00               	movlw	0
  9926  003522  1A2F               	xorwf	___ftge@ff1,f,c
  9927  003524  0E00               	movlw	0
  9928  003526  1A30               	xorwf	___ftge@ff1+1,f,c
  9929  003528  0E80               	movlw	128
  9930  00352A  1A31               	xorwf	___ftge@ff1+2,f,c
  9931  00352C  0E00               	movlw	0
  9932  00352E  1A32               	xorwf	___ftge@ff2,f,c
  9933  003530  0E00               	movlw	0
  9934  003532  1A33               	xorwf	___ftge@ff2+1,f,c
  9935  003534  0E80               	movlw	128
  9936  003536  1A34               	xorwf	___ftge@ff2+2,f,c
  9937  003538  5032               	movf	___ftge@ff2,w,c
  9938  00353A  5C2F               	subwf	___ftge@ff1,w,c
  9939  00353C  5033               	movf	___ftge@ff2+1,w,c
  9940  00353E  5830               	subwfb	___ftge@ff1+1,w,c
  9941  003540  5034               	movf	___ftge@ff2+2,w,c
  9942  003542  5831               	subwfb	___ftge@ff1+2,w,c
  9943  003544  B0D8               	btfsc	status,0,c
  9944  003546  D002               	goto	l6590
  9945  003548  90D8               	bcf	status,0,c
  9946  00354A  0012               	return	
  9947  00354C                     l6590:
  9948  00354C  80D8               	bsf	status,0,c
  9949  00354E  0012               	return	
  9950  003550                     __end_of___ftge:
  9951                           	opt stack 0
  9952                           tblptru	equ	0xFF8
  9953                           tblptrh	equ	0xFF7
  9954                           tblptrl	equ	0xFF6
  9955                           tablat	equ	0xFF5
  9956                           prodh	equ	0xFF4
  9957                           prodl	equ	0xFF3
  9958                           postinc0	equ	0xFEE
  9959                           wreg	equ	0xFE8
  9960                           postdec1	equ	0xFE5
  9961                           fsr1l	equ	0xFE1
  9962                           indf2	equ	0xFDF
  9963                           postinc2	equ	0xFDE
  9964                           postdec2	equ	0xFDD
  9965                           fsr2h	equ	0xFDA
  9966                           fsr2l	equ	0xFD9
  9967                           status	equ	0xFD8
  9968                           
  9969 ;; *************** function _lcdHome *****************
  9970 ;; Defined at:
  9971 ;;		line 70 in file "lcd.c"
  9972 ;; Parameters:    Size  Location     Type
  9973 ;;		None
  9974 ;; Auto vars:     Size  Location     Type
  9975 ;;		None
  9976 ;; Return value:  Size  Location     Type
  9977 ;;                  2   24[None  ] int 
  9978 ;; Registers used:
  9979 ;;		wreg, status,2, status,0, cstack
  9980 ;; Tracked objects:
  9981 ;;		On entry : 0/0
  9982 ;;		On exit  : 0/0
  9983 ;;		Unchanged: 0/0
  9984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9988 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9989 ;;Total ram usage:        0 bytes
  9990 ;; Hardware stack levels used:    1
  9991 ;; Hardware stack levels required when called:    5
  9992 ;; This function calls:
  9993 ;;		_lcdInst
  9994 ;; This function is called by:
  9995 ;;		_main
  9996 ;;		_showDateTime
  9997 ;; This function uses a non-reentrant model
  9998 ;;
  9999                           
 10000                           	psect	text31
 10001  003FA6                     __ptext31:
 10002                           	opt stack 0
 10003  003FA6                     _lcdHome:
 10004                           	opt stack 23
 10005                           
 10006                           ;lcd.c: 71: lcdInst(0b11000000);
 10007                           
 10008                           ;incstack = 0
 10009  003FA6  0EC0               	movlw	192
 10010  003FA8  EC58  F01F         	call	_lcdInst
 10011  003FAC  0012               	return		;funcret
 10012  003FAE                     __end_of_lcdHome:
 10013                           	opt stack 0
 10014                           tblptru	equ	0xFF8
 10015                           tblptrh	equ	0xFF7
 10016                           tblptrl	equ	0xFF6
 10017                           tablat	equ	0xFF5
 10018                           prodh	equ	0xFF4
 10019                           prodl	equ	0xFF3
 10020                           postinc0	equ	0xFEE
 10021                           wreg	equ	0xFE8
 10022                           postdec1	equ	0xFE5
 10023                           fsr1l	equ	0xFE1
 10024                           indf2	equ	0xFDF
 10025                           postinc2	equ	0xFDE
 10026                           postdec2	equ	0xFDD
 10027                           fsr2h	equ	0xFDA
 10028                           fsr2l	equ	0xFD9
 10029                           status	equ	0xFD8
 10030                           
 10031 ;; *************** function _lcdClear *****************
 10032 ;; Defined at:
 10033 ;;		line 74 in file "lcd.c"
 10034 ;; Parameters:    Size  Location     Type
 10035 ;;		None
 10036 ;; Auto vars:     Size  Location     Type
 10037 ;;		None
 10038 ;; Return value:  Size  Location     Type
 10039 ;;                  1    wreg      void 
 10040 ;; Registers used:
 10041 ;;		wreg, status,2, status,0, cstack
 10042 ;; Tracked objects:
 10043 ;;		On entry : 0/0
 10044 ;;		On exit  : 0/0
 10045 ;;		Unchanged: 0/0
 10046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10050 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10051 ;;Total ram usage:        0 bytes
 10052 ;; Hardware stack levels used:    1
 10053 ;; Hardware stack levels required when called:    5
 10054 ;; This function calls:
 10055 ;;		_lcdInst
 10056 ;; This function is called by:
 10057 ;;		_main
 10058 ;;		_sortBattery
 10059 ;;		_showDateTime
 10060 ;;		_showMainMenu
 10061 ;;		_showRunSelect
 10062 ;;		_showRunMenu
 10063 ;;		_showRunTime
 10064 ;;		_showRunStats
 10065 ;;		_showErrorMessage
 10066 ;;		_debug
 10067 ;;		_pause
 10068 ;; This function uses a non-reentrant model
 10069 ;;
 10070                           
 10071                           	psect	text32
 10072  003FAE                     __ptext32:
 10073                           	opt stack 0
 10074  003FAE                     _lcdClear:
 10075                           	opt stack 24
 10076                           
 10077                           ;lcd.c: 75: lcdInst(0b00000001);
 10078                           
 10079                           ;incstack = 0
 10080  003FAE  0E01               	movlw	1
 10081  003FB0  EC58  F01F         	call	_lcdInst
 10082  003FB4  0012               	return		;funcret
 10083  003FB6                     __end_of_lcdClear:
 10084                           	opt stack 0
 10085                           tblptru	equ	0xFF8
 10086                           tblptrh	equ	0xFF7
 10087                           tblptrl	equ	0xFF6
 10088                           tablat	equ	0xFF5
 10089                           prodh	equ	0xFF4
 10090                           prodl	equ	0xFF3
 10091                           postinc0	equ	0xFEE
 10092                           wreg	equ	0xFE8
 10093                           postdec1	equ	0xFE5
 10094                           fsr1l	equ	0xFE1
 10095                           indf2	equ	0xFDF
 10096                           postinc2	equ	0xFDE
 10097                           postdec2	equ	0xFDD
 10098                           fsr2h	equ	0xFDA
 10099                           fsr2l	equ	0xFD9
 10100                           status	equ	0xFD8
 10101                           
 10102 ;; *************** function _keyPressed *****************
 10103 ;; Defined at:
 10104 ;;		line 43 in file "keypad.c"
 10105 ;; Parameters:    Size  Location     Type
 10106 ;;		None
 10107 ;; Auto vars:     Size  Location     Type
 10108 ;;  key             1   34[COMRAM] unsigned char 
 10109 ;; Return value:  Size  Location     Type
 10110 ;;                  1    wreg      unsigned char 
 10111 ;; Registers used:
 10112 ;;		wreg, status,2
 10113 ;; Tracked objects:
 10114 ;;		On entry : 0/0
 10115 ;;		On exit  : 0/0
 10116 ;;		Unchanged: 0/0
 10117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10119 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10121 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10122 ;;Total ram usage:        1 bytes
 10123 ;; Hardware stack levels used:    1
 10124 ;; Hardware stack levels required when called:    3
 10125 ;; This function calls:
 10126 ;;		Nothing
 10127 ;; This function is called by:
 10128 ;;		_showDateTime
 10129 ;; This function uses a non-reentrant model
 10130 ;;
 10131                           
 10132                           	psect	text33
 10133  003F88                     __ptext33:
 10134                           	opt stack 0
 10135  003F88                     _keyPressed:
 10136                           	opt stack 25
 10137                           
 10138                           ;keypad.c: 44: char key = lastKey;
 10139                           
 10140                           ;incstack = 0
 10141  003F88  C05C  F023         	movff	_lastKey,keyPressed@key
 10142                           
 10143                           ;keypad.c: 45: lastKey = 0;
 10144  003F8C  0E00               	movlw	0
 10145  003F8E  6E5C               	movwf	_lastKey,c
 10146                           
 10147                           ;keypad.c: 46: return key;
 10148  003F90  5023               	movf	keyPressed@key,w,c
 10149  003F92  0012               	return	
 10150  003F94                     __end_of_keyPressed:
 10151                           	opt stack 0
 10152                           tblptru	equ	0xFF8
 10153                           tblptrh	equ	0xFF7
 10154                           tblptrl	equ	0xFF6
 10155                           tablat	equ	0xFF5
 10156                           prodh	equ	0xFF4
 10157                           prodl	equ	0xFF3
 10158                           postinc0	equ	0xFEE
 10159                           wreg	equ	0xFE8
 10160                           postdec1	equ	0xFE5
 10161                           fsr1l	equ	0xFE1
 10162                           indf2	equ	0xFDF
 10163                           postinc2	equ	0xFDE
 10164                           postdec2	equ	0xFDD
 10165                           fsr2h	equ	0xFDA
 10166                           fsr2l	equ	0xFD9
 10167                           status	equ	0xFD8
 10168                           
 10169 ;; *************** function _initRTC *****************
 10170 ;; Defined at:
 10171 ;;		line 19 in file "RTC.c"
 10172 ;; Parameters:    Size  Location     Type
 10173 ;;		None
 10174 ;; Auto vars:     Size  Location     Type
 10175 ;;		None
 10176 ;; Return value:  Size  Location     Type
 10177 ;;                  1    wreg      void 
 10178 ;; Registers used:
 10179 ;;		wreg, status,2, status,0, cstack
 10180 ;; Tracked objects:
 10181 ;;		On entry : 0/0
 10182 ;;		On exit  : 0/0
 10183 ;;		Unchanged: 0/0
 10184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10189 ;;Total ram usage:        0 bytes
 10190 ;; Hardware stack levels used:    1
 10191 ;; Hardware stack levels required when called:    5
 10192 ;; This function calls:
 10193 ;;		_I2C_Master_Init
 10194 ;; This function is called by:
 10195 ;;		_showInterface
 10196 ;;		_showDateTime
 10197 ;; This function uses a non-reentrant model
 10198 ;;
 10199                           
 10200                           	psect	text34
 10201  003F60                     __ptext34:
 10202                           	opt stack 0
 10203  003F60                     _initRTC:
 10204                           	opt stack 23
 10205                           
 10206                           ;RTC.c: 20: I2C_Master_Init(10000);
 10207                           
 10208                           ;incstack = 0
 10209  003F60  0E10               	movlw	16
 10210  003F62  6E30               	movwf	I2C_Master_Init@c,c
 10211  003F64  0E27               	movlw	39
 10212  003F66  6E31               	movwf	I2C_Master_Init@c+1,c
 10213  003F68  0E00               	movlw	0
 10214  003F6A  6E32               	movwf	I2C_Master_Init@c+2,c
 10215  003F6C  0E00               	movlw	0
 10216  003F6E  6E33               	movwf	I2C_Master_Init@c+3,c
 10217  003F70  EC52  F01D         	call	_I2C_Master_Init	;wreg free
 10218  003F74  0012               	return		;funcret
 10219  003F76                     __end_of_initRTC:
 10220                           	opt stack 0
 10221                           tblptru	equ	0xFF8
 10222                           tblptrh	equ	0xFF7
 10223                           tblptrl	equ	0xFF6
 10224                           tablat	equ	0xFF5
 10225                           prodh	equ	0xFF4
 10226                           prodl	equ	0xFF3
 10227                           postinc0	equ	0xFEE
 10228                           wreg	equ	0xFE8
 10229                           postdec1	equ	0xFE5
 10230                           fsr1l	equ	0xFE1
 10231                           indf2	equ	0xFDF
 10232                           postinc2	equ	0xFDE
 10233                           postdec2	equ	0xFDD
 10234                           fsr2h	equ	0xFDA
 10235                           fsr2l	equ	0xFD9
 10236                           status	equ	0xFD8
 10237                           
 10238 ;; *************** function _I2C_Master_Init *****************
 10239 ;; Defined at:
 10240 ;;		line 13 in file "I2C.c"
 10241 ;; Parameters:    Size  Location     Type
 10242 ;;  c               4   47[COMRAM] const unsigned long 
 10243 ;; Auto vars:     Size  Location     Type
 10244 ;;		None
 10245 ;; Return value:  Size  Location     Type
 10246 ;;                  1    wreg      void 
 10247 ;; Registers used:
 10248 ;;		wreg, status,2, status,0, cstack
 10249 ;; Tracked objects:
 10250 ;;		On entry : 0/0
 10251 ;;		On exit  : 0/0
 10252 ;;		Unchanged: 0/0
 10253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10254 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10256 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10257 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10258 ;;Total ram usage:        8 bytes
 10259 ;; Hardware stack levels used:    1
 10260 ;; Hardware stack levels required when called:    4
 10261 ;; This function calls:
 10262 ;;		___lldiv
 10263 ;; This function is called by:
 10264 ;;		_initRTC
 10265 ;;		_testFrequency
 10266 ;; This function uses a non-reentrant model
 10267 ;;
 10268                           
 10269                           	psect	text35
 10270  003AA4                     __ptext35:
 10271                           	opt stack 0
 10272  003AA4                     _I2C_Master_Init:
 10273                           	opt stack 23
 10274                           
 10275                           ;I2C.c: 16: SSPSTAT = 0b00000000;
 10276                           
 10277                           ;incstack = 0
 10278  003AA4  0E00               	movlw	0
 10279  003AA6  6EC7               	movwf	4039,c	;volatile
 10280                           
 10281                           ;I2C.c: 17: SSPCON1 = 0b00101000;
 10282  003AA8  0E28               	movlw	40
 10283  003AAA  6EC6               	movwf	4038,c	;volatile
 10284                           
 10285                           ;I2C.c: 18: SSPCON2 = 0b00000000;
 10286  003AAC  0E00               	movlw	0
 10287  003AAE  6EC5               	movwf	4037,c	;volatile
 10288                           
 10289                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
 10290  003AB0  0E80               	movlw	128
 10291  003AB2  6E23               	movwf	___lldiv@dividend,c
 10292  003AB4  0E96               	movlw	150
 10293  003AB6  6E24               	movwf	___lldiv@dividend+1,c
 10294  003AB8  0E98               	movlw	152
 10295  003ABA  6E25               	movwf	___lldiv@dividend+2,c
 10296  003ABC  0E00               	movlw	0
 10297  003ABE  6E26               	movwf	___lldiv@dividend+3,c
 10298  003AC0  C030  F034         	movff	I2C_Master_Init@c,??_I2C_Master_Init
 10299  003AC4  C031  F035         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
 10300  003AC8  C032  F036         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
 10301  003ACC  C033  F037         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
 10302  003AD0  0E02               	movlw	2
 10303  003AD2                     u6075:
 10304  003AD2  90D8               	bcf	status,0,c
 10305  003AD4  3634               	rlcf	??_I2C_Master_Init,f,c
 10306  003AD6  3635               	rlcf	??_I2C_Master_Init+1,f,c
 10307  003AD8  3636               	rlcf	??_I2C_Master_Init+2,f,c
 10308  003ADA  3637               	rlcf	??_I2C_Master_Init+3,f,c
 10309  003ADC  2EE8               	decfsz	wreg,f,c
 10310  003ADE  D7F9               	goto	u6075
 10311  003AE0  C034  F027         	movff	??_I2C_Master_Init,___lldiv@divisor
 10312  003AE4  C035  F028         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 10313  003AE8  C036  F029         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 10314  003AEC  C037  F02A         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 10315  003AF0  EC30  F01B         	call	___lldiv	;wreg free
 10316  003AF4  0423               	decf	?___lldiv,w,c
 10317  003AF6  6EC8               	movwf	4040,c	;volatile
 10318                           
 10319                           ;I2C.c: 20: TRISC3 = 1;
 10320  003AF8  8694               	bsf	3988,3,c	;volatile
 10321                           
 10322                           ;I2C.c: 21: TRISC4 = 1;
 10323  003AFA  8894               	bsf	3988,4,c	;volatile
 10324  003AFC  0012               	return		;funcret
 10325  003AFE                     __end_of_I2C_Master_Init:
 10326                           	opt stack 0
 10327                           tblptru	equ	0xFF8
 10328                           tblptrh	equ	0xFF7
 10329                           tblptrl	equ	0xFF6
 10330                           tablat	equ	0xFF5
 10331                           prodh	equ	0xFF4
 10332                           prodl	equ	0xFF3
 10333                           postinc0	equ	0xFEE
 10334                           wreg	equ	0xFE8
 10335                           postdec1	equ	0xFE5
 10336                           fsr1l	equ	0xFE1
 10337                           indf2	equ	0xFDF
 10338                           postinc2	equ	0xFDE
 10339                           postdec2	equ	0xFDD
 10340                           fsr2h	equ	0xFDA
 10341                           fsr2l	equ	0xFD9
 10342                           status	equ	0xFD8
 10343                           
 10344 ;; *************** function ___lldiv *****************
 10345 ;; Defined at:
 10346 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
 10347 ;; Parameters:    Size  Location     Type
 10348 ;;  dividend        4   34[COMRAM] unsigned long 
 10349 ;;  divisor         4   38[COMRAM] unsigned long 
 10350 ;; Auto vars:     Size  Location     Type
 10351 ;;  quotient        4   42[COMRAM] unsigned long 
 10352 ;;  counter         1   46[COMRAM] unsigned char 
 10353 ;; Return value:  Size  Location     Type
 10354 ;;                  4   34[COMRAM] unsigned long 
 10355 ;; Registers used:
 10356 ;;		wreg, status,2, status,0
 10357 ;; Tracked objects:
 10358 ;;		On entry : 0/0
 10359 ;;		On exit  : 0/0
 10360 ;;		Unchanged: 0/0
 10361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10362 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10363 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10365 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10366 ;;Total ram usage:       13 bytes
 10367 ;; Hardware stack levels used:    1
 10368 ;; Hardware stack levels required when called:    3
 10369 ;; This function calls:
 10370 ;;		Nothing
 10371 ;; This function is called by:
 10372 ;;		_I2C_Master_Init
 10373 ;;		_printf
 10374 ;; This function uses a non-reentrant model
 10375 ;;
 10376                           
 10377                           	psect	text36
 10378  003660                     __ptext36:
 10379                           	opt stack 0
 10380  003660                     ___lldiv:
 10381                           	opt stack 25
 10382                           
 10383                           ;incstack = 0
 10384  003660  0E00               	movlw	0
 10385  003662  6E2B               	movwf	___lldiv@quotient,c
 10386  003664  0E00               	movlw	0
 10387  003666  6E2C               	movwf	___lldiv@quotient+1,c
 10388  003668  0E00               	movlw	0
 10389  00366A  6E2D               	movwf	___lldiv@quotient+2,c
 10390  00366C  0E00               	movlw	0
 10391  00366E  6E2E               	movwf	___lldiv@quotient+3,c
 10392  003670  5027               	movf	___lldiv@divisor,w,c
 10393  003672  1028               	iorwf	___lldiv@divisor+1,w,c
 10394  003674  1029               	iorwf	___lldiv@divisor+2,w,c
 10395  003676  102A               	iorwf	___lldiv@divisor+3,w,c
 10396  003678  B4D8               	btfsc	status,2,c
 10397  00367A  D02A               	goto	l1266
 10398  00367C  0E01               	movlw	1
 10399  00367E  6E2F               	movwf	___lldiv@counter,c
 10400  003680  D006               	goto	l6250
 10401  003682                     l6248:
 10402  003682  90D8               	bcf	status,0,c
 10403  003684  3627               	rlcf	___lldiv@divisor,f,c
 10404  003686  3628               	rlcf	___lldiv@divisor+1,f,c
 10405  003688  3629               	rlcf	___lldiv@divisor+2,f,c
 10406  00368A  362A               	rlcf	___lldiv@divisor+3,f,c
 10407  00368C  2A2F               	incf	___lldiv@counter,f,c
 10408  00368E                     l6250:
 10409  00368E  AE2A               	btfss	___lldiv@divisor+3,7,c
 10410  003690  D7F8               	goto	l6248
 10411  003692                     l6252:
 10412  003692  90D8               	bcf	status,0,c
 10413  003694  362B               	rlcf	___lldiv@quotient,f,c
 10414  003696  362C               	rlcf	___lldiv@quotient+1,f,c
 10415  003698  362D               	rlcf	___lldiv@quotient+2,f,c
 10416  00369A  362E               	rlcf	___lldiv@quotient+3,f,c
 10417  00369C  5027               	movf	___lldiv@divisor,w,c
 10418  00369E  5C23               	subwf	___lldiv@dividend,w,c
 10419  0036A0  5028               	movf	___lldiv@divisor+1,w,c
 10420  0036A2  5824               	subwfb	___lldiv@dividend+1,w,c
 10421  0036A4  5029               	movf	___lldiv@divisor+2,w,c
 10422  0036A6  5825               	subwfb	___lldiv@dividend+2,w,c
 10423  0036A8  502A               	movf	___lldiv@divisor+3,w,c
 10424  0036AA  5826               	subwfb	___lldiv@dividend+3,w,c
 10425  0036AC  A0D8               	btfss	status,0,c
 10426  0036AE  D009               	goto	l6260
 10427  0036B0  5027               	movf	___lldiv@divisor,w,c
 10428  0036B2  5E23               	subwf	___lldiv@dividend,f,c
 10429  0036B4  5028               	movf	___lldiv@divisor+1,w,c
 10430  0036B6  5A24               	subwfb	___lldiv@dividend+1,f,c
 10431  0036B8  5029               	movf	___lldiv@divisor+2,w,c
 10432  0036BA  5A25               	subwfb	___lldiv@dividend+2,f,c
 10433  0036BC  502A               	movf	___lldiv@divisor+3,w,c
 10434  0036BE  5A26               	subwfb	___lldiv@dividend+3,f,c
 10435  0036C0  802B               	bsf	___lldiv@quotient,0,c
 10436  0036C2                     l6260:
 10437  0036C2  90D8               	bcf	status,0,c
 10438  0036C4  322A               	rrcf	___lldiv@divisor+3,f,c
 10439  0036C6  3229               	rrcf	___lldiv@divisor+2,f,c
 10440  0036C8  3228               	rrcf	___lldiv@divisor+1,f,c
 10441  0036CA  3227               	rrcf	___lldiv@divisor,f,c
 10442  0036CC  2E2F               	decfsz	___lldiv@counter,f,c
 10443  0036CE  D7E1               	goto	l6252
 10444  0036D0                     l1266:
 10445  0036D0  C02B  F023         	movff	___lldiv@quotient,?___lldiv
 10446  0036D4  C02C  F024         	movff	___lldiv@quotient+1,?___lldiv+1
 10447  0036D8  C02D  F025         	movff	___lldiv@quotient+2,?___lldiv+2
 10448  0036DC  C02E  F026         	movff	___lldiv@quotient+3,?___lldiv+3
 10449  0036E0  0012               	return		;funcret
 10450  0036E2                     __end_of___lldiv:
 10451                           	opt stack 0
 10452                           tblptru	equ	0xFF8
 10453                           tblptrh	equ	0xFF7
 10454                           tblptrl	equ	0xFF6
 10455                           tablat	equ	0xFF5
 10456                           prodh	equ	0xFF4
 10457                           prodl	equ	0xFF3
 10458                           postinc0	equ	0xFEE
 10459                           wreg	equ	0xFE8
 10460                           postdec1	equ	0xFE5
 10461                           fsr1l	equ	0xFE1
 10462                           indf2	equ	0xFDF
 10463                           postinc2	equ	0xFDE
 10464                           postdec2	equ	0xFDD
 10465                           fsr2h	equ	0xFDA
 10466                           fsr2l	equ	0xFD9
 10467                           status	equ	0xFD8
 10468                           
 10469 ;; *************** function _getTime *****************
 10470 ;; Defined at:
 10471 ;;		line 23 in file "RTC.c"
 10472 ;; Parameters:    Size  Location     Type
 10473 ;;		None
 10474 ;; Auto vars:     Size  Location     Type
 10475 ;;  i               1   55[COMRAM] unsigned char 
 10476 ;;  time           14   41[COMRAM] int [7]
 10477 ;; Return value:  Size  Location     Type
 10478 ;;                  2   37[COMRAM] PTR int 
 10479 ;; Registers used:
 10480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10481 ;; Tracked objects:
 10482 ;;		On entry : 0/0
 10483 ;;		On exit  : 0/0
 10484 ;;		Unchanged: 0/0
 10485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10486 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10487 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10488 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10489 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10490 ;;Total ram usage:       19 bytes
 10491 ;; Hardware stack levels used:    1
 10492 ;; Hardware stack levels required when called:    5
 10493 ;; This function calls:
 10494 ;;		_I2C_Master_Read
 10495 ;;		_I2C_Master_Start
 10496 ;;		_I2C_Master_Stop
 10497 ;;		_I2C_Master_Write
 10498 ;; This function is called by:
 10499 ;;		_showDateTime
 10500 ;; This function uses a non-reentrant model
 10501 ;;
 10502                           
 10503                           	psect	text37
 10504  0036E2                     __ptext37:
 10505                           	opt stack 0
 10506  0036E2                     _getTime:
 10507                           	opt stack 23
 10508                           
 10509                           ;RTC.c: 24: int time[7];
 10510                           ;RTC.c: 26: (INTCONbits.GIE = 0);
 10511                           
 10512                           ;incstack = 0
 10513  0036E2  9EF2               	bcf	intcon,7,c	;volatile
 10514                           
 10515                           ;RTC.c: 29: I2C_Master_Start();
 10516  0036E4  ECDF  F01F         	call	_I2C_Master_Start	;wreg free
 10517                           
 10518                           ;RTC.c: 30: I2C_Master_Write(0b11010000);
 10519  0036E8  0E00               	movlw	0
 10520  0036EA  6E25               	movwf	I2C_Master_Write@d+1,c
 10521  0036EC  0ED0               	movlw	208
 10522  0036EE  6E24               	movwf	I2C_Master_Write@d,c
 10523  0036F0  ECCA  F01F         	call	_I2C_Master_Write	;wreg free
 10524                           
 10525                           ;RTC.c: 31: I2C_Master_Write(0x00);
 10526  0036F4  0E00               	movlw	0
 10527  0036F6  6E25               	movwf	I2C_Master_Write@d+1,c
 10528  0036F8  0E00               	movlw	0
 10529  0036FA  6E24               	movwf	I2C_Master_Write@d,c
 10530  0036FC  ECCA  F01F         	call	_I2C_Master_Write	;wreg free
 10531                           
 10532                           ;RTC.c: 32: I2C_Master_Stop();
 10533  003700  ECDB  F01F         	call	_I2C_Master_Stop	;wreg free
 10534                           
 10535                           ;RTC.c: 35: I2C_Master_Start();
 10536  003704  ECDF  F01F         	call	_I2C_Master_Start	;wreg free
 10537                           
 10538                           ;RTC.c: 36: I2C_Master_Write(0b11010001);
 10539  003708  0E00               	movlw	0
 10540  00370A  6E25               	movwf	I2C_Master_Write@d+1,c
 10541  00370C  0ED1               	movlw	209
 10542  00370E  6E24               	movwf	I2C_Master_Write@d,c
 10543  003710  ECCA  F01F         	call	_I2C_Master_Write	;wreg free
 10544                           
 10545                           ;RTC.c: 37: for(unsigned char i=0;i<6;i++){
 10546  003714  0E00               	movlw	0
 10547  003716  6E38               	movwf	getTime@i,c
 10548  003718                     l7086:
 10549  003718  0E05               	movlw	5
 10550  00371A  6438               	cpfsgt	getTime@i,c
 10551  00371C  D001               	goto	l7090
 10552  00371E  D013               	goto	l7096
 10553  003720                     l7090:
 10554                           
 10555                           ;RTC.c: 38: time[i] = I2C_Master_Read(1);
 10556  003720  0E01               	movlw	1
 10557  003722  EC0F  F01F         	call	_I2C_Master_Read
 10558  003726  6E28               	movwf	??_getTime& (0+255),c
 10559  003728  6A29               	clrf	(??_getTime+1)& (0+255),c
 10560  00372A  5038               	movf	getTime@i,w,c
 10561  00372C  0D02               	mullw	2
 10562  00372E  0E2A               	movlw	low getTime@time
 10563  003730  24F3               	addwf	prodl,w,c
 10564  003732  6ED9               	movwf	fsr2l,c
 10565  003734  0E00               	movlw	high getTime@time
 10566  003736  20F4               	addwfc	prodh,w,c
 10567  003738  6EDA               	movwf	fsr2h,c
 10568  00373A  C028  FFDE         	movff	??_getTime,postinc2
 10569  00373E  C029  FFDD         	movff	??_getTime+1,postdec2
 10570  003742  2A38               	incf	getTime@i,f,c
 10571  003744  D7E9               	goto	l7086
 10572  003746                     l7096:
 10573                           
 10574                           ;RTC.c: 39: }
 10575                           ;RTC.c: 40: time[6] = I2C_Master_Read(0);
 10576  003746  0E00               	movlw	0
 10577  003748  EC0F  F01F         	call	_I2C_Master_Read
 10578  00374C  6E28               	movwf	??_getTime& (0+255),c
 10579  00374E  5028               	movf	??_getTime,w,c
 10580  003750  6E36               	movwf	getTime@time+12,c
 10581  003752  6A37               	clrf	getTime@time+13,c
 10582                           
 10583                           ;RTC.c: 41: I2C_Master_Stop();
 10584  003754  ECDB  F01F         	call	_I2C_Master_Stop	;wreg free
 10585                           
 10586                           ;RTC.c: 43: (INTCONbits.GIE = 1);
 10587  003758  8EF2               	bsf	intcon,7,c	;volatile
 10588                           
 10589                           ;RTC.c: 45: return time;
 10590  00375A  0E2A               	movlw	low getTime@time
 10591  00375C  6E26               	movwf	?_getTime,c
 10592  00375E  0E00               	movlw	high getTime@time
 10593  003760  6E27               	movwf	?_getTime+1,c
 10594  003762  0012               	return	
 10595  003764                     __end_of_getTime:
 10596                           	opt stack 0
 10597                           tblptru	equ	0xFF8
 10598                           tblptrh	equ	0xFF7
 10599                           tblptrl	equ	0xFF6
 10600                           tablat	equ	0xFF5
 10601                           prodh	equ	0xFF4
 10602                           prodl	equ	0xFF3
 10603                           intcon	equ	0xFF2
 10604                           postinc0	equ	0xFEE
 10605                           wreg	equ	0xFE8
 10606                           postdec1	equ	0xFE5
 10607                           fsr1l	equ	0xFE1
 10608                           indf2	equ	0xFDF
 10609                           postinc2	equ	0xFDE
 10610                           postdec2	equ	0xFDD
 10611                           fsr2h	equ	0xFDA
 10612                           fsr2l	equ	0xFD9
 10613                           status	equ	0xFD8
 10614                           
 10615 ;; *************** function _I2C_Master_Write *****************
 10616 ;; Defined at:
 10617 ;;		line 47 in file "I2C.c"
 10618 ;; Parameters:    Size  Location     Type
 10619 ;;  d               2   35[COMRAM] unsigned int 
 10620 ;; Auto vars:     Size  Location     Type
 10621 ;;		None
 10622 ;; Return value:  Size  Location     Type
 10623 ;;                  1    wreg      void 
 10624 ;; Registers used:
 10625 ;;		wreg, status,2, status,0, cstack
 10626 ;; Tracked objects:
 10627 ;;		On entry : 0/0
 10628 ;;		On exit  : 0/0
 10629 ;;		Unchanged: 0/0
 10630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10631 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10634 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10635 ;;Total ram usage:        2 bytes
 10636 ;; Hardware stack levels used:    1
 10637 ;; Hardware stack levels required when called:    4
 10638 ;; This function calls:
 10639 ;;		_I2C_Master_Wait
 10640 ;; This function is called by:
 10641 ;;		_getTime
 10642 ;;		_testFrequency
 10643 ;;		_setTime
 10644 ;; This function uses a non-reentrant model
 10645 ;;
 10646                           
 10647                           	psect	text38
 10648  003F94                     __ptext38:
 10649                           	opt stack 0
 10650  003F94                     _I2C_Master_Write:
 10651                           	opt stack 23
 10652                           
 10653                           ;I2C.c: 49: I2C_Master_Wait();
 10654                           
 10655                           ;incstack = 0
 10656  003F94  ECBB  F01F         	call	_I2C_Master_Wait	;wreg free
 10657                           
 10658                           ;I2C.c: 50: SSPBUF = d;
 10659  003F98  C024  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 10660  003F9C  0012               	return		;funcret
 10661  003F9E                     __end_of_I2C_Master_Write:
 10662                           	opt stack 0
 10663                           tblptru	equ	0xFF8
 10664                           tblptrh	equ	0xFF7
 10665                           tblptrl	equ	0xFF6
 10666                           tablat	equ	0xFF5
 10667                           prodh	equ	0xFF4
 10668                           prodl	equ	0xFF3
 10669                           intcon	equ	0xFF2
 10670                           postinc0	equ	0xFEE
 10671                           wreg	equ	0xFE8
 10672                           postdec1	equ	0xFE5
 10673                           fsr1l	equ	0xFE1
 10674                           indf2	equ	0xFDF
 10675                           postinc2	equ	0xFDE
 10676                           postdec2	equ	0xFDD
 10677                           fsr2h	equ	0xFDA
 10678                           fsr2l	equ	0xFD9
 10679                           status	equ	0xFD8
 10680                           
 10681 ;; *************** function _I2C_Master_Stop *****************
 10682 ;; Defined at:
 10683 ;;		line 41 in file "I2C.c"
 10684 ;; Parameters:    Size  Location     Type
 10685 ;;		None
 10686 ;; Auto vars:     Size  Location     Type
 10687 ;;		None
 10688 ;; Return value:  Size  Location     Type
 10689 ;;                  2  439[None  ] int 
 10690 ;; Registers used:
 10691 ;;		wreg, status,2, status,0, cstack
 10692 ;; Tracked objects:
 10693 ;;		On entry : 0/0
 10694 ;;		On exit  : 0/0
 10695 ;;		Unchanged: 0/0
 10696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10701 ;;Total ram usage:        0 bytes
 10702 ;; Hardware stack levels used:    1
 10703 ;; Hardware stack levels required when called:    4
 10704 ;; This function calls:
 10705 ;;		_I2C_Master_Wait
 10706 ;; This function is called by:
 10707 ;;		_getTime
 10708 ;;		_testFrequency
 10709 ;;		_setTime
 10710 ;; This function uses a non-reentrant model
 10711 ;;
 10712                           
 10713                           	psect	text39
 10714  003FB6                     __ptext39:
 10715                           	opt stack 0
 10716  003FB6                     _I2C_Master_Stop:
 10717                           	opt stack 23
 10718                           
 10719                           ;I2C.c: 43: I2C_Master_Wait();
 10720                           
 10721                           ;incstack = 0
 10722  003FB6  ECBB  F01F         	call	_I2C_Master_Wait	;wreg free
 10723                           
 10724                           ;I2C.c: 44: PEN = 1;
 10725  003FBA  84C5               	bsf	4037,2,c	;volatile
 10726  003FBC  0012               	return		;funcret
 10727  003FBE                     __end_of_I2C_Master_Stop:
 10728                           	opt stack 0
 10729                           tblptru	equ	0xFF8
 10730                           tblptrh	equ	0xFF7
 10731                           tblptrl	equ	0xFF6
 10732                           tablat	equ	0xFF5
 10733                           prodh	equ	0xFF4
 10734                           prodl	equ	0xFF3
 10735                           intcon	equ	0xFF2
 10736                           postinc0	equ	0xFEE
 10737                           wreg	equ	0xFE8
 10738                           postdec1	equ	0xFE5
 10739                           fsr1l	equ	0xFE1
 10740                           indf2	equ	0xFDF
 10741                           postinc2	equ	0xFDE
 10742                           postdec2	equ	0xFDD
 10743                           fsr2h	equ	0xFDA
 10744                           fsr2l	equ	0xFD9
 10745                           status	equ	0xFD8
 10746                           
 10747 ;; *************** function _I2C_Master_Start *****************
 10748 ;; Defined at:
 10749 ;;		line 29 in file "I2C.c"
 10750 ;; Parameters:    Size  Location     Type
 10751 ;;		None
 10752 ;; Auto vars:     Size  Location     Type
 10753 ;;		None
 10754 ;; Return value:  Size  Location     Type
 10755 ;;                  2  435[None  ] int 
 10756 ;; Registers used:
 10757 ;;		wreg, status,2, status,0, cstack
 10758 ;; Tracked objects:
 10759 ;;		On entry : 0/0
 10760 ;;		On exit  : 0/0
 10761 ;;		Unchanged: 0/0
 10762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10766 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10767 ;;Total ram usage:        0 bytes
 10768 ;; Hardware stack levels used:    1
 10769 ;; Hardware stack levels required when called:    4
 10770 ;; This function calls:
 10771 ;;		_I2C_Master_Wait
 10772 ;; This function is called by:
 10773 ;;		_getTime
 10774 ;;		_testFrequency
 10775 ;;		_setTime
 10776 ;; This function uses a non-reentrant model
 10777 ;;
 10778                           
 10779                           	psect	text40
 10780  003FBE                     __ptext40:
 10781                           	opt stack 0
 10782  003FBE                     _I2C_Master_Start:
 10783                           	opt stack 23
 10784                           
 10785                           ;I2C.c: 31: I2C_Master_Wait();
 10786                           
 10787                           ;incstack = 0
 10788  003FBE  ECBB  F01F         	call	_I2C_Master_Wait	;wreg free
 10789                           
 10790                           ;I2C.c: 32: SEN = 1;
 10791  003FC2  80C5               	bsf	4037,0,c	;volatile
 10792  003FC4  0012               	return		;funcret
 10793  003FC6                     __end_of_I2C_Master_Start:
 10794                           	opt stack 0
 10795                           tblptru	equ	0xFF8
 10796                           tblptrh	equ	0xFF7
 10797                           tblptrl	equ	0xFF6
 10798                           tablat	equ	0xFF5
 10799                           prodh	equ	0xFF4
 10800                           prodl	equ	0xFF3
 10801                           intcon	equ	0xFF2
 10802                           postinc0	equ	0xFEE
 10803                           wreg	equ	0xFE8
 10804                           postdec1	equ	0xFE5
 10805                           fsr1l	equ	0xFE1
 10806                           indf2	equ	0xFDF
 10807                           postinc2	equ	0xFDE
 10808                           postdec2	equ	0xFDD
 10809                           fsr2h	equ	0xFDA
 10810                           fsr2l	equ	0xFD9
 10811                           status	equ	0xFD8
 10812                           
 10813 ;; *************** function _I2C_Master_Read *****************
 10814 ;; Defined at:
 10815 ;;		line 53 in file "I2C.c"
 10816 ;; Parameters:    Size  Location     Type
 10817 ;;  a               1    wreg     unsigned char 
 10818 ;; Auto vars:     Size  Location     Type
 10819 ;;  a               1   35[COMRAM] unsigned char 
 10820 ;;  temp            1   36[COMRAM] unsigned char 
 10821 ;; Return value:  Size  Location     Type
 10822 ;;                  1    wreg      unsigned char 
 10823 ;; Registers used:
 10824 ;;		wreg, status,2, status,0, cstack
 10825 ;; Tracked objects:
 10826 ;;		On entry : 0/0
 10827 ;;		On exit  : 0/0
 10828 ;;		Unchanged: 0/0
 10829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10831 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10833 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10834 ;;Total ram usage:        2 bytes
 10835 ;; Hardware stack levels used:    1
 10836 ;; Hardware stack levels required when called:    4
 10837 ;; This function calls:
 10838 ;;		_I2C_Master_Wait
 10839 ;; This function is called by:
 10840 ;;		_getTime
 10841 ;;		_testFrequency
 10842 ;; This function uses a non-reentrant model
 10843 ;;
 10844                           
 10845                           	psect	text41
 10846  003E1E                     __ptext41:
 10847                           	opt stack 0
 10848  003E1E                     _I2C_Master_Read:
 10849                           	opt stack 23
 10850                           
 10851                           ;incstack = 0
 10852                           ;I2C_Master_Read@a stored from wreg
 10853  003E1E  6E24               	movwf	I2C_Master_Read@a,c
 10854                           
 10855                           ;I2C.c: 55: unsigned char temp;
 10856                           ;I2C.c: 56: I2C_Master_Wait();
 10857  003E20  ECBB  F01F         	call	_I2C_Master_Wait	;wreg free
 10858                           
 10859                           ;I2C.c: 57: RCEN = 1;
 10860  003E24  86C5               	bsf	4037,3,c	;volatile
 10861                           
 10862                           ;I2C.c: 58: I2C_Master_Wait();
 10863  003E26  ECBB  F01F         	call	_I2C_Master_Wait	;wreg free
 10864                           
 10865                           ;I2C.c: 59: temp = SSPBUF;
 10866  003E2A  CFC9 F025          	movff	4041,I2C_Master_Read@temp	;volatile
 10867                           
 10868                           ;I2C.c: 60: I2C_Master_Wait();
 10869  003E2E  ECBB  F01F         	call	_I2C_Master_Wait	;wreg free
 10870                           
 10871                           ;I2C.c: 61: ACKDT = (a)?0:1;
 10872  003E32  5024               	movf	I2C_Master_Read@a,w,c
 10873  003E34  A4D8               	btfss	status,2,c
 10874  003E36  D002               	goto	u6080
 10875  003E38  8AC5               	bsf	4037,5,c	;volatile
 10876  003E3A  D001               	goto	l6300
 10877  003E3C                     u6080:
 10878  003E3C  9AC5               	bcf	4037,5,c	;volatile
 10879  003E3E                     l6300:
 10880                           
 10881                           ;I2C.c: 62: ACKEN = 1;
 10882  003E3E  88C5               	bsf	4037,4,c	;volatile
 10883                           
 10884                           ;I2C.c: 63: return temp;
 10885  003E40  5025               	movf	I2C_Master_Read@temp,w,c
 10886  003E42  0012               	return	
 10887  003E44                     __end_of_I2C_Master_Read:
 10888                           	opt stack 0
 10889                           tblptru	equ	0xFF8
 10890                           tblptrh	equ	0xFF7
 10891                           tblptrl	equ	0xFF6
 10892                           tablat	equ	0xFF5
 10893                           prodh	equ	0xFF4
 10894                           prodl	equ	0xFF3
 10895                           intcon	equ	0xFF2
 10896                           postinc0	equ	0xFEE
 10897                           wreg	equ	0xFE8
 10898                           postdec1	equ	0xFE5
 10899                           fsr1l	equ	0xFE1
 10900                           indf2	equ	0xFDF
 10901                           postinc2	equ	0xFDE
 10902                           postdec2	equ	0xFDD
 10903                           fsr2h	equ	0xFDA
 10904                           fsr2l	equ	0xFD9
 10905                           status	equ	0xFD8
 10906                           
 10907 ;; *************** function _I2C_Master_Wait *****************
 10908 ;; Defined at:
 10909 ;;		line 24 in file "I2C.c"
 10910 ;; Parameters:    Size  Location     Type
 10911 ;;		None
 10912 ;; Auto vars:     Size  Location     Type
 10913 ;;		None
 10914 ;; Return value:  Size  Location     Type
 10915 ;;                  1    wreg      void 
 10916 ;; Registers used:
 10917 ;;		wreg, status,2, status,0
 10918 ;; Tracked objects:
 10919 ;;		On entry : 0/0
 10920 ;;		On exit  : 0/0
 10921 ;;		Unchanged: 0/0
 10922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10925 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10926 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10927 ;;Total ram usage:        1 bytes
 10928 ;; Hardware stack levels used:    1
 10929 ;; Hardware stack levels required when called:    3
 10930 ;; This function calls:
 10931 ;;		Nothing
 10932 ;; This function is called by:
 10933 ;;		_I2C_Master_Start
 10934 ;;		_I2C_Master_Stop
 10935 ;;		_I2C_Master_Write
 10936 ;;		_I2C_Master_Read
 10937 ;;		_I2C_Master_RepeatedStart
 10938 ;; This function uses a non-reentrant model
 10939 ;;
 10940                           
 10941                           	psect	text42
 10942  003F76                     __ptext42:
 10943                           	opt stack 0
 10944  003F76                     _I2C_Master_Wait:
 10945                           	opt stack 23
 10946  003F76                     l510:
 10947  003F76  B4C7               	btfsc	4039,2,c	;volatile
 10948  003F78  D7FE               	goto	l510
 10949  003F7A  CFC5 F023          	movff	4037,??_I2C_Master_Wait	;volatile
 10950  003F7E  0E1F               	movlw	31
 10951  003F80  1623               	andwf	??_I2C_Master_Wait,f,c
 10952  003F82  B4D8               	btfsc	status,2,c
 10953  003F84  0012               	return	
 10954  003F86  D7F7               	goto	l510
 10955  003F88                     __end_of_I2C_Master_Wait:
 10956                           	opt stack 0
 10957                           tblptru	equ	0xFF8
 10958                           tblptrh	equ	0xFF7
 10959                           tblptrl	equ	0xFF6
 10960                           tablat	equ	0xFF5
 10961                           prodh	equ	0xFF4
 10962                           prodl	equ	0xFF3
 10963                           intcon	equ	0xFF2
 10964                           postinc0	equ	0xFEE
 10965                           wreg	equ	0xFE8
 10966                           postdec1	equ	0xFE5
 10967                           fsr1l	equ	0xFE1
 10968                           indf2	equ	0xFDF
 10969                           postinc2	equ	0xFDE
 10970                           postdec2	equ	0xFDD
 10971                           fsr2h	equ	0xFDA
 10972                           fsr2l	equ	0xFD9
 10973                           status	equ	0xFD8
 10974                           
 10975 ;; *************** function _readPastRun *****************
 10976 ;; Defined at:
 10977 ;;		line 23 in file "eeprom.c"
 10978 ;; Parameters:    Size  Location     Type
 10979 ;;  run             2    0[BANK0 ] int 
 10980 ;; Auto vars:     Size  Location     Type
 10981 ;;  i               2   16[BANK0 ] int 
 10982 ;;  data           14    2[BANK0 ] int [7]
 10983 ;; Return value:  Size  Location     Type
 10984 ;;                  2    0[BANK0 ] PTR int 
 10985 ;; Registers used:
 10986 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10987 ;; Tracked objects:
 10988 ;;		On entry : 0/0
 10989 ;;		On exit  : 0/0
 10990 ;;		Unchanged: 0/0
 10991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10992 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10993 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10995 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10996 ;;Total ram usage:       18 bytes
 10997 ;; Hardware stack levels used:    1
 10998 ;; Hardware stack levels required when called:    4
 10999 ;; This function calls:
 11000 ;;		___wmul
 11001 ;;		_eepromRead
 11002 ;; This function is called by:
 11003 ;;		_showInterface
 11004 ;; This function uses a non-reentrant model
 11005 ;;
 11006                           
 11007                           	psect	text43
 11008  00342E                     __ptext43:
 11009                           	opt stack 0
 11010  00342E                     _readPastRun:
 11011                           	opt stack 25
 11012                           
 11013                           ;eeprom.c: 24: int data[7];
 11014                           ;eeprom.c: 25: for(int i = 0; i < 7; i++){
 11015                           
 11016                           ;incstack = 0
 11017  00342E  0E00               	movlw	0
 11018  003430  0100               	movlb	0	; () banked
 11019  003432  6F91               	movwf	(readPastRun@i+1)& (0+255),b
 11020  003434  0E00               	movlw	0
 11021  003436  6F90               	movwf	readPastRun@i& (0+255),b
 11022  003438                     l7298:
 11023                           
 11024                           ; BSR set to: 0
 11025  003438  0100               	movlb	0	; () banked
 11026  00343A  BF91               	btfsc	(readPastRun@i+1)& (0+255),7,b
 11027  00343C  D008               	goto	l7302
 11028  00343E  0100               	movlb	0	; () banked
 11029  003440  5191               	movf	(readPastRun@i+1)& (0+255),w,b
 11030  003442  E137               	bnz	l7308
 11031  003444  0E07               	movlw	7
 11032  003446  0100               	movlb	0	; () banked
 11033  003448  5D90               	subwf	readPastRun@i& (0+255),w,b
 11034  00344A  B0D8               	btfsc	status,0,c
 11035  00344C  D032               	goto	l7308
 11036  00344E                     l7302:
 11037                           
 11038                           ; BSR set to: 0
 11039                           ;eeprom.c: 26: data[i] = eepromRead((run*7+1) + i);
 11040  00344E  C080  F031         	movff	readPastRun@run,___wmul@multiplier
 11041  003452  C081  F032         	movff	readPastRun@run+1,___wmul@multiplier+1
 11042  003456  0E00               	movlw	0
 11043  003458  6E34               	movwf	___wmul@multiplicand+1,c
 11044  00345A  0E07               	movlw	7
 11045  00345C  6E33               	movwf	___wmul@multiplicand,c
 11046  00345E  EC22  F01F         	call	___wmul	;wreg free
 11047  003462  0100               	movlb	0	; () banked
 11048  003464  5190               	movf	readPastRun@i& (0+255),w,b
 11049  003466  2631               	addwf	?___wmul,f,c
 11050  003468  0100               	movlb	0	; () banked
 11051  00346A  5191               	movf	(readPastRun@i+1)& (0+255),w,b
 11052  00346C  2232               	addwfc	?___wmul+1,f,c
 11053  00346E  0E01               	movlw	1
 11054  003470  2631               	addwf	?___wmul,f,c
 11055  003472  0E00               	movlw	0
 11056  003474  2232               	addwfc	?___wmul+1,f,c
 11057  003476  C031  F037         	movff	?___wmul,eepromRead@address
 11058  00347A  C032  F038         	movff	?___wmul+1,eepromRead@address+1
 11059  00347E  0E00               	movlw	0
 11060  003480  BE38               	btfsc	eepromRead@address+1,7,c
 11061  003482  0EFF               	movlw	-1
 11062  003484  6E39               	movwf	eepromRead@address+2,c
 11063  003486  6E3A               	movwf	eepromRead@address+3,c
 11064  003488  EC97  F01F         	call	_eepromRead	;wreg free
 11065  00348C  90D8               	bcf	status,0,c
 11066  00348E  0100               	movlb	0	; () banked
 11067  003490  3590               	rlcf	readPastRun@i& (0+255),w,b
 11068  003492  6ED9               	movwf	fsr2l,c
 11069  003494  0100               	movlb	0	; () banked
 11070  003496  3591               	rlcf	(readPastRun@i+1)& (0+255),w,b
 11071  003498  6EDA               	movwf	fsr2h,c
 11072  00349A  0E82               	movlw	low readPastRun@data
 11073  00349C  26D9               	addwf	fsr2l,f,c
 11074  00349E  0E00               	movlw	high readPastRun@data
 11075  0034A0  22DA               	addwfc	fsr2h,f,c
 11076  0034A2  C037  FFDE         	movff	?_eepromRead,postinc2
 11077  0034A6  C038  FFDD         	movff	?_eepromRead+1,postdec2
 11078                           
 11079                           ; BSR set to: 0
 11080  0034AA  0100               	movlb	0	; () banked
 11081  0034AC  4B90               	infsnz	readPastRun@i& (0+255),f,b
 11082  0034AE  2B91               	incf	(readPastRun@i+1)& (0+255),f,b
 11083  0034B0  D7C3               	goto	l7298
 11084  0034B2                     l7308:
 11085                           
 11086                           ; BSR set to: 0
 11087                           ;eeprom.c: 27: }
 11088                           ;eeprom.c: 28: return data;
 11089  0034B2  0E82               	movlw	low readPastRun@data
 11090  0034B4  0100               	movlb	0	; () banked
 11091  0034B6  6F80               	movwf	?_readPastRun& (0+255),b
 11092  0034B8  0E00               	movlw	high readPastRun@data
 11093  0034BA  0100               	movlb	0	; () banked
 11094  0034BC  6F81               	movwf	(?_readPastRun+1)& (0+255),b
 11095  0034BE  0012               	return	
 11096  0034C0                     __end_of_readPastRun:
 11097                           	opt stack 0
 11098                           tblptru	equ	0xFF8
 11099                           tblptrh	equ	0xFF7
 11100                           tblptrl	equ	0xFF6
 11101                           tablat	equ	0xFF5
 11102                           prodh	equ	0xFF4
 11103                           prodl	equ	0xFF3
 11104                           intcon	equ	0xFF2
 11105                           postinc0	equ	0xFEE
 11106                           wreg	equ	0xFE8
 11107                           postdec1	equ	0xFE5
 11108                           fsr1l	equ	0xFE1
 11109                           indf2	equ	0xFDF
 11110                           postinc2	equ	0xFDE
 11111                           postdec2	equ	0xFDD
 11112                           fsr2h	equ	0xFDA
 11113                           fsr2l	equ	0xFD9
 11114                           status	equ	0xFD8
 11115                           
 11116 ;; *************** function _saveNewRun *****************
 11117 ;; Defined at:
 11118 ;;		line 31 in file "eeprom.c"
 11119 ;; Parameters:    Size  Location     Type
 11120 ;;  data            2    9[BANK0 ] PTR int 
 11121 ;;		 -> main@run(14), 
 11122 ;; Auto vars:     Size  Location     Type
 11123 ;;  i               2   13[BANK0 ] int 
 11124 ;;  n               2   11[BANK0 ] int 
 11125 ;; Return value:  Size  Location     Type
 11126 ;;                  1    wreg      void 
 11127 ;; Registers used:
 11128 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11129 ;; Tracked objects:
 11130 ;;		On entry : 0/0
 11131 ;;		On exit  : 0/0
 11132 ;;		Unchanged: 0/0
 11133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11134 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11135 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11137 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11138 ;;Total ram usage:        6 bytes
 11139 ;; Hardware stack levels used:    1
 11140 ;; Hardware stack levels required when called:    4
 11141 ;; This function calls:
 11142 ;;		___wmul
 11143 ;;		_eepromRead
 11144 ;;		_eepromWrite
 11145 ;; This function is called by:
 11146 ;;		_main
 11147 ;; This function uses a non-reentrant model
 11148 ;;
 11149                           
 11150                           	psect	text44
 11151  002C6A                     __ptext44:
 11152                           	opt stack 0
 11153  002C6A                     _saveNewRun:
 11154                           	opt stack 26
 11155                           
 11156                           ;eeprom.c: 33: eepromWrite(eepromRead(0)+1,0);
 11157                           
 11158                           ; BSR set to: 0
 11159                           ;incstack = 0
 11160  002C6A  0E00               	movlw	0
 11161  002C6C  6E37               	movwf	eepromRead@address,c
 11162  002C6E  0E00               	movlw	0
 11163  002C70  6E38               	movwf	eepromRead@address+1,c
 11164  002C72  0E00               	movlw	0
 11165  002C74  6E39               	movwf	eepromRead@address+2,c
 11166  002C76  0E00               	movlw	0
 11167  002C78  6E3A               	movwf	eepromRead@address+3,c
 11168  002C7A  EC97  F01F         	call	_eepromRead	;wreg free
 11169  002C7E  0E01               	movlw	1
 11170  002C80  2437               	addwf	?_eepromRead,w,c
 11171  002C82  0100               	movlb	0	; () banked
 11172  002C84  6F80               	movwf	eepromWrite@data& (0+255),b
 11173  002C86  0E00               	movlw	0
 11174  002C88  2038               	addwfc	?_eepromRead+1,w,c
 11175  002C8A  0100               	movlb	0	; () banked
 11176  002C8C  6F81               	movwf	(eepromWrite@data+1)& (0+255),b
 11177  002C8E  0E00               	movlw	0
 11178  002C90  0100               	movlb	0	; () banked
 11179  002C92  6F82               	movwf	eepromWrite@address& (0+255),b
 11180  002C94  0E00               	movlw	0
 11181  002C96  6F83               	movwf	(eepromWrite@address+1)& (0+255),b
 11182  002C98  0E00               	movlw	0
 11183  002C9A  6F84               	movwf	(eepromWrite@address+2)& (0+255),b
 11184  002C9C  0E00               	movlw	0
 11185  002C9E  6F85               	movwf	(eepromWrite@address+3)& (0+255),b
 11186  002CA0  EC7F  F01D         	call	_eepromWrite	;wreg free
 11187                           
 11188                           ;eeprom.c: 34: int n = eepromRead(0);
 11189  002CA4  0E00               	movlw	0
 11190  002CA6  6E37               	movwf	eepromRead@address,c
 11191  002CA8  0E00               	movlw	0
 11192  002CAA  6E38               	movwf	eepromRead@address+1,c
 11193  002CAC  0E00               	movlw	0
 11194  002CAE  6E39               	movwf	eepromRead@address+2,c
 11195  002CB0  0E00               	movlw	0
 11196  002CB2  6E3A               	movwf	eepromRead@address+3,c
 11197  002CB4  EC97  F01F         	call	_eepromRead	;wreg free
 11198  002CB8  C037  F08B         	movff	?_eepromRead,saveNewRun@n
 11199  002CBC  C038  F08C         	movff	?_eepromRead+1,saveNewRun@n+1
 11200                           
 11201                           ;eeprom.c: 36: for(int i = 0; i < 7; i++){
 11202  002CC0  0E00               	movlw	0
 11203  002CC2  0100               	movlb	0	; () banked
 11204  002CC4  6F8E               	movwf	(saveNewRun@i+1)& (0+255),b
 11205  002CC6  0E00               	movlw	0
 11206  002CC8  6F8D               	movwf	saveNewRun@i& (0+255),b
 11207  002CCA                     l7624:
 11208                           
 11209                           ; BSR set to: 0
 11210  002CCA  0100               	movlb	0	; () banked
 11211  002CCC  BF8E               	btfsc	(saveNewRun@i+1)& (0+255),7,b
 11212  002CCE  D008               	goto	l7628
 11213  002CD0  0100               	movlb	0	; () banked
 11214  002CD2  518E               	movf	(saveNewRun@i+1)& (0+255),w,b
 11215  002CD4  E13A               	bnz	l391
 11216  002CD6  0E07               	movlw	7
 11217  002CD8  0100               	movlb	0	; () banked
 11218  002CDA  5D8D               	subwf	saveNewRun@i& (0+255),w,b
 11219  002CDC  B0D8               	btfsc	status,0,c
 11220  002CDE  0012               	return	
 11221  002CE0                     l7628:
 11222                           
 11223                           ; BSR set to: 0
 11224                           ;eeprom.c: 37: eepromWrite(data[i], (n*7+1) + i);
 11225  002CE0  90D8               	bcf	status,0,c
 11226  002CE2  0100               	movlb	0	; () banked
 11227  002CE4  358D               	rlcf	saveNewRun@i& (0+255),w,b
 11228  002CE6  6ED9               	movwf	fsr2l,c
 11229  002CE8  0100               	movlb	0	; () banked
 11230  002CEA  358E               	rlcf	(saveNewRun@i+1)& (0+255),w,b
 11231  002CEC  6EDA               	movwf	fsr2h,c
 11232  002CEE  0100               	movlb	0	; () banked
 11233  002CF0  5189               	movf	saveNewRun@data& (0+255),w,b
 11234  002CF2  26D9               	addwf	fsr2l,f,c
 11235  002CF4  0100               	movlb	0	; () banked
 11236  002CF6  518A               	movf	(saveNewRun@data+1)& (0+255),w,b
 11237  002CF8  22DA               	addwfc	fsr2h,f,c
 11238  002CFA  CFDE F080          	movff	postinc2,eepromWrite@data
 11239  002CFE  CFDD F081          	movff	postdec2,eepromWrite@data+1
 11240  002D02  C08B  F031         	movff	saveNewRun@n,___wmul@multiplier
 11241  002D06  C08C  F032         	movff	saveNewRun@n+1,___wmul@multiplier+1
 11242  002D0A  0E00               	movlw	0
 11243  002D0C  6E34               	movwf	___wmul@multiplicand+1,c
 11244  002D0E  0E07               	movlw	7
 11245  002D10  6E33               	movwf	___wmul@multiplicand,c
 11246  002D12  EC22  F01F         	call	___wmul	;wreg free
 11247  002D16  0100               	movlb	0	; () banked
 11248  002D18  518D               	movf	saveNewRun@i& (0+255),w,b
 11249  002D1A  2631               	addwf	?___wmul,f,c
 11250  002D1C  0100               	movlb	0	; () banked
 11251  002D1E  518E               	movf	(saveNewRun@i+1)& (0+255),w,b
 11252  002D20  2232               	addwfc	?___wmul+1,f,c
 11253  002D22  0E01               	movlw	1
 11254  002D24  2631               	addwf	?___wmul,f,c
 11255  002D26  0E00               	movlw	0
 11256  002D28  2232               	addwfc	?___wmul+1,f,c
 11257  002D2A  C031  F082         	movff	?___wmul,eepromWrite@address
 11258  002D2E  C032  F083         	movff	?___wmul+1,eepromWrite@address+1
 11259  002D32  0100               	movlb	0	; () banked
 11260  002D34  0E00               	movlw	0
 11261  002D36  BF83               	btfsc	(eepromWrite@address+1)& (0+255),7,b
 11262  002D38  0EFF               	movlw	-1
 11263  002D3A  6F84               	movwf	(eepromWrite@address+2)& (0+255),b
 11264  002D3C  6F85               	movwf	(eepromWrite@address+3)& (0+255),b
 11265  002D3E  EC7F  F01D         	call	_eepromWrite	;wreg free
 11266  002D42  0100               	movlb	0	; () banked
 11267  002D44  4B8D               	infsnz	saveNewRun@i& (0+255),f,b
 11268  002D46  2B8E               	incf	(saveNewRun@i+1)& (0+255),f,b
 11269  002D48  D7C0               	goto	l7624
 11270  002D4A                     l391:
 11271                           
 11272                           ; BSR set to: 0
 11273  002D4A  0012               	return		;funcret
 11274  002D4C                     __end_of_saveNewRun:
 11275                           	opt stack 0
 11276                           tblptru	equ	0xFF8
 11277                           tblptrh	equ	0xFF7
 11278                           tblptrl	equ	0xFF6
 11279                           tablat	equ	0xFF5
 11280                           prodh	equ	0xFF4
 11281                           prodl	equ	0xFF3
 11282                           intcon	equ	0xFF2
 11283                           postinc0	equ	0xFEE
 11284                           wreg	equ	0xFE8
 11285                           postdec1	equ	0xFE5
 11286                           fsr1l	equ	0xFE1
 11287                           indf2	equ	0xFDF
 11288                           postinc2	equ	0xFDE
 11289                           postdec2	equ	0xFDD
 11290                           fsr2h	equ	0xFDA
 11291                           fsr2l	equ	0xFD9
 11292                           status	equ	0xFD8
 11293                           
 11294 ;; *************** function _eepromWrite *****************
 11295 ;; Defined at:
 11296 ;;		line 41 in file "eeprom.c"
 11297 ;; Parameters:    Size  Location     Type
 11298 ;;  data            2    0[BANK0 ] int 
 11299 ;;  address         4    2[BANK0 ] long 
 11300 ;; Auto vars:     Size  Location     Type
 11301 ;;  ien             2    7[BANK0 ] int 
 11302 ;; Return value:  Size  Location     Type
 11303 ;;                  1    wreg      void 
 11304 ;; Registers used:
 11305 ;;		wreg, status,2, status,0
 11306 ;; Tracked objects:
 11307 ;;		On entry : 0/0
 11308 ;;		On exit  : 0/0
 11309 ;;		Unchanged: 0/0
 11310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11311 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11312 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11313 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11314 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11315 ;;Total ram usage:        9 bytes
 11316 ;; Hardware stack levels used:    1
 11317 ;; Hardware stack levels required when called:    3
 11318 ;; This function calls:
 11319 ;;		Nothing
 11320 ;; This function is called by:
 11321 ;;		_saveNewRun
 11322 ;; This function uses a non-reentrant model
 11323 ;;
 11324                           
 11325                           	psect	text45
 11326  003AFE                     __ptext45:
 11327                           	opt stack 0
 11328  003AFE                     _eepromWrite:
 11329                           	opt stack 26
 11330  003AFE                     l394:
 11331  003AFE  B2A6               	btfsc	4006,1,c	;volatile
 11332  003B00  D7FE               	goto	l394
 11333                           
 11334                           ;eeprom.c: 45: int ien = INTCONbits.GIE;
 11335  003B02  AEF2               	btfss	intcon,7,c	;volatile
 11336  003B04  D004               	goto	u7630
 11337  003B06  0100               	movlb	0	; () banked
 11338  003B08  6B86               	clrf	??_eepromWrite& (0+255),b
 11339  003B0A  2B86               	incf	??_eepromWrite& (0+255),f,b
 11340  003B0C  D002               	goto	u7638
 11341  003B0E                     u7630:
 11342  003B0E  0100               	movlb	0	; () banked
 11343  003B10  6B86               	clrf	??_eepromWrite& (0+255),b
 11344  003B12                     u7638:
 11345  003B12  0100               	movlb	0	; () banked
 11346  003B14  5186               	movf	??_eepromWrite& (0+255),w,b
 11347  003B16  0100               	movlb	0	; () banked
 11348  003B18  6F87               	movwf	eepromWrite@ien& (0+255),b
 11349  003B1A  6B88               	clrf	(eepromWrite@ien+1)& (0+255),b
 11350                           
 11351                           ; BSR set to: 0
 11352                           ;eeprom.c: 46: (INTCONbits.GIE = 0);
 11353  003B1C  9EF2               	bcf	intcon,7,c	;volatile
 11354                           
 11355                           ; BSR set to: 0
 11356                           ;eeprom.c: 47: EEADR = address;
 11357  003B1E  C082  FFA9         	movff	eepromWrite@address,4009	;volatile
 11358                           
 11359                           ; BSR set to: 0
 11360                           ;eeprom.c: 48: EEADRH = (address>>8) & 0b11;
 11361  003B22  0100               	movlb	0	; () banked
 11362  003B24  5183               	movf	(eepromWrite@address+1)& (0+255),w,b
 11363  003B26  0B03               	andlw	3
 11364  003B28  6EAA               	movwf	4010,c	;volatile
 11365                           
 11366                           ; BSR set to: 0
 11367                           ;eeprom.c: 49: EEDATA = data;
 11368  003B2A  C080  FFA8         	movff	eepromWrite@data,4008	;volatile
 11369                           
 11370                           ; BSR set to: 0
 11371                           ;eeprom.c: 50: EECON1 = 0b100;
 11372  003B2E  0E04               	movlw	4
 11373  003B30  6EA6               	movwf	4006,c	;volatile
 11374                           
 11375                           ; BSR set to: 0
 11376                           ;eeprom.c: 52: EECON2 = 0x55;
 11377  003B32  0E55               	movlw	85
 11378  003B34  6EA7               	movwf	4007,c	;volatile
 11379                           
 11380                           ; BSR set to: 0
 11381                           ;eeprom.c: 53: EECON2 = 0xaa;
 11382  003B36  0EAA               	movlw	170
 11383  003B38  6EA7               	movwf	4007,c	;volatile
 11384                           
 11385                           ; BSR set to: 0
 11386                           ;eeprom.c: 57: EECON1 |= 0b10;
 11387  003B3A  82A6               	bsf	4006,1,c	;volatile
 11388  003B3C                     l397:
 11389  003B3C  B2A6               	btfsc	4006,1,c	;volatile
 11390  003B3E  D7FE               	goto	l397
 11391                           
 11392                           ;eeprom.c: 60: EEIF = 0;
 11393  003B40  98A1               	bcf	4001,4,c	;volatile
 11394                           
 11395                           ;eeprom.c: 62: EECON1 = 0;
 11396  003B42  0E00               	movlw	0
 11397  003B44  6EA6               	movwf	4006,c	;volatile
 11398                           
 11399                           ;eeprom.c: 63: INTCONbits.GIE = ien;
 11400  003B46  0100               	movlb	0	; () banked
 11401  003B48  B187               	btfsc	eepromWrite@ien& (0+255),0,b
 11402  003B4A  D002               	bra	u7655
 11403  003B4C  9EF2               	bcf	intcon,7,c	;volatile
 11404  003B4E  D001               	bra	u7656
 11405  003B50                     u7655:
 11406  003B50  8EF2               	bsf	intcon,7,c	;volatile
 11407  003B52                     u7656:
 11408  003B52  0012               	return		;funcret
 11409  003B54                     __end_of_eepromWrite:
 11410                           	opt stack 0
 11411                           tblptru	equ	0xFF8
 11412                           tblptrh	equ	0xFF7
 11413                           tblptrl	equ	0xFF6
 11414                           tablat	equ	0xFF5
 11415                           prodh	equ	0xFF4
 11416                           prodl	equ	0xFF3
 11417                           intcon	equ	0xFF2
 11418                           postinc0	equ	0xFEE
 11419                           wreg	equ	0xFE8
 11420                           postdec1	equ	0xFE5
 11421                           fsr1l	equ	0xFE1
 11422                           indf2	equ	0xFDF
 11423                           postinc2	equ	0xFDE
 11424                           postdec2	equ	0xFDD
 11425                           fsr2h	equ	0xFDA
 11426                           fsr2l	equ	0xFD9
 11427                           status	equ	0xFD8
 11428                           
 11429 ;; *************** function _eepromRead *****************
 11430 ;; Defined at:
 11431 ;;		line 66 in file "eeprom.c"
 11432 ;; Parameters:    Size  Location     Type
 11433 ;;  address         4   54[COMRAM] long 
 11434 ;; Auto vars:     Size  Location     Type
 11435 ;;		None
 11436 ;; Return value:  Size  Location     Type
 11437 ;;                  2   54[COMRAM] int 
 11438 ;; Registers used:
 11439 ;;		wreg, status,2, status,0
 11440 ;; Tracked objects:
 11441 ;;		On entry : 0/0
 11442 ;;		On exit  : 0/0
 11443 ;;		Unchanged: 0/0
 11444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11445 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11448 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11449 ;;Total ram usage:        4 bytes
 11450 ;; Hardware stack levels used:    1
 11451 ;; Hardware stack levels required when called:    3
 11452 ;; This function calls:
 11453 ;;		Nothing
 11454 ;; This function is called by:
 11455 ;;		_readPastRun
 11456 ;;		_saveNewRun
 11457 ;;		_debug
 11458 ;; This function uses a non-reentrant model
 11459 ;;
 11460                           
 11461                           	psect	text46
 11462  003F2E                     __ptext46:
 11463                           	opt stack 0
 11464  003F2E                     _eepromRead:
 11465                           	opt stack 25
 11466                           
 11467                           ;eeprom.c: 67: EEADR = address;
 11468                           
 11469                           ;incstack = 0
 11470  003F2E  C037  FFA9         	movff	eepromRead@address,4009	;volatile
 11471                           
 11472                           ;eeprom.c: 68: EEADRH = (address>>8) & 0b11;
 11473  003F32  5038               	movf	eepromRead@address+1,w,c
 11474  003F34  0B03               	andlw	3
 11475  003F36  6EAA               	movwf	4010,c	;volatile
 11476                           
 11477                           ;eeprom.c: 69: EECON1 = 0;
 11478  003F38  0E00               	movlw	0
 11479  003F3A  6EA6               	movwf	4006,c	;volatile
 11480                           
 11481                           ;eeprom.c: 70: EECON1 = 1;
 11482  003F3C  0E01               	movlw	1
 11483  003F3E  6EA6               	movwf	4006,c	;volatile
 11484                           
 11485                           ;eeprom.c: 71: return EEDATA;
 11486  003F40  CFA8 F037          	movff	4008,?_eepromRead	;volatile
 11487  003F44  6A38               	clrf	?_eepromRead+1,c
 11488  003F46  0012               	return	
 11489  003F48                     __end_of_eepromRead:
 11490                           	opt stack 0
 11491                           tblptru	equ	0xFF8
 11492                           tblptrh	equ	0xFF7
 11493                           tblptrl	equ	0xFF6
 11494                           tablat	equ	0xFF5
 11495                           prodh	equ	0xFF4
 11496                           prodl	equ	0xFF3
 11497                           intcon	equ	0xFF2
 11498                           postinc0	equ	0xFEE
 11499                           wreg	equ	0xFE8
 11500                           postdec1	equ	0xFE5
 11501                           fsr1l	equ	0xFE1
 11502                           indf2	equ	0xFDF
 11503                           postinc2	equ	0xFDE
 11504                           postdec2	equ	0xFDD
 11505                           fsr2h	equ	0xFDA
 11506                           fsr2l	equ	0xFD9
 11507                           status	equ	0xFD8
 11508                           
 11509 ;; *************** function ___wmul *****************
 11510 ;; Defined at:
 11511 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 11512 ;; Parameters:    Size  Location     Type
 11513 ;;  multiplier      2   48[COMRAM] unsigned int 
 11514 ;;  multiplicand    2   50[COMRAM] unsigned int 
 11515 ;; Auto vars:     Size  Location     Type
 11516 ;;  product         2   52[COMRAM] unsigned int 
 11517 ;; Return value:  Size  Location     Type
 11518 ;;                  2   48[COMRAM] unsigned int 
 11519 ;; Registers used:
 11520 ;;		wreg, status,2, status,0, prodl, prodh
 11521 ;; Tracked objects:
 11522 ;;		On entry : 0/0
 11523 ;;		On exit  : 0/0
 11524 ;;		Unchanged: 0/0
 11525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11526 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11527 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11529 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11530 ;;Total ram usage:        6 bytes
 11531 ;; Hardware stack levels used:    1
 11532 ;; Hardware stack levels required when called:    3
 11533 ;; This function calls:
 11534 ;;		Nothing
 11535 ;; This function is called by:
 11536 ;;		_readPastRun
 11537 ;;		_saveNewRun
 11538 ;;		_fround
 11539 ;;		_scale
 11540 ;;		_printf
 11541 ;; This function uses a non-reentrant model
 11542 ;;
 11543                           
 11544                           	psect	text47
 11545  003E44                     __ptext47:
 11546                           	opt stack 0
 11547  003E44                     ___wmul:
 11548                           	opt stack 24
 11549                           
 11550                           ;incstack = 0
 11551  003E44  5031               	movf	___wmul@multiplier,w,c
 11552  003E46  0233               	mulwf	___wmul@multiplicand,c
 11553  003E48  CFF3 F035          	movff	prodl,___wmul@product
 11554  003E4C  CFF4 F036          	movff	prodh,___wmul@product+1
 11555  003E50  5031               	movf	___wmul@multiplier,w,c
 11556  003E52  0234               	mulwf	___wmul@multiplicand+1,c
 11557  003E54  50F3               	movf	prodl,w,c
 11558  003E56  2636               	addwf	___wmul@product+1,f,c
 11559  003E58  5032               	movf	___wmul@multiplier+1,w,c
 11560  003E5A  0233               	mulwf	___wmul@multiplicand,c
 11561  003E5C  50F3               	movf	prodl,w,c
 11562  003E5E  2636               	addwf	___wmul@product+1,f,c
 11563  003E60  C035  F031         	movff	___wmul@product,?___wmul
 11564  003E64  C036  F032         	movff	___wmul@product+1,?___wmul+1
 11565  003E68  0012               	return	
 11566  003E6A                     __end_of___wmul:
 11567                           	opt stack 0
 11568                           tblptru	equ	0xFF8
 11569                           tblptrh	equ	0xFF7
 11570                           tblptrl	equ	0xFF6
 11571                           tablat	equ	0xFF5
 11572                           prodh	equ	0xFF4
 11573                           prodl	equ	0xFF3
 11574                           intcon	equ	0xFF2
 11575                           postinc0	equ	0xFEE
 11576                           wreg	equ	0xFE8
 11577                           postdec1	equ	0xFE5
 11578                           fsr1l	equ	0xFE1
 11579                           indf2	equ	0xFDF
 11580                           postinc2	equ	0xFDE
 11581                           postdec2	equ	0xFDD
 11582                           fsr2h	equ	0xFDA
 11583                           fsr2l	equ	0xFD9
 11584                           status	equ	0xFD8
 11585                           
 11586 ;; *************** function _pinSetup *****************
 11587 ;; Defined at:
 11588 ;;		line 301 in file "main.c"
 11589 ;; Parameters:    Size  Location     Type
 11590 ;;		None
 11591 ;; Auto vars:     Size  Location     Type
 11592 ;;		None
 11593 ;; Return value:  Size  Location     Type
 11594 ;;                  1    wreg      void 
 11595 ;; Registers used:
 11596 ;;		wreg, status,2, status,0
 11597 ;; Tracked objects:
 11598 ;;		On entry : 0/0
 11599 ;;		On exit  : 0/0
 11600 ;;		Unchanged: 0/0
 11601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11605 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11606 ;;Total ram usage:        0 bytes
 11607 ;; Hardware stack levels used:    1
 11608 ;; Hardware stack levels required when called:    3
 11609 ;; This function calls:
 11610 ;;		Nothing
 11611 ;; This function is called by:
 11612 ;;		_main
 11613 ;;		_debug
 11614 ;; This function uses a non-reentrant model
 11615 ;;
 11616                           
 11617                           	psect	text48
 11618  003D18                     __ptext48:
 11619                           	opt stack 0
 11620  003D18                     _pinSetup:
 11621                           	opt stack 27
 11622                           
 11623                           ;main.c: 307: TRISA = 0xFF;
 11624                           
 11625                           ;incstack = 0
 11626  003D18  6892               	setf	3986,c	;volatile
 11627                           
 11628                           ;main.c: 308: TRISB = 0xFF;
 11629  003D1A  6893               	setf	3987,c	;volatile
 11630                           
 11631                           ;main.c: 309: TRISC = 0b11000000;
 11632  003D1C  0EC0               	movlw	192
 11633  003D1E  6E94               	movwf	3988,c	;volatile
 11634                           
 11635                           ;main.c: 310: TRISD = 0x00;
 11636  003D20  0E00               	movlw	0
 11637  003D22  6E95               	movwf	3989,c	;volatile
 11638                           
 11639                           ;main.c: 311: TRISE = 0x00;
 11640  003D24  0E00               	movlw	0
 11641  003D26  6E96               	movwf	3990,c	;volatile
 11642                           
 11643                           ;main.c: 313: LATA = 0x00;
 11644  003D28  0E00               	movlw	0
 11645  003D2A  6E89               	movwf	3977,c	;volatile
 11646                           
 11647                           ;main.c: 314: LATB = 0x00;
 11648  003D2C  0E00               	movlw	0
 11649  003D2E  6E8A               	movwf	3978,c	;volatile
 11650                           
 11651                           ;main.c: 315: LATC = 0x00;
 11652  003D30  0E00               	movlw	0
 11653  003D32  6E8B               	movwf	3979,c	;volatile
 11654                           
 11655                           ;main.c: 316: LATD = 0x00;
 11656  003D34  0E00               	movlw	0
 11657  003D36  6E8C               	movwf	3980,c	;volatile
 11658                           
 11659                           ;main.c: 317: LATE = 0x00;
 11660  003D38  0E00               	movlw	0
 11661  003D3A  6E8D               	movwf	3981,c	;volatile
 11662                           
 11663                           ;main.c: 319: ADCON0 = 0x00;
 11664  003D3C  0E00               	movlw	0
 11665  003D3E  6EC2               	movwf	4034,c	;volatile
 11666                           
 11667                           ;main.c: 321: ADCON1 |= 0x0B;
 11668  003D40  0E0B               	movlw	11
 11669  003D42  12C1               	iorwf	4033,f,c	;volatile
 11670                           
 11671                           ;main.c: 326: ADCON2 = 0;
 11672  003D44  0E00               	movlw	0
 11673  003D46  6EC0               	movwf	4032,c	;volatile
 11674                           
 11675                           ;main.c: 327: ADCON2 |= 0b010;
 11676  003D48  82C0               	bsf	4032,1,c	;volatile
 11677                           
 11678                           ;main.c: 328: ADCON2 |= 0b110<<3;
 11679  003D4A  0E30               	movlw	48
 11680  003D4C  12C0               	iorwf	4032,f,c	;volatile
 11681                           
 11682                           ;main.c: 329: ADCON2 |= 1<<7;
 11683  003D4E  8EC0               	bsf	4032,7,c	;volatile
 11684                           
 11685                           ;main.c: 332: INT1IE = 1;
 11686  003D50  86F0               	bsf	intcon3,3,c	;volatile
 11687                           
 11688                           ;main.c: 333: INT0IE = 1;
 11689  003D52  88F2               	bsf	intcon,4,c	;volatile
 11690                           
 11691                           ;main.c: 334: (INTCONbits.GIE = 1);
 11692  003D54  8EF2               	bsf	intcon,7,c	;volatile
 11693  003D56  0012               	return		;funcret
 11694  003D58                     __end_of_pinSetup:
 11695                           	opt stack 0
 11696                           tblptru	equ	0xFF8
 11697                           tblptrh	equ	0xFF7
 11698                           tblptrl	equ	0xFF6
 11699                           tablat	equ	0xFF5
 11700                           prodh	equ	0xFF4
 11701                           prodl	equ	0xFF3
 11702                           intcon	equ	0xFF2
 11703                           intcon3	equ	0xFF0
 11704                           postinc0	equ	0xFEE
 11705                           wreg	equ	0xFE8
 11706                           postdec1	equ	0xFE5
 11707                           fsr1l	equ	0xFE1
 11708                           indf2	equ	0xFDF
 11709                           postinc2	equ	0xFDE
 11710                           postdec2	equ	0xFDD
 11711                           fsr2h	equ	0xFDA
 11712                           fsr2l	equ	0xFD9
 11713                           status	equ	0xFD8
 11714                           
 11715 ;; *************** function _initServo *****************
 11716 ;; Defined at:
 11717 ;;		line 21 in file "servo.c"
 11718 ;; Parameters:    Size  Location     Type
 11719 ;;  motor           2   94[BANK0 ] PTR int 
 11720 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
 11721 ;;  angle           2   96[BANK0 ] int 
 11722 ;; Auto vars:     Size  Location     Type
 11723 ;;  i               2  102[BANK0 ] int 
 11724 ;; Return value:  Size  Location     Type
 11725 ;;                  1    wreg      void 
 11726 ;; Registers used:
 11727 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11728 ;; Tracked objects:
 11729 ;;		On entry : 0/0
 11730 ;;		On exit  : 0/0
 11731 ;;		Unchanged: 0/0
 11732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11733 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11734 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11735 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11736 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11737 ;;Total ram usage:       10 bytes
 11738 ;; Hardware stack levels used:    1
 11739 ;; Hardware stack levels required when called:    7
 11740 ;; This function calls:
 11741 ;;		_initTimer
 11742 ;;		_setAngle
 11743 ;;		_startTimer
 11744 ;; This function is called by:
 11745 ;;		_main
 11746 ;; This function uses a non-reentrant model
 11747 ;;
 11748                           
 11749                           	psect	text49
 11750  002D4C                     __ptext49:
 11751                           	opt stack 0
 11752  002D4C                     _initServo:
 11753                           	opt stack 23
 11754                           
 11755                           ;servo.c: 24: for(int i = 0; i < n; i++){
 11756                           
 11757                           ;incstack = 0
 11758  002D4C  0E00               	movlw	0
 11759  002D4E  0100               	movlb	0	; () banked
 11760  002D50  6FE7               	movwf	(initServo@i+1)& (0+255),b
 11761  002D52  0E00               	movlw	0
 11762  002D54  6FE6               	movwf	initServo@i& (0+255),b
 11763  002D56  D017               	goto	l7494
 11764  002D58                     l7488:
 11765                           
 11766                           ; BSR set to: 0
 11767                           ;servo.c: 25: if(servos[i] == motor)return;
 11768  002D58  90D8               	bcf	status,0,c
 11769  002D5A  0100               	movlb	0	; () banked
 11770  002D5C  35E6               	rlcf	initServo@i& (0+255),w,b
 11771  002D5E  6ED9               	movwf	fsr2l,c
 11772  002D60  0100               	movlb	0	; () banked
 11773  002D62  35E7               	rlcf	(initServo@i+1)& (0+255),w,b
 11774  002D64  6EDA               	movwf	fsr2h,c
 11775  002D66  0E4D               	movlw	low _servos
 11776  002D68  26D9               	addwf	fsr2l,f,c
 11777  002D6A  0E01               	movlw	high _servos
 11778  002D6C  22DA               	addwfc	fsr2h,f,c
 11779  002D6E  0100               	movlb	0	; () banked
 11780  002D70  51DE               	movf	initServo@motor& (0+255),w,b
 11781  002D72  18DE               	xorwf	postinc2,w,c
 11782  002D74  E105               	bnz	l7492
 11783  002D76  0100               	movlb	0	; () banked
 11784  002D78  51DF               	movf	(initServo@motor+1)& (0+255),w,b
 11785  002D7A  18DE               	xorwf	postinc2,w,c
 11786  002D7C  B4D8               	btfsc	status,2,c
 11787  002D7E  0012               	return	
 11788  002D80                     l7492:
 11789                           
 11790                           ; BSR set to: 0
 11791  002D80  0100               	movlb	0	; () banked
 11792  002D82  4BE6               	infsnz	initServo@i& (0+255),f,b
 11793  002D84  2BE7               	incf	(initServo@i+1)& (0+255),f,b
 11794  002D86                     l7494:
 11795                           
 11796                           ; BSR set to: 0
 11797  002D86  0100               	movlb	0	; () banked
 11798  002D88  51FB               	movf	_n& (0+255),w,b
 11799  002D8A  0100               	movlb	0	; () banked
 11800  002D8C  5DE6               	subwf	initServo@i& (0+255),w,b
 11801  002D8E  0100               	movlb	0	; () banked
 11802  002D90  51E7               	movf	(initServo@i+1)& (0+255),w,b
 11803  002D92  0A80               	xorlw	128
 11804  002D94  0100               	movlb	0	; () banked
 11805  002D96  6FE2               	movwf	??_initServo& (0+255),b
 11806  002D98  0100               	movlb	0	; () banked
 11807  002D9A  51FC               	movf	(_n+1)& (0+255),w,b
 11808  002D9C  0A80               	xorlw	128
 11809  002D9E  0100               	movlb	0	; () banked
 11810  002DA0  59E2               	subwfb	??_initServo& (0+255),w,b
 11811  002DA2  A0D8               	btfss	status,0,c
 11812  002DA4  D7D9               	goto	l7488
 11813                           
 11814                           ; BSR set to: 0
 11815                           ;servo.c: 26: }
 11816                           ;servo.c: 28: n++;
 11817                           
 11818                           ; BSR set to: 0
 11819  002DA6  0100               	movlb	0	; () banked
 11820  002DA8  4BFB               	infsnz	_n& (0+255),f,b
 11821  002DAA  2BFC               	incf	(_n+1)& (0+255),f,b
 11822                           
 11823                           ; BSR set to: 0
 11824                           ;servo.c: 29: servos[n-1] = motor;
 11825  002DAC  0EFE               	movlw	254
 11826  002DAE  0100               	movlb	0	; () banked
 11827  002DB0  6FE2               	movwf	??_initServo& (0+255),b
 11828  002DB2  0EFF               	movlw	255
 11829  002DB4  0100               	movlb	0	; () banked
 11830  002DB6  6FE3               	movwf	(??_initServo+1)& (0+255),b
 11831  002DB8  C0FB  F0E4         	movff	_n,??_initServo+2
 11832  002DBC  C0FC  F0E5         	movff	_n+1,??_initServo+3
 11833  002DC0  90D8               	bcf	status,0,c
 11834  002DC2  0100               	movlb	0	; () banked
 11835  002DC4  37E4               	rlcf	(??_initServo+2)& (0+255),f,b
 11836  002DC6  37E5               	rlcf	(??_initServo+3)& (0+255),f,b
 11837  002DC8  0100               	movlb	0	; () banked
 11838  002DCA  51E2               	movf	??_initServo& (0+255),w,b
 11839  002DCC  0100               	movlb	0	; () banked
 11840  002DCE  27E4               	addwf	(??_initServo+2)& (0+255),f,b
 11841  002DD0  0100               	movlb	0	; () banked
 11842  002DD2  51E3               	movf	(??_initServo+1)& (0+255),w,b
 11843  002DD4  0100               	movlb	0	; () banked
 11844  002DD6  23E5               	addwfc	(??_initServo+3)& (0+255),f,b
 11845  002DD8  0E4D               	movlw	low _servos
 11846  002DDA  0100               	movlb	0	; () banked
 11847  002DDC  25E4               	addwf	(??_initServo+2)& (0+255),w,b
 11848  002DDE  6ED9               	movwf	fsr2l,c
 11849  002DE0  0E01               	movlw	high _servos
 11850  002DE2  0100               	movlb	0	; () banked
 11851  002DE4  21E5               	addwfc	(??_initServo+3)& (0+255),w,b
 11852  002DE6  6EDA               	movwf	fsr2h,c
 11853  002DE8  C0DE  FFDE         	movff	initServo@motor,postinc2
 11854  002DEC  C0DF  FFDD         	movff	initServo@motor+1,postdec2
 11855                           
 11856                           ; BSR set to: 0
 11857                           ;servo.c: 30: setAngle(motor, angle);
 11858  002DF0  C0DE  F0D4         	movff	initServo@motor,setAngle@motor
 11859  002DF4  C0DF  F0D5         	movff	initServo@motor+1,setAngle@motor+1
 11860  002DF8  C0E0  F0D6         	movff	initServo@angle,setAngle@angle
 11861  002DFC  C0E1  F0D7         	movff	initServo@angle+1,setAngle@angle+1
 11862  002E00  EC17  F017         	call	_setAngle	;wreg free
 11863                           
 11864                           ;servo.c: 32: initTimer(0);
 11865  002E04  0E00               	movlw	0
 11866  002E06  6E24               	movwf	initTimer@timer+1,c
 11867  002E08  0E00               	movlw	0
 11868  002E0A  6E23               	movwf	initTimer@timer,c
 11869  002E0C  EC44  F01E         	call	_initTimer	;wreg free
 11870                           
 11871                           ;servo.c: 33: startTimer(0,0);
 11872  002E10  0E00               	movlw	0
 11873  002E12  6E24               	movwf	startTimer@timer+1,c
 11874  002E14  0E00               	movlw	0
 11875  002E16  6E23               	movwf	startTimer@timer,c
 11876  002E18  0E00               	movlw	0
 11877  002E1A  6E25               	movwf	startTimer@val,c
 11878  002E1C  0E00               	movlw	0
 11879  002E1E  6E26               	movwf	startTimer@val+1,c
 11880  002E20  0E00               	movlw	0
 11881  002E22  6E27               	movwf	startTimer@val+2,c
 11882  002E24  0E00               	movlw	0
 11883  002E26  6E28               	movwf	startTimer@val+3,c
 11884  002E28  ECF8  F01D         	call	_startTimer	;wreg free
 11885  002E2C  0012               	return		;funcret
 11886  002E2E                     __end_of_initServo:
 11887                           	opt stack 0
 11888                           tblptru	equ	0xFF8
 11889                           tblptrh	equ	0xFF7
 11890                           tblptrl	equ	0xFF6
 11891                           tablat	equ	0xFF5
 11892                           prodh	equ	0xFF4
 11893                           prodl	equ	0xFF3
 11894                           intcon	equ	0xFF2
 11895                           intcon3	equ	0xFF0
 11896                           postinc0	equ	0xFEE
 11897                           wreg	equ	0xFE8
 11898                           postdec1	equ	0xFE5
 11899                           fsr1l	equ	0xFE1
 11900                           indf2	equ	0xFDF
 11901                           postinc2	equ	0xFDE
 11902                           postdec2	equ	0xFDD
 11903                           fsr2h	equ	0xFDA
 11904                           fsr2l	equ	0xFD9
 11905                           status	equ	0xFD8
 11906                           
 11907 ;; *************** function _startTimer *****************
 11908 ;; Defined at:
 11909 ;;		line 76 in file "timer.c"
 11910 ;; Parameters:    Size  Location     Type
 11911 ;;  timer           2   34[COMRAM] int 
 11912 ;;  val             4   36[COMRAM] long 
 11913 ;; Auto vars:     Size  Location     Type
 11914 ;;		None
 11915 ;; Return value:  Size  Location     Type
 11916 ;;                  1    wreg      void 
 11917 ;; Registers used:
 11918 ;;		wreg, status,2, status,0
 11919 ;; Tracked objects:
 11920 ;;		On entry : 0/0
 11921 ;;		On exit  : 0/0
 11922 ;;		Unchanged: 0/0
 11923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11924 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11926 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11927 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11928 ;;Total ram usage:        8 bytes
 11929 ;; Hardware stack levels used:    1
 11930 ;; Hardware stack levels required when called:    3
 11931 ;; This function calls:
 11932 ;;		Nothing
 11933 ;; This function is called by:
 11934 ;;		_main
 11935 ;;		_initServo
 11936 ;;		_testFrequency
 11937 ;; This function uses a non-reentrant model
 11938 ;;
 11939                           
 11940                           	psect	text50
 11941  003BF0                     __ptext50:
 11942                           	opt stack 0
 11943  003BF0                     _startTimer:
 11944                           	opt stack 27
 11945                           
 11946                           ;timer.c: 77: switch(timer){
 11947                           
 11948                           ;incstack = 0
 11949  003BF0  D012               	goto	l5050
 11950  003BF2                     l455:
 11951                           
 11952                           ;timer.c: 79: TMR0H = val>>8;
 11953  003BF2  C026  FFD7         	movff	startTimer@val+1,4055	;volatile
 11954                           
 11955                           ;timer.c: 80: TMR0L = val;
 11956  003BF6  C025  FFD6         	movff	startTimer@val,4054	;volatile
 11957                           
 11958                           ;timer.c: 81: T0CON |= 1<<7;
 11959  003BFA  8ED5               	bsf	4053,7,c	;volatile
 11960                           
 11961                           ;timer.c: 82: break;
 11962  003BFC  0012               	return	
 11963  003BFE                     l457:
 11964                           
 11965                           ;timer.c: 84: TMR1H = val>>8;
 11966  003BFE  C026  FFCF         	movff	startTimer@val+1,4047	;volatile
 11967                           
 11968                           ;timer.c: 85: TMR1L = val;
 11969  003C02  C025  FFCE         	movff	startTimer@val,4046	;volatile
 11970                           
 11971                           ;timer.c: 86: T1CON |= 1<<0;
 11972  003C06  80CD               	bsf	4045,0,c	;volatile
 11973                           
 11974                           ;timer.c: 87: break;
 11975  003C08  0012               	return	
 11976  003C0A                     l458:
 11977                           
 11978                           ;timer.c: 89: TMR3H = val>>8;
 11979  003C0A  C026  FFB3         	movff	startTimer@val+1,4019	;volatile
 11980                           
 11981                           ;timer.c: 90: TMR3L = val;
 11982  003C0E  C025  FFB2         	movff	startTimer@val,4018	;volatile
 11983                           
 11984                           ;timer.c: 91: T3CON |= 1<<0;
 11985  003C12  80B1               	bsf	4017,0,c	;volatile
 11986                           
 11987                           ;timer.c: 92: }
 11988  003C14  0012               	return	
 11989  003C16                     l5050:
 11990  003C16  C023  F029         	movff	startTimer@timer,??_startTimer
 11991  003C1A  C024  F02A         	movff	startTimer@timer+1,??_startTimer+1
 11992                           
 11993                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11994                           ; Switch size 1, requested type "space"
 11995                           ; Number of cases is 1, Range of values is 0 to 0
 11996                           ; switch strategies available:
 11997                           ; Name         Instructions Cycles
 11998                           ; simple_byte            4     3 (average)
 11999                           ;	Chosen strategy is simple_byte
 12000  003C1E  502A               	movf	??_startTimer+1,w,c
 12001  003C20  0A00               	xorlw	0	; case 0
 12002  003C22  A4D8               	btfss	status,2,c
 12003  003C24  0012               	return	
 12004                           
 12005                           ; Switch size 1, requested type "space"
 12006                           ; Number of cases is 3, Range of values is 0 to 3
 12007                           ; switch strategies available:
 12008                           ; Name         Instructions Cycles
 12009                           ; simple_byte           10     6 (average)
 12010                           ;	Chosen strategy is simple_byte
 12011  003C26  5029               	movf	??_startTimer,w,c
 12012  003C28  0A00               	xorlw	0	; case 0
 12013  003C2A  B4D8               	btfsc	status,2,c
 12014  003C2C  D7E2               	goto	l455
 12015  003C2E  0A01               	xorlw	1	; case 1
 12016  003C30  B4D8               	btfsc	status,2,c
 12017  003C32  D7E5               	goto	l457
 12018  003C34  0A02               	xorlw	2	; case 3
 12019  003C36  A4D8               	btfss	status,2,c
 12020  003C38  0012               	return	
 12021  003C3A  D7E7               	goto	l458
 12022  003C3C                     __end_of_startTimer:
 12023                           	opt stack 0
 12024                           tblptru	equ	0xFF8
 12025                           tblptrh	equ	0xFF7
 12026                           tblptrl	equ	0xFF6
 12027                           tablat	equ	0xFF5
 12028                           prodh	equ	0xFF4
 12029                           prodl	equ	0xFF3
 12030                           intcon	equ	0xFF2
 12031                           intcon3	equ	0xFF0
 12032                           postinc0	equ	0xFEE
 12033                           wreg	equ	0xFE8
 12034                           postdec1	equ	0xFE5
 12035                           fsr1l	equ	0xFE1
 12036                           indf2	equ	0xFDF
 12037                           postinc2	equ	0xFDE
 12038                           postdec2	equ	0xFDD
 12039                           fsr2h	equ	0xFDA
 12040                           fsr2l	equ	0xFD9
 12041                           status	equ	0xFD8
 12042                           
 12043 ;; *************** function _setAngle *****************
 12044 ;; Defined at:
 12045 ;;		line 44 in file "servo.c"
 12046 ;; Parameters:    Size  Location     Type
 12047 ;;  motor           2   84[BANK0 ] PTR int 
 12048 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
 12049 ;;  angle           2   86[BANK0 ] int 
 12050 ;; Auto vars:     Size  Location     Type
 12051 ;;  i               2   92[BANK0 ] int 
 12052 ;;  period          2   90[BANK0 ] unsigned int 
 12053 ;; Return value:  Size  Location     Type
 12054 ;;                  1    wreg      void 
 12055 ;; Registers used:
 12056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12057 ;; Tracked objects:
 12058 ;;		On entry : 0/0
 12059 ;;		On exit  : 0/0
 12060 ;;		Unchanged: 0/0
 12061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12062 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12063 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12064 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12065 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12066 ;;Total ram usage:       10 bytes
 12067 ;; Hardware stack levels used:    1
 12068 ;; Hardware stack levels required when called:    6
 12069 ;; This function calls:
 12070 ;;		_angleToPulse
 12071 ;; This function is called by:
 12072 ;;		_sortBattery
 12073 ;;		_initServo
 12074 ;; This function uses a non-reentrant model
 12075 ;;
 12076                           
 12077                           	psect	text51
 12078  002E2E                     __ptext51:
 12079                           	opt stack 0
 12080  002E2E                     _setAngle:
 12081                           	opt stack 23
 12082                           
 12083                           ;servo.c: 45: unsigned int period = 50000;
 12084                           
 12085                           ;incstack = 0
 12086  002E2E  0EC3               	movlw	195
 12087  002E30  0100               	movlb	0	; () banked
 12088  002E32  6FDB               	movwf	(setAngle@period+1)& (0+255),b
 12089  002E34  0E50               	movlw	80
 12090  002E36  6FDA               	movwf	setAngle@period& (0+255),b
 12091                           
 12092                           ;servo.c: 46: for(int i = 0; i < n; i++){
 12093  002E38  0E00               	movlw	0
 12094  002E3A  0100               	movlb	0	; () banked
 12095  002E3C  6FDD               	movwf	(setAngle@i+1)& (0+255),b
 12096  002E3E  0E00               	movlw	0
 12097  002E40  6FDC               	movwf	setAngle@i& (0+255),b
 12098  002E42  D03F               	goto	l7256
 12099  002E44                     l7248:
 12100                           
 12101                           ; BSR set to: 0
 12102                           ;servo.c: 47: if(servos[i] == motor){
 12103  002E44  90D8               	bcf	status,0,c
 12104  002E46  0100               	movlb	0	; () banked
 12105  002E48  35DC               	rlcf	setAngle@i& (0+255),w,b
 12106  002E4A  6ED9               	movwf	fsr2l,c
 12107  002E4C  0100               	movlb	0	; () banked
 12108  002E4E  35DD               	rlcf	(setAngle@i+1)& (0+255),w,b
 12109  002E50  6EDA               	movwf	fsr2h,c
 12110  002E52  0E4D               	movlw	low _servos
 12111  002E54  26D9               	addwf	fsr2l,f,c
 12112  002E56  0E01               	movlw	high _servos
 12113  002E58  22DA               	addwfc	fsr2h,f,c
 12114  002E5A  0100               	movlb	0	; () banked
 12115  002E5C  51D4               	movf	setAngle@motor& (0+255),w,b
 12116  002E5E  18DE               	xorwf	postinc2,w,c
 12117  002E60  E11C               	bnz	l7252
 12118  002E62  0100               	movlb	0	; () banked
 12119  002E64  51D5               	movf	(setAngle@motor+1)& (0+255),w,b
 12120  002E66  18DE               	xorwf	postinc2,w,c
 12121  002E68  A4D8               	btfss	status,2,c
 12122  002E6A  D017               	goto	l7252
 12123                           
 12124                           ; BSR set to: 0
 12125                           ;servo.c: 48: pulse[i] = angleToPulse(angle);
 12126  002E6C  C0D6  F0BD         	movff	setAngle@angle,angleToPulse@angle
 12127  002E70  C0D7  F0BE         	movff	setAngle@angle+1,angleToPulse@angle+1
 12128  002E74  EC3A  F011         	call	_angleToPulse	;wreg free
 12129  002E78  90D8               	bcf	status,0,c
 12130  002E7A  0100               	movlb	0	; () banked
 12131  002E7C  35DC               	rlcf	setAngle@i& (0+255),w,b
 12132  002E7E  6ED9               	movwf	fsr2l,c
 12133  002E80  0100               	movlb	0	; () banked
 12134  002E82  35DD               	rlcf	(setAngle@i+1)& (0+255),w,b
 12135  002E84  6EDA               	movwf	fsr2h,c
 12136  002E86  0E45               	movlw	low _pulse
 12137  002E88  26D9               	addwf	fsr2l,f,c
 12138  002E8A  0E01               	movlw	high _pulse
 12139  002E8C  22DA               	addwfc	fsr2h,f,c
 12140  002E8E  0100               	movlb	0	; () banked
 12141  002E90  C0BD  FFDE         	movff	?_angleToPulse,postinc2
 12142  002E94  0100               	movlb	0	; () banked
 12143  002E96  C0BE  FFDD         	movff	?_angleToPulse+1,postdec2
 12144  002E9A                     l7252:
 12145                           
 12146                           ; BSR set to: 0
 12147                           ;servo.c: 49: }
 12148                           ;servo.c: 50: period-=pulse[i];
 12149  002E9A  90D8               	bcf	status,0,c
 12150  002E9C  0100               	movlb	0	; () banked
 12151  002E9E  35DC               	rlcf	setAngle@i& (0+255),w,b
 12152  002EA0  6ED9               	movwf	fsr2l,c
 12153  002EA2  0100               	movlb	0	; () banked
 12154  002EA4  35DD               	rlcf	(setAngle@i+1)& (0+255),w,b
 12155  002EA6  6EDA               	movwf	fsr2h,c
 12156  002EA8  0E45               	movlw	low _pulse
 12157  002EAA  26D9               	addwf	fsr2l,f,c
 12158  002EAC  0E01               	movlw	high _pulse
 12159  002EAE  22DA               	addwfc	fsr2h,f,c
 12160  002EB0  50DE               	movf	postinc2,w,c
 12161  002EB2  0100               	movlb	0	; () banked
 12162  002EB4  5FDA               	subwf	setAngle@period& (0+255),f,b
 12163  002EB6  50DD               	movf	postdec2,w,c
 12164  002EB8  0100               	movlb	0	; () banked
 12165  002EBA  5BDB               	subwfb	(setAngle@period+1)& (0+255),f,b
 12166                           
 12167                           ; BSR set to: 0
 12168  002EBC  0100               	movlb	0	; () banked
 12169  002EBE  4BDC               	infsnz	setAngle@i& (0+255),f,b
 12170  002EC0  2BDD               	incf	(setAngle@i+1)& (0+255),f,b
 12171  002EC2                     l7256:
 12172                           
 12173                           ; BSR set to: 0
 12174  002EC2  0100               	movlb	0	; () banked
 12175  002EC4  51FB               	movf	_n& (0+255),w,b
 12176  002EC6  0100               	movlb	0	; () banked
 12177  002EC8  5DDC               	subwf	setAngle@i& (0+255),w,b
 12178  002ECA  0100               	movlb	0	; () banked
 12179  002ECC  51DD               	movf	(setAngle@i+1)& (0+255),w,b
 12180  002ECE  0A80               	xorlw	128
 12181  002ED0  0100               	movlb	0	; () banked
 12182  002ED2  6FD8               	movwf	??_setAngle& (0+255),b
 12183  002ED4  0100               	movlb	0	; () banked
 12184  002ED6  51FC               	movf	(_n+1)& (0+255),w,b
 12185  002ED8  0A80               	xorlw	128
 12186  002EDA  0100               	movlb	0	; () banked
 12187  002EDC  59D8               	subwfb	??_setAngle& (0+255),w,b
 12188  002EDE  A0D8               	btfss	status,0,c
 12189  002EE0  D7B1               	goto	l7248
 12190                           
 12191                           ; BSR set to: 0
 12192                           ;servo.c: 51: }
 12193                           ;servo.c: 52: pulse[n] = period;
 12194                           
 12195                           ; BSR set to: 0
 12196  002EE2  90D8               	bcf	status,0,c
 12197  002EE4  0100               	movlb	0	; () banked
 12198  002EE6  35FB               	rlcf	_n& (0+255),w,b
 12199  002EE8  6ED9               	movwf	fsr2l,c
 12200  002EEA  0100               	movlb	0	; () banked
 12201  002EEC  35FC               	rlcf	(_n+1)& (0+255),w,b
 12202  002EEE  6EDA               	movwf	fsr2h,c
 12203  002EF0  0E45               	movlw	low _pulse
 12204  002EF2  26D9               	addwf	fsr2l,f,c
 12205  002EF4  0E01               	movlw	high _pulse
 12206  002EF6  22DA               	addwfc	fsr2h,f,c
 12207  002EF8  C0DA  FFDE         	movff	setAngle@period,postinc2
 12208  002EFC  C0DB  FFDD         	movff	setAngle@period+1,postdec2
 12209                           
 12210                           ; BSR set to: 0
 12211  002F00  0012               	return		;funcret
 12212  002F02                     __end_of_setAngle:
 12213                           	opt stack 0
 12214                           tblptru	equ	0xFF8
 12215                           tblptrh	equ	0xFF7
 12216                           tblptrl	equ	0xFF6
 12217                           tablat	equ	0xFF5
 12218                           prodh	equ	0xFF4
 12219                           prodl	equ	0xFF3
 12220                           intcon	equ	0xFF2
 12221                           intcon3	equ	0xFF0
 12222                           postinc0	equ	0xFEE
 12223                           wreg	equ	0xFE8
 12224                           postdec1	equ	0xFE5
 12225                           fsr1l	equ	0xFE1
 12226                           indf2	equ	0xFDF
 12227                           postinc2	equ	0xFDE
 12228                           postdec2	equ	0xFDD
 12229                           fsr2h	equ	0xFDA
 12230                           fsr2l	equ	0xFD9
 12231                           status	equ	0xFD8
 12232                           
 12233 ;; *************** function _angleToPulse *****************
 12234 ;; Defined at:
 12235 ;;		line 36 in file "servo.c"
 12236 ;; Parameters:    Size  Location     Type
 12237 ;;  angle           2   61[BANK0 ] int 
 12238 ;; Auto vars:     Size  Location     Type
 12239 ;;  a000            4   80[BANK0 ] long 
 12240 ;;  a180            4   73[BANK0 ] long 
 12241 ;;  offset          4   69[BANK0 ] long 
 12242 ;; Return value:  Size  Location     Type
 12243 ;;                  4   61[BANK0 ] long 
 12244 ;; Registers used:
 12245 ;;		wreg, status,2, status,0, cstack
 12246 ;; Tracked objects:
 12247 ;;		On entry : 0/0
 12248 ;;		On exit  : 0/0
 12249 ;;		Unchanged: 0/0
 12250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12251 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12252 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12253 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12254 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12255 ;;Total ram usage:       23 bytes
 12256 ;; Hardware stack levels used:    1
 12257 ;; Hardware stack levels required when called:    5
 12258 ;; This function calls:
 12259 ;;		___altoft
 12260 ;;		___awtoft
 12261 ;;		___ftadd
 12262 ;;		___ftdiv
 12263 ;;		___ftmul
 12264 ;;		___fttol
 12265 ;; This function is called by:
 12266 ;;		_setAngle
 12267 ;; This function uses a non-reentrant model
 12268 ;;
 12269                           
 12270                           	psect	text52
 12271  002274                     __ptext52:
 12272                           	opt stack 0
 12273  002274                     _angleToPulse:
 12274                           	opt stack 23
 12275                           
 12276                           ;servo.c: 37: long offset = -600;
 12277                           
 12278                           ; BSR set to: 0
 12279                           ;incstack = 0
 12280  002274  0EA8               	movlw	168
 12281  002276  0100               	movlb	0	; () banked
 12282  002278  6FC5               	movwf	angleToPulse@offset& (0+255),b
 12283  00227A  0EFD               	movlw	253
 12284  00227C  6FC6               	movwf	(angleToPulse@offset+1)& (0+255),b
 12285  00227E  0EFF               	movlw	255
 12286  002280  6FC7               	movwf	(angleToPulse@offset+2)& (0+255),b
 12287  002282  0EFF               	movlw	255
 12288  002284  6FC8               	movwf	(angleToPulse@offset+3)& (0+255),b
 12289                           
 12290                           ;servo.c: 38: long a000 = 1250;
 12291  002286  0EE2               	movlw	226
 12292  002288  0100               	movlb	0	; () banked
 12293  00228A  6FD0               	movwf	angleToPulse@a000& (0+255),b
 12294  00228C  0E04               	movlw	4
 12295  00228E  6FD1               	movwf	(angleToPulse@a000+1)& (0+255),b
 12296  002290  0E00               	movlw	0
 12297  002292  6FD2               	movwf	(angleToPulse@a000+2)& (0+255),b
 12298  002294  0E00               	movlw	0
 12299  002296  6FD3               	movwf	(angleToPulse@a000+3)& (0+255),b
 12300                           
 12301                           ;servo.c: 39: long a180 = 6250;
 12302  002298  0E6A               	movlw	106
 12303  00229A  0100               	movlb	0	; () banked
 12304  00229C  6FC9               	movwf	angleToPulse@a180& (0+255),b
 12305  00229E  0E18               	movlw	24
 12306  0022A0  6FCA               	movwf	(angleToPulse@a180+1)& (0+255),b
 12307  0022A2  0E00               	movlw	0
 12308  0022A4  6FCB               	movwf	(angleToPulse@a180+2)& (0+255),b
 12309  0022A6  0E00               	movlw	0
 12310  0022A8  6FCC               	movwf	(angleToPulse@a180+3)& (0+255),b
 12311                           
 12312                           ; BSR set to: 0
 12313                           ;servo.c: 41: return a000 + angle/180.0*(a180-a000) + offset;
 12314  0022AA  C0D0  F0C1         	movff	angleToPulse@a000,??_angleToPulse
 12315  0022AE  C0D1  F0C2         	movff	angleToPulse@a000+1,??_angleToPulse+1
 12316  0022B2  C0D2  F0C3         	movff	angleToPulse@a000+2,??_angleToPulse+2
 12317  0022B6  C0D3  F0C4         	movff	angleToPulse@a000+3,??_angleToPulse+3
 12318  0022BA  0100               	movlb	0	; () banked
 12319  0022BC  1FC1               	comf	??_angleToPulse& (0+255),f,b
 12320  0022BE  1FC2               	comf	(??_angleToPulse+1)& (0+255),f,b
 12321  0022C0  1FC3               	comf	(??_angleToPulse+2)& (0+255),f,b
 12322  0022C2  1FC4               	comf	(??_angleToPulse+3)& (0+255),f,b
 12323  0022C4  2BC1               	incf	??_angleToPulse& (0+255),f,b
 12324  0022C6  0E00               	movlw	0
 12325  0022C8  23C2               	addwfc	(??_angleToPulse+1)& (0+255),f,b
 12326  0022CA  23C3               	addwfc	(??_angleToPulse+2)& (0+255),f,b
 12327  0022CC  23C4               	addwfc	(??_angleToPulse+3)& (0+255),f,b
 12328  0022CE  0100               	movlb	0	; () banked
 12329  0022D0  51C9               	movf	angleToPulse@a180& (0+255),w,b
 12330  0022D2  0100               	movlb	0	; () banked
 12331  0022D4  25C1               	addwf	??_angleToPulse& (0+255),w,b
 12332  0022D6  6E2B               	movwf	___altoft@c,c
 12333  0022D8  0100               	movlb	0	; () banked
 12334  0022DA  51CA               	movf	(angleToPulse@a180+1)& (0+255),w,b
 12335  0022DC  0100               	movlb	0	; () banked
 12336  0022DE  21C2               	addwfc	(??_angleToPulse+1)& (0+255),w,b
 12337  0022E0  6E2C               	movwf	___altoft@c+1,c
 12338  0022E2  0100               	movlb	0	; () banked
 12339  0022E4  51CB               	movf	(angleToPulse@a180+2)& (0+255),w,b
 12340  0022E6  0100               	movlb	0	; () banked
 12341  0022E8  21C3               	addwfc	(??_angleToPulse+2)& (0+255),w,b
 12342  0022EA  6E2D               	movwf	___altoft@c+2,c
 12343  0022EC  0100               	movlb	0	; () banked
 12344  0022EE  51CC               	movf	(angleToPulse@a180+3)& (0+255),w,b
 12345  0022F0  0100               	movlb	0	; () banked
 12346  0022F2  21C4               	addwfc	(??_angleToPulse+3)& (0+255),w,b
 12347  0022F4  6E2E               	movwf	___altoft@c+3,c
 12348  0022F6  ECB2  F01B         	call	___altoft	;wreg free
 12349  0022FA  C02B  F08C         	movff	?___altoft,___ftmul@f2
 12350  0022FE  C02C  F08D         	movff	?___altoft+1,___ftmul@f2+1
 12351  002302  C02D  F08E         	movff	?___altoft+2,___ftmul@f2+2
 12352  002306  0E00               	movlw	0
 12353  002308  6E38               	movwf	___ftdiv@f2,c
 12354  00230A  0E34               	movlw	52
 12355  00230C  6E39               	movwf	___ftdiv@f2+1,c
 12356  00230E  0E43               	movlw	67
 12357  002310  6E3A               	movwf	___ftdiv@f2+2,c
 12358  002312  C0BD  F02B         	movff	angleToPulse@angle,___awtoft@c
 12359  002316  C0BE  F02C         	movff	angleToPulse@angle+1,___awtoft@c+1
 12360  00231A  ECC8  F01E         	call	___awtoft	;wreg free
 12361  00231E  C02B  F035         	movff	?___awtoft,___ftdiv@f1
 12362  002322  C02C  F036         	movff	?___awtoft+1,___ftdiv@f1+1
 12363  002326  C02D  F037         	movff	?___awtoft+2,___ftdiv@f1+2
 12364  00232A  EC3D  F014         	call	___ftdiv	;wreg free
 12365  00232E  C035  F089         	movff	?___ftdiv,___ftmul@f1
 12366  002332  C036  F08A         	movff	?___ftdiv+1,___ftmul@f1+1
 12367  002336  C037  F08B         	movff	?___ftdiv+2,___ftmul@f1+2
 12368  00233A  EC8B  F010         	call	___ftmul	;wreg free
 12369  00233E  C089  F0A5         	movff	?___ftmul,___ftadd@f2
 12370  002342  C08A  F0A6         	movff	?___ftmul+1,___ftadd@f2+1
 12371  002346  C08B  F0A7         	movff	?___ftmul+2,___ftadd@f2+2
 12372  00234A  C0D0  F02B         	movff	angleToPulse@a000,___altoft@c
 12373  00234E  C0D1  F02C         	movff	angleToPulse@a000+1,___altoft@c+1
 12374  002352  C0D2  F02D         	movff	angleToPulse@a000+2,___altoft@c+2
 12375  002356  C0D3  F02E         	movff	angleToPulse@a000+3,___altoft@c+3
 12376  00235A  ECB2  F01B         	call	___altoft	;wreg free
 12377  00235E  C02B  F0A2         	movff	?___altoft,___ftadd@f1
 12378  002362  C02C  F0A3         	movff	?___altoft+1,___ftadd@f1+1
 12379  002366  C02D  F0A4         	movff	?___altoft+2,___ftadd@f1+2
 12380  00236A  EC6B  F00D         	call	___ftadd	;wreg free
 12381  00236E  C0A2  F0CD         	movff	?___ftadd,_angleToPulse$1418
 12382  002372  C0A3  F0CE         	movff	?___ftadd+1,_angleToPulse$1418+1
 12383  002376  C0A4  F0CF         	movff	?___ftadd+2,_angleToPulse$1418+2
 12384                           
 12385                           ;servo.c: 41: return a000 + angle/180.0*(a180-a000) + offset;
 12386  00237A  C0C5  F02B         	movff	angleToPulse@offset,___altoft@c
 12387  00237E  C0C6  F02C         	movff	angleToPulse@offset+1,___altoft@c+1
 12388  002382  C0C7  F02D         	movff	angleToPulse@offset+2,___altoft@c+2
 12389  002386  C0C8  F02E         	movff	angleToPulse@offset+3,___altoft@c+3
 12390  00238A  ECB2  F01B         	call	___altoft	;wreg free
 12391  00238E  C02B  F0A5         	movff	?___altoft,___ftadd@f2
 12392  002392  C02C  F0A6         	movff	?___altoft+1,___ftadd@f2+1
 12393  002396  C02D  F0A7         	movff	?___altoft+2,___ftadd@f2+2
 12394  00239A  C0CD  F0A2         	movff	_angleToPulse$1418,___ftadd@f1
 12395  00239E  C0CE  F0A3         	movff	_angleToPulse$1418+1,___ftadd@f1+1
 12396  0023A2  C0CF  F0A4         	movff	_angleToPulse$1418+2,___ftadd@f1+2
 12397  0023A6  EC6B  F00D         	call	___ftadd	;wreg free
 12398  0023AA  C0A2  F0AE         	movff	?___ftadd,___fttol@f1
 12399  0023AE  C0A3  F0AF         	movff	?___ftadd+1,___fttol@f1+1
 12400  0023B2  C0A4  F0B0         	movff	?___ftadd+2,___fttol@f1+2
 12401  0023B6  ECE6  F011         	call	___fttol	;wreg free
 12402  0023BA  C0AE  F0BD         	movff	?___fttol,?_angleToPulse
 12403  0023BE  C0AF  F0BE         	movff	?___fttol+1,?_angleToPulse+1
 12404  0023C2  C0B0  F0BF         	movff	?___fttol+2,?_angleToPulse+2
 12405  0023C6  C0B1  F0C0         	movff	?___fttol+3,?_angleToPulse+3
 12406  0023CA  0012               	return	
 12407  0023CC                     __end_of_angleToPulse:
 12408                           	opt stack 0
 12409                           tblptru	equ	0xFF8
 12410                           tblptrh	equ	0xFF7
 12411                           tblptrl	equ	0xFF6
 12412                           tablat	equ	0xFF5
 12413                           prodh	equ	0xFF4
 12414                           prodl	equ	0xFF3
 12415                           intcon	equ	0xFF2
 12416                           intcon3	equ	0xFF0
 12417                           postinc0	equ	0xFEE
 12418                           wreg	equ	0xFE8
 12419                           postdec1	equ	0xFE5
 12420                           fsr1l	equ	0xFE1
 12421                           indf2	equ	0xFDF
 12422                           postinc2	equ	0xFDE
 12423                           postdec2	equ	0xFDD
 12424                           fsr2h	equ	0xFDA
 12425                           fsr2l	equ	0xFD9
 12426                           status	equ	0xFD8
 12427                           
 12428 ;; *************** function ___fttol *****************
 12429 ;; Defined at:
 12430 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 12431 ;; Parameters:    Size  Location     Type
 12432 ;;  f1              3   46[BANK0 ] float 
 12433 ;; Auto vars:     Size  Location     Type
 12434 ;;  lval            4   56[BANK0 ] unsigned long 
 12435 ;;  exp1            1   60[BANK0 ] unsigned char 
 12436 ;;  sign1           1   55[BANK0 ] unsigned char 
 12437 ;; Return value:  Size  Location     Type
 12438 ;;                  4   46[BANK0 ] long 
 12439 ;; Registers used:
 12440 ;;		wreg, status,2, status,0
 12441 ;; Tracked objects:
 12442 ;;		On entry : 0/0
 12443 ;;		On exit  : 0/0
 12444 ;;		Unchanged: 0/0
 12445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12446 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12447 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12448 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12449 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12450 ;;Total ram usage:       15 bytes
 12451 ;; Hardware stack levels used:    1
 12452 ;; Hardware stack levels required when called:    3
 12453 ;; This function calls:
 12454 ;;		Nothing
 12455 ;; This function is called by:
 12456 ;;		_sortBattery
 12457 ;;		_angleToPulse
 12458 ;;		_printf
 12459 ;; This function uses a non-reentrant model
 12460 ;;
 12461                           
 12462                           	psect	text53
 12463  0023CC                     __ptext53:
 12464                           	opt stack 0
 12465  0023CC                     ___fttol:
 12466                           	opt stack 24
 12467                           
 12468                           ;incstack = 0
 12469  0023CC  C0B0  F0B2         	movff	___fttol@f1+2,??___fttol
 12470  0023D0  0100               	movlb	0	; () banked
 12471  0023D2  6BB3               	clrf	(??___fttol+1)& (0+255),b
 12472  0023D4  6BB4               	clrf	(??___fttol+2)& (0+255),b
 12473  0023D6  0100               	movlb	0	; () banked
 12474  0023D8  35AF               	rlcf	(___fttol@f1+1)& (0+255),w,b
 12475  0023DA  0100               	movlb	0	; () banked
 12476  0023DC  37B2               	rlcf	??___fttol& (0+255),f,b
 12477  0023DE  E301               	bnc	u6481
 12478  0023E0  81B3               	bsf	(??___fttol+1)& (0+255),0,b
 12479  0023E2                     u6481:
 12480  0023E2  0100               	movlb	0	; () banked
 12481  0023E4  51B2               	movf	??___fttol& (0+255),w,b
 12482  0023E6  0100               	movlb	0	; () banked
 12483  0023E8  6FBC               	movwf	___fttol@exp1& (0+255),b
 12484  0023EA  0100               	movlb	0	; () banked
 12485  0023EC  51BC               	movf	___fttol@exp1& (0+255),w,b
 12486  0023EE  A4D8               	btfss	status,2,c
 12487  0023F0  D00A               	goto	l6604
 12488                           
 12489                           ; BSR set to: 0
 12490  0023F2  0E00               	movlw	0
 12491  0023F4  0100               	movlb	0	; () banked
 12492  0023F6  6FAE               	movwf	?___fttol& (0+255),b
 12493  0023F8  0E00               	movlw	0
 12494  0023FA  6FAF               	movwf	(?___fttol+1)& (0+255),b
 12495  0023FC  0E00               	movlw	0
 12496  0023FE  6FB0               	movwf	(?___fttol+2)& (0+255),b
 12497  002400  0E00               	movlw	0
 12498  002402  6FB1               	movwf	(?___fttol+3)& (0+255),b
 12499                           
 12500                           ; BSR set to: 0
 12501  002404  0012               	return	
 12502  002406                     l6604:
 12503                           
 12504                           ; BSR set to: 0
 12505  002406  0E17               	movlw	23
 12506  002408  0100               	movlb	0	; () banked
 12507  00240A  6FB2               	movwf	??___fttol& (0+255),b
 12508  00240C  C0AE  F0B3         	movff	___fttol@f1,??___fttol+1
 12509  002410  C0AF  F0B4         	movff	___fttol@f1+1,??___fttol+2
 12510  002414  C0B0  F0B5         	movff	___fttol@f1+2,??___fttol+3
 12511  002418  0100               	movlb	0	; () banked
 12512  00241A  29B2               	incf	??___fttol& (0+255),w,b
 12513  00241C  0100               	movlb	0	; () banked
 12514  00241E  6FB6               	movwf	(??___fttol+4)& (0+255),b
 12515  002420  D005               	goto	u6500
 12516  002422                     u6505:
 12517  002422  0100               	movlb	0	; () banked
 12518  002424  90D8               	bcf	status,0,c
 12519  002426  33B5               	rrcf	(??___fttol+3)& (0+255),f,b
 12520  002428  33B4               	rrcf	(??___fttol+2)& (0+255),f,b
 12521  00242A  33B3               	rrcf	(??___fttol+1)& (0+255),f,b
 12522  00242C                     u6500:
 12523  00242C  0100               	movlb	0	; () banked
 12524  00242E  2FB6               	decfsz	(??___fttol+4)& (0+255),f,b
 12525  002430  D7F8               	goto	u6505
 12526  002432  0100               	movlb	0	; () banked
 12527  002434  51B3               	movf	(??___fttol+1)& (0+255),w,b
 12528  002436  0100               	movlb	0	; () banked
 12529  002438  6FB7               	movwf	___fttol@sign1& (0+255),b
 12530                           
 12531                           ; BSR set to: 0
 12532  00243A  0100               	movlb	0	; () banked
 12533  00243C  8FAF               	bsf	(___fttol@f1+1)& (0+255),7,b
 12534                           
 12535                           ; BSR set to: 0
 12536  00243E  0EFF               	movlw	255
 12537  002440  0100               	movlb	0	; () banked
 12538  002442  17AE               	andwf	___fttol@f1& (0+255),f,b
 12539  002444  0EFF               	movlw	255
 12540  002446  0100               	movlb	0	; () banked
 12541  002448  17AF               	andwf	(___fttol@f1+1)& (0+255),f,b
 12542  00244A  0E00               	movlw	0
 12543  00244C  0100               	movlb	0	; () banked
 12544  00244E  17B0               	andwf	(___fttol@f1+2)& (0+255),f,b
 12545                           
 12546                           ; BSR set to: 0
 12547  002450  0100               	movlb	0	; () banked
 12548  002452  51AE               	movf	___fttol@f1& (0+255),w,b
 12549  002454  0100               	movlb	0	; () banked
 12550  002456  6FB8               	movwf	___fttol@lval& (0+255),b
 12551  002458  0100               	movlb	0	; () banked
 12552  00245A  51AF               	movf	(___fttol@f1+1)& (0+255),w,b
 12553  00245C  0100               	movlb	0	; () banked
 12554  00245E  6FB9               	movwf	(___fttol@lval+1)& (0+255),b
 12555  002460  0100               	movlb	0	; () banked
 12556  002462  51B0               	movf	(___fttol@f1+2)& (0+255),w,b
 12557  002464  0100               	movlb	0	; () banked
 12558  002466  6FBA               	movwf	(___fttol@lval+2)& (0+255),b
 12559  002468  0100               	movlb	0	; () banked
 12560  00246A  6BBB               	clrf	(___fttol@lval+3)& (0+255),b
 12561                           
 12562                           ; BSR set to: 0
 12563  00246C  0E8E               	movlw	142
 12564  00246E  0100               	movlb	0	; () banked
 12565  002470  5FBC               	subwf	___fttol@exp1& (0+255),f,b
 12566                           
 12567                           ; BSR set to: 0
 12568  002472  0100               	movlb	0	; () banked
 12569  002474  AFBC               	btfss	___fttol@exp1& (0+255),7,b
 12570  002476  D01A               	goto	l6626
 12571                           
 12572                           ; BSR set to: 0
 12573  002478  0100               	movlb	0	; () banked
 12574  00247A  51BC               	movf	___fttol@exp1& (0+255),w,b
 12575  00247C  0A80               	xorlw	128
 12576  00247E  0F8F               	addlw	143
 12577  002480  B0D8               	btfsc	status,0,c
 12578  002482  D00A               	goto	l6622
 12579                           
 12580                           ; BSR set to: 0
 12581  002484  0E00               	movlw	0
 12582  002486  0100               	movlb	0	; () banked
 12583  002488  6FAE               	movwf	?___fttol& (0+255),b
 12584  00248A  0E00               	movlw	0
 12585  00248C  6FAF               	movwf	(?___fttol+1)& (0+255),b
 12586  00248E  0E00               	movlw	0
 12587  002490  6FB0               	movwf	(?___fttol+2)& (0+255),b
 12588  002492  0E00               	movlw	0
 12589  002494  6FB1               	movwf	(?___fttol+3)& (0+255),b
 12590                           
 12591                           ; BSR set to: 0
 12592  002496  0012               	return	
 12593  002498                     l6622:
 12594                           
 12595                           ; BSR set to: 0
 12596  002498  0100               	movlb	0	; () banked
 12597  00249A  90D8               	bcf	status,0,c
 12598  00249C  33BB               	rrcf	(___fttol@lval+3)& (0+255),f,b
 12599  00249E  33BA               	rrcf	(___fttol@lval+2)& (0+255),f,b
 12600  0024A0  33B9               	rrcf	(___fttol@lval+1)& (0+255),f,b
 12601  0024A2  33B8               	rrcf	___fttol@lval& (0+255),f,b
 12602                           
 12603                           ; BSR set to: 0
 12604  0024A4  0100               	movlb	0	; () banked
 12605  0024A6  3FBC               	incfsz	___fttol@exp1& (0+255),f,b
 12606  0024A8  D7F7               	goto	l6622
 12607                           
 12608                           ; BSR set to: 0
 12609  0024AA  D01B               	goto	l6636
 12610  0024AC                     l6626:
 12611                           
 12612                           ; BSR set to: 0
 12613  0024AC  0E17               	movlw	23
 12614  0024AE  0100               	movlb	0	; () banked
 12615  0024B0  65BC               	cpfsgt	___fttol@exp1& (0+255),b
 12616  0024B2  D012               	goto	l6634
 12617                           
 12618                           ; BSR set to: 0
 12619  0024B4  0E00               	movlw	0
 12620  0024B6  0100               	movlb	0	; () banked
 12621  0024B8  6FAE               	movwf	?___fttol& (0+255),b
 12622  0024BA  0E00               	movlw	0
 12623  0024BC  6FAF               	movwf	(?___fttol+1)& (0+255),b
 12624  0024BE  0E00               	movlw	0
 12625  0024C0  6FB0               	movwf	(?___fttol+2)& (0+255),b
 12626  0024C2  0E00               	movlw	0
 12627  0024C4  6FB1               	movwf	(?___fttol+3)& (0+255),b
 12628                           
 12629                           ; BSR set to: 0
 12630  0024C6  0012               	return	
 12631  0024C8                     l6632:
 12632                           
 12633                           ; BSR set to: 0
 12634  0024C8  0100               	movlb	0	; () banked
 12635  0024CA  90D8               	bcf	status,0,c
 12636  0024CC  37B8               	rlcf	___fttol@lval& (0+255),f,b
 12637  0024CE  37B9               	rlcf	(___fttol@lval+1)& (0+255),f,b
 12638  0024D0  37BA               	rlcf	(___fttol@lval+2)& (0+255),f,b
 12639  0024D2  37BB               	rlcf	(___fttol@lval+3)& (0+255),f,b
 12640  0024D4  0100               	movlb	0	; () banked
 12641  0024D6  07BC               	decf	___fttol@exp1& (0+255),f,b
 12642  0024D8                     l6634:
 12643                           
 12644                           ; BSR set to: 0
 12645  0024D8  0100               	movlb	0	; () banked
 12646  0024DA  51BC               	movf	___fttol@exp1& (0+255),w,b
 12647  0024DC  0100               	movlb	0	; () banked
 12648  0024DE  A4D8               	btfss	status,2,c
 12649  0024E0  D7F3               	goto	l6632
 12650  0024E2                     l6636:
 12651                           
 12652                           ; BSR set to: 0
 12653  0024E2  0100               	movlb	0	; () banked
 12654  0024E4  51B7               	movf	___fttol@sign1& (0+255),w,b
 12655  0024E6  0100               	movlb	0	; () banked
 12656  0024E8  B4D8               	btfsc	status,2,c
 12657  0024EA  D009               	goto	l6640
 12658                           
 12659                           ; BSR set to: 0
 12660  0024EC  0100               	movlb	0	; () banked
 12661  0024EE  1FBB               	comf	(___fttol@lval+3)& (0+255),f,b
 12662  0024F0  1FBA               	comf	(___fttol@lval+2)& (0+255),f,b
 12663  0024F2  1FB9               	comf	(___fttol@lval+1)& (0+255),f,b
 12664  0024F4  6DB8               	negf	___fttol@lval& (0+255),b
 12665  0024F6  0E00               	movlw	0
 12666  0024F8  23B9               	addwfc	(___fttol@lval+1)& (0+255),f,b
 12667  0024FA  23BA               	addwfc	(___fttol@lval+2)& (0+255),f,b
 12668  0024FC  23BB               	addwfc	(___fttol@lval+3)& (0+255),f,b
 12669  0024FE                     l6640:
 12670                           
 12671                           ; BSR set to: 0
 12672  0024FE  C0B8  F0AE         	movff	___fttol@lval,?___fttol
 12673  002502  C0B9  F0AF         	movff	___fttol@lval+1,?___fttol+1
 12674  002506  C0BA  F0B0         	movff	___fttol@lval+2,?___fttol+2
 12675  00250A  C0BB  F0B1         	movff	___fttol@lval+3,?___fttol+3
 12676  00250E  0012               	return	
 12677  002510                     __end_of___fttol:
 12678                           	opt stack 0
 12679                           tblptru	equ	0xFF8
 12680                           tblptrh	equ	0xFF7
 12681                           tblptrl	equ	0xFF6
 12682                           tablat	equ	0xFF5
 12683                           prodh	equ	0xFF4
 12684                           prodl	equ	0xFF3
 12685                           intcon	equ	0xFF2
 12686                           intcon3	equ	0xFF0
 12687                           postinc0	equ	0xFEE
 12688                           wreg	equ	0xFE8
 12689                           postdec1	equ	0xFE5
 12690                           fsr1l	equ	0xFE1
 12691                           indf2	equ	0xFDF
 12692                           postinc2	equ	0xFDE
 12693                           postdec2	equ	0xFDD
 12694                           fsr2h	equ	0xFDA
 12695                           fsr2l	equ	0xFD9
 12696                           status	equ	0xFD8
 12697                           
 12698 ;; *************** function ___ftmul *****************
 12699 ;; Defined at:
 12700 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 12701 ;; Parameters:    Size  Location     Type
 12702 ;;  f1              3    9[BANK0 ] float 
 12703 ;;  f2              3   12[BANK0 ] float 
 12704 ;; Auto vars:     Size  Location     Type
 12705 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 12706 ;;  sign            1   23[BANK0 ] unsigned char 
 12707 ;;  cntr            1   22[BANK0 ] unsigned char 
 12708 ;;  exp             1   18[BANK0 ] unsigned char 
 12709 ;; Return value:  Size  Location     Type
 12710 ;;                  3    9[BANK0 ] float 
 12711 ;; Registers used:
 12712 ;;		wreg, status,2, status,0, cstack
 12713 ;; Tracked objects:
 12714 ;;		On entry : 0/0
 12715 ;;		On exit  : 0/0
 12716 ;;		Unchanged: 0/0
 12717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12718 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12719 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12720 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12721 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12722 ;;Total ram usage:       15 bytes
 12723 ;; Hardware stack levels used:    1
 12724 ;; Hardware stack levels required when called:    4
 12725 ;; This function calls:
 12726 ;;		___ftpack
 12727 ;; This function is called by:
 12728 ;;		_sortBattery
 12729 ;;		_angleToPulse
 12730 ;;		_fround
 12731 ;;		_scale
 12732 ;;		_printf
 12733 ;; This function uses a non-reentrant model
 12734 ;;
 12735                           
 12736                           	psect	text54
 12737  002116                     __ptext54:
 12738                           	opt stack 0
 12739  002116                     ___ftmul:
 12740                           	opt stack 23
 12741                           
 12742                           ; BSR set to: 0
 12743                           ;incstack = 0
 12744  002116  C08B  F08F         	movff	___ftmul@f1+2,??___ftmul
 12745  00211A  0100               	movlb	0	; () banked
 12746  00211C  6B90               	clrf	(??___ftmul+1)& (0+255),b
 12747  00211E  6B91               	clrf	(??___ftmul+2)& (0+255),b
 12748  002120  0100               	movlb	0	; () banked
 12749  002122  358A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 12750  002124  0100               	movlb	0	; () banked
 12751  002126  378F               	rlcf	??___ftmul& (0+255),f,b
 12752  002128  E301               	bnc	u5851
 12753  00212A  8190               	bsf	(??___ftmul+1)& (0+255),0,b
 12754  00212C                     u5851:
 12755  00212C  0100               	movlb	0	; () banked
 12756  00212E  518F               	movf	??___ftmul& (0+255),w,b
 12757  002130  0100               	movlb	0	; () banked
 12758  002132  6F92               	movwf	___ftmul@exp& (0+255),b
 12759  002134  0100               	movlb	0	; () banked
 12760  002136  5192               	movf	___ftmul@exp& (0+255),w,b
 12761  002138  A4D8               	btfss	status,2,c
 12762  00213A  D00A               	goto	l6120
 12763                           
 12764                           ; BSR set to: 0
 12765  00213C  0E00               	movlw	0
 12766  00213E  0100               	movlb	0	; () banked
 12767  002140  6F89               	movwf	?___ftmul& (0+255),b
 12768  002142  0E00               	movlw	0
 12769  002144  0100               	movlb	0	; () banked
 12770  002146  6F8A               	movwf	(?___ftmul+1)& (0+255),b
 12771  002148  0E00               	movlw	0
 12772  00214A  0100               	movlb	0	; () banked
 12773  00214C  6F8B               	movwf	(?___ftmul+2)& (0+255),b
 12774                           
 12775                           ; BSR set to: 0
 12776  00214E  0012               	return	
 12777  002150                     l6120:
 12778                           
 12779                           ; BSR set to: 0
 12780  002150  C08E  F08F         	movff	___ftmul@f2+2,??___ftmul
 12781  002154  0100               	movlb	0	; () banked
 12782  002156  6B90               	clrf	(??___ftmul+1)& (0+255),b
 12783  002158  6B91               	clrf	(??___ftmul+2)& (0+255),b
 12784  00215A  0100               	movlb	0	; () banked
 12785  00215C  358D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 12786  00215E  0100               	movlb	0	; () banked
 12787  002160  378F               	rlcf	??___ftmul& (0+255),f,b
 12788  002162  E301               	bnc	u5871
 12789  002164  8190               	bsf	(??___ftmul+1)& (0+255),0,b
 12790  002166                     u5871:
 12791  002166  0100               	movlb	0	; () banked
 12792  002168  518F               	movf	??___ftmul& (0+255),w,b
 12793  00216A  0100               	movlb	0	; () banked
 12794  00216C  6F97               	movwf	___ftmul@sign& (0+255),b
 12795  00216E  0100               	movlb	0	; () banked
 12796  002170  5197               	movf	___ftmul@sign& (0+255),w,b
 12797  002172  A4D8               	btfss	status,2,c
 12798  002174  D00A               	goto	l6126
 12799                           
 12800                           ; BSR set to: 0
 12801  002176  0E00               	movlw	0
 12802  002178  0100               	movlb	0	; () banked
 12803  00217A  6F89               	movwf	?___ftmul& (0+255),b
 12804  00217C  0E00               	movlw	0
 12805  00217E  0100               	movlb	0	; () banked
 12806  002180  6F8A               	movwf	(?___ftmul+1)& (0+255),b
 12807  002182  0E00               	movlw	0
 12808  002184  0100               	movlb	0	; () banked
 12809  002186  6F8B               	movwf	(?___ftmul+2)& (0+255),b
 12810                           
 12811                           ; BSR set to: 0
 12812  002188  0012               	return	
 12813  00218A                     l6126:
 12814                           
 12815                           ; BSR set to: 0
 12816  00218A  0100               	movlb	0	; () banked
 12817  00218C  5197               	movf	___ftmul@sign& (0+255),w,b
 12818  00218E  0F7B               	addlw	123
 12819  002190  0100               	movlb	0	; () banked
 12820  002192  2792               	addwf	___ftmul@exp& (0+255),f,b
 12821                           
 12822                           ; BSR set to: 0
 12823  002194  C08B  F097         	movff	___ftmul@f1+2,___ftmul@sign
 12824  002198  0100               	movlb	0	; () banked
 12825  00219A  518E               	movf	(___ftmul@f2+2)& (0+255),w,b
 12826  00219C  0100               	movlb	0	; () banked
 12827  00219E  1B97               	xorwf	___ftmul@sign& (0+255),f,b
 12828  0021A0  0E80               	movlw	128
 12829  0021A2  0100               	movlb	0	; () banked
 12830  0021A4  1797               	andwf	___ftmul@sign& (0+255),f,b
 12831                           
 12832                           ; BSR set to: 0
 12833  0021A6  0100               	movlb	0	; () banked
 12834  0021A8  8F8A               	bsf	(___ftmul@f1+1)& (0+255),7,b
 12835                           
 12836                           ; BSR set to: 0
 12837  0021AA  0100               	movlb	0	; () banked
 12838  0021AC  8F8D               	bsf	(___ftmul@f2+1)& (0+255),7,b
 12839                           
 12840                           ; BSR set to: 0
 12841  0021AE  0EFF               	movlw	255
 12842  0021B0  0100               	movlb	0	; () banked
 12843  0021B2  178C               	andwf	___ftmul@f2& (0+255),f,b
 12844  0021B4  0EFF               	movlw	255
 12845  0021B6  0100               	movlb	0	; () banked
 12846  0021B8  178D               	andwf	(___ftmul@f2+1)& (0+255),f,b
 12847  0021BA  0E00               	movlw	0
 12848  0021BC  0100               	movlb	0	; () banked
 12849  0021BE  178E               	andwf	(___ftmul@f2+2)& (0+255),f,b
 12850                           
 12851                           ; BSR set to: 0
 12852  0021C0  0E00               	movlw	0
 12853  0021C2  0100               	movlb	0	; () banked
 12854  0021C4  6F93               	movwf	___ftmul@f3_as_product& (0+255),b
 12855  0021C6  0E00               	movlw	0
 12856  0021C8  0100               	movlb	0	; () banked
 12857  0021CA  6F94               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 12858  0021CC  0E00               	movlw	0
 12859  0021CE  0100               	movlb	0	; () banked
 12860  0021D0  6F95               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 12861                           
 12862                           ; BSR set to: 0
 12863  0021D2  0E07               	movlw	7
 12864  0021D4  0100               	movlb	0	; () banked
 12865  0021D6  6F96               	movwf	___ftmul@cntr& (0+255),b
 12866  0021D8                     l6140:
 12867                           
 12868                           ; BSR set to: 0
 12869  0021D8  0100               	movlb	0	; () banked
 12870  0021DA  A189               	btfss	___ftmul@f1& (0+255),0,b
 12871  0021DC  D00C               	goto	l6144
 12872                           
 12873                           ; BSR set to: 0
 12874  0021DE  0100               	movlb	0	; () banked
 12875  0021E0  518C               	movf	___ftmul@f2& (0+255),w,b
 12876  0021E2  0100               	movlb	0	; () banked
 12877  0021E4  2793               	addwf	___ftmul@f3_as_product& (0+255),f,b
 12878  0021E6  0100               	movlb	0	; () banked
 12879  0021E8  518D               	movf	(___ftmul@f2+1)& (0+255),w,b
 12880  0021EA  0100               	movlb	0	; () banked
 12881  0021EC  2394               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 12882  0021EE  0100               	movlb	0	; () banked
 12883  0021F0  518E               	movf	(___ftmul@f2+2)& (0+255),w,b
 12884  0021F2  0100               	movlb	0	; () banked
 12885  0021F4  2395               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 12886  0021F6                     l6144:
 12887                           
 12888                           ; BSR set to: 0
 12889  0021F6  0100               	movlb	0	; () banked
 12890  0021F8  90D8               	bcf	status,0,c
 12891  0021FA  338B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 12892  0021FC  338A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 12893  0021FE  3389               	rrcf	___ftmul@f1& (0+255),f,b
 12894  002200  0100               	movlb	0	; () banked
 12895  002202  90D8               	bcf	status,0,c
 12896  002204  378C               	rlcf	___ftmul@f2& (0+255),f,b
 12897  002206  378D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 12898  002208  378E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 12899                           
 12900                           ; BSR set to: 0
 12901  00220A  0100               	movlb	0	; () banked
 12902  00220C  2F96               	decfsz	___ftmul@cntr& (0+255),f,b
 12903  00220E  D7E4               	goto	l6140
 12904                           
 12905                           ; BSR set to: 0
 12906                           
 12907                           ; BSR set to: 0
 12908  002210  0E09               	movlw	9
 12909  002212  0100               	movlb	0	; () banked
 12910  002214  6F96               	movwf	___ftmul@cntr& (0+255),b
 12911  002216                     l6150:
 12912                           
 12913                           ; BSR set to: 0
 12914  002216  0100               	movlb	0	; () banked
 12915  002218  A189               	btfss	___ftmul@f1& (0+255),0,b
 12916  00221A  D00C               	goto	l6154
 12917                           
 12918                           ; BSR set to: 0
 12919  00221C  0100               	movlb	0	; () banked
 12920  00221E  518C               	movf	___ftmul@f2& (0+255),w,b
 12921  002220  0100               	movlb	0	; () banked
 12922  002222  2793               	addwf	___ftmul@f3_as_product& (0+255),f,b
 12923  002224  0100               	movlb	0	; () banked
 12924  002226  518D               	movf	(___ftmul@f2+1)& (0+255),w,b
 12925  002228  0100               	movlb	0	; () banked
 12926  00222A  2394               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 12927  00222C  0100               	movlb	0	; () banked
 12928  00222E  518E               	movf	(___ftmul@f2+2)& (0+255),w,b
 12929  002230  0100               	movlb	0	; () banked
 12930  002232  2395               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 12931  002234                     l6154:
 12932                           
 12933                           ; BSR set to: 0
 12934  002234  0100               	movlb	0	; () banked
 12935  002236  90D8               	bcf	status,0,c
 12936  002238  338B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 12937  00223A  338A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 12938  00223C  3389               	rrcf	___ftmul@f1& (0+255),f,b
 12939  00223E  0100               	movlb	0	; () banked
 12940  002240  90D8               	bcf	status,0,c
 12941  002242  3395               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 12942  002244  3394               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 12943  002246  3393               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 12944                           
 12945                           ; BSR set to: 0
 12946  002248  0100               	movlb	0	; () banked
 12947  00224A  2F96               	decfsz	___ftmul@cntr& (0+255),f,b
 12948  00224C  D7E4               	goto	l6150
 12949                           
 12950                           ; BSR set to: 0
 12951                           
 12952                           ; BSR set to: 0
 12953  00224E  C093  F023         	movff	___ftmul@f3_as_product,___ftpack@arg
 12954  002252  C094  F024         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 12955  002256  C095  F025         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 12956  00225A  C092  F026         	movff	___ftmul@exp,___ftpack@exp
 12957  00225E  C097  F027         	movff	___ftmul@sign,___ftpack@sign
 12958  002262  EC16  F019         	call	___ftpack	;wreg free
 12959  002266  C023  F089         	movff	?___ftpack,?___ftmul
 12960  00226A  C024  F08A         	movff	?___ftpack+1,?___ftmul+1
 12961  00226E  C025  F08B         	movff	?___ftpack+2,?___ftmul+2
 12962  002272  0012               	return	
 12963  002274                     __end_of___ftmul:
 12964                           	opt stack 0
 12965                           tblptru	equ	0xFF8
 12966                           tblptrh	equ	0xFF7
 12967                           tblptrl	equ	0xFF6
 12968                           tablat	equ	0xFF5
 12969                           prodh	equ	0xFF4
 12970                           prodl	equ	0xFF3
 12971                           intcon	equ	0xFF2
 12972                           intcon3	equ	0xFF0
 12973                           postinc0	equ	0xFEE
 12974                           wreg	equ	0xFE8
 12975                           postdec1	equ	0xFE5
 12976                           fsr1l	equ	0xFE1
 12977                           indf2	equ	0xFDF
 12978                           postinc2	equ	0xFDE
 12979                           postdec2	equ	0xFDD
 12980                           fsr2h	equ	0xFDA
 12981                           fsr2l	equ	0xFD9
 12982                           status	equ	0xFD8
 12983                           
 12984 ;; *************** function ___ftdiv *****************
 12985 ;; Defined at:
 12986 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 12987 ;; Parameters:    Size  Location     Type
 12988 ;;  f1              3   52[COMRAM] float 
 12989 ;;  f2              3   55[COMRAM] float 
 12990 ;; Auto vars:     Size  Location     Type
 12991 ;;  f3              3    4[BANK0 ] float 
 12992 ;;  sign            1    8[BANK0 ] unsigned char 
 12993 ;;  exp             1    7[BANK0 ] unsigned char 
 12994 ;;  cntr            1    3[BANK0 ] unsigned char 
 12995 ;; Return value:  Size  Location     Type
 12996 ;;                  3   52[COMRAM] float 
 12997 ;; Registers used:
 12998 ;;		wreg, status,2, status,0, cstack
 12999 ;; Tracked objects:
 13000 ;;		On entry : 0/0
 13001 ;;		On exit  : 0/0
 13002 ;;		Unchanged: 0/0
 13003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13004 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13005 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13006 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13007 ;;      Totals:         6       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13008 ;;Total ram usage:       15 bytes
 13009 ;; Hardware stack levels used:    1
 13010 ;; Hardware stack levels required when called:    4
 13011 ;; This function calls:
 13012 ;;		___ftpack
 13013 ;; This function is called by:
 13014 ;;		_sortBattery
 13015 ;;		_angleToPulse
 13016 ;; This function uses a non-reentrant model
 13017 ;;
 13018                           
 13019                           	psect	text55
 13020  00287A                     __ptext55:
 13021                           	opt stack 0
 13022  00287A                     ___ftdiv:
 13023                           	opt stack 23
 13024                           
 13025                           ;incstack = 0
 13026  00287A  C037  F080         	movff	___ftdiv@f1+2,??___ftdiv
 13027  00287E  0100               	movlb	0	; () banked
 13028  002880  6B81               	clrf	(??___ftdiv+1)& (0+255),b
 13029  002882  6B82               	clrf	(??___ftdiv+2)& (0+255),b
 13030  002884  3436               	rlcf	___ftdiv@f1+1,w,c
 13031  002886  0100               	movlb	0	; () banked
 13032  002888  3780               	rlcf	??___ftdiv& (0+255),f,b
 13033  00288A  E301               	bnc	u6371
 13034  00288C  8181               	bsf	(??___ftdiv+1)& (0+255),0,b
 13035  00288E                     u6371:
 13036  00288E  0100               	movlb	0	; () banked
 13037  002890  5180               	movf	??___ftdiv& (0+255),w,b
 13038  002892  0100               	movlb	0	; () banked
 13039  002894  6F87               	movwf	___ftdiv@exp& (0+255),b
 13040  002896  0100               	movlb	0	; () banked
 13041  002898  5187               	movf	___ftdiv@exp& (0+255),w,b
 13042  00289A  A4D8               	btfss	status,2,c
 13043  00289C  D007               	goto	l6516
 13044                           
 13045                           ; BSR set to: 0
 13046  00289E  0E00               	movlw	0
 13047  0028A0  6E35               	movwf	?___ftdiv,c
 13048  0028A2  0E00               	movlw	0
 13049  0028A4  6E36               	movwf	?___ftdiv+1,c
 13050  0028A6  0E00               	movlw	0
 13051  0028A8  6E37               	movwf	?___ftdiv+2,c
 13052                           
 13053                           ; BSR set to: 0
 13054  0028AA  0012               	return	
 13055  0028AC                     l6516:
 13056                           
 13057                           ; BSR set to: 0
 13058  0028AC  C03A  F080         	movff	___ftdiv@f2+2,??___ftdiv
 13059  0028B0  0100               	movlb	0	; () banked
 13060  0028B2  6B81               	clrf	(??___ftdiv+1)& (0+255),b
 13061  0028B4  6B82               	clrf	(??___ftdiv+2)& (0+255),b
 13062  0028B6  3439               	rlcf	___ftdiv@f2+1,w,c
 13063  0028B8  0100               	movlb	0	; () banked
 13064  0028BA  3780               	rlcf	??___ftdiv& (0+255),f,b
 13065  0028BC  E301               	bnc	u6391
 13066  0028BE  8181               	bsf	(??___ftdiv+1)& (0+255),0,b
 13067  0028C0                     u6391:
 13068  0028C0  0100               	movlb	0	; () banked
 13069  0028C2  5180               	movf	??___ftdiv& (0+255),w,b
 13070  0028C4  0100               	movlb	0	; () banked
 13071  0028C6  6F88               	movwf	___ftdiv@sign& (0+255),b
 13072  0028C8  0100               	movlb	0	; () banked
 13073  0028CA  5188               	movf	___ftdiv@sign& (0+255),w,b
 13074  0028CC  A4D8               	btfss	status,2,c
 13075  0028CE  D007               	goto	l6522
 13076                           
 13077                           ; BSR set to: 0
 13078  0028D0  0E00               	movlw	0
 13079  0028D2  6E35               	movwf	?___ftdiv,c
 13080  0028D4  0E00               	movlw	0
 13081  0028D6  6E36               	movwf	?___ftdiv+1,c
 13082  0028D8  0E00               	movlw	0
 13083  0028DA  6E37               	movwf	?___ftdiv+2,c
 13084                           
 13085                           ; BSR set to: 0
 13086  0028DC  0012               	return	
 13087  0028DE                     l6522:
 13088                           
 13089                           ; BSR set to: 0
 13090  0028DE  0E00               	movlw	0
 13091  0028E0  0100               	movlb	0	; () banked
 13092  0028E2  6F84               	movwf	___ftdiv@f3& (0+255),b
 13093  0028E4  0E00               	movlw	0
 13094  0028E6  0100               	movlb	0	; () banked
 13095  0028E8  6F85               	movwf	(___ftdiv@f3+1)& (0+255),b
 13096  0028EA  0E00               	movlw	0
 13097  0028EC  0100               	movlb	0	; () banked
 13098  0028EE  6F86               	movwf	(___ftdiv@f3+2)& (0+255),b
 13099                           
 13100                           ; BSR set to: 0
 13101  0028F0  0100               	movlb	0	; () banked
 13102  0028F2  5188               	movf	___ftdiv@sign& (0+255),w,b
 13103  0028F4  0F89               	addlw	137
 13104  0028F6  0100               	movlb	0	; () banked
 13105  0028F8  5F87               	subwf	___ftdiv@exp& (0+255),f,b
 13106                           
 13107                           ; BSR set to: 0
 13108  0028FA  C037  F088         	movff	___ftdiv@f1+2,___ftdiv@sign
 13109                           
 13110                           ; BSR set to: 0
 13111  0028FE  503A               	movf	___ftdiv@f2+2,w,c
 13112  002900  0100               	movlb	0	; () banked
 13113  002902  1B88               	xorwf	___ftdiv@sign& (0+255),f,b
 13114                           
 13115                           ; BSR set to: 0
 13116  002904  0E80               	movlw	128
 13117  002906  0100               	movlb	0	; () banked
 13118  002908  1788               	andwf	___ftdiv@sign& (0+255),f,b
 13119                           
 13120                           ; BSR set to: 0
 13121  00290A  8E36               	bsf	___ftdiv@f1+1,7,c
 13122                           
 13123                           ; BSR set to: 0
 13124  00290C  0EFF               	movlw	255
 13125  00290E  1635               	andwf	___ftdiv@f1,f,c
 13126  002910  0EFF               	movlw	255
 13127  002912  1636               	andwf	___ftdiv@f1+1,f,c
 13128  002914  0E00               	movlw	0
 13129  002916  1637               	andwf	___ftdiv@f1+2,f,c
 13130                           
 13131                           ; BSR set to: 0
 13132  002918  8E39               	bsf	___ftdiv@f2+1,7,c
 13133                           
 13134                           ; BSR set to: 0
 13135  00291A  0EFF               	movlw	255
 13136  00291C  1638               	andwf	___ftdiv@f2,f,c
 13137  00291E  0EFF               	movlw	255
 13138  002920  1639               	andwf	___ftdiv@f2+1,f,c
 13139  002922  0E00               	movlw	0
 13140  002924  163A               	andwf	___ftdiv@f2+2,f,c
 13141                           
 13142                           ; BSR set to: 0
 13143  002926  0E18               	movlw	24
 13144  002928  0100               	movlb	0	; () banked
 13145  00292A  6F83               	movwf	___ftdiv@cntr& (0+255),b
 13146  00292C                     l6542:
 13147                           
 13148                           ; BSR set to: 0
 13149  00292C  0100               	movlb	0	; () banked
 13150  00292E  90D8               	bcf	status,0,c
 13151  002930  3784               	rlcf	___ftdiv@f3& (0+255),f,b
 13152  002932  3785               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 13153  002934  3786               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 13154                           
 13155                           ; BSR set to: 0
 13156  002936  5038               	movf	___ftdiv@f2,w,c
 13157  002938  5C35               	subwf	___ftdiv@f1,w,c
 13158  00293A  5039               	movf	___ftdiv@f2+1,w,c
 13159  00293C  5836               	subwfb	___ftdiv@f1+1,w,c
 13160  00293E  503A               	movf	___ftdiv@f2+2,w,c
 13161  002940  5837               	subwfb	___ftdiv@f1+2,w,c
 13162  002942  A0D8               	btfss	status,0,c
 13163  002944  D008               	goto	l1177
 13164                           
 13165                           ; BSR set to: 0
 13166  002946  5038               	movf	___ftdiv@f2,w,c
 13167  002948  5E35               	subwf	___ftdiv@f1,f,c
 13168  00294A  5039               	movf	___ftdiv@f2+1,w,c
 13169  00294C  5A36               	subwfb	___ftdiv@f1+1,f,c
 13170  00294E  503A               	movf	___ftdiv@f2+2,w,c
 13171  002950  5A37               	subwfb	___ftdiv@f1+2,f,c
 13172                           
 13173                           ; BSR set to: 0
 13174  002952  0100               	movlb	0	; () banked
 13175  002954  8184               	bsf	___ftdiv@f3& (0+255),0,b
 13176  002956                     l1177:
 13177                           
 13178                           ; BSR set to: 0
 13179  002956  90D8               	bcf	status,0,c
 13180  002958  3635               	rlcf	___ftdiv@f1,f,c
 13181  00295A  3636               	rlcf	___ftdiv@f1+1,f,c
 13182  00295C  3637               	rlcf	___ftdiv@f1+2,f,c
 13183                           
 13184                           ; BSR set to: 0
 13185  00295E  0100               	movlb	0	; () banked
 13186  002960  2F83               	decfsz	___ftdiv@cntr& (0+255),f,b
 13187  002962  D7E4               	goto	l6542
 13188                           
 13189                           ; BSR set to: 0
 13190                           
 13191                           ; BSR set to: 0
 13192  002964  C084  F023         	movff	___ftdiv@f3,___ftpack@arg
 13193  002968  C085  F024         	movff	___ftdiv@f3+1,___ftpack@arg+1
 13194  00296C  C086  F025         	movff	___ftdiv@f3+2,___ftpack@arg+2
 13195  002970  C087  F026         	movff	___ftdiv@exp,___ftpack@exp
 13196  002974  C088  F027         	movff	___ftdiv@sign,___ftpack@sign
 13197  002978  EC16  F019         	call	___ftpack	;wreg free
 13198  00297C  C023  F035         	movff	?___ftpack,?___ftdiv
 13199  002980  C024  F036         	movff	?___ftpack+1,?___ftdiv+1
 13200  002984  C025  F037         	movff	?___ftpack+2,?___ftdiv+2
 13201  002988  0012               	return	
 13202  00298A                     __end_of___ftdiv:
 13203                           	opt stack 0
 13204                           tblptru	equ	0xFF8
 13205                           tblptrh	equ	0xFF7
 13206                           tblptrl	equ	0xFF6
 13207                           tablat	equ	0xFF5
 13208                           prodh	equ	0xFF4
 13209                           prodl	equ	0xFF3
 13210                           intcon	equ	0xFF2
 13211                           intcon3	equ	0xFF0
 13212                           postinc0	equ	0xFEE
 13213                           wreg	equ	0xFE8
 13214                           postdec1	equ	0xFE5
 13215                           fsr1l	equ	0xFE1
 13216                           indf2	equ	0xFDF
 13217                           postinc2	equ	0xFDE
 13218                           postdec2	equ	0xFDD
 13219                           fsr2h	equ	0xFDA
 13220                           fsr2l	equ	0xFD9
 13221                           status	equ	0xFD8
 13222                           
 13223 ;; *************** function ___ftadd *****************
 13224 ;; Defined at:
 13225 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 13226 ;; Parameters:    Size  Location     Type
 13227 ;;  f1              3   34[BANK0 ] float 
 13228 ;;  f2              3   37[BANK0 ] float 
 13229 ;; Auto vars:     Size  Location     Type
 13230 ;;  exp1            1   45[BANK0 ] unsigned char 
 13231 ;;  exp2            1   44[BANK0 ] unsigned char 
 13232 ;;  sign            1   43[BANK0 ] unsigned char 
 13233 ;; Return value:  Size  Location     Type
 13234 ;;                  3   34[BANK0 ] float 
 13235 ;; Registers used:
 13236 ;;		wreg, status,2, status,0, cstack
 13237 ;; Tracked objects:
 13238 ;;		On entry : 0/0
 13239 ;;		On exit  : 0/0
 13240 ;;		Unchanged: 0/0
 13241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13242 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13243 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13244 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13245 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13246 ;;Total ram usage:       12 bytes
 13247 ;; Hardware stack levels used:    1
 13248 ;; Hardware stack levels required when called:    4
 13249 ;; This function calls:
 13250 ;;		___ftpack
 13251 ;; This function is called by:
 13252 ;;		_angleToPulse
 13253 ;;		_printf
 13254 ;;		___ftsub
 13255 ;; This function uses a non-reentrant model
 13256 ;;
 13257                           
 13258                           	psect	text56
 13259  001AD6                     __ptext56:
 13260                           	opt stack 0
 13261  001AD6                     ___ftadd:
 13262                           	opt stack 23
 13263                           
 13264                           ;incstack = 0
 13265  001AD6  C0A4  F0A8         	movff	___ftadd@f1+2,??___ftadd
 13266  001ADA  0100               	movlb	0	; () banked
 13267  001ADC  6BA9               	clrf	(??___ftadd+1)& (0+255),b
 13268  001ADE  6BAA               	clrf	(??___ftadd+2)& (0+255),b
 13269  001AE0  0100               	movlb	0	; () banked
 13270  001AE2  35A3               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 13271  001AE4  0100               	movlb	0	; () banked
 13272  001AE6  37A8               	rlcf	??___ftadd& (0+255),f,b
 13273  001AE8  E301               	bnc	u5641
 13274  001AEA  81A9               	bsf	(??___ftadd+1)& (0+255),0,b
 13275  001AEC                     u5641:
 13276  001AEC  0100               	movlb	0	; () banked
 13277  001AEE  51A8               	movf	??___ftadd& (0+255),w,b
 13278  001AF0  0100               	movlb	0	; () banked
 13279  001AF2  6FAD               	movwf	___ftadd@exp1& (0+255),b
 13280  001AF4  C0A7  F0A8         	movff	___ftadd@f2+2,??___ftadd
 13281  001AF8  0100               	movlb	0	; () banked
 13282  001AFA  6BA9               	clrf	(??___ftadd+1)& (0+255),b
 13283  001AFC  6BAA               	clrf	(??___ftadd+2)& (0+255),b
 13284  001AFE  0100               	movlb	0	; () banked
 13285  001B00  35A6               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 13286  001B02  0100               	movlb	0	; () banked
 13287  001B04  37A8               	rlcf	??___ftadd& (0+255),f,b
 13288  001B06  E301               	bnc	u5651
 13289  001B08  81A9               	bsf	(??___ftadd+1)& (0+255),0,b
 13290  001B0A                     u5651:
 13291  001B0A  0100               	movlb	0	; () banked
 13292  001B0C  51A8               	movf	??___ftadd& (0+255),w,b
 13293  001B0E  0100               	movlb	0	; () banked
 13294  001B10  6FAC               	movwf	___ftadd@exp2& (0+255),b
 13295                           
 13296                           ; BSR set to: 0
 13297  001B12  0100               	movlb	0	; () banked
 13298  001B14  51AD               	movf	___ftadd@exp1& (0+255),w,b
 13299  001B16  0100               	movlb	0	; () banked
 13300  001B18  B4D8               	btfsc	status,2,c
 13301  001B1A  D011               	goto	l1142
 13302                           
 13303                           ; BSR set to: 0
 13304  001B1C  0100               	movlb	0	; () banked
 13305  001B1E  51AC               	movf	___ftadd@exp2& (0+255),w,b
 13306  001B20  0100               	movlb	0	; () banked
 13307  001B22  5DAD               	subwf	___ftadd@exp1& (0+255),w,b
 13308  001B24  B0D8               	btfsc	status,0,c
 13309  001B26  D012               	goto	l6052
 13310                           
 13311                           ; BSR set to: 0
 13312  001B28  0100               	movlb	0	; () banked
 13313  001B2A  51AD               	movf	___ftadd@exp1& (0+255),w,b
 13314  001B2C  0800               	sublw	0
 13315  001B2E  0100               	movlb	0	; () banked
 13316  001B30  25AC               	addwf	___ftadd@exp2& (0+255),w,b
 13317  001B32  0100               	movlb	0	; () banked
 13318  001B34  6FA8               	movwf	??___ftadd& (0+255),b
 13319  001B36  0E18               	movlw	24
 13320  001B38  0100               	movlb	0	; () banked
 13321  001B3A  65A8               	cpfsgt	??___ftadd& (0+255),b
 13322  001B3C  D007               	goto	l6052
 13323  001B3E                     l1142:
 13324                           
 13325                           ; BSR set to: 0
 13326  001B3E  C0A5  F0A2         	movff	___ftadd@f2,?___ftadd
 13327  001B42  C0A6  F0A3         	movff	___ftadd@f2+1,?___ftadd+1
 13328  001B46  C0A7  F0A4         	movff	___ftadd@f2+2,?___ftadd+2
 13329  001B4A  0012               	return	
 13330  001B4C                     l6052:
 13331                           
 13332                           ; BSR set to: 0
 13333  001B4C  0100               	movlb	0	; () banked
 13334  001B4E  51AC               	movf	___ftadd@exp2& (0+255),w,b
 13335  001B50  0100               	movlb	0	; () banked
 13336  001B52  B4D8               	btfsc	status,2,c
 13337  001B54  D011               	goto	l1146
 13338                           
 13339                           ; BSR set to: 0
 13340  001B56  0100               	movlb	0	; () banked
 13341  001B58  51AD               	movf	___ftadd@exp1& (0+255),w,b
 13342  001B5A  0100               	movlb	0	; () banked
 13343  001B5C  5DAC               	subwf	___ftadd@exp2& (0+255),w,b
 13344  001B5E  B0D8               	btfsc	status,0,c
 13345  001B60  D012               	goto	l6058
 13346                           
 13347                           ; BSR set to: 0
 13348  001B62  0100               	movlb	0	; () banked
 13349  001B64  51AC               	movf	___ftadd@exp2& (0+255),w,b
 13350  001B66  0800               	sublw	0
 13351  001B68  0100               	movlb	0	; () banked
 13352  001B6A  25AD               	addwf	___ftadd@exp1& (0+255),w,b
 13353  001B6C  0100               	movlb	0	; () banked
 13354  001B6E  6FA8               	movwf	??___ftadd& (0+255),b
 13355  001B70  0E18               	movlw	24
 13356  001B72  0100               	movlb	0	; () banked
 13357  001B74  65A8               	cpfsgt	??___ftadd& (0+255),b
 13358  001B76  D007               	goto	l6058
 13359  001B78                     l1146:
 13360                           
 13361                           ; BSR set to: 0
 13362  001B78  C0A2  F0A2         	movff	___ftadd@f1,?___ftadd
 13363  001B7C  C0A3  F0A3         	movff	___ftadd@f1+1,?___ftadd+1
 13364  001B80  C0A4  F0A4         	movff	___ftadd@f1+2,?___ftadd+2
 13365  001B84  0012               	return	
 13366  001B86                     l6058:
 13367                           
 13368                           ; BSR set to: 0
 13369  001B86  0E06               	movlw	6
 13370  001B88  0100               	movlb	0	; () banked
 13371  001B8A  6FAB               	movwf	___ftadd@sign& (0+255),b
 13372                           
 13373                           ; BSR set to: 0
 13374  001B8C  0100               	movlb	0	; () banked
 13375  001B8E  AFA4               	btfss	(___ftadd@f1+2)& (0+255),7,b
 13376  001B90  D002               	goto	l6064
 13377                           
 13378                           ; BSR set to: 0
 13379  001B92  0100               	movlb	0	; () banked
 13380  001B94  8FAB               	bsf	___ftadd@sign& (0+255),7,b
 13381  001B96                     l6064:
 13382                           
 13383                           ; BSR set to: 0
 13384  001B96  0100               	movlb	0	; () banked
 13385  001B98  AFA7               	btfss	(___ftadd@f2+2)& (0+255),7,b
 13386  001B9A  D002               	goto	l1148
 13387                           
 13388                           ; BSR set to: 0
 13389  001B9C  0100               	movlb	0	; () banked
 13390  001B9E  8DAB               	bsf	___ftadd@sign& (0+255),6,b
 13391  001BA0                     l1148:
 13392                           
 13393                           ; BSR set to: 0
 13394  001BA0  0100               	movlb	0	; () banked
 13395  001BA2  8FA3               	bsf	(___ftadd@f1+1)& (0+255),7,b
 13396                           
 13397                           ; BSR set to: 0
 13398  001BA4  0EFF               	movlw	255
 13399  001BA6  0100               	movlb	0	; () banked
 13400  001BA8  17A2               	andwf	___ftadd@f1& (0+255),f,b
 13401  001BAA  0EFF               	movlw	255
 13402  001BAC  0100               	movlb	0	; () banked
 13403  001BAE  17A3               	andwf	(___ftadd@f1+1)& (0+255),f,b
 13404  001BB0  0E00               	movlw	0
 13405  001BB2  0100               	movlb	0	; () banked
 13406  001BB4  17A4               	andwf	(___ftadd@f1+2)& (0+255),f,b
 13407  001BB6  0100               	movlb	0	; () banked
 13408  001BB8  8FA6               	bsf	(___ftadd@f2+1)& (0+255),7,b
 13409                           
 13410                           ; BSR set to: 0
 13411  001BBA  0EFF               	movlw	255
 13412  001BBC  0100               	movlb	0	; () banked
 13413  001BBE  17A5               	andwf	___ftadd@f2& (0+255),f,b
 13414  001BC0  0EFF               	movlw	255
 13415  001BC2  0100               	movlb	0	; () banked
 13416  001BC4  17A6               	andwf	(___ftadd@f2+1)& (0+255),f,b
 13417  001BC6  0E00               	movlw	0
 13418  001BC8  0100               	movlb	0	; () banked
 13419  001BCA  17A7               	andwf	(___ftadd@f2+2)& (0+255),f,b
 13420                           
 13421                           ; BSR set to: 0
 13422  001BCC  0100               	movlb	0	; () banked
 13423  001BCE  51AC               	movf	___ftadd@exp2& (0+255),w,b
 13424  001BD0  0100               	movlb	0	; () banked
 13425  001BD2  5DAD               	subwf	___ftadd@exp1& (0+255),w,b
 13426  001BD4  B0D8               	btfsc	status,0,c
 13427  001BD6  D025               	goto	l6084
 13428  001BD8                     l6074:
 13429                           
 13430                           ; BSR set to: 0
 13431  001BD8  0100               	movlb	0	; () banked
 13432  001BDA  90D8               	bcf	status,0,c
 13433  001BDC  37A5               	rlcf	___ftadd@f2& (0+255),f,b
 13434  001BDE  37A6               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 13435  001BE0  37A7               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 13436  001BE2  0100               	movlb	0	; () banked
 13437  001BE4  07AC               	decf	___ftadd@exp2& (0+255),f,b
 13438                           
 13439                           ; BSR set to: 0
 13440  001BE6  0100               	movlb	0	; () banked
 13441  001BE8  51AD               	movf	___ftadd@exp1& (0+255),w,b
 13442  001BEA  0100               	movlb	0	; () banked
 13443  001BEC  19AC               	xorwf	___ftadd@exp2& (0+255),w,b
 13444  001BEE  B4D8               	btfsc	status,2,c
 13445  001BF0  D011               	goto	l6082
 13446                           
 13447                           ; BSR set to: 0
 13448  001BF2  0100               	movlb	0	; () banked
 13449  001BF4  07AB               	decf	___ftadd@sign& (0+255),f,b
 13450  001BF6  C0AB  F0A8         	movff	___ftadd@sign,??___ftadd
 13451  001BFA  0E07               	movlw	7
 13452  001BFC  0100               	movlb	0	; () banked
 13453  001BFE  17A8               	andwf	??___ftadd& (0+255),f,b
 13454  001C00  B4D8               	btfsc	status,2,c
 13455  001C02  D008               	goto	l6082
 13456  001C04  D7E9               	goto	l6074
 13457  001C06                     l6080:
 13458                           
 13459                           ; BSR set to: 0
 13460  001C06  0100               	movlb	0	; () banked
 13461  001C08  90D8               	bcf	status,0,c
 13462  001C0A  33A4               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 13463  001C0C  33A3               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 13464  001C0E  33A2               	rrcf	___ftadd@f1& (0+255),f,b
 13465  001C10  0100               	movlb	0	; () banked
 13466  001C12  2BAD               	incf	___ftadd@exp1& (0+255),f,b
 13467  001C14                     l6082:
 13468                           
 13469                           ; BSR set to: 0
 13470  001C14  0100               	movlb	0	; () banked
 13471  001C16  51AC               	movf	___ftadd@exp2& (0+255),w,b
 13472  001C18  0100               	movlb	0	; () banked
 13473  001C1A  19AD               	xorwf	___ftadd@exp1& (0+255),w,b
 13474  001C1C  B4D8               	btfsc	status,2,c
 13475  001C1E  D02B               	goto	l1157
 13476  001C20  D7F2               	goto	l6080
 13477  001C22                     l6084:
 13478                           
 13479                           ; BSR set to: 0
 13480  001C22  0100               	movlb	0	; () banked
 13481  001C24  51AD               	movf	___ftadd@exp1& (0+255),w,b
 13482  001C26  0100               	movlb	0	; () banked
 13483  001C28  5DAC               	subwf	___ftadd@exp2& (0+255),w,b
 13484  001C2A  B0D8               	btfsc	status,0,c
 13485  001C2C  D024               	goto	l1157
 13486  001C2E                     l6086:
 13487                           
 13488                           ; BSR set to: 0
 13489  001C2E  0100               	movlb	0	; () banked
 13490  001C30  90D8               	bcf	status,0,c
 13491  001C32  37A2               	rlcf	___ftadd@f1& (0+255),f,b
 13492  001C34  37A3               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 13493  001C36  37A4               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 13494  001C38  0100               	movlb	0	; () banked
 13495  001C3A  07AD               	decf	___ftadd@exp1& (0+255),f,b
 13496                           
 13497                           ; BSR set to: 0
 13498  001C3C  0100               	movlb	0	; () banked
 13499  001C3E  51AD               	movf	___ftadd@exp1& (0+255),w,b
 13500  001C40  0100               	movlb	0	; () banked
 13501  001C42  19AC               	xorwf	___ftadd@exp2& (0+255),w,b
 13502  001C44  B4D8               	btfsc	status,2,c
 13503  001C46  D011               	goto	l6094
 13504                           
 13505                           ; BSR set to: 0
 13506  001C48  0100               	movlb	0	; () banked
 13507  001C4A  07AB               	decf	___ftadd@sign& (0+255),f,b
 13508  001C4C  C0AB  F0A8         	movff	___ftadd@sign,??___ftadd
 13509  001C50  0E07               	movlw	7
 13510  001C52  0100               	movlb	0	; () banked
 13511  001C54  17A8               	andwf	??___ftadd& (0+255),f,b
 13512  001C56  B4D8               	btfsc	status,2,c
 13513  001C58  D008               	goto	l6094
 13514  001C5A  D7E9               	goto	l6086
 13515  001C5C                     l6092:
 13516                           
 13517                           ; BSR set to: 0
 13518  001C5C  0100               	movlb	0	; () banked
 13519  001C5E  90D8               	bcf	status,0,c
 13520  001C60  33A7               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 13521  001C62  33A6               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 13522  001C64  33A5               	rrcf	___ftadd@f2& (0+255),f,b
 13523  001C66  0100               	movlb	0	; () banked
 13524  001C68  2BAC               	incf	___ftadd@exp2& (0+255),f,b
 13525  001C6A                     l6094:
 13526                           
 13527                           ; BSR set to: 0
 13528  001C6A  0100               	movlb	0	; () banked
 13529  001C6C  51AC               	movf	___ftadd@exp2& (0+255),w,b
 13530  001C6E  0100               	movlb	0	; () banked
 13531  001C70  19AD               	xorwf	___ftadd@exp1& (0+255),w,b
 13532  001C72  A4D8               	btfss	status,2,c
 13533  001C74  D7F3               	goto	l6092
 13534  001C76                     l1157:
 13535                           
 13536                           ; BSR set to: 0
 13537  001C76  0100               	movlb	0	; () banked
 13538  001C78  AFAB               	btfss	___ftadd@sign& (0+255),7,b
 13539  001C7A  D012               	goto	l1166
 13540                           
 13541                           ; BSR set to: 0
 13542  001C7C  0EFF               	movlw	255
 13543  001C7E  0100               	movlb	0	; () banked
 13544  001C80  1BA2               	xorwf	___ftadd@f1& (0+255),f,b
 13545  001C82  0EFF               	movlw	255
 13546  001C84  0100               	movlb	0	; () banked
 13547  001C86  1BA3               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 13548  001C88  0EFF               	movlw	255
 13549  001C8A  0100               	movlb	0	; () banked
 13550  001C8C  1BA4               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 13551  001C8E  0E01               	movlw	1
 13552  001C90  0100               	movlb	0	; () banked
 13553  001C92  27A2               	addwf	___ftadd@f1& (0+255),f,b
 13554  001C94  0E00               	movlw	0
 13555  001C96  0100               	movlb	0	; () banked
 13556  001C98  23A3               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 13557  001C9A  0E00               	movlw	0
 13558  001C9C  0100               	movlb	0	; () banked
 13559  001C9E  23A4               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 13560  001CA0                     l1166:
 13561                           
 13562                           ; BSR set to: 0
 13563  001CA0  0100               	movlb	0	; () banked
 13564  001CA2  ADAB               	btfss	___ftadd@sign& (0+255),6,b
 13565  001CA4  D012               	goto	l6100
 13566                           
 13567                           ; BSR set to: 0
 13568  001CA6  0EFF               	movlw	255
 13569  001CA8  0100               	movlb	0	; () banked
 13570  001CAA  1BA5               	xorwf	___ftadd@f2& (0+255),f,b
 13571  001CAC  0EFF               	movlw	255
 13572  001CAE  0100               	movlb	0	; () banked
 13573  001CB0  1BA6               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 13574  001CB2  0EFF               	movlw	255
 13575  001CB4  0100               	movlb	0	; () banked
 13576  001CB6  1BA7               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 13577  001CB8  0E01               	movlw	1
 13578  001CBA  0100               	movlb	0	; () banked
 13579  001CBC  27A5               	addwf	___ftadd@f2& (0+255),f,b
 13580  001CBE  0E00               	movlw	0
 13581  001CC0  0100               	movlb	0	; () banked
 13582  001CC2  23A6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 13583  001CC4  0E00               	movlw	0
 13584  001CC6  0100               	movlb	0	; () banked
 13585  001CC8  23A7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 13586  001CCA                     l6100:
 13587                           
 13588                           ; BSR set to: 0
 13589  001CCA  0E00               	movlw	0
 13590  001CCC  0100               	movlb	0	; () banked
 13591  001CCE  6FAB               	movwf	___ftadd@sign& (0+255),b
 13592                           
 13593                           ; BSR set to: 0
 13594  001CD0  0100               	movlb	0	; () banked
 13595  001CD2  51A2               	movf	___ftadd@f1& (0+255),w,b
 13596  001CD4  0100               	movlb	0	; () banked
 13597  001CD6  27A5               	addwf	___ftadd@f2& (0+255),f,b
 13598  001CD8  0100               	movlb	0	; () banked
 13599  001CDA  51A3               	movf	(___ftadd@f1+1)& (0+255),w,b
 13600  001CDC  0100               	movlb	0	; () banked
 13601  001CDE  23A6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 13602  001CE0  0100               	movlb	0	; () banked
 13603  001CE2  51A4               	movf	(___ftadd@f1+2)& (0+255),w,b
 13604  001CE4  0100               	movlb	0	; () banked
 13605  001CE6  23A7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 13606                           
 13607                           ; BSR set to: 0
 13608  001CE8  0100               	movlb	0	; () banked
 13609  001CEA  AFA7               	btfss	(___ftadd@f2+2)& (0+255),7,b
 13610  001CEC  D015               	goto	l6110
 13611                           
 13612                           ; BSR set to: 0
 13613  001CEE  0EFF               	movlw	255
 13614  001CF0  0100               	movlb	0	; () banked
 13615  001CF2  1BA5               	xorwf	___ftadd@f2& (0+255),f,b
 13616  001CF4  0EFF               	movlw	255
 13617  001CF6  0100               	movlb	0	; () banked
 13618  001CF8  1BA6               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 13619  001CFA  0EFF               	movlw	255
 13620  001CFC  0100               	movlb	0	; () banked
 13621  001CFE  1BA7               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 13622  001D00  0E01               	movlw	1
 13623  001D02  0100               	movlb	0	; () banked
 13624  001D04  27A5               	addwf	___ftadd@f2& (0+255),f,b
 13625  001D06  0E00               	movlw	0
 13626  001D08  0100               	movlb	0	; () banked
 13627  001D0A  23A6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 13628  001D0C  0E00               	movlw	0
 13629  001D0E  0100               	movlb	0	; () banked
 13630  001D10  23A7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 13631                           
 13632                           ; BSR set to: 0
 13633  001D12  0E01               	movlw	1
 13634  001D14  0100               	movlb	0	; () banked
 13635  001D16  6FAB               	movwf	___ftadd@sign& (0+255),b
 13636  001D18                     l6110:
 13637                           
 13638                           ; BSR set to: 0
 13639  001D18  C0A5  F023         	movff	___ftadd@f2,___ftpack@arg
 13640  001D1C  C0A6  F024         	movff	___ftadd@f2+1,___ftpack@arg+1
 13641  001D20  C0A7  F025         	movff	___ftadd@f2+2,___ftpack@arg+2
 13642  001D24  C0AD  F026         	movff	___ftadd@exp1,___ftpack@exp
 13643  001D28  C0AB  F027         	movff	___ftadd@sign,___ftpack@sign
 13644  001D2C  EC16  F019         	call	___ftpack	;wreg free
 13645  001D30  C023  F0A2         	movff	?___ftpack,?___ftadd
 13646  001D34  C024  F0A3         	movff	?___ftpack+1,?___ftadd+1
 13647  001D38  C025  F0A4         	movff	?___ftpack+2,?___ftadd+2
 13648  001D3C  0012               	return	
 13649  001D3E                     __end_of___ftadd:
 13650                           	opt stack 0
 13651                           tblptru	equ	0xFF8
 13652                           tblptrh	equ	0xFF7
 13653                           tblptrl	equ	0xFF6
 13654                           tablat	equ	0xFF5
 13655                           prodh	equ	0xFF4
 13656                           prodl	equ	0xFF3
 13657                           intcon	equ	0xFF2
 13658                           intcon3	equ	0xFF0
 13659                           postinc0	equ	0xFEE
 13660                           wreg	equ	0xFE8
 13661                           postdec1	equ	0xFE5
 13662                           fsr1l	equ	0xFE1
 13663                           indf2	equ	0xFDF
 13664                           postinc2	equ	0xFDE
 13665                           postdec2	equ	0xFDD
 13666                           fsr2h	equ	0xFDA
 13667                           fsr2l	equ	0xFD9
 13668                           status	equ	0xFD8
 13669                           
 13670 ;; *************** function ___awtoft *****************
 13671 ;; Defined at:
 13672 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 13673 ;; Parameters:    Size  Location     Type
 13674 ;;  c               2   42[COMRAM] int 
 13675 ;; Auto vars:     Size  Location     Type
 13676 ;;  sign            1   45[COMRAM] unsigned char 
 13677 ;; Return value:  Size  Location     Type
 13678 ;;                  3   42[COMRAM] float 
 13679 ;; Registers used:
 13680 ;;		wreg, status,2, status,0, cstack
 13681 ;; Tracked objects:
 13682 ;;		On entry : 0/0
 13683 ;;		On exit  : 0/0
 13684 ;;		Unchanged: 0/0
 13685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13686 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13687 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13689 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13690 ;;Total ram usage:        4 bytes
 13691 ;; Hardware stack levels used:    1
 13692 ;; Hardware stack levels required when called:    4
 13693 ;; This function calls:
 13694 ;;		___ftpack
 13695 ;; This function is called by:
 13696 ;;		_sortBattery
 13697 ;;		_angleToPulse
 13698 ;;		_testFrequency
 13699 ;; This function uses a non-reentrant model
 13700 ;;
 13701                           
 13702                           	psect	text57
 13703  003D90                     __ptext57:
 13704                           	opt stack 0
 13705  003D90                     ___awtoft:
 13706                           	opt stack 23
 13707                           
 13708                           ;incstack = 0
 13709  003D90  0E00               	movlw	0
 13710  003D92  6E2E               	movwf	___awtoft@sign,c
 13711  003D94  AE2C               	btfss	___awtoft@c+1,7,c
 13712  003D96  D006               	goto	l6572
 13713  003D98  6C2B               	negf	___awtoft@c,c
 13714  003D9A  1E2C               	comf	___awtoft@c+1,f,c
 13715  003D9C  B0D8               	btfsc	status,0,c
 13716  003D9E  2A2C               	incf	___awtoft@c+1,f,c
 13717  003DA0  0E01               	movlw	1
 13718  003DA2  6E2E               	movwf	___awtoft@sign,c
 13719  003DA4                     l6572:
 13720  003DA4  C02B  F023         	movff	___awtoft@c,___ftpack@arg
 13721  003DA8  C02C  F024         	movff	___awtoft@c+1,___ftpack@arg+1
 13722  003DAC  6A25               	clrf	___ftpack@arg+2,c
 13723  003DAE  0E8E               	movlw	142
 13724  003DB0  6E26               	movwf	___ftpack@exp,c
 13725  003DB2  C02E  F027         	movff	___awtoft@sign,___ftpack@sign
 13726  003DB6  EC16  F019         	call	___ftpack	;wreg free
 13727  003DBA  C023  F02B         	movff	?___ftpack,?___awtoft
 13728  003DBE  C024  F02C         	movff	?___ftpack+1,?___awtoft+1
 13729  003DC2  C025  F02D         	movff	?___ftpack+2,?___awtoft+2
 13730  003DC6  0012               	return	
 13731  003DC8                     __end_of___awtoft:
 13732                           	opt stack 0
 13733                           tblptru	equ	0xFF8
 13734                           tblptrh	equ	0xFF7
 13735                           tblptrl	equ	0xFF6
 13736                           tablat	equ	0xFF5
 13737                           prodh	equ	0xFF4
 13738                           prodl	equ	0xFF3
 13739                           intcon	equ	0xFF2
 13740                           intcon3	equ	0xFF0
 13741                           postinc0	equ	0xFEE
 13742                           wreg	equ	0xFE8
 13743                           postdec1	equ	0xFE5
 13744                           fsr1l	equ	0xFE1
 13745                           indf2	equ	0xFDF
 13746                           postinc2	equ	0xFDE
 13747                           postdec2	equ	0xFDD
 13748                           fsr2h	equ	0xFDA
 13749                           fsr2l	equ	0xFD9
 13750                           status	equ	0xFD8
 13751                           
 13752 ;; *************** function ___altoft *****************
 13753 ;; Defined at:
 13754 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 13755 ;; Parameters:    Size  Location     Type
 13756 ;;  c               4   42[COMRAM] long 
 13757 ;; Auto vars:     Size  Location     Type
 13758 ;;  sign            1   51[COMRAM] unsigned char 
 13759 ;;  exp             1   50[COMRAM] unsigned char 
 13760 ;; Return value:  Size  Location     Type
 13761 ;;                  3   42[COMRAM] float 
 13762 ;; Registers used:
 13763 ;;		wreg, status,2, status,0, cstack
 13764 ;; Tracked objects:
 13765 ;;		On entry : 0/0
 13766 ;;		On exit  : 0/0
 13767 ;;		Unchanged: 0/0
 13768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13769 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13770 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13771 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13772 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13773 ;;Total ram usage:       10 bytes
 13774 ;; Hardware stack levels used:    1
 13775 ;; Hardware stack levels required when called:    4
 13776 ;; This function calls:
 13777 ;;		___ftpack
 13778 ;; This function is called by:
 13779 ;;		_sortBattery
 13780 ;;		_angleToPulse
 13781 ;; This function uses a non-reentrant model
 13782 ;;
 13783                           
 13784                           	psect	text58
 13785  003764                     __ptext58:
 13786                           	opt stack 0
 13787  003764                     ___altoft:
 13788                           	opt stack 23
 13789                           
 13790                           ;incstack = 0
 13791  003764  0E00               	movlw	0
 13792  003766  6E34               	movwf	___altoft@sign,c
 13793  003768  0E8E               	movlw	142
 13794  00376A  6E33               	movwf	___altoft@exp,c
 13795  00376C  AE2E               	btfss	___altoft@c+3,7,c
 13796  00376E  D011               	goto	l6504
 13797  003770  1E2E               	comf	___altoft@c+3,f,c
 13798  003772  1E2D               	comf	___altoft@c+2,f,c
 13799  003774  1E2C               	comf	___altoft@c+1,f,c
 13800  003776  6C2B               	negf	___altoft@c,c
 13801  003778  0E00               	movlw	0
 13802  00377A  222C               	addwfc	___altoft@c+1,f,c
 13803  00377C  222D               	addwfc	___altoft@c+2,f,c
 13804  00377E  222E               	addwfc	___altoft@c+3,f,c
 13805  003780  0E01               	movlw	1
 13806  003782  6E34               	movwf	___altoft@sign,c
 13807  003784  D006               	goto	l6504
 13808  003786                     l6502:
 13809  003786  90D8               	bcf	status,0,c
 13810  003788  322E               	rrcf	___altoft@c+3,f,c
 13811  00378A  322D               	rrcf	___altoft@c+2,f,c
 13812  00378C  322C               	rrcf	___altoft@c+1,f,c
 13813  00378E  322B               	rrcf	___altoft@c,f,c
 13814  003790  2A33               	incf	___altoft@exp,f,c
 13815  003792                     l6504:
 13816  003792  0E00               	movlw	0
 13817  003794  142B               	andwf	___altoft@c,w,c
 13818  003796  6E2F               	movwf	??___altoft& (0+255),c
 13819  003798  0E00               	movlw	0
 13820  00379A  142C               	andwf	___altoft@c+1,w,c
 13821  00379C  6E30               	movwf	(??___altoft+1)& (0+255),c
 13822  00379E  0E00               	movlw	0
 13823  0037A0  142D               	andwf	___altoft@c+2,w,c
 13824  0037A2  6E31               	movwf	(??___altoft+2)& (0+255),c
 13825  0037A4  0EFF               	movlw	255
 13826  0037A6  142E               	andwf	___altoft@c+3,w,c
 13827  0037A8  6E32               	movwf	(??___altoft+3)& (0+255),c
 13828  0037AA  502F               	movf	??___altoft,w,c
 13829  0037AC  1030               	iorwf	??___altoft+1,w,c
 13830  0037AE  1031               	iorwf	??___altoft+2,w,c
 13831  0037B0  1032               	iorwf	??___altoft+3,w,c
 13832  0037B2  A4D8               	btfss	status,2,c
 13833  0037B4  D7E8               	goto	l6502
 13834  0037B6  C02B  F023         	movff	___altoft@c,___ftpack@arg
 13835  0037BA  C02C  F024         	movff	___altoft@c+1,___ftpack@arg+1
 13836  0037BE  C02D  F025         	movff	___altoft@c+2,___ftpack@arg+2
 13837  0037C2  C033  F026         	movff	___altoft@exp,___ftpack@exp
 13838  0037C6  C034  F027         	movff	___altoft@sign,___ftpack@sign
 13839  0037CA  EC16  F019         	call	___ftpack	;wreg free
 13840  0037CE  C023  F02B         	movff	?___ftpack,?___altoft
 13841  0037D2  C024  F02C         	movff	?___ftpack+1,?___altoft+1
 13842  0037D6  C025  F02D         	movff	?___ftpack+2,?___altoft+2
 13843  0037DA  0012               	return	
 13844  0037DC                     __end_of___altoft:
 13845                           	opt stack 0
 13846                           tblptru	equ	0xFF8
 13847                           tblptrh	equ	0xFF7
 13848                           tblptrl	equ	0xFF6
 13849                           tablat	equ	0xFF5
 13850                           prodh	equ	0xFF4
 13851                           prodl	equ	0xFF3
 13852                           intcon	equ	0xFF2
 13853                           intcon3	equ	0xFF0
 13854                           postinc0	equ	0xFEE
 13855                           wreg	equ	0xFE8
 13856                           postdec1	equ	0xFE5
 13857                           fsr1l	equ	0xFE1
 13858                           indf2	equ	0xFDF
 13859                           postinc2	equ	0xFDE
 13860                           postdec2	equ	0xFDD
 13861                           fsr2h	equ	0xFDA
 13862                           fsr2l	equ	0xFD9
 13863                           status	equ	0xFD8
 13864                           
 13865 ;; *************** function ___ftpack *****************
 13866 ;; Defined at:
 13867 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 13868 ;; Parameters:    Size  Location     Type
 13869 ;;  arg             3   34[COMRAM] unsigned um
 13870 ;;  exp             1   37[COMRAM] unsigned char 
 13871 ;;  sign            1   38[COMRAM] unsigned char 
 13872 ;; Auto vars:     Size  Location     Type
 13873 ;;		None
 13874 ;; Return value:  Size  Location     Type
 13875 ;;                  3   34[COMRAM] float 
 13876 ;; Registers used:
 13877 ;;		wreg, status,2, status,0
 13878 ;; Tracked objects:
 13879 ;;		On entry : 0/0
 13880 ;;		On exit  : 0/0
 13881 ;;		Unchanged: 0/0
 13882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13883 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13885 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13886 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13887 ;;Total ram usage:        8 bytes
 13888 ;; Hardware stack levels used:    1
 13889 ;; Hardware stack levels required when called:    3
 13890 ;; This function calls:
 13891 ;;		Nothing
 13892 ;; This function is called by:
 13893 ;;		___altoft
 13894 ;;		___awtoft
 13895 ;;		___ftadd
 13896 ;;		___ftdiv
 13897 ;;		___ftmul
 13898 ;;		___lltoft
 13899 ;; This function uses a non-reentrant model
 13900 ;;
 13901                           
 13902                           	psect	text59
 13903  00322C                     __ptext59:
 13904                           	opt stack 0
 13905  00322C                     ___ftpack:
 13906                           	opt stack 23
 13907                           
 13908                           ;incstack = 0
 13909  00322C  5026               	movf	___ftpack@exp,w,c
 13910  00322E  B4D8               	btfsc	status,2,c
 13911  003230  D005               	goto	l6000
 13912  003232  5023               	movf	___ftpack@arg,w,c
 13913  003234  1024               	iorwf	___ftpack@arg+1,w,c
 13914  003236  1025               	iorwf	___ftpack@arg+2,w,c
 13915  003238  A4D8               	btfss	status,2,c
 13916  00323A  D00C               	goto	l6006
 13917  00323C                     l6000:
 13918  00323C  0E00               	movlw	0
 13919  00323E  6E23               	movwf	?___ftpack,c
 13920  003240  0E00               	movlw	0
 13921  003242  6E24               	movwf	?___ftpack+1,c
 13922  003244  0E00               	movlw	0
 13923  003246  6E25               	movwf	?___ftpack+2,c
 13924  003248  0012               	return	
 13925  00324A                     l6004:
 13926  00324A  2A26               	incf	___ftpack@exp,f,c
 13927  00324C  90D8               	bcf	status,0,c
 13928  00324E  3225               	rrcf	___ftpack@arg+2,f,c
 13929  003250  3224               	rrcf	___ftpack@arg+1,f,c
 13930  003252  3223               	rrcf	___ftpack@arg,f,c
 13931  003254                     l6006:
 13932  003254  0E00               	movlw	0
 13933  003256  1423               	andwf	___ftpack@arg,w,c
 13934  003258  6E28               	movwf	??___ftpack& (0+255),c
 13935  00325A  0E00               	movlw	0
 13936  00325C  1424               	andwf	___ftpack@arg+1,w,c
 13937  00325E  6E29               	movwf	(??___ftpack+1)& (0+255),c
 13938  003260  0EFE               	movlw	254
 13939  003262  1425               	andwf	___ftpack@arg+2,w,c
 13940  003264  6E2A               	movwf	(??___ftpack+2)& (0+255),c
 13941  003266  5028               	movf	??___ftpack,w,c
 13942  003268  1029               	iorwf	??___ftpack+1,w,c
 13943  00326A  102A               	iorwf	??___ftpack+2,w,c
 13944  00326C  B4D8               	btfsc	status,2,c
 13945  00326E  D00C               	goto	l6012
 13946  003270  D7EC               	goto	l6004
 13947  003272                     l6008:
 13948  003272  2A26               	incf	___ftpack@exp,f,c
 13949  003274  0E01               	movlw	1
 13950  003276  2623               	addwf	___ftpack@arg,f,c
 13951  003278  0E00               	movlw	0
 13952  00327A  2224               	addwfc	___ftpack@arg+1,f,c
 13953  00327C  0E00               	movlw	0
 13954  00327E  2225               	addwfc	___ftpack@arg+2,f,c
 13955  003280  90D8               	bcf	status,0,c
 13956  003282  3225               	rrcf	___ftpack@arg+2,f,c
 13957  003284  3224               	rrcf	___ftpack@arg+1,f,c
 13958  003286  3223               	rrcf	___ftpack@arg,f,c
 13959  003288                     l6012:
 13960  003288  0E00               	movlw	0
 13961  00328A  1423               	andwf	___ftpack@arg,w,c
 13962  00328C  6E28               	movwf	??___ftpack& (0+255),c
 13963  00328E  0E00               	movlw	0
 13964  003290  1424               	andwf	___ftpack@arg+1,w,c
 13965  003292  6E29               	movwf	(??___ftpack+1)& (0+255),c
 13966  003294  0EFF               	movlw	255
 13967  003296  1425               	andwf	___ftpack@arg+2,w,c
 13968  003298  6E2A               	movwf	(??___ftpack+2)& (0+255),c
 13969  00329A  5028               	movf	??___ftpack,w,c
 13970  00329C  1029               	iorwf	??___ftpack+1,w,c
 13971  00329E  102A               	iorwf	??___ftpack+2,w,c
 13972  0032A0  B4D8               	btfsc	status,2,c
 13973  0032A2  D006               	goto	l6016
 13974  0032A4  D7E6               	goto	l6008
 13975  0032A6                     l6014:
 13976  0032A6  0626               	decf	___ftpack@exp,f,c
 13977  0032A8  90D8               	bcf	status,0,c
 13978  0032AA  3623               	rlcf	___ftpack@arg,f,c
 13979  0032AC  3624               	rlcf	___ftpack@arg+1,f,c
 13980  0032AE  3625               	rlcf	___ftpack@arg+2,f,c
 13981  0032B0                     l6016:
 13982  0032B0  BE24               	btfsc	___ftpack@arg+1,7,c
 13983  0032B2  D003               	goto	l1119
 13984  0032B4  0E02               	movlw	2
 13985  0032B6  6026               	cpfslt	___ftpack@exp,c
 13986  0032B8  D7F6               	goto	l6014
 13987  0032BA                     l1119:
 13988  0032BA  A026               	btfss	___ftpack@exp,0,c
 13989  0032BC  9E24               	bcf	___ftpack@arg+1,7,c
 13990  0032BE  90D8               	bcf	status,0,c
 13991  0032C0  3226               	rrcf	___ftpack@exp,f,c
 13992  0032C2  5026               	movf	___ftpack@exp,w,c
 13993  0032C4  1225               	iorwf	___ftpack@arg+2,f,c
 13994  0032C6  5027               	movf	___ftpack@sign,w,c
 13995  0032C8  A4D8               	btfss	status,2,c
 13996  0032CA  8E25               	bsf	___ftpack@arg+2,7,c
 13997  0032CC  C023  F023         	movff	___ftpack@arg,?___ftpack
 13998  0032D0  C024  F024         	movff	___ftpack@arg+1,?___ftpack+1
 13999  0032D4  C025  F025         	movff	___ftpack@arg+2,?___ftpack+2
 14000  0032D8  0012               	return	
 14001  0032DA                     __end_of___ftpack:
 14002                           	opt stack 0
 14003                           tblptru	equ	0xFF8
 14004                           tblptrh	equ	0xFF7
 14005                           tblptrl	equ	0xFF6
 14006                           tablat	equ	0xFF5
 14007                           prodh	equ	0xFF4
 14008                           prodl	equ	0xFF3
 14009                           intcon	equ	0xFF2
 14010                           intcon3	equ	0xFF0
 14011                           postinc0	equ	0xFEE
 14012                           wreg	equ	0xFE8
 14013                           postdec1	equ	0xFE5
 14014                           fsr1l	equ	0xFE1
 14015                           indf2	equ	0xFDF
 14016                           postinc2	equ	0xFDE
 14017                           postdec2	equ	0xFDD
 14018                           fsr2h	equ	0xFDA
 14019                           fsr2l	equ	0xFD9
 14020                           status	equ	0xFD8
 14021                           
 14022 ;; *************** function _initTimer *****************
 14023 ;; Defined at:
 14024 ;;		line 52 in file "timer.c"
 14025 ;; Parameters:    Size  Location     Type
 14026 ;;  timer           2   34[COMRAM] int 
 14027 ;; Auto vars:     Size  Location     Type
 14028 ;;		None
 14029 ;; Return value:  Size  Location     Type
 14030 ;;                  1    wreg      void 
 14031 ;; Registers used:
 14032 ;;		wreg, status,2, status,0
 14033 ;; Tracked objects:
 14034 ;;		On entry : 0/0
 14035 ;;		On exit  : 0/0
 14036 ;;		Unchanged: 0/0
 14037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14038 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14040 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14041 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14042 ;;Total ram usage:        4 bytes
 14043 ;; Hardware stack levels used:    1
 14044 ;; Hardware stack levels required when called:    3
 14045 ;; This function calls:
 14046 ;;		Nothing
 14047 ;; This function is called by:
 14048 ;;		_main
 14049 ;;		_initServo
 14050 ;;		_testFrequency
 14051 ;; This function uses a non-reentrant model
 14052 ;;
 14053                           
 14054                           	psect	text60
 14055  003C88                     __ptext60:
 14056                           	opt stack 0
 14057  003C88                     _initTimer:
 14058                           	opt stack 27
 14059                           
 14060                           ;timer.c: 53: switch(timer){
 14061                           
 14062                           ;incstack = 0
 14063  003C88  D00F               	goto	l5036
 14064  003C8A                     l5018:
 14065                           
 14066                           ;timer.c: 55: T0CON = 0;
 14067  003C8A  0E00               	movlw	0
 14068  003C8C  6ED5               	movwf	4053,c	;volatile
 14069                           
 14070                           ;timer.c: 56: T0CON |= 1<<3;
 14071  003C8E  86D5               	bsf	4053,3,c	;volatile
 14072                           
 14073                           ;timer.c: 58: TMR0IE = 1;
 14074  003C90  8AF2               	bsf	intcon,5,c	;volatile
 14075                           
 14076                           ;timer.c: 59: break;
 14077  003C92  D01C               	goto	l448
 14078  003C94                     l5024:
 14079                           
 14080                           ;timer.c: 61: T1CON = 0;
 14081  003C94  0E00               	movlw	0
 14082  003C96  6ECD               	movwf	4045,c	;volatile
 14083                           
 14084                           ;timer.c: 63: T1CON |= 0b11<<4;
 14085  003C98  0E30               	movlw	48
 14086  003C9A  12CD               	iorwf	4045,f,c	;volatile
 14087                           
 14088                           ;timer.c: 64: TMR1IE = 1;
 14089  003C9C  809D               	bsf	3997,0,c	;volatile
 14090                           
 14091                           ;timer.c: 65: break;
 14092  003C9E  D016               	goto	l448
 14093  003CA0                     l5030:
 14094                           
 14095                           ;timer.c: 67: T3CON = 0;
 14096  003CA0  0E00               	movlw	0
 14097  003CA2  6EB1               	movwf	4017,c	;volatile
 14098                           
 14099                           ;timer.c: 68: TMR3IE = 1;
 14100  003CA4  82A0               	bsf	4000,1,c	;volatile
 14101                           
 14102                           ;timer.c: 70: }
 14103                           
 14104                           ;timer.c: 69: break;
 14105  003CA6  D012               	goto	l448
 14106  003CA8                     l5036:
 14107  003CA8  C023  F025         	movff	initTimer@timer,??_initTimer
 14108  003CAC  C024  F026         	movff	initTimer@timer+1,??_initTimer+1
 14109                           
 14110                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14111                           ; Switch size 1, requested type "space"
 14112                           ; Number of cases is 1, Range of values is 0 to 0
 14113                           ; switch strategies available:
 14114                           ; Name         Instructions Cycles
 14115                           ; simple_byte            4     3 (average)
 14116                           ;	Chosen strategy is simple_byte
 14117  003CB0  5026               	movf	??_initTimer+1,w,c
 14118  003CB2  0A00               	xorlw	0	; case 0
 14119  003CB4  A4D8               	btfss	status,2,c
 14120  003CB6  D00A               	goto	l448
 14121                           
 14122                           ; Switch size 1, requested type "space"
 14123                           ; Number of cases is 3, Range of values is 0 to 3
 14124                           ; switch strategies available:
 14125                           ; Name         Instructions Cycles
 14126                           ; simple_byte           10     6 (average)
 14127                           ;	Chosen strategy is simple_byte
 14128  003CB8  5025               	movf	??_initTimer,w,c
 14129  003CBA  0A00               	xorlw	0	; case 0
 14130  003CBC  B4D8               	btfsc	status,2,c
 14131  003CBE  D7E5               	goto	l5018
 14132  003CC0  0A01               	xorlw	1	; case 1
 14133  003CC2  B4D8               	btfsc	status,2,c
 14134  003CC4  D7E7               	goto	l5024
 14135  003CC6  0A02               	xorlw	2	; case 3
 14136  003CC8  B4D8               	btfsc	status,2,c
 14137  003CCA  D7EA               	goto	l5030
 14138  003CCC                     l448:
 14139                           
 14140                           ;timer.c: 71: PEIE = 1;
 14141  003CCC  8CF2               	bsf	intcon,6,c	;volatile
 14142                           
 14143                           ;timer.c: 72: (INTCONbits.GIE = 1);
 14144  003CCE  8EF2               	bsf	intcon,7,c	;volatile
 14145  003CD0  0012               	return		;funcret
 14146  003CD2                     __end_of_initTimer:
 14147                           	opt stack 0
 14148                           tblptru	equ	0xFF8
 14149                           tblptrh	equ	0xFF7
 14150                           tblptrl	equ	0xFF6
 14151                           tablat	equ	0xFF5
 14152                           prodh	equ	0xFF4
 14153                           prodl	equ	0xFF3
 14154                           intcon	equ	0xFF2
 14155                           intcon3	equ	0xFF0
 14156                           postinc0	equ	0xFEE
 14157                           wreg	equ	0xFE8
 14158                           postdec1	equ	0xFE5
 14159                           fsr1l	equ	0xFE1
 14160                           indf2	equ	0xFDF
 14161                           postinc2	equ	0xFDE
 14162                           postdec2	equ	0xFDD
 14163                           fsr2h	equ	0xFDA
 14164                           fsr2l	equ	0xFD9
 14165                           status	equ	0xFD8
 14166                           
 14167 ;; *************** function _initLCD *****************
 14168 ;; Defined at:
 14169 ;;		line 15 in file "lcd.c"
 14170 ;; Parameters:    Size  Location     Type
 14171 ;;		None
 14172 ;; Auto vars:     Size  Location     Type
 14173 ;;		None
 14174 ;; Return value:  Size  Location     Type
 14175 ;;                  1    wreg      void 
 14176 ;; Registers used:
 14177 ;;		wreg, status,2, status,0, cstack
 14178 ;; Tracked objects:
 14179 ;;		On entry : 0/0
 14180 ;;		On exit  : 0/0
 14181 ;;		Unchanged: 0/0
 14182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14185 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14186 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14187 ;;Total ram usage:        1 bytes
 14188 ;; Hardware stack levels used:    1
 14189 ;; Hardware stack levels required when called:    5
 14190 ;; This function calls:
 14191 ;;		_lcdInst
 14192 ;; This function is called by:
 14193 ;;		_main
 14194 ;;		_debug
 14195 ;; This function uses a non-reentrant model
 14196 ;;
 14197                           
 14198                           	psect	text61
 14199  003CD2                     __ptext61:
 14200                           	opt stack 0
 14201  003CD2                     _initLCD:
 14202                           	opt stack 25
 14203                           
 14204                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
 14205                           
 14206                           ;incstack = 0
 14207  003CD2  0E31               	movlw	49
 14208  003CD4  6E27               	movwf	??_initLCD& (0+255),c
 14209  003CD6  0EB2               	movlw	178
 14210  003CD8                     u8167:
 14211  003CD8  2EE8               	decfsz	wreg,f,c
 14212  003CDA  D7FE               	bra	u8167
 14213  003CDC  2E27               	decfsz	??_initLCD& (0+255),f,c
 14214  003CDE  D7FC               	bra	u8167
 14215  003CE0  D000               	nop2	
 14216                           
 14217                           ;lcd.c: 18: lcdInst(0b00110011);
 14218  003CE2  0E33               	movlw	51
 14219  003CE4  EC58  F01F         	call	_lcdInst
 14220                           
 14221                           ;lcd.c: 19: lcdInst(0b00110010);
 14222  003CE8  0E32               	movlw	50
 14223  003CEA  EC58  F01F         	call	_lcdInst
 14224                           
 14225                           ;lcd.c: 20: lcdInst(0b00101000);
 14226  003CEE  0E28               	movlw	40
 14227  003CF0  EC58  F01F         	call	_lcdInst
 14228                           
 14229                           ;lcd.c: 21: lcdInst(0b00001111);
 14230  003CF4  0E0F               	movlw	15
 14231  003CF6  EC58  F01F         	call	_lcdInst
 14232                           
 14233                           ;lcd.c: 22: lcdInst(0b00000110);
 14234  003CFA  0E06               	movlw	6
 14235  003CFC  EC58  F01F         	call	_lcdInst
 14236                           
 14237                           ;lcd.c: 23: lcdInst(0b00000001);
 14238  003D00  0E01               	movlw	1
 14239  003D02  EC58  F01F         	call	_lcdInst
 14240                           
 14241                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
 14242  003D06  0E31               	movlw	49
 14243  003D08  6E27               	movwf	??_initLCD& (0+255),c
 14244  003D0A  0EB2               	movlw	178
 14245  003D0C                     u8177:
 14246  003D0C  2EE8               	decfsz	wreg,f,c
 14247  003D0E  D7FE               	bra	u8177
 14248  003D10  2E27               	decfsz	??_initLCD& (0+255),f,c
 14249  003D12  D7FC               	bra	u8177
 14250  003D14  D000               	nop2	
 14251  003D16  0012               	return		;funcret
 14252  003D18                     __end_of_initLCD:
 14253                           	opt stack 0
 14254                           tblptru	equ	0xFF8
 14255                           tblptrh	equ	0xFF7
 14256                           tblptrl	equ	0xFF6
 14257                           tablat	equ	0xFF5
 14258                           prodh	equ	0xFF4
 14259                           prodl	equ	0xFF3
 14260                           intcon	equ	0xFF2
 14261                           intcon3	equ	0xFF0
 14262                           postinc0	equ	0xFEE
 14263                           wreg	equ	0xFE8
 14264                           postdec1	equ	0xFE5
 14265                           fsr1l	equ	0xFE1
 14266                           indf2	equ	0xFDF
 14267                           postinc2	equ	0xFDE
 14268                           postdec2	equ	0xFDD
 14269                           fsr2h	equ	0xFDA
 14270                           fsr2l	equ	0xFD9
 14271                           status	equ	0xFD8
 14272                           
 14273 ;; *************** function _lcdInst *****************
 14274 ;; Defined at:
 14275 ;;		line 27 in file "lcd.c"
 14276 ;; Parameters:    Size  Location     Type
 14277 ;;  data            1    wreg     unsigned char 
 14278 ;; Auto vars:     Size  Location     Type
 14279 ;;  data            1   37[COMRAM] unsigned char 
 14280 ;; Return value:  Size  Location     Type
 14281 ;;                  1    wreg      void 
 14282 ;; Registers used:
 14283 ;;		wreg, status,2, status,0, cstack
 14284 ;; Tracked objects:
 14285 ;;		On entry : 0/0
 14286 ;;		On exit  : 0/0
 14287 ;;		Unchanged: 0/0
 14288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14290 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14291 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14292 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14293 ;;Total ram usage:        2 bytes
 14294 ;; Hardware stack levels used:    1
 14295 ;; Hardware stack levels required when called:    4
 14296 ;; This function calls:
 14297 ;;		_lcdNibble
 14298 ;; This function is called by:
 14299 ;;		_initLCD
 14300 ;;		_lcdHome
 14301 ;;		_lcdClear
 14302 ;;		_lcdNewline
 14303 ;; This function uses a non-reentrant model
 14304 ;;
 14305                           
 14306                           	psect	text62
 14307  003EB0                     __ptext62:
 14308                           	opt stack 0
 14309  003EB0                     _lcdInst:
 14310                           	opt stack 22
 14311                           
 14312                           ;incstack = 0
 14313                           ;lcdInst@data stored from wreg
 14314  003EB0  6E26               	movwf	lcdInst@data,c
 14315                           
 14316                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 14317  003EB2  948C               	bcf	3980,2,c	;volatile
 14318                           
 14319                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 14320  003EB4  0E74               	movlw	116
 14321  003EB6                     u8187:
 14322  003EB6  2EE8               	decfsz	wreg,f,c
 14323  003EB8  D7FE               	bra	u8187
 14324  003EBA  D000               	nop2	
 14325                           
 14326                           ;lcd.c: 30: lcdNibble(data);
 14327  003EBC  5026               	movf	lcdInst@data,w,c
 14328  003EBE  EC91  F01C         	call	_lcdNibble
 14329                           
 14330                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 14331  003EC2  0E04               	movlw	4
 14332  003EC4  6E25               	movwf	??_lcdInst& (0+255),c
 14333  003EC6  0E3E               	movlw	62
 14334  003EC8                     u8197:
 14335  003EC8  2EE8               	decfsz	wreg,f,c
 14336  003ECA  D7FE               	bra	u8197
 14337  003ECC  2E25               	decfsz	??_lcdInst& (0+255),f,c
 14338  003ECE  D7FC               	bra	u8197
 14339  003ED0  0012               	return		;funcret
 14340  003ED2                     __end_of_lcdInst:
 14341                           	opt stack 0
 14342                           tblptru	equ	0xFF8
 14343                           tblptrh	equ	0xFF7
 14344                           tblptrl	equ	0xFF6
 14345                           tablat	equ	0xFF5
 14346                           prodh	equ	0xFF4
 14347                           prodl	equ	0xFF3
 14348                           intcon	equ	0xFF2
 14349                           intcon3	equ	0xFF0
 14350                           postinc0	equ	0xFEE
 14351                           wreg	equ	0xFE8
 14352                           postdec1	equ	0xFE5
 14353                           fsr1l	equ	0xFE1
 14354                           indf2	equ	0xFDF
 14355                           postinc2	equ	0xFDE
 14356                           postdec2	equ	0xFDD
 14357                           fsr2h	equ	0xFDA
 14358                           fsr2l	equ	0xFD9
 14359                           status	equ	0xFD8
 14360                           
 14361 ;; *************** function _lcdNibble *****************
 14362 ;; Defined at:
 14363 ;;		line 46 in file "lcd.c"
 14364 ;; Parameters:    Size  Location     Type
 14365 ;;  data            1    wreg     unsigned char 
 14366 ;; Auto vars:     Size  Location     Type
 14367 ;;  data            1   35[COMRAM] unsigned char 
 14368 ;;  temp            1   34[COMRAM] unsigned char 
 14369 ;; Return value:  Size  Location     Type
 14370 ;;                  1    wreg      void 
 14371 ;; Registers used:
 14372 ;;		wreg, status,2, status,0
 14373 ;; Tracked objects:
 14374 ;;		On entry : 0/0
 14375 ;;		On exit  : 0/0
 14376 ;;		Unchanged: 0/0
 14377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14379 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14381 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14382 ;;Total ram usage:        2 bytes
 14383 ;; Hardware stack levels used:    1
 14384 ;; Hardware stack levels required when called:    3
 14385 ;; This function calls:
 14386 ;;		Nothing
 14387 ;; This function is called by:
 14388 ;;		_lcdInst
 14389 ;;		_putch
 14390 ;; This function uses a non-reentrant model
 14391 ;;
 14392                           
 14393                           	psect	text63
 14394  003922                     __ptext63:
 14395                           	opt stack 0
 14396  003922                     _lcdNibble:
 14397                           	opt stack 24
 14398                           
 14399                           ;incstack = 0
 14400                           ;lcdNibble@data stored from wreg
 14401  003922  6E24               	movwf	lcdNibble@data,c
 14402                           
 14403                           ;lcd.c: 48: char temp = data & 0xF0;
 14404  003924  5024               	movf	lcdNibble@data,w,c
 14405  003926  0BF0               	andlw	240
 14406  003928  6E23               	movwf	lcdNibble@temp,c
 14407                           
 14408                           ;lcd.c: 49: LATD = LATD & 0x0F;
 14409  00392A  508C               	movf	3980,w,c	;volatile
 14410  00392C  0B0F               	andlw	15
 14411  00392E  6E8C               	movwf	3980,c	;volatile
 14412                           
 14413                           ;lcd.c: 50: LATD = temp | LATD;
 14414  003930  5023               	movf	lcdNibble@temp,w,c
 14415  003932  108C               	iorwf	3980,w,c	;volatile
 14416  003934  6E8C               	movwf	3980,c	;volatile
 14417                           
 14418                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 14419  003936  968C               	bcf	3980,3,c	;volatile
 14420                           
 14421                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 14422  003938  0ED6               	movlw	214
 14423  00393A                     u8207:
 14424  00393A  D000               	nop2	
 14425  00393C  D000               	nop2	
 14426  00393E  2EE8               	decfsz	wreg,f,c
 14427  003940  D7FC               	bra	u8207
 14428  003942  D000               	nop2	
 14429                           
 14430                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 14431  003944  868C               	bsf	3980,3,c	;volatile
 14432                           
 14433                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 14434  003946  0ED6               	movlw	214
 14435  003948                     u8217:
 14436  003948  D000               	nop2	
 14437  00394A  D000               	nop2	
 14438  00394C  2EE8               	decfsz	wreg,f,c
 14439  00394E  D7FC               	bra	u8217
 14440  003950  D000               	nop2	
 14441                           
 14442                           ;lcd.c: 58: data = data << 4;
 14443  003952  3824               	swapf	lcdNibble@data,w,c
 14444  003954  0BF0               	andlw	240
 14445  003956  6E24               	movwf	lcdNibble@data,c
 14446                           
 14447                           ;lcd.c: 60: temp = data & 0xF0;
 14448  003958  5024               	movf	lcdNibble@data,w,c
 14449  00395A  0BF0               	andlw	240
 14450  00395C  6E23               	movwf	lcdNibble@temp,c
 14451                           
 14452                           ;lcd.c: 61: LATD = LATD & 0x0F;
 14453  00395E  508C               	movf	3980,w,c	;volatile
 14454  003960  0B0F               	andlw	15
 14455  003962  6E8C               	movwf	3980,c	;volatile
 14456                           
 14457                           ;lcd.c: 62: LATD = temp | LATD;
 14458  003964  5023               	movf	lcdNibble@temp,w,c
 14459  003966  108C               	iorwf	3980,w,c	;volatile
 14460  003968  6E8C               	movwf	3980,c	;volatile
 14461                           
 14462                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 14463  00396A  968C               	bcf	3980,3,c	;volatile
 14464                           
 14465                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 14466  00396C  0ED6               	movlw	214
 14467  00396E                     u8227:
 14468  00396E  D000               	nop2	
 14469  003970  D000               	nop2	
 14470  003972  2EE8               	decfsz	wreg,f,c
 14471  003974  D7FC               	bra	u8227
 14472  003976  D000               	nop2	
 14473                           
 14474                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 14475  003978  868C               	bsf	3980,3,c	;volatile
 14476                           
 14477                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 14478  00397A  0ED6               	movlw	214
 14479  00397C                     u8237:
 14480  00397C  D000               	nop2	
 14481  00397E  D000               	nop2	
 14482  003980  2EE8               	decfsz	wreg,f,c
 14483  003982  D7FC               	bra	u8237
 14484  003984  D000               	nop2	
 14485  003986  0012               	return		;funcret
 14486  003988                     __end_of_lcdNibble:
 14487                           	opt stack 0
 14488                           tblptru	equ	0xFF8
 14489                           tblptrh	equ	0xFF7
 14490                           tblptrl	equ	0xFF6
 14491                           tablat	equ	0xFF5
 14492                           prodh	equ	0xFF4
 14493                           prodl	equ	0xFF3
 14494                           intcon	equ	0xFF2
 14495                           intcon3	equ	0xFF0
 14496                           postinc0	equ	0xFEE
 14497                           wreg	equ	0xFE8
 14498                           postdec1	equ	0xFE5
 14499                           fsr1l	equ	0xFE1
 14500                           indf2	equ	0xFDF
 14501                           postinc2	equ	0xFDE
 14502                           postdec2	equ	0xFDD
 14503                           fsr2h	equ	0xFDA
 14504                           fsr2l	equ	0xFD9
 14505                           status	equ	0xFD8
 14506                           
 14507 ;; *************** function _service *****************
 14508 ;; Defined at:
 14509 ;;		line 341 in file "main.c"
 14510 ;; Parameters:    Size  Location     Type
 14511 ;;		None
 14512 ;; Auto vars:     Size  Location     Type
 14513 ;;  key             1   33[COMRAM] unsigned char 
 14514 ;; Return value:  Size  Location     Type
 14515 ;;                  1    wreg      void 
 14516 ;; Registers used:
 14517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14518 ;; Tracked objects:
 14519 ;;		On entry : 0/0
 14520 ;;		On exit  : 0/0
 14521 ;;		Unchanged: 0/0
 14522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14524 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14525 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14526 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14527 ;;Total ram usage:       15 bytes
 14528 ;; Hardware stack levels used:    1
 14529 ;; Hardware stack levels required when called:    2
 14530 ;; This function calls:
 14531 ;;		_keyPressedInterruptService
 14532 ;;		_servoInterruptService
 14533 ;;		i2_startTimer
 14534 ;; This function is called by:
 14535 ;;		Interrupt level 2
 14536 ;; This function uses a non-reentrant model
 14537 ;;
 14538                           
 14539                           	psect	intcode
 14540  000008                     __pintcode:
 14541                           	opt stack 0
 14542  000008                     _service:
 14543                           	opt stack 21
 14544                           
 14545                           ;incstack = 0
 14546  000008  825D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14547  00000A  EDC0  F015         	call	int_func,f	;refresh shadow registers
 14548                           tblptru	equ	0xFF8
 14549                           tblptrh	equ	0xFF7
 14550                           tblptrl	equ	0xFF6
 14551                           tablat	equ	0xFF5
 14552                           prodh	equ	0xFF4
 14553                           prodl	equ	0xFF3
 14554                           intcon	equ	0xFF2
 14555                           intcon3	equ	0xFF0
 14556                           postinc0	equ	0xFEE
 14557                           wreg	equ	0xFE8
 14558                           postdec1	equ	0xFE5
 14559                           fsr1l	equ	0xFE1
 14560                           indf2	equ	0xFDF
 14561                           postinc2	equ	0xFDE
 14562                           postdec2	equ	0xFDD
 14563                           fsr2h	equ	0xFDA
 14564                           fsr2l	equ	0xFD9
 14565                           status	equ	0xFD8
 14566                           
 14567                           	psect	intcode_body
 14568  002B80                     __pintcode_body:
 14569                           	opt stack 21
 14570  002B80                     int_func:
 14571                           	opt stack 21
 14572  002B80  0006               	pop		; remove dummy address from shadow register refresh
 14573  002B82  CFFA F014          	movff	pclath,??_service
 14574  002B86  CFFB F015          	movff	pclatu,??_service+1
 14575  002B8A  CFE9 F016          	movff	fsr0l,??_service+2
 14576  002B8E  CFEA F017          	movff	fsr0h,??_service+3
 14577  002B92  CFE1 F018          	movff	fsr1l,??_service+4
 14578  002B96  CFE2 F019          	movff	fsr1h,??_service+5
 14579  002B9A  CFD9 F01A          	movff	fsr2l,??_service+6
 14580  002B9E  CFDA F01B          	movff	fsr2h,??_service+7
 14581  002BA2  CFF3 F01C          	movff	prodl,??_service+8
 14582  002BA6  CFF4 F01D          	movff	prodh,??_service+9
 14583  002BAA  CFF6 F01E          	movff	tblptrl,??_service+10
 14584  002BAE  CFF7 F01F          	movff	tblptrh,??_service+11
 14585  002BB2  CFF8 F020          	movff	tblptru,??_service+12
 14586  002BB6  CFF5 F021          	movff	tablat,??_service+13
 14587                           
 14588                           ;main.c: 343: if( servoInterruptService() )return;
 14589  002BBA  ECC5  F014         	call	_servoInterruptService	;wreg free
 14590  002BBE  0900               	iorlw	0
 14591  002BC0  A4D8               	btfss	status,2,c
 14592  002BC2  D035               	goto	i2l198
 14593                           
 14594                           ;main.c: 348: if(TMR1IF){
 14595  002BC4  A09E               	btfss	3998,0,c	;volatile
 14596  002BC6  D017               	goto	i2l199
 14597                           
 14598                           ;main.c: 349: startTimer(1,0x8683);
 14599  002BC8  0E00               	movlw	0
 14600  002BCA  6E08               	movwf	i2startTimer@timer+1,c
 14601  002BCC  0E01               	movlw	1
 14602  002BCE  6E07               	movwf	i2startTimer@timer,c
 14603  002BD0  0E83               	movlw	131
 14604  002BD2  6E09               	movwf	i2startTimer@val,c
 14605  002BD4  0E86               	movlw	134
 14606  002BD6  6E0A               	movwf	i2startTimer@val+1,c
 14607  002BD8  0E00               	movlw	0
 14608  002BDA  6E0B               	movwf	i2startTimer@val+2,c
 14609  002BDC  0E00               	movlw	0
 14610  002BDE  6E0C               	movwf	i2startTimer@val+3,c
 14611  002BE0  EC1E  F01E         	call	i2_startTimer	;wreg free
 14612                           
 14613                           ;main.c: 350: time+=1;
 14614  002BE4  0E01               	movlw	1
 14615  002BE6  0101               	movlb	1	; () banked
 14616  002BE8  2755               	addwf	_time& (0+255),f,b
 14617  002BEA  0E00               	movlw	0
 14618  002BEC  2356               	addwfc	(_time+1)& (0+255),f,b
 14619  002BEE  2357               	addwfc	(_time+2)& (0+255),f,b
 14620  002BF0  2358               	addwfc	(_time+3)& (0+255),f,b
 14621                           
 14622                           ; BSR set to: 1
 14623                           ;main.c: 351: TMR1IF = 0;
 14624  002BF2  909E               	bcf	3998,0,c	;volatile
 14625                           
 14626                           ; BSR set to: 1
 14627                           ;main.c: 352: return;
 14628  002BF4  D01C               	goto	i2l198
 14629  002BF6                     i2l199:
 14630                           
 14631                           ;main.c: 353: }
 14632                           ;main.c: 356: if(INT0IF){ INT0IF = 0;
 14633  002BF6  A2F2               	btfss	intcon,1,c	;volatile
 14634  002BF8  D007               	goto	i2l200
 14635  002BFA  92F2               	bcf	intcon,1,c	;volatile
 14636                           
 14637                           ;main.c: 357: batteryDetected = 1;
 14638  002BFC  0E00               	movlw	0
 14639  002BFE  0101               	movlb	1	; () banked
 14640  002C00  6F5A               	movwf	(_batteryDetected+1)& (0+255),b
 14641  002C02  0E01               	movlw	1
 14642  002C04  6F59               	movwf	_batteryDetected& (0+255),b
 14643                           
 14644                           ; BSR set to: 1
 14645                           ;main.c: 358: return;
 14646  002C06  D013               	goto	i2l198
 14647  002C08                     i2l200:
 14648                           
 14649                           ;main.c: 359: }
 14650                           ;main.c: 362: if(INT1IF && INT1IE){INT1IF = 0;
 14651  002C08  B0F0               	btfsc	intcon3,0,c	;volatile
 14652  002C0A  A6F0               	btfss	intcon3,3,c	;volatile
 14653  002C0C  D010               	goto	i2l198
 14654  002C0E  90F0               	bcf	intcon3,0,c	;volatile
 14655                           
 14656                           ;main.c: 363: keyPressedInterruptService();
 14657  002C10  EC69  F01F         	call	_keyPressedInterruptService	;wreg free
 14658                           
 14659                           ;main.c: 364: char key = (PORTB & 0xF0) >> 4;
 14660  002C14  3881               	swapf	3969,w,c	;volatile
 14661  002C16  0B0F               	andlw	15
 14662  002C18  0B0F               	andlw	15
 14663  002C1A  6E22               	movwf	service@key,c
 14664                           
 14665                           ;main.c: 365: if(key == 12)terminate = 1;
 14666  002C1C  0E0C               	movlw	12
 14667  002C1E  1822               	xorwf	service@key,w,c
 14668  002C20  A4D8               	btfss	status,2,c
 14669  002C22  D005               	goto	i2l198
 14670  002C24  0E00               	movlw	0
 14671  002C26  0101               	movlb	1	; () banked
 14672  002C28  6F64               	movwf	(_terminate+1)& (0+255),b
 14673  002C2A  0E01               	movlw	1
 14674  002C2C  6F63               	movwf	_terminate& (0+255),b
 14675  002C2E                     i2l198:
 14676  002C2E  C021  FFF5         	movff	??_service+13,tablat
 14677  002C32  C020  FFF8         	movff	??_service+12,tblptru
 14678  002C36  C01F  FFF7         	movff	??_service+11,tblptrh
 14679  002C3A  C01E  FFF6         	movff	??_service+10,tblptrl
 14680  002C3E  C01D  FFF4         	movff	??_service+9,prodh
 14681  002C42  C01C  FFF3         	movff	??_service+8,prodl
 14682  002C46  C01B  FFDA         	movff	??_service+7,fsr2h
 14683  002C4A  C01A  FFD9         	movff	??_service+6,fsr2l
 14684  002C4E  C019  FFE2         	movff	??_service+5,fsr1h
 14685  002C52  C018  FFE1         	movff	??_service+4,fsr1l
 14686  002C56  C017  FFEA         	movff	??_service+3,fsr0h
 14687  002C5A  C016  FFE9         	movff	??_service+2,fsr0l
 14688  002C5E  C015  FFFB         	movff	??_service+1,pclatu
 14689  002C62  C014  FFFA         	movff	??_service,pclath
 14690  002C66  925D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14691  002C68  0011               	retfie		f
 14692  002C6A                     __end_of_service:
 14693                           	opt stack 0
 14694                           pclatu	equ	0xFFB
 14695                           pclath	equ	0xFFA
 14696                           tblptru	equ	0xFF8
 14697                           tblptrh	equ	0xFF7
 14698                           tblptrl	equ	0xFF6
 14699                           tablat	equ	0xFF5
 14700                           prodh	equ	0xFF4
 14701                           prodl	equ	0xFF3
 14702                           intcon	equ	0xFF2
 14703                           intcon3	equ	0xFF0
 14704                           postinc0	equ	0xFEE
 14705                           fsr0h	equ	0xFEA
 14706                           fsr0l	equ	0xFE9
 14707                           wreg	equ	0xFE8
 14708                           postdec1	equ	0xFE5
 14709                           fsr1h	equ	0xFE2
 14710                           fsr1l	equ	0xFE1
 14711                           indf2	equ	0xFDF
 14712                           postinc2	equ	0xFDE
 14713                           postdec2	equ	0xFDD
 14714                           fsr2h	equ	0xFDA
 14715                           fsr2l	equ	0xFD9
 14716                           status	equ	0xFD8
 14717                           
 14718 ;; *************** function _servoInterruptService *****************
 14719 ;; Defined at:
 14720 ;;		line 55 in file "servo.c"
 14721 ;; Parameters:    Size  Location     Type
 14722 ;;		None
 14723 ;; Auto vars:     Size  Location     Type
 14724 ;;		None
 14725 ;; Return value:  Size  Location     Type
 14726 ;;                  1    wreg      unsigned char 
 14727 ;; Registers used:
 14728 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14729 ;; Tracked objects:
 14730 ;;		On entry : 0/0
 14731 ;;		On exit  : 0/0
 14732 ;;		Unchanged: 0/0
 14733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14736 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14737 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14738 ;;Total ram usage:        4 bytes
 14739 ;; Hardware stack levels used:    1
 14740 ;; Hardware stack levels required when called:    1
 14741 ;; This function calls:
 14742 ;;		i2___awmod
 14743 ;;		i2_digitalWrite
 14744 ;;		i2_startTimer
 14745 ;; This function is called by:
 14746 ;;		_service
 14747 ;; This function uses a non-reentrant model
 14748 ;;
 14749                           
 14750                           	psect	text65
 14751  00298A                     __ptext65:
 14752                           	opt stack 0
 14753  00298A                     _servoInterruptService:
 14754                           	opt stack 21
 14755                           
 14756                           ;servo.c: 57: if(TMR0IF){TMR0IF = 0;
 14757                           
 14758                           ;incstack = 0
 14759  00298A  A4F2               	btfss	intcon,2,c	;volatile
 14760  00298C  D082               	goto	i2l5624
 14761  00298E  94F2               	bcf	intcon,2,c	;volatile
 14762                           
 14763                           ;servo.c: 58: digitalWrite(servos[curr],0);
 14764  002990  90D8               	bcf	status,0,c
 14765  002992  3458               	rlcf	_curr,w,c
 14766  002994  6ED9               	movwf	fsr2l,c
 14767  002996  3459               	rlcf	_curr+1,w,c
 14768  002998  6EDA               	movwf	fsr2h,c
 14769  00299A  0E4D               	movlw	low _servos
 14770  00299C  26D9               	addwf	fsr2l,f,c
 14771  00299E  0E01               	movlw	high _servos
 14772  0029A0  22DA               	addwfc	fsr2h,f,c
 14773  0029A2  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 14774  0029A6  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 14775  0029AA  0E00               	movlw	0
 14776  0029AC  6E0A               	movwf	i2digitalWrite@val+1,c
 14777  0029AE  0E00               	movlw	0
 14778  0029B0  6E09               	movwf	i2digitalWrite@val,c
 14779  0029B2  ECB2  F018         	call	i2_digitalWrite	;wreg free
 14780                           
 14781                           ;servo.c: 59: digitalWrite(servos[ (curr+1)%(n+1) ],1);
 14782  0029B6  0E01               	movlw	1
 14783  0029B8  2458               	addwf	_curr,w,c
 14784  0029BA  6E01               	movwf	i2___awmod@dividend,c
 14785  0029BC  0E00               	movlw	0
 14786  0029BE  2059               	addwfc	_curr+1,w,c
 14787  0029C0  6E02               	movwf	i2___awmod@dividend+1,c
 14788  0029C2  0E01               	movlw	1
 14789  0029C4  0100               	movlb	0	; () banked
 14790  0029C6  25FB               	addwf	_n& (0+255),w,b
 14791  0029C8  6E03               	movwf	i2___awmod@divisor,c
 14792  0029CA  0E00               	movlw	0
 14793  0029CC  0100               	movlb	0	; () banked
 14794  0029CE  21FC               	addwfc	(_n+1)& (0+255),w,b
 14795  0029D0  6E04               	movwf	i2___awmod@divisor+1,c
 14796  0029D2  EC26  F01C         	call	i2___awmod	;wreg free
 14797  0029D6  90D8               	bcf	status,0,c
 14798  0029D8  3601               	rlcf	?i2___awmod,f,c
 14799  0029DA  3602               	rlcf	?i2___awmod+1,f,c
 14800  0029DC  0E4D               	movlw	low _servos
 14801  0029DE  2401               	addwf	?i2___awmod,w,c
 14802  0029E0  6ED9               	movwf	fsr2l,c
 14803  0029E2  0E01               	movlw	high _servos
 14804  0029E4  2002               	addwfc	?i2___awmod+1,w,c
 14805  0029E6  6EDA               	movwf	fsr2h,c
 14806  0029E8  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 14807  0029EC  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 14808  0029F0  0E00               	movlw	0
 14809  0029F2  6E0A               	movwf	i2digitalWrite@val+1,c
 14810  0029F4  0E01               	movlw	1
 14811  0029F6  6E09               	movwf	i2digitalWrite@val,c
 14812  0029F8  ECB2  F018         	call	i2_digitalWrite	;wreg free
 14813                           
 14814                           ;servo.c: 60: startTimer(0, 0xFFFF - pulse[ (curr+1)%(n+1) ]);
 14815  0029FC  0E00               	movlw	0
 14816  0029FE  6E08               	movwf	i2startTimer@timer+1,c
 14817  002A00  0E00               	movlw	0
 14818  002A02  6E07               	movwf	i2startTimer@timer,c
 14819  002A04  0EFF               	movlw	255
 14820  002A06  6E10               	movwf	??_servoInterruptService& (0+255),c
 14821  002A08  0EFF               	movlw	255
 14822  002A0A  6E11               	movwf	(??_servoInterruptService+1)& (0+255),c
 14823  002A0C  0E01               	movlw	1
 14824  002A0E  2458               	addwf	_curr,w,c
 14825  002A10  6E01               	movwf	i2___awmod@dividend,c
 14826  002A12  0E00               	movlw	0
 14827  002A14  2059               	addwfc	_curr+1,w,c
 14828  002A16  6E02               	movwf	i2___awmod@dividend+1,c
 14829  002A18  0E01               	movlw	1
 14830  002A1A  0100               	movlb	0	; () banked
 14831  002A1C  25FB               	addwf	_n& (0+255),w,b
 14832  002A1E  6E03               	movwf	i2___awmod@divisor,c
 14833  002A20  0E00               	movlw	0
 14834  002A22  0100               	movlb	0	; () banked
 14835  002A24  21FC               	addwfc	(_n+1)& (0+255),w,b
 14836  002A26  6E04               	movwf	i2___awmod@divisor+1,c
 14837  002A28  EC26  F01C         	call	i2___awmod	;wreg free
 14838  002A2C  90D8               	bcf	status,0,c
 14839  002A2E  3601               	rlcf	?i2___awmod,f,c
 14840  002A30  3602               	rlcf	?i2___awmod+1,f,c
 14841  002A32  0E45               	movlw	low _pulse
 14842  002A34  2401               	addwf	?i2___awmod,w,c
 14843  002A36  6ED9               	movwf	fsr2l,c
 14844  002A38  0E01               	movlw	high _pulse
 14845  002A3A  2002               	addwfc	?i2___awmod+1,w,c
 14846  002A3C  6EDA               	movwf	fsr2h,c
 14847  002A3E  CFDE F012          	movff	postinc2,??_servoInterruptService+2
 14848  002A42  CFDD F013          	movff	postdec2,??_servoInterruptService+3
 14849  002A46  1E12               	comf	??_servoInterruptService+2,f,c
 14850  002A48  1E13               	comf	??_servoInterruptService+3,f,c
 14851  002A4A  4A12               	infsnz	??_servoInterruptService+2,f,c
 14852  002A4C  2A13               	incf	??_servoInterruptService+3,f,c
 14853  002A4E  5010               	movf	??_servoInterruptService,w,c
 14854  002A50  2612               	addwf	??_servoInterruptService+2,f,c
 14855  002A52  5011               	movf	??_servoInterruptService+1,w,c
 14856  002A54  2213               	addwfc	??_servoInterruptService+3,f,c
 14857  002A56  C012  F009         	movff	??_servoInterruptService+2,i2startTimer@val
 14858  002A5A  C013  F00A         	movff	??_servoInterruptService+3,i2startTimer@val+1
 14859  002A5E  6A0B               	clrf	i2startTimer@val+2,c
 14860  002A60  6A0C               	clrf	i2startTimer@val+3,c
 14861  002A62  EC1E  F01E         	call	i2_startTimer	;wreg free
 14862                           
 14863                           ;servo.c: 62: curr = (curr+1)%(n+1);
 14864  002A66  0E01               	movlw	1
 14865  002A68  2458               	addwf	_curr,w,c
 14866  002A6A  6E01               	movwf	i2___awmod@dividend,c
 14867  002A6C  0E00               	movlw	0
 14868  002A6E  2059               	addwfc	_curr+1,w,c
 14869  002A70  6E02               	movwf	i2___awmod@dividend+1,c
 14870  002A72  0E01               	movlw	1
 14871  002A74  0100               	movlb	0	; () banked
 14872  002A76  25FB               	addwf	_n& (0+255),w,b
 14873  002A78  6E03               	movwf	i2___awmod@divisor,c
 14874  002A7A  0E00               	movlw	0
 14875  002A7C  0100               	movlb	0	; () banked
 14876  002A7E  21FC               	addwfc	(_n+1)& (0+255),w,b
 14877  002A80  6E04               	movwf	i2___awmod@divisor+1,c
 14878  002A82  EC26  F01C         	call	i2___awmod	;wreg free
 14879  002A86  C001  F058         	movff	?i2___awmod,_curr
 14880  002A8A  C002  F059         	movff	?i2___awmod+1,_curr+1
 14881                           
 14882                           ;servo.c: 63: return 1;
 14883  002A8E  0E01               	movlw	1
 14884  002A90  0012               	return	
 14885  002A92                     i2l5624:
 14886                           
 14887                           ;servo.c: 64: }
 14888                           ;servo.c: 65: return 0;
 14889  002A92  0E00               	movlw	0
 14890  002A94  0012               	return	
 14891  002A96                     __end_of_servoInterruptService:
 14892                           	opt stack 0
 14893                           pclatu	equ	0xFFB
 14894                           pclath	equ	0xFFA
 14895                           tblptru	equ	0xFF8
 14896                           tblptrh	equ	0xFF7
 14897                           tblptrl	equ	0xFF6
 14898                           tablat	equ	0xFF5
 14899                           prodh	equ	0xFF4
 14900                           prodl	equ	0xFF3
 14901                           intcon	equ	0xFF2
 14902                           intcon3	equ	0xFF0
 14903                           postinc0	equ	0xFEE
 14904                           fsr0h	equ	0xFEA
 14905                           fsr0l	equ	0xFE9
 14906                           wreg	equ	0xFE8
 14907                           postdec1	equ	0xFE5
 14908                           fsr1h	equ	0xFE2
 14909                           fsr1l	equ	0xFE1
 14910                           indf2	equ	0xFDF
 14911                           postinc2	equ	0xFDE
 14912                           postdec2	equ	0xFDD
 14913                           fsr2h	equ	0xFDA
 14914                           fsr2l	equ	0xFD9
 14915                           status	equ	0xFD8
 14916                           
 14917 ;; *************** function i2_startTimer *****************
 14918 ;; Defined at:
 14919 ;;		line 76 in file "timer.c"
 14920 ;; Parameters:    Size  Location     Type
 14921 ;;  timer           2    6[COMRAM] int 
 14922 ;;  val             4    8[COMRAM] long 
 14923 ;; Auto vars:     Size  Location     Type
 14924 ;;		None
 14925 ;; Return value:  Size  Location     Type
 14926 ;;                  1    wreg      void 
 14927 ;; Registers used:
 14928 ;;		wreg, status,2, status,0
 14929 ;; Tracked objects:
 14930 ;;		On entry : 0/0
 14931 ;;		On exit  : 0/0
 14932 ;;		Unchanged: 0/0
 14933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14934 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14936 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14937 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14938 ;;Total ram usage:        8 bytes
 14939 ;; Hardware stack levels used:    1
 14940 ;; This function calls:
 14941 ;;		Nothing
 14942 ;; This function is called by:
 14943 ;;		_service
 14944 ;;		_servoInterruptService
 14945 ;; This function uses a non-reentrant model
 14946 ;;
 14947                           
 14948                           	psect	text66
 14949  003C3C                     __ptext66:
 14950                           	opt stack 0
 14951  003C3C                     i2_startTimer:
 14952                           	opt stack 22
 14953                           
 14954                           ;timer.c: 77: switch(timer){
 14955                           
 14956                           ;incstack = 0
 14957  003C3C  D012               	goto	i2l5346
 14958  003C3E                     i2l455:
 14959                           
 14960                           ;timer.c: 79: TMR0H = val>>8;
 14961  003C3E  C00A  FFD7         	movff	i2startTimer@val+1,4055	;volatile
 14962                           
 14963                           ;timer.c: 80: TMR0L = val;
 14964  003C42  C009  FFD6         	movff	i2startTimer@val,4054	;volatile
 14965                           
 14966                           ;timer.c: 81: T0CON |= 1<<7;
 14967  003C46  8ED5               	bsf	4053,7,c	;volatile
 14968                           
 14969                           ;timer.c: 82: break;
 14970  003C48  0012               	return	
 14971  003C4A                     i2l457:
 14972                           
 14973                           ;timer.c: 84: TMR1H = val>>8;
 14974  003C4A  C00A  FFCF         	movff	i2startTimer@val+1,4047	;volatile
 14975                           
 14976                           ;timer.c: 85: TMR1L = val;
 14977  003C4E  C009  FFCE         	movff	i2startTimer@val,4046	;volatile
 14978                           
 14979                           ;timer.c: 86: T1CON |= 1<<0;
 14980  003C52  80CD               	bsf	4045,0,c	;volatile
 14981                           
 14982                           ;timer.c: 87: break;
 14983  003C54  0012               	return	
 14984  003C56                     i2l458:
 14985                           
 14986                           ;timer.c: 89: TMR3H = val>>8;
 14987  003C56  C00A  FFB3         	movff	i2startTimer@val+1,4019	;volatile
 14988                           
 14989                           ;timer.c: 90: TMR3L = val;
 14990  003C5A  C009  FFB2         	movff	i2startTimer@val,4018	;volatile
 14991                           
 14992                           ;timer.c: 91: T3CON |= 1<<0;
 14993  003C5E  80B1               	bsf	4017,0,c	;volatile
 14994                           
 14995                           ;timer.c: 92: }
 14996  003C60  0012               	return	
 14997  003C62                     i2l5346:
 14998  003C62  C007  F00D         	movff	i2startTimer@timer,??i2_startTimer
 14999  003C66  C008  F00E         	movff	i2startTimer@timer+1,??i2_startTimer+1
 15000                           
 15001                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15002                           ; Switch size 1, requested type "space"
 15003                           ; Number of cases is 1, Range of values is 0 to 0
 15004                           ; switch strategies available:
 15005                           ; Name         Instructions Cycles
 15006                           ; simple_byte            4     3 (average)
 15007                           ;	Chosen strategy is simple_byte
 15008  003C6A  500E               	movf	??i2_startTimer+1,w,c
 15009  003C6C  0A00               	xorlw	0	; case 0
 15010  003C6E  A4D8               	btfss	status,2,c
 15011  003C70  0012               	return	
 15012                           
 15013                           ; Switch size 1, requested type "space"
 15014                           ; Number of cases is 3, Range of values is 0 to 3
 15015                           ; switch strategies available:
 15016                           ; Name         Instructions Cycles
 15017                           ; simple_byte           10     6 (average)
 15018                           ;	Chosen strategy is simple_byte
 15019  003C72  500D               	movf	??i2_startTimer,w,c
 15020  003C74  0A00               	xorlw	0	; case 0
 15021  003C76  B4D8               	btfsc	status,2,c
 15022  003C78  D7E2               	goto	i2l455
 15023  003C7A  0A01               	xorlw	1	; case 1
 15024  003C7C  B4D8               	btfsc	status,2,c
 15025  003C7E  D7E5               	goto	i2l457
 15026  003C80  0A02               	xorlw	2	; case 3
 15027  003C82  A4D8               	btfss	status,2,c
 15028  003C84  0012               	return	
 15029  003C86  D7E7               	goto	i2l458
 15030  003C88                     __end_ofi2_startTimer:
 15031                           	opt stack 0
 15032                           pclatu	equ	0xFFB
 15033                           pclath	equ	0xFFA
 15034                           tblptru	equ	0xFF8
 15035                           tblptrh	equ	0xFF7
 15036                           tblptrl	equ	0xFF6
 15037                           tablat	equ	0xFF5
 15038                           prodh	equ	0xFF4
 15039                           prodl	equ	0xFF3
 15040                           intcon	equ	0xFF2
 15041                           intcon3	equ	0xFF0
 15042                           postinc0	equ	0xFEE
 15043                           fsr0h	equ	0xFEA
 15044                           fsr0l	equ	0xFE9
 15045                           wreg	equ	0xFE8
 15046                           postdec1	equ	0xFE5
 15047                           fsr1h	equ	0xFE2
 15048                           fsr1l	equ	0xFE1
 15049                           indf2	equ	0xFDF
 15050                           postinc2	equ	0xFDE
 15051                           postdec2	equ	0xFDD
 15052                           fsr2h	equ	0xFDA
 15053                           fsr2l	equ	0xFD9
 15054                           status	equ	0xFD8
 15055                           
 15056 ;; *************** function i2_digitalWrite *****************
 15057 ;; Defined at:
 15058 ;;		line 53 in file "iopin.c"
 15059 ;; Parameters:    Size  Location     Type
 15060 ;;  pin             2    6[COMRAM] PTR int 
 15061 ;;		 -> AA_float(4), redirectingServo(4), padServo(4), conveyorServo(4), 
 15062 ;;		 -> cylinderMotor(4), 
 15063 ;;  val             2    8[COMRAM] int 
 15064 ;; Auto vars:     Size  Location     Type
 15065 ;;  digitalWrite    2   13[COMRAM] int 
 15066 ;; Return value:  Size  Location     Type
 15067 ;;                  1    wreg      void 
 15068 ;; Registers used:
 15069 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15070 ;; Tracked objects:
 15071 ;;		On entry : 0/0
 15072 ;;		On exit  : 0/0
 15073 ;;		Unchanged: 0/0
 15074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15075 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15076 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15077 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15078 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15079 ;;Total ram usage:        9 bytes
 15080 ;; Hardware stack levels used:    1
 15081 ;; This function calls:
 15082 ;;		Nothing
 15083 ;; This function is called by:
 15084 ;;		_servoInterruptService
 15085 ;; This function uses a non-reentrant model
 15086 ;;
 15087                           
 15088                           	psect	text67
 15089  003164                     __ptext67:
 15090                           	opt stack 0
 15091  003164                     i2_digitalWrite:
 15092                           	opt stack 21
 15093                           
 15094                           ;iopin.c: 54: if(pin){
 15095                           
 15096                           ;incstack = 0
 15097  003164  5007               	movf	i2digitalWrite@pin,w,c
 15098  003166  1008               	iorwf	i2digitalWrite@pin+1,w,c
 15099  003168  B4D8               	btfsc	status,2,c
 15100  00316A  0012               	return	
 15101                           
 15102                           ;iopin.c: 55: int p = 1 << pin[1];
 15103  00316C  EE20 F002          	lfsr	2,2
 15104  003170  5007               	movf	i2digitalWrite@pin,w,c
 15105  003172  26D9               	addwf	fsr2l,f,c
 15106  003174  5008               	movf	i2digitalWrite@pin+1,w,c
 15107  003176  22DA               	addwfc	fsr2h,f,c
 15108  003178  50DF               	movf	indf2,w,c
 15109  00317A  6E0B               	movwf	??i2_digitalWrite& (0+255),c
 15110  00317C  0E01               	movlw	1
 15111  00317E  6E0C               	movwf	(??i2_digitalWrite+1)& (0+255),c
 15112  003180  0E00               	movlw	0
 15113  003182  6E0D               	movwf	(??i2_digitalWrite+2)& (0+255),c
 15114  003184  2A0B               	incf	??i2_digitalWrite,f,c
 15115  003186  D003               	goto	i2u507_44
 15116  003188                     i2u507_45:
 15117  003188  90D8               	bcf	status,0,c
 15118  00318A  360C               	rlcf	??i2_digitalWrite+1,f,c
 15119  00318C  360D               	rlcf	??i2_digitalWrite+2,f,c
 15120  00318E                     i2u507_44:
 15121  00318E  2E0B               	decfsz	??i2_digitalWrite,f,c
 15122  003190  D7FB               	goto	i2u507_45
 15123  003192  C00C  F00E         	movff	??i2_digitalWrite+1,i2digitalWrite@p
 15124  003196  C00D  F00F         	movff	??i2_digitalWrite+2,i2digitalWrite@p+1
 15125                           
 15126                           ;iopin.c: 56: if(val == 0){
 15127  00319A  5009               	movf	i2digitalWrite@val,w,c
 15128  00319C  100A               	iorwf	i2digitalWrite@val+1,w,c
 15129  00319E  A4D8               	btfss	status,2,c
 15130  0031A0  D02B               	goto	i2l5332
 15131                           
 15132                           ;iopin.c: 57: p ^= 0xff;
 15133  0031A2  0EFF               	movlw	255
 15134  0031A4  1A0E               	xorwf	i2digitalWrite@p,f,c
 15135                           
 15136                           ;iopin.c: 58: }
 15137                           ;iopin.c: 60: switch(pin[0]){
 15138  0031A6  D028               	goto	i2l5332
 15139  0031A8                     i2l5308:
 15140  0031A8  0409               	decf	i2digitalWrite@val,w,c
 15141  0031AA  100A               	iorwf	i2digitalWrite@val+1,w,c
 15142  0031AC  A4D8               	btfss	status,2,c
 15143  0031AE  D003               	goto	i2l5312
 15144  0031B0  500E               	movf	i2digitalWrite@p,w,c
 15145  0031B2  1289               	iorwf	3977,f,c	;volatile
 15146  0031B4  0012               	return	
 15147  0031B6                     i2l5312:
 15148                           
 15149                           ;iopin.c: 62: else LATA &= p;
 15150  0031B6  500E               	movf	i2digitalWrite@p,w,c
 15151  0031B8  1689               	andwf	3977,f,c	;volatile
 15152                           
 15153                           ;iopin.c: 63: break;
 15154  0031BA  0012               	return	
 15155  0031BC                     i2l5314:
 15156  0031BC  0409               	decf	i2digitalWrite@val,w,c
 15157  0031BE  100A               	iorwf	i2digitalWrite@val+1,w,c
 15158  0031C0  A4D8               	btfss	status,2,c
 15159  0031C2  D003               	goto	i2l5318
 15160  0031C4  500E               	movf	i2digitalWrite@p,w,c
 15161  0031C6  128A               	iorwf	3978,f,c	;volatile
 15162  0031C8  0012               	return	
 15163  0031CA                     i2l5318:
 15164                           
 15165                           ;iopin.c: 65: else LATB &= p;
 15166  0031CA  500E               	movf	i2digitalWrite@p,w,c
 15167  0031CC  168A               	andwf	3978,f,c	;volatile
 15168                           
 15169                           ;iopin.c: 66: break;
 15170  0031CE  0012               	return	
 15171  0031D0                     i2l5320:
 15172  0031D0  0409               	decf	i2digitalWrite@val,w,c
 15173  0031D2  100A               	iorwf	i2digitalWrite@val+1,w,c
 15174  0031D4  A4D8               	btfss	status,2,c
 15175  0031D6  D003               	goto	i2l5324
 15176  0031D8  500E               	movf	i2digitalWrite@p,w,c
 15177  0031DA  128B               	iorwf	3979,f,c	;volatile
 15178  0031DC  0012               	return	
 15179  0031DE                     i2l5324:
 15180                           
 15181                           ;iopin.c: 68: else LATC &= p;
 15182  0031DE  500E               	movf	i2digitalWrite@p,w,c
 15183  0031E0  168B               	andwf	3979,f,c	;volatile
 15184                           
 15185                           ;iopin.c: 69: break;
 15186  0031E2  0012               	return	
 15187  0031E4                     i2l5326:
 15188  0031E4  0409               	decf	i2digitalWrite@val,w,c
 15189  0031E6  100A               	iorwf	i2digitalWrite@val+1,w,c
 15190  0031E8  A4D8               	btfss	status,2,c
 15191  0031EA  D003               	goto	i2l5330
 15192  0031EC  500E               	movf	i2digitalWrite@p,w,c
 15193  0031EE  128C               	iorwf	3980,f,c	;volatile
 15194  0031F0  0012               	return	
 15195  0031F2                     i2l5330:
 15196                           
 15197                           ;iopin.c: 71: else LATD &= p;
 15198  0031F2  500E               	movf	i2digitalWrite@p,w,c
 15199  0031F4  168C               	andwf	3980,f,c	;volatile
 15200                           
 15201                           ;iopin.c: 72: }
 15202  0031F6  0012               	return	
 15203  0031F8                     i2l5332:
 15204  0031F8  C007  FFD9         	movff	i2digitalWrite@pin,fsr2l
 15205  0031FC  C008  FFDA         	movff	i2digitalWrite@pin+1,fsr2h
 15206  003200  CFDE F00B          	movff	postinc2,??i2_digitalWrite
 15207  003204  CFDD F00C          	movff	postdec2,??i2_digitalWrite+1
 15208                           
 15209                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15210                           ; Switch size 1, requested type "space"
 15211                           ; Number of cases is 1, Range of values is 0 to 0
 15212                           ; switch strategies available:
 15213                           ; Name         Instructions Cycles
 15214                           ; simple_byte            4     3 (average)
 15215                           ;	Chosen strategy is simple_byte
 15216  003208  500C               	movf	??i2_digitalWrite+1,w,c
 15217  00320A  0A00               	xorlw	0	; case 0
 15218  00320C  A4D8               	btfss	status,2,c
 15219  00320E  0012               	return	
 15220                           
 15221                           ; Switch size 1, requested type "space"
 15222                           ; Number of cases is 4, Range of values is 0 to 3
 15223                           ; switch strategies available:
 15224                           ; Name         Instructions Cycles
 15225                           ; simple_byte           13     7 (average)
 15226                           ;	Chosen strategy is simple_byte
 15227  003210  500B               	movf	??i2_digitalWrite,w,c
 15228  003212  0A00               	xorlw	0	; case 0
 15229  003214  B4D8               	btfsc	status,2,c
 15230  003216  D7C8               	goto	i2l5308
 15231  003218  0A01               	xorlw	1	; case 1
 15232  00321A  B4D8               	btfsc	status,2,c
 15233  00321C  D7CF               	goto	i2l5314
 15234  00321E  0A03               	xorlw	3	; case 2
 15235  003220  B4D8               	btfsc	status,2,c
 15236  003222  D7D6               	goto	i2l5320
 15237  003224  0A01               	xorlw	1	; case 3
 15238  003226  A4D8               	btfss	status,2,c
 15239  003228  0012               	return	
 15240  00322A  D7DC               	goto	i2l5326
 15241  00322C                     __end_ofi2_digitalWrite:
 15242                           	opt stack 0
 15243                           pclatu	equ	0xFFB
 15244                           pclath	equ	0xFFA
 15245                           tblptru	equ	0xFF8
 15246                           tblptrh	equ	0xFF7
 15247                           tblptrl	equ	0xFF6
 15248                           tablat	equ	0xFF5
 15249                           prodh	equ	0xFF4
 15250                           prodl	equ	0xFF3
 15251                           intcon	equ	0xFF2
 15252                           intcon3	equ	0xFF0
 15253                           postinc0	equ	0xFEE
 15254                           fsr0h	equ	0xFEA
 15255                           fsr0l	equ	0xFE9
 15256                           wreg	equ	0xFE8
 15257                           postdec1	equ	0xFE5
 15258                           fsr1h	equ	0xFE2
 15259                           fsr1l	equ	0xFE1
 15260                           indf2	equ	0xFDF
 15261                           postinc2	equ	0xFDE
 15262                           postdec2	equ	0xFDD
 15263                           fsr2h	equ	0xFDA
 15264                           fsr2l	equ	0xFD9
 15265                           status	equ	0xFD8
 15266                           
 15267 ;; *************** function i2___awmod *****************
 15268 ;; Defined at:
 15269 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 15270 ;; Parameters:    Size  Location     Type
 15271 ;;  dividend        2    0[COMRAM] int 
 15272 ;;  divisor         2    2[COMRAM] int 
 15273 ;; Auto vars:     Size  Location     Type
 15274 ;;  __awmod         1    5[COMRAM] unsigned char 
 15275 ;;  __awmod         1    4[COMRAM] unsigned char 
 15276 ;; Return value:  Size  Location     Type
 15277 ;;                  2    0[COMRAM] int 
 15278 ;; Registers used:
 15279 ;;		wreg, status,2, status,0
 15280 ;; Tracked objects:
 15281 ;;		On entry : 0/0
 15282 ;;		On exit  : 0/0
 15283 ;;		Unchanged: 0/0
 15284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15285 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15286 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15288 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15289 ;;Total ram usage:        6 bytes
 15290 ;; Hardware stack levels used:    1
 15291 ;; This function calls:
 15292 ;;		Nothing
 15293 ;; This function is called by:
 15294 ;;		_servoInterruptService
 15295 ;; This function uses a non-reentrant model
 15296 ;;
 15297                           
 15298                           	psect	text68
 15299  00384C                     __ptext68:
 15300                           	opt stack 0
 15301  00384C                     i2___awmod:
 15302                           	opt stack 21
 15303                           
 15304                           ;incstack = 0
 15305  00384C  0E00               	movlw	0
 15306  00384E  6E06               	movwf	i2___awmod@sign,c
 15307  003850  AE02               	btfss	i2___awmod@dividend+1,7,c
 15308  003852  D006               	goto	i2l5360
 15309  003854  6C01               	negf	i2___awmod@dividend,c
 15310  003856  1E02               	comf	i2___awmod@dividend+1,f,c
 15311  003858  B0D8               	btfsc	status,0,c
 15312  00385A  2A02               	incf	i2___awmod@dividend+1,f,c
 15313  00385C  0E01               	movlw	1
 15314  00385E  6E06               	movwf	i2___awmod@sign,c
 15315  003860                     i2l5360:
 15316  003860  AE04               	btfss	i2___awmod@divisor+1,7,c
 15317  003862  D004               	goto	i2l5364
 15318  003864  6C03               	negf	i2___awmod@divisor,c
 15319  003866  1E04               	comf	i2___awmod@divisor+1,f,c
 15320  003868  B0D8               	btfsc	status,0,c
 15321  00386A  2A04               	incf	i2___awmod@divisor+1,f,c
 15322  00386C                     i2l5364:
 15323  00386C  5003               	movf	i2___awmod@divisor,w,c
 15324  00386E  1004               	iorwf	i2___awmod@divisor+1,w,c
 15325  003870  B4D8               	btfsc	status,2,c
 15326  003872  D018               	goto	i2l5380
 15327  003874  0E01               	movlw	1
 15328  003876  6E05               	movwf	i2___awmod@counter,c
 15329  003878  D004               	goto	i2l5370
 15330  00387A                     i2l5368:
 15331  00387A  90D8               	bcf	status,0,c
 15332  00387C  3603               	rlcf	i2___awmod@divisor,f,c
 15333  00387E  3604               	rlcf	i2___awmod@divisor+1,f,c
 15334  003880  2A05               	incf	i2___awmod@counter,f,c
 15335  003882                     i2l5370:
 15336  003882  AE04               	btfss	i2___awmod@divisor+1,7,c
 15337  003884  D7FA               	goto	i2l5368
 15338  003886                     i2l5372:
 15339  003886  5003               	movf	i2___awmod@divisor,w,c
 15340  003888  5C01               	subwf	i2___awmod@dividend,w,c
 15341  00388A  5004               	movf	i2___awmod@divisor+1,w,c
 15342  00388C  5802               	subwfb	i2___awmod@dividend+1,w,c
 15343  00388E  A0D8               	btfss	status,0,c
 15344  003890  D004               	goto	i2l5376
 15345  003892  5003               	movf	i2___awmod@divisor,w,c
 15346  003894  5E01               	subwf	i2___awmod@dividend,f,c
 15347  003896  5004               	movf	i2___awmod@divisor+1,w,c
 15348  003898  5A02               	subwfb	i2___awmod@dividend+1,f,c
 15349  00389A                     i2l5376:
 15350  00389A  90D8               	bcf	status,0,c
 15351  00389C  3204               	rrcf	i2___awmod@divisor+1,f,c
 15352  00389E  3203               	rrcf	i2___awmod@divisor,f,c
 15353  0038A0  2E05               	decfsz	i2___awmod@counter,f,c
 15354  0038A2  D7F1               	goto	i2l5372
 15355  0038A4                     i2l5380:
 15356  0038A4  5006               	movf	i2___awmod@sign,w,c
 15357  0038A6  B4D8               	btfsc	status,2,c
 15358  0038A8  D004               	goto	i2l5384
 15359  0038AA  6C01               	negf	i2___awmod@dividend,c
 15360  0038AC  1E02               	comf	i2___awmod@dividend+1,f,c
 15361  0038AE  B0D8               	btfsc	status,0,c
 15362  0038B0  2A02               	incf	i2___awmod@dividend+1,f,c
 15363  0038B2                     i2l5384:
 15364  0038B2  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 15365  0038B6  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 15366  0038BA  0012               	return	
 15367  0038BC                     __end_ofi2___awmod:
 15368                           	opt stack 0
 15369                           pclatu	equ	0xFFB
 15370                           pclath	equ	0xFFA
 15371                           tblptru	equ	0xFF8
 15372                           tblptrh	equ	0xFF7
 15373                           tblptrl	equ	0xFF6
 15374                           tablat	equ	0xFF5
 15375                           prodh	equ	0xFF4
 15376                           prodl	equ	0xFF3
 15377                           intcon	equ	0xFF2
 15378                           intcon3	equ	0xFF0
 15379                           postinc0	equ	0xFEE
 15380                           fsr0h	equ	0xFEA
 15381                           fsr0l	equ	0xFE9
 15382                           wreg	equ	0xFE8
 15383                           postdec1	equ	0xFE5
 15384                           fsr1h	equ	0xFE2
 15385                           fsr1l	equ	0xFE1
 15386                           indf2	equ	0xFDF
 15387                           postinc2	equ	0xFDE
 15388                           postdec2	equ	0xFDD
 15389                           fsr2h	equ	0xFDA
 15390                           fsr2l	equ	0xFD9
 15391                           status	equ	0xFD8
 15392                           
 15393 ;; *************** function _keyPressedInterruptService *****************
 15394 ;; Defined at:
 15395 ;;		line 49 in file "keypad.c"
 15396 ;; Parameters:    Size  Location     Type
 15397 ;;		None
 15398 ;; Auto vars:     Size  Location     Type
 15399 ;;  key             1    0[COMRAM] unsigned char 
 15400 ;; Return value:  Size  Location     Type
 15401 ;;                  1    wreg      void 
 15402 ;; Registers used:
 15403 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 15404 ;; Tracked objects:
 15405 ;;		On entry : 0/0
 15406 ;;		On exit  : 0/0
 15407 ;;		Unchanged: 0/0
 15408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15410 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15412 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15413 ;;Total ram usage:        1 bytes
 15414 ;; Hardware stack levels used:    1
 15415 ;; This function calls:
 15416 ;;		Nothing
 15417 ;; This function is called by:
 15418 ;;		_service
 15419 ;; This function uses a non-reentrant model
 15420 ;;
 15421                           
 15422                           	psect	text69
 15423  003ED2                     __ptext69:
 15424                           	opt stack 0
 15425  003ED2                     _keyPressedInterruptService:
 15426                           	opt stack 22
 15427                           
 15428                           ;keypad.c: 50: char key = (PORTB & 0xF0) >> 4;
 15429                           
 15430                           ;incstack = 0
 15431  003ED2  3881               	swapf	3969,w,c	;volatile
 15432  003ED4  0B0F               	andlw	15
 15433  003ED6  0B0F               	andlw	15
 15434  003ED8  6E01               	movwf	keyPressedInterruptService@key,c
 15435                           
 15436                           ;keypad.c: 51: lastKey = keys[key];
 15437  003EDA  5001               	movf	keyPressedInterruptService@key,w,c
 15438  003EDC  0D01               	mullw	1
 15439  003EDE  0E75               	movlw	low _keys
 15440  003EE0  24F3               	addwf	prodl,w,c
 15441  003EE2  6EF6               	movwf	tblptrl,c
 15442  003EE4  0EFE               	movlw	high _keys
 15443  003EE6  20F4               	addwfc	prodh,w,c
 15444  003EE8  6EF7               	movwf	tblptrh,c
 15445  003EEA                     	if	0	;There are less than 3 active tblptr bytes
 15446  003EEA                     	endif
 15447  003EEA  0008               	tblrd		*
 15448  003EEC  CFF5 F05C          	movff	tablat,_lastKey
 15449  003EF0  0012               	return		;funcret
 15450  003EF2                     __end_of_keyPressedInterruptService:
 15451                           	opt stack 0
 15452                           pclatu	equ	0xFFB
 15453                           pclath	equ	0xFFA
 15454                           tblptru	equ	0xFF8
 15455                           tblptrh	equ	0xFF7
 15456                           tblptrl	equ	0xFF6
 15457                           tablat	equ	0xFF5
 15458                           prodh	equ	0xFF4
 15459                           prodl	equ	0xFF3
 15460                           intcon	equ	0xFF2
 15461                           intcon3	equ	0xFF0
 15462                           postinc0	equ	0xFEE
 15463                           fsr0h	equ	0xFEA
 15464                           fsr0l	equ	0xFE9
 15465                           wreg	equ	0xFE8
 15466                           postdec1	equ	0xFE5
 15467                           fsr1h	equ	0xFE2
 15468                           fsr1l	equ	0xFE1
 15469                           indf2	equ	0xFDF
 15470                           postinc2	equ	0xFDE
 15471                           postdec2	equ	0xFDD
 15472                           fsr2h	equ	0xFDA
 15473                           fsr2l	equ	0xFD9
 15474                           status	equ	0xFD8
 15475                           pclatu	equ	0xFFB
 15476                           pclath	equ	0xFFA
 15477                           tblptru	equ	0xFF8
 15478                           tblptrh	equ	0xFF7
 15479                           tblptrl	equ	0xFF6
 15480                           tablat	equ	0xFF5
 15481                           prodh	equ	0xFF4
 15482                           prodl	equ	0xFF3
 15483                           intcon	equ	0xFF2
 15484                           intcon3	equ	0xFF0
 15485                           postinc0	equ	0xFEE
 15486                           fsr0h	equ	0xFEA
 15487                           fsr0l	equ	0xFE9
 15488                           wreg	equ	0xFE8
 15489                           postdec1	equ	0xFE5
 15490                           fsr1h	equ	0xFE2
 15491                           fsr1l	equ	0xFE1
 15492                           indf2	equ	0xFDF
 15493                           postinc2	equ	0xFDE
 15494                           postdec2	equ	0xFDD
 15495                           fsr2h	equ	0xFDA
 15496                           fsr2l	equ	0xFD9
 15497                           status	equ	0xFD8
 15498                           
 15499                           	psect	rparam
 15500  0000                     pclatu	equ	0xFFB
 15501                           pclath	equ	0xFFA
 15502                           tblptru	equ	0xFF8
 15503                           tblptrh	equ	0xFF7
 15504                           tblptrl	equ	0xFF6
 15505                           tablat	equ	0xFF5
 15506                           prodh	equ	0xFF4
 15507                           prodl	equ	0xFF3
 15508                           intcon	equ	0xFF2
 15509                           intcon3	equ	0xFF0
 15510                           postinc0	equ	0xFEE
 15511                           fsr0h	equ	0xFEA
 15512                           fsr0l	equ	0xFE9
 15513                           wreg	equ	0xFE8
 15514                           postdec1	equ	0xFE5
 15515                           fsr1h	equ	0xFE2
 15516                           fsr1l	equ	0xFE1
 15517                           indf2	equ	0xFDF
 15518                           postinc2	equ	0xFDE
 15519                           postdec2	equ	0xFDD
 15520                           fsr2h	equ	0xFDA
 15521                           fsr2l	equ	0xFD9
 15522                           status	equ	0xFD8
 15523                           
 15524                           	psect	temp
 15525  00005D                     btemp:
 15526                           	opt stack 0
 15527  00005D                     	ds	1
 15528  0000                     int$flags	set	btemp
 15529                           pclatu	equ	0xFFB
 15530                           pclath	equ	0xFFA
 15531                           tblptru	equ	0xFF8
 15532                           tblptrh	equ	0xFF7
 15533                           tblptrl	equ	0xFF6
 15534                           tablat	equ	0xFF5
 15535                           prodh	equ	0xFF4
 15536                           prodl	equ	0xFF3
 15537                           intcon	equ	0xFF2
 15538                           intcon3	equ	0xFF0
 15539                           postinc0	equ	0xFEE
 15540                           fsr0h	equ	0xFEA
 15541                           fsr0l	equ	0xFE9
 15542                           wreg	equ	0xFE8
 15543                           postdec1	equ	0xFE5
 15544                           fsr1h	equ	0xFE2
 15545                           fsr1l	equ	0xFE1
 15546                           indf2	equ	0xFDF
 15547                           postinc2	equ	0xFDE
 15548                           postdec2	equ	0xFDD
 15549                           fsr2h	equ	0xFDA
 15550                           fsr2l	equ	0xFD9
 15551                           status	equ	0xFD8


Data Sizes:
    Strings     369
    Constant    174
    Data        59
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     58      92
    BANK0           128    117     125
    BANK1           256     69     131
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_22(CODE[17]), STR_21(CODE[11]), STR_20(CODE[19]), STR_19(CODE[18]), 
		 -> STR_18(CODE[17]), STR_17(CODE[24]), STR_16(CODE[17]), STR_15(CODE[19]), 
		 -> STR_14(CODE[17]), STR_13(CODE[18]), STR_12(CODE[17]), STR_11(CODE[18]), 
		 -> STR_10(CODE[23]), STR_9(CODE[20]), STR_8(CODE[8]), STR_7(CODE[11]), 
		 -> STR_6(CODE[11]), STR_5(CODE[11]), STR_4(CODE[16]), STR_3(CODE[23]), 
		 -> STR_2(CODE[8]), STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    showRunStats@run	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), main@run(BANK1[14]), 

    showRunTime@run	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), main@run(BANK1[14]), 

    showDateTime@t	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 

    showInterface@run	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 

    setAngle@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    initServo@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    servos	PTR int [4] size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    saveNewRun@data	PTR int  size(2) Largest target is 14
		 -> main@run(BANK1[14]), 

    sp__readPastRun	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), 

    digitalWrite@pin	PTR int  size(2) Largest target is 4
		 -> AA_float(COMRAM[4]), redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 
		 -> cylinderMotor(BANK1[4]), 

    digitalRead@pin	PTR int  size(2) Largest target is 4
		 -> padPin2(BANK1[4]), padPin1(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->___aldiv
    _sortBattery->___ftdiv
    _showRunTime->___aldiv
    ___aldiv->___almod
    _printf->___aldiv
    _lcdNewline->_lcdInst
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftge->___awtoft
    _lcdHome->_lcdInst
    _lcdClear->_lcdInst
    _initRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _getTime->_I2C_Master_Read
    _getTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _readPastRun->_eepromRead
    _saveNewRun->_eepromRead
    _eepromWrite->_eepromRead
    _eepromRead->___wmul
    ___wmul->___awdiv
    _angleToPulse->___ftdiv
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___altoft
    ___ftadd->___ftdiv
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _service in COMRAM

    _service->_servoInterruptService
    _servoInterruptService->i2_digitalWrite
    i2_startTimer->i2___awmod
    i2_digitalWrite->i2___awmod

Critical Paths under _main in BANK0

    _main->_showInterface
    _sortBattery->_printf
    _showInterface->_showRunTime
    _showRunTime->_printf
    _showRunStats->_printf
    _showRunSelect->_printf
    _showRunMenu->_printf
    _showMainMenu->_printf
    _showErrorMessage->_printf
    _showDateTime->_printf
    _printf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___ftsub->___ftadd
    _saveNewRun->_eepromWrite
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    ___fttol->___ftadd
    ___ftmul->___ftdiv
    ___ftadd->_fround

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sortBattery
    _showInterface->_showDateTime

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                38    38      0  817158
                                             31 BANK1     38    38      0
                            ___aldiv
                            ___almod
                       _digitalWrite
                            _initLCD
                          _initServo
                          _initTimer
                           _lcdClear
                            _lcdHome
                           _pinSetup
                             _printf
                         _saveNewRun
                      _showInterface
                       _showRunStats
                        _showRunTime
                        _sortBattery
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _sortBattery                                         33    33      0  113777
                                            111 BANK0      2     2      0
                                              0 BANK1     31    31      0
                           ___altoft
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                         _analogRead
                        _digitalRead
                       _digitalWrite
                           _lcdClear
                             _printf
                         _readKeypad
                           _setAngle
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                         9     5      4    1594
                                             34 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _digitalRead                                          4     2      2     309
                                             34 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           6     2      4     185
                                             34 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _showInterface                                        7     7      0  469712
                                            115 BANK0      2     2      0
                                             14 BANK1      5     5      0
                            _initRTC
                        _readPastRun
                       _showDateTime
                   _showErrorMessage
                       _showMainMenu
                        _showRunMenu
                      _showRunSelect
                       _showRunStats
                        _showRunTime
 ---------------------------------------------------------------------------------
 (1) _showRunTime                                         16    14      2   68144
                                            111 BANK0      4     2      2
                                              0 BANK1     12    12      0
                            ___aldiv
                            ___almod
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) ___almod                                             10     2      8    1357
                                             34 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8    1061
                                             44 COMRAM    14     6      8
                            ___almod (ARG)
 ---------------------------------------------------------------------------------
 (1) _showRunStats                                        10     8      2   65726
                                            111 BANK0      2     0      2
                                              0 BANK1      8     8      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showRunSelect                                        1     1      0   65501
                                            111 BANK0      1     1      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showRunMenu                                          2     2      0   65470
                                            111 BANK0      2     2      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showMainMenu                                         1     1      0   65439
                                            111 BANK0      1     1      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showErrorMessage                                     0     0      0   65312
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _readKeypad                                           1     1      0      34
                                             34 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _showDateTime                                        16    16      0   68107
                                            111 BANK0      2     2      0
                                              0 BANK1     14    14      0
                            _getTime
                            _initRTC
                         _keyPressed
                           _lcdClear
                            _lcdHome
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              51    37     14   65083
                                             61 BANK0     50    36     14
                            ___aldiv (ARG)
                            ___almod (ARG)
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   14293
                                             24 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     421
                                             38 COMRAM     1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             34 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   14014
                                             24 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2071
                                             34 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1985
                                             40 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     608
                                             34 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     827
                                             34 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2763
                                             42 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     848
                                             47 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    5057
                                             46 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     142
                                             34 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1738
                                             46 COMRAM     9     3      6
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) _lcdHome                                              0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdClear                                             0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _keyPressed                                           1     1      0      34
                                             34 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _initRTC                                              0     0      0    1196
                    _I2C_Master_Init
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Init                                      8     4      4    1196
                                             47 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1011
                                             34 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _getTime                                             19    17      2    1011
                                             37 COMRAM    19    17      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Write                                     2     0      2     724
                                             35 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Read                                      2     2      0      65
                                             35 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Wait                                      1     1      0       0
                                             34 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _readPastRun                                         18    16      2    4433
                                              0 BANK0     18    16      2
                             ___wmul
                         _eepromRead
 ---------------------------------------------------------------------------------
 (1) _saveNewRun                                           6     4      2    4813
                                              9 BANK0      6     4      2
                             ___wmul
                         _eepromRead
                        _eepromWrite
 ---------------------------------------------------------------------------------
 (2) _eepromWrite                                          9     3      6     435
                                              0 BANK0      9     3      6
                             ___wmul (ARG)
                         _eepromRead (ARG)
 ---------------------------------------------------------------------------------
 (3) _eepromRead                                           4     0      4     370
                                             54 COMRAM     4     0      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3736
                                             48 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initServo                                           10     6      4   24017
                                             94 BANK0     10     6      4
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _startTimer                                           8     2      6     690
                                             34 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            10     6      4   22459
                                             84 BANK0     10     6      4
                       _angleToPulse
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        23    19      4   21152
                                             61 BANK0     23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     756
                                             46 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5804
                                              9 BANK0     15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3580
                                             52 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4539
                                             34 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3025
                                             42 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    3173
                                             42 COMRAM    10     6      4
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2584
                                             34 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            4     2      2     214
                                             34 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             38 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     195
                                             36 COMRAM     2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                             34 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _service                                             15    15      0    1472
                                             19 COMRAM    15    15      0
         _keyPressedInterruptService
              _servoInterruptService
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) _servoInterruptService                                4     4      0    1168
                                             15 COMRAM     4     4      0
                          i2___awmod
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) i2_startTimer                                         8     2      6     258
                                              6 COMRAM     8     2      6
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_digitalWrite                                      9     5      4     458
                                              6 COMRAM     9     5      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___awmod                                           6     2      4     452
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _keyPressedInterruptService                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv
     ___almod (ARG)
   ___almod
   _digitalWrite
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _startTimer
   _initTimer
   _lcdClear
     _lcdInst
       _lcdNibble
   _lcdHome
     _lcdInst
       _lcdNibble
   _pinSetup
   _printf
     ___aldiv (ARG)
       ___almod (ARG)
     ___almod (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
       ___awtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _saveNewRun
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _eepromRead
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _eepromWrite
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _eepromRead (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _showInterface
     _initRTC
       _I2C_Master_Init
         ___lldiv
     _readPastRun
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _eepromRead
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _showDateTime
       _getTime
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _initRTC
         _I2C_Master_Init
           ___lldiv
       _keyPressed
       _lcdClear
         _lcdInst
           _lcdNibble
       _lcdHome
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _showErrorMessage
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showMainMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunSelect
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunStats
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunTime
       ___aldiv
         ___almod (ARG)
       ___almod
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
   _showRunStats
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___aldiv (ARG)
         ___almod (ARG)
       ___almod (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
   _showRunTime
     ___aldiv
       ___almod (ARG)
     ___almod
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___aldiv (ARG)
         ___almod (ARG)
       ___almod (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
   _sortBattery
     ___altoft
       ___ftpack
       _analogRead (ARG)
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftge
       ___awtoft (ARG)
         ___ftpack
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _analogRead
     _digitalRead
     _digitalWrite
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___aldiv (ARG)
         ___almod (ARG)
       ___almod (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _startTimer

 _service (ROOT)
   _keyPressedInterruptService
   _servoInterruptService
     i2___awmod
     i2_digitalWrite
       i2___awmod (ARG)
     i2_startTimer
       i2___awmod (ARG)
   i2_startTimer
     i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     45      83       7       51.2%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     75      7D       5       97.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3A      5C       1       73.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     15C      34        0.0%
DATA                 0      0     15C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Apr 09 12:06:59 2017

                       ___altoft@exp 0033                        showRunTime@t1 0104  
                      showRunTime@t2 0106                                    _n 00FB  
                  main@cylinderStart 0129                 main@cylinderBackward 012F  
                      ___altoft@sign 0034                          _sortBattery 0E0A  
                     showRunSelect@k 00EF                         ___awdiv@sign 002E  
                ___wmul@multiplicand 0033                          __CFG_BORV$3 000000  
                     showRunTime@run 00EF                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                         __CFG_CP2$OFF 000000  
                       __CFG_CP3$OFF 000000                          __CFG_OSC$HS 000000  
                   _redirectingServo 017F                         ___ftadd@exp1 00AD  
                       ___ftadd@exp2 00AC                  main@cylinderForward 012D  
                       ___ftadd@sign 00AB                                  l226 3E9E  
                                l163 1AD4                                  l181 11C4  
                                l510 3F76                                  l262 3DF8  
                                l335 2B7A                                  l360 3D64  
                                l184 1220                                  l265 3E04  
                                l177 1168                                  l455 3BF2  
                                l391 2D4A                                  l448 3CCC  
                                l457 3BFE                                  l458 3C0A  
                                l394 3AFE                                  l397 3B3C  
                                l823 0818                                  l832 0A04  
                    ??_showInterface 00F3                                  l783 0996  
                       __CFG_CPB$OFF 000000                                  _PEN 007E2A  
                       __CFG_CPD$OFF 000000                                  _SEN 007E28  
                                _n_C 015F                         ___awmod@sign 0028  
                                prod 000FF3                                  wreg 000FE8  
                    showRunTime@time 0108                         __CFG_LVP$OFF 000000  
                       ___ftdiv@cntr 0083                         ___ftdiv@sign 0088  
                       __CFG_WDT$OFF 000000                                 l1142 1B3E  
                               l1119 32BA                                 l1216 3E80  
                               l1146 1B78                                 l1148 1BA0  
                               l1157 1C76                                 l1166 1CA0  
                               l1087 2758                                 l1191 2630  
                               l1184 25A2                                 l1177 2956  
                               l1185 25CA                                 l1266 36D0  
                               l1276 3910                                 l5030 3CA0  
                               l5024 3C94                                 l6000 323C  
                               l5018 3C8A                                 l5050 3C16  
                               l5036 3CA8                                 l6012 3288  
                               l6004 324A                                 l6100 1CCA  
                               l6014 32A6                                 l6006 3254  
                               l6110 1D18                                 l6016 32B0  
                               l6008 3272                                 l6120 2150  
                               l6202 3656                                 l7010 0BEE  
                               l7002 0BAC                                 l6052 1B4C  
                               l6140 21D8                                 l6300 3E3E  
                               l6150 2216                                 l6126 218A  
                               l6230 382A                                 l6222 380A  
                               l6214 37F0                                 l7030 0C84  
                               l7022 0C5C                                 l7014 0C26  
                               l6080 1C06                                 l6064 1B96  
                               l6144 21F6                                 l6224 3812  
                               l7040 0D46                                 l7016 0C30  
                               l7008 0BE4                                 l7112 2FEC  
                               l6082 1C14                                 l6074 1BD8  
                               l6058 1B86                                 l6154 2234  
                               l6250 368E                                 l6170 35F0  
                               l6226 3816                                 l6234 3834  
                               l6218 37FC                                 l7034 0C9E  
                               l7050 0DD4                                 l7210 311C  
                               l7202 3102                                 l6092 1C5C  
                               l6084 1C22                                 l6260 36C2  
                               l6252 3692                                 l6420 25F6  
                               l6324 1F56                                 l6316 1E8E  
                               l7028 0C78                                 l7052 0DEA  
                               l7124 3026                                 l7140 3074  
                               l7204 3108                                 l6502 3786  
                               l6094 1C6A                                 l6086 1C2E  
                               l7302 344E                                 l6430 261E  
                               l6182 3616                                 l6238 3842  
                               l7038 0CC6                                 l7046 0DBA  
                               l7126 3032                                 l7118 3004  
                               l7214 312A                                 l6504 3792  
                               l6248 3682                                 l6440 2660  
                               l6432 262A                                 l6424 2606  
                               l6184 361E                                 l6176 3600  
                               l6344 1552                                 l7048 0DCC  
                               l7144 308A                                 l7136 3066  
                               l7128 3036                                 l7160 330A  
                               l7208 3116                                 l7216 3130  
                               l6522 28DE                                 l7090 3720  
                               l6194 363E                                 l6186 3622  
                               l6362 1756                                 l6338 14A8  
                               l7234 210A                                 l6516 28AC  
                               l6604 2406                                 l7252 2E9A  
                               l7308 34B2                                 l6460 26C0  
                               l6356 16AC                                 l6348 1578  
                               l7244 3422                                 l7180 3374  
                               l7172 3350                                 l7164 331C  
                               l7156 32F6                                 l6542 292C  
                               l6622 2498                                 l7086 3718  
                               l6446 267E                                 l6390 2568  
                               l6198 3648                                 l6374 3F26  
                               l6702 0088                                 l6710 00FC  
                               l7166 3328                                 l6640 24FE  
                               l6632 24C8                                 l7248 2E44  
                               l7256 2EC2                                 l7096 3746  
                               l6560 3BC6                                 l6480 271E  
                               l6384 253C                                 l6720 0160  
                               l7360 286E                                 l7408 3DEC  
                               l7424 3A42                                 l7416 3A1C  
                               l7168 332C                                 l7176 335E  
                               l7280 2AF0                                 l7272 2A98  
                               l7192 30E0                                 l7600 12B6  
                               l6634 24D8                                 l6626 24AC  
                               l6650 38DA                                 l6490 2746  
                               l6810 044E                                 l6730 0192  
                               l6722 0176                                 l7338 2774  
                               l7290 2B48                                 l6572 3DA4  
                               l6636 24E2                                 l6580 34F0  
                               l6652 38DE                                 l6492 2752  
                               l6484 272E                                 l6468 26F0  
                               l6812 0464                                 l6732 0198  
                               l6716 0124                                 l7444 2F06  
                               l7284 2B1C                                 l7276 2AC4  
                               l7196 30EE                                 l7524 0ECA  
                               l6590 354C                                 l6662 3A4E  
                               l6902 081C                                 l6822 04F4  
                               l6814 0494                                 l6806 0428  
                               l6742 01E6                                 l6726 0186  
                               l7462 2F72                                 l7446 2F0A  
                               l7198 30F4                                 l7606 12E6  
                               l7550 10B6                                 l7702 1A5C  
                               l7624 2CCA                                 l6584 3520  
                               l6656 3902                                 l6648 38CE  
                               l6664 3A5A                                 l6920 097A  
                               l6912 0892                                 l6840 05DE  
                               l6816 04AA                                 l6752 0224  
                               l6744 01F2                                 l6728 018C  
                               l7376 3B9E                                 l7368 3B78  
                               l7472 2FAE                                 l7298 3438  
                               l6842 05E4                                 l6826 051A  
                               l6754 023E                                 l6746 01F8  
                               l6738 01C0                                 l6690 0038  
                               l7386 39AC                                 l7538 0FA0  
                               l7492 2D80                                 l7628 2CE0  
                               l6932 09BE                                 l6924 0988  
                               l6908 0840                                 l6836 0578  
                               l6772 02CC                                 l6748 0210  
                               l6764 026E                                 l6692 004E  
                               l7468 2F96                                 l7476 2FBA  
                               l7556 1118                                 l7548 1088  
                               l7494 2D86                                 l6950 0A4E  
                               l6918 096C                                 l6862 06A2  
                               l6854 062A                                 l6782 0312  
                               l6758 0256                                 l6766 02B2  
                               l6686 0022                                 l7398 39E6  
                               l7566 1176                                 l7590 124C  
                               l7488 2D58                                 l6880 0716  
                               l6872 06DE                                 l6696 0058  
                               l7576 11D2                                 l7592 1274  
                               l7568 1194                                 l7648 1784  
                               l6970 0AC2                                 l6946 0A26  
                               l6874 06F4                                 l6890 07CA  
                               l6858 067A                                 l7586 122E  
                               l7578 11F0                                 l7666 182A  
                               l6972 0AC8                                 l6956 0A76  
                               l6892 07D8                                 l6884 073E  
                               l6868 06D0                                 l7692 1A38  
                               l6958 0A7C                                 l6878 0702  
                               l6798 03C0                                 l7678 186E  
                               l6992 0B48                                 l6896 07E6  
                               l7688 1A20                                 l6986 0B0E  
                               l6898 07FA                                 l6996 0B78  
                               l6988 0B20                                 _EEIF 007D0C  
                               STR_1 FFE5                                 STR_2 FFF6  
                               STR_3 FEBC                                 STR_4 FFA9  
                               STR_5 FFCF                                 STR_6 FFDA  
                               STR_7 FFC4                                 STR_8 FFEE  
                               STR_9 FED3                                 _LATA 000F89  
                               _LATB 000F8A                                 _LATC 000F8B  
                               _LATD 000F8C                                 _LATE 000F8D  
                       printf@tmpval 00DB                                 u6211 254C  
                               _PEIE 007F96                                 u6080 3E3C  
                               u6075 3AD2                                 u6500 242C  
                               _RCEN 007E2B                                 u6191 2520  
                               u5641 1AEC                                 u6505 2422  
                               u5651 1B0A                                 u6371 288E  
                               u8107 101A                                 u8117 129E  
                               u8207 393A                                 u6391 28C0  
                               u8127 12D6                                 u8217 3948  
                               u6481 23E2                                 u8137 1310  
                               u8227 396E                                 u5851 212C  
                               u8147 2860                                 u6740 0358  
                               u8237 397C                                 u8157 3EA2  
                               u8077 197E                                 u7630 3B0E  
                               u7454 30C6                                 u8167 3CD8  
                               u5871 2166                                 u7455 30C0  
                               u8087 0E46                                 u8177 3D0C  
                               u6745 034C                                 u8097 0EFC  
                               u8187 3EB6                                 u7564 2AB4  
                               u8197 3EC8                                 u7565 2AB0  
                               u7638 3B12                                 u7574 2AE0  
                               u7655 3B50                                 u7575 2ADC  
                               u7656 3B52                                 u6960 0810  
                               u7584 2B0C                                 u7585 2B08  
                               u7594 2B38                                 u7595 2B34  
                               _RSEN 007E29                      showRunStats@n_C 0104  
                               _n_AA 015D                                 _n_9V 015B  
                    showRunStats@run 00EF                                 _main 177C  
                               _curr 0058                         ___ftpack@arg 0023  
                               _keys FE75                         ___ftpack@exp 0026  
                               _time 0155                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr2h 000FDA  
                               fsr0l 000FE9                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 005D                      ??_showRunSelect 003B  
                               prodh 000FF4                                 prodl 000FF3  
                               start 000E                        __CFG_IESO$OFF 000000  
                      __CFG_MCLRE$ON 000000                         ___ftmul@cntr 0096  
                       ___param_bank 000000                         ___ftmul@sign 0097  
                       ___fttol@exp1 00BC                         ___fttol@lval 00B8  
               __end_ofi2_startTimer 3C88                     ?_I2C_Master_Init 0030  
                   ?_I2C_Master_Read 0001                     ?_I2C_Master_Wait 0001  
                   ?_I2C_Master_Stop 0001                         ?_readPastRun 0080  
               __end_of_angleToPulse 23CC                      __end_of___aldiv 309C  
                    __end_of___almod 3386                                ?_main 0001  
                              _ACKEN 007E2C                                _ACKDT 007E2D  
                    __end_of___awdiv 3660                                _EEADR 000FA9  
                    __end_of___ftadd 1D3E                                STR_10 FEA5  
                              STR_11 FF0D                                STR_12 FF76  
                              STR_20 FEFA                                STR_21 FFB9  
                              STR_13 FF1F                                STR_22 FF98  
                              STR_14 FF65                                STR_23 FF43  
                              STR_15 FEE7                                STR_16 FF87  
                              STR_17 FE8D                                STR_18 FF54  
                              STR_19 FF31                      __end_of___awmod 384C  
                    __end_of___ftdiv 298A              ??_servoInterruptService 0010  
                    __end_of___ftneg 3E8E                      __end_of___lldiv 36E2  
                    __end_of___ftmul 2274                                _T0CON 000FD5  
                    ___awdiv@divisor 002B                                _T1CON 000FCD  
                    __end_of___llmod 3922                      __end_of___ftsub 3BF0  
                    __end_of___fttol 2510                                _T3CON 000FB1  
                              i2l200 2C08                                i2l198 2C2E  
                              i2l455 3C3E                                i2l199 2BF6  
                              i2l457 3C4A                                i2l458 3C56  
                    ___awdiv@counter 002D                                _TMR0H 000FD7  
                              _TMR1H 000FCF                                _TMR0L 000FD6  
                              _TMR3H 000FB3                                _TMR1L 000FCE  
                              _TMR3L 000FB2                                _PORTA 000F80  
                              _PORTB 000F81                                _PORTC 000F82  
                              _PORTD 000F83                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                                _TRISE 000F96  
                      __CFG_PWRT$OFF 000000                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                      __end_of_lcdHome 3FAE  
                       ___lltoft@exp 0033                        _conveyorServo 016F  
                    __end_of_lcdInst 3ED2                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                      __end_of_getTime 3764  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                     showRunStats@n_AA 0100  
                   showRunStats@n_9V 0102                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                    __end_of_initLCD 3D18                       __CFG_EBTRB$OFF 000000  
                      ___awtoft@sign 002E                                _angle 0044  
                    __end_of_initRTC 3F76                      __end_of_dpowers FE07  
                              _count 0056                                _scale 1366  
                    __end_of_isdigit 3F2E                       eepromWrite@ien 0087  
                      ___ftpack@sign 0027                    ?_showErrorMessage 0001  
                              _pulse 0145                                _putch 3E8E  
                              pclath 000FFA                                tablat 000FF5  
                    __end_of_service 2C6A                   ??_showErrorMessage 003B  
                              status 000FD8                   __size_ofi2___awmod 0070  
                     __CFG_PBADEN$ON 000000                 __end_of_digitalWrite 3164  
                    __initialization 3550                         __end_of_main 1AD6  
                       __end_of_keys FE86                               ??_main 011F  
                      ___fttol@sign1 00B7                        __activetblptr 000002  
               __size_of_digitalRead 00EA                 __size_of__tdiv_to_l_ 0132  
                       _stoppingTime 016D                    ?_I2C_Master_Start 0001  
                    i2digitalWrite@p 000E                    ?_I2C_Master_Write 0024  
                 ??_I2C_Master_Start 0024                               _ADCON0 000FC2  
                             _ADCON1 000FC1                   ??_I2C_Master_Write 0026  
                             _ADCON2 000FC0                     __end_of___altoft 37DC  
                   ___llmod@dividend 0030                               ?_scale 0098  
                             _ADRESH 000FC4                               _EEADRH 000FAA  
                             _ADRESL 000FC3                               _EEDATA 000FA8  
                             _EECON1 000FA6                               _EECON2 000FA7  
      keyPressedInterruptService@key 0001                     ___awdiv@dividend 0029  
                   __end_of___awtoft 3DC8                               ?_putch 0001  
                   __end_of___ftpack 32DA                     __end_of___lltoft 3AA4  
                             _INT0IE 007F94                               _INT0IF 007F91  
                             _INT1IE 007F83                               _INT1IF 007F80  
                       sortBattery@V 0116                         sortBattery@i 0119  
                             i2l5320 31D0                               i2l5312 31B6  
                             i2l5330 31F2                               i2l5314 31BC  
                             i2l5324 31DE                               i2l5308 31A8  
                             i2l5332 31F8                               i2l5326 31E4  
                             i2l5318 31CA                               i2l5360 3860  
                             i2l5370 3882                               i2l5346 3C62  
                             i2l5372 3886                               i2l5380 38A4  
                             i2l5364 386C                               i2l5384 38B2  
                             i2l5376 389A                               i2l5368 387A  
                             i2l5624 2A92                               _TMR0IE 007F95  
                             _TMR0IF 007F92                               _TMR1IE 007CE8  
                             _TMR1IF 007CF0                               _TMR3IE 007D01  
                             _SSPADD 000FC8                               _TRISC3 007CA3  
                             _TRISC4 007CA4                               _SSPBUF 000FC9  
                   __end_of_lcdClear 3FB6                    _angleToPulse$1418 00CD  
                     __CFG_XINST$OFF 000000                 __size_of_eepromWrite 0056  
                   __end_of__powers_ FE55                               ___ftge 34C0  
                          ??___aldiv 0035                            ??___almod 002B  
                             ___wmul 3E44                            ??___awdiv 002D  
                          ??___ftadd 00A8                       __CFG_STVREN$ON 000000  
                          ??___awmod 0027                            ??___ftdiv 0080  
                          ??___ftneg 0026                            ??___lldiv 002B  
                          ??___ftmul 008F                            ??___llmod 0038  
                          ??___ftsub 003B                            ??___fttol 00B2  
                             _fround 1D3E                               clear_0 35B6  
                             clear_1 35C8                      eepromWrite@data 0080  
                   ___awdiv@quotient 002F                      ___awmod@divisor 0025  
                          ??_lcdHome 0027                      ___awmod@counter 0027  
                             _servos 014D                            ??_lcdInst 0025  
                             _printf 0012                            ??_getTime 0028  
                   __end_of_pinSetup 3D58                     __end_of_setAngle 2F02  
                  analogRead@channel 0023                ___ftmul@f3_as_product 0093  
                          ??_initLCD 0027                            ??_initRTC 0038  
                       __pdataCOMRAM 003B                            ??_isdigit 0023  
                    readPastRun@data 0082                    __end_ofi2___awmod 38BC  
                      setAngle@angle 00D6                         __mediumconst FDDE  
                       ?_showRunMenu 0001                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                       ?_showRunTime 00EF                        setAngle@motor 00D4  
                          ??_service 0014                       i2___awmod@sign 0006  
                         __accesstop 0080              __end_of__initialization 35CE  
                         ___altoft@c 002B                           ___ftadd@f1 00A2  
                         ___ftadd@f2 00A5                           ___ftge@ff1 002F  
                         ___ftge@ff2 0032                        ___rparam_used 000001  
                         ___ftdiv@f1 0035                           ___ftdiv@f2 0038  
                         ___ftdiv@f3 0084                           ___ftneg@f1 0023  
                         ___awtoft@c 002B                __size_ofi2_startTimer 004C  
                         ___ftmul@f1 0089                           ___ftmul@f2 008C  
                         ___ftsub@f1 00AE                           ___ftsub@f2 00B1  
                         ___fttol@f1 00AE                 __end_of_happynewyear FE8D  
                     __pcstackCOMRAM 0001                __size_of_angleToPulse 0158  
                       __pidataBANK0 3FC6                         __pidataBANK1 3EF2  
                         ___lltoft@c 002B                        _cylinderMotor 0173  
                      __end_of_scale 177C                         ?_sortBattery 0001  
                      __end_of_putch 3EB0                   __size_of_lcdNibble 0066  
                         __div_to_l_ 2642                    eepromRead@address 0037  
               __size_of_readPastRun 0092                      showDateTime@day 0106  
                    showDateTime@min 0102                      showDateTime@sec 0100  
                    showDateTime@mon 0108                      __div_to_l_@exp1 002E  
                    __div_to_l_@cntr 002D                              ??_scale 003B  
                    __div_to_l_@quot 0029                              ??_putch 0027  
                       i2_startTimer 3C3C                           __pbssBANK0 00FB  
                         __pbssBANK1 0145                         _angleToPulse 2274  
              __size_of_digitalWrite 00C8                   __size_of_initTimer 004A  
                 __size_of_initServo 00E2                           _analogRead 3D58  
                      __div_to_l_@f1 0023                        __div_to_l_@f2 0026  
                            ?___ftge 002F                              ?___wmul 0031  
                   _sortBattery$1417 0100                sortBattery@resolution 010C  
                        saveNewRun@i 008D                            ?___altoft 002B  
                        saveNewRun@n 008B                              ?_fround 0098  
                         _lcdNewline 3F9E                            ?___awtoft 002B  
                          ?___ftpack 0023                              ?_printf 00BD  
                          ?___lltoft 002B                           _eepromRead 3F2E  
     __size_of_servoInterruptService 010C        __end_of_servoInterruptService 2A96  
              __end_of_showInterface 2FD0                    i2startTimer@timer 0007  
                          ?_lcdClear 0001                     angleToPulse@a000 00D0  
                   angleToPulse@a180 00C9                         _digitalWrite 309C  
                            _SSPCON1 000FC6                              _SSPCON2 000FC5  
                            _SSPSTAT 000FC7              __size_ofi2_digitalWrite 00C8  
                            _V_LIM_C 0041                  main@lastBatteryTime 0135  
                          ?_pinSetup 0001                            ?_setAngle 00D4  
                  __end_of_lcdNibble 3988                    __end_of__npowers_ FE2E  
                            __Hparam 0000                           _scale$1422 009B  
              __end_of_showRunSelect 39EC                           _keyPressed 3F88  
                            __Lparam 0000                         readPastRun@i 0090  
                            ___aldiv 2FD0            __size_of_showErrorMessage 0030  
                            ___almod 32DA                      __size_of___ftge 0090  
                            ___awdiv 35DC                              ___ftadd 1AD6  
                            ___awmod 37DC                           _readKeypad 3DF8  
                            ___ftdiv 287A                              ___ftneg 3E6A  
                            ___lldiv 3660                      __size_of___wmul 0026  
                            ___ftmul 2116                              ___llmod 38BC  
                            ___ftsub 3BA4                              ___fttol 23CC  
                            _n_OTHER 0161                           ??___altoft 002F  
                            __pcinit 3550                           ??___awtoft 002E  
                         ??___ftpack 0028                      __size_of_fround 0260  
                            __ramtop 1000                              _lcdHome 3FA6  
                            _lcdInst 3EB0                           ??___lltoft 002F  
                            __ptext0 177C                              __ptext1 0E0A  
                            __ptext2 309C                              __ptext3 2A96  
                            _getTime 36E2                              __ptext4 3D58  
                            __ptext5 2F02                              __ptext6 1F9E  
                            __ptext7 32DA                              __ptext8 2FD0  
                            __ptext9 3386                        ?_showDateTime 0001  
                    __size_of_printf 0DF8                              _padPin1 004E  
                            _padPin2 0177                              _padPin3 0052  
                      startTimer@val 0025                              _initLCD 3CD2  
                  __end_of_hexpowers FE75                          ?__div_to_l_ 0023  
                            _lastKey 005C                              _initRTC 3F60  
                  __end_of_initTimer 3CD2                    __end_of_initServo 2E2E  
                            _dpowers FDDF                              _isdigit 3F10  
                   ___awmod@dividend 0023                     ___aldiv@dividend 002D  
           __size_of_I2C_Master_Init 005A             __size_of_I2C_Master_Read 0026  
                         ??_lcdClear 0027             __size_of_I2C_Master_Wait 0012  
           __size_of_I2C_Master_Stop 0008                        ?_showMainMenu 0001  
                            _service 0008                              main@run 0137  
               __size_of_showRunMenu 005C                       __pintcode_body 2B80  
               __size_of_showRunTime 0178                 end_of_initialization 35CE  
                         _saveNewRun 2C6A                        __Lmediumconst FDDE  
                            int_func 2B80                       digitalRead@pin 0023  
                        ?_analogRead 0023                           ??_pinSetup 0023  
                         ??_setAngle 00D8            __size_of_I2C_Master_Start 0008  
          __size_of_I2C_Master_Write 000A                      ___lldiv@divisor 0027  
                    ___lldiv@counter 002F                       setAngle@period 00DA  
                      ?_showRunStats 00EF                              printf@c 00EE  
                            printf@f 00BD                     ___aldiv@quotient 0037  
                   I2C_Master_Init@c 0030                     I2C_Master_Read@a 0024  
                            postdec1 000FE5                              postdec2 000FDD  
                    _batteryDetected 0159                              postinc0 000FEE  
                            postinc2 000FDE                       __tdiv_to_l_@f1 0023  
                     __tdiv_to_l_@f2 0026                        ??_digitalRead 0025  
                        ?_lcdNewline 0001                        ??__tdiv_to_l_ 0029  
                     ??_showDateTime 00EF                            _PORTBbits 000F81  
               __size_of_sortBattery 055C                     showInterface@key 0112  
                   showInterface@run 0110                          ?_eepromRead 0037  
                     ??_showMainMenu 003B         ??_keyPressedInterruptService 0001  
                _redirectAngle_OTHER 00F9                         _happynewyear FE86  
                 angleToPulse@offset 00C5                   sortBattery@V_float 0102  
                          i2___awmod 384C                           _startTimer 3BF0  
                      ??_eepromWrite 0086                          ___ftdiv@exp 0087  
                        printf@width 00E8                  __size_of__div_to_l_ 0128  
                     ??_showRunStats 003B                          ?_keyPressed 0001  
                        ___ftmul@exp 0092                          ?_readKeypad 0001  
                     __end_of___ftge 3550                       __end_of___wmul 3E6A  
                      __pidataCOMRAM 3F48  __size_of_keyPressedInterruptService 0020  
                     __end_of_fround 1F9E                       __end_of_printf 0E0A  
                __size_of_analogRead 0038                  start_initialization 3550  
                __end_of_digitalRead 2B80                  __end_of__tdiv_to_l_ 2642  
                     initServo@angle 00E0                       initTimer@timer 0023  
                     initServo@motor 00DE                           ?i2___awmod 0001  
                        ?_saveNewRun 0089                       i2_digitalWrite 3164  
                  ??_I2C_Master_Init 0034                    ??_I2C_Master_Read 0024  
                  ??_I2C_Master_Wait 0023                    ??_I2C_Master_Stop 0024  
                __size_of_lcdNewline 0008                      ___llmod@divisor 0034  
                    ___llmod@counter 0038                  __size_of_eepromRead 001A  
                         initServo@i 00E6                     showDateTime@hour 0104  
                   showDateTime@year 010A                             ??___ftge 0035  
                   _showErrorMessage 3DC8                  __end_of_eepromWrite 3B54  
                           ??___wmul 0035                          __pdataBANK0 00F5  
                        __pdataBANK1 0165                     __CFG_LPT1OSC$OFF 000000  
                           ??_fround 003B                        ??_readPastRun 003B  
                     readPastRun@run 0080                             ??_printf 00CB  
                  __size_of___altoft 0078                           fround@prec 00A1  
                  __size_of___awtoft 0038                    __size_of___ftpack 00AE  
                  __size_of___lltoft 005C                          __pbssCOMRAM 0052  
                      __pcstackBANK0 0080                        __pcstackBANK1 0100  
                __size_of_keyPressed 000C               __end_ofi2_digitalWrite 322C  
             sortBattery@targetAngle 0114                         _isdigit$1052 0024  
                      keyPressed@key 0023                          ?_startTimer 0023  
                  __size_of_lcdClear 0008                  __size_of_readKeypad 0026  
               __end_of_showDateTime 287A                    i2digitalWrite@pin 0007  
                  i2digitalWrite@val 0009                     _I2C_Master_Start 3FBE  
                   _I2C_Master_Write 3F94                            _main$1416 0131  
                  __CFG_CCP2MX$PORTC 000000                    __size_of_pinSetup 0040  
               __end_of_showMainMenu 3BA4                    __size_of_setAngle 00D4  
                          __pintcode 0008                        __pmediumconst FDDE  
                          _lcdNibble 3922                             ?___aldiv 002D  
                           ?___almod 0023                             ?___awdiv 0029  
                           ?___ftadd 00A2                             ?___awmod 0023  
                           ?___ftdiv 0035                             ?___ftneg 0023  
                           ?___lldiv 0023                             ?___ftmul 0089  
                           ?___llmod 0030                             ?___ftsub 00AE  
                          __npowers_ FE07                             ?___fttol 00AE  
                        _digitalRead 2A96                  __size_of_saveNewRun 00E2  
                   ___almod@dividend 0023                             ?_lcdHome 0001  
                           ?_lcdInst 0001                          __tdiv_to_l_ 2510  
                           ?_getTime 0026                         ??__div_to_l_ 0029  
                           ?_initLCD 0001                             ?_initRTC 0001  
                    startTimer@timer 0023                             ?_isdigit 0001  
 __end_of_keyPressedInterruptService 3EF2           _keyPressedInterruptService 3ED2  
                __end_of_readPastRun 34C0                 __end_of_showRunStats 342E  
                           ?_service 0001                            _hexpowers FE55  
                          _initTimer 3C88                            _initServo 2D4C  
                    ?i2_digitalWrite 0007                _servoInterruptService 298A  
                        ??i2___awmod 0005                       __size_of_scale 0416  
                     __size_of_putch 0022                             _AA_float 004A  
                 eepromWrite@address 0082                      ___aldiv@divisor 0031  
                    ___aldiv@counter 0035                       sortBattery@Vcc 0109  
                     ___wmul@product 0035                             _LATDbits 000F8C  
                       ??_analogRead 0027                          _eepromWrite 3AFE  
                 __end_of__div_to_l_ 276A                             i2u507_44 318E  
                           i2u507_45 3188               __size_of_showInterface 00CE  
                   __CFG_WDTPS$32768 000000                           ?_lcdNibble 0001  
                     _padAngle_CLOSE 00F5                            _terminate 0163  
                      digitalWrite@p 002A                           service@key 0022  
                       ??_lcdNewline 0027                  __size_of_startTimer 004C  
                  angleToPulse@angle 00BD                      main@cylinderDur 012B  
                  ___wmul@multiplier 0031                        lcdNibble@data 0024  
                       ??_eepromRead 003B                           printf@flag 00EA  
                      lcdNibble@temp 0023                           printf@fval 00E1  
                         printf@prec 00EC                        ??_showRunMenu 003B  
                      ??_showRunTime 00F1                   __end_of_analogRead 3D90  
                           _V_LIM_AA 003E                             _V_LIM_9V 003B  
             __size_of_showRunSelect 0064                       saveNewRun@data 0089  
                         ?_initTimer 0023                           ?_initServo 00DE  
                  sortBattery@signal 0107             sortBattery@pos_v_counter 0105  
                I2C_Master_Read@temp 0025                            copy_data0 3564  
                          copy_data1 3584                            copy_data2 35A4  
                 i2___awmod@dividend 0001                   __end_of_lcdNewline 3FA6  
                      readKeypad@key 0023                             __Hrparam 0000  
                       ??_keyPressed 0023                             __Lrparam 0000  
                 __end_of_eepromRead 3F48                   __CFG_BOREN$SBORDIS 000000  
                       ??_readKeypad 0023                  showRunStats@n_OTHER 0106  
                      ??_sortBattery 00EF                     __size_of___aldiv 00CC  
                   __size_of___almod 00AC                     __size_of___awdiv 0084  
                   __size_of___ftadd 0268                     __size_of___awmod 0070  
                   __size_of___ftdiv 0110                     __size_of___ftneg 0024  
                   __size_of___lldiv 0082                             ___altoft 3764  
                   __size_of___ftmul 015E                     __size_of___llmod 0066  
                   __size_of___ftsub 004C                     __size_of___fttol 0144  
                           ___awtoft 3D90                             ___ftpack 322C  
                        _readPastRun 342E                          _fround$1420 009E  
                        _fround$1421 009B                          _cylinderDir 0165  
                           ___lltoft 3A48                     __size_of_lcdHome 0008  
                   __size_of_lcdInst 0022                     __size_of_getTime 0082  
                      showDateTime@t 010C                            setAngle@i 00DC  
                    _I2C_Master_Init 3AA4                      _I2C_Master_Read 3E1E  
                   __size_of_initLCD 0046                      _I2C_Master_Wait 3F76  
                   __size_of_initRTC 0016                      _I2C_Master_Stop 3FB6  
                   __size_of_isdigit 001E               ?_servoInterruptService 0001  
                      _showInterface 2F02                             _lcdClear 3FAE  
                           __ptext10 3988                             __ptext11 39EC  
                           __ptext20 3F10                             __ptext12 3B54  
                           __ptext21 1D3E                             __ptext13 3DC8  
                           __ptext30 34C0                             __ptext22 37DC  
                           __ptext14 3DF8                             __ptext31 3FA6  
                           __ptext23 35DC                             __ptext15 276A  
                           __ptext40 3FBE                             __ptext32 3FAE  
                           __ptext24 2510                             __ptext16 0012  
                           __ptext41 3E1E                             __ptext33 3F88  
                           __ptext25 2642                             __ptext17 1366  
                           __ptext50 3BF0                             __ptext42 3F76  
                           __ptext34 3F60                             __ptext26 3A48  
                           __ptext18 3E8E                             __ptext51 2E2E  
                           __ptext43 342E                             __ptext35 3AA4  
                           __ptext27 38BC                             __ptext19 3F9E  
                           __ptext60 3C88                             __ptext52 2274  
                           __ptext44 2C6A                             __ptext36 3660  
                           __ptext28 3BA4                             __ptext61 3CD2  
                           __ptext53 23CC                             __ptext45 3AFE  
                           __ptext37 36E2                             __ptext29 3E6A  
                           __ptext62 3EB0                             __ptext54 2116  
                           __ptext46 3F2E                             __ptext38 3F94  
                           __ptext63 3922                             __ptext55 287A  
                           __ptext47 3E44                             __ptext39 3FB6  
                           __ptext56 1AD6                             __ptext48 3D18  
                           __ptext65 298A                             __ptext57 3D90  
                           __ptext49 2D4C                             __ptext66 3C3C  
                           __ptext58 3764                             __ptext67 3164  
                           __ptext59 322C                             __ptext68 384C  
                           __ptext69 3ED2             __end_of_showErrorMessage 3DF8  
                 __end_of_keyPressed 3F94                __size_of_showDateTime 0110  
                           __powers_ FE2E                     __size_of_service 2C62  
                    i2startTimer@val 0009                      ___almod@divisor 0027  
                       ??_saveNewRun 003B                        ?i2_startTimer 0007  
                           _padServo 017B                      ___almod@counter 002B  
                __end_of_showRunMenu 3A48                   __end_of_readKeypad 3E1E  
                __end_of_showRunTime 2116                        ?_angleToPulse 00BD  
                      __size_of_main 035A                __size_of_showMainMenu 0050  
                           _pinSetup 3D18                             _setAngle 2E2E  
                      _showRunSelect 3988                             _prevTime 005A  
                   sortBattery@V_244 011C                          ??_lcdNibble 0023  
                           getTime@i 0038                       showInterface@n 010E  
                      _padAngle_OPEN 0046                             int$flags 005D  
                   sortBattery@i_249 0112                     sortBattery@V_max 010F  
                          printf@idx 00D4                            printf@len 00D7  
                          printf@exp 00DF                            printf@val 00E4  
                      showMainMenu@k 00EF                   __end_of_saveNewRun 2D4C  
              __size_of_showRunStats 00A8                         _showDateTime 276A  
                  i2___awmod@divisor 0003                            putch@data 0027  
                  i2___awmod@counter 0005             __end_of_I2C_Master_Start 3FC6  
                __end_of_sortBattery 1366             __end_of_I2C_Master_Write 3F9E  
                         _INTCONbits 000FF2                       ?_showInterface 0001  
                      ?_digitalWrite 0023                          ??_initTimer 0025  
                        ??_initServo 00E2                             isdigit@c 0025  
                       _showMainMenu 3B54                             scale@scl 009E  
                     ??i2_startTimer 000D                         ??_startTimer 0029  
                           intlevel2 0000                     __tdiv_to_l_@exp1 0031  
                   __tdiv_to_l_@cntr 0030                       ??_angleToPulse 00C1  
                   __tdiv_to_l_@quot 002C                     ___lldiv@dividend 0023  
                   _showRunTime$1419 0100                       ?_showRunSelect 0001  
                       _showRunStats 3386                     _redirectAngle_AA 016B  
                   _redirectAngle_9V 0048                             printf@ap 00D9  
                           printf@cp 00D5              __end_of_I2C_Master_Init 3AFE  
            __end_of_I2C_Master_Read 3E44              __end_of_I2C_Master_Wait 3F88  
            __end_of_I2C_Master_Stop 3FBE                          lcdInst@data 0026  
                       ?_digitalRead 0023                         ?__tdiv_to_l_ 0023  
                 __end_of_startTimer 3C3C                          _printf$1423 00D1  
                   ??i2_digitalWrite 000B                     ___lldiv@quotient 002B  
                  I2C_Master_Write@d 0024                       ??_digitalWrite 0027  
        ?_keyPressedInterruptService 0001                         ___aldiv@sign 0036  
                        _showRunMenu 39EC                          _showRunTime 1F9E  
                    _redirectAngle_C 00F7                          getTime@time 002A  
                   _padAngle_NEUTRAL 0169                      digitalWrite@pin 0023  
                    digitalWrite@val 0025                         ___almod@sign 002C  
                       ?_eepromWrite 0080                         showRunMenu@k 00F0  
                     showRunMenu@key 00EF  
